
LR111x_L552VE_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018d8  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0c001acc  0c001acc  00011acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c001b1c  0c001b1c  0002e040  2**0
                  CONTENTS
  4 .ARM          00000000  0c001b1c  0c001b1c  0002e040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c001b1c  0c001b1c  0002e040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c001b1c  0c001b1c  00011b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c001b20  0c001b20  00011b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  30000000  0c001b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000040  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          0000009c  3000000c  3000000c  0003000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  300000a8  300000a8  0003000c  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000da08  00000000  00000000  0002e076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002819  00000000  00000000  0003ba7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0003e298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a58  00000000  00000000  0003ebc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092bf  00000000  00000000  0003f620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000040dc  00000000  00000000  000488df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0004c9bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001628  00000000  00000000  0004ca10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00004cb5  00000000  00000000  0004e038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	e000      	b.n	c000206 <__do_global_dtors_aux+0x12>
 c000204:	bf00      	nop
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	3000000c 	.word	0x3000000c
 c000210:	00000000 	.word	0x00000000
 c000214:	0c001ab4 	.word	0x0c001ab4

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	e000      	b.n	c000226 <frame_dummy+0xe>
 c000224:	bf00      	nop
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	30000010 	.word	0x30000010
 c000230:	0c001ab4 	.word	0x0c001ab4

0c000234 <__gnu_cmse_nonsecure_call>:
 c000234:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000238:	4627      	mov	r7, r4
 c00023a:	46a0      	mov	r8, r4
 c00023c:	46a1      	mov	r9, r4
 c00023e:	46a2      	mov	sl, r4
 c000240:	46a3      	mov	fp, r4
 c000242:	46a4      	mov	ip, r4
 c000244:	ed2d 8b10 	vpush	{d8-d15}
 c000248:	f04f 0500 	mov.w	r5, #0
 c00024c:	ec45 5b18 	vmov	d8, r5, r5
 c000250:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000254:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000258:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00025c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000260:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000264:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000268:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00026c:	eef1 5a10 	vmrs	r5, fpscr
 c000270:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000274:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000278:	4035      	ands	r5, r6
 c00027a:	eee1 5a10 	vmsr	fpscr, r5
 c00027e:	f384 8800 	msr	CPSR_f, r4
 c000282:	4625      	mov	r5, r4
 c000284:	4626      	mov	r6, r4
 c000286:	47a4      	blxns	r4
 c000288:	ecbd 8b10 	vpop	{d8-d15}
 c00028c:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000290 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 c000290:	4b0f      	ldr	r3, [pc, #60]	; (c0002d0 <MX_DMA_Init+0x40>)
{
 c000292:	b084      	sub	sp, #16
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 c000294:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c000296:	f042 0204 	orr.w	r2, r2, #4
 c00029a:	649a      	str	r2, [r3, #72]	; 0x48
 c00029c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c00029e:	f002 0204 	and.w	r2, r2, #4
 c0002a2:	9201      	str	r2, [sp, #4]
 c0002a4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 c0002a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c0002a8:	f042 0201 	orr.w	r2, r2, #1
 c0002ac:	649a      	str	r2, [r3, #72]	; 0x48
 c0002ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c0002b0:	f002 0201 	and.w	r2, r2, #1
 c0002b4:	9202      	str	r2, [sp, #8]
 c0002b6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 c0002b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c0002ba:	f042 0202 	orr.w	r2, r2, #2
 c0002be:	649a      	str	r2, [r3, #72]	; 0x48
 c0002c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0002c2:	f003 0302 	and.w	r3, r3, #2
 c0002c6:	9303      	str	r3, [sp, #12]
 c0002c8:	9b03      	ldr	r3, [sp, #12]

}
 c0002ca:	b004      	add	sp, #16
 c0002cc:	4770      	bx	lr
 c0002ce:	bf00      	nop
 c0002d0:	50021000 	.word	0x50021000

0c0002d4 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 c0002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 c0002d6:	b08d      	sub	sp, #52	; 0x34

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c0002d8:	2214      	movs	r2, #20
 c0002da:	2100      	movs	r1, #0
 c0002dc:	a807      	add	r0, sp, #28
 c0002de:	f001 fbe1 	bl	c001aa4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 c0002e2:	4b3b      	ldr	r3, [pc, #236]	; (c0003d0 <MX_GPIO_Init+0xfc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB1_TX_Pin|MB1_RX_Pin, GPIO_PIN_SET);
 c0002e4:	4f3b      	ldr	r7, [pc, #236]	; (c0003d4 <MX_GPIO_Init+0x100>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 c0002e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 c0002e8:	4d3b      	ldr	r5, [pc, #236]	; (c0003d8 <MX_GPIO_Init+0x104>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 c0002ea:	f042 0210 	orr.w	r2, r2, #16
 c0002ee:	64da      	str	r2, [r3, #76]	; 0x4c
 c0002f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOA, MB1_TX_Pin|MB1_RX_Pin, GPIO_PIN_SET);
 c0002f2:	4638      	mov	r0, r7
  __HAL_RCC_GPIOE_CLK_ENABLE();
 c0002f4:	f002 0210 	and.w	r2, r2, #16
 c0002f8:	9201      	str	r2, [sp, #4]
 c0002fa:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c0002fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOA, MB1_TX_Pin|MB1_RX_Pin, GPIO_PIN_SET);
 c0002fe:	210c      	movs	r1, #12
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000300:	f042 0204 	orr.w	r2, r2, #4
 c000304:	64da      	str	r2, [r3, #76]	; 0x4c
 c000306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_ConfigPinAttributes(GPIOD, LR_RFSW2_Pin|LR_RFSW3_Pin|LR_IRQ_Pin|LR_NSS_Pin
                          |LR_BUSY_Pin|LR_NRST_Pin, GPIO_PIN_NSEC);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MB1_TX_Pin|MB1_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000308:	2601      	movs	r6, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c00030a:	f002 0204 	and.w	r2, r2, #4
 c00030e:	9202      	str	r2, [sp, #8]
 c000310:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c000312:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000314:	2400      	movs	r4, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c000316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 c00031a:	64da      	str	r2, [r3, #76]	; 0x4c
 c00031c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c00031e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 c000322:	9203      	str	r2, [sp, #12]
 c000324:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c000328:	f042 0201 	orr.w	r2, r2, #1
 c00032c:	64da      	str	r2, [r3, #76]	; 0x4c
 c00032e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c000330:	f002 0201 	and.w	r2, r2, #1
 c000334:	9204      	str	r2, [sp, #16]
 c000336:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000338:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c00033a:	f042 0202 	orr.w	r2, r2, #2
 c00033e:	64da      	str	r2, [r3, #76]	; 0x4c
 c000340:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c000342:	f002 0202 	and.w	r2, r2, #2
 c000346:	9205      	str	r2, [sp, #20]
 c000348:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c00034a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c00034c:	f042 0208 	orr.w	r2, r2, #8
 c000350:	64da      	str	r2, [r3, #76]	; 0x4c
 c000352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOA, MB1_TX_Pin|MB1_RX_Pin, GPIO_PIN_SET);
 c000354:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c000356:	f003 0308 	and.w	r3, r3, #8
 c00035a:	9306      	str	r3, [sp, #24]
 c00035c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOA, MB1_TX_Pin|MB1_RX_Pin, GPIO_PIN_SET);
 c00035e:	f000 fd8f 	bl	c000e80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 c000362:	4628      	mov	r0, r5
 c000364:	2200      	movs	r2, #0
 c000366:	2101      	movs	r1, #1
 c000368:	f000 fd8a 	bl	c000e80 <HAL_GPIO_WritePin>
  HAL_GPIO_ConfigPinAttributes(GPIOE, GYO_INT2_Pin|ENCODER_P_Pin|ENCODER_N_Pin|GYO_DEN_Pin, GPIO_PIN_NSEC);
 c00036c:	4628      	mov	r0, r5
 c00036e:	2200      	movs	r2, #0
 c000370:	f640 210a 	movw	r1, #2570	; 0xa0a
 c000374:	f000 fd92 	bl	c000e9c <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOA, CURRENT_CS_Pin|CURRENT_SCK_Pin|CURRENT_MISO_Pin|CURRENT_AN_Pin
 c000378:	4638      	mov	r0, r7
 c00037a:	2200      	movs	r2, #0
 c00037c:	f248 01f0 	movw	r1, #33008	; 0x80f0
 c000380:	f000 fd8c 	bl	c000e9c <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOC, EXT_TX_Pin|EXT_RX_Pin|LR_SCK_Pin|LR_MISO_Pin
 c000384:	2200      	movs	r2, #0
 c000386:	f641 4130 	movw	r1, #7216	; 0x1c30
 c00038a:	4814      	ldr	r0, [pc, #80]	; (c0003dc <MX_GPIO_Init+0x108>)
 c00038c:	f000 fd86 	bl	c000e9c <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB, EXT_AN_Pin|DBG_RX_Pin|DBG_TX_Pin|GPIO_PIN_14
 c000390:	2200      	movs	r2, #0
 c000392:	f64c 7122 	movw	r1, #53026	; 0xcf22
 c000396:	4812      	ldr	r0, [pc, #72]	; (c0003e0 <MX_GPIO_Init+0x10c>)
 c000398:	f000 fd80 	bl	c000e9c <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOD, LR_RFSW2_Pin|LR_RFSW3_Pin|LR_IRQ_Pin|LR_NSS_Pin
 c00039c:	2200      	movs	r2, #0
 c00039e:	f247 0107 	movw	r1, #28679	; 0x7007
 c0003a2:	4810      	ldr	r0, [pc, #64]	; (c0003e4 <MX_GPIO_Init+0x110>)
 c0003a4:	f000 fd7a 	bl	c000e9c <HAL_GPIO_ConfigPinAttributes>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c0003a8:	230c      	movs	r3, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c0003aa:	4638      	mov	r0, r7
 c0003ac:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c0003ae:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0003b2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c0003b6:	f000 fc99 	bl	c000cec <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 c0003ba:	4628      	mov	r0, r5
 c0003bc:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c0003be:	e9cd 6607 	strd	r6, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0003c2:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 c0003c6:	f000 fc91 	bl	c000cec <HAL_GPIO_Init>

}
 c0003ca:	b00d      	add	sp, #52	; 0x34
 c0003cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 c0003ce:	bf00      	nop
 c0003d0:	50021000 	.word	0x50021000
 c0003d4:	52020000 	.word	0x52020000
 c0003d8:	52021000 	.word	0x52021000
 c0003dc:	52020800 	.word	0x52020800
 c0003e0:	52020400 	.word	0x52020400
 c0003e4:	52020c00 	.word	0x52020c00

0c0003e8 <MX_GTZC_S_Init>:

/* USER CODE END 0 */

/* GTZC_S init function */
void MX_GTZC_S_Init(void)
{
 c0003e8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c0003ea:	f04f 33ff 	mov.w	r3, #4294967295
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c0003ee:	2400      	movs	r4, #0
{
 c0003f0:	b09c      	sub	sp, #112	; 0x70
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0003f2:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c0003f6:	a901      	add	r1, sp, #4
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c0003f8:	e9cd 4401 	strd	r4, r4, [sp, #4]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c0003fc:	e9cd 3303 	strd	r3, r3, [sp, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c000400:	e9cd 3305 	strd	r3, r3, [sp, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c000404:	e9cd 3307 	strd	r3, r3, [sp, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c000408:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c00040c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c000410:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c000414:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c000418:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c00041c:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c000420:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c000424:	e9cd 4417 	strd	r4, r4, [sp, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c000428:	e9cd 4419 	strd	r4, r4, [sp, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c00042c:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c00042e:	f000 fd49 	bl	c000ec4 <HAL_GTZC_MPCBB_ConfigMem>
 c000432:	b108      	cbz	r0, c000438 <MX_GTZC_S_Init+0x50>
  {
    Error_Handler();
 c000434:	f000 f81e 	bl	c000474 <Error_Handler>
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000438:	4808      	ldr	r0, [pc, #32]	; (c00045c <MX_GTZC_S_Init+0x74>)
 c00043a:	a901      	add	r1, sp, #4
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c00043c:	e9cd 4403 	strd	r4, r4, [sp, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000440:	e9cd 4405 	strd	r4, r4, [sp, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000444:	e9cd 4407 	strd	r4, r4, [sp, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000448:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c00044c:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c00044e:	f000 fd39 	bl	c000ec4 <HAL_GTZC_MPCBB_ConfigMem>
 c000452:	b108      	cbz	r0, c000458 <MX_GTZC_S_Init+0x70>
  {
    Error_Handler();
 c000454:	f000 f80e 	bl	c000474 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000458:	b01c      	add	sp, #112	; 0x70
 c00045a:	bd10      	pop	{r4, pc}
 c00045c:	30030000 	.word	0x30030000

0c000460 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 c000460:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 c000462:	f000 fdab 	bl	c000fbc <HAL_ICACHE_Enable>
 c000466:	b118      	cbz	r0, c000470 <MX_ICACHE_Init+0x10>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c000468:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 c00046c:	f000 b802 	b.w	c000474 <Error_Handler>
}
 c000470:	bd08      	pop	{r3, pc}
	...

0c000474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000474:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 c000476:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(MB1_RX_GPIO_Port, MB1_RX_Pin);
 c000478:	4c04      	ldr	r4, [pc, #16]	; (c00048c <Error_Handler+0x18>)
 c00047a:	4620      	mov	r0, r4
 c00047c:	2108      	movs	r1, #8
 c00047e:	f000 fd04 	bl	c000e8a <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 c000482:	20c8      	movs	r0, #200	; 0xc8
 c000484:	f000 fbba 	bl	c000bfc <HAL_Delay>
  while (1)
 c000488:	e7f7      	b.n	c00047a <Error_Handler+0x6>
 c00048a:	bf00      	nop
 c00048c:	52020000 	.word	0x52020000

0c000490 <SystemClock_Config>:
{
 c000490:	b500      	push	{lr}
 c000492:	b099      	sub	sp, #100	; 0x64
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c000494:	2248      	movs	r2, #72	; 0x48
 c000496:	2100      	movs	r1, #0
 c000498:	a806      	add	r0, sp, #24
 c00049a:	f001 fb03 	bl	c001aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c00049e:	2214      	movs	r2, #20
 c0004a0:	2100      	movs	r1, #0
 c0004a2:	a801      	add	r0, sp, #4
 c0004a4:	f001 fafe 	bl	c001aa4 <memset>
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c0004a8:	2000      	movs	r0, #0
 c0004aa:	f000 fdd1 	bl	c001050 <HAL_PWREx_ControlVoltageScaling>
 c0004ae:	b108      	cbz	r0, c0004b4 <SystemClock_Config+0x24>
    Error_Handler();
 c0004b0:	f7ff ffe0 	bl	c000474 <Error_Handler>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 c0004b4:	232a      	movs	r3, #42	; 0x2a
 c0004b6:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c0004b8:	f44f 7380 	mov.w	r3, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 c0004bc:	2240      	movs	r2, #64	; 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c0004be:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 c0004c0:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLN = 55;
 c0004c2:	2137      	movs	r1, #55	; 0x37
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 c0004c4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 55;
 c0004c8:	2204      	movs	r2, #4
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 c0004ca:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 55;
 c0004cc:	e9cd 2113 	strd	r2, r1, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0004d0:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c0004d2:	2107      	movs	r1, #7
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 c0004d4:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0004d6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 c0004d8:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 c0004dc:	e9cd 1215 	strd	r1, r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c0004e0:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0004e2:	f000 fe93 	bl	c00120c <HAL_RCC_OscConfig>
 c0004e6:	2800      	cmp	r0, #0
 c0004e8:	d1e2      	bne.n	c0004b0 <SystemClock_Config+0x20>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c0004ea:	220f      	movs	r2, #15
 c0004ec:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c0004ee:	e9cd 0003 	strd	r0, r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c0004f2:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c0004f4:	2105      	movs	r1, #5
 c0004f6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c0004f8:	e9cd 2301 	strd	r2, r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c0004fc:	f001 f97a 	bl	c0017f4 <HAL_RCC_ClockConfig>
 c000500:	2800      	cmp	r0, #0
 c000502:	d1d5      	bne.n	c0004b0 <SystemClock_Config+0x20>
}
 c000504:	b019      	add	sp, #100	; 0x64
 c000506:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0c00050c <main>:
	 SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c00050c:	4a22      	ldr	r2, [pc, #136]	; (c000598 <main+0x8c>)
{
 c00050e:	b508      	push	{r3, lr}
	 SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c000510:	6a53      	ldr	r3, [r2, #36]	; 0x24
 c000512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c000516:	6253      	str	r3, [r2, #36]	; 0x24
  HAL_Init();
 c000518:	f000 fb4c 	bl	c000bb4 <HAL_Init>
  SystemClock_Config();
 c00051c:	f7ff ffb8 	bl	c000490 <SystemClock_Config>
  MX_GTZC_S_Init();
 c000520:	f7ff ff62 	bl	c0003e8 <MX_GTZC_S_Init>
  MX_GPIO_Init();
 c000524:	f7ff fed6 	bl	c0002d4 <MX_GPIO_Init>
  MX_DMA_Init();
 c000528:	f7ff feb2 	bl	c000290 <MX_DMA_Init>
  MX_RTC_Init();
 c00052c:	f000 f83c 	bl	c0005a8 <MX_RTC_Init>
  MX_ICACHE_Init();
 c000530:	f7ff ff96 	bl	c000460 <MX_ICACHE_Init>
  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c000534:	4b19      	ldr	r3, [pc, #100]	; (c00059c <main+0x90>)
 c000536:	4a1a      	ldr	r2, [pc, #104]	; (c0005a0 <main+0x94>)
 c000538:	6093      	str	r3, [r2, #8]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c00053a:	681b      	ldr	r3, [r3, #0]
 c00053c:	f383 8888 	msr	MSP_NS, r3
  NonSecure_ResetHandler();
 c000540:	4b18      	ldr	r3, [pc, #96]	; (c0005a4 <main+0x98>)
 c000542:	681c      	ldr	r4, [r3, #0]
 c000544:	0864      	lsrs	r4, r4, #1
 c000546:	0064      	lsls	r4, r4, #1
 c000548:	4620      	mov	r0, r4
 c00054a:	4621      	mov	r1, r4
 c00054c:	4622      	mov	r2, r4
 c00054e:	4623      	mov	r3, r4
 c000550:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000554:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000558:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00055c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000560:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000564:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000568:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00056c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000570:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000574:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000578:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00057c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000580:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00058c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000590:	f7ff fe50 	bl	c000234 <__gnu_cmse_nonsecure_call>
  while (1)
 c000594:	e7fe      	b.n	c000594 <main+0x88>
 c000596:	bf00      	nop
 c000598:	e000ed00 	.word	0xe000ed00
 c00059c:	08040000 	.word	0x08040000
 c0005a0:	e002ed00 	.word	0xe002ed00
 c0005a4:	08040004 	.word	0x08040004

0c0005a8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 c0005a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_SecureStateTypeDef secureState = {0};
  RTC_PrivilegeStateTypeDef privilegeState = {0};
 c0005aa:	2218      	movs	r2, #24
  RTC_SecureStateTypeDef secureState = {0};
 c0005ac:	2400      	movs	r4, #0
{
 c0005ae:	b08c      	sub	sp, #48	; 0x30
  RTC_PrivilegeStateTypeDef privilegeState = {0};
 c0005b0:	4621      	mov	r1, r4
 c0005b2:	eb0d 0002 	add.w	r0, sp, r2
  RTC_SecureStateTypeDef secureState = {0};
 c0005b6:	9403      	str	r4, [sp, #12]
  RTC_PrivilegeStateTypeDef privilegeState = {0};
 c0005b8:	f001 fa74 	bl	c001aa4 <memset>

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  secureState.rtcSecureFull = RTC_SECURE_FULL_NO;
  secureState.rtcNonSecureFeatures = RTC_NONSECURE_FEATURE_NONE|RTC_NONSECURE_FEATURE_ALRB
 c0005bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 c0005c0:	f246 030f 	movw	r3, #24591	; 0x600f
                              |RTC_NONSECURE_FEATURE_WUT|RTC_NONSECURE_FEATURE_INIT
                              |RTC_NONSECURE_FEATURE_CAL|RTC_NONSECURE_FEATURE_ALRA
                              |RTC_NONSECURE_FEATURE_TS;
  secureState.backupRegisterStartZone2 = RTC_BKP_DR0;
  secureState.backupRegisterStartZone3 = RTC_BKP_DR0;
  if (HAL_RTCEx_SecureModeSet(&hrtc, &secureState) != HAL_OK)
 c0005c4:	480b      	ldr	r0, [pc, #44]	; (c0005f4 <MX_RTC_Init+0x4c>)
 c0005c6:	a901      	add	r1, sp, #4
  secureState.rtcNonSecureFeatures = RTC_NONSECURE_FEATURE_NONE|RTC_NONSECURE_FEATURE_ALRB
 c0005c8:	e9cd 2301 	strd	r2, r3, [sp, #4]
  secureState.backupRegisterStartZone3 = RTC_BKP_DR0;
 c0005cc:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if (HAL_RTCEx_SecureModeSet(&hrtc, &secureState) != HAL_OK)
 c0005d0:	f001 fa14 	bl	c0019fc <HAL_RTCEx_SecureModeSet>
 c0005d4:	b108      	cbz	r0, c0005da <MX_RTC_Init+0x32>
  {
    Error_Handler();
 c0005d6:	f7ff ff4d 	bl	c000474 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 c0005da:	4806      	ldr	r0, [pc, #24]	; (c0005f4 <MX_RTC_Init+0x4c>)
 c0005dc:	a906      	add	r1, sp, #24
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 c0005de:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 c0005e2:	9406      	str	r4, [sp, #24]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 c0005e4:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 c0005e6:	f001 fa1f 	bl	c001a28 <HAL_RTCEx_PrivilegeModeSet>
 c0005ea:	b108      	cbz	r0, c0005f0 <MX_RTC_Init+0x48>
  {
    Error_Handler();
 c0005ec:	f7ff ff42 	bl	c000474 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 c0005f0:	b00c      	add	sp, #48	; 0x30
 c0005f2:	bd10      	pop	{r4, pc}
 c0005f4:	30000030 	.word	0x30000030

0c0005f8 <__acle_se_SECURE_RegisterCallback>:
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
  if(func != NULL)
 c0005f8:	b111      	cbz	r1, c000600 <__acle_se_SECURE_RegisterCallback+0x8>
  {
    switch(CallbackId)
 c0005fa:	b3a8      	cbz	r0, c000668 <__acle_se_SECURE_RegisterCallback+0x70>
 c0005fc:	2801      	cmp	r0, #1
 c0005fe:	d036      	beq.n	c00066e <__acle_se_SECURE_RegisterCallback+0x76>
      default:
        /* unknown */
        break;
    }
  }
}
 c000600:	4670      	mov	r0, lr
 c000602:	4671      	mov	r1, lr
 c000604:	4672      	mov	r2, lr
 c000606:	4673      	mov	r3, lr
 c000608:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00060c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000610:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000614:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000618:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00061c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000620:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000624:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000628:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00062c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000630:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000634:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000638:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00063c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000644:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000648:	f38e 8c00 	msr	CPSR_fs, lr
 c00064c:	b410      	push	{r4}
 c00064e:	eef1 ca10 	vmrs	ip, fpscr
 c000652:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000656:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00065a:	ea0c 0c04 	and.w	ip, ip, r4
 c00065e:	eee1 ca10 	vmsr	fpscr, ip
 c000662:	bc10      	pop	{r4}
 c000664:	46f4      	mov	ip, lr
 c000666:	4774      	bxns	lr
        pSecureFaultCallback = func;
 c000668:	4b02      	ldr	r3, [pc, #8]	; (c000674 <__acle_se_SECURE_RegisterCallback+0x7c>)
        pSecureErrorCallback = func;
 c00066a:	6019      	str	r1, [r3, #0]
}
 c00066c:	e7c8      	b.n	c000600 <__acle_se_SECURE_RegisterCallback+0x8>
        pSecureErrorCallback = func;
 c00066e:	4b02      	ldr	r3, [pc, #8]	; (c000678 <__acle_se_SECURE_RegisterCallback+0x80>)
 c000670:	e7fb      	b.n	c00066a <__acle_se_SECURE_RegisterCallback+0x72>
 c000672:	bf00      	nop
 c000674:	3000002c 	.word	0x3000002c
 c000678:	30000028 	.word	0x30000028

0c00067c <__acle_se_SECURE_LEDToggle_RED>:

/**
  * @}
  */
CMSE_NS_ENTRY/*secureportNON_SECURE_CALLABLE*/ void SECURE_LEDToggle_RED(void)
{
 c00067c:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(MB1_RX_GPIO_Port, MB1_RX_Pin);
 c00067e:	2108      	movs	r1, #8
 c000680:	481c      	ldr	r0, [pc, #112]	; (c0006f4 <__acle_se_SECURE_LEDToggle_RED+0x78>)
 c000682:	f000 fc02 	bl	c000e8a <HAL_GPIO_TogglePin>
}
 c000686:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 c00068a:	4670      	mov	r0, lr
 c00068c:	4671      	mov	r1, lr
 c00068e:	4672      	mov	r2, lr
 c000690:	4673      	mov	r3, lr
 c000692:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000696:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00069a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00069e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0006a2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0006a6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0006aa:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0006ae:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0006b2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0006b6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0006ba:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0006be:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0006c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0006c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0006ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0006ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0006d2:	f38e 8c00 	msr	CPSR_fs, lr
 c0006d6:	b410      	push	{r4}
 c0006d8:	eef1 ca10 	vmrs	ip, fpscr
 c0006dc:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0006e0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0006e4:	ea0c 0c04 	and.w	ip, ip, r4
 c0006e8:	eee1 ca10 	vmsr	fpscr, ip
 c0006ec:	bc10      	pop	{r4}
 c0006ee:	46f4      	mov	ip, lr
 c0006f0:	4774      	bxns	lr
 c0006f2:	bf00      	nop
 c0006f4:	52020000 	.word	0x52020000

0c0006f8 <__acle_se_SECURE_LED_RED>:

CMSE_NS_ENTRY/*secureportNON_SECURE_CALLABLE*/ void SECURE_LED_RED(bool onoff)
{
 c0006f8:	b508      	push	{r3, lr}
 c0006fa:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(MB1_RX_GPIO_Port, MB1_RX_Pin, onoff);
 c0006fc:	2108      	movs	r1, #8
 c0006fe:	481c      	ldr	r0, [pc, #112]	; (c000770 <__acle_se_SECURE_LED_RED+0x78>)
 c000700:	f000 fbbe 	bl	c000e80 <HAL_GPIO_WritePin>
}
 c000704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 c000708:	4670      	mov	r0, lr
 c00070a:	4671      	mov	r1, lr
 c00070c:	4672      	mov	r2, lr
 c00070e:	4673      	mov	r3, lr
 c000710:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000714:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000718:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00071c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000720:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000724:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000728:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00072c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000730:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000734:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000738:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00073c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000740:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000744:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000748:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00074c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000750:	f38e 8c00 	msr	CPSR_fs, lr
 c000754:	b410      	push	{r4}
 c000756:	eef1 ca10 	vmrs	ip, fpscr
 c00075a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00075e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000762:	ea0c 0c04 	and.w	ip, ip, r4
 c000766:	eee1 ca10 	vmsr	fpscr, ip
 c00076a:	bc10      	pop	{r4}
 c00076c:	46f4      	mov	ip, lr
 c00076e:	4774      	bxns	lr
 c000770:	52020000 	.word	0x52020000

0c000774 <__acle_se_SECURE_LEDToggle_YELLOW>:

CMSE_NS_ENTRY/*secureportNON_SECURE_CALLABLE*/ void SECURE_LEDToggle_YELLOW(void)
{
 c000774:	b508      	push	{r3, lr}
	HAL_GPIO_TogglePin(MB1_TX_GPIO_Port, MB1_TX_Pin);
 c000776:	2104      	movs	r1, #4
 c000778:	481c      	ldr	r0, [pc, #112]	; (c0007ec <__acle_se_SECURE_LEDToggle_YELLOW+0x78>)
 c00077a:	f000 fb86 	bl	c000e8a <HAL_GPIO_TogglePin>
}
 c00077e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 c000782:	4670      	mov	r0, lr
 c000784:	4671      	mov	r1, lr
 c000786:	4672      	mov	r2, lr
 c000788:	4673      	mov	r3, lr
 c00078a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00078e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000792:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000796:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00079a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00079e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0007a2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0007a6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0007aa:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0007ae:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0007b2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0007b6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0007ba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0007be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0007c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0007c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0007ca:	f38e 8c00 	msr	CPSR_fs, lr
 c0007ce:	b410      	push	{r4}
 c0007d0:	eef1 ca10 	vmrs	ip, fpscr
 c0007d4:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0007d8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0007dc:	ea0c 0c04 	and.w	ip, ip, r4
 c0007e0:	eee1 ca10 	vmsr	fpscr, ip
 c0007e4:	bc10      	pop	{r4}
 c0007e6:	46f4      	mov	ip, lr
 c0007e8:	4774      	bxns	lr
 c0007ea:	bf00      	nop
 c0007ec:	52020000 	.word	0x52020000

0c0007f0 <__acle_se_SECURE_LED_YELLOW>:

CMSE_NS_ENTRY/*secureportNON_SECURE_CALLABLE*/ void SECURE_LED_YELLOW(bool onoff)
{
 c0007f0:	b508      	push	{r3, lr}
 c0007f2:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(MB1_TX_GPIO_Port, MB1_TX_Pin, onoff);
 c0007f4:	2104      	movs	r1, #4
 c0007f6:	481c      	ldr	r0, [pc, #112]	; (c000868 <__acle_se_SECURE_LED_YELLOW+0x78>)
 c0007f8:	f000 fb42 	bl	c000e80 <HAL_GPIO_WritePin>
}
 c0007fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 c000800:	4670      	mov	r0, lr
 c000802:	4671      	mov	r1, lr
 c000804:	4672      	mov	r2, lr
 c000806:	4673      	mov	r3, lr
 c000808:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00080c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000810:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000814:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000818:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00081c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000820:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000824:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000828:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00082c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000830:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000834:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000838:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00083c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000844:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000848:	f38e 8c00 	msr	CPSR_fs, lr
 c00084c:	b410      	push	{r4}
 c00084e:	eef1 ca10 	vmrs	ip, fpscr
 c000852:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000856:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00085a:	ea0c 0c04 	and.w	ip, ip, r4
 c00085e:	eee1 ca10 	vmsr	fpscr, ip
 c000862:	bc10      	pop	{r4}
 c000864:	46f4      	mov	ip, lr
 c000866:	4774      	bxns	lr
 c000868:	52020000 	.word	0x52020000

0c00086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c00086c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c00086e:	4b1c      	ldr	r3, [pc, #112]	; (c0008e0 <HAL_MspInit+0x74>)

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c000870:	2008      	movs	r0, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c000872:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 c000874:	f042 0201 	orr.w	r2, r2, #1
 c000878:	661a      	str	r2, [r3, #96]	; 0x60
 c00087a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 c00087c:	f002 0201 	and.w	r2, r2, #1
 c000880:	9201      	str	r2, [sp, #4]
 c000882:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 c000884:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 c000886:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 c00088a:	659a      	str	r2, [r3, #88]	; 0x58
 c00088c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 c00088e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 c000892:	9202      	str	r2, [sp, #8]
 c000894:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c000896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c000898:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 c00089c:	649a      	str	r2, [r3, #72]	; 0x48
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c00089e:	2200      	movs	r2, #0
  __HAL_RCC_GTZC_CLK_ENABLE();
 c0008a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c0008a2:	4611      	mov	r1, r2
  __HAL_RCC_GTZC_CLK_ENABLE();
 c0008a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c0008a8:	9303      	str	r3, [sp, #12]
 c0008aa:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c0008ac:	f000 f9ca 	bl	c000c44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c0008b0:	2008      	movs	r0, #8
 c0008b2:	f000 f9f7 	bl	c000ca4 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 c0008b6:	2200      	movs	r2, #0
 c0008b8:	205f      	movs	r0, #95	; 0x5f
 c0008ba:	4611      	mov	r1, r2
 c0008bc:	f000 f9c2 	bl	c000c44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 c0008c0:	205f      	movs	r0, #95	; 0x5f
 c0008c2:	f000 f9ef 	bl	c000ca4 <HAL_NVIC_EnableIRQ>
  /* ICACHE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ICACHE_IRQn, 0, 0);
 c0008c6:	2200      	movs	r2, #0
 c0008c8:	206b      	movs	r0, #107	; 0x6b
 c0008ca:	4611      	mov	r1, r2
 c0008cc:	f000 f9ba 	bl	c000c44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ICACHE_IRQn);
 c0008d0:	206b      	movs	r0, #107	; 0x6b
 c0008d2:	f000 f9e7 	bl	c000ca4 <HAL_NVIC_EnableIRQ>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c0008d6:	b005      	add	sp, #20
 c0008d8:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 c0008dc:	f000 bba0 	b.w	c001020 <HAL_PWREx_DisableUCPDDeadBattery>
 c0008e0:	50021000 	.word	0x50021000

0c0008e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c0008e4:	e7fe      	b.n	c0008e4 <NMI_Handler>

0c0008e6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c0008e6:	e7fe      	b.n	c0008e6 <HardFault_Handler>

0c0008e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c0008e8:	e7fe      	b.n	c0008e8 <MemManage_Handler>

0c0008ea <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c0008ea:	e7fe      	b.n	c0008ea <BusFault_Handler>

0c0008ec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c0008ec:	e7fe      	b.n	c0008ec <UsageFault_Handler>

0c0008ee <SecureFault_Handler>:
void SecureFault_Handler(void)
{
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c0008ee:	e7fe      	b.n	c0008ee <SecureFault_Handler>

0c0008f0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c0008f0:	4770      	bx	lr

0c0008f2 <DebugMon_Handler>:
 c0008f2:	4770      	bx	lr

0c0008f4 <PendSV_Handler>:
 c0008f4:	4770      	bx	lr

0c0008f6 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c0008f6:	f000 b96f 	b.w	c000bd8 <HAL_IncTick>

0c0008fa <GTZC_IRQHandler>:
void GTZC_IRQHandler(void)
{
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c0008fa:	f000 bb25 	b.w	c000f48 <HAL_GTZC_IRQHandler>

0c0008fe <FPU_IRQHandler>:
 c0008fe:	4770      	bx	lr

0c000900 <ICACHE_IRQHandler>:
void ICACHE_IRQHandler(void)
{
  /* USER CODE BEGIN ICACHE_IRQn 0 */

  /* USER CODE END ICACHE_IRQn 0 */
  HAL_ICACHE_IRQHandler();
 c000900:	f000 bb68 	b.w	c000fd4 <HAL_ICACHE_IRQHandler>

0c000904 <SystemInit>:
{

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c000904:	2200      	movs	r2, #0
 c000906:	4b2d      	ldr	r3, [pc, #180]	; (c0009bc <SystemInit+0xb8>)
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c000908:	492d      	ldr	r1, [pc, #180]	; (c0009c0 <SystemInit+0xbc>)
    SAU_INIT_REGION(0);
 c00090a:	609a      	str	r2, [r3, #8]
 c00090c:	4a2d      	ldr	r2, [pc, #180]	; (c0009c4 <SystemInit+0xc0>)
  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c00090e:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
    SAU_INIT_REGION(0);
 c000912:	60da      	str	r2, [r3, #12]
 c000914:	f502 52ff 	add.w	r2, r2, #8160	; 0x1fe0
 c000918:	3203      	adds	r2, #3
 c00091a:	611a      	str	r2, [r3, #16]
    SAU_INIT_REGION(1);
 c00091c:	2201      	movs	r2, #1
 c00091e:	609a      	str	r2, [r3, #8]
 c000920:	60d9      	str	r1, [r3, #12]
 c000922:	f501 317f 	add.w	r1, r1, #261120	; 0x3fc00
 c000926:	f201 31e1 	addw	r1, r1, #993	; 0x3e1
 c00092a:	6119      	str	r1, [r3, #16]
    SAU_INIT_REGION(2);
 c00092c:	2102      	movs	r1, #2
 c00092e:	6099      	str	r1, [r3, #8]
 c000930:	4925      	ldr	r1, [pc, #148]	; (c0009c8 <SystemInit+0xc4>)
 c000932:	60d9      	str	r1, [r3, #12]
 c000934:	f501 311f 	add.w	r1, r1, #162816	; 0x27c00
 c000938:	f201 31e1 	addw	r1, r1, #993	; 0x3e1
 c00093c:	6119      	str	r1, [r3, #16]
    SAU_INIT_REGION(3);
 c00093e:	2103      	movs	r1, #3
 c000940:	6099      	str	r1, [r3, #8]
 c000942:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 c000946:	60d9      	str	r1, [r3, #12]
 c000948:	4920      	ldr	r1, [pc, #128]	; (c0009cc <SystemInit+0xc8>)
 c00094a:	6119      	str	r1, [r3, #16]
    SAU_INIT_REGION(4);
 c00094c:	2104      	movs	r1, #4
 c00094e:	6099      	str	r1, [r3, #8]
 c000950:	60d8      	str	r0, [r3, #12]
 c000952:	481f      	ldr	r0, [pc, #124]	; (c0009d0 <SystemInit+0xcc>)
 c000954:	6118      	str	r0, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c000956:	2005      	movs	r0, #5
 c000958:	6098      	str	r0, [r3, #8]
 c00095a:	481e      	ldr	r0, [pc, #120]	; (c0009d4 <SystemInit+0xd0>)
 c00095c:	60d8      	str	r0, [r3, #12]
 c00095e:	f500 30c7 	add.w	r0, r0, #101888	; 0x18e00
 c000962:	f200 10e1 	addw	r0, r0, #481	; 0x1e1
 c000966:	6118      	str	r0, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000968:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c00096a:	4a1b      	ldr	r2, [pc, #108]	; (c0009d8 <SystemInit+0xd4>)
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00096c:	481b      	ldr	r0, [pc, #108]	; (c0009dc <SystemInit+0xd8>)
    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c00096e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 c000972:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c000976:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00097a:	6843      	ldr	r3, [r0, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c00097c:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000984:	6043      	str	r3, [r0, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000986:	4b16      	ldr	r3, [pc, #88]	; (c0009e0 <SystemInit+0xdc>)
 c000988:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c00098c:	4915      	ldr	r1, [pc, #84]	; (c0009e4 <SystemInit+0xe0>)
 c00098e:	f8c3 1284 	str.w	r1, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000992:	4915      	ldr	r1, [pc, #84]	; (c0009e8 <SystemInit+0xe4>)
 c000994:	f8c3 1288 	str.w	r1, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000998:	2108      	movs	r1, #8
 c00099a:	f8c3 128c 	str.w	r1, [r3, #652]	; 0x28c
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c00099e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 c0009a2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0009a6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c0009aa:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
 c0009ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 c0009b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c0009b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c0009ba:	4770      	bx	lr
 c0009bc:	e000edd0 	.word	0xe000edd0
 c0009c0:	08040000 	.word	0x08040000
 c0009c4:	0c03e000 	.word	0x0c03e000
 c0009c8:	20018000 	.word	0x20018000
 c0009cc:	4fffffe1 	.word	0x4fffffe1
 c0009d0:	9fffffe1 	.word	0x9fffffe1
 c0009d4:	0bf90000 	.word	0x0bf90000
 c0009d8:	e000ed00 	.word	0xe000ed00
 c0009dc:	e000ef30 	.word	0xe000ef30
 c0009e0:	e000e100 	.word	0xe000e100
 c0009e4:	89821e26 	.word	0x89821e26
 c0009e8:	c0260004 	.word	0xc0260004

0c0009ec <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c0009ec:	4a25      	ldr	r2, [pc, #148]	; (c000a84 <SystemCoreClockUpdate+0x98>)
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c0009ee:	4926      	ldr	r1, [pc, #152]	; (c000a88 <SystemCoreClockUpdate+0x9c>)
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c0009f0:	6813      	ldr	r3, [r2, #0]
{
 c0009f2:	b510      	push	{r4, lr}
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c0009f4:	071b      	lsls	r3, r3, #28
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c0009f6:	bf54      	ite	pl
 c0009f8:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	; 0x94
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c0009fc:	6813      	ldrmi	r3, [r2, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c0009fe:	6890      	ldr	r0, [r2, #8]
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c000a00:	bf58      	it	pl
 c000a02:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000a06:	f000 000c 	and.w	r0, r0, #12
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c000a0a:	bf48      	it	mi
 c000a0c:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000a10:	2808      	cmp	r0, #8
  msirange = MSIRangeTable[msirange];
 c000a12:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000a16:	491d      	ldr	r1, [pc, #116]	; (c000a8c <SystemCoreClockUpdate+0xa0>)
 c000a18:	d00f      	beq.n	c000a3a <SystemCoreClockUpdate+0x4e>
 c000a1a:	280c      	cmp	r0, #12
 c000a1c:	d00f      	beq.n	c000a3e <SystemCoreClockUpdate+0x52>
 c000a1e:	2804      	cmp	r0, #4
 c000a20:	d12e      	bne.n	c000a80 <SystemCoreClockUpdate+0x94>
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c000a22:	4b1b      	ldr	r3, [pc, #108]	; (c000a90 <SystemCoreClockUpdate+0xa4>)
          pllvco = (msirange / pllm);
          break;
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
      SystemCoreClock = pllvco/pllr;
 c000a24:	600b      	str	r3, [r1, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c000a26:	4b17      	ldr	r3, [pc, #92]	; (c000a84 <SystemCoreClockUpdate+0x98>)
 c000a28:	4a1a      	ldr	r2, [pc, #104]	; (c000a94 <SystemCoreClockUpdate+0xa8>)
 c000a2a:	689b      	ldr	r3, [r3, #8]
 c000a2c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 c000a30:	5cd2      	ldrb	r2, [r2, r3]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c000a32:	680b      	ldr	r3, [r1, #0]
 c000a34:	40d3      	lsrs	r3, r2
 c000a36:	600b      	str	r3, [r1, #0]
}
 c000a38:	bd10      	pop	{r4, pc}
      SystemCoreClock = HSE_VALUE;
 c000a3a:	4b17      	ldr	r3, [pc, #92]	; (c000a98 <SystemCoreClockUpdate+0xac>)
 c000a3c:	e7f2      	b.n	c000a24 <SystemCoreClockUpdate+0x38>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c000a3e:	68d0      	ldr	r0, [r2, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c000a40:	68d3      	ldr	r3, [r2, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c000a42:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c000a46:	f3c3 1303 	ubfx	r3, r3, #4, #4
 c000a4a:	2802      	cmp	r0, #2
 c000a4c:	f103 0301 	add.w	r3, r3, #1
      switch (pllsource)
 c000a50:	d004      	beq.n	c000a5c <SystemCoreClockUpdate+0x70>
 c000a52:	2803      	cmp	r0, #3
 c000a54:	d012      	beq.n	c000a7c <SystemCoreClockUpdate+0x90>
          pllvco = (msirange / pllm);
 c000a56:	fbb4 f3f3 	udiv	r3, r4, r3
          break;
 c000a5a:	e002      	b.n	c000a62 <SystemCoreClockUpdate+0x76>
          pllvco = (HSI_VALUE / pllm);
 c000a5c:	4a0c      	ldr	r2, [pc, #48]	; (c000a90 <SystemCoreClockUpdate+0xa4>)
          pllvco = (HSE_VALUE / pllm);
 c000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c000a62:	4a08      	ldr	r2, [pc, #32]	; (c000a84 <SystemCoreClockUpdate+0x98>)
 c000a64:	68d0      	ldr	r0, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c000a66:	68d2      	ldr	r2, [r2, #12]
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c000a68:	f3c0 2006 	ubfx	r0, r0, #8, #7
 c000a6c:	4343      	muls	r3, r0
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c000a6e:	f3c2 6241 	ubfx	r2, r2, #25, #2
 c000a72:	3201      	adds	r2, #1
 c000a74:	0052      	lsls	r2, r2, #1
      SystemCoreClock = pllvco/pllr;
 c000a76:	fbb3 f3f2 	udiv	r3, r3, r2
 c000a7a:	e7d3      	b.n	c000a24 <SystemCoreClockUpdate+0x38>
          pllvco = (HSE_VALUE / pllm);
 c000a7c:	4a06      	ldr	r2, [pc, #24]	; (c000a98 <SystemCoreClockUpdate+0xac>)
 c000a7e:	e7ee      	b.n	c000a5e <SystemCoreClockUpdate+0x72>
      SystemCoreClock = msirange;
 c000a80:	600c      	str	r4, [r1, #0]
      break;
 c000a82:	e7d0      	b.n	c000a26 <SystemCoreClockUpdate+0x3a>
 c000a84:	50021000 	.word	0x50021000
 c000a88:	0c001adc 	.word	0x0c001adc
 c000a8c:	30000000 	.word	0x30000000
 c000a90:	00f42400 	.word	0x00f42400
 c000a94:	0c001acc 	.word	0x0c001acc
 c000a98:	007a1200 	.word	0x007a1200

0c000a9c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c000a9c:	b508      	push	{r3, lr}
  SystemCoreClockUpdate();
 c000a9e:	f7ff ffa5 	bl	c0009ec <SystemCoreClockUpdate>
  
  return SystemCoreClock;
}
 c000aa2:	4b1b      	ldr	r3, [pc, #108]	; (c000b10 <__acle_se_SECURE_SystemCoreClockUpdate+0x74>)
 c000aa4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000aa8:	6818      	ldr	r0, [r3, #0]
 c000aaa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000aae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 c000ab2:	4671      	mov	r1, lr
 c000ab4:	4672      	mov	r2, lr
 c000ab6:	4673      	mov	r3, lr
 c000ab8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000abc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000ac0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000ac4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000ac8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000acc:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000ad0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000ad4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000ad8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000adc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000ae0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000ae4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000ae8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000aec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000af0:	f38e 8c00 	msr	CPSR_fs, lr
 c000af4:	b410      	push	{r4}
 c000af6:	eef1 ca10 	vmrs	ip, fpscr
 c000afa:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000afe:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000b02:	ea0c 0c04 	and.w	ip, ip, r4
 c000b06:	eee1 ca10 	vmsr	fpscr, ip
 c000b0a:	bc10      	pop	{r4}
 c000b0c:	46f4      	mov	ip, lr
 c000b0e:	4774      	bxns	lr
 c000b10:	30000000 	.word	0x30000000

0c000b14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c000b14:	f8df d034 	ldr.w	sp, [pc, #52]	; c000b4c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c000b18:	f7ff fef4 	bl	c000904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c000b1c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c000b1e:	e003      	b.n	c000b28 <LoopCopyDataInit>

0c000b20 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c000b20:	4b0b      	ldr	r3, [pc, #44]	; (c000b50 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c000b22:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c000b24:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c000b26:	3104      	adds	r1, #4

0c000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c000b28:	480a      	ldr	r0, [pc, #40]	; (c000b54 <LoopForever+0xa>)
	ldr	r3, =_edata
 c000b2a:	4b0b      	ldr	r3, [pc, #44]	; (c000b58 <LoopForever+0xe>)
	adds	r2, r0, r1
 c000b2c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c000b2e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c000b30:	d3f6      	bcc.n	c000b20 <CopyDataInit>
	ldr	r2, =_sbss
 c000b32:	4a0a      	ldr	r2, [pc, #40]	; (c000b5c <LoopForever+0x12>)
	b	LoopFillZerobss
 c000b34:	e002      	b.n	c000b3c <LoopFillZerobss>

0c000b36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c000b36:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c000b38:	f842 3b04 	str.w	r3, [r2], #4

0c000b3c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c000b3c:	4b08      	ldr	r3, [pc, #32]	; (c000b60 <LoopForever+0x16>)
	cmp	r2, r3
 c000b3e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c000b40:	d3f9      	bcc.n	c000b36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c000b42:	f000 ff8b 	bl	c001a5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c000b46:	f7ff fce1 	bl	c00050c <main>

0c000b4a <LoopForever>:

LoopForever:
    b LoopForever
 c000b4a:	e7fe      	b.n	c000b4a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c000b4c:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c000b50:	0c001b24 	.word	0x0c001b24
	ldr	r0, =_sdata
 c000b54:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c000b58:	3000000c 	.word	0x3000000c
	ldr	r2, =_sbss
 c000b5c:	3000000c 	.word	0x3000000c
	ldr	r3, = _ebss
 c000b60:	300000a8 	.word	0x300000a8

0c000b64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c000b64:	e7fe      	b.n	c000b64 <ADC1_2_IRQHandler>
	...

0c000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c000b68:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c000b6a:	4b0f      	ldr	r3, [pc, #60]	; (c000ba8 <HAL_InitTick+0x40>)
{
 c000b6c:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 c000b6e:	7818      	ldrb	r0, [r3, #0]
 c000b70:	b908      	cbnz	r0, c000b76 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 c000b72:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 c000b74:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c000b7a:	fbb3 f3f0 	udiv	r3, r3, r0
 c000b7e:	4a0b      	ldr	r2, [pc, #44]	; (c000bac <HAL_InitTick+0x44>)
 c000b80:	6810      	ldr	r0, [r2, #0]
 c000b82:	fbb0 f0f3 	udiv	r0, r0, r3
 c000b86:	f000 f89b 	bl	c000cc0 <HAL_SYSTICK_Config>
 c000b8a:	4604      	mov	r4, r0
 c000b8c:	2800      	cmp	r0, #0
 c000b8e:	d1f0      	bne.n	c000b72 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c000b90:	2d07      	cmp	r5, #7
 c000b92:	d8ee      	bhi.n	c000b72 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c000b94:	4602      	mov	r2, r0
 c000b96:	4629      	mov	r1, r5
 c000b98:	f04f 30ff 	mov.w	r0, #4294967295
 c000b9c:	f000 f852 	bl	c000c44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c000ba0:	4b03      	ldr	r3, [pc, #12]	; (c000bb0 <HAL_InitTick+0x48>)
 c000ba2:	4620      	mov	r0, r4
 c000ba4:	601d      	str	r5, [r3, #0]
  return status;
 c000ba6:	e7e5      	b.n	c000b74 <HAL_InitTick+0xc>
 c000ba8:	30000004 	.word	0x30000004
 c000bac:	30000000 	.word	0x30000000
 c000bb0:	30000008 	.word	0x30000008

0c000bb4 <HAL_Init>:
{
 c000bb4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c000bb6:	2004      	movs	r0, #4
 c000bb8:	f000 f832 	bl	c000c20 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
 c000bbc:	f7ff ff16 	bl	c0009ec <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c000bc0:	2000      	movs	r0, #0
 c000bc2:	f7ff ffd1 	bl	c000b68 <HAL_InitTick>
 c000bc6:	4604      	mov	r4, r0
 c000bc8:	b918      	cbnz	r0, c000bd2 <HAL_Init+0x1e>
    HAL_MspInit();
 c000bca:	f7ff fe4f 	bl	c00086c <HAL_MspInit>
}
 c000bce:	4620      	mov	r0, r4
 c000bd0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 c000bd2:	2401      	movs	r4, #1
 c000bd4:	e7fb      	b.n	c000bce <HAL_Init+0x1a>
	...

0c000bd8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 c000bd8:	4a03      	ldr	r2, [pc, #12]	; (c000be8 <HAL_IncTick+0x10>)
 c000bda:	4b04      	ldr	r3, [pc, #16]	; (c000bec <HAL_IncTick+0x14>)
 c000bdc:	6811      	ldr	r1, [r2, #0]
 c000bde:	781b      	ldrb	r3, [r3, #0]
 c000be0:	440b      	add	r3, r1
 c000be2:	6013      	str	r3, [r2, #0]
}
 c000be4:	4770      	bx	lr
 c000be6:	bf00      	nop
 c000be8:	300000a4 	.word	0x300000a4
 c000bec:	30000004 	.word	0x30000004

0c000bf0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 c000bf0:	4b01      	ldr	r3, [pc, #4]	; (c000bf8 <HAL_GetTick+0x8>)
 c000bf2:	6818      	ldr	r0, [r3, #0]
}
 c000bf4:	4770      	bx	lr
 c000bf6:	bf00      	nop
 c000bf8:	300000a4 	.word	0x300000a4

0c000bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 c000bfc:	b538      	push	{r3, r4, r5, lr}
 c000bfe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 c000c00:	f7ff fff6 	bl	c000bf0 <HAL_GetTick>
 c000c04:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 c000c06:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 c000c08:	bf1e      	ittt	ne
 c000c0a:	4b04      	ldrne	r3, [pc, #16]	; (c000c1c <HAL_Delay+0x20>)
 c000c0c:	781b      	ldrbne	r3, [r3, #0]
 c000c0e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 c000c10:	f7ff ffee 	bl	c000bf0 <HAL_GetTick>
 c000c14:	1b43      	subs	r3, r0, r5
 c000c16:	42a3      	cmp	r3, r4
 c000c18:	d3fa      	bcc.n	c000c10 <HAL_Delay+0x14>
  {
  }
}
 c000c1a:	bd38      	pop	{r3, r4, r5, pc}
 c000c1c:	30000004 	.word	0x30000004

0c000c20 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c000c20:	4907      	ldr	r1, [pc, #28]	; (c000c40 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c000c22:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c000c24:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c000c26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c000c2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 c000c2e:	0412      	lsls	r2, r2, #16
 c000c30:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 c000c3c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 c000c3e:	4770      	bx	lr
 c000c40:	e000ed00 	.word	0xe000ed00

0c000c44 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c000c44:	4b15      	ldr	r3, [pc, #84]	; (c000c9c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c000c46:	b530      	push	{r4, r5, lr}
 c000c48:	68dc      	ldr	r4, [r3, #12]
 c000c4a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c000c4e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c000c52:	1ce3      	adds	r3, r4, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c000c54:	2d03      	cmp	r5, #3
 c000c56:	bf28      	it	cs
 c000c58:	2503      	movcs	r5, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c000c5a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c000c5c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c000c60:	bf94      	ite	ls
 c000c62:	2400      	movls	r4, #0
 c000c64:	3c04      	subhi	r4, #4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c000c66:	fa03 f505 	lsl.w	r5, r3, r5
 c000c6a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c000c6e:	40a3      	lsls	r3, r4
 c000c70:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c000c74:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 c000c76:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c000c78:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000c7c:	bfac      	ite	ge
 c000c7e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000c82:	4a07      	ldrlt	r2, [pc, #28]	; (c000ca0 <HAL_NVIC_SetPriority+0x5c>)
 c000c84:	ea4f 1343 	mov.w	r3, r3, lsl #5
 c000c88:	b2db      	uxtb	r3, r3
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000c8a:	bfab      	itete	ge
 c000c8c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000c90:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000c94:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000c98:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 c000c9a:	bd30      	pop	{r4, r5, pc}
 c000c9c:	e000ed00 	.word	0xe000ed00
 c000ca0:	e000ed14 	.word	0xe000ed14

0c000ca4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 c000ca4:	2800      	cmp	r0, #0
 c000ca6:	db08      	blt.n	c000cba <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c000ca8:	2301      	movs	r3, #1
 c000caa:	0942      	lsrs	r2, r0, #5
 c000cac:	f000 001f 	and.w	r0, r0, #31
 c000cb0:	fa03 f000 	lsl.w	r0, r3, r0
 c000cb4:	4b01      	ldr	r3, [pc, #4]	; (c000cbc <HAL_NVIC_EnableIRQ+0x18>)
 c000cb6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 c000cba:	4770      	bx	lr
 c000cbc:	e000e100 	.word	0xe000e100

0c000cc0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c000cc0:	3801      	subs	r0, #1
 c000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 c000cc6:	d20a      	bcs.n	c000cde <HAL_SYSTICK_Config+0x1e>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000cc8:	21e0      	movs	r1, #224	; 0xe0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c000cca:	4b06      	ldr	r3, [pc, #24]	; (c000ce4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000ccc:	4a06      	ldr	r2, [pc, #24]	; (c000ce8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c000cce:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000cd0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c000cd4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c000cd6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c000cd8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c000cdc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 c000cde:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 c000ce0:	4770      	bx	lr
 c000ce2:	bf00      	nop
 c000ce4:	e000e010 	.word	0xe000e010
 c000ce8:	e000ed00 	.word	0xe000ed00

0c000cec <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0U;
 c000cec:	2300      	movs	r3, #0
{
 c000cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
        EXTI->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c000cf2:	4c5f      	ldr	r4, [pc, #380]	; (c000e70 <HAL_GPIO_Init+0x184>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c000cf4:	f8df 8180 	ldr.w	r8, [pc, #384]	; c000e78 <HAL_GPIO_Init+0x18c>
 c000cf8:	f8df 9180 	ldr.w	r9, [pc, #384]	; c000e7c <HAL_GPIO_Init+0x190>
  while (((GPIO_Init->Pin) >> position) != 0U)
 c000cfc:	680a      	ldr	r2, [r1, #0]
 c000cfe:	fa32 f503 	lsrs.w	r5, r2, r3
 c000d02:	d101      	bne.n	c000d08 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 c000d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c000d08:	f04f 0c01 	mov.w	ip, #1
 c000d0c:	fa0c fc03 	lsl.w	ip, ip, r3
    if(iocurrent != 0U)
 c000d10:	ea1c 0202 	ands.w	r2, ip, r2
 c000d14:	f000 809d 	beq.w	c000e52 <HAL_GPIO_Init+0x166>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c000d18:	2603      	movs	r6, #3
 c000d1a:	684d      	ldr	r5, [r1, #4]
 c000d1c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 c000d20:	f025 0a10 	bic.w	sl, r5, #16
 c000d24:	f10a 37ff 	add.w	r7, sl, #4294967295
 c000d28:	fa06 f60e 	lsl.w	r6, r6, lr
 c000d2c:	2f01      	cmp	r7, #1
 c000d2e:	ea6f 0606 	mvn.w	r6, r6
 c000d32:	d811      	bhi.n	c000d58 <HAL_GPIO_Init+0x6c>
        temp = GPIOx->OSPEEDR;
 c000d34:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c000d36:	ea07 0b06 	and.w	fp, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 c000d3a:	68cf      	ldr	r7, [r1, #12]
 c000d3c:	fa07 f70e 	lsl.w	r7, r7, lr
 c000d40:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->OSPEEDR = temp;
 c000d44:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 c000d46:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c000d48:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c000d4c:	f3c5 1700 	ubfx	r7, r5, #4, #1
 c000d50:	409f      	lsls	r7, r3
 c000d52:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 c000d56:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 c000d58:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c000d5a:	f1ba 0f02 	cmp.w	sl, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c000d5e:	ea07 0c06 	and.w	ip, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c000d62:	688f      	ldr	r7, [r1, #8]
 c000d64:	fa07 f70e 	lsl.w	r7, r7, lr
 c000d68:	ea47 070c 	orr.w	r7, r7, ip
      GPIOx->PUPDR = temp;
 c000d6c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c000d6e:	d116      	bne.n	c000d9e <HAL_GPIO_Init+0xb2>
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c000d70:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3U];
 c000d74:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 c000d78:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c000d7c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 c000d80:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c000d84:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 c000d88:	fa0c fc0b 	lsl.w	ip, ip, fp
 c000d8c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c000d90:	690f      	ldr	r7, [r1, #16]
 c000d92:	fa07 f70b 	lsl.w	r7, r7, fp
 c000d96:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 c000d9a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 c000d9e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c000da0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c000da2:	f005 0703 	and.w	r7, r5, #3
 c000da6:	fa07 fe0e 	lsl.w	lr, r7, lr
 c000daa:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 c000dae:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c000db0:	00ee      	lsls	r6, r5, #3
 c000db2:	d54e      	bpl.n	c000e52 <HAL_GPIO_Init+0x166>
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c000db4:	f04f 0c0f 	mov.w	ip, #15
 c000db8:	f023 0703 	bic.w	r7, r3, #3
 c000dbc:	f107 47a0 	add.w	r7, r7, #1342177280	; 0x50000000
 c000dc0:	f507 373d 	add.w	r7, r7, #193536	; 0x2f400
 c000dc4:	f003 0e03 	and.w	lr, r3, #3
        temp = EXTI->EXTICR[position >> 2U];
 c000dc8:	6e3e      	ldr	r6, [r7, #96]	; 0x60
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c000dca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 c000dce:	fa0c fc0e 	lsl.w	ip, ip, lr
 c000dd2:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c000dd6:	4e27      	ldr	r6, [pc, #156]	; (c000e74 <HAL_GPIO_Init+0x188>)
 c000dd8:	42b0      	cmp	r0, r6
 c000dda:	d03c      	beq.n	c000e56 <HAL_GPIO_Init+0x16a>
 c000ddc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 c000de0:	42b0      	cmp	r0, r6
 c000de2:	d03a      	beq.n	c000e5a <HAL_GPIO_Init+0x16e>
 c000de4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 c000de8:	42b0      	cmp	r0, r6
 c000dea:	d038      	beq.n	c000e5e <HAL_GPIO_Init+0x172>
 c000dec:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 c000df0:	42b0      	cmp	r0, r6
 c000df2:	d036      	beq.n	c000e62 <HAL_GPIO_Init+0x176>
 c000df4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 c000df8:	42b0      	cmp	r0, r6
 c000dfa:	d034      	beq.n	c000e66 <HAL_GPIO_Init+0x17a>
 c000dfc:	4540      	cmp	r0, r8
 c000dfe:	d034      	beq.n	c000e6a <HAL_GPIO_Init+0x17e>
 c000e00:	4548      	cmp	r0, r9
 c000e02:	bf0c      	ite	eq
 c000e04:	2606      	moveq	r6, #6
 c000e06:	2607      	movne	r6, #7
 c000e08:	fa06 f60e 	lsl.w	r6, r6, lr
 c000e0c:	ea46 060c 	orr.w	r6, r6, ip
        EXTI->EXTICR[position >> 2U] = temp;
 c000e10:	663e      	str	r6, [r7, #96]	; 0x60
        temp &= ~(iocurrent);
 c000e12:	43d7      	mvns	r7, r2
        temp = EXTI->IMR1;
 c000e14:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c000e18:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp &= ~(iocurrent);
 c000e1c:	bf0c      	ite	eq
 c000e1e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 c000e20:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 c000e22:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
        temp = EXTI->EMR1;
 c000e26:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c000e2a:	f415 3f00 	tst.w	r5, #131072	; 0x20000
        temp &= ~(iocurrent);
 c000e2e:	bf0c      	ite	eq
 c000e30:	403e      	andeq	r6, r7
          temp |= iocurrent;
 c000e32:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 c000e34:	f8c4 6084 	str.w	r6, [r4, #132]	; 0x84
        temp = EXTI->RTSR1;
 c000e38:	6826      	ldr	r6, [r4, #0]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c000e3a:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        temp &= ~(iocurrent);
 c000e3e:	bf0c      	ite	eq
 c000e40:	403e      	andeq	r6, r7
          temp |= iocurrent;
 c000e42:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 c000e44:	6026      	str	r6, [r4, #0]
        temp = EXTI->FTSR1;
 c000e46:	6866      	ldr	r6, [r4, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c000e48:	02ad      	lsls	r5, r5, #10
        temp &= ~(iocurrent);
 c000e4a:	bf54      	ite	pl
 c000e4c:	403e      	andpl	r6, r7
          temp |= iocurrent;
 c000e4e:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 c000e50:	6066      	str	r6, [r4, #4]
    position++;
 c000e52:	3301      	adds	r3, #1
 c000e54:	e752      	b.n	c000cfc <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c000e56:	2600      	movs	r6, #0
 c000e58:	e7d6      	b.n	c000e08 <HAL_GPIO_Init+0x11c>
 c000e5a:	2601      	movs	r6, #1
 c000e5c:	e7d4      	b.n	c000e08 <HAL_GPIO_Init+0x11c>
 c000e5e:	2602      	movs	r6, #2
 c000e60:	e7d2      	b.n	c000e08 <HAL_GPIO_Init+0x11c>
 c000e62:	2603      	movs	r6, #3
 c000e64:	e7d0      	b.n	c000e08 <HAL_GPIO_Init+0x11c>
 c000e66:	2604      	movs	r6, #4
 c000e68:	e7ce      	b.n	c000e08 <HAL_GPIO_Init+0x11c>
 c000e6a:	2605      	movs	r6, #5
 c000e6c:	e7cc      	b.n	c000e08 <HAL_GPIO_Init+0x11c>
 c000e6e:	bf00      	nop
 c000e70:	5002f400 	.word	0x5002f400
 c000e74:	52020000 	.word	0x52020000
 c000e78:	52021400 	.word	0x52021400
 c000e7c:	52021800 	.word	0x52021800

0c000e80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c000e80:	b10a      	cbz	r2, c000e86 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c000e82:	6181      	str	r1, [r0, #24]
 c000e84:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c000e86:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 c000e88:	4770      	bx	lr

0c000e8a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 c000e8a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 c000e8c:	ea01 0203 	and.w	r2, r1, r3
 c000e90:	ea21 0103 	bic.w	r1, r1, r3
 c000e94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c000e98:	6181      	str	r1, [r0, #24]
}
 c000e9a:	4770      	bx	lr

0c000e9c <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c000e9c:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0U;
 c000e9e:	2400      	movs	r4, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c000ea0:	2601      	movs	r6, #1
  temp = GPIOx->SECCFGR;
 c000ea2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  while ((GPIO_Pin >> position) != 0U)
 c000ea4:	fa51 f504 	asrs.w	r5, r1, r4
 c000ea8:	d101      	bne.n	c000eae <HAL_GPIO_ConfigPinAttributes+0x12>
    }
    position++;
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c000eaa:	6303      	str	r3, [r0, #48]	; 0x30
}
 c000eac:	bd70      	pop	{r4, r5, r6, pc}
    iocurrent = GPIO_Pin & (1UL << position);
 c000eae:	fa06 f504 	lsl.w	r5, r6, r4
    if(iocurrent != 0U)
 c000eb2:	4229      	tst	r1, r5
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c000eb4:	bf1e      	ittt	ne
 c000eb6:	43ab      	bicne	r3, r5
      temp |= (PinAttributes << position);
 c000eb8:	fa02 f504 	lslne.w	r5, r2, r4
 c000ebc:	432b      	orrne	r3, r5
    position++;
 c000ebe:	3401      	adds	r4, #1
 c000ec0:	e7f0      	b.n	c000ea4 <HAL_GPIO_ConfigPinAttributes+0x8>
	...

0c000ec4 <HAL_GTZC_MPCBB_ConfigMem>:
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if (   (     !(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c000ec4:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 c000ec8:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
{
 c000ecc:	b530      	push	{r4, r5, lr}
  if (   (     !(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c000ece:	d002      	beq.n	c000ed6 <HAL_GTZC_MPCBB_ConfigMem+0x12>
           &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c000ed0:	4b19      	ldr	r3, [pc, #100]	; (c000f38 <HAL_GTZC_MPCBB_ConfigMem+0x74>)
 c000ed2:	4298      	cmp	r0, r3
 c000ed4:	d12d      	bne.n	c000f32 <HAL_GTZC_MPCBB_ConfigMem+0x6e>
      || (   (    pMPCBB_desc->SecureRWIllegalMode
 c000ed6:	680a      	ldr	r2, [r1, #0]
 c000ed8:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 c000edc:	d129      	bne.n	c000f32 <HAL_GTZC_MPCBB_ConfigMem+0x6e>
               != GTZC_MPCBB_SRWILADIS_ENABLE)
          && (    pMPCBB_desc->SecureRWIllegalMode
               != GTZC_MPCBB_SRWILADIS_DISABLE))
      || (   (    pMPCBB_desc->InvertSecureState
 c000ede:	684d      	ldr	r5, [r1, #4]
 c000ee0:	f035 4480 	bics.w	r4, r5, #1073741824	; 0x40000000
 c000ee4:	d125      	bne.n	c000f32 <HAL_GTZC_MPCBB_ConfigMem+0x6e>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c000ee6:	4315      	orrs	r5, r2
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c000ee8:	4a14      	ldr	r2, [pc, #80]	; (c000f3c <HAL_GTZC_MPCBB_ConfigMem+0x78>)
 c000eea:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 c000eee:	4b14      	ldr	r3, [pc, #80]	; (c000f40 <HAL_GTZC_MPCBB_ConfigMem+0x7c>)
 c000ef0:	bf08      	it	eq
 c000ef2:	4613      	moveq	r3, r2
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c000ef4:	681a      	ldr	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c000ef6:	bf18      	it	ne
 c000ef8:	2008      	movne	r0, #8
  MODIFY_REG(mpcbb_ptr->CR,
 c000efa:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 c000efe:	ea42 0205 	orr.w	r2, r2, r5
 c000f02:	601a      	str	r2, [r3, #0]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c000f04:	bf12      	itee	ne
 c000f06:	f06f 02ff 	mvnne.w	r2, #255	; 0xff
 c000f0a:	f04f 427f 	moveq.w	r2, #4278190080	; 0xff000000
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c000f0e:	2018      	moveq	r0, #24
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c000f10:	691d      	ldr	r5, [r3, #16]
 c000f12:	3108      	adds	r1, #8
 c000f14:	402a      	ands	r2, r5
 c000f16:	6e0d      	ldr	r5, [r1, #96]	; 0x60
 c000f18:	432a      	orrs	r2, r5
 c000f1a:	611a      	str	r2, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
  for (i = 0U; i < size_in_superblocks; i++)
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c000f1c:	f104 0240 	add.w	r2, r4, #64	; 0x40
 c000f20:	f851 5b04 	ldr.w	r5, [r1], #4
  for (i = 0U; i < size_in_superblocks; i++)
 c000f24:	3401      	adds	r4, #1
 c000f26:	42a0      	cmp	r0, r4
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c000f28:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c000f2c:	d1f6      	bne.n	c000f1c <HAL_GTZC_MPCBB_ConfigMem+0x58>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c000f2e:	2000      	movs	r0, #0
}
 c000f30:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 c000f32:	2001      	movs	r0, #1
 c000f34:	e7fc      	b.n	c000f30 <HAL_GTZC_MPCBB_ConfigMem+0x6c>
 c000f36:	bf00      	nop
 c000f38:	20030000 	.word	0x20030000
 c000f3c:	50032c00 	.word	0x50032c00
 c000f40:	50033000 	.word	0x50033000

0c000f44 <HAL_GTZC_TZIC_Callback>:
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c000f44:	4770      	bx	lr
	...

0c000f48 <HAL_GTZC_IRQHandler>:
{
 c000f48:	b538      	push	{r3, r4, r5, lr}
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c000f4a:	4b1b      	ldr	r3, [pc, #108]	; (c000fb8 <HAL_GTZC_IRQHandler+0x70>)
 c000f4c:	681c      	ldr	r4, [r3, #0]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c000f4e:	691a      	ldr	r2, [r3, #16]
  if(flag != 0U)
 c000f50:	4014      	ands	r4, r2
 c000f52:	d10a      	bne.n	c000f6a <HAL_GTZC_IRQHandler+0x22>
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c000f54:	4b18      	ldr	r3, [pc, #96]	; (c000fb8 <HAL_GTZC_IRQHandler+0x70>)
 c000f56:	685c      	ldr	r4, [r3, #4]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c000f58:	695a      	ldr	r2, [r3, #20]
  if(flag != 0U)
 c000f5a:	4014      	ands	r4, r2
 c000f5c:	d111      	bne.n	c000f82 <HAL_GTZC_IRQHandler+0x3a>
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c000f5e:	4b16      	ldr	r3, [pc, #88]	; (c000fb8 <HAL_GTZC_IRQHandler+0x70>)
 c000f60:	689c      	ldr	r4, [r3, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c000f62:	699a      	ldr	r2, [r3, #24]
  if(flag != 0U)
 c000f64:	4014      	ands	r4, r2
 c000f66:	d119      	bne.n	c000f9c <HAL_GTZC_IRQHandler+0x54>
}
 c000f68:	bd38      	pop	{r3, r4, r5, pc}
    position = 0U;
 c000f6a:	2500      	movs	r5, #0
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c000f6c:	621c      	str	r4, [r3, #32]
    while ((flag >> position) != 0U)
 c000f6e:	fa34 f305 	lsrs.w	r3, r4, r5
 c000f72:	d0ef      	beq.n	c000f54 <HAL_GTZC_IRQHandler+0xc>
      if ((flag & (1UL << position)) != 0U)
 c000f74:	07d9      	lsls	r1, r3, #31
 c000f76:	d502      	bpl.n	c000f7e <HAL_GTZC_IRQHandler+0x36>
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c000f78:	4628      	mov	r0, r5
 c000f7a:	f7ff ffe3 	bl	c000f44 <HAL_GTZC_TZIC_Callback>
      position++;
 c000f7e:	3501      	adds	r5, #1
 c000f80:	e7f5      	b.n	c000f6e <HAL_GTZC_IRQHandler+0x26>
    position = 0U;
 c000f82:	2500      	movs	r5, #0
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c000f84:	625c      	str	r4, [r3, #36]	; 0x24
    while ((flag >> position) != 0U)
 c000f86:	fa34 f305 	lsrs.w	r3, r4, r5
 c000f8a:	d0e8      	beq.n	c000f5e <HAL_GTZC_IRQHandler+0x16>
      if ((flag & (1UL << position)) != 0U)
 c000f8c:	07da      	lsls	r2, r3, #31
 c000f8e:	d503      	bpl.n	c000f98 <HAL_GTZC_IRQHandler+0x50>
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c000f90:	f045 5080 	orr.w	r0, r5, #268435456	; 0x10000000
 c000f94:	f7ff ffd6 	bl	c000f44 <HAL_GTZC_TZIC_Callback>
      position++;
 c000f98:	3501      	adds	r5, #1
 c000f9a:	e7f4      	b.n	c000f86 <HAL_GTZC_IRQHandler+0x3e>
    position = 0U;
 c000f9c:	2500      	movs	r5, #0
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c000f9e:	629c      	str	r4, [r3, #40]	; 0x28
    while ((flag >> position) != 0U)
 c000fa0:	fa34 f305 	lsrs.w	r3, r4, r5
 c000fa4:	d0e0      	beq.n	c000f68 <HAL_GTZC_IRQHandler+0x20>
      if ((flag & (1UL << position)) != 0U)
 c000fa6:	07db      	lsls	r3, r3, #31
 c000fa8:	d503      	bpl.n	c000fb2 <HAL_GTZC_IRQHandler+0x6a>
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c000faa:	f045 5000 	orr.w	r0, r5, #536870912	; 0x20000000
 c000fae:	f7ff ffc9 	bl	c000f44 <HAL_GTZC_TZIC_Callback>
      position++;
 c000fb2:	3501      	adds	r5, #1
 c000fb4:	e7f4      	b.n	c000fa0 <HAL_GTZC_IRQHandler+0x58>
 c000fb6:	bf00      	nop
 c000fb8:	50032800 	.word	0x50032800

0c000fbc <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c000fbc:	4a03      	ldr	r2, [pc, #12]	; (c000fcc <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 c000fbe:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c000fc0:	6813      	ldr	r3, [r2, #0]
 c000fc2:	f043 0301 	orr.w	r3, r3, #1
 c000fc6:	6013      	str	r3, [r2, #0]
}
 c000fc8:	4770      	bx	lr
 c000fca:	bf00      	nop
 c000fcc:	50030400 	.word	0x50030400

0c000fd0 <HAL_ICACHE_InvalidateCompleteCallback>:
__weak void HAL_ICACHE_InvalidateCompleteCallback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 c000fd0:	4770      	bx	lr

0c000fd2 <HAL_ICACHE_ErrorCallback>:
 c000fd2:	4770      	bx	lr

0c000fd4 <HAL_ICACHE_IRQHandler>:
  uint32_t itflags   = READ_REG(ICACHE->SR);
 c000fd4:	4b0d      	ldr	r3, [pc, #52]	; (c00100c <HAL_ICACHE_IRQHandler+0x38>)
{
 c000fd6:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(ICACHE->SR);
 c000fd8:	685c      	ldr	r4, [r3, #4]
  uint32_t itsources = READ_REG(ICACHE->IER);
 c000fda:	689a      	ldr	r2, [r3, #8]
  if (((itflags & itsources) & ICACHE_FLAG_ERROR) != 0U)
 c000fdc:	4014      	ands	r4, r2
 c000fde:	0762      	lsls	r2, r4, #29
 c000fe0:	d507      	bpl.n	c000ff2 <HAL_ICACHE_IRQHandler+0x1e>
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_ERRIE);
 c000fe2:	689a      	ldr	r2, [r3, #8]
 c000fe4:	f022 0204 	bic.w	r2, r2, #4
 c000fe8:	609a      	str	r2, [r3, #8]
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CERRF);
 c000fea:	2204      	movs	r2, #4
 c000fec:	60da      	str	r2, [r3, #12]
    HAL_ICACHE_ErrorCallback();
 c000fee:	f7ff fff0 	bl	c000fd2 <HAL_ICACHE_ErrorCallback>
  if (((itflags & itsources) & ICACHE_FLAG_BUSYEND) != 0U)
 c000ff2:	07a3      	lsls	r3, r4, #30
 c000ff4:	d508      	bpl.n	c001008 <HAL_ICACHE_IRQHandler+0x34>
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_BSYENDIE);
 c000ff6:	4b05      	ldr	r3, [pc, #20]	; (c00100c <HAL_ICACHE_IRQHandler+0x38>)
 c000ff8:	689a      	ldr	r2, [r3, #8]
 c000ffa:	f022 0202 	bic.w	r2, r2, #2
 c000ffe:	609a      	str	r2, [r3, #8]
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 c001000:	2202      	movs	r2, #2
 c001002:	60da      	str	r2, [r3, #12]
    HAL_ICACHE_InvalidateCompleteCallback();
 c001004:	f7ff ffe4 	bl	c000fd0 <HAL_ICACHE_InvalidateCompleteCallback>
}
 c001008:	bd10      	pop	{r4, pc}
 c00100a:	bf00      	nop
 c00100c:	50030400 	.word	0x50030400

0c001010 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 c001010:	4b02      	ldr	r3, [pc, #8]	; (c00101c <HAL_PWREx_GetVoltageRange+0xc>)
 c001012:	6818      	ldr	r0, [r3, #0]
}
 c001014:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 c001018:	4770      	bx	lr
 c00101a:	bf00      	nop
 c00101c:	50007000 	.word	0x50007000

0c001020 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c001020:	4a02      	ldr	r2, [pc, #8]	; (c00102c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 c001022:	6893      	ldr	r3, [r2, #8]
 c001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c001028:	6093      	str	r3, [r2, #8]
}
 c00102a:	4770      	bx	lr
 c00102c:	50007000 	.word	0x50007000

0c001030 <HAL_PWREx_SMPS_GetEffectiveMode>:
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c001030:	4b06      	ldr	r3, [pc, #24]	; (c00104c <HAL_PWREx_SMPS_GetEffectiveMode+0x1c>)
 c001032:	691b      	ldr	r3, [r3, #16]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c001034:	f413 5080 	ands.w	r0, r3, #4096	; 0x1000
 c001038:	d105      	bne.n	c001046 <HAL_PWREx_SMPS_GetEffectiveMode+0x16>
  {
    mode = PWR_SMPS_BYPASS;
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c00103a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
  {
    mode = PWR_SMPS_LOW_POWER;
 c00103e:	bf08      	it	eq
 c001040:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 c001044:	4770      	bx	lr
    mode = PWR_SMPS_BYPASS;
 c001046:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  {
    mode = PWR_SMPS_HIGH_POWER;
  }

  return mode;
}
 c00104a:	4770      	bx	lr
 c00104c:	50007000 	.word	0x50007000

0c001050 <HAL_PWREx_ControlVoltageScaling>:
  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c001050:	4a17      	ldr	r2, [pc, #92]	; (c0010b0 <HAL_PWREx_ControlVoltageScaling+0x60>)
{
 c001052:	b510      	push	{r4, lr}
 c001054:	4601      	mov	r1, r0
  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c001056:	6814      	ldr	r4, [r2, #0]
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c001058:	f7ff ffea 	bl	c001030 <HAL_PWREx_SMPS_GetEffectiveMode>
 c00105c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 c001060:	d024      	beq.n	c0010ac <HAL_PWREx_ControlVoltageScaling+0x5c>
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c001062:	68d3      	ldr	r3, [r2, #12]
 c001064:	041b      	lsls	r3, r3, #16
 c001066:	d421      	bmi.n	c0010ac <HAL_PWREx_ControlVoltageScaling+0x5c>
  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c001068:	f404 64c0 	and.w	r4, r4, #1536	; 0x600
  if (vos_old == VoltageScaling)
 c00106c:	428c      	cmp	r4, r1
 c00106e:	d101      	bne.n	c001074 <HAL_PWREx_ControlVoltageScaling+0x24>
    return HAL_OK;
 c001070:	2000      	movs	r0, #0
}
 c001072:	bd10      	pop	{r4, pc}
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c001074:	6813      	ldr	r3, [r2, #0]
 c001076:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 c00107a:	430b      	orrs	r3, r1
 c00107c:	6013      	str	r3, [r2, #0]
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c00107e:	4b0d      	ldr	r3, [pc, #52]	; (c0010b4 <HAL_PWREx_ControlVoltageScaling+0x64>)
 c001080:	490d      	ldr	r1, [pc, #52]	; (c0010b8 <HAL_PWREx_ControlVoltageScaling+0x68>)
 c001082:	681b      	ldr	r3, [r3, #0]
 c001084:	fbb3 f1f1 	udiv	r1, r3, r1
 c001088:	2332      	movs	r3, #50	; 0x32
 c00108a:	434b      	muls	r3, r1
 c00108c:	210a      	movs	r1, #10
 c00108e:	fbb3 f3f1 	udiv	r3, r3, r1
 c001092:	4611      	mov	r1, r2
 c001094:	3301      	adds	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c001096:	6950      	ldr	r0, [r2, #20]
 c001098:	0540      	lsls	r0, r0, #21
 c00109a:	d500      	bpl.n	c00109e <HAL_PWREx_ControlVoltageScaling+0x4e>
 c00109c:	b923      	cbnz	r3, c0010a8 <HAL_PWREx_ControlVoltageScaling+0x58>
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c00109e:	694b      	ldr	r3, [r1, #20]
 c0010a0:	055b      	lsls	r3, r3, #21
 c0010a2:	d5e5      	bpl.n	c001070 <HAL_PWREx_ControlVoltageScaling+0x20>
    return HAL_TIMEOUT;
 c0010a4:	2003      	movs	r0, #3
 c0010a6:	e7e4      	b.n	c001072 <HAL_PWREx_ControlVoltageScaling+0x22>
    wait_loop_index--;
 c0010a8:	3b01      	subs	r3, #1
 c0010aa:	e7f4      	b.n	c001096 <HAL_PWREx_ControlVoltageScaling+0x46>
    return HAL_ERROR;
 c0010ac:	2001      	movs	r0, #1
 c0010ae:	e7e0      	b.n	c001072 <HAL_PWREx_ControlVoltageScaling+0x22>
 c0010b0:	50007000 	.word	0x50007000
 c0010b4:	30000000 	.word	0x30000000
 c0010b8:	000186a0 	.word	0x000186a0

0c0010bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c0010bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c0010be:	4d1d      	ldr	r5, [pc, #116]	; (c001134 <RCC_SetFlashLatencyFromMSIRange+0x78>)
{
 c0010c0:	4604      	mov	r4, r0
  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c0010c2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 c0010c4:	00d9      	lsls	r1, r3, #3
 c0010c6:	d518      	bpl.n	c0010fa <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c0010c8:	f7ff ffa2 	bl	c001010 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c0010cc:	f430 7300 	bics.w	r3, r0, #512	; 0x200
 c0010d0:	d123      	bne.n	c00111a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if (msirange > RCC_MSIRANGE_8)
 c0010d2:	2c80      	cmp	r4, #128	; 0x80
 c0010d4:	d903      	bls.n	c0010de <RCC_SetFlashLatencyFromMSIRange+0x22>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c0010d6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c0010d8:	bf8c      	ite	hi
 c0010da:	2302      	movhi	r3, #2
 c0010dc:	2301      	movls	r3, #1
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c0010de:	4916      	ldr	r1, [pc, #88]	; (c001138 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 c0010e0:	680a      	ldr	r2, [r1, #0]
 c0010e2:	f022 020f 	bic.w	r2, r2, #15
 c0010e6:	431a      	orrs	r2, r3
 c0010e8:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c0010ea:	6808      	ldr	r0, [r1, #0]
 c0010ec:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 c0010f0:	1ac0      	subs	r0, r0, r3
 c0010f2:	bf18      	it	ne
 c0010f4:	2001      	movne	r0, #1
 c0010f6:	b003      	add	sp, #12
 c0010f8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 c0010fa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 c0010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c001100:	65ab      	str	r3, [r5, #88]	; 0x58
 c001102:	6dab      	ldr	r3, [r5, #88]	; 0x58
 c001104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001108:	9301      	str	r3, [sp, #4]
 c00110a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 c00110c:	f7ff ff80 	bl	c001010 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 c001110:	6dab      	ldr	r3, [r5, #88]	; 0x58
 c001112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c001116:	65ab      	str	r3, [r5, #88]	; 0x58
 c001118:	e7d8      	b.n	c0010cc <RCC_SetFlashLatencyFromMSIRange+0x10>
    if (msirange > RCC_MSIRANGE_8)
 c00111a:	2c80      	cmp	r4, #128	; 0x80
 c00111c:	d805      	bhi.n	c00112a <RCC_SetFlashLatencyFromMSIRange+0x6e>
      if (msirange == RCC_MSIRANGE_8)
 c00111e:	d006      	beq.n	c00112e <RCC_SetFlashLatencyFromMSIRange+0x72>
      else if (msirange == RCC_MSIRANGE_7)
 c001120:	f1a4 0270 	sub.w	r2, r4, #112	; 0x70
 c001124:	4253      	negs	r3, r2
 c001126:	4153      	adcs	r3, r2
 c001128:	e7d9      	b.n	c0010de <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 c00112a:	2303      	movs	r3, #3
 c00112c:	e7d7      	b.n	c0010de <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 c00112e:	2302      	movs	r3, #2
 c001130:	e7d5      	b.n	c0010de <RCC_SetFlashLatencyFromMSIRange+0x22>
 c001132:	bf00      	nop
 c001134:	50021000 	.word	0x50021000
 c001138:	50022000 	.word	0x50022000

0c00113c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c00113c:	4a27      	ldr	r2, [pc, #156]	; (c0011dc <HAL_RCC_GetSysClockFreq+0xa0>)
 c00113e:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c001140:	68d1      	ldr	r1, [r2, #12]
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c001142:	f013 030c 	ands.w	r3, r3, #12
 c001146:	d005      	beq.n	c001154 <HAL_RCC_GetSysClockFreq+0x18>
 c001148:	2b0c      	cmp	r3, #12
 c00114a:	d117      	bne.n	c00117c <HAL_RCC_GetSysClockFreq+0x40>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c00114c:	f001 0103 	and.w	r1, r1, #3
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c001150:	2901      	cmp	r1, #1
 c001152:	d11a      	bne.n	c00118a <HAL_RCC_GetSysClockFreq+0x4e>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c001154:	6811      	ldr	r1, [r2, #0]
 c001156:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c001158:	bf54      	ite	pl
 c00115a:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c00115e:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 c001160:	491f      	ldr	r1, [pc, #124]	; (c0011e0 <HAL_RCC_GetSysClockFreq+0xa4>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c001162:	bf54      	ite	pl
 c001164:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c001168:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 c00116c:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c001170:	2b00      	cmp	r3, #0
 c001172:	d032      	beq.n	c0011da <HAL_RCC_GetSysClockFreq+0x9e>
  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c001174:	2b0c      	cmp	r3, #12
 c001176:	d009      	beq.n	c00118c <HAL_RCC_GetSysClockFreq+0x50>
 c001178:	2000      	movs	r0, #0
  return sysclockfreq;
 c00117a:	4770      	bx	lr
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c00117c:	2b04      	cmp	r3, #4
 c00117e:	d02b      	beq.n	c0011d8 <HAL_RCC_GetSysClockFreq+0x9c>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c001180:	2b08      	cmp	r3, #8
 c001182:	4818      	ldr	r0, [pc, #96]	; (c0011e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 c001184:	bf18      	it	ne
 c001186:	2000      	movne	r0, #0
 c001188:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c00118a:	2000      	movs	r0, #0
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c00118c:	4a13      	ldr	r2, [pc, #76]	; (c0011dc <HAL_RCC_GetSysClockFreq+0xa0>)
 c00118e:	68d1      	ldr	r1, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c001190:	68d3      	ldr	r3, [r2, #12]
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c001192:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c001196:	f3c3 1303 	ubfx	r3, r3, #4, #4
    switch (pllsource)
 c00119a:	2902      	cmp	r1, #2
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c00119c:	f103 0301 	add.w	r3, r3, #1
    switch (pllsource)
 c0011a0:	d005      	beq.n	c0011ae <HAL_RCC_GetSysClockFreq+0x72>
 c0011a2:	2903      	cmp	r1, #3
 c0011a4:	d013      	beq.n	c0011ce <HAL_RCC_GetSysClockFreq+0x92>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0011a6:	68d2      	ldr	r2, [r2, #12]
 c0011a8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c0011ac:	e003      	b.n	c0011b6 <HAL_RCC_GetSysClockFreq+0x7a>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0011ae:	68d2      	ldr	r2, [r2, #12]
 c0011b0:	480d      	ldr	r0, [pc, #52]	; (c0011e8 <HAL_RCC_GetSysClockFreq+0xac>)
 c0011b2:	f3c2 2206 	ubfx	r2, r2, #8, #7
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0011b6:	fbb0 f0f3 	udiv	r0, r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0011ba:	4b08      	ldr	r3, [pc, #32]	; (c0011dc <HAL_RCC_GetSysClockFreq+0xa0>)
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0011bc:	4350      	muls	r0, r2
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0011be:	68db      	ldr	r3, [r3, #12]
 c0011c0:	f3c3 6341 	ubfx	r3, r3, #25, #2
 c0011c4:	3301      	adds	r3, #1
 c0011c6:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 c0011c8:	fbb0 f0f3 	udiv	r0, r0, r3
 c0011cc:	4770      	bx	lr
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0011ce:	68d2      	ldr	r2, [r2, #12]
 c0011d0:	4804      	ldr	r0, [pc, #16]	; (c0011e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 c0011d2:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c0011d6:	e7ee      	b.n	c0011b6 <HAL_RCC_GetSysClockFreq+0x7a>
    sysclockfreq = HSI_VALUE;
 c0011d8:	4803      	ldr	r0, [pc, #12]	; (c0011e8 <HAL_RCC_GetSysClockFreq+0xac>)
}
 c0011da:	4770      	bx	lr
 c0011dc:	50021000 	.word	0x50021000
 c0011e0:	0c001adc 	.word	0x0c001adc
 c0011e4:	007a1200 	.word	0x007a1200
 c0011e8:	00f42400 	.word	0x00f42400

0c0011ec <HAL_RCC_GetHCLKFreq>:
{
 c0011ec:	b508      	push	{r3, lr}
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c0011ee:	f7ff ffa5 	bl	c00113c <HAL_RCC_GetSysClockFreq>
 c0011f2:	4b04      	ldr	r3, [pc, #16]	; (c001204 <HAL_RCC_GetHCLKFreq+0x18>)
 c0011f4:	4a04      	ldr	r2, [pc, #16]	; (c001208 <HAL_RCC_GetHCLKFreq+0x1c>)
 c0011f6:	689b      	ldr	r3, [r3, #8]
 c0011f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 c0011fc:	5cd3      	ldrb	r3, [r2, r3]
}
 c0011fe:	40d8      	lsrs	r0, r3
 c001200:	bd08      	pop	{r3, pc}
 c001202:	bf00      	nop
 c001204:	50021000 	.word	0x50021000
 c001208:	0c001acc 	.word	0x0c001acc

0c00120c <HAL_RCC_OscConfig>:
{
 c00120c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (RCC_OscInitStruct == NULL)
 c001210:	4604      	mov	r4, r0
 c001212:	2800      	cmp	r0, #0
 c001214:	d05a      	beq.n	c0012cc <HAL_RCC_OscConfig+0xc0>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c001216:	4b9c      	ldr	r3, [pc, #624]	; (c001488 <HAL_RCC_OscConfig+0x27c>)
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c001218:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c00121a:	689d      	ldr	r5, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c00121c:	68de      	ldr	r6, [r3, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c00121e:	06d2      	lsls	r2, r2, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c001220:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c001224:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c001228:	d571      	bpl.n	c00130e <HAL_RCC_OscConfig+0x102>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c00122a:	b11d      	cbz	r5, c001234 <HAL_RCC_OscConfig+0x28>
 c00122c:	2d0c      	cmp	r5, #12
 c00122e:	d14f      	bne.n	c0012d0 <HAL_RCC_OscConfig+0xc4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c001230:	2e01      	cmp	r6, #1
 c001232:	d14d      	bne.n	c0012d0 <HAL_RCC_OscConfig+0xc4>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c001234:	681b      	ldr	r3, [r3, #0]
 c001236:	079b      	lsls	r3, r3, #30
 c001238:	d502      	bpl.n	c001240 <HAL_RCC_OscConfig+0x34>
 c00123a:	69e3      	ldr	r3, [r4, #28]
 c00123c:	2b00      	cmp	r3, #0
 c00123e:	d045      	beq.n	c0012cc <HAL_RCC_OscConfig+0xc0>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c001240:	4b91      	ldr	r3, [pc, #580]	; (c001488 <HAL_RCC_OscConfig+0x27c>)
 c001242:	6a60      	ldr	r0, [r4, #36]	; 0x24
 c001244:	681a      	ldr	r2, [r3, #0]
 c001246:	0717      	lsls	r7, r2, #28
 c001248:	bf56      	itet	pl
 c00124a:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
 c00124e:	681a      	ldrmi	r2, [r3, #0]
 c001250:	0912      	lsrpl	r2, r2, #4
 c001252:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 c001256:	4290      	cmp	r0, r2
 c001258:	d922      	bls.n	c0012a0 <HAL_RCC_OscConfig+0x94>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c00125a:	f7ff ff2f 	bl	c0010bc <RCC_SetFlashLatencyFromMSIRange>
 c00125e:	2800      	cmp	r0, #0
 c001260:	d134      	bne.n	c0012cc <HAL_RCC_OscConfig+0xc0>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001262:	4b89      	ldr	r3, [pc, #548]	; (c001488 <HAL_RCC_OscConfig+0x27c>)
 c001264:	681a      	ldr	r2, [r3, #0]
 c001266:	f042 0208 	orr.w	r2, r2, #8
 c00126a:	601a      	str	r2, [r3, #0]
 c00126c:	681a      	ldr	r2, [r3, #0]
 c00126e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 c001270:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 c001274:	430a      	orrs	r2, r1
 c001276:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c001278:	685a      	ldr	r2, [r3, #4]
 c00127a:	6a21      	ldr	r1, [r4, #32]
 c00127c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 c001280:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 c001284:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c001286:	f7ff ffb1 	bl	c0011ec <HAL_RCC_GetHCLKFreq>
 c00128a:	4b80      	ldr	r3, [pc, #512]	; (c00148c <HAL_RCC_OscConfig+0x280>)
 c00128c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 c00128e:	4b80      	ldr	r3, [pc, #512]	; (c001490 <HAL_RCC_OscConfig+0x284>)
 c001290:	6818      	ldr	r0, [r3, #0]
 c001292:	f7ff fc69 	bl	c000b68 <HAL_InitTick>
        if (status != HAL_OK)
 c001296:	2800      	cmp	r0, #0
 c001298:	d039      	beq.n	c00130e <HAL_RCC_OscConfig+0x102>
}
 c00129a:	b002      	add	sp, #8
 c00129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c0012a0:	681a      	ldr	r2, [r3, #0]
 c0012a2:	f042 0208 	orr.w	r2, r2, #8
 c0012a6:	601a      	str	r2, [r3, #0]
 c0012a8:	681a      	ldr	r2, [r3, #0]
 c0012aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 c0012ae:	4302      	orrs	r2, r0
 c0012b0:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0012b2:	685a      	ldr	r2, [r3, #4]
 c0012b4:	6a21      	ldr	r1, [r4, #32]
 c0012b6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 c0012ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 c0012be:	605a      	str	r2, [r3, #4]
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0012c0:	2d00      	cmp	r5, #0
 c0012c2:	d1e0      	bne.n	c001286 <HAL_RCC_OscConfig+0x7a>
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0012c4:	f7ff fefa 	bl	c0010bc <RCC_SetFlashLatencyFromMSIRange>
 c0012c8:	2800      	cmp	r0, #0
 c0012ca:	d0dc      	beq.n	c001286 <HAL_RCC_OscConfig+0x7a>
          return HAL_ERROR;
 c0012cc:	2001      	movs	r0, #1
 c0012ce:	e7e4      	b.n	c00129a <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c0012d0:	69e2      	ldr	r2, [r4, #28]
 c0012d2:	2a00      	cmp	r2, #0
 c0012d4:	d03b      	beq.n	c00134e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_MSI_ENABLE();
 c0012d6:	681a      	ldr	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0012d8:	4f6b      	ldr	r7, [pc, #428]	; (c001488 <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_MSI_ENABLE();
 c0012da:	f042 0201 	orr.w	r2, r2, #1
 c0012de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 c0012e0:	f7ff fc86 	bl	c000bf0 <HAL_GetTick>
 c0012e4:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0012e6:	683b      	ldr	r3, [r7, #0]
 c0012e8:	0798      	lsls	r0, r3, #30
 c0012ea:	d528      	bpl.n	c00133e <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c0012ec:	683b      	ldr	r3, [r7, #0]
 c0012ee:	f043 0308 	orr.w	r3, r3, #8
 c0012f2:	603b      	str	r3, [r7, #0]
 c0012f4:	683b      	ldr	r3, [r7, #0]
 c0012f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 c0012f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0012fc:	4313      	orrs	r3, r2
 c0012fe:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c001300:	687b      	ldr	r3, [r7, #4]
 c001302:	6a22      	ldr	r2, [r4, #32]
 c001304:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 c001308:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 c00130c:	607b      	str	r3, [r7, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c00130e:	6823      	ldr	r3, [r4, #0]
 c001310:	07da      	lsls	r2, r3, #31
 c001312:	d42f      	bmi.n	c001374 <HAL_RCC_OscConfig+0x168>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c001314:	6823      	ldr	r3, [r4, #0]
 c001316:	079b      	lsls	r3, r3, #30
 c001318:	d472      	bmi.n	c001400 <HAL_RCC_OscConfig+0x1f4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c00131a:	6823      	ldr	r3, [r4, #0]
 c00131c:	0718      	lsls	r0, r3, #28
 c00131e:	f100 80b9 	bmi.w	c001494 <HAL_RCC_OscConfig+0x288>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c001322:	6823      	ldr	r3, [r4, #0]
 c001324:	0759      	lsls	r1, r3, #29
 c001326:	f100 80ee 	bmi.w	c001506 <HAL_RCC_OscConfig+0x2fa>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c00132a:	6823      	ldr	r3, [r4, #0]
 c00132c:	069b      	lsls	r3, r3, #26
 c00132e:	f100 8198 	bmi.w	c001662 <HAL_RCC_OscConfig+0x456>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c001332:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 c001334:	2800      	cmp	r0, #0
 c001336:	f040 81bf 	bne.w	c0016b8 <HAL_RCC_OscConfig+0x4ac>
  return HAL_OK;
 c00133a:	2000      	movs	r0, #0
 c00133c:	e7ad      	b.n	c00129a <HAL_RCC_OscConfig+0x8e>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c00133e:	f7ff fc57 	bl	c000bf0 <HAL_GetTick>
 c001342:	eba0 0008 	sub.w	r0, r0, r8
 c001346:	2802      	cmp	r0, #2
 c001348:	d9cd      	bls.n	c0012e6 <HAL_RCC_OscConfig+0xda>
            return HAL_TIMEOUT;
 c00134a:	2003      	movs	r0, #3
 c00134c:	e7a5      	b.n	c00129a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_MSI_DISABLE();
 c00134e:	681a      	ldr	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c001350:	f8df 8134 	ldr.w	r8, [pc, #308]	; c001488 <HAL_RCC_OscConfig+0x27c>
        __HAL_RCC_MSI_DISABLE();
 c001354:	f022 0201 	bic.w	r2, r2, #1
 c001358:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 c00135a:	f7ff fc49 	bl	c000bf0 <HAL_GetTick>
 c00135e:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c001360:	f8d8 3000 	ldr.w	r3, [r8]
 c001364:	0799      	lsls	r1, r3, #30
 c001366:	d5d2      	bpl.n	c00130e <HAL_RCC_OscConfig+0x102>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c001368:	f7ff fc42 	bl	c000bf0 <HAL_GetTick>
 c00136c:	1bc0      	subs	r0, r0, r7
 c00136e:	2802      	cmp	r0, #2
 c001370:	d9f6      	bls.n	c001360 <HAL_RCC_OscConfig+0x154>
 c001372:	e7ea      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c001374:	2d08      	cmp	r5, #8
 c001376:	4b44      	ldr	r3, [pc, #272]	; (c001488 <HAL_RCC_OscConfig+0x27c>)
 c001378:	d003      	beq.n	c001382 <HAL_RCC_OscConfig+0x176>
 c00137a:	2d0c      	cmp	r5, #12
 c00137c:	d108      	bne.n	c001390 <HAL_RCC_OscConfig+0x184>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c00137e:	2e03      	cmp	r6, #3
 c001380:	d106      	bne.n	c001390 <HAL_RCC_OscConfig+0x184>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c001382:	681b      	ldr	r3, [r3, #0]
 c001384:	039f      	lsls	r7, r3, #14
 c001386:	d5c5      	bpl.n	c001314 <HAL_RCC_OscConfig+0x108>
 c001388:	6863      	ldr	r3, [r4, #4]
 c00138a:	2b00      	cmp	r3, #0
 c00138c:	d1c2      	bne.n	c001314 <HAL_RCC_OscConfig+0x108>
 c00138e:	e79d      	b.n	c0012cc <HAL_RCC_OscConfig+0xc0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c001390:	6862      	ldr	r2, [r4, #4]
 c001392:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 c001396:	d112      	bne.n	c0013be <HAL_RCC_OscConfig+0x1b2>
 c001398:	681a      	ldr	r2, [r3, #0]
 c00139a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 c00139e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 c0013a0:	f7ff fc26 	bl	c000bf0 <HAL_GetTick>
 c0013a4:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0013a6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; c001488 <HAL_RCC_OscConfig+0x27c>
 c0013aa:	f8d8 3000 	ldr.w	r3, [r8]
 c0013ae:	0398      	lsls	r0, r3, #14
 c0013b0:	d4b0      	bmi.n	c001314 <HAL_RCC_OscConfig+0x108>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c0013b2:	f7ff fc1d 	bl	c000bf0 <HAL_GetTick>
 c0013b6:	1bc0      	subs	r0, r0, r7
 c0013b8:	2864      	cmp	r0, #100	; 0x64
 c0013ba:	d9f6      	bls.n	c0013aa <HAL_RCC_OscConfig+0x19e>
 c0013bc:	e7c5      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c0013be:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 c0013c2:	d104      	bne.n	c0013ce <HAL_RCC_OscConfig+0x1c2>
 c0013c4:	681a      	ldr	r2, [r3, #0]
 c0013c6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 c0013ca:	601a      	str	r2, [r3, #0]
 c0013cc:	e7e4      	b.n	c001398 <HAL_RCC_OscConfig+0x18c>
 c0013ce:	6819      	ldr	r1, [r3, #0]
 c0013d0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 c0013d4:	6019      	str	r1, [r3, #0]
 c0013d6:	6819      	ldr	r1, [r3, #0]
 c0013d8:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 c0013dc:	6019      	str	r1, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c0013de:	2a00      	cmp	r2, #0
 c0013e0:	d1de      	bne.n	c0013a0 <HAL_RCC_OscConfig+0x194>
        tickstart = HAL_GetTick();
 c0013e2:	f7ff fc05 	bl	c000bf0 <HAL_GetTick>
 c0013e6:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0013e8:	f8df 809c 	ldr.w	r8, [pc, #156]	; c001488 <HAL_RCC_OscConfig+0x27c>
 c0013ec:	f8d8 3000 	ldr.w	r3, [r8]
 c0013f0:	0399      	lsls	r1, r3, #14
 c0013f2:	d58f      	bpl.n	c001314 <HAL_RCC_OscConfig+0x108>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c0013f4:	f7ff fbfc 	bl	c000bf0 <HAL_GetTick>
 c0013f8:	1bc0      	subs	r0, r0, r7
 c0013fa:	2864      	cmp	r0, #100	; 0x64
 c0013fc:	d9f6      	bls.n	c0013ec <HAL_RCC_OscConfig+0x1e0>
 c0013fe:	e7a4      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c001400:	2d04      	cmp	r5, #4
 c001402:	4b21      	ldr	r3, [pc, #132]	; (c001488 <HAL_RCC_OscConfig+0x27c>)
 c001404:	d003      	beq.n	c00140e <HAL_RCC_OscConfig+0x202>
 c001406:	2d0c      	cmp	r5, #12
 c001408:	d111      	bne.n	c00142e <HAL_RCC_OscConfig+0x222>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c00140a:	2e02      	cmp	r6, #2
 c00140c:	d10f      	bne.n	c00142e <HAL_RCC_OscConfig+0x222>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c00140e:	681b      	ldr	r3, [r3, #0]
 c001410:	055a      	lsls	r2, r3, #21
 c001412:	d503      	bpl.n	c00141c <HAL_RCC_OscConfig+0x210>
 c001414:	68e3      	ldr	r3, [r4, #12]
 c001416:	2b00      	cmp	r3, #0
 c001418:	f43f af58 	beq.w	c0012cc <HAL_RCC_OscConfig+0xc0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c00141c:	4a1a      	ldr	r2, [pc, #104]	; (c001488 <HAL_RCC_OscConfig+0x27c>)
 c00141e:	6921      	ldr	r1, [r4, #16]
 c001420:	6853      	ldr	r3, [r2, #4]
 c001422:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 c001426:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 c00142a:	6053      	str	r3, [r2, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c00142c:	e775      	b.n	c00131a <HAL_RCC_OscConfig+0x10e>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c00142e:	68e2      	ldr	r2, [r4, #12]
 c001430:	b1c2      	cbz	r2, c001464 <HAL_RCC_OscConfig+0x258>
        __HAL_RCC_HSI_ENABLE();
 c001432:	681a      	ldr	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001434:	4d14      	ldr	r5, [pc, #80]	; (c001488 <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 c001436:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c00143a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 c00143c:	f7ff fbd8 	bl	c000bf0 <HAL_GetTick>
 c001440:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001442:	682b      	ldr	r3, [r5, #0]
 c001444:	055b      	lsls	r3, r3, #21
 c001446:	d507      	bpl.n	c001458 <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c001448:	686b      	ldr	r3, [r5, #4]
 c00144a:	6922      	ldr	r2, [r4, #16]
 c00144c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 c001450:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 c001454:	606b      	str	r3, [r5, #4]
 c001456:	e760      	b.n	c00131a <HAL_RCC_OscConfig+0x10e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c001458:	f7ff fbca 	bl	c000bf0 <HAL_GetTick>
 c00145c:	1b80      	subs	r0, r0, r6
 c00145e:	2802      	cmp	r0, #2
 c001460:	d9ef      	bls.n	c001442 <HAL_RCC_OscConfig+0x236>
 c001462:	e772      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 c001464:	681a      	ldr	r2, [r3, #0]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001466:	4e08      	ldr	r6, [pc, #32]	; (c001488 <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_DISABLE();
 c001468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 c00146c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 c00146e:	f7ff fbbf 	bl	c000bf0 <HAL_GetTick>
 c001472:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001474:	6833      	ldr	r3, [r6, #0]
 c001476:	055f      	lsls	r7, r3, #21
 c001478:	f57f af4f 	bpl.w	c00131a <HAL_RCC_OscConfig+0x10e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c00147c:	f7ff fbb8 	bl	c000bf0 <HAL_GetTick>
 c001480:	1b40      	subs	r0, r0, r5
 c001482:	2802      	cmp	r0, #2
 c001484:	d9f6      	bls.n	c001474 <HAL_RCC_OscConfig+0x268>
 c001486:	e760      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
 c001488:	50021000 	.word	0x50021000
 c00148c:	30000000 	.word	0x30000000
 c001490:	30000008 	.word	0x30000008
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c001494:	6963      	ldr	r3, [r4, #20]
 c001496:	4dba      	ldr	r5, [pc, #744]	; (c001780 <HAL_RCC_OscConfig+0x574>)
 c001498:	b30b      	cbz	r3, c0014de <HAL_RCC_OscConfig+0x2d2>
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c00149a:	69a3      	ldr	r3, [r4, #24]
 c00149c:	b9d3      	cbnz	r3, c0014d4 <HAL_RCC_OscConfig+0x2c8>
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c00149e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 c0014a2:	f023 0310 	bic.w	r3, r3, #16
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c0014a6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      __HAL_RCC_LSI_ENABLE();
 c0014aa:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0014ae:	4eb4      	ldr	r6, [pc, #720]	; (c001780 <HAL_RCC_OscConfig+0x574>)
      __HAL_RCC_LSI_ENABLE();
 c0014b0:	f043 0301 	orr.w	r3, r3, #1
 c0014b4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 c0014b8:	f7ff fb9a 	bl	c000bf0 <HAL_GetTick>
 c0014bc:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0014be:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 c0014c2:	079a      	lsls	r2, r3, #30
 c0014c4:	f53f af2d 	bmi.w	c001322 <HAL_RCC_OscConfig+0x116>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0014c8:	f7ff fb92 	bl	c000bf0 <HAL_GetTick>
 c0014cc:	1b40      	subs	r0, r0, r5
 c0014ce:	2807      	cmp	r0, #7
 c0014d0:	d9f5      	bls.n	c0014be <HAL_RCC_OscConfig+0x2b2>
 c0014d2:	e73a      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c0014d4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 c0014d8:	f043 0310 	orr.w	r3, r3, #16
 c0014dc:	e7e3      	b.n	c0014a6 <HAL_RCC_OscConfig+0x29a>
      __HAL_RCC_LSI_DISABLE();
 c0014de:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 c0014e2:	f023 0301 	bic.w	r3, r3, #1
 c0014e6:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 c0014ea:	f7ff fb81 	bl	c000bf0 <HAL_GetTick>
 c0014ee:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0014f0:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 c0014f4:	079b      	lsls	r3, r3, #30
 c0014f6:	f57f af14 	bpl.w	c001322 <HAL_RCC_OscConfig+0x116>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0014fa:	f7ff fb79 	bl	c000bf0 <HAL_GetTick>
 c0014fe:	1b80      	subs	r0, r0, r6
 c001500:	2807      	cmp	r0, #7
 c001502:	d9f5      	bls.n	c0014f0 <HAL_RCC_OscConfig+0x2e4>
 c001504:	e721      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c001506:	4b9e      	ldr	r3, [pc, #632]	; (c001780 <HAL_RCC_OscConfig+0x574>)
 c001508:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 c00150a:	00d7      	lsls	r7, r2, #3
 c00150c:	d440      	bmi.n	c001590 <HAL_RCC_OscConfig+0x384>
      pwrclkchanged = SET;
 c00150e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 c001510:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 c001512:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 c001516:	659a      	str	r2, [r3, #88]	; 0x58
 c001518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00151e:	9301      	str	r3, [sp, #4]
 c001520:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001522:	4d98      	ldr	r5, [pc, #608]	; (c001784 <HAL_RCC_OscConfig+0x578>)
 c001524:	682b      	ldr	r3, [r5, #0]
 c001526:	05de      	lsls	r6, r3, #23
 c001528:	d534      	bpl.n	c001594 <HAL_RCC_OscConfig+0x388>
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c00152a:	68a3      	ldr	r3, [r4, #8]
 c00152c:	4d94      	ldr	r5, [pc, #592]	; (c001780 <HAL_RCC_OscConfig+0x574>)
 c00152e:	f013 0f01 	tst.w	r3, #1
 c001532:	d13f      	bne.n	c0015b4 <HAL_RCC_OscConfig+0x3a8>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c001534:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 c001538:	f022 0201 	bic.w	r2, r2, #1
 c00153c:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c001540:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 c001544:	f022 0204 	bic.w	r2, r2, #4
 c001548:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c00154c:	2b00      	cmp	r3, #0
 c00154e:	d140      	bne.n	c0015d2 <HAL_RCC_OscConfig+0x3c6>
      tickstart = HAL_GetTick();
 c001550:	f7ff fb4e 	bl	c000bf0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001554:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 c001558:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c00155a:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 c00155e:	0798      	lsls	r0, r3, #30
 c001560:	d478      	bmi.n	c001654 <HAL_RCC_OscConfig+0x448>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c001562:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 c001566:	0619      	lsls	r1, r3, #24
 c001568:	d54e      	bpl.n	c001608 <HAL_RCC_OscConfig+0x3fc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00156a:	f241 3888 	movw	r8, #5000	; 0x1388
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c00156e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 c001572:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c001576:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00157a:	4d81      	ldr	r5, [pc, #516]	; (c001780 <HAL_RCC_OscConfig+0x574>)
 c00157c:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 c001580:	051a      	lsls	r2, r3, #20
 c001582:	d541      	bpl.n	c001608 <HAL_RCC_OscConfig+0x3fc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001584:	f7ff fb34 	bl	c000bf0 <HAL_GetTick>
 c001588:	1b80      	subs	r0, r0, r6
 c00158a:	4540      	cmp	r0, r8
 c00158c:	d9f6      	bls.n	c00157c <HAL_RCC_OscConfig+0x370>
 c00158e:	e6dc      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
    FlagStatus       pwrclkchanged = RESET;
 c001590:	2700      	movs	r7, #0
 c001592:	e7c6      	b.n	c001522 <HAL_RCC_OscConfig+0x316>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c001594:	682b      	ldr	r3, [r5, #0]
 c001596:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c00159a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 c00159c:	f7ff fb28 	bl	c000bf0 <HAL_GetTick>
 c0015a0:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c0015a2:	682b      	ldr	r3, [r5, #0]
 c0015a4:	05d8      	lsls	r0, r3, #23
 c0015a6:	d4c0      	bmi.n	c00152a <HAL_RCC_OscConfig+0x31e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0015a8:	f7ff fb22 	bl	c000bf0 <HAL_GetTick>
 c0015ac:	1b80      	subs	r0, r0, r6
 c0015ae:	2802      	cmp	r0, #2
 c0015b0:	d9f7      	bls.n	c0015a2 <HAL_RCC_OscConfig+0x396>
 c0015b2:	e6ca      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c0015b4:	f013 0f04 	tst.w	r3, #4
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c0015b8:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 c0015bc:	bf1e      	ittt	ne
 c0015be:	f043 0304 	orrne.w	r3, r3, #4
 c0015c2:	f8c5 3090 	strne.w	r3, [r5, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0015c6:	f8d5 3090 	ldrne.w	r3, [r5, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0015ca:	f043 0301 	orr.w	r3, r3, #1
 c0015ce:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      tickstart = HAL_GetTick();
 c0015d2:	f7ff fb0d 	bl	c000bf0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0015d6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 c0015da:	4605      	mov	r5, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0015dc:	4e68      	ldr	r6, [pc, #416]	; (c001780 <HAL_RCC_OscConfig+0x574>)
 c0015de:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 c0015e2:	0799      	lsls	r1, r3, #30
 c0015e4:	d519      	bpl.n	c00161a <HAL_RCC_OscConfig+0x40e>
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c0015e6:	68a3      	ldr	r3, [r4, #8]
 c0015e8:	f013 0f80 	tst.w	r3, #128	; 0x80
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0015ec:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c0015f0:	d01f      	beq.n	c001632 <HAL_RCC_OscConfig+0x426>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0015f2:	f241 3888 	movw	r8, #5000	; 0x1388
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0015f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0015fa:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c0015fe:	4e60      	ldr	r6, [pc, #384]	; (c001780 <HAL_RCC_OscConfig+0x574>)
 c001600:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 c001604:	051a      	lsls	r2, r3, #20
 c001606:	d50e      	bpl.n	c001626 <HAL_RCC_OscConfig+0x41a>
    if (pwrclkchanged == SET)
 c001608:	2f00      	cmp	r7, #0
 c00160a:	f43f ae8e 	beq.w	c00132a <HAL_RCC_OscConfig+0x11e>
      __HAL_RCC_PWR_CLK_DISABLE();
 c00160e:	4a5c      	ldr	r2, [pc, #368]	; (c001780 <HAL_RCC_OscConfig+0x574>)
 c001610:	6d93      	ldr	r3, [r2, #88]	; 0x58
 c001612:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c001616:	6593      	str	r3, [r2, #88]	; 0x58
 c001618:	e687      	b.n	c00132a <HAL_RCC_OscConfig+0x11e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00161a:	f7ff fae9 	bl	c000bf0 <HAL_GetTick>
 c00161e:	1b40      	subs	r0, r0, r5
 c001620:	4540      	cmp	r0, r8
 c001622:	d9dc      	bls.n	c0015de <HAL_RCC_OscConfig+0x3d2>
 c001624:	e691      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001626:	f7ff fae3 	bl	c000bf0 <HAL_GetTick>
 c00162a:	1b40      	subs	r0, r0, r5
 c00162c:	4540      	cmp	r0, r8
 c00162e:	d9e7      	bls.n	c001600 <HAL_RCC_OscConfig+0x3f4>
 c001630:	e68b      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001632:	f241 3888 	movw	r8, #5000	; 0x1388
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c001636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c00163a:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00163e:	4e50      	ldr	r6, [pc, #320]	; (c001780 <HAL_RCC_OscConfig+0x574>)
 c001640:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 c001644:	051b      	lsls	r3, r3, #20
 c001646:	d5df      	bpl.n	c001608 <HAL_RCC_OscConfig+0x3fc>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001648:	f7ff fad2 	bl	c000bf0 <HAL_GetTick>
 c00164c:	1b40      	subs	r0, r0, r5
 c00164e:	4540      	cmp	r0, r8
 c001650:	d9f6      	bls.n	c001640 <HAL_RCC_OscConfig+0x434>
 c001652:	e67a      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001654:	f7ff facc 	bl	c000bf0 <HAL_GetTick>
 c001658:	1b80      	subs	r0, r0, r6
 c00165a:	4540      	cmp	r0, r8
 c00165c:	f67f af7d 	bls.w	c00155a <HAL_RCC_OscConfig+0x34e>
 c001660:	e673      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c001662:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 c001664:	4d46      	ldr	r5, [pc, #280]	; (c001780 <HAL_RCC_OscConfig+0x574>)
 c001666:	b19b      	cbz	r3, c001690 <HAL_RCC_OscConfig+0x484>
      __HAL_RCC_HSI48_ENABLE();
 c001668:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 c00166c:	f043 0301 	orr.w	r3, r3, #1
 c001670:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 c001674:	f7ff fabc 	bl	c000bf0 <HAL_GetTick>
 c001678:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c00167a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 c00167e:	079f      	lsls	r7, r3, #30
 c001680:	f53f ae57 	bmi.w	c001332 <HAL_RCC_OscConfig+0x126>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c001684:	f7ff fab4 	bl	c000bf0 <HAL_GetTick>
 c001688:	1b80      	subs	r0, r0, r6
 c00168a:	2802      	cmp	r0, #2
 c00168c:	d9f5      	bls.n	c00167a <HAL_RCC_OscConfig+0x46e>
 c00168e:	e65c      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
      __HAL_RCC_HSI48_DISABLE();
 c001690:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 c001694:	f023 0301 	bic.w	r3, r3, #1
 c001698:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 c00169c:	f7ff faa8 	bl	c000bf0 <HAL_GetTick>
 c0016a0:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0016a2:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 c0016a6:	0798      	lsls	r0, r3, #30
 c0016a8:	f57f ae43 	bpl.w	c001332 <HAL_RCC_OscConfig+0x126>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c0016ac:	f7ff faa0 	bl	c000bf0 <HAL_GetTick>
 c0016b0:	1b80      	subs	r0, r0, r6
 c0016b2:	2802      	cmp	r0, #2
 c0016b4:	d9f5      	bls.n	c0016a2 <HAL_RCC_OscConfig+0x496>
 c0016b6:	e648      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0016b8:	4d31      	ldr	r5, [pc, #196]	; (c001780 <HAL_RCC_OscConfig+0x574>)
 c0016ba:	68ab      	ldr	r3, [r5, #8]
 c0016bc:	f003 030c 	and.w	r3, r3, #12
 c0016c0:	2b0c      	cmp	r3, #12
 c0016c2:	d063      	beq.n	c00178c <HAL_RCC_OscConfig+0x580>
        __HAL_RCC_PLL_DISABLE();
 c0016c4:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c0016c6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 c0016c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0016cc:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c0016ce:	d13b      	bne.n	c001748 <HAL_RCC_OscConfig+0x53c>
        tickstart = HAL_GetTick();
 c0016d0:	f7ff fa8e 	bl	c000bf0 <HAL_GetTick>
 c0016d4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0016d6:	682b      	ldr	r3, [r5, #0]
 c0016d8:	0199      	lsls	r1, r3, #6
 c0016da:	d42f      	bmi.n	c00173c <HAL_RCC_OscConfig+0x530>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c0016dc:	68ea      	ldr	r2, [r5, #12]
 c0016de:	4b2a      	ldr	r3, [pc, #168]	; (c001788 <HAL_RCC_OscConfig+0x57c>)
 c0016e0:	4013      	ands	r3, r2
 c0016e2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 c0016e4:	4313      	orrs	r3, r2
 c0016e6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 c0016e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 c0016ec:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 c0016ee:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 c0016f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 c0016f4:	3a01      	subs	r2, #1
 c0016f6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 c0016fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 c0016fc:	0852      	lsrs	r2, r2, #1
 c0016fe:	3a01      	subs	r2, #1
 c001700:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 c001704:	6c62      	ldr	r2, [r4, #68]	; 0x44
 c001706:	0852      	lsrs	r2, r2, #1
 c001708:	3a01      	subs	r2, #1
 c00170a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 c00170e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 c001710:	682b      	ldr	r3, [r5, #0]
 c001712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c001716:	602b      	str	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c001718:	68eb      	ldr	r3, [r5, #12]
 c00171a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c00171e:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 c001720:	f7ff fa66 	bl	c000bf0 <HAL_GetTick>
 c001724:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c001726:	4d16      	ldr	r5, [pc, #88]	; (c001780 <HAL_RCC_OscConfig+0x574>)
 c001728:	682b      	ldr	r3, [r5, #0]
 c00172a:	019a      	lsls	r2, r3, #6
 c00172c:	f53f ae05 	bmi.w	c00133a <HAL_RCC_OscConfig+0x12e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c001730:	f7ff fa5e 	bl	c000bf0 <HAL_GetTick>
 c001734:	1b00      	subs	r0, r0, r4
 c001736:	2802      	cmp	r0, #2
 c001738:	d9f6      	bls.n	c001728 <HAL_RCC_OscConfig+0x51c>
 c00173a:	e606      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c00173c:	f7ff fa58 	bl	c000bf0 <HAL_GetTick>
 c001740:	1b80      	subs	r0, r0, r6
 c001742:	2802      	cmp	r0, #2
 c001744:	d9c7      	bls.n	c0016d6 <HAL_RCC_OscConfig+0x4ca>
 c001746:	e600      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c001748:	682b      	ldr	r3, [r5, #0]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c00174a:	4c0d      	ldr	r4, [pc, #52]	; (c001780 <HAL_RCC_OscConfig+0x574>)
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c00174c:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c001750:	bf02      	ittt	eq
 c001752:	68eb      	ldreq	r3, [r5, #12]
 c001754:	f023 0303 	biceq.w	r3, r3, #3
 c001758:	60eb      	streq	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c00175a:	68e3      	ldr	r3, [r4, #12]
 c00175c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 c001760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c001764:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 c001766:	f7ff fa43 	bl	c000bf0 <HAL_GetTick>
 c00176a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00176c:	6823      	ldr	r3, [r4, #0]
 c00176e:	019b      	lsls	r3, r3, #6
 c001770:	f57f ade3 	bpl.w	c00133a <HAL_RCC_OscConfig+0x12e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c001774:	f7ff fa3c 	bl	c000bf0 <HAL_GetTick>
 c001778:	1b40      	subs	r0, r0, r5
 c00177a:	2802      	cmp	r0, #2
 c00177c:	d9f6      	bls.n	c00176c <HAL_RCC_OscConfig+0x560>
 c00177e:	e5e4      	b.n	c00134a <HAL_RCC_OscConfig+0x13e>
 c001780:	50021000 	.word	0x50021000
 c001784:	50007000 	.word	0x50007000
 c001788:	019f800c 	.word	0x019f800c
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c00178c:	2801      	cmp	r0, #1
 c00178e:	f43f ad84 	beq.w	c00129a <HAL_RCC_OscConfig+0x8e>
        pll_config = RCC->PLLCFGR;
 c001792:	68eb      	ldr	r3, [r5, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c001794:	6b22      	ldr	r2, [r4, #48]	; 0x30
 c001796:	f003 0103 	and.w	r1, r3, #3
 c00179a:	4291      	cmp	r1, r2
 c00179c:	f47f ad96 	bne.w	c0012cc <HAL_RCC_OscConfig+0xc0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c0017a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c0017a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c0017a6:	3901      	subs	r1, #1
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c0017a8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 c0017ac:	f47f ad8e 	bne.w	c0012cc <HAL_RCC_OscConfig+0xc0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c0017b0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 c0017b2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c0017b6:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 c0017ba:	f47f ad87 	bne.w	c0012cc <HAL_RCC_OscConfig+0xc0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c0017be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 c0017c0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c0017c4:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 c0017c8:	f47f ad80 	bne.w	c0012cc <HAL_RCC_OscConfig+0xc0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c0017cc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 c0017ce:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 c0017d2:	0852      	lsrs	r2, r2, #1
 c0017d4:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c0017d6:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 c0017da:	f47f ad77 	bne.w	c0012cc <HAL_RCC_OscConfig+0xc0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c0017de:	6c62      	ldr	r2, [r4, #68]	; 0x44
 c0017e0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 c0017e4:	0852      	lsrs	r2, r2, #1
 c0017e6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c0017e8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 c0017ec:	f43f ada5 	beq.w	c00133a <HAL_RCC_OscConfig+0x12e>
 c0017f0:	e56c      	b.n	c0012cc <HAL_RCC_OscConfig+0xc0>
 c0017f2:	bf00      	nop

0c0017f4 <HAL_RCC_ClockConfig>:
{
 c0017f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c0017f8:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 c0017fa:	4604      	mov	r4, r0
 c0017fc:	b910      	cbnz	r0, c001804 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 c0017fe:	2001      	movs	r0, #1
}
 c001800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c001804:	4a75      	ldr	r2, [pc, #468]	; (c0019dc <HAL_RCC_ClockConfig+0x1e8>)
 c001806:	6813      	ldr	r3, [r2, #0]
 c001808:	f003 030f 	and.w	r3, r3, #15
 c00180c:	428b      	cmp	r3, r1
 c00180e:	d32c      	bcc.n	c00186a <HAL_RCC_ClockConfig+0x76>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c001810:	6821      	ldr	r1, [r4, #0]
 c001812:	f011 0601 	ands.w	r6, r1, #1
 c001816:	d133      	bne.n	c001880 <HAL_RCC_ClockConfig+0x8c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c001818:	6821      	ldr	r1, [r4, #0]
 c00181a:	0788      	lsls	r0, r1, #30
 c00181c:	f140 80c1 	bpl.w	c0019a2 <HAL_RCC_ClockConfig+0x1ae>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c001820:	4a6f      	ldr	r2, [pc, #444]	; (c0019e0 <HAL_RCC_ClockConfig+0x1ec>)
 c001822:	68a0      	ldr	r0, [r4, #8]
 c001824:	6893      	ldr	r3, [r2, #8]
 c001826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00182a:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c00182c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c00182e:	4a6b      	ldr	r2, [pc, #428]	; (c0019dc <HAL_RCC_ClockConfig+0x1e8>)
 c001830:	6813      	ldr	r3, [r2, #0]
 c001832:	f003 030f 	and.w	r3, r3, #15
 c001836:	42ab      	cmp	r3, r5
 c001838:	f200 80bb 	bhi.w	c0019b2 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c00183c:	074a      	lsls	r2, r1, #29
 c00183e:	f100 80c4 	bmi.w	c0019ca <HAL_RCC_ClockConfig+0x1d6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c001842:	070b      	lsls	r3, r1, #28
 c001844:	d507      	bpl.n	c001856 <HAL_RCC_ClockConfig+0x62>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c001846:	4a66      	ldr	r2, [pc, #408]	; (c0019e0 <HAL_RCC_ClockConfig+0x1ec>)
 c001848:	6921      	ldr	r1, [r4, #16]
 c00184a:	6893      	ldr	r3, [r2, #8]
 c00184c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 c001850:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 c001854:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c001856:	f7ff fcc9 	bl	c0011ec <HAL_RCC_GetHCLKFreq>
 c00185a:	4b62      	ldr	r3, [pc, #392]	; (c0019e4 <HAL_RCC_ClockConfig+0x1f0>)
 c00185c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 c00185e:	4b62      	ldr	r3, [pc, #392]	; (c0019e8 <HAL_RCC_ClockConfig+0x1f4>)
 c001860:	6818      	ldr	r0, [r3, #0]
}
 c001862:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 c001866:	f7ff b97f 	b.w	c000b68 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 c00186a:	6813      	ldr	r3, [r2, #0]
 c00186c:	f023 030f 	bic.w	r3, r3, #15
 c001870:	430b      	orrs	r3, r1
 c001872:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c001874:	6813      	ldr	r3, [r2, #0]
 c001876:	f003 030f 	and.w	r3, r3, #15
 c00187a:	428b      	cmp	r3, r1
 c00187c:	d1bf      	bne.n	c0017fe <HAL_RCC_ClockConfig+0xa>
 c00187e:	e7c7      	b.n	c001810 <HAL_RCC_ClockConfig+0x1c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c001880:	6862      	ldr	r2, [r4, #4]
 c001882:	4b57      	ldr	r3, [pc, #348]	; (c0019e0 <HAL_RCC_ClockConfig+0x1ec>)
 c001884:	2a03      	cmp	r2, #3
 c001886:	d171      	bne.n	c00196c <HAL_RCC_ClockConfig+0x178>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c001888:	681a      	ldr	r2, [r3, #0]
 c00188a:	0192      	lsls	r2, r2, #6
 c00188c:	d5b7      	bpl.n	c0017fe <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c00188e:	68da      	ldr	r2, [r3, #12]
 c001890:	f002 0203 	and.w	r2, r2, #3
 c001894:	2a01      	cmp	r2, #1
 c001896:	d121      	bne.n	c0018dc <HAL_RCC_ClockConfig+0xe8>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c001898:	681a      	ldr	r2, [r3, #0]
 c00189a:	0717      	lsls	r7, r2, #28
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c00189c:	bf54      	ite	pl
 c00189e:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0018a2:	681b      	ldrmi	r3, [r3, #0]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c0018a4:	4a51      	ldr	r2, [pc, #324]	; (c0019ec <HAL_RCC_ClockConfig+0x1f8>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c0018a6:	bf54      	ite	pl
 c0018a8:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0018ac:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 c0018b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c0018b4:	4e4a      	ldr	r6, [pc, #296]	; (c0019e0 <HAL_RCC_ClockConfig+0x1ec>)
 c0018b6:	68f7      	ldr	r7, [r6, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0018b8:	68f3      	ldr	r3, [r6, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c0018ba:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0018be:	f3c3 1303 	ubfx	r3, r3, #4, #4

  switch (pllsource)
 c0018c2:	2f02      	cmp	r7, #2
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0018c4:	f103 0001 	add.w	r0, r3, #1
  switch (pllsource)
 c0018c8:	d00a      	beq.n	c0018e0 <HAL_RCC_ClockConfig+0xec>
 c0018ca:	2f03      	cmp	r7, #3
 c0018cc:	d037      	beq.n	c00193e <HAL_RCC_ClockConfig+0x14a>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
      break;

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0018ce:	fbb2 f3f0 	udiv	r3, r2, r0
 c0018d2:	68f6      	ldr	r6, [r6, #12]
 c0018d4:	f3c6 2606 	ubfx	r6, r6, #8, #7
 c0018d8:	4373      	muls	r3, r6
      break;
 c0018da:	e008      	b.n	c0018ee <HAL_RCC_ClockConfig+0xfa>
  uint32_t msirange = 0U;
 c0018dc:	2200      	movs	r2, #0
 c0018de:	e7e9      	b.n	c0018b4 <HAL_RCC_ClockConfig+0xc0>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0018e0:	68f2      	ldr	r2, [r6, #12]
 c0018e2:	4b43      	ldr	r3, [pc, #268]	; (c0019f0 <HAL_RCC_ClockConfig+0x1fc>)
 c0018e4:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0018e8:	fbb3 f3f0 	udiv	r3, r3, r0
 c0018ec:	4353      	muls	r3, r2
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0018ee:	483c      	ldr	r0, [pc, #240]	; (c0019e0 <HAL_RCC_ClockConfig+0x1ec>)
 c0018f0:	68c2      	ldr	r2, [r0, #12]
 c0018f2:	f3c2 6241 	ubfx	r2, r2, #25, #2
 c0018f6:	3201      	adds	r2, #1
 c0018f8:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco / pllr;
 c0018fa:	fbb3 f3f2 	udiv	r3, r3, r2
      if (pllfreq > 80000000U)
 c0018fe:	4a3d      	ldr	r2, [pc, #244]	; (c0019f4 <HAL_RCC_ClockConfig+0x200>)
 c001900:	4293      	cmp	r3, r2
 c001902:	d821      	bhi.n	c001948 <HAL_RCC_ClockConfig+0x154>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c001904:	2600      	movs	r6, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c001906:	4f36      	ldr	r7, [pc, #216]	; (c0019e0 <HAL_RCC_ClockConfig+0x1ec>)
 c001908:	6862      	ldr	r2, [r4, #4]
 c00190a:	68bb      	ldr	r3, [r7, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c00190c:	f241 3988 	movw	r9, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c001910:	f023 0303 	bic.w	r3, r3, #3
 c001914:	4313      	orrs	r3, r2
 c001916:	60bb      	str	r3, [r7, #8]
    tickstart = HAL_GetTick();
 c001918:	f7ff f96a 	bl	c000bf0 <HAL_GetTick>
 c00191c:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c00191e:	68bb      	ldr	r3, [r7, #8]
 c001920:	6862      	ldr	r2, [r4, #4]
 c001922:	f003 030c 	and.w	r3, r3, #12
 c001926:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 c00192a:	f43f af75 	beq.w	c001818 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c00192e:	f7ff f95f 	bl	c000bf0 <HAL_GetTick>
 c001932:	eba0 0008 	sub.w	r0, r0, r8
 c001936:	4548      	cmp	r0, r9
 c001938:	d9f1      	bls.n	c00191e <HAL_RCC_ClockConfig+0x12a>
        return HAL_TIMEOUT;
 c00193a:	2003      	movs	r0, #3
 c00193c:	e760      	b.n	c001800 <HAL_RCC_ClockConfig+0xc>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00193e:	68f2      	ldr	r2, [r6, #12]
 c001940:	4b2d      	ldr	r3, [pc, #180]	; (c0019f8 <HAL_RCC_ClockConfig+0x204>)
 c001942:	f3c2 2206 	ubfx	r2, r2, #8, #7
 c001946:	e7cf      	b.n	c0018e8 <HAL_RCC_ClockConfig+0xf4>
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c001948:	6883      	ldr	r3, [r0, #8]
 c00194a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 c00194e:	d107      	bne.n	c001960 <HAL_RCC_ClockConfig+0x16c>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c001950:	6883      	ldr	r3, [r0, #8]
 c001952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c001956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00195a:	6083      	str	r3, [r0, #8]
        hpre = RCC_SYSCLK_DIV2;
 c00195c:	2680      	movs	r6, #128	; 0x80
 c00195e:	e7d2      	b.n	c001906 <HAL_RCC_ClockConfig+0x112>
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c001960:	078e      	lsls	r6, r1, #30
 c001962:	d5cf      	bpl.n	c001904 <HAL_RCC_ClockConfig+0x110>
 c001964:	68a3      	ldr	r3, [r4, #8]
 c001966:	2b00      	cmp	r3, #0
 c001968:	d1cc      	bne.n	c001904 <HAL_RCC_ClockConfig+0x110>
 c00196a:	e7f1      	b.n	c001950 <HAL_RCC_ClockConfig+0x15c>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c00196c:	2a02      	cmp	r2, #2
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00196e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c001970:	d110      	bne.n	c001994 <HAL_RCC_ClockConfig+0x1a0>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c001972:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001976:	f43f af42 	beq.w	c0017fe <HAL_RCC_ClockConfig+0xa>
      pllfreq = HAL_RCC_GetSysClockFreq();
 c00197a:	f7ff fbdf 	bl	c00113c <HAL_RCC_GetSysClockFreq>
      if (pllfreq > 80000000U)
 c00197e:	4b1d      	ldr	r3, [pc, #116]	; (c0019f4 <HAL_RCC_ClockConfig+0x200>)
 c001980:	4298      	cmp	r0, r3
 c001982:	d9bf      	bls.n	c001904 <HAL_RCC_ClockConfig+0x110>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c001984:	4a16      	ldr	r2, [pc, #88]	; (c0019e0 <HAL_RCC_ClockConfig+0x1ec>)
 c001986:	6893      	ldr	r3, [r2, #8]
 c001988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00198c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c001990:	6093      	str	r3, [r2, #8]
 c001992:	e7e3      	b.n	c00195c <HAL_RCC_ClockConfig+0x168>
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c001994:	b912      	cbnz	r2, c00199c <HAL_RCC_ClockConfig+0x1a8>
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001996:	f013 0f02 	tst.w	r3, #2
 c00199a:	e7ec      	b.n	c001976 <HAL_RCC_ClockConfig+0x182>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c00199c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 c0019a0:	e7e9      	b.n	c001976 <HAL_RCC_ClockConfig+0x182>
    if (hpre == RCC_SYSCLK_DIV2)
 c0019a2:	2e80      	cmp	r6, #128	; 0x80
 c0019a4:	f47f af43 	bne.w	c00182e <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c0019a8:	4a0d      	ldr	r2, [pc, #52]	; (c0019e0 <HAL_RCC_ClockConfig+0x1ec>)
 c0019aa:	6893      	ldr	r3, [r2, #8]
 c0019ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0019b0:	e73c      	b.n	c00182c <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0019b2:	6813      	ldr	r3, [r2, #0]
 c0019b4:	f023 030f 	bic.w	r3, r3, #15
 c0019b8:	432b      	orrs	r3, r5
 c0019ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c0019bc:	6813      	ldr	r3, [r2, #0]
 c0019be:	f003 030f 	and.w	r3, r3, #15
 c0019c2:	42ab      	cmp	r3, r5
 c0019c4:	f47f af1b 	bne.w	c0017fe <HAL_RCC_ClockConfig+0xa>
 c0019c8:	e738      	b.n	c00183c <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c0019ca:	4a05      	ldr	r2, [pc, #20]	; (c0019e0 <HAL_RCC_ClockConfig+0x1ec>)
 c0019cc:	68e0      	ldr	r0, [r4, #12]
 c0019ce:	6893      	ldr	r3, [r2, #8]
 c0019d0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 c0019d4:	4303      	orrs	r3, r0
 c0019d6:	6093      	str	r3, [r2, #8]
 c0019d8:	e733      	b.n	c001842 <HAL_RCC_ClockConfig+0x4e>
 c0019da:	bf00      	nop
 c0019dc:	50022000 	.word	0x50022000
 c0019e0:	50021000 	.word	0x50021000
 c0019e4:	30000000 	.word	0x30000000
 c0019e8:	30000008 	.word	0x30000008
 c0019ec:	0c001adc 	.word	0x0c001adc
 c0019f0:	00f42400 	.word	0x00f42400
 c0019f4:	04c4b400 	.word	0x04c4b400
 c0019f8:	007a1200 	.word	0x007a1200

0c0019fc <HAL_RTCEx_SecureModeSet>:
  assert_param(IS_TAMP_SECURE_FULL(secureState->tampSecureFull));
  assert_param(IS_RTC_BKP(secureState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(secureState->backupRegisterStartZone3));

  /* RTC, rtcNonSecureFeatures is only relevant if secureState->rtcSecureFull == RTC_SECURE_FULL_NO */
  WRITE_REG(RTC->SMCR, secureState->rtcSecureFull | secureState->rtcNonSecureFeatures);
 c0019fc:	e9d1 3200 	ldrd	r3, r2, [r1]
 c001a00:	4313      	orrs	r3, r2
 c001a02:	4a07      	ldr	r2, [pc, #28]	; (c001a20 <HAL_RTCEx_SecureModeSet+0x24>)
            secureState->tampSecureFull |
            (TAMP_SMCR_BKPRWDPROT & (secureState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos)) |
            (TAMP_SMCR_BKPWDPROT & (secureState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
}
 c001a04:	2000      	movs	r0, #0
  WRITE_REG(RTC->SMCR, secureState->rtcSecureFull | secureState->rtcNonSecureFeatures);
 c001a06:	6213      	str	r3, [r2, #32]
  WRITE_REG(TAMP->SMCR,
 c001a08:	688a      	ldr	r2, [r1, #8]
 c001a0a:	7b0b      	ldrb	r3, [r1, #12]
 c001a0c:	4313      	orrs	r3, r2
 c001a0e:	690a      	ldr	r2, [r1, #16]
 c001a10:	0412      	lsls	r2, r2, #16
 c001a12:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 c001a16:	4313      	orrs	r3, r2
 c001a18:	4a02      	ldr	r2, [pc, #8]	; (c001a24 <HAL_RTCEx_SecureModeSet+0x28>)
 c001a1a:	6213      	str	r3, [r2, #32]
}
 c001a1c:	4770      	bx	lr
 c001a1e:	bf00      	nop
 c001a20:	50002800 	.word	0x50002800
 c001a24:	50003400 	.word	0x50003400

0c001a28 <HAL_RTCEx_PrivilegeModeSet>:
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 c001a28:	e9d1 3200 	ldrd	r3, r2, [r1]
 c001a2c:	4313      	orrs	r3, r2
 c001a2e:	4a09      	ldr	r2, [pc, #36]	; (c001a54 <HAL_RTCEx_PrivilegeModeSet+0x2c>)
 c001a30:	61d3      	str	r3, [r2, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 c001a32:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
 c001a36:	4313      	orrs	r3, r2
 c001a38:	4a07      	ldr	r2, [pc, #28]	; (c001a58 <HAL_RTCEx_PrivilegeModeSet+0x30>)
 c001a3a:	6253      	str	r3, [r2, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 c001a3c:	6a13      	ldr	r3, [r2, #32]
 c001a3e:	6908      	ldr	r0, [r1, #16]
 c001a40:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 c001a44:	6949      	ldr	r1, [r1, #20]
 c001a46:	4303      	orrs	r3, r0
 c001a48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
}
 c001a4c:	2000      	movs	r0, #0
  MODIFY_REG(TAMP->SMCR,
 c001a4e:	6213      	str	r3, [r2, #32]
}
 c001a50:	4770      	bx	lr
 c001a52:	bf00      	nop
 c001a54:	50002800 	.word	0x50002800
 c001a58:	50003400 	.word	0x50003400

0c001a5c <__libc_init_array>:
 c001a5c:	b570      	push	{r4, r5, r6, lr}
 c001a5e:	4d0d      	ldr	r5, [pc, #52]	; (c001a94 <__libc_init_array+0x38>)
 c001a60:	2600      	movs	r6, #0
 c001a62:	4c0d      	ldr	r4, [pc, #52]	; (c001a98 <__libc_init_array+0x3c>)
 c001a64:	1b64      	subs	r4, r4, r5
 c001a66:	10a4      	asrs	r4, r4, #2
 c001a68:	42a6      	cmp	r6, r4
 c001a6a:	d109      	bne.n	c001a80 <__libc_init_array+0x24>
 c001a6c:	4d0b      	ldr	r5, [pc, #44]	; (c001a9c <__libc_init_array+0x40>)
 c001a6e:	2600      	movs	r6, #0
 c001a70:	4c0b      	ldr	r4, [pc, #44]	; (c001aa0 <__libc_init_array+0x44>)
 c001a72:	f000 f81f 	bl	c001ab4 <_init>
 c001a76:	1b64      	subs	r4, r4, r5
 c001a78:	10a4      	asrs	r4, r4, #2
 c001a7a:	42a6      	cmp	r6, r4
 c001a7c:	d105      	bne.n	c001a8a <__libc_init_array+0x2e>
 c001a7e:	bd70      	pop	{r4, r5, r6, pc}
 c001a80:	f855 3b04 	ldr.w	r3, [r5], #4
 c001a84:	3601      	adds	r6, #1
 c001a86:	4798      	blx	r3
 c001a88:	e7ee      	b.n	c001a68 <__libc_init_array+0xc>
 c001a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 c001a8e:	3601      	adds	r6, #1
 c001a90:	4798      	blx	r3
 c001a92:	e7f2      	b.n	c001a7a <__libc_init_array+0x1e>
 c001a94:	0c001b1c 	.word	0x0c001b1c
 c001a98:	0c001b1c 	.word	0x0c001b1c
 c001a9c:	0c001b1c 	.word	0x0c001b1c
 c001aa0:	0c001b20 	.word	0x0c001b20

0c001aa4 <memset>:
 c001aa4:	4402      	add	r2, r0
 c001aa6:	4603      	mov	r3, r0
 c001aa8:	4293      	cmp	r3, r2
 c001aaa:	d100      	bne.n	c001aae <memset+0xa>
 c001aac:	4770      	bx	lr
 c001aae:	f803 1b01 	strb.w	r1, [r3], #1
 c001ab2:	e7f9      	b.n	c001aa8 <memset+0x4>

0c001ab4 <_init>:
 c001ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001ab6:	bf00      	nop
 c001ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c001aba:	bc08      	pop	{r3}
 c001abc:	469e      	mov	lr, r3
 c001abe:	4770      	bx	lr

0c001ac0 <_fini>:
 c001ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c001ac2:	bf00      	nop
 c001ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c001ac6:	bc08      	pop	{r3}
 c001ac8:	469e      	mov	lr, r3
 c001aca:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_LEDToggle_RED>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c2 bb3a 	b.w	c00067c <__acle_se_SECURE_LEDToggle_RED>

0c03e008 <SECURE_LED_RED>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c2 bb74 	b.w	c0006f8 <__acle_se_SECURE_LED_RED>

0c03e010 <SECURE_SystemCoreClockUpdate>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c2 bd42 	b.w	c000a9c <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e018 <SECURE_RegisterCallback>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c2 baec 	b.w	c0005f8 <__acle_se_SECURE_RegisterCallback>

0c03e020 <SECURE_LED_YELLOW>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c2 bbe4 	b.w	c0007f0 <__acle_se_SECURE_LED_YELLOW>

0c03e028 <SECURE_LEDToggle_YELLOW>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c2 bba2 	b.w	c000774 <__acle_se_SECURE_LEDToggle_YELLOW>
	...
