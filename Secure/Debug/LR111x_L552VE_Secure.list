
LR111x_L552VE_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026fc  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0c0028f0  0c0028f0  000128f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c002940  0c002940  0002e040  2**0
                  CONTENTS
  4 .ARM          00000000  0c002940  0c002940  0002e040  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c002940  0c002940  0002e040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c002940  0c002940  00012940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c002944  0c002944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  30000000  0c002948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000040  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          0000009c  3000000c  3000000c  0003000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  300000a8  300000a8  0003000c  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c33e  00000000  00000000  0002e076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000219d  00000000  00000000  0003a3b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a80  00000000  00000000  0003c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000958  00000000  00000000  0003cfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a9ee  00000000  00000000  0003d930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cdf6  00000000  00000000  0006831e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010c258  00000000  00000000  00075114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0018136c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002858  00000000  00000000  001813c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	e000      	b.n	c000206 <__do_global_dtors_aux+0x12>
 c000204:	bf00      	nop
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	3000000c 	.word	0x3000000c
 c000210:	00000000 	.word	0x00000000
 c000214:	0c0028d8 	.word	0x0c0028d8

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	e000      	b.n	c000226 <frame_dummy+0xe>
 c000224:	bf00      	nop
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	30000010 	.word	0x30000010
 c000230:	0c0028d8 	.word	0x0c0028d8

0c000234 <__gnu_cmse_nonsecure_call>:
 c000234:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000238:	4627      	mov	r7, r4
 c00023a:	46a0      	mov	r8, r4
 c00023c:	46a1      	mov	r9, r4
 c00023e:	46a2      	mov	sl, r4
 c000240:	46a3      	mov	fp, r4
 c000242:	46a4      	mov	ip, r4
 c000244:	ed2d 8b10 	vpush	{d8-d15}
 c000248:	f04f 0500 	mov.w	r5, #0
 c00024c:	ec45 5b18 	vmov	d8, r5, r5
 c000250:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000254:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000258:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00025c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000260:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000264:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000268:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00026c:	eef1 5a10 	vmrs	r5, fpscr
 c000270:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000274:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000278:	4035      	ands	r5, r6
 c00027a:	eee1 5a10 	vmsr	fpscr, r5
 c00027e:	f384 8800 	msr	CPSR_f, r4
 c000282:	4625      	mov	r5, r4
 c000284:	4626      	mov	r6, r4
 c000286:	47a4      	blxns	r4
 c000288:	ecbd 8b10 	vpop	{d8-d15}
 c00028c:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 c000290:	b480      	push	{r7}
 c000292:	b085      	sub	sp, #20
 c000294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 c000296:	4b15      	ldr	r3, [pc, #84]	; (c0002ec <MX_DMA_Init+0x5c>)
 c000298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00029a:	4a14      	ldr	r2, [pc, #80]	; (c0002ec <MX_DMA_Init+0x5c>)
 c00029c:	f043 0304 	orr.w	r3, r3, #4
 c0002a0:	6493      	str	r3, [r2, #72]	; 0x48
 c0002a2:	4b12      	ldr	r3, [pc, #72]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0002a6:	f003 0304 	and.w	r3, r3, #4
 c0002aa:	60fb      	str	r3, [r7, #12]
 c0002ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 c0002ae:	4b0f      	ldr	r3, [pc, #60]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0002b2:	4a0e      	ldr	r2, [pc, #56]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002b4:	f043 0301 	orr.w	r3, r3, #1
 c0002b8:	6493      	str	r3, [r2, #72]	; 0x48
 c0002ba:	4b0c      	ldr	r3, [pc, #48]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0002be:	f003 0301 	and.w	r3, r3, #1
 c0002c2:	60bb      	str	r3, [r7, #8]
 c0002c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 c0002c6:	4b09      	ldr	r3, [pc, #36]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0002ca:	4a08      	ldr	r2, [pc, #32]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002cc:	f043 0302 	orr.w	r3, r3, #2
 c0002d0:	6493      	str	r3, [r2, #72]	; 0x48
 c0002d2:	4b06      	ldr	r3, [pc, #24]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0002d6:	f003 0302 	and.w	r3, r3, #2
 c0002da:	607b      	str	r3, [r7, #4]
 c0002dc:	687b      	ldr	r3, [r7, #4]

}
 c0002de:	bf00      	nop
 c0002e0:	3714      	adds	r7, #20
 c0002e2:	46bd      	mov	sp, r7
 c0002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0002e8:	4770      	bx	lr
 c0002ea:	bf00      	nop
 c0002ec:	50021000 	.word	0x50021000

0c0002f0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 c0002f0:	b580      	push	{r7, lr}
 c0002f2:	b08c      	sub	sp, #48	; 0x30
 c0002f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c0002f6:	f107 031c 	add.w	r3, r7, #28
 c0002fa:	2200      	movs	r2, #0
 c0002fc:	601a      	str	r2, [r3, #0]
 c0002fe:	605a      	str	r2, [r3, #4]
 c000300:	609a      	str	r2, [r3, #8]
 c000302:	60da      	str	r2, [r3, #12]
 c000304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 c000306:	4b48      	ldr	r3, [pc, #288]	; (c000428 <MX_GPIO_Init+0x138>)
 c000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00030a:	4a47      	ldr	r2, [pc, #284]	; (c000428 <MX_GPIO_Init+0x138>)
 c00030c:	f043 0310 	orr.w	r3, r3, #16
 c000310:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000312:	4b45      	ldr	r3, [pc, #276]	; (c000428 <MX_GPIO_Init+0x138>)
 c000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000316:	f003 0310 	and.w	r3, r3, #16
 c00031a:	61bb      	str	r3, [r7, #24]
 c00031c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c00031e:	4b42      	ldr	r3, [pc, #264]	; (c000428 <MX_GPIO_Init+0x138>)
 c000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000322:	4a41      	ldr	r2, [pc, #260]	; (c000428 <MX_GPIO_Init+0x138>)
 c000324:	f043 0304 	orr.w	r3, r3, #4
 c000328:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00032a:	4b3f      	ldr	r3, [pc, #252]	; (c000428 <MX_GPIO_Init+0x138>)
 c00032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00032e:	f003 0304 	and.w	r3, r3, #4
 c000332:	617b      	str	r3, [r7, #20]
 c000334:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c000336:	4b3c      	ldr	r3, [pc, #240]	; (c000428 <MX_GPIO_Init+0x138>)
 c000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00033a:	4a3b      	ldr	r2, [pc, #236]	; (c000428 <MX_GPIO_Init+0x138>)
 c00033c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c000340:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000342:	4b39      	ldr	r3, [pc, #228]	; (c000428 <MX_GPIO_Init+0x138>)
 c000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c00034a:	613b      	str	r3, [r7, #16]
 c00034c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c00034e:	4b36      	ldr	r3, [pc, #216]	; (c000428 <MX_GPIO_Init+0x138>)
 c000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000352:	4a35      	ldr	r2, [pc, #212]	; (c000428 <MX_GPIO_Init+0x138>)
 c000354:	f043 0301 	orr.w	r3, r3, #1
 c000358:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00035a:	4b33      	ldr	r3, [pc, #204]	; (c000428 <MX_GPIO_Init+0x138>)
 c00035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00035e:	f003 0301 	and.w	r3, r3, #1
 c000362:	60fb      	str	r3, [r7, #12]
 c000364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000366:	4b30      	ldr	r3, [pc, #192]	; (c000428 <MX_GPIO_Init+0x138>)
 c000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00036a:	4a2f      	ldr	r2, [pc, #188]	; (c000428 <MX_GPIO_Init+0x138>)
 c00036c:	f043 0302 	orr.w	r3, r3, #2
 c000370:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000372:	4b2d      	ldr	r3, [pc, #180]	; (c000428 <MX_GPIO_Init+0x138>)
 c000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000376:	f003 0302 	and.w	r3, r3, #2
 c00037a:	60bb      	str	r3, [r7, #8]
 c00037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c00037e:	4b2a      	ldr	r3, [pc, #168]	; (c000428 <MX_GPIO_Init+0x138>)
 c000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000382:	4a29      	ldr	r2, [pc, #164]	; (c000428 <MX_GPIO_Init+0x138>)
 c000384:	f043 0308 	orr.w	r3, r3, #8
 c000388:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00038a:	4b27      	ldr	r3, [pc, #156]	; (c000428 <MX_GPIO_Init+0x138>)
 c00038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00038e:	f003 0308 	and.w	r3, r3, #8
 c000392:	607b      	str	r3, [r7, #4]
 c000394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB1_TX_Pin|MB1_RX_Pin, GPIO_PIN_SET);
 c000396:	2201      	movs	r2, #1
 c000398:	210c      	movs	r1, #12
 c00039a:	4824      	ldr	r0, [pc, #144]	; (c00042c <MX_GPIO_Init+0x13c>)
 c00039c:	f001 f8a0 	bl	c0014e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 c0003a0:	2200      	movs	r2, #0
 c0003a2:	2101      	movs	r1, #1
 c0003a4:	4822      	ldr	r0, [pc, #136]	; (c000430 <MX_GPIO_Init+0x140>)
 c0003a6:	f001 f89b 	bl	c0014e0 <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOE, GYO_INT2_Pin|ENCODER_P_Pin|ENCODER_N_Pin|GYO_DEN_Pin, GPIO_PIN_NSEC);
 c0003aa:	2200      	movs	r2, #0
 c0003ac:	f640 210a 	movw	r1, #2570	; 0xa0a
 c0003b0:	481f      	ldr	r0, [pc, #124]	; (c000430 <MX_GPIO_Init+0x140>)
 c0003b2:	f001 f8c7 	bl	c001544 <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOA, CURRENT_CS_Pin|CURRENT_SCK_Pin|CURRENT_MISO_Pin|CURRENT_AN_Pin
 c0003b6:	2200      	movs	r2, #0
 c0003b8:	f248 01f0 	movw	r1, #33008	; 0x80f0
 c0003bc:	481b      	ldr	r0, [pc, #108]	; (c00042c <MX_GPIO_Init+0x13c>)
 c0003be:	f001 f8c1 	bl	c001544 <HAL_GPIO_ConfigPinAttributes>
                          |OTG_FS_CC1_Pin, GPIO_PIN_NSEC);

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, EXT_TX_Pin|EXT_RX_Pin|LR_SCK_Pin|LR_MISO_Pin
 c0003c2:	2200      	movs	r2, #0
 c0003c4:	f641 4130 	movw	r1, #7216	; 0x1c30
 c0003c8:	481a      	ldr	r0, [pc, #104]	; (c000434 <MX_GPIO_Init+0x144>)
 c0003ca:	f001 f8bb 	bl	c001544 <HAL_GPIO_ConfigPinAttributes>
                          |LR_MOSI_Pin, GPIO_PIN_NSEC);

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOB, EXT_AN_Pin|DBG_RX_Pin|DBG_TX_Pin|GPIO_PIN_14
 c0003ce:	2200      	movs	r2, #0
 c0003d0:	f64c 7122 	movw	r1, #53026	; 0xcf22
 c0003d4:	4818      	ldr	r0, [pc, #96]	; (c000438 <MX_GPIO_Init+0x148>)
 c0003d6:	f001 f8b5 	bl	c001544 <HAL_GPIO_ConfigPinAttributes>
                          |GPIO_PIN_15|GPIO_PIN_5|EXT_SCL_Pin|EXT_SDA_Pin, GPIO_PIN_NSEC);

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOD, LR_RFSW2_Pin|LR_RFSW3_Pin|LR_IRQ_Pin|LR_NSS_Pin
 c0003da:	2200      	movs	r2, #0
 c0003dc:	f247 0107 	movw	r1, #28679	; 0x7007
 c0003e0:	4816      	ldr	r0, [pc, #88]	; (c00043c <MX_GPIO_Init+0x14c>)
 c0003e2:	f001 f8af 	bl	c001544 <HAL_GPIO_ConfigPinAttributes>
                          |LR_BUSY_Pin|LR_NRST_Pin, GPIO_PIN_NSEC);

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MB1_TX_Pin|MB1_RX_Pin;
 c0003e6:	230c      	movs	r3, #12
 c0003e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c0003ea:	2301      	movs	r3, #1
 c0003ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0003ee:	2300      	movs	r3, #0
 c0003f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0003f2:	2300      	movs	r3, #0
 c0003f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c0003f6:	f107 031c 	add.w	r3, r7, #28
 c0003fa:	4619      	mov	r1, r3
 c0003fc:	480b      	ldr	r0, [pc, #44]	; (c00042c <MX_GPIO_Init+0x13c>)
 c0003fe:	f000 feef 	bl	c0011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WP_Pin;
 c000402:	2301      	movs	r3, #1
 c000404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000406:	2301      	movs	r3, #1
 c000408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c00040a:	2300      	movs	r3, #0
 c00040c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c00040e:	2300      	movs	r3, #0
 c000410:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 c000412:	f107 031c 	add.w	r3, r7, #28
 c000416:	4619      	mov	r1, r3
 c000418:	4805      	ldr	r0, [pc, #20]	; (c000430 <MX_GPIO_Init+0x140>)
 c00041a:	f000 fee1 	bl	c0011e0 <HAL_GPIO_Init>

}
 c00041e:	bf00      	nop
 c000420:	3730      	adds	r7, #48	; 0x30
 c000422:	46bd      	mov	sp, r7
 c000424:	bd80      	pop	{r7, pc}
 c000426:	bf00      	nop
 c000428:	50021000 	.word	0x50021000
 c00042c:	52020000 	.word	0x52020000
 c000430:	52021000 	.word	0x52021000
 c000434:	52020800 	.word	0x52020800
 c000438:	52020400 	.word	0x52020400
 c00043c:	52020c00 	.word	0x52020c00

0c000440 <MX_GTZC_S_Init>:

/* USER CODE END 0 */

/* GTZC_S init function */
void MX_GTZC_S_Init(void)
{
 c000440:	b580      	push	{r7, lr}
 c000442:	b09c      	sub	sp, #112	; 0x70
 c000444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c000446:	1d3b      	adds	r3, r7, #4
 c000448:	226c      	movs	r2, #108	; 0x6c
 c00044a:	2100      	movs	r1, #0
 c00044c:	4618      	mov	r0, r3
 c00044e:	f002 fa3b 	bl	c0028c8 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000452:	2300      	movs	r3, #0
 c000454:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c000456:	2300      	movs	r3, #0
 c000458:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c00045a:	f04f 33ff 	mov.w	r3, #4294967295
 c00045e:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c000460:	f04f 33ff 	mov.w	r3, #4294967295
 c000464:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c000466:	f04f 33ff 	mov.w	r3, #4294967295
 c00046a:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c00046c:	f04f 33ff 	mov.w	r3, #4294967295
 c000470:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c000472:	f04f 33ff 	mov.w	r3, #4294967295
 c000476:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c000478:	f04f 33ff 	mov.w	r3, #4294967295
 c00047c:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c00047e:	f04f 33ff 	mov.w	r3, #4294967295
 c000482:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c000484:	f04f 33ff 	mov.w	r3, #4294967295
 c000488:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c00048a:	f04f 33ff 	mov.w	r3, #4294967295
 c00048e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c000490:	f04f 33ff 	mov.w	r3, #4294967295
 c000494:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c000496:	f04f 33ff 	mov.w	r3, #4294967295
 c00049a:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c00049c:	f04f 33ff 	mov.w	r3, #4294967295
 c0004a0:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0004a2:	2300      	movs	r3, #0
 c0004a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0004a6:	2300      	movs	r3, #0
 c0004a8:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0004aa:	2300      	movs	r3, #0
 c0004ac:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0004ae:	2300      	movs	r3, #0
 c0004b0:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0004b2:	2300      	movs	r3, #0
 c0004b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0004b6:	2300      	movs	r3, #0
 c0004b8:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0004ba:	2300      	movs	r3, #0
 c0004bc:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0004be:	2300      	movs	r3, #0
 c0004c0:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0004c2:	2300      	movs	r3, #0
 c0004c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0004c6:	2300      	movs	r3, #0
 c0004c8:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0004ca:	2300      	movs	r3, #0
 c0004cc:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0004ce:	2300      	movs	r3, #0
 c0004d0:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0004d2:	2300      	movs	r3, #0
 c0004d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0004d6:	1d3b      	adds	r3, r7, #4
 c0004d8:	4619      	mov	r1, r3
 c0004da:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c0004de:	f001 f869 	bl	c0015b4 <HAL_GTZC_MPCBB_ConfigMem>
 c0004e2:	4603      	mov	r3, r0
 c0004e4:	2b00      	cmp	r3, #0
 c0004e6:	d001      	beq.n	c0004ec <MX_GTZC_S_Init+0xac>
  {
    Error_Handler();
 c0004e8:	f000 f8e4 	bl	c0006b4 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c0004ec:	2300      	movs	r3, #0
 c0004ee:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c0004f0:	2300      	movs	r3, #0
 c0004f2:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c0004f4:	2300      	movs	r3, #0
 c0004f6:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c0004f8:	2300      	movs	r3, #0
 c0004fa:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c0004fc:	2300      	movs	r3, #0
 c0004fe:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000500:	2300      	movs	r3, #0
 c000502:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c000504:	2300      	movs	r3, #0
 c000506:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000508:	2300      	movs	r3, #0
 c00050a:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c00050c:	2300      	movs	r3, #0
 c00050e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000510:	1d3b      	adds	r3, r7, #4
 c000512:	4619      	mov	r1, r3
 c000514:	4805      	ldr	r0, [pc, #20]	; (c00052c <MX_GTZC_S_Init+0xec>)
 c000516:	f001 f84d 	bl	c0015b4 <HAL_GTZC_MPCBB_ConfigMem>
 c00051a:	4603      	mov	r3, r0
 c00051c:	2b00      	cmp	r3, #0
 c00051e:	d001      	beq.n	c000524 <MX_GTZC_S_Init+0xe4>
  {
    Error_Handler();
 c000520:	f000 f8c8 	bl	c0006b4 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000524:	bf00      	nop
 c000526:	3770      	adds	r7, #112	; 0x70
 c000528:	46bd      	mov	sp, r7
 c00052a:	bd80      	pop	{r7, pc}
 c00052c:	30030000 	.word	0x30030000

0c000530 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 c000530:	b580      	push	{r7, lr}
 c000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 c000534:	f001 f950 	bl	c0017d8 <HAL_ICACHE_Enable>
 c000538:	4603      	mov	r3, r0
 c00053a:	2b00      	cmp	r3, #0
 c00053c:	d001      	beq.n	c000542 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 c00053e:	f000 f8b9 	bl	c0006b4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c000542:	bf00      	nop
 c000544:	bd80      	pop	{r7, pc}
	...

0c000548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000548:	b580      	push	{r7, lr}
 c00054a:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and interrupts secure/non-secure allocation setup done */
  /* in SystemInit() based on partition_stm32l552xx.h file's definitions. */
  /* USER CODE BEGIN 1 */
	 SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c00054c:	4b0b      	ldr	r3, [pc, #44]	; (c00057c <main+0x34>)
 c00054e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c000550:	4a0a      	ldr	r2, [pc, #40]	; (c00057c <main+0x34>)
 c000552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c000556:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c000558:	f000 fc97 	bl	c000e8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c00055c:	f000 f854 	bl	c000608 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c000560:	f7ff ff6e 	bl	c000440 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c000564:	f7ff fec4 	bl	c0002f0 <MX_GPIO_Init>
  MX_DMA_Init();
 c000568:	f7ff fe92 	bl	c000290 <MX_DMA_Init>
  MX_RTC_Init();
 c00056c:	f000 f8b0 	bl	c0006d0 <MX_RTC_Init>
  MX_ICACHE_Init();
 c000570:	f7ff ffde 	bl	c000530 <MX_ICACHE_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c000574:	f000 f804 	bl	c000580 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c000578:	e7fe      	b.n	c000578 <main+0x30>
 c00057a:	bf00      	nop
 c00057c:	e000ed00 	.word	0xe000ed00

0c000580 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c000580:	b590      	push	{r4, r7, lr}
 c000582:	b083      	sub	sp, #12
 c000584:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c000586:	4b1d      	ldr	r3, [pc, #116]	; (c0005fc <NonSecure_Init+0x7c>)
 c000588:	4a1d      	ldr	r2, [pc, #116]	; (c000600 <NonSecure_Init+0x80>)
 c00058a:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c00058c:	4b1c      	ldr	r3, [pc, #112]	; (c000600 <NonSecure_Init+0x80>)
 c00058e:	681b      	ldr	r3, [r3, #0]
 c000590:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c000592:	683b      	ldr	r3, [r7, #0]
 c000594:	f383 8888 	msr	MSP_NS, r3
}
 c000598:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c00059a:	4b1a      	ldr	r3, [pc, #104]	; (c000604 <NonSecure_Init+0x84>)
 c00059c:	681b      	ldr	r3, [r3, #0]
 c00059e:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c0005a0:	687b      	ldr	r3, [r7, #4]
 c0005a2:	461c      	mov	r4, r3
 c0005a4:	0864      	lsrs	r4, r4, #1
 c0005a6:	0064      	lsls	r4, r4, #1
 c0005a8:	4620      	mov	r0, r4
 c0005aa:	4621      	mov	r1, r4
 c0005ac:	4622      	mov	r2, r4
 c0005ae:	4623      	mov	r3, r4
 c0005b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0005b4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0005b8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0005bc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0005c0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0005c4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0005c8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0005cc:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0005d0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0005d4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0005d8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0005dc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0005e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0005e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0005e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0005ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0005f0:	f7ff fe20 	bl	c000234 <__gnu_cmse_nonsecure_call>
}
 c0005f4:	bf00      	nop
 c0005f6:	370c      	adds	r7, #12
 c0005f8:	46bd      	mov	sp, r7
 c0005fa:	bd90      	pop	{r4, r7, pc}
 c0005fc:	e002ed00 	.word	0xe002ed00
 c000600:	08040000 	.word	0x08040000
 c000604:	08040004 	.word	0x08040004

0c000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c000608:	b580      	push	{r7, lr}
 c00060a:	b098      	sub	sp, #96	; 0x60
 c00060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c00060e:	f107 0318 	add.w	r3, r7, #24
 c000612:	2248      	movs	r2, #72	; 0x48
 c000614:	2100      	movs	r1, #0
 c000616:	4618      	mov	r0, r3
 c000618:	f002 f956 	bl	c0028c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c00061c:	1d3b      	adds	r3, r7, #4
 c00061e:	2200      	movs	r2, #0
 c000620:	601a      	str	r2, [r3, #0]
 c000622:	605a      	str	r2, [r3, #4]
 c000624:	609a      	str	r2, [r3, #8]
 c000626:	60da      	str	r2, [r3, #12]
 c000628:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c00062a:	2000      	movs	r0, #0
 c00062c:	f001 f934 	bl	c001898 <HAL_PWREx_ControlVoltageScaling>
 c000630:	4603      	mov	r3, r0
 c000632:	2b00      	cmp	r3, #0
 c000634:	d001      	beq.n	c00063a <SystemClock_Config+0x32>
  {
    Error_Handler();
 c000636:	f000 f83d 	bl	c0006b4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 c00063a:	232a      	movs	r3, #42	; 0x2a
 c00063c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c00063e:	f44f 7380 	mov.w	r3, #256	; 0x100
 c000642:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 c000644:	2301      	movs	r3, #1
 c000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 c000648:	2300      	movs	r3, #0
 c00064a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 c00064c:	2340      	movs	r3, #64	; 0x40
 c00064e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 c000650:	2301      	movs	r3, #1
 c000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c000654:	2302      	movs	r3, #2
 c000656:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 c000658:	2302      	movs	r3, #2
 c00065a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 c00065c:	2304      	movs	r3, #4
 c00065e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c000660:	2337      	movs	r3, #55	; 0x37
 c000662:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c000664:	2307      	movs	r3, #7
 c000666:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 c000668:	2304      	movs	r3, #4
 c00066a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c00066c:	2302      	movs	r3, #2
 c00066e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c000670:	f107 0318 	add.w	r3, r7, #24
 c000674:	4618      	mov	r0, r3
 c000676:	f001 f99f 	bl	c0019b8 <HAL_RCC_OscConfig>
 c00067a:	4603      	mov	r3, r0
 c00067c:	2b00      	cmp	r3, #0
 c00067e:	d001      	beq.n	c000684 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 c000680:	f000 f818 	bl	c0006b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c000684:	230f      	movs	r3, #15
 c000686:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c000688:	2303      	movs	r3, #3
 c00068a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c00068c:	2300      	movs	r3, #0
 c00068e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c000690:	2300      	movs	r3, #0
 c000692:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c000694:	2300      	movs	r3, #0
 c000696:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c000698:	1d3b      	adds	r3, r7, #4
 c00069a:	2105      	movs	r1, #5
 c00069c:	4618      	mov	r0, r3
 c00069e:	f001 fded 	bl	c00227c <HAL_RCC_ClockConfig>
 c0006a2:	4603      	mov	r3, r0
 c0006a4:	2b00      	cmp	r3, #0
 c0006a6:	d001      	beq.n	c0006ac <SystemClock_Config+0xa4>
  {
    Error_Handler();
 c0006a8:	f000 f804 	bl	c0006b4 <Error_Handler>
  }
}
 c0006ac:	bf00      	nop
 c0006ae:	3760      	adds	r7, #96	; 0x60
 c0006b0:	46bd      	mov	sp, r7
 c0006b2:	bd80      	pop	{r7, pc}

0c0006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c0006b4:	b580      	push	{r7, lr}
 c0006b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c0006b8:	b672      	cpsid	i
}
 c0006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(MB1_RX_GPIO_Port, MB1_RX_Pin);
 c0006bc:	2108      	movs	r1, #8
 c0006be:	4803      	ldr	r0, [pc, #12]	; (c0006cc <Error_Handler+0x18>)
 c0006c0:	f000 ff26 	bl	c001510 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 c0006c4:	20c8      	movs	r0, #200	; 0xc8
 c0006c6:	f000 fc57 	bl	c000f78 <HAL_Delay>
	  HAL_GPIO_TogglePin(MB1_RX_GPIO_Port, MB1_RX_Pin);
 c0006ca:	e7f7      	b.n	c0006bc <Error_Handler+0x8>
 c0006cc:	52020000 	.word	0x52020000

0c0006d0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 c0006d0:	b580      	push	{r7, lr}
 c0006d2:	b08c      	sub	sp, #48	; 0x30
 c0006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_SecureStateTypeDef secureState = {0};
 c0006d6:	f107 031c 	add.w	r3, r7, #28
 c0006da:	2200      	movs	r2, #0
 c0006dc:	601a      	str	r2, [r3, #0]
 c0006de:	605a      	str	r2, [r3, #4]
 c0006e0:	609a      	str	r2, [r3, #8]
 c0006e2:	60da      	str	r2, [r3, #12]
 c0006e4:	611a      	str	r2, [r3, #16]
  RTC_PrivilegeStateTypeDef privilegeState = {0};
 c0006e6:	1d3b      	adds	r3, r7, #4
 c0006e8:	2200      	movs	r2, #0
 c0006ea:	601a      	str	r2, [r3, #0]
 c0006ec:	605a      	str	r2, [r3, #4]
 c0006ee:	609a      	str	r2, [r3, #8]
 c0006f0:	60da      	str	r2, [r3, #12]
 c0006f2:	611a      	str	r2, [r3, #16]
 c0006f4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  secureState.rtcSecureFull = RTC_SECURE_FULL_NO;
 c0006f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0006fa:	61fb      	str	r3, [r7, #28]
  secureState.rtcNonSecureFeatures = RTC_NONSECURE_FEATURE_NONE|RTC_NONSECURE_FEATURE_ALRB
 c0006fc:	f246 030f 	movw	r3, #24591	; 0x600f
 c000700:	623b      	str	r3, [r7, #32]
                              |RTC_NONSECURE_FEATURE_WUT|RTC_NONSECURE_FEATURE_INIT
                              |RTC_NONSECURE_FEATURE_CAL|RTC_NONSECURE_FEATURE_ALRA
                              |RTC_NONSECURE_FEATURE_TS;
  secureState.backupRegisterStartZone2 = RTC_BKP_DR0;
 c000702:	2300      	movs	r3, #0
 c000704:	62bb      	str	r3, [r7, #40]	; 0x28
  secureState.backupRegisterStartZone3 = RTC_BKP_DR0;
 c000706:	2300      	movs	r3, #0
 c000708:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTCEx_SecureModeSet(&hrtc, &secureState) != HAL_OK)
 c00070a:	f107 031c 	add.w	r3, r7, #28
 c00070e:	4619      	mov	r1, r3
 c000710:	480e      	ldr	r0, [pc, #56]	; (c00074c <MX_RTC_Init+0x7c>)
 c000712:	f002 f863 	bl	c0027dc <HAL_RTCEx_SecureModeSet>
 c000716:	4603      	mov	r3, r0
 c000718:	2b00      	cmp	r3, #0
 c00071a:	d001      	beq.n	c000720 <MX_RTC_Init+0x50>
  {
    Error_Handler();
 c00071c:	f7ff ffca 	bl	c0006b4 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 c000720:	2300      	movs	r3, #0
 c000722:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 c000724:	2300      	movs	r3, #0
 c000726:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 c000728:	2300      	movs	r3, #0
 c00072a:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 c00072c:	2300      	movs	r3, #0
 c00072e:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 c000730:	1d3b      	adds	r3, r7, #4
 c000732:	4619      	mov	r1, r3
 c000734:	4805      	ldr	r0, [pc, #20]	; (c00074c <MX_RTC_Init+0x7c>)
 c000736:	f002 f877 	bl	c002828 <HAL_RTCEx_PrivilegeModeSet>
 c00073a:	4603      	mov	r3, r0
 c00073c:	2b00      	cmp	r3, #0
 c00073e:	d001      	beq.n	c000744 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 c000740:	f7ff ffb8 	bl	c0006b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 c000744:	bf00      	nop
 c000746:	3730      	adds	r7, #48	; 0x30
 c000748:	46bd      	mov	sp, r7
 c00074a:	bd80      	pop	{r7, pc}
 c00074c:	30000030 	.word	0x30000030

0c000750 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000750:	b480      	push	{r7}
 c000752:	b083      	sub	sp, #12
 c000754:	af00      	add	r7, sp, #0
 c000756:	4603      	mov	r3, r0
 c000758:	6039      	str	r1, [r7, #0]
 c00075a:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c00075c:	683b      	ldr	r3, [r7, #0]
 c00075e:	2b00      	cmp	r3, #0
 c000760:	d00d      	beq.n	c00077e <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c000762:	79fb      	ldrb	r3, [r7, #7]
 c000764:	2b00      	cmp	r3, #0
 c000766:	d002      	beq.n	c00076e <__acle_se_SECURE_RegisterCallback+0x1e>
 c000768:	2b01      	cmp	r3, #1
 c00076a:	d004      	beq.n	c000776 <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c00076c:	e008      	b.n	c000780 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c00076e:	4a21      	ldr	r2, [pc, #132]	; (c0007f4 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000770:	683b      	ldr	r3, [r7, #0]
 c000772:	6013      	str	r3, [r2, #0]
        break;
 c000774:	e004      	b.n	c000780 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c000776:	4a20      	ldr	r2, [pc, #128]	; (c0007f8 <__acle_se_SECURE_RegisterCallback+0xa8>)
 c000778:	683b      	ldr	r3, [r7, #0]
 c00077a:	6013      	str	r3, [r2, #0]
        break;
 c00077c:	e000      	b.n	c000780 <__acle_se_SECURE_RegisterCallback+0x30>
    }
  }
 c00077e:	bf00      	nop
}
 c000780:	bf00      	nop
 c000782:	370c      	adds	r7, #12
 c000784:	46bd      	mov	sp, r7
 c000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00078a:	4670      	mov	r0, lr
 c00078c:	4671      	mov	r1, lr
 c00078e:	4672      	mov	r2, lr
 c000790:	4673      	mov	r3, lr
 c000792:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000796:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00079a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00079e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0007a2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0007a6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0007aa:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0007ae:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0007b2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0007b6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0007ba:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0007be:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0007c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0007c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0007ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0007ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0007d2:	f38e 8c00 	msr	CPSR_fs, lr
 c0007d6:	b410      	push	{r4}
 c0007d8:	eef1 ca10 	vmrs	ip, fpscr
 c0007dc:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0007e0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0007e4:	ea0c 0c04 	and.w	ip, ip, r4
 c0007e8:	eee1 ca10 	vmsr	fpscr, ip
 c0007ec:	bc10      	pop	{r4}
 c0007ee:	46f4      	mov	ip, lr
 c0007f0:	4774      	bxns	lr
 c0007f2:	bf00      	nop
 c0007f4:	30000028 	.word	0x30000028
 c0007f8:	3000002c 	.word	0x3000002c

0c0007fc <__acle_se_SECURE_LEDToggle_RED>:

/**
  * @}
  */
CMSE_NS_ENTRY/*secureportNON_SECURE_CALLABLE*/ void SECURE_LEDToggle_RED(void)
{
 c0007fc:	b580      	push	{r7, lr}
 c0007fe:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(MB1_RX_GPIO_Port, MB1_RX_Pin);
 c000800:	2108      	movs	r1, #8
 c000802:	481d      	ldr	r0, [pc, #116]	; (c000878 <__acle_se_SECURE_LEDToggle_RED+0x7c>)
 c000804:	f000 fe84 	bl	c001510 <HAL_GPIO_TogglePin>
}
 c000808:	bf00      	nop
 c00080a:	46bd      	mov	sp, r7
 c00080c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000810:	4670      	mov	r0, lr
 c000812:	4671      	mov	r1, lr
 c000814:	4672      	mov	r2, lr
 c000816:	4673      	mov	r3, lr
 c000818:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00081c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000820:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000824:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000828:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00082c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000830:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000834:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000838:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00083c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000840:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000844:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000848:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00084c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000854:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000858:	f38e 8c00 	msr	CPSR_fs, lr
 c00085c:	b410      	push	{r4}
 c00085e:	eef1 ca10 	vmrs	ip, fpscr
 c000862:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000866:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00086a:	ea0c 0c04 	and.w	ip, ip, r4
 c00086e:	eee1 ca10 	vmsr	fpscr, ip
 c000872:	bc10      	pop	{r4}
 c000874:	46f4      	mov	ip, lr
 c000876:	4774      	bxns	lr
 c000878:	52020000 	.word	0x52020000

0c00087c <__acle_se_SECURE_LED_RED>:

CMSE_NS_ENTRY/*secureportNON_SECURE_CALLABLE*/ void SECURE_LED_RED(bool onoff)
{
 c00087c:	b580      	push	{r7, lr}
 c00087e:	b082      	sub	sp, #8
 c000880:	af00      	add	r7, sp, #0
 c000882:	4603      	mov	r3, r0
 c000884:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MB1_RX_GPIO_Port, MB1_RX_Pin, onoff);
 c000886:	79fb      	ldrb	r3, [r7, #7]
 c000888:	461a      	mov	r2, r3
 c00088a:	2108      	movs	r1, #8
 c00088c:	481d      	ldr	r0, [pc, #116]	; (c000904 <__acle_se_SECURE_LED_RED+0x88>)
 c00088e:	f000 fe27 	bl	c0014e0 <HAL_GPIO_WritePin>
}
 c000892:	bf00      	nop
 c000894:	3708      	adds	r7, #8
 c000896:	46bd      	mov	sp, r7
 c000898:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00089c:	4670      	mov	r0, lr
 c00089e:	4671      	mov	r1, lr
 c0008a0:	4672      	mov	r2, lr
 c0008a2:	4673      	mov	r3, lr
 c0008a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0008a8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0008ac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0008b0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0008b4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0008b8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0008bc:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0008c0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0008c4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0008c8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0008cc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0008d0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0008d4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0008d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0008dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0008e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0008e4:	f38e 8c00 	msr	CPSR_fs, lr
 c0008e8:	b410      	push	{r4}
 c0008ea:	eef1 ca10 	vmrs	ip, fpscr
 c0008ee:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0008f2:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0008f6:	ea0c 0c04 	and.w	ip, ip, r4
 c0008fa:	eee1 ca10 	vmsr	fpscr, ip
 c0008fe:	bc10      	pop	{r4}
 c000900:	46f4      	mov	ip, lr
 c000902:	4774      	bxns	lr
 c000904:	52020000 	.word	0x52020000

0c000908 <__acle_se_SECURE_LEDToggle_YELLOW>:

CMSE_NS_ENTRY/*secureportNON_SECURE_CALLABLE*/ void SECURE_LEDToggle_YELLOW(void)
{
 c000908:	b580      	push	{r7, lr}
 c00090a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(MB1_TX_GPIO_Port, MB1_TX_Pin);
 c00090c:	2104      	movs	r1, #4
 c00090e:	481d      	ldr	r0, [pc, #116]	; (c000984 <__acle_se_SECURE_LEDToggle_YELLOW+0x7c>)
 c000910:	f000 fdfe 	bl	c001510 <HAL_GPIO_TogglePin>
}
 c000914:	bf00      	nop
 c000916:	46bd      	mov	sp, r7
 c000918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00091c:	4670      	mov	r0, lr
 c00091e:	4671      	mov	r1, lr
 c000920:	4672      	mov	r2, lr
 c000922:	4673      	mov	r3, lr
 c000924:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000928:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00092c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000930:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000934:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000938:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00093c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000940:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000944:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000948:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00094c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000950:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000954:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00095c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000960:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000964:	f38e 8c00 	msr	CPSR_fs, lr
 c000968:	b410      	push	{r4}
 c00096a:	eef1 ca10 	vmrs	ip, fpscr
 c00096e:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000972:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000976:	ea0c 0c04 	and.w	ip, ip, r4
 c00097a:	eee1 ca10 	vmsr	fpscr, ip
 c00097e:	bc10      	pop	{r4}
 c000980:	46f4      	mov	ip, lr
 c000982:	4774      	bxns	lr
 c000984:	52020000 	.word	0x52020000

0c000988 <__acle_se_SECURE_LED_YELLOW>:

CMSE_NS_ENTRY/*secureportNON_SECURE_CALLABLE*/ void SECURE_LED_YELLOW(bool onoff)
{
 c000988:	b580      	push	{r7, lr}
 c00098a:	b082      	sub	sp, #8
 c00098c:	af00      	add	r7, sp, #0
 c00098e:	4603      	mov	r3, r0
 c000990:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(MB1_TX_GPIO_Port, MB1_TX_Pin, onoff);
 c000992:	79fb      	ldrb	r3, [r7, #7]
 c000994:	461a      	mov	r2, r3
 c000996:	2104      	movs	r1, #4
 c000998:	481d      	ldr	r0, [pc, #116]	; (c000a10 <__acle_se_SECURE_LED_YELLOW+0x88>)
 c00099a:	f000 fda1 	bl	c0014e0 <HAL_GPIO_WritePin>
}
 c00099e:	bf00      	nop
 c0009a0:	3708      	adds	r7, #8
 c0009a2:	46bd      	mov	sp, r7
 c0009a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0009a8:	4670      	mov	r0, lr
 c0009aa:	4671      	mov	r1, lr
 c0009ac:	4672      	mov	r2, lr
 c0009ae:	4673      	mov	r3, lr
 c0009b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0009b4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0009b8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0009bc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0009c0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0009c4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0009c8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0009cc:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0009d0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0009d4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0009d8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0009dc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0009e0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0009e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0009e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0009ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0009f0:	f38e 8c00 	msr	CPSR_fs, lr
 c0009f4:	b410      	push	{r4}
 c0009f6:	eef1 ca10 	vmrs	ip, fpscr
 c0009fa:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0009fe:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000a02:	ea0c 0c04 	and.w	ip, ip, r4
 c000a06:	eee1 ca10 	vmsr	fpscr, ip
 c000a0a:	bc10      	pop	{r4}
 c000a0c:	46f4      	mov	ip, lr
 c000a0e:	4774      	bxns	lr
 c000a10:	52020000 	.word	0x52020000

0c000a14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000a14:	b580      	push	{r7, lr}
 c000a16:	b084      	sub	sp, #16
 c000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c000a1a:	4b21      	ldr	r3, [pc, #132]	; (c000aa0 <HAL_MspInit+0x8c>)
 c000a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000a1e:	4a20      	ldr	r2, [pc, #128]	; (c000aa0 <HAL_MspInit+0x8c>)
 c000a20:	f043 0301 	orr.w	r3, r3, #1
 c000a24:	6613      	str	r3, [r2, #96]	; 0x60
 c000a26:	4b1e      	ldr	r3, [pc, #120]	; (c000aa0 <HAL_MspInit+0x8c>)
 c000a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000a2a:	f003 0301 	and.w	r3, r3, #1
 c000a2e:	60fb      	str	r3, [r7, #12]
 c000a30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c000a32:	4b1b      	ldr	r3, [pc, #108]	; (c000aa0 <HAL_MspInit+0x8c>)
 c000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000a36:	4a1a      	ldr	r2, [pc, #104]	; (c000aa0 <HAL_MspInit+0x8c>)
 c000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c000a3c:	6593      	str	r3, [r2, #88]	; 0x58
 c000a3e:	4b18      	ldr	r3, [pc, #96]	; (c000aa0 <HAL_MspInit+0x8c>)
 c000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c000a46:	60bb      	str	r3, [r7, #8]
 c000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c000a4a:	4b15      	ldr	r3, [pc, #84]	; (c000aa0 <HAL_MspInit+0x8c>)
 c000a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000a4e:	4a14      	ldr	r2, [pc, #80]	; (c000aa0 <HAL_MspInit+0x8c>)
 c000a50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c000a54:	6493      	str	r3, [r2, #72]	; 0x48
 c000a56:	4b12      	ldr	r3, [pc, #72]	; (c000aa0 <HAL_MspInit+0x8c>)
 c000a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000a5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c000a5e:	607b      	str	r3, [r7, #4]
 c000a60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c000a62:	2200      	movs	r2, #0
 c000a64:	2100      	movs	r1, #0
 c000a66:	2008      	movs	r0, #8
 c000a68:	f000 fb85 	bl	c001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c000a6c:	2008      	movs	r0, #8
 c000a6e:	f000 fb9c 	bl	c0011aa <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 c000a72:	2200      	movs	r2, #0
 c000a74:	2100      	movs	r1, #0
 c000a76:	205f      	movs	r0, #95	; 0x5f
 c000a78:	f000 fb7d 	bl	c001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 c000a7c:	205f      	movs	r0, #95	; 0x5f
 c000a7e:	f000 fb94 	bl	c0011aa <HAL_NVIC_EnableIRQ>
  /* ICACHE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ICACHE_IRQn, 0, 0);
 c000a82:	2200      	movs	r2, #0
 c000a84:	2100      	movs	r1, #0
 c000a86:	206b      	movs	r0, #107	; 0x6b
 c000a88:	f000 fb75 	bl	c001176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ICACHE_IRQn);
 c000a8c:	206b      	movs	r0, #107	; 0x6b
 c000a8e:	f000 fb8c 	bl	c0011aa <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c000a92:	f000 ff5d 	bl	c001950 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000a96:	bf00      	nop
 c000a98:	3710      	adds	r7, #16
 c000a9a:	46bd      	mov	sp, r7
 c000a9c:	bd80      	pop	{r7, pc}
 c000a9e:	bf00      	nop
 c000aa0:	50021000 	.word	0x50021000

0c000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c000aa4:	b480      	push	{r7}
 c000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c000aa8:	e7fe      	b.n	c000aa8 <NMI_Handler+0x4>

0c000aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c000aaa:	b480      	push	{r7}
 c000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c000aae:	e7fe      	b.n	c000aae <HardFault_Handler+0x4>

0c000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c000ab0:	b480      	push	{r7}
 c000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c000ab4:	e7fe      	b.n	c000ab4 <MemManage_Handler+0x4>

0c000ab6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c000ab6:	b480      	push	{r7}
 c000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c000aba:	e7fe      	b.n	c000aba <BusFault_Handler+0x4>

0c000abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c000abc:	b480      	push	{r7}
 c000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c000ac0:	e7fe      	b.n	c000ac0 <UsageFault_Handler+0x4>

0c000ac2 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c000ac2:	b480      	push	{r7}
 c000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c000ac6:	e7fe      	b.n	c000ac6 <SecureFault_Handler+0x4>

0c000ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c000ac8:	b480      	push	{r7}
 c000aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000acc:	bf00      	nop
 c000ace:	46bd      	mov	sp, r7
 c000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ad4:	4770      	bx	lr

0c000ad6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c000ad6:	b480      	push	{r7}
 c000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c000ada:	bf00      	nop
 c000adc:	46bd      	mov	sp, r7
 c000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ae2:	4770      	bx	lr

0c000ae4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c000ae4:	b480      	push	{r7}
 c000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c000ae8:	bf00      	nop
 c000aea:	46bd      	mov	sp, r7
 c000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000af0:	4770      	bx	lr

0c000af2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c000af2:	b580      	push	{r7, lr}
 c000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c000af6:	f000 fa1f 	bl	c000f38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c000afa:	bf00      	nop
 c000afc:	bd80      	pop	{r7, pc}

0c000afe <GTZC_IRQHandler>:

/**
  * @brief This function handles Global TrustZone controller global interrupt.
  */
void GTZC_IRQHandler(void)
{
 c000afe:	b580      	push	{r7, lr}
 c000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c000b02:	f000 fddb 	bl	c0016bc <HAL_GTZC_IRQHandler>
  /* USER CODE BEGIN GTZC_IRQn 1 */

  /* USER CODE END GTZC_IRQn 1 */
}
 c000b06:	bf00      	nop
 c000b08:	bd80      	pop	{r7, pc}

0c000b0a <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 c000b0a:	b480      	push	{r7}
 c000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 c000b0e:	bf00      	nop
 c000b10:	46bd      	mov	sp, r7
 c000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000b16:	4770      	bx	lr

0c000b18 <ICACHE_IRQHandler>:

/**
  * @brief This function handles Instruction cache global interrupt.
  */
void ICACHE_IRQHandler(void)
{
 c000b18:	b580      	push	{r7, lr}
 c000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_IRQn 0 */

  /* USER CODE END ICACHE_IRQn 0 */
  HAL_ICACHE_IRQHandler();
 c000b1c:	f000 fe6c 	bl	c0017f8 <HAL_ICACHE_IRQHandler>
  /* USER CODE BEGIN ICACHE_IRQn 1 */

  /* USER CODE END ICACHE_IRQn 1 */
}
 c000b20:	bf00      	nop
 c000b22:	bd80      	pop	{r7, pc}

0c000b24 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c000b24:	b480      	push	{r7}
 c000b26:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c000b28:	4b2f      	ldr	r3, [pc, #188]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b2a:	2200      	movs	r2, #0
 c000b2c:	609a      	str	r2, [r3, #8]
 c000b2e:	4b2e      	ldr	r3, [pc, #184]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b30:	4a2e      	ldr	r2, [pc, #184]	; (c000bec <TZ_SAU_Setup+0xc8>)
 c000b32:	60da      	str	r2, [r3, #12]
 c000b34:	4b2c      	ldr	r3, [pc, #176]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b36:	4a2e      	ldr	r2, [pc, #184]	; (c000bf0 <TZ_SAU_Setup+0xcc>)
 c000b38:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c000b3a:	4b2b      	ldr	r3, [pc, #172]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b3c:	2201      	movs	r2, #1
 c000b3e:	609a      	str	r2, [r3, #8]
 c000b40:	4b29      	ldr	r3, [pc, #164]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b42:	4a2c      	ldr	r2, [pc, #176]	; (c000bf4 <TZ_SAU_Setup+0xd0>)
 c000b44:	60da      	str	r2, [r3, #12]
 c000b46:	4b28      	ldr	r3, [pc, #160]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b48:	4a2b      	ldr	r2, [pc, #172]	; (c000bf8 <TZ_SAU_Setup+0xd4>)
 c000b4a:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c000b4c:	4b26      	ldr	r3, [pc, #152]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b4e:	2202      	movs	r2, #2
 c000b50:	609a      	str	r2, [r3, #8]
 c000b52:	4b25      	ldr	r3, [pc, #148]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b54:	4a29      	ldr	r2, [pc, #164]	; (c000bfc <TZ_SAU_Setup+0xd8>)
 c000b56:	60da      	str	r2, [r3, #12]
 c000b58:	4b23      	ldr	r3, [pc, #140]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b5a:	4a29      	ldr	r2, [pc, #164]	; (c000c00 <TZ_SAU_Setup+0xdc>)
 c000b5c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c000b5e:	4b22      	ldr	r3, [pc, #136]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b60:	2203      	movs	r2, #3
 c000b62:	609a      	str	r2, [r3, #8]
 c000b64:	4b20      	ldr	r3, [pc, #128]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c000b6a:	60da      	str	r2, [r3, #12]
 c000b6c:	4b1e      	ldr	r3, [pc, #120]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b6e:	4a25      	ldr	r2, [pc, #148]	; (c000c04 <TZ_SAU_Setup+0xe0>)
 c000b70:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c000b72:	4b1d      	ldr	r3, [pc, #116]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b74:	2204      	movs	r2, #4
 c000b76:	609a      	str	r2, [r3, #8]
 c000b78:	4b1b      	ldr	r3, [pc, #108]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b7a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c000b7e:	60da      	str	r2, [r3, #12]
 c000b80:	4b19      	ldr	r3, [pc, #100]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b82:	4a21      	ldr	r2, [pc, #132]	; (c000c08 <TZ_SAU_Setup+0xe4>)
 c000b84:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c000b86:	4b18      	ldr	r3, [pc, #96]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b88:	2205      	movs	r2, #5
 c000b8a:	609a      	str	r2, [r3, #8]
 c000b8c:	4b16      	ldr	r3, [pc, #88]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b8e:	4a1f      	ldr	r2, [pc, #124]	; (c000c0c <TZ_SAU_Setup+0xe8>)
 c000b90:	60da      	str	r2, [r3, #12]
 c000b92:	4b15      	ldr	r3, [pc, #84]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b94:	4a1e      	ldr	r2, [pc, #120]	; (c000c10 <TZ_SAU_Setup+0xec>)
 c000b96:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000b98:	4b13      	ldr	r3, [pc, #76]	; (c000be8 <TZ_SAU_Setup+0xc4>)
 c000b9a:	2201      	movs	r2, #1
 c000b9c:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000b9e:	4b1d      	ldr	r3, [pc, #116]	; (c000c14 <TZ_SAU_Setup+0xf0>)
 c000ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000ba4:	4a1b      	ldr	r2, [pc, #108]	; (c000c14 <TZ_SAU_Setup+0xf0>)
 c000ba6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c000baa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000bae:	4b1a      	ldr	r3, [pc, #104]	; (c000c18 <TZ_SAU_Setup+0xf4>)
 c000bb0:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c000bb2:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000bb6:	4a18      	ldr	r2, [pc, #96]	; (c000c18 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000bbc:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000bbe:	4b17      	ldr	r3, [pc, #92]	; (c000c1c <TZ_SAU_Setup+0xf8>)
 c000bc0:	2204      	movs	r2, #4
 c000bc2:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000bc6:	4b15      	ldr	r3, [pc, #84]	; (c000c1c <TZ_SAU_Setup+0xf8>)
 c000bc8:	4a15      	ldr	r2, [pc, #84]	; (c000c20 <TZ_SAU_Setup+0xfc>)
 c000bca:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000bce:	4b13      	ldr	r3, [pc, #76]	; (c000c1c <TZ_SAU_Setup+0xf8>)
 c000bd0:	4a14      	ldr	r2, [pc, #80]	; (c000c24 <TZ_SAU_Setup+0x100>)
 c000bd2:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000bd6:	4b11      	ldr	r3, [pc, #68]	; (c000c1c <TZ_SAU_Setup+0xf8>)
 c000bd8:	2208      	movs	r2, #8
 c000bda:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c000bde:	bf00      	nop
 c000be0:	46bd      	mov	sp, r7
 c000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000be6:	4770      	bx	lr
 c000be8:	e000edd0 	.word	0xe000edd0
 c000bec:	0c03e000 	.word	0x0c03e000
 c000bf0:	0c03ffe3 	.word	0x0c03ffe3
 c000bf4:	08040000 	.word	0x08040000
 c000bf8:	0807ffe1 	.word	0x0807ffe1
 c000bfc:	20018000 	.word	0x20018000
 c000c00:	2003ffe1 	.word	0x2003ffe1
 c000c04:	4fffffe1 	.word	0x4fffffe1
 c000c08:	9fffffe1 	.word	0x9fffffe1
 c000c0c:	0bf90000 	.word	0x0bf90000
 c000c10:	0bfa8fe1 	.word	0x0bfa8fe1
 c000c14:	e000ed00 	.word	0xe000ed00
 c000c18:	e000ef30 	.word	0xe000ef30
 c000c1c:	e000e100 	.word	0xe000e100
 c000c20:	89821e26 	.word	0x89821e26
 c000c24:	c0260004 	.word	0xc0260004

0c000c28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c000c28:	b580      	push	{r7, lr}
 c000c2a:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c000c2c:	f7ff ff7a 	bl	c000b24 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000c30:	4b08      	ldr	r3, [pc, #32]	; (c000c54 <SystemInit+0x2c>)
 c000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000c36:	4a07      	ldr	r2, [pc, #28]	; (c000c54 <SystemInit+0x2c>)
 c000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000c40:	4b05      	ldr	r3, [pc, #20]	; (c000c58 <SystemInit+0x30>)
 c000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000c46:	4a04      	ldr	r2, [pc, #16]	; (c000c58 <SystemInit+0x30>)
 c000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c000c50:	bf00      	nop
 c000c52:	bd80      	pop	{r7, pc}
 c000c54:	e000ed00 	.word	0xe000ed00
 c000c58:	e002ed00 	.word	0xe002ed00

0c000c5c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c000c5c:	b480      	push	{r7}
 c000c5e:	b087      	sub	sp, #28
 c000c60:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c000c62:	4b4f      	ldr	r3, [pc, #316]	; (c000da0 <SystemCoreClockUpdate+0x144>)
 c000c64:	681b      	ldr	r3, [r3, #0]
 c000c66:	f003 0308 	and.w	r3, r3, #8
 c000c6a:	2b00      	cmp	r3, #0
 c000c6c:	d107      	bne.n	c000c7e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c000c6e:	4b4c      	ldr	r3, [pc, #304]	; (c000da0 <SystemCoreClockUpdate+0x144>)
 c000c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c000c74:	0a1b      	lsrs	r3, r3, #8
 c000c76:	f003 030f 	and.w	r3, r3, #15
 c000c7a:	617b      	str	r3, [r7, #20]
 c000c7c:	e005      	b.n	c000c8a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c000c7e:	4b48      	ldr	r3, [pc, #288]	; (c000da0 <SystemCoreClockUpdate+0x144>)
 c000c80:	681b      	ldr	r3, [r3, #0]
 c000c82:	091b      	lsrs	r3, r3, #4
 c000c84:	f003 030f 	and.w	r3, r3, #15
 c000c88:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c000c8a:	4a46      	ldr	r2, [pc, #280]	; (c000da4 <SystemCoreClockUpdate+0x148>)
 c000c8c:	697b      	ldr	r3, [r7, #20]
 c000c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c000c92:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000c94:	4b42      	ldr	r3, [pc, #264]	; (c000da0 <SystemCoreClockUpdate+0x144>)
 c000c96:	689b      	ldr	r3, [r3, #8]
 c000c98:	f003 030c 	and.w	r3, r3, #12
 c000c9c:	2b0c      	cmp	r3, #12
 c000c9e:	d866      	bhi.n	c000d6e <SystemCoreClockUpdate+0x112>
 c000ca0:	a201      	add	r2, pc, #4	; (adr r2, c000ca8 <SystemCoreClockUpdate+0x4c>)
 c000ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c000ca6:	bf00      	nop
 c000ca8:	0c000cdd 	.word	0x0c000cdd
 c000cac:	0c000d6f 	.word	0x0c000d6f
 c000cb0:	0c000d6f 	.word	0x0c000d6f
 c000cb4:	0c000d6f 	.word	0x0c000d6f
 c000cb8:	0c000ce5 	.word	0x0c000ce5
 c000cbc:	0c000d6f 	.word	0x0c000d6f
 c000cc0:	0c000d6f 	.word	0x0c000d6f
 c000cc4:	0c000d6f 	.word	0x0c000d6f
 c000cc8:	0c000ced 	.word	0x0c000ced
 c000ccc:	0c000d6f 	.word	0x0c000d6f
 c000cd0:	0c000d6f 	.word	0x0c000d6f
 c000cd4:	0c000d6f 	.word	0x0c000d6f
 c000cd8:	0c000cf5 	.word	0x0c000cf5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c000cdc:	4a32      	ldr	r2, [pc, #200]	; (c000da8 <SystemCoreClockUpdate+0x14c>)
 c000cde:	697b      	ldr	r3, [r7, #20]
 c000ce0:	6013      	str	r3, [r2, #0]
      break;
 c000ce2:	e048      	b.n	c000d76 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c000ce4:	4b30      	ldr	r3, [pc, #192]	; (c000da8 <SystemCoreClockUpdate+0x14c>)
 c000ce6:	4a31      	ldr	r2, [pc, #196]	; (c000dac <SystemCoreClockUpdate+0x150>)
 c000ce8:	601a      	str	r2, [r3, #0]
      break;
 c000cea:	e044      	b.n	c000d76 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c000cec:	4b2e      	ldr	r3, [pc, #184]	; (c000da8 <SystemCoreClockUpdate+0x14c>)
 c000cee:	4a30      	ldr	r2, [pc, #192]	; (c000db0 <SystemCoreClockUpdate+0x154>)
 c000cf0:	601a      	str	r2, [r3, #0]
      break;
 c000cf2:	e040      	b.n	c000d76 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c000cf4:	4b2a      	ldr	r3, [pc, #168]	; (c000da0 <SystemCoreClockUpdate+0x144>)
 c000cf6:	68db      	ldr	r3, [r3, #12]
 c000cf8:	f003 0303 	and.w	r3, r3, #3
 c000cfc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c000cfe:	4b28      	ldr	r3, [pc, #160]	; (c000da0 <SystemCoreClockUpdate+0x144>)
 c000d00:	68db      	ldr	r3, [r3, #12]
 c000d02:	091b      	lsrs	r3, r3, #4
 c000d04:	f003 030f 	and.w	r3, r3, #15
 c000d08:	3301      	adds	r3, #1
 c000d0a:	60bb      	str	r3, [r7, #8]
 c000d0c:	68fb      	ldr	r3, [r7, #12]
 c000d0e:	2b02      	cmp	r3, #2
 c000d10:	d003      	beq.n	c000d1a <SystemCoreClockUpdate+0xbe>
 c000d12:	68fb      	ldr	r3, [r7, #12]
 c000d14:	2b03      	cmp	r3, #3
 c000d16:	d006      	beq.n	c000d26 <SystemCoreClockUpdate+0xca>
 c000d18:	e00b      	b.n	c000d32 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c000d1a:	4a24      	ldr	r2, [pc, #144]	; (c000dac <SystemCoreClockUpdate+0x150>)
 c000d1c:	68bb      	ldr	r3, [r7, #8]
 c000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 c000d22:	613b      	str	r3, [r7, #16]
          break;
 c000d24:	e00b      	b.n	c000d3e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c000d26:	4a22      	ldr	r2, [pc, #136]	; (c000db0 <SystemCoreClockUpdate+0x154>)
 c000d28:	68bb      	ldr	r3, [r7, #8]
 c000d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 c000d2e:	613b      	str	r3, [r7, #16]
          break;
 c000d30:	e005      	b.n	c000d3e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c000d32:	697a      	ldr	r2, [r7, #20]
 c000d34:	68bb      	ldr	r3, [r7, #8]
 c000d36:	fbb2 f3f3 	udiv	r3, r2, r3
 c000d3a:	613b      	str	r3, [r7, #16]
          break;
 c000d3c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c000d3e:	4b18      	ldr	r3, [pc, #96]	; (c000da0 <SystemCoreClockUpdate+0x144>)
 c000d40:	68db      	ldr	r3, [r3, #12]
 c000d42:	0a1b      	lsrs	r3, r3, #8
 c000d44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c000d48:	693b      	ldr	r3, [r7, #16]
 c000d4a:	fb02 f303 	mul.w	r3, r2, r3
 c000d4e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c000d50:	4b13      	ldr	r3, [pc, #76]	; (c000da0 <SystemCoreClockUpdate+0x144>)
 c000d52:	68db      	ldr	r3, [r3, #12]
 c000d54:	0e5b      	lsrs	r3, r3, #25
 c000d56:	f003 0303 	and.w	r3, r3, #3
 c000d5a:	3301      	adds	r3, #1
 c000d5c:	005b      	lsls	r3, r3, #1
 c000d5e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c000d60:	693a      	ldr	r2, [r7, #16]
 c000d62:	687b      	ldr	r3, [r7, #4]
 c000d64:	fbb2 f3f3 	udiv	r3, r2, r3
 c000d68:	4a0f      	ldr	r2, [pc, #60]	; (c000da8 <SystemCoreClockUpdate+0x14c>)
 c000d6a:	6013      	str	r3, [r2, #0]
      break;
 c000d6c:	e003      	b.n	c000d76 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c000d6e:	4a0e      	ldr	r2, [pc, #56]	; (c000da8 <SystemCoreClockUpdate+0x14c>)
 c000d70:	697b      	ldr	r3, [r7, #20]
 c000d72:	6013      	str	r3, [r2, #0]
      break;
 c000d74:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c000d76:	4b0a      	ldr	r3, [pc, #40]	; (c000da0 <SystemCoreClockUpdate+0x144>)
 c000d78:	689b      	ldr	r3, [r3, #8]
 c000d7a:	091b      	lsrs	r3, r3, #4
 c000d7c:	f003 030f 	and.w	r3, r3, #15
 c000d80:	4a0c      	ldr	r2, [pc, #48]	; (c000db4 <SystemCoreClockUpdate+0x158>)
 c000d82:	5cd3      	ldrb	r3, [r2, r3]
 c000d84:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c000d86:	4b08      	ldr	r3, [pc, #32]	; (c000da8 <SystemCoreClockUpdate+0x14c>)
 c000d88:	681a      	ldr	r2, [r3, #0]
 c000d8a:	683b      	ldr	r3, [r7, #0]
 c000d8c:	fa22 f303 	lsr.w	r3, r2, r3
 c000d90:	4a05      	ldr	r2, [pc, #20]	; (c000da8 <SystemCoreClockUpdate+0x14c>)
 c000d92:	6013      	str	r3, [r2, #0]
}
 c000d94:	bf00      	nop
 c000d96:	371c      	adds	r7, #28
 c000d98:	46bd      	mov	sp, r7
 c000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d9e:	4770      	bx	lr
 c000da0:	50021000 	.word	0x50021000
 c000da4:	0c002900 	.word	0x0c002900
 c000da8:	30000000 	.word	0x30000000
 c000dac:	00f42400 	.word	0x00f42400
 c000db0:	007a1200 	.word	0x007a1200
 c000db4:	0c0028f0 	.word	0x0c0028f0

0c000db8 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c000db8:	b580      	push	{r7, lr}
 c000dba:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c000dbc:	f7ff ff4e 	bl	c000c5c <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c000dc0:	4b1c      	ldr	r3, [pc, #112]	; (c000e34 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c000dc2:	681b      	ldr	r3, [r3, #0]
}
 c000dc4:	4618      	mov	r0, r3
 c000dc6:	46bd      	mov	sp, r7
 c000dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000dcc:	4671      	mov	r1, lr
 c000dce:	4672      	mov	r2, lr
 c000dd0:	4673      	mov	r3, lr
 c000dd2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000dd6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000dda:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000dde:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000de2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000de6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000dea:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000dee:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000df2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000df6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000dfa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000dfe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000e02:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000e06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000e0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000e0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000e12:	f38e 8c00 	msr	CPSR_fs, lr
 c000e16:	b410      	push	{r4}
 c000e18:	eef1 ca10 	vmrs	ip, fpscr
 c000e1c:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000e20:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000e24:	ea0c 0c04 	and.w	ip, ip, r4
 c000e28:	eee1 ca10 	vmsr	fpscr, ip
 c000e2c:	bc10      	pop	{r4}
 c000e2e:	46f4      	mov	ip, lr
 c000e30:	4774      	bxns	lr
 c000e32:	bf00      	nop
 c000e34:	30000000 	.word	0x30000000

0c000e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; c000e70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c000e3c:	f7ff fef4 	bl	c000c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c000e40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c000e42:	e003      	b.n	c000e4c <LoopCopyDataInit>

0c000e44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c000e44:	4b0b      	ldr	r3, [pc, #44]	; (c000e74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c000e46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c000e48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c000e4a:	3104      	adds	r1, #4

0c000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c000e4c:	480a      	ldr	r0, [pc, #40]	; (c000e78 <LoopForever+0xa>)
	ldr	r3, =_edata
 c000e4e:	4b0b      	ldr	r3, [pc, #44]	; (c000e7c <LoopForever+0xe>)
	adds	r2, r0, r1
 c000e50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c000e52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c000e54:	d3f6      	bcc.n	c000e44 <CopyDataInit>
	ldr	r2, =_sbss
 c000e56:	4a0a      	ldr	r2, [pc, #40]	; (c000e80 <LoopForever+0x12>)
	b	LoopFillZerobss
 c000e58:	e002      	b.n	c000e60 <LoopFillZerobss>

0c000e5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c000e5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c000e5c:	f842 3b04 	str.w	r3, [r2], #4

0c000e60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c000e60:	4b08      	ldr	r3, [pc, #32]	; (c000e84 <LoopForever+0x16>)
	cmp	r2, r3
 c000e62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c000e64:	d3f9      	bcc.n	c000e5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c000e66:	f001 fd0b 	bl	c002880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c000e6a:	f7ff fb6d 	bl	c000548 <main>

0c000e6e <LoopForever>:

LoopForever:
    b LoopForever
 c000e6e:	e7fe      	b.n	c000e6e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c000e70:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c000e74:	0c002948 	.word	0x0c002948
	ldr	r0, =_sdata
 c000e78:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c000e7c:	3000000c 	.word	0x3000000c
	ldr	r2, =_sbss
 c000e80:	3000000c 	.word	0x3000000c
	ldr	r3, = _ebss
 c000e84:	300000a8 	.word	0x300000a8

0c000e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c000e88:	e7fe      	b.n	c000e88 <ADC1_2_IRQHandler>

0c000e8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c000e8a:	b580      	push	{r7, lr}
 c000e8c:	b082      	sub	sp, #8
 c000e8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c000e90:	2300      	movs	r3, #0
 c000e92:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c000e94:	2004      	movs	r0, #4
 c000e96:	f000 f963 	bl	c001160 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c000e9a:	f7ff fedf 	bl	c000c5c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c000e9e:	2000      	movs	r0, #0
 c000ea0:	f000 f80e 	bl	c000ec0 <HAL_InitTick>
 c000ea4:	4603      	mov	r3, r0
 c000ea6:	2b00      	cmp	r3, #0
 c000ea8:	d002      	beq.n	c000eb0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c000eaa:	2301      	movs	r3, #1
 c000eac:	71fb      	strb	r3, [r7, #7]
 c000eae:	e001      	b.n	c000eb4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c000eb0:	f7ff fdb0 	bl	c000a14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c000eb4:	79fb      	ldrb	r3, [r7, #7]
}
 c000eb6:	4618      	mov	r0, r3
 c000eb8:	3708      	adds	r7, #8
 c000eba:	46bd      	mov	sp, r7
 c000ebc:	bd80      	pop	{r7, pc}
	...

0c000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c000ec0:	b580      	push	{r7, lr}
 c000ec2:	b084      	sub	sp, #16
 c000ec4:	af00      	add	r7, sp, #0
 c000ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c000ec8:	2300      	movs	r3, #0
 c000eca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c000ecc:	4b17      	ldr	r3, [pc, #92]	; (c000f2c <HAL_InitTick+0x6c>)
 c000ece:	781b      	ldrb	r3, [r3, #0]
 c000ed0:	2b00      	cmp	r3, #0
 c000ed2:	d023      	beq.n	c000f1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c000ed4:	4b16      	ldr	r3, [pc, #88]	; (c000f30 <HAL_InitTick+0x70>)
 c000ed6:	681a      	ldr	r2, [r3, #0]
 c000ed8:	4b14      	ldr	r3, [pc, #80]	; (c000f2c <HAL_InitTick+0x6c>)
 c000eda:	781b      	ldrb	r3, [r3, #0]
 c000edc:	4619      	mov	r1, r3
 c000ede:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c000ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 c000ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 c000eea:	4618      	mov	r0, r3
 c000eec:	f000 f96b 	bl	c0011c6 <HAL_SYSTICK_Config>
 c000ef0:	4603      	mov	r3, r0
 c000ef2:	2b00      	cmp	r3, #0
 c000ef4:	d10f      	bne.n	c000f16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c000ef6:	687b      	ldr	r3, [r7, #4]
 c000ef8:	2b07      	cmp	r3, #7
 c000efa:	d809      	bhi.n	c000f10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c000efc:	2200      	movs	r2, #0
 c000efe:	6879      	ldr	r1, [r7, #4]
 c000f00:	f04f 30ff 	mov.w	r0, #4294967295
 c000f04:	f000 f937 	bl	c001176 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c000f08:	4a0a      	ldr	r2, [pc, #40]	; (c000f34 <HAL_InitTick+0x74>)
 c000f0a:	687b      	ldr	r3, [r7, #4]
 c000f0c:	6013      	str	r3, [r2, #0]
 c000f0e:	e007      	b.n	c000f20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c000f10:	2301      	movs	r3, #1
 c000f12:	73fb      	strb	r3, [r7, #15]
 c000f14:	e004      	b.n	c000f20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c000f16:	2301      	movs	r3, #1
 c000f18:	73fb      	strb	r3, [r7, #15]
 c000f1a:	e001      	b.n	c000f20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c000f1c:	2301      	movs	r3, #1
 c000f1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c000f20:	7bfb      	ldrb	r3, [r7, #15]
}
 c000f22:	4618      	mov	r0, r3
 c000f24:	3710      	adds	r7, #16
 c000f26:	46bd      	mov	sp, r7
 c000f28:	bd80      	pop	{r7, pc}
 c000f2a:	bf00      	nop
 c000f2c:	30000008 	.word	0x30000008
 c000f30:	30000000 	.word	0x30000000
 c000f34:	30000004 	.word	0x30000004

0c000f38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c000f38:	b480      	push	{r7}
 c000f3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c000f3c:	4b06      	ldr	r3, [pc, #24]	; (c000f58 <HAL_IncTick+0x20>)
 c000f3e:	781b      	ldrb	r3, [r3, #0]
 c000f40:	461a      	mov	r2, r3
 c000f42:	4b06      	ldr	r3, [pc, #24]	; (c000f5c <HAL_IncTick+0x24>)
 c000f44:	681b      	ldr	r3, [r3, #0]
 c000f46:	4413      	add	r3, r2
 c000f48:	4a04      	ldr	r2, [pc, #16]	; (c000f5c <HAL_IncTick+0x24>)
 c000f4a:	6013      	str	r3, [r2, #0]
}
 c000f4c:	bf00      	nop
 c000f4e:	46bd      	mov	sp, r7
 c000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f54:	4770      	bx	lr
 c000f56:	bf00      	nop
 c000f58:	30000008 	.word	0x30000008
 c000f5c:	300000a4 	.word	0x300000a4

0c000f60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c000f60:	b480      	push	{r7}
 c000f62:	af00      	add	r7, sp, #0
  return uwTick;
 c000f64:	4b03      	ldr	r3, [pc, #12]	; (c000f74 <HAL_GetTick+0x14>)
 c000f66:	681b      	ldr	r3, [r3, #0]
}
 c000f68:	4618      	mov	r0, r3
 c000f6a:	46bd      	mov	sp, r7
 c000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f70:	4770      	bx	lr
 c000f72:	bf00      	nop
 c000f74:	300000a4 	.word	0x300000a4

0c000f78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 c000f78:	b580      	push	{r7, lr}
 c000f7a:	b084      	sub	sp, #16
 c000f7c:	af00      	add	r7, sp, #0
 c000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 c000f80:	f7ff ffee 	bl	c000f60 <HAL_GetTick>
 c000f84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 c000f86:	687b      	ldr	r3, [r7, #4]
 c000f88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 c000f8a:	68fb      	ldr	r3, [r7, #12]
 c000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 c000f90:	d005      	beq.n	c000f9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 c000f92:	4b0a      	ldr	r3, [pc, #40]	; (c000fbc <HAL_Delay+0x44>)
 c000f94:	781b      	ldrb	r3, [r3, #0]
 c000f96:	461a      	mov	r2, r3
 c000f98:	68fb      	ldr	r3, [r7, #12]
 c000f9a:	4413      	add	r3, r2
 c000f9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 c000f9e:	bf00      	nop
 c000fa0:	f7ff ffde 	bl	c000f60 <HAL_GetTick>
 c000fa4:	4602      	mov	r2, r0
 c000fa6:	68bb      	ldr	r3, [r7, #8]
 c000fa8:	1ad3      	subs	r3, r2, r3
 c000faa:	68fa      	ldr	r2, [r7, #12]
 c000fac:	429a      	cmp	r2, r3
 c000fae:	d8f7      	bhi.n	c000fa0 <HAL_Delay+0x28>
  {
  }
}
 c000fb0:	bf00      	nop
 c000fb2:	bf00      	nop
 c000fb4:	3710      	adds	r7, #16
 c000fb6:	46bd      	mov	sp, r7
 c000fb8:	bd80      	pop	{r7, pc}
 c000fba:	bf00      	nop
 c000fbc:	30000008 	.word	0x30000008

0c000fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c000fc0:	b480      	push	{r7}
 c000fc2:	b085      	sub	sp, #20
 c000fc4:	af00      	add	r7, sp, #0
 c000fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c000fc8:	687b      	ldr	r3, [r7, #4]
 c000fca:	f003 0307 	and.w	r3, r3, #7
 c000fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c000fd0:	4b0c      	ldr	r3, [pc, #48]	; (c001004 <__NVIC_SetPriorityGrouping+0x44>)
 c000fd2:	68db      	ldr	r3, [r3, #12]
 c000fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c000fd6:	68ba      	ldr	r2, [r7, #8]
 c000fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c000fdc:	4013      	ands	r3, r2
 c000fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c000fe0:	68fb      	ldr	r3, [r7, #12]
 c000fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c000fe4:	68bb      	ldr	r3, [r7, #8]
 c000fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c000fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c000fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c000ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c000ff2:	4a04      	ldr	r2, [pc, #16]	; (c001004 <__NVIC_SetPriorityGrouping+0x44>)
 c000ff4:	68bb      	ldr	r3, [r7, #8]
 c000ff6:	60d3      	str	r3, [r2, #12]
}
 c000ff8:	bf00      	nop
 c000ffa:	3714      	adds	r7, #20
 c000ffc:	46bd      	mov	sp, r7
 c000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001002:	4770      	bx	lr
 c001004:	e000ed00 	.word	0xe000ed00

0c001008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c001008:	b480      	push	{r7}
 c00100a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c00100c:	4b04      	ldr	r3, [pc, #16]	; (c001020 <__NVIC_GetPriorityGrouping+0x18>)
 c00100e:	68db      	ldr	r3, [r3, #12]
 c001010:	0a1b      	lsrs	r3, r3, #8
 c001012:	f003 0307 	and.w	r3, r3, #7
}
 c001016:	4618      	mov	r0, r3
 c001018:	46bd      	mov	sp, r7
 c00101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00101e:	4770      	bx	lr
 c001020:	e000ed00 	.word	0xe000ed00

0c001024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c001024:	b480      	push	{r7}
 c001026:	b083      	sub	sp, #12
 c001028:	af00      	add	r7, sp, #0
 c00102a:	4603      	mov	r3, r0
 c00102c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c00102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001032:	2b00      	cmp	r3, #0
 c001034:	db0b      	blt.n	c00104e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c001036:	79fb      	ldrb	r3, [r7, #7]
 c001038:	f003 021f 	and.w	r2, r3, #31
 c00103c:	4907      	ldr	r1, [pc, #28]	; (c00105c <__NVIC_EnableIRQ+0x38>)
 c00103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001042:	095b      	lsrs	r3, r3, #5
 c001044:	2001      	movs	r0, #1
 c001046:	fa00 f202 	lsl.w	r2, r0, r2
 c00104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c00104e:	bf00      	nop
 c001050:	370c      	adds	r7, #12
 c001052:	46bd      	mov	sp, r7
 c001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001058:	4770      	bx	lr
 c00105a:	bf00      	nop
 c00105c:	e000e100 	.word	0xe000e100

0c001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c001060:	b480      	push	{r7}
 c001062:	b083      	sub	sp, #12
 c001064:	af00      	add	r7, sp, #0
 c001066:	4603      	mov	r3, r0
 c001068:	6039      	str	r1, [r7, #0]
 c00106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c00106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001070:	2b00      	cmp	r3, #0
 c001072:	db0a      	blt.n	c00108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001074:	683b      	ldr	r3, [r7, #0]
 c001076:	b2da      	uxtb	r2, r3
 c001078:	490c      	ldr	r1, [pc, #48]	; (c0010ac <__NVIC_SetPriority+0x4c>)
 c00107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00107e:	0152      	lsls	r2, r2, #5
 c001080:	b2d2      	uxtb	r2, r2
 c001082:	440b      	add	r3, r1
 c001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c001088:	e00a      	b.n	c0010a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c00108a:	683b      	ldr	r3, [r7, #0]
 c00108c:	b2da      	uxtb	r2, r3
 c00108e:	4908      	ldr	r1, [pc, #32]	; (c0010b0 <__NVIC_SetPriority+0x50>)
 c001090:	79fb      	ldrb	r3, [r7, #7]
 c001092:	f003 030f 	and.w	r3, r3, #15
 c001096:	3b04      	subs	r3, #4
 c001098:	0152      	lsls	r2, r2, #5
 c00109a:	b2d2      	uxtb	r2, r2
 c00109c:	440b      	add	r3, r1
 c00109e:	761a      	strb	r2, [r3, #24]
}
 c0010a0:	bf00      	nop
 c0010a2:	370c      	adds	r7, #12
 c0010a4:	46bd      	mov	sp, r7
 c0010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0010aa:	4770      	bx	lr
 c0010ac:	e000e100 	.word	0xe000e100
 c0010b0:	e000ed00 	.word	0xe000ed00

0c0010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0010b4:	b480      	push	{r7}
 c0010b6:	b089      	sub	sp, #36	; 0x24
 c0010b8:	af00      	add	r7, sp, #0
 c0010ba:	60f8      	str	r0, [r7, #12]
 c0010bc:	60b9      	str	r1, [r7, #8]
 c0010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c0010c0:	68fb      	ldr	r3, [r7, #12]
 c0010c2:	f003 0307 	and.w	r3, r3, #7
 c0010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c0010c8:	69fb      	ldr	r3, [r7, #28]
 c0010ca:	f1c3 0307 	rsb	r3, r3, #7
 c0010ce:	2b03      	cmp	r3, #3
 c0010d0:	bf28      	it	cs
 c0010d2:	2303      	movcs	r3, #3
 c0010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c0010d6:	69fb      	ldr	r3, [r7, #28]
 c0010d8:	3303      	adds	r3, #3
 c0010da:	2b06      	cmp	r3, #6
 c0010dc:	d902      	bls.n	c0010e4 <NVIC_EncodePriority+0x30>
 c0010de:	69fb      	ldr	r3, [r7, #28]
 c0010e0:	3b04      	subs	r3, #4
 c0010e2:	e000      	b.n	c0010e6 <NVIC_EncodePriority+0x32>
 c0010e4:	2300      	movs	r3, #0
 c0010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0010e8:	f04f 32ff 	mov.w	r2, #4294967295
 c0010ec:	69bb      	ldr	r3, [r7, #24]
 c0010ee:	fa02 f303 	lsl.w	r3, r2, r3
 c0010f2:	43da      	mvns	r2, r3
 c0010f4:	68bb      	ldr	r3, [r7, #8]
 c0010f6:	401a      	ands	r2, r3
 c0010f8:	697b      	ldr	r3, [r7, #20]
 c0010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c0010fc:	f04f 31ff 	mov.w	r1, #4294967295
 c001100:	697b      	ldr	r3, [r7, #20]
 c001102:	fa01 f303 	lsl.w	r3, r1, r3
 c001106:	43d9      	mvns	r1, r3
 c001108:	687b      	ldr	r3, [r7, #4]
 c00110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c00110c:	4313      	orrs	r3, r2
         );
}
 c00110e:	4618      	mov	r0, r3
 c001110:	3724      	adds	r7, #36	; 0x24
 c001112:	46bd      	mov	sp, r7
 c001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001118:	4770      	bx	lr
	...

0c00111c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c00111c:	b580      	push	{r7, lr}
 c00111e:	b082      	sub	sp, #8
 c001120:	af00      	add	r7, sp, #0
 c001122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001124:	687b      	ldr	r3, [r7, #4]
 c001126:	3b01      	subs	r3, #1
 c001128:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c00112c:	d301      	bcc.n	c001132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c00112e:	2301      	movs	r3, #1
 c001130:	e00f      	b.n	c001152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c001132:	4a0a      	ldr	r2, [pc, #40]	; (c00115c <SysTick_Config+0x40>)
 c001134:	687b      	ldr	r3, [r7, #4]
 c001136:	3b01      	subs	r3, #1
 c001138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c00113a:	2107      	movs	r1, #7
 c00113c:	f04f 30ff 	mov.w	r0, #4294967295
 c001140:	f7ff ff8e 	bl	c001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001144:	4b05      	ldr	r3, [pc, #20]	; (c00115c <SysTick_Config+0x40>)
 c001146:	2200      	movs	r2, #0
 c001148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c00114a:	4b04      	ldr	r3, [pc, #16]	; (c00115c <SysTick_Config+0x40>)
 c00114c:	2207      	movs	r2, #7
 c00114e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c001150:	2300      	movs	r3, #0
}
 c001152:	4618      	mov	r0, r3
 c001154:	3708      	adds	r7, #8
 c001156:	46bd      	mov	sp, r7
 c001158:	bd80      	pop	{r7, pc}
 c00115a:	bf00      	nop
 c00115c:	e000e010 	.word	0xe000e010

0c001160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001160:	b580      	push	{r7, lr}
 c001162:	b082      	sub	sp, #8
 c001164:	af00      	add	r7, sp, #0
 c001166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c001168:	6878      	ldr	r0, [r7, #4]
 c00116a:	f7ff ff29 	bl	c000fc0 <__NVIC_SetPriorityGrouping>
}
 c00116e:	bf00      	nop
 c001170:	3708      	adds	r7, #8
 c001172:	46bd      	mov	sp, r7
 c001174:	bd80      	pop	{r7, pc}

0c001176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001176:	b580      	push	{r7, lr}
 c001178:	b086      	sub	sp, #24
 c00117a:	af00      	add	r7, sp, #0
 c00117c:	4603      	mov	r3, r0
 c00117e:	60b9      	str	r1, [r7, #8]
 c001180:	607a      	str	r2, [r7, #4]
 c001182:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c001184:	f7ff ff40 	bl	c001008 <__NVIC_GetPriorityGrouping>
 c001188:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c00118a:	687a      	ldr	r2, [r7, #4]
 c00118c:	68b9      	ldr	r1, [r7, #8]
 c00118e:	6978      	ldr	r0, [r7, #20]
 c001190:	f7ff ff90 	bl	c0010b4 <NVIC_EncodePriority>
 c001194:	4602      	mov	r2, r0
 c001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00119a:	4611      	mov	r1, r2
 c00119c:	4618      	mov	r0, r3
 c00119e:	f7ff ff5f 	bl	c001060 <__NVIC_SetPriority>
}
 c0011a2:	bf00      	nop
 c0011a4:	3718      	adds	r7, #24
 c0011a6:	46bd      	mov	sp, r7
 c0011a8:	bd80      	pop	{r7, pc}

0c0011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c0011aa:	b580      	push	{r7, lr}
 c0011ac:	b082      	sub	sp, #8
 c0011ae:	af00      	add	r7, sp, #0
 c0011b0:	4603      	mov	r3, r0
 c0011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c0011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0011b8:	4618      	mov	r0, r3
 c0011ba:	f7ff ff33 	bl	c001024 <__NVIC_EnableIRQ>
}
 c0011be:	bf00      	nop
 c0011c0:	3708      	adds	r7, #8
 c0011c2:	46bd      	mov	sp, r7
 c0011c4:	bd80      	pop	{r7, pc}

0c0011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c0011c6:	b580      	push	{r7, lr}
 c0011c8:	b082      	sub	sp, #8
 c0011ca:	af00      	add	r7, sp, #0
 c0011cc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c0011ce:	6878      	ldr	r0, [r7, #4]
 c0011d0:	f7ff ffa4 	bl	c00111c <SysTick_Config>
 c0011d4:	4603      	mov	r3, r0
}
 c0011d6:	4618      	mov	r0, r3
 c0011d8:	3708      	adds	r7, #8
 c0011da:	46bd      	mov	sp, r7
 c0011dc:	bd80      	pop	{r7, pc}
	...

0c0011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c0011e0:	b480      	push	{r7}
 c0011e2:	b087      	sub	sp, #28
 c0011e4:	af00      	add	r7, sp, #0
 c0011e6:	6078      	str	r0, [r7, #4]
 c0011e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c0011ea:	2300      	movs	r3, #0
 c0011ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0011ee:	e158      	b.n	c0014a2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c0011f0:	683b      	ldr	r3, [r7, #0]
 c0011f2:	681a      	ldr	r2, [r3, #0]
 c0011f4:	2101      	movs	r1, #1
 c0011f6:	697b      	ldr	r3, [r7, #20]
 c0011f8:	fa01 f303 	lsl.w	r3, r1, r3
 c0011fc:	4013      	ands	r3, r2
 c0011fe:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 c001200:	68fb      	ldr	r3, [r7, #12]
 c001202:	2b00      	cmp	r3, #0
 c001204:	f000 814a 	beq.w	c00149c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001208:	683b      	ldr	r3, [r7, #0]
 c00120a:	685b      	ldr	r3, [r3, #4]
 c00120c:	2b01      	cmp	r3, #1
 c00120e:	d00b      	beq.n	c001228 <HAL_GPIO_Init+0x48>
 c001210:	683b      	ldr	r3, [r7, #0]
 c001212:	685b      	ldr	r3, [r3, #4]
 c001214:	2b02      	cmp	r3, #2
 c001216:	d007      	beq.n	c001228 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001218:	683b      	ldr	r3, [r7, #0]
 c00121a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c00121c:	2b11      	cmp	r3, #17
 c00121e:	d003      	beq.n	c001228 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001220:	683b      	ldr	r3, [r7, #0]
 c001222:	685b      	ldr	r3, [r3, #4]
 c001224:	2b12      	cmp	r3, #18
 c001226:	d130      	bne.n	c00128a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c001228:	687b      	ldr	r3, [r7, #4]
 c00122a:	689b      	ldr	r3, [r3, #8]
 c00122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c00122e:	697b      	ldr	r3, [r7, #20]
 c001230:	005b      	lsls	r3, r3, #1
 c001232:	2203      	movs	r2, #3
 c001234:	fa02 f303 	lsl.w	r3, r2, r3
 c001238:	43db      	mvns	r3, r3
 c00123a:	693a      	ldr	r2, [r7, #16]
 c00123c:	4013      	ands	r3, r2
 c00123e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c001240:	683b      	ldr	r3, [r7, #0]
 c001242:	68da      	ldr	r2, [r3, #12]
 c001244:	697b      	ldr	r3, [r7, #20]
 c001246:	005b      	lsls	r3, r3, #1
 c001248:	fa02 f303 	lsl.w	r3, r2, r3
 c00124c:	693a      	ldr	r2, [r7, #16]
 c00124e:	4313      	orrs	r3, r2
 c001250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c001252:	687b      	ldr	r3, [r7, #4]
 c001254:	693a      	ldr	r2, [r7, #16]
 c001256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c001258:	687b      	ldr	r3, [r7, #4]
 c00125a:	685b      	ldr	r3, [r3, #4]
 c00125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c00125e:	2201      	movs	r2, #1
 c001260:	697b      	ldr	r3, [r7, #20]
 c001262:	fa02 f303 	lsl.w	r3, r2, r3
 c001266:	43db      	mvns	r3, r3
 c001268:	693a      	ldr	r2, [r7, #16]
 c00126a:	4013      	ands	r3, r2
 c00126c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c00126e:	683b      	ldr	r3, [r7, #0]
 c001270:	685b      	ldr	r3, [r3, #4]
 c001272:	091b      	lsrs	r3, r3, #4
 c001274:	f003 0201 	and.w	r2, r3, #1
 c001278:	697b      	ldr	r3, [r7, #20]
 c00127a:	fa02 f303 	lsl.w	r3, r2, r3
 c00127e:	693a      	ldr	r2, [r7, #16]
 c001280:	4313      	orrs	r3, r2
 c001282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c001284:	687b      	ldr	r3, [r7, #4]
 c001286:	693a      	ldr	r2, [r7, #16]
 c001288:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 c00128a:	687b      	ldr	r3, [r7, #4]
 c00128c:	68db      	ldr	r3, [r3, #12]
 c00128e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c001290:	697b      	ldr	r3, [r7, #20]
 c001292:	005b      	lsls	r3, r3, #1
 c001294:	2203      	movs	r2, #3
 c001296:	fa02 f303 	lsl.w	r3, r2, r3
 c00129a:	43db      	mvns	r3, r3
 c00129c:	693a      	ldr	r2, [r7, #16]
 c00129e:	4013      	ands	r3, r2
 c0012a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c0012a2:	683b      	ldr	r3, [r7, #0]
 c0012a4:	689a      	ldr	r2, [r3, #8]
 c0012a6:	697b      	ldr	r3, [r7, #20]
 c0012a8:	005b      	lsls	r3, r3, #1
 c0012aa:	fa02 f303 	lsl.w	r3, r2, r3
 c0012ae:	693a      	ldr	r2, [r7, #16]
 c0012b0:	4313      	orrs	r3, r2
 c0012b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 c0012b4:	687b      	ldr	r3, [r7, #4]
 c0012b6:	693a      	ldr	r2, [r7, #16]
 c0012b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0012ba:	683b      	ldr	r3, [r7, #0]
 c0012bc:	685b      	ldr	r3, [r3, #4]
 c0012be:	2b02      	cmp	r3, #2
 c0012c0:	d003      	beq.n	c0012ca <HAL_GPIO_Init+0xea>
 c0012c2:	683b      	ldr	r3, [r7, #0]
 c0012c4:	685b      	ldr	r3, [r3, #4]
 c0012c6:	2b12      	cmp	r3, #18
 c0012c8:	d123      	bne.n	c001312 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c0012ca:	697b      	ldr	r3, [r7, #20]
 c0012cc:	08da      	lsrs	r2, r3, #3
 c0012ce:	687b      	ldr	r3, [r7, #4]
 c0012d0:	3208      	adds	r2, #8
 c0012d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0012d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c0012d8:	697b      	ldr	r3, [r7, #20]
 c0012da:	f003 0307 	and.w	r3, r3, #7
 c0012de:	009b      	lsls	r3, r3, #2
 c0012e0:	220f      	movs	r2, #15
 c0012e2:	fa02 f303 	lsl.w	r3, r2, r3
 c0012e6:	43db      	mvns	r3, r3
 c0012e8:	693a      	ldr	r2, [r7, #16]
 c0012ea:	4013      	ands	r3, r2
 c0012ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c0012ee:	683b      	ldr	r3, [r7, #0]
 c0012f0:	691a      	ldr	r2, [r3, #16]
 c0012f2:	697b      	ldr	r3, [r7, #20]
 c0012f4:	f003 0307 	and.w	r3, r3, #7
 c0012f8:	009b      	lsls	r3, r3, #2
 c0012fa:	fa02 f303 	lsl.w	r3, r2, r3
 c0012fe:	693a      	ldr	r2, [r7, #16]
 c001300:	4313      	orrs	r3, r2
 c001302:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c001304:	697b      	ldr	r3, [r7, #20]
 c001306:	08da      	lsrs	r2, r3, #3
 c001308:	687b      	ldr	r3, [r7, #4]
 c00130a:	3208      	adds	r2, #8
 c00130c:	6939      	ldr	r1, [r7, #16]
 c00130e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c001312:	687b      	ldr	r3, [r7, #4]
 c001314:	681b      	ldr	r3, [r3, #0]
 c001316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c001318:	697b      	ldr	r3, [r7, #20]
 c00131a:	005b      	lsls	r3, r3, #1
 c00131c:	2203      	movs	r2, #3
 c00131e:	fa02 f303 	lsl.w	r3, r2, r3
 c001322:	43db      	mvns	r3, r3
 c001324:	693a      	ldr	r2, [r7, #16]
 c001326:	4013      	ands	r3, r2
 c001328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c00132a:	683b      	ldr	r3, [r7, #0]
 c00132c:	685b      	ldr	r3, [r3, #4]
 c00132e:	f003 0203 	and.w	r2, r3, #3
 c001332:	697b      	ldr	r3, [r7, #20]
 c001334:	005b      	lsls	r3, r3, #1
 c001336:	fa02 f303 	lsl.w	r3, r2, r3
 c00133a:	693a      	ldr	r2, [r7, #16]
 c00133c:	4313      	orrs	r3, r2
 c00133e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c001340:	687b      	ldr	r3, [r7, #4]
 c001342:	693a      	ldr	r2, [r7, #16]
 c001344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c001346:	683b      	ldr	r3, [r7, #0]
 c001348:	685b      	ldr	r3, [r3, #4]
 c00134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00134e:	2b00      	cmp	r3, #0
 c001350:	f000 80a4 	beq.w	c00149c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c001354:	4a5a      	ldr	r2, [pc, #360]	; (c0014c0 <HAL_GPIO_Init+0x2e0>)
 c001356:	697b      	ldr	r3, [r7, #20]
 c001358:	089b      	lsrs	r3, r3, #2
 c00135a:	3318      	adds	r3, #24
 c00135c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001360:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c001362:	697b      	ldr	r3, [r7, #20]
 c001364:	f003 0303 	and.w	r3, r3, #3
 c001368:	00db      	lsls	r3, r3, #3
 c00136a:	220f      	movs	r2, #15
 c00136c:	fa02 f303 	lsl.w	r3, r2, r3
 c001370:	43db      	mvns	r3, r3
 c001372:	693a      	ldr	r2, [r7, #16]
 c001374:	4013      	ands	r3, r2
 c001376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c001378:	687b      	ldr	r3, [r7, #4]
 c00137a:	4a52      	ldr	r2, [pc, #328]	; (c0014c4 <HAL_GPIO_Init+0x2e4>)
 c00137c:	4293      	cmp	r3, r2
 c00137e:	d025      	beq.n	c0013cc <HAL_GPIO_Init+0x1ec>
 c001380:	687b      	ldr	r3, [r7, #4]
 c001382:	4a51      	ldr	r2, [pc, #324]	; (c0014c8 <HAL_GPIO_Init+0x2e8>)
 c001384:	4293      	cmp	r3, r2
 c001386:	d01f      	beq.n	c0013c8 <HAL_GPIO_Init+0x1e8>
 c001388:	687b      	ldr	r3, [r7, #4]
 c00138a:	4a50      	ldr	r2, [pc, #320]	; (c0014cc <HAL_GPIO_Init+0x2ec>)
 c00138c:	4293      	cmp	r3, r2
 c00138e:	d019      	beq.n	c0013c4 <HAL_GPIO_Init+0x1e4>
 c001390:	687b      	ldr	r3, [r7, #4]
 c001392:	4a4f      	ldr	r2, [pc, #316]	; (c0014d0 <HAL_GPIO_Init+0x2f0>)
 c001394:	4293      	cmp	r3, r2
 c001396:	d013      	beq.n	c0013c0 <HAL_GPIO_Init+0x1e0>
 c001398:	687b      	ldr	r3, [r7, #4]
 c00139a:	4a4e      	ldr	r2, [pc, #312]	; (c0014d4 <HAL_GPIO_Init+0x2f4>)
 c00139c:	4293      	cmp	r3, r2
 c00139e:	d00d      	beq.n	c0013bc <HAL_GPIO_Init+0x1dc>
 c0013a0:	687b      	ldr	r3, [r7, #4]
 c0013a2:	4a4d      	ldr	r2, [pc, #308]	; (c0014d8 <HAL_GPIO_Init+0x2f8>)
 c0013a4:	4293      	cmp	r3, r2
 c0013a6:	d007      	beq.n	c0013b8 <HAL_GPIO_Init+0x1d8>
 c0013a8:	687b      	ldr	r3, [r7, #4]
 c0013aa:	4a4c      	ldr	r2, [pc, #304]	; (c0014dc <HAL_GPIO_Init+0x2fc>)
 c0013ac:	4293      	cmp	r3, r2
 c0013ae:	d101      	bne.n	c0013b4 <HAL_GPIO_Init+0x1d4>
 c0013b0:	2306      	movs	r3, #6
 c0013b2:	e00c      	b.n	c0013ce <HAL_GPIO_Init+0x1ee>
 c0013b4:	2307      	movs	r3, #7
 c0013b6:	e00a      	b.n	c0013ce <HAL_GPIO_Init+0x1ee>
 c0013b8:	2305      	movs	r3, #5
 c0013ba:	e008      	b.n	c0013ce <HAL_GPIO_Init+0x1ee>
 c0013bc:	2304      	movs	r3, #4
 c0013be:	e006      	b.n	c0013ce <HAL_GPIO_Init+0x1ee>
 c0013c0:	2303      	movs	r3, #3
 c0013c2:	e004      	b.n	c0013ce <HAL_GPIO_Init+0x1ee>
 c0013c4:	2302      	movs	r3, #2
 c0013c6:	e002      	b.n	c0013ce <HAL_GPIO_Init+0x1ee>
 c0013c8:	2301      	movs	r3, #1
 c0013ca:	e000      	b.n	c0013ce <HAL_GPIO_Init+0x1ee>
 c0013cc:	2300      	movs	r3, #0
 c0013ce:	697a      	ldr	r2, [r7, #20]
 c0013d0:	f002 0203 	and.w	r2, r2, #3
 c0013d4:	00d2      	lsls	r2, r2, #3
 c0013d6:	4093      	lsls	r3, r2
 c0013d8:	693a      	ldr	r2, [r7, #16]
 c0013da:	4313      	orrs	r3, r2
 c0013dc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c0013de:	4938      	ldr	r1, [pc, #224]	; (c0014c0 <HAL_GPIO_Init+0x2e0>)
 c0013e0:	697b      	ldr	r3, [r7, #20]
 c0013e2:	089b      	lsrs	r3, r3, #2
 c0013e4:	3318      	adds	r3, #24
 c0013e6:	693a      	ldr	r2, [r7, #16]
 c0013e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c0013ec:	4b34      	ldr	r3, [pc, #208]	; (c0014c0 <HAL_GPIO_Init+0x2e0>)
 c0013ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0013f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0013f4:	68fb      	ldr	r3, [r7, #12]
 c0013f6:	43db      	mvns	r3, r3
 c0013f8:	693a      	ldr	r2, [r7, #16]
 c0013fa:	4013      	ands	r3, r2
 c0013fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c0013fe:	683b      	ldr	r3, [r7, #0]
 c001400:	685b      	ldr	r3, [r3, #4]
 c001402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c001406:	2b00      	cmp	r3, #0
 c001408:	d003      	beq.n	c001412 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 c00140a:	693a      	ldr	r2, [r7, #16]
 c00140c:	68fb      	ldr	r3, [r7, #12]
 c00140e:	4313      	orrs	r3, r2
 c001410:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c001412:	4a2b      	ldr	r2, [pc, #172]	; (c0014c0 <HAL_GPIO_Init+0x2e0>)
 c001414:	693b      	ldr	r3, [r7, #16]
 c001416:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 c00141a:	4b29      	ldr	r3, [pc, #164]	; (c0014c0 <HAL_GPIO_Init+0x2e0>)
 c00141c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001422:	68fb      	ldr	r3, [r7, #12]
 c001424:	43db      	mvns	r3, r3
 c001426:	693a      	ldr	r2, [r7, #16]
 c001428:	4013      	ands	r3, r2
 c00142a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c00142c:	683b      	ldr	r3, [r7, #0]
 c00142e:	685b      	ldr	r3, [r3, #4]
 c001430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001434:	2b00      	cmp	r3, #0
 c001436:	d003      	beq.n	c001440 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 c001438:	693a      	ldr	r2, [r7, #16]
 c00143a:	68fb      	ldr	r3, [r7, #12]
 c00143c:	4313      	orrs	r3, r2
 c00143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c001440:	4a1f      	ldr	r2, [pc, #124]	; (c0014c0 <HAL_GPIO_Init+0x2e0>)
 c001442:	693b      	ldr	r3, [r7, #16]
 c001444:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c001448:	4b1d      	ldr	r3, [pc, #116]	; (c0014c0 <HAL_GPIO_Init+0x2e0>)
 c00144a:	681b      	ldr	r3, [r3, #0]
 c00144c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00144e:	68fb      	ldr	r3, [r7, #12]
 c001450:	43db      	mvns	r3, r3
 c001452:	693a      	ldr	r2, [r7, #16]
 c001454:	4013      	ands	r3, r2
 c001456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c001458:	683b      	ldr	r3, [r7, #0]
 c00145a:	685b      	ldr	r3, [r3, #4]
 c00145c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c001460:	2b00      	cmp	r3, #0
 c001462:	d003      	beq.n	c00146c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 c001464:	693a      	ldr	r2, [r7, #16]
 c001466:	68fb      	ldr	r3, [r7, #12]
 c001468:	4313      	orrs	r3, r2
 c00146a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c00146c:	4a14      	ldr	r2, [pc, #80]	; (c0014c0 <HAL_GPIO_Init+0x2e0>)
 c00146e:	693b      	ldr	r3, [r7, #16]
 c001470:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c001472:	4b13      	ldr	r3, [pc, #76]	; (c0014c0 <HAL_GPIO_Init+0x2e0>)
 c001474:	685b      	ldr	r3, [r3, #4]
 c001476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001478:	68fb      	ldr	r3, [r7, #12]
 c00147a:	43db      	mvns	r3, r3
 c00147c:	693a      	ldr	r2, [r7, #16]
 c00147e:	4013      	ands	r3, r2
 c001480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c001482:	683b      	ldr	r3, [r7, #0]
 c001484:	685b      	ldr	r3, [r3, #4]
 c001486:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c00148a:	2b00      	cmp	r3, #0
 c00148c:	d003      	beq.n	c001496 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 c00148e:	693a      	ldr	r2, [r7, #16]
 c001490:	68fb      	ldr	r3, [r7, #12]
 c001492:	4313      	orrs	r3, r2
 c001494:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c001496:	4a0a      	ldr	r2, [pc, #40]	; (c0014c0 <HAL_GPIO_Init+0x2e0>)
 c001498:	693b      	ldr	r3, [r7, #16]
 c00149a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 c00149c:	697b      	ldr	r3, [r7, #20]
 c00149e:	3301      	adds	r3, #1
 c0014a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0014a2:	683b      	ldr	r3, [r7, #0]
 c0014a4:	681a      	ldr	r2, [r3, #0]
 c0014a6:	697b      	ldr	r3, [r7, #20]
 c0014a8:	fa22 f303 	lsr.w	r3, r2, r3
 c0014ac:	2b00      	cmp	r3, #0
 c0014ae:	f47f ae9f 	bne.w	c0011f0 <HAL_GPIO_Init+0x10>
  }
}
 c0014b2:	bf00      	nop
 c0014b4:	bf00      	nop
 c0014b6:	371c      	adds	r7, #28
 c0014b8:	46bd      	mov	sp, r7
 c0014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0014be:	4770      	bx	lr
 c0014c0:	5002f400 	.word	0x5002f400
 c0014c4:	52020000 	.word	0x52020000
 c0014c8:	52020400 	.word	0x52020400
 c0014cc:	52020800 	.word	0x52020800
 c0014d0:	52020c00 	.word	0x52020c00
 c0014d4:	52021000 	.word	0x52021000
 c0014d8:	52021400 	.word	0x52021400
 c0014dc:	52021800 	.word	0x52021800

0c0014e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c0014e0:	b480      	push	{r7}
 c0014e2:	b083      	sub	sp, #12
 c0014e4:	af00      	add	r7, sp, #0
 c0014e6:	6078      	str	r0, [r7, #4]
 c0014e8:	460b      	mov	r3, r1
 c0014ea:	807b      	strh	r3, [r7, #2]
 c0014ec:	4613      	mov	r3, r2
 c0014ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c0014f0:	787b      	ldrb	r3, [r7, #1]
 c0014f2:	2b00      	cmp	r3, #0
 c0014f4:	d003      	beq.n	c0014fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c0014f6:	887a      	ldrh	r2, [r7, #2]
 c0014f8:	687b      	ldr	r3, [r7, #4]
 c0014fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c0014fc:	e002      	b.n	c001504 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c0014fe:	887a      	ldrh	r2, [r7, #2]
 c001500:	687b      	ldr	r3, [r7, #4]
 c001502:	629a      	str	r2, [r3, #40]	; 0x28
}
 c001504:	bf00      	nop
 c001506:	370c      	adds	r7, #12
 c001508:	46bd      	mov	sp, r7
 c00150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00150e:	4770      	bx	lr

0c001510 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 c001510:	b480      	push	{r7}
 c001512:	b085      	sub	sp, #20
 c001514:	af00      	add	r7, sp, #0
 c001516:	6078      	str	r0, [r7, #4]
 c001518:	460b      	mov	r3, r1
 c00151a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 c00151c:	687b      	ldr	r3, [r7, #4]
 c00151e:	695b      	ldr	r3, [r3, #20]
 c001520:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 c001522:	887a      	ldrh	r2, [r7, #2]
 c001524:	68fb      	ldr	r3, [r7, #12]
 c001526:	4013      	ands	r3, r2
 c001528:	041a      	lsls	r2, r3, #16
 c00152a:	68fb      	ldr	r3, [r7, #12]
 c00152c:	43d9      	mvns	r1, r3
 c00152e:	887b      	ldrh	r3, [r7, #2]
 c001530:	400b      	ands	r3, r1
 c001532:	431a      	orrs	r2, r3
 c001534:	687b      	ldr	r3, [r7, #4]
 c001536:	619a      	str	r2, [r3, #24]
}
 c001538:	bf00      	nop
 c00153a:	3714      	adds	r7, #20
 c00153c:	46bd      	mov	sp, r7
 c00153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001542:	4770      	bx	lr

0c001544 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c001544:	b480      	push	{r7}
 c001546:	b089      	sub	sp, #36	; 0x24
 c001548:	af00      	add	r7, sp, #0
 c00154a:	60f8      	str	r0, [r7, #12]
 c00154c:	460b      	mov	r3, r1
 c00154e:	607a      	str	r2, [r7, #4]
 c001550:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c001552:	2300      	movs	r3, #0
 c001554:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c001556:	68fb      	ldr	r3, [r7, #12]
 c001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00155a:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c00155c:	e01b      	b.n	c001596 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c00155e:	897a      	ldrh	r2, [r7, #10]
 c001560:	2101      	movs	r1, #1
 c001562:	69fb      	ldr	r3, [r7, #28]
 c001564:	fa01 f303 	lsl.w	r3, r1, r3
 c001568:	4013      	ands	r3, r2
 c00156a:	617b      	str	r3, [r7, #20]

    if(iocurrent != 0U)
 c00156c:	697b      	ldr	r3, [r7, #20]
 c00156e:	2b00      	cmp	r3, #0
 c001570:	d00e      	beq.n	c001590 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c001572:	2201      	movs	r2, #1
 c001574:	69fb      	ldr	r3, [r7, #28]
 c001576:	fa02 f303 	lsl.w	r3, r2, r3
 c00157a:	43db      	mvns	r3, r3
 c00157c:	69ba      	ldr	r2, [r7, #24]
 c00157e:	4013      	ands	r3, r2
 c001580:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c001582:	687a      	ldr	r2, [r7, #4]
 c001584:	69fb      	ldr	r3, [r7, #28]
 c001586:	fa02 f303 	lsl.w	r3, r2, r3
 c00158a:	69ba      	ldr	r2, [r7, #24]
 c00158c:	4313      	orrs	r3, r2
 c00158e:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c001590:	69fb      	ldr	r3, [r7, #28]
 c001592:	3301      	adds	r3, #1
 c001594:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c001596:	897a      	ldrh	r2, [r7, #10]
 c001598:	69fb      	ldr	r3, [r7, #28]
 c00159a:	fa42 f303 	asr.w	r3, r2, r3
 c00159e:	2b00      	cmp	r3, #0
 c0015a0:	d1dd      	bne.n	c00155e <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c0015a2:	68fb      	ldr	r3, [r7, #12]
 c0015a4:	69ba      	ldr	r2, [r7, #24]
 c0015a6:	631a      	str	r2, [r3, #48]	; 0x30
}
 c0015a8:	bf00      	nop
 c0015aa:	3724      	adds	r7, #36	; 0x24
 c0015ac:	46bd      	mov	sp, r7
 c0015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015b2:	4770      	bx	lr

0c0015b4 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c0015b4:	b480      	push	{r7}
 c0015b6:	b089      	sub	sp, #36	; 0x24
 c0015b8:	af00      	add	r7, sp, #0
 c0015ba:	6078      	str	r0, [r7, #4]
 c0015bc:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if (   (     !(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0015be:	687b      	ldr	r3, [r7, #4]
 c0015c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0015c4:	d00b      	beq.n	c0015de <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0015c6:	687b      	ldr	r3, [r7, #4]
 c0015c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0015cc:	d007      	beq.n	c0015de <HAL_GTZC_MPCBB_ConfigMem+0x2a>
           &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c0015ce:	687b      	ldr	r3, [r7, #4]
 c0015d0:	4a36      	ldr	r2, [pc, #216]	; (c0016ac <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c0015d2:	4293      	cmp	r3, r2
 c0015d4:	d003      	beq.n	c0015de <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0015d6:	687b      	ldr	r3, [r7, #4]
 c0015d8:	4a35      	ldr	r2, [pc, #212]	; (c0016b0 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c0015da:	4293      	cmp	r3, r2
 c0015dc:	d111      	bne.n	c001602 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || (   (    pMPCBB_desc->SecureRWIllegalMode
 c0015de:	683b      	ldr	r3, [r7, #0]
 c0015e0:	681b      	ldr	r3, [r3, #0]
 c0015e2:	2b00      	cmp	r3, #0
 c0015e4:	d004      	beq.n	c0015f0 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
               != GTZC_MPCBB_SRWILADIS_ENABLE)
          && (    pMPCBB_desc->SecureRWIllegalMode
 c0015e6:	683b      	ldr	r3, [r7, #0]
 c0015e8:	681b      	ldr	r3, [r3, #0]
 c0015ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c0015ee:	d108      	bne.n	c001602 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
               != GTZC_MPCBB_SRWILADIS_DISABLE))
      || (   (    pMPCBB_desc->InvertSecureState
 c0015f0:	683b      	ldr	r3, [r7, #0]
 c0015f2:	685b      	ldr	r3, [r3, #4]
 c0015f4:	2b00      	cmp	r3, #0
 c0015f6:	d006      	beq.n	c001606 <HAL_GTZC_MPCBB_ConfigMem+0x52>
               != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
          && (    pMPCBB_desc->InvertSecureState
 c0015f8:	683b      	ldr	r3, [r7, #0]
 c0015fa:	685b      	ldr	r3, [r3, #4]
 c0015fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c001600:	d001      	beq.n	c001606 <HAL_GTZC_MPCBB_ConfigMem+0x52>
               != GTZC_MPCBB_INVSECSTATE_INVERTED)))
  {
    return HAL_ERROR;
 c001602:	2301      	movs	r3, #1
 c001604:	e04b      	b.n	c00169e <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c001606:	683b      	ldr	r3, [r7, #0]
 c001608:	685b      	ldr	r3, [r3, #4]
 c00160a:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c00160c:	683b      	ldr	r3, [r7, #0]
 c00160e:	681b      	ldr	r3, [r3, #0]
 c001610:	693a      	ldr	r2, [r7, #16]
 c001612:	4313      	orrs	r3, r2
 c001614:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c001616:	687b      	ldr	r3, [r7, #4]
 c001618:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c00161c:	d003      	beq.n	c001626 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c00161e:	687b      	ldr	r3, [r7, #4]
 c001620:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c001624:	d105      	bne.n	c001632 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c001626:	4b23      	ldr	r3, [pc, #140]	; (c0016b4 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c001628:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c00162a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c00162e:	61bb      	str	r3, [r7, #24]
 c001630:	e004      	b.n	c00163c <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c001632:	4b21      	ldr	r3, [pc, #132]	; (c0016b8 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c001634:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c001636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c00163a:	61bb      	str	r3, [r7, #24]
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c00163c:	69fb      	ldr	r3, [r7, #28]
 c00163e:	681b      	ldr	r3, [r3, #0]
 c001640:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c001644:	693b      	ldr	r3, [r7, #16]
 c001646:	431a      	orrs	r2, r3
 c001648:	69fb      	ldr	r3, [r7, #28]
 c00164a:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c00164c:	69bb      	ldr	r3, [r7, #24]
 c00164e:	0b5b      	lsrs	r3, r3, #13
 c001650:	2201      	movs	r2, #1
 c001652:	fa02 f303 	lsl.w	r3, r2, r3
 c001656:	3b01      	subs	r3, #1
 c001658:	60fb      	str	r3, [r7, #12]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c00165a:	69fb      	ldr	r3, [r7, #28]
 c00165c:	691a      	ldr	r2, [r3, #16]
 c00165e:	68fb      	ldr	r3, [r7, #12]
 c001660:	43db      	mvns	r3, r3
 c001662:	401a      	ands	r2, r3
 c001664:	683b      	ldr	r3, [r7, #0]
 c001666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c001668:	431a      	orrs	r2, r3
 c00166a:	69fb      	ldr	r3, [r7, #28]
 c00166c:	611a      	str	r2, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c00166e:	69bb      	ldr	r3, [r7, #24]
 c001670:	0b5b      	lsrs	r3, r3, #13
 c001672:	60bb      	str	r3, [r7, #8]
  for (i = 0U; i < size_in_superblocks; i++)
 c001674:	2300      	movs	r3, #0
 c001676:	617b      	str	r3, [r7, #20]
 c001678:	e00c      	b.n	c001694 <HAL_GTZC_MPCBB_ConfigMem+0xe0>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c00167a:	683b      	ldr	r3, [r7, #0]
 c00167c:	697a      	ldr	r2, [r7, #20]
 c00167e:	3202      	adds	r2, #2
 c001680:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001684:	69fb      	ldr	r3, [r7, #28]
 c001686:	697a      	ldr	r2, [r7, #20]
 c001688:	3240      	adds	r2, #64	; 0x40
 c00168a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c00168e:	697b      	ldr	r3, [r7, #20]
 c001690:	3301      	adds	r3, #1
 c001692:	617b      	str	r3, [r7, #20]
 c001694:	697a      	ldr	r2, [r7, #20]
 c001696:	68bb      	ldr	r3, [r7, #8]
 c001698:	429a      	cmp	r2, r3
 c00169a:	d3ee      	bcc.n	c00167a <HAL_GTZC_MPCBB_ConfigMem+0xc6>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c00169c:	2300      	movs	r3, #0
}
 c00169e:	4618      	mov	r0, r3
 c0016a0:	3724      	adds	r7, #36	; 0x24
 c0016a2:	46bd      	mov	sp, r7
 c0016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0016a8:	4770      	bx	lr
 c0016aa:	bf00      	nop
 c0016ac:	20030000 	.word	0x20030000
 c0016b0:	30030000 	.word	0x30030000
 c0016b4:	50032c00 	.word	0x50032c00
 c0016b8:	50033000 	.word	0x50033000

0c0016bc <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c0016bc:	b580      	push	{r7, lr}
 c0016be:	b084      	sub	sp, #16
 c0016c0:	af00      	add	r7, sp, #0
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c0016c2:	4b3f      	ldr	r3, [pc, #252]	; (c0017c0 <HAL_GTZC_IRQHandler+0x104>)
 c0016c4:	681b      	ldr	r3, [r3, #0]
 c0016c6:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c0016c8:	4b3d      	ldr	r3, [pc, #244]	; (c0017c0 <HAL_GTZC_IRQHandler+0x104>)
 c0016ca:	691b      	ldr	r3, [r3, #16]
 c0016cc:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c0016ce:	68ba      	ldr	r2, [r7, #8]
 c0016d0:	687b      	ldr	r3, [r7, #4]
 c0016d2:	4013      	ands	r3, r2
 c0016d4:	603b      	str	r3, [r7, #0]
  if(flag != 0U)
 c0016d6:	683b      	ldr	r3, [r7, #0]
 c0016d8:	2b00      	cmp	r3, #0
 c0016da:	d019      	beq.n	c001710 <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c0016dc:	4a38      	ldr	r2, [pc, #224]	; (c0017c0 <HAL_GTZC_IRQHandler+0x104>)
 c0016de:	683b      	ldr	r3, [r7, #0]
 c0016e0:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0016e2:	2300      	movs	r3, #0
 c0016e4:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0016e6:	e00d      	b.n	c001704 <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c0016e8:	683a      	ldr	r2, [r7, #0]
 c0016ea:	68fb      	ldr	r3, [r7, #12]
 c0016ec:	fa22 f303 	lsr.w	r3, r2, r3
 c0016f0:	f003 0301 	and.w	r3, r3, #1
 c0016f4:	2b00      	cmp	r3, #0
 c0016f6:	d002      	beq.n	c0016fe <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c0016f8:	68f8      	ldr	r0, [r7, #12]
 c0016fa:	f000 f863 	bl	c0017c4 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0016fe:	68fb      	ldr	r3, [r7, #12]
 c001700:	3301      	adds	r3, #1
 c001702:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001704:	683a      	ldr	r2, [r7, #0]
 c001706:	68fb      	ldr	r3, [r7, #12]
 c001708:	fa22 f303 	lsr.w	r3, r2, r3
 c00170c:	2b00      	cmp	r3, #0
 c00170e:	d1eb      	bne.n	c0016e8 <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c001710:	4b2b      	ldr	r3, [pc, #172]	; (c0017c0 <HAL_GTZC_IRQHandler+0x104>)
 c001712:	685b      	ldr	r3, [r3, #4]
 c001714:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c001716:	4b2a      	ldr	r3, [pc, #168]	; (c0017c0 <HAL_GTZC_IRQHandler+0x104>)
 c001718:	695b      	ldr	r3, [r3, #20]
 c00171a:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c00171c:	68ba      	ldr	r2, [r7, #8]
 c00171e:	687b      	ldr	r3, [r7, #4]
 c001720:	4013      	ands	r3, r2
 c001722:	603b      	str	r3, [r7, #0]
  if(flag != 0U)
 c001724:	683b      	ldr	r3, [r7, #0]
 c001726:	2b00      	cmp	r3, #0
 c001728:	d01c      	beq.n	c001764 <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c00172a:	4a25      	ldr	r2, [pc, #148]	; (c0017c0 <HAL_GTZC_IRQHandler+0x104>)
 c00172c:	683b      	ldr	r3, [r7, #0]
 c00172e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c001730:	2300      	movs	r3, #0
 c001732:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001734:	e010      	b.n	c001758 <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c001736:	683a      	ldr	r2, [r7, #0]
 c001738:	68fb      	ldr	r3, [r7, #12]
 c00173a:	fa22 f303 	lsr.w	r3, r2, r3
 c00173e:	f003 0301 	and.w	r3, r3, #1
 c001742:	2b00      	cmp	r3, #0
 c001744:	d005      	beq.n	c001752 <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c001746:	68fb      	ldr	r3, [r7, #12]
 c001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00174c:	4618      	mov	r0, r3
 c00174e:	f000 f839 	bl	c0017c4 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c001752:	68fb      	ldr	r3, [r7, #12]
 c001754:	3301      	adds	r3, #1
 c001756:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001758:	683a      	ldr	r2, [r7, #0]
 c00175a:	68fb      	ldr	r3, [r7, #12]
 c00175c:	fa22 f303 	lsr.w	r3, r2, r3
 c001760:	2b00      	cmp	r3, #0
 c001762:	d1e8      	bne.n	c001736 <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c001764:	4b16      	ldr	r3, [pc, #88]	; (c0017c0 <HAL_GTZC_IRQHandler+0x104>)
 c001766:	689b      	ldr	r3, [r3, #8]
 c001768:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c00176a:	4b15      	ldr	r3, [pc, #84]	; (c0017c0 <HAL_GTZC_IRQHandler+0x104>)
 c00176c:	699b      	ldr	r3, [r3, #24]
 c00176e:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c001770:	68ba      	ldr	r2, [r7, #8]
 c001772:	687b      	ldr	r3, [r7, #4]
 c001774:	4013      	ands	r3, r2
 c001776:	603b      	str	r3, [r7, #0]
  if(flag != 0U)
 c001778:	683b      	ldr	r3, [r7, #0]
 c00177a:	2b00      	cmp	r3, #0
 c00177c:	d01c      	beq.n	c0017b8 <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c00177e:	4a10      	ldr	r2, [pc, #64]	; (c0017c0 <HAL_GTZC_IRQHandler+0x104>)
 c001780:	683b      	ldr	r3, [r7, #0]
 c001782:	6293      	str	r3, [r2, #40]	; 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c001784:	2300      	movs	r3, #0
 c001786:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001788:	e010      	b.n	c0017ac <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c00178a:	683a      	ldr	r2, [r7, #0]
 c00178c:	68fb      	ldr	r3, [r7, #12]
 c00178e:	fa22 f303 	lsr.w	r3, r2, r3
 c001792:	f003 0301 	and.w	r3, r3, #1
 c001796:	2b00      	cmp	r3, #0
 c001798:	d005      	beq.n	c0017a6 <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c00179a:	68fb      	ldr	r3, [r7, #12]
 c00179c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 c0017a0:	4618      	mov	r0, r3
 c0017a2:	f000 f80f 	bl	c0017c4 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0017a6:	68fb      	ldr	r3, [r7, #12]
 c0017a8:	3301      	adds	r3, #1
 c0017aa:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0017ac:	683a      	ldr	r2, [r7, #0]
 c0017ae:	68fb      	ldr	r3, [r7, #12]
 c0017b0:	fa22 f303 	lsr.w	r3, r2, r3
 c0017b4:	2b00      	cmp	r3, #0
 c0017b6:	d1e8      	bne.n	c00178a <HAL_GTZC_IRQHandler+0xce>
    }
  }
}
 c0017b8:	bf00      	nop
 c0017ba:	3710      	adds	r7, #16
 c0017bc:	46bd      	mov	sp, r7
 c0017be:	bd80      	pop	{r7, pc}
 c0017c0:	50032800 	.word	0x50032800

0c0017c4 <HAL_GTZC_TZIC_Callback>:
  * @param  PeriphId Peripheral identifier triggering the illegal access.
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId
  * @retval None.
  */
__weak void HAL_GTZC_TZIC_Callback(uint32_t PeriphId)
{
 c0017c4:	b480      	push	{r7}
 c0017c6:	b083      	sub	sp, #12
 c0017c8:	af00      	add	r7, sp, #0
 c0017ca:	6078      	str	r0, [r7, #4]
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c0017cc:	bf00      	nop
 c0017ce:	370c      	adds	r7, #12
 c0017d0:	46bd      	mov	sp, r7
 c0017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0017d6:	4770      	bx	lr

0c0017d8 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c0017d8:	b480      	push	{r7}
 c0017da:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c0017dc:	4b05      	ldr	r3, [pc, #20]	; (c0017f4 <HAL_ICACHE_Enable+0x1c>)
 c0017de:	681b      	ldr	r3, [r3, #0]
 c0017e0:	4a04      	ldr	r2, [pc, #16]	; (c0017f4 <HAL_ICACHE_Enable+0x1c>)
 c0017e2:	f043 0301 	orr.w	r3, r3, #1
 c0017e6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c0017e8:	2300      	movs	r3, #0
}
 c0017ea:	4618      	mov	r0, r3
 c0017ec:	46bd      	mov	sp, r7
 c0017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0017f2:	4770      	bx	lr
 c0017f4:	50030400 	.word	0x50030400

0c0017f8 <HAL_ICACHE_IRQHandler>:
  * @note This function respectively disables the interrupt and clears the
  *       flag of any pending flag before calling the associated user callback.
  * @retval None
  */
void HAL_ICACHE_IRQHandler(void)
{
 c0017f8:	b580      	push	{r7, lr}
 c0017fa:	b082      	sub	sp, #8
 c0017fc:	af00      	add	r7, sp, #0
  /* Get current interrupt flags and interrupt sources value */
  uint32_t itflags   = READ_REG(ICACHE->SR);
 c0017fe:	4b17      	ldr	r3, [pc, #92]	; (c00185c <HAL_ICACHE_IRQHandler+0x64>)
 c001800:	685b      	ldr	r3, [r3, #4]
 c001802:	607b      	str	r3, [r7, #4]
  uint32_t itsources = READ_REG(ICACHE->IER);
 c001804:	4b15      	ldr	r3, [pc, #84]	; (c00185c <HAL_ICACHE_IRQHandler+0x64>)
 c001806:	689b      	ldr	r3, [r3, #8]
 c001808:	603b      	str	r3, [r7, #0]

  /* Check Instruction cache Error interrupt flag  */
  if (((itflags & itsources) & ICACHE_FLAG_ERROR) != 0U)
 c00180a:	687a      	ldr	r2, [r7, #4]
 c00180c:	683b      	ldr	r3, [r7, #0]
 c00180e:	4013      	ands	r3, r2
 c001810:	f003 0304 	and.w	r3, r3, #4
 c001814:	2b00      	cmp	r3, #0
 c001816:	d00a      	beq.n	c00182e <HAL_ICACHE_IRQHandler+0x36>
  {
    /* Disable error interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_ERRIE);
 c001818:	4b10      	ldr	r3, [pc, #64]	; (c00185c <HAL_ICACHE_IRQHandler+0x64>)
 c00181a:	689b      	ldr	r3, [r3, #8]
 c00181c:	4a0f      	ldr	r2, [pc, #60]	; (c00185c <HAL_ICACHE_IRQHandler+0x64>)
 c00181e:	f023 0304 	bic.w	r3, r3, #4
 c001822:	6093      	str	r3, [r2, #8]

    /* Clear ICACHE error pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CERRF);
 c001824:	4b0d      	ldr	r3, [pc, #52]	; (c00185c <HAL_ICACHE_IRQHandler+0x64>)
 c001826:	2204      	movs	r2, #4
 c001828:	60da      	str	r2, [r3, #12]

    /* Instruction cache error interrupt user callback */
    HAL_ICACHE_ErrorCallback();
 c00182a:	f000 f820 	bl	c00186e <HAL_ICACHE_ErrorCallback>
  }

  /* Check Instruction cache BusyEnd interrupt flag  */
  if (((itflags & itsources) & ICACHE_FLAG_BUSYEND) != 0U)
 c00182e:	687a      	ldr	r2, [r7, #4]
 c001830:	683b      	ldr	r3, [r7, #0]
 c001832:	4013      	ands	r3, r2
 c001834:	f003 0302 	and.w	r3, r3, #2
 c001838:	2b00      	cmp	r3, #0
 c00183a:	d00a      	beq.n	c001852 <HAL_ICACHE_IRQHandler+0x5a>
  {
    /* Disable end of cache invalidation interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_BSYENDIE);
 c00183c:	4b07      	ldr	r3, [pc, #28]	; (c00185c <HAL_ICACHE_IRQHandler+0x64>)
 c00183e:	689b      	ldr	r3, [r3, #8]
 c001840:	4a06      	ldr	r2, [pc, #24]	; (c00185c <HAL_ICACHE_IRQHandler+0x64>)
 c001842:	f023 0302 	bic.w	r3, r3, #2
 c001846:	6093      	str	r3, [r2, #8]

    /* Clear ICACHE busyend pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 c001848:	4b04      	ldr	r3, [pc, #16]	; (c00185c <HAL_ICACHE_IRQHandler+0x64>)
 c00184a:	2202      	movs	r2, #2
 c00184c:	60da      	str	r2, [r3, #12]

    /* Instruction cache busyend interrupt user callback */
    HAL_ICACHE_InvalidateCompleteCallback();
 c00184e:	f000 f807 	bl	c001860 <HAL_ICACHE_InvalidateCompleteCallback>
  }
}
 c001852:	bf00      	nop
 c001854:	3708      	adds	r7, #8
 c001856:	46bd      	mov	sp, r7
 c001858:	bd80      	pop	{r7, pc}
 c00185a:	bf00      	nop
 c00185c:	50030400 	.word	0x50030400

0c001860 <HAL_ICACHE_InvalidateCompleteCallback>:

/**
  * @brief  Cache invalidation complete callback.
  */
__weak void HAL_ICACHE_InvalidateCompleteCallback(void)
{
 c001860:	b480      	push	{r7}
 c001862:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 c001864:	bf00      	nop
 c001866:	46bd      	mov	sp, r7
 c001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00186c:	4770      	bx	lr

0c00186e <HAL_ICACHE_ErrorCallback>:

/**
  * @brief  Error callback.
  */
__weak void HAL_ICACHE_ErrorCallback(void)
{
 c00186e:	b480      	push	{r7}
 c001870:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_ErrorCallback() should be implemented in the user file
   */
}
 c001872:	bf00      	nop
 c001874:	46bd      	mov	sp, r7
 c001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00187a:	4770      	bx	lr

0c00187c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c00187c:	b480      	push	{r7}
 c00187e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c001880:	4b04      	ldr	r3, [pc, #16]	; (c001894 <HAL_PWREx_GetVoltageRange+0x18>)
 c001882:	681b      	ldr	r3, [r3, #0]
 c001884:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c001888:	4618      	mov	r0, r3
 c00188a:	46bd      	mov	sp, r7
 c00188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001890:	4770      	bx	lr
 c001892:	bf00      	nop
 c001894:	50007000 	.word	0x50007000

0c001898 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c001898:	b580      	push	{r7, lr}
 c00189a:	b084      	sub	sp, #16
 c00189c:	af00      	add	r7, sp, #0
 c00189e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c0018a0:	4b27      	ldr	r3, [pc, #156]	; (c001940 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0018a2:	681b      	ldr	r3, [r3, #0]
 c0018a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c0018a8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c0018aa:	f000 f861 	bl	c001970 <HAL_PWREx_SMPS_GetEffectiveMode>
 c0018ae:	4603      	mov	r3, r0
 c0018b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0018b4:	d101      	bne.n	c0018ba <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c0018b6:	2301      	movs	r3, #1
 c0018b8:	e03e      	b.n	c001938 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c0018ba:	4b21      	ldr	r3, [pc, #132]	; (c001940 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0018bc:	68db      	ldr	r3, [r3, #12]
 c0018be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c0018c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0018c6:	d101      	bne.n	c0018cc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c0018c8:	2301      	movs	r3, #1
 c0018ca:	e035      	b.n	c001938 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c0018cc:	68ba      	ldr	r2, [r7, #8]
 c0018ce:	687b      	ldr	r3, [r7, #4]
 c0018d0:	429a      	cmp	r2, r3
 c0018d2:	d101      	bne.n	c0018d8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c0018d4:	2300      	movs	r3, #0
 c0018d6:	e02f      	b.n	c001938 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c0018d8:	4b19      	ldr	r3, [pc, #100]	; (c001940 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0018da:	681b      	ldr	r3, [r3, #0]
 c0018dc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c0018e0:	4917      	ldr	r1, [pc, #92]	; (c001940 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0018e2:	687b      	ldr	r3, [r7, #4]
 c0018e4:	4313      	orrs	r3, r2
 c0018e6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c0018e8:	4b16      	ldr	r3, [pc, #88]	; (c001944 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c0018ea:	681b      	ldr	r3, [r3, #0]
 c0018ec:	095b      	lsrs	r3, r3, #5
 c0018ee:	4a16      	ldr	r2, [pc, #88]	; (c001948 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c0018f0:	fba2 2303 	umull	r2, r3, r2, r3
 c0018f4:	09db      	lsrs	r3, r3, #7
 c0018f6:	2232      	movs	r2, #50	; 0x32
 c0018f8:	fb02 f303 	mul.w	r3, r2, r3
 c0018fc:	4a13      	ldr	r2, [pc, #76]	; (c00194c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c0018fe:	fba2 2303 	umull	r2, r3, r2, r3
 c001902:	08db      	lsrs	r3, r3, #3
 c001904:	3301      	adds	r3, #1
 c001906:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c001908:	e002      	b.n	c001910 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c00190a:	68fb      	ldr	r3, [r7, #12]
 c00190c:	3b01      	subs	r3, #1
 c00190e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c001910:	4b0b      	ldr	r3, [pc, #44]	; (c001940 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001912:	695b      	ldr	r3, [r3, #20]
 c001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00191c:	d102      	bne.n	c001924 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c00191e:	68fb      	ldr	r3, [r7, #12]
 c001920:	2b00      	cmp	r3, #0
 c001922:	d1f2      	bne.n	c00190a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c001924:	4b06      	ldr	r3, [pc, #24]	; (c001940 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001926:	695b      	ldr	r3, [r3, #20]
 c001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00192c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c001930:	d101      	bne.n	c001936 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c001932:	2303      	movs	r3, #3
 c001934:	e000      	b.n	c001938 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c001936:	2300      	movs	r3, #0
}
 c001938:	4618      	mov	r0, r3
 c00193a:	3710      	adds	r7, #16
 c00193c:	46bd      	mov	sp, r7
 c00193e:	bd80      	pop	{r7, pc}
 c001940:	50007000 	.word	0x50007000
 c001944:	30000000 	.word	0x30000000
 c001948:	0a7c5ac5 	.word	0x0a7c5ac5
 c00194c:	cccccccd 	.word	0xcccccccd

0c001950 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c001950:	b480      	push	{r7}
 c001952:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c001954:	4b05      	ldr	r3, [pc, #20]	; (c00196c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c001956:	689b      	ldr	r3, [r3, #8]
 c001958:	4a04      	ldr	r2, [pc, #16]	; (c00196c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c00195a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c00195e:	6093      	str	r3, [r2, #8]
}
 c001960:	bf00      	nop
 c001962:	46bd      	mov	sp, r7
 c001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001968:	4770      	bx	lr
 c00196a:	bf00      	nop
 c00196c:	50007000 	.word	0x50007000

0c001970 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c001970:	b480      	push	{r7}
 c001972:	b083      	sub	sp, #12
 c001974:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c001976:	4b0f      	ldr	r3, [pc, #60]	; (c0019b4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c001978:	691b      	ldr	r3, [r3, #16]
 c00197a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c00197c:	683b      	ldr	r3, [r7, #0]
 c00197e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c001982:	2b00      	cmp	r3, #0
 c001984:	d003      	beq.n	c00198e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c001986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c00198a:	607b      	str	r3, [r7, #4]
 c00198c:	e00a      	b.n	c0019a4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c00198e:	683b      	ldr	r3, [r7, #0]
 c001990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c001994:	2b00      	cmp	r3, #0
 c001996:	d103      	bne.n	c0019a0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c001998:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c00199c:	607b      	str	r3, [r7, #4]
 c00199e:	e001      	b.n	c0019a4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c0019a0:	2300      	movs	r3, #0
 c0019a2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c0019a4:	687b      	ldr	r3, [r7, #4]
}
 c0019a6:	4618      	mov	r0, r3
 c0019a8:	370c      	adds	r7, #12
 c0019aa:	46bd      	mov	sp, r7
 c0019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0019b0:	4770      	bx	lr
 c0019b2:	bf00      	nop
 c0019b4:	50007000 	.word	0x50007000

0c0019b8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c0019b8:	b580      	push	{r7, lr}
 c0019ba:	b088      	sub	sp, #32
 c0019bc:	af00      	add	r7, sp, #0
 c0019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c0019c0:	687b      	ldr	r3, [r7, #4]
 c0019c2:	2b00      	cmp	r3, #0
 c0019c4:	d102      	bne.n	c0019cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c0019c6:	2301      	movs	r3, #1
 c0019c8:	f000 bc52 	b.w	c002270 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0019cc:	4ba3      	ldr	r3, [pc, #652]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c0019ce:	689b      	ldr	r3, [r3, #8]
 c0019d0:	f003 030c 	and.w	r3, r3, #12
 c0019d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0019d6:	4ba1      	ldr	r3, [pc, #644]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c0019d8:	68db      	ldr	r3, [r3, #12]
 c0019da:	f003 0303 	and.w	r3, r3, #3
 c0019de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c0019e0:	687b      	ldr	r3, [r7, #4]
 c0019e2:	681b      	ldr	r3, [r3, #0]
 c0019e4:	f003 0310 	and.w	r3, r3, #16
 c0019e8:	2b00      	cmp	r3, #0
 c0019ea:	f000 80da 	beq.w	c001ba2 <HAL_RCC_OscConfig+0x1ea>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0019ee:	69bb      	ldr	r3, [r7, #24]
 c0019f0:	2b00      	cmp	r3, #0
 c0019f2:	d006      	beq.n	c001a02 <HAL_RCC_OscConfig+0x4a>
 c0019f4:	69bb      	ldr	r3, [r7, #24]
 c0019f6:	2b0c      	cmp	r3, #12
 c0019f8:	f040 8081 	bne.w	c001afe <HAL_RCC_OscConfig+0x146>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c0019fc:	697b      	ldr	r3, [r7, #20]
 c0019fe:	2b01      	cmp	r3, #1
 c001a00:	d17d      	bne.n	c001afe <HAL_RCC_OscConfig+0x146>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c001a02:	4b96      	ldr	r3, [pc, #600]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001a04:	681b      	ldr	r3, [r3, #0]
 c001a06:	f003 0302 	and.w	r3, r3, #2
 c001a0a:	2b00      	cmp	r3, #0
 c001a0c:	d006      	beq.n	c001a1c <HAL_RCC_OscConfig+0x64>
 c001a0e:	687b      	ldr	r3, [r7, #4]
 c001a10:	69db      	ldr	r3, [r3, #28]
 c001a12:	2b00      	cmp	r3, #0
 c001a14:	d102      	bne.n	c001a1c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c001a16:	2301      	movs	r3, #1
 c001a18:	f000 bc2a 	b.w	c002270 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c001a1c:	687b      	ldr	r3, [r7, #4]
 c001a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c001a20:	4b8e      	ldr	r3, [pc, #568]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001a22:	681b      	ldr	r3, [r3, #0]
 c001a24:	f003 0308 	and.w	r3, r3, #8
 c001a28:	2b00      	cmp	r3, #0
 c001a2a:	d004      	beq.n	c001a36 <HAL_RCC_OscConfig+0x7e>
 c001a2c:	4b8b      	ldr	r3, [pc, #556]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001a2e:	681b      	ldr	r3, [r3, #0]
 c001a30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c001a34:	e005      	b.n	c001a42 <HAL_RCC_OscConfig+0x8a>
 c001a36:	4b89      	ldr	r3, [pc, #548]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001a3c:	091b      	lsrs	r3, r3, #4
 c001a3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c001a42:	4293      	cmp	r3, r2
 c001a44:	d224      	bcs.n	c001a90 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c001a46:	687b      	ldr	r3, [r7, #4]
 c001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001a4a:	4618      	mov	r0, r3
 c001a4c:	f000 fde8 	bl	c002620 <RCC_SetFlashLatencyFromMSIRange>
 c001a50:	4603      	mov	r3, r0
 c001a52:	2b00      	cmp	r3, #0
 c001a54:	d002      	beq.n	c001a5c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c001a56:	2301      	movs	r3, #1
 c001a58:	f000 bc0a 	b.w	c002270 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001a5c:	4b7f      	ldr	r3, [pc, #508]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001a5e:	681b      	ldr	r3, [r3, #0]
 c001a60:	4a7e      	ldr	r2, [pc, #504]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001a62:	f043 0308 	orr.w	r3, r3, #8
 c001a66:	6013      	str	r3, [r2, #0]
 c001a68:	4b7c      	ldr	r3, [pc, #496]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001a6a:	681b      	ldr	r3, [r3, #0]
 c001a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001a70:	687b      	ldr	r3, [r7, #4]
 c001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001a74:	4979      	ldr	r1, [pc, #484]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001a76:	4313      	orrs	r3, r2
 c001a78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c001a7a:	4b78      	ldr	r3, [pc, #480]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001a7c:	685b      	ldr	r3, [r3, #4]
 c001a7e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c001a82:	687b      	ldr	r3, [r7, #4]
 c001a84:	6a1b      	ldr	r3, [r3, #32]
 c001a86:	021b      	lsls	r3, r3, #8
 c001a88:	4974      	ldr	r1, [pc, #464]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001a8a:	4313      	orrs	r3, r2
 c001a8c:	604b      	str	r3, [r1, #4]
 c001a8e:	e025      	b.n	c001adc <HAL_RCC_OscConfig+0x124>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001a90:	4b72      	ldr	r3, [pc, #456]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001a92:	681b      	ldr	r3, [r3, #0]
 c001a94:	4a71      	ldr	r2, [pc, #452]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001a96:	f043 0308 	orr.w	r3, r3, #8
 c001a9a:	6013      	str	r3, [r2, #0]
 c001a9c:	4b6f      	ldr	r3, [pc, #444]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001a9e:	681b      	ldr	r3, [r3, #0]
 c001aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001aa4:	687b      	ldr	r3, [r7, #4]
 c001aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001aa8:	496c      	ldr	r1, [pc, #432]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001aaa:	4313      	orrs	r3, r2
 c001aac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c001aae:	4b6b      	ldr	r3, [pc, #428]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001ab0:	685b      	ldr	r3, [r3, #4]
 c001ab2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c001ab6:	687b      	ldr	r3, [r7, #4]
 c001ab8:	6a1b      	ldr	r3, [r3, #32]
 c001aba:	021b      	lsls	r3, r3, #8
 c001abc:	4967      	ldr	r1, [pc, #412]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001abe:	4313      	orrs	r3, r2
 c001ac0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c001ac2:	69bb      	ldr	r3, [r7, #24]
 c001ac4:	2b00      	cmp	r3, #0
 c001ac6:	d109      	bne.n	c001adc <HAL_RCC_OscConfig+0x124>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c001ac8:	687b      	ldr	r3, [r7, #4]
 c001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001acc:	4618      	mov	r0, r3
 c001ace:	f000 fda7 	bl	c002620 <RCC_SetFlashLatencyFromMSIRange>
 c001ad2:	4603      	mov	r3, r0
 c001ad4:	2b00      	cmp	r3, #0
 c001ad6:	d001      	beq.n	c001adc <HAL_RCC_OscConfig+0x124>
            {
              return HAL_ERROR;
 c001ad8:	2301      	movs	r3, #1
 c001ada:	e3c9      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c001adc:	f000 fd8c 	bl	c0025f8 <HAL_RCC_GetHCLKFreq>
 c001ae0:	4603      	mov	r3, r0
 c001ae2:	4a5f      	ldr	r2, [pc, #380]	; (c001c60 <HAL_RCC_OscConfig+0x2a8>)
 c001ae4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c001ae6:	4b5f      	ldr	r3, [pc, #380]	; (c001c64 <HAL_RCC_OscConfig+0x2ac>)
 c001ae8:	681b      	ldr	r3, [r3, #0]
 c001aea:	4618      	mov	r0, r3
 c001aec:	f7ff f9e8 	bl	c000ec0 <HAL_InitTick>
 c001af0:	4603      	mov	r3, r0
 c001af2:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c001af4:	7bfb      	ldrb	r3, [r7, #15]
 c001af6:	2b00      	cmp	r3, #0
 c001af8:	d052      	beq.n	c001ba0 <HAL_RCC_OscConfig+0x1e8>
        {
          return status;
 c001afa:	7bfb      	ldrb	r3, [r7, #15]
 c001afc:	e3b8      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c001afe:	687b      	ldr	r3, [r7, #4]
 c001b00:	69db      	ldr	r3, [r3, #28]
 c001b02:	2b00      	cmp	r3, #0
 c001b04:	d032      	beq.n	c001b6c <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c001b06:	4b55      	ldr	r3, [pc, #340]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001b08:	681b      	ldr	r3, [r3, #0]
 c001b0a:	4a54      	ldr	r2, [pc, #336]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001b0c:	f043 0301 	orr.w	r3, r3, #1
 c001b10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c001b12:	f7ff fa25 	bl	c000f60 <HAL_GetTick>
 c001b16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001b18:	e008      	b.n	c001b2c <HAL_RCC_OscConfig+0x174>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c001b1a:	f7ff fa21 	bl	c000f60 <HAL_GetTick>
 c001b1e:	4602      	mov	r2, r0
 c001b20:	693b      	ldr	r3, [r7, #16]
 c001b22:	1ad3      	subs	r3, r2, r3
 c001b24:	2b02      	cmp	r3, #2
 c001b26:	d901      	bls.n	c001b2c <HAL_RCC_OscConfig+0x174>
          {
            return HAL_TIMEOUT;
 c001b28:	2303      	movs	r3, #3
 c001b2a:	e3a1      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001b2c:	4b4b      	ldr	r3, [pc, #300]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001b2e:	681b      	ldr	r3, [r3, #0]
 c001b30:	f003 0302 	and.w	r3, r3, #2
 c001b34:	2b00      	cmp	r3, #0
 c001b36:	d0f0      	beq.n	c001b1a <HAL_RCC_OscConfig+0x162>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001b38:	4b48      	ldr	r3, [pc, #288]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001b3a:	681b      	ldr	r3, [r3, #0]
 c001b3c:	4a47      	ldr	r2, [pc, #284]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001b3e:	f043 0308 	orr.w	r3, r3, #8
 c001b42:	6013      	str	r3, [r2, #0]
 c001b44:	4b45      	ldr	r3, [pc, #276]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001b46:	681b      	ldr	r3, [r3, #0]
 c001b48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001b4c:	687b      	ldr	r3, [r7, #4]
 c001b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001b50:	4942      	ldr	r1, [pc, #264]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001b52:	4313      	orrs	r3, r2
 c001b54:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c001b56:	4b41      	ldr	r3, [pc, #260]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001b58:	685b      	ldr	r3, [r3, #4]
 c001b5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c001b5e:	687b      	ldr	r3, [r7, #4]
 c001b60:	6a1b      	ldr	r3, [r3, #32]
 c001b62:	021b      	lsls	r3, r3, #8
 c001b64:	493d      	ldr	r1, [pc, #244]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001b66:	4313      	orrs	r3, r2
 c001b68:	604b      	str	r3, [r1, #4]
 c001b6a:	e01a      	b.n	c001ba2 <HAL_RCC_OscConfig+0x1ea>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c001b6c:	4b3b      	ldr	r3, [pc, #236]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001b6e:	681b      	ldr	r3, [r3, #0]
 c001b70:	4a3a      	ldr	r2, [pc, #232]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001b72:	f023 0301 	bic.w	r3, r3, #1
 c001b76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c001b78:	f7ff f9f2 	bl	c000f60 <HAL_GetTick>
 c001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c001b7e:	e008      	b.n	c001b92 <HAL_RCC_OscConfig+0x1da>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c001b80:	f7ff f9ee 	bl	c000f60 <HAL_GetTick>
 c001b84:	4602      	mov	r2, r0
 c001b86:	693b      	ldr	r3, [r7, #16]
 c001b88:	1ad3      	subs	r3, r2, r3
 c001b8a:	2b02      	cmp	r3, #2
 c001b8c:	d901      	bls.n	c001b92 <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 c001b8e:	2303      	movs	r3, #3
 c001b90:	e36e      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c001b92:	4b32      	ldr	r3, [pc, #200]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001b94:	681b      	ldr	r3, [r3, #0]
 c001b96:	f003 0302 	and.w	r3, r3, #2
 c001b9a:	2b00      	cmp	r3, #0
 c001b9c:	d1f0      	bne.n	c001b80 <HAL_RCC_OscConfig+0x1c8>
 c001b9e:	e000      	b.n	c001ba2 <HAL_RCC_OscConfig+0x1ea>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c001ba0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c001ba2:	687b      	ldr	r3, [r7, #4]
 c001ba4:	681b      	ldr	r3, [r3, #0]
 c001ba6:	f003 0301 	and.w	r3, r3, #1
 c001baa:	2b00      	cmp	r3, #0
 c001bac:	d071      	beq.n	c001c92 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c001bae:	69bb      	ldr	r3, [r7, #24]
 c001bb0:	2b08      	cmp	r3, #8
 c001bb2:	d005      	beq.n	c001bc0 <HAL_RCC_OscConfig+0x208>
 c001bb4:	69bb      	ldr	r3, [r7, #24]
 c001bb6:	2b0c      	cmp	r3, #12
 c001bb8:	d10e      	bne.n	c001bd8 <HAL_RCC_OscConfig+0x220>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c001bba:	697b      	ldr	r3, [r7, #20]
 c001bbc:	2b03      	cmp	r3, #3
 c001bbe:	d10b      	bne.n	c001bd8 <HAL_RCC_OscConfig+0x220>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c001bc0:	4b26      	ldr	r3, [pc, #152]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001bc2:	681b      	ldr	r3, [r3, #0]
 c001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001bc8:	2b00      	cmp	r3, #0
 c001bca:	d061      	beq.n	c001c90 <HAL_RCC_OscConfig+0x2d8>
 c001bcc:	687b      	ldr	r3, [r7, #4]
 c001bce:	685b      	ldr	r3, [r3, #4]
 c001bd0:	2b00      	cmp	r3, #0
 c001bd2:	d15d      	bne.n	c001c90 <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 c001bd4:	2301      	movs	r3, #1
 c001bd6:	e34b      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c001bd8:	687b      	ldr	r3, [r7, #4]
 c001bda:	685b      	ldr	r3, [r3, #4]
 c001bdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c001be0:	d106      	bne.n	c001bf0 <HAL_RCC_OscConfig+0x238>
 c001be2:	4b1e      	ldr	r3, [pc, #120]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001be4:	681b      	ldr	r3, [r3, #0]
 c001be6:	4a1d      	ldr	r2, [pc, #116]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c001bec:	6013      	str	r3, [r2, #0]
 c001bee:	e01d      	b.n	c001c2c <HAL_RCC_OscConfig+0x274>
 c001bf0:	687b      	ldr	r3, [r7, #4]
 c001bf2:	685b      	ldr	r3, [r3, #4]
 c001bf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c001bf8:	d10c      	bne.n	c001c14 <HAL_RCC_OscConfig+0x25c>
 c001bfa:	4b18      	ldr	r3, [pc, #96]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001bfc:	681b      	ldr	r3, [r3, #0]
 c001bfe:	4a17      	ldr	r2, [pc, #92]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001c00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c001c04:	6013      	str	r3, [r2, #0]
 c001c06:	4b15      	ldr	r3, [pc, #84]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001c08:	681b      	ldr	r3, [r3, #0]
 c001c0a:	4a14      	ldr	r2, [pc, #80]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c001c10:	6013      	str	r3, [r2, #0]
 c001c12:	e00b      	b.n	c001c2c <HAL_RCC_OscConfig+0x274>
 c001c14:	4b11      	ldr	r3, [pc, #68]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001c16:	681b      	ldr	r3, [r3, #0]
 c001c18:	4a10      	ldr	r2, [pc, #64]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001c1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c001c1e:	6013      	str	r3, [r2, #0]
 c001c20:	4b0e      	ldr	r3, [pc, #56]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001c22:	681b      	ldr	r3, [r3, #0]
 c001c24:	4a0d      	ldr	r2, [pc, #52]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001c26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c001c2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c001c2c:	687b      	ldr	r3, [r7, #4]
 c001c2e:	685b      	ldr	r3, [r3, #4]
 c001c30:	2b00      	cmp	r3, #0
 c001c32:	d019      	beq.n	c001c68 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001c34:	f7ff f994 	bl	c000f60 <HAL_GetTick>
 c001c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c001c3a:	e008      	b.n	c001c4e <HAL_RCC_OscConfig+0x296>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c001c3c:	f7ff f990 	bl	c000f60 <HAL_GetTick>
 c001c40:	4602      	mov	r2, r0
 c001c42:	693b      	ldr	r3, [r7, #16]
 c001c44:	1ad3      	subs	r3, r2, r3
 c001c46:	2b64      	cmp	r3, #100	; 0x64
 c001c48:	d901      	bls.n	c001c4e <HAL_RCC_OscConfig+0x296>
          {
            return HAL_TIMEOUT;
 c001c4a:	2303      	movs	r3, #3
 c001c4c:	e310      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c001c4e:	4b03      	ldr	r3, [pc, #12]	; (c001c5c <HAL_RCC_OscConfig+0x2a4>)
 c001c50:	681b      	ldr	r3, [r3, #0]
 c001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001c56:	2b00      	cmp	r3, #0
 c001c58:	d0f0      	beq.n	c001c3c <HAL_RCC_OscConfig+0x284>
 c001c5a:	e01a      	b.n	c001c92 <HAL_RCC_OscConfig+0x2da>
 c001c5c:	50021000 	.word	0x50021000
 c001c60:	30000000 	.word	0x30000000
 c001c64:	30000004 	.word	0x30000004
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001c68:	f7ff f97a 	bl	c000f60 <HAL_GetTick>
 c001c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c001c6e:	e008      	b.n	c001c82 <HAL_RCC_OscConfig+0x2ca>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c001c70:	f7ff f976 	bl	c000f60 <HAL_GetTick>
 c001c74:	4602      	mov	r2, r0
 c001c76:	693b      	ldr	r3, [r7, #16]
 c001c78:	1ad3      	subs	r3, r2, r3
 c001c7a:	2b64      	cmp	r3, #100	; 0x64
 c001c7c:	d901      	bls.n	c001c82 <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 c001c7e:	2303      	movs	r3, #3
 c001c80:	e2f6      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c001c82:	4ba6      	ldr	r3, [pc, #664]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001c84:	681b      	ldr	r3, [r3, #0]
 c001c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001c8a:	2b00      	cmp	r3, #0
 c001c8c:	d1f0      	bne.n	c001c70 <HAL_RCC_OscConfig+0x2b8>
 c001c8e:	e000      	b.n	c001c92 <HAL_RCC_OscConfig+0x2da>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c001c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c001c92:	687b      	ldr	r3, [r7, #4]
 c001c94:	681b      	ldr	r3, [r3, #0]
 c001c96:	f003 0302 	and.w	r3, r3, #2
 c001c9a:	2b00      	cmp	r3, #0
 c001c9c:	d060      	beq.n	c001d60 <HAL_RCC_OscConfig+0x3a8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c001c9e:	69bb      	ldr	r3, [r7, #24]
 c001ca0:	2b04      	cmp	r3, #4
 c001ca2:	d005      	beq.n	c001cb0 <HAL_RCC_OscConfig+0x2f8>
 c001ca4:	69bb      	ldr	r3, [r7, #24]
 c001ca6:	2b0c      	cmp	r3, #12
 c001ca8:	d119      	bne.n	c001cde <HAL_RCC_OscConfig+0x326>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c001caa:	697b      	ldr	r3, [r7, #20]
 c001cac:	2b02      	cmp	r3, #2
 c001cae:	d116      	bne.n	c001cde <HAL_RCC_OscConfig+0x326>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c001cb0:	4b9a      	ldr	r3, [pc, #616]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001cb2:	681b      	ldr	r3, [r3, #0]
 c001cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001cb8:	2b00      	cmp	r3, #0
 c001cba:	d005      	beq.n	c001cc8 <HAL_RCC_OscConfig+0x310>
 c001cbc:	687b      	ldr	r3, [r7, #4]
 c001cbe:	68db      	ldr	r3, [r3, #12]
 c001cc0:	2b00      	cmp	r3, #0
 c001cc2:	d101      	bne.n	c001cc8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c001cc4:	2301      	movs	r3, #1
 c001cc6:	e2d3      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c001cc8:	4b94      	ldr	r3, [pc, #592]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001cca:	685b      	ldr	r3, [r3, #4]
 c001ccc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c001cd0:	687b      	ldr	r3, [r7, #4]
 c001cd2:	691b      	ldr	r3, [r3, #16]
 c001cd4:	061b      	lsls	r3, r3, #24
 c001cd6:	4991      	ldr	r1, [pc, #580]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001cd8:	4313      	orrs	r3, r2
 c001cda:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c001cdc:	e040      	b.n	c001d60 <HAL_RCC_OscConfig+0x3a8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c001cde:	687b      	ldr	r3, [r7, #4]
 c001ce0:	68db      	ldr	r3, [r3, #12]
 c001ce2:	2b00      	cmp	r3, #0
 c001ce4:	d023      	beq.n	c001d2e <HAL_RCC_OscConfig+0x376>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c001ce6:	4b8d      	ldr	r3, [pc, #564]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001ce8:	681b      	ldr	r3, [r3, #0]
 c001cea:	4a8c      	ldr	r2, [pc, #560]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c001cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001cf2:	f7ff f935 	bl	c000f60 <HAL_GetTick>
 c001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001cf8:	e008      	b.n	c001d0c <HAL_RCC_OscConfig+0x354>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c001cfa:	f7ff f931 	bl	c000f60 <HAL_GetTick>
 c001cfe:	4602      	mov	r2, r0
 c001d00:	693b      	ldr	r3, [r7, #16]
 c001d02:	1ad3      	subs	r3, r2, r3
 c001d04:	2b02      	cmp	r3, #2
 c001d06:	d901      	bls.n	c001d0c <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 c001d08:	2303      	movs	r3, #3
 c001d0a:	e2b1      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001d0c:	4b83      	ldr	r3, [pc, #524]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001d0e:	681b      	ldr	r3, [r3, #0]
 c001d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001d14:	2b00      	cmp	r3, #0
 c001d16:	d0f0      	beq.n	c001cfa <HAL_RCC_OscConfig+0x342>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c001d18:	4b80      	ldr	r3, [pc, #512]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001d1a:	685b      	ldr	r3, [r3, #4]
 c001d1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c001d20:	687b      	ldr	r3, [r7, #4]
 c001d22:	691b      	ldr	r3, [r3, #16]
 c001d24:	061b      	lsls	r3, r3, #24
 c001d26:	497d      	ldr	r1, [pc, #500]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001d28:	4313      	orrs	r3, r2
 c001d2a:	604b      	str	r3, [r1, #4]
 c001d2c:	e018      	b.n	c001d60 <HAL_RCC_OscConfig+0x3a8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c001d2e:	4b7b      	ldr	r3, [pc, #492]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001d30:	681b      	ldr	r3, [r3, #0]
 c001d32:	4a7a      	ldr	r2, [pc, #488]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c001d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001d3a:	f7ff f911 	bl	c000f60 <HAL_GetTick>
 c001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001d40:	e008      	b.n	c001d54 <HAL_RCC_OscConfig+0x39c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c001d42:	f7ff f90d 	bl	c000f60 <HAL_GetTick>
 c001d46:	4602      	mov	r2, r0
 c001d48:	693b      	ldr	r3, [r7, #16]
 c001d4a:	1ad3      	subs	r3, r2, r3
 c001d4c:	2b02      	cmp	r3, #2
 c001d4e:	d901      	bls.n	c001d54 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 c001d50:	2303      	movs	r3, #3
 c001d52:	e28d      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001d54:	4b71      	ldr	r3, [pc, #452]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001d56:	681b      	ldr	r3, [r3, #0]
 c001d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001d5c:	2b00      	cmp	r3, #0
 c001d5e:	d1f0      	bne.n	c001d42 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c001d60:	687b      	ldr	r3, [r7, #4]
 c001d62:	681b      	ldr	r3, [r3, #0]
 c001d64:	f003 0308 	and.w	r3, r3, #8
 c001d68:	2b00      	cmp	r3, #0
 c001d6a:	d051      	beq.n	c001e10 <HAL_RCC_OscConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c001d6c:	687b      	ldr	r3, [r7, #4]
 c001d6e:	695b      	ldr	r3, [r3, #20]
 c001d70:	2b00      	cmp	r3, #0
 c001d72:	d031      	beq.n	c001dd8 <HAL_RCC_OscConfig+0x420>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c001d74:	687b      	ldr	r3, [r7, #4]
 c001d76:	699b      	ldr	r3, [r3, #24]
 c001d78:	2b00      	cmp	r3, #0
 c001d7a:	d108      	bne.n	c001d8e <HAL_RCC_OscConfig+0x3d6>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c001d7c:	4b67      	ldr	r3, [pc, #412]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001d82:	4a66      	ldr	r2, [pc, #408]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001d84:	f023 0310 	bic.w	r3, r3, #16
 c001d88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c001d8c:	e007      	b.n	c001d9e <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c001d8e:	4b63      	ldr	r3, [pc, #396]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001d90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001d94:	4a61      	ldr	r2, [pc, #388]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001d96:	f043 0310 	orr.w	r3, r3, #16
 c001d9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c001d9e:	4b5f      	ldr	r3, [pc, #380]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001da4:	4a5d      	ldr	r2, [pc, #372]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001da6:	f043 0301 	orr.w	r3, r3, #1
 c001daa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001dae:	f7ff f8d7 	bl	c000f60 <HAL_GetTick>
 c001db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c001db4:	e008      	b.n	c001dc8 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c001db6:	f7ff f8d3 	bl	c000f60 <HAL_GetTick>
 c001dba:	4602      	mov	r2, r0
 c001dbc:	693b      	ldr	r3, [r7, #16]
 c001dbe:	1ad3      	subs	r3, r2, r3
 c001dc0:	2b07      	cmp	r3, #7
 c001dc2:	d901      	bls.n	c001dc8 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 c001dc4:	2303      	movs	r3, #3
 c001dc6:	e253      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c001dc8:	4b54      	ldr	r3, [pc, #336]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001dce:	f003 0302 	and.w	r3, r3, #2
 c001dd2:	2b00      	cmp	r3, #0
 c001dd4:	d0ef      	beq.n	c001db6 <HAL_RCC_OscConfig+0x3fe>
 c001dd6:	e01b      	b.n	c001e10 <HAL_RCC_OscConfig+0x458>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c001dd8:	4b50      	ldr	r3, [pc, #320]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001dde:	4a4f      	ldr	r2, [pc, #316]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001de0:	f023 0301 	bic.w	r3, r3, #1
 c001de4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001de8:	f7ff f8ba 	bl	c000f60 <HAL_GetTick>
 c001dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c001dee:	e008      	b.n	c001e02 <HAL_RCC_OscConfig+0x44a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c001df0:	f7ff f8b6 	bl	c000f60 <HAL_GetTick>
 c001df4:	4602      	mov	r2, r0
 c001df6:	693b      	ldr	r3, [r7, #16]
 c001df8:	1ad3      	subs	r3, r2, r3
 c001dfa:	2b07      	cmp	r3, #7
 c001dfc:	d901      	bls.n	c001e02 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 c001dfe:	2303      	movs	r3, #3
 c001e00:	e236      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c001e02:	4b46      	ldr	r3, [pc, #280]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001e04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001e08:	f003 0302 	and.w	r3, r3, #2
 c001e0c:	2b00      	cmp	r3, #0
 c001e0e:	d1ef      	bne.n	c001df0 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c001e10:	687b      	ldr	r3, [r7, #4]
 c001e12:	681b      	ldr	r3, [r3, #0]
 c001e14:	f003 0304 	and.w	r3, r3, #4
 c001e18:	2b00      	cmp	r3, #0
 c001e1a:	f000 8109 	beq.w	c002030 <HAL_RCC_OscConfig+0x678>
  {
    FlagStatus       pwrclkchanged = RESET;
 c001e1e:	2300      	movs	r3, #0
 c001e20:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c001e22:	4b3e      	ldr	r3, [pc, #248]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001e2a:	2b00      	cmp	r3, #0
 c001e2c:	d10d      	bne.n	c001e4a <HAL_RCC_OscConfig+0x492>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c001e2e:	4b3b      	ldr	r3, [pc, #236]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001e32:	4a3a      	ldr	r2, [pc, #232]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c001e38:	6593      	str	r3, [r2, #88]	; 0x58
 c001e3a:	4b38      	ldr	r3, [pc, #224]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001e42:	60bb      	str	r3, [r7, #8]
 c001e44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c001e46:	2301      	movs	r3, #1
 c001e48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001e4a:	4b35      	ldr	r3, [pc, #212]	; (c001f20 <HAL_RCC_OscConfig+0x568>)
 c001e4c:	681b      	ldr	r3, [r3, #0]
 c001e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001e52:	2b00      	cmp	r3, #0
 c001e54:	d118      	bne.n	c001e88 <HAL_RCC_OscConfig+0x4d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c001e56:	4b32      	ldr	r3, [pc, #200]	; (c001f20 <HAL_RCC_OscConfig+0x568>)
 c001e58:	681b      	ldr	r3, [r3, #0]
 c001e5a:	4a31      	ldr	r2, [pc, #196]	; (c001f20 <HAL_RCC_OscConfig+0x568>)
 c001e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c001e60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c001e62:	f7ff f87d 	bl	c000f60 <HAL_GetTick>
 c001e66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001e68:	e008      	b.n	c001e7c <HAL_RCC_OscConfig+0x4c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c001e6a:	f7ff f879 	bl	c000f60 <HAL_GetTick>
 c001e6e:	4602      	mov	r2, r0
 c001e70:	693b      	ldr	r3, [r7, #16]
 c001e72:	1ad3      	subs	r3, r2, r3
 c001e74:	2b02      	cmp	r3, #2
 c001e76:	d901      	bls.n	c001e7c <HAL_RCC_OscConfig+0x4c4>
        {
          return HAL_TIMEOUT;
 c001e78:	2303      	movs	r3, #3
 c001e7a:	e1f9      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001e7c:	4b28      	ldr	r3, [pc, #160]	; (c001f20 <HAL_RCC_OscConfig+0x568>)
 c001e7e:	681b      	ldr	r3, [r3, #0]
 c001e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001e84:	2b00      	cmp	r3, #0
 c001e86:	d0f0      	beq.n	c001e6a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c001e88:	687b      	ldr	r3, [r7, #4]
 c001e8a:	689b      	ldr	r3, [r3, #8]
 c001e8c:	f003 0301 	and.w	r3, r3, #1
 c001e90:	2b00      	cmp	r3, #0
 c001e92:	d01f      	beq.n	c001ed4 <HAL_RCC_OscConfig+0x51c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c001e94:	687b      	ldr	r3, [r7, #4]
 c001e96:	689b      	ldr	r3, [r3, #8]
 c001e98:	f003 0304 	and.w	r3, r3, #4
 c001e9c:	2b00      	cmp	r3, #0
 c001e9e:	d010      	beq.n	c001ec2 <HAL_RCC_OscConfig+0x50a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c001ea0:	4b1e      	ldr	r3, [pc, #120]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001ea6:	4a1d      	ldr	r2, [pc, #116]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001ea8:	f043 0304 	orr.w	r3, r3, #4
 c001eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c001eb0:	4b1a      	ldr	r3, [pc, #104]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001eb6:	4a19      	ldr	r2, [pc, #100]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001eb8:	f043 0301 	orr.w	r3, r3, #1
 c001ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c001ec0:	e018      	b.n	c001ef4 <HAL_RCC_OscConfig+0x53c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c001ec2:	4b16      	ldr	r3, [pc, #88]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001ec8:	4a14      	ldr	r2, [pc, #80]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001eca:	f043 0301 	orr.w	r3, r3, #1
 c001ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c001ed2:	e00f      	b.n	c001ef4 <HAL_RCC_OscConfig+0x53c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c001ed4:	4b11      	ldr	r3, [pc, #68]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001eda:	4a10      	ldr	r2, [pc, #64]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001edc:	f023 0301 	bic.w	r3, r3, #1
 c001ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c001ee4:	4b0d      	ldr	r3, [pc, #52]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001eea:	4a0c      	ldr	r2, [pc, #48]	; (c001f1c <HAL_RCC_OscConfig+0x564>)
 c001eec:	f023 0304 	bic.w	r3, r3, #4
 c001ef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c001ef4:	687b      	ldr	r3, [r7, #4]
 c001ef6:	689b      	ldr	r3, [r3, #8]
 c001ef8:	2b00      	cmp	r3, #0
 c001efa:	d058      	beq.n	c001fae <HAL_RCC_OscConfig+0x5f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001efc:	f7ff f830 	bl	c000f60 <HAL_GetTick>
 c001f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c001f02:	e00f      	b.n	c001f24 <HAL_RCC_OscConfig+0x56c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001f04:	f7ff f82c 	bl	c000f60 <HAL_GetTick>
 c001f08:	4602      	mov	r2, r0
 c001f0a:	693b      	ldr	r3, [r7, #16]
 c001f0c:	1ad3      	subs	r3, r2, r3
 c001f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 c001f12:	4293      	cmp	r3, r2
 c001f14:	d906      	bls.n	c001f24 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 c001f16:	2303      	movs	r3, #3
 c001f18:	e1aa      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
 c001f1a:	bf00      	nop
 c001f1c:	50021000 	.word	0x50021000
 c001f20:	50007000 	.word	0x50007000
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c001f24:	4bb0      	ldr	r3, [pc, #704]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001f2a:	f003 0302 	and.w	r3, r3, #2
 c001f2e:	2b00      	cmp	r3, #0
 c001f30:	d0e8      	beq.n	c001f04 <HAL_RCC_OscConfig+0x54c>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c001f32:	687b      	ldr	r3, [r7, #4]
 c001f34:	689b      	ldr	r3, [r3, #8]
 c001f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c001f3a:	2b00      	cmp	r3, #0
 c001f3c:	d01b      	beq.n	c001f76 <HAL_RCC_OscConfig+0x5be>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c001f3e:	4baa      	ldr	r3, [pc, #680]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c001f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001f44:	4aa8      	ldr	r2, [pc, #672]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c001f46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c001f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c001f4e:	e00a      	b.n	c001f66 <HAL_RCC_OscConfig+0x5ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001f50:	f7ff f806 	bl	c000f60 <HAL_GetTick>
 c001f54:	4602      	mov	r2, r0
 c001f56:	693b      	ldr	r3, [r7, #16]
 c001f58:	1ad3      	subs	r3, r2, r3
 c001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 c001f5e:	4293      	cmp	r3, r2
 c001f60:	d901      	bls.n	c001f66 <HAL_RCC_OscConfig+0x5ae>
          {
            return HAL_TIMEOUT;
 c001f62:	2303      	movs	r3, #3
 c001f64:	e184      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c001f66:	4ba0      	ldr	r3, [pc, #640]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c001f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001f6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001f70:	2b00      	cmp	r3, #0
 c001f72:	d0ed      	beq.n	c001f50 <HAL_RCC_OscConfig+0x598>
 c001f74:	e053      	b.n	c00201e <HAL_RCC_OscConfig+0x666>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c001f76:	4b9c      	ldr	r3, [pc, #624]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001f7c:	4a9a      	ldr	r2, [pc, #616]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c001f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c001f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001f86:	e00a      	b.n	c001f9e <HAL_RCC_OscConfig+0x5e6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001f88:	f7fe ffea 	bl	c000f60 <HAL_GetTick>
 c001f8c:	4602      	mov	r2, r0
 c001f8e:	693b      	ldr	r3, [r7, #16]
 c001f90:	1ad3      	subs	r3, r2, r3
 c001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 c001f96:	4293      	cmp	r3, r2
 c001f98:	d901      	bls.n	c001f9e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 c001f9a:	2303      	movs	r3, #3
 c001f9c:	e168      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001f9e:	4b92      	ldr	r3, [pc, #584]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c001fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001fa8:	2b00      	cmp	r3, #0
 c001faa:	d1ed      	bne.n	c001f88 <HAL_RCC_OscConfig+0x5d0>
 c001fac:	e037      	b.n	c00201e <HAL_RCC_OscConfig+0x666>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001fae:	f7fe ffd7 	bl	c000f60 <HAL_GetTick>
 c001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c001fb4:	e00a      	b.n	c001fcc <HAL_RCC_OscConfig+0x614>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001fb6:	f7fe ffd3 	bl	c000f60 <HAL_GetTick>
 c001fba:	4602      	mov	r2, r0
 c001fbc:	693b      	ldr	r3, [r7, #16]
 c001fbe:	1ad3      	subs	r3, r2, r3
 c001fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 c001fc4:	4293      	cmp	r3, r2
 c001fc6:	d901      	bls.n	c001fcc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_TIMEOUT;
 c001fc8:	2303      	movs	r3, #3
 c001fca:	e151      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c001fcc:	4b86      	ldr	r3, [pc, #536]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001fd2:	f003 0302 	and.w	r3, r3, #2
 c001fd6:	2b00      	cmp	r3, #0
 c001fd8:	d1ed      	bne.n	c001fb6 <HAL_RCC_OscConfig+0x5fe>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c001fda:	4b83      	ldr	r3, [pc, #524]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c001fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c001fe4:	2b00      	cmp	r3, #0
 c001fe6:	d01a      	beq.n	c00201e <HAL_RCC_OscConfig+0x666>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c001fe8:	4b7f      	ldr	r3, [pc, #508]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001fee:	4a7e      	ldr	r2, [pc, #504]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c001ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c001ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001ff8:	e00a      	b.n	c002010 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001ffa:	f7fe ffb1 	bl	c000f60 <HAL_GetTick>
 c001ffe:	4602      	mov	r2, r0
 c002000:	693b      	ldr	r3, [r7, #16]
 c002002:	1ad3      	subs	r3, r2, r3
 c002004:	f241 3288 	movw	r2, #5000	; 0x1388
 c002008:	4293      	cmp	r3, r2
 c00200a:	d901      	bls.n	c002010 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 c00200c:	2303      	movs	r3, #3
 c00200e:	e12f      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002010:	4b75      	ldr	r3, [pc, #468]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00201a:	2b00      	cmp	r3, #0
 c00201c:	d1ed      	bne.n	c001ffa <HAL_RCC_OscConfig+0x642>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c00201e:	7ffb      	ldrb	r3, [r7, #31]
 c002020:	2b01      	cmp	r3, #1
 c002022:	d105      	bne.n	c002030 <HAL_RCC_OscConfig+0x678>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c002024:	4b70      	ldr	r3, [pc, #448]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002028:	4a6f      	ldr	r2, [pc, #444]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c00202a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c00202e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c002030:	687b      	ldr	r3, [r7, #4]
 c002032:	681b      	ldr	r3, [r3, #0]
 c002034:	f003 0320 	and.w	r3, r3, #32
 c002038:	2b00      	cmp	r3, #0
 c00203a:	d03c      	beq.n	c0020b6 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c00203c:	687b      	ldr	r3, [r7, #4]
 c00203e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c002040:	2b00      	cmp	r3, #0
 c002042:	d01c      	beq.n	c00207e <HAL_RCC_OscConfig+0x6c6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c002044:	4b68      	ldr	r3, [pc, #416]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c002046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00204a:	4a67      	ldr	r2, [pc, #412]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c00204c:	f043 0301 	orr.w	r3, r3, #1
 c002050:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c002054:	f7fe ff84 	bl	c000f60 <HAL_GetTick>
 c002058:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c00205a:	e008      	b.n	c00206e <HAL_RCC_OscConfig+0x6b6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c00205c:	f7fe ff80 	bl	c000f60 <HAL_GetTick>
 c002060:	4602      	mov	r2, r0
 c002062:	693b      	ldr	r3, [r7, #16]
 c002064:	1ad3      	subs	r3, r2, r3
 c002066:	2b02      	cmp	r3, #2
 c002068:	d901      	bls.n	c00206e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 c00206a:	2303      	movs	r3, #3
 c00206c:	e100      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c00206e:	4b5e      	ldr	r3, [pc, #376]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c002070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002074:	f003 0302 	and.w	r3, r3, #2
 c002078:	2b00      	cmp	r3, #0
 c00207a:	d0ef      	beq.n	c00205c <HAL_RCC_OscConfig+0x6a4>
 c00207c:	e01b      	b.n	c0020b6 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c00207e:	4b5a      	ldr	r3, [pc, #360]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c002080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002084:	4a58      	ldr	r2, [pc, #352]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c002086:	f023 0301 	bic.w	r3, r3, #1
 c00208a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00208e:	f7fe ff67 	bl	c000f60 <HAL_GetTick>
 c002092:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c002094:	e008      	b.n	c0020a8 <HAL_RCC_OscConfig+0x6f0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c002096:	f7fe ff63 	bl	c000f60 <HAL_GetTick>
 c00209a:	4602      	mov	r2, r0
 c00209c:	693b      	ldr	r3, [r7, #16]
 c00209e:	1ad3      	subs	r3, r2, r3
 c0020a0:	2b02      	cmp	r3, #2
 c0020a2:	d901      	bls.n	c0020a8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_TIMEOUT;
 c0020a4:	2303      	movs	r3, #3
 c0020a6:	e0e3      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0020a8:	4b4f      	ldr	r3, [pc, #316]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c0020aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0020ae:	f003 0302 	and.w	r3, r3, #2
 c0020b2:	2b00      	cmp	r3, #0
 c0020b4:	d1ef      	bne.n	c002096 <HAL_RCC_OscConfig+0x6de>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c0020b6:	687b      	ldr	r3, [r7, #4]
 c0020b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0020ba:	2b00      	cmp	r3, #0
 c0020bc:	f000 80d7 	beq.w	c00226e <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0020c0:	4b49      	ldr	r3, [pc, #292]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c0020c2:	689b      	ldr	r3, [r3, #8]
 c0020c4:	f003 030c 	and.w	r3, r3, #12
 c0020c8:	2b0c      	cmp	r3, #12
 c0020ca:	f000 8091 	beq.w	c0021f0 <HAL_RCC_OscConfig+0x838>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c0020ce:	687b      	ldr	r3, [r7, #4]
 c0020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0020d2:	2b02      	cmp	r3, #2
 c0020d4:	d15a      	bne.n	c00218c <HAL_RCC_OscConfig+0x7d4>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c0020d6:	4b44      	ldr	r3, [pc, #272]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c0020d8:	681b      	ldr	r3, [r3, #0]
 c0020da:	4a43      	ldr	r2, [pc, #268]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c0020dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0020e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0020e2:	f7fe ff3d 	bl	c000f60 <HAL_GetTick>
 c0020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0020e8:	e008      	b.n	c0020fc <HAL_RCC_OscConfig+0x744>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0020ea:	f7fe ff39 	bl	c000f60 <HAL_GetTick>
 c0020ee:	4602      	mov	r2, r0
 c0020f0:	693b      	ldr	r3, [r7, #16]
 c0020f2:	1ad3      	subs	r3, r2, r3
 c0020f4:	2b02      	cmp	r3, #2
 c0020f6:	d901      	bls.n	c0020fc <HAL_RCC_OscConfig+0x744>
          {
            return HAL_TIMEOUT;
 c0020f8:	2303      	movs	r3, #3
 c0020fa:	e0b9      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0020fc:	4b3a      	ldr	r3, [pc, #232]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c0020fe:	681b      	ldr	r3, [r3, #0]
 c002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002104:	2b00      	cmp	r3, #0
 c002106:	d1f0      	bne.n	c0020ea <HAL_RCC_OscConfig+0x732>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c002108:	4b37      	ldr	r3, [pc, #220]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c00210a:	68da      	ldr	r2, [r3, #12]
 c00210c:	4b37      	ldr	r3, [pc, #220]	; (c0021ec <HAL_RCC_OscConfig+0x834>)
 c00210e:	4013      	ands	r3, r2
 c002110:	687a      	ldr	r2, [r7, #4]
 c002112:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c002114:	687a      	ldr	r2, [r7, #4]
 c002116:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c002118:	3a01      	subs	r2, #1
 c00211a:	0112      	lsls	r2, r2, #4
 c00211c:	4311      	orrs	r1, r2
 c00211e:	687a      	ldr	r2, [r7, #4]
 c002120:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c002122:	0212      	lsls	r2, r2, #8
 c002124:	4311      	orrs	r1, r2
 c002126:	687a      	ldr	r2, [r7, #4]
 c002128:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c00212a:	0852      	lsrs	r2, r2, #1
 c00212c:	3a01      	subs	r2, #1
 c00212e:	0552      	lsls	r2, r2, #21
 c002130:	4311      	orrs	r1, r2
 c002132:	687a      	ldr	r2, [r7, #4]
 c002134:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c002136:	0852      	lsrs	r2, r2, #1
 c002138:	3a01      	subs	r2, #1
 c00213a:	0652      	lsls	r2, r2, #25
 c00213c:	4311      	orrs	r1, r2
 c00213e:	687a      	ldr	r2, [r7, #4]
 c002140:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c002142:	06d2      	lsls	r2, r2, #27
 c002144:	430a      	orrs	r2, r1
 c002146:	4928      	ldr	r1, [pc, #160]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c002148:	4313      	orrs	r3, r2
 c00214a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c00214c:	4b26      	ldr	r3, [pc, #152]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c00214e:	681b      	ldr	r3, [r3, #0]
 c002150:	4a25      	ldr	r2, [pc, #148]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c002152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c002156:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c002158:	4b23      	ldr	r3, [pc, #140]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c00215a:	68db      	ldr	r3, [r3, #12]
 c00215c:	4a22      	ldr	r2, [pc, #136]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c00215e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c002162:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002164:	f7fe fefc 	bl	c000f60 <HAL_GetTick>
 c002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00216a:	e008      	b.n	c00217e <HAL_RCC_OscConfig+0x7c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c00216c:	f7fe fef8 	bl	c000f60 <HAL_GetTick>
 c002170:	4602      	mov	r2, r0
 c002172:	693b      	ldr	r3, [r7, #16]
 c002174:	1ad3      	subs	r3, r2, r3
 c002176:	2b02      	cmp	r3, #2
 c002178:	d901      	bls.n	c00217e <HAL_RCC_OscConfig+0x7c6>
          {
            return HAL_TIMEOUT;
 c00217a:	2303      	movs	r3, #3
 c00217c:	e078      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00217e:	4b1a      	ldr	r3, [pc, #104]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c002180:	681b      	ldr	r3, [r3, #0]
 c002182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002186:	2b00      	cmp	r3, #0
 c002188:	d0f0      	beq.n	c00216c <HAL_RCC_OscConfig+0x7b4>
 c00218a:	e070      	b.n	c00226e <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c00218c:	4b16      	ldr	r3, [pc, #88]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c00218e:	681b      	ldr	r3, [r3, #0]
 c002190:	4a15      	ldr	r2, [pc, #84]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c002192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c002196:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c002198:	4b13      	ldr	r3, [pc, #76]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c00219a:	681b      	ldr	r3, [r3, #0]
 c00219c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 c0021a0:	2b00      	cmp	r3, #0
 c0021a2:	d105      	bne.n	c0021b0 <HAL_RCC_OscConfig+0x7f8>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c0021a4:	4b10      	ldr	r3, [pc, #64]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c0021a6:	68db      	ldr	r3, [r3, #12]
 c0021a8:	4a0f      	ldr	r2, [pc, #60]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c0021aa:	f023 0303 	bic.w	r3, r3, #3
 c0021ae:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c0021b0:	4b0d      	ldr	r3, [pc, #52]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c0021b2:	68db      	ldr	r3, [r3, #12]
 c0021b4:	4a0c      	ldr	r2, [pc, #48]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c0021b6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 c0021ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0021be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0021c0:	f7fe fece 	bl	c000f60 <HAL_GetTick>
 c0021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0021c6:	e008      	b.n	c0021da <HAL_RCC_OscConfig+0x822>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0021c8:	f7fe feca 	bl	c000f60 <HAL_GetTick>
 c0021cc:	4602      	mov	r2, r0
 c0021ce:	693b      	ldr	r3, [r7, #16]
 c0021d0:	1ad3      	subs	r3, r2, r3
 c0021d2:	2b02      	cmp	r3, #2
 c0021d4:	d901      	bls.n	c0021da <HAL_RCC_OscConfig+0x822>
          {
            return HAL_TIMEOUT;
 c0021d6:	2303      	movs	r3, #3
 c0021d8:	e04a      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0021da:	4b03      	ldr	r3, [pc, #12]	; (c0021e8 <HAL_RCC_OscConfig+0x830>)
 c0021dc:	681b      	ldr	r3, [r3, #0]
 c0021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0021e2:	2b00      	cmp	r3, #0
 c0021e4:	d1f0      	bne.n	c0021c8 <HAL_RCC_OscConfig+0x810>
 c0021e6:	e042      	b.n	c00226e <HAL_RCC_OscConfig+0x8b6>
 c0021e8:	50021000 	.word	0x50021000
 c0021ec:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c0021f0:	687b      	ldr	r3, [r7, #4]
 c0021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0021f4:	2b01      	cmp	r3, #1
 c0021f6:	d101      	bne.n	c0021fc <HAL_RCC_OscConfig+0x844>
      {
        return HAL_ERROR;
 c0021f8:	2301      	movs	r3, #1
 c0021fa:	e039      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c0021fc:	4b1e      	ldr	r3, [pc, #120]	; (c002278 <HAL_RCC_OscConfig+0x8c0>)
 c0021fe:	68db      	ldr	r3, [r3, #12]
 c002200:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c002202:	697b      	ldr	r3, [r7, #20]
 c002204:	f003 0203 	and.w	r2, r3, #3
 c002208:	687b      	ldr	r3, [r7, #4]
 c00220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00220c:	429a      	cmp	r2, r3
 c00220e:	d12c      	bne.n	c00226a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c002210:	697b      	ldr	r3, [r7, #20]
 c002212:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c002216:	687b      	ldr	r3, [r7, #4]
 c002218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00221a:	3b01      	subs	r3, #1
 c00221c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c00221e:	429a      	cmp	r2, r3
 c002220:	d123      	bne.n	c00226a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c002222:	697b      	ldr	r3, [r7, #20]
 c002224:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c002228:	687b      	ldr	r3, [r7, #4]
 c00222a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00222c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c00222e:	429a      	cmp	r2, r3
 c002230:	d11b      	bne.n	c00226a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c002232:	697b      	ldr	r3, [r7, #20]
 c002234:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c002238:	687b      	ldr	r3, [r7, #4]
 c00223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c00223c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c00223e:	429a      	cmp	r2, r3
 c002240:	d113      	bne.n	c00226a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c002242:	697b      	ldr	r3, [r7, #20]
 c002244:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c002248:	687b      	ldr	r3, [r7, #4]
 c00224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c00224c:	085b      	lsrs	r3, r3, #1
 c00224e:	3b01      	subs	r3, #1
 c002250:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c002252:	429a      	cmp	r2, r3
 c002254:	d109      	bne.n	c00226a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c002256:	697b      	ldr	r3, [r7, #20]
 c002258:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c00225c:	687b      	ldr	r3, [r7, #4]
 c00225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002260:	085b      	lsrs	r3, r3, #1
 c002262:	3b01      	subs	r3, #1
 c002264:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c002266:	429a      	cmp	r2, r3
 c002268:	d001      	beq.n	c00226e <HAL_RCC_OscConfig+0x8b6>
        {
          return HAL_ERROR;
 c00226a:	2301      	movs	r3, #1
 c00226c:	e000      	b.n	c002270 <HAL_RCC_OscConfig+0x8b8>
        }
      }
    }
  }

  return HAL_OK;
 c00226e:	2300      	movs	r3, #0
}
 c002270:	4618      	mov	r0, r3
 c002272:	3720      	adds	r7, #32
 c002274:	46bd      	mov	sp, r7
 c002276:	bd80      	pop	{r7, pc}
 c002278:	50021000 	.word	0x50021000

0c00227c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c00227c:	b580      	push	{r7, lr}
 c00227e:	b086      	sub	sp, #24
 c002280:	af00      	add	r7, sp, #0
 c002282:	6078      	str	r0, [r7, #4]
 c002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c002286:	2300      	movs	r3, #0
 c002288:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c00228a:	687b      	ldr	r3, [r7, #4]
 c00228c:	2b00      	cmp	r3, #0
 c00228e:	d101      	bne.n	c002294 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c002290:	2301      	movs	r3, #1
 c002292:	e104      	b.n	c00249e <HAL_RCC_ClockConfig+0x222>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c002294:	4b84      	ldr	r3, [pc, #528]	; (c0024a8 <HAL_RCC_ClockConfig+0x22c>)
 c002296:	681b      	ldr	r3, [r3, #0]
 c002298:	f003 030f 	and.w	r3, r3, #15
 c00229c:	683a      	ldr	r2, [r7, #0]
 c00229e:	429a      	cmp	r2, r3
 c0022a0:	d910      	bls.n	c0022c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0022a2:	4b81      	ldr	r3, [pc, #516]	; (c0024a8 <HAL_RCC_ClockConfig+0x22c>)
 c0022a4:	681b      	ldr	r3, [r3, #0]
 c0022a6:	f023 020f 	bic.w	r2, r3, #15
 c0022aa:	497f      	ldr	r1, [pc, #508]	; (c0024a8 <HAL_RCC_ClockConfig+0x22c>)
 c0022ac:	683b      	ldr	r3, [r7, #0]
 c0022ae:	4313      	orrs	r3, r2
 c0022b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c0022b2:	4b7d      	ldr	r3, [pc, #500]	; (c0024a8 <HAL_RCC_ClockConfig+0x22c>)
 c0022b4:	681b      	ldr	r3, [r3, #0]
 c0022b6:	f003 030f 	and.w	r3, r3, #15
 c0022ba:	683a      	ldr	r2, [r7, #0]
 c0022bc:	429a      	cmp	r2, r3
 c0022be:	d001      	beq.n	c0022c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c0022c0:	2301      	movs	r3, #1
 c0022c2:	e0ec      	b.n	c00249e <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c0022c4:	687b      	ldr	r3, [r7, #4]
 c0022c6:	681b      	ldr	r3, [r3, #0]
 c0022c8:	f003 0301 	and.w	r3, r3, #1
 c0022cc:	2b00      	cmp	r3, #0
 c0022ce:	f000 808b 	beq.w	c0023e8 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c0022d2:	687b      	ldr	r3, [r7, #4]
 c0022d4:	685b      	ldr	r3, [r3, #4]
 c0022d6:	2b03      	cmp	r3, #3
 c0022d8:	d134      	bne.n	c002344 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0022da:	4b74      	ldr	r3, [pc, #464]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c0022dc:	681b      	ldr	r3, [r3, #0]
 c0022de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0022e2:	2b00      	cmp	r3, #0
 c0022e4:	d101      	bne.n	c0022ea <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 c0022e6:	2301      	movs	r3, #1
 c0022e8:	e0d9      	b.n	c00249e <HAL_RCC_ClockConfig+0x222>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c0022ea:	f000 f9fd 	bl	c0026e8 <RCC_GetSysClockFreqFromPLLSource>
 c0022ee:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c0022f0:	693b      	ldr	r3, [r7, #16]
 c0022f2:	4a6f      	ldr	r2, [pc, #444]	; (c0024b0 <HAL_RCC_ClockConfig+0x234>)
 c0022f4:	4293      	cmp	r3, r2
 c0022f6:	d956      	bls.n	c0023a6 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c0022f8:	4b6c      	ldr	r3, [pc, #432]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c0022fa:	689b      	ldr	r3, [r3, #8]
 c0022fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c002300:	2b00      	cmp	r3, #0
 c002302:	d10a      	bne.n	c00231a <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c002304:	4b69      	ldr	r3, [pc, #420]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c002306:	689b      	ldr	r3, [r3, #8]
 c002308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00230c:	4a67      	ldr	r2, [pc, #412]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c00230e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c002312:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c002314:	2380      	movs	r3, #128	; 0x80
 c002316:	617b      	str	r3, [r7, #20]
 c002318:	e045      	b.n	c0023a6 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c00231a:	687b      	ldr	r3, [r7, #4]
 c00231c:	681b      	ldr	r3, [r3, #0]
 c00231e:	f003 0302 	and.w	r3, r3, #2
 c002322:	2b00      	cmp	r3, #0
 c002324:	d03f      	beq.n	c0023a6 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 c002326:	687b      	ldr	r3, [r7, #4]
 c002328:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c00232a:	2b00      	cmp	r3, #0
 c00232c:	d13b      	bne.n	c0023a6 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c00232e:	4b5f      	ldr	r3, [pc, #380]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c002330:	689b      	ldr	r3, [r3, #8]
 c002332:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002336:	4a5d      	ldr	r2, [pc, #372]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c002338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00233c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c00233e:	2380      	movs	r3, #128	; 0x80
 c002340:	617b      	str	r3, [r7, #20]
 c002342:	e030      	b.n	c0023a6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c002344:	687b      	ldr	r3, [r7, #4]
 c002346:	685b      	ldr	r3, [r3, #4]
 c002348:	2b02      	cmp	r3, #2
 c00234a:	d107      	bne.n	c00235c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00234c:	4b57      	ldr	r3, [pc, #348]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c00234e:	681b      	ldr	r3, [r3, #0]
 c002350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002354:	2b00      	cmp	r3, #0
 c002356:	d115      	bne.n	c002384 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c002358:	2301      	movs	r3, #1
 c00235a:	e0a0      	b.n	c00249e <HAL_RCC_ClockConfig+0x222>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c00235c:	687b      	ldr	r3, [r7, #4]
 c00235e:	685b      	ldr	r3, [r3, #4]
 c002360:	2b00      	cmp	r3, #0
 c002362:	d107      	bne.n	c002374 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002364:	4b51      	ldr	r3, [pc, #324]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c002366:	681b      	ldr	r3, [r3, #0]
 c002368:	f003 0302 	and.w	r3, r3, #2
 c00236c:	2b00      	cmp	r3, #0
 c00236e:	d109      	bne.n	c002384 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c002370:	2301      	movs	r3, #1
 c002372:	e094      	b.n	c00249e <HAL_RCC_ClockConfig+0x222>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002374:	4b4d      	ldr	r3, [pc, #308]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c002376:	681b      	ldr	r3, [r3, #0]
 c002378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00237c:	2b00      	cmp	r3, #0
 c00237e:	d101      	bne.n	c002384 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c002380:	2301      	movs	r3, #1
 c002382:	e08c      	b.n	c00249e <HAL_RCC_ClockConfig+0x222>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c002384:	f000 f89a 	bl	c0024bc <HAL_RCC_GetSysClockFreq>
 c002388:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c00238a:	693b      	ldr	r3, [r7, #16]
 c00238c:	4a48      	ldr	r2, [pc, #288]	; (c0024b0 <HAL_RCC_ClockConfig+0x234>)
 c00238e:	4293      	cmp	r3, r2
 c002390:	d909      	bls.n	c0023a6 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c002392:	4b46      	ldr	r3, [pc, #280]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c002394:	689b      	ldr	r3, [r3, #8]
 c002396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00239a:	4a44      	ldr	r2, [pc, #272]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c00239c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0023a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 c0023a2:	2380      	movs	r3, #128	; 0x80
 c0023a4:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c0023a6:	4b41      	ldr	r3, [pc, #260]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c0023a8:	689b      	ldr	r3, [r3, #8]
 c0023aa:	f023 0203 	bic.w	r2, r3, #3
 c0023ae:	687b      	ldr	r3, [r7, #4]
 c0023b0:	685b      	ldr	r3, [r3, #4]
 c0023b2:	493e      	ldr	r1, [pc, #248]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c0023b4:	4313      	orrs	r3, r2
 c0023b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0023b8:	f7fe fdd2 	bl	c000f60 <HAL_GetTick>
 c0023bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0023be:	e00a      	b.n	c0023d6 <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c0023c0:	f7fe fdce 	bl	c000f60 <HAL_GetTick>
 c0023c4:	4602      	mov	r2, r0
 c0023c6:	68fb      	ldr	r3, [r7, #12]
 c0023c8:	1ad3      	subs	r3, r2, r3
 c0023ca:	f241 3288 	movw	r2, #5000	; 0x1388
 c0023ce:	4293      	cmp	r3, r2
 c0023d0:	d901      	bls.n	c0023d6 <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 c0023d2:	2303      	movs	r3, #3
 c0023d4:	e063      	b.n	c00249e <HAL_RCC_ClockConfig+0x222>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0023d6:	4b35      	ldr	r3, [pc, #212]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c0023d8:	689b      	ldr	r3, [r3, #8]
 c0023da:	f003 020c 	and.w	r2, r3, #12
 c0023de:	687b      	ldr	r3, [r7, #4]
 c0023e0:	685b      	ldr	r3, [r3, #4]
 c0023e2:	009b      	lsls	r3, r3, #2
 c0023e4:	429a      	cmp	r2, r3
 c0023e6:	d1eb      	bne.n	c0023c0 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c0023e8:	687b      	ldr	r3, [r7, #4]
 c0023ea:	681b      	ldr	r3, [r3, #0]
 c0023ec:	f003 0302 	and.w	r3, r3, #2
 c0023f0:	2b00      	cmp	r3, #0
 c0023f2:	d009      	beq.n	c002408 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c0023f4:	4b2d      	ldr	r3, [pc, #180]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c0023f6:	689b      	ldr	r3, [r3, #8]
 c0023f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0023fc:	687b      	ldr	r3, [r7, #4]
 c0023fe:	689b      	ldr	r3, [r3, #8]
 c002400:	492a      	ldr	r1, [pc, #168]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c002402:	4313      	orrs	r3, r2
 c002404:	608b      	str	r3, [r1, #8]
 c002406:	e008      	b.n	c00241a <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 c002408:	697b      	ldr	r3, [r7, #20]
 c00240a:	2b80      	cmp	r3, #128	; 0x80
 c00240c:	d105      	bne.n	c00241a <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c00240e:	4b27      	ldr	r3, [pc, #156]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c002410:	689b      	ldr	r3, [r3, #8]
 c002412:	4a26      	ldr	r2, [pc, #152]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c002414:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002418:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c00241a:	4b23      	ldr	r3, [pc, #140]	; (c0024a8 <HAL_RCC_ClockConfig+0x22c>)
 c00241c:	681b      	ldr	r3, [r3, #0]
 c00241e:	f003 030f 	and.w	r3, r3, #15
 c002422:	683a      	ldr	r2, [r7, #0]
 c002424:	429a      	cmp	r2, r3
 c002426:	d210      	bcs.n	c00244a <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c002428:	4b1f      	ldr	r3, [pc, #124]	; (c0024a8 <HAL_RCC_ClockConfig+0x22c>)
 c00242a:	681b      	ldr	r3, [r3, #0]
 c00242c:	f023 020f 	bic.w	r2, r3, #15
 c002430:	491d      	ldr	r1, [pc, #116]	; (c0024a8 <HAL_RCC_ClockConfig+0x22c>)
 c002432:	683b      	ldr	r3, [r7, #0]
 c002434:	4313      	orrs	r3, r2
 c002436:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c002438:	4b1b      	ldr	r3, [pc, #108]	; (c0024a8 <HAL_RCC_ClockConfig+0x22c>)
 c00243a:	681b      	ldr	r3, [r3, #0]
 c00243c:	f003 030f 	and.w	r3, r3, #15
 c002440:	683a      	ldr	r2, [r7, #0]
 c002442:	429a      	cmp	r2, r3
 c002444:	d001      	beq.n	c00244a <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 c002446:	2301      	movs	r3, #1
 c002448:	e029      	b.n	c00249e <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c00244a:	687b      	ldr	r3, [r7, #4]
 c00244c:	681b      	ldr	r3, [r3, #0]
 c00244e:	f003 0304 	and.w	r3, r3, #4
 c002452:	2b00      	cmp	r3, #0
 c002454:	d008      	beq.n	c002468 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c002456:	4b15      	ldr	r3, [pc, #84]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c002458:	689b      	ldr	r3, [r3, #8]
 c00245a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c00245e:	687b      	ldr	r3, [r7, #4]
 c002460:	68db      	ldr	r3, [r3, #12]
 c002462:	4912      	ldr	r1, [pc, #72]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c002464:	4313      	orrs	r3, r2
 c002466:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c002468:	687b      	ldr	r3, [r7, #4]
 c00246a:	681b      	ldr	r3, [r3, #0]
 c00246c:	f003 0308 	and.w	r3, r3, #8
 c002470:	2b00      	cmp	r3, #0
 c002472:	d009      	beq.n	c002488 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c002474:	4b0d      	ldr	r3, [pc, #52]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c002476:	689b      	ldr	r3, [r3, #8]
 c002478:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c00247c:	687b      	ldr	r3, [r7, #4]
 c00247e:	691b      	ldr	r3, [r3, #16]
 c002480:	00db      	lsls	r3, r3, #3
 c002482:	490a      	ldr	r1, [pc, #40]	; (c0024ac <HAL_RCC_ClockConfig+0x230>)
 c002484:	4313      	orrs	r3, r2
 c002486:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c002488:	f000 f8b6 	bl	c0025f8 <HAL_RCC_GetHCLKFreq>
 c00248c:	4603      	mov	r3, r0
 c00248e:	4a09      	ldr	r2, [pc, #36]	; (c0024b4 <HAL_RCC_ClockConfig+0x238>)
 c002490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c002492:	4b09      	ldr	r3, [pc, #36]	; (c0024b8 <HAL_RCC_ClockConfig+0x23c>)
 c002494:	681b      	ldr	r3, [r3, #0]
 c002496:	4618      	mov	r0, r3
 c002498:	f7fe fd12 	bl	c000ec0 <HAL_InitTick>
 c00249c:	4603      	mov	r3, r0
}
 c00249e:	4618      	mov	r0, r3
 c0024a0:	3718      	adds	r7, #24
 c0024a2:	46bd      	mov	sp, r7
 c0024a4:	bd80      	pop	{r7, pc}
 c0024a6:	bf00      	nop
 c0024a8:	50022000 	.word	0x50022000
 c0024ac:	50021000 	.word	0x50021000
 c0024b0:	04c4b400 	.word	0x04c4b400
 c0024b4:	30000000 	.word	0x30000000
 c0024b8:	30000004 	.word	0x30000004

0c0024bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c0024bc:	b480      	push	{r7}
 c0024be:	b089      	sub	sp, #36	; 0x24
 c0024c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c0024c2:	2300      	movs	r3, #0
 c0024c4:	61fb      	str	r3, [r7, #28]
 c0024c6:	2300      	movs	r3, #0
 c0024c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0024ca:	4b47      	ldr	r3, [pc, #284]	; (c0025e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0024cc:	689b      	ldr	r3, [r3, #8]
 c0024ce:	f003 030c 	and.w	r3, r3, #12
 c0024d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0024d4:	4b44      	ldr	r3, [pc, #272]	; (c0025e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0024d6:	68db      	ldr	r3, [r3, #12]
 c0024d8:	f003 0303 	and.w	r3, r3, #3
 c0024dc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0024de:	693b      	ldr	r3, [r7, #16]
 c0024e0:	2b00      	cmp	r3, #0
 c0024e2:	d005      	beq.n	c0024f0 <HAL_RCC_GetSysClockFreq+0x34>
 c0024e4:	693b      	ldr	r3, [r7, #16]
 c0024e6:	2b0c      	cmp	r3, #12
 c0024e8:	d121      	bne.n	c00252e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c0024ea:	68fb      	ldr	r3, [r7, #12]
 c0024ec:	2b01      	cmp	r3, #1
 c0024ee:	d11e      	bne.n	c00252e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c0024f0:	4b3d      	ldr	r3, [pc, #244]	; (c0025e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0024f2:	681b      	ldr	r3, [r3, #0]
 c0024f4:	f003 0308 	and.w	r3, r3, #8
 c0024f8:	2b00      	cmp	r3, #0
 c0024fa:	d107      	bne.n	c00250c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c0024fc:	4b3a      	ldr	r3, [pc, #232]	; (c0025e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0024fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002502:	0a1b      	lsrs	r3, r3, #8
 c002504:	f003 030f 	and.w	r3, r3, #15
 c002508:	61fb      	str	r3, [r7, #28]
 c00250a:	e005      	b.n	c002518 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c00250c:	4b36      	ldr	r3, [pc, #216]	; (c0025e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00250e:	681b      	ldr	r3, [r3, #0]
 c002510:	091b      	lsrs	r3, r3, #4
 c002512:	f003 030f 	and.w	r3, r3, #15
 c002516:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c002518:	4a34      	ldr	r2, [pc, #208]	; (c0025ec <HAL_RCC_GetSysClockFreq+0x130>)
 c00251a:	69fb      	ldr	r3, [r7, #28]
 c00251c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c002520:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c002522:	693b      	ldr	r3, [r7, #16]
 c002524:	2b00      	cmp	r3, #0
 c002526:	d10d      	bne.n	c002544 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c002528:	69fb      	ldr	r3, [r7, #28]
 c00252a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00252c:	e00a      	b.n	c002544 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c00252e:	693b      	ldr	r3, [r7, #16]
 c002530:	2b04      	cmp	r3, #4
 c002532:	d102      	bne.n	c00253a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c002534:	4b2e      	ldr	r3, [pc, #184]	; (c0025f0 <HAL_RCC_GetSysClockFreq+0x134>)
 c002536:	61bb      	str	r3, [r7, #24]
 c002538:	e004      	b.n	c002544 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c00253a:	693b      	ldr	r3, [r7, #16]
 c00253c:	2b08      	cmp	r3, #8
 c00253e:	d101      	bne.n	c002544 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c002540:	4b2c      	ldr	r3, [pc, #176]	; (c0025f4 <HAL_RCC_GetSysClockFreq+0x138>)
 c002542:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c002544:	693b      	ldr	r3, [r7, #16]
 c002546:	2b0c      	cmp	r3, #12
 c002548:	d146      	bne.n	c0025d8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c00254a:	4b27      	ldr	r3, [pc, #156]	; (c0025e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00254c:	68db      	ldr	r3, [r3, #12]
 c00254e:	f003 0303 	and.w	r3, r3, #3
 c002552:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002554:	4b24      	ldr	r3, [pc, #144]	; (c0025e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002556:	68db      	ldr	r3, [r3, #12]
 c002558:	091b      	lsrs	r3, r3, #4
 c00255a:	f003 030f 	and.w	r3, r3, #15
 c00255e:	3301      	adds	r3, #1
 c002560:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c002562:	68bb      	ldr	r3, [r7, #8]
 c002564:	2b02      	cmp	r3, #2
 c002566:	d003      	beq.n	c002570 <HAL_RCC_GetSysClockFreq+0xb4>
 c002568:	68bb      	ldr	r3, [r7, #8]
 c00256a:	2b03      	cmp	r3, #3
 c00256c:	d00d      	beq.n	c00258a <HAL_RCC_GetSysClockFreq+0xce>
 c00256e:	e019      	b.n	c0025a4 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002570:	4a1f      	ldr	r2, [pc, #124]	; (c0025f0 <HAL_RCC_GetSysClockFreq+0x134>)
 c002572:	687b      	ldr	r3, [r7, #4]
 c002574:	fbb2 f3f3 	udiv	r3, r2, r3
 c002578:	4a1b      	ldr	r2, [pc, #108]	; (c0025e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00257a:	68d2      	ldr	r2, [r2, #12]
 c00257c:	0a12      	lsrs	r2, r2, #8
 c00257e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002582:	fb02 f303 	mul.w	r3, r2, r3
 c002586:	617b      	str	r3, [r7, #20]
        break;
 c002588:	e019      	b.n	c0025be <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00258a:	4a1a      	ldr	r2, [pc, #104]	; (c0025f4 <HAL_RCC_GetSysClockFreq+0x138>)
 c00258c:	687b      	ldr	r3, [r7, #4]
 c00258e:	fbb2 f3f3 	udiv	r3, r2, r3
 c002592:	4a15      	ldr	r2, [pc, #84]	; (c0025e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002594:	68d2      	ldr	r2, [r2, #12]
 c002596:	0a12      	lsrs	r2, r2, #8
 c002598:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c00259c:	fb02 f303 	mul.w	r3, r2, r3
 c0025a0:	617b      	str	r3, [r7, #20]
        break;
 c0025a2:	e00c      	b.n	c0025be <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0025a4:	69fa      	ldr	r2, [r7, #28]
 c0025a6:	687b      	ldr	r3, [r7, #4]
 c0025a8:	fbb2 f3f3 	udiv	r3, r2, r3
 c0025ac:	4a0e      	ldr	r2, [pc, #56]	; (c0025e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0025ae:	68d2      	ldr	r2, [r2, #12]
 c0025b0:	0a12      	lsrs	r2, r2, #8
 c0025b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0025b6:	fb02 f303 	mul.w	r3, r2, r3
 c0025ba:	617b      	str	r3, [r7, #20]
        break;
 c0025bc:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0025be:	4b0a      	ldr	r3, [pc, #40]	; (c0025e8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0025c0:	68db      	ldr	r3, [r3, #12]
 c0025c2:	0e5b      	lsrs	r3, r3, #25
 c0025c4:	f003 0303 	and.w	r3, r3, #3
 c0025c8:	3301      	adds	r3, #1
 c0025ca:	005b      	lsls	r3, r3, #1
 c0025cc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c0025ce:	697a      	ldr	r2, [r7, #20]
 c0025d0:	683b      	ldr	r3, [r7, #0]
 c0025d2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0025d6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c0025d8:	69bb      	ldr	r3, [r7, #24]
}
 c0025da:	4618      	mov	r0, r3
 c0025dc:	3724      	adds	r7, #36	; 0x24
 c0025de:	46bd      	mov	sp, r7
 c0025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0025e4:	4770      	bx	lr
 c0025e6:	bf00      	nop
 c0025e8:	50021000 	.word	0x50021000
 c0025ec:	0c002900 	.word	0x0c002900
 c0025f0:	00f42400 	.word	0x00f42400
 c0025f4:	007a1200 	.word	0x007a1200

0c0025f8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c0025f8:	b580      	push	{r7, lr}
 c0025fa:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c0025fc:	f7ff ff5e 	bl	c0024bc <HAL_RCC_GetSysClockFreq>
 c002600:	4602      	mov	r2, r0
 c002602:	4b05      	ldr	r3, [pc, #20]	; (c002618 <HAL_RCC_GetHCLKFreq+0x20>)
 c002604:	689b      	ldr	r3, [r3, #8]
 c002606:	091b      	lsrs	r3, r3, #4
 c002608:	f003 030f 	and.w	r3, r3, #15
 c00260c:	4903      	ldr	r1, [pc, #12]	; (c00261c <HAL_RCC_GetHCLKFreq+0x24>)
 c00260e:	5ccb      	ldrb	r3, [r1, r3]
 c002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 c002614:	4618      	mov	r0, r3
 c002616:	bd80      	pop	{r7, pc}
 c002618:	50021000 	.word	0x50021000
 c00261c:	0c0028f0 	.word	0x0c0028f0

0c002620 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c002620:	b580      	push	{r7, lr}
 c002622:	b086      	sub	sp, #24
 c002624:	af00      	add	r7, sp, #0
 c002626:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c002628:	2300      	movs	r3, #0
 c00262a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c00262c:	4b2c      	ldr	r3, [pc, #176]	; (c0026e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00262e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002634:	2b00      	cmp	r3, #0
 c002636:	d003      	beq.n	c002640 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c002638:	f7ff f920 	bl	c00187c <HAL_PWREx_GetVoltageRange>
 c00263c:	6138      	str	r0, [r7, #16]
 c00263e:	e014      	b.n	c00266a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c002640:	4b27      	ldr	r3, [pc, #156]	; (c0026e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002644:	4a26      	ldr	r2, [pc, #152]	; (c0026e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00264a:	6593      	str	r3, [r2, #88]	; 0x58
 c00264c:	4b24      	ldr	r3, [pc, #144]	; (c0026e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002654:	60fb      	str	r3, [r7, #12]
 c002656:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c002658:	f7ff f910 	bl	c00187c <HAL_PWREx_GetVoltageRange>
 c00265c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c00265e:	4b20      	ldr	r3, [pc, #128]	; (c0026e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002662:	4a1f      	ldr	r2, [pc, #124]	; (c0026e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c002668:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c00266a:	693b      	ldr	r3, [r7, #16]
 c00266c:	2b00      	cmp	r3, #0
 c00266e:	d003      	beq.n	c002678 <RCC_SetFlashLatencyFromMSIRange+0x58>
 c002670:	693b      	ldr	r3, [r7, #16]
 c002672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c002676:	d10b      	bne.n	c002690 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c002678:	687b      	ldr	r3, [r7, #4]
 c00267a:	2b80      	cmp	r3, #128	; 0x80
 c00267c:	d919      	bls.n	c0026b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c00267e:	687b      	ldr	r3, [r7, #4]
 c002680:	2ba0      	cmp	r3, #160	; 0xa0
 c002682:	d902      	bls.n	c00268a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c002684:	2302      	movs	r3, #2
 c002686:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c002688:	e013      	b.n	c0026b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c00268a:	2301      	movs	r3, #1
 c00268c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c00268e:	e010      	b.n	c0026b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c002690:	687b      	ldr	r3, [r7, #4]
 c002692:	2b80      	cmp	r3, #128	; 0x80
 c002694:	d902      	bls.n	c00269c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c002696:	2303      	movs	r3, #3
 c002698:	617b      	str	r3, [r7, #20]
 c00269a:	e00a      	b.n	c0026b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c00269c:	687b      	ldr	r3, [r7, #4]
 c00269e:	2b80      	cmp	r3, #128	; 0x80
 c0026a0:	d102      	bne.n	c0026a8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c0026a2:	2302      	movs	r3, #2
 c0026a4:	617b      	str	r3, [r7, #20]
 c0026a6:	e004      	b.n	c0026b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c0026a8:	687b      	ldr	r3, [r7, #4]
 c0026aa:	2b70      	cmp	r3, #112	; 0x70
 c0026ac:	d101      	bne.n	c0026b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c0026ae:	2301      	movs	r3, #1
 c0026b0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c0026b2:	4b0c      	ldr	r3, [pc, #48]	; (c0026e4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0026b4:	681b      	ldr	r3, [r3, #0]
 c0026b6:	f023 020f 	bic.w	r2, r3, #15
 c0026ba:	490a      	ldr	r1, [pc, #40]	; (c0026e4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0026bc:	697b      	ldr	r3, [r7, #20]
 c0026be:	4313      	orrs	r3, r2
 c0026c0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c0026c2:	4b08      	ldr	r3, [pc, #32]	; (c0026e4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0026c4:	681b      	ldr	r3, [r3, #0]
 c0026c6:	f003 030f 	and.w	r3, r3, #15
 c0026ca:	697a      	ldr	r2, [r7, #20]
 c0026cc:	429a      	cmp	r2, r3
 c0026ce:	d001      	beq.n	c0026d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c0026d0:	2301      	movs	r3, #1
 c0026d2:	e000      	b.n	c0026d6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c0026d4:	2300      	movs	r3, #0
}
 c0026d6:	4618      	mov	r0, r3
 c0026d8:	3718      	adds	r7, #24
 c0026da:	46bd      	mov	sp, r7
 c0026dc:	bd80      	pop	{r7, pc}
 c0026de:	bf00      	nop
 c0026e0:	50021000 	.word	0x50021000
 c0026e4:	50022000 	.word	0x50022000

0c0026e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c0026e8:	b480      	push	{r7}
 c0026ea:	b087      	sub	sp, #28
 c0026ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c0026ee:	2300      	movs	r3, #0
 c0026f0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c0026f2:	4b36      	ldr	r3, [pc, #216]	; (c0027cc <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0026f4:	68db      	ldr	r3, [r3, #12]
 c0026f6:	f003 0303 	and.w	r3, r3, #3
 c0026fa:	2b01      	cmp	r3, #1
 c0026fc:	d118      	bne.n	c002730 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c0026fe:	4b33      	ldr	r3, [pc, #204]	; (c0027cc <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002700:	681b      	ldr	r3, [r3, #0]
 c002702:	f003 0308 	and.w	r3, r3, #8
 c002706:	2b00      	cmp	r3, #0
 c002708:	d107      	bne.n	c00271a <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c00270a:	4b30      	ldr	r3, [pc, #192]	; (c0027cc <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c00270c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002710:	0a1b      	lsrs	r3, r3, #8
 c002712:	f003 030f 	and.w	r3, r3, #15
 c002716:	617b      	str	r3, [r7, #20]
 c002718:	e005      	b.n	c002726 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c00271a:	4b2c      	ldr	r3, [pc, #176]	; (c0027cc <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c00271c:	681b      	ldr	r3, [r3, #0]
 c00271e:	091b      	lsrs	r3, r3, #4
 c002720:	f003 030f 	and.w	r3, r3, #15
 c002724:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c002726:	4a2a      	ldr	r2, [pc, #168]	; (c0027d0 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 c002728:	697b      	ldr	r3, [r7, #20]
 c00272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00272e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c002730:	4b26      	ldr	r3, [pc, #152]	; (c0027cc <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002732:	68db      	ldr	r3, [r3, #12]
 c002734:	f003 0303 	and.w	r3, r3, #3
 c002738:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c00273a:	4b24      	ldr	r3, [pc, #144]	; (c0027cc <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c00273c:	68db      	ldr	r3, [r3, #12]
 c00273e:	091b      	lsrs	r3, r3, #4
 c002740:	f003 030f 	and.w	r3, r3, #15
 c002744:	3301      	adds	r3, #1
 c002746:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c002748:	68fb      	ldr	r3, [r7, #12]
 c00274a:	2b02      	cmp	r3, #2
 c00274c:	d003      	beq.n	c002756 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 c00274e:	68fb      	ldr	r3, [r7, #12]
 c002750:	2b03      	cmp	r3, #3
 c002752:	d00d      	beq.n	c002770 <RCC_GetSysClockFreqFromPLLSource+0x88>
 c002754:	e019      	b.n	c00278a <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002756:	4a1f      	ldr	r2, [pc, #124]	; (c0027d4 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c002758:	68bb      	ldr	r3, [r7, #8]
 c00275a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00275e:	4a1b      	ldr	r2, [pc, #108]	; (c0027cc <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002760:	68d2      	ldr	r2, [r2, #12]
 c002762:	0a12      	lsrs	r2, r2, #8
 c002764:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002768:	fb02 f303 	mul.w	r3, r2, r3
 c00276c:	613b      	str	r3, [r7, #16]
      break;
 c00276e:	e019      	b.n	c0027a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002770:	4a19      	ldr	r2, [pc, #100]	; (c0027d8 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 c002772:	68bb      	ldr	r3, [r7, #8]
 c002774:	fbb2 f3f3 	udiv	r3, r2, r3
 c002778:	4a14      	ldr	r2, [pc, #80]	; (c0027cc <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c00277a:	68d2      	ldr	r2, [r2, #12]
 c00277c:	0a12      	lsrs	r2, r2, #8
 c00277e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002782:	fb02 f303 	mul.w	r3, r2, r3
 c002786:	613b      	str	r3, [r7, #16]
      break;
 c002788:	e00c      	b.n	c0027a4 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00278a:	697a      	ldr	r2, [r7, #20]
 c00278c:	68bb      	ldr	r3, [r7, #8]
 c00278e:	fbb2 f3f3 	udiv	r3, r2, r3
 c002792:	4a0e      	ldr	r2, [pc, #56]	; (c0027cc <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002794:	68d2      	ldr	r2, [r2, #12]
 c002796:	0a12      	lsrs	r2, r2, #8
 c002798:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c00279c:	fb02 f303 	mul.w	r3, r2, r3
 c0027a0:	613b      	str	r3, [r7, #16]
      break;
 c0027a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0027a4:	4b09      	ldr	r3, [pc, #36]	; (c0027cc <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0027a6:	68db      	ldr	r3, [r3, #12]
 c0027a8:	0e5b      	lsrs	r3, r3, #25
 c0027aa:	f003 0303 	and.w	r3, r3, #3
 c0027ae:	3301      	adds	r3, #1
 c0027b0:	005b      	lsls	r3, r3, #1
 c0027b2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c0027b4:	693a      	ldr	r2, [r7, #16]
 c0027b6:	687b      	ldr	r3, [r7, #4]
 c0027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 c0027bc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c0027be:	683b      	ldr	r3, [r7, #0]
}
 c0027c0:	4618      	mov	r0, r3
 c0027c2:	371c      	adds	r7, #28
 c0027c4:	46bd      	mov	sp, r7
 c0027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0027ca:	4770      	bx	lr
 c0027cc:	50021000 	.word	0x50021000
 c0027d0:	0c002900 	.word	0x0c002900
 c0027d4:	00f42400 	.word	0x00f42400
 c0027d8:	007a1200 	.word	0x007a1200

0c0027dc <HAL_RTCEx_SecureModeSet>:
  * @param  hrtc RTC handle
  * @param  secureState  Secure state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_SecureModeSet(RTC_HandleTypeDef *hrtc, RTC_SecureStateTypeDef  *secureState)
{
 c0027dc:	b480      	push	{r7}
 c0027de:	b083      	sub	sp, #12
 c0027e0:	af00      	add	r7, sp, #0
 c0027e2:	6078      	str	r0, [r7, #4]
 c0027e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TAMP_SECURE_FULL(secureState->tampSecureFull));
  assert_param(IS_RTC_BKP(secureState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(secureState->backupRegisterStartZone3));

  /* RTC, rtcNonSecureFeatures is only relevant if secureState->rtcSecureFull == RTC_SECURE_FULL_NO */
  WRITE_REG(RTC->SMCR, secureState->rtcSecureFull | secureState->rtcNonSecureFeatures);
 c0027e6:	683b      	ldr	r3, [r7, #0]
 c0027e8:	681a      	ldr	r2, [r3, #0]
 c0027ea:	683b      	ldr	r3, [r7, #0]
 c0027ec:	685b      	ldr	r3, [r3, #4]
 c0027ee:	490c      	ldr	r1, [pc, #48]	; (c002820 <HAL_RTCEx_SecureModeSet+0x44>)
 c0027f0:	4313      	orrs	r3, r2
 c0027f2:	620b      	str	r3, [r1, #32]

  /* Tamper + Backup register
     Warning : Backup register start zone are Shared with privilege configuration */
  WRITE_REG(TAMP->SMCR,
 c0027f4:	683b      	ldr	r3, [r7, #0]
 c0027f6:	689a      	ldr	r2, [r3, #8]
 c0027f8:	683b      	ldr	r3, [r7, #0]
 c0027fa:	68db      	ldr	r3, [r3, #12]
 c0027fc:	b2db      	uxtb	r3, r3
 c0027fe:	431a      	orrs	r2, r3
 c002800:	683b      	ldr	r3, [r7, #0]
 c002802:	691b      	ldr	r3, [r3, #16]
 c002804:	041b      	lsls	r3, r3, #16
 c002806:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c00280a:	4906      	ldr	r1, [pc, #24]	; (c002824 <HAL_RTCEx_SecureModeSet+0x48>)
 c00280c:	4313      	orrs	r3, r2
 c00280e:	620b      	str	r3, [r1, #32]
            secureState->tampSecureFull |
            (TAMP_SMCR_BKPRWDPROT & (secureState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos)) |
            (TAMP_SMCR_BKPWDPROT & (secureState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 c002810:	2300      	movs	r3, #0
}
 c002812:	4618      	mov	r0, r3
 c002814:	370c      	adds	r7, #12
 c002816:	46bd      	mov	sp, r7
 c002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00281c:	4770      	bx	lr
 c00281e:	bf00      	nop
 c002820:	50002800 	.word	0x50002800
 c002824:	50003400 	.word	0x50003400

0c002828 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 c002828:	b480      	push	{r7}
 c00282a:	b083      	sub	sp, #12
 c00282c:	af00      	add	r7, sp, #0
 c00282e:	6078      	str	r0, [r7, #4]
 c002830:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 c002832:	683b      	ldr	r3, [r7, #0]
 c002834:	681a      	ldr	r2, [r3, #0]
 c002836:	683b      	ldr	r3, [r7, #0]
 c002838:	685b      	ldr	r3, [r3, #4]
 c00283a:	490f      	ldr	r1, [pc, #60]	; (c002878 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 c00283c:	4313      	orrs	r3, r2
 c00283e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 c002840:	683b      	ldr	r3, [r7, #0]
 c002842:	689a      	ldr	r2, [r3, #8]
 c002844:	683b      	ldr	r3, [r7, #0]
 c002846:	68db      	ldr	r3, [r3, #12]
 c002848:	490c      	ldr	r1, [pc, #48]	; (c00287c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 c00284a:	4313      	orrs	r3, r2
 c00284c:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 c00284e:	4b0b      	ldr	r3, [pc, #44]	; (c00287c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 c002850:	6a1b      	ldr	r3, [r3, #32]
 c002852:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 c002856:	683b      	ldr	r3, [r7, #0]
 c002858:	6919      	ldr	r1, [r3, #16]
 c00285a:	683b      	ldr	r3, [r7, #0]
 c00285c:	695b      	ldr	r3, [r3, #20]
 c00285e:	041b      	lsls	r3, r3, #16
 c002860:	430b      	orrs	r3, r1
 c002862:	4906      	ldr	r1, [pc, #24]	; (c00287c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 c002864:	4313      	orrs	r3, r2
 c002866:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 c002868:	2300      	movs	r3, #0
}
 c00286a:	4618      	mov	r0, r3
 c00286c:	370c      	adds	r7, #12
 c00286e:	46bd      	mov	sp, r7
 c002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002874:	4770      	bx	lr
 c002876:	bf00      	nop
 c002878:	50002800 	.word	0x50002800
 c00287c:	50003400 	.word	0x50003400

0c002880 <__libc_init_array>:
 c002880:	b570      	push	{r4, r5, r6, lr}
 c002882:	4d0d      	ldr	r5, [pc, #52]	; (c0028b8 <__libc_init_array+0x38>)
 c002884:	2600      	movs	r6, #0
 c002886:	4c0d      	ldr	r4, [pc, #52]	; (c0028bc <__libc_init_array+0x3c>)
 c002888:	1b64      	subs	r4, r4, r5
 c00288a:	10a4      	asrs	r4, r4, #2
 c00288c:	42a6      	cmp	r6, r4
 c00288e:	d109      	bne.n	c0028a4 <__libc_init_array+0x24>
 c002890:	4d0b      	ldr	r5, [pc, #44]	; (c0028c0 <__libc_init_array+0x40>)
 c002892:	2600      	movs	r6, #0
 c002894:	4c0b      	ldr	r4, [pc, #44]	; (c0028c4 <__libc_init_array+0x44>)
 c002896:	f000 f81f 	bl	c0028d8 <_init>
 c00289a:	1b64      	subs	r4, r4, r5
 c00289c:	10a4      	asrs	r4, r4, #2
 c00289e:	42a6      	cmp	r6, r4
 c0028a0:	d105      	bne.n	c0028ae <__libc_init_array+0x2e>
 c0028a2:	bd70      	pop	{r4, r5, r6, pc}
 c0028a4:	f855 3b04 	ldr.w	r3, [r5], #4
 c0028a8:	3601      	adds	r6, #1
 c0028aa:	4798      	blx	r3
 c0028ac:	e7ee      	b.n	c00288c <__libc_init_array+0xc>
 c0028ae:	f855 3b04 	ldr.w	r3, [r5], #4
 c0028b2:	3601      	adds	r6, #1
 c0028b4:	4798      	blx	r3
 c0028b6:	e7f2      	b.n	c00289e <__libc_init_array+0x1e>
 c0028b8:	0c002940 	.word	0x0c002940
 c0028bc:	0c002940 	.word	0x0c002940
 c0028c0:	0c002940 	.word	0x0c002940
 c0028c4:	0c002944 	.word	0x0c002944

0c0028c8 <memset>:
 c0028c8:	4402      	add	r2, r0
 c0028ca:	4603      	mov	r3, r0
 c0028cc:	4293      	cmp	r3, r2
 c0028ce:	d100      	bne.n	c0028d2 <memset+0xa>
 c0028d0:	4770      	bx	lr
 c0028d2:	f803 1b01 	strb.w	r1, [r3], #1
 c0028d6:	e7f9      	b.n	c0028cc <memset+0x4>

0c0028d8 <_init>:
 c0028d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0028da:	bf00      	nop
 c0028dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c0028de:	bc08      	pop	{r3}
 c0028e0:	469e      	mov	lr, r3
 c0028e2:	4770      	bx	lr

0c0028e4 <_fini>:
 c0028e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0028e6:	bf00      	nop
 c0028e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c0028ea:	bc08      	pop	{r3}
 c0028ec:	469e      	mov	lr, r3
 c0028ee:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_LEDToggle_RED>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c2 bbfa 	b.w	c0007fc <__acle_se_SECURE_LEDToggle_RED>

0c03e008 <SECURE_LED_RED>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c2 bc36 	b.w	c00087c <__acle_se_SECURE_LED_RED>

0c03e010 <SECURE_SystemCoreClockUpdate>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c2 bed0 	b.w	c000db8 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e018 <SECURE_RegisterCallback>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c2 bb98 	b.w	c000750 <__acle_se_SECURE_RegisterCallback>

0c03e020 <SECURE_LED_YELLOW>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c2 bcb0 	b.w	c000988 <__acle_se_SECURE_LED_YELLOW>

0c03e028 <SECURE_LEDToggle_YELLOW>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c2 bc6c 	b.w	c000908 <__acle_se_SECURE_LEDToggle_YELLOW>
	...
