
LR111x_L552VE_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000279c  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0c002990  0c002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c0029e0  0c0029e0  0002e020  2**0
                  CONTENTS
  4 .ARM          00000000  0c0029e0  0c0029e0  0002e020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c0029e0  0c0029e0  0002e020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c0029e0  0c0029e0  000129e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c0029e4  0c0029e4  000129e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  30000000  0c0029e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000020  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          0000009c  3000000c  3000000c  0003000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  300000a8  300000a8  0003000c  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf31  00000000  00000000  0002e056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000233e  00000000  00000000  0003af87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000af0  00000000  00000000  0003d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000009b8  00000000  00000000  0003ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002892b  00000000  00000000  0003e770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d198  00000000  00000000  0006709b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe73d  00000000  00000000  00074233  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00172970  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a04  00000000  00000000  001729c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	e000      	b.n	c000206 <__do_global_dtors_aux+0x12>
 c000204:	bf00      	nop
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	3000000c 	.word	0x3000000c
 c000210:	00000000 	.word	0x00000000
 c000214:	0c002978 	.word	0x0c002978

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	e000      	b.n	c000226 <frame_dummy+0xe>
 c000224:	bf00      	nop
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	30000010 	.word	0x30000010
 c000230:	0c002978 	.word	0x0c002978

0c000234 <__gnu_cmse_nonsecure_call>:
 c000234:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000238:	4627      	mov	r7, r4
 c00023a:	46a0      	mov	r8, r4
 c00023c:	46a1      	mov	r9, r4
 c00023e:	46a2      	mov	sl, r4
 c000240:	46a3      	mov	fp, r4
 c000242:	46a4      	mov	ip, r4
 c000244:	ed2d 8b10 	vpush	{d8-d15}
 c000248:	f04f 0500 	mov.w	r5, #0
 c00024c:	ec45 5b18 	vmov	d8, r5, r5
 c000250:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000254:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000258:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c00025c:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000260:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000264:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000268:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c00026c:	eef1 5a10 	vmrs	r5, fpscr
 c000270:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000274:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000278:	4035      	ands	r5, r6
 c00027a:	eee1 5a10 	vmsr	fpscr, r5
 c00027e:	f384 8800 	msr	CPSR_f, r4
 c000282:	4625      	mov	r5, r4
 c000284:	4626      	mov	r6, r4
 c000286:	47a4      	blxns	r4
 c000288:	ecbd 8b10 	vpop	{d8-d15}
 c00028c:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 c000290:	b480      	push	{r7}
 c000292:	b085      	sub	sp, #20
 c000294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 c000296:	4b15      	ldr	r3, [pc, #84]	; (c0002ec <MX_DMA_Init+0x5c>)
 c000298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00029a:	4a14      	ldr	r2, [pc, #80]	; (c0002ec <MX_DMA_Init+0x5c>)
 c00029c:	f043 0304 	orr.w	r3, r3, #4
 c0002a0:	6493      	str	r3, [r2, #72]	; 0x48
 c0002a2:	4b12      	ldr	r3, [pc, #72]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0002a6:	f003 0304 	and.w	r3, r3, #4
 c0002aa:	60fb      	str	r3, [r7, #12]
 c0002ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 c0002ae:	4b0f      	ldr	r3, [pc, #60]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0002b2:	4a0e      	ldr	r2, [pc, #56]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002b4:	f043 0301 	orr.w	r3, r3, #1
 c0002b8:	6493      	str	r3, [r2, #72]	; 0x48
 c0002ba:	4b0c      	ldr	r3, [pc, #48]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0002be:	f003 0301 	and.w	r3, r3, #1
 c0002c2:	60bb      	str	r3, [r7, #8]
 c0002c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 c0002c6:	4b09      	ldr	r3, [pc, #36]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0002ca:	4a08      	ldr	r2, [pc, #32]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002cc:	f043 0302 	orr.w	r3, r3, #2
 c0002d0:	6493      	str	r3, [r2, #72]	; 0x48
 c0002d2:	4b06      	ldr	r3, [pc, #24]	; (c0002ec <MX_DMA_Init+0x5c>)
 c0002d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0002d6:	f003 0302 	and.w	r3, r3, #2
 c0002da:	607b      	str	r3, [r7, #4]
 c0002dc:	687b      	ldr	r3, [r7, #4]

}
 c0002de:	bf00      	nop
 c0002e0:	3714      	adds	r7, #20
 c0002e2:	46bd      	mov	sp, r7
 c0002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0002e8:	4770      	bx	lr
 c0002ea:	bf00      	nop
 c0002ec:	50021000 	.word	0x50021000

0c0002f0 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 c0002f0:	b580      	push	{r7, lr}
 c0002f2:	b08c      	sub	sp, #48	; 0x30
 c0002f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c0002f6:	f107 031c 	add.w	r3, r7, #28
 c0002fa:	2200      	movs	r2, #0
 c0002fc:	601a      	str	r2, [r3, #0]
 c0002fe:	605a      	str	r2, [r3, #4]
 c000300:	609a      	str	r2, [r3, #8]
 c000302:	60da      	str	r2, [r3, #12]
 c000304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 c000306:	4b5b      	ldr	r3, [pc, #364]	; (c000474 <MX_GPIO_Init+0x184>)
 c000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00030a:	4a5a      	ldr	r2, [pc, #360]	; (c000474 <MX_GPIO_Init+0x184>)
 c00030c:	f043 0310 	orr.w	r3, r3, #16
 c000310:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000312:	4b58      	ldr	r3, [pc, #352]	; (c000474 <MX_GPIO_Init+0x184>)
 c000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000316:	f003 0310 	and.w	r3, r3, #16
 c00031a:	61bb      	str	r3, [r7, #24]
 c00031c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c00031e:	4b55      	ldr	r3, [pc, #340]	; (c000474 <MX_GPIO_Init+0x184>)
 c000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000322:	4a54      	ldr	r2, [pc, #336]	; (c000474 <MX_GPIO_Init+0x184>)
 c000324:	f043 0304 	orr.w	r3, r3, #4
 c000328:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00032a:	4b52      	ldr	r3, [pc, #328]	; (c000474 <MX_GPIO_Init+0x184>)
 c00032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00032e:	f003 0304 	and.w	r3, r3, #4
 c000332:	617b      	str	r3, [r7, #20]
 c000334:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c000336:	4b4f      	ldr	r3, [pc, #316]	; (c000474 <MX_GPIO_Init+0x184>)
 c000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00033a:	4a4e      	ldr	r2, [pc, #312]	; (c000474 <MX_GPIO_Init+0x184>)
 c00033c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c000340:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000342:	4b4c      	ldr	r3, [pc, #304]	; (c000474 <MX_GPIO_Init+0x184>)
 c000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c00034a:	613b      	str	r3, [r7, #16]
 c00034c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c00034e:	4b49      	ldr	r3, [pc, #292]	; (c000474 <MX_GPIO_Init+0x184>)
 c000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000352:	4a48      	ldr	r2, [pc, #288]	; (c000474 <MX_GPIO_Init+0x184>)
 c000354:	f043 0301 	orr.w	r3, r3, #1
 c000358:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00035a:	4b46      	ldr	r3, [pc, #280]	; (c000474 <MX_GPIO_Init+0x184>)
 c00035c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00035e:	f003 0301 	and.w	r3, r3, #1
 c000362:	60fb      	str	r3, [r7, #12]
 c000364:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000366:	4b43      	ldr	r3, [pc, #268]	; (c000474 <MX_GPIO_Init+0x184>)
 c000368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00036a:	4a42      	ldr	r2, [pc, #264]	; (c000474 <MX_GPIO_Init+0x184>)
 c00036c:	f043 0302 	orr.w	r3, r3, #2
 c000370:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000372:	4b40      	ldr	r3, [pc, #256]	; (c000474 <MX_GPIO_Init+0x184>)
 c000374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000376:	f003 0302 	and.w	r3, r3, #2
 c00037a:	60bb      	str	r3, [r7, #8]
 c00037c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c00037e:	4b3d      	ldr	r3, [pc, #244]	; (c000474 <MX_GPIO_Init+0x184>)
 c000380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000382:	4a3c      	ldr	r2, [pc, #240]	; (c000474 <MX_GPIO_Init+0x184>)
 c000384:	f043 0308 	orr.w	r3, r3, #8
 c000388:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00038a:	4b3a      	ldr	r3, [pc, #232]	; (c000474 <MX_GPIO_Init+0x184>)
 c00038c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00038e:	f003 0308 	and.w	r3, r3, #8
 c000392:	607b      	str	r3, [r7, #4]
 c000394:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB1_TX_Pin|MB1_RX_Pin, GPIO_PIN_SET);
 c000396:	2201      	movs	r2, #1
 c000398:	210c      	movs	r1, #12
 c00039a:	4837      	ldr	r0, [pc, #220]	; (c000478 <MX_GPIO_Init+0x188>)
 c00039c:	f001 f8b4 	bl	c001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WP_GPIO_Port, WP_Pin, GPIO_PIN_RESET);
 c0003a0:	2200      	movs	r2, #0
 c0003a2:	2101      	movs	r1, #1
 c0003a4:	4835      	ldr	r0, [pc, #212]	; (c00047c <MX_GPIO_Init+0x18c>)
 c0003a6:	f001 f8af 	bl	c001508 <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOE, GYO_INT2_Pin|ENCODER_P_Pin|ENCODER_N_Pin|GYO_DEN_Pin, GPIO_PIN_NSEC);
 c0003aa:	2200      	movs	r2, #0
 c0003ac:	f640 210a 	movw	r1, #2570	; 0xa0a
 c0003b0:	4832      	ldr	r0, [pc, #200]	; (c00047c <MX_GPIO_Init+0x18c>)
 c0003b2:	f001 f917 	bl	c0015e4 <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOA, CURRENT_CS_Pin|CURRENT_SCK_Pin|CURRENT_MISO_Pin|CURRENT_AN_Pin
 c0003b6:	2200      	movs	r2, #0
 c0003b8:	f248 01f0 	movw	r1, #33008	; 0x80f0
 c0003bc:	482e      	ldr	r0, [pc, #184]	; (c000478 <MX_GPIO_Init+0x188>)
 c0003be:	f001 f911 	bl	c0015e4 <HAL_GPIO_ConfigPinAttributes>
                          |OTG_FS_CC1_Pin, GPIO_PIN_NSEC);

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, EXT_TX_Pin|EXT_RX_Pin|LR_SCK_Pin|LR_MISO_Pin
 c0003c2:	2200      	movs	r2, #0
 c0003c4:	f641 4130 	movw	r1, #7216	; 0x1c30
 c0003c8:	482d      	ldr	r0, [pc, #180]	; (c000480 <MX_GPIO_Init+0x190>)
 c0003ca:	f001 f90b 	bl	c0015e4 <HAL_GPIO_ConfigPinAttributes>
                          |LR_MOSI_Pin, GPIO_PIN_NSEC);

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOB, EXT_AN_Pin|DBG_RX_Pin|DBG_TX_Pin|GPIO_PIN_14
 c0003ce:	2200      	movs	r2, #0
 c0003d0:	f64c 7122 	movw	r1, #53026	; 0xcf22
 c0003d4:	482b      	ldr	r0, [pc, #172]	; (c000484 <MX_GPIO_Init+0x194>)
 c0003d6:	f001 f905 	bl	c0015e4 <HAL_GPIO_ConfigPinAttributes>
                          |GPIO_PIN_15|GPIO_PIN_5|EXT_SCL_Pin|EXT_SDA_Pin, GPIO_PIN_NSEC);

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOD, LR_RFSW4_Pin|LR_NSS_Pin|LR_BUSY_Pin|LR_NRST_Pin, GPIO_PIN_NSEC);
 c0003da:	2200      	movs	r2, #0
 c0003dc:	f244 0107 	movw	r1, #16391	; 0x4007
 c0003e0:	4829      	ldr	r0, [pc, #164]	; (c000488 <MX_GPIO_Init+0x198>)
 c0003e2:	f001 f8ff 	bl	c0015e4 <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MB1_TX_Pin|MB1_RX_Pin;
 c0003e6:	230c      	movs	r3, #12
 c0003e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c0003ea:	2301      	movs	r3, #1
 c0003ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0003ee:	2300      	movs	r3, #0
 c0003f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0003f2:	2300      	movs	r3, #0
 c0003f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c0003f6:	f107 031c 	add.w	r3, r7, #28
 c0003fa:	4619      	mov	r1, r3
 c0003fc:	481e      	ldr	r0, [pc, #120]	; (c000478 <MX_GPIO_Init+0x188>)
 c0003fe:	f000 ff03 	bl	c001208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LR_RFSW2_Pin|LR_RFSW3_Pin;
 c000402:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 c000406:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 c000408:	4b20      	ldr	r3, [pc, #128]	; (c00048c <MX_GPIO_Init+0x19c>)
 c00040a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c00040c:	2300      	movs	r3, #0
 c00040e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 c000410:	f107 031c 	add.w	r3, r7, #28
 c000414:	4619      	mov	r1, r3
 c000416:	481c      	ldr	r0, [pc, #112]	; (c000488 <MX_GPIO_Init+0x198>)
 c000418:	f000 fef6 	bl	c001208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WP_Pin;
 c00041c:	2301      	movs	r3, #1
 c00041e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000420:	2301      	movs	r3, #1
 c000422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000424:	2300      	movs	r3, #0
 c000426:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000428:	2300      	movs	r3, #0
 c00042a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(WP_GPIO_Port, &GPIO_InitStruct);
 c00042c:	f107 031c 	add.w	r3, r7, #28
 c000430:	4619      	mov	r1, r3
 c000432:	4812      	ldr	r0, [pc, #72]	; (c00047c <MX_GPIO_Init+0x18c>)
 c000434:	f000 fee8 	bl	c001208 <HAL_GPIO_Init>

  /*Configure the EXTI line attribute */
  HAL_EXTI_ConfigLineAttributes(EXTI_LINE_12, EXTI_LINE_SEC);
 c000438:	f240 1101 	movw	r1, #257	; 0x101
 c00043c:	4814      	ldr	r0, [pc, #80]	; (c000490 <MX_GPIO_Init+0x1a0>)
 c00043e:	f000 fe81 	bl	c001144 <HAL_EXTI_ConfigLineAttributes>

  /*Configure the EXTI line attribute */
  HAL_EXTI_ConfigLineAttributes(EXTI_LINE_13, EXTI_LINE_SEC);
 c000442:	f240 1101 	movw	r1, #257	; 0x101
 c000446:	4813      	ldr	r0, [pc, #76]	; (c000494 <MX_GPIO_Init+0x1a4>)
 c000448:	f000 fe7c 	bl	c001144 <HAL_EXTI_ConfigLineAttributes>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI12_IRQn, 0, 0);
 c00044c:	2200      	movs	r2, #0
 c00044e:	2100      	movs	r1, #0
 c000450:	2017      	movs	r0, #23
 c000452:	f000 fe42 	bl	c0010da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 c000456:	2017      	movs	r0, #23
 c000458:	f000 fe59 	bl	c00110e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 c00045c:	2200      	movs	r2, #0
 c00045e:	2100      	movs	r1, #0
 c000460:	2018      	movs	r0, #24
 c000462:	f000 fe3a 	bl	c0010da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 c000466:	2018      	movs	r0, #24
 c000468:	f000 fe51 	bl	c00110e <HAL_NVIC_EnableIRQ>

}
 c00046c:	bf00      	nop
 c00046e:	3730      	adds	r7, #48	; 0x30
 c000470:	46bd      	mov	sp, r7
 c000472:	bd80      	pop	{r7, pc}
 c000474:	50021000 	.word	0x50021000
 c000478:	52020000 	.word	0x52020000
 c00047c:	52021000 	.word	0x52021000
 c000480:	52020800 	.word	0x52020800
 c000484:	52020400 	.word	0x52020400
 c000488:	52020c00 	.word	0x52020c00
 c00048c:	10110000 	.word	0x10110000
 c000490:	0600000c 	.word	0x0600000c
 c000494:	0600000d 	.word	0x0600000d

0c000498 <MX_GTZC_S_Init>:

/* USER CODE END 0 */

/* GTZC_S init function */
void MX_GTZC_S_Init(void)
{
 c000498:	b580      	push	{r7, lr}
 c00049a:	b09c      	sub	sp, #112	; 0x70
 c00049c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c00049e:	1d3b      	adds	r3, r7, #4
 c0004a0:	226c      	movs	r2, #108	; 0x6c
 c0004a2:	2100      	movs	r1, #0
 c0004a4:	4618      	mov	r0, r3
 c0004a6:	f002 fa5f 	bl	c002968 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c0004aa:	2300      	movs	r3, #0
 c0004ac:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c0004ae:	2300      	movs	r3, #0
 c0004b0:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c0004b2:	f04f 33ff 	mov.w	r3, #4294967295
 c0004b6:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c0004b8:	f04f 33ff 	mov.w	r3, #4294967295
 c0004bc:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c0004be:	f04f 33ff 	mov.w	r3, #4294967295
 c0004c2:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c0004c4:	f04f 33ff 	mov.w	r3, #4294967295
 c0004c8:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c0004ca:	f04f 33ff 	mov.w	r3, #4294967295
 c0004ce:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c0004d0:	f04f 33ff 	mov.w	r3, #4294967295
 c0004d4:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c0004d6:	f04f 33ff 	mov.w	r3, #4294967295
 c0004da:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c0004dc:	f04f 33ff 	mov.w	r3, #4294967295
 c0004e0:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c0004e2:	f04f 33ff 	mov.w	r3, #4294967295
 c0004e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c0004e8:	f04f 33ff 	mov.w	r3, #4294967295
 c0004ec:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c0004ee:	f04f 33ff 	mov.w	r3, #4294967295
 c0004f2:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c0004f4:	f04f 33ff 	mov.w	r3, #4294967295
 c0004f8:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0004fa:	2300      	movs	r3, #0
 c0004fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0004fe:	2300      	movs	r3, #0
 c000500:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c000502:	2300      	movs	r3, #0
 c000504:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c000506:	2300      	movs	r3, #0
 c000508:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c00050a:	2300      	movs	r3, #0
 c00050c:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c00050e:	2300      	movs	r3, #0
 c000510:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c000512:	2300      	movs	r3, #0
 c000514:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c000516:	2300      	movs	r3, #0
 c000518:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c00051a:	2300      	movs	r3, #0
 c00051c:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c00051e:	2300      	movs	r3, #0
 c000520:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c000522:	2300      	movs	r3, #0
 c000524:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c000526:	2300      	movs	r3, #0
 c000528:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c00052a:	2300      	movs	r3, #0
 c00052c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c00052e:	1d3b      	adds	r3, r7, #4
 c000530:	4619      	mov	r1, r3
 c000532:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c000536:	f001 f88d 	bl	c001654 <HAL_GTZC_MPCBB_ConfigMem>
 c00053a:	4603      	mov	r3, r0
 c00053c:	2b00      	cmp	r3, #0
 c00053e:	d001      	beq.n	c000544 <MX_GTZC_S_Init+0xac>
  {
    Error_Handler();
 c000540:	f000 f8e4 	bl	c00070c <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000544:	2300      	movs	r3, #0
 c000546:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c000548:	2300      	movs	r3, #0
 c00054a:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c00054c:	2300      	movs	r3, #0
 c00054e:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000550:	2300      	movs	r3, #0
 c000552:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000554:	2300      	movs	r3, #0
 c000556:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000558:	2300      	movs	r3, #0
 c00055a:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c00055c:	2300      	movs	r3, #0
 c00055e:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000560:	2300      	movs	r3, #0
 c000562:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000564:	2300      	movs	r3, #0
 c000566:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000568:	1d3b      	adds	r3, r7, #4
 c00056a:	4619      	mov	r1, r3
 c00056c:	4805      	ldr	r0, [pc, #20]	; (c000584 <MX_GTZC_S_Init+0xec>)
 c00056e:	f001 f871 	bl	c001654 <HAL_GTZC_MPCBB_ConfigMem>
 c000572:	4603      	mov	r3, r0
 c000574:	2b00      	cmp	r3, #0
 c000576:	d001      	beq.n	c00057c <MX_GTZC_S_Init+0xe4>
  {
    Error_Handler();
 c000578:	f000 f8c8 	bl	c00070c <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c00057c:	bf00      	nop
 c00057e:	3770      	adds	r7, #112	; 0x70
 c000580:	46bd      	mov	sp, r7
 c000582:	bd80      	pop	{r7, pc}
 c000584:	30030000 	.word	0x30030000

0c000588 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 c000588:	b580      	push	{r7, lr}
 c00058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_Init 1 */

  /* USER CODE END ICACHE_Init 1 */
  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 c00058c:	f001 f974 	bl	c001878 <HAL_ICACHE_Enable>
 c000590:	4603      	mov	r3, r0
 c000592:	2b00      	cmp	r3, #0
 c000594:	d001      	beq.n	c00059a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 c000596:	f000 f8b9 	bl	c00070c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c00059a:	bf00      	nop
 c00059c:	bd80      	pop	{r7, pc}
	...

0c0005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c0005a0:	b580      	push	{r7, lr}
 c0005a2:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and interrupts secure/non-secure allocation setup done */
  /* in SystemInit() based on partition_stm32l552xx.h file's definitions. */
  /* USER CODE BEGIN 1 */
	 SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c0005a4:	4b0b      	ldr	r3, [pc, #44]	; (c0005d4 <main+0x34>)
 c0005a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0005a8:	4a0a      	ldr	r2, [pc, #40]	; (c0005d4 <main+0x34>)
 c0005aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c0005ae:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c0005b0:	f000 fc1d 	bl	c000dee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c0005b4:	f000 f854 	bl	c000660 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c0005b8:	f7ff ff6e 	bl	c000498 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c0005bc:	f7ff fe98 	bl	c0002f0 <MX_GPIO_Init>
  MX_DMA_Init();
 c0005c0:	f7ff fe66 	bl	c000290 <MX_DMA_Init>
  MX_RTC_Init();
 c0005c4:	f000 f8b0 	bl	c000728 <MX_RTC_Init>
  MX_ICACHE_Init();
 c0005c8:	f7ff ffde 	bl	c000588 <MX_ICACHE_Init>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0005cc:	f000 f804 	bl	c0005d8 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0005d0:	e7fe      	b.n	c0005d0 <main+0x30>
 c0005d2:	bf00      	nop
 c0005d4:	e000ed00 	.word	0xe000ed00

0c0005d8 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0005d8:	b590      	push	{r4, r7, lr}
 c0005da:	b083      	sub	sp, #12
 c0005dc:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0005de:	4b1d      	ldr	r3, [pc, #116]	; (c000654 <NonSecure_Init+0x7c>)
 c0005e0:	4a1d      	ldr	r2, [pc, #116]	; (c000658 <NonSecure_Init+0x80>)
 c0005e2:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c0005e4:	4b1c      	ldr	r3, [pc, #112]	; (c000658 <NonSecure_Init+0x80>)
 c0005e6:	681b      	ldr	r3, [r3, #0]
 c0005e8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c0005ea:	683b      	ldr	r3, [r7, #0]
 c0005ec:	f383 8888 	msr	MSP_NS, r3
}
 c0005f0:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c0005f2:	4b1a      	ldr	r3, [pc, #104]	; (c00065c <NonSecure_Init+0x84>)
 c0005f4:	681b      	ldr	r3, [r3, #0]
 c0005f6:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c0005f8:	687b      	ldr	r3, [r7, #4]
 c0005fa:	461c      	mov	r4, r3
 c0005fc:	0864      	lsrs	r4, r4, #1
 c0005fe:	0064      	lsls	r4, r4, #1
 c000600:	4620      	mov	r0, r4
 c000602:	4621      	mov	r1, r4
 c000604:	4622      	mov	r2, r4
 c000606:	4623      	mov	r3, r4
 c000608:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00060c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000610:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000614:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000618:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00061c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000620:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000624:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000628:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00062c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000630:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000634:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000638:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00063c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000644:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000648:	f7ff fdf4 	bl	c000234 <__gnu_cmse_nonsecure_call>
}
 c00064c:	bf00      	nop
 c00064e:	370c      	adds	r7, #12
 c000650:	46bd      	mov	sp, r7
 c000652:	bd90      	pop	{r4, r7, pc}
 c000654:	e002ed00 	.word	0xe002ed00
 c000658:	08040000 	.word	0x08040000
 c00065c:	08040004 	.word	0x08040004

0c000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c000660:	b580      	push	{r7, lr}
 c000662:	b098      	sub	sp, #96	; 0x60
 c000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c000666:	f107 0318 	add.w	r3, r7, #24
 c00066a:	2248      	movs	r2, #72	; 0x48
 c00066c:	2100      	movs	r1, #0
 c00066e:	4618      	mov	r0, r3
 c000670:	f002 f97a 	bl	c002968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c000674:	1d3b      	adds	r3, r7, #4
 c000676:	2200      	movs	r2, #0
 c000678:	601a      	str	r2, [r3, #0]
 c00067a:	605a      	str	r2, [r3, #4]
 c00067c:	609a      	str	r2, [r3, #8]
 c00067e:	60da      	str	r2, [r3, #12]
 c000680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c000682:	2000      	movs	r0, #0
 c000684:	f001 f958 	bl	c001938 <HAL_PWREx_ControlVoltageScaling>
 c000688:	4603      	mov	r3, r0
 c00068a:	2b00      	cmp	r3, #0
 c00068c:	d001      	beq.n	c000692 <SystemClock_Config+0x32>
  {
    Error_Handler();
 c00068e:	f000 f83d 	bl	c00070c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 c000692:	232a      	movs	r3, #42	; 0x2a
 c000694:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 c000696:	f44f 7380 	mov.w	r3, #256	; 0x100
 c00069a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 c00069c:	2301      	movs	r3, #1
 c00069e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 c0006a0:	2300      	movs	r3, #0
 c0006a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 c0006a4:	2340      	movs	r3, #64	; 0x40
 c0006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 c0006a8:	2301      	movs	r3, #1
 c0006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0006ac:	2302      	movs	r3, #2
 c0006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 c0006b0:	2302      	movs	r3, #2
 c0006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 c0006b4:	2304      	movs	r3, #4
 c0006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c0006b8:	2337      	movs	r3, #55	; 0x37
 c0006ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c0006bc:	2307      	movs	r3, #7
 c0006be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 c0006c0:	2304      	movs	r3, #4
 c0006c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c0006c4:	2302      	movs	r3, #2
 c0006c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0006c8:	f107 0318 	add.w	r3, r7, #24
 c0006cc:	4618      	mov	r0, r3
 c0006ce:	f001 f9c3 	bl	c001a58 <HAL_RCC_OscConfig>
 c0006d2:	4603      	mov	r3, r0
 c0006d4:	2b00      	cmp	r3, #0
 c0006d6:	d001      	beq.n	c0006dc <SystemClock_Config+0x7c>
  {
    Error_Handler();
 c0006d8:	f000 f818 	bl	c00070c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c0006dc:	230f      	movs	r3, #15
 c0006de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c0006e0:	2303      	movs	r3, #3
 c0006e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c0006e4:	2300      	movs	r3, #0
 c0006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c0006e8:	2300      	movs	r3, #0
 c0006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c0006ec:	2300      	movs	r3, #0
 c0006ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c0006f0:	1d3b      	adds	r3, r7, #4
 c0006f2:	2105      	movs	r1, #5
 c0006f4:	4618      	mov	r0, r3
 c0006f6:	f001 fe11 	bl	c00231c <HAL_RCC_ClockConfig>
 c0006fa:	4603      	mov	r3, r0
 c0006fc:	2b00      	cmp	r3, #0
 c0006fe:	d001      	beq.n	c000704 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 c000700:	f000 f804 	bl	c00070c <Error_Handler>
  }
}
 c000704:	bf00      	nop
 c000706:	3760      	adds	r7, #96	; 0x60
 c000708:	46bd      	mov	sp, r7
 c00070a:	bd80      	pop	{r7, pc}

0c00070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c00070c:	b580      	push	{r7, lr}
 c00070e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c000710:	b672      	cpsid	i
}
 c000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(MB1_RX_GPIO_Port, MB1_RX_Pin);
 c000714:	2108      	movs	r1, #8
 c000716:	4803      	ldr	r0, [pc, #12]	; (c000724 <Error_Handler+0x18>)
 c000718:	f000 ff0e 	bl	c001538 <HAL_GPIO_TogglePin>
	  HAL_Delay(200);
 c00071c:	20c8      	movs	r0, #200	; 0xc8
 c00071e:	f000 fbdd 	bl	c000edc <HAL_Delay>
	  HAL_GPIO_TogglePin(MB1_RX_GPIO_Port, MB1_RX_Pin);
 c000722:	e7f7      	b.n	c000714 <Error_Handler+0x8>
 c000724:	52020000 	.word	0x52020000

0c000728 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 c000728:	b580      	push	{r7, lr}
 c00072a:	b08c      	sub	sp, #48	; 0x30
 c00072c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_SecureStateTypeDef secureState = {0};
 c00072e:	f107 031c 	add.w	r3, r7, #28
 c000732:	2200      	movs	r2, #0
 c000734:	601a      	str	r2, [r3, #0]
 c000736:	605a      	str	r2, [r3, #4]
 c000738:	609a      	str	r2, [r3, #8]
 c00073a:	60da      	str	r2, [r3, #12]
 c00073c:	611a      	str	r2, [r3, #16]
  RTC_PrivilegeStateTypeDef privilegeState = {0};
 c00073e:	1d3b      	adds	r3, r7, #4
 c000740:	2200      	movs	r2, #0
 c000742:	601a      	str	r2, [r3, #0]
 c000744:	605a      	str	r2, [r3, #4]
 c000746:	609a      	str	r2, [r3, #8]
 c000748:	60da      	str	r2, [r3, #12]
 c00074a:	611a      	str	r2, [r3, #16]
 c00074c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  secureState.rtcSecureFull = RTC_SECURE_FULL_NO;
 c00074e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c000752:	61fb      	str	r3, [r7, #28]
  secureState.rtcNonSecureFeatures = RTC_NONSECURE_FEATURE_NONE|RTC_NONSECURE_FEATURE_ALRB
 c000754:	f246 030f 	movw	r3, #24591	; 0x600f
 c000758:	623b      	str	r3, [r7, #32]
                              |RTC_NONSECURE_FEATURE_WUT|RTC_NONSECURE_FEATURE_INIT
                              |RTC_NONSECURE_FEATURE_CAL|RTC_NONSECURE_FEATURE_ALRA
                              |RTC_NONSECURE_FEATURE_TS;
  secureState.backupRegisterStartZone2 = RTC_BKP_DR0;
 c00075a:	2300      	movs	r3, #0
 c00075c:	62bb      	str	r3, [r7, #40]	; 0x28
  secureState.backupRegisterStartZone3 = RTC_BKP_DR0;
 c00075e:	2300      	movs	r3, #0
 c000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTCEx_SecureModeSet(&hrtc, &secureState) != HAL_OK)
 c000762:	f107 031c 	add.w	r3, r7, #28
 c000766:	4619      	mov	r1, r3
 c000768:	480e      	ldr	r0, [pc, #56]	; (c0007a4 <MX_RTC_Init+0x7c>)
 c00076a:	f002 f887 	bl	c00287c <HAL_RTCEx_SecureModeSet>
 c00076e:	4603      	mov	r3, r0
 c000770:	2b00      	cmp	r3, #0
 c000772:	d001      	beq.n	c000778 <MX_RTC_Init+0x50>
  {
    Error_Handler();
 c000774:	f7ff ffca 	bl	c00070c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 c000778:	2300      	movs	r3, #0
 c00077a:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 c00077c:	2300      	movs	r3, #0
 c00077e:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 c000780:	2300      	movs	r3, #0
 c000782:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 c000784:	2300      	movs	r3, #0
 c000786:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 c000788:	1d3b      	adds	r3, r7, #4
 c00078a:	4619      	mov	r1, r3
 c00078c:	4805      	ldr	r0, [pc, #20]	; (c0007a4 <MX_RTC_Init+0x7c>)
 c00078e:	f002 f89b 	bl	c0028c8 <HAL_RTCEx_PrivilegeModeSet>
 c000792:	4603      	mov	r3, r0
 c000794:	2b00      	cmp	r3, #0
 c000796:	d001      	beq.n	c00079c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 c000798:	f7ff ffb8 	bl	c00070c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 c00079c:	bf00      	nop
 c00079e:	3730      	adds	r7, #48	; 0x30
 c0007a0:	46bd      	mov	sp, r7
 c0007a2:	bd80      	pop	{r7, pc}
 c0007a4:	30000030 	.word	0x30000030

0c0007a8 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c0007a8:	b480      	push	{r7}
 c0007aa:	b083      	sub	sp, #12
 c0007ac:	af00      	add	r7, sp, #0
 c0007ae:	4603      	mov	r3, r0
 c0007b0:	6039      	str	r1, [r7, #0]
 c0007b2:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c0007b4:	683b      	ldr	r3, [r7, #0]
 c0007b6:	2b00      	cmp	r3, #0
 c0007b8:	d00d      	beq.n	c0007d6 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c0007ba:	79fb      	ldrb	r3, [r7, #7]
 c0007bc:	2b00      	cmp	r3, #0
 c0007be:	d002      	beq.n	c0007c6 <__acle_se_SECURE_RegisterCallback+0x1e>
 c0007c0:	2b01      	cmp	r3, #1
 c0007c2:	d004      	beq.n	c0007ce <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c0007c4:	e008      	b.n	c0007d8 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c0007c6:	4a21      	ldr	r2, [pc, #132]	; (c00084c <__acle_se_SECURE_RegisterCallback+0xa4>)
 c0007c8:	683b      	ldr	r3, [r7, #0]
 c0007ca:	6013      	str	r3, [r2, #0]
        break;
 c0007cc:	e004      	b.n	c0007d8 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c0007ce:	4a20      	ldr	r2, [pc, #128]	; (c000850 <__acle_se_SECURE_RegisterCallback+0xa8>)
 c0007d0:	683b      	ldr	r3, [r7, #0]
 c0007d2:	6013      	str	r3, [r2, #0]
        break;
 c0007d4:	e000      	b.n	c0007d8 <__acle_se_SECURE_RegisterCallback+0x30>
    }
  }
 c0007d6:	bf00      	nop
}
 c0007d8:	bf00      	nop
 c0007da:	370c      	adds	r7, #12
 c0007dc:	46bd      	mov	sp, r7
 c0007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0007e2:	4670      	mov	r0, lr
 c0007e4:	4671      	mov	r1, lr
 c0007e6:	4672      	mov	r2, lr
 c0007e8:	4673      	mov	r3, lr
 c0007ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0007ee:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0007f2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0007f6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0007fa:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0007fe:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000802:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000806:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00080a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00080e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000812:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000816:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00081a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00081e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000826:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00082a:	f38e 8c00 	msr	CPSR_fs, lr
 c00082e:	b410      	push	{r4}
 c000830:	eef1 ca10 	vmrs	ip, fpscr
 c000834:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000838:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00083c:	ea0c 0c04 	and.w	ip, ip, r4
 c000840:	eee1 ca10 	vmsr	fpscr, ip
 c000844:	bc10      	pop	{r4}
 c000846:	46f4      	mov	ip, lr
 c000848:	4774      	bxns	lr
 c00084a:	bf00      	nop
 c00084c:	30000028 	.word	0x30000028
 c000850:	3000002c 	.word	0x3000002c

0c000854 <__acle_se_SECURE_LEDToggle_RED>:

/**
  * @}
  */
CMSE_NS_ENTRY/*secureportNON_SECURE_CALLABLE*/ void SECURE_LEDToggle_RED(void)
{
 c000854:	b580      	push	{r7, lr}
 c000856:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(MB1_RX_GPIO_Port, MB1_RX_Pin);
 c000858:	2108      	movs	r1, #8
 c00085a:	481d      	ldr	r0, [pc, #116]	; (c0008d0 <__acle_se_SECURE_LEDToggle_RED+0x7c>)
 c00085c:	f000 fe6c 	bl	c001538 <HAL_GPIO_TogglePin>
}
 c000860:	bf00      	nop
 c000862:	46bd      	mov	sp, r7
 c000864:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000868:	4670      	mov	r0, lr
 c00086a:	4671      	mov	r1, lr
 c00086c:	4672      	mov	r2, lr
 c00086e:	4673      	mov	r3, lr
 c000870:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000874:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000878:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00087c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000880:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000884:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000888:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00088c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000890:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000894:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000898:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00089c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0008a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0008a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0008a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0008ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0008b0:	f38e 8c00 	msr	CPSR_fs, lr
 c0008b4:	b410      	push	{r4}
 c0008b6:	eef1 ca10 	vmrs	ip, fpscr
 c0008ba:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0008be:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0008c2:	ea0c 0c04 	and.w	ip, ip, r4
 c0008c6:	eee1 ca10 	vmsr	fpscr, ip
 c0008ca:	bc10      	pop	{r4}
 c0008cc:	46f4      	mov	ip, lr
 c0008ce:	4774      	bxns	lr
 c0008d0:	52020000 	.word	0x52020000

0c0008d4 <__acle_se_SECURE_LEDToggle_YELLOW>:

CMSE_NS_ENTRY/*secureportNON_SECURE_CALLABLE*/ void SECURE_LEDToggle_YELLOW(void)
{
 c0008d4:	b580      	push	{r7, lr}
 c0008d6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(MB1_TX_GPIO_Port, MB1_TX_Pin);
 c0008d8:	2104      	movs	r1, #4
 c0008da:	481d      	ldr	r0, [pc, #116]	; (c000950 <__acle_se_SECURE_LEDToggle_YELLOW+0x7c>)
 c0008dc:	f000 fe2c 	bl	c001538 <HAL_GPIO_TogglePin>
}
 c0008e0:	bf00      	nop
 c0008e2:	46bd      	mov	sp, r7
 c0008e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0008e8:	4670      	mov	r0, lr
 c0008ea:	4671      	mov	r1, lr
 c0008ec:	4672      	mov	r2, lr
 c0008ee:	4673      	mov	r3, lr
 c0008f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0008f4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0008f8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0008fc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000900:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000904:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000908:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00090c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000910:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000914:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000918:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00091c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000920:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000924:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000928:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00092c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000930:	f38e 8c00 	msr	CPSR_fs, lr
 c000934:	b410      	push	{r4}
 c000936:	eef1 ca10 	vmrs	ip, fpscr
 c00093a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00093e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000942:	ea0c 0c04 	and.w	ip, ip, r4
 c000946:	eee1 ca10 	vmsr	fpscr, ip
 c00094a:	bc10      	pop	{r4}
 c00094c:	46f4      	mov	ip, lr
 c00094e:	4774      	bxns	lr
 c000950:	52020000 	.word	0x52020000

0c000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000954:	b580      	push	{r7, lr}
 c000956:	b084      	sub	sp, #16
 c000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c00095a:	4b21      	ldr	r3, [pc, #132]	; (c0009e0 <HAL_MspInit+0x8c>)
 c00095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00095e:	4a20      	ldr	r2, [pc, #128]	; (c0009e0 <HAL_MspInit+0x8c>)
 c000960:	f043 0301 	orr.w	r3, r3, #1
 c000964:	6613      	str	r3, [r2, #96]	; 0x60
 c000966:	4b1e      	ldr	r3, [pc, #120]	; (c0009e0 <HAL_MspInit+0x8c>)
 c000968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00096a:	f003 0301 	and.w	r3, r3, #1
 c00096e:	60fb      	str	r3, [r7, #12]
 c000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c000972:	4b1b      	ldr	r3, [pc, #108]	; (c0009e0 <HAL_MspInit+0x8c>)
 c000974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000976:	4a1a      	ldr	r2, [pc, #104]	; (c0009e0 <HAL_MspInit+0x8c>)
 c000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00097c:	6593      	str	r3, [r2, #88]	; 0x58
 c00097e:	4b18      	ldr	r3, [pc, #96]	; (c0009e0 <HAL_MspInit+0x8c>)
 c000980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c000986:	60bb      	str	r3, [r7, #8]
 c000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c00098a:	4b15      	ldr	r3, [pc, #84]	; (c0009e0 <HAL_MspInit+0x8c>)
 c00098c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00098e:	4a14      	ldr	r2, [pc, #80]	; (c0009e0 <HAL_MspInit+0x8c>)
 c000990:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c000994:	6493      	str	r3, [r2, #72]	; 0x48
 c000996:	4b12      	ldr	r3, [pc, #72]	; (c0009e0 <HAL_MspInit+0x8c>)
 c000998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00099a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c00099e:	607b      	str	r3, [r7, #4]
 c0009a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c0009a2:	2200      	movs	r2, #0
 c0009a4:	2100      	movs	r1, #0
 c0009a6:	2008      	movs	r0, #8
 c0009a8:	f000 fb97 	bl	c0010da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c0009ac:	2008      	movs	r0, #8
 c0009ae:	f000 fbae 	bl	c00110e <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 c0009b2:	2200      	movs	r2, #0
 c0009b4:	2100      	movs	r1, #0
 c0009b6:	205f      	movs	r0, #95	; 0x5f
 c0009b8:	f000 fb8f 	bl	c0010da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 c0009bc:	205f      	movs	r0, #95	; 0x5f
 c0009be:	f000 fba6 	bl	c00110e <HAL_NVIC_EnableIRQ>
  /* ICACHE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ICACHE_IRQn, 0, 0);
 c0009c2:	2200      	movs	r2, #0
 c0009c4:	2100      	movs	r1, #0
 c0009c6:	206b      	movs	r0, #107	; 0x6b
 c0009c8:	f000 fb87 	bl	c0010da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ICACHE_IRQn);
 c0009cc:	206b      	movs	r0, #107	; 0x6b
 c0009ce:	f000 fb9e 	bl	c00110e <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c0009d2:	f001 f80d 	bl	c0019f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c0009d6:	bf00      	nop
 c0009d8:	3710      	adds	r7, #16
 c0009da:	46bd      	mov	sp, r7
 c0009dc:	bd80      	pop	{r7, pc}
 c0009de:	bf00      	nop
 c0009e0:	50021000 	.word	0x50021000

0c0009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c0009e4:	b480      	push	{r7}
 c0009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c0009e8:	e7fe      	b.n	c0009e8 <NMI_Handler+0x4>

0c0009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c0009ea:	b480      	push	{r7}
 c0009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c0009ee:	e7fe      	b.n	c0009ee <HardFault_Handler+0x4>

0c0009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c0009f0:	b480      	push	{r7}
 c0009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c0009f4:	e7fe      	b.n	c0009f4 <MemManage_Handler+0x4>

0c0009f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c0009f6:	b480      	push	{r7}
 c0009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c0009fa:	e7fe      	b.n	c0009fa <BusFault_Handler+0x4>

0c0009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c0009fc:	b480      	push	{r7}
 c0009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c000a00:	e7fe      	b.n	c000a00 <UsageFault_Handler+0x4>

0c000a02 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c000a02:	b480      	push	{r7}
 c000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c000a06:	e7fe      	b.n	c000a06 <SecureFault_Handler+0x4>

0c000a08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c000a08:	b480      	push	{r7}
 c000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000a0c:	bf00      	nop
 c000a0e:	46bd      	mov	sp, r7
 c000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000a14:	4770      	bx	lr

0c000a16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c000a16:	b480      	push	{r7}
 c000a18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c000a1a:	bf00      	nop
 c000a1c:	46bd      	mov	sp, r7
 c000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000a22:	4770      	bx	lr

0c000a24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c000a24:	b480      	push	{r7}
 c000a26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c000a28:	bf00      	nop
 c000a2a:	46bd      	mov	sp, r7
 c000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000a30:	4770      	bx	lr

0c000a32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c000a32:	b580      	push	{r7, lr}
 c000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c000a36:	f000 fa31 	bl	c000e9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c000a3a:	bf00      	nop
 c000a3c:	bd80      	pop	{r7, pc}

0c000a3e <GTZC_IRQHandler>:

/**
  * @brief This function handles Global TrustZone controller global interrupt.
  */
void GTZC_IRQHandler(void)
{
 c000a3e:	b580      	push	{r7, lr}
 c000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c000a42:	f000 fe8b 	bl	c00175c <HAL_GTZC_IRQHandler>
  /* USER CODE BEGIN GTZC_IRQn 1 */

  /* USER CODE END GTZC_IRQn 1 */
}
 c000a46:	bf00      	nop
 c000a48:	bd80      	pop	{r7, pc}

0c000a4a <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 c000a4a:	b580      	push	{r7, lr}
 c000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 c000a4e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 c000a52:	f000 fd8b 	bl	c00156c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 c000a56:	bf00      	nop
 c000a58:	bd80      	pop	{r7, pc}

0c000a5a <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 c000a5a:	b580      	push	{r7, lr}
 c000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 c000a5e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 c000a62:	f000 fd83 	bl	c00156c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 c000a66:	bf00      	nop
 c000a68:	bd80      	pop	{r7, pc}

0c000a6a <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 c000a6a:	b480      	push	{r7}
 c000a6c:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 c000a6e:	bf00      	nop
 c000a70:	46bd      	mov	sp, r7
 c000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000a76:	4770      	bx	lr

0c000a78 <ICACHE_IRQHandler>:

/**
  * @brief This function handles Instruction cache global interrupt.
  */
void ICACHE_IRQHandler(void)
{
 c000a78:	b580      	push	{r7, lr}
 c000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ICACHE_IRQn 0 */

  /* USER CODE END ICACHE_IRQn 0 */
  HAL_ICACHE_IRQHandler();
 c000a7c:	f000 ff0c 	bl	c001898 <HAL_ICACHE_IRQHandler>
  /* USER CODE BEGIN ICACHE_IRQn 1 */

  /* USER CODE END ICACHE_IRQn 1 */
}
 c000a80:	bf00      	nop
 c000a82:	bd80      	pop	{r7, pc}

0c000a84 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c000a84:	b480      	push	{r7}
 c000a86:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c000a88:	4b30      	ldr	r3, [pc, #192]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000a8a:	2200      	movs	r2, #0
 c000a8c:	609a      	str	r2, [r3, #8]
 c000a8e:	4b2f      	ldr	r3, [pc, #188]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000a90:	4a2f      	ldr	r2, [pc, #188]	; (c000b50 <TZ_SAU_Setup+0xcc>)
 c000a92:	60da      	str	r2, [r3, #12]
 c000a94:	4b2d      	ldr	r3, [pc, #180]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000a96:	4a2f      	ldr	r2, [pc, #188]	; (c000b54 <TZ_SAU_Setup+0xd0>)
 c000a98:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c000a9a:	4b2c      	ldr	r3, [pc, #176]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000a9c:	2201      	movs	r2, #1
 c000a9e:	609a      	str	r2, [r3, #8]
 c000aa0:	4b2a      	ldr	r3, [pc, #168]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000aa2:	4a2d      	ldr	r2, [pc, #180]	; (c000b58 <TZ_SAU_Setup+0xd4>)
 c000aa4:	60da      	str	r2, [r3, #12]
 c000aa6:	4b29      	ldr	r3, [pc, #164]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000aa8:	4a2c      	ldr	r2, [pc, #176]	; (c000b5c <TZ_SAU_Setup+0xd8>)
 c000aaa:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c000aac:	4b27      	ldr	r3, [pc, #156]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000aae:	2202      	movs	r2, #2
 c000ab0:	609a      	str	r2, [r3, #8]
 c000ab2:	4b26      	ldr	r3, [pc, #152]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000ab4:	4a2a      	ldr	r2, [pc, #168]	; (c000b60 <TZ_SAU_Setup+0xdc>)
 c000ab6:	60da      	str	r2, [r3, #12]
 c000ab8:	4b24      	ldr	r3, [pc, #144]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000aba:	4a2a      	ldr	r2, [pc, #168]	; (c000b64 <TZ_SAU_Setup+0xe0>)
 c000abc:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c000abe:	4b23      	ldr	r3, [pc, #140]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000ac0:	2203      	movs	r2, #3
 c000ac2:	609a      	str	r2, [r3, #8]
 c000ac4:	4b21      	ldr	r3, [pc, #132]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c000aca:	60da      	str	r2, [r3, #12]
 c000acc:	4b1f      	ldr	r3, [pc, #124]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000ace:	4a26      	ldr	r2, [pc, #152]	; (c000b68 <TZ_SAU_Setup+0xe4>)
 c000ad0:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c000ad2:	4b1e      	ldr	r3, [pc, #120]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000ad4:	2204      	movs	r2, #4
 c000ad6:	609a      	str	r2, [r3, #8]
 c000ad8:	4b1c      	ldr	r3, [pc, #112]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000ada:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c000ade:	60da      	str	r2, [r3, #12]
 c000ae0:	4b1a      	ldr	r3, [pc, #104]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000ae2:	4a22      	ldr	r2, [pc, #136]	; (c000b6c <TZ_SAU_Setup+0xe8>)
 c000ae4:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c000ae6:	4b19      	ldr	r3, [pc, #100]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000ae8:	2205      	movs	r2, #5
 c000aea:	609a      	str	r2, [r3, #8]
 c000aec:	4b17      	ldr	r3, [pc, #92]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000aee:	4a20      	ldr	r2, [pc, #128]	; (c000b70 <TZ_SAU_Setup+0xec>)
 c000af0:	60da      	str	r2, [r3, #12]
 c000af2:	4b16      	ldr	r3, [pc, #88]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000af4:	4a1f      	ldr	r2, [pc, #124]	; (c000b74 <TZ_SAU_Setup+0xf0>)
 c000af6:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000af8:	4b14      	ldr	r3, [pc, #80]	; (c000b4c <TZ_SAU_Setup+0xc8>)
 c000afa:	2201      	movs	r2, #1
 c000afc:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000afe:	4b1e      	ldr	r3, [pc, #120]	; (c000b78 <TZ_SAU_Setup+0xf4>)
 c000b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000b04:	4a1c      	ldr	r2, [pc, #112]	; (c000b78 <TZ_SAU_Setup+0xf4>)
 c000b06:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c000b0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000b0e:	4b1b      	ldr	r3, [pc, #108]	; (c000b7c <TZ_SAU_Setup+0xf8>)
 c000b10:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c000b12:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000b16:	4a19      	ldr	r2, [pc, #100]	; (c000b7c <TZ_SAU_Setup+0xf8>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000b1c:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000b1e:	4b18      	ldr	r3, [pc, #96]	; (c000b80 <TZ_SAU_Setup+0xfc>)
 c000b20:	f245 0204 	movw	r2, #20484	; 0x5004
 c000b24:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000b28:	4b15      	ldr	r3, [pc, #84]	; (c000b80 <TZ_SAU_Setup+0xfc>)
 c000b2a:	4a16      	ldr	r2, [pc, #88]	; (c000b84 <TZ_SAU_Setup+0x100>)
 c000b2c:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000b30:	4b13      	ldr	r3, [pc, #76]	; (c000b80 <TZ_SAU_Setup+0xfc>)
 c000b32:	4a15      	ldr	r2, [pc, #84]	; (c000b88 <TZ_SAU_Setup+0x104>)
 c000b34:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000b38:	4b11      	ldr	r3, [pc, #68]	; (c000b80 <TZ_SAU_Setup+0xfc>)
 c000b3a:	2208      	movs	r2, #8
 c000b3c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c000b40:	bf00      	nop
 c000b42:	46bd      	mov	sp, r7
 c000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000b48:	4770      	bx	lr
 c000b4a:	bf00      	nop
 c000b4c:	e000edd0 	.word	0xe000edd0
 c000b50:	0c03e000 	.word	0x0c03e000
 c000b54:	0c03ffe3 	.word	0x0c03ffe3
 c000b58:	08040000 	.word	0x08040000
 c000b5c:	0807ffe1 	.word	0x0807ffe1
 c000b60:	20018000 	.word	0x20018000
 c000b64:	2003ffe1 	.word	0x2003ffe1
 c000b68:	4fffffe1 	.word	0x4fffffe1
 c000b6c:	9fffffe1 	.word	0x9fffffe1
 c000b70:	0bf90000 	.word	0x0bf90000
 c000b74:	0bfa8fe1 	.word	0x0bfa8fe1
 c000b78:	e000ed00 	.word	0xe000ed00
 c000b7c:	e000ef30 	.word	0xe000ef30
 c000b80:	e000e100 	.word	0xe000e100
 c000b84:	89821e36 	.word	0x89821e36
 c000b88:	c0270004 	.word	0xc0270004

0c000b8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c000b8c:	b580      	push	{r7, lr}
 c000b8e:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c000b90:	f7ff ff78 	bl	c000a84 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000b94:	4b08      	ldr	r3, [pc, #32]	; (c000bb8 <SystemInit+0x2c>)
 c000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000b9a:	4a07      	ldr	r2, [pc, #28]	; (c000bb8 <SystemInit+0x2c>)
 c000b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000ba4:	4b05      	ldr	r3, [pc, #20]	; (c000bbc <SystemInit+0x30>)
 c000ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000baa:	4a04      	ldr	r2, [pc, #16]	; (c000bbc <SystemInit+0x30>)
 c000bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c000bb4:	bf00      	nop
 c000bb6:	bd80      	pop	{r7, pc}
 c000bb8:	e000ed00 	.word	0xe000ed00
 c000bbc:	e002ed00 	.word	0xe002ed00

0c000bc0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c000bc0:	b480      	push	{r7}
 c000bc2:	b087      	sub	sp, #28
 c000bc4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c000bc6:	4b4f      	ldr	r3, [pc, #316]	; (c000d04 <SystemCoreClockUpdate+0x144>)
 c000bc8:	681b      	ldr	r3, [r3, #0]
 c000bca:	f003 0308 	and.w	r3, r3, #8
 c000bce:	2b00      	cmp	r3, #0
 c000bd0:	d107      	bne.n	c000be2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c000bd2:	4b4c      	ldr	r3, [pc, #304]	; (c000d04 <SystemCoreClockUpdate+0x144>)
 c000bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c000bd8:	0a1b      	lsrs	r3, r3, #8
 c000bda:	f003 030f 	and.w	r3, r3, #15
 c000bde:	617b      	str	r3, [r7, #20]
 c000be0:	e005      	b.n	c000bee <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c000be2:	4b48      	ldr	r3, [pc, #288]	; (c000d04 <SystemCoreClockUpdate+0x144>)
 c000be4:	681b      	ldr	r3, [r3, #0]
 c000be6:	091b      	lsrs	r3, r3, #4
 c000be8:	f003 030f 	and.w	r3, r3, #15
 c000bec:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c000bee:	4a46      	ldr	r2, [pc, #280]	; (c000d08 <SystemCoreClockUpdate+0x148>)
 c000bf0:	697b      	ldr	r3, [r7, #20]
 c000bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c000bf6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000bf8:	4b42      	ldr	r3, [pc, #264]	; (c000d04 <SystemCoreClockUpdate+0x144>)
 c000bfa:	689b      	ldr	r3, [r3, #8]
 c000bfc:	f003 030c 	and.w	r3, r3, #12
 c000c00:	2b0c      	cmp	r3, #12
 c000c02:	d866      	bhi.n	c000cd2 <SystemCoreClockUpdate+0x112>
 c000c04:	a201      	add	r2, pc, #4	; (adr r2, c000c0c <SystemCoreClockUpdate+0x4c>)
 c000c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c000c0a:	bf00      	nop
 c000c0c:	0c000c41 	.word	0x0c000c41
 c000c10:	0c000cd3 	.word	0x0c000cd3
 c000c14:	0c000cd3 	.word	0x0c000cd3
 c000c18:	0c000cd3 	.word	0x0c000cd3
 c000c1c:	0c000c49 	.word	0x0c000c49
 c000c20:	0c000cd3 	.word	0x0c000cd3
 c000c24:	0c000cd3 	.word	0x0c000cd3
 c000c28:	0c000cd3 	.word	0x0c000cd3
 c000c2c:	0c000c51 	.word	0x0c000c51
 c000c30:	0c000cd3 	.word	0x0c000cd3
 c000c34:	0c000cd3 	.word	0x0c000cd3
 c000c38:	0c000cd3 	.word	0x0c000cd3
 c000c3c:	0c000c59 	.word	0x0c000c59
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c000c40:	4a32      	ldr	r2, [pc, #200]	; (c000d0c <SystemCoreClockUpdate+0x14c>)
 c000c42:	697b      	ldr	r3, [r7, #20]
 c000c44:	6013      	str	r3, [r2, #0]
      break;
 c000c46:	e048      	b.n	c000cda <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c000c48:	4b30      	ldr	r3, [pc, #192]	; (c000d0c <SystemCoreClockUpdate+0x14c>)
 c000c4a:	4a31      	ldr	r2, [pc, #196]	; (c000d10 <SystemCoreClockUpdate+0x150>)
 c000c4c:	601a      	str	r2, [r3, #0]
      break;
 c000c4e:	e044      	b.n	c000cda <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c000c50:	4b2e      	ldr	r3, [pc, #184]	; (c000d0c <SystemCoreClockUpdate+0x14c>)
 c000c52:	4a30      	ldr	r2, [pc, #192]	; (c000d14 <SystemCoreClockUpdate+0x154>)
 c000c54:	601a      	str	r2, [r3, #0]
      break;
 c000c56:	e040      	b.n	c000cda <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c000c58:	4b2a      	ldr	r3, [pc, #168]	; (c000d04 <SystemCoreClockUpdate+0x144>)
 c000c5a:	68db      	ldr	r3, [r3, #12]
 c000c5c:	f003 0303 	and.w	r3, r3, #3
 c000c60:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c000c62:	4b28      	ldr	r3, [pc, #160]	; (c000d04 <SystemCoreClockUpdate+0x144>)
 c000c64:	68db      	ldr	r3, [r3, #12]
 c000c66:	091b      	lsrs	r3, r3, #4
 c000c68:	f003 030f 	and.w	r3, r3, #15
 c000c6c:	3301      	adds	r3, #1
 c000c6e:	60bb      	str	r3, [r7, #8]
 c000c70:	68fb      	ldr	r3, [r7, #12]
 c000c72:	2b02      	cmp	r3, #2
 c000c74:	d003      	beq.n	c000c7e <SystemCoreClockUpdate+0xbe>
 c000c76:	68fb      	ldr	r3, [r7, #12]
 c000c78:	2b03      	cmp	r3, #3
 c000c7a:	d006      	beq.n	c000c8a <SystemCoreClockUpdate+0xca>
 c000c7c:	e00b      	b.n	c000c96 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c000c7e:	4a24      	ldr	r2, [pc, #144]	; (c000d10 <SystemCoreClockUpdate+0x150>)
 c000c80:	68bb      	ldr	r3, [r7, #8]
 c000c82:	fbb2 f3f3 	udiv	r3, r2, r3
 c000c86:	613b      	str	r3, [r7, #16]
          break;
 c000c88:	e00b      	b.n	c000ca2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c000c8a:	4a22      	ldr	r2, [pc, #136]	; (c000d14 <SystemCoreClockUpdate+0x154>)
 c000c8c:	68bb      	ldr	r3, [r7, #8]
 c000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 c000c92:	613b      	str	r3, [r7, #16]
          break;
 c000c94:	e005      	b.n	c000ca2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c000c96:	697a      	ldr	r2, [r7, #20]
 c000c98:	68bb      	ldr	r3, [r7, #8]
 c000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 c000c9e:	613b      	str	r3, [r7, #16]
          break;
 c000ca0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c000ca2:	4b18      	ldr	r3, [pc, #96]	; (c000d04 <SystemCoreClockUpdate+0x144>)
 c000ca4:	68db      	ldr	r3, [r3, #12]
 c000ca6:	0a1b      	lsrs	r3, r3, #8
 c000ca8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c000cac:	693b      	ldr	r3, [r7, #16]
 c000cae:	fb02 f303 	mul.w	r3, r2, r3
 c000cb2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c000cb4:	4b13      	ldr	r3, [pc, #76]	; (c000d04 <SystemCoreClockUpdate+0x144>)
 c000cb6:	68db      	ldr	r3, [r3, #12]
 c000cb8:	0e5b      	lsrs	r3, r3, #25
 c000cba:	f003 0303 	and.w	r3, r3, #3
 c000cbe:	3301      	adds	r3, #1
 c000cc0:	005b      	lsls	r3, r3, #1
 c000cc2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c000cc4:	693a      	ldr	r2, [r7, #16]
 c000cc6:	687b      	ldr	r3, [r7, #4]
 c000cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 c000ccc:	4a0f      	ldr	r2, [pc, #60]	; (c000d0c <SystemCoreClockUpdate+0x14c>)
 c000cce:	6013      	str	r3, [r2, #0]
      break;
 c000cd0:	e003      	b.n	c000cda <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c000cd2:	4a0e      	ldr	r2, [pc, #56]	; (c000d0c <SystemCoreClockUpdate+0x14c>)
 c000cd4:	697b      	ldr	r3, [r7, #20]
 c000cd6:	6013      	str	r3, [r2, #0]
      break;
 c000cd8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c000cda:	4b0a      	ldr	r3, [pc, #40]	; (c000d04 <SystemCoreClockUpdate+0x144>)
 c000cdc:	689b      	ldr	r3, [r3, #8]
 c000cde:	091b      	lsrs	r3, r3, #4
 c000ce0:	f003 030f 	and.w	r3, r3, #15
 c000ce4:	4a0c      	ldr	r2, [pc, #48]	; (c000d18 <SystemCoreClockUpdate+0x158>)
 c000ce6:	5cd3      	ldrb	r3, [r2, r3]
 c000ce8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c000cea:	4b08      	ldr	r3, [pc, #32]	; (c000d0c <SystemCoreClockUpdate+0x14c>)
 c000cec:	681a      	ldr	r2, [r3, #0]
 c000cee:	683b      	ldr	r3, [r7, #0]
 c000cf0:	fa22 f303 	lsr.w	r3, r2, r3
 c000cf4:	4a05      	ldr	r2, [pc, #20]	; (c000d0c <SystemCoreClockUpdate+0x14c>)
 c000cf6:	6013      	str	r3, [r2, #0]
}
 c000cf8:	bf00      	nop
 c000cfa:	371c      	adds	r7, #28
 c000cfc:	46bd      	mov	sp, r7
 c000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d02:	4770      	bx	lr
 c000d04:	50021000 	.word	0x50021000
 c000d08:	0c0029a0 	.word	0x0c0029a0
 c000d0c:	30000000 	.word	0x30000000
 c000d10:	00f42400 	.word	0x00f42400
 c000d14:	007a1200 	.word	0x007a1200
 c000d18:	0c002990 	.word	0x0c002990

0c000d1c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c000d1c:	b580      	push	{r7, lr}
 c000d1e:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c000d20:	f7ff ff4e 	bl	c000bc0 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c000d24:	4b1c      	ldr	r3, [pc, #112]	; (c000d98 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c000d26:	681b      	ldr	r3, [r3, #0]
}
 c000d28:	4618      	mov	r0, r3
 c000d2a:	46bd      	mov	sp, r7
 c000d2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000d30:	4671      	mov	r1, lr
 c000d32:	4672      	mov	r2, lr
 c000d34:	4673      	mov	r3, lr
 c000d36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000d3a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000d3e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000d42:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000d46:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000d4a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000d4e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000d52:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000d56:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000d5a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000d5e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000d62:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000d66:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000d72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000d76:	f38e 8c00 	msr	CPSR_fs, lr
 c000d7a:	b410      	push	{r4}
 c000d7c:	eef1 ca10 	vmrs	ip, fpscr
 c000d80:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000d84:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000d88:	ea0c 0c04 	and.w	ip, ip, r4
 c000d8c:	eee1 ca10 	vmsr	fpscr, ip
 c000d90:	bc10      	pop	{r4}
 c000d92:	46f4      	mov	ip, lr
 c000d94:	4774      	bxns	lr
 c000d96:	bf00      	nop
 c000d98:	30000000 	.word	0x30000000

0c000d9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; c000dd4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c000da0:	f7ff fef4 	bl	c000b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c000da4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c000da6:	e003      	b.n	c000db0 <LoopCopyDataInit>

0c000da8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c000da8:	4b0b      	ldr	r3, [pc, #44]	; (c000dd8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c000daa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c000dac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c000dae:	3104      	adds	r1, #4

0c000db0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c000db0:	480a      	ldr	r0, [pc, #40]	; (c000ddc <LoopForever+0xa>)
	ldr	r3, =_edata
 c000db2:	4b0b      	ldr	r3, [pc, #44]	; (c000de0 <LoopForever+0xe>)
	adds	r2, r0, r1
 c000db4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c000db6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c000db8:	d3f6      	bcc.n	c000da8 <CopyDataInit>
	ldr	r2, =_sbss
 c000dba:	4a0a      	ldr	r2, [pc, #40]	; (c000de4 <LoopForever+0x12>)
	b	LoopFillZerobss
 c000dbc:	e002      	b.n	c000dc4 <LoopFillZerobss>

0c000dbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c000dbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c000dc0:	f842 3b04 	str.w	r3, [r2], #4

0c000dc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c000dc4:	4b08      	ldr	r3, [pc, #32]	; (c000de8 <LoopForever+0x16>)
	cmp	r2, r3
 c000dc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c000dc8:	d3f9      	bcc.n	c000dbe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c000dca:	f001 fda9 	bl	c002920 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c000dce:	f7ff fbe7 	bl	c0005a0 <main>

0c000dd2 <LoopForever>:

LoopForever:
    b LoopForever
 c000dd2:	e7fe      	b.n	c000dd2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c000dd4:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c000dd8:	0c0029e8 	.word	0x0c0029e8
	ldr	r0, =_sdata
 c000ddc:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c000de0:	3000000c 	.word	0x3000000c
	ldr	r2, =_sbss
 c000de4:	3000000c 	.word	0x3000000c
	ldr	r3, = _ebss
 c000de8:	300000a8 	.word	0x300000a8

0c000dec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c000dec:	e7fe      	b.n	c000dec <ADC1_2_IRQHandler>

0c000dee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c000dee:	b580      	push	{r7, lr}
 c000df0:	b082      	sub	sp, #8
 c000df2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c000df4:	2300      	movs	r3, #0
 c000df6:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c000df8:	2004      	movs	r0, #4
 c000dfa:	f000 f963 	bl	c0010c4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c000dfe:	f7ff fedf 	bl	c000bc0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c000e02:	2000      	movs	r0, #0
 c000e04:	f000 f80e 	bl	c000e24 <HAL_InitTick>
 c000e08:	4603      	mov	r3, r0
 c000e0a:	2b00      	cmp	r3, #0
 c000e0c:	d002      	beq.n	c000e14 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c000e0e:	2301      	movs	r3, #1
 c000e10:	71fb      	strb	r3, [r7, #7]
 c000e12:	e001      	b.n	c000e18 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c000e14:	f7ff fd9e 	bl	c000954 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c000e18:	79fb      	ldrb	r3, [r7, #7]
}
 c000e1a:	4618      	mov	r0, r3
 c000e1c:	3708      	adds	r7, #8
 c000e1e:	46bd      	mov	sp, r7
 c000e20:	bd80      	pop	{r7, pc}
	...

0c000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c000e24:	b580      	push	{r7, lr}
 c000e26:	b084      	sub	sp, #16
 c000e28:	af00      	add	r7, sp, #0
 c000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c000e2c:	2300      	movs	r3, #0
 c000e2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c000e30:	4b17      	ldr	r3, [pc, #92]	; (c000e90 <HAL_InitTick+0x6c>)
 c000e32:	781b      	ldrb	r3, [r3, #0]
 c000e34:	2b00      	cmp	r3, #0
 c000e36:	d023      	beq.n	c000e80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c000e38:	4b16      	ldr	r3, [pc, #88]	; (c000e94 <HAL_InitTick+0x70>)
 c000e3a:	681a      	ldr	r2, [r3, #0]
 c000e3c:	4b14      	ldr	r3, [pc, #80]	; (c000e90 <HAL_InitTick+0x6c>)
 c000e3e:	781b      	ldrb	r3, [r3, #0]
 c000e40:	4619      	mov	r1, r3
 c000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 c000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 c000e4e:	4618      	mov	r0, r3
 c000e50:	f000 f96b 	bl	c00112a <HAL_SYSTICK_Config>
 c000e54:	4603      	mov	r3, r0
 c000e56:	2b00      	cmp	r3, #0
 c000e58:	d10f      	bne.n	c000e7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c000e5a:	687b      	ldr	r3, [r7, #4]
 c000e5c:	2b07      	cmp	r3, #7
 c000e5e:	d809      	bhi.n	c000e74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c000e60:	2200      	movs	r2, #0
 c000e62:	6879      	ldr	r1, [r7, #4]
 c000e64:	f04f 30ff 	mov.w	r0, #4294967295
 c000e68:	f000 f937 	bl	c0010da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c000e6c:	4a0a      	ldr	r2, [pc, #40]	; (c000e98 <HAL_InitTick+0x74>)
 c000e6e:	687b      	ldr	r3, [r7, #4]
 c000e70:	6013      	str	r3, [r2, #0]
 c000e72:	e007      	b.n	c000e84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c000e74:	2301      	movs	r3, #1
 c000e76:	73fb      	strb	r3, [r7, #15]
 c000e78:	e004      	b.n	c000e84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c000e7a:	2301      	movs	r3, #1
 c000e7c:	73fb      	strb	r3, [r7, #15]
 c000e7e:	e001      	b.n	c000e84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c000e80:	2301      	movs	r3, #1
 c000e82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c000e84:	7bfb      	ldrb	r3, [r7, #15]
}
 c000e86:	4618      	mov	r0, r3
 c000e88:	3710      	adds	r7, #16
 c000e8a:	46bd      	mov	sp, r7
 c000e8c:	bd80      	pop	{r7, pc}
 c000e8e:	bf00      	nop
 c000e90:	30000008 	.word	0x30000008
 c000e94:	30000000 	.word	0x30000000
 c000e98:	30000004 	.word	0x30000004

0c000e9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c000e9c:	b480      	push	{r7}
 c000e9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c000ea0:	4b06      	ldr	r3, [pc, #24]	; (c000ebc <HAL_IncTick+0x20>)
 c000ea2:	781b      	ldrb	r3, [r3, #0]
 c000ea4:	461a      	mov	r2, r3
 c000ea6:	4b06      	ldr	r3, [pc, #24]	; (c000ec0 <HAL_IncTick+0x24>)
 c000ea8:	681b      	ldr	r3, [r3, #0]
 c000eaa:	4413      	add	r3, r2
 c000eac:	4a04      	ldr	r2, [pc, #16]	; (c000ec0 <HAL_IncTick+0x24>)
 c000eae:	6013      	str	r3, [r2, #0]
}
 c000eb0:	bf00      	nop
 c000eb2:	46bd      	mov	sp, r7
 c000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000eb8:	4770      	bx	lr
 c000eba:	bf00      	nop
 c000ebc:	30000008 	.word	0x30000008
 c000ec0:	300000a4 	.word	0x300000a4

0c000ec4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c000ec4:	b480      	push	{r7}
 c000ec6:	af00      	add	r7, sp, #0
  return uwTick;
 c000ec8:	4b03      	ldr	r3, [pc, #12]	; (c000ed8 <HAL_GetTick+0x14>)
 c000eca:	681b      	ldr	r3, [r3, #0]
}
 c000ecc:	4618      	mov	r0, r3
 c000ece:	46bd      	mov	sp, r7
 c000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ed4:	4770      	bx	lr
 c000ed6:	bf00      	nop
 c000ed8:	300000a4 	.word	0x300000a4

0c000edc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 c000edc:	b580      	push	{r7, lr}
 c000ede:	b084      	sub	sp, #16
 c000ee0:	af00      	add	r7, sp, #0
 c000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 c000ee4:	f7ff ffee 	bl	c000ec4 <HAL_GetTick>
 c000ee8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 c000eea:	687b      	ldr	r3, [r7, #4]
 c000eec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 c000eee:	68fb      	ldr	r3, [r7, #12]
 c000ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 c000ef4:	d005      	beq.n	c000f02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 c000ef6:	4b0a      	ldr	r3, [pc, #40]	; (c000f20 <HAL_Delay+0x44>)
 c000ef8:	781b      	ldrb	r3, [r3, #0]
 c000efa:	461a      	mov	r2, r3
 c000efc:	68fb      	ldr	r3, [r7, #12]
 c000efe:	4413      	add	r3, r2
 c000f00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 c000f02:	bf00      	nop
 c000f04:	f7ff ffde 	bl	c000ec4 <HAL_GetTick>
 c000f08:	4602      	mov	r2, r0
 c000f0a:	68bb      	ldr	r3, [r7, #8]
 c000f0c:	1ad3      	subs	r3, r2, r3
 c000f0e:	68fa      	ldr	r2, [r7, #12]
 c000f10:	429a      	cmp	r2, r3
 c000f12:	d8f7      	bhi.n	c000f04 <HAL_Delay+0x28>
  {
  }
}
 c000f14:	bf00      	nop
 c000f16:	bf00      	nop
 c000f18:	3710      	adds	r7, #16
 c000f1a:	46bd      	mov	sp, r7
 c000f1c:	bd80      	pop	{r7, pc}
 c000f1e:	bf00      	nop
 c000f20:	30000008 	.word	0x30000008

0c000f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c000f24:	b480      	push	{r7}
 c000f26:	b085      	sub	sp, #20
 c000f28:	af00      	add	r7, sp, #0
 c000f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c000f2c:	687b      	ldr	r3, [r7, #4]
 c000f2e:	f003 0307 	and.w	r3, r3, #7
 c000f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c000f34:	4b0c      	ldr	r3, [pc, #48]	; (c000f68 <__NVIC_SetPriorityGrouping+0x44>)
 c000f36:	68db      	ldr	r3, [r3, #12]
 c000f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c000f3a:	68ba      	ldr	r2, [r7, #8]
 c000f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c000f40:	4013      	ands	r3, r2
 c000f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c000f44:	68fb      	ldr	r3, [r7, #12]
 c000f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c000f48:	68bb      	ldr	r3, [r7, #8]
 c000f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c000f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c000f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c000f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c000f56:	4a04      	ldr	r2, [pc, #16]	; (c000f68 <__NVIC_SetPriorityGrouping+0x44>)
 c000f58:	68bb      	ldr	r3, [r7, #8]
 c000f5a:	60d3      	str	r3, [r2, #12]
}
 c000f5c:	bf00      	nop
 c000f5e:	3714      	adds	r7, #20
 c000f60:	46bd      	mov	sp, r7
 c000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f66:	4770      	bx	lr
 c000f68:	e000ed00 	.word	0xe000ed00

0c000f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c000f6c:	b480      	push	{r7}
 c000f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c000f70:	4b04      	ldr	r3, [pc, #16]	; (c000f84 <__NVIC_GetPriorityGrouping+0x18>)
 c000f72:	68db      	ldr	r3, [r3, #12]
 c000f74:	0a1b      	lsrs	r3, r3, #8
 c000f76:	f003 0307 	and.w	r3, r3, #7
}
 c000f7a:	4618      	mov	r0, r3
 c000f7c:	46bd      	mov	sp, r7
 c000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f82:	4770      	bx	lr
 c000f84:	e000ed00 	.word	0xe000ed00

0c000f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c000f88:	b480      	push	{r7}
 c000f8a:	b083      	sub	sp, #12
 c000f8c:	af00      	add	r7, sp, #0
 c000f8e:	4603      	mov	r3, r0
 c000f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000f96:	2b00      	cmp	r3, #0
 c000f98:	db0b      	blt.n	c000fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c000f9a:	79fb      	ldrb	r3, [r7, #7]
 c000f9c:	f003 021f 	and.w	r2, r3, #31
 c000fa0:	4907      	ldr	r1, [pc, #28]	; (c000fc0 <__NVIC_EnableIRQ+0x38>)
 c000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000fa6:	095b      	lsrs	r3, r3, #5
 c000fa8:	2001      	movs	r0, #1
 c000faa:	fa00 f202 	lsl.w	r2, r0, r2
 c000fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c000fb2:	bf00      	nop
 c000fb4:	370c      	adds	r7, #12
 c000fb6:	46bd      	mov	sp, r7
 c000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000fbc:	4770      	bx	lr
 c000fbe:	bf00      	nop
 c000fc0:	e000e100 	.word	0xe000e100

0c000fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c000fc4:	b480      	push	{r7}
 c000fc6:	b083      	sub	sp, #12
 c000fc8:	af00      	add	r7, sp, #0
 c000fca:	4603      	mov	r3, r0
 c000fcc:	6039      	str	r1, [r7, #0]
 c000fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c000fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000fd4:	2b00      	cmp	r3, #0
 c000fd6:	db0a      	blt.n	c000fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000fd8:	683b      	ldr	r3, [r7, #0]
 c000fda:	b2da      	uxtb	r2, r3
 c000fdc:	490c      	ldr	r1, [pc, #48]	; (c001010 <__NVIC_SetPriority+0x4c>)
 c000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000fe2:	0152      	lsls	r2, r2, #5
 c000fe4:	b2d2      	uxtb	r2, r2
 c000fe6:	440b      	add	r3, r1
 c000fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c000fec:	e00a      	b.n	c001004 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000fee:	683b      	ldr	r3, [r7, #0]
 c000ff0:	b2da      	uxtb	r2, r3
 c000ff2:	4908      	ldr	r1, [pc, #32]	; (c001014 <__NVIC_SetPriority+0x50>)
 c000ff4:	79fb      	ldrb	r3, [r7, #7]
 c000ff6:	f003 030f 	and.w	r3, r3, #15
 c000ffa:	3b04      	subs	r3, #4
 c000ffc:	0152      	lsls	r2, r2, #5
 c000ffe:	b2d2      	uxtb	r2, r2
 c001000:	440b      	add	r3, r1
 c001002:	761a      	strb	r2, [r3, #24]
}
 c001004:	bf00      	nop
 c001006:	370c      	adds	r7, #12
 c001008:	46bd      	mov	sp, r7
 c00100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00100e:	4770      	bx	lr
 c001010:	e000e100 	.word	0xe000e100
 c001014:	e000ed00 	.word	0xe000ed00

0c001018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001018:	b480      	push	{r7}
 c00101a:	b089      	sub	sp, #36	; 0x24
 c00101c:	af00      	add	r7, sp, #0
 c00101e:	60f8      	str	r0, [r7, #12]
 c001020:	60b9      	str	r1, [r7, #8]
 c001022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001024:	68fb      	ldr	r3, [r7, #12]
 c001026:	f003 0307 	and.w	r3, r3, #7
 c00102a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c00102c:	69fb      	ldr	r3, [r7, #28]
 c00102e:	f1c3 0307 	rsb	r3, r3, #7
 c001032:	2b03      	cmp	r3, #3
 c001034:	bf28      	it	cs
 c001036:	2303      	movcs	r3, #3
 c001038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c00103a:	69fb      	ldr	r3, [r7, #28]
 c00103c:	3303      	adds	r3, #3
 c00103e:	2b06      	cmp	r3, #6
 c001040:	d902      	bls.n	c001048 <NVIC_EncodePriority+0x30>
 c001042:	69fb      	ldr	r3, [r7, #28]
 c001044:	3b04      	subs	r3, #4
 c001046:	e000      	b.n	c00104a <NVIC_EncodePriority+0x32>
 c001048:	2300      	movs	r3, #0
 c00104a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c00104c:	f04f 32ff 	mov.w	r2, #4294967295
 c001050:	69bb      	ldr	r3, [r7, #24]
 c001052:	fa02 f303 	lsl.w	r3, r2, r3
 c001056:	43da      	mvns	r2, r3
 c001058:	68bb      	ldr	r3, [r7, #8]
 c00105a:	401a      	ands	r2, r3
 c00105c:	697b      	ldr	r3, [r7, #20]
 c00105e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001060:	f04f 31ff 	mov.w	r1, #4294967295
 c001064:	697b      	ldr	r3, [r7, #20]
 c001066:	fa01 f303 	lsl.w	r3, r1, r3
 c00106a:	43d9      	mvns	r1, r3
 c00106c:	687b      	ldr	r3, [r7, #4]
 c00106e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001070:	4313      	orrs	r3, r2
         );
}
 c001072:	4618      	mov	r0, r3
 c001074:	3724      	adds	r7, #36	; 0x24
 c001076:	46bd      	mov	sp, r7
 c001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00107c:	4770      	bx	lr
	...

0c001080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c001080:	b580      	push	{r7, lr}
 c001082:	b082      	sub	sp, #8
 c001084:	af00      	add	r7, sp, #0
 c001086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001088:	687b      	ldr	r3, [r7, #4]
 c00108a:	3b01      	subs	r3, #1
 c00108c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c001090:	d301      	bcc.n	c001096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c001092:	2301      	movs	r3, #1
 c001094:	e00f      	b.n	c0010b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c001096:	4a0a      	ldr	r2, [pc, #40]	; (c0010c0 <SysTick_Config+0x40>)
 c001098:	687b      	ldr	r3, [r7, #4]
 c00109a:	3b01      	subs	r3, #1
 c00109c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c00109e:	2107      	movs	r1, #7
 c0010a0:	f04f 30ff 	mov.w	r0, #4294967295
 c0010a4:	f7ff ff8e 	bl	c000fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c0010a8:	4b05      	ldr	r3, [pc, #20]	; (c0010c0 <SysTick_Config+0x40>)
 c0010aa:	2200      	movs	r2, #0
 c0010ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c0010ae:	4b04      	ldr	r3, [pc, #16]	; (c0010c0 <SysTick_Config+0x40>)
 c0010b0:	2207      	movs	r2, #7
 c0010b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c0010b4:	2300      	movs	r3, #0
}
 c0010b6:	4618      	mov	r0, r3
 c0010b8:	3708      	adds	r7, #8
 c0010ba:	46bd      	mov	sp, r7
 c0010bc:	bd80      	pop	{r7, pc}
 c0010be:	bf00      	nop
 c0010c0:	e000e010 	.word	0xe000e010

0c0010c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0010c4:	b580      	push	{r7, lr}
 c0010c6:	b082      	sub	sp, #8
 c0010c8:	af00      	add	r7, sp, #0
 c0010ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c0010cc:	6878      	ldr	r0, [r7, #4]
 c0010ce:	f7ff ff29 	bl	c000f24 <__NVIC_SetPriorityGrouping>
}
 c0010d2:	bf00      	nop
 c0010d4:	3708      	adds	r7, #8
 c0010d6:	46bd      	mov	sp, r7
 c0010d8:	bd80      	pop	{r7, pc}

0c0010da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0010da:	b580      	push	{r7, lr}
 c0010dc:	b086      	sub	sp, #24
 c0010de:	af00      	add	r7, sp, #0
 c0010e0:	4603      	mov	r3, r0
 c0010e2:	60b9      	str	r1, [r7, #8]
 c0010e4:	607a      	str	r2, [r7, #4]
 c0010e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c0010e8:	f7ff ff40 	bl	c000f6c <__NVIC_GetPriorityGrouping>
 c0010ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c0010ee:	687a      	ldr	r2, [r7, #4]
 c0010f0:	68b9      	ldr	r1, [r7, #8]
 c0010f2:	6978      	ldr	r0, [r7, #20]
 c0010f4:	f7ff ff90 	bl	c001018 <NVIC_EncodePriority>
 c0010f8:	4602      	mov	r2, r0
 c0010fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c0010fe:	4611      	mov	r1, r2
 c001100:	4618      	mov	r0, r3
 c001102:	f7ff ff5f 	bl	c000fc4 <__NVIC_SetPriority>
}
 c001106:	bf00      	nop
 c001108:	3718      	adds	r7, #24
 c00110a:	46bd      	mov	sp, r7
 c00110c:	bd80      	pop	{r7, pc}

0c00110e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c00110e:	b580      	push	{r7, lr}
 c001110:	b082      	sub	sp, #8
 c001112:	af00      	add	r7, sp, #0
 c001114:	4603      	mov	r3, r0
 c001116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c001118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00111c:	4618      	mov	r0, r3
 c00111e:	f7ff ff33 	bl	c000f88 <__NVIC_EnableIRQ>
}
 c001122:	bf00      	nop
 c001124:	3708      	adds	r7, #8
 c001126:	46bd      	mov	sp, r7
 c001128:	bd80      	pop	{r7, pc}

0c00112a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c00112a:	b580      	push	{r7, lr}
 c00112c:	b082      	sub	sp, #8
 c00112e:	af00      	add	r7, sp, #0
 c001130:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c001132:	6878      	ldr	r0, [r7, #4]
 c001134:	f7ff ffa4 	bl	c001080 <SysTick_Config>
 c001138:	4603      	mov	r3, r0
}
 c00113a:	4618      	mov	r0, r3
 c00113c:	3708      	adds	r7, #8
 c00113e:	46bd      	mov	sp, r7
 c001140:	bd80      	pop	{r7, pc}
	...

0c001144 <HAL_EXTI_ConfigLineAttributes>:
  *            @arg @ref EXTI_LINE_SEC          Secure-only access
  *            @arg @ref EXTI_LINE_NSEC         Secure/Non-secure access
  * @retval None
  */
void HAL_EXTI_ConfigLineAttributes(uint32_t ExtiLine, uint32_t LineAttributes)
{
 c001144:	b480      	push	{r7}
 c001146:	b089      	sub	sp, #36	; 0x24
 c001148:	af00      	add	r7, sp, #0
 c00114a:	6078      	str	r0, [r7, #4]
 c00114c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));
  assert_param(IS_EXTI_LINE_ATTRIBUTES(LineAttributes));

  /* compute line register offset and line mask */
  offset = ((ExtiLine & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 c00114e:	687b      	ldr	r3, [r7, #4]
 c001150:	0c1b      	lsrs	r3, r3, #16
 c001152:	f003 0301 	and.w	r3, r3, #1
 c001156:	61bb      	str	r3, [r7, #24]
  linepos = (ExtiLine & EXTI_PIN_MASK);
 c001158:	687b      	ldr	r3, [r7, #4]
 c00115a:	f003 031f 	and.w	r3, r3, #31
 c00115e:	617b      	str	r3, [r7, #20]
  maskline = (1UL << linepos);
 c001160:	2201      	movs	r2, #1
 c001162:	697b      	ldr	r3, [r7, #20]
 c001164:	fa02 f303 	lsl.w	r3, r2, r3
 c001168:	613b      	str	r3, [r7, #16]

  /* Configure privilege or non-privilege attributes */
  regaddr = (&EXTI->PRIVCFGR1 + (EXTI_PRIVCFGR_OFFSET * offset));
 c00116a:	69bb      	ldr	r3, [r7, #24]
 c00116c:	011a      	lsls	r2, r3, #4
 c00116e:	4b24      	ldr	r3, [pc, #144]	; (c001200 <HAL_EXTI_ConfigLineAttributes+0xbc>)
 c001170:	4413      	add	r3, r2
 c001172:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
 c001174:	68fb      	ldr	r3, [r7, #12]
 c001176:	681b      	ldr	r3, [r3, #0]
 c001178:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if((LineAttributes & EXTI_LINE_PRIV) == EXTI_LINE_PRIV)
 c00117a:	683a      	ldr	r2, [r7, #0]
 c00117c:	f240 2302 	movw	r3, #514	; 0x202
 c001180:	4013      	ands	r3, r2
 c001182:	f240 2202 	movw	r2, #514	; 0x202
 c001186:	4293      	cmp	r3, r2
 c001188:	d104      	bne.n	c001194 <HAL_EXTI_ConfigLineAttributes+0x50>
  {
    regval |= maskline;
 c00118a:	69fa      	ldr	r2, [r7, #28]
 c00118c:	693b      	ldr	r3, [r7, #16]
 c00118e:	4313      	orrs	r3, r2
 c001190:	61fb      	str	r3, [r7, #28]
 c001192:	e009      	b.n	c0011a8 <HAL_EXTI_ConfigLineAttributes+0x64>
  }
  else if((LineAttributes & EXTI_LINE_NPRIV) == EXTI_LINE_NPRIV)
 c001194:	683b      	ldr	r3, [r7, #0]
 c001196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c00119a:	2b00      	cmp	r3, #0
 c00119c:	d004      	beq.n	c0011a8 <HAL_EXTI_ConfigLineAttributes+0x64>
  {
    regval &= ~maskline;
 c00119e:	693b      	ldr	r3, [r7, #16]
 c0011a0:	43db      	mvns	r3, r3
 c0011a2:	69fa      	ldr	r2, [r7, #28]
 c0011a4:	4013      	ands	r3, r2
 c0011a6:	61fb      	str	r3, [r7, #28]
  {
    /* do nothing */
  }

  /* Store privilege or non-privilege attribute */
  *regaddr = regval;
 c0011a8:	68fb      	ldr	r3, [r7, #12]
 c0011aa:	69fa      	ldr	r2, [r7, #28]
 c0011ac:	601a      	str	r2, [r3, #0]

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)

  /* Configure secure or non-secure attributes */
  regaddr = (&EXTI->SECCFGR1 + (EXTI_SECCFGR_OFFSET * offset));
 c0011ae:	69bb      	ldr	r3, [r7, #24]
 c0011b0:	011a      	lsls	r2, r3, #4
 c0011b2:	4b14      	ldr	r3, [pc, #80]	; (c001204 <HAL_EXTI_ConfigLineAttributes+0xc0>)
 c0011b4:	4413      	add	r3, r2
 c0011b6:	60fb      	str	r3, [r7, #12]
  regval = *regaddr;
 c0011b8:	68fb      	ldr	r3, [r7, #12]
 c0011ba:	681b      	ldr	r3, [r3, #0]
 c0011bc:	61fb      	str	r3, [r7, #28]

  /* Mask or set line */
  if((LineAttributes & EXTI_LINE_SEC) == EXTI_LINE_SEC)
 c0011be:	683a      	ldr	r2, [r7, #0]
 c0011c0:	f240 1301 	movw	r3, #257	; 0x101
 c0011c4:	4013      	ands	r3, r2
 c0011c6:	f240 1201 	movw	r2, #257	; 0x101
 c0011ca:	4293      	cmp	r3, r2
 c0011cc:	d104      	bne.n	c0011d8 <HAL_EXTI_ConfigLineAttributes+0x94>
  {
    regval |= maskline;
 c0011ce:	69fa      	ldr	r2, [r7, #28]
 c0011d0:	693b      	ldr	r3, [r7, #16]
 c0011d2:	4313      	orrs	r3, r2
 c0011d4:	61fb      	str	r3, [r7, #28]
 c0011d6:	e009      	b.n	c0011ec <HAL_EXTI_ConfigLineAttributes+0xa8>
  }
  else if((LineAttributes & EXTI_LINE_NSEC) == EXTI_LINE_NSEC)
 c0011d8:	683b      	ldr	r3, [r7, #0]
 c0011da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0011de:	2b00      	cmp	r3, #0
 c0011e0:	d004      	beq.n	c0011ec <HAL_EXTI_ConfigLineAttributes+0xa8>
  {
    regval &= ~maskline;
 c0011e2:	693b      	ldr	r3, [r7, #16]
 c0011e4:	43db      	mvns	r3, r3
 c0011e6:	69fa      	ldr	r2, [r7, #28]
 c0011e8:	4013      	ands	r3, r2
 c0011ea:	61fb      	str	r3, [r7, #28]
  {
    /* do nothing */
  }

  /* Store secure or non-secure attribute */
  *regaddr = regval;
 c0011ec:	68fb      	ldr	r3, [r7, #12]
 c0011ee:	69fa      	ldr	r2, [r7, #28]
 c0011f0:	601a      	str	r2, [r3, #0]

#endif /* __ARM_FEATURE_CMSE */
}
 c0011f2:	bf00      	nop
 c0011f4:	3724      	adds	r7, #36	; 0x24
 c0011f6:	46bd      	mov	sp, r7
 c0011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011fc:	4770      	bx	lr
 c0011fe:	bf00      	nop
 c001200:	5002f418 	.word	0x5002f418
 c001204:	5002f414 	.word	0x5002f414

0c001208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c001208:	b480      	push	{r7}
 c00120a:	b087      	sub	sp, #28
 c00120c:	af00      	add	r7, sp, #0
 c00120e:	6078      	str	r0, [r7, #4]
 c001210:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c001212:	2300      	movs	r3, #0
 c001214:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001216:	e158      	b.n	c0014ca <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c001218:	683b      	ldr	r3, [r7, #0]
 c00121a:	681a      	ldr	r2, [r3, #0]
 c00121c:	2101      	movs	r1, #1
 c00121e:	697b      	ldr	r3, [r7, #20]
 c001220:	fa01 f303 	lsl.w	r3, r1, r3
 c001224:	4013      	ands	r3, r2
 c001226:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 c001228:	68fb      	ldr	r3, [r7, #12]
 c00122a:	2b00      	cmp	r3, #0
 c00122c:	f000 814a 	beq.w	c0014c4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001230:	683b      	ldr	r3, [r7, #0]
 c001232:	685b      	ldr	r3, [r3, #4]
 c001234:	2b01      	cmp	r3, #1
 c001236:	d00b      	beq.n	c001250 <HAL_GPIO_Init+0x48>
 c001238:	683b      	ldr	r3, [r7, #0]
 c00123a:	685b      	ldr	r3, [r3, #4]
 c00123c:	2b02      	cmp	r3, #2
 c00123e:	d007      	beq.n	c001250 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001240:	683b      	ldr	r3, [r7, #0]
 c001242:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 c001244:	2b11      	cmp	r3, #17
 c001246:	d003      	beq.n	c001250 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c001248:	683b      	ldr	r3, [r7, #0]
 c00124a:	685b      	ldr	r3, [r3, #4]
 c00124c:	2b12      	cmp	r3, #18
 c00124e:	d130      	bne.n	c0012b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c001250:	687b      	ldr	r3, [r7, #4]
 c001252:	689b      	ldr	r3, [r3, #8]
 c001254:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c001256:	697b      	ldr	r3, [r7, #20]
 c001258:	005b      	lsls	r3, r3, #1
 c00125a:	2203      	movs	r2, #3
 c00125c:	fa02 f303 	lsl.w	r3, r2, r3
 c001260:	43db      	mvns	r3, r3
 c001262:	693a      	ldr	r2, [r7, #16]
 c001264:	4013      	ands	r3, r2
 c001266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c001268:	683b      	ldr	r3, [r7, #0]
 c00126a:	68da      	ldr	r2, [r3, #12]
 c00126c:	697b      	ldr	r3, [r7, #20]
 c00126e:	005b      	lsls	r3, r3, #1
 c001270:	fa02 f303 	lsl.w	r3, r2, r3
 c001274:	693a      	ldr	r2, [r7, #16]
 c001276:	4313      	orrs	r3, r2
 c001278:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c00127a:	687b      	ldr	r3, [r7, #4]
 c00127c:	693a      	ldr	r2, [r7, #16]
 c00127e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c001280:	687b      	ldr	r3, [r7, #4]
 c001282:	685b      	ldr	r3, [r3, #4]
 c001284:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c001286:	2201      	movs	r2, #1
 c001288:	697b      	ldr	r3, [r7, #20]
 c00128a:	fa02 f303 	lsl.w	r3, r2, r3
 c00128e:	43db      	mvns	r3, r3
 c001290:	693a      	ldr	r2, [r7, #16]
 c001292:	4013      	ands	r3, r2
 c001294:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 c001296:	683b      	ldr	r3, [r7, #0]
 c001298:	685b      	ldr	r3, [r3, #4]
 c00129a:	091b      	lsrs	r3, r3, #4
 c00129c:	f003 0201 	and.w	r2, r3, #1
 c0012a0:	697b      	ldr	r3, [r7, #20]
 c0012a2:	fa02 f303 	lsl.w	r3, r2, r3
 c0012a6:	693a      	ldr	r2, [r7, #16]
 c0012a8:	4313      	orrs	r3, r2
 c0012aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c0012ac:	687b      	ldr	r3, [r7, #4]
 c0012ae:	693a      	ldr	r2, [r7, #16]
 c0012b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 c0012b2:	687b      	ldr	r3, [r7, #4]
 c0012b4:	68db      	ldr	r3, [r3, #12]
 c0012b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c0012b8:	697b      	ldr	r3, [r7, #20]
 c0012ba:	005b      	lsls	r3, r3, #1
 c0012bc:	2203      	movs	r2, #3
 c0012be:	fa02 f303 	lsl.w	r3, r2, r3
 c0012c2:	43db      	mvns	r3, r3
 c0012c4:	693a      	ldr	r2, [r7, #16]
 c0012c6:	4013      	ands	r3, r2
 c0012c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 c0012ca:	683b      	ldr	r3, [r7, #0]
 c0012cc:	689a      	ldr	r2, [r3, #8]
 c0012ce:	697b      	ldr	r3, [r7, #20]
 c0012d0:	005b      	lsls	r3, r3, #1
 c0012d2:	fa02 f303 	lsl.w	r3, r2, r3
 c0012d6:	693a      	ldr	r2, [r7, #16]
 c0012d8:	4313      	orrs	r3, r2
 c0012da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 c0012dc:	687b      	ldr	r3, [r7, #4]
 c0012de:	693a      	ldr	r2, [r7, #16]
 c0012e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 c0012e2:	683b      	ldr	r3, [r7, #0]
 c0012e4:	685b      	ldr	r3, [r3, #4]
 c0012e6:	2b02      	cmp	r3, #2
 c0012e8:	d003      	beq.n	c0012f2 <HAL_GPIO_Init+0xea>
 c0012ea:	683b      	ldr	r3, [r7, #0]
 c0012ec:	685b      	ldr	r3, [r3, #4]
 c0012ee:	2b12      	cmp	r3, #18
 c0012f0:	d123      	bne.n	c00133a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c0012f2:	697b      	ldr	r3, [r7, #20]
 c0012f4:	08da      	lsrs	r2, r3, #3
 c0012f6:	687b      	ldr	r3, [r7, #4]
 c0012f8:	3208      	adds	r2, #8
 c0012fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c001300:	697b      	ldr	r3, [r7, #20]
 c001302:	f003 0307 	and.w	r3, r3, #7
 c001306:	009b      	lsls	r3, r3, #2
 c001308:	220f      	movs	r2, #15
 c00130a:	fa02 f303 	lsl.w	r3, r2, r3
 c00130e:	43db      	mvns	r3, r3
 c001310:	693a      	ldr	r2, [r7, #16]
 c001312:	4013      	ands	r3, r2
 c001314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c001316:	683b      	ldr	r3, [r7, #0]
 c001318:	691a      	ldr	r2, [r3, #16]
 c00131a:	697b      	ldr	r3, [r7, #20]
 c00131c:	f003 0307 	and.w	r3, r3, #7
 c001320:	009b      	lsls	r3, r3, #2
 c001322:	fa02 f303 	lsl.w	r3, r2, r3
 c001326:	693a      	ldr	r2, [r7, #16]
 c001328:	4313      	orrs	r3, r2
 c00132a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c00132c:	697b      	ldr	r3, [r7, #20]
 c00132e:	08da      	lsrs	r2, r3, #3
 c001330:	687b      	ldr	r3, [r7, #4]
 c001332:	3208      	adds	r2, #8
 c001334:	6939      	ldr	r1, [r7, #16]
 c001336:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c00133a:	687b      	ldr	r3, [r7, #4]
 c00133c:	681b      	ldr	r3, [r3, #0]
 c00133e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c001340:	697b      	ldr	r3, [r7, #20]
 c001342:	005b      	lsls	r3, r3, #1
 c001344:	2203      	movs	r2, #3
 c001346:	fa02 f303 	lsl.w	r3, r2, r3
 c00134a:	43db      	mvns	r3, r3
 c00134c:	693a      	ldr	r2, [r7, #16]
 c00134e:	4013      	ands	r3, r2
 c001350:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c001352:	683b      	ldr	r3, [r7, #0]
 c001354:	685b      	ldr	r3, [r3, #4]
 c001356:	f003 0203 	and.w	r2, r3, #3
 c00135a:	697b      	ldr	r3, [r7, #20]
 c00135c:	005b      	lsls	r3, r3, #1
 c00135e:	fa02 f303 	lsl.w	r3, r2, r3
 c001362:	693a      	ldr	r2, [r7, #16]
 c001364:	4313      	orrs	r3, r2
 c001366:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c001368:	687b      	ldr	r3, [r7, #4]
 c00136a:	693a      	ldr	r2, [r7, #16]
 c00136c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 c00136e:	683b      	ldr	r3, [r7, #0]
 c001370:	685b      	ldr	r3, [r3, #4]
 c001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001376:	2b00      	cmp	r3, #0
 c001378:	f000 80a4 	beq.w	c0014c4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c00137c:	4a5a      	ldr	r2, [pc, #360]	; (c0014e8 <HAL_GPIO_Init+0x2e0>)
 c00137e:	697b      	ldr	r3, [r7, #20]
 c001380:	089b      	lsrs	r3, r3, #2
 c001382:	3318      	adds	r3, #24
 c001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001388:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c00138a:	697b      	ldr	r3, [r7, #20]
 c00138c:	f003 0303 	and.w	r3, r3, #3
 c001390:	00db      	lsls	r3, r3, #3
 c001392:	220f      	movs	r2, #15
 c001394:	fa02 f303 	lsl.w	r3, r2, r3
 c001398:	43db      	mvns	r3, r3
 c00139a:	693a      	ldr	r2, [r7, #16]
 c00139c:	4013      	ands	r3, r2
 c00139e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c0013a0:	687b      	ldr	r3, [r7, #4]
 c0013a2:	4a52      	ldr	r2, [pc, #328]	; (c0014ec <HAL_GPIO_Init+0x2e4>)
 c0013a4:	4293      	cmp	r3, r2
 c0013a6:	d025      	beq.n	c0013f4 <HAL_GPIO_Init+0x1ec>
 c0013a8:	687b      	ldr	r3, [r7, #4]
 c0013aa:	4a51      	ldr	r2, [pc, #324]	; (c0014f0 <HAL_GPIO_Init+0x2e8>)
 c0013ac:	4293      	cmp	r3, r2
 c0013ae:	d01f      	beq.n	c0013f0 <HAL_GPIO_Init+0x1e8>
 c0013b0:	687b      	ldr	r3, [r7, #4]
 c0013b2:	4a50      	ldr	r2, [pc, #320]	; (c0014f4 <HAL_GPIO_Init+0x2ec>)
 c0013b4:	4293      	cmp	r3, r2
 c0013b6:	d019      	beq.n	c0013ec <HAL_GPIO_Init+0x1e4>
 c0013b8:	687b      	ldr	r3, [r7, #4]
 c0013ba:	4a4f      	ldr	r2, [pc, #316]	; (c0014f8 <HAL_GPIO_Init+0x2f0>)
 c0013bc:	4293      	cmp	r3, r2
 c0013be:	d013      	beq.n	c0013e8 <HAL_GPIO_Init+0x1e0>
 c0013c0:	687b      	ldr	r3, [r7, #4]
 c0013c2:	4a4e      	ldr	r2, [pc, #312]	; (c0014fc <HAL_GPIO_Init+0x2f4>)
 c0013c4:	4293      	cmp	r3, r2
 c0013c6:	d00d      	beq.n	c0013e4 <HAL_GPIO_Init+0x1dc>
 c0013c8:	687b      	ldr	r3, [r7, #4]
 c0013ca:	4a4d      	ldr	r2, [pc, #308]	; (c001500 <HAL_GPIO_Init+0x2f8>)
 c0013cc:	4293      	cmp	r3, r2
 c0013ce:	d007      	beq.n	c0013e0 <HAL_GPIO_Init+0x1d8>
 c0013d0:	687b      	ldr	r3, [r7, #4]
 c0013d2:	4a4c      	ldr	r2, [pc, #304]	; (c001504 <HAL_GPIO_Init+0x2fc>)
 c0013d4:	4293      	cmp	r3, r2
 c0013d6:	d101      	bne.n	c0013dc <HAL_GPIO_Init+0x1d4>
 c0013d8:	2306      	movs	r3, #6
 c0013da:	e00c      	b.n	c0013f6 <HAL_GPIO_Init+0x1ee>
 c0013dc:	2307      	movs	r3, #7
 c0013de:	e00a      	b.n	c0013f6 <HAL_GPIO_Init+0x1ee>
 c0013e0:	2305      	movs	r3, #5
 c0013e2:	e008      	b.n	c0013f6 <HAL_GPIO_Init+0x1ee>
 c0013e4:	2304      	movs	r3, #4
 c0013e6:	e006      	b.n	c0013f6 <HAL_GPIO_Init+0x1ee>
 c0013e8:	2303      	movs	r3, #3
 c0013ea:	e004      	b.n	c0013f6 <HAL_GPIO_Init+0x1ee>
 c0013ec:	2302      	movs	r3, #2
 c0013ee:	e002      	b.n	c0013f6 <HAL_GPIO_Init+0x1ee>
 c0013f0:	2301      	movs	r3, #1
 c0013f2:	e000      	b.n	c0013f6 <HAL_GPIO_Init+0x1ee>
 c0013f4:	2300      	movs	r3, #0
 c0013f6:	697a      	ldr	r2, [r7, #20]
 c0013f8:	f002 0203 	and.w	r2, r2, #3
 c0013fc:	00d2      	lsls	r2, r2, #3
 c0013fe:	4093      	lsls	r3, r2
 c001400:	693a      	ldr	r2, [r7, #16]
 c001402:	4313      	orrs	r3, r2
 c001404:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c001406:	4938      	ldr	r1, [pc, #224]	; (c0014e8 <HAL_GPIO_Init+0x2e0>)
 c001408:	697b      	ldr	r3, [r7, #20]
 c00140a:	089b      	lsrs	r3, r3, #2
 c00140c:	3318      	adds	r3, #24
 c00140e:	693a      	ldr	r2, [r7, #16]
 c001410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 c001414:	4b34      	ldr	r3, [pc, #208]	; (c0014e8 <HAL_GPIO_Init+0x2e0>)
 c001416:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c00141a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00141c:	68fb      	ldr	r3, [r7, #12]
 c00141e:	43db      	mvns	r3, r3
 c001420:	693a      	ldr	r2, [r7, #16]
 c001422:	4013      	ands	r3, r2
 c001424:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 c001426:	683b      	ldr	r3, [r7, #0]
 c001428:	685b      	ldr	r3, [r3, #4]
 c00142a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00142e:	2b00      	cmp	r3, #0
 c001430:	d003      	beq.n	c00143a <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 c001432:	693a      	ldr	r2, [r7, #16]
 c001434:	68fb      	ldr	r3, [r7, #12]
 c001436:	4313      	orrs	r3, r2
 c001438:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c00143a:	4a2b      	ldr	r2, [pc, #172]	; (c0014e8 <HAL_GPIO_Init+0x2e0>)
 c00143c:	693b      	ldr	r3, [r7, #16]
 c00143e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 c001442:	4b29      	ldr	r3, [pc, #164]	; (c0014e8 <HAL_GPIO_Init+0x2e0>)
 c001444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c001448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00144a:	68fb      	ldr	r3, [r7, #12]
 c00144c:	43db      	mvns	r3, r3
 c00144e:	693a      	ldr	r2, [r7, #16]
 c001450:	4013      	ands	r3, r2
 c001452:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 c001454:	683b      	ldr	r3, [r7, #0]
 c001456:	685b      	ldr	r3, [r3, #4]
 c001458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00145c:	2b00      	cmp	r3, #0
 c00145e:	d003      	beq.n	c001468 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 c001460:	693a      	ldr	r2, [r7, #16]
 c001462:	68fb      	ldr	r3, [r7, #12]
 c001464:	4313      	orrs	r3, r2
 c001466:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c001468:	4a1f      	ldr	r2, [pc, #124]	; (c0014e8 <HAL_GPIO_Init+0x2e0>)
 c00146a:	693b      	ldr	r3, [r7, #16]
 c00146c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c001470:	4b1d      	ldr	r3, [pc, #116]	; (c0014e8 <HAL_GPIO_Init+0x2e0>)
 c001472:	681b      	ldr	r3, [r3, #0]
 c001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001476:	68fb      	ldr	r3, [r7, #12]
 c001478:	43db      	mvns	r3, r3
 c00147a:	693a      	ldr	r2, [r7, #16]
 c00147c:	4013      	ands	r3, r2
 c00147e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 c001480:	683b      	ldr	r3, [r7, #0]
 c001482:	685b      	ldr	r3, [r3, #4]
 c001484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c001488:	2b00      	cmp	r3, #0
 c00148a:	d003      	beq.n	c001494 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 c00148c:	693a      	ldr	r2, [r7, #16]
 c00148e:	68fb      	ldr	r3, [r7, #12]
 c001490:	4313      	orrs	r3, r2
 c001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c001494:	4a14      	ldr	r2, [pc, #80]	; (c0014e8 <HAL_GPIO_Init+0x2e0>)
 c001496:	693b      	ldr	r3, [r7, #16]
 c001498:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c00149a:	4b13      	ldr	r3, [pc, #76]	; (c0014e8 <HAL_GPIO_Init+0x2e0>)
 c00149c:	685b      	ldr	r3, [r3, #4]
 c00149e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0014a0:	68fb      	ldr	r3, [r7, #12]
 c0014a2:	43db      	mvns	r3, r3
 c0014a4:	693a      	ldr	r2, [r7, #16]
 c0014a6:	4013      	ands	r3, r2
 c0014a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 c0014aa:	683b      	ldr	r3, [r7, #0]
 c0014ac:	685b      	ldr	r3, [r3, #4]
 c0014ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c0014b2:	2b00      	cmp	r3, #0
 c0014b4:	d003      	beq.n	c0014be <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 c0014b6:	693a      	ldr	r2, [r7, #16]
 c0014b8:	68fb      	ldr	r3, [r7, #12]
 c0014ba:	4313      	orrs	r3, r2
 c0014bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c0014be:	4a0a      	ldr	r2, [pc, #40]	; (c0014e8 <HAL_GPIO_Init+0x2e0>)
 c0014c0:	693b      	ldr	r3, [r7, #16]
 c0014c2:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 c0014c4:	697b      	ldr	r3, [r7, #20]
 c0014c6:	3301      	adds	r3, #1
 c0014c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0014ca:	683b      	ldr	r3, [r7, #0]
 c0014cc:	681a      	ldr	r2, [r3, #0]
 c0014ce:	697b      	ldr	r3, [r7, #20]
 c0014d0:	fa22 f303 	lsr.w	r3, r2, r3
 c0014d4:	2b00      	cmp	r3, #0
 c0014d6:	f47f ae9f 	bne.w	c001218 <HAL_GPIO_Init+0x10>
  }
}
 c0014da:	bf00      	nop
 c0014dc:	bf00      	nop
 c0014de:	371c      	adds	r7, #28
 c0014e0:	46bd      	mov	sp, r7
 c0014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0014e6:	4770      	bx	lr
 c0014e8:	5002f400 	.word	0x5002f400
 c0014ec:	52020000 	.word	0x52020000
 c0014f0:	52020400 	.word	0x52020400
 c0014f4:	52020800 	.word	0x52020800
 c0014f8:	52020c00 	.word	0x52020c00
 c0014fc:	52021000 	.word	0x52021000
 c001500:	52021400 	.word	0x52021400
 c001504:	52021800 	.word	0x52021800

0c001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c001508:	b480      	push	{r7}
 c00150a:	b083      	sub	sp, #12
 c00150c:	af00      	add	r7, sp, #0
 c00150e:	6078      	str	r0, [r7, #4]
 c001510:	460b      	mov	r3, r1
 c001512:	807b      	strh	r3, [r7, #2]
 c001514:	4613      	mov	r3, r2
 c001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c001518:	787b      	ldrb	r3, [r7, #1]
 c00151a:	2b00      	cmp	r3, #0
 c00151c:	d003      	beq.n	c001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c00151e:	887a      	ldrh	r2, [r7, #2]
 c001520:	687b      	ldr	r3, [r7, #4]
 c001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c001524:	e002      	b.n	c00152c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c001526:	887a      	ldrh	r2, [r7, #2]
 c001528:	687b      	ldr	r3, [r7, #4]
 c00152a:	629a      	str	r2, [r3, #40]	; 0x28
}
 c00152c:	bf00      	nop
 c00152e:	370c      	adds	r7, #12
 c001530:	46bd      	mov	sp, r7
 c001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001536:	4770      	bx	lr

0c001538 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 c001538:	b480      	push	{r7}
 c00153a:	b085      	sub	sp, #20
 c00153c:	af00      	add	r7, sp, #0
 c00153e:	6078      	str	r0, [r7, #4]
 c001540:	460b      	mov	r3, r1
 c001542:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 c001544:	687b      	ldr	r3, [r7, #4]
 c001546:	695b      	ldr	r3, [r3, #20]
 c001548:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 c00154a:	887a      	ldrh	r2, [r7, #2]
 c00154c:	68fb      	ldr	r3, [r7, #12]
 c00154e:	4013      	ands	r3, r2
 c001550:	041a      	lsls	r2, r3, #16
 c001552:	68fb      	ldr	r3, [r7, #12]
 c001554:	43d9      	mvns	r1, r3
 c001556:	887b      	ldrh	r3, [r7, #2]
 c001558:	400b      	ands	r3, r1
 c00155a:	431a      	orrs	r2, r3
 c00155c:	687b      	ldr	r3, [r7, #4]
 c00155e:	619a      	str	r2, [r3, #24]
}
 c001560:	bf00      	nop
 c001562:	3714      	adds	r7, #20
 c001564:	46bd      	mov	sp, r7
 c001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00156a:	4770      	bx	lr

0c00156c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 c00156c:	b580      	push	{r7, lr}
 c00156e:	b082      	sub	sp, #8
 c001570:	af00      	add	r7, sp, #0
 c001572:	4603      	mov	r3, r0
 c001574:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 c001576:	4b0f      	ldr	r3, [pc, #60]	; (c0015b4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 c001578:	68da      	ldr	r2, [r3, #12]
 c00157a:	88fb      	ldrh	r3, [r7, #6]
 c00157c:	4013      	ands	r3, r2
 c00157e:	2b00      	cmp	r3, #0
 c001580:	d006      	beq.n	c001590 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 c001582:	4a0c      	ldr	r2, [pc, #48]	; (c0015b4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 c001584:	88fb      	ldrh	r3, [r7, #6]
 c001586:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 c001588:	88fb      	ldrh	r3, [r7, #6]
 c00158a:	4618      	mov	r0, r3
 c00158c:	f000 f814 	bl	c0015b8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if(__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 c001590:	4b08      	ldr	r3, [pc, #32]	; (c0015b4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 c001592:	691a      	ldr	r2, [r3, #16]
 c001594:	88fb      	ldrh	r3, [r7, #6]
 c001596:	4013      	ands	r3, r2
 c001598:	2b00      	cmp	r3, #0
 c00159a:	d006      	beq.n	c0015aa <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 c00159c:	4a05      	ldr	r2, [pc, #20]	; (c0015b4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 c00159e:	88fb      	ldrh	r3, [r7, #6]
 c0015a0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 c0015a2:	88fb      	ldrh	r3, [r7, #6]
 c0015a4:	4618      	mov	r0, r3
 c0015a6:	f000 f812 	bl	c0015ce <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 c0015aa:	bf00      	nop
 c0015ac:	3708      	adds	r7, #8
 c0015ae:	46bd      	mov	sp, r7
 c0015b0:	bd80      	pop	{r7, pc}
 c0015b2:	bf00      	nop
 c0015b4:	5002f400 	.word	0x5002f400

0c0015b8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 c0015b8:	b480      	push	{r7}
 c0015ba:	b083      	sub	sp, #12
 c0015bc:	af00      	add	r7, sp, #0
 c0015be:	4603      	mov	r3, r0
 c0015c0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 c0015c2:	bf00      	nop
 c0015c4:	370c      	adds	r7, #12
 c0015c6:	46bd      	mov	sp, r7
 c0015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015cc:	4770      	bx	lr

0c0015ce <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 c0015ce:	b480      	push	{r7}
 c0015d0:	b083      	sub	sp, #12
 c0015d2:	af00      	add	r7, sp, #0
 c0015d4:	4603      	mov	r3, r0
 c0015d6:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 c0015d8:	bf00      	nop
 c0015da:	370c      	adds	r7, #12
 c0015dc:	46bd      	mov	sp, r7
 c0015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015e2:	4770      	bx	lr

0c0015e4 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c0015e4:	b480      	push	{r7}
 c0015e6:	b089      	sub	sp, #36	; 0x24
 c0015e8:	af00      	add	r7, sp, #0
 c0015ea:	60f8      	str	r0, [r7, #12]
 c0015ec:	460b      	mov	r3, r1
 c0015ee:	607a      	str	r2, [r7, #4]
 c0015f0:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c0015f2:	2300      	movs	r3, #0
 c0015f4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c0015f6:	68fb      	ldr	r3, [r7, #12]
 c0015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0015fa:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c0015fc:	e01b      	b.n	c001636 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c0015fe:	897a      	ldrh	r2, [r7, #10]
 c001600:	2101      	movs	r1, #1
 c001602:	69fb      	ldr	r3, [r7, #28]
 c001604:	fa01 f303 	lsl.w	r3, r1, r3
 c001608:	4013      	ands	r3, r2
 c00160a:	617b      	str	r3, [r7, #20]

    if(iocurrent != 0U)
 c00160c:	697b      	ldr	r3, [r7, #20]
 c00160e:	2b00      	cmp	r3, #0
 c001610:	d00e      	beq.n	c001630 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c001612:	2201      	movs	r2, #1
 c001614:	69fb      	ldr	r3, [r7, #28]
 c001616:	fa02 f303 	lsl.w	r3, r2, r3
 c00161a:	43db      	mvns	r3, r3
 c00161c:	69ba      	ldr	r2, [r7, #24]
 c00161e:	4013      	ands	r3, r2
 c001620:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c001622:	687a      	ldr	r2, [r7, #4]
 c001624:	69fb      	ldr	r3, [r7, #28]
 c001626:	fa02 f303 	lsl.w	r3, r2, r3
 c00162a:	69ba      	ldr	r2, [r7, #24]
 c00162c:	4313      	orrs	r3, r2
 c00162e:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c001630:	69fb      	ldr	r3, [r7, #28]
 c001632:	3301      	adds	r3, #1
 c001634:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c001636:	897a      	ldrh	r2, [r7, #10]
 c001638:	69fb      	ldr	r3, [r7, #28]
 c00163a:	fa42 f303 	asr.w	r3, r2, r3
 c00163e:	2b00      	cmp	r3, #0
 c001640:	d1dd      	bne.n	c0015fe <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c001642:	68fb      	ldr	r3, [r7, #12]
 c001644:	69ba      	ldr	r2, [r7, #24]
 c001646:	631a      	str	r2, [r3, #48]	; 0x30
}
 c001648:	bf00      	nop
 c00164a:	3724      	adds	r7, #36	; 0x24
 c00164c:	46bd      	mov	sp, r7
 c00164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001652:	4770      	bx	lr

0c001654 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c001654:	b480      	push	{r7}
 c001656:	b089      	sub	sp, #36	; 0x24
 c001658:	af00      	add	r7, sp, #0
 c00165a:	6078      	str	r0, [r7, #4]
 c00165c:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if (   (     !(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00165e:	687b      	ldr	r3, [r7, #4]
 c001660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001664:	d00b      	beq.n	c00167e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c001666:	687b      	ldr	r3, [r7, #4]
 c001668:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c00166c:	d007      	beq.n	c00167e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
           &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c00166e:	687b      	ldr	r3, [r7, #4]
 c001670:	4a36      	ldr	r2, [pc, #216]	; (c00174c <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c001672:	4293      	cmp	r3, r2
 c001674:	d003      	beq.n	c00167e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c001676:	687b      	ldr	r3, [r7, #4]
 c001678:	4a35      	ldr	r2, [pc, #212]	; (c001750 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c00167a:	4293      	cmp	r3, r2
 c00167c:	d111      	bne.n	c0016a2 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || (   (    pMPCBB_desc->SecureRWIllegalMode
 c00167e:	683b      	ldr	r3, [r7, #0]
 c001680:	681b      	ldr	r3, [r3, #0]
 c001682:	2b00      	cmp	r3, #0
 c001684:	d004      	beq.n	c001690 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
               != GTZC_MPCBB_SRWILADIS_ENABLE)
          && (    pMPCBB_desc->SecureRWIllegalMode
 c001686:	683b      	ldr	r3, [r7, #0]
 c001688:	681b      	ldr	r3, [r3, #0]
 c00168a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c00168e:	d108      	bne.n	c0016a2 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
               != GTZC_MPCBB_SRWILADIS_DISABLE))
      || (   (    pMPCBB_desc->InvertSecureState
 c001690:	683b      	ldr	r3, [r7, #0]
 c001692:	685b      	ldr	r3, [r3, #4]
 c001694:	2b00      	cmp	r3, #0
 c001696:	d006      	beq.n	c0016a6 <HAL_GTZC_MPCBB_ConfigMem+0x52>
               != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
          && (    pMPCBB_desc->InvertSecureState
 c001698:	683b      	ldr	r3, [r7, #0]
 c00169a:	685b      	ldr	r3, [r3, #4]
 c00169c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c0016a0:	d001      	beq.n	c0016a6 <HAL_GTZC_MPCBB_ConfigMem+0x52>
               != GTZC_MPCBB_INVSECSTATE_INVERTED)))
  {
    return HAL_ERROR;
 c0016a2:	2301      	movs	r3, #1
 c0016a4:	e04b      	b.n	c00173e <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c0016a6:	683b      	ldr	r3, [r7, #0]
 c0016a8:	685b      	ldr	r3, [r3, #4]
 c0016aa:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c0016ac:	683b      	ldr	r3, [r7, #0]
 c0016ae:	681b      	ldr	r3, [r3, #0]
 c0016b0:	693a      	ldr	r2, [r7, #16]
 c0016b2:	4313      	orrs	r3, r2
 c0016b4:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0016b6:	687b      	ldr	r3, [r7, #4]
 c0016b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0016bc:	d003      	beq.n	c0016c6 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c0016be:	687b      	ldr	r3, [r7, #4]
 c0016c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0016c4:	d105      	bne.n	c0016d2 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c0016c6:	4b23      	ldr	r3, [pc, #140]	; (c001754 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c0016c8:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c0016ca:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c0016ce:	61bb      	str	r3, [r7, #24]
 c0016d0:	e004      	b.n	c0016dc <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c0016d2:	4b21      	ldr	r3, [pc, #132]	; (c001758 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c0016d4:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c0016d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c0016da:	61bb      	str	r3, [r7, #24]
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c0016dc:	69fb      	ldr	r3, [r7, #28]
 c0016de:	681b      	ldr	r3, [r3, #0]
 c0016e0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c0016e4:	693b      	ldr	r3, [r7, #16]
 c0016e6:	431a      	orrs	r2, r3
 c0016e8:	69fb      	ldr	r3, [r7, #28]
 c0016ea:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);
  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c0016ec:	69bb      	ldr	r3, [r7, #24]
 c0016ee:	0b5b      	lsrs	r3, r3, #13
 c0016f0:	2201      	movs	r2, #1
 c0016f2:	fa02 f303 	lsl.w	r3, r2, r3
 c0016f6:	3b01      	subs	r3, #1
 c0016f8:	60fb      	str	r3, [r7, #12]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c0016fa:	69fb      	ldr	r3, [r7, #28]
 c0016fc:	691a      	ldr	r2, [r3, #16]
 c0016fe:	68fb      	ldr	r3, [r7, #12]
 c001700:	43db      	mvns	r3, r3
 c001702:	401a      	ands	r2, r3
 c001704:	683b      	ldr	r3, [r7, #0]
 c001706:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c001708:	431a      	orrs	r2, r3
 c00170a:	69fb      	ldr	r3, [r7, #28]
 c00170c:	611a      	str	r2, [r3, #16]

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c00170e:	69bb      	ldr	r3, [r7, #24]
 c001710:	0b5b      	lsrs	r3, r3, #13
 c001712:	60bb      	str	r3, [r7, #8]
  for (i = 0U; i < size_in_superblocks; i++)
 c001714:	2300      	movs	r3, #0
 c001716:	617b      	str	r3, [r7, #20]
 c001718:	e00c      	b.n	c001734 <HAL_GTZC_MPCBB_ConfigMem+0xe0>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c00171a:	683b      	ldr	r3, [r7, #0]
 c00171c:	697a      	ldr	r2, [r7, #20]
 c00171e:	3202      	adds	r2, #2
 c001720:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c001724:	69fb      	ldr	r3, [r7, #28]
 c001726:	697a      	ldr	r2, [r7, #20]
 c001728:	3240      	adds	r2, #64	; 0x40
 c00172a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c00172e:	697b      	ldr	r3, [r7, #20]
 c001730:	3301      	adds	r3, #1
 c001732:	617b      	str	r3, [r7, #20]
 c001734:	697a      	ldr	r2, [r7, #20]
 c001736:	68bb      	ldr	r3, [r7, #8]
 c001738:	429a      	cmp	r2, r3
 c00173a:	d3ee      	bcc.n	c00171a <HAL_GTZC_MPCBB_ConfigMem+0xc6>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  return HAL_OK;
 c00173c:	2300      	movs	r3, #0
}
 c00173e:	4618      	mov	r0, r3
 c001740:	3724      	adds	r7, #36	; 0x24
 c001742:	46bd      	mov	sp, r7
 c001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001748:	4770      	bx	lr
 c00174a:	bf00      	nop
 c00174c:	20030000 	.word	0x20030000
 c001750:	30030000 	.word	0x30030000
 c001754:	50032c00 	.word	0x50032c00
 c001758:	50033000 	.word	0x50033000

0c00175c <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c00175c:	b580      	push	{r7, lr}
 c00175e:	b084      	sub	sp, #16
 c001760:	af00      	add	r7, sp, #0
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c001762:	4b3f      	ldr	r3, [pc, #252]	; (c001860 <HAL_GTZC_IRQHandler+0x104>)
 c001764:	681b      	ldr	r3, [r3, #0]
 c001766:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c001768:	4b3d      	ldr	r3, [pc, #244]	; (c001860 <HAL_GTZC_IRQHandler+0x104>)
 c00176a:	691b      	ldr	r3, [r3, #16]
 c00176c:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c00176e:	68ba      	ldr	r2, [r7, #8]
 c001770:	687b      	ldr	r3, [r7, #4]
 c001772:	4013      	ands	r3, r2
 c001774:	603b      	str	r3, [r7, #0]
  if(flag != 0U)
 c001776:	683b      	ldr	r3, [r7, #0]
 c001778:	2b00      	cmp	r3, #0
 c00177a:	d019      	beq.n	c0017b0 <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c00177c:	4a38      	ldr	r2, [pc, #224]	; (c001860 <HAL_GTZC_IRQHandler+0x104>)
 c00177e:	683b      	ldr	r3, [r7, #0]
 c001780:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c001782:	2300      	movs	r3, #0
 c001784:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001786:	e00d      	b.n	c0017a4 <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c001788:	683a      	ldr	r2, [r7, #0]
 c00178a:	68fb      	ldr	r3, [r7, #12]
 c00178c:	fa22 f303 	lsr.w	r3, r2, r3
 c001790:	f003 0301 	and.w	r3, r3, #1
 c001794:	2b00      	cmp	r3, #0
 c001796:	d002      	beq.n	c00179e <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c001798:	68f8      	ldr	r0, [r7, #12]
 c00179a:	f000 f863 	bl	c001864 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c00179e:	68fb      	ldr	r3, [r7, #12]
 c0017a0:	3301      	adds	r3, #1
 c0017a2:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0017a4:	683a      	ldr	r2, [r7, #0]
 c0017a6:	68fb      	ldr	r3, [r7, #12]
 c0017a8:	fa22 f303 	lsr.w	r3, r2, r3
 c0017ac:	2b00      	cmp	r3, #0
 c0017ae:	d1eb      	bne.n	c001788 <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c0017b0:	4b2b      	ldr	r3, [pc, #172]	; (c001860 <HAL_GTZC_IRQHandler+0x104>)
 c0017b2:	685b      	ldr	r3, [r3, #4]
 c0017b4:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c0017b6:	4b2a      	ldr	r3, [pc, #168]	; (c001860 <HAL_GTZC_IRQHandler+0x104>)
 c0017b8:	695b      	ldr	r3, [r3, #20]
 c0017ba:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c0017bc:	68ba      	ldr	r2, [r7, #8]
 c0017be:	687b      	ldr	r3, [r7, #4]
 c0017c0:	4013      	ands	r3, r2
 c0017c2:	603b      	str	r3, [r7, #0]
  if(flag != 0U)
 c0017c4:	683b      	ldr	r3, [r7, #0]
 c0017c6:	2b00      	cmp	r3, #0
 c0017c8:	d01c      	beq.n	c001804 <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c0017ca:	4a25      	ldr	r2, [pc, #148]	; (c001860 <HAL_GTZC_IRQHandler+0x104>)
 c0017cc:	683b      	ldr	r3, [r7, #0]
 c0017ce:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0017d0:	2300      	movs	r3, #0
 c0017d2:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0017d4:	e010      	b.n	c0017f8 <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c0017d6:	683a      	ldr	r2, [r7, #0]
 c0017d8:	68fb      	ldr	r3, [r7, #12]
 c0017da:	fa22 f303 	lsr.w	r3, r2, r3
 c0017de:	f003 0301 	and.w	r3, r3, #1
 c0017e2:	2b00      	cmp	r3, #0
 c0017e4:	d005      	beq.n	c0017f2 <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c0017e6:	68fb      	ldr	r3, [r7, #12]
 c0017e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0017ec:	4618      	mov	r0, r3
 c0017ee:	f000 f839 	bl	c001864 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0017f2:	68fb      	ldr	r3, [r7, #12]
 c0017f4:	3301      	adds	r3, #1
 c0017f6:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0017f8:	683a      	ldr	r2, [r7, #0]
 c0017fa:	68fb      	ldr	r3, [r7, #12]
 c0017fc:	fa22 f303 	lsr.w	r3, r2, r3
 c001800:	2b00      	cmp	r3, #0
 c001802:	d1e8      	bne.n	c0017d6 <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c001804:	4b16      	ldr	r3, [pc, #88]	; (c001860 <HAL_GTZC_IRQHandler+0x104>)
 c001806:	689b      	ldr	r3, [r3, #8]
 c001808:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c00180a:	4b15      	ldr	r3, [pc, #84]	; (c001860 <HAL_GTZC_IRQHandler+0x104>)
 c00180c:	699b      	ldr	r3, [r3, #24]
 c00180e:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c001810:	68ba      	ldr	r2, [r7, #8]
 c001812:	687b      	ldr	r3, [r7, #4]
 c001814:	4013      	ands	r3, r2
 c001816:	603b      	str	r3, [r7, #0]
  if(flag != 0U)
 c001818:	683b      	ldr	r3, [r7, #0]
 c00181a:	2b00      	cmp	r3, #0
 c00181c:	d01c      	beq.n	c001858 <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c00181e:	4a10      	ldr	r2, [pc, #64]	; (c001860 <HAL_GTZC_IRQHandler+0x104>)
 c001820:	683b      	ldr	r3, [r7, #0]
 c001822:	6293      	str	r3, [r2, #40]	; 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c001824:	2300      	movs	r3, #0
 c001826:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001828:	e010      	b.n	c00184c <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c00182a:	683a      	ldr	r2, [r7, #0]
 c00182c:	68fb      	ldr	r3, [r7, #12]
 c00182e:	fa22 f303 	lsr.w	r3, r2, r3
 c001832:	f003 0301 	and.w	r3, r3, #1
 c001836:	2b00      	cmp	r3, #0
 c001838:	d005      	beq.n	c001846 <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c00183a:	68fb      	ldr	r3, [r7, #12]
 c00183c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 c001840:	4618      	mov	r0, r3
 c001842:	f000 f80f 	bl	c001864 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c001846:	68fb      	ldr	r3, [r7, #12]
 c001848:	3301      	adds	r3, #1
 c00184a:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c00184c:	683a      	ldr	r2, [r7, #0]
 c00184e:	68fb      	ldr	r3, [r7, #12]
 c001850:	fa22 f303 	lsr.w	r3, r2, r3
 c001854:	2b00      	cmp	r3, #0
 c001856:	d1e8      	bne.n	c00182a <HAL_GTZC_IRQHandler+0xce>
    }
  }
}
 c001858:	bf00      	nop
 c00185a:	3710      	adds	r7, #16
 c00185c:	46bd      	mov	sp, r7
 c00185e:	bd80      	pop	{r7, pc}
 c001860:	50032800 	.word	0x50032800

0c001864 <HAL_GTZC_TZIC_Callback>:
  * @param  PeriphId Peripheral identifier triggering the illegal access.
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId
  * @retval None.
  */
__weak void HAL_GTZC_TZIC_Callback(uint32_t PeriphId)
{
 c001864:	b480      	push	{r7}
 c001866:	b083      	sub	sp, #12
 c001868:	af00      	add	r7, sp, #0
 c00186a:	6078      	str	r0, [r7, #4]
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c00186c:	bf00      	nop
 c00186e:	370c      	adds	r7, #12
 c001870:	46bd      	mov	sp, r7
 c001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001876:	4770      	bx	lr

0c001878 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c001878:	b480      	push	{r7}
 c00187a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c00187c:	4b05      	ldr	r3, [pc, #20]	; (c001894 <HAL_ICACHE_Enable+0x1c>)
 c00187e:	681b      	ldr	r3, [r3, #0]
 c001880:	4a04      	ldr	r2, [pc, #16]	; (c001894 <HAL_ICACHE_Enable+0x1c>)
 c001882:	f043 0301 	orr.w	r3, r3, #1
 c001886:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c001888:	2300      	movs	r3, #0
}
 c00188a:	4618      	mov	r0, r3
 c00188c:	46bd      	mov	sp, r7
 c00188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001892:	4770      	bx	lr
 c001894:	50030400 	.word	0x50030400

0c001898 <HAL_ICACHE_IRQHandler>:
  * @note This function respectively disables the interrupt and clears the
  *       flag of any pending flag before calling the associated user callback.
  * @retval None
  */
void HAL_ICACHE_IRQHandler(void)
{
 c001898:	b580      	push	{r7, lr}
 c00189a:	b082      	sub	sp, #8
 c00189c:	af00      	add	r7, sp, #0
  /* Get current interrupt flags and interrupt sources value */
  uint32_t itflags   = READ_REG(ICACHE->SR);
 c00189e:	4b17      	ldr	r3, [pc, #92]	; (c0018fc <HAL_ICACHE_IRQHandler+0x64>)
 c0018a0:	685b      	ldr	r3, [r3, #4]
 c0018a2:	607b      	str	r3, [r7, #4]
  uint32_t itsources = READ_REG(ICACHE->IER);
 c0018a4:	4b15      	ldr	r3, [pc, #84]	; (c0018fc <HAL_ICACHE_IRQHandler+0x64>)
 c0018a6:	689b      	ldr	r3, [r3, #8]
 c0018a8:	603b      	str	r3, [r7, #0]

  /* Check Instruction cache Error interrupt flag  */
  if (((itflags & itsources) & ICACHE_FLAG_ERROR) != 0U)
 c0018aa:	687a      	ldr	r2, [r7, #4]
 c0018ac:	683b      	ldr	r3, [r7, #0]
 c0018ae:	4013      	ands	r3, r2
 c0018b0:	f003 0304 	and.w	r3, r3, #4
 c0018b4:	2b00      	cmp	r3, #0
 c0018b6:	d00a      	beq.n	c0018ce <HAL_ICACHE_IRQHandler+0x36>
  {
    /* Disable error interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_ERRIE);
 c0018b8:	4b10      	ldr	r3, [pc, #64]	; (c0018fc <HAL_ICACHE_IRQHandler+0x64>)
 c0018ba:	689b      	ldr	r3, [r3, #8]
 c0018bc:	4a0f      	ldr	r2, [pc, #60]	; (c0018fc <HAL_ICACHE_IRQHandler+0x64>)
 c0018be:	f023 0304 	bic.w	r3, r3, #4
 c0018c2:	6093      	str	r3, [r2, #8]

    /* Clear ICACHE error pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CERRF);
 c0018c4:	4b0d      	ldr	r3, [pc, #52]	; (c0018fc <HAL_ICACHE_IRQHandler+0x64>)
 c0018c6:	2204      	movs	r2, #4
 c0018c8:	60da      	str	r2, [r3, #12]

    /* Instruction cache error interrupt user callback */
    HAL_ICACHE_ErrorCallback();
 c0018ca:	f000 f820 	bl	c00190e <HAL_ICACHE_ErrorCallback>
  }

  /* Check Instruction cache BusyEnd interrupt flag  */
  if (((itflags & itsources) & ICACHE_FLAG_BUSYEND) != 0U)
 c0018ce:	687a      	ldr	r2, [r7, #4]
 c0018d0:	683b      	ldr	r3, [r7, #0]
 c0018d2:	4013      	ands	r3, r2
 c0018d4:	f003 0302 	and.w	r3, r3, #2
 c0018d8:	2b00      	cmp	r3, #0
 c0018da:	d00a      	beq.n	c0018f2 <HAL_ICACHE_IRQHandler+0x5a>
  {
    /* Disable end of cache invalidation interrupt */
    CLEAR_BIT(ICACHE->IER, ICACHE_IER_BSYENDIE);
 c0018dc:	4b07      	ldr	r3, [pc, #28]	; (c0018fc <HAL_ICACHE_IRQHandler+0x64>)
 c0018de:	689b      	ldr	r3, [r3, #8]
 c0018e0:	4a06      	ldr	r2, [pc, #24]	; (c0018fc <HAL_ICACHE_IRQHandler+0x64>)
 c0018e2:	f023 0302 	bic.w	r3, r3, #2
 c0018e6:	6093      	str	r3, [r2, #8]

    /* Clear ICACHE busyend pending flag */
    WRITE_REG(ICACHE->FCR, ICACHE_FCR_CBSYENDF);
 c0018e8:	4b04      	ldr	r3, [pc, #16]	; (c0018fc <HAL_ICACHE_IRQHandler+0x64>)
 c0018ea:	2202      	movs	r2, #2
 c0018ec:	60da      	str	r2, [r3, #12]

    /* Instruction cache busyend interrupt user callback */
    HAL_ICACHE_InvalidateCompleteCallback();
 c0018ee:	f000 f807 	bl	c001900 <HAL_ICACHE_InvalidateCompleteCallback>
  }
}
 c0018f2:	bf00      	nop
 c0018f4:	3708      	adds	r7, #8
 c0018f6:	46bd      	mov	sp, r7
 c0018f8:	bd80      	pop	{r7, pc}
 c0018fa:	bf00      	nop
 c0018fc:	50030400 	.word	0x50030400

0c001900 <HAL_ICACHE_InvalidateCompleteCallback>:

/**
  * @brief  Cache invalidation complete callback.
  */
__weak void HAL_ICACHE_InvalidateCompleteCallback(void)
{
 c001900:	b480      	push	{r7}
 c001902:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_InvalidateCompleteCallback() should be implemented in the user file
   */
}
 c001904:	bf00      	nop
 c001906:	46bd      	mov	sp, r7
 c001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00190c:	4770      	bx	lr

0c00190e <HAL_ICACHE_ErrorCallback>:

/**
  * @brief  Error callback.
  */
__weak void HAL_ICACHE_ErrorCallback(void)
{
 c00190e:	b480      	push	{r7}
 c001910:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_ICACHE_ErrorCallback() should be implemented in the user file
   */
}
 c001912:	bf00      	nop
 c001914:	46bd      	mov	sp, r7
 c001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00191a:	4770      	bx	lr

0c00191c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c00191c:	b480      	push	{r7}
 c00191e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c001920:	4b04      	ldr	r3, [pc, #16]	; (c001934 <HAL_PWREx_GetVoltageRange+0x18>)
 c001922:	681b      	ldr	r3, [r3, #0]
 c001924:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c001928:	4618      	mov	r0, r3
 c00192a:	46bd      	mov	sp, r7
 c00192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001930:	4770      	bx	lr
 c001932:	bf00      	nop
 c001934:	50007000 	.word	0x50007000

0c001938 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c001938:	b580      	push	{r7, lr}
 c00193a:	b084      	sub	sp, #16
 c00193c:	af00      	add	r7, sp, #0
 c00193e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c001940:	4b27      	ldr	r3, [pc, #156]	; (c0019e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001942:	681b      	ldr	r3, [r3, #0]
 c001944:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c001948:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c00194a:	f000 f861 	bl	c001a10 <HAL_PWREx_SMPS_GetEffectiveMode>
 c00194e:	4603      	mov	r3, r0
 c001950:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c001954:	d101      	bne.n	c00195a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c001956:	2301      	movs	r3, #1
 c001958:	e03e      	b.n	c0019d8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c00195a:	4b21      	ldr	r3, [pc, #132]	; (c0019e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c00195c:	68db      	ldr	r3, [r3, #12]
 c00195e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c001962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c001966:	d101      	bne.n	c00196c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c001968:	2301      	movs	r3, #1
 c00196a:	e035      	b.n	c0019d8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c00196c:	68ba      	ldr	r2, [r7, #8]
 c00196e:	687b      	ldr	r3, [r7, #4]
 c001970:	429a      	cmp	r2, r3
 c001972:	d101      	bne.n	c001978 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c001974:	2300      	movs	r3, #0
 c001976:	e02f      	b.n	c0019d8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c001978:	4b19      	ldr	r3, [pc, #100]	; (c0019e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c00197a:	681b      	ldr	r3, [r3, #0]
 c00197c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c001980:	4917      	ldr	r1, [pc, #92]	; (c0019e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001982:	687b      	ldr	r3, [r7, #4]
 c001984:	4313      	orrs	r3, r2
 c001986:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c001988:	4b16      	ldr	r3, [pc, #88]	; (c0019e4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c00198a:	681b      	ldr	r3, [r3, #0]
 c00198c:	095b      	lsrs	r3, r3, #5
 c00198e:	4a16      	ldr	r2, [pc, #88]	; (c0019e8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c001990:	fba2 2303 	umull	r2, r3, r2, r3
 c001994:	09db      	lsrs	r3, r3, #7
 c001996:	2232      	movs	r2, #50	; 0x32
 c001998:	fb02 f303 	mul.w	r3, r2, r3
 c00199c:	4a13      	ldr	r2, [pc, #76]	; (c0019ec <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c00199e:	fba2 2303 	umull	r2, r3, r2, r3
 c0019a2:	08db      	lsrs	r3, r3, #3
 c0019a4:	3301      	adds	r3, #1
 c0019a6:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c0019a8:	e002      	b.n	c0019b0 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c0019aa:	68fb      	ldr	r3, [r7, #12]
 c0019ac:	3b01      	subs	r3, #1
 c0019ae:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c0019b0:	4b0b      	ldr	r3, [pc, #44]	; (c0019e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0019b2:	695b      	ldr	r3, [r3, #20]
 c0019b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0019b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0019bc:	d102      	bne.n	c0019c4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c0019be:	68fb      	ldr	r3, [r7, #12]
 c0019c0:	2b00      	cmp	r3, #0
 c0019c2:	d1f2      	bne.n	c0019aa <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c0019c4:	4b06      	ldr	r3, [pc, #24]	; (c0019e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0019c6:	695b      	ldr	r3, [r3, #20]
 c0019c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0019cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0019d0:	d101      	bne.n	c0019d6 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c0019d2:	2303      	movs	r3, #3
 c0019d4:	e000      	b.n	c0019d8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c0019d6:	2300      	movs	r3, #0
}
 c0019d8:	4618      	mov	r0, r3
 c0019da:	3710      	adds	r7, #16
 c0019dc:	46bd      	mov	sp, r7
 c0019de:	bd80      	pop	{r7, pc}
 c0019e0:	50007000 	.word	0x50007000
 c0019e4:	30000000 	.word	0x30000000
 c0019e8:	0a7c5ac5 	.word	0x0a7c5ac5
 c0019ec:	cccccccd 	.word	0xcccccccd

0c0019f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c0019f0:	b480      	push	{r7}
 c0019f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c0019f4:	4b05      	ldr	r3, [pc, #20]	; (c001a0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c0019f6:	689b      	ldr	r3, [r3, #8]
 c0019f8:	4a04      	ldr	r2, [pc, #16]	; (c001a0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c0019fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c0019fe:	6093      	str	r3, [r2, #8]
}
 c001a00:	bf00      	nop
 c001a02:	46bd      	mov	sp, r7
 c001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a08:	4770      	bx	lr
 c001a0a:	bf00      	nop
 c001a0c:	50007000 	.word	0x50007000

0c001a10 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c001a10:	b480      	push	{r7}
 c001a12:	b083      	sub	sp, #12
 c001a14:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c001a16:	4b0f      	ldr	r3, [pc, #60]	; (c001a54 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c001a18:	691b      	ldr	r3, [r3, #16]
 c001a1a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c001a1c:	683b      	ldr	r3, [r7, #0]
 c001a1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c001a22:	2b00      	cmp	r3, #0
 c001a24:	d003      	beq.n	c001a2e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c001a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c001a2a:	607b      	str	r3, [r7, #4]
 c001a2c:	e00a      	b.n	c001a44 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c001a2e:	683b      	ldr	r3, [r7, #0]
 c001a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c001a34:	2b00      	cmp	r3, #0
 c001a36:	d103      	bne.n	c001a40 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c001a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c001a3c:	607b      	str	r3, [r7, #4]
 c001a3e:	e001      	b.n	c001a44 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c001a40:	2300      	movs	r3, #0
 c001a42:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c001a44:	687b      	ldr	r3, [r7, #4]
}
 c001a46:	4618      	mov	r0, r3
 c001a48:	370c      	adds	r7, #12
 c001a4a:	46bd      	mov	sp, r7
 c001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a50:	4770      	bx	lr
 c001a52:	bf00      	nop
 c001a54:	50007000 	.word	0x50007000

0c001a58 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c001a58:	b580      	push	{r7, lr}
 c001a5a:	b088      	sub	sp, #32
 c001a5c:	af00      	add	r7, sp, #0
 c001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c001a60:	687b      	ldr	r3, [r7, #4]
 c001a62:	2b00      	cmp	r3, #0
 c001a64:	d102      	bne.n	c001a6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c001a66:	2301      	movs	r3, #1
 c001a68:	f000 bc52 	b.w	c002310 <HAL_RCC_OscConfig+0x8b8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c001a6c:	4ba3      	ldr	r3, [pc, #652]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001a6e:	689b      	ldr	r3, [r3, #8]
 c001a70:	f003 030c 	and.w	r3, r3, #12
 c001a74:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c001a76:	4ba1      	ldr	r3, [pc, #644]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001a78:	68db      	ldr	r3, [r3, #12]
 c001a7a:	f003 0303 	and.w	r3, r3, #3
 c001a7e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c001a80:	687b      	ldr	r3, [r7, #4]
 c001a82:	681b      	ldr	r3, [r3, #0]
 c001a84:	f003 0310 	and.w	r3, r3, #16
 c001a88:	2b00      	cmp	r3, #0
 c001a8a:	f000 80da 	beq.w	c001c42 <HAL_RCC_OscConfig+0x1ea>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c001a8e:	69bb      	ldr	r3, [r7, #24]
 c001a90:	2b00      	cmp	r3, #0
 c001a92:	d006      	beq.n	c001aa2 <HAL_RCC_OscConfig+0x4a>
 c001a94:	69bb      	ldr	r3, [r7, #24]
 c001a96:	2b0c      	cmp	r3, #12
 c001a98:	f040 8081 	bne.w	c001b9e <HAL_RCC_OscConfig+0x146>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c001a9c:	697b      	ldr	r3, [r7, #20]
 c001a9e:	2b01      	cmp	r3, #1
 c001aa0:	d17d      	bne.n	c001b9e <HAL_RCC_OscConfig+0x146>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c001aa2:	4b96      	ldr	r3, [pc, #600]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001aa4:	681b      	ldr	r3, [r3, #0]
 c001aa6:	f003 0302 	and.w	r3, r3, #2
 c001aaa:	2b00      	cmp	r3, #0
 c001aac:	d006      	beq.n	c001abc <HAL_RCC_OscConfig+0x64>
 c001aae:	687b      	ldr	r3, [r7, #4]
 c001ab0:	69db      	ldr	r3, [r3, #28]
 c001ab2:	2b00      	cmp	r3, #0
 c001ab4:	d102      	bne.n	c001abc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c001ab6:	2301      	movs	r3, #1
 c001ab8:	f000 bc2a 	b.w	c002310 <HAL_RCC_OscConfig+0x8b8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c001abc:	687b      	ldr	r3, [r7, #4]
 c001abe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c001ac0:	4b8e      	ldr	r3, [pc, #568]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001ac2:	681b      	ldr	r3, [r3, #0]
 c001ac4:	f003 0308 	and.w	r3, r3, #8
 c001ac8:	2b00      	cmp	r3, #0
 c001aca:	d004      	beq.n	c001ad6 <HAL_RCC_OscConfig+0x7e>
 c001acc:	4b8b      	ldr	r3, [pc, #556]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001ace:	681b      	ldr	r3, [r3, #0]
 c001ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c001ad4:	e005      	b.n	c001ae2 <HAL_RCC_OscConfig+0x8a>
 c001ad6:	4b89      	ldr	r3, [pc, #548]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001adc:	091b      	lsrs	r3, r3, #4
 c001ade:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c001ae2:	4293      	cmp	r3, r2
 c001ae4:	d224      	bcs.n	c001b30 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c001ae6:	687b      	ldr	r3, [r7, #4]
 c001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001aea:	4618      	mov	r0, r3
 c001aec:	f000 fde8 	bl	c0026c0 <RCC_SetFlashLatencyFromMSIRange>
 c001af0:	4603      	mov	r3, r0
 c001af2:	2b00      	cmp	r3, #0
 c001af4:	d002      	beq.n	c001afc <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c001af6:	2301      	movs	r3, #1
 c001af8:	f000 bc0a 	b.w	c002310 <HAL_RCC_OscConfig+0x8b8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001afc:	4b7f      	ldr	r3, [pc, #508]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001afe:	681b      	ldr	r3, [r3, #0]
 c001b00:	4a7e      	ldr	r2, [pc, #504]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001b02:	f043 0308 	orr.w	r3, r3, #8
 c001b06:	6013      	str	r3, [r2, #0]
 c001b08:	4b7c      	ldr	r3, [pc, #496]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001b0a:	681b      	ldr	r3, [r3, #0]
 c001b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001b10:	687b      	ldr	r3, [r7, #4]
 c001b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001b14:	4979      	ldr	r1, [pc, #484]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001b16:	4313      	orrs	r3, r2
 c001b18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c001b1a:	4b78      	ldr	r3, [pc, #480]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001b1c:	685b      	ldr	r3, [r3, #4]
 c001b1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c001b22:	687b      	ldr	r3, [r7, #4]
 c001b24:	6a1b      	ldr	r3, [r3, #32]
 c001b26:	021b      	lsls	r3, r3, #8
 c001b28:	4974      	ldr	r1, [pc, #464]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001b2a:	4313      	orrs	r3, r2
 c001b2c:	604b      	str	r3, [r1, #4]
 c001b2e:	e025      	b.n	c001b7c <HAL_RCC_OscConfig+0x124>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001b30:	4b72      	ldr	r3, [pc, #456]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001b32:	681b      	ldr	r3, [r3, #0]
 c001b34:	4a71      	ldr	r2, [pc, #452]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001b36:	f043 0308 	orr.w	r3, r3, #8
 c001b3a:	6013      	str	r3, [r2, #0]
 c001b3c:	4b6f      	ldr	r3, [pc, #444]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001b3e:	681b      	ldr	r3, [r3, #0]
 c001b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001b44:	687b      	ldr	r3, [r7, #4]
 c001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001b48:	496c      	ldr	r1, [pc, #432]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001b4a:	4313      	orrs	r3, r2
 c001b4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c001b4e:	4b6b      	ldr	r3, [pc, #428]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001b50:	685b      	ldr	r3, [r3, #4]
 c001b52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c001b56:	687b      	ldr	r3, [r7, #4]
 c001b58:	6a1b      	ldr	r3, [r3, #32]
 c001b5a:	021b      	lsls	r3, r3, #8
 c001b5c:	4967      	ldr	r1, [pc, #412]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001b5e:	4313      	orrs	r3, r2
 c001b60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c001b62:	69bb      	ldr	r3, [r7, #24]
 c001b64:	2b00      	cmp	r3, #0
 c001b66:	d109      	bne.n	c001b7c <HAL_RCC_OscConfig+0x124>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c001b68:	687b      	ldr	r3, [r7, #4]
 c001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001b6c:	4618      	mov	r0, r3
 c001b6e:	f000 fda7 	bl	c0026c0 <RCC_SetFlashLatencyFromMSIRange>
 c001b72:	4603      	mov	r3, r0
 c001b74:	2b00      	cmp	r3, #0
 c001b76:	d001      	beq.n	c001b7c <HAL_RCC_OscConfig+0x124>
            {
              return HAL_ERROR;
 c001b78:	2301      	movs	r3, #1
 c001b7a:	e3c9      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c001b7c:	f000 fd8c 	bl	c002698 <HAL_RCC_GetHCLKFreq>
 c001b80:	4603      	mov	r3, r0
 c001b82:	4a5f      	ldr	r2, [pc, #380]	; (c001d00 <HAL_RCC_OscConfig+0x2a8>)
 c001b84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c001b86:	4b5f      	ldr	r3, [pc, #380]	; (c001d04 <HAL_RCC_OscConfig+0x2ac>)
 c001b88:	681b      	ldr	r3, [r3, #0]
 c001b8a:	4618      	mov	r0, r3
 c001b8c:	f7ff f94a 	bl	c000e24 <HAL_InitTick>
 c001b90:	4603      	mov	r3, r0
 c001b92:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c001b94:	7bfb      	ldrb	r3, [r7, #15]
 c001b96:	2b00      	cmp	r3, #0
 c001b98:	d052      	beq.n	c001c40 <HAL_RCC_OscConfig+0x1e8>
        {
          return status;
 c001b9a:	7bfb      	ldrb	r3, [r7, #15]
 c001b9c:	e3b8      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c001b9e:	687b      	ldr	r3, [r7, #4]
 c001ba0:	69db      	ldr	r3, [r3, #28]
 c001ba2:	2b00      	cmp	r3, #0
 c001ba4:	d032      	beq.n	c001c0c <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c001ba6:	4b55      	ldr	r3, [pc, #340]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001ba8:	681b      	ldr	r3, [r3, #0]
 c001baa:	4a54      	ldr	r2, [pc, #336]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001bac:	f043 0301 	orr.w	r3, r3, #1
 c001bb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c001bb2:	f7ff f987 	bl	c000ec4 <HAL_GetTick>
 c001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001bb8:	e008      	b.n	c001bcc <HAL_RCC_OscConfig+0x174>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c001bba:	f7ff f983 	bl	c000ec4 <HAL_GetTick>
 c001bbe:	4602      	mov	r2, r0
 c001bc0:	693b      	ldr	r3, [r7, #16]
 c001bc2:	1ad3      	subs	r3, r2, r3
 c001bc4:	2b02      	cmp	r3, #2
 c001bc6:	d901      	bls.n	c001bcc <HAL_RCC_OscConfig+0x174>
          {
            return HAL_TIMEOUT;
 c001bc8:	2303      	movs	r3, #3
 c001bca:	e3a1      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001bcc:	4b4b      	ldr	r3, [pc, #300]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001bce:	681b      	ldr	r3, [r3, #0]
 c001bd0:	f003 0302 	and.w	r3, r3, #2
 c001bd4:	2b00      	cmp	r3, #0
 c001bd6:	d0f0      	beq.n	c001bba <HAL_RCC_OscConfig+0x162>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001bd8:	4b48      	ldr	r3, [pc, #288]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001bda:	681b      	ldr	r3, [r3, #0]
 c001bdc:	4a47      	ldr	r2, [pc, #284]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001bde:	f043 0308 	orr.w	r3, r3, #8
 c001be2:	6013      	str	r3, [r2, #0]
 c001be4:	4b45      	ldr	r3, [pc, #276]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001be6:	681b      	ldr	r3, [r3, #0]
 c001be8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001bec:	687b      	ldr	r3, [r7, #4]
 c001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001bf0:	4942      	ldr	r1, [pc, #264]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001bf2:	4313      	orrs	r3, r2
 c001bf4:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c001bf6:	4b41      	ldr	r3, [pc, #260]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001bf8:	685b      	ldr	r3, [r3, #4]
 c001bfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c001bfe:	687b      	ldr	r3, [r7, #4]
 c001c00:	6a1b      	ldr	r3, [r3, #32]
 c001c02:	021b      	lsls	r3, r3, #8
 c001c04:	493d      	ldr	r1, [pc, #244]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001c06:	4313      	orrs	r3, r2
 c001c08:	604b      	str	r3, [r1, #4]
 c001c0a:	e01a      	b.n	c001c42 <HAL_RCC_OscConfig+0x1ea>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c001c0c:	4b3b      	ldr	r3, [pc, #236]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001c0e:	681b      	ldr	r3, [r3, #0]
 c001c10:	4a3a      	ldr	r2, [pc, #232]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001c12:	f023 0301 	bic.w	r3, r3, #1
 c001c16:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c001c18:	f7ff f954 	bl	c000ec4 <HAL_GetTick>
 c001c1c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c001c1e:	e008      	b.n	c001c32 <HAL_RCC_OscConfig+0x1da>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c001c20:	f7ff f950 	bl	c000ec4 <HAL_GetTick>
 c001c24:	4602      	mov	r2, r0
 c001c26:	693b      	ldr	r3, [r7, #16]
 c001c28:	1ad3      	subs	r3, r2, r3
 c001c2a:	2b02      	cmp	r3, #2
 c001c2c:	d901      	bls.n	c001c32 <HAL_RCC_OscConfig+0x1da>
          {
            return HAL_TIMEOUT;
 c001c2e:	2303      	movs	r3, #3
 c001c30:	e36e      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c001c32:	4b32      	ldr	r3, [pc, #200]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001c34:	681b      	ldr	r3, [r3, #0]
 c001c36:	f003 0302 	and.w	r3, r3, #2
 c001c3a:	2b00      	cmp	r3, #0
 c001c3c:	d1f0      	bne.n	c001c20 <HAL_RCC_OscConfig+0x1c8>
 c001c3e:	e000      	b.n	c001c42 <HAL_RCC_OscConfig+0x1ea>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c001c40:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c001c42:	687b      	ldr	r3, [r7, #4]
 c001c44:	681b      	ldr	r3, [r3, #0]
 c001c46:	f003 0301 	and.w	r3, r3, #1
 c001c4a:	2b00      	cmp	r3, #0
 c001c4c:	d071      	beq.n	c001d32 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c001c4e:	69bb      	ldr	r3, [r7, #24]
 c001c50:	2b08      	cmp	r3, #8
 c001c52:	d005      	beq.n	c001c60 <HAL_RCC_OscConfig+0x208>
 c001c54:	69bb      	ldr	r3, [r7, #24]
 c001c56:	2b0c      	cmp	r3, #12
 c001c58:	d10e      	bne.n	c001c78 <HAL_RCC_OscConfig+0x220>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c001c5a:	697b      	ldr	r3, [r7, #20]
 c001c5c:	2b03      	cmp	r3, #3
 c001c5e:	d10b      	bne.n	c001c78 <HAL_RCC_OscConfig+0x220>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c001c60:	4b26      	ldr	r3, [pc, #152]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001c62:	681b      	ldr	r3, [r3, #0]
 c001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001c68:	2b00      	cmp	r3, #0
 c001c6a:	d061      	beq.n	c001d30 <HAL_RCC_OscConfig+0x2d8>
 c001c6c:	687b      	ldr	r3, [r7, #4]
 c001c6e:	685b      	ldr	r3, [r3, #4]
 c001c70:	2b00      	cmp	r3, #0
 c001c72:	d15d      	bne.n	c001d30 <HAL_RCC_OscConfig+0x2d8>
      {
        return HAL_ERROR;
 c001c74:	2301      	movs	r3, #1
 c001c76:	e34b      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c001c78:	687b      	ldr	r3, [r7, #4]
 c001c7a:	685b      	ldr	r3, [r3, #4]
 c001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c001c80:	d106      	bne.n	c001c90 <HAL_RCC_OscConfig+0x238>
 c001c82:	4b1e      	ldr	r3, [pc, #120]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001c84:	681b      	ldr	r3, [r3, #0]
 c001c86:	4a1d      	ldr	r2, [pc, #116]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c001c8c:	6013      	str	r3, [r2, #0]
 c001c8e:	e01d      	b.n	c001ccc <HAL_RCC_OscConfig+0x274>
 c001c90:	687b      	ldr	r3, [r7, #4]
 c001c92:	685b      	ldr	r3, [r3, #4]
 c001c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c001c98:	d10c      	bne.n	c001cb4 <HAL_RCC_OscConfig+0x25c>
 c001c9a:	4b18      	ldr	r3, [pc, #96]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001c9c:	681b      	ldr	r3, [r3, #0]
 c001c9e:	4a17      	ldr	r2, [pc, #92]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c001ca4:	6013      	str	r3, [r2, #0]
 c001ca6:	4b15      	ldr	r3, [pc, #84]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001ca8:	681b      	ldr	r3, [r3, #0]
 c001caa:	4a14      	ldr	r2, [pc, #80]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c001cb0:	6013      	str	r3, [r2, #0]
 c001cb2:	e00b      	b.n	c001ccc <HAL_RCC_OscConfig+0x274>
 c001cb4:	4b11      	ldr	r3, [pc, #68]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001cb6:	681b      	ldr	r3, [r3, #0]
 c001cb8:	4a10      	ldr	r2, [pc, #64]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c001cbe:	6013      	str	r3, [r2, #0]
 c001cc0:	4b0e      	ldr	r3, [pc, #56]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001cc2:	681b      	ldr	r3, [r3, #0]
 c001cc4:	4a0d      	ldr	r2, [pc, #52]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c001cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c001ccc:	687b      	ldr	r3, [r7, #4]
 c001cce:	685b      	ldr	r3, [r3, #4]
 c001cd0:	2b00      	cmp	r3, #0
 c001cd2:	d019      	beq.n	c001d08 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001cd4:	f7ff f8f6 	bl	c000ec4 <HAL_GetTick>
 c001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c001cda:	e008      	b.n	c001cee <HAL_RCC_OscConfig+0x296>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c001cdc:	f7ff f8f2 	bl	c000ec4 <HAL_GetTick>
 c001ce0:	4602      	mov	r2, r0
 c001ce2:	693b      	ldr	r3, [r7, #16]
 c001ce4:	1ad3      	subs	r3, r2, r3
 c001ce6:	2b64      	cmp	r3, #100	; 0x64
 c001ce8:	d901      	bls.n	c001cee <HAL_RCC_OscConfig+0x296>
          {
            return HAL_TIMEOUT;
 c001cea:	2303      	movs	r3, #3
 c001cec:	e310      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c001cee:	4b03      	ldr	r3, [pc, #12]	; (c001cfc <HAL_RCC_OscConfig+0x2a4>)
 c001cf0:	681b      	ldr	r3, [r3, #0]
 c001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001cf6:	2b00      	cmp	r3, #0
 c001cf8:	d0f0      	beq.n	c001cdc <HAL_RCC_OscConfig+0x284>
 c001cfa:	e01a      	b.n	c001d32 <HAL_RCC_OscConfig+0x2da>
 c001cfc:	50021000 	.word	0x50021000
 c001d00:	30000000 	.word	0x30000000
 c001d04:	30000004 	.word	0x30000004
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001d08:	f7ff f8dc 	bl	c000ec4 <HAL_GetTick>
 c001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c001d0e:	e008      	b.n	c001d22 <HAL_RCC_OscConfig+0x2ca>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c001d10:	f7ff f8d8 	bl	c000ec4 <HAL_GetTick>
 c001d14:	4602      	mov	r2, r0
 c001d16:	693b      	ldr	r3, [r7, #16]
 c001d18:	1ad3      	subs	r3, r2, r3
 c001d1a:	2b64      	cmp	r3, #100	; 0x64
 c001d1c:	d901      	bls.n	c001d22 <HAL_RCC_OscConfig+0x2ca>
          {
            return HAL_TIMEOUT;
 c001d1e:	2303      	movs	r3, #3
 c001d20:	e2f6      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c001d22:	4ba6      	ldr	r3, [pc, #664]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001d24:	681b      	ldr	r3, [r3, #0]
 c001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001d2a:	2b00      	cmp	r3, #0
 c001d2c:	d1f0      	bne.n	c001d10 <HAL_RCC_OscConfig+0x2b8>
 c001d2e:	e000      	b.n	c001d32 <HAL_RCC_OscConfig+0x2da>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c001d32:	687b      	ldr	r3, [r7, #4]
 c001d34:	681b      	ldr	r3, [r3, #0]
 c001d36:	f003 0302 	and.w	r3, r3, #2
 c001d3a:	2b00      	cmp	r3, #0
 c001d3c:	d060      	beq.n	c001e00 <HAL_RCC_OscConfig+0x3a8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c001d3e:	69bb      	ldr	r3, [r7, #24]
 c001d40:	2b04      	cmp	r3, #4
 c001d42:	d005      	beq.n	c001d50 <HAL_RCC_OscConfig+0x2f8>
 c001d44:	69bb      	ldr	r3, [r7, #24]
 c001d46:	2b0c      	cmp	r3, #12
 c001d48:	d119      	bne.n	c001d7e <HAL_RCC_OscConfig+0x326>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c001d4a:	697b      	ldr	r3, [r7, #20]
 c001d4c:	2b02      	cmp	r3, #2
 c001d4e:	d116      	bne.n	c001d7e <HAL_RCC_OscConfig+0x326>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c001d50:	4b9a      	ldr	r3, [pc, #616]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001d52:	681b      	ldr	r3, [r3, #0]
 c001d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001d58:	2b00      	cmp	r3, #0
 c001d5a:	d005      	beq.n	c001d68 <HAL_RCC_OscConfig+0x310>
 c001d5c:	687b      	ldr	r3, [r7, #4]
 c001d5e:	68db      	ldr	r3, [r3, #12]
 c001d60:	2b00      	cmp	r3, #0
 c001d62:	d101      	bne.n	c001d68 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c001d64:	2301      	movs	r3, #1
 c001d66:	e2d3      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c001d68:	4b94      	ldr	r3, [pc, #592]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001d6a:	685b      	ldr	r3, [r3, #4]
 c001d6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c001d70:	687b      	ldr	r3, [r7, #4]
 c001d72:	691b      	ldr	r3, [r3, #16]
 c001d74:	061b      	lsls	r3, r3, #24
 c001d76:	4991      	ldr	r1, [pc, #580]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001d78:	4313      	orrs	r3, r2
 c001d7a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c001d7c:	e040      	b.n	c001e00 <HAL_RCC_OscConfig+0x3a8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c001d7e:	687b      	ldr	r3, [r7, #4]
 c001d80:	68db      	ldr	r3, [r3, #12]
 c001d82:	2b00      	cmp	r3, #0
 c001d84:	d023      	beq.n	c001dce <HAL_RCC_OscConfig+0x376>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c001d86:	4b8d      	ldr	r3, [pc, #564]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001d88:	681b      	ldr	r3, [r3, #0]
 c001d8a:	4a8c      	ldr	r2, [pc, #560]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c001d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001d92:	f7ff f897 	bl	c000ec4 <HAL_GetTick>
 c001d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001d98:	e008      	b.n	c001dac <HAL_RCC_OscConfig+0x354>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c001d9a:	f7ff f893 	bl	c000ec4 <HAL_GetTick>
 c001d9e:	4602      	mov	r2, r0
 c001da0:	693b      	ldr	r3, [r7, #16]
 c001da2:	1ad3      	subs	r3, r2, r3
 c001da4:	2b02      	cmp	r3, #2
 c001da6:	d901      	bls.n	c001dac <HAL_RCC_OscConfig+0x354>
          {
            return HAL_TIMEOUT;
 c001da8:	2303      	movs	r3, #3
 c001daa:	e2b1      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001dac:	4b83      	ldr	r3, [pc, #524]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001dae:	681b      	ldr	r3, [r3, #0]
 c001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001db4:	2b00      	cmp	r3, #0
 c001db6:	d0f0      	beq.n	c001d9a <HAL_RCC_OscConfig+0x342>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c001db8:	4b80      	ldr	r3, [pc, #512]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001dba:	685b      	ldr	r3, [r3, #4]
 c001dbc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c001dc0:	687b      	ldr	r3, [r7, #4]
 c001dc2:	691b      	ldr	r3, [r3, #16]
 c001dc4:	061b      	lsls	r3, r3, #24
 c001dc6:	497d      	ldr	r1, [pc, #500]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001dc8:	4313      	orrs	r3, r2
 c001dca:	604b      	str	r3, [r1, #4]
 c001dcc:	e018      	b.n	c001e00 <HAL_RCC_OscConfig+0x3a8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c001dce:	4b7b      	ldr	r3, [pc, #492]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001dd0:	681b      	ldr	r3, [r3, #0]
 c001dd2:	4a7a      	ldr	r2, [pc, #488]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c001dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001dda:	f7ff f873 	bl	c000ec4 <HAL_GetTick>
 c001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001de0:	e008      	b.n	c001df4 <HAL_RCC_OscConfig+0x39c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c001de2:	f7ff f86f 	bl	c000ec4 <HAL_GetTick>
 c001de6:	4602      	mov	r2, r0
 c001de8:	693b      	ldr	r3, [r7, #16]
 c001dea:	1ad3      	subs	r3, r2, r3
 c001dec:	2b02      	cmp	r3, #2
 c001dee:	d901      	bls.n	c001df4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 c001df0:	2303      	movs	r3, #3
 c001df2:	e28d      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001df4:	4b71      	ldr	r3, [pc, #452]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001df6:	681b      	ldr	r3, [r3, #0]
 c001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001dfc:	2b00      	cmp	r3, #0
 c001dfe:	d1f0      	bne.n	c001de2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c001e00:	687b      	ldr	r3, [r7, #4]
 c001e02:	681b      	ldr	r3, [r3, #0]
 c001e04:	f003 0308 	and.w	r3, r3, #8
 c001e08:	2b00      	cmp	r3, #0
 c001e0a:	d051      	beq.n	c001eb0 <HAL_RCC_OscConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c001e0c:	687b      	ldr	r3, [r7, #4]
 c001e0e:	695b      	ldr	r3, [r3, #20]
 c001e10:	2b00      	cmp	r3, #0
 c001e12:	d031      	beq.n	c001e78 <HAL_RCC_OscConfig+0x420>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c001e14:	687b      	ldr	r3, [r7, #4]
 c001e16:	699b      	ldr	r3, [r3, #24]
 c001e18:	2b00      	cmp	r3, #0
 c001e1a:	d108      	bne.n	c001e2e <HAL_RCC_OscConfig+0x3d6>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c001e1c:	4b67      	ldr	r3, [pc, #412]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001e22:	4a66      	ldr	r2, [pc, #408]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001e24:	f023 0310 	bic.w	r3, r3, #16
 c001e28:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c001e2c:	e007      	b.n	c001e3e <HAL_RCC_OscConfig+0x3e6>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c001e2e:	4b63      	ldr	r3, [pc, #396]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001e30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001e34:	4a61      	ldr	r2, [pc, #388]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001e36:	f043 0310 	orr.w	r3, r3, #16
 c001e3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c001e3e:	4b5f      	ldr	r3, [pc, #380]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001e44:	4a5d      	ldr	r2, [pc, #372]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001e46:	f043 0301 	orr.w	r3, r3, #1
 c001e4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001e4e:	f7ff f839 	bl	c000ec4 <HAL_GetTick>
 c001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c001e54:	e008      	b.n	c001e68 <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c001e56:	f7ff f835 	bl	c000ec4 <HAL_GetTick>
 c001e5a:	4602      	mov	r2, r0
 c001e5c:	693b      	ldr	r3, [r7, #16]
 c001e5e:	1ad3      	subs	r3, r2, r3
 c001e60:	2b07      	cmp	r3, #7
 c001e62:	d901      	bls.n	c001e68 <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 c001e64:	2303      	movs	r3, #3
 c001e66:	e253      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c001e68:	4b54      	ldr	r3, [pc, #336]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001e6e:	f003 0302 	and.w	r3, r3, #2
 c001e72:	2b00      	cmp	r3, #0
 c001e74:	d0ef      	beq.n	c001e56 <HAL_RCC_OscConfig+0x3fe>
 c001e76:	e01b      	b.n	c001eb0 <HAL_RCC_OscConfig+0x458>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c001e78:	4b50      	ldr	r3, [pc, #320]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001e7e:	4a4f      	ldr	r2, [pc, #316]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001e80:	f023 0301 	bic.w	r3, r3, #1
 c001e84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001e88:	f7ff f81c 	bl	c000ec4 <HAL_GetTick>
 c001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c001e8e:	e008      	b.n	c001ea2 <HAL_RCC_OscConfig+0x44a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c001e90:	f7ff f818 	bl	c000ec4 <HAL_GetTick>
 c001e94:	4602      	mov	r2, r0
 c001e96:	693b      	ldr	r3, [r7, #16]
 c001e98:	1ad3      	subs	r3, r2, r3
 c001e9a:	2b07      	cmp	r3, #7
 c001e9c:	d901      	bls.n	c001ea2 <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 c001e9e:	2303      	movs	r3, #3
 c001ea0:	e236      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c001ea2:	4b46      	ldr	r3, [pc, #280]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001ea8:	f003 0302 	and.w	r3, r3, #2
 c001eac:	2b00      	cmp	r3, #0
 c001eae:	d1ef      	bne.n	c001e90 <HAL_RCC_OscConfig+0x438>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c001eb0:	687b      	ldr	r3, [r7, #4]
 c001eb2:	681b      	ldr	r3, [r3, #0]
 c001eb4:	f003 0304 	and.w	r3, r3, #4
 c001eb8:	2b00      	cmp	r3, #0
 c001eba:	f000 8109 	beq.w	c0020d0 <HAL_RCC_OscConfig+0x678>
  {
    FlagStatus       pwrclkchanged = RESET;
 c001ebe:	2300      	movs	r3, #0
 c001ec0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c001ec2:	4b3e      	ldr	r3, [pc, #248]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001eca:	2b00      	cmp	r3, #0
 c001ecc:	d10d      	bne.n	c001eea <HAL_RCC_OscConfig+0x492>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c001ece:	4b3b      	ldr	r3, [pc, #236]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001ed2:	4a3a      	ldr	r2, [pc, #232]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c001ed8:	6593      	str	r3, [r2, #88]	; 0x58
 c001eda:	4b38      	ldr	r3, [pc, #224]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001ee2:	60bb      	str	r3, [r7, #8]
 c001ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c001ee6:	2301      	movs	r3, #1
 c001ee8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001eea:	4b35      	ldr	r3, [pc, #212]	; (c001fc0 <HAL_RCC_OscConfig+0x568>)
 c001eec:	681b      	ldr	r3, [r3, #0]
 c001eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001ef2:	2b00      	cmp	r3, #0
 c001ef4:	d118      	bne.n	c001f28 <HAL_RCC_OscConfig+0x4d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c001ef6:	4b32      	ldr	r3, [pc, #200]	; (c001fc0 <HAL_RCC_OscConfig+0x568>)
 c001ef8:	681b      	ldr	r3, [r3, #0]
 c001efa:	4a31      	ldr	r2, [pc, #196]	; (c001fc0 <HAL_RCC_OscConfig+0x568>)
 c001efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c001f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c001f02:	f7fe ffdf 	bl	c000ec4 <HAL_GetTick>
 c001f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001f08:	e008      	b.n	c001f1c <HAL_RCC_OscConfig+0x4c4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c001f0a:	f7fe ffdb 	bl	c000ec4 <HAL_GetTick>
 c001f0e:	4602      	mov	r2, r0
 c001f10:	693b      	ldr	r3, [r7, #16]
 c001f12:	1ad3      	subs	r3, r2, r3
 c001f14:	2b02      	cmp	r3, #2
 c001f16:	d901      	bls.n	c001f1c <HAL_RCC_OscConfig+0x4c4>
        {
          return HAL_TIMEOUT;
 c001f18:	2303      	movs	r3, #3
 c001f1a:	e1f9      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001f1c:	4b28      	ldr	r3, [pc, #160]	; (c001fc0 <HAL_RCC_OscConfig+0x568>)
 c001f1e:	681b      	ldr	r3, [r3, #0]
 c001f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001f24:	2b00      	cmp	r3, #0
 c001f26:	d0f0      	beq.n	c001f0a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c001f28:	687b      	ldr	r3, [r7, #4]
 c001f2a:	689b      	ldr	r3, [r3, #8]
 c001f2c:	f003 0301 	and.w	r3, r3, #1
 c001f30:	2b00      	cmp	r3, #0
 c001f32:	d01f      	beq.n	c001f74 <HAL_RCC_OscConfig+0x51c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c001f34:	687b      	ldr	r3, [r7, #4]
 c001f36:	689b      	ldr	r3, [r3, #8]
 c001f38:	f003 0304 	and.w	r3, r3, #4
 c001f3c:	2b00      	cmp	r3, #0
 c001f3e:	d010      	beq.n	c001f62 <HAL_RCC_OscConfig+0x50a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c001f40:	4b1e      	ldr	r3, [pc, #120]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001f46:	4a1d      	ldr	r2, [pc, #116]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001f48:	f043 0304 	orr.w	r3, r3, #4
 c001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c001f50:	4b1a      	ldr	r3, [pc, #104]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001f56:	4a19      	ldr	r2, [pc, #100]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001f58:	f043 0301 	orr.w	r3, r3, #1
 c001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c001f60:	e018      	b.n	c001f94 <HAL_RCC_OscConfig+0x53c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c001f62:	4b16      	ldr	r3, [pc, #88]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001f68:	4a14      	ldr	r2, [pc, #80]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001f6a:	f043 0301 	orr.w	r3, r3, #1
 c001f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c001f72:	e00f      	b.n	c001f94 <HAL_RCC_OscConfig+0x53c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c001f74:	4b11      	ldr	r3, [pc, #68]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001f7a:	4a10      	ldr	r2, [pc, #64]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001f7c:	f023 0301 	bic.w	r3, r3, #1
 c001f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c001f84:	4b0d      	ldr	r3, [pc, #52]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001f8a:	4a0c      	ldr	r2, [pc, #48]	; (c001fbc <HAL_RCC_OscConfig+0x564>)
 c001f8c:	f023 0304 	bic.w	r3, r3, #4
 c001f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c001f94:	687b      	ldr	r3, [r7, #4]
 c001f96:	689b      	ldr	r3, [r3, #8]
 c001f98:	2b00      	cmp	r3, #0
 c001f9a:	d058      	beq.n	c00204e <HAL_RCC_OscConfig+0x5f6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001f9c:	f7fe ff92 	bl	c000ec4 <HAL_GetTick>
 c001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c001fa2:	e00f      	b.n	c001fc4 <HAL_RCC_OscConfig+0x56c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001fa4:	f7fe ff8e 	bl	c000ec4 <HAL_GetTick>
 c001fa8:	4602      	mov	r2, r0
 c001faa:	693b      	ldr	r3, [r7, #16]
 c001fac:	1ad3      	subs	r3, r2, r3
 c001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 c001fb2:	4293      	cmp	r3, r2
 c001fb4:	d906      	bls.n	c001fc4 <HAL_RCC_OscConfig+0x56c>
        {
          return HAL_TIMEOUT;
 c001fb6:	2303      	movs	r3, #3
 c001fb8:	e1aa      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
 c001fba:	bf00      	nop
 c001fbc:	50021000 	.word	0x50021000
 c001fc0:	50007000 	.word	0x50007000
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c001fc4:	4bb0      	ldr	r3, [pc, #704]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c001fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001fca:	f003 0302 	and.w	r3, r3, #2
 c001fce:	2b00      	cmp	r3, #0
 c001fd0:	d0e8      	beq.n	c001fa4 <HAL_RCC_OscConfig+0x54c>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c001fd2:	687b      	ldr	r3, [r7, #4]
 c001fd4:	689b      	ldr	r3, [r3, #8]
 c001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c001fda:	2b00      	cmp	r3, #0
 c001fdc:	d01b      	beq.n	c002016 <HAL_RCC_OscConfig+0x5be>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c001fde:	4baa      	ldr	r3, [pc, #680]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001fe4:	4aa8      	ldr	r2, [pc, #672]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c001fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c001fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c001fee:	e00a      	b.n	c002006 <HAL_RCC_OscConfig+0x5ae>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001ff0:	f7fe ff68 	bl	c000ec4 <HAL_GetTick>
 c001ff4:	4602      	mov	r2, r0
 c001ff6:	693b      	ldr	r3, [r7, #16]
 c001ff8:	1ad3      	subs	r3, r2, r3
 c001ffa:	f241 3288 	movw	r2, #5000	; 0x1388
 c001ffe:	4293      	cmp	r3, r2
 c002000:	d901      	bls.n	c002006 <HAL_RCC_OscConfig+0x5ae>
          {
            return HAL_TIMEOUT;
 c002002:	2303      	movs	r3, #3
 c002004:	e184      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c002006:	4ba0      	ldr	r3, [pc, #640]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00200c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c002010:	2b00      	cmp	r3, #0
 c002012:	d0ed      	beq.n	c001ff0 <HAL_RCC_OscConfig+0x598>
 c002014:	e053      	b.n	c0020be <HAL_RCC_OscConfig+0x666>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002016:	4b9c      	ldr	r3, [pc, #624]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00201c:	4a9a      	ldr	r2, [pc, #616]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c00201e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c002022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002026:	e00a      	b.n	c00203e <HAL_RCC_OscConfig+0x5e6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002028:	f7fe ff4c 	bl	c000ec4 <HAL_GetTick>
 c00202c:	4602      	mov	r2, r0
 c00202e:	693b      	ldr	r3, [r7, #16]
 c002030:	1ad3      	subs	r3, r2, r3
 c002032:	f241 3288 	movw	r2, #5000	; 0x1388
 c002036:	4293      	cmp	r3, r2
 c002038:	d901      	bls.n	c00203e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 c00203a:	2303      	movs	r3, #3
 c00203c:	e168      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00203e:	4b92      	ldr	r3, [pc, #584]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002044:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c002048:	2b00      	cmp	r3, #0
 c00204a:	d1ed      	bne.n	c002028 <HAL_RCC_OscConfig+0x5d0>
 c00204c:	e037      	b.n	c0020be <HAL_RCC_OscConfig+0x666>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00204e:	f7fe ff39 	bl	c000ec4 <HAL_GetTick>
 c002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002054:	e00a      	b.n	c00206c <HAL_RCC_OscConfig+0x614>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002056:	f7fe ff35 	bl	c000ec4 <HAL_GetTick>
 c00205a:	4602      	mov	r2, r0
 c00205c:	693b      	ldr	r3, [r7, #16]
 c00205e:	1ad3      	subs	r3, r2, r3
 c002060:	f241 3288 	movw	r2, #5000	; 0x1388
 c002064:	4293      	cmp	r3, r2
 c002066:	d901      	bls.n	c00206c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_TIMEOUT;
 c002068:	2303      	movs	r3, #3
 c00206a:	e151      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c00206c:	4b86      	ldr	r3, [pc, #536]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c00206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002072:	f003 0302 	and.w	r3, r3, #2
 c002076:	2b00      	cmp	r3, #0
 c002078:	d1ed      	bne.n	c002056 <HAL_RCC_OscConfig+0x5fe>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c00207a:	4b83      	ldr	r3, [pc, #524]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c00207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c002084:	2b00      	cmp	r3, #0
 c002086:	d01a      	beq.n	c0020be <HAL_RCC_OscConfig+0x666>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002088:	4b7f      	ldr	r3, [pc, #508]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c00208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00208e:	4a7e      	ldr	r2, [pc, #504]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002090:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c002094:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002098:	e00a      	b.n	c0020b0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00209a:	f7fe ff13 	bl	c000ec4 <HAL_GetTick>
 c00209e:	4602      	mov	r2, r0
 c0020a0:	693b      	ldr	r3, [r7, #16]
 c0020a2:	1ad3      	subs	r3, r2, r3
 c0020a4:	f241 3288 	movw	r2, #5000	; 0x1388
 c0020a8:	4293      	cmp	r3, r2
 c0020aa:	d901      	bls.n	c0020b0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 c0020ac:	2303      	movs	r3, #3
 c0020ae:	e12f      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0020b0:	4b75      	ldr	r3, [pc, #468]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c0020b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0020b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0020ba:	2b00      	cmp	r3, #0
 c0020bc:	d1ed      	bne.n	c00209a <HAL_RCC_OscConfig+0x642>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c0020be:	7ffb      	ldrb	r3, [r7, #31]
 c0020c0:	2b01      	cmp	r3, #1
 c0020c2:	d105      	bne.n	c0020d0 <HAL_RCC_OscConfig+0x678>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c0020c4:	4b70      	ldr	r3, [pc, #448]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c0020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0020c8:	4a6f      	ldr	r2, [pc, #444]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c0020ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0020ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c0020d0:	687b      	ldr	r3, [r7, #4]
 c0020d2:	681b      	ldr	r3, [r3, #0]
 c0020d4:	f003 0320 	and.w	r3, r3, #32
 c0020d8:	2b00      	cmp	r3, #0
 c0020da:	d03c      	beq.n	c002156 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c0020dc:	687b      	ldr	r3, [r7, #4]
 c0020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0020e0:	2b00      	cmp	r3, #0
 c0020e2:	d01c      	beq.n	c00211e <HAL_RCC_OscConfig+0x6c6>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c0020e4:	4b68      	ldr	r3, [pc, #416]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c0020e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0020ea:	4a67      	ldr	r2, [pc, #412]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c0020ec:	f043 0301 	orr.w	r3, r3, #1
 c0020f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0020f4:	f7fe fee6 	bl	c000ec4 <HAL_GetTick>
 c0020f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c0020fa:	e008      	b.n	c00210e <HAL_RCC_OscConfig+0x6b6>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c0020fc:	f7fe fee2 	bl	c000ec4 <HAL_GetTick>
 c002100:	4602      	mov	r2, r0
 c002102:	693b      	ldr	r3, [r7, #16]
 c002104:	1ad3      	subs	r3, r2, r3
 c002106:	2b02      	cmp	r3, #2
 c002108:	d901      	bls.n	c00210e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 c00210a:	2303      	movs	r3, #3
 c00210c:	e100      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c00210e:	4b5e      	ldr	r3, [pc, #376]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002110:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002114:	f003 0302 	and.w	r3, r3, #2
 c002118:	2b00      	cmp	r3, #0
 c00211a:	d0ef      	beq.n	c0020fc <HAL_RCC_OscConfig+0x6a4>
 c00211c:	e01b      	b.n	c002156 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c00211e:	4b5a      	ldr	r3, [pc, #360]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002120:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002124:	4a58      	ldr	r2, [pc, #352]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002126:	f023 0301 	bic.w	r3, r3, #1
 c00212a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00212e:	f7fe fec9 	bl	c000ec4 <HAL_GetTick>
 c002132:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c002134:	e008      	b.n	c002148 <HAL_RCC_OscConfig+0x6f0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c002136:	f7fe fec5 	bl	c000ec4 <HAL_GetTick>
 c00213a:	4602      	mov	r2, r0
 c00213c:	693b      	ldr	r3, [r7, #16]
 c00213e:	1ad3      	subs	r3, r2, r3
 c002140:	2b02      	cmp	r3, #2
 c002142:	d901      	bls.n	c002148 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_TIMEOUT;
 c002144:	2303      	movs	r3, #3
 c002146:	e0e3      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c002148:	4b4f      	ldr	r3, [pc, #316]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c00214a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00214e:	f003 0302 	and.w	r3, r3, #2
 c002152:	2b00      	cmp	r3, #0
 c002154:	d1ef      	bne.n	c002136 <HAL_RCC_OscConfig+0x6de>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c002156:	687b      	ldr	r3, [r7, #4]
 c002158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00215a:	2b00      	cmp	r3, #0
 c00215c:	f000 80d7 	beq.w	c00230e <HAL_RCC_OscConfig+0x8b6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c002160:	4b49      	ldr	r3, [pc, #292]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002162:	689b      	ldr	r3, [r3, #8]
 c002164:	f003 030c 	and.w	r3, r3, #12
 c002168:	2b0c      	cmp	r3, #12
 c00216a:	f000 8091 	beq.w	c002290 <HAL_RCC_OscConfig+0x838>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c00216e:	687b      	ldr	r3, [r7, #4]
 c002170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002172:	2b02      	cmp	r3, #2
 c002174:	d15a      	bne.n	c00222c <HAL_RCC_OscConfig+0x7d4>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c002176:	4b44      	ldr	r3, [pc, #272]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002178:	681b      	ldr	r3, [r3, #0]
 c00217a:	4a43      	ldr	r2, [pc, #268]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c00217c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c002180:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002182:	f7fe fe9f 	bl	c000ec4 <HAL_GetTick>
 c002186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002188:	e008      	b.n	c00219c <HAL_RCC_OscConfig+0x744>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c00218a:	f7fe fe9b 	bl	c000ec4 <HAL_GetTick>
 c00218e:	4602      	mov	r2, r0
 c002190:	693b      	ldr	r3, [r7, #16]
 c002192:	1ad3      	subs	r3, r2, r3
 c002194:	2b02      	cmp	r3, #2
 c002196:	d901      	bls.n	c00219c <HAL_RCC_OscConfig+0x744>
          {
            return HAL_TIMEOUT;
 c002198:	2303      	movs	r3, #3
 c00219a:	e0b9      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00219c:	4b3a      	ldr	r3, [pc, #232]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c00219e:	681b      	ldr	r3, [r3, #0]
 c0021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0021a4:	2b00      	cmp	r3, #0
 c0021a6:	d1f0      	bne.n	c00218a <HAL_RCC_OscConfig+0x732>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c0021a8:	4b37      	ldr	r3, [pc, #220]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c0021aa:	68da      	ldr	r2, [r3, #12]
 c0021ac:	4b37      	ldr	r3, [pc, #220]	; (c00228c <HAL_RCC_OscConfig+0x834>)
 c0021ae:	4013      	ands	r3, r2
 c0021b0:	687a      	ldr	r2, [r7, #4]
 c0021b2:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c0021b4:	687a      	ldr	r2, [r7, #4]
 c0021b6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c0021b8:	3a01      	subs	r2, #1
 c0021ba:	0112      	lsls	r2, r2, #4
 c0021bc:	4311      	orrs	r1, r2
 c0021be:	687a      	ldr	r2, [r7, #4]
 c0021c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c0021c2:	0212      	lsls	r2, r2, #8
 c0021c4:	4311      	orrs	r1, r2
 c0021c6:	687a      	ldr	r2, [r7, #4]
 c0021c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c0021ca:	0852      	lsrs	r2, r2, #1
 c0021cc:	3a01      	subs	r2, #1
 c0021ce:	0552      	lsls	r2, r2, #21
 c0021d0:	4311      	orrs	r1, r2
 c0021d2:	687a      	ldr	r2, [r7, #4]
 c0021d4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c0021d6:	0852      	lsrs	r2, r2, #1
 c0021d8:	3a01      	subs	r2, #1
 c0021da:	0652      	lsls	r2, r2, #25
 c0021dc:	4311      	orrs	r1, r2
 c0021de:	687a      	ldr	r2, [r7, #4]
 c0021e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c0021e2:	06d2      	lsls	r2, r2, #27
 c0021e4:	430a      	orrs	r2, r1
 c0021e6:	4928      	ldr	r1, [pc, #160]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c0021e8:	4313      	orrs	r3, r2
 c0021ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c0021ec:	4b26      	ldr	r3, [pc, #152]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c0021ee:	681b      	ldr	r3, [r3, #0]
 c0021f0:	4a25      	ldr	r2, [pc, #148]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c0021f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c0021f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c0021f8:	4b23      	ldr	r3, [pc, #140]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c0021fa:	68db      	ldr	r3, [r3, #12]
 c0021fc:	4a22      	ldr	r2, [pc, #136]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c0021fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c002202:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002204:	f7fe fe5e 	bl	c000ec4 <HAL_GetTick>
 c002208:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00220a:	e008      	b.n	c00221e <HAL_RCC_OscConfig+0x7c6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c00220c:	f7fe fe5a 	bl	c000ec4 <HAL_GetTick>
 c002210:	4602      	mov	r2, r0
 c002212:	693b      	ldr	r3, [r7, #16]
 c002214:	1ad3      	subs	r3, r2, r3
 c002216:	2b02      	cmp	r3, #2
 c002218:	d901      	bls.n	c00221e <HAL_RCC_OscConfig+0x7c6>
          {
            return HAL_TIMEOUT;
 c00221a:	2303      	movs	r3, #3
 c00221c:	e078      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00221e:	4b1a      	ldr	r3, [pc, #104]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002220:	681b      	ldr	r3, [r3, #0]
 c002222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002226:	2b00      	cmp	r3, #0
 c002228:	d0f0      	beq.n	c00220c <HAL_RCC_OscConfig+0x7b4>
 c00222a:	e070      	b.n	c00230e <HAL_RCC_OscConfig+0x8b6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c00222c:	4b16      	ldr	r3, [pc, #88]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c00222e:	681b      	ldr	r3, [r3, #0]
 c002230:	4a15      	ldr	r2, [pc, #84]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002232:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c002236:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
        if (READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 c002238:	4b13      	ldr	r3, [pc, #76]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c00223a:	681b      	ldr	r3, [r3, #0]
 c00223c:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 c002240:	2b00      	cmp	r3, #0
 c002242:	d105      	bne.n	c002250 <HAL_RCC_OscConfig+0x7f8>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 c002244:	4b10      	ldr	r3, [pc, #64]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002246:	68db      	ldr	r3, [r3, #12]
 c002248:	4a0f      	ldr	r2, [pc, #60]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c00224a:	f023 0303 	bic.w	r3, r3, #3
 c00224e:	60d3      	str	r3, [r2, #12]
        }

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c002250:	4b0d      	ldr	r3, [pc, #52]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002252:	68db      	ldr	r3, [r3, #12]
 c002254:	4a0c      	ldr	r2, [pc, #48]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c002256:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 c00225a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00225e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002260:	f7fe fe30 	bl	c000ec4 <HAL_GetTick>
 c002264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002266:	e008      	b.n	c00227a <HAL_RCC_OscConfig+0x822>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c002268:	f7fe fe2c 	bl	c000ec4 <HAL_GetTick>
 c00226c:	4602      	mov	r2, r0
 c00226e:	693b      	ldr	r3, [r7, #16]
 c002270:	1ad3      	subs	r3, r2, r3
 c002272:	2b02      	cmp	r3, #2
 c002274:	d901      	bls.n	c00227a <HAL_RCC_OscConfig+0x822>
          {
            return HAL_TIMEOUT;
 c002276:	2303      	movs	r3, #3
 c002278:	e04a      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00227a:	4b03      	ldr	r3, [pc, #12]	; (c002288 <HAL_RCC_OscConfig+0x830>)
 c00227c:	681b      	ldr	r3, [r3, #0]
 c00227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002282:	2b00      	cmp	r3, #0
 c002284:	d1f0      	bne.n	c002268 <HAL_RCC_OscConfig+0x810>
 c002286:	e042      	b.n	c00230e <HAL_RCC_OscConfig+0x8b6>
 c002288:	50021000 	.word	0x50021000
 c00228c:	019f800c 	.word	0x019f800c
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c002290:	687b      	ldr	r3, [r7, #4]
 c002292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002294:	2b01      	cmp	r3, #1
 c002296:	d101      	bne.n	c00229c <HAL_RCC_OscConfig+0x844>
      {
        return HAL_ERROR;
 c002298:	2301      	movs	r3, #1
 c00229a:	e039      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c00229c:	4b1e      	ldr	r3, [pc, #120]	; (c002318 <HAL_RCC_OscConfig+0x8c0>)
 c00229e:	68db      	ldr	r3, [r3, #12]
 c0022a0:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c0022a2:	697b      	ldr	r3, [r7, #20]
 c0022a4:	f003 0203 	and.w	r2, r3, #3
 c0022a8:	687b      	ldr	r3, [r7, #4]
 c0022aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0022ac:	429a      	cmp	r2, r3
 c0022ae:	d12c      	bne.n	c00230a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c0022b0:	697b      	ldr	r3, [r7, #20]
 c0022b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c0022b6:	687b      	ldr	r3, [r7, #4]
 c0022b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0022ba:	3b01      	subs	r3, #1
 c0022bc:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c0022be:	429a      	cmp	r2, r3
 c0022c0:	d123      	bne.n	c00230a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c0022c2:	697b      	ldr	r3, [r7, #20]
 c0022c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c0022c8:	687b      	ldr	r3, [r7, #4]
 c0022ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0022cc:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c0022ce:	429a      	cmp	r2, r3
 c0022d0:	d11b      	bne.n	c00230a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c0022d2:	697b      	ldr	r3, [r7, #20]
 c0022d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c0022d8:	687b      	ldr	r3, [r7, #4]
 c0022da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0022dc:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c0022de:	429a      	cmp	r2, r3
 c0022e0:	d113      	bne.n	c00230a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c0022e2:	697b      	ldr	r3, [r7, #20]
 c0022e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c0022e8:	687b      	ldr	r3, [r7, #4]
 c0022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c0022ec:	085b      	lsrs	r3, r3, #1
 c0022ee:	3b01      	subs	r3, #1
 c0022f0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c0022f2:	429a      	cmp	r2, r3
 c0022f4:	d109      	bne.n	c00230a <HAL_RCC_OscConfig+0x8b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c0022f6:	697b      	ldr	r3, [r7, #20]
 c0022f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c0022fc:	687b      	ldr	r3, [r7, #4]
 c0022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002300:	085b      	lsrs	r3, r3, #1
 c002302:	3b01      	subs	r3, #1
 c002304:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c002306:	429a      	cmp	r2, r3
 c002308:	d001      	beq.n	c00230e <HAL_RCC_OscConfig+0x8b6>
        {
          return HAL_ERROR;
 c00230a:	2301      	movs	r3, #1
 c00230c:	e000      	b.n	c002310 <HAL_RCC_OscConfig+0x8b8>
        }
      }
    }
  }

  return HAL_OK;
 c00230e:	2300      	movs	r3, #0
}
 c002310:	4618      	mov	r0, r3
 c002312:	3720      	adds	r7, #32
 c002314:	46bd      	mov	sp, r7
 c002316:	bd80      	pop	{r7, pc}
 c002318:	50021000 	.word	0x50021000

0c00231c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c00231c:	b580      	push	{r7, lr}
 c00231e:	b086      	sub	sp, #24
 c002320:	af00      	add	r7, sp, #0
 c002322:	6078      	str	r0, [r7, #4]
 c002324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c002326:	2300      	movs	r3, #0
 c002328:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c00232a:	687b      	ldr	r3, [r7, #4]
 c00232c:	2b00      	cmp	r3, #0
 c00232e:	d101      	bne.n	c002334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c002330:	2301      	movs	r3, #1
 c002332:	e104      	b.n	c00253e <HAL_RCC_ClockConfig+0x222>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c002334:	4b84      	ldr	r3, [pc, #528]	; (c002548 <HAL_RCC_ClockConfig+0x22c>)
 c002336:	681b      	ldr	r3, [r3, #0]
 c002338:	f003 030f 	and.w	r3, r3, #15
 c00233c:	683a      	ldr	r2, [r7, #0]
 c00233e:	429a      	cmp	r2, r3
 c002340:	d910      	bls.n	c002364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c002342:	4b81      	ldr	r3, [pc, #516]	; (c002548 <HAL_RCC_ClockConfig+0x22c>)
 c002344:	681b      	ldr	r3, [r3, #0]
 c002346:	f023 020f 	bic.w	r2, r3, #15
 c00234a:	497f      	ldr	r1, [pc, #508]	; (c002548 <HAL_RCC_ClockConfig+0x22c>)
 c00234c:	683b      	ldr	r3, [r7, #0]
 c00234e:	4313      	orrs	r3, r2
 c002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c002352:	4b7d      	ldr	r3, [pc, #500]	; (c002548 <HAL_RCC_ClockConfig+0x22c>)
 c002354:	681b      	ldr	r3, [r3, #0]
 c002356:	f003 030f 	and.w	r3, r3, #15
 c00235a:	683a      	ldr	r2, [r7, #0]
 c00235c:	429a      	cmp	r2, r3
 c00235e:	d001      	beq.n	c002364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c002360:	2301      	movs	r3, #1
 c002362:	e0ec      	b.n	c00253e <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c002364:	687b      	ldr	r3, [r7, #4]
 c002366:	681b      	ldr	r3, [r3, #0]
 c002368:	f003 0301 	and.w	r3, r3, #1
 c00236c:	2b00      	cmp	r3, #0
 c00236e:	f000 808b 	beq.w	c002488 <HAL_RCC_ClockConfig+0x16c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c002372:	687b      	ldr	r3, [r7, #4]
 c002374:	685b      	ldr	r3, [r3, #4]
 c002376:	2b03      	cmp	r3, #3
 c002378:	d134      	bne.n	c0023e4 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00237a:	4b74      	ldr	r3, [pc, #464]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c00237c:	681b      	ldr	r3, [r3, #0]
 c00237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002382:	2b00      	cmp	r3, #0
 c002384:	d101      	bne.n	c00238a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 c002386:	2301      	movs	r3, #1
 c002388:	e0d9      	b.n	c00253e <HAL_RCC_ClockConfig+0x222>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c00238a:	f000 f9fd 	bl	c002788 <RCC_GetSysClockFreqFromPLLSource>
 c00238e:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c002390:	693b      	ldr	r3, [r7, #16]
 c002392:	4a6f      	ldr	r2, [pc, #444]	; (c002550 <HAL_RCC_ClockConfig+0x234>)
 c002394:	4293      	cmp	r3, r2
 c002396:	d956      	bls.n	c002446 <HAL_RCC_ClockConfig+0x12a>
      {
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c002398:	4b6c      	ldr	r3, [pc, #432]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c00239a:	689b      	ldr	r3, [r3, #8]
 c00239c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c0023a0:	2b00      	cmp	r3, #0
 c0023a2:	d10a      	bne.n	c0023ba <HAL_RCC_ClockConfig+0x9e>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c0023a4:	4b69      	ldr	r3, [pc, #420]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c0023a6:	689b      	ldr	r3, [r3, #8]
 c0023a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0023ac:	4a67      	ldr	r2, [pc, #412]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c0023ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0023b2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c0023b4:	2380      	movs	r3, #128	; 0x80
 c0023b6:	617b      	str	r3, [r7, #20]
 c0023b8:	e045      	b.n	c002446 <HAL_RCC_ClockConfig+0x12a>
        }
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c0023ba:	687b      	ldr	r3, [r7, #4]
 c0023bc:	681b      	ldr	r3, [r3, #0]
 c0023be:	f003 0302 	and.w	r3, r3, #2
 c0023c2:	2b00      	cmp	r3, #0
 c0023c4:	d03f      	beq.n	c002446 <HAL_RCC_ClockConfig+0x12a>
                 (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 c0023c6:	687b      	ldr	r3, [r7, #4]
 c0023c8:	689b      	ldr	r3, [r3, #8]
        else if ((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 c0023ca:	2b00      	cmp	r3, #0
 c0023cc:	d13b      	bne.n	c002446 <HAL_RCC_ClockConfig+0x12a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c0023ce:	4b5f      	ldr	r3, [pc, #380]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c0023d0:	689b      	ldr	r3, [r3, #8]
 c0023d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0023d6:	4a5d      	ldr	r2, [pc, #372]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c0023d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0023dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c0023de:	2380      	movs	r3, #128	; 0x80
 c0023e0:	617b      	str	r3, [r7, #20]
 c0023e2:	e030      	b.n	c002446 <HAL_RCC_ClockConfig+0x12a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c0023e4:	687b      	ldr	r3, [r7, #4]
 c0023e6:	685b      	ldr	r3, [r3, #4]
 c0023e8:	2b02      	cmp	r3, #2
 c0023ea:	d107      	bne.n	c0023fc <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0023ec:	4b57      	ldr	r3, [pc, #348]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c0023ee:	681b      	ldr	r3, [r3, #0]
 c0023f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0023f4:	2b00      	cmp	r3, #0
 c0023f6:	d115      	bne.n	c002424 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c0023f8:	2301      	movs	r3, #1
 c0023fa:	e0a0      	b.n	c00253e <HAL_RCC_ClockConfig+0x222>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c0023fc:	687b      	ldr	r3, [r7, #4]
 c0023fe:	685b      	ldr	r3, [r3, #4]
 c002400:	2b00      	cmp	r3, #0
 c002402:	d107      	bne.n	c002414 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002404:	4b51      	ldr	r3, [pc, #324]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c002406:	681b      	ldr	r3, [r3, #0]
 c002408:	f003 0302 	and.w	r3, r3, #2
 c00240c:	2b00      	cmp	r3, #0
 c00240e:	d109      	bne.n	c002424 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c002410:	2301      	movs	r3, #1
 c002412:	e094      	b.n	c00253e <HAL_RCC_ClockConfig+0x222>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002414:	4b4d      	ldr	r3, [pc, #308]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c002416:	681b      	ldr	r3, [r3, #0]
 c002418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00241c:	2b00      	cmp	r3, #0
 c00241e:	d101      	bne.n	c002424 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 c002420:	2301      	movs	r3, #1
 c002422:	e08c      	b.n	c00253e <HAL_RCC_ClockConfig+0x222>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c002424:	f000 f89a 	bl	c00255c <HAL_RCC_GetSysClockFreq>
 c002428:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c00242a:	693b      	ldr	r3, [r7, #16]
 c00242c:	4a48      	ldr	r2, [pc, #288]	; (c002550 <HAL_RCC_ClockConfig+0x234>)
 c00242e:	4293      	cmp	r3, r2
 c002430:	d909      	bls.n	c002446 <HAL_RCC_ClockConfig+0x12a>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c002432:	4b46      	ldr	r3, [pc, #280]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c002434:	689b      	ldr	r3, [r3, #8]
 c002436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00243a:	4a44      	ldr	r2, [pc, #272]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c00243c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c002440:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 c002442:	2380      	movs	r3, #128	; 0x80
 c002444:	617b      	str	r3, [r7, #20]
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c002446:	4b41      	ldr	r3, [pc, #260]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c002448:	689b      	ldr	r3, [r3, #8]
 c00244a:	f023 0203 	bic.w	r2, r3, #3
 c00244e:	687b      	ldr	r3, [r7, #4]
 c002450:	685b      	ldr	r3, [r3, #4]
 c002452:	493e      	ldr	r1, [pc, #248]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c002454:	4313      	orrs	r3, r2
 c002456:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c002458:	f7fe fd34 	bl	c000ec4 <HAL_GetTick>
 c00245c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c00245e:	e00a      	b.n	c002476 <HAL_RCC_ClockConfig+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c002460:	f7fe fd30 	bl	c000ec4 <HAL_GetTick>
 c002464:	4602      	mov	r2, r0
 c002466:	68fb      	ldr	r3, [r7, #12]
 c002468:	1ad3      	subs	r3, r2, r3
 c00246a:	f241 3288 	movw	r2, #5000	; 0x1388
 c00246e:	4293      	cmp	r3, r2
 c002470:	d901      	bls.n	c002476 <HAL_RCC_ClockConfig+0x15a>
      {
        return HAL_TIMEOUT;
 c002472:	2303      	movs	r3, #3
 c002474:	e063      	b.n	c00253e <HAL_RCC_ClockConfig+0x222>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c002476:	4b35      	ldr	r3, [pc, #212]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c002478:	689b      	ldr	r3, [r3, #8]
 c00247a:	f003 020c 	and.w	r2, r3, #12
 c00247e:	687b      	ldr	r3, [r7, #4]
 c002480:	685b      	ldr	r3, [r3, #4]
 c002482:	009b      	lsls	r3, r3, #2
 c002484:	429a      	cmp	r2, r3
 c002486:	d1eb      	bne.n	c002460 <HAL_RCC_ClockConfig+0x144>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c002488:	687b      	ldr	r3, [r7, #4]
 c00248a:	681b      	ldr	r3, [r3, #0]
 c00248c:	f003 0302 	and.w	r3, r3, #2
 c002490:	2b00      	cmp	r3, #0
 c002492:	d009      	beq.n	c0024a8 <HAL_RCC_ClockConfig+0x18c>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c002494:	4b2d      	ldr	r3, [pc, #180]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c002496:	689b      	ldr	r3, [r3, #8]
 c002498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c00249c:	687b      	ldr	r3, [r7, #4]
 c00249e:	689b      	ldr	r3, [r3, #8]
 c0024a0:	492a      	ldr	r1, [pc, #168]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c0024a2:	4313      	orrs	r3, r2
 c0024a4:	608b      	str	r3, [r1, #8]
 c0024a6:	e008      	b.n	c0024ba <HAL_RCC_ClockConfig+0x19e>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if (hpre == RCC_SYSCLK_DIV2)
 c0024a8:	697b      	ldr	r3, [r7, #20]
 c0024aa:	2b80      	cmp	r3, #128	; 0x80
 c0024ac:	d105      	bne.n	c0024ba <HAL_RCC_ClockConfig+0x19e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c0024ae:	4b27      	ldr	r3, [pc, #156]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c0024b0:	689b      	ldr	r3, [r3, #8]
 c0024b2:	4a26      	ldr	r2, [pc, #152]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c0024b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0024b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c0024ba:	4b23      	ldr	r3, [pc, #140]	; (c002548 <HAL_RCC_ClockConfig+0x22c>)
 c0024bc:	681b      	ldr	r3, [r3, #0]
 c0024be:	f003 030f 	and.w	r3, r3, #15
 c0024c2:	683a      	ldr	r2, [r7, #0]
 c0024c4:	429a      	cmp	r2, r3
 c0024c6:	d210      	bcs.n	c0024ea <HAL_RCC_ClockConfig+0x1ce>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0024c8:	4b1f      	ldr	r3, [pc, #124]	; (c002548 <HAL_RCC_ClockConfig+0x22c>)
 c0024ca:	681b      	ldr	r3, [r3, #0]
 c0024cc:	f023 020f 	bic.w	r2, r3, #15
 c0024d0:	491d      	ldr	r1, [pc, #116]	; (c002548 <HAL_RCC_ClockConfig+0x22c>)
 c0024d2:	683b      	ldr	r3, [r7, #0]
 c0024d4:	4313      	orrs	r3, r2
 c0024d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c0024d8:	4b1b      	ldr	r3, [pc, #108]	; (c002548 <HAL_RCC_ClockConfig+0x22c>)
 c0024da:	681b      	ldr	r3, [r3, #0]
 c0024dc:	f003 030f 	and.w	r3, r3, #15
 c0024e0:	683a      	ldr	r2, [r7, #0]
 c0024e2:	429a      	cmp	r2, r3
 c0024e4:	d001      	beq.n	c0024ea <HAL_RCC_ClockConfig+0x1ce>
    {
      return HAL_ERROR;
 c0024e6:	2301      	movs	r3, #1
 c0024e8:	e029      	b.n	c00253e <HAL_RCC_ClockConfig+0x222>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c0024ea:	687b      	ldr	r3, [r7, #4]
 c0024ec:	681b      	ldr	r3, [r3, #0]
 c0024ee:	f003 0304 	and.w	r3, r3, #4
 c0024f2:	2b00      	cmp	r3, #0
 c0024f4:	d008      	beq.n	c002508 <HAL_RCC_ClockConfig+0x1ec>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c0024f6:	4b15      	ldr	r3, [pc, #84]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c0024f8:	689b      	ldr	r3, [r3, #8]
 c0024fa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c0024fe:	687b      	ldr	r3, [r7, #4]
 c002500:	68db      	ldr	r3, [r3, #12]
 c002502:	4912      	ldr	r1, [pc, #72]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c002504:	4313      	orrs	r3, r2
 c002506:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c002508:	687b      	ldr	r3, [r7, #4]
 c00250a:	681b      	ldr	r3, [r3, #0]
 c00250c:	f003 0308 	and.w	r3, r3, #8
 c002510:	2b00      	cmp	r3, #0
 c002512:	d009      	beq.n	c002528 <HAL_RCC_ClockConfig+0x20c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c002514:	4b0d      	ldr	r3, [pc, #52]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c002516:	689b      	ldr	r3, [r3, #8]
 c002518:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c00251c:	687b      	ldr	r3, [r7, #4]
 c00251e:	691b      	ldr	r3, [r3, #16]
 c002520:	00db      	lsls	r3, r3, #3
 c002522:	490a      	ldr	r1, [pc, #40]	; (c00254c <HAL_RCC_ClockConfig+0x230>)
 c002524:	4313      	orrs	r3, r2
 c002526:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c002528:	f000 f8b6 	bl	c002698 <HAL_RCC_GetHCLKFreq>
 c00252c:	4603      	mov	r3, r0
 c00252e:	4a09      	ldr	r2, [pc, #36]	; (c002554 <HAL_RCC_ClockConfig+0x238>)
 c002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c002532:	4b09      	ldr	r3, [pc, #36]	; (c002558 <HAL_RCC_ClockConfig+0x23c>)
 c002534:	681b      	ldr	r3, [r3, #0]
 c002536:	4618      	mov	r0, r3
 c002538:	f7fe fc74 	bl	c000e24 <HAL_InitTick>
 c00253c:	4603      	mov	r3, r0
}
 c00253e:	4618      	mov	r0, r3
 c002540:	3718      	adds	r7, #24
 c002542:	46bd      	mov	sp, r7
 c002544:	bd80      	pop	{r7, pc}
 c002546:	bf00      	nop
 c002548:	50022000 	.word	0x50022000
 c00254c:	50021000 	.word	0x50021000
 c002550:	04c4b400 	.word	0x04c4b400
 c002554:	30000000 	.word	0x30000000
 c002558:	30000004 	.word	0x30000004

0c00255c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c00255c:	b480      	push	{r7}
 c00255e:	b089      	sub	sp, #36	; 0x24
 c002560:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c002562:	2300      	movs	r3, #0
 c002564:	61fb      	str	r3, [r7, #28]
 c002566:	2300      	movs	r3, #0
 c002568:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c00256a:	4b47      	ldr	r3, [pc, #284]	; (c002688 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00256c:	689b      	ldr	r3, [r3, #8]
 c00256e:	f003 030c 	and.w	r3, r3, #12
 c002572:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c002574:	4b44      	ldr	r3, [pc, #272]	; (c002688 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002576:	68db      	ldr	r3, [r3, #12]
 c002578:	f003 0303 	and.w	r3, r3, #3
 c00257c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c00257e:	693b      	ldr	r3, [r7, #16]
 c002580:	2b00      	cmp	r3, #0
 c002582:	d005      	beq.n	c002590 <HAL_RCC_GetSysClockFreq+0x34>
 c002584:	693b      	ldr	r3, [r7, #16]
 c002586:	2b0c      	cmp	r3, #12
 c002588:	d121      	bne.n	c0025ce <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c00258a:	68fb      	ldr	r3, [r7, #12]
 c00258c:	2b01      	cmp	r3, #1
 c00258e:	d11e      	bne.n	c0025ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c002590:	4b3d      	ldr	r3, [pc, #244]	; (c002688 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002592:	681b      	ldr	r3, [r3, #0]
 c002594:	f003 0308 	and.w	r3, r3, #8
 c002598:	2b00      	cmp	r3, #0
 c00259a:	d107      	bne.n	c0025ac <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c00259c:	4b3a      	ldr	r3, [pc, #232]	; (c002688 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00259e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0025a2:	0a1b      	lsrs	r3, r3, #8
 c0025a4:	f003 030f 	and.w	r3, r3, #15
 c0025a8:	61fb      	str	r3, [r7, #28]
 c0025aa:	e005      	b.n	c0025b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0025ac:	4b36      	ldr	r3, [pc, #216]	; (c002688 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0025ae:	681b      	ldr	r3, [r3, #0]
 c0025b0:	091b      	lsrs	r3, r3, #4
 c0025b2:	f003 030f 	and.w	r3, r3, #15
 c0025b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c0025b8:	4a34      	ldr	r2, [pc, #208]	; (c00268c <HAL_RCC_GetSysClockFreq+0x130>)
 c0025ba:	69fb      	ldr	r3, [r7, #28]
 c0025bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0025c0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0025c2:	693b      	ldr	r3, [r7, #16]
 c0025c4:	2b00      	cmp	r3, #0
 c0025c6:	d10d      	bne.n	c0025e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c0025c8:	69fb      	ldr	r3, [r7, #28]
 c0025ca:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0025cc:	e00a      	b.n	c0025e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c0025ce:	693b      	ldr	r3, [r7, #16]
 c0025d0:	2b04      	cmp	r3, #4
 c0025d2:	d102      	bne.n	c0025da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c0025d4:	4b2e      	ldr	r3, [pc, #184]	; (c002690 <HAL_RCC_GetSysClockFreq+0x134>)
 c0025d6:	61bb      	str	r3, [r7, #24]
 c0025d8:	e004      	b.n	c0025e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c0025da:	693b      	ldr	r3, [r7, #16]
 c0025dc:	2b08      	cmp	r3, #8
 c0025de:	d101      	bne.n	c0025e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c0025e0:	4b2c      	ldr	r3, [pc, #176]	; (c002694 <HAL_RCC_GetSysClockFreq+0x138>)
 c0025e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0025e4:	693b      	ldr	r3, [r7, #16]
 c0025e6:	2b0c      	cmp	r3, #12
 c0025e8:	d146      	bne.n	c002678 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c0025ea:	4b27      	ldr	r3, [pc, #156]	; (c002688 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0025ec:	68db      	ldr	r3, [r3, #12]
 c0025ee:	f003 0303 	and.w	r3, r3, #3
 c0025f2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0025f4:	4b24      	ldr	r3, [pc, #144]	; (c002688 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0025f6:	68db      	ldr	r3, [r3, #12]
 c0025f8:	091b      	lsrs	r3, r3, #4
 c0025fa:	f003 030f 	and.w	r3, r3, #15
 c0025fe:	3301      	adds	r3, #1
 c002600:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c002602:	68bb      	ldr	r3, [r7, #8]
 c002604:	2b02      	cmp	r3, #2
 c002606:	d003      	beq.n	c002610 <HAL_RCC_GetSysClockFreq+0xb4>
 c002608:	68bb      	ldr	r3, [r7, #8]
 c00260a:	2b03      	cmp	r3, #3
 c00260c:	d00d      	beq.n	c00262a <HAL_RCC_GetSysClockFreq+0xce>
 c00260e:	e019      	b.n	c002644 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002610:	4a1f      	ldr	r2, [pc, #124]	; (c002690 <HAL_RCC_GetSysClockFreq+0x134>)
 c002612:	687b      	ldr	r3, [r7, #4]
 c002614:	fbb2 f3f3 	udiv	r3, r2, r3
 c002618:	4a1b      	ldr	r2, [pc, #108]	; (c002688 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00261a:	68d2      	ldr	r2, [r2, #12]
 c00261c:	0a12      	lsrs	r2, r2, #8
 c00261e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002622:	fb02 f303 	mul.w	r3, r2, r3
 c002626:	617b      	str	r3, [r7, #20]
        break;
 c002628:	e019      	b.n	c00265e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00262a:	4a1a      	ldr	r2, [pc, #104]	; (c002694 <HAL_RCC_GetSysClockFreq+0x138>)
 c00262c:	687b      	ldr	r3, [r7, #4]
 c00262e:	fbb2 f3f3 	udiv	r3, r2, r3
 c002632:	4a15      	ldr	r2, [pc, #84]	; (c002688 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002634:	68d2      	ldr	r2, [r2, #12]
 c002636:	0a12      	lsrs	r2, r2, #8
 c002638:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c00263c:	fb02 f303 	mul.w	r3, r2, r3
 c002640:	617b      	str	r3, [r7, #20]
        break;
 c002642:	e00c      	b.n	c00265e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002644:	69fa      	ldr	r2, [r7, #28]
 c002646:	687b      	ldr	r3, [r7, #4]
 c002648:	fbb2 f3f3 	udiv	r3, r2, r3
 c00264c:	4a0e      	ldr	r2, [pc, #56]	; (c002688 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00264e:	68d2      	ldr	r2, [r2, #12]
 c002650:	0a12      	lsrs	r2, r2, #8
 c002652:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002656:	fb02 f303 	mul.w	r3, r2, r3
 c00265a:	617b      	str	r3, [r7, #20]
        break;
 c00265c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c00265e:	4b0a      	ldr	r3, [pc, #40]	; (c002688 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002660:	68db      	ldr	r3, [r3, #12]
 c002662:	0e5b      	lsrs	r3, r3, #25
 c002664:	f003 0303 	and.w	r3, r3, #3
 c002668:	3301      	adds	r3, #1
 c00266a:	005b      	lsls	r3, r3, #1
 c00266c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c00266e:	697a      	ldr	r2, [r7, #20]
 c002670:	683b      	ldr	r3, [r7, #0]
 c002672:	fbb2 f3f3 	udiv	r3, r2, r3
 c002676:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c002678:	69bb      	ldr	r3, [r7, #24]
}
 c00267a:	4618      	mov	r0, r3
 c00267c:	3724      	adds	r7, #36	; 0x24
 c00267e:	46bd      	mov	sp, r7
 c002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002684:	4770      	bx	lr
 c002686:	bf00      	nop
 c002688:	50021000 	.word	0x50021000
 c00268c:	0c0029a0 	.word	0x0c0029a0
 c002690:	00f42400 	.word	0x00f42400
 c002694:	007a1200 	.word	0x007a1200

0c002698 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c002698:	b580      	push	{r7, lr}
 c00269a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c00269c:	f7ff ff5e 	bl	c00255c <HAL_RCC_GetSysClockFreq>
 c0026a0:	4602      	mov	r2, r0
 c0026a2:	4b05      	ldr	r3, [pc, #20]	; (c0026b8 <HAL_RCC_GetHCLKFreq+0x20>)
 c0026a4:	689b      	ldr	r3, [r3, #8]
 c0026a6:	091b      	lsrs	r3, r3, #4
 c0026a8:	f003 030f 	and.w	r3, r3, #15
 c0026ac:	4903      	ldr	r1, [pc, #12]	; (c0026bc <HAL_RCC_GetHCLKFreq+0x24>)
 c0026ae:	5ccb      	ldrb	r3, [r1, r3]
 c0026b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 c0026b4:	4618      	mov	r0, r3
 c0026b6:	bd80      	pop	{r7, pc}
 c0026b8:	50021000 	.word	0x50021000
 c0026bc:	0c002990 	.word	0x0c002990

0c0026c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c0026c0:	b580      	push	{r7, lr}
 c0026c2:	b086      	sub	sp, #24
 c0026c4:	af00      	add	r7, sp, #0
 c0026c6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c0026c8:	2300      	movs	r3, #0
 c0026ca:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c0026cc:	4b2c      	ldr	r3, [pc, #176]	; (c002780 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0026ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0026d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0026d4:	2b00      	cmp	r3, #0
 c0026d6:	d003      	beq.n	c0026e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c0026d8:	f7ff f920 	bl	c00191c <HAL_PWREx_GetVoltageRange>
 c0026dc:	6138      	str	r0, [r7, #16]
 c0026de:	e014      	b.n	c00270a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c0026e0:	4b27      	ldr	r3, [pc, #156]	; (c002780 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0026e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0026e4:	4a26      	ldr	r2, [pc, #152]	; (c002780 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0026e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0026ea:	6593      	str	r3, [r2, #88]	; 0x58
 c0026ec:	4b24      	ldr	r3, [pc, #144]	; (c002780 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0026ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0026f4:	60fb      	str	r3, [r7, #12]
 c0026f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c0026f8:	f7ff f910 	bl	c00191c <HAL_PWREx_GetVoltageRange>
 c0026fc:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c0026fe:	4b20      	ldr	r3, [pc, #128]	; (c002780 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002702:	4a1f      	ldr	r2, [pc, #124]	; (c002780 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c002708:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c00270a:	693b      	ldr	r3, [r7, #16]
 c00270c:	2b00      	cmp	r3, #0
 c00270e:	d003      	beq.n	c002718 <RCC_SetFlashLatencyFromMSIRange+0x58>
 c002710:	693b      	ldr	r3, [r7, #16]
 c002712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c002716:	d10b      	bne.n	c002730 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c002718:	687b      	ldr	r3, [r7, #4]
 c00271a:	2b80      	cmp	r3, #128	; 0x80
 c00271c:	d919      	bls.n	c002752 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c00271e:	687b      	ldr	r3, [r7, #4]
 c002720:	2ba0      	cmp	r3, #160	; 0xa0
 c002722:	d902      	bls.n	c00272a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c002724:	2302      	movs	r3, #2
 c002726:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c002728:	e013      	b.n	c002752 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c00272a:	2301      	movs	r3, #1
 c00272c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c00272e:	e010      	b.n	c002752 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c002730:	687b      	ldr	r3, [r7, #4]
 c002732:	2b80      	cmp	r3, #128	; 0x80
 c002734:	d902      	bls.n	c00273c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c002736:	2303      	movs	r3, #3
 c002738:	617b      	str	r3, [r7, #20]
 c00273a:	e00a      	b.n	c002752 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c00273c:	687b      	ldr	r3, [r7, #4]
 c00273e:	2b80      	cmp	r3, #128	; 0x80
 c002740:	d102      	bne.n	c002748 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c002742:	2302      	movs	r3, #2
 c002744:	617b      	str	r3, [r7, #20]
 c002746:	e004      	b.n	c002752 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c002748:	687b      	ldr	r3, [r7, #4]
 c00274a:	2b70      	cmp	r3, #112	; 0x70
 c00274c:	d101      	bne.n	c002752 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c00274e:	2301      	movs	r3, #1
 c002750:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c002752:	4b0c      	ldr	r3, [pc, #48]	; (c002784 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c002754:	681b      	ldr	r3, [r3, #0]
 c002756:	f023 020f 	bic.w	r2, r3, #15
 c00275a:	490a      	ldr	r1, [pc, #40]	; (c002784 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c00275c:	697b      	ldr	r3, [r7, #20]
 c00275e:	4313      	orrs	r3, r2
 c002760:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c002762:	4b08      	ldr	r3, [pc, #32]	; (c002784 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c002764:	681b      	ldr	r3, [r3, #0]
 c002766:	f003 030f 	and.w	r3, r3, #15
 c00276a:	697a      	ldr	r2, [r7, #20]
 c00276c:	429a      	cmp	r2, r3
 c00276e:	d001      	beq.n	c002774 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c002770:	2301      	movs	r3, #1
 c002772:	e000      	b.n	c002776 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c002774:	2300      	movs	r3, #0
}
 c002776:	4618      	mov	r0, r3
 c002778:	3718      	adds	r7, #24
 c00277a:	46bd      	mov	sp, r7
 c00277c:	bd80      	pop	{r7, pc}
 c00277e:	bf00      	nop
 c002780:	50021000 	.word	0x50021000
 c002784:	50022000 	.word	0x50022000

0c002788 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c002788:	b480      	push	{r7}
 c00278a:	b087      	sub	sp, #28
 c00278c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 c00278e:	2300      	movs	r3, #0
 c002790:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 c002792:	4b36      	ldr	r3, [pc, #216]	; (c00286c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002794:	68db      	ldr	r3, [r3, #12]
 c002796:	f003 0303 	and.w	r3, r3, #3
 c00279a:	2b01      	cmp	r3, #1
 c00279c:	d118      	bne.n	c0027d0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c00279e:	4b33      	ldr	r3, [pc, #204]	; (c00286c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0027a0:	681b      	ldr	r3, [r3, #0]
 c0027a2:	f003 0308 	and.w	r3, r3, #8
 c0027a6:	2b00      	cmp	r3, #0
 c0027a8:	d107      	bne.n	c0027ba <RCC_GetSysClockFreqFromPLLSource+0x32>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c0027aa:	4b30      	ldr	r3, [pc, #192]	; (c00286c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0027ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0027b0:	0a1b      	lsrs	r3, r3, #8
 c0027b2:	f003 030f 	and.w	r3, r3, #15
 c0027b6:	617b      	str	r3, [r7, #20]
 c0027b8:	e005      	b.n	c0027c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0027ba:	4b2c      	ldr	r3, [pc, #176]	; (c00286c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0027bc:	681b      	ldr	r3, [r3, #0]
 c0027be:	091b      	lsrs	r3, r3, #4
 c0027c0:	f003 030f 	and.w	r3, r3, #15
 c0027c4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c0027c6:	4a2a      	ldr	r2, [pc, #168]	; (c002870 <RCC_GetSysClockFreqFromPLLSource+0xe8>)
 c0027c8:	697b      	ldr	r3, [r7, #20]
 c0027ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0027ce:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c0027d0:	4b26      	ldr	r3, [pc, #152]	; (c00286c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0027d2:	68db      	ldr	r3, [r3, #12]
 c0027d4:	f003 0303 	and.w	r3, r3, #3
 c0027d8:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0027da:	4b24      	ldr	r3, [pc, #144]	; (c00286c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c0027dc:	68db      	ldr	r3, [r3, #12]
 c0027de:	091b      	lsrs	r3, r3, #4
 c0027e0:	f003 030f 	and.w	r3, r3, #15
 c0027e4:	3301      	adds	r3, #1
 c0027e6:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c0027e8:	68fb      	ldr	r3, [r7, #12]
 c0027ea:	2b02      	cmp	r3, #2
 c0027ec:	d003      	beq.n	c0027f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
 c0027ee:	68fb      	ldr	r3, [r7, #12]
 c0027f0:	2b03      	cmp	r3, #3
 c0027f2:	d00d      	beq.n	c002810 <RCC_GetSysClockFreqFromPLLSource+0x88>
 c0027f4:	e019      	b.n	c00282a <RCC_GetSysClockFreqFromPLLSource+0xa2>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0027f6:	4a1f      	ldr	r2, [pc, #124]	; (c002874 <RCC_GetSysClockFreqFromPLLSource+0xec>)
 c0027f8:	68bb      	ldr	r3, [r7, #8]
 c0027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 c0027fe:	4a1b      	ldr	r2, [pc, #108]	; (c00286c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002800:	68d2      	ldr	r2, [r2, #12]
 c002802:	0a12      	lsrs	r2, r2, #8
 c002804:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002808:	fb02 f303 	mul.w	r3, r2, r3
 c00280c:	613b      	str	r3, [r7, #16]
      break;
 c00280e:	e019      	b.n	c002844 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002810:	4a19      	ldr	r2, [pc, #100]	; (c002878 <RCC_GetSysClockFreqFromPLLSource+0xf0>)
 c002812:	68bb      	ldr	r3, [r7, #8]
 c002814:	fbb2 f3f3 	udiv	r3, r2, r3
 c002818:	4a14      	ldr	r2, [pc, #80]	; (c00286c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c00281a:	68d2      	ldr	r2, [r2, #12]
 c00281c:	0a12      	lsrs	r2, r2, #8
 c00281e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002822:	fb02 f303 	mul.w	r3, r2, r3
 c002826:	613b      	str	r3, [r7, #16]
      break;
 c002828:	e00c      	b.n	c002844 <RCC_GetSysClockFreqFromPLLSource+0xbc>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00282a:	697a      	ldr	r2, [r7, #20]
 c00282c:	68bb      	ldr	r3, [r7, #8]
 c00282e:	fbb2 f3f3 	udiv	r3, r2, r3
 c002832:	4a0e      	ldr	r2, [pc, #56]	; (c00286c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002834:	68d2      	ldr	r2, [r2, #12]
 c002836:	0a12      	lsrs	r2, r2, #8
 c002838:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c00283c:	fb02 f303 	mul.w	r3, r2, r3
 c002840:	613b      	str	r3, [r7, #16]
      break;
 c002842:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c002844:	4b09      	ldr	r3, [pc, #36]	; (c00286c <RCC_GetSysClockFreqFromPLLSource+0xe4>)
 c002846:	68db      	ldr	r3, [r3, #12]
 c002848:	0e5b      	lsrs	r3, r3, #25
 c00284a:	f003 0303 	and.w	r3, r3, #3
 c00284e:	3301      	adds	r3, #1
 c002850:	005b      	lsls	r3, r3, #1
 c002852:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c002854:	693a      	ldr	r2, [r7, #16]
 c002856:	687b      	ldr	r3, [r7, #4]
 c002858:	fbb2 f3f3 	udiv	r3, r2, r3
 c00285c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c00285e:	683b      	ldr	r3, [r7, #0]
}
 c002860:	4618      	mov	r0, r3
 c002862:	371c      	adds	r7, #28
 c002864:	46bd      	mov	sp, r7
 c002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00286a:	4770      	bx	lr
 c00286c:	50021000 	.word	0x50021000
 c002870:	0c0029a0 	.word	0x0c0029a0
 c002874:	00f42400 	.word	0x00f42400
 c002878:	007a1200 	.word	0x007a1200

0c00287c <HAL_RTCEx_SecureModeSet>:
  * @param  hrtc RTC handle
  * @param  secureState  Secure state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_SecureModeSet(RTC_HandleTypeDef *hrtc, RTC_SecureStateTypeDef  *secureState)
{
 c00287c:	b480      	push	{r7}
 c00287e:	b083      	sub	sp, #12
 c002880:	af00      	add	r7, sp, #0
 c002882:	6078      	str	r0, [r7, #4]
 c002884:	6039      	str	r1, [r7, #0]
  assert_param(IS_TAMP_SECURE_FULL(secureState->tampSecureFull));
  assert_param(IS_RTC_BKP(secureState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(secureState->backupRegisterStartZone3));

  /* RTC, rtcNonSecureFeatures is only relevant if secureState->rtcSecureFull == RTC_SECURE_FULL_NO */
  WRITE_REG(RTC->SMCR, secureState->rtcSecureFull | secureState->rtcNonSecureFeatures);
 c002886:	683b      	ldr	r3, [r7, #0]
 c002888:	681a      	ldr	r2, [r3, #0]
 c00288a:	683b      	ldr	r3, [r7, #0]
 c00288c:	685b      	ldr	r3, [r3, #4]
 c00288e:	490c      	ldr	r1, [pc, #48]	; (c0028c0 <HAL_RTCEx_SecureModeSet+0x44>)
 c002890:	4313      	orrs	r3, r2
 c002892:	620b      	str	r3, [r1, #32]

  /* Tamper + Backup register
     Warning : Backup register start zone are Shared with privilege configuration */
  WRITE_REG(TAMP->SMCR,
 c002894:	683b      	ldr	r3, [r7, #0]
 c002896:	689a      	ldr	r2, [r3, #8]
 c002898:	683b      	ldr	r3, [r7, #0]
 c00289a:	68db      	ldr	r3, [r3, #12]
 c00289c:	b2db      	uxtb	r3, r3
 c00289e:	431a      	orrs	r2, r3
 c0028a0:	683b      	ldr	r3, [r7, #0]
 c0028a2:	691b      	ldr	r3, [r3, #16]
 c0028a4:	041b      	lsls	r3, r3, #16
 c0028a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 c0028aa:	4906      	ldr	r1, [pc, #24]	; (c0028c4 <HAL_RTCEx_SecureModeSet+0x48>)
 c0028ac:	4313      	orrs	r3, r2
 c0028ae:	620b      	str	r3, [r1, #32]
            secureState->tampSecureFull |
            (TAMP_SMCR_BKPRWDPROT & (secureState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos)) |
            (TAMP_SMCR_BKPWDPROT & (secureState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 c0028b0:	2300      	movs	r3, #0
}
 c0028b2:	4618      	mov	r0, r3
 c0028b4:	370c      	adds	r7, #12
 c0028b6:	46bd      	mov	sp, r7
 c0028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0028bc:	4770      	bx	lr
 c0028be:	bf00      	nop
 c0028c0:	50002800 	.word	0x50002800
 c0028c4:	50003400 	.word	0x50003400

0c0028c8 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 c0028c8:	b480      	push	{r7}
 c0028ca:	b083      	sub	sp, #12
 c0028cc:	af00      	add	r7, sp, #0
 c0028ce:	6078      	str	r0, [r7, #4]
 c0028d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 c0028d2:	683b      	ldr	r3, [r7, #0]
 c0028d4:	681a      	ldr	r2, [r3, #0]
 c0028d6:	683b      	ldr	r3, [r7, #0]
 c0028d8:	685b      	ldr	r3, [r3, #4]
 c0028da:	490f      	ldr	r1, [pc, #60]	; (c002918 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 c0028dc:	4313      	orrs	r3, r2
 c0028de:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 c0028e0:	683b      	ldr	r3, [r7, #0]
 c0028e2:	689a      	ldr	r2, [r3, #8]
 c0028e4:	683b      	ldr	r3, [r7, #0]
 c0028e6:	68db      	ldr	r3, [r3, #12]
 c0028e8:	490c      	ldr	r1, [pc, #48]	; (c00291c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 c0028ea:	4313      	orrs	r3, r2
 c0028ec:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 c0028ee:	4b0b      	ldr	r3, [pc, #44]	; (c00291c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 c0028f0:	6a1b      	ldr	r3, [r3, #32]
 c0028f2:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 c0028f6:	683b      	ldr	r3, [r7, #0]
 c0028f8:	6919      	ldr	r1, [r3, #16]
 c0028fa:	683b      	ldr	r3, [r7, #0]
 c0028fc:	695b      	ldr	r3, [r3, #20]
 c0028fe:	041b      	lsls	r3, r3, #16
 c002900:	430b      	orrs	r3, r1
 c002902:	4906      	ldr	r1, [pc, #24]	; (c00291c <HAL_RTCEx_PrivilegeModeSet+0x54>)
 c002904:	4313      	orrs	r3, r2
 c002906:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 c002908:	2300      	movs	r3, #0
}
 c00290a:	4618      	mov	r0, r3
 c00290c:	370c      	adds	r7, #12
 c00290e:	46bd      	mov	sp, r7
 c002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002914:	4770      	bx	lr
 c002916:	bf00      	nop
 c002918:	50002800 	.word	0x50002800
 c00291c:	50003400 	.word	0x50003400

0c002920 <__libc_init_array>:
 c002920:	b570      	push	{r4, r5, r6, lr}
 c002922:	4d0d      	ldr	r5, [pc, #52]	; (c002958 <__libc_init_array+0x38>)
 c002924:	2600      	movs	r6, #0
 c002926:	4c0d      	ldr	r4, [pc, #52]	; (c00295c <__libc_init_array+0x3c>)
 c002928:	1b64      	subs	r4, r4, r5
 c00292a:	10a4      	asrs	r4, r4, #2
 c00292c:	42a6      	cmp	r6, r4
 c00292e:	d109      	bne.n	c002944 <__libc_init_array+0x24>
 c002930:	4d0b      	ldr	r5, [pc, #44]	; (c002960 <__libc_init_array+0x40>)
 c002932:	2600      	movs	r6, #0
 c002934:	4c0b      	ldr	r4, [pc, #44]	; (c002964 <__libc_init_array+0x44>)
 c002936:	f000 f81f 	bl	c002978 <_init>
 c00293a:	1b64      	subs	r4, r4, r5
 c00293c:	10a4      	asrs	r4, r4, #2
 c00293e:	42a6      	cmp	r6, r4
 c002940:	d105      	bne.n	c00294e <__libc_init_array+0x2e>
 c002942:	bd70      	pop	{r4, r5, r6, pc}
 c002944:	f855 3b04 	ldr.w	r3, [r5], #4
 c002948:	3601      	adds	r6, #1
 c00294a:	4798      	blx	r3
 c00294c:	e7ee      	b.n	c00292c <__libc_init_array+0xc>
 c00294e:	f855 3b04 	ldr.w	r3, [r5], #4
 c002952:	3601      	adds	r6, #1
 c002954:	4798      	blx	r3
 c002956:	e7f2      	b.n	c00293e <__libc_init_array+0x1e>
 c002958:	0c0029e0 	.word	0x0c0029e0
 c00295c:	0c0029e0 	.word	0x0c0029e0
 c002960:	0c0029e0 	.word	0x0c0029e0
 c002964:	0c0029e4 	.word	0x0c0029e4

0c002968 <memset>:
 c002968:	4402      	add	r2, r0
 c00296a:	4603      	mov	r3, r0
 c00296c:	4293      	cmp	r3, r2
 c00296e:	d100      	bne.n	c002972 <memset+0xa>
 c002970:	4770      	bx	lr
 c002972:	f803 1b01 	strb.w	r1, [r3], #1
 c002976:	e7f9      	b.n	c00296c <memset+0x4>

0c002978 <_init>:
 c002978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00297a:	bf00      	nop
 c00297c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00297e:	bc08      	pop	{r3}
 c002980:	469e      	mov	lr, r3
 c002982:	4770      	bx	lr

0c002984 <_fini>:
 c002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c002986:	bf00      	nop
 c002988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00298a:	bc08      	pop	{r3}
 c00298c:	469e      	mov	lr, r3
 c00298e:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_LEDToggle_RED>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c2 bc26 	b.w	c000854 <__acle_se_SECURE_LEDToggle_RED>

0c03e008 <SECURE_SystemCoreClockUpdate>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c2 be86 	b.w	c000d1c <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e010 <SECURE_RegisterCallback>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c2 bbc8 	b.w	c0007a8 <__acle_se_SECURE_RegisterCallback>

0c03e018 <SECURE_LEDToggle_YELLOW>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c2 bc5a 	b.w	c0008d4 <__acle_se_SECURE_LEDToggle_YELLOW>
