
LR111x_L552VE_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5f0  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000248  0804e7e8  0804e7e8  0001e7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804ea30  0804ea30  00028060  2**0
                  CONTENTS
  4 .ARM          00000008  0804ea30  0804ea30  0001ea30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804ea38  0804ea38  00028060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804ea38  0804ea38  0001ea38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804ea3c  0804ea3c  0001ea3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20018000  0804ea40  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000176c  20018060  0804eaa0  00028060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200197cc  0804eaa0  000297cc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00028060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003f896  00000000  00000000  00028096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006a0e  00000000  00000000  0006792c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002968  00000000  00000000  0006e340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000026e0  00000000  00000000  00070ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00033a62  00000000  00000000  00073388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032294  00000000  00000000  000a6dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013ee86  00000000  00000000  000d907e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00217f04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af48  00000000  00000000  00217f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	20018060 	.word	0x20018060
 8040214:	00000000 	.word	0x00000000
 8040218:	0804e78c 	.word	0x0804e78c

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20018064 	.word	0x20018064
 8040234:	0804e78c 	.word	0x0804e78c

08040238 <__aeabi_drsub>:
 8040238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 804023c:	e002      	b.n	8040244 <__adddf3>
 804023e:	bf00      	nop

08040240 <__aeabi_dsub>:
 8040240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08040244 <__adddf3>:
 8040244:	b530      	push	{r4, r5, lr}
 8040246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 804024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 804024e:	ea94 0f05 	teq	r4, r5
 8040252:	bf08      	it	eq
 8040254:	ea90 0f02 	teqeq	r0, r2
 8040258:	bf1f      	itttt	ne
 804025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 804025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8040262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8040266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 804026a:	f000 80e2 	beq.w	8040432 <__adddf3+0x1ee>
 804026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8040272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8040276:	bfb8      	it	lt
 8040278:	426d      	neglt	r5, r5
 804027a:	dd0c      	ble.n	8040296 <__adddf3+0x52>
 804027c:	442c      	add	r4, r5
 804027e:	ea80 0202 	eor.w	r2, r0, r2
 8040282:	ea81 0303 	eor.w	r3, r1, r3
 8040286:	ea82 0000 	eor.w	r0, r2, r0
 804028a:	ea83 0101 	eor.w	r1, r3, r1
 804028e:	ea80 0202 	eor.w	r2, r0, r2
 8040292:	ea81 0303 	eor.w	r3, r1, r3
 8040296:	2d36      	cmp	r5, #54	; 0x36
 8040298:	bf88      	it	hi
 804029a:	bd30      	pophi	{r4, r5, pc}
 804029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80402a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80402a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80402a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80402ac:	d002      	beq.n	80402b4 <__adddf3+0x70>
 80402ae:	4240      	negs	r0, r0
 80402b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80402b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80402b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80402bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80402c0:	d002      	beq.n	80402c8 <__adddf3+0x84>
 80402c2:	4252      	negs	r2, r2
 80402c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80402c8:	ea94 0f05 	teq	r4, r5
 80402cc:	f000 80a7 	beq.w	804041e <__adddf3+0x1da>
 80402d0:	f1a4 0401 	sub.w	r4, r4, #1
 80402d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80402d8:	db0d      	blt.n	80402f6 <__adddf3+0xb2>
 80402da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80402de:	fa22 f205 	lsr.w	r2, r2, r5
 80402e2:	1880      	adds	r0, r0, r2
 80402e4:	f141 0100 	adc.w	r1, r1, #0
 80402e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80402ec:	1880      	adds	r0, r0, r2
 80402ee:	fa43 f305 	asr.w	r3, r3, r5
 80402f2:	4159      	adcs	r1, r3
 80402f4:	e00e      	b.n	8040314 <__adddf3+0xd0>
 80402f6:	f1a5 0520 	sub.w	r5, r5, #32
 80402fa:	f10e 0e20 	add.w	lr, lr, #32
 80402fe:	2a01      	cmp	r2, #1
 8040300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8040304:	bf28      	it	cs
 8040306:	f04c 0c02 	orrcs.w	ip, ip, #2
 804030a:	fa43 f305 	asr.w	r3, r3, r5
 804030e:	18c0      	adds	r0, r0, r3
 8040310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8040314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040318:	d507      	bpl.n	804032a <__adddf3+0xe6>
 804031a:	f04f 0e00 	mov.w	lr, #0
 804031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8040322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8040326:	eb6e 0101 	sbc.w	r1, lr, r1
 804032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 804032e:	d31b      	bcc.n	8040368 <__adddf3+0x124>
 8040330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8040334:	d30c      	bcc.n	8040350 <__adddf3+0x10c>
 8040336:	0849      	lsrs	r1, r1, #1
 8040338:	ea5f 0030 	movs.w	r0, r0, rrx
 804033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8040340:	f104 0401 	add.w	r4, r4, #1
 8040344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8040348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 804034c:	f080 809a 	bcs.w	8040484 <__adddf3+0x240>
 8040350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8040354:	bf08      	it	eq
 8040356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 804035a:	f150 0000 	adcs.w	r0, r0, #0
 804035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040362:	ea41 0105 	orr.w	r1, r1, r5
 8040366:	bd30      	pop	{r4, r5, pc}
 8040368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 804036c:	4140      	adcs	r0, r0
 804036e:	eb41 0101 	adc.w	r1, r1, r1
 8040372:	3c01      	subs	r4, #1
 8040374:	bf28      	it	cs
 8040376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 804037a:	d2e9      	bcs.n	8040350 <__adddf3+0x10c>
 804037c:	f091 0f00 	teq	r1, #0
 8040380:	bf04      	itt	eq
 8040382:	4601      	moveq	r1, r0
 8040384:	2000      	moveq	r0, #0
 8040386:	fab1 f381 	clz	r3, r1
 804038a:	bf08      	it	eq
 804038c:	3320      	addeq	r3, #32
 804038e:	f1a3 030b 	sub.w	r3, r3, #11
 8040392:	f1b3 0220 	subs.w	r2, r3, #32
 8040396:	da0c      	bge.n	80403b2 <__adddf3+0x16e>
 8040398:	320c      	adds	r2, #12
 804039a:	dd08      	ble.n	80403ae <__adddf3+0x16a>
 804039c:	f102 0c14 	add.w	ip, r2, #20
 80403a0:	f1c2 020c 	rsb	r2, r2, #12
 80403a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80403a8:	fa21 f102 	lsr.w	r1, r1, r2
 80403ac:	e00c      	b.n	80403c8 <__adddf3+0x184>
 80403ae:	f102 0214 	add.w	r2, r2, #20
 80403b2:	bfd8      	it	le
 80403b4:	f1c2 0c20 	rsble	ip, r2, #32
 80403b8:	fa01 f102 	lsl.w	r1, r1, r2
 80403bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80403c0:	bfdc      	itt	le
 80403c2:	ea41 010c 	orrle.w	r1, r1, ip
 80403c6:	4090      	lslle	r0, r2
 80403c8:	1ae4      	subs	r4, r4, r3
 80403ca:	bfa2      	ittt	ge
 80403cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80403d0:	4329      	orrge	r1, r5
 80403d2:	bd30      	popge	{r4, r5, pc}
 80403d4:	ea6f 0404 	mvn.w	r4, r4
 80403d8:	3c1f      	subs	r4, #31
 80403da:	da1c      	bge.n	8040416 <__adddf3+0x1d2>
 80403dc:	340c      	adds	r4, #12
 80403de:	dc0e      	bgt.n	80403fe <__adddf3+0x1ba>
 80403e0:	f104 0414 	add.w	r4, r4, #20
 80403e4:	f1c4 0220 	rsb	r2, r4, #32
 80403e8:	fa20 f004 	lsr.w	r0, r0, r4
 80403ec:	fa01 f302 	lsl.w	r3, r1, r2
 80403f0:	ea40 0003 	orr.w	r0, r0, r3
 80403f4:	fa21 f304 	lsr.w	r3, r1, r4
 80403f8:	ea45 0103 	orr.w	r1, r5, r3
 80403fc:	bd30      	pop	{r4, r5, pc}
 80403fe:	f1c4 040c 	rsb	r4, r4, #12
 8040402:	f1c4 0220 	rsb	r2, r4, #32
 8040406:	fa20 f002 	lsr.w	r0, r0, r2
 804040a:	fa01 f304 	lsl.w	r3, r1, r4
 804040e:	ea40 0003 	orr.w	r0, r0, r3
 8040412:	4629      	mov	r1, r5
 8040414:	bd30      	pop	{r4, r5, pc}
 8040416:	fa21 f004 	lsr.w	r0, r1, r4
 804041a:	4629      	mov	r1, r5
 804041c:	bd30      	pop	{r4, r5, pc}
 804041e:	f094 0f00 	teq	r4, #0
 8040422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8040426:	bf06      	itte	eq
 8040428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 804042c:	3401      	addeq	r4, #1
 804042e:	3d01      	subne	r5, #1
 8040430:	e74e      	b.n	80402d0 <__adddf3+0x8c>
 8040432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8040436:	bf18      	it	ne
 8040438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 804043c:	d029      	beq.n	8040492 <__adddf3+0x24e>
 804043e:	ea94 0f05 	teq	r4, r5
 8040442:	bf08      	it	eq
 8040444:	ea90 0f02 	teqeq	r0, r2
 8040448:	d005      	beq.n	8040456 <__adddf3+0x212>
 804044a:	ea54 0c00 	orrs.w	ip, r4, r0
 804044e:	bf04      	itt	eq
 8040450:	4619      	moveq	r1, r3
 8040452:	4610      	moveq	r0, r2
 8040454:	bd30      	pop	{r4, r5, pc}
 8040456:	ea91 0f03 	teq	r1, r3
 804045a:	bf1e      	ittt	ne
 804045c:	2100      	movne	r1, #0
 804045e:	2000      	movne	r0, #0
 8040460:	bd30      	popne	{r4, r5, pc}
 8040462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8040466:	d105      	bne.n	8040474 <__adddf3+0x230>
 8040468:	0040      	lsls	r0, r0, #1
 804046a:	4149      	adcs	r1, r1
 804046c:	bf28      	it	cs
 804046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8040472:	bd30      	pop	{r4, r5, pc}
 8040474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8040478:	bf3c      	itt	cc
 804047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 804047e:	bd30      	popcc	{r4, r5, pc}
 8040480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8040488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 804048c:	f04f 0000 	mov.w	r0, #0
 8040490:	bd30      	pop	{r4, r5, pc}
 8040492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8040496:	bf1a      	itte	ne
 8040498:	4619      	movne	r1, r3
 804049a:	4610      	movne	r0, r2
 804049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80404a0:	bf1c      	itt	ne
 80404a2:	460b      	movne	r3, r1
 80404a4:	4602      	movne	r2, r0
 80404a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80404aa:	bf06      	itte	eq
 80404ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80404b0:	ea91 0f03 	teqeq	r1, r3
 80404b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80404b8:	bd30      	pop	{r4, r5, pc}
 80404ba:	bf00      	nop

080404bc <__aeabi_ui2d>:
 80404bc:	f090 0f00 	teq	r0, #0
 80404c0:	bf04      	itt	eq
 80404c2:	2100      	moveq	r1, #0
 80404c4:	4770      	bxeq	lr
 80404c6:	b530      	push	{r4, r5, lr}
 80404c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80404cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80404d0:	f04f 0500 	mov.w	r5, #0
 80404d4:	f04f 0100 	mov.w	r1, #0
 80404d8:	e750      	b.n	804037c <__adddf3+0x138>
 80404da:	bf00      	nop

080404dc <__aeabi_i2d>:
 80404dc:	f090 0f00 	teq	r0, #0
 80404e0:	bf04      	itt	eq
 80404e2:	2100      	moveq	r1, #0
 80404e4:	4770      	bxeq	lr
 80404e6:	b530      	push	{r4, r5, lr}
 80404e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80404ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80404f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80404f4:	bf48      	it	mi
 80404f6:	4240      	negmi	r0, r0
 80404f8:	f04f 0100 	mov.w	r1, #0
 80404fc:	e73e      	b.n	804037c <__adddf3+0x138>
 80404fe:	bf00      	nop

08040500 <__aeabi_f2d>:
 8040500:	0042      	lsls	r2, r0, #1
 8040502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8040506:	ea4f 0131 	mov.w	r1, r1, rrx
 804050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 804050e:	bf1f      	itttt	ne
 8040510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8040514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8040518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 804051c:	4770      	bxne	lr
 804051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8040522:	bf08      	it	eq
 8040524:	4770      	bxeq	lr
 8040526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 804052a:	bf04      	itt	eq
 804052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8040530:	4770      	bxeq	lr
 8040532:	b530      	push	{r4, r5, lr}
 8040534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8040538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 804053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040540:	e71c      	b.n	804037c <__adddf3+0x138>
 8040542:	bf00      	nop

08040544 <__aeabi_ul2d>:
 8040544:	ea50 0201 	orrs.w	r2, r0, r1
 8040548:	bf08      	it	eq
 804054a:	4770      	bxeq	lr
 804054c:	b530      	push	{r4, r5, lr}
 804054e:	f04f 0500 	mov.w	r5, #0
 8040552:	e00a      	b.n	804056a <__aeabi_l2d+0x16>

08040554 <__aeabi_l2d>:
 8040554:	ea50 0201 	orrs.w	r2, r0, r1
 8040558:	bf08      	it	eq
 804055a:	4770      	bxeq	lr
 804055c:	b530      	push	{r4, r5, lr}
 804055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8040562:	d502      	bpl.n	804056a <__aeabi_l2d+0x16>
 8040564:	4240      	negs	r0, r0
 8040566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 804056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 804056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8040576:	f43f aed8 	beq.w	804032a <__adddf3+0xe6>
 804057a:	f04f 0203 	mov.w	r2, #3
 804057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8040582:	bf18      	it	ne
 8040584:	3203      	addne	r2, #3
 8040586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 804058a:	bf18      	it	ne
 804058c:	3203      	addne	r2, #3
 804058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8040592:	f1c2 0320 	rsb	r3, r2, #32
 8040596:	fa00 fc03 	lsl.w	ip, r0, r3
 804059a:	fa20 f002 	lsr.w	r0, r0, r2
 804059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80405a2:	ea40 000e 	orr.w	r0, r0, lr
 80405a6:	fa21 f102 	lsr.w	r1, r1, r2
 80405aa:	4414      	add	r4, r2
 80405ac:	e6bd      	b.n	804032a <__adddf3+0xe6>
 80405ae:	bf00      	nop

080405b0 <__aeabi_dmul>:
 80405b0:	b570      	push	{r4, r5, r6, lr}
 80405b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80405b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80405ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80405be:	bf1d      	ittte	ne
 80405c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80405c4:	ea94 0f0c 	teqne	r4, ip
 80405c8:	ea95 0f0c 	teqne	r5, ip
 80405cc:	f000 f8de 	bleq	804078c <__aeabi_dmul+0x1dc>
 80405d0:	442c      	add	r4, r5
 80405d2:	ea81 0603 	eor.w	r6, r1, r3
 80405d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80405da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80405de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80405e2:	bf18      	it	ne
 80405e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80405e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80405ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80405f0:	d038      	beq.n	8040664 <__aeabi_dmul+0xb4>
 80405f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80405f6:	f04f 0500 	mov.w	r5, #0
 80405fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80405fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8040602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8040606:	f04f 0600 	mov.w	r6, #0
 804060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 804060e:	f09c 0f00 	teq	ip, #0
 8040612:	bf18      	it	ne
 8040614:	f04e 0e01 	orrne.w	lr, lr, #1
 8040618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 804061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8040620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8040624:	d204      	bcs.n	8040630 <__aeabi_dmul+0x80>
 8040626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 804062a:	416d      	adcs	r5, r5
 804062c:	eb46 0606 	adc.w	r6, r6, r6
 8040630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8040634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8040638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 804063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8040640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8040644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040648:	bf88      	it	hi
 804064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 804064e:	d81e      	bhi.n	804068e <__aeabi_dmul+0xde>
 8040650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8040654:	bf08      	it	eq
 8040656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 804065a:	f150 0000 	adcs.w	r0, r0, #0
 804065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040662:	bd70      	pop	{r4, r5, r6, pc}
 8040664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8040668:	ea46 0101 	orr.w	r1, r6, r1
 804066c:	ea40 0002 	orr.w	r0, r0, r2
 8040670:	ea81 0103 	eor.w	r1, r1, r3
 8040674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8040678:	bfc2      	ittt	gt
 804067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 804067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8040682:	bd70      	popgt	{r4, r5, r6, pc}
 8040684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040688:	f04f 0e00 	mov.w	lr, #0
 804068c:	3c01      	subs	r4, #1
 804068e:	f300 80ab 	bgt.w	80407e8 <__aeabi_dmul+0x238>
 8040692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8040696:	bfde      	ittt	le
 8040698:	2000      	movle	r0, #0
 804069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 804069e:	bd70      	pople	{r4, r5, r6, pc}
 80406a0:	f1c4 0400 	rsb	r4, r4, #0
 80406a4:	3c20      	subs	r4, #32
 80406a6:	da35      	bge.n	8040714 <__aeabi_dmul+0x164>
 80406a8:	340c      	adds	r4, #12
 80406aa:	dc1b      	bgt.n	80406e4 <__aeabi_dmul+0x134>
 80406ac:	f104 0414 	add.w	r4, r4, #20
 80406b0:	f1c4 0520 	rsb	r5, r4, #32
 80406b4:	fa00 f305 	lsl.w	r3, r0, r5
 80406b8:	fa20 f004 	lsr.w	r0, r0, r4
 80406bc:	fa01 f205 	lsl.w	r2, r1, r5
 80406c0:	ea40 0002 	orr.w	r0, r0, r2
 80406c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80406c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80406cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80406d0:	fa21 f604 	lsr.w	r6, r1, r4
 80406d4:	eb42 0106 	adc.w	r1, r2, r6
 80406d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80406dc:	bf08      	it	eq
 80406de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80406e2:	bd70      	pop	{r4, r5, r6, pc}
 80406e4:	f1c4 040c 	rsb	r4, r4, #12
 80406e8:	f1c4 0520 	rsb	r5, r4, #32
 80406ec:	fa00 f304 	lsl.w	r3, r0, r4
 80406f0:	fa20 f005 	lsr.w	r0, r0, r5
 80406f4:	fa01 f204 	lsl.w	r2, r1, r4
 80406f8:	ea40 0002 	orr.w	r0, r0, r2
 80406fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040704:	f141 0100 	adc.w	r1, r1, #0
 8040708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 804070c:	bf08      	it	eq
 804070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8040712:	bd70      	pop	{r4, r5, r6, pc}
 8040714:	f1c4 0520 	rsb	r5, r4, #32
 8040718:	fa00 f205 	lsl.w	r2, r0, r5
 804071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8040720:	fa20 f304 	lsr.w	r3, r0, r4
 8040724:	fa01 f205 	lsl.w	r2, r1, r5
 8040728:	ea43 0302 	orr.w	r3, r3, r2
 804072c:	fa21 f004 	lsr.w	r0, r1, r4
 8040730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040734:	fa21 f204 	lsr.w	r2, r1, r4
 8040738:	ea20 0002 	bic.w	r0, r0, r2
 804073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8040740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040744:	bf08      	it	eq
 8040746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804074a:	bd70      	pop	{r4, r5, r6, pc}
 804074c:	f094 0f00 	teq	r4, #0
 8040750:	d10f      	bne.n	8040772 <__aeabi_dmul+0x1c2>
 8040752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8040756:	0040      	lsls	r0, r0, #1
 8040758:	eb41 0101 	adc.w	r1, r1, r1
 804075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040760:	bf08      	it	eq
 8040762:	3c01      	subeq	r4, #1
 8040764:	d0f7      	beq.n	8040756 <__aeabi_dmul+0x1a6>
 8040766:	ea41 0106 	orr.w	r1, r1, r6
 804076a:	f095 0f00 	teq	r5, #0
 804076e:	bf18      	it	ne
 8040770:	4770      	bxne	lr
 8040772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8040776:	0052      	lsls	r2, r2, #1
 8040778:	eb43 0303 	adc.w	r3, r3, r3
 804077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8040780:	bf08      	it	eq
 8040782:	3d01      	subeq	r5, #1
 8040784:	d0f7      	beq.n	8040776 <__aeabi_dmul+0x1c6>
 8040786:	ea43 0306 	orr.w	r3, r3, r6
 804078a:	4770      	bx	lr
 804078c:	ea94 0f0c 	teq	r4, ip
 8040790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040794:	bf18      	it	ne
 8040796:	ea95 0f0c 	teqne	r5, ip
 804079a:	d00c      	beq.n	80407b6 <__aeabi_dmul+0x206>
 804079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80407a0:	bf18      	it	ne
 80407a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80407a6:	d1d1      	bne.n	804074c <__aeabi_dmul+0x19c>
 80407a8:	ea81 0103 	eor.w	r1, r1, r3
 80407ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80407b0:	f04f 0000 	mov.w	r0, #0
 80407b4:	bd70      	pop	{r4, r5, r6, pc}
 80407b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80407ba:	bf06      	itte	eq
 80407bc:	4610      	moveq	r0, r2
 80407be:	4619      	moveq	r1, r3
 80407c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80407c4:	d019      	beq.n	80407fa <__aeabi_dmul+0x24a>
 80407c6:	ea94 0f0c 	teq	r4, ip
 80407ca:	d102      	bne.n	80407d2 <__aeabi_dmul+0x222>
 80407cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80407d0:	d113      	bne.n	80407fa <__aeabi_dmul+0x24a>
 80407d2:	ea95 0f0c 	teq	r5, ip
 80407d6:	d105      	bne.n	80407e4 <__aeabi_dmul+0x234>
 80407d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80407dc:	bf1c      	itt	ne
 80407de:	4610      	movne	r0, r2
 80407e0:	4619      	movne	r1, r3
 80407e2:	d10a      	bne.n	80407fa <__aeabi_dmul+0x24a>
 80407e4:	ea81 0103 	eor.w	r1, r1, r3
 80407e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80407ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80407f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80407f4:	f04f 0000 	mov.w	r0, #0
 80407f8:	bd70      	pop	{r4, r5, r6, pc}
 80407fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80407fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8040802:	bd70      	pop	{r4, r5, r6, pc}

08040804 <__aeabi_ddiv>:
 8040804:	b570      	push	{r4, r5, r6, lr}
 8040806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 804080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 804080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040812:	bf1d      	ittte	ne
 8040814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040818:	ea94 0f0c 	teqne	r4, ip
 804081c:	ea95 0f0c 	teqne	r5, ip
 8040820:	f000 f8a7 	bleq	8040972 <__aeabi_ddiv+0x16e>
 8040824:	eba4 0405 	sub.w	r4, r4, r5
 8040828:	ea81 0e03 	eor.w	lr, r1, r3
 804082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8040834:	f000 8088 	beq.w	8040948 <__aeabi_ddiv+0x144>
 8040838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 804083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8040844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 804084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8040854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8040858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 804085c:	429d      	cmp	r5, r3
 804085e:	bf08      	it	eq
 8040860:	4296      	cmpeq	r6, r2
 8040862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8040866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 804086a:	d202      	bcs.n	8040872 <__aeabi_ddiv+0x6e>
 804086c:	085b      	lsrs	r3, r3, #1
 804086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8040872:	1ab6      	subs	r6, r6, r2
 8040874:	eb65 0503 	sbc.w	r5, r5, r3
 8040878:	085b      	lsrs	r3, r3, #1
 804087a:	ea4f 0232 	mov.w	r2, r2, rrx
 804087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8040882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8040886:	ebb6 0e02 	subs.w	lr, r6, r2
 804088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804088e:	bf22      	ittt	cs
 8040890:	1ab6      	subcs	r6, r6, r2
 8040892:	4675      	movcs	r5, lr
 8040894:	ea40 000c 	orrcs.w	r0, r0, ip
 8040898:	085b      	lsrs	r3, r3, #1
 804089a:	ea4f 0232 	mov.w	r2, r2, rrx
 804089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80408a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408a6:	bf22      	ittt	cs
 80408a8:	1ab6      	subcs	r6, r6, r2
 80408aa:	4675      	movcs	r5, lr
 80408ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80408b0:	085b      	lsrs	r3, r3, #1
 80408b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80408ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408be:	bf22      	ittt	cs
 80408c0:	1ab6      	subcs	r6, r6, r2
 80408c2:	4675      	movcs	r5, lr
 80408c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80408c8:	085b      	lsrs	r3, r3, #1
 80408ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80408ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80408d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408d6:	bf22      	ittt	cs
 80408d8:	1ab6      	subcs	r6, r6, r2
 80408da:	4675      	movcs	r5, lr
 80408dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80408e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80408e4:	d018      	beq.n	8040918 <__aeabi_ddiv+0x114>
 80408e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80408ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80408ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80408f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80408f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80408fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80408fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8040902:	d1c0      	bne.n	8040886 <__aeabi_ddiv+0x82>
 8040904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040908:	d10b      	bne.n	8040922 <__aeabi_ddiv+0x11e>
 804090a:	ea41 0100 	orr.w	r1, r1, r0
 804090e:	f04f 0000 	mov.w	r0, #0
 8040912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8040916:	e7b6      	b.n	8040886 <__aeabi_ddiv+0x82>
 8040918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 804091c:	bf04      	itt	eq
 804091e:	4301      	orreq	r1, r0
 8040920:	2000      	moveq	r0, #0
 8040922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040926:	bf88      	it	hi
 8040928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 804092c:	f63f aeaf 	bhi.w	804068e <__aeabi_dmul+0xde>
 8040930:	ebb5 0c03 	subs.w	ip, r5, r3
 8040934:	bf04      	itt	eq
 8040936:	ebb6 0c02 	subseq.w	ip, r6, r2
 804093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 804093e:	f150 0000 	adcs.w	r0, r0, #0
 8040942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040946:	bd70      	pop	{r4, r5, r6, pc}
 8040948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 804094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8040954:	bfc2      	ittt	gt
 8040956:	ebd4 050c 	rsbsgt	r5, r4, ip
 804095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 804095e:	bd70      	popgt	{r4, r5, r6, pc}
 8040960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040964:	f04f 0e00 	mov.w	lr, #0
 8040968:	3c01      	subs	r4, #1
 804096a:	e690      	b.n	804068e <__aeabi_dmul+0xde>
 804096c:	ea45 0e06 	orr.w	lr, r5, r6
 8040970:	e68d      	b.n	804068e <__aeabi_dmul+0xde>
 8040972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040976:	ea94 0f0c 	teq	r4, ip
 804097a:	bf08      	it	eq
 804097c:	ea95 0f0c 	teqeq	r5, ip
 8040980:	f43f af3b 	beq.w	80407fa <__aeabi_dmul+0x24a>
 8040984:	ea94 0f0c 	teq	r4, ip
 8040988:	d10a      	bne.n	80409a0 <__aeabi_ddiv+0x19c>
 804098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 804098e:	f47f af34 	bne.w	80407fa <__aeabi_dmul+0x24a>
 8040992:	ea95 0f0c 	teq	r5, ip
 8040996:	f47f af25 	bne.w	80407e4 <__aeabi_dmul+0x234>
 804099a:	4610      	mov	r0, r2
 804099c:	4619      	mov	r1, r3
 804099e:	e72c      	b.n	80407fa <__aeabi_dmul+0x24a>
 80409a0:	ea95 0f0c 	teq	r5, ip
 80409a4:	d106      	bne.n	80409b4 <__aeabi_ddiv+0x1b0>
 80409a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80409aa:	f43f aefd 	beq.w	80407a8 <__aeabi_dmul+0x1f8>
 80409ae:	4610      	mov	r0, r2
 80409b0:	4619      	mov	r1, r3
 80409b2:	e722      	b.n	80407fa <__aeabi_dmul+0x24a>
 80409b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80409b8:	bf18      	it	ne
 80409ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80409be:	f47f aec5 	bne.w	804074c <__aeabi_dmul+0x19c>
 80409c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80409c6:	f47f af0d 	bne.w	80407e4 <__aeabi_dmul+0x234>
 80409ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80409ce:	f47f aeeb 	bne.w	80407a8 <__aeabi_dmul+0x1f8>
 80409d2:	e712      	b.n	80407fa <__aeabi_dmul+0x24a>

080409d4 <__aeabi_d2uiz>:
 80409d4:	004a      	lsls	r2, r1, #1
 80409d6:	d211      	bcs.n	80409fc <__aeabi_d2uiz+0x28>
 80409d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80409dc:	d211      	bcs.n	8040a02 <__aeabi_d2uiz+0x2e>
 80409de:	d50d      	bpl.n	80409fc <__aeabi_d2uiz+0x28>
 80409e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80409e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80409e8:	d40e      	bmi.n	8040a08 <__aeabi_d2uiz+0x34>
 80409ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80409ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80409f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80409f6:	fa23 f002 	lsr.w	r0, r3, r2
 80409fa:	4770      	bx	lr
 80409fc:	f04f 0000 	mov.w	r0, #0
 8040a00:	4770      	bx	lr
 8040a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040a06:	d102      	bne.n	8040a0e <__aeabi_d2uiz+0x3a>
 8040a08:	f04f 30ff 	mov.w	r0, #4294967295
 8040a0c:	4770      	bx	lr
 8040a0e:	f04f 0000 	mov.w	r0, #0
 8040a12:	4770      	bx	lr

08040a14 <__aeabi_uldivmod>:
 8040a14:	b953      	cbnz	r3, 8040a2c <__aeabi_uldivmod+0x18>
 8040a16:	b94a      	cbnz	r2, 8040a2c <__aeabi_uldivmod+0x18>
 8040a18:	2900      	cmp	r1, #0
 8040a1a:	bf08      	it	eq
 8040a1c:	2800      	cmpeq	r0, #0
 8040a1e:	bf1c      	itt	ne
 8040a20:	f04f 31ff 	movne.w	r1, #4294967295
 8040a24:	f04f 30ff 	movne.w	r0, #4294967295
 8040a28:	f000 b980 	b.w	8040d2c <__aeabi_idiv0>
 8040a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8040a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040a34:	f000 f806 	bl	8040a44 <__udivmoddi4>
 8040a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040a40:	b004      	add	sp, #16
 8040a42:	4770      	bx	lr

08040a44 <__udivmoddi4>:
 8040a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8040a48:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8040a4a:	4604      	mov	r4, r0
 8040a4c:	4688      	mov	r8, r1
 8040a4e:	2b00      	cmp	r3, #0
 8040a50:	f040 8084 	bne.w	8040b5c <__udivmoddi4+0x118>
 8040a54:	428a      	cmp	r2, r1
 8040a56:	4617      	mov	r7, r2
 8040a58:	d943      	bls.n	8040ae2 <__udivmoddi4+0x9e>
 8040a5a:	fab2 f282 	clz	r2, r2
 8040a5e:	b142      	cbz	r2, 8040a72 <__udivmoddi4+0x2e>
 8040a60:	f1c2 0020 	rsb	r0, r2, #32
 8040a64:	4091      	lsls	r1, r2
 8040a66:	4097      	lsls	r7, r2
 8040a68:	fa24 f000 	lsr.w	r0, r4, r0
 8040a6c:	4094      	lsls	r4, r2
 8040a6e:	ea40 0801 	orr.w	r8, r0, r1
 8040a72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8040a76:	0c23      	lsrs	r3, r4, #16
 8040a78:	fa1f fe87 	uxth.w	lr, r7
 8040a7c:	fbb8 f6fc 	udiv	r6, r8, ip
 8040a80:	fb0c 8116 	mls	r1, ip, r6, r8
 8040a84:	fb06 f00e 	mul.w	r0, r6, lr
 8040a88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040a8c:	4298      	cmp	r0, r3
 8040a8e:	d907      	bls.n	8040aa0 <__udivmoddi4+0x5c>
 8040a90:	18fb      	adds	r3, r7, r3
 8040a92:	f106 31ff 	add.w	r1, r6, #4294967295
 8040a96:	d202      	bcs.n	8040a9e <__udivmoddi4+0x5a>
 8040a98:	4298      	cmp	r0, r3
 8040a9a:	f200 8131 	bhi.w	8040d00 <__udivmoddi4+0x2bc>
 8040a9e:	460e      	mov	r6, r1
 8040aa0:	1a19      	subs	r1, r3, r0
 8040aa2:	b2a3      	uxth	r3, r4
 8040aa4:	fbb1 f0fc 	udiv	r0, r1, ip
 8040aa8:	fb0c 1110 	mls	r1, ip, r0, r1
 8040aac:	fb00 fe0e 	mul.w	lr, r0, lr
 8040ab0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040ab4:	45a6      	cmp	lr, r4
 8040ab6:	d907      	bls.n	8040ac8 <__udivmoddi4+0x84>
 8040ab8:	193c      	adds	r4, r7, r4
 8040aba:	f100 33ff 	add.w	r3, r0, #4294967295
 8040abe:	d202      	bcs.n	8040ac6 <__udivmoddi4+0x82>
 8040ac0:	45a6      	cmp	lr, r4
 8040ac2:	f200 811a 	bhi.w	8040cfa <__udivmoddi4+0x2b6>
 8040ac6:	4618      	mov	r0, r3
 8040ac8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040acc:	eba4 040e 	sub.w	r4, r4, lr
 8040ad0:	2600      	movs	r6, #0
 8040ad2:	b11d      	cbz	r5, 8040adc <__udivmoddi4+0x98>
 8040ad4:	40d4      	lsrs	r4, r2
 8040ad6:	2300      	movs	r3, #0
 8040ad8:	e9c5 4300 	strd	r4, r3, [r5]
 8040adc:	4631      	mov	r1, r6
 8040ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040ae2:	b902      	cbnz	r2, 8040ae6 <__udivmoddi4+0xa2>
 8040ae4:	deff      	udf	#255	; 0xff
 8040ae6:	fab2 f282 	clz	r2, r2
 8040aea:	2a00      	cmp	r2, #0
 8040aec:	d152      	bne.n	8040b94 <__udivmoddi4+0x150>
 8040aee:	1bcb      	subs	r3, r1, r7
 8040af0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040af4:	fa1f f887 	uxth.w	r8, r7
 8040af8:	2601      	movs	r6, #1
 8040afa:	0c21      	lsrs	r1, r4, #16
 8040afc:	fbb3 fcfe 	udiv	ip, r3, lr
 8040b00:	fb0e 301c 	mls	r0, lr, ip, r3
 8040b04:	fb08 f90c 	mul.w	r9, r8, ip
 8040b08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8040b0c:	4589      	cmp	r9, r1
 8040b0e:	d90b      	bls.n	8040b28 <__udivmoddi4+0xe4>
 8040b10:	1879      	adds	r1, r7, r1
 8040b12:	f10c 33ff 	add.w	r3, ip, #4294967295
 8040b16:	bf2c      	ite	cs
 8040b18:	2001      	movcs	r0, #1
 8040b1a:	2000      	movcc	r0, #0
 8040b1c:	4589      	cmp	r9, r1
 8040b1e:	d902      	bls.n	8040b26 <__udivmoddi4+0xe2>
 8040b20:	2800      	cmp	r0, #0
 8040b22:	f000 80f0 	beq.w	8040d06 <__udivmoddi4+0x2c2>
 8040b26:	469c      	mov	ip, r3
 8040b28:	eba1 0109 	sub.w	r1, r1, r9
 8040b2c:	b2a3      	uxth	r3, r4
 8040b2e:	fbb1 f0fe 	udiv	r0, r1, lr
 8040b32:	fb0e 1110 	mls	r1, lr, r0, r1
 8040b36:	fb08 f800 	mul.w	r8, r8, r0
 8040b3a:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040b3e:	45a0      	cmp	r8, r4
 8040b40:	d907      	bls.n	8040b52 <__udivmoddi4+0x10e>
 8040b42:	193c      	adds	r4, r7, r4
 8040b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8040b48:	d202      	bcs.n	8040b50 <__udivmoddi4+0x10c>
 8040b4a:	45a0      	cmp	r8, r4
 8040b4c:	f200 80d2 	bhi.w	8040cf4 <__udivmoddi4+0x2b0>
 8040b50:	4618      	mov	r0, r3
 8040b52:	eba4 0408 	sub.w	r4, r4, r8
 8040b56:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8040b5a:	e7ba      	b.n	8040ad2 <__udivmoddi4+0x8e>
 8040b5c:	428b      	cmp	r3, r1
 8040b5e:	d909      	bls.n	8040b74 <__udivmoddi4+0x130>
 8040b60:	2d00      	cmp	r5, #0
 8040b62:	f000 80be 	beq.w	8040ce2 <__udivmoddi4+0x29e>
 8040b66:	2600      	movs	r6, #0
 8040b68:	e9c5 0100 	strd	r0, r1, [r5]
 8040b6c:	4630      	mov	r0, r6
 8040b6e:	4631      	mov	r1, r6
 8040b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040b74:	fab3 f683 	clz	r6, r3
 8040b78:	2e00      	cmp	r6, #0
 8040b7a:	d14d      	bne.n	8040c18 <__udivmoddi4+0x1d4>
 8040b7c:	428b      	cmp	r3, r1
 8040b7e:	f0c0 80b3 	bcc.w	8040ce8 <__udivmoddi4+0x2a4>
 8040b82:	4282      	cmp	r2, r0
 8040b84:	f240 80b0 	bls.w	8040ce8 <__udivmoddi4+0x2a4>
 8040b88:	4630      	mov	r0, r6
 8040b8a:	2d00      	cmp	r5, #0
 8040b8c:	d0a6      	beq.n	8040adc <__udivmoddi4+0x98>
 8040b8e:	e9c5 4800 	strd	r4, r8, [r5]
 8040b92:	e7a3      	b.n	8040adc <__udivmoddi4+0x98>
 8040b94:	4097      	lsls	r7, r2
 8040b96:	f1c2 0320 	rsb	r3, r2, #32
 8040b9a:	fa01 f002 	lsl.w	r0, r1, r2
 8040b9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040ba2:	40d9      	lsrs	r1, r3
 8040ba4:	fa24 f303 	lsr.w	r3, r4, r3
 8040ba8:	fa1f f887 	uxth.w	r8, r7
 8040bac:	4094      	lsls	r4, r2
 8040bae:	4303      	orrs	r3, r0
 8040bb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8040bb4:	0c1e      	lsrs	r6, r3, #16
 8040bb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8040bba:	fb00 fc08 	mul.w	ip, r0, r8
 8040bbe:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8040bc2:	458c      	cmp	ip, r1
 8040bc4:	d90e      	bls.n	8040be4 <__udivmoddi4+0x1a0>
 8040bc6:	1879      	adds	r1, r7, r1
 8040bc8:	f100 36ff 	add.w	r6, r0, #4294967295
 8040bcc:	bf2c      	ite	cs
 8040bce:	f04f 0901 	movcs.w	r9, #1
 8040bd2:	f04f 0900 	movcc.w	r9, #0
 8040bd6:	458c      	cmp	ip, r1
 8040bd8:	d903      	bls.n	8040be2 <__udivmoddi4+0x19e>
 8040bda:	f1b9 0f00 	cmp.w	r9, #0
 8040bde:	f000 8096 	beq.w	8040d0e <__udivmoddi4+0x2ca>
 8040be2:	4630      	mov	r0, r6
 8040be4:	eba1 010c 	sub.w	r1, r1, ip
 8040be8:	b29b      	uxth	r3, r3
 8040bea:	fbb1 f6fe 	udiv	r6, r1, lr
 8040bee:	fb0e 1116 	mls	r1, lr, r6, r1
 8040bf2:	fb06 fc08 	mul.w	ip, r6, r8
 8040bf6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8040bfa:	458c      	cmp	ip, r1
 8040bfc:	d907      	bls.n	8040c0e <__udivmoddi4+0x1ca>
 8040bfe:	1879      	adds	r1, r7, r1
 8040c00:	f106 33ff 	add.w	r3, r6, #4294967295
 8040c04:	d202      	bcs.n	8040c0c <__udivmoddi4+0x1c8>
 8040c06:	458c      	cmp	ip, r1
 8040c08:	f200 8088 	bhi.w	8040d1c <__udivmoddi4+0x2d8>
 8040c0c:	461e      	mov	r6, r3
 8040c0e:	eba1 030c 	sub.w	r3, r1, ip
 8040c12:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040c16:	e770      	b.n	8040afa <__udivmoddi4+0xb6>
 8040c18:	f1c6 0720 	rsb	r7, r6, #32
 8040c1c:	fa03 f406 	lsl.w	r4, r3, r6
 8040c20:	fa02 fc06 	lsl.w	ip, r2, r6
 8040c24:	fa01 fe06 	lsl.w	lr, r1, r6
 8040c28:	40fa      	lsrs	r2, r7
 8040c2a:	fa20 f807 	lsr.w	r8, r0, r7
 8040c2e:	40f9      	lsrs	r1, r7
 8040c30:	fa00 f306 	lsl.w	r3, r0, r6
 8040c34:	4322      	orrs	r2, r4
 8040c36:	ea48 040e 	orr.w	r4, r8, lr
 8040c3a:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8040c3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8040c42:	fa1f f982 	uxth.w	r9, r2
 8040c46:	fbb1 faf8 	udiv	sl, r1, r8
 8040c4a:	fb08 111a 	mls	r1, r8, sl, r1
 8040c4e:	fb0a f009 	mul.w	r0, sl, r9
 8040c52:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8040c56:	4570      	cmp	r0, lr
 8040c58:	d90e      	bls.n	8040c78 <__udivmoddi4+0x234>
 8040c5a:	eb12 0e0e 	adds.w	lr, r2, lr
 8040c5e:	f10a 31ff 	add.w	r1, sl, #4294967295
 8040c62:	bf2c      	ite	cs
 8040c64:	f04f 0b01 	movcs.w	fp, #1
 8040c68:	f04f 0b00 	movcc.w	fp, #0
 8040c6c:	4570      	cmp	r0, lr
 8040c6e:	d902      	bls.n	8040c76 <__udivmoddi4+0x232>
 8040c70:	f1bb 0f00 	cmp.w	fp, #0
 8040c74:	d04e      	beq.n	8040d14 <__udivmoddi4+0x2d0>
 8040c76:	468a      	mov	sl, r1
 8040c78:	ebae 0e00 	sub.w	lr, lr, r0
 8040c7c:	b2a4      	uxth	r4, r4
 8040c7e:	fbbe f0f8 	udiv	r0, lr, r8
 8040c82:	fb08 ee10 	mls	lr, r8, r0, lr
 8040c86:	fb00 f909 	mul.w	r9, r0, r9
 8040c8a:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8040c8e:	45f1      	cmp	r9, lr
 8040c90:	d907      	bls.n	8040ca2 <__udivmoddi4+0x25e>
 8040c92:	eb12 0e0e 	adds.w	lr, r2, lr
 8040c96:	f100 31ff 	add.w	r1, r0, #4294967295
 8040c9a:	d201      	bcs.n	8040ca0 <__udivmoddi4+0x25c>
 8040c9c:	45f1      	cmp	r9, lr
 8040c9e:	d840      	bhi.n	8040d22 <__udivmoddi4+0x2de>
 8040ca0:	4608      	mov	r0, r1
 8040ca2:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8040ca6:	ebae 0e09 	sub.w	lr, lr, r9
 8040caa:	fba0 890c 	umull	r8, r9, r0, ip
 8040cae:	45ce      	cmp	lr, r9
 8040cb0:	4641      	mov	r1, r8
 8040cb2:	464c      	mov	r4, r9
 8040cb4:	d302      	bcc.n	8040cbc <__udivmoddi4+0x278>
 8040cb6:	d106      	bne.n	8040cc6 <__udivmoddi4+0x282>
 8040cb8:	4543      	cmp	r3, r8
 8040cba:	d204      	bcs.n	8040cc6 <__udivmoddi4+0x282>
 8040cbc:	3801      	subs	r0, #1
 8040cbe:	ebb8 010c 	subs.w	r1, r8, ip
 8040cc2:	eb69 0402 	sbc.w	r4, r9, r2
 8040cc6:	b37d      	cbz	r5, 8040d28 <__udivmoddi4+0x2e4>
 8040cc8:	1a5a      	subs	r2, r3, r1
 8040cca:	eb6e 0e04 	sbc.w	lr, lr, r4
 8040cce:	40f2      	lsrs	r2, r6
 8040cd0:	fa0e f707 	lsl.w	r7, lr, r7
 8040cd4:	fa2e f306 	lsr.w	r3, lr, r6
 8040cd8:	2600      	movs	r6, #0
 8040cda:	4317      	orrs	r7, r2
 8040cdc:	e9c5 7300 	strd	r7, r3, [r5]
 8040ce0:	e6fc      	b.n	8040adc <__udivmoddi4+0x98>
 8040ce2:	462e      	mov	r6, r5
 8040ce4:	4628      	mov	r0, r5
 8040ce6:	e6f9      	b.n	8040adc <__udivmoddi4+0x98>
 8040ce8:	1a84      	subs	r4, r0, r2
 8040cea:	eb61 0103 	sbc.w	r1, r1, r3
 8040cee:	2001      	movs	r0, #1
 8040cf0:	4688      	mov	r8, r1
 8040cf2:	e74a      	b.n	8040b8a <__udivmoddi4+0x146>
 8040cf4:	3802      	subs	r0, #2
 8040cf6:	443c      	add	r4, r7
 8040cf8:	e72b      	b.n	8040b52 <__udivmoddi4+0x10e>
 8040cfa:	3802      	subs	r0, #2
 8040cfc:	443c      	add	r4, r7
 8040cfe:	e6e3      	b.n	8040ac8 <__udivmoddi4+0x84>
 8040d00:	3e02      	subs	r6, #2
 8040d02:	443b      	add	r3, r7
 8040d04:	e6cc      	b.n	8040aa0 <__udivmoddi4+0x5c>
 8040d06:	f1ac 0c02 	sub.w	ip, ip, #2
 8040d0a:	4439      	add	r1, r7
 8040d0c:	e70c      	b.n	8040b28 <__udivmoddi4+0xe4>
 8040d0e:	3802      	subs	r0, #2
 8040d10:	4439      	add	r1, r7
 8040d12:	e767      	b.n	8040be4 <__udivmoddi4+0x1a0>
 8040d14:	f1aa 0a02 	sub.w	sl, sl, #2
 8040d18:	4496      	add	lr, r2
 8040d1a:	e7ad      	b.n	8040c78 <__udivmoddi4+0x234>
 8040d1c:	3e02      	subs	r6, #2
 8040d1e:	4439      	add	r1, r7
 8040d20:	e775      	b.n	8040c0e <__udivmoddi4+0x1ca>
 8040d22:	3802      	subs	r0, #2
 8040d24:	4496      	add	lr, r2
 8040d26:	e7bc      	b.n	8040ca2 <__udivmoddi4+0x25e>
 8040d28:	462e      	mov	r6, r5
 8040d2a:	e6d7      	b.n	8040adc <__udivmoddi4+0x98>

08040d2c <__aeabi_idiv0>:
 8040d2c:	4770      	bx	lr
 8040d2e:	bf00      	nop

08040d30 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8040d30:	b580      	push	{r7, lr}
 8040d32:	b08a      	sub	sp, #40	; 0x28
 8040d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8040d36:	f107 031c 	add.w	r3, r7, #28
 8040d3a:	2200      	movs	r2, #0
 8040d3c:	601a      	str	r2, [r3, #0]
 8040d3e:	605a      	str	r2, [r3, #4]
 8040d40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8040d42:	1d3b      	adds	r3, r7, #4
 8040d44:	2200      	movs	r2, #0
 8040d46:	601a      	str	r2, [r3, #0]
 8040d48:	605a      	str	r2, [r3, #4]
 8040d4a:	609a      	str	r2, [r3, #8]
 8040d4c:	60da      	str	r2, [r3, #12]
 8040d4e:	611a      	str	r2, [r3, #16]
 8040d50:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8040d52:	4b2f      	ldr	r3, [pc, #188]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040d54:	4a2f      	ldr	r2, [pc, #188]	; (8040e14 <MX_ADC1_Init+0xe4>)
 8040d56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8040d58:	4b2d      	ldr	r3, [pc, #180]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040d5a:	2200      	movs	r2, #0
 8040d5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8040d5e:	4b2c      	ldr	r3, [pc, #176]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040d60:	2200      	movs	r2, #0
 8040d62:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8040d64:	4b2a      	ldr	r3, [pc, #168]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040d66:	2200      	movs	r2, #0
 8040d68:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8040d6a:	4b29      	ldr	r3, [pc, #164]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040d6c:	2200      	movs	r2, #0
 8040d6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8040d70:	4b27      	ldr	r3, [pc, #156]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040d72:	2204      	movs	r2, #4
 8040d74:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8040d76:	4b26      	ldr	r3, [pc, #152]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040d78:	2200      	movs	r2, #0
 8040d7a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8040d7c:	4b24      	ldr	r3, [pc, #144]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040d7e:	2200      	movs	r2, #0
 8040d80:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8040d82:	4b23      	ldr	r3, [pc, #140]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040d84:	2201      	movs	r2, #1
 8040d86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8040d88:	4b21      	ldr	r3, [pc, #132]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040d8a:	2200      	movs	r2, #0
 8040d8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8040d90:	4b1f      	ldr	r3, [pc, #124]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040d92:	2200      	movs	r2, #0
 8040d94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8040d96:	4b1e      	ldr	r3, [pc, #120]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040d98:	2200      	movs	r2, #0
 8040d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8040d9c:	4b1c      	ldr	r3, [pc, #112]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040d9e:	2200      	movs	r2, #0
 8040da0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8040da4:	4b1a      	ldr	r3, [pc, #104]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040da6:	2200      	movs	r2, #0
 8040da8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8040daa:	4b19      	ldr	r3, [pc, #100]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040dac:	2200      	movs	r2, #0
 8040dae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8040db2:	4817      	ldr	r0, [pc, #92]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040db4:	f006 f940 	bl	8047038 <HAL_ADC_Init>
 8040db8:	4603      	mov	r3, r0
 8040dba:	2b00      	cmp	r3, #0
 8040dbc:	d001      	beq.n	8040dc2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8040dbe:	f000 ff9b 	bl	8041cf8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8040dc2:	2300      	movs	r3, #0
 8040dc4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8040dc6:	f107 031c 	add.w	r3, r7, #28
 8040dca:	4619      	mov	r1, r3
 8040dcc:	4810      	ldr	r0, [pc, #64]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040dce:	f007 f94d 	bl	804806c <HAL_ADCEx_MultiModeConfigChannel>
 8040dd2:	4603      	mov	r3, r0
 8040dd4:	2b00      	cmp	r3, #0
 8040dd6:	d001      	beq.n	8040ddc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8040dd8:	f000 ff8e 	bl	8041cf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8040ddc:	4b0e      	ldr	r3, [pc, #56]	; (8040e18 <MX_ADC1_Init+0xe8>)
 8040dde:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8040de0:	2306      	movs	r3, #6
 8040de2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8040de4:	2300      	movs	r3, #0
 8040de6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8040de8:	237f      	movs	r3, #127	; 0x7f
 8040dea:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8040dec:	2304      	movs	r3, #4
 8040dee:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8040df0:	2300      	movs	r3, #0
 8040df2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8040df4:	1d3b      	adds	r3, r7, #4
 8040df6:	4619      	mov	r1, r3
 8040df8:	4805      	ldr	r0, [pc, #20]	; (8040e10 <MX_ADC1_Init+0xe0>)
 8040dfa:	f006 fcf7 	bl	80477ec <HAL_ADC_ConfigChannel>
 8040dfe:	4603      	mov	r3, r0
 8040e00:	2b00      	cmp	r3, #0
 8040e02:	d001      	beq.n	8040e08 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8040e04:	f000 ff78 	bl	8041cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8040e08:	bf00      	nop
 8040e0a:	3728      	adds	r7, #40	; 0x28
 8040e0c:	46bd      	mov	sp, r7
 8040e0e:	bd80      	pop	{r7, pc}
 8040e10:	20018e6c 	.word	0x20018e6c
 8040e14:	42028000 	.word	0x42028000
 8040e18:	cb840000 	.word	0xcb840000

08040e1c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8040e1c:	b580      	push	{r7, lr}
 8040e1e:	b086      	sub	sp, #24
 8040e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8040e22:	463b      	mov	r3, r7
 8040e24:	2200      	movs	r2, #0
 8040e26:	601a      	str	r2, [r3, #0]
 8040e28:	605a      	str	r2, [r3, #4]
 8040e2a:	609a      	str	r2, [r3, #8]
 8040e2c:	60da      	str	r2, [r3, #12]
 8040e2e:	611a      	str	r2, [r3, #16]
 8040e30:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8040e32:	4b29      	ldr	r3, [pc, #164]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e34:	4a29      	ldr	r2, [pc, #164]	; (8040edc <MX_ADC2_Init+0xc0>)
 8040e36:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8040e38:	4b27      	ldr	r3, [pc, #156]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e3a:	2200      	movs	r2, #0
 8040e3c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8040e3e:	4b26      	ldr	r3, [pc, #152]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e40:	2200      	movs	r2, #0
 8040e42:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8040e44:	4b24      	ldr	r3, [pc, #144]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e46:	2200      	movs	r2, #0
 8040e48:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8040e4a:	4b23      	ldr	r3, [pc, #140]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e4c:	2200      	movs	r2, #0
 8040e4e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8040e50:	4b21      	ldr	r3, [pc, #132]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e52:	2204      	movs	r2, #4
 8040e54:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8040e56:	4b20      	ldr	r3, [pc, #128]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e58:	2200      	movs	r2, #0
 8040e5a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8040e5c:	4b1e      	ldr	r3, [pc, #120]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e5e:	2200      	movs	r2, #0
 8040e60:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8040e62:	4b1d      	ldr	r3, [pc, #116]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e64:	2201      	movs	r2, #1
 8040e66:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8040e68:	4b1b      	ldr	r3, [pc, #108]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e6a:	2200      	movs	r2, #0
 8040e6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8040e70:	4b19      	ldr	r3, [pc, #100]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e72:	2200      	movs	r2, #0
 8040e74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8040e76:	4b18      	ldr	r3, [pc, #96]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e78:	2200      	movs	r2, #0
 8040e7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8040e7c:	4b16      	ldr	r3, [pc, #88]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e7e:	2200      	movs	r2, #0
 8040e80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8040e84:	4b14      	ldr	r3, [pc, #80]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e86:	2200      	movs	r2, #0
 8040e88:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8040e8a:	4b13      	ldr	r3, [pc, #76]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e8c:	2200      	movs	r2, #0
 8040e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8040e92:	4811      	ldr	r0, [pc, #68]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040e94:	f006 f8d0 	bl	8047038 <HAL_ADC_Init>
 8040e98:	4603      	mov	r3, r0
 8040e9a:	2b00      	cmp	r3, #0
 8040e9c:	d001      	beq.n	8040ea2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8040e9e:	f000 ff2b 	bl	8041cf8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8040ea2:	4b0f      	ldr	r3, [pc, #60]	; (8040ee0 <MX_ADC2_Init+0xc4>)
 8040ea4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8040ea6:	2306      	movs	r3, #6
 8040ea8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8040eaa:	2300      	movs	r3, #0
 8040eac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8040eae:	237f      	movs	r3, #127	; 0x7f
 8040eb0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8040eb2:	2304      	movs	r3, #4
 8040eb4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8040eb6:	2300      	movs	r3, #0
 8040eb8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8040eba:	463b      	mov	r3, r7
 8040ebc:	4619      	mov	r1, r3
 8040ebe:	4806      	ldr	r0, [pc, #24]	; (8040ed8 <MX_ADC2_Init+0xbc>)
 8040ec0:	f006 fc94 	bl	80477ec <HAL_ADC_ConfigChannel>
 8040ec4:	4603      	mov	r3, r0
 8040ec6:	2b00      	cmp	r3, #0
 8040ec8:	d001      	beq.n	8040ece <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8040eca:	f000 ff15 	bl	8041cf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8040ece:	bf00      	nop
 8040ed0:	3718      	adds	r7, #24
 8040ed2:	46bd      	mov	sp, r7
 8040ed4:	bd80      	pop	{r7, pc}
 8040ed6:	bf00      	nop
 8040ed8:	20018dd8 	.word	0x20018dd8
 8040edc:	42028100 	.word	0x42028100
 8040ee0:	32601000 	.word	0x32601000

08040ee4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8040ee4:	b580      	push	{r7, lr}
 8040ee6:	b0b0      	sub	sp, #192	; 0xc0
 8040ee8:	af00      	add	r7, sp, #0
 8040eea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040eec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8040ef0:	2200      	movs	r2, #0
 8040ef2:	601a      	str	r2, [r3, #0]
 8040ef4:	605a      	str	r2, [r3, #4]
 8040ef6:	609a      	str	r2, [r3, #8]
 8040ef8:	60da      	str	r2, [r3, #12]
 8040efa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040efc:	f107 0318 	add.w	r3, r7, #24
 8040f00:	2294      	movs	r2, #148	; 0x94
 8040f02:	2100      	movs	r1, #0
 8040f04:	4618      	mov	r0, r3
 8040f06:	f00d fc38 	bl	804e77a <memset>
  if(adcHandle->Instance==ADC1)
 8040f0a:	687b      	ldr	r3, [r7, #4]
 8040f0c:	681b      	ldr	r3, [r3, #0]
 8040f0e:	4a69      	ldr	r2, [pc, #420]	; (80410b4 <HAL_ADC_MspInit+0x1d0>)
 8040f10:	4293      	cmp	r3, r2
 8040f12:	d17d      	bne.n	8041010 <HAL_ADC_MspInit+0x12c>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8040f14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8040f18:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8040f1a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8040f1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040f22:	f107 0318 	add.w	r3, r7, #24
 8040f26:	4618      	mov	r0, r3
 8040f28:	f009 fd68 	bl	804a9fc <HAL_RCCEx_PeriphCLKConfig>
 8040f2c:	4603      	mov	r3, r0
 8040f2e:	2b00      	cmp	r3, #0
 8040f30:	d001      	beq.n	8040f36 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8040f32:	f000 fee1 	bl	8041cf8 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8040f36:	4b60      	ldr	r3, [pc, #384]	; (80410b8 <HAL_ADC_MspInit+0x1d4>)
 8040f38:	681b      	ldr	r3, [r3, #0]
 8040f3a:	3301      	adds	r3, #1
 8040f3c:	4a5e      	ldr	r2, [pc, #376]	; (80410b8 <HAL_ADC_MspInit+0x1d4>)
 8040f3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8040f40:	4b5d      	ldr	r3, [pc, #372]	; (80410b8 <HAL_ADC_MspInit+0x1d4>)
 8040f42:	681b      	ldr	r3, [r3, #0]
 8040f44:	2b01      	cmp	r3, #1
 8040f46:	d10b      	bne.n	8040f60 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8040f48:	4b5c      	ldr	r3, [pc, #368]	; (80410bc <HAL_ADC_MspInit+0x1d8>)
 8040f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040f4c:	4a5b      	ldr	r2, [pc, #364]	; (80410bc <HAL_ADC_MspInit+0x1d8>)
 8040f4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8040f52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040f54:	4b59      	ldr	r3, [pc, #356]	; (80410bc <HAL_ADC_MspInit+0x1d8>)
 8040f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8040f5c:	617b      	str	r3, [r7, #20]
 8040f5e:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8040f60:	4b56      	ldr	r3, [pc, #344]	; (80410bc <HAL_ADC_MspInit+0x1d8>)
 8040f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040f64:	4a55      	ldr	r2, [pc, #340]	; (80410bc <HAL_ADC_MspInit+0x1d8>)
 8040f66:	f043 0302 	orr.w	r3, r3, #2
 8040f6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040f6c:	4b53      	ldr	r3, [pc, #332]	; (80410bc <HAL_ADC_MspInit+0x1d8>)
 8040f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040f70:	f003 0302 	and.w	r3, r3, #2
 8040f74:	613b      	str	r3, [r7, #16]
 8040f76:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = EXT_AN_Pin;
 8040f78:	2302      	movs	r3, #2
 8040f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8040f7e:	2303      	movs	r3, #3
 8040f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040f84:	2300      	movs	r3, #0
 8040f86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(EXT_AN_GPIO_Port, &GPIO_InitStruct);
 8040f8a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8040f8e:	4619      	mov	r1, r3
 8040f90:	484b      	ldr	r0, [pc, #300]	; (80410c0 <HAL_ADC_MspInit+0x1dc>)
 8040f92:	f007 fd2b 	bl	80489ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel6;
 8040f96:	4b4b      	ldr	r3, [pc, #300]	; (80410c4 <HAL_ADC_MspInit+0x1e0>)
 8040f98:	4a4b      	ldr	r2, [pc, #300]	; (80410c8 <HAL_ADC_MspInit+0x1e4>)
 8040f9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8040f9c:	4b49      	ldr	r3, [pc, #292]	; (80410c4 <HAL_ADC_MspInit+0x1e0>)
 8040f9e:	2205      	movs	r2, #5
 8040fa0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8040fa2:	4b48      	ldr	r3, [pc, #288]	; (80410c4 <HAL_ADC_MspInit+0x1e0>)
 8040fa4:	2200      	movs	r2, #0
 8040fa6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8040fa8:	4b46      	ldr	r3, [pc, #280]	; (80410c4 <HAL_ADC_MspInit+0x1e0>)
 8040faa:	2200      	movs	r2, #0
 8040fac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8040fae:	4b45      	ldr	r3, [pc, #276]	; (80410c4 <HAL_ADC_MspInit+0x1e0>)
 8040fb0:	2280      	movs	r2, #128	; 0x80
 8040fb2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8040fb4:	4b43      	ldr	r3, [pc, #268]	; (80410c4 <HAL_ADC_MspInit+0x1e0>)
 8040fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8040fba:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8040fbc:	4b41      	ldr	r3, [pc, #260]	; (80410c4 <HAL_ADC_MspInit+0x1e0>)
 8040fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8040fc2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8040fc4:	4b3f      	ldr	r3, [pc, #252]	; (80410c4 <HAL_ADC_MspInit+0x1e0>)
 8040fc6:	2200      	movs	r2, #0
 8040fc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8040fca:	4b3e      	ldr	r3, [pc, #248]	; (80410c4 <HAL_ADC_MspInit+0x1e0>)
 8040fcc:	2200      	movs	r2, #0
 8040fce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8040fd0:	483c      	ldr	r0, [pc, #240]	; (80410c4 <HAL_ADC_MspInit+0x1e0>)
 8040fd2:	f007 fa07 	bl	80483e4 <HAL_DMA_Init>
 8040fd6:	4603      	mov	r3, r0
 8040fd8:	2b00      	cmp	r3, #0
 8040fda:	d001      	beq.n	8040fe0 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8040fdc:	f000 fe8c 	bl	8041cf8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8040fe0:	2110      	movs	r1, #16
 8040fe2:	4838      	ldr	r0, [pc, #224]	; (80410c4 <HAL_ADC_MspInit+0x1e0>)
 8040fe4:	f007 fc6f 	bl	80488c6 <HAL_DMA_ConfigChannelAttributes>
 8040fe8:	4603      	mov	r3, r0
 8040fea:	2b00      	cmp	r3, #0
 8040fec:	d001      	beq.n	8040ff2 <HAL_ADC_MspInit+0x10e>
    {
      Error_Handler();
 8040fee:	f000 fe83 	bl	8041cf8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8040ff2:	687b      	ldr	r3, [r7, #4]
 8040ff4:	4a33      	ldr	r2, [pc, #204]	; (80410c4 <HAL_ADC_MspInit+0x1e0>)
 8040ff6:	651a      	str	r2, [r3, #80]	; 0x50
 8040ff8:	4a32      	ldr	r2, [pc, #200]	; (80410c4 <HAL_ADC_MspInit+0x1e0>)
 8040ffa:	687b      	ldr	r3, [r7, #4]
 8040ffc:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8040ffe:	2200      	movs	r2, #0
 8041000:	2100      	movs	r1, #0
 8041002:	2025      	movs	r0, #37	; 0x25
 8041004:	f007 f9b8 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8041008:	2025      	movs	r0, #37	; 0x25
 804100a:	f007 f9cf 	bl	80483ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 804100e:	e04d      	b.n	80410ac <HAL_ADC_MspInit+0x1c8>
  else if(adcHandle->Instance==ADC2)
 8041010:	687b      	ldr	r3, [r7, #4]
 8041012:	681b      	ldr	r3, [r3, #0]
 8041014:	4a2d      	ldr	r2, [pc, #180]	; (80410cc <HAL_ADC_MspInit+0x1e8>)
 8041016:	4293      	cmp	r3, r2
 8041018:	d148      	bne.n	80410ac <HAL_ADC_MspInit+0x1c8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 804101a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 804101e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8041020:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8041024:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8041028:	f107 0318 	add.w	r3, r7, #24
 804102c:	4618      	mov	r0, r3
 804102e:	f009 fce5 	bl	804a9fc <HAL_RCCEx_PeriphCLKConfig>
 8041032:	4603      	mov	r3, r0
 8041034:	2b00      	cmp	r3, #0
 8041036:	d001      	beq.n	804103c <HAL_ADC_MspInit+0x158>
      Error_Handler();
 8041038:	f000 fe5e 	bl	8041cf8 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 804103c:	4b1e      	ldr	r3, [pc, #120]	; (80410b8 <HAL_ADC_MspInit+0x1d4>)
 804103e:	681b      	ldr	r3, [r3, #0]
 8041040:	3301      	adds	r3, #1
 8041042:	4a1d      	ldr	r2, [pc, #116]	; (80410b8 <HAL_ADC_MspInit+0x1d4>)
 8041044:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8041046:	4b1c      	ldr	r3, [pc, #112]	; (80410b8 <HAL_ADC_MspInit+0x1d4>)
 8041048:	681b      	ldr	r3, [r3, #0]
 804104a:	2b01      	cmp	r3, #1
 804104c:	d10b      	bne.n	8041066 <HAL_ADC_MspInit+0x182>
      __HAL_RCC_ADC_CLK_ENABLE();
 804104e:	4b1b      	ldr	r3, [pc, #108]	; (80410bc <HAL_ADC_MspInit+0x1d8>)
 8041050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041052:	4a1a      	ldr	r2, [pc, #104]	; (80410bc <HAL_ADC_MspInit+0x1d8>)
 8041054:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8041058:	64d3      	str	r3, [r2, #76]	; 0x4c
 804105a:	4b18      	ldr	r3, [pc, #96]	; (80410bc <HAL_ADC_MspInit+0x1d8>)
 804105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804105e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041062:	60fb      	str	r3, [r7, #12]
 8041064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8041066:	4b15      	ldr	r3, [pc, #84]	; (80410bc <HAL_ADC_MspInit+0x1d8>)
 8041068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804106a:	4a14      	ldr	r2, [pc, #80]	; (80410bc <HAL_ADC_MspInit+0x1d8>)
 804106c:	f043 0301 	orr.w	r3, r3, #1
 8041070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8041072:	4b12      	ldr	r3, [pc, #72]	; (80410bc <HAL_ADC_MspInit+0x1d8>)
 8041074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041076:	f003 0301 	and.w	r3, r3, #1
 804107a:	60bb      	str	r3, [r7, #8]
 804107c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CURRENT_AN_Pin;
 804107e:	2380      	movs	r3, #128	; 0x80
 8041080:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8041084:	2303      	movs	r3, #3
 8041086:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804108a:	2300      	movs	r3, #0
 804108c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(CURRENT_AN_GPIO_Port, &GPIO_InitStruct);
 8041090:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8041094:	4619      	mov	r1, r3
 8041096:	480e      	ldr	r0, [pc, #56]	; (80410d0 <HAL_ADC_MspInit+0x1ec>)
 8041098:	f007 fca8 	bl	80489ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 804109c:	2200      	movs	r2, #0
 804109e:	2100      	movs	r1, #0
 80410a0:	2025      	movs	r0, #37	; 0x25
 80410a2:	f007 f969 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80410a6:	2025      	movs	r0, #37	; 0x25
 80410a8:	f007 f980 	bl	80483ac <HAL_NVIC_EnableIRQ>
}
 80410ac:	bf00      	nop
 80410ae:	37c0      	adds	r7, #192	; 0xc0
 80410b0:	46bd      	mov	sp, r7
 80410b2:	bd80      	pop	{r7, pc}
 80410b4:	42028000 	.word	0x42028000
 80410b8:	2001807c 	.word	0x2001807c
 80410bc:	40021000 	.word	0x40021000
 80410c0:	42020400 	.word	0x42020400
 80410c4:	20018f00 	.word	0x20018f00
 80410c8:	4002046c 	.word	0x4002046c
 80410cc:	42028100 	.word	0x42028100
 80410d0:	42020000 	.word	0x42020000

080410d4 <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 80410d4:	b480      	push	{r7}
 80410d6:	b083      	sub	sp, #12
 80410d8:	af00      	add	r7, sp, #0
 80410da:	6078      	str	r0, [r7, #4]
 80410dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 80410de:	687b      	ldr	r3, [r7, #4]
 80410e0:	689b      	ldr	r3, [r3, #8]
 80410e2:	f023 0218 	bic.w	r2, r3, #24
 80410e6:	683b      	ldr	r3, [r7, #0]
 80410e8:	431a      	orrs	r2, r3
 80410ea:	687b      	ldr	r3, [r7, #4]
 80410ec:	609a      	str	r2, [r3, #8]
}
 80410ee:	bf00      	nop
 80410f0:	370c      	adds	r7, #12
 80410f2:	46bd      	mov	sp, r7
 80410f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410f8:	4770      	bx	lr

080410fa <LL_CRC_SetInputDataReverseMode>:
  *         @arg @ref LL_CRC_INDATA_REVERSE_HALFWORD
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 80410fa:	b480      	push	{r7}
 80410fc:	b083      	sub	sp, #12
 80410fe:	af00      	add	r7, sp, #0
 8041100:	6078      	str	r0, [r7, #4]
 8041102:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 8041104:	687b      	ldr	r3, [r7, #4]
 8041106:	689b      	ldr	r3, [r3, #8]
 8041108:	f023 0260 	bic.w	r2, r3, #96	; 0x60
 804110c:	683b      	ldr	r3, [r7, #0]
 804110e:	431a      	orrs	r2, r3
 8041110:	687b      	ldr	r3, [r7, #4]
 8041112:	609a      	str	r2, [r3, #8]
}
 8041114:	bf00      	nop
 8041116:	370c      	adds	r7, #12
 8041118:	46bd      	mov	sp, r7
 804111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804111e:	4770      	bx	lr

08041120 <LL_CRC_SetOutputDataReverseMode>:
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_NONE
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 8041120:	b480      	push	{r7}
 8041122:	b083      	sub	sp, #12
 8041124:	af00      	add	r7, sp, #0
 8041126:	6078      	str	r0, [r7, #4]
 8041128:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 804112a:	687b      	ldr	r3, [r7, #4]
 804112c:	689b      	ldr	r3, [r3, #8]
 804112e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8041132:	683b      	ldr	r3, [r7, #0]
 8041134:	431a      	orrs	r2, r3
 8041136:	687b      	ldr	r3, [r7, #4]
 8041138:	609a      	str	r2, [r3, #8]
}
 804113a:	bf00      	nop
 804113c:	370c      	adds	r7, #12
 804113e:	46bd      	mov	sp, r7
 8041140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041144:	4770      	bx	lr

08041146 <LL_CRC_SetInitialData>:
  * @param  CRCx CRC Instance
  * @param  InitCrc Value to be programmed in Programmable initial CRC value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInitialData(CRC_TypeDef *CRCx, uint32_t InitCrc)
{
 8041146:	b480      	push	{r7}
 8041148:	b083      	sub	sp, #12
 804114a:	af00      	add	r7, sp, #0
 804114c:	6078      	str	r0, [r7, #4]
 804114e:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->INIT, InitCrc);
 8041150:	687b      	ldr	r3, [r7, #4]
 8041152:	683a      	ldr	r2, [r7, #0]
 8041154:	611a      	str	r2, [r3, #16]
}
 8041156:	bf00      	nop
 8041158:	370c      	adds	r7, #12
 804115a:	46bd      	mov	sp, r7
 804115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041160:	4770      	bx	lr

08041162 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8041162:	b480      	push	{r7}
 8041164:	b083      	sub	sp, #12
 8041166:	af00      	add	r7, sp, #0
 8041168:	6078      	str	r0, [r7, #4]
 804116a:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 804116c:	687b      	ldr	r3, [r7, #4]
 804116e:	683a      	ldr	r2, [r7, #0]
 8041170:	615a      	str	r2, [r3, #20]
}
 8041172:	bf00      	nop
 8041174:	370c      	adds	r7, #12
 8041176:	46bd      	mov	sp, r7
 8041178:	f85d 7b04 	ldr.w	r7, [sp], #4
 804117c:	4770      	bx	lr
	...

08041180 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_GTZC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8041180:	b480      	push	{r7}
 8041182:	b085      	sub	sp, #20
 8041184:	af00      	add	r7, sp, #0
 8041186:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8041188:	4b08      	ldr	r3, [pc, #32]	; (80411ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 804118a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 804118c:	4907      	ldr	r1, [pc, #28]	; (80411ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 804118e:	687b      	ldr	r3, [r7, #4]
 8041190:	4313      	orrs	r3, r2
 8041192:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8041194:	4b05      	ldr	r3, [pc, #20]	; (80411ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8041196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8041198:	687b      	ldr	r3, [r7, #4]
 804119a:	4013      	ands	r3, r2
 804119c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 804119e:	68fb      	ldr	r3, [r7, #12]
}
 80411a0:	bf00      	nop
 80411a2:	3714      	adds	r7, #20
 80411a4:	46bd      	mov	sp, r7
 80411a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411aa:	4770      	bx	lr
 80411ac:	40021000 	.word	0x40021000

080411b0 <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 80411b0:	b580      	push	{r7, lr}
 80411b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 80411b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80411b8:	f7ff ffe2 	bl	8041180 <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE);
 80411bc:	2100      	movs	r1, #0
 80411be:	480b      	ldr	r0, [pc, #44]	; (80411ec <MX_CRC_Init+0x3c>)
 80411c0:	f7ff ff9b 	bl	80410fa <LL_CRC_SetInputDataReverseMode>
  LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE);
 80411c4:	2100      	movs	r1, #0
 80411c6:	4809      	ldr	r0, [pc, #36]	; (80411ec <MX_CRC_Init+0x3c>)
 80411c8:	f7ff ffaa 	bl	8041120 <LL_CRC_SetOutputDataReverseMode>
  LL_CRC_SetPolynomialCoef(CRC, LL_CRC_DEFAULT_CRC32_POLY);
 80411cc:	4908      	ldr	r1, [pc, #32]	; (80411f0 <MX_CRC_Init+0x40>)
 80411ce:	4807      	ldr	r0, [pc, #28]	; (80411ec <MX_CRC_Init+0x3c>)
 80411d0:	f7ff ffc7 	bl	8041162 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, LL_CRC_POLYLENGTH_32B);
 80411d4:	2100      	movs	r1, #0
 80411d6:	4805      	ldr	r0, [pc, #20]	; (80411ec <MX_CRC_Init+0x3c>)
 80411d8:	f7ff ff7c 	bl	80410d4 <LL_CRC_SetPolynomialSize>
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
 80411dc:	f04f 31ff 	mov.w	r1, #4294967295
 80411e0:	4802      	ldr	r0, [pc, #8]	; (80411ec <MX_CRC_Init+0x3c>)
 80411e2:	f7ff ffb0 	bl	8041146 <LL_CRC_SetInitialData>
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80411e6:	bf00      	nop
 80411e8:	bd80      	pop	{r7, pc}
 80411ea:	bf00      	nop
 80411ec:	40023000 	.word	0x40023000
 80411f0:	04c11db7 	.word	0x04c11db7

080411f4 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 80411f4:	b580      	push	{r7, lr}
 80411f6:	b082      	sub	sp, #8
 80411f8:	af00      	add	r7, sp, #0
 80411fa:	6078      	str	r0, [r7, #4]
    HAL_Delay( ms );
 80411fc:	6878      	ldr	r0, [r7, #4]
 80411fe:	f005 fcf5 	bl	8046bec <HAL_Delay>
}
 8041202:	bf00      	nop
 8041204:	3708      	adds	r7, #8
 8041206:	46bd      	mov	sp, r7
 8041208:	bd80      	pop	{r7, pc}
	...

0804120c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 804120c:	b580      	push	{r7, lr}
 804120e:	b084      	sub	sp, #16
 8041210:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8041212:	4b28      	ldr	r3, [pc, #160]	; (80412b4 <MX_DMA_Init+0xa8>)
 8041214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041216:	4a27      	ldr	r2, [pc, #156]	; (80412b4 <MX_DMA_Init+0xa8>)
 8041218:	f043 0304 	orr.w	r3, r3, #4
 804121c:	6493      	str	r3, [r2, #72]	; 0x48
 804121e:	4b25      	ldr	r3, [pc, #148]	; (80412b4 <MX_DMA_Init+0xa8>)
 8041220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041222:	f003 0304 	and.w	r3, r3, #4
 8041226:	60fb      	str	r3, [r7, #12]
 8041228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 804122a:	4b22      	ldr	r3, [pc, #136]	; (80412b4 <MX_DMA_Init+0xa8>)
 804122c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804122e:	4a21      	ldr	r2, [pc, #132]	; (80412b4 <MX_DMA_Init+0xa8>)
 8041230:	f043 0301 	orr.w	r3, r3, #1
 8041234:	6493      	str	r3, [r2, #72]	; 0x48
 8041236:	4b1f      	ldr	r3, [pc, #124]	; (80412b4 <MX_DMA_Init+0xa8>)
 8041238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804123a:	f003 0301 	and.w	r3, r3, #1
 804123e:	60bb      	str	r3, [r7, #8]
 8041240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8041242:	4b1c      	ldr	r3, [pc, #112]	; (80412b4 <MX_DMA_Init+0xa8>)
 8041244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041246:	4a1b      	ldr	r2, [pc, #108]	; (80412b4 <MX_DMA_Init+0xa8>)
 8041248:	f043 0302 	orr.w	r3, r3, #2
 804124c:	6493      	str	r3, [r2, #72]	; 0x48
 804124e:	4b19      	ldr	r3, [pc, #100]	; (80412b4 <MX_DMA_Init+0xa8>)
 8041250:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041252:	f003 0302 	and.w	r3, r3, #2
 8041256:	607b      	str	r3, [r7, #4]
 8041258:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 804125a:	2200      	movs	r2, #0
 804125c:	2100      	movs	r1, #0
 804125e:	2021      	movs	r0, #33	; 0x21
 8041260:	f007 f88a 	bl	8048378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8041264:	2021      	movs	r0, #33	; 0x21
 8041266:	f007 f8a1 	bl	80483ac <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 804126a:	2200      	movs	r2, #0
 804126c:	2100      	movs	r1, #0
 804126e:	2022      	movs	r0, #34	; 0x22
 8041270:	f007 f882 	bl	8048378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8041274:	2022      	movs	r0, #34	; 0x22
 8041276:	f007 f899 	bl	80483ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 804127a:	2200      	movs	r2, #0
 804127c:	2100      	movs	r1, #0
 804127e:	2051      	movs	r0, #81	; 0x51
 8041280:	f007 f87a 	bl	8048378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8041284:	2051      	movs	r0, #81	; 0x51
 8041286:	f007 f891 	bl	80483ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 804128a:	2200      	movs	r2, #0
 804128c:	2100      	movs	r1, #0
 804128e:	2052      	movs	r0, #82	; 0x52
 8041290:	f007 f872 	bl	8048378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8041294:	2052      	movs	r0, #82	; 0x52
 8041296:	f007 f889 	bl	80483ac <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 804129a:	2200      	movs	r2, #0
 804129c:	2100      	movs	r1, #0
 804129e:	2055      	movs	r0, #85	; 0x55
 80412a0:	f007 f86a 	bl	8048378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80412a4:	2055      	movs	r0, #85	; 0x55
 80412a6:	f007 f881 	bl	80483ac <HAL_NVIC_EnableIRQ>

}
 80412aa:	bf00      	nop
 80412ac:	3710      	adds	r7, #16
 80412ae:	46bd      	mov	sp, r7
 80412b0:	bd80      	pop	{r7, pc}
 80412b2:	bf00      	nop
 80412b4:	40021000 	.word	0x40021000

080412b8 <MX_GPIO_Init>:
     PB15   ------> UCPD1_CC2
     PA15 (JTDI)   ------> UCPD1_CC1
     PB5   ------> UCPD1_DBCC1
*/
void MX_GPIO_Init(void)
{
 80412b8:	b580      	push	{r7, lr}
 80412ba:	b08a      	sub	sp, #40	; 0x28
 80412bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80412be:	f107 0314 	add.w	r3, r7, #20
 80412c2:	2200      	movs	r2, #0
 80412c4:	601a      	str	r2, [r3, #0]
 80412c6:	605a      	str	r2, [r3, #4]
 80412c8:	609a      	str	r2, [r3, #8]
 80412ca:	60da      	str	r2, [r3, #12]
 80412cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80412ce:	4b56      	ldr	r3, [pc, #344]	; (8041428 <MX_GPIO_Init+0x170>)
 80412d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80412d2:	4a55      	ldr	r2, [pc, #340]	; (8041428 <MX_GPIO_Init+0x170>)
 80412d4:	f043 0310 	orr.w	r3, r3, #16
 80412d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80412da:	4b53      	ldr	r3, [pc, #332]	; (8041428 <MX_GPIO_Init+0x170>)
 80412dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80412de:	f003 0310 	and.w	r3, r3, #16
 80412e2:	613b      	str	r3, [r7, #16]
 80412e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80412e6:	4b50      	ldr	r3, [pc, #320]	; (8041428 <MX_GPIO_Init+0x170>)
 80412e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80412ea:	4a4f      	ldr	r2, [pc, #316]	; (8041428 <MX_GPIO_Init+0x170>)
 80412ec:	f043 0301 	orr.w	r3, r3, #1
 80412f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80412f2:	4b4d      	ldr	r3, [pc, #308]	; (8041428 <MX_GPIO_Init+0x170>)
 80412f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80412f6:	f003 0301 	and.w	r3, r3, #1
 80412fa:	60fb      	str	r3, [r7, #12]
 80412fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80412fe:	4b4a      	ldr	r3, [pc, #296]	; (8041428 <MX_GPIO_Init+0x170>)
 8041300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041302:	4a49      	ldr	r2, [pc, #292]	; (8041428 <MX_GPIO_Init+0x170>)
 8041304:	f043 0304 	orr.w	r3, r3, #4
 8041308:	64d3      	str	r3, [r2, #76]	; 0x4c
 804130a:	4b47      	ldr	r3, [pc, #284]	; (8041428 <MX_GPIO_Init+0x170>)
 804130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804130e:	f003 0304 	and.w	r3, r3, #4
 8041312:	60bb      	str	r3, [r7, #8]
 8041314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8041316:	4b44      	ldr	r3, [pc, #272]	; (8041428 <MX_GPIO_Init+0x170>)
 8041318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804131a:	4a43      	ldr	r2, [pc, #268]	; (8041428 <MX_GPIO_Init+0x170>)
 804131c:	f043 0302 	orr.w	r3, r3, #2
 8041320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8041322:	4b41      	ldr	r3, [pc, #260]	; (8041428 <MX_GPIO_Init+0x170>)
 8041324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041326:	f003 0302 	and.w	r3, r3, #2
 804132a:	607b      	str	r3, [r7, #4]
 804132c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 804132e:	4b3e      	ldr	r3, [pc, #248]	; (8041428 <MX_GPIO_Init+0x170>)
 8041330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041332:	4a3d      	ldr	r2, [pc, #244]	; (8041428 <MX_GPIO_Init+0x170>)
 8041334:	f043 0308 	orr.w	r3, r3, #8
 8041338:	64d3      	str	r3, [r2, #76]	; 0x4c
 804133a:	4b3b      	ldr	r3, [pc, #236]	; (8041428 <MX_GPIO_Init+0x170>)
 804133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804133e:	f003 0308 	and.w	r3, r3, #8
 8041342:	603b      	str	r3, [r7, #0]
 8041344:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, GPIO_PIN_SET);
 8041346:	2201      	movs	r2, #1
 8041348:	2110      	movs	r1, #16
 804134a:	4838      	ldr	r0, [pc, #224]	; (804142c <MX_GPIO_Init+0x174>)
 804134c:	f007 fdd4 	bl	8048ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LR_NSS_Pin|LR_NRST_Pin, GPIO_PIN_SET);
 8041350:	2201      	movs	r2, #1
 8041352:	2105      	movs	r1, #5
 8041354:	4836      	ldr	r0, [pc, #216]	; (8041430 <MX_GPIO_Init+0x178>)
 8041356:	f007 fdcf 	bl	8048ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYO_DEN_GPIO_Port, GYO_DEN_Pin, GPIO_PIN_RESET);
 804135a:	2200      	movs	r2, #0
 804135c:	2102      	movs	r1, #2
 804135e:	4835      	ldr	r0, [pc, #212]	; (8041434 <MX_GPIO_Init+0x17c>)
 8041360:	f007 fdca 	bl	8048ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYO_INT2_Pin;
 8041364:	2308      	movs	r3, #8
 8041366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8041368:	4b33      	ldr	r3, [pc, #204]	; (8041438 <MX_GPIO_Init+0x180>)
 804136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804136c:	2300      	movs	r3, #0
 804136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYO_INT2_GPIO_Port, &GPIO_InitStruct);
 8041370:	f107 0314 	add.w	r3, r7, #20
 8041374:	4619      	mov	r1, r3
 8041376:	482f      	ldr	r0, [pc, #188]	; (8041434 <MX_GPIO_Init+0x17c>)
 8041378:	f007 fb38 	bl	80489ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CURRENT_CS_Pin;
 804137c:	2310      	movs	r3, #16
 804137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041380:	2301      	movs	r3, #1
 8041382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041384:	2300      	movs	r3, #0
 8041386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041388:	2300      	movs	r3, #0
 804138a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CURRENT_CS_GPIO_Port, &GPIO_InitStruct);
 804138c:	f107 0314 	add.w	r3, r7, #20
 8041390:	4619      	mov	r1, r3
 8041392:	4826      	ldr	r0, [pc, #152]	; (804142c <MX_GPIO_Init+0x174>)
 8041394:	f007 fb2a 	bl	80489ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8041398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804139c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 804139e:	2303      	movs	r3, #3
 80413a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80413a2:	2300      	movs	r3, #0
 80413a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80413a6:	f107 0314 	add.w	r3, r7, #20
 80413aa:	4619      	mov	r1, r3
 80413ac:	4823      	ldr	r0, [pc, #140]	; (804143c <MX_GPIO_Init+0x184>)
 80413ae:	f007 fb1d 	bl	80489ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LR_RFSW4_Pin|LR_BUSY_Pin;
 80413b2:	f244 0302 	movw	r3, #16386	; 0x4002
 80413b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80413b8:	4b1f      	ldr	r3, [pc, #124]	; (8041438 <MX_GPIO_Init+0x180>)
 80413ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80413bc:	2300      	movs	r3, #0
 80413be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80413c0:	f107 0314 	add.w	r3, r7, #20
 80413c4:	4619      	mov	r1, r3
 80413c6:	481a      	ldr	r0, [pc, #104]	; (8041430 <MX_GPIO_Init+0x178>)
 80413c8:	f007 fb10 	bl	80489ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_CC1_Pin;
 80413cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80413d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80413d2:	2303      	movs	r3, #3
 80413d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80413d6:	2300      	movs	r3, #0
 80413d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OTG_FS_CC1_GPIO_Port, &GPIO_InitStruct);
 80413da:	f107 0314 	add.w	r3, r7, #20
 80413de:	4619      	mov	r1, r3
 80413e0:	4812      	ldr	r0, [pc, #72]	; (804142c <MX_GPIO_Init+0x174>)
 80413e2:	f007 fb03 	bl	80489ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LR_NSS_Pin|LR_NRST_Pin;
 80413e6:	2305      	movs	r3, #5
 80413e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80413ea:	2301      	movs	r3, #1
 80413ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80413ee:	2300      	movs	r3, #0
 80413f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80413f2:	2300      	movs	r3, #0
 80413f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80413f6:	f107 0314 	add.w	r3, r7, #20
 80413fa:	4619      	mov	r1, r3
 80413fc:	480c      	ldr	r0, [pc, #48]	; (8041430 <MX_GPIO_Init+0x178>)
 80413fe:	f007 faf5 	bl	80489ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYO_DEN_Pin;
 8041402:	2302      	movs	r3, #2
 8041404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041406:	2301      	movs	r3, #1
 8041408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804140a:	2300      	movs	r3, #0
 804140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804140e:	2300      	movs	r3, #0
 8041410:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYO_DEN_GPIO_Port, &GPIO_InitStruct);
 8041412:	f107 0314 	add.w	r3, r7, #20
 8041416:	4619      	mov	r1, r3
 8041418:	4806      	ldr	r0, [pc, #24]	; (8041434 <MX_GPIO_Init+0x17c>)
 804141a:	f007 fae7 	bl	80489ec <HAL_GPIO_Init>

}
 804141e:	bf00      	nop
 8041420:	3728      	adds	r7, #40	; 0x28
 8041422:	46bd      	mov	sp, r7
 8041424:	bd80      	pop	{r7, pc}
 8041426:	bf00      	nop
 8041428:	40021000 	.word	0x40021000
 804142c:	42020000 	.word	0x42020000
 8041430:	42020c00 	.word	0x42020c00
 8041434:	42021000 	.word	0x42021000
 8041438:	10110000 	.word	0x10110000
 804143c:	42020400 	.word	0x42020400

08041440 <GpioInit>:

/* USER CODE BEGIN 2 */
static Gpio_t *GpioIrq[16];

void GpioInit( Gpio_t *obj, void* port, uint16_t pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
 8041440:	b580      	push	{r7, lr}
 8041442:	b08a      	sub	sp, #40	; 0x28
 8041444:	af00      	add	r7, sp, #0
 8041446:	60f8      	str	r0, [r7, #12]
 8041448:	60b9      	str	r1, [r7, #8]
 804144a:	4611      	mov	r1, r2
 804144c:	461a      	mov	r2, r3
 804144e:	460b      	mov	r3, r1
 8041450:	80fb      	strh	r3, [r7, #6]
 8041452:	4613      	mov	r3, r2
 8041454:	717b      	strb	r3, [r7, #5]
//    if( pin < IOE_0 )
//    {
        GPIO_InitTypeDef GPIO_InitStructure;

        obj->pin = pin;
 8041456:	88fb      	ldrh	r3, [r7, #6]
 8041458:	b25a      	sxtb	r2, r3
 804145a:	68fb      	ldr	r3, [r7, #12]
 804145c:	701a      	strb	r2, [r3, #0]

        if( pin == NC  || port == NULL)
 804145e:	68bb      	ldr	r3, [r7, #8]
 8041460:	2b00      	cmp	r3, #0
 8041462:	d045      	beq.n	80414f0 <GpioInit+0xb0>
        {
            return;
        }

        obj->pinIndex = pin; //( 0x01 << ( obj->pin & 0x0F ) );
 8041464:	68fb      	ldr	r3, [r7, #12]
 8041466:	88fa      	ldrh	r2, [r7, #6]
 8041468:	805a      	strh	r2, [r3, #2]
        obj->port = port;
 804146a:	68fb      	ldr	r3, [r7, #12]
 804146c:	68ba      	ldr	r2, [r7, #8]
 804146e:	605a      	str	r2, [r3, #4]
//        {
//            obj->port = GPIOH;
//            __HAL_RCC_GPIOH_CLK_ENABLE( );
//        }

        GPIO_InitStructure.Pin =  obj->pinIndex ;
 8041470:	68fb      	ldr	r3, [r7, #12]
 8041472:	885b      	ldrh	r3, [r3, #2]
 8041474:	617b      	str	r3, [r7, #20]
        GPIO_InitStructure.Pull = obj->pull = type;
 8041476:	68fb      	ldr	r3, [r7, #12]
 8041478:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 804147c:	729a      	strb	r2, [r3, #10]
 804147e:	68fb      	ldr	r3, [r7, #12]
 8041480:	7a9b      	ldrb	r3, [r3, #10]
 8041482:	61fb      	str	r3, [r7, #28]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8041484:	2302      	movs	r3, #2
 8041486:	623b      	str	r3, [r7, #32]

        if( mode == PIN_INPUT )
 8041488:	797b      	ldrb	r3, [r7, #5]
 804148a:	2b00      	cmp	r3, #0
 804148c:	d102      	bne.n	8041494 <GpioInit+0x54>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 804148e:	2300      	movs	r3, #0
 8041490:	61bb      	str	r3, [r7, #24]
 8041492:	e01d      	b.n	80414d0 <GpioInit+0x90>
        }
        else if( mode == PIN_ANALOGIC )
 8041494:	797b      	ldrb	r3, [r7, #5]
 8041496:	2b03      	cmp	r3, #3
 8041498:	d102      	bne.n	80414a0 <GpioInit+0x60>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 804149a:	2303      	movs	r3, #3
 804149c:	61bb      	str	r3, [r7, #24]
 804149e:	e017      	b.n	80414d0 <GpioInit+0x90>
        }
        else if( mode == PIN_ALTERNATE_FCT )
 80414a0:	797b      	ldrb	r3, [r7, #5]
 80414a2:	2b02      	cmp	r3, #2
 80414a4:	d10b      	bne.n	80414be <GpioInit+0x7e>
        {
            if( config == PIN_OPEN_DRAIN )
 80414a6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80414aa:	2b01      	cmp	r3, #1
 80414ac:	d102      	bne.n	80414b4 <GpioInit+0x74>
            {
                GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80414ae:	2312      	movs	r3, #18
 80414b0:	61bb      	str	r3, [r7, #24]
 80414b2:	e001      	b.n	80414b8 <GpioInit+0x78>
            }
            else
            {
                GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80414b4:	2302      	movs	r3, #2
 80414b6:	61bb      	str	r3, [r7, #24]
            }
            GPIO_InitStructure.Alternate = value;
 80414b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80414ba:	627b      	str	r3, [r7, #36]	; 0x24
 80414bc:	e008      	b.n	80414d0 <GpioInit+0x90>
        }
        else // mode output
        {
            if( config == PIN_OPEN_DRAIN )
 80414be:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80414c2:	2b01      	cmp	r3, #1
 80414c4:	d102      	bne.n	80414cc <GpioInit+0x8c>
            {
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80414c6:	2311      	movs	r3, #17
 80414c8:	61bb      	str	r3, [r7, #24]
 80414ca:	e001      	b.n	80414d0 <GpioInit+0x90>
            }
            else
            {
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80414cc:	2301      	movs	r3, #1
 80414ce:	61bb      	str	r3, [r7, #24]
            }
        }

        // Sets initial output value
        if( mode == PIN_OUTPUT )
 80414d0:	797b      	ldrb	r3, [r7, #5]
 80414d2:	2b01      	cmp	r3, #1
 80414d4:	d103      	bne.n	80414de <GpioInit+0x9e>
        {
            GpioWrite( obj, value );
 80414d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80414d8:	68f8      	ldr	r0, [r7, #12]
 80414da:	f000 f953 	bl	8041784 <GpioWrite>
        }

        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 80414de:	68fb      	ldr	r3, [r7, #12]
 80414e0:	685b      	ldr	r3, [r3, #4]
 80414e2:	f107 0214 	add.w	r2, r7, #20
 80414e6:	4611      	mov	r1, r2
 80414e8:	4618      	mov	r0, r3
 80414ea:	f007 fa7f 	bl	80489ec <HAL_GPIO_Init>
 80414ee:	e000      	b.n	80414f2 <GpioInit+0xb2>
            return;
 80414f0:	bf00      	nop
//#if defined( BOARD_IOE_EXT )
//        // IOExt Pin
//        GpioIoeInit( obj, pin, mode, config, type, value );
//#endif
//    }
}
 80414f2:	3728      	adds	r7, #40	; 0x28
 80414f4:	46bd      	mov	sp, r7
 80414f6:	bd80      	pop	{r7, pc}

080414f8 <GpioSetInterrupt>:
{
    obj->Context = context;
}

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 80414f8:	b580      	push	{r7, lr}
 80414fa:	b08c      	sub	sp, #48	; 0x30
 80414fc:	af00      	add	r7, sp, #0
 80414fe:	60f8      	str	r0, [r7, #12]
 8041500:	607b      	str	r3, [r7, #4]
 8041502:	460b      	mov	r3, r1
 8041504:	72fb      	strb	r3, [r7, #11]
 8041506:	4613      	mov	r3, r2
 8041508:	72bb      	strb	r3, [r7, #10]
//    if( obj->pin < IOE_0 )
//    {
        uint32_t priority = 0;
 804150a:	2300      	movs	r3, #0
 804150c:	62fb      	str	r3, [r7, #44]	; 0x2c

        IRQn_Type IRQnb = EXTI0_IRQn;
 804150e:	230b      	movs	r3, #11
 8041510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        GPIO_InitTypeDef   GPIO_InitStructure;

        if( irqHandler == NULL )
 8041514:	687b      	ldr	r3, [r7, #4]
 8041516:	2b00      	cmp	r3, #0
 8041518:	f000 8127 	beq.w	804176a <GpioSetInterrupt+0x272>
        {
            return;
        }

        obj->IrqHandler = irqHandler;
 804151c:	68fb      	ldr	r3, [r7, #12]
 804151e:	687a      	ldr	r2, [r7, #4]
 8041520:	611a      	str	r2, [r3, #16]

        GPIO_InitStructure.Pin =  obj->pinIndex;
 8041522:	68fb      	ldr	r3, [r7, #12]
 8041524:	885b      	ldrh	r3, [r3, #2]
 8041526:	617b      	str	r3, [r7, #20]

        if( irqMode == IRQ_RISING_EDGE )
 8041528:	7afb      	ldrb	r3, [r7, #11]
 804152a:	2b01      	cmp	r3, #1
 804152c:	d102      	bne.n	8041534 <GpioSetInterrupt+0x3c>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 804152e:	4b91      	ldr	r3, [pc, #580]	; (8041774 <GpioSetInterrupt+0x27c>)
 8041530:	61bb      	str	r3, [r7, #24]
 8041532:	e007      	b.n	8041544 <GpioSetInterrupt+0x4c>
        }
        else if( irqMode == IRQ_FALLING_EDGE )
 8041534:	7afb      	ldrb	r3, [r7, #11]
 8041536:	2b02      	cmp	r3, #2
 8041538:	d102      	bne.n	8041540 <GpioSetInterrupt+0x48>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 804153a:	4b8f      	ldr	r3, [pc, #572]	; (8041778 <GpioSetInterrupt+0x280>)
 804153c:	61bb      	str	r3, [r7, #24]
 804153e:	e001      	b.n	8041544 <GpioSetInterrupt+0x4c>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8041540:	4b8e      	ldr	r3, [pc, #568]	; (804177c <GpioSetInterrupt+0x284>)
 8041542:	61bb      	str	r3, [r7, #24]
        }

        GPIO_InitStructure.Pull = obj->pull;
 8041544:	68fb      	ldr	r3, [r7, #12]
 8041546:	7a9b      	ldrb	r3, [r3, #10]
 8041548:	61fb      	str	r3, [r7, #28]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 804154a:	2302      	movs	r3, #2
 804154c:	623b      	str	r3, [r7, #32]

        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 804154e:	68fb      	ldr	r3, [r7, #12]
 8041550:	685b      	ldr	r3, [r3, #4]
 8041552:	f107 0214 	add.w	r2, r7, #20
 8041556:	4611      	mov	r1, r2
 8041558:	4618      	mov	r0, r3
 804155a:	f007 fa47 	bl	80489ec <HAL_GPIO_Init>

        switch( irqPriority )
 804155e:	7abb      	ldrb	r3, [r7, #10]
 8041560:	2b03      	cmp	r3, #3
 8041562:	d00f      	beq.n	8041584 <GpioSetInterrupt+0x8c>
 8041564:	2b03      	cmp	r3, #3
 8041566:	dc10      	bgt.n	804158a <GpioSetInterrupt+0x92>
 8041568:	2b01      	cmp	r3, #1
 804156a:	dc02      	bgt.n	8041572 <GpioSetInterrupt+0x7a>
 804156c:	2b00      	cmp	r3, #0
 804156e:	da03      	bge.n	8041578 <GpioSetInterrupt+0x80>
 8041570:	e00b      	b.n	804158a <GpioSetInterrupt+0x92>
 8041572:	2b02      	cmp	r3, #2
 8041574:	d003      	beq.n	804157e <GpioSetInterrupt+0x86>
 8041576:	e008      	b.n	804158a <GpioSetInterrupt+0x92>
        {
        case IRQ_VERY_LOW_PRIORITY:
        case IRQ_LOW_PRIORITY:
            priority = 3;
 8041578:	2303      	movs	r3, #3
 804157a:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 804157c:	e008      	b.n	8041590 <GpioSetInterrupt+0x98>
        case IRQ_MEDIUM_PRIORITY:
            priority = 2;
 804157e:	2302      	movs	r3, #2
 8041580:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8041582:	e005      	b.n	8041590 <GpioSetInterrupt+0x98>
        case IRQ_HIGH_PRIORITY:
            priority = 1;
 8041584:	2301      	movs	r3, #1
 8041586:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8041588:	e002      	b.n	8041590 <GpioSetInterrupt+0x98>
        case IRQ_VERY_HIGH_PRIORITY:
        default:
            priority = 0;
 804158a:	2300      	movs	r3, #0
 804158c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 804158e:	bf00      	nop
        }

        switch( obj->pinIndex )
 8041590:	68fb      	ldr	r3, [r7, #12]
 8041592:	885b      	ldrh	r3, [r3, #2]
 8041594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8041598:	f000 80cb 	beq.w	8041732 <GpioSetInterrupt+0x23a>
 804159c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80415a0:	f300 80cb 	bgt.w	804173a <GpioSetInterrupt+0x242>
 80415a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80415a8:	f000 80bf 	beq.w	804172a <GpioSetInterrupt+0x232>
 80415ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80415b0:	f300 80c3 	bgt.w	804173a <GpioSetInterrupt+0x242>
 80415b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80415b8:	f000 80b3 	beq.w	8041722 <GpioSetInterrupt+0x22a>
 80415bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80415c0:	f300 80bb 	bgt.w	804173a <GpioSetInterrupt+0x242>
 80415c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80415c8:	f000 80a7 	beq.w	804171a <GpioSetInterrupt+0x222>
 80415cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80415d0:	f300 80b3 	bgt.w	804173a <GpioSetInterrupt+0x242>
 80415d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80415d8:	f000 809b 	beq.w	8041712 <GpioSetInterrupt+0x21a>
 80415dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80415e0:	f300 80ab 	bgt.w	804173a <GpioSetInterrupt+0x242>
 80415e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80415e8:	f000 808f 	beq.w	804170a <GpioSetInterrupt+0x212>
 80415ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80415f0:	f300 80a3 	bgt.w	804173a <GpioSetInterrupt+0x242>
 80415f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80415f8:	f000 8083 	beq.w	8041702 <GpioSetInterrupt+0x20a>
 80415fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8041600:	f300 809b 	bgt.w	804173a <GpioSetInterrupt+0x242>
 8041604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8041608:	d077      	beq.n	80416fa <GpioSetInterrupt+0x202>
 804160a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804160e:	f300 8094 	bgt.w	804173a <GpioSetInterrupt+0x242>
 8041612:	2b80      	cmp	r3, #128	; 0x80
 8041614:	d06d      	beq.n	80416f2 <GpioSetInterrupt+0x1fa>
 8041616:	2b80      	cmp	r3, #128	; 0x80
 8041618:	f300 808f 	bgt.w	804173a <GpioSetInterrupt+0x242>
 804161c:	2b20      	cmp	r3, #32
 804161e:	dc49      	bgt.n	80416b4 <GpioSetInterrupt+0x1bc>
 8041620:	2b00      	cmp	r3, #0
 8041622:	f340 808a 	ble.w	804173a <GpioSetInterrupt+0x242>
 8041626:	3b01      	subs	r3, #1
 8041628:	2b1f      	cmp	r3, #31
 804162a:	f200 8086 	bhi.w	804173a <GpioSetInterrupt+0x242>
 804162e:	a201      	add	r2, pc, #4	; (adr r2, 8041634 <GpioSetInterrupt+0x13c>)
 8041630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8041634:	080416bb 	.word	0x080416bb
 8041638:	080416c3 	.word	0x080416c3
 804163c:	0804173b 	.word	0x0804173b
 8041640:	080416cb 	.word	0x080416cb
 8041644:	0804173b 	.word	0x0804173b
 8041648:	0804173b 	.word	0x0804173b
 804164c:	0804173b 	.word	0x0804173b
 8041650:	080416d3 	.word	0x080416d3
 8041654:	0804173b 	.word	0x0804173b
 8041658:	0804173b 	.word	0x0804173b
 804165c:	0804173b 	.word	0x0804173b
 8041660:	0804173b 	.word	0x0804173b
 8041664:	0804173b 	.word	0x0804173b
 8041668:	0804173b 	.word	0x0804173b
 804166c:	0804173b 	.word	0x0804173b
 8041670:	080416db 	.word	0x080416db
 8041674:	0804173b 	.word	0x0804173b
 8041678:	0804173b 	.word	0x0804173b
 804167c:	0804173b 	.word	0x0804173b
 8041680:	0804173b 	.word	0x0804173b
 8041684:	0804173b 	.word	0x0804173b
 8041688:	0804173b 	.word	0x0804173b
 804168c:	0804173b 	.word	0x0804173b
 8041690:	0804173b 	.word	0x0804173b
 8041694:	0804173b 	.word	0x0804173b
 8041698:	0804173b 	.word	0x0804173b
 804169c:	0804173b 	.word	0x0804173b
 80416a0:	0804173b 	.word	0x0804173b
 80416a4:	0804173b 	.word	0x0804173b
 80416a8:	0804173b 	.word	0x0804173b
 80416ac:	0804173b 	.word	0x0804173b
 80416b0:	080416e3 	.word	0x080416e3
 80416b4:	2b40      	cmp	r3, #64	; 0x40
 80416b6:	d018      	beq.n	80416ea <GpioSetInterrupt+0x1f2>
            break;
        case GPIO_PIN_15:
            IRQnb = EXTI15_IRQn;
            break;
        default:
            break;
 80416b8:	e03f      	b.n	804173a <GpioSetInterrupt+0x242>
            IRQnb = EXTI0_IRQn;
 80416ba:	230b      	movs	r3, #11
 80416bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 80416c0:	e03c      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI1_IRQn;
 80416c2:	230c      	movs	r3, #12
 80416c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 80416c8:	e038      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI2_IRQn;
 80416ca:	230d      	movs	r3, #13
 80416cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 80416d0:	e034      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI3_IRQn;
 80416d2:	230e      	movs	r3, #14
 80416d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 80416d8:	e030      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI4_IRQn;
 80416da:	230f      	movs	r3, #15
 80416dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 80416e0:	e02c      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI5_IRQn;
 80416e2:	2310      	movs	r3, #16
 80416e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 80416e8:	e028      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI6_IRQn;
 80416ea:	2311      	movs	r3, #17
 80416ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 80416f0:	e024      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI7_IRQn;
 80416f2:	2312      	movs	r3, #18
 80416f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 80416f8:	e020      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI8_IRQn;
 80416fa:	2313      	movs	r3, #19
 80416fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041700:	e01c      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI9_IRQn;
 8041702:	2314      	movs	r3, #20
 8041704:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041708:	e018      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI10_IRQn;
 804170a:	2315      	movs	r3, #21
 804170c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041710:	e014      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI11_IRQn;
 8041712:	2316      	movs	r3, #22
 8041714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041718:	e010      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI12_IRQn;
 804171a:	2317      	movs	r3, #23
 804171c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041720:	e00c      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI13_IRQn;
 8041722:	2318      	movs	r3, #24
 8041724:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041728:	e008      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI14_IRQn;
 804172a:	2319      	movs	r3, #25
 804172c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041730:	e004      	b.n	804173c <GpioSetInterrupt+0x244>
            IRQnb = EXTI15_IRQn;
 8041732:	231a      	movs	r3, #26
 8041734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041738:	e000      	b.n	804173c <GpioSetInterrupt+0x244>
            break;
 804173a:	bf00      	nop
        }

        GpioIrq[( obj->pin ) & 0x0F] = obj;
 804173c:	68fb      	ldr	r3, [r7, #12]
 804173e:	f993 3000 	ldrsb.w	r3, [r3]
 8041742:	b2db      	uxtb	r3, r3
 8041744:	f003 030f 	and.w	r3, r3, #15
 8041748:	490d      	ldr	r1, [pc, #52]	; (8041780 <GpioSetInterrupt+0x288>)
 804174a:	68fa      	ldr	r2, [r7, #12]
 804174c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 8041750:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8041754:	2200      	movs	r2, #0
 8041756:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8041758:	4618      	mov	r0, r3
 804175a:	f006 fe0d 	bl	8048378 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( IRQnb );
 804175e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8041762:	4618      	mov	r0, r3
 8041764:	f006 fe22 	bl	80483ac <HAL_NVIC_EnableIRQ>
 8041768:	e000      	b.n	804176c <GpioSetInterrupt+0x274>
            return;
 804176a:	bf00      	nop
//#if defined( BOARD_IOE_EXT )
//        // IOExt Pin
//        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
//#endif
//    }
}
 804176c:	3730      	adds	r7, #48	; 0x30
 804176e:	46bd      	mov	sp, r7
 8041770:	bd80      	pop	{r7, pc}
 8041772:	bf00      	nop
 8041774:	10110000 	.word	0x10110000
 8041778:	10210000 	.word	0x10210000
 804177c:	10310000 	.word	0x10310000
 8041780:	20018080 	.word	0x20018080

08041784 <GpioWrite>:
//#endif
//    }
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 8041784:	b580      	push	{r7, lr}
 8041786:	b082      	sub	sp, #8
 8041788:	af00      	add	r7, sp, #0
 804178a:	6078      	str	r0, [r7, #4]
 804178c:	6039      	str	r1, [r7, #0]
        if( obj == NULL )
        {
            assert_param( FAIL );
        }
        // Check if pin is not connected
        if( obj->pin == NC )
 804178e:	687b      	ldr	r3, [r7, #4]
 8041790:	f993 3000 	ldrsb.w	r3, [r3]
 8041794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8041798:	d009      	beq.n	80417ae <GpioWrite+0x2a>
        {
            return;
        }
        HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 804179a:	687b      	ldr	r3, [r7, #4]
 804179c:	6858      	ldr	r0, [r3, #4]
 804179e:	687b      	ldr	r3, [r7, #4]
 80417a0:	885b      	ldrh	r3, [r3, #2]
 80417a2:	683a      	ldr	r2, [r7, #0]
 80417a4:	b2d2      	uxtb	r2, r2
 80417a6:	4619      	mov	r1, r3
 80417a8:	f007 fba6 	bl	8048ef8 <HAL_GPIO_WritePin>
 80417ac:	e000      	b.n	80417b0 <GpioWrite+0x2c>
            return;
 80417ae:	bf00      	nop
//#if defined( BOARD_IOE_EXT )
//        // IOExt Pin
//        GpioIoeWrite( obj, value );
//#endif
//    }
}
 80417b0:	3708      	adds	r7, #8
 80417b2:	46bd      	mov	sp, r7
 80417b4:	bd80      	pop	{r7, pc}

080417b6 <GpioRead>:
//#endif
//    }
}

uint32_t GpioRead( Gpio_t *obj )
{
 80417b6:	b580      	push	{r7, lr}
 80417b8:	b082      	sub	sp, #8
 80417ba:	af00      	add	r7, sp, #0
 80417bc:	6078      	str	r0, [r7, #4]
        if( obj == NULL )
        {
            assert_param( FAIL );
        }
        // Check if pin is not connected
        if( obj->pin == NC )
 80417be:	687b      	ldr	r3, [r7, #4]
 80417c0:	f993 3000 	ldrsb.w	r3, [r3]
 80417c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80417c8:	d101      	bne.n	80417ce <GpioRead+0x18>
        {
            return 0;
 80417ca:	2300      	movs	r3, #0
 80417cc:	e008      	b.n	80417e0 <GpioRead+0x2a>
        }
        return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
 80417ce:	687b      	ldr	r3, [r7, #4]
 80417d0:	685a      	ldr	r2, [r3, #4]
 80417d2:	687b      	ldr	r3, [r7, #4]
 80417d4:	885b      	ldrh	r3, [r3, #2]
 80417d6:	4619      	mov	r1, r3
 80417d8:	4610      	mov	r0, r2
 80417da:	f007 fb75 	bl	8048ec8 <HAL_GPIO_ReadPin>
 80417de:	4603      	mov	r3, r0
//        return GpioIoeRead( obj );
//#else
//        return 0;
//#endif
//    }
}
 80417e0:	4618      	mov	r0, r3
 80417e2:	3708      	adds	r7, #8
 80417e4:	46bd      	mov	sp, r7
 80417e6:	bd80      	pop	{r7, pc}

080417e8 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler( void )
{
 80417e8:	b580      	push	{r7, lr}
 80417ea:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 80417ec:	2001      	movs	r0, #1
 80417ee:	f007 fb9b 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 80417f2:	bf00      	nop
 80417f4:	bd80      	pop	{r7, pc}

080417f6 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 80417f6:	b580      	push	{r7, lr}
 80417f8:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 80417fa:	2002      	movs	r0, #2
 80417fc:	f007 fb94 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 8041800:	bf00      	nop
 8041802:	bd80      	pop	{r7, pc}

08041804 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 8041804:	b580      	push	{r7, lr}
 8041806:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8041808:	2004      	movs	r0, #4
 804180a:	f007 fb8d 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 804180e:	bf00      	nop
 8041810:	bd80      	pop	{r7, pc}

08041812 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 8041812:	b580      	push	{r7, lr}
 8041814:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 8041816:	2008      	movs	r0, #8
 8041818:	f007 fb86 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 804181c:	bf00      	nop
 804181e:	bd80      	pop	{r7, pc}

08041820 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 8041820:	b580      	push	{r7, lr}
 8041822:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 8041824:	2010      	movs	r0, #16
 8041826:	f007 fb7f 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 804182a:	bf00      	nop
 804182c:	bd80      	pop	{r7, pc}

0804182e <EXTI5_IRQHandler>:

void EXTI5_IRQHandler( void )
{
 804182e:	b580      	push	{r7, lr}
 8041830:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 8041832:	2020      	movs	r0, #32
 8041834:	f007 fb78 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 8041838:	bf00      	nop
 804183a:	bd80      	pop	{r7, pc}

0804183c <EXTI6_IRQHandler>:

void EXTI6_IRQHandler( void )
{
 804183c:	b580      	push	{r7, lr}
 804183e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8041840:	2040      	movs	r0, #64	; 0x40
 8041842:	f007 fb71 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 8041846:	bf00      	nop
 8041848:	bd80      	pop	{r7, pc}

0804184a <EXTI7_IRQHandler>:

void EXTI7_IRQHandler( void )
{
 804184a:	b580      	push	{r7, lr}
 804184c:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 804184e:	2080      	movs	r0, #128	; 0x80
 8041850:	f007 fb6a 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 8041854:	bf00      	nop
 8041856:	bd80      	pop	{r7, pc}

08041858 <EXTI8_IRQHandler>:

void EXTI8_IRQHandler( void )
{
 8041858:	b580      	push	{r7, lr}
 804185a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 804185c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8041860:	f007 fb62 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 8041864:	bf00      	nop
 8041866:	bd80      	pop	{r7, pc}

08041868 <EXTI9_IRQHandler>:

void EXTI9_IRQHandler( void )
{
 8041868:	b580      	push	{r7, lr}
 804186a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 804186c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8041870:	f007 fb5a 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 8041874:	bf00      	nop
 8041876:	bd80      	pop	{r7, pc}

08041878 <EXTI10_IRQHandler>:

void EXTI10_IRQHandler( void )
{
 8041878:	b580      	push	{r7, lr}
 804187a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 804187c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8041880:	f007 fb52 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 8041884:	bf00      	nop
 8041886:	bd80      	pop	{r7, pc}

08041888 <EXTI11_IRQHandler>:

void EXTI11_IRQHandler( void )
{
 8041888:	b580      	push	{r7, lr}
 804188a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 804188c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8041890:	f007 fb4a 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 8041894:	bf00      	nop
 8041896:	bd80      	pop	{r7, pc}

08041898 <EXTI12_IRQHandler>:

void EXTI12_IRQHandler( void )
{
 8041898:	b580      	push	{r7, lr}
 804189a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 804189c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80418a0:	f007 fb42 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 80418a4:	bf00      	nop
 80418a6:	bd80      	pop	{r7, pc}

080418a8 <EXTI13_IRQHandler>:

void EXTI13_IRQHandler( void )
{
 80418a8:	b580      	push	{r7, lr}
 80418aa:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 80418ac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80418b0:	f007 fb3a 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 80418b4:	bf00      	nop
 80418b6:	bd80      	pop	{r7, pc}

080418b8 <EXTI14_IRQHandler>:

void EXTI14_IRQHandler( void )
{
 80418b8:	b580      	push	{r7, lr}
 80418ba:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 80418bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80418c0:	f007 fb32 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 80418c4:	bf00      	nop
 80418c6:	bd80      	pop	{r7, pc}

080418c8 <EXTI15_IRQHandler>:

void EXTI15_IRQHandler( void )
{
 80418c8:	b580      	push	{r7, lr}
 80418ca:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 80418cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80418d0:	f007 fb2a 	bl	8048f28 <HAL_GPIO_EXTI_IRQHandler>
}
 80418d4:	bf00      	nop
 80418d6:	bd80      	pop	{r7, pc}

080418d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80418d8:	b580      	push	{r7, lr}
 80418da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80418dc:	4b1b      	ldr	r3, [pc, #108]	; (804194c <MX_I2C1_Init+0x74>)
 80418de:	4a1c      	ldr	r2, [pc, #112]	; (8041950 <MX_I2C1_Init+0x78>)
 80418e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30F77489;
 80418e2:	4b1a      	ldr	r3, [pc, #104]	; (804194c <MX_I2C1_Init+0x74>)
 80418e4:	4a1b      	ldr	r2, [pc, #108]	; (8041954 <MX_I2C1_Init+0x7c>)
 80418e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80418e8:	4b18      	ldr	r3, [pc, #96]	; (804194c <MX_I2C1_Init+0x74>)
 80418ea:	2200      	movs	r2, #0
 80418ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80418ee:	4b17      	ldr	r3, [pc, #92]	; (804194c <MX_I2C1_Init+0x74>)
 80418f0:	2201      	movs	r2, #1
 80418f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80418f4:	4b15      	ldr	r3, [pc, #84]	; (804194c <MX_I2C1_Init+0x74>)
 80418f6:	2200      	movs	r2, #0
 80418f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80418fa:	4b14      	ldr	r3, [pc, #80]	; (804194c <MX_I2C1_Init+0x74>)
 80418fc:	2200      	movs	r2, #0
 80418fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8041900:	4b12      	ldr	r3, [pc, #72]	; (804194c <MX_I2C1_Init+0x74>)
 8041902:	2200      	movs	r2, #0
 8041904:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8041906:	4b11      	ldr	r3, [pc, #68]	; (804194c <MX_I2C1_Init+0x74>)
 8041908:	2200      	movs	r2, #0
 804190a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 804190c:	4b0f      	ldr	r3, [pc, #60]	; (804194c <MX_I2C1_Init+0x74>)
 804190e:	2200      	movs	r2, #0
 8041910:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8041912:	480e      	ldr	r0, [pc, #56]	; (804194c <MX_I2C1_Init+0x74>)
 8041914:	f007 fb44 	bl	8048fa0 <HAL_I2C_Init>
 8041918:	4603      	mov	r3, r0
 804191a:	2b00      	cmp	r3, #0
 804191c:	d001      	beq.n	8041922 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 804191e:	f000 f9eb 	bl	8041cf8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8041922:	2100      	movs	r1, #0
 8041924:	4809      	ldr	r0, [pc, #36]	; (804194c <MX_I2C1_Init+0x74>)
 8041926:	f008 feb5 	bl	804a694 <HAL_I2CEx_ConfigAnalogFilter>
 804192a:	4603      	mov	r3, r0
 804192c:	2b00      	cmp	r3, #0
 804192e:	d001      	beq.n	8041934 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8041930:	f000 f9e2 	bl	8041cf8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8041934:	2100      	movs	r1, #0
 8041936:	4805      	ldr	r0, [pc, #20]	; (804194c <MX_I2C1_Init+0x74>)
 8041938:	f008 fef7 	bl	804a72a <HAL_I2CEx_ConfigDigitalFilter>
 804193c:	4603      	mov	r3, r0
 804193e:	2b00      	cmp	r3, #0
 8041940:	d001      	beq.n	8041946 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8041942:	f000 f9d9 	bl	8041cf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8041946:	bf00      	nop
 8041948:	bd80      	pop	{r7, pc}
 804194a:	bf00      	nop
 804194c:	20018f68 	.word	0x20018f68
 8041950:	40005400 	.word	0x40005400
 8041954:	30f77489 	.word	0x30f77489

08041958 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8041958:	b580      	push	{r7, lr}
 804195a:	b0ae      	sub	sp, #184	; 0xb8
 804195c:	af00      	add	r7, sp, #0
 804195e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041960:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8041964:	2200      	movs	r2, #0
 8041966:	601a      	str	r2, [r3, #0]
 8041968:	605a      	str	r2, [r3, #4]
 804196a:	609a      	str	r2, [r3, #8]
 804196c:	60da      	str	r2, [r3, #12]
 804196e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8041970:	f107 0310 	add.w	r3, r7, #16
 8041974:	2294      	movs	r2, #148	; 0x94
 8041976:	2100      	movs	r1, #0
 8041978:	4618      	mov	r0, r3
 804197a:	f00c fefe 	bl	804e77a <memset>
  if(i2cHandle->Instance==I2C1)
 804197e:	687b      	ldr	r3, [r7, #4]
 8041980:	681b      	ldr	r3, [r3, #0]
 8041982:	4a29      	ldr	r2, [pc, #164]	; (8041a28 <HAL_I2C_MspInit+0xd0>)
 8041984:	4293      	cmp	r3, r2
 8041986:	d14b      	bne.n	8041a20 <HAL_I2C_MspInit+0xc8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8041988:	2340      	movs	r3, #64	; 0x40
 804198a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 804198c:	2300      	movs	r3, #0
 804198e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8041990:	f107 0310 	add.w	r3, r7, #16
 8041994:	4618      	mov	r0, r3
 8041996:	f009 f831 	bl	804a9fc <HAL_RCCEx_PeriphCLKConfig>
 804199a:	4603      	mov	r3, r0
 804199c:	2b00      	cmp	r3, #0
 804199e:	d001      	beq.n	80419a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80419a0:	f000 f9aa 	bl	8041cf8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80419a4:	4b21      	ldr	r3, [pc, #132]	; (8041a2c <HAL_I2C_MspInit+0xd4>)
 80419a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80419a8:	4a20      	ldr	r2, [pc, #128]	; (8041a2c <HAL_I2C_MspInit+0xd4>)
 80419aa:	f043 0302 	orr.w	r3, r3, #2
 80419ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80419b0:	4b1e      	ldr	r3, [pc, #120]	; (8041a2c <HAL_I2C_MspInit+0xd4>)
 80419b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80419b4:	f003 0302 	and.w	r3, r3, #2
 80419b8:	60fb      	str	r3, [r7, #12]
 80419ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EXT_SCL_Pin|EXT_SDA_Pin;
 80419bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80419c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80419c4:	2312      	movs	r3, #18
 80419c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80419ca:	2301      	movs	r3, #1
 80419cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80419d0:	2300      	movs	r3, #0
 80419d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80419d6:	2304      	movs	r3, #4
 80419d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80419dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80419e0:	4619      	mov	r1, r3
 80419e2:	4813      	ldr	r0, [pc, #76]	; (8041a30 <HAL_I2C_MspInit+0xd8>)
 80419e4:	f007 f802 	bl	80489ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80419e8:	4b10      	ldr	r3, [pc, #64]	; (8041a2c <HAL_I2C_MspInit+0xd4>)
 80419ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80419ec:	4a0f      	ldr	r2, [pc, #60]	; (8041a2c <HAL_I2C_MspInit+0xd4>)
 80419ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80419f2:	6593      	str	r3, [r2, #88]	; 0x58
 80419f4:	4b0d      	ldr	r3, [pc, #52]	; (8041a2c <HAL_I2C_MspInit+0xd4>)
 80419f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80419f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80419fc:	60bb      	str	r3, [r7, #8]
 80419fe:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8041a00:	2200      	movs	r2, #0
 8041a02:	2100      	movs	r1, #0
 8041a04:	2037      	movs	r0, #55	; 0x37
 8041a06:	f006 fcb7 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8041a0a:	2037      	movs	r0, #55	; 0x37
 8041a0c:	f006 fcce 	bl	80483ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8041a10:	2200      	movs	r2, #0
 8041a12:	2100      	movs	r1, #0
 8041a14:	2038      	movs	r0, #56	; 0x38
 8041a16:	f006 fcaf 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8041a1a:	2038      	movs	r0, #56	; 0x38
 8041a1c:	f006 fcc6 	bl	80483ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8041a20:	bf00      	nop
 8041a22:	37b8      	adds	r7, #184	; 0xb8
 8041a24:	46bd      	mov	sp, r7
 8041a26:	bd80      	pop	{r7, pc}
 8041a28:	40005400 	.word	0x40005400
 8041a2c:	40021000 	.word	0x40021000
 8041a30:	42020400 	.word	0x42020400

08041a34 <LpmSetStopMode>:
    CRITICAL_SECTION_END( );
    return;
}

void LpmSetStopMode( LpmId_t id, LpmSetMode_t mode )
{
 8041a34:	b580      	push	{r7, lr}
 8041a36:	b084      	sub	sp, #16
 8041a38:	af00      	add	r7, sp, #0
 8041a3a:	4603      	mov	r3, r0
 8041a3c:	460a      	mov	r2, r1
 8041a3e:	71fb      	strb	r3, [r7, #7]
 8041a40:	4613      	mov	r3, r2
 8041a42:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN( );
 8041a44:	f107 030c 	add.w	r3, r7, #12
 8041a48:	4618      	mov	r0, r3
 8041a4a:	f003 fc67 	bl	804531c <BoardCriticalSectionBegin>

    switch( mode )
 8041a4e:	79bb      	ldrb	r3, [r7, #6]
 8041a50:	2b00      	cmp	r3, #0
 8041a52:	d008      	beq.n	8041a66 <LpmSetStopMode+0x32>
 8041a54:	2b01      	cmp	r3, #1
 8041a56:	d10e      	bne.n	8041a76 <LpmSetStopMode+0x42>
    {
        case LPM_DISABLE:
        {
            StopModeDisable |= ( uint32_t )id;
 8041a58:	79fa      	ldrb	r2, [r7, #7]
 8041a5a:	4b0c      	ldr	r3, [pc, #48]	; (8041a8c <LpmSetStopMode+0x58>)
 8041a5c:	681b      	ldr	r3, [r3, #0]
 8041a5e:	4313      	orrs	r3, r2
 8041a60:	4a0a      	ldr	r2, [pc, #40]	; (8041a8c <LpmSetStopMode+0x58>)
 8041a62:	6013      	str	r3, [r2, #0]
            break;
 8041a64:	e008      	b.n	8041a78 <LpmSetStopMode+0x44>
        }
        case LPM_ENABLE:
        {
            StopModeDisable &= ~( uint32_t )id;
 8041a66:	79fb      	ldrb	r3, [r7, #7]
 8041a68:	43da      	mvns	r2, r3
 8041a6a:	4b08      	ldr	r3, [pc, #32]	; (8041a8c <LpmSetStopMode+0x58>)
 8041a6c:	681b      	ldr	r3, [r3, #0]
 8041a6e:	4013      	ands	r3, r2
 8041a70:	4a06      	ldr	r2, [pc, #24]	; (8041a8c <LpmSetStopMode+0x58>)
 8041a72:	6013      	str	r3, [r2, #0]
            break;
 8041a74:	e000      	b.n	8041a78 <LpmSetStopMode+0x44>
        }
        default:
        {
            break;
 8041a76:	bf00      	nop
        }
    }

    CRITICAL_SECTION_END( );
 8041a78:	f107 030c 	add.w	r3, r7, #12
 8041a7c:	4618      	mov	r0, r3
 8041a7e:	f003 fc5f 	bl	8045340 <BoardCriticalSectionEnd>
    return;
 8041a82:	bf00      	nop
}
 8041a84:	3710      	adds	r7, #16
 8041a86:	46bd      	mov	sp, r7
 8041a88:	bd80      	pop	{r7, pc}
 8041a8a:	bf00      	nop
 8041a8c:	200180c0 	.word	0x200180c0

08041a90 <LpmGetMode>:
    }
    return;
}

LpmGetMode_t LpmGetMode(void)
{
 8041a90:	b580      	push	{r7, lr}
 8041a92:	b082      	sub	sp, #8
 8041a94:	af00      	add	r7, sp, #0
    LpmGetMode_t mode;

    CRITICAL_SECTION_BEGIN( );
 8041a96:	463b      	mov	r3, r7
 8041a98:	4618      	mov	r0, r3
 8041a9a:	f003 fc3f 	bl	804531c <BoardCriticalSectionBegin>

    if( StopModeDisable != 0 )
 8041a9e:	4b0c      	ldr	r3, [pc, #48]	; (8041ad0 <LpmGetMode+0x40>)
 8041aa0:	681b      	ldr	r3, [r3, #0]
 8041aa2:	2b00      	cmp	r3, #0
 8041aa4:	d002      	beq.n	8041aac <LpmGetMode+0x1c>
    {
        mode = LPM_SLEEP_MODE;
 8041aa6:	2300      	movs	r3, #0
 8041aa8:	71fb      	strb	r3, [r7, #7]
 8041aaa:	e008      	b.n	8041abe <LpmGetMode+0x2e>
    }
    else
    {
        if( OffModeDisable != 0 )
 8041aac:	4b09      	ldr	r3, [pc, #36]	; (8041ad4 <LpmGetMode+0x44>)
 8041aae:	681b      	ldr	r3, [r3, #0]
 8041ab0:	2b00      	cmp	r3, #0
 8041ab2:	d002      	beq.n	8041aba <LpmGetMode+0x2a>
        {
            mode = LPM_STOP_MODE;
 8041ab4:	2301      	movs	r3, #1
 8041ab6:	71fb      	strb	r3, [r7, #7]
 8041ab8:	e001      	b.n	8041abe <LpmGetMode+0x2e>
        }
        else
        {
            mode = LPM_OFF_MODE;
 8041aba:	2302      	movs	r3, #2
 8041abc:	71fb      	strb	r3, [r7, #7]
        }
    }

    CRITICAL_SECTION_END( );
 8041abe:	463b      	mov	r3, r7
 8041ac0:	4618      	mov	r0, r3
 8041ac2:	f003 fc3d 	bl	8045340 <BoardCriticalSectionEnd>
    return mode;
 8041ac6:	79fb      	ldrb	r3, [r7, #7]
}
 8041ac8:	4618      	mov	r0, r3
 8041aca:	3708      	adds	r7, #8
 8041acc:	46bd      	mov	sp, r7
 8041ace:	bd80      	pop	{r7, pc}
 8041ad0:	200180c0 	.word	0x200180c0
 8041ad4:	200180c4 	.word	0x200180c4

08041ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8041ad8:	b590      	push	{r4, r7, lr}
 8041ada:	b08b      	sub	sp, #44	; 0x2c
 8041adc:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8041ade:	f005 f84a 	bl	8046b76 <HAL_Init>

  /* USER CODE BEGIN Init */
    HAL_DBGMCU_EnableDBGStopMode( );
 8041ae2:	f005 f8a7 	bl	8046c34 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode( );
 8041ae6:	f005 f8b5 	bl	8046c54 <HAL_DBGMCU_EnableDBGStandbyMode>
  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  /* Register SecureFault callback defined in non-secure and to be called by secure handler */
    SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 8041aea:	4941      	ldr	r1, [pc, #260]	; (8041bf0 <main+0x118>)
 8041aec:	2000      	movs	r0, #0
 8041aee:	f00c fe73 	bl	804e7d8 <__SECURE_RegisterCallback_veneer>

    /* Register SecureError callback defined in non-secure and to be called by secure handler */
    SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 8041af2:	4940      	ldr	r1, [pc, #256]	; (8041bf4 <main+0x11c>)
 8041af4:	2001      	movs	r0, #1
 8041af6:	f00c fe6f 	bl	804e7d8 <__SECURE_RegisterCallback_veneer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8041afa:	f7ff fbdd 	bl	80412b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8041afe:	f7ff fb85 	bl	804120c <MX_DMA_Init>
  MX_ADC1_Init();
 8041b02:	f7ff f915 	bl	8040d30 <MX_ADC1_Init>
  MX_I2C1_Init();
 8041b06:	f7ff fee7 	bl	80418d8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8041b0a:	f001 fcf3 	bl	80434f4 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8041b0e:	f000 f951 	bl	8041db4 <MX_RTC_Init>
  MX_SPI1_Init();
 8041b12:	f000 fca5 	bl	8042460 <MX_SPI1_Init>
  MX_SPI3_Init();
 8041b16:	f000 fce1 	bl	80424dc <MX_SPI3_Init>
  MX_TIM1_Init();
 8041b1a:	f001 f999 	bl	8042e50 <MX_TIM1_Init>
  MX_ADC2_Init();
 8041b1e:	f7ff f97d 	bl	8040e1c <MX_ADC2_Init>
  MX_LPUART1_UART_Init();
 8041b22:	f001 fc99 	bl	8043458 <MX_LPUART1_UART_Init>
  MX_CRC_Init();
 8041b26:	f7ff fb43 	bl	80411b0 <MX_CRC_Init>
  MX_RNG_Init();
 8041b2a:	f000 f8f1 	bl	8041d10 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

  SpiInit(&LR1110.spi, SPI_3, LR_MOSI_GPIO_Port, LR_MOSI_Pin,
 8041b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8041b32:	9305      	str	r3, [sp, #20]
 8041b34:	2300      	movs	r3, #0
 8041b36:	9304      	str	r3, [sp, #16]
 8041b38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8041b3c:	9303      	str	r3, [sp, #12]
 8041b3e:	4b2e      	ldr	r3, [pc, #184]	; (8041bf8 <main+0x120>)
 8041b40:	9302      	str	r3, [sp, #8]
 8041b42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8041b46:	9301      	str	r3, [sp, #4]
 8041b48:	4b2b      	ldr	r3, [pc, #172]	; (8041bf8 <main+0x120>)
 8041b4a:	9300      	str	r3, [sp, #0]
 8041b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8041b50:	4a29      	ldr	r2, [pc, #164]	; (8041bf8 <main+0x120>)
 8041b52:	2102      	movs	r1, #2
 8041b54:	4829      	ldr	r0, [pc, #164]	; (8041bfc <main+0x124>)
 8041b56:	f000 fd85 	bl	8042664 <SpiInit>
		  LR_MISO_GPIO_Port, LR_MISO_Pin, LR_SCK_GPIO_Port, LR_SCK_Pin, NULL, NC);

  lr1110_board_init_io( &LR1110 );
 8041b5a:	4829      	ldr	r0, [pc, #164]	; (8041c00 <main+0x128>)
 8041b5c:	f002 f8bc 	bl	8043cd8 <lr1110_board_init_io>

  Radio.Init(&lrEvent);
 8041b60:	4b28      	ldr	r3, [pc, #160]	; (8041c04 <main+0x12c>)
 8041b62:	681b      	ldr	r3, [r3, #0]
 8041b64:	4828      	ldr	r0, [pc, #160]	; (8041c08 <main+0x130>)
 8041b66:	4798      	blx	r3

  Radio.SetModem(MODEM_LORA);
 8041b68:	4b26      	ldr	r3, [pc, #152]	; (8041c04 <main+0x12c>)
 8041b6a:	689b      	ldr	r3, [r3, #8]
 8041b6c:	2001      	movs	r0, #1
 8041b6e:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 8041b70:	4b24      	ldr	r3, [pc, #144]	; (8041c04 <main+0x12c>)
 8041b72:	68db      	ldr	r3, [r3, #12]
 8041b74:	4825      	ldr	r0, [pc, #148]	; (8041c0c <main+0x134>)
 8041b76:	4798      	blx	r3
  Radio.SetPublicNetwork(LR1110_RADIO_LORA_NETWORK_PUBLIC);
 8041b78:	4b22      	ldr	r3, [pc, #136]	; (8041c04 <main+0x12c>)
 8041b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041b7c:	2001      	movs	r0, #1
 8041b7e:	4798      	blx	r3
  Radio.SetMaxPayloadLength( MODEM_LORA, 255 );
 8041b80:	4b20      	ldr	r3, [pc, #128]	; (8041c04 <main+0x12c>)
 8041b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041b84:	21ff      	movs	r1, #255	; 0xff
 8041b86:	2001      	movs	r0, #1
 8041b88:	4798      	blx	r3

//  Radio.SetTxConfig();
  Radio.SetRxConfig( MODEM_LORA, LR1110_RADIO_LORA_BW_125,
 8041b8a:	4b1e      	ldr	r3, [pc, #120]	; (8041c04 <main+0x12c>)
 8041b8c:	699c      	ldr	r4, [r3, #24]
 8041b8e:	2301      	movs	r3, #1
 8041b90:	9309      	str	r3, [sp, #36]	; 0x24
 8041b92:	2300      	movs	r3, #0
 8041b94:	9308      	str	r3, [sp, #32]
 8041b96:	2300      	movs	r3, #0
 8041b98:	9307      	str	r3, [sp, #28]
 8041b9a:	2300      	movs	r3, #0
 8041b9c:	9306      	str	r3, [sp, #24]
 8041b9e:	2301      	movs	r3, #1
 8041ba0:	9305      	str	r3, [sp, #20]
 8041ba2:	2308      	movs	r3, #8
 8041ba4:	9304      	str	r3, [sp, #16]
 8041ba6:	2301      	movs	r3, #1
 8041ba8:	9303      	str	r3, [sp, #12]
 8041baa:	2305      	movs	r3, #5
 8041bac:	9302      	str	r3, [sp, #8]
 8041bae:	2308      	movs	r3, #8
 8041bb0:	9301      	str	r3, [sp, #4]
 8041bb2:	2300      	movs	r3, #0
 8041bb4:	9300      	str	r3, [sp, #0]
 8041bb6:	2301      	movs	r3, #1
 8041bb8:	220a      	movs	r2, #10
 8041bba:	2104      	movs	r1, #4
 8041bbc:	2001      	movs	r0, #1
 8041bbe:	47a0      	blx	r4
          LORA_SYMBOL_TIMEOUT, true,
          8,
		  LR1110_RADIO_LORA_CRC_ON, false, 0,
		  LR1110_RADIO_LORA_IQ_STANDARD, true );

  BSP_GYRO_Init();
 8041bc0:	f004 f824 	bl	8045c0c <BSP_GYRO_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Radio.Rx(0);
 8041bc4:	4b0f      	ldr	r3, [pc, #60]	; (8041c04 <main+0x12c>)
 8041bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041bc8:	2000      	movs	r0, #0
 8041bca:	4798      	blx	r3

  while (1)
  {
	  if( Radio.IrqProcess != NULL )
 8041bcc:	4b0d      	ldr	r3, [pc, #52]	; (8041c04 <main+0x12c>)
 8041bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041bd0:	2b00      	cmp	r3, #0
 8041bd2:	d002      	beq.n	8041bda <main+0x102>
	          {
	              Radio.IrqProcess( );
 8041bd4:	4b0b      	ldr	r3, [pc, #44]	; (8041c04 <main+0x12c>)
 8041bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041bd8:	4798      	blx	r3
	          }
	  BSP_GYRO_GetXYZ(pfData);
 8041bda:	480d      	ldr	r0, [pc, #52]	; (8041c10 <main+0x138>)
 8041bdc:	f004 f850 	bl	8045c80 <BSP_GYRO_GetXYZ>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SECURE_LEDToggle_YELLOW();
 8041be0:	f00c fde2 	bl	804e7a8 <__SECURE_LEDToggle_YELLOW_veneer>
	  HAL_Delay(500);
 8041be4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8041be8:	f005 f800 	bl	8046bec <HAL_Delay>
	  if( Radio.IrqProcess != NULL )
 8041bec:	e7ee      	b.n	8041bcc <main+0xf4>
 8041bee:	bf00      	nop
 8041bf0:	08041c15 	.word	0x08041c15
 8041bf4:	08041c21 	.word	0x08041c21
 8041bf8:	42020800 	.word	0x42020800
 8041bfc:	2001960c 	.word	0x2001960c
 8041c00:	200195d0 	.word	0x200195d0
 8041c04:	0804e874 	.word	0x0804e874
 8041c08:	20018000 	.word	0x20018000
 8041c0c:	3703dcc0 	.word	0x3703dcc0
 8041c10:	200180c8 	.word	0x200180c8

08041c14 <SecureFault_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
  * @retval None
  */
void SecureFault_Callback(void)
{
 8041c14:	b580      	push	{r7, lr}
 8041c16:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure fault generated by IDAU/SAU check */
  /* because of illegal access */
  Error_Handler();
 8041c18:	f000 f86e 	bl	8041cf8 <Error_Handler>
}
 8041c1c:	bf00      	nop
 8041c1e:	bd80      	pop	{r7, pc}

08041c20 <SecureError_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
  * @retval None
  */
void SecureError_Callback(void)
{
 8041c20:	b580      	push	{r7, lr}
 8041c22:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure error generated by GTZC check */
  /* because of illegal access */
  Error_Handler();
 8041c24:	f000 f868 	bl	8041cf8 <Error_Handler>
}
 8041c28:	bf00      	nop
 8041c2a:	bd80      	pop	{r7, pc}

08041c2c <LR_TxDone>:

/*!
 * \brief  Tx Done callback prototype.
 */
void LR_TxDone ( void )
{
 8041c2c:	b480      	push	{r7}
 8041c2e:	af00      	add	r7, sp, #0

}
 8041c30:	bf00      	nop
 8041c32:	46bd      	mov	sp, r7
 8041c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c38:	4770      	bx	lr

08041c3a <LR_TxTimeout>:

/*!
 * \brief  Tx Timeout callback prototype.
 */
void LR_TxTimeout ( void )
{
 8041c3a:	b480      	push	{r7}
 8041c3c:	af00      	add	r7, sp, #0

}
 8041c3e:	bf00      	nop
 8041c40:	46bd      	mov	sp, r7
 8041c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c46:	4770      	bx	lr

08041c48 <LR_RxDone>:
 * \param [IN] snr     SNR value computed while receiving the frame [dB]
 *                     FSK : N/A ( set to 0 )
 *                     LoRa: SNR value in dB
 */
void LR_RxDone ( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8041c48:	b480      	push	{r7}
 8041c4a:	b085      	sub	sp, #20
 8041c4c:	af00      	add	r7, sp, #0
 8041c4e:	60f8      	str	r0, [r7, #12]
 8041c50:	4608      	mov	r0, r1
 8041c52:	4611      	mov	r1, r2
 8041c54:	461a      	mov	r2, r3
 8041c56:	4603      	mov	r3, r0
 8041c58:	817b      	strh	r3, [r7, #10]
 8041c5a:	460b      	mov	r3, r1
 8041c5c:	813b      	strh	r3, [r7, #8]
 8041c5e:	4613      	mov	r3, r2
 8041c60:	71fb      	strb	r3, [r7, #7]

}
 8041c62:	bf00      	nop
 8041c64:	3714      	adds	r7, #20
 8041c66:	46bd      	mov	sp, r7
 8041c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c6c:	4770      	bx	lr

08041c6e <LR_RxTimeout>:

/*!
 * \brief  Rx Timeout callback prototype.
 */
void LR_RxTimeout ( void )
{
 8041c6e:	b480      	push	{r7}
 8041c70:	af00      	add	r7, sp, #0

}
 8041c72:	bf00      	nop
 8041c74:	46bd      	mov	sp, r7
 8041c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c7a:	4770      	bx	lr

08041c7c <LR_RxError>:

/*!
 * \brief Rx Error callback prototype.
 */
void LR_RxError ( void )
{
 8041c7c:	b480      	push	{r7}
 8041c7e:	af00      	add	r7, sp, #0

}
 8041c80:	bf00      	nop
 8041c82:	46bd      	mov	sp, r7
 8041c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c88:	4770      	bx	lr

08041c8a <LR_FhssChangeChannel>:
/*!
 * \brief  FHSS Change Channel callback prototype.
 *
 * \param [IN] currentChannel   Index number of the current channel
 */
void LR_FhssChangeChannel ( uint8_t currentChannel ){
 8041c8a:	b480      	push	{r7}
 8041c8c:	b083      	sub	sp, #12
 8041c8e:	af00      	add	r7, sp, #0
 8041c90:	4603      	mov	r3, r0
 8041c92:	71fb      	strb	r3, [r7, #7]

}
 8041c94:	bf00      	nop
 8041c96:	370c      	adds	r7, #12
 8041c98:	46bd      	mov	sp, r7
 8041c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041c9e:	4770      	bx	lr

08041ca0 <LR_CadDone>:
 * \brief CAD Done callback prototype.
 *
 * \param [IN] channelDetected    Channel Activity detected during the CAD
 */
void LR_CadDone ( bool channelActivityDetected )
{
 8041ca0:	b480      	push	{r7}
 8041ca2:	b083      	sub	sp, #12
 8041ca4:	af00      	add	r7, sp, #0
 8041ca6:	4603      	mov	r3, r0
 8041ca8:	71fb      	strb	r3, [r7, #7]

}
 8041caa:	bf00      	nop
 8041cac:	370c      	adds	r7, #12
 8041cae:	46bd      	mov	sp, r7
 8041cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041cb4:	4770      	bx	lr

08041cb6 <LR_GnssDone>:

/*!
 * \brief  Gnss Done Done callback prototype.
*/
void    LR_GnssDone( void ) {
 8041cb6:	b480      	push	{r7}
 8041cb8:	af00      	add	r7, sp, #0

}
 8041cba:	bf00      	nop
 8041cbc:	46bd      	mov	sp, r7
 8041cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041cc2:	4770      	bx	lr

08041cc4 <LR_WifiDone>:

/*!
 * \brief  Gnss Done Done callback prototype.
*/
void    LR_WifiDone( void ) {
 8041cc4:	b480      	push	{r7}
 8041cc6:	af00      	add	r7, sp, #0

}
 8041cc8:	bf00      	nop
 8041cca:	46bd      	mov	sp, r7
 8041ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041cd0:	4770      	bx	lr
	...

08041cd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8041cd4:	b580      	push	{r7, lr}
 8041cd6:	b082      	sub	sp, #8
 8041cd8:	af00      	add	r7, sp, #0
 8041cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8041cdc:	687b      	ldr	r3, [r7, #4]
 8041cde:	681b      	ldr	r3, [r3, #0]
 8041ce0:	4a04      	ldr	r2, [pc, #16]	; (8041cf4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8041ce2:	4293      	cmp	r3, r2
 8041ce4:	d101      	bne.n	8041cea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8041ce6:	f004 ff61 	bl	8046bac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8041cea:	bf00      	nop
 8041cec:	3708      	adds	r7, #8
 8041cee:	46bd      	mov	sp, r7
 8041cf0:	bd80      	pop	{r7, pc}
 8041cf2:	bf00      	nop
 8041cf4:	40001000 	.word	0x40001000

08041cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8041cf8:	b580      	push	{r7, lr}
 8041cfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8041cfc:	b672      	cpsid	i
}
 8041cfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  SECURE_LEDToggle_RED();
 8041d00:	f00c fd62 	bl	804e7c8 <__SECURE_LEDToggle_RED_veneer>
	  HAL_Delay(500);
 8041d04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8041d08:	f004 ff70 	bl	8046bec <HAL_Delay>
	  SECURE_LEDToggle_RED();
 8041d0c:	e7f8      	b.n	8041d00 <Error_Handler+0x8>
	...

08041d10 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8041d10:	b580      	push	{r7, lr}
 8041d12:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8041d14:	4b07      	ldr	r3, [pc, #28]	; (8041d34 <MX_RNG_Init+0x24>)
 8041d16:	4a08      	ldr	r2, [pc, #32]	; (8041d38 <MX_RNG_Init+0x28>)
 8041d18:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8041d1a:	4b06      	ldr	r3, [pc, #24]	; (8041d34 <MX_RNG_Init+0x24>)
 8041d1c:	2200      	movs	r2, #0
 8041d1e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8041d20:	4804      	ldr	r0, [pc, #16]	; (8041d34 <MX_RNG_Init+0x24>)
 8041d22:	f009 fb51 	bl	804b3c8 <HAL_RNG_Init>
 8041d26:	4603      	mov	r3, r0
 8041d28:	2b00      	cmp	r3, #0
 8041d2a:	d001      	beq.n	8041d30 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8041d2c:	f7ff ffe4 	bl	8041cf8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8041d30:	bf00      	nop
 8041d32:	bd80      	pop	{r7, pc}
 8041d34:	20018fe4 	.word	0x20018fe4
 8041d38:	420c0800 	.word	0x420c0800

08041d3c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8041d3c:	b580      	push	{r7, lr}
 8041d3e:	b0a8      	sub	sp, #160	; 0xa0
 8041d40:	af00      	add	r7, sp, #0
 8041d42:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8041d44:	f107 030c 	add.w	r3, r7, #12
 8041d48:	2294      	movs	r2, #148	; 0x94
 8041d4a:	2100      	movs	r1, #0
 8041d4c:	4618      	mov	r0, r3
 8041d4e:	f00c fd14 	bl	804e77a <memset>
  if(rngHandle->Instance==RNG)
 8041d52:	687b      	ldr	r3, [r7, #4]
 8041d54:	681b      	ldr	r3, [r3, #0]
 8041d56:	4a15      	ldr	r2, [pc, #84]	; (8041dac <HAL_RNG_MspInit+0x70>)
 8041d58:	4293      	cmp	r3, r2
 8041d5a:	d123      	bne.n	8041da4 <HAL_RNG_MspInit+0x68>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8041d5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8041d60:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8041d62:	2300      	movs	r3, #0
 8041d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8041d68:	f107 030c 	add.w	r3, r7, #12
 8041d6c:	4618      	mov	r0, r3
 8041d6e:	f008 fe45 	bl	804a9fc <HAL_RCCEx_PeriphCLKConfig>
 8041d72:	4603      	mov	r3, r0
 8041d74:	2b00      	cmp	r3, #0
 8041d76:	d001      	beq.n	8041d7c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8041d78:	f7ff ffbe 	bl	8041cf8 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8041d7c:	4b0c      	ldr	r3, [pc, #48]	; (8041db0 <HAL_RNG_MspInit+0x74>)
 8041d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041d80:	4a0b      	ldr	r2, [pc, #44]	; (8041db0 <HAL_RNG_MspInit+0x74>)
 8041d82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8041d88:	4b09      	ldr	r3, [pc, #36]	; (8041db0 <HAL_RNG_MspInit+0x74>)
 8041d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8041d90:	60bb      	str	r3, [r7, #8]
 8041d92:	68bb      	ldr	r3, [r7, #8]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8041d94:	2200      	movs	r2, #0
 8041d96:	2100      	movs	r1, #0
 8041d98:	205e      	movs	r0, #94	; 0x5e
 8041d9a:	f006 faed 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8041d9e:	205e      	movs	r0, #94	; 0x5e
 8041da0:	f006 fb04 	bl	80483ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8041da4:	bf00      	nop
 8041da6:	37a0      	adds	r7, #160	; 0xa0
 8041da8:	46bd      	mov	sp, r7
 8041daa:	bd80      	pop	{r7, pc}
 8041dac:	420c0800 	.word	0x420c0800
 8041db0:	40021000 	.word	0x40021000

08041db4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8041db4:	b580      	push	{r7, lr}
 8041db6:	b08a      	sub	sp, #40	; 0x28
 8041db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8041dba:	463b      	mov	r3, r7
 8041dbc:	2228      	movs	r2, #40	; 0x28
 8041dbe:	2100      	movs	r1, #0
 8041dc0:	4618      	mov	r0, r3
 8041dc2:	f00c fcda 	bl	804e77a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8041dc6:	4b3a      	ldr	r3, [pc, #232]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041dc8:	4a3a      	ldr	r2, [pc, #232]	; (8041eb4 <MX_RTC_Init+0x100>)
 8041dca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8041dcc:	4b38      	ldr	r3, [pc, #224]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041dce:	2200      	movs	r2, #0
 8041dd0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8041dd2:	4b37      	ldr	r3, [pc, #220]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041dd4:	227f      	movs	r2, #127	; 0x7f
 8041dd6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8041dd8:	4b35      	ldr	r3, [pc, #212]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041dda:	22ff      	movs	r2, #255	; 0xff
 8041ddc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8041dde:	4b34      	ldr	r3, [pc, #208]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041de0:	2200      	movs	r2, #0
 8041de2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8041de4:	4b32      	ldr	r3, [pc, #200]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041de6:	2200      	movs	r2, #0
 8041de8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8041dea:	4b31      	ldr	r3, [pc, #196]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041dec:	2200      	movs	r2, #0
 8041dee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8041df0:	4b2f      	ldr	r3, [pc, #188]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041df2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8041df6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8041df8:	4b2d      	ldr	r3, [pc, #180]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041dfa:	2200      	movs	r2, #0
 8041dfc:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8041dfe:	482c      	ldr	r0, [pc, #176]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041e00:	f009 fc12 	bl	804b628 <HAL_RTC_Init>
 8041e04:	4603      	mov	r3, r0
 8041e06:	2b00      	cmp	r3, #0
 8041e08:	d001      	beq.n	8041e0e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8041e0a:	f7ff ff75 	bl	8041cf8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8041e0e:	2300      	movs	r3, #0
 8041e10:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8041e12:	2300      	movs	r3, #0
 8041e14:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8041e16:	2300      	movs	r3, #0
 8041e18:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8041e1a:	2300      	movs	r3, #0
 8041e1c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8041e1e:	2300      	movs	r3, #0
 8041e20:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8041e22:	2300      	movs	r3, #0
 8041e24:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8041e26:	2300      	movs	r3, #0
 8041e28:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8041e2a:	2301      	movs	r3, #1
 8041e2c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8041e30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8041e34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8041e36:	463b      	mov	r3, r7
 8041e38:	2201      	movs	r2, #1
 8041e3a:	4619      	mov	r1, r3
 8041e3c:	481c      	ldr	r0, [pc, #112]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041e3e:	f009 fd73 	bl	804b928 <HAL_RTC_SetAlarm_IT>
 8041e42:	4603      	mov	r3, r0
 8041e44:	2b00      	cmp	r3, #0
 8041e46:	d001      	beq.n	8041e4c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8041e48:	f7ff ff56 	bl	8041cf8 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8041e4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8041e50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8041e52:	463b      	mov	r3, r7
 8041e54:	2201      	movs	r2, #1
 8041e56:	4619      	mov	r1, r3
 8041e58:	4815      	ldr	r0, [pc, #84]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041e5a:	f009 fd65 	bl	804b928 <HAL_RTC_SetAlarm_IT>
 8041e5e:	4603      	mov	r3, r0
 8041e60:	2b00      	cmp	r3, #0
 8041e62:	d001      	beq.n	8041e68 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8041e64:	f7ff ff48 	bl	8041cf8 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp_IT(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8041e68:	2200      	movs	r2, #0
 8041e6a:	2100      	movs	r1, #0
 8041e6c:	4810      	ldr	r0, [pc, #64]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041e6e:	f009 ff63 	bl	804bd38 <HAL_RTCEx_SetTimeStamp_IT>
 8041e72:	4603      	mov	r3, r0
 8041e74:	2b00      	cmp	r3, #0
 8041e76:	d001      	beq.n	8041e7c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8041e78:	f7ff ff3e 	bl	8041cf8 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8041e7c:	2300      	movs	r3, #0
 8041e7e:	2200      	movs	r2, #0
 8041e80:	2100      	movs	r1, #0
 8041e82:	480b      	ldr	r0, [pc, #44]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041e84:	f009 ffcc 	bl	804be20 <HAL_RTCEx_SetWakeUpTimer_IT>
 8041e88:	4603      	mov	r3, r0
 8041e8a:	2b00      	cmp	r3, #0
 8041e8c:	d001      	beq.n	8041e92 <MX_RTC_Init+0xde>
  {
    Error_Handler();
 8041e8e:	f7ff ff33 	bl	8041cf8 <Error_Handler>
  }
  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8041e92:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8041e96:	4806      	ldr	r0, [pc, #24]	; (8041eb0 <MX_RTC_Init+0xfc>)
 8041e98:	f00a f86e 	bl	804bf78 <HAL_RTCEx_SetCalibrationOutPut>
 8041e9c:	4603      	mov	r3, r0
 8041e9e:	2b00      	cmp	r3, #0
 8041ea0:	d001      	beq.n	8041ea6 <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8041ea2:	f7ff ff29 	bl	8041cf8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8041ea6:	bf00      	nop
 8041ea8:	3728      	adds	r7, #40	; 0x28
 8041eaa:	46bd      	mov	sp, r7
 8041eac:	bd80      	pop	{r7, pc}
 8041eae:	bf00      	nop
 8041eb0:	20019008 	.word	0x20019008
 8041eb4:	40002800 	.word	0x40002800

08041eb8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8041eb8:	b580      	push	{r7, lr}
 8041eba:	b0a8      	sub	sp, #160	; 0xa0
 8041ebc:	af00      	add	r7, sp, #0
 8041ebe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8041ec0:	f107 030c 	add.w	r3, r7, #12
 8041ec4:	2294      	movs	r2, #148	; 0x94
 8041ec6:	2100      	movs	r1, #0
 8041ec8:	4618      	mov	r0, r3
 8041eca:	f00c fc56 	bl	804e77a <memset>
  if(rtcHandle->Instance==RTC)
 8041ece:	687b      	ldr	r3, [r7, #4]
 8041ed0:	681b      	ldr	r3, [r3, #0]
 8041ed2:	4a1a      	ldr	r2, [pc, #104]	; (8041f3c <HAL_RTC_MspInit+0x84>)
 8041ed4:	4293      	cmp	r3, r2
 8041ed6:	d12c      	bne.n	8041f32 <HAL_RTC_MspInit+0x7a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8041ed8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8041edc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8041ede:	f44f 7300 	mov.w	r3, #512	; 0x200
 8041ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8041ee6:	f107 030c 	add.w	r3, r7, #12
 8041eea:	4618      	mov	r0, r3
 8041eec:	f008 fd86 	bl	804a9fc <HAL_RCCEx_PeriphCLKConfig>
 8041ef0:	4603      	mov	r3, r0
 8041ef2:	2b00      	cmp	r3, #0
 8041ef4:	d001      	beq.n	8041efa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8041ef6:	f7ff feff 	bl	8041cf8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8041efa:	4b11      	ldr	r3, [pc, #68]	; (8041f40 <HAL_RTC_MspInit+0x88>)
 8041efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f00:	4a0f      	ldr	r2, [pc, #60]	; (8041f40 <HAL_RTC_MspInit+0x88>)
 8041f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8041f06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8041f0a:	4b0d      	ldr	r3, [pc, #52]	; (8041f40 <HAL_RTC_MspInit+0x88>)
 8041f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041f0e:	4a0c      	ldr	r2, [pc, #48]	; (8041f40 <HAL_RTC_MspInit+0x88>)
 8041f10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8041f14:	6593      	str	r3, [r2, #88]	; 0x58
 8041f16:	4b0a      	ldr	r3, [pc, #40]	; (8041f40 <HAL_RTC_MspInit+0x88>)
 8041f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041f1e:	60bb      	str	r3, [r7, #8]
 8041f20:	68bb      	ldr	r3, [r7, #8]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8041f22:	2200      	movs	r2, #0
 8041f24:	2100      	movs	r1, #0
 8041f26:	2002      	movs	r0, #2
 8041f28:	f006 fa26 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8041f2c:	2002      	movs	r0, #2
 8041f2e:	f006 fa3d 	bl	80483ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8041f32:	bf00      	nop
 8041f34:	37a0      	adds	r7, #160	; 0xa0
 8041f36:	46bd      	mov	sp, r7
 8041f38:	bd80      	pop	{r7, pc}
 8041f3a:	bf00      	nop
 8041f3c:	40002800 	.word	0x40002800
 8041f40:	40021000 	.word	0x40021000

08041f44 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8041f44:	b580      	push	{r7, lr}
 8041f46:	b082      	sub	sp, #8
 8041f48:	af00      	add	r7, sp, #0
 8041f4a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8041f4c:	687b      	ldr	r3, [r7, #4]
 8041f4e:	681b      	ldr	r3, [r3, #0]
 8041f50:	4a0b      	ldr	r2, [pc, #44]	; (8041f80 <HAL_RTC_MspDeInit+0x3c>)
 8041f52:	4293      	cmp	r3, r2
 8041f54:	d110      	bne.n	8041f78 <HAL_RTC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8041f56:	4b0b      	ldr	r3, [pc, #44]	; (8041f84 <HAL_RTC_MspDeInit+0x40>)
 8041f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041f5c:	4a09      	ldr	r2, [pc, #36]	; (8041f84 <HAL_RTC_MspDeInit+0x40>)
 8041f5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8041f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_DISABLE();
 8041f66:	4b07      	ldr	r3, [pc, #28]	; (8041f84 <HAL_RTC_MspDeInit+0x40>)
 8041f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041f6a:	4a06      	ldr	r2, [pc, #24]	; (8041f84 <HAL_RTC_MspDeInit+0x40>)
 8041f6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8041f70:	6593      	str	r3, [r2, #88]	; 0x58

    /* RTC interrupt Deinit */
    HAL_NVIC_DisableIRQ(RTC_IRQn);
 8041f72:	2002      	movs	r0, #2
 8041f74:	f006 fa28 	bl	80483c8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8041f78:	bf00      	nop
 8041f7a:	3708      	adds	r7, #8
 8041f7c:	46bd      	mov	sp, r7
 8041f7e:	bd80      	pop	{r7, pc}
 8041f80:	40002800 	.word	0x40002800
 8041f84:	40021000 	.word	0x40021000

08041f88 <RtcSetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcSetTimerContext( void )
{
 8041f88:	b580      	push	{r7, lr}
 8041f8a:	af00      	add	r7, sp, #0
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 8041f8c:	4905      	ldr	r1, [pc, #20]	; (8041fa4 <RtcSetTimerContext+0x1c>)
 8041f8e:	4806      	ldr	r0, [pc, #24]	; (8041fa8 <RtcSetTimerContext+0x20>)
 8041f90:	f000 f9c6 	bl	8042320 <RtcGetCalendarValue>
 8041f94:	4602      	mov	r2, r0
 8041f96:	460b      	mov	r3, r1
 8041f98:	4b04      	ldr	r3, [pc, #16]	; (8041fac <RtcSetTimerContext+0x24>)
 8041f9a:	601a      	str	r2, [r3, #0]
    return ( uint32_t )RtcTimerContext.Time;
 8041f9c:	4b03      	ldr	r3, [pc, #12]	; (8041fac <RtcSetTimerContext+0x24>)
 8041f9e:	681b      	ldr	r3, [r3, #0]
}
 8041fa0:	4618      	mov	r0, r3
 8041fa2:	bd80      	pop	{r7, pc}
 8041fa4:	20018178 	.word	0x20018178
 8041fa8:	2001818c 	.word	0x2001818c
 8041fac:	20018174 	.word	0x20018174

08041fb0 <RtcGetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcGetTimerContext( void )
{
 8041fb0:	b480      	push	{r7}
 8041fb2:	af00      	add	r7, sp, #0
    return RtcTimerContext.Time;
 8041fb4:	4b03      	ldr	r3, [pc, #12]	; (8041fc4 <RtcGetTimerContext+0x14>)
 8041fb6:	681b      	ldr	r3, [r3, #0]
}
 8041fb8:	4618      	mov	r0, r3
 8041fba:	46bd      	mov	sp, r7
 8041fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fc0:	4770      	bx	lr
 8041fc2:	bf00      	nop
 8041fc4:	20018174 	.word	0x20018174

08041fc8 <RtcGetMinimumTimeout>:
 * \brief returns the wake up time in ticks
 *
 * \retval wake up time in ticks
 */
uint32_t RtcGetMinimumTimeout( void )
{
 8041fc8:	b480      	push	{r7}
 8041fca:	af00      	add	r7, sp, #0
    return( MIN_ALARM_DELAY );
 8041fcc:	2303      	movs	r3, #3
}
 8041fce:	4618      	mov	r0, r3
 8041fd0:	46bd      	mov	sp, r7
 8041fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041fd6:	4770      	bx	lr

08041fd8 <RtcMs2Tick>:
 *
 * \param[IN] milliseconds Time in milliseconds
 * \retval returns time in timer ticks
 */
uint32_t RtcMs2Tick( uint32_t milliseconds )
{
 8041fd8:	b580      	push	{r7, lr}
 8041fda:	b082      	sub	sp, #8
 8041fdc:	af00      	add	r7, sp, #0
 8041fde:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( ( ( ( uint64_t )milliseconds ) * CONV_DENOM ) / CONV_NUMER );
 8041fe0:	687b      	ldr	r3, [r7, #4]
 8041fe2:	461a      	mov	r2, r3
 8041fe4:	f04f 0300 	mov.w	r3, #0
 8041fe8:	f04f 0000 	mov.w	r0, #0
 8041fec:	f04f 0100 	mov.w	r1, #0
 8041ff0:	01d9      	lsls	r1, r3, #7
 8041ff2:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 8041ff6:	01d0      	lsls	r0, r2, #7
 8041ff8:	f04f 027d 	mov.w	r2, #125	; 0x7d
 8041ffc:	f04f 0300 	mov.w	r3, #0
 8042000:	f7fe fd08 	bl	8040a14 <__aeabi_uldivmod>
 8042004:	4602      	mov	r2, r0
 8042006:	460b      	mov	r3, r1
 8042008:	4613      	mov	r3, r2
}
 804200a:	4618      	mov	r0, r3
 804200c:	3708      	adds	r7, #8
 804200e:	46bd      	mov	sp, r7
 8042010:	bd80      	pop	{r7, pc}

08042012 <RtcTick2Ms>:
 *
 * \param[IN] time in timer ticks
 * \retval returns time in milliseconds
 */
uint32_t RtcTick2Ms( uint32_t tick )
{
 8042012:	b480      	push	{r7}
 8042014:	b085      	sub	sp, #20
 8042016:	af00      	add	r7, sp, #0
 8042018:	6078      	str	r0, [r7, #4]
    uint32_t seconds = tick >> N_PREDIV_S;
 804201a:	687b      	ldr	r3, [r7, #4]
 804201c:	0a9b      	lsrs	r3, r3, #10
 804201e:	60fb      	str	r3, [r7, #12]

    tick = tick & PREDIV_S;
 8042020:	687b      	ldr	r3, [r7, #4]
 8042022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8042026:	607b      	str	r3, [r7, #4]
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8042028:	68fb      	ldr	r3, [r7, #12]
 804202a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804202e:	fb02 f203 	mul.w	r2, r2, r3
 8042032:	687b      	ldr	r3, [r7, #4]
 8042034:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8042038:	fb01 f303 	mul.w	r3, r1, r3
 804203c:	0a9b      	lsrs	r3, r3, #10
 804203e:	4413      	add	r3, r2
}
 8042040:	4618      	mov	r0, r3
 8042042:	3714      	adds	r7, #20
 8042044:	46bd      	mov	sp, r7
 8042046:	f85d 7b04 	ldr.w	r7, [sp], #4
 804204a:	4770      	bx	lr

0804204c <RtcSetAlarm>:
 * \note The alarm is set at now (read in this function) + timeout
 *
 * \param timeout Duration of the Timer ticks
 */
void RtcSetAlarm( uint32_t timeout )
{
 804204c:	b5b0      	push	{r4, r5, r7, lr}
 804204e:	b082      	sub	sp, #8
 8042050:	af00      	add	r7, sp, #0
 8042052:	6078      	str	r0, [r7, #4]
    // We don't go in Low Power mode for timeout below MIN_ALARM_DELAY
    if( ( int64_t )( MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 8042054:	4b17      	ldr	r3, [pc, #92]	; (80420b4 <RtcSetAlarm+0x68>)
 8042056:	f9b3 3000 	ldrsh.w	r3, [r3]
 804205a:	3303      	adds	r3, #3
 804205c:	461c      	mov	r4, r3
 804205e:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8042062:	f000 f945 	bl	80422f0 <RtcGetTimerElapsedTime>
 8042066:	4602      	mov	r2, r0
 8042068:	687b      	ldr	r3, [r7, #4]
 804206a:	1a9b      	subs	r3, r3, r2
 804206c:	461a      	mov	r2, r3
 804206e:	f04f 0300 	mov.w	r3, #0
 8042072:	4294      	cmp	r4, r2
 8042074:	eb75 0303 	sbcs.w	r3, r5, r3
 8042078:	da04      	bge.n	8042084 <RtcSetAlarm+0x38>
    {
        LpmSetStopMode( LPM_RTC_ID, LPM_ENABLE );
 804207a:	2100      	movs	r1, #0
 804207c:	2004      	movs	r0, #4
 804207e:	f7ff fcd9 	bl	8041a34 <LpmSetStopMode>
 8042082:	e003      	b.n	804208c <RtcSetAlarm+0x40>
    }
    else
    {
        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
 8042084:	2101      	movs	r1, #1
 8042086:	2004      	movs	r0, #4
 8042088:	f7ff fcd4 	bl	8041a34 <LpmSetStopMode>
    }

    // In case stop mode is required
    if( LpmGetMode( ) == LPM_STOP_MODE )
 804208c:	f7ff fd00 	bl	8041a90 <LpmGetMode>
 8042090:	4603      	mov	r3, r0
 8042092:	2b01      	cmp	r3, #1
 8042094:	d106      	bne.n	80420a4 <RtcSetAlarm+0x58>
    {
        timeout = timeout - McuWakeUpTimeCal;
 8042096:	4b07      	ldr	r3, [pc, #28]	; (80420b4 <RtcSetAlarm+0x68>)
 8042098:	f9b3 3000 	ldrsh.w	r3, [r3]
 804209c:	461a      	mov	r2, r3
 804209e:	687b      	ldr	r3, [r7, #4]
 80420a0:	1a9b      	subs	r3, r3, r2
 80420a2:	607b      	str	r3, [r7, #4]
    }

    RtcStartAlarm( timeout );
 80420a4:	6878      	ldr	r0, [r7, #4]
 80420a6:	f000 f817 	bl	80420d8 <RtcStartAlarm>
}
 80420aa:	bf00      	nop
 80420ac:	3708      	adds	r7, #8
 80420ae:	46bd      	mov	sp, r7
 80420b0:	bdb0      	pop	{r4, r5, r7, pc}
 80420b2:	bf00      	nop
 80420b4:	200180d4 	.word	0x200180d4

080420b8 <RtcStopAlarm>:

void RtcStopAlarm( void )
{
 80420b8:	b580      	push	{r7, lr}
 80420ba:	af00      	add	r7, sp, #0
    // Disable the Alarm A interrupt
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 80420bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80420c0:	4803      	ldr	r0, [pc, #12]	; (80420d0 <RtcStopAlarm+0x18>)
 80420c2:	f009 fcfb 	bl	804babc <HAL_RTC_DeactivateAlarm>

    // Clear RTC Alarm Flag
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 80420c6:	4b03      	ldr	r3, [pc, #12]	; (80420d4 <RtcStopAlarm+0x1c>)
 80420c8:	2201      	movs	r2, #1
 80420ca:	65da      	str	r2, [r3, #92]	; 0x5c

    // Clear the EXTI's line Flag for RTC Alarm
//    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
}
 80420cc:	bf00      	nop
 80420ce:	bd80      	pop	{r7, pc}
 80420d0:	200180d8 	.word	0x200180d8
 80420d4:	40002800 	.word	0x40002800

080420d8 <RtcStartAlarm>:

void RtcStartAlarm( uint32_t timeout )
{
 80420d8:	b5b0      	push	{r4, r5, r7, lr}
 80420da:	b08c      	sub	sp, #48	; 0x30
 80420dc:	af00      	add	r7, sp, #0
 80420de:	6078      	str	r0, [r7, #4]
    uint16_t rtcAlarmSubSeconds = 0;
 80420e0:	2300      	movs	r3, #0
 80420e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t rtcAlarmSeconds = 0;
 80420e4:	2300      	movs	r3, #0
 80420e6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t rtcAlarmMinutes = 0;
 80420e8:	2300      	movs	r3, #0
 80420ea:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t rtcAlarmHours = 0;
 80420ec:	2300      	movs	r3, #0
 80420ee:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t rtcAlarmDays = 0;
 80420f0:	2300      	movs	r3, #0
 80420f2:	84fb      	strh	r3, [r7, #38]	; 0x26
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 80420f4:	4b6e      	ldr	r3, [pc, #440]	; (80422b0 <RtcStartAlarm+0x1d8>)
 80420f6:	f107 0410 	add.w	r4, r7, #16
 80420fa:	1d1d      	adds	r5, r3, #4
 80420fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80420fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8042100:	682b      	ldr	r3, [r5, #0]
 8042102:	6023      	str	r3, [r4, #0]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 8042104:	4b6a      	ldr	r3, [pc, #424]	; (80422b0 <RtcStartAlarm+0x1d8>)
 8042106:	699b      	ldr	r3, [r3, #24]
 8042108:	60fb      	str	r3, [r7, #12]

    RtcStopAlarm( );
 804210a:	f7ff ffd5 	bl	80420b8 <RtcStopAlarm>

    /*reverse counter */
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 804210e:	697b      	ldr	r3, [r7, #20]
 8042110:	b29b      	uxth	r3, r3
 8042112:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8042116:	3303      	adds	r3, #3
 8042118:	85fb      	strh	r3, [r7, #46]	; 0x2e
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 804211a:	687b      	ldr	r3, [r7, #4]
 804211c:	b29b      	uxth	r3, r3
 804211e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8042122:	b29a      	uxth	r2, r3
 8042124:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8042126:	4413      	add	r3, r2
 8042128:	85fb      	strh	r3, [r7, #46]	; 0x2e
    // convert timeout  to seconds
    timeout >>= N_PREDIV_S;
 804212a:	687b      	ldr	r3, [r7, #4]
 804212c:	0a9b      	lsrs	r3, r3, #10
 804212e:	607b      	str	r3, [r7, #4]

    // Convert microsecs to RTC format and add to 'Now'
    rtcAlarmDays =  date.Date;
 8042130:	7bbb      	ldrb	r3, [r7, #14]
 8042132:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= SECONDS_IN_1DAY )
 8042134:	e008      	b.n	8042148 <RtcStartAlarm+0x70>
    {
        timeout -= SECONDS_IN_1DAY;
 8042136:	687b      	ldr	r3, [r7, #4]
 8042138:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 804213c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8042140:	607b      	str	r3, [r7, #4]
        rtcAlarmDays++;
 8042142:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042144:	3301      	adds	r3, #1
 8042146:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= SECONDS_IN_1DAY )
 8042148:	687b      	ldr	r3, [r7, #4]
 804214a:	4a5a      	ldr	r2, [pc, #360]	; (80422b4 <RtcStartAlarm+0x1dc>)
 804214c:	4293      	cmp	r3, r2
 804214e:	d8f2      	bhi.n	8042136 <RtcStartAlarm+0x5e>
    }

    // Calc hours
    rtcAlarmHours = time.Hours;
 8042150:	7c3b      	ldrb	r3, [r7, #16]
 8042152:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= SECONDS_IN_1HOUR )
 8042154:	e006      	b.n	8042164 <RtcStartAlarm+0x8c>
    {
        timeout -= SECONDS_IN_1HOUR;
 8042156:	687b      	ldr	r3, [r7, #4]
 8042158:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 804215c:	607b      	str	r3, [r7, #4]
        rtcAlarmHours++;
 804215e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8042160:	3301      	adds	r3, #1
 8042162:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= SECONDS_IN_1HOUR )
 8042164:	687b      	ldr	r3, [r7, #4]
 8042166:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 804216a:	d2f4      	bcs.n	8042156 <RtcStartAlarm+0x7e>
    }

    // Calc minutes
    rtcAlarmMinutes = time.Minutes;
 804216c:	7c7b      	ldrb	r3, [r7, #17]
 804216e:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= SECONDS_IN_1MINUTE )
 8042170:	e005      	b.n	804217e <RtcStartAlarm+0xa6>
    {
        timeout -= SECONDS_IN_1MINUTE;
 8042172:	687b      	ldr	r3, [r7, #4]
 8042174:	3b3c      	subs	r3, #60	; 0x3c
 8042176:	607b      	str	r3, [r7, #4]
        rtcAlarmMinutes++;
 8042178:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 804217a:	3301      	adds	r3, #1
 804217c:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= SECONDS_IN_1MINUTE )
 804217e:	687b      	ldr	r3, [r7, #4]
 8042180:	2b3b      	cmp	r3, #59	; 0x3b
 8042182:	d8f6      	bhi.n	8042172 <RtcStartAlarm+0x9a>
    }

    // Calc seconds
    rtcAlarmSeconds =  time.Seconds + timeout;
 8042184:	7cbb      	ldrb	r3, [r7, #18]
 8042186:	b29a      	uxth	r2, r3
 8042188:	687b      	ldr	r3, [r7, #4]
 804218a:	b29b      	uxth	r3, r3
 804218c:	4413      	add	r3, r2
 804218e:	85bb      	strh	r3, [r7, #44]	; 0x2c

    //***** Correct for modulo********
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8042190:	e006      	b.n	80421a0 <RtcStartAlarm+0xc8>
    {
        rtcAlarmSubSeconds -= ( PREDIV_S + 1 );
 8042192:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8042194:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8042198:	85fb      	strh	r3, [r7, #46]	; 0x2e
        rtcAlarmSeconds++;
 804219a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 804219c:	3301      	adds	r3, #1
 804219e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 80421a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80421a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80421a6:	d2f4      	bcs.n	8042192 <RtcStartAlarm+0xba>
    }

    while( rtcAlarmSeconds >= SECONDS_IN_1MINUTE )
 80421a8:	e005      	b.n	80421b6 <RtcStartAlarm+0xde>
    {
        rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80421aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80421ac:	3b3c      	subs	r3, #60	; 0x3c
 80421ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
        rtcAlarmMinutes++;
 80421b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80421b2:	3301      	adds	r3, #1
 80421b4:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( rtcAlarmSeconds >= SECONDS_IN_1MINUTE )
 80421b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80421b8:	2b3b      	cmp	r3, #59	; 0x3b
 80421ba:	d8f6      	bhi.n	80421aa <RtcStartAlarm+0xd2>
    }

    while( rtcAlarmMinutes >= MINUTES_IN_1HOUR )
 80421bc:	e005      	b.n	80421ca <RtcStartAlarm+0xf2>
    {
        rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80421be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80421c0:	3b3c      	subs	r3, #60	; 0x3c
 80421c2:	857b      	strh	r3, [r7, #42]	; 0x2a
        rtcAlarmHours++;
 80421c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80421c6:	3301      	adds	r3, #1
 80421c8:	853b      	strh	r3, [r7, #40]	; 0x28
    while( rtcAlarmMinutes >= MINUTES_IN_1HOUR )
 80421ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80421cc:	2b3b      	cmp	r3, #59	; 0x3b
 80421ce:	d8f6      	bhi.n	80421be <RtcStartAlarm+0xe6>
    }

    while( rtcAlarmHours >= HOURS_IN_1DAY )
 80421d0:	e005      	b.n	80421de <RtcStartAlarm+0x106>
    {
        rtcAlarmHours -= HOURS_IN_1DAY;
 80421d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80421d4:	3b18      	subs	r3, #24
 80421d6:	853b      	strh	r3, [r7, #40]	; 0x28
        rtcAlarmDays++;
 80421d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80421da:	3301      	adds	r3, #1
 80421dc:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( rtcAlarmHours >= HOURS_IN_1DAY )
 80421de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80421e0:	2b17      	cmp	r3, #23
 80421e2:	d8f6      	bhi.n	80421d2 <RtcStartAlarm+0xfa>
    }

    if( date.Year % 4 == 0 )
 80421e4:	7bfb      	ldrb	r3, [r7, #15]
 80421e6:	f003 0303 	and.w	r3, r3, #3
 80421ea:	b2db      	uxtb	r3, r3
 80421ec:	2b00      	cmp	r3, #0
 80421ee:	d113      	bne.n	8042218 <RtcStartAlarm+0x140>
    {
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 80421f0:	7b7b      	ldrb	r3, [r7, #13]
 80421f2:	3b01      	subs	r3, #1
 80421f4:	4a30      	ldr	r2, [pc, #192]	; (80422b8 <RtcStartAlarm+0x1e0>)
 80421f6:	5cd3      	ldrb	r3, [r2, r3]
 80421f8:	b29b      	uxth	r3, r3
 80421fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80421fc:	429a      	cmp	r2, r3
 80421fe:	d91e      	bls.n	804223e <RtcStartAlarm+0x166>
        {
            rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[date.Month - 1];
 8042200:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8042202:	7b7a      	ldrb	r2, [r7, #13]
 8042204:	3a01      	subs	r2, #1
 8042206:	492c      	ldr	r1, [pc, #176]	; (80422b8 <RtcStartAlarm+0x1e0>)
 8042208:	5c8a      	ldrb	r2, [r1, r2]
 804220a:	fb93 f1f2 	sdiv	r1, r3, r2
 804220e:	fb02 f201 	mul.w	r2, r2, r1
 8042212:	1a9b      	subs	r3, r3, r2
 8042214:	84fb      	strh	r3, [r7, #38]	; 0x26
 8042216:	e012      	b.n	804223e <RtcStartAlarm+0x166>
        }
    }
    else
    {
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 8042218:	7b7b      	ldrb	r3, [r7, #13]
 804221a:	3b01      	subs	r3, #1
 804221c:	4a27      	ldr	r2, [pc, #156]	; (80422bc <RtcStartAlarm+0x1e4>)
 804221e:	5cd3      	ldrb	r3, [r2, r3]
 8042220:	b29b      	uxth	r3, r3
 8042222:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8042224:	429a      	cmp	r2, r3
 8042226:	d90a      	bls.n	804223e <RtcStartAlarm+0x166>
        {
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 8042228:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804222a:	7b7a      	ldrb	r2, [r7, #13]
 804222c:	3a01      	subs	r2, #1
 804222e:	4923      	ldr	r1, [pc, #140]	; (80422bc <RtcStartAlarm+0x1e4>)
 8042230:	5c8a      	ldrb	r2, [r1, r2]
 8042232:	fb93 f1f2 	sdiv	r1, r3, r2
 8042236:	fb02 f201 	mul.w	r2, r2, r1
 804223a:	1a9b      	subs	r3, r3, r2
 804223c:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    }

    /* Set RTC_AlarmStructure with calculated values*/
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 804223e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8042240:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8042244:	3303      	adds	r3, #3
 8042246:	461a      	mov	r2, r3
 8042248:	4b1d      	ldr	r3, [pc, #116]	; (80422c0 <RtcStartAlarm+0x1e8>)
 804224a:	605a      	str	r2, [r3, #4]
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK;
 804224c:	4b1c      	ldr	r3, [pc, #112]	; (80422c0 <RtcStartAlarm+0x1e8>)
 804224e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8042252:	619a      	str	r2, [r3, #24]
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 8042254:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8042256:	b2da      	uxtb	r2, r3
 8042258:	4b19      	ldr	r3, [pc, #100]	; (80422c0 <RtcStartAlarm+0x1e8>)
 804225a:	709a      	strb	r2, [r3, #2]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 804225c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 804225e:	b2da      	uxtb	r2, r3
 8042260:	4b17      	ldr	r3, [pc, #92]	; (80422c0 <RtcStartAlarm+0x1e8>)
 8042262:	705a      	strb	r2, [r3, #1]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 8042264:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8042266:	b2da      	uxtb	r2, r3
 8042268:	4b15      	ldr	r3, [pc, #84]	; (80422c0 <RtcStartAlarm+0x1e8>)
 804226a:	701a      	strb	r2, [r3, #0]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 804226c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 804226e:	b2da      	uxtb	r2, r3
 8042270:	4b13      	ldr	r3, [pc, #76]	; (80422c0 <RtcStartAlarm+0x1e8>)
 8042272:	f883 2020 	strb.w	r2, [r3, #32]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 8042276:	7cfa      	ldrb	r2, [r7, #19]
 8042278:	4b11      	ldr	r3, [pc, #68]	; (80422c0 <RtcStartAlarm+0x1e8>)
 804227a:	70da      	strb	r2, [r3, #3]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE;
 804227c:	4b10      	ldr	r3, [pc, #64]	; (80422c0 <RtcStartAlarm+0x1e8>)
 804227e:	2200      	movs	r2, #0
 8042280:	61da      	str	r2, [r3, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 8042282:	4b0f      	ldr	r3, [pc, #60]	; (80422c0 <RtcStartAlarm+0x1e8>)
 8042284:	2200      	movs	r2, #0
 8042286:	615a      	str	r2, [r3, #20]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 8042288:	4b0d      	ldr	r3, [pc, #52]	; (80422c0 <RtcStartAlarm+0x1e8>)
 804228a:	f44f 7280 	mov.w	r2, #256	; 0x100
 804228e:	625a      	str	r2, [r3, #36]	; 0x24
    RtcAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8042290:	4b0b      	ldr	r3, [pc, #44]	; (80422c0 <RtcStartAlarm+0x1e8>)
 8042292:	2200      	movs	r2, #0
 8042294:	60da      	str	r2, [r3, #12]
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8042296:	4b0a      	ldr	r3, [pc, #40]	; (80422c0 <RtcStartAlarm+0x1e8>)
 8042298:	2200      	movs	r2, #0
 804229a:	611a      	str	r2, [r3, #16]

    // Set RTC_Alarm
    HAL_RTC_SetAlarm_IT( &RtcHandle, &RtcAlarm, RTC_FORMAT_BIN );
 804229c:	2200      	movs	r2, #0
 804229e:	4908      	ldr	r1, [pc, #32]	; (80422c0 <RtcStartAlarm+0x1e8>)
 80422a0:	4808      	ldr	r0, [pc, #32]	; (80422c4 <RtcStartAlarm+0x1ec>)
 80422a2:	f009 fb41 	bl	804b928 <HAL_RTC_SetAlarm_IT>
}
 80422a6:	bf00      	nop
 80422a8:	3730      	adds	r7, #48	; 0x30
 80422aa:	46bd      	mov	sp, r7
 80422ac:	bdb0      	pop	{r4, r5, r7, pc}
 80422ae:	bf00      	nop
 80422b0:	20018174 	.word	0x20018174
 80422b4:	0001517f 	.word	0x0001517f
 80422b8:	0804e810 	.word	0x0804e810
 80422bc:	0804e804 	.word	0x0804e804
 80422c0:	2001814c 	.word	0x2001814c
 80422c4:	200180d8 	.word	0x200180d8

080422c8 <RtcGetTimerValue>:

uint32_t RtcGetTimerValue( void )
{
 80422c8:	b580      	push	{r7, lr}
 80422ca:	b088      	sub	sp, #32
 80422cc:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;

    uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 80422ce:	f107 0208 	add.w	r2, r7, #8
 80422d2:	1d3b      	adds	r3, r7, #4
 80422d4:	4611      	mov	r1, r2
 80422d6:	4618      	mov	r0, r3
 80422d8:	f000 f822 	bl	8042320 <RtcGetCalendarValue>
 80422dc:	4602      	mov	r2, r0
 80422de:	460b      	mov	r3, r1
 80422e0:	4613      	mov	r3, r2
 80422e2:	61fb      	str	r3, [r7, #28]

    return( calendarValue );
 80422e4:	69fb      	ldr	r3, [r7, #28]
}
 80422e6:	4618      	mov	r0, r3
 80422e8:	3720      	adds	r7, #32
 80422ea:	46bd      	mov	sp, r7
 80422ec:	bd80      	pop	{r7, pc}
	...

080422f0 <RtcGetTimerElapsedTime>:

uint32_t RtcGetTimerElapsedTime( void )
{
 80422f0:	b580      	push	{r7, lr}
 80422f2:	b088      	sub	sp, #32
 80422f4:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;

  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 80422f6:	f107 0208 	add.w	r2, r7, #8
 80422fa:	1d3b      	adds	r3, r7, #4
 80422fc:	4611      	mov	r1, r2
 80422fe:	4618      	mov	r0, r3
 8042300:	f000 f80e 	bl	8042320 <RtcGetCalendarValue>
 8042304:	4602      	mov	r2, r0
 8042306:	460b      	mov	r3, r1
 8042308:	4613      	mov	r3, r2
 804230a:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 804230c:	4b03      	ldr	r3, [pc, #12]	; (804231c <RtcGetTimerElapsedTime+0x2c>)
 804230e:	681b      	ldr	r3, [r3, #0]
 8042310:	69fa      	ldr	r2, [r7, #28]
 8042312:	1ad3      	subs	r3, r2, r3
}
 8042314:	4618      	mov	r0, r3
 8042316:	3720      	adds	r7, #32
 8042318:	46bd      	mov	sp, r7
 804231a:	bd80      	pop	{r7, pc}
 804231c:	20018174 	.word	0x20018174

08042320 <RtcGetCalendarValue>:
{
    return McuWakeUpTimeCal;
}

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 8042320:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8042324:	b088      	sub	sp, #32
 8042326:	af00      	add	r7, sp, #0
 8042328:	6078      	str	r0, [r7, #4]
 804232a:	6039      	str	r1, [r7, #0]
    uint64_t calendarValue = 0;
 804232c:	f04f 0200 	mov.w	r2, #0
 8042330:	f04f 0300 	mov.w	r3, #0
 8042334:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 8042338:	4b3f      	ldr	r3, [pc, #252]	; (8042438 <RtcGetCalendarValue+0x118>)
 804233a:	689b      	ldr	r3, [r3, #8]
 804233c:	617b      	str	r3, [r7, #20]
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 804233e:	2200      	movs	r2, #0
 8042340:	6879      	ldr	r1, [r7, #4]
 8042342:	483e      	ldr	r0, [pc, #248]	; (804243c <RtcGetCalendarValue+0x11c>)
 8042344:	f009 faa2 	bl	804b88c <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &RtcHandle, time, RTC_FORMAT_BIN );
 8042348:	2200      	movs	r2, #0
 804234a:	6839      	ldr	r1, [r7, #0]
 804234c:	483b      	ldr	r0, [pc, #236]	; (804243c <RtcGetCalendarValue+0x11c>)
 804234e:	f009 fa41 	bl	804b7d4 <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 8042352:	4b39      	ldr	r3, [pc, #228]	; (8042438 <RtcGetCalendarValue+0x118>)
 8042354:	689b      	ldr	r3, [r3, #8]
 8042356:	697a      	ldr	r2, [r7, #20]
 8042358:	429a      	cmp	r2, r3
 804235a:	d1ed      	bne.n	8042338 <RtcGetCalendarValue+0x18>

    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 804235c:	687b      	ldr	r3, [r7, #4]
 804235e:	78db      	ldrb	r3, [r3, #3]
 8042360:	461a      	mov	r2, r3
 8042362:	f240 53b5 	movw	r3, #1461	; 0x5b5
 8042366:	fb03 f302 	mul.w	r3, r3, r2
 804236a:	3303      	adds	r3, #3
 804236c:	089b      	lsrs	r3, r3, #2
 804236e:	613b      	str	r3, [r7, #16]

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 8042370:	687b      	ldr	r3, [r7, #4]
 8042372:	78db      	ldrb	r3, [r3, #3]
 8042374:	f003 0303 	and.w	r3, r3, #3
 8042378:	b2db      	uxtb	r3, r3
 804237a:	2b00      	cmp	r3, #0
 804237c:	d101      	bne.n	8042382 <RtcGetCalendarValue+0x62>
 804237e:	4b30      	ldr	r3, [pc, #192]	; (8042440 <RtcGetCalendarValue+0x120>)
 8042380:	e000      	b.n	8042384 <RtcGetCalendarValue+0x64>
 8042382:	4b30      	ldr	r3, [pc, #192]	; (8042444 <RtcGetCalendarValue+0x124>)
 8042384:	60fb      	str	r3, [r7, #12]

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8042386:	687b      	ldr	r3, [r7, #4]
 8042388:	785b      	ldrb	r3, [r3, #1]
 804238a:	1e5a      	subs	r2, r3, #1
 804238c:	4613      	mov	r3, r2
 804238e:	011b      	lsls	r3, r3, #4
 8042390:	1a9b      	subs	r3, r3, r2
 8042392:	009b      	lsls	r3, r3, #2
 8042394:	4413      	add	r3, r2
 8042396:	3301      	adds	r3, #1
 8042398:	0fda      	lsrs	r2, r3, #31
 804239a:	4413      	add	r3, r2
 804239c:	105b      	asrs	r3, r3, #1
 804239e:	4619      	mov	r1, r3
 80423a0:	687b      	ldr	r3, [r7, #4]
 80423a2:	785b      	ldrb	r3, [r3, #1]
 80423a4:	3b01      	subs	r3, #1
 80423a6:	005b      	lsls	r3, r3, #1
 80423a8:	68fa      	ldr	r2, [r7, #12]
 80423aa:	fa22 f303 	lsr.w	r3, r2, r3
 80423ae:	f003 0303 	and.w	r3, r3, #3
 80423b2:	1acb      	subs	r3, r1, r3
 80423b4:	693a      	ldr	r2, [r7, #16]
 80423b6:	4413      	add	r3, r2
 80423b8:	613b      	str	r3, [r7, #16]

    seconds += ( date->Date -1 );
 80423ba:	687b      	ldr	r3, [r7, #4]
 80423bc:	789b      	ldrb	r3, [r3, #2]
 80423be:	461a      	mov	r2, r3
 80423c0:	693b      	ldr	r3, [r7, #16]
 80423c2:	4413      	add	r3, r2
 80423c4:	3b01      	subs	r3, #1
 80423c6:	613b      	str	r3, [r7, #16]

    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;
 80423c8:	693b      	ldr	r3, [r7, #16]
 80423ca:	4a1f      	ldr	r2, [pc, #124]	; (8042448 <RtcGetCalendarValue+0x128>)
 80423cc:	fb02 f303 	mul.w	r3, r2, r3
 80423d0:	613b      	str	r3, [r7, #16]

    seconds += ( ( uint32_t )time->Seconds +
 80423d2:	683b      	ldr	r3, [r7, #0]
 80423d4:	789b      	ldrb	r3, [r3, #2]
 80423d6:	4618      	mov	r0, r3
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 80423d8:	683b      	ldr	r3, [r7, #0]
 80423da:	781b      	ldrb	r3, [r3, #0]
 80423dc:	461a      	mov	r2, r3
 80423de:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80423e2:	fb03 f202 	mul.w	r2, r3, r2
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 80423e6:	683b      	ldr	r3, [r7, #0]
 80423e8:	785b      	ldrb	r3, [r3, #1]
 80423ea:	4619      	mov	r1, r3
 80423ec:	460b      	mov	r3, r1
 80423ee:	011b      	lsls	r3, r3, #4
 80423f0:	1a5b      	subs	r3, r3, r1
 80423f2:	009b      	lsls	r3, r3, #2
 80423f4:	4413      	add	r3, r2
 80423f6:	4403      	add	r3, r0
    seconds += ( ( uint32_t )time->Seconds +
 80423f8:	693a      	ldr	r2, [r7, #16]
 80423fa:	4413      	add	r3, r2
 80423fc:	613b      	str	r3, [r7, #16]

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 80423fe:	693b      	ldr	r3, [r7, #16]
 8042400:	461a      	mov	r2, r3
 8042402:	f04f 0300 	mov.w	r3, #0
 8042406:	0d95      	lsrs	r5, r2, #22
 8042408:	0294      	lsls	r4, r2, #10
 804240a:	683b      	ldr	r3, [r7, #0]
 804240c:	685b      	ldr	r3, [r3, #4]
 804240e:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8042412:	3303      	adds	r3, #3
 8042414:	461a      	mov	r2, r3
 8042416:	f04f 0300 	mov.w	r3, #0
 804241a:	eb14 0802 	adds.w	r8, r4, r2
 804241e:	eb45 0903 	adc.w	r9, r5, r3
 8042422:	e9c7 8906 	strd	r8, r9, [r7, #24]

    return( calendarValue );
 8042426:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 804242a:	4610      	mov	r0, r2
 804242c:	4619      	mov	r1, r3
 804242e:	3720      	adds	r7, #32
 8042430:	46bd      	mov	sp, r7
 8042432:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8042436:	bf00      	nop
 8042438:	40002800 	.word	0x40002800
 804243c:	200180d8 	.word	0x200180d8
 8042440:	00445550 	.word	0x00445550
 8042444:	0099aaa0 	.word	0x0099aaa0
 8042448:	00015180 	.word	0x00015180

0804244c <HAL_RTC_AlarmAEventCallback>:
 * \brief  Alarm A callback.
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
 804244c:	b580      	push	{r7, lr}
 804244e:	b082      	sub	sp, #8
 8042450:	af00      	add	r7, sp, #0
 8042452:	6078      	str	r0, [r7, #4]
    TimerIrqHandler( );
 8042454:	f000 fe78 	bl	8043148 <TimerIrqHandler>
}
 8042458:	bf00      	nop
 804245a:	3708      	adds	r7, #8
 804245c:	46bd      	mov	sp, r7
 804245e:	bd80      	pop	{r7, pc}

08042460 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8042460:	b580      	push	{r7, lr}
 8042462:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8042464:	4b1b      	ldr	r3, [pc, #108]	; (80424d4 <MX_SPI1_Init+0x74>)
 8042466:	4a1c      	ldr	r2, [pc, #112]	; (80424d8 <MX_SPI1_Init+0x78>)
 8042468:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 804246a:	4b1a      	ldr	r3, [pc, #104]	; (80424d4 <MX_SPI1_Init+0x74>)
 804246c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8042470:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8042472:	4b18      	ldr	r3, [pc, #96]	; (80424d4 <MX_SPI1_Init+0x74>)
 8042474:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8042478:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 804247a:	4b16      	ldr	r3, [pc, #88]	; (80424d4 <MX_SPI1_Init+0x74>)
 804247c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8042480:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8042482:	4b14      	ldr	r3, [pc, #80]	; (80424d4 <MX_SPI1_Init+0x74>)
 8042484:	2200      	movs	r2, #0
 8042486:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8042488:	4b12      	ldr	r3, [pc, #72]	; (80424d4 <MX_SPI1_Init+0x74>)
 804248a:	2200      	movs	r2, #0
 804248c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 804248e:	4b11      	ldr	r3, [pc, #68]	; (80424d4 <MX_SPI1_Init+0x74>)
 8042490:	f44f 7200 	mov.w	r2, #512	; 0x200
 8042494:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8042496:	4b0f      	ldr	r3, [pc, #60]	; (80424d4 <MX_SPI1_Init+0x74>)
 8042498:	2208      	movs	r2, #8
 804249a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 804249c:	4b0d      	ldr	r3, [pc, #52]	; (80424d4 <MX_SPI1_Init+0x74>)
 804249e:	2200      	movs	r2, #0
 80424a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80424a2:	4b0c      	ldr	r3, [pc, #48]	; (80424d4 <MX_SPI1_Init+0x74>)
 80424a4:	2200      	movs	r2, #0
 80424a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80424a8:	4b0a      	ldr	r3, [pc, #40]	; (80424d4 <MX_SPI1_Init+0x74>)
 80424aa:	2200      	movs	r2, #0
 80424ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80424ae:	4b09      	ldr	r3, [pc, #36]	; (80424d4 <MX_SPI1_Init+0x74>)
 80424b0:	2207      	movs	r2, #7
 80424b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80424b4:	4b07      	ldr	r3, [pc, #28]	; (80424d4 <MX_SPI1_Init+0x74>)
 80424b6:	2200      	movs	r2, #0
 80424b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80424ba:	4b06      	ldr	r3, [pc, #24]	; (80424d4 <MX_SPI1_Init+0x74>)
 80424bc:	2200      	movs	r2, #0
 80424be:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80424c0:	4804      	ldr	r0, [pc, #16]	; (80424d4 <MX_SPI1_Init+0x74>)
 80424c2:	f009 fe21 	bl	804c108 <HAL_SPI_Init>
 80424c6:	4603      	mov	r3, r0
 80424c8:	2b00      	cmp	r3, #0
 80424ca:	d001      	beq.n	80424d0 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80424cc:	f7ff fc14 	bl	8041cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80424d0:	bf00      	nop
 80424d2:	bd80      	pop	{r7, pc}
 80424d4:	20019108 	.word	0x20019108
 80424d8:	40013000 	.word	0x40013000

080424dc <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80424dc:	b580      	push	{r7, lr}
 80424de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80424e0:	4b1b      	ldr	r3, [pc, #108]	; (8042550 <MX_SPI3_Init+0x74>)
 80424e2:	4a1c      	ldr	r2, [pc, #112]	; (8042554 <MX_SPI3_Init+0x78>)
 80424e4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80424e6:	4b1a      	ldr	r3, [pc, #104]	; (8042550 <MX_SPI3_Init+0x74>)
 80424e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80424ec:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80424ee:	4b18      	ldr	r3, [pc, #96]	; (8042550 <MX_SPI3_Init+0x74>)
 80424f0:	2200      	movs	r2, #0
 80424f2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80424f4:	4b16      	ldr	r3, [pc, #88]	; (8042550 <MX_SPI3_Init+0x74>)
 80424f6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80424fa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80424fc:	4b14      	ldr	r3, [pc, #80]	; (8042550 <MX_SPI3_Init+0x74>)
 80424fe:	2200      	movs	r2, #0
 8042500:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8042502:	4b13      	ldr	r3, [pc, #76]	; (8042550 <MX_SPI3_Init+0x74>)
 8042504:	2200      	movs	r2, #0
 8042506:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8042508:	4b11      	ldr	r3, [pc, #68]	; (8042550 <MX_SPI3_Init+0x74>)
 804250a:	f44f 7200 	mov.w	r2, #512	; 0x200
 804250e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8042510:	4b0f      	ldr	r3, [pc, #60]	; (8042550 <MX_SPI3_Init+0x74>)
 8042512:	2208      	movs	r2, #8
 8042514:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8042516:	4b0e      	ldr	r3, [pc, #56]	; (8042550 <MX_SPI3_Init+0x74>)
 8042518:	2200      	movs	r2, #0
 804251a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 804251c:	4b0c      	ldr	r3, [pc, #48]	; (8042550 <MX_SPI3_Init+0x74>)
 804251e:	2200      	movs	r2, #0
 8042520:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8042522:	4b0b      	ldr	r3, [pc, #44]	; (8042550 <MX_SPI3_Init+0x74>)
 8042524:	2200      	movs	r2, #0
 8042526:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8042528:	4b09      	ldr	r3, [pc, #36]	; (8042550 <MX_SPI3_Init+0x74>)
 804252a:	2207      	movs	r2, #7
 804252c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 804252e:	4b08      	ldr	r3, [pc, #32]	; (8042550 <MX_SPI3_Init+0x74>)
 8042530:	2200      	movs	r2, #0
 8042532:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8042534:	4b06      	ldr	r3, [pc, #24]	; (8042550 <MX_SPI3_Init+0x74>)
 8042536:	2200      	movs	r2, #0
 8042538:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 804253a:	4805      	ldr	r0, [pc, #20]	; (8042550 <MX_SPI3_Init+0x74>)
 804253c:	f009 fde4 	bl	804c108 <HAL_SPI_Init>
 8042540:	4603      	mov	r3, r0
 8042542:	2b00      	cmp	r3, #0
 8042544:	d001      	beq.n	804254a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8042546:	f7ff fbd7 	bl	8041cf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 804254a:	bf00      	nop
 804254c:	bd80      	pop	{r7, pc}
 804254e:	bf00      	nop
 8042550:	2001907c 	.word	0x2001907c
 8042554:	40003c00 	.word	0x40003c00

08042558 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8042558:	b580      	push	{r7, lr}
 804255a:	b08c      	sub	sp, #48	; 0x30
 804255c:	af00      	add	r7, sp, #0
 804255e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8042560:	f107 031c 	add.w	r3, r7, #28
 8042564:	2200      	movs	r2, #0
 8042566:	601a      	str	r2, [r3, #0]
 8042568:	605a      	str	r2, [r3, #4]
 804256a:	609a      	str	r2, [r3, #8]
 804256c:	60da      	str	r2, [r3, #12]
 804256e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8042570:	687b      	ldr	r3, [r7, #4]
 8042572:	681b      	ldr	r3, [r3, #0]
 8042574:	4a36      	ldr	r2, [pc, #216]	; (8042650 <HAL_SPI_MspInit+0xf8>)
 8042576:	4293      	cmp	r3, r2
 8042578:	d130      	bne.n	80425dc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 804257a:	4b36      	ldr	r3, [pc, #216]	; (8042654 <HAL_SPI_MspInit+0xfc>)
 804257c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804257e:	4a35      	ldr	r2, [pc, #212]	; (8042654 <HAL_SPI_MspInit+0xfc>)
 8042580:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8042584:	6613      	str	r3, [r2, #96]	; 0x60
 8042586:	4b33      	ldr	r3, [pc, #204]	; (8042654 <HAL_SPI_MspInit+0xfc>)
 8042588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804258a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804258e:	61bb      	str	r3, [r7, #24]
 8042590:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8042592:	4b30      	ldr	r3, [pc, #192]	; (8042654 <HAL_SPI_MspInit+0xfc>)
 8042594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042596:	4a2f      	ldr	r2, [pc, #188]	; (8042654 <HAL_SPI_MspInit+0xfc>)
 8042598:	f043 0301 	orr.w	r3, r3, #1
 804259c:	64d3      	str	r3, [r2, #76]	; 0x4c
 804259e:	4b2d      	ldr	r3, [pc, #180]	; (8042654 <HAL_SPI_MspInit+0xfc>)
 80425a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80425a2:	f003 0301 	and.w	r3, r3, #1
 80425a6:	617b      	str	r3, [r7, #20]
 80425a8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = CURRENT_SCK_Pin|CURRENT_MISO_Pin;
 80425aa:	2360      	movs	r3, #96	; 0x60
 80425ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80425ae:	2302      	movs	r3, #2
 80425b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80425b2:	2300      	movs	r3, #0
 80425b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80425b6:	2300      	movs	r3, #0
 80425b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80425ba:	2305      	movs	r3, #5
 80425bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80425be:	f107 031c 	add.w	r3, r7, #28
 80425c2:	4619      	mov	r1, r3
 80425c4:	4824      	ldr	r0, [pc, #144]	; (8042658 <HAL_SPI_MspInit+0x100>)
 80425c6:	f006 fa11 	bl	80489ec <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80425ca:	2200      	movs	r2, #0
 80425cc:	2100      	movs	r1, #0
 80425ce:	203b      	movs	r0, #59	; 0x3b
 80425d0:	f005 fed2 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80425d4:	203b      	movs	r0, #59	; 0x3b
 80425d6:	f005 fee9 	bl	80483ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80425da:	e035      	b.n	8042648 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI3)
 80425dc:	687b      	ldr	r3, [r7, #4]
 80425de:	681b      	ldr	r3, [r3, #0]
 80425e0:	4a1e      	ldr	r2, [pc, #120]	; (804265c <HAL_SPI_MspInit+0x104>)
 80425e2:	4293      	cmp	r3, r2
 80425e4:	d130      	bne.n	8042648 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80425e6:	4b1b      	ldr	r3, [pc, #108]	; (8042654 <HAL_SPI_MspInit+0xfc>)
 80425e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80425ea:	4a1a      	ldr	r2, [pc, #104]	; (8042654 <HAL_SPI_MspInit+0xfc>)
 80425ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80425f0:	6593      	str	r3, [r2, #88]	; 0x58
 80425f2:	4b18      	ldr	r3, [pc, #96]	; (8042654 <HAL_SPI_MspInit+0xfc>)
 80425f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80425f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80425fa:	613b      	str	r3, [r7, #16]
 80425fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80425fe:	4b15      	ldr	r3, [pc, #84]	; (8042654 <HAL_SPI_MspInit+0xfc>)
 8042600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042602:	4a14      	ldr	r2, [pc, #80]	; (8042654 <HAL_SPI_MspInit+0xfc>)
 8042604:	f043 0304 	orr.w	r3, r3, #4
 8042608:	64d3      	str	r3, [r2, #76]	; 0x4c
 804260a:	4b12      	ldr	r3, [pc, #72]	; (8042654 <HAL_SPI_MspInit+0xfc>)
 804260c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804260e:	f003 0304 	and.w	r3, r3, #4
 8042612:	60fb      	str	r3, [r7, #12]
 8042614:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8042616:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 804261a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804261c:	2302      	movs	r3, #2
 804261e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8042620:	2300      	movs	r3, #0
 8042622:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8042624:	2300      	movs	r3, #0
 8042626:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8042628:	2306      	movs	r3, #6
 804262a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804262c:	f107 031c 	add.w	r3, r7, #28
 8042630:	4619      	mov	r1, r3
 8042632:	480b      	ldr	r0, [pc, #44]	; (8042660 <HAL_SPI_MspInit+0x108>)
 8042634:	f006 f9da 	bl	80489ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8042638:	2200      	movs	r2, #0
 804263a:	2100      	movs	r1, #0
 804263c:	2063      	movs	r0, #99	; 0x63
 804263e:	f005 fe9b 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8042642:	2063      	movs	r0, #99	; 0x63
 8042644:	f005 feb2 	bl	80483ac <HAL_NVIC_EnableIRQ>
}
 8042648:	bf00      	nop
 804264a:	3730      	adds	r7, #48	; 0x30
 804264c:	46bd      	mov	sp, r7
 804264e:	bd80      	pop	{r7, pc}
 8042650:	40013000 	.word	0x40013000
 8042654:	40021000 	.word	0x40021000
 8042658:	42020000 	.word	0x42020000
 804265c:	40003c00 	.word	0x40003c00
 8042660:	42020800 	.word	0x42020800

08042664 <SpiInit>:
static SPI_HandleTypeDef SpiHandle[3];

void SpiInit( Spi_t *obj, SpiId_t spiId, void* mosiPort, uint16_t mosiPin,
		void* misoPort, uint16_t misoPin, void* sclkPort, uint16_t sclkPin,
		void* nssPort, uint16_t nssPin )
{
 8042664:	b580      	push	{r7, lr}
 8042666:	b08c      	sub	sp, #48	; 0x30
 8042668:	af04      	add	r7, sp, #16
 804266a:	60f8      	str	r0, [r7, #12]
 804266c:	607a      	str	r2, [r7, #4]
 804266e:	461a      	mov	r2, r3
 8042670:	460b      	mov	r3, r1
 8042672:	72fb      	strb	r3, [r7, #11]
 8042674:	4613      	mov	r3, r2
 8042676:	813b      	strh	r3, [r7, #8]
    CRITICAL_SECTION_BEGIN( );
 8042678:	f107 031c 	add.w	r3, r7, #28
 804267c:	4618      	mov	r0, r3
 804267e:	f002 fe4d 	bl	804531c <BoardCriticalSectionBegin>

    obj->SpiId = spiId;
 8042682:	68fb      	ldr	r3, [r7, #12]
 8042684:	7afa      	ldrb	r2, [r7, #11]
 8042686:	701a      	strb	r2, [r3, #0]

    if( spiId == SPI_1 )
 8042688:	7afb      	ldrb	r3, [r7, #11]
 804268a:	2b00      	cmp	r3, #0
 804268c:	d157      	bne.n	804273e <SpiInit+0xda>
    {
        __HAL_RCC_SPI1_FORCE_RESET( );
 804268e:	4b94      	ldr	r3, [pc, #592]	; (80428e0 <SpiInit+0x27c>)
 8042690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042692:	4a93      	ldr	r2, [pc, #588]	; (80428e0 <SpiInit+0x27c>)
 8042694:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8042698:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_RCC_SPI1_RELEASE_RESET( );
 804269a:	4b91      	ldr	r3, [pc, #580]	; (80428e0 <SpiInit+0x27c>)
 804269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804269e:	4a90      	ldr	r2, [pc, #576]	; (80428e0 <SpiInit+0x27c>)
 80426a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80426a4:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_RCC_SPI1_CLK_ENABLE( );
 80426a6:	4b8e      	ldr	r3, [pc, #568]	; (80428e0 <SpiInit+0x27c>)
 80426a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80426aa:	4a8d      	ldr	r2, [pc, #564]	; (80428e0 <SpiInit+0x27c>)
 80426ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80426b0:	6613      	str	r3, [r2, #96]	; 0x60
 80426b2:	4b8b      	ldr	r3, [pc, #556]	; (80428e0 <SpiInit+0x27c>)
 80426b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80426b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80426ba:	61bb      	str	r3, [r7, #24]
 80426bc:	69bb      	ldr	r3, [r7, #24]

        SpiHandle[spiId].Instance = ( SPI_TypeDef* )SPI1_BASE;
 80426be:	7afb      	ldrb	r3, [r7, #11]
 80426c0:	4a88      	ldr	r2, [pc, #544]	; (80428e4 <SpiInit+0x280>)
 80426c2:	218c      	movs	r1, #140	; 0x8c
 80426c4:	fb01 f303 	mul.w	r3, r1, r3
 80426c8:	4413      	add	r3, r2
 80426ca:	4a87      	ldr	r2, [pc, #540]	; (80428e8 <SpiInit+0x284>)
 80426cc:	601a      	str	r2, [r3, #0]

        GpioInit( &obj->Mosi, mosiPort, mosiPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 80426ce:	68fb      	ldr	r3, [r7, #12]
 80426d0:	1d18      	adds	r0, r3, #4
 80426d2:	893a      	ldrh	r2, [r7, #8]
 80426d4:	2305      	movs	r3, #5
 80426d6:	9302      	str	r3, [sp, #8]
 80426d8:	2302      	movs	r3, #2
 80426da:	9301      	str	r3, [sp, #4]
 80426dc:	2300      	movs	r3, #0
 80426de:	9300      	str	r3, [sp, #0]
 80426e0:	2302      	movs	r3, #2
 80426e2:	6879      	ldr	r1, [r7, #4]
 80426e4:	f7fe feac 	bl	8041440 <GpioInit>
        GpioInit( &obj->Miso, misoPort, misoPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 80426e8:	68fb      	ldr	r3, [r7, #12]
 80426ea:	f103 0018 	add.w	r0, r3, #24
 80426ee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80426f0:	2305      	movs	r3, #5
 80426f2:	9302      	str	r3, [sp, #8]
 80426f4:	2302      	movs	r3, #2
 80426f6:	9301      	str	r3, [sp, #4]
 80426f8:	2300      	movs	r3, #0
 80426fa:	9300      	str	r3, [sp, #0]
 80426fc:	2302      	movs	r3, #2
 80426fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8042700:	f7fe fe9e 	bl	8041440 <GpioInit>
        GpioInit( &obj->Sclk, sclkPort, sclkPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 8042704:	68fb      	ldr	r3, [r7, #12]
 8042706:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 804270a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 804270c:	2305      	movs	r3, #5
 804270e:	9302      	str	r3, [sp, #8]
 8042710:	2302      	movs	r3, #2
 8042712:	9301      	str	r3, [sp, #4]
 8042714:	2300      	movs	r3, #0
 8042716:	9300      	str	r3, [sp, #0]
 8042718:	2302      	movs	r3, #2
 804271a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 804271c:	f7fe fe90 	bl	8041440 <GpioInit>
        GpioInit( &obj->Nss, nssPort, nssPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI1 );
 8042720:	68fb      	ldr	r3, [r7, #12]
 8042722:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8042726:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8042728:	2305      	movs	r3, #5
 804272a:	9302      	str	r3, [sp, #8]
 804272c:	2301      	movs	r3, #1
 804272e:	9301      	str	r3, [sp, #4]
 8042730:	2300      	movs	r3, #0
 8042732:	9300      	str	r3, [sp, #0]
 8042734:	2302      	movs	r3, #2
 8042736:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8042738:	f7fe fe82 	bl	8041440 <GpioInit>
 804273c:	e0b1      	b.n	80428a2 <SpiInit+0x23e>
    }
    else if( spiId == SPI_2 )
 804273e:	7afb      	ldrb	r3, [r7, #11]
 8042740:	2b01      	cmp	r3, #1
 8042742:	d157      	bne.n	80427f4 <SpiInit+0x190>
    {
        __HAL_RCC_SPI2_FORCE_RESET( );
 8042744:	4b66      	ldr	r3, [pc, #408]	; (80428e0 <SpiInit+0x27c>)
 8042746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042748:	4a65      	ldr	r2, [pc, #404]	; (80428e0 <SpiInit+0x27c>)
 804274a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804274e:	6393      	str	r3, [r2, #56]	; 0x38
        __HAL_RCC_SPI2_RELEASE_RESET( );
 8042750:	4b63      	ldr	r3, [pc, #396]	; (80428e0 <SpiInit+0x27c>)
 8042752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042754:	4a62      	ldr	r2, [pc, #392]	; (80428e0 <SpiInit+0x27c>)
 8042756:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 804275a:	6393      	str	r3, [r2, #56]	; 0x38
        __HAL_RCC_SPI2_CLK_ENABLE( );
 804275c:	4b60      	ldr	r3, [pc, #384]	; (80428e0 <SpiInit+0x27c>)
 804275e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042760:	4a5f      	ldr	r2, [pc, #380]	; (80428e0 <SpiInit+0x27c>)
 8042762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8042766:	6593      	str	r3, [r2, #88]	; 0x58
 8042768:	4b5d      	ldr	r3, [pc, #372]	; (80428e0 <SpiInit+0x27c>)
 804276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804276c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8042770:	617b      	str	r3, [r7, #20]
 8042772:	697b      	ldr	r3, [r7, #20]

        SpiHandle[spiId].Instance = ( SPI_TypeDef* )SPI2_BASE;
 8042774:	7afb      	ldrb	r3, [r7, #11]
 8042776:	4a5b      	ldr	r2, [pc, #364]	; (80428e4 <SpiInit+0x280>)
 8042778:	218c      	movs	r1, #140	; 0x8c
 804277a:	fb01 f303 	mul.w	r3, r1, r3
 804277e:	4413      	add	r3, r2
 8042780:	4a5a      	ldr	r2, [pc, #360]	; (80428ec <SpiInit+0x288>)
 8042782:	601a      	str	r2, [r3, #0]

        GpioInit( &obj->Mosi, mosiPort, mosiPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 8042784:	68fb      	ldr	r3, [r7, #12]
 8042786:	1d18      	adds	r0, r3, #4
 8042788:	893a      	ldrh	r2, [r7, #8]
 804278a:	2305      	movs	r3, #5
 804278c:	9302      	str	r3, [sp, #8]
 804278e:	2302      	movs	r3, #2
 8042790:	9301      	str	r3, [sp, #4]
 8042792:	2300      	movs	r3, #0
 8042794:	9300      	str	r3, [sp, #0]
 8042796:	2302      	movs	r3, #2
 8042798:	6879      	ldr	r1, [r7, #4]
 804279a:	f7fe fe51 	bl	8041440 <GpioInit>
                GpioInit( &obj->Miso, misoPort, misoPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 804279e:	68fb      	ldr	r3, [r7, #12]
 80427a0:	f103 0018 	add.w	r0, r3, #24
 80427a4:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80427a6:	2305      	movs	r3, #5
 80427a8:	9302      	str	r3, [sp, #8]
 80427aa:	2302      	movs	r3, #2
 80427ac:	9301      	str	r3, [sp, #4]
 80427ae:	2300      	movs	r3, #0
 80427b0:	9300      	str	r3, [sp, #0]
 80427b2:	2302      	movs	r3, #2
 80427b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80427b6:	f7fe fe43 	bl	8041440 <GpioInit>
                GpioInit( &obj->Sclk, sclkPort, sclkPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 80427ba:	68fb      	ldr	r3, [r7, #12]
 80427bc:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80427c0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80427c2:	2305      	movs	r3, #5
 80427c4:	9302      	str	r3, [sp, #8]
 80427c6:	2302      	movs	r3, #2
 80427c8:	9301      	str	r3, [sp, #4]
 80427ca:	2300      	movs	r3, #0
 80427cc:	9300      	str	r3, [sp, #0]
 80427ce:	2302      	movs	r3, #2
 80427d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80427d2:	f7fe fe35 	bl	8041440 <GpioInit>
                GpioInit( &obj->Nss, nssPort, nssPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI2 );
 80427d6:	68fb      	ldr	r3, [r7, #12]
 80427d8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80427dc:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80427de:	2305      	movs	r3, #5
 80427e0:	9302      	str	r3, [sp, #8]
 80427e2:	2301      	movs	r3, #1
 80427e4:	9301      	str	r3, [sp, #4]
 80427e6:	2300      	movs	r3, #0
 80427e8:	9300      	str	r3, [sp, #0]
 80427ea:	2302      	movs	r3, #2
 80427ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80427ee:	f7fe fe27 	bl	8041440 <GpioInit>
 80427f2:	e056      	b.n	80428a2 <SpiInit+0x23e>
    }
    else
	{
		__HAL_RCC_SPI3_FORCE_RESET( );
 80427f4:	4b3a      	ldr	r3, [pc, #232]	; (80428e0 <SpiInit+0x27c>)
 80427f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80427f8:	4a39      	ldr	r2, [pc, #228]	; (80428e0 <SpiInit+0x27c>)
 80427fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80427fe:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_RCC_SPI3_RELEASE_RESET( );
 8042800:	4b37      	ldr	r3, [pc, #220]	; (80428e0 <SpiInit+0x27c>)
 8042802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042804:	4a36      	ldr	r2, [pc, #216]	; (80428e0 <SpiInit+0x27c>)
 8042806:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804280a:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_RCC_SPI3_CLK_ENABLE( );
 804280c:	4b34      	ldr	r3, [pc, #208]	; (80428e0 <SpiInit+0x27c>)
 804280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042810:	4a33      	ldr	r2, [pc, #204]	; (80428e0 <SpiInit+0x27c>)
 8042812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8042816:	6593      	str	r3, [r2, #88]	; 0x58
 8042818:	4b31      	ldr	r3, [pc, #196]	; (80428e0 <SpiInit+0x27c>)
 804281a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804281c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8042820:	613b      	str	r3, [r7, #16]
 8042822:	693b      	ldr	r3, [r7, #16]

		SpiHandle[spiId].Instance = ( SPI_TypeDef* )SPI3_BASE;
 8042824:	7afb      	ldrb	r3, [r7, #11]
 8042826:	4a2f      	ldr	r2, [pc, #188]	; (80428e4 <SpiInit+0x280>)
 8042828:	218c      	movs	r1, #140	; 0x8c
 804282a:	fb01 f303 	mul.w	r3, r1, r3
 804282e:	4413      	add	r3, r2
 8042830:	4a2f      	ldr	r2, [pc, #188]	; (80428f0 <SpiInit+0x28c>)
 8042832:	601a      	str	r2, [r3, #0]

		GpioInit( &obj->Mosi, mosiPort, mosiPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI3 );
 8042834:	68fb      	ldr	r3, [r7, #12]
 8042836:	1d18      	adds	r0, r3, #4
 8042838:	893a      	ldrh	r2, [r7, #8]
 804283a:	2305      	movs	r3, #5
 804283c:	9302      	str	r3, [sp, #8]
 804283e:	2302      	movs	r3, #2
 8042840:	9301      	str	r3, [sp, #4]
 8042842:	2300      	movs	r3, #0
 8042844:	9300      	str	r3, [sp, #0]
 8042846:	2302      	movs	r3, #2
 8042848:	6879      	ldr	r1, [r7, #4]
 804284a:	f7fe fdf9 	bl	8041440 <GpioInit>
		        GpioInit( &obj->Miso, misoPort, misoPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI3 );
 804284e:	68fb      	ldr	r3, [r7, #12]
 8042850:	f103 0018 	add.w	r0, r3, #24
 8042854:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8042856:	2305      	movs	r3, #5
 8042858:	9302      	str	r3, [sp, #8]
 804285a:	2302      	movs	r3, #2
 804285c:	9301      	str	r3, [sp, #4]
 804285e:	2300      	movs	r3, #0
 8042860:	9300      	str	r3, [sp, #0]
 8042862:	2302      	movs	r3, #2
 8042864:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8042866:	f7fe fdeb 	bl	8041440 <GpioInit>
		        GpioInit( &obj->Sclk, sclkPort, sclkPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI3 );
 804286a:	68fb      	ldr	r3, [r7, #12]
 804286c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8042870:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8042872:	2305      	movs	r3, #5
 8042874:	9302      	str	r3, [sp, #8]
 8042876:	2302      	movs	r3, #2
 8042878:	9301      	str	r3, [sp, #4]
 804287a:	2300      	movs	r3, #0
 804287c:	9300      	str	r3, [sp, #0]
 804287e:	2302      	movs	r3, #2
 8042880:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8042882:	f7fe fddd 	bl	8041440 <GpioInit>
		        GpioInit( &obj->Nss, nssPort, nssPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI3 );
 8042886:	68fb      	ldr	r3, [r7, #12]
 8042888:	f103 0040 	add.w	r0, r3, #64	; 0x40
 804288c:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 804288e:	2305      	movs	r3, #5
 8042890:	9302      	str	r3, [sp, #8]
 8042892:	2301      	movs	r3, #1
 8042894:	9301      	str	r3, [sp, #4]
 8042896:	2300      	movs	r3, #0
 8042898:	9300      	str	r3, [sp, #0]
 804289a:	2302      	movs	r3, #2
 804289c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 804289e:	f7fe fdcf 	bl	8041440 <GpioInit>
        SpiHandle[spiId].Init.NSS = SPI_NSS_SOFT;
        SpiFormat( obj, 8, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
    }
    else
    {
        SpiFormat( obj, 8, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
 80428a2:	2301      	movs	r3, #1
 80428a4:	9300      	str	r3, [sp, #0]
 80428a6:	2300      	movs	r3, #0
 80428a8:	2200      	movs	r2, #0
 80428aa:	2108      	movs	r1, #8
 80428ac:	68f8      	ldr	r0, [r7, #12]
 80428ae:	f000 f823 	bl	80428f8 <SpiFormat>
    }
    SpiFrequency( obj, 10000000 );
 80428b2:	4910      	ldr	r1, [pc, #64]	; (80428f4 <SpiInit+0x290>)
 80428b4:	68f8      	ldr	r0, [r7, #12]
 80428b6:	f000 f8bd 	bl	8042a34 <SpiFrequency>

    HAL_SPI_Init( &SpiHandle[spiId] );
 80428ba:	7afb      	ldrb	r3, [r7, #11]
 80428bc:	228c      	movs	r2, #140	; 0x8c
 80428be:	fb02 f303 	mul.w	r3, r2, r3
 80428c2:	4a08      	ldr	r2, [pc, #32]	; (80428e4 <SpiInit+0x280>)
 80428c4:	4413      	add	r3, r2
 80428c6:	4618      	mov	r0, r3
 80428c8:	f009 fc1e 	bl	804c108 <HAL_SPI_Init>

    CRITICAL_SECTION_END( );
 80428cc:	f107 031c 	add.w	r3, r7, #28
 80428d0:	4618      	mov	r0, r3
 80428d2:	f002 fd35 	bl	8045340 <BoardCriticalSectionEnd>
}
 80428d6:	bf00      	nop
 80428d8:	3720      	adds	r7, #32
 80428da:	46bd      	mov	sp, r7
 80428dc:	bd80      	pop	{r7, pc}
 80428de:	bf00      	nop
 80428e0:	40021000 	.word	0x40021000
 80428e4:	20018190 	.word	0x20018190
 80428e8:	40013000 	.word	0x40013000
 80428ec:	40003800 	.word	0x40003800
 80428f0:	40003c00 	.word	0x40003c00
 80428f4:	00989680 	.word	0x00989680

080428f8 <SpiFormat>:
    GpioInit( &obj->Sclk, obj->Sclk.port, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &obj->Nss, obj->Nss.port, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}

void SpiFormat( Spi_t *obj, int8_t bits, int8_t cpol, int8_t cpha, int8_t slave )
{
 80428f8:	b480      	push	{r7}
 80428fa:	b083      	sub	sp, #12
 80428fc:	af00      	add	r7, sp, #0
 80428fe:	6078      	str	r0, [r7, #4]
 8042900:	4608      	mov	r0, r1
 8042902:	4611      	mov	r1, r2
 8042904:	461a      	mov	r2, r3
 8042906:	4603      	mov	r3, r0
 8042908:	70fb      	strb	r3, [r7, #3]
 804290a:	460b      	mov	r3, r1
 804290c:	70bb      	strb	r3, [r7, #2]
 804290e:	4613      	mov	r3, r2
 8042910:	707b      	strb	r3, [r7, #1]
    SpiHandle[obj->SpiId].Init.Direction = SPI_DIRECTION_2LINES;
 8042912:	687b      	ldr	r3, [r7, #4]
 8042914:	781b      	ldrb	r3, [r3, #0]
 8042916:	4619      	mov	r1, r3
 8042918:	4a45      	ldr	r2, [pc, #276]	; (8042a30 <SpiFormat+0x138>)
 804291a:	238c      	movs	r3, #140	; 0x8c
 804291c:	fb03 f301 	mul.w	r3, r3, r1
 8042920:	4413      	add	r3, r2
 8042922:	3308      	adds	r3, #8
 8042924:	2200      	movs	r2, #0
 8042926:	601a      	str	r2, [r3, #0]
    if( bits == 8 )
 8042928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 804292c:	2b08      	cmp	r3, #8
 804292e:	d10c      	bne.n	804294a <SpiFormat+0x52>
    {
        SpiHandle[obj->SpiId].Init.DataSize = SPI_DATASIZE_8BIT;
 8042930:	687b      	ldr	r3, [r7, #4]
 8042932:	781b      	ldrb	r3, [r3, #0]
 8042934:	4619      	mov	r1, r3
 8042936:	4a3e      	ldr	r2, [pc, #248]	; (8042a30 <SpiFormat+0x138>)
 8042938:	238c      	movs	r3, #140	; 0x8c
 804293a:	fb03 f301 	mul.w	r3, r3, r1
 804293e:	4413      	add	r3, r2
 8042940:	330c      	adds	r3, #12
 8042942:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8042946:	601a      	str	r2, [r3, #0]
 8042948:	e00b      	b.n	8042962 <SpiFormat+0x6a>
    }
    else
    {
        SpiHandle[obj->SpiId].Init.DataSize = SPI_DATASIZE_16BIT;
 804294a:	687b      	ldr	r3, [r7, #4]
 804294c:	781b      	ldrb	r3, [r3, #0]
 804294e:	4619      	mov	r1, r3
 8042950:	4a37      	ldr	r2, [pc, #220]	; (8042a30 <SpiFormat+0x138>)
 8042952:	238c      	movs	r3, #140	; 0x8c
 8042954:	fb03 f301 	mul.w	r3, r3, r1
 8042958:	4413      	add	r3, r2
 804295a:	330c      	adds	r3, #12
 804295c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 8042960:	601a      	str	r2, [r3, #0]
    }
    SpiHandle[obj->SpiId].Init.CLKPolarity = cpol;
 8042962:	687b      	ldr	r3, [r7, #4]
 8042964:	781b      	ldrb	r3, [r3, #0]
 8042966:	4618      	mov	r0, r3
 8042968:	f997 2002 	ldrsb.w	r2, [r7, #2]
 804296c:	4930      	ldr	r1, [pc, #192]	; (8042a30 <SpiFormat+0x138>)
 804296e:	238c      	movs	r3, #140	; 0x8c
 8042970:	fb03 f300 	mul.w	r3, r3, r0
 8042974:	440b      	add	r3, r1
 8042976:	3310      	adds	r3, #16
 8042978:	601a      	str	r2, [r3, #0]
    SpiHandle[obj->SpiId].Init.CLKPhase = cpha;
 804297a:	687b      	ldr	r3, [r7, #4]
 804297c:	781b      	ldrb	r3, [r3, #0]
 804297e:	4618      	mov	r0, r3
 8042980:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8042984:	492a      	ldr	r1, [pc, #168]	; (8042a30 <SpiFormat+0x138>)
 8042986:	238c      	movs	r3, #140	; 0x8c
 8042988:	fb03 f300 	mul.w	r3, r3, r0
 804298c:	440b      	add	r3, r1
 804298e:	3314      	adds	r3, #20
 8042990:	601a      	str	r2, [r3, #0]
    SpiHandle[obj->SpiId].Init.FirstBit = SPI_FIRSTBIT_MSB;
 8042992:	687b      	ldr	r3, [r7, #4]
 8042994:	781b      	ldrb	r3, [r3, #0]
 8042996:	4619      	mov	r1, r3
 8042998:	4a25      	ldr	r2, [pc, #148]	; (8042a30 <SpiFormat+0x138>)
 804299a:	238c      	movs	r3, #140	; 0x8c
 804299c:	fb03 f301 	mul.w	r3, r3, r1
 80429a0:	4413      	add	r3, r2
 80429a2:	3320      	adds	r3, #32
 80429a4:	2200      	movs	r2, #0
 80429a6:	601a      	str	r2, [r3, #0]
    SpiHandle[obj->SpiId].Init.TIMode = SPI_TIMODE_DISABLE;
 80429a8:	687b      	ldr	r3, [r7, #4]
 80429aa:	781b      	ldrb	r3, [r3, #0]
 80429ac:	4619      	mov	r1, r3
 80429ae:	4a20      	ldr	r2, [pc, #128]	; (8042a30 <SpiFormat+0x138>)
 80429b0:	238c      	movs	r3, #140	; 0x8c
 80429b2:	fb03 f301 	mul.w	r3, r3, r1
 80429b6:	4413      	add	r3, r2
 80429b8:	3324      	adds	r3, #36	; 0x24
 80429ba:	2200      	movs	r2, #0
 80429bc:	601a      	str	r2, [r3, #0]
    SpiHandle[obj->SpiId].Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80429be:	687b      	ldr	r3, [r7, #4]
 80429c0:	781b      	ldrb	r3, [r3, #0]
 80429c2:	4619      	mov	r1, r3
 80429c4:	4a1a      	ldr	r2, [pc, #104]	; (8042a30 <SpiFormat+0x138>)
 80429c6:	238c      	movs	r3, #140	; 0x8c
 80429c8:	fb03 f301 	mul.w	r3, r3, r1
 80429cc:	4413      	add	r3, r2
 80429ce:	3328      	adds	r3, #40	; 0x28
 80429d0:	2200      	movs	r2, #0
 80429d2:	601a      	str	r2, [r3, #0]
    SpiHandle[obj->SpiId].Init.CRCPolynomial = 7;
 80429d4:	687b      	ldr	r3, [r7, #4]
 80429d6:	781b      	ldrb	r3, [r3, #0]
 80429d8:	4619      	mov	r1, r3
 80429da:	4a15      	ldr	r2, [pc, #84]	; (8042a30 <SpiFormat+0x138>)
 80429dc:	238c      	movs	r3, #140	; 0x8c
 80429de:	fb03 f301 	mul.w	r3, r3, r1
 80429e2:	4413      	add	r3, r2
 80429e4:	332c      	adds	r3, #44	; 0x2c
 80429e6:	2207      	movs	r2, #7
 80429e8:	601a      	str	r2, [r3, #0]

    if( slave == 0 )
 80429ea:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80429ee:	2b00      	cmp	r3, #0
 80429f0:	d10c      	bne.n	8042a0c <SpiFormat+0x114>
    {
        SpiHandle[obj->SpiId].Init.Mode = SPI_MODE_MASTER;
 80429f2:	687b      	ldr	r3, [r7, #4]
 80429f4:	781b      	ldrb	r3, [r3, #0]
 80429f6:	4619      	mov	r1, r3
 80429f8:	4a0d      	ldr	r2, [pc, #52]	; (8042a30 <SpiFormat+0x138>)
 80429fa:	238c      	movs	r3, #140	; 0x8c
 80429fc:	fb03 f301 	mul.w	r3, r3, r1
 8042a00:	4413      	add	r3, r2
 8042a02:	3304      	adds	r3, #4
 8042a04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8042a08:	601a      	str	r2, [r3, #0]
    }
    else
    {
        SpiHandle[obj->SpiId].Init.Mode = SPI_MODE_SLAVE;
    }
}
 8042a0a:	e00a      	b.n	8042a22 <SpiFormat+0x12a>
        SpiHandle[obj->SpiId].Init.Mode = SPI_MODE_SLAVE;
 8042a0c:	687b      	ldr	r3, [r7, #4]
 8042a0e:	781b      	ldrb	r3, [r3, #0]
 8042a10:	4619      	mov	r1, r3
 8042a12:	4a07      	ldr	r2, [pc, #28]	; (8042a30 <SpiFormat+0x138>)
 8042a14:	238c      	movs	r3, #140	; 0x8c
 8042a16:	fb03 f301 	mul.w	r3, r3, r1
 8042a1a:	4413      	add	r3, r2
 8042a1c:	3304      	adds	r3, #4
 8042a1e:	2200      	movs	r2, #0
 8042a20:	601a      	str	r2, [r3, #0]
}
 8042a22:	bf00      	nop
 8042a24:	370c      	adds	r7, #12
 8042a26:	46bd      	mov	sp, r7
 8042a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042a2c:	4770      	bx	lr
 8042a2e:	bf00      	nop
 8042a30:	20018190 	.word	0x20018190

08042a34 <SpiFrequency>:

void SpiFrequency( Spi_t *obj, uint32_t hz )
{
 8042a34:	b480      	push	{r7}
 8042a36:	b087      	sub	sp, #28
 8042a38:	af00      	add	r7, sp, #0
 8042a3a:	6078      	str	r0, [r7, #4]
 8042a3c:	6039      	str	r1, [r7, #0]
    uint32_t divisor = 0;
 8042a3e:	2300      	movs	r3, #0
 8042a40:	617b      	str	r3, [r7, #20]
    uint32_t sysClkTmp = SystemCoreClock;
 8042a42:	4b1f      	ldr	r3, [pc, #124]	; (8042ac0 <SpiFrequency+0x8c>)
 8042a44:	681b      	ldr	r3, [r3, #0]
 8042a46:	613b      	str	r3, [r7, #16]
    uint32_t baudRate;

    while( sysClkTmp > hz )
 8042a48:	e008      	b.n	8042a5c <SpiFrequency+0x28>
    {
        divisor++;
 8042a4a:	697b      	ldr	r3, [r7, #20]
 8042a4c:	3301      	adds	r3, #1
 8042a4e:	617b      	str	r3, [r7, #20]
        sysClkTmp = ( sysClkTmp >> 1 );
 8042a50:	693b      	ldr	r3, [r7, #16]
 8042a52:	085b      	lsrs	r3, r3, #1
 8042a54:	613b      	str	r3, [r7, #16]

        if( divisor >= 7 )
 8042a56:	697b      	ldr	r3, [r7, #20]
 8042a58:	2b06      	cmp	r3, #6
 8042a5a:	d804      	bhi.n	8042a66 <SpiFrequency+0x32>
    while( sysClkTmp > hz )
 8042a5c:	693a      	ldr	r2, [r7, #16]
 8042a5e:	683b      	ldr	r3, [r7, #0]
 8042a60:	429a      	cmp	r2, r3
 8042a62:	d8f2      	bhi.n	8042a4a <SpiFrequency+0x16>
 8042a64:	e000      	b.n	8042a68 <SpiFrequency+0x34>
        {
            break;
 8042a66:	bf00      	nop
        }
    }

    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 8042a68:	697b      	ldr	r3, [r7, #20]
 8042a6a:	f003 0304 	and.w	r3, r3, #4
 8042a6e:	2b00      	cmp	r3, #0
 8042a70:	d101      	bne.n	8042a76 <SpiFrequency+0x42>
 8042a72:	2200      	movs	r2, #0
 8042a74:	e000      	b.n	8042a78 <SpiFrequency+0x44>
 8042a76:	2220      	movs	r2, #32
              ( ( ( divisor & 0x2 ) == 0 ) ? 0x0 : SPI_CR1_BR_1 ) |
 8042a78:	697b      	ldr	r3, [r7, #20]
 8042a7a:	f003 0302 	and.w	r3, r3, #2
 8042a7e:	2b00      	cmp	r3, #0
 8042a80:	d101      	bne.n	8042a86 <SpiFrequency+0x52>
 8042a82:	2300      	movs	r3, #0
 8042a84:	e000      	b.n	8042a88 <SpiFrequency+0x54>
 8042a86:	2310      	movs	r3, #16
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 8042a88:	4313      	orrs	r3, r2
              ( ( ( divisor & 0x1 ) == 0 ) ? 0x0 : SPI_CR1_BR_0 );
 8042a8a:	697a      	ldr	r2, [r7, #20]
 8042a8c:	f002 0201 	and.w	r2, r2, #1
 8042a90:	2a00      	cmp	r2, #0
 8042a92:	d101      	bne.n	8042a98 <SpiFrequency+0x64>
 8042a94:	2200      	movs	r2, #0
 8042a96:	e000      	b.n	8042a9a <SpiFrequency+0x66>
 8042a98:	2208      	movs	r2, #8
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 8042a9a:	4313      	orrs	r3, r2
 8042a9c:	60fb      	str	r3, [r7, #12]

    SpiHandle[obj->SpiId].Init.BaudRatePrescaler = baudRate;
 8042a9e:	687b      	ldr	r3, [r7, #4]
 8042aa0:	781b      	ldrb	r3, [r3, #0]
 8042aa2:	4619      	mov	r1, r3
 8042aa4:	4a07      	ldr	r2, [pc, #28]	; (8042ac4 <SpiFrequency+0x90>)
 8042aa6:	238c      	movs	r3, #140	; 0x8c
 8042aa8:	fb03 f301 	mul.w	r3, r3, r1
 8042aac:	4413      	add	r3, r2
 8042aae:	331c      	adds	r3, #28
 8042ab0:	68fa      	ldr	r2, [r7, #12]
 8042ab2:	601a      	str	r2, [r3, #0]
}
 8042ab4:	bf00      	nop
 8042ab6:	371c      	adds	r7, #28
 8042ab8:	46bd      	mov	sp, r7
 8042aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042abe:	4770      	bx	lr
 8042ac0:	20018024 	.word	0x20018024
 8042ac4:	20018190 	.word	0x20018190

08042ac8 <SpiInOut>:

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 8042ac8:	b580      	push	{r7, lr}
 8042aca:	b086      	sub	sp, #24
 8042acc:	af02      	add	r7, sp, #8
 8042ace:	6078      	str	r0, [r7, #4]
 8042ad0:	460b      	mov	r3, r1
 8042ad2:	807b      	strh	r3, [r7, #2]
    uint8_t rxData = 0;
 8042ad4:	2300      	movs	r3, #0
 8042ad6:	73fb      	strb	r3, [r7, #15]

    if( ( obj == NULL ) || ( SpiHandle[obj->SpiId].Instance ) == NULL )
 8042ad8:	687b      	ldr	r3, [r7, #4]
 8042ada:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }

    __HAL_SPI_ENABLE( &SpiHandle[obj->SpiId] );
 8042adc:	687b      	ldr	r3, [r7, #4]
 8042ade:	781b      	ldrb	r3, [r3, #0]
 8042ae0:	4619      	mov	r1, r3
 8042ae2:	4a1a      	ldr	r2, [pc, #104]	; (8042b4c <SpiInOut+0x84>)
 8042ae4:	238c      	movs	r3, #140	; 0x8c
 8042ae6:	fb03 f301 	mul.w	r3, r3, r1
 8042aea:	4413      	add	r3, r2
 8042aec:	681b      	ldr	r3, [r3, #0]
 8042aee:	681a      	ldr	r2, [r3, #0]
 8042af0:	687b      	ldr	r3, [r7, #4]
 8042af2:	781b      	ldrb	r3, [r3, #0]
 8042af4:	4618      	mov	r0, r3
 8042af6:	4915      	ldr	r1, [pc, #84]	; (8042b4c <SpiInOut+0x84>)
 8042af8:	238c      	movs	r3, #140	; 0x8c
 8042afa:	fb03 f300 	mul.w	r3, r3, r0
 8042afe:	440b      	add	r3, r1
 8042b00:	681b      	ldr	r3, [r3, #0]
 8042b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8042b06:	601a      	str	r2, [r3, #0]

    CRITICAL_SECTION_BEGIN( );
 8042b08:	f107 0308 	add.w	r3, r7, #8
 8042b0c:	4618      	mov	r0, r3
 8042b0e:	f002 fc05 	bl	804531c <BoardCriticalSectionBegin>

    HAL_SPI_TransmitReceive( &SpiHandle[obj->SpiId], ( uint8_t* )&outData, &rxData, 1, HAL_MAX_DELAY );
 8042b12:	687b      	ldr	r3, [r7, #4]
 8042b14:	781b      	ldrb	r3, [r3, #0]
 8042b16:	461a      	mov	r2, r3
 8042b18:	238c      	movs	r3, #140	; 0x8c
 8042b1a:	fb03 f302 	mul.w	r3, r3, r2
 8042b1e:	4a0b      	ldr	r2, [pc, #44]	; (8042b4c <SpiInOut+0x84>)
 8042b20:	1898      	adds	r0, r3, r2
 8042b22:	f107 020f 	add.w	r2, r7, #15
 8042b26:	1cb9      	adds	r1, r7, #2
 8042b28:	f04f 33ff 	mov.w	r3, #4294967295
 8042b2c:	9300      	str	r3, [sp, #0]
 8042b2e:	2301      	movs	r3, #1
 8042b30:	f009 fbc4 	bl	804c2bc <HAL_SPI_TransmitReceive>

    CRITICAL_SECTION_END( );
 8042b34:	f107 0308 	add.w	r3, r7, #8
 8042b38:	4618      	mov	r0, r3
 8042b3a:	f002 fc01 	bl	8045340 <BoardCriticalSectionEnd>

    return( rxData );
 8042b3e:	7bfb      	ldrb	r3, [r7, #15]
 8042b40:	b29b      	uxth	r3, r3
}
 8042b42:	4618      	mov	r0, r3
 8042b44:	3710      	adds	r7, #16
 8042b46:	46bd      	mov	sp, r7
 8042b48:	bd80      	pop	{r7, pc}
 8042b4a:	bf00      	nop
 8042b4c:	20018190 	.word	0x20018190

08042b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8042b50:	b580      	push	{r7, lr}
 8042b52:	b082      	sub	sp, #8
 8042b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8042b56:	4b12      	ldr	r3, [pc, #72]	; (8042ba0 <HAL_MspInit+0x50>)
 8042b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042b5a:	4a11      	ldr	r2, [pc, #68]	; (8042ba0 <HAL_MspInit+0x50>)
 8042b5c:	f043 0301 	orr.w	r3, r3, #1
 8042b60:	6613      	str	r3, [r2, #96]	; 0x60
 8042b62:	4b0f      	ldr	r3, [pc, #60]	; (8042ba0 <HAL_MspInit+0x50>)
 8042b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042b66:	f003 0301 	and.w	r3, r3, #1
 8042b6a:	607b      	str	r3, [r7, #4]
 8042b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8042b6e:	4b0c      	ldr	r3, [pc, #48]	; (8042ba0 <HAL_MspInit+0x50>)
 8042b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042b72:	4a0b      	ldr	r2, [pc, #44]	; (8042ba0 <HAL_MspInit+0x50>)
 8042b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042b78:	6593      	str	r3, [r2, #88]	; 0x58
 8042b7a:	4b09      	ldr	r3, [pc, #36]	; (8042ba0 <HAL_MspInit+0x50>)
 8042b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042b82:	603b      	str	r3, [r7, #0]
 8042b84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8042b86:	2200      	movs	r2, #0
 8042b88:	2100      	movs	r1, #0
 8042b8a:	205f      	movs	r0, #95	; 0x5f
 8042b8c:	f005 fbf4 	bl	8048378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8042b90:	205f      	movs	r0, #95	; 0x5f
 8042b92:	f005 fc0b 	bl	80483ac <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8042b96:	bf00      	nop
 8042b98:	3708      	adds	r7, #8
 8042b9a:	46bd      	mov	sp, r7
 8042b9c:	bd80      	pop	{r7, pc}
 8042b9e:	bf00      	nop
 8042ba0:	40021000 	.word	0x40021000

08042ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8042ba4:	b580      	push	{r7, lr}
 8042ba6:	b08c      	sub	sp, #48	; 0x30
 8042ba8:	af00      	add	r7, sp, #0
 8042baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8042bac:	2300      	movs	r3, #0
 8042bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8042bb0:	2300      	movs	r3, #0
 8042bb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8042bb4:	2200      	movs	r2, #0
 8042bb6:	6879      	ldr	r1, [r7, #4]
 8042bb8:	2031      	movs	r0, #49	; 0x31
 8042bba:	f005 fbdd 	bl	8048378 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8042bbe:	2031      	movs	r0, #49	; 0x31
 8042bc0:	f005 fbf4 	bl	80483ac <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8042bc4:	4b1e      	ldr	r3, [pc, #120]	; (8042c40 <HAL_InitTick+0x9c>)
 8042bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042bc8:	4a1d      	ldr	r2, [pc, #116]	; (8042c40 <HAL_InitTick+0x9c>)
 8042bca:	f043 0310 	orr.w	r3, r3, #16
 8042bce:	6593      	str	r3, [r2, #88]	; 0x58
 8042bd0:	4b1b      	ldr	r3, [pc, #108]	; (8042c40 <HAL_InitTick+0x9c>)
 8042bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042bd4:	f003 0310 	and.w	r3, r3, #16
 8042bd8:	60fb      	str	r3, [r7, #12]
 8042bda:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8042bdc:	f107 0210 	add.w	r2, r7, #16
 8042be0:	f107 0314 	add.w	r3, r7, #20
 8042be4:	4611      	mov	r1, r2
 8042be6:	4618      	mov	r0, r3
 8042be8:	f007 fed6 	bl	804a998 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8042bec:	f007 feac 	bl	804a948 <HAL_RCC_GetPCLK1Freq>
 8042bf0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8042bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8042bf4:	4a13      	ldr	r2, [pc, #76]	; (8042c44 <HAL_InitTick+0xa0>)
 8042bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8042bfa:	0c9b      	lsrs	r3, r3, #18
 8042bfc:	3b01      	subs	r3, #1
 8042bfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8042c00:	4b11      	ldr	r3, [pc, #68]	; (8042c48 <HAL_InitTick+0xa4>)
 8042c02:	4a12      	ldr	r2, [pc, #72]	; (8042c4c <HAL_InitTick+0xa8>)
 8042c04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8042c06:	4b10      	ldr	r3, [pc, #64]	; (8042c48 <HAL_InitTick+0xa4>)
 8042c08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8042c0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8042c0e:	4a0e      	ldr	r2, [pc, #56]	; (8042c48 <HAL_InitTick+0xa4>)
 8042c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8042c12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8042c14:	4b0c      	ldr	r3, [pc, #48]	; (8042c48 <HAL_InitTick+0xa4>)
 8042c16:	2200      	movs	r2, #0
 8042c18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8042c1a:	4b0b      	ldr	r3, [pc, #44]	; (8042c48 <HAL_InitTick+0xa4>)
 8042c1c:	2200      	movs	r2, #0
 8042c1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8042c20:	4809      	ldr	r0, [pc, #36]	; (8042c48 <HAL_InitTick+0xa4>)
 8042c22:	f00a f821 	bl	804cc68 <HAL_TIM_Base_Init>
 8042c26:	4603      	mov	r3, r0
 8042c28:	2b00      	cmp	r3, #0
 8042c2a:	d104      	bne.n	8042c36 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8042c2c:	4806      	ldr	r0, [pc, #24]	; (8042c48 <HAL_InitTick+0xa4>)
 8042c2e:	f00a f889 	bl	804cd44 <HAL_TIM_Base_Start_IT>
 8042c32:	4603      	mov	r3, r0
 8042c34:	e000      	b.n	8042c38 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8042c36:	2301      	movs	r3, #1
}
 8042c38:	4618      	mov	r0, r3
 8042c3a:	3730      	adds	r7, #48	; 0x30
 8042c3c:	46bd      	mov	sp, r7
 8042c3e:	bd80      	pop	{r7, pc}
 8042c40:	40021000 	.word	0x40021000
 8042c44:	431bde83 	.word	0x431bde83
 8042c48:	20019194 	.word	0x20019194
 8042c4c:	40001000 	.word	0x40001000

08042c50 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8042c50:	b480      	push	{r7}
 8042c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8042c54:	e7fe      	b.n	8042c54 <MemManage_Handler+0x4>

08042c56 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8042c56:	b480      	push	{r7}
 8042c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8042c5a:	e7fe      	b.n	8042c5a <UsageFault_Handler+0x4>

08042c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8042c5c:	b480      	push	{r7}
 8042c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8042c60:	bf00      	nop
 8042c62:	46bd      	mov	sp, r7
 8042c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c68:	4770      	bx	lr

08042c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8042c6a:	b480      	push	{r7}
 8042c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8042c6e:	bf00      	nop
 8042c70:	46bd      	mov	sp, r7
 8042c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c76:	4770      	bx	lr

08042c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8042c78:	b480      	push	{r7}
 8042c7a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8042c7c:	bf00      	nop
 8042c7e:	46bd      	mov	sp, r7
 8042c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c84:	4770      	bx	lr
	...

08042c88 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupts through EXTI line 17.
  */
void RTC_IRQHandler(void)
{
 8042c88:	b580      	push	{r7, lr}
 8042c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8042c8c:	4805      	ldr	r0, [pc, #20]	; (8042ca4 <RTC_IRQHandler+0x1c>)
 8042c8e:	f008 ff55 	bl	804bb3c <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_TimeStampIRQHandler(&hrtc);
 8042c92:	4804      	ldr	r0, [pc, #16]	; (8042ca4 <RTC_IRQHandler+0x1c>)
 8042c94:	f009 f89e 	bl	804bdd4 <HAL_RTCEx_TimeStampIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8042c98:	4802      	ldr	r0, [pc, #8]	; (8042ca4 <RTC_IRQHandler+0x1c>)
 8042c9a:	f009 f947 	bl	804bf2c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8042c9e:	bf00      	nop
 8042ca0:	bd80      	pop	{r7, pc}
 8042ca2:	bf00      	nop
 8042ca4:	20019008 	.word	0x20019008

08042ca8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8042ca8:	b580      	push	{r7, lr}
 8042caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8042cac:	4802      	ldr	r0, [pc, #8]	; (8042cb8 <DMA1_Channel5_IRQHandler+0x10>)
 8042cae:	f005 fcfc 	bl	80486aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8042cb2:	bf00      	nop
 8042cb4:	bd80      	pop	{r7, pc}
 8042cb6:	bf00      	nop
 8042cb8:	20019564 	.word	0x20019564

08042cbc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8042cbc:	b580      	push	{r7, lr}
 8042cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8042cc0:	4802      	ldr	r0, [pc, #8]	; (8042ccc <DMA1_Channel6_IRQHandler+0x10>)
 8042cc2:	f005 fcf2 	bl	80486aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8042cc6:	bf00      	nop
 8042cc8:	bd80      	pop	{r7, pc}
 8042cca:	bf00      	nop
 8042ccc:	200194fc 	.word	0x200194fc

08042cd0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8042cd0:	b580      	push	{r7, lr}
 8042cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8042cd4:	4803      	ldr	r0, [pc, #12]	; (8042ce4 <ADC1_2_IRQHandler+0x14>)
 8042cd6:	f004 fb3d 	bl	8047354 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8042cda:	4803      	ldr	r0, [pc, #12]	; (8042ce8 <ADC1_2_IRQHandler+0x18>)
 8042cdc:	f004 fb3a 	bl	8047354 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8042ce0:	bf00      	nop
 8042ce2:	bd80      	pop	{r7, pc}
 8042ce4:	20018e6c 	.word	0x20018e6c
 8042ce8:	20018dd8 	.word	0x20018dd8

08042cec <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8042cec:	b580      	push	{r7, lr}
 8042cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8042cf0:	4802      	ldr	r0, [pc, #8]	; (8042cfc <TIM1_BRK_IRQHandler+0x10>)
 8042cf2:	f00a f94b 	bl	804cf8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8042cf6:	bf00      	nop
 8042cf8:	bd80      	pop	{r7, pc}
 8042cfa:	bf00      	nop
 8042cfc:	20019250 	.word	0x20019250

08042d00 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8042d00:	b580      	push	{r7, lr}
 8042d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8042d04:	4802      	ldr	r0, [pc, #8]	; (8042d10 <TIM1_UP_IRQHandler+0x10>)
 8042d06:	f00a f941 	bl	804cf8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8042d0a:	bf00      	nop
 8042d0c:	bd80      	pop	{r7, pc}
 8042d0e:	bf00      	nop
 8042d10:	20019250 	.word	0x20019250

08042d14 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8042d14:	b580      	push	{r7, lr}
 8042d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8042d18:	4802      	ldr	r0, [pc, #8]	; (8042d24 <TIM1_TRG_COM_IRQHandler+0x10>)
 8042d1a:	f00a f937 	bl	804cf8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8042d1e:	bf00      	nop
 8042d20:	bd80      	pop	{r7, pc}
 8042d22:	bf00      	nop
 8042d24:	20019250 	.word	0x20019250

08042d28 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8042d28:	b580      	push	{r7, lr}
 8042d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8042d2c:	4802      	ldr	r0, [pc, #8]	; (8042d38 <TIM1_CC_IRQHandler+0x10>)
 8042d2e:	f00a f92d 	bl	804cf8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8042d32:	bf00      	nop
 8042d34:	bd80      	pop	{r7, pc}
 8042d36:	bf00      	nop
 8042d38:	20019250 	.word	0x20019250

08042d3c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8042d3c:	b580      	push	{r7, lr}
 8042d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8042d40:	4802      	ldr	r0, [pc, #8]	; (8042d4c <TIM6_IRQHandler+0x10>)
 8042d42:	f00a f923 	bl	804cf8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8042d46:	bf00      	nop
 8042d48:	bd80      	pop	{r7, pc}
 8042d4a:	bf00      	nop
 8042d4c:	20019194 	.word	0x20019194

08042d50 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8042d50:	b580      	push	{r7, lr}
 8042d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8042d54:	4802      	ldr	r0, [pc, #8]	; (8042d60 <I2C1_EV_IRQHandler+0x10>)
 8042d56:	f006 fcc5 	bl	80496e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8042d5a:	bf00      	nop
 8042d5c:	bd80      	pop	{r7, pc}
 8042d5e:	bf00      	nop
 8042d60:	20018f68 	.word	0x20018f68

08042d64 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8042d64:	b580      	push	{r7, lr}
 8042d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8042d68:	4802      	ldr	r0, [pc, #8]	; (8042d74 <I2C1_ER_IRQHandler+0x10>)
 8042d6a:	f006 fcd5 	bl	8049718 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8042d6e:	bf00      	nop
 8042d70:	bd80      	pop	{r7, pc}
 8042d72:	bf00      	nop
 8042d74:	20018f68 	.word	0x20018f68

08042d78 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8042d78:	b580      	push	{r7, lr}
 8042d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8042d7c:	4802      	ldr	r0, [pc, #8]	; (8042d88 <SPI1_IRQHandler+0x10>)
 8042d7e:	f009 fcb1 	bl	804c6e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8042d82:	bf00      	nop
 8042d84:	bd80      	pop	{r7, pc}
 8042d86:	bf00      	nop
 8042d88:	20019108 	.word	0x20019108

08042d8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8042d8c:	b580      	push	{r7, lr}
 8042d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8042d90:	4802      	ldr	r0, [pc, #8]	; (8042d9c <USART3_IRQHandler+0x10>)
 8042d92:	f00a fc8f 	bl	804d6b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8042d96:	bf00      	nop
 8042d98:	bd80      	pop	{r7, pc}
 8042d9a:	bf00      	nop
 8042d9c:	20019374 	.word	0x20019374

08042da0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 8042da0:	b580      	push	{r7, lr}
 8042da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8042da4:	4802      	ldr	r0, [pc, #8]	; (8042db0 <LPUART1_IRQHandler+0x10>)
 8042da6:	f00a fc85 	bl	804d6b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8042daa:	bf00      	nop
 8042dac:	bd80      	pop	{r7, pc}
 8042dae:	bf00      	nop
 8042db0:	2001946c 	.word	0x2001946c

08042db4 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8042db4:	b580      	push	{r7, lr}
 8042db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8042db8:	4802      	ldr	r0, [pc, #8]	; (8042dc4 <DMA2_Channel2_IRQHandler+0x10>)
 8042dba:	f005 fc76 	bl	80486aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8042dbe:	bf00      	nop
 8042dc0:	bd80      	pop	{r7, pc}
 8042dc2:	bf00      	nop
 8042dc4:	2001930c 	.word	0x2001930c

08042dc8 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8042dc8:	b580      	push	{r7, lr}
 8042dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8042dcc:	4802      	ldr	r0, [pc, #8]	; (8042dd8 <DMA2_Channel3_IRQHandler+0x10>)
 8042dce:	f005 fc6c 	bl	80486aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8042dd2:	bf00      	nop
 8042dd4:	bd80      	pop	{r7, pc}
 8042dd6:	bf00      	nop
 8042dd8:	20019404 	.word	0x20019404

08042ddc <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8042ddc:	b580      	push	{r7, lr}
 8042dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8042de0:	4802      	ldr	r0, [pc, #8]	; (8042dec <DMA2_Channel6_IRQHandler+0x10>)
 8042de2:	f005 fc62 	bl	80486aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8042de6:	bf00      	nop
 8042de8:	bd80      	pop	{r7, pc}
 8042dea:	bf00      	nop
 8042dec:	20018f00 	.word	0x20018f00

08042df0 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8042df0:	b580      	push	{r7, lr}
 8042df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8042df4:	4802      	ldr	r0, [pc, #8]	; (8042e00 <RNG_IRQHandler+0x10>)
 8042df6:	f008 fb91 	bl	804b51c <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8042dfa:	bf00      	nop
 8042dfc:	bd80      	pop	{r7, pc}
 8042dfe:	bf00      	nop
 8042e00:	20018fe4 	.word	0x20018fe4

08042e04 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8042e04:	b480      	push	{r7}
 8042e06:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8042e08:	bf00      	nop
 8042e0a:	46bd      	mov	sp, r7
 8042e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e10:	4770      	bx	lr
	...

08042e14 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8042e14:	b580      	push	{r7, lr}
 8042e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8042e18:	4802      	ldr	r0, [pc, #8]	; (8042e24 <SPI3_IRQHandler+0x10>)
 8042e1a:	f009 fc63 	bl	804c6e4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8042e1e:	bf00      	nop
 8042e20:	bd80      	pop	{r7, pc}
 8042e22:	bf00      	nop
 8042e24:	2001907c 	.word	0x2001907c

08042e28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8042e28:	b480      	push	{r7}
 8042e2a:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8042e2c:	bf00      	nop
 8042e2e:	46bd      	mov	sp, r7
 8042e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e34:	4770      	bx	lr
	...

08042e38 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8042e38:	b580      	push	{r7, lr}
 8042e3a:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8042e3c:	f00b fcbc 	bl	804e7b8 <__SECURE_SystemCoreClockUpdate_veneer>
 8042e40:	4603      	mov	r3, r0
 8042e42:	4a02      	ldr	r2, [pc, #8]	; (8042e4c <SystemCoreClockUpdate+0x14>)
 8042e44:	6013      	str	r3, [r2, #0]
}
 8042e46:	bf00      	nop
 8042e48:	bd80      	pop	{r7, pc}
 8042e4a:	bf00      	nop
 8042e4c:	20018024 	.word	0x20018024

08042e50 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8042e50:	b580      	push	{r7, lr}
 8042e52:	b08c      	sub	sp, #48	; 0x30
 8042e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8042e56:	f107 030c 	add.w	r3, r7, #12
 8042e5a:	2224      	movs	r2, #36	; 0x24
 8042e5c:	2100      	movs	r1, #0
 8042e5e:	4618      	mov	r0, r3
 8042e60:	f00b fc8b 	bl	804e77a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8042e64:	463b      	mov	r3, r7
 8042e66:	2200      	movs	r2, #0
 8042e68:	601a      	str	r2, [r3, #0]
 8042e6a:	605a      	str	r2, [r3, #4]
 8042e6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8042e6e:	4b23      	ldr	r3, [pc, #140]	; (8042efc <MX_TIM1_Init+0xac>)
 8042e70:	4a23      	ldr	r2, [pc, #140]	; (8042f00 <MX_TIM1_Init+0xb0>)
 8042e72:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8042e74:	4b21      	ldr	r3, [pc, #132]	; (8042efc <MX_TIM1_Init+0xac>)
 8042e76:	2200      	movs	r2, #0
 8042e78:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8042e7a:	4b20      	ldr	r3, [pc, #128]	; (8042efc <MX_TIM1_Init+0xac>)
 8042e7c:	2200      	movs	r2, #0
 8042e7e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8042e80:	4b1e      	ldr	r3, [pc, #120]	; (8042efc <MX_TIM1_Init+0xac>)
 8042e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042e86:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8042e88:	4b1c      	ldr	r3, [pc, #112]	; (8042efc <MX_TIM1_Init+0xac>)
 8042e8a:	2200      	movs	r2, #0
 8042e8c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8042e8e:	4b1b      	ldr	r3, [pc, #108]	; (8042efc <MX_TIM1_Init+0xac>)
 8042e90:	2200      	movs	r2, #0
 8042e92:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8042e94:	4b19      	ldr	r3, [pc, #100]	; (8042efc <MX_TIM1_Init+0xac>)
 8042e96:	2200      	movs	r2, #0
 8042e98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8042e9a:	2301      	movs	r3, #1
 8042e9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8042e9e:	2300      	movs	r3, #0
 8042ea0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8042ea2:	2301      	movs	r3, #1
 8042ea4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8042ea6:	2300      	movs	r3, #0
 8042ea8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8042eaa:	2300      	movs	r3, #0
 8042eac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8042eae:	2300      	movs	r3, #0
 8042eb0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8042eb2:	2301      	movs	r3, #1
 8042eb4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8042eb6:	2300      	movs	r3, #0
 8042eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8042eba:	2300      	movs	r3, #0
 8042ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8042ebe:	f107 030c 	add.w	r3, r7, #12
 8042ec2:	4619      	mov	r1, r3
 8042ec4:	480d      	ldr	r0, [pc, #52]	; (8042efc <MX_TIM1_Init+0xac>)
 8042ec6:	f009 ffad 	bl	804ce24 <HAL_TIM_Encoder_Init>
 8042eca:	4603      	mov	r3, r0
 8042ecc:	2b00      	cmp	r3, #0
 8042ece:	d001      	beq.n	8042ed4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8042ed0:	f7fe ff12 	bl	8041cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8042ed4:	2300      	movs	r3, #0
 8042ed6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8042ed8:	2300      	movs	r3, #0
 8042eda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8042edc:	2300      	movs	r3, #0
 8042ede:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8042ee0:	463b      	mov	r3, r7
 8042ee2:	4619      	mov	r1, r3
 8042ee4:	4805      	ldr	r0, [pc, #20]	; (8042efc <MX_TIM1_Init+0xac>)
 8042ee6:	f00a fae5 	bl	804d4b4 <HAL_TIMEx_MasterConfigSynchronization>
 8042eea:	4603      	mov	r3, r0
 8042eec:	2b00      	cmp	r3, #0
 8042eee:	d001      	beq.n	8042ef4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8042ef0:	f7fe ff02 	bl	8041cf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8042ef4:	bf00      	nop
 8042ef6:	3730      	adds	r7, #48	; 0x30
 8042ef8:	46bd      	mov	sp, r7
 8042efa:	bd80      	pop	{r7, pc}
 8042efc:	20019250 	.word	0x20019250
 8042f00:	40012c00 	.word	0x40012c00

08042f04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8042f04:	b580      	push	{r7, lr}
 8042f06:	b08a      	sub	sp, #40	; 0x28
 8042f08:	af00      	add	r7, sp, #0
 8042f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8042f0c:	f107 0314 	add.w	r3, r7, #20
 8042f10:	2200      	movs	r2, #0
 8042f12:	601a      	str	r2, [r3, #0]
 8042f14:	605a      	str	r2, [r3, #4]
 8042f16:	609a      	str	r2, [r3, #8]
 8042f18:	60da      	str	r2, [r3, #12]
 8042f1a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8042f1c:	687b      	ldr	r3, [r7, #4]
 8042f1e:	681b      	ldr	r3, [r3, #0]
 8042f20:	4a27      	ldr	r2, [pc, #156]	; (8042fc0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8042f22:	4293      	cmp	r3, r2
 8042f24:	d148      	bne.n	8042fb8 <HAL_TIM_Encoder_MspInit+0xb4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8042f26:	4b27      	ldr	r3, [pc, #156]	; (8042fc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8042f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042f2a:	4a26      	ldr	r2, [pc, #152]	; (8042fc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8042f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8042f30:	6613      	str	r3, [r2, #96]	; 0x60
 8042f32:	4b24      	ldr	r3, [pc, #144]	; (8042fc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8042f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042f3a:	613b      	str	r3, [r7, #16]
 8042f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8042f3e:	4b21      	ldr	r3, [pc, #132]	; (8042fc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8042f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042f42:	4a20      	ldr	r2, [pc, #128]	; (8042fc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8042f44:	f043 0310 	orr.w	r3, r3, #16
 8042f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8042f4a:	4b1e      	ldr	r3, [pc, #120]	; (8042fc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8042f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042f4e:	f003 0310 	and.w	r3, r3, #16
 8042f52:	60fb      	str	r3, [r7, #12]
 8042f54:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_P_Pin|ENCODER_N_Pin;
 8042f56:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8042f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8042f5c:	2302      	movs	r3, #2
 8042f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8042f60:	2300      	movs	r3, #0
 8042f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8042f64:	2300      	movs	r3, #0
 8042f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8042f68:	2301      	movs	r3, #1
 8042f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8042f6c:	f107 0314 	add.w	r3, r7, #20
 8042f70:	4619      	mov	r1, r3
 8042f72:	4815      	ldr	r0, [pc, #84]	; (8042fc8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8042f74:	f005 fd3a 	bl	80489ec <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8042f78:	2200      	movs	r2, #0
 8042f7a:	2100      	movs	r1, #0
 8042f7c:	2029      	movs	r0, #41	; 0x29
 8042f7e:	f005 f9fb 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8042f82:	2029      	movs	r0, #41	; 0x29
 8042f84:	f005 fa12 	bl	80483ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8042f88:	2200      	movs	r2, #0
 8042f8a:	2100      	movs	r1, #0
 8042f8c:	202a      	movs	r0, #42	; 0x2a
 8042f8e:	f005 f9f3 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8042f92:	202a      	movs	r0, #42	; 0x2a
 8042f94:	f005 fa0a 	bl	80483ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8042f98:	2200      	movs	r2, #0
 8042f9a:	2100      	movs	r1, #0
 8042f9c:	202b      	movs	r0, #43	; 0x2b
 8042f9e:	f005 f9eb 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8042fa2:	202b      	movs	r0, #43	; 0x2b
 8042fa4:	f005 fa02 	bl	80483ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8042fa8:	2200      	movs	r2, #0
 8042faa:	2100      	movs	r1, #0
 8042fac:	202c      	movs	r0, #44	; 0x2c
 8042fae:	f005 f9e3 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8042fb2:	202c      	movs	r0, #44	; 0x2c
 8042fb4:	f005 f9fa 	bl	80483ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8042fb8:	bf00      	nop
 8042fba:	3728      	adds	r7, #40	; 0x28
 8042fbc:	46bd      	mov	sp, r7
 8042fbe:	bd80      	pop	{r7, pc}
 8042fc0:	40012c00 	.word	0x40012c00
 8042fc4:	40021000 	.word	0x40021000
 8042fc8:	42021000 	.word	0x42021000

08042fcc <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 8042fcc:	b480      	push	{r7}
 8042fce:	b083      	sub	sp, #12
 8042fd0:	af00      	add	r7, sp, #0
 8042fd2:	6078      	str	r0, [r7, #4]
 8042fd4:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 8042fd6:	687b      	ldr	r3, [r7, #4]
 8042fd8:	2200      	movs	r2, #0
 8042fda:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 8042fdc:	687b      	ldr	r3, [r7, #4]
 8042fde:	2200      	movs	r2, #0
 8042fe0:	605a      	str	r2, [r3, #4]
    obj->IsStarted = false;
 8042fe2:	687b      	ldr	r3, [r7, #4]
 8042fe4:	2200      	movs	r2, #0
 8042fe6:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 8042fe8:	687b      	ldr	r3, [r7, #4]
 8042fea:	2200      	movs	r2, #0
 8042fec:	725a      	strb	r2, [r3, #9]
    obj->Callback = callback;
 8042fee:	687b      	ldr	r3, [r7, #4]
 8042ff0:	683a      	ldr	r2, [r7, #0]
 8042ff2:	60da      	str	r2, [r3, #12]
    obj->Context = NULL;
 8042ff4:	687b      	ldr	r3, [r7, #4]
 8042ff6:	2200      	movs	r2, #0
 8042ff8:	611a      	str	r2, [r3, #16]
    obj->Next = NULL;
 8042ffa:	687b      	ldr	r3, [r7, #4]
 8042ffc:	2200      	movs	r2, #0
 8042ffe:	615a      	str	r2, [r3, #20]
}
 8043000:	bf00      	nop
 8043002:	370c      	adds	r7, #12
 8043004:	46bd      	mov	sp, r7
 8043006:	f85d 7b04 	ldr.w	r7, [sp], #4
 804300a:	4770      	bx	lr

0804300c <TimerStart>:
{
    obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 804300c:	b580      	push	{r7, lr}
 804300e:	b084      	sub	sp, #16
 8043010:	af00      	add	r7, sp, #0
 8043012:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 8043014:	2300      	movs	r3, #0
 8043016:	60fb      	str	r3, [r7, #12]

    CRITICAL_SECTION_BEGIN( );
 8043018:	f107 0308 	add.w	r3, r7, #8
 804301c:	4618      	mov	r0, r3
 804301e:	f002 f97d 	bl	804531c <BoardCriticalSectionBegin>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8043022:	687b      	ldr	r3, [r7, #4]
 8043024:	2b00      	cmp	r3, #0
 8043026:	d005      	beq.n	8043034 <TimerStart+0x28>
 8043028:	6878      	ldr	r0, [r7, #4]
 804302a:	f000 f989 	bl	8043340 <TimerExists>
 804302e:	4603      	mov	r3, r0
 8043030:	2b00      	cmp	r3, #0
 8043032:	d005      	beq.n	8043040 <TimerStart+0x34>
    {
        CRITICAL_SECTION_END( );
 8043034:	f107 0308 	add.w	r3, r7, #8
 8043038:	4618      	mov	r0, r3
 804303a:	f002 f981 	bl	8045340 <BoardCriticalSectionEnd>
 804303e:	e02f      	b.n	80430a0 <TimerStart+0x94>
        return;
    }

    obj->Timestamp = obj->ReloadValue;
 8043040:	687b      	ldr	r3, [r7, #4]
 8043042:	685a      	ldr	r2, [r3, #4]
 8043044:	687b      	ldr	r3, [r7, #4]
 8043046:	601a      	str	r2, [r3, #0]
    obj->IsStarted = true;
 8043048:	687b      	ldr	r3, [r7, #4]
 804304a:	2201      	movs	r2, #1
 804304c:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 804304e:	687b      	ldr	r3, [r7, #4]
 8043050:	2200      	movs	r2, #0
 8043052:	725a      	strb	r2, [r3, #9]

    if( TimerListHead == NULL )
 8043054:	4b14      	ldr	r3, [pc, #80]	; (80430a8 <TimerStart+0x9c>)
 8043056:	681b      	ldr	r3, [r3, #0]
 8043058:	2b00      	cmp	r3, #0
 804305a:	d105      	bne.n	8043068 <TimerStart+0x5c>
    {
        RtcSetTimerContext( );
 804305c:	f7fe ff94 	bl	8041f88 <RtcSetTimerContext>
        // Inserts a timer at time now + obj->Timestamp
        TimerInsertNewHeadTimer( obj );
 8043060:	6878      	ldr	r0, [r7, #4]
 8043062:	f000 f853 	bl	804310c <TimerInsertNewHeadTimer>
 8043066:	e016      	b.n	8043096 <TimerStart+0x8a>
    }
    else
    {
        elapsedTime = RtcGetTimerElapsedTime( );
 8043068:	f7ff f942 	bl	80422f0 <RtcGetTimerElapsedTime>
 804306c:	60f8      	str	r0, [r7, #12]
        obj->Timestamp += elapsedTime;
 804306e:	687b      	ldr	r3, [r7, #4]
 8043070:	681a      	ldr	r2, [r3, #0]
 8043072:	68fb      	ldr	r3, [r7, #12]
 8043074:	441a      	add	r2, r3
 8043076:	687b      	ldr	r3, [r7, #4]
 8043078:	601a      	str	r2, [r3, #0]

        if( obj->Timestamp < TimerListHead->Timestamp )
 804307a:	687b      	ldr	r3, [r7, #4]
 804307c:	681a      	ldr	r2, [r3, #0]
 804307e:	4b0a      	ldr	r3, [pc, #40]	; (80430a8 <TimerStart+0x9c>)
 8043080:	681b      	ldr	r3, [r3, #0]
 8043082:	681b      	ldr	r3, [r3, #0]
 8043084:	429a      	cmp	r2, r3
 8043086:	d203      	bcs.n	8043090 <TimerStart+0x84>
        {
            TimerInsertNewHeadTimer( obj );
 8043088:	6878      	ldr	r0, [r7, #4]
 804308a:	f000 f83f 	bl	804310c <TimerInsertNewHeadTimer>
 804308e:	e002      	b.n	8043096 <TimerStart+0x8a>
        }
        else
        {
            TimerInsertTimer( obj );
 8043090:	6878      	ldr	r0, [r7, #4]
 8043092:	f000 f80b 	bl	80430ac <TimerInsertTimer>
        }
    }
    CRITICAL_SECTION_END( );
 8043096:	f107 0308 	add.w	r3, r7, #8
 804309a:	4618      	mov	r0, r3
 804309c:	f002 f950 	bl	8045340 <BoardCriticalSectionEnd>
}
 80430a0:	3710      	adds	r7, #16
 80430a2:	46bd      	mov	sp, r7
 80430a4:	bd80      	pop	{r7, pc}
 80430a6:	bf00      	nop
 80430a8:	20018334 	.word	0x20018334

080430ac <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj )
{
 80430ac:	b480      	push	{r7}
 80430ae:	b085      	sub	sp, #20
 80430b0:	af00      	add	r7, sp, #0
 80430b2:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 80430b4:	4b14      	ldr	r3, [pc, #80]	; (8043108 <TimerInsertTimer+0x5c>)
 80430b6:	681b      	ldr	r3, [r3, #0]
 80430b8:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* next = TimerListHead->Next;
 80430ba:	4b13      	ldr	r3, [pc, #76]	; (8043108 <TimerInsertTimer+0x5c>)
 80430bc:	681b      	ldr	r3, [r3, #0]
 80430be:	695b      	ldr	r3, [r3, #20]
 80430c0:	60bb      	str	r3, [r7, #8]

    while( cur->Next != NULL )
 80430c2:	e012      	b.n	80430ea <TimerInsertTimer+0x3e>
    {
        if( obj->Timestamp > next->Timestamp )
 80430c4:	687b      	ldr	r3, [r7, #4]
 80430c6:	681a      	ldr	r2, [r3, #0]
 80430c8:	68bb      	ldr	r3, [r7, #8]
 80430ca:	681b      	ldr	r3, [r3, #0]
 80430cc:	429a      	cmp	r2, r3
 80430ce:	d905      	bls.n	80430dc <TimerInsertTimer+0x30>
        {
            cur = next;
 80430d0:	68bb      	ldr	r3, [r7, #8]
 80430d2:	60fb      	str	r3, [r7, #12]
            next = next->Next;
 80430d4:	68bb      	ldr	r3, [r7, #8]
 80430d6:	695b      	ldr	r3, [r3, #20]
 80430d8:	60bb      	str	r3, [r7, #8]
 80430da:	e006      	b.n	80430ea <TimerInsertTimer+0x3e>
        }
        else
        {
            cur->Next = obj;
 80430dc:	68fb      	ldr	r3, [r7, #12]
 80430de:	687a      	ldr	r2, [r7, #4]
 80430e0:	615a      	str	r2, [r3, #20]
            obj->Next = next;
 80430e2:	687b      	ldr	r3, [r7, #4]
 80430e4:	68ba      	ldr	r2, [r7, #8]
 80430e6:	615a      	str	r2, [r3, #20]
            return;
 80430e8:	e009      	b.n	80430fe <TimerInsertTimer+0x52>
    while( cur->Next != NULL )
 80430ea:	68fb      	ldr	r3, [r7, #12]
 80430ec:	695b      	ldr	r3, [r3, #20]
 80430ee:	2b00      	cmp	r3, #0
 80430f0:	d1e8      	bne.n	80430c4 <TimerInsertTimer+0x18>
        }
    }
    cur->Next = obj;
 80430f2:	68fb      	ldr	r3, [r7, #12]
 80430f4:	687a      	ldr	r2, [r7, #4]
 80430f6:	615a      	str	r2, [r3, #20]
    obj->Next = NULL;
 80430f8:	687b      	ldr	r3, [r7, #4]
 80430fa:	2200      	movs	r2, #0
 80430fc:	615a      	str	r2, [r3, #20]
}
 80430fe:	3714      	adds	r7, #20
 8043100:	46bd      	mov	sp, r7
 8043102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043106:	4770      	bx	lr
 8043108:	20018334 	.word	0x20018334

0804310c <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 804310c:	b580      	push	{r7, lr}
 804310e:	b084      	sub	sp, #16
 8043110:	af00      	add	r7, sp, #0
 8043112:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8043114:	4b0b      	ldr	r3, [pc, #44]	; (8043144 <TimerInsertNewHeadTimer+0x38>)
 8043116:	681b      	ldr	r3, [r3, #0]
 8043118:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 804311a:	68fb      	ldr	r3, [r7, #12]
 804311c:	2b00      	cmp	r3, #0
 804311e:	d002      	beq.n	8043126 <TimerInsertNewHeadTimer+0x1a>
    {
        cur->IsNext2Expire = false;
 8043120:	68fb      	ldr	r3, [r7, #12]
 8043122:	2200      	movs	r2, #0
 8043124:	725a      	strb	r2, [r3, #9]
    }

    obj->Next = cur;
 8043126:	687b      	ldr	r3, [r7, #4]
 8043128:	68fa      	ldr	r2, [r7, #12]
 804312a:	615a      	str	r2, [r3, #20]
    TimerListHead = obj;
 804312c:	4a05      	ldr	r2, [pc, #20]	; (8043144 <TimerInsertNewHeadTimer+0x38>)
 804312e:	687b      	ldr	r3, [r7, #4]
 8043130:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 8043132:	4b04      	ldr	r3, [pc, #16]	; (8043144 <TimerInsertNewHeadTimer+0x38>)
 8043134:	681b      	ldr	r3, [r3, #0]
 8043136:	4618      	mov	r0, r3
 8043138:	f000 f96a 	bl	8043410 <TimerSetTimeout>
}
 804313c:	bf00      	nop
 804313e:	3710      	adds	r7, #16
 8043140:	46bd      	mov	sp, r7
 8043142:	bd80      	pop	{r7, pc}
 8043144:	20018334 	.word	0x20018334

08043148 <TimerIrqHandler>:
{
    return obj->IsStarted;
}

void TimerIrqHandler( void )
{
 8043148:	b590      	push	{r4, r7, lr}
 804314a:	b087      	sub	sp, #28
 804314c:	af00      	add	r7, sp, #0
    TimerEvent_t* cur;
    TimerEvent_t* next;

    uint32_t old =  RtcGetTimerContext( );
 804314e:	f7fe ff2f 	bl	8041fb0 <RtcGetTimerContext>
 8043152:	6138      	str	r0, [r7, #16]
    uint32_t now =  RtcSetTimerContext( );
 8043154:	f7fe ff18 	bl	8041f88 <RtcSetTimerContext>
 8043158:	60f8      	str	r0, [r7, #12]
    uint32_t deltaContext = now - old; // intentional wrap around
 804315a:	68fa      	ldr	r2, [r7, #12]
 804315c:	693b      	ldr	r3, [r7, #16]
 804315e:	1ad3      	subs	r3, r2, r3
 8043160:	60bb      	str	r3, [r7, #8]

    // Update timeStamp based upon new Time Reference
    // because delta context should never exceed 2^32
    if( TimerListHead != NULL )
 8043162:	4b39      	ldr	r3, [pc, #228]	; (8043248 <TimerIrqHandler+0x100>)
 8043164:	681b      	ldr	r3, [r3, #0]
 8043166:	2b00      	cmp	r3, #0
 8043168:	d01c      	beq.n	80431a4 <TimerIrqHandler+0x5c>
    {
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 804316a:	4b37      	ldr	r3, [pc, #220]	; (8043248 <TimerIrqHandler+0x100>)
 804316c:	681b      	ldr	r3, [r3, #0]
 804316e:	617b      	str	r3, [r7, #20]
 8043170:	e014      	b.n	804319c <TimerIrqHandler+0x54>
        {
            next = cur->Next;
 8043172:	697b      	ldr	r3, [r7, #20]
 8043174:	695b      	ldr	r3, [r3, #20]
 8043176:	607b      	str	r3, [r7, #4]
            if( next->Timestamp > deltaContext )
 8043178:	687b      	ldr	r3, [r7, #4]
 804317a:	681b      	ldr	r3, [r3, #0]
 804317c:	68ba      	ldr	r2, [r7, #8]
 804317e:	429a      	cmp	r2, r3
 8043180:	d206      	bcs.n	8043190 <TimerIrqHandler+0x48>
            {
                next->Timestamp -= deltaContext;
 8043182:	687b      	ldr	r3, [r7, #4]
 8043184:	681a      	ldr	r2, [r3, #0]
 8043186:	68bb      	ldr	r3, [r7, #8]
 8043188:	1ad2      	subs	r2, r2, r3
 804318a:	687b      	ldr	r3, [r7, #4]
 804318c:	601a      	str	r2, [r3, #0]
 804318e:	e002      	b.n	8043196 <TimerIrqHandler+0x4e>
            }
            else
            {
                next->Timestamp = 0;
 8043190:	687b      	ldr	r3, [r7, #4]
 8043192:	2200      	movs	r2, #0
 8043194:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8043196:	697b      	ldr	r3, [r7, #20]
 8043198:	695b      	ldr	r3, [r3, #20]
 804319a:	617b      	str	r3, [r7, #20]
 804319c:	697b      	ldr	r3, [r7, #20]
 804319e:	695b      	ldr	r3, [r3, #20]
 80431a0:	2b00      	cmp	r3, #0
 80431a2:	d1e6      	bne.n	8043172 <TimerIrqHandler+0x2a>
            }
        }
    }

    // Execute immediately the alarm callback
    if ( TimerListHead != NULL )
 80431a4:	4b28      	ldr	r3, [pc, #160]	; (8043248 <TimerIrqHandler+0x100>)
 80431a6:	681b      	ldr	r3, [r3, #0]
 80431a8:	2b00      	cmp	r3, #0
 80431aa:	d02c      	beq.n	8043206 <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 80431ac:	4b26      	ldr	r3, [pc, #152]	; (8043248 <TimerIrqHandler+0x100>)
 80431ae:	681b      	ldr	r3, [r3, #0]
 80431b0:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 80431b2:	4b25      	ldr	r3, [pc, #148]	; (8043248 <TimerIrqHandler+0x100>)
 80431b4:	681b      	ldr	r3, [r3, #0]
 80431b6:	695b      	ldr	r3, [r3, #20]
 80431b8:	4a23      	ldr	r2, [pc, #140]	; (8043248 <TimerIrqHandler+0x100>)
 80431ba:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 80431bc:	697b      	ldr	r3, [r7, #20]
 80431be:	2200      	movs	r2, #0
 80431c0:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80431c2:	697b      	ldr	r3, [r7, #20]
 80431c4:	68db      	ldr	r3, [r3, #12]
 80431c6:	2b00      	cmp	r3, #0
 80431c8:	d100      	bne.n	80431cc <TimerIrqHandler+0x84>
 80431ca:	e7fe      	b.n	80431ca <TimerIrqHandler+0x82>
 80431cc:	697b      	ldr	r3, [r7, #20]
 80431ce:	68db      	ldr	r3, [r3, #12]
 80431d0:	697a      	ldr	r2, [r7, #20]
 80431d2:	6912      	ldr	r2, [r2, #16]
 80431d4:	4610      	mov	r0, r2
 80431d6:	4798      	blx	r3
    }

    // Remove all the expired object from the list
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80431d8:	e015      	b.n	8043206 <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 80431da:	4b1b      	ldr	r3, [pc, #108]	; (8043248 <TimerIrqHandler+0x100>)
 80431dc:	681b      	ldr	r3, [r3, #0]
 80431de:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 80431e0:	4b19      	ldr	r3, [pc, #100]	; (8043248 <TimerIrqHandler+0x100>)
 80431e2:	681b      	ldr	r3, [r3, #0]
 80431e4:	695b      	ldr	r3, [r3, #20]
 80431e6:	4a18      	ldr	r2, [pc, #96]	; (8043248 <TimerIrqHandler+0x100>)
 80431e8:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 80431ea:	697b      	ldr	r3, [r7, #20]
 80431ec:	2200      	movs	r2, #0
 80431ee:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80431f0:	697b      	ldr	r3, [r7, #20]
 80431f2:	68db      	ldr	r3, [r3, #12]
 80431f4:	2b00      	cmp	r3, #0
 80431f6:	d100      	bne.n	80431fa <TimerIrqHandler+0xb2>
 80431f8:	e7fe      	b.n	80431f8 <TimerIrqHandler+0xb0>
 80431fa:	697b      	ldr	r3, [r7, #20]
 80431fc:	68db      	ldr	r3, [r3, #12]
 80431fe:	697a      	ldr	r2, [r7, #20]
 8043200:	6912      	ldr	r2, [r2, #16]
 8043202:	4610      	mov	r0, r2
 8043204:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8043206:	4b10      	ldr	r3, [pc, #64]	; (8043248 <TimerIrqHandler+0x100>)
 8043208:	681b      	ldr	r3, [r3, #0]
 804320a:	2b00      	cmp	r3, #0
 804320c:	d007      	beq.n	804321e <TimerIrqHandler+0xd6>
 804320e:	4b0e      	ldr	r3, [pc, #56]	; (8043248 <TimerIrqHandler+0x100>)
 8043210:	681b      	ldr	r3, [r3, #0]
 8043212:	681c      	ldr	r4, [r3, #0]
 8043214:	f7ff f86c 	bl	80422f0 <RtcGetTimerElapsedTime>
 8043218:	4603      	mov	r3, r0
 804321a:	429c      	cmp	r4, r3
 804321c:	d3dd      	bcc.n	80431da <TimerIrqHandler+0x92>
    }

    // Start the next TimerListHead if it exists AND NOT running
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 804321e:	4b0a      	ldr	r3, [pc, #40]	; (8043248 <TimerIrqHandler+0x100>)
 8043220:	681b      	ldr	r3, [r3, #0]
 8043222:	2b00      	cmp	r3, #0
 8043224:	d00c      	beq.n	8043240 <TimerIrqHandler+0xf8>
 8043226:	4b08      	ldr	r3, [pc, #32]	; (8043248 <TimerIrqHandler+0x100>)
 8043228:	681b      	ldr	r3, [r3, #0]
 804322a:	7a5b      	ldrb	r3, [r3, #9]
 804322c:	f083 0301 	eor.w	r3, r3, #1
 8043230:	b2db      	uxtb	r3, r3
 8043232:	2b00      	cmp	r3, #0
 8043234:	d004      	beq.n	8043240 <TimerIrqHandler+0xf8>
    {
        TimerSetTimeout( TimerListHead );
 8043236:	4b04      	ldr	r3, [pc, #16]	; (8043248 <TimerIrqHandler+0x100>)
 8043238:	681b      	ldr	r3, [r3, #0]
 804323a:	4618      	mov	r0, r3
 804323c:	f000 f8e8 	bl	8043410 <TimerSetTimeout>
    }
}
 8043240:	bf00      	nop
 8043242:	371c      	adds	r7, #28
 8043244:	46bd      	mov	sp, r7
 8043246:	bd90      	pop	{r4, r7, pc}
 8043248:	20018334 	.word	0x20018334

0804324c <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 804324c:	b580      	push	{r7, lr}
 804324e:	b086      	sub	sp, #24
 8043250:	af00      	add	r7, sp, #0
 8043252:	6078      	str	r0, [r7, #4]
    CRITICAL_SECTION_BEGIN( );
 8043254:	f107 030c 	add.w	r3, r7, #12
 8043258:	4618      	mov	r0, r3
 804325a:	f002 f85f 	bl	804531c <BoardCriticalSectionBegin>

    TimerEvent_t* prev = TimerListHead;
 804325e:	4b37      	ldr	r3, [pc, #220]	; (804333c <TimerStop+0xf0>)
 8043260:	681b      	ldr	r3, [r3, #0]
 8043262:	617b      	str	r3, [r7, #20]
    TimerEvent_t* cur = TimerListHead;
 8043264:	4b35      	ldr	r3, [pc, #212]	; (804333c <TimerStop+0xf0>)
 8043266:	681b      	ldr	r3, [r3, #0]
 8043268:	613b      	str	r3, [r7, #16]

    // List is empty or the obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 804326a:	4b34      	ldr	r3, [pc, #208]	; (804333c <TimerStop+0xf0>)
 804326c:	681b      	ldr	r3, [r3, #0]
 804326e:	2b00      	cmp	r3, #0
 8043270:	d002      	beq.n	8043278 <TimerStop+0x2c>
 8043272:	687b      	ldr	r3, [r7, #4]
 8043274:	2b00      	cmp	r3, #0
 8043276:	d105      	bne.n	8043284 <TimerStop+0x38>
    {
        CRITICAL_SECTION_END( );
 8043278:	f107 030c 	add.w	r3, r7, #12
 804327c:	4618      	mov	r0, r3
 804327e:	f002 f85f 	bl	8045340 <BoardCriticalSectionEnd>
 8043282:	e057      	b.n	8043334 <TimerStop+0xe8>
        return;
    }

    obj->IsStarted = false;
 8043284:	687b      	ldr	r3, [r7, #4]
 8043286:	2200      	movs	r2, #0
 8043288:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == obj ) // Stop the Head
 804328a:	4b2c      	ldr	r3, [pc, #176]	; (804333c <TimerStop+0xf0>)
 804328c:	681b      	ldr	r3, [r3, #0]
 804328e:	687a      	ldr	r2, [r7, #4]
 8043290:	429a      	cmp	r2, r3
 8043292:	d147      	bne.n	8043324 <TimerStop+0xd8>
    {
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8043294:	4b29      	ldr	r3, [pc, #164]	; (804333c <TimerStop+0xf0>)
 8043296:	681b      	ldr	r3, [r3, #0]
 8043298:	7a5b      	ldrb	r3, [r3, #9]
 804329a:	2b00      	cmp	r3, #0
 804329c:	d019      	beq.n	80432d2 <TimerStop+0x86>
        {
            TimerListHead->IsNext2Expire = false;
 804329e:	4b27      	ldr	r3, [pc, #156]	; (804333c <TimerStop+0xf0>)
 80432a0:	681b      	ldr	r3, [r3, #0]
 80432a2:	2200      	movs	r2, #0
 80432a4:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 80432a6:	4b25      	ldr	r3, [pc, #148]	; (804333c <TimerStop+0xf0>)
 80432a8:	681b      	ldr	r3, [r3, #0]
 80432aa:	695b      	ldr	r3, [r3, #20]
 80432ac:	2b00      	cmp	r3, #0
 80432ae:	d00a      	beq.n	80432c6 <TimerStop+0x7a>
            {
                TimerListHead = TimerListHead->Next;
 80432b0:	4b22      	ldr	r3, [pc, #136]	; (804333c <TimerStop+0xf0>)
 80432b2:	681b      	ldr	r3, [r3, #0]
 80432b4:	695b      	ldr	r3, [r3, #20]
 80432b6:	4a21      	ldr	r2, [pc, #132]	; (804333c <TimerStop+0xf0>)
 80432b8:	6013      	str	r3, [r2, #0]
                TimerSetTimeout( TimerListHead );
 80432ba:	4b20      	ldr	r3, [pc, #128]	; (804333c <TimerStop+0xf0>)
 80432bc:	681b      	ldr	r3, [r3, #0]
 80432be:	4618      	mov	r0, r3
 80432c0:	f000 f8a6 	bl	8043410 <TimerSetTimeout>
 80432c4:	e031      	b.n	804332a <TimerStop+0xde>
            }
            else
            {
                RtcStopAlarm( );
 80432c6:	f7fe fef7 	bl	80420b8 <RtcStopAlarm>
                TimerListHead = NULL;
 80432ca:	4b1c      	ldr	r3, [pc, #112]	; (804333c <TimerStop+0xf0>)
 80432cc:	2200      	movs	r2, #0
 80432ce:	601a      	str	r2, [r3, #0]
 80432d0:	e02b      	b.n	804332a <TimerStop+0xde>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 80432d2:	4b1a      	ldr	r3, [pc, #104]	; (804333c <TimerStop+0xf0>)
 80432d4:	681b      	ldr	r3, [r3, #0]
 80432d6:	695b      	ldr	r3, [r3, #20]
 80432d8:	2b00      	cmp	r3, #0
 80432da:	d005      	beq.n	80432e8 <TimerStop+0x9c>
            {
                TimerListHead = TimerListHead->Next;
 80432dc:	4b17      	ldr	r3, [pc, #92]	; (804333c <TimerStop+0xf0>)
 80432de:	681b      	ldr	r3, [r3, #0]
 80432e0:	695b      	ldr	r3, [r3, #20]
 80432e2:	4a16      	ldr	r2, [pc, #88]	; (804333c <TimerStop+0xf0>)
 80432e4:	6013      	str	r3, [r2, #0]
 80432e6:	e020      	b.n	804332a <TimerStop+0xde>
            }
            else
            {
                TimerListHead = NULL;
 80432e8:	4b14      	ldr	r3, [pc, #80]	; (804333c <TimerStop+0xf0>)
 80432ea:	2200      	movs	r2, #0
 80432ec:	601a      	str	r2, [r3, #0]
 80432ee:	e01c      	b.n	804332a <TimerStop+0xde>
    }
    else // Stop an object within the list
    {
        while( cur != NULL )
        {
            if( cur == obj )
 80432f0:	693a      	ldr	r2, [r7, #16]
 80432f2:	687b      	ldr	r3, [r7, #4]
 80432f4:	429a      	cmp	r2, r3
 80432f6:	d110      	bne.n	804331a <TimerStop+0xce>
            {
                if( cur->Next != NULL )
 80432f8:	693b      	ldr	r3, [r7, #16]
 80432fa:	695b      	ldr	r3, [r3, #20]
 80432fc:	2b00      	cmp	r3, #0
 80432fe:	d006      	beq.n	804330e <TimerStop+0xc2>
                {
                    cur = cur->Next;
 8043300:	693b      	ldr	r3, [r7, #16]
 8043302:	695b      	ldr	r3, [r3, #20]
 8043304:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8043306:	697b      	ldr	r3, [r7, #20]
 8043308:	693a      	ldr	r2, [r7, #16]
 804330a:	615a      	str	r2, [r3, #20]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 804330c:	e00d      	b.n	804332a <TimerStop+0xde>
                    cur = NULL;
 804330e:	2300      	movs	r3, #0
 8043310:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8043312:	697b      	ldr	r3, [r7, #20]
 8043314:	693a      	ldr	r2, [r7, #16]
 8043316:	615a      	str	r2, [r3, #20]
                break;
 8043318:	e007      	b.n	804332a <TimerStop+0xde>
            }
            else
            {
                prev = cur;
 804331a:	693b      	ldr	r3, [r7, #16]
 804331c:	617b      	str	r3, [r7, #20]
                cur = cur->Next;
 804331e:	693b      	ldr	r3, [r7, #16]
 8043320:	695b      	ldr	r3, [r3, #20]
 8043322:	613b      	str	r3, [r7, #16]
        while( cur != NULL )
 8043324:	693b      	ldr	r3, [r7, #16]
 8043326:	2b00      	cmp	r3, #0
 8043328:	d1e2      	bne.n	80432f0 <TimerStop+0xa4>
            }
        }
    }
    CRITICAL_SECTION_END( );
 804332a:	f107 030c 	add.w	r3, r7, #12
 804332e:	4618      	mov	r0, r3
 8043330:	f002 f806 	bl	8045340 <BoardCriticalSectionEnd>
}
 8043334:	3718      	adds	r7, #24
 8043336:	46bd      	mov	sp, r7
 8043338:	bd80      	pop	{r7, pc}
 804333a:	bf00      	nop
 804333c:	20018334 	.word	0x20018334

08043340 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8043340:	b480      	push	{r7}
 8043342:	b085      	sub	sp, #20
 8043344:	af00      	add	r7, sp, #0
 8043346:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8043348:	4b0b      	ldr	r3, [pc, #44]	; (8043378 <TimerExists+0x38>)
 804334a:	681b      	ldr	r3, [r3, #0]
 804334c:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 804334e:	e008      	b.n	8043362 <TimerExists+0x22>
    {
        if( cur == obj )
 8043350:	68fa      	ldr	r2, [r7, #12]
 8043352:	687b      	ldr	r3, [r7, #4]
 8043354:	429a      	cmp	r2, r3
 8043356:	d101      	bne.n	804335c <TimerExists+0x1c>
        {
            return true;
 8043358:	2301      	movs	r3, #1
 804335a:	e006      	b.n	804336a <TimerExists+0x2a>
        }
        cur = cur->Next;
 804335c:	68fb      	ldr	r3, [r7, #12]
 804335e:	695b      	ldr	r3, [r3, #20]
 8043360:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 8043362:	68fb      	ldr	r3, [r7, #12]
 8043364:	2b00      	cmp	r3, #0
 8043366:	d1f3      	bne.n	8043350 <TimerExists+0x10>
    }
    return false;
 8043368:	2300      	movs	r3, #0
}
 804336a:	4618      	mov	r0, r3
 804336c:	3714      	adds	r7, #20
 804336e:	46bd      	mov	sp, r7
 8043370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043374:	4770      	bx	lr
 8043376:	bf00      	nop
 8043378:	20018334 	.word	0x20018334

0804337c <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 804337c:	b580      	push	{r7, lr}
 804337e:	b084      	sub	sp, #16
 8043380:	af00      	add	r7, sp, #0
 8043382:	6078      	str	r0, [r7, #4]
 8043384:	6039      	str	r1, [r7, #0]
    uint32_t minValue = 0;
 8043386:	2300      	movs	r3, #0
 8043388:	60bb      	str	r3, [r7, #8]
    uint32_t ticks = RtcMs2Tick( value );
 804338a:	6838      	ldr	r0, [r7, #0]
 804338c:	f7fe fe24 	bl	8041fd8 <RtcMs2Tick>
 8043390:	60f8      	str	r0, [r7, #12]

    TimerStop( obj );
 8043392:	6878      	ldr	r0, [r7, #4]
 8043394:	f7ff ff5a 	bl	804324c <TimerStop>

    minValue = RtcGetMinimumTimeout( );
 8043398:	f7fe fe16 	bl	8041fc8 <RtcGetMinimumTimeout>
 804339c:	60b8      	str	r0, [r7, #8]

    if( ticks < minValue )
 804339e:	68fa      	ldr	r2, [r7, #12]
 80433a0:	68bb      	ldr	r3, [r7, #8]
 80433a2:	429a      	cmp	r2, r3
 80433a4:	d201      	bcs.n	80433aa <TimerSetValue+0x2e>
    {
        ticks = minValue;
 80433a6:	68bb      	ldr	r3, [r7, #8]
 80433a8:	60fb      	str	r3, [r7, #12]
    }

    obj->Timestamp = ticks;
 80433aa:	687b      	ldr	r3, [r7, #4]
 80433ac:	68fa      	ldr	r2, [r7, #12]
 80433ae:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = ticks;
 80433b0:	687b      	ldr	r3, [r7, #4]
 80433b2:	68fa      	ldr	r2, [r7, #12]
 80433b4:	605a      	str	r2, [r3, #4]
}
 80433b6:	bf00      	nop
 80433b8:	3710      	adds	r7, #16
 80433ba:	46bd      	mov	sp, r7
 80433bc:	bd80      	pop	{r7, pc}

080433be <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 80433be:	b580      	push	{r7, lr}
 80433c0:	b082      	sub	sp, #8
 80433c2:	af00      	add	r7, sp, #0
    uint32_t now = RtcGetTimerValue( );
 80433c4:	f7fe ff80 	bl	80422c8 <RtcGetTimerValue>
 80433c8:	6078      	str	r0, [r7, #4]
    return  RtcTick2Ms( now );
 80433ca:	6878      	ldr	r0, [r7, #4]
 80433cc:	f7fe fe21 	bl	8042012 <RtcTick2Ms>
 80433d0:	4603      	mov	r3, r0
}
 80433d2:	4618      	mov	r0, r3
 80433d4:	3708      	adds	r7, #8
 80433d6:	46bd      	mov	sp, r7
 80433d8:	bd80      	pop	{r7, pc}

080433da <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 80433da:	b580      	push	{r7, lr}
 80433dc:	b084      	sub	sp, #16
 80433de:	af00      	add	r7, sp, #0
 80433e0:	6078      	str	r0, [r7, #4]
    if ( past == 0 )
 80433e2:	687b      	ldr	r3, [r7, #4]
 80433e4:	2b00      	cmp	r3, #0
 80433e6:	d101      	bne.n	80433ec <TimerGetElapsedTime+0x12>
    {
        return 0;
 80433e8:	2300      	movs	r3, #0
 80433ea:	e00d      	b.n	8043408 <TimerGetElapsedTime+0x2e>
    }
    uint32_t nowInTicks = RtcGetTimerValue( );
 80433ec:	f7fe ff6c 	bl	80422c8 <RtcGetTimerValue>
 80433f0:	60f8      	str	r0, [r7, #12]
    uint32_t pastInTicks = RtcMs2Tick( past );
 80433f2:	6878      	ldr	r0, [r7, #4]
 80433f4:	f7fe fdf0 	bl	8041fd8 <RtcMs2Tick>
 80433f8:	60b8      	str	r0, [r7, #8]

    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
 80433fa:	68fa      	ldr	r2, [r7, #12]
 80433fc:	68bb      	ldr	r3, [r7, #8]
 80433fe:	1ad3      	subs	r3, r2, r3
 8043400:	4618      	mov	r0, r3
 8043402:	f7fe fe06 	bl	8042012 <RtcTick2Ms>
 8043406:	4603      	mov	r3, r0
}
 8043408:	4618      	mov	r0, r3
 804340a:	3710      	adds	r7, #16
 804340c:	46bd      	mov	sp, r7
 804340e:	bd80      	pop	{r7, pc}

08043410 <TimerSetTimeout>:

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8043410:	b590      	push	{r4, r7, lr}
 8043412:	b085      	sub	sp, #20
 8043414:	af00      	add	r7, sp, #0
 8043416:	6078      	str	r0, [r7, #4]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8043418:	f7fe fdd6 	bl	8041fc8 <RtcGetMinimumTimeout>
 804341c:	4603      	mov	r3, r0
 804341e:	60fb      	str	r3, [r7, #12]
    obj->IsNext2Expire = true;
 8043420:	687b      	ldr	r3, [r7, #4]
 8043422:	2201      	movs	r2, #1
 8043424:	725a      	strb	r2, [r3, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8043426:	687b      	ldr	r3, [r7, #4]
 8043428:	681c      	ldr	r4, [r3, #0]
 804342a:	f7fe ff61 	bl	80422f0 <RtcGetTimerElapsedTime>
 804342e:	4602      	mov	r2, r0
 8043430:	68fb      	ldr	r3, [r7, #12]
 8043432:	4413      	add	r3, r2
 8043434:	429c      	cmp	r4, r3
 8043436:	d206      	bcs.n	8043446 <TimerSetTimeout+0x36>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8043438:	f7fe ff5a 	bl	80422f0 <RtcGetTimerElapsedTime>
 804343c:	4602      	mov	r2, r0
 804343e:	68fb      	ldr	r3, [r7, #12]
 8043440:	441a      	add	r2, r3
 8043442:	687b      	ldr	r3, [r7, #4]
 8043444:	601a      	str	r2, [r3, #0]
    }
    RtcSetAlarm( obj->Timestamp );
 8043446:	687b      	ldr	r3, [r7, #4]
 8043448:	681b      	ldr	r3, [r3, #0]
 804344a:	4618      	mov	r0, r3
 804344c:	f7fe fdfe 	bl	804204c <RtcSetAlarm>
}
 8043450:	bf00      	nop
 8043452:	3714      	adds	r7, #20
 8043454:	46bd      	mov	sp, r7
 8043456:	bd90      	pop	{r4, r7, pc}

08043458 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8043458:	b580      	push	{r7, lr}
 804345a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 804345c:	4b22      	ldr	r3, [pc, #136]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 804345e:	4a23      	ldr	r2, [pc, #140]	; (80434ec <MX_LPUART1_UART_Init+0x94>)
 8043460:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8043462:	4b21      	ldr	r3, [pc, #132]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 8043464:	4a22      	ldr	r2, [pc, #136]	; (80434f0 <MX_LPUART1_UART_Init+0x98>)
 8043466:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8043468:	4b1f      	ldr	r3, [pc, #124]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 804346a:	2200      	movs	r2, #0
 804346c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 804346e:	4b1e      	ldr	r3, [pc, #120]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 8043470:	2200      	movs	r2, #0
 8043472:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8043474:	4b1c      	ldr	r3, [pc, #112]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 8043476:	2200      	movs	r2, #0
 8043478:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 804347a:	4b1b      	ldr	r3, [pc, #108]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 804347c:	220c      	movs	r2, #12
 804347e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8043480:	4b19      	ldr	r3, [pc, #100]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 8043482:	2200      	movs	r2, #0
 8043484:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8043486:	4b18      	ldr	r3, [pc, #96]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 8043488:	2200      	movs	r2, #0
 804348a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 804348c:	4b16      	ldr	r3, [pc, #88]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 804348e:	2200      	movs	r2, #0
 8043490:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8043492:	4b15      	ldr	r3, [pc, #84]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 8043494:	2200      	movs	r2, #0
 8043496:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8043498:	4b13      	ldr	r3, [pc, #76]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 804349a:	2200      	movs	r2, #0
 804349c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 804349e:	4812      	ldr	r0, [pc, #72]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 80434a0:	f00a f8b8 	bl	804d614 <HAL_UART_Init>
 80434a4:	4603      	mov	r3, r0
 80434a6:	2b00      	cmp	r3, #0
 80434a8:	d001      	beq.n	80434ae <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 80434aa:	f7fe fc25 	bl	8041cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80434ae:	2100      	movs	r1, #0
 80434b0:	480d      	ldr	r0, [pc, #52]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 80434b2:	f00b f84d 	bl	804e550 <HAL_UARTEx_SetTxFifoThreshold>
 80434b6:	4603      	mov	r3, r0
 80434b8:	2b00      	cmp	r3, #0
 80434ba:	d001      	beq.n	80434c0 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80434bc:	f7fe fc1c 	bl	8041cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80434c0:	2100      	movs	r1, #0
 80434c2:	4809      	ldr	r0, [pc, #36]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 80434c4:	f00b f882 	bl	804e5cc <HAL_UARTEx_SetRxFifoThreshold>
 80434c8:	4603      	mov	r3, r0
 80434ca:	2b00      	cmp	r3, #0
 80434cc:	d001      	beq.n	80434d2 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80434ce:	f7fe fc13 	bl	8041cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80434d2:	4805      	ldr	r0, [pc, #20]	; (80434e8 <MX_LPUART1_UART_Init+0x90>)
 80434d4:	f00b f803 	bl	804e4de <HAL_UARTEx_DisableFifoMode>
 80434d8:	4603      	mov	r3, r0
 80434da:	2b00      	cmp	r3, #0
 80434dc:	d001      	beq.n	80434e2 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80434de:	f7fe fc0b 	bl	8041cf8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80434e2:	bf00      	nop
 80434e4:	bd80      	pop	{r7, pc}
 80434e6:	bf00      	nop
 80434e8:	2001946c 	.word	0x2001946c
 80434ec:	40008000 	.word	0x40008000
 80434f0:	00033324 	.word	0x00033324

080434f4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80434f4:	b580      	push	{r7, lr}
 80434f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80434f8:	4b22      	ldr	r3, [pc, #136]	; (8043584 <MX_USART3_UART_Init+0x90>)
 80434fa:	4a23      	ldr	r2, [pc, #140]	; (8043588 <MX_USART3_UART_Init+0x94>)
 80434fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80434fe:	4b21      	ldr	r3, [pc, #132]	; (8043584 <MX_USART3_UART_Init+0x90>)
 8043500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8043504:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8043506:	4b1f      	ldr	r3, [pc, #124]	; (8043584 <MX_USART3_UART_Init+0x90>)
 8043508:	2200      	movs	r2, #0
 804350a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 804350c:	4b1d      	ldr	r3, [pc, #116]	; (8043584 <MX_USART3_UART_Init+0x90>)
 804350e:	2200      	movs	r2, #0
 8043510:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8043512:	4b1c      	ldr	r3, [pc, #112]	; (8043584 <MX_USART3_UART_Init+0x90>)
 8043514:	2200      	movs	r2, #0
 8043516:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8043518:	4b1a      	ldr	r3, [pc, #104]	; (8043584 <MX_USART3_UART_Init+0x90>)
 804351a:	220c      	movs	r2, #12
 804351c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804351e:	4b19      	ldr	r3, [pc, #100]	; (8043584 <MX_USART3_UART_Init+0x90>)
 8043520:	2200      	movs	r2, #0
 8043522:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8043524:	4b17      	ldr	r3, [pc, #92]	; (8043584 <MX_USART3_UART_Init+0x90>)
 8043526:	2200      	movs	r2, #0
 8043528:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 804352a:	4b16      	ldr	r3, [pc, #88]	; (8043584 <MX_USART3_UART_Init+0x90>)
 804352c:	2200      	movs	r2, #0
 804352e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8043530:	4b14      	ldr	r3, [pc, #80]	; (8043584 <MX_USART3_UART_Init+0x90>)
 8043532:	2200      	movs	r2, #0
 8043534:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8043536:	4b13      	ldr	r3, [pc, #76]	; (8043584 <MX_USART3_UART_Init+0x90>)
 8043538:	2200      	movs	r2, #0
 804353a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 804353c:	4811      	ldr	r0, [pc, #68]	; (8043584 <MX_USART3_UART_Init+0x90>)
 804353e:	f00a f869 	bl	804d614 <HAL_UART_Init>
 8043542:	4603      	mov	r3, r0
 8043544:	2b00      	cmp	r3, #0
 8043546:	d001      	beq.n	804354c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8043548:	f7fe fbd6 	bl	8041cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 804354c:	2100      	movs	r1, #0
 804354e:	480d      	ldr	r0, [pc, #52]	; (8043584 <MX_USART3_UART_Init+0x90>)
 8043550:	f00a fffe 	bl	804e550 <HAL_UARTEx_SetTxFifoThreshold>
 8043554:	4603      	mov	r3, r0
 8043556:	2b00      	cmp	r3, #0
 8043558:	d001      	beq.n	804355e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 804355a:	f7fe fbcd 	bl	8041cf8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 804355e:	2100      	movs	r1, #0
 8043560:	4808      	ldr	r0, [pc, #32]	; (8043584 <MX_USART3_UART_Init+0x90>)
 8043562:	f00b f833 	bl	804e5cc <HAL_UARTEx_SetRxFifoThreshold>
 8043566:	4603      	mov	r3, r0
 8043568:	2b00      	cmp	r3, #0
 804356a:	d001      	beq.n	8043570 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 804356c:	f7fe fbc4 	bl	8041cf8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8043570:	4804      	ldr	r0, [pc, #16]	; (8043584 <MX_USART3_UART_Init+0x90>)
 8043572:	f00a ffb4 	bl	804e4de <HAL_UARTEx_DisableFifoMode>
 8043576:	4603      	mov	r3, r0
 8043578:	2b00      	cmp	r3, #0
 804357a:	d001      	beq.n	8043580 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 804357c:	f7fe fbbc 	bl	8041cf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8043580:	bf00      	nop
 8043582:	bd80      	pop	{r7, pc}
 8043584:	20019374 	.word	0x20019374
 8043588:	40004800 	.word	0x40004800

0804358c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 804358c:	b580      	push	{r7, lr}
 804358e:	b0b0      	sub	sp, #192	; 0xc0
 8043590:	af00      	add	r7, sp, #0
 8043592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8043594:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8043598:	2200      	movs	r2, #0
 804359a:	601a      	str	r2, [r3, #0]
 804359c:	605a      	str	r2, [r3, #4]
 804359e:	609a      	str	r2, [r3, #8]
 80435a0:	60da      	str	r2, [r3, #12]
 80435a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80435a4:	f107 0318 	add.w	r3, r7, #24
 80435a8:	2294      	movs	r2, #148	; 0x94
 80435aa:	2100      	movs	r1, #0
 80435ac:	4618      	mov	r0, r3
 80435ae:	f00b f8e4 	bl	804e77a <memset>
  if(uartHandle->Instance==LPUART1)
 80435b2:	687b      	ldr	r3, [r7, #4]
 80435b4:	681b      	ldr	r3, [r3, #0]
 80435b6:	4a56      	ldr	r2, [pc, #344]	; (8043710 <HAL_UART_MspInit+0x184>)
 80435b8:	4293      	cmp	r3, r2
 80435ba:	f040 80b7 	bne.w	804372c <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80435be:	2320      	movs	r3, #32
 80435c0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80435c2:	2300      	movs	r3, #0
 80435c4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80435c6:	f107 0318 	add.w	r3, r7, #24
 80435ca:	4618      	mov	r0, r3
 80435cc:	f007 fa16 	bl	804a9fc <HAL_RCCEx_PeriphCLKConfig>
 80435d0:	4603      	mov	r3, r0
 80435d2:	2b00      	cmp	r3, #0
 80435d4:	d001      	beq.n	80435da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80435d6:	f7fe fb8f 	bl	8041cf8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80435da:	4b4e      	ldr	r3, [pc, #312]	; (8043714 <HAL_UART_MspInit+0x188>)
 80435dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80435de:	4a4d      	ldr	r2, [pc, #308]	; (8043714 <HAL_UART_MspInit+0x188>)
 80435e0:	f043 0301 	orr.w	r3, r3, #1
 80435e4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80435e6:	4b4b      	ldr	r3, [pc, #300]	; (8043714 <HAL_UART_MspInit+0x188>)
 80435e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80435ea:	f003 0301 	and.w	r3, r3, #1
 80435ee:	617b      	str	r3, [r7, #20]
 80435f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80435f2:	4b48      	ldr	r3, [pc, #288]	; (8043714 <HAL_UART_MspInit+0x188>)
 80435f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80435f6:	4a47      	ldr	r2, [pc, #284]	; (8043714 <HAL_UART_MspInit+0x188>)
 80435f8:	f043 0302 	orr.w	r3, r3, #2
 80435fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80435fe:	4b45      	ldr	r3, [pc, #276]	; (8043714 <HAL_UART_MspInit+0x188>)
 8043600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8043602:	f003 0302 	and.w	r3, r3, #2
 8043606:	613b      	str	r3, [r7, #16]
 8043608:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = DBG_RX_Pin|DBG_TX_Pin;
 804360a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 804360e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043612:	2302      	movs	r3, #2
 8043614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043618:	2300      	movs	r3, #0
 804361a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804361e:	2300      	movs	r3, #0
 8043620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8043624:	2308      	movs	r3, #8
 8043626:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804362a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 804362e:	4619      	mov	r1, r3
 8043630:	4839      	ldr	r0, [pc, #228]	; (8043718 <HAL_UART_MspInit+0x18c>)
 8043632:	f005 f9db 	bl	80489ec <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel5;
 8043636:	4b39      	ldr	r3, [pc, #228]	; (804371c <HAL_UART_MspInit+0x190>)
 8043638:	4a39      	ldr	r2, [pc, #228]	; (8043720 <HAL_UART_MspInit+0x194>)
 804363a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 804363c:	4b37      	ldr	r3, [pc, #220]	; (804371c <HAL_UART_MspInit+0x190>)
 804363e:	2223      	movs	r2, #35	; 0x23
 8043640:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8043642:	4b36      	ldr	r3, [pc, #216]	; (804371c <HAL_UART_MspInit+0x190>)
 8043644:	2200      	movs	r2, #0
 8043646:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8043648:	4b34      	ldr	r3, [pc, #208]	; (804371c <HAL_UART_MspInit+0x190>)
 804364a:	2200      	movs	r2, #0
 804364c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 804364e:	4b33      	ldr	r3, [pc, #204]	; (804371c <HAL_UART_MspInit+0x190>)
 8043650:	2280      	movs	r2, #128	; 0x80
 8043652:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8043654:	4b31      	ldr	r3, [pc, #196]	; (804371c <HAL_UART_MspInit+0x190>)
 8043656:	2200      	movs	r2, #0
 8043658:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 804365a:	4b30      	ldr	r3, [pc, #192]	; (804371c <HAL_UART_MspInit+0x190>)
 804365c:	2200      	movs	r2, #0
 804365e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8043660:	4b2e      	ldr	r3, [pc, #184]	; (804371c <HAL_UART_MspInit+0x190>)
 8043662:	2200      	movs	r2, #0
 8043664:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8043666:	4b2d      	ldr	r3, [pc, #180]	; (804371c <HAL_UART_MspInit+0x190>)
 8043668:	2200      	movs	r2, #0
 804366a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 804366c:	482b      	ldr	r0, [pc, #172]	; (804371c <HAL_UART_MspInit+0x190>)
 804366e:	f004 feb9 	bl	80483e4 <HAL_DMA_Init>
 8043672:	4603      	mov	r3, r0
 8043674:	2b00      	cmp	r3, #0
 8043676:	d001      	beq.n	804367c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8043678:	f7fe fb3e 	bl	8041cf8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 804367c:	2110      	movs	r1, #16
 804367e:	4827      	ldr	r0, [pc, #156]	; (804371c <HAL_UART_MspInit+0x190>)
 8043680:	f005 f921 	bl	80488c6 <HAL_DMA_ConfigChannelAttributes>
 8043684:	4603      	mov	r3, r0
 8043686:	2b00      	cmp	r3, #0
 8043688:	d001      	beq.n	804368e <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 804368a:	f7fe fb35 	bl	8041cf8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 804368e:	687b      	ldr	r3, [r7, #4]
 8043690:	4a22      	ldr	r2, [pc, #136]	; (804371c <HAL_UART_MspInit+0x190>)
 8043692:	67da      	str	r2, [r3, #124]	; 0x7c
 8043694:	4a21      	ldr	r2, [pc, #132]	; (804371c <HAL_UART_MspInit+0x190>)
 8043696:	687b      	ldr	r3, [r7, #4]
 8043698:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel6;
 804369a:	4b22      	ldr	r3, [pc, #136]	; (8043724 <HAL_UART_MspInit+0x198>)
 804369c:	4a22      	ldr	r2, [pc, #136]	; (8043728 <HAL_UART_MspInit+0x19c>)
 804369e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80436a0:	4b20      	ldr	r3, [pc, #128]	; (8043724 <HAL_UART_MspInit+0x198>)
 80436a2:	2224      	movs	r2, #36	; 0x24
 80436a4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80436a6:	4b1f      	ldr	r3, [pc, #124]	; (8043724 <HAL_UART_MspInit+0x198>)
 80436a8:	2210      	movs	r2, #16
 80436aa:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80436ac:	4b1d      	ldr	r3, [pc, #116]	; (8043724 <HAL_UART_MspInit+0x198>)
 80436ae:	2200      	movs	r2, #0
 80436b0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80436b2:	4b1c      	ldr	r3, [pc, #112]	; (8043724 <HAL_UART_MspInit+0x198>)
 80436b4:	2280      	movs	r2, #128	; 0x80
 80436b6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80436b8:	4b1a      	ldr	r3, [pc, #104]	; (8043724 <HAL_UART_MspInit+0x198>)
 80436ba:	2200      	movs	r2, #0
 80436bc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80436be:	4b19      	ldr	r3, [pc, #100]	; (8043724 <HAL_UART_MspInit+0x198>)
 80436c0:	2200      	movs	r2, #0
 80436c2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80436c4:	4b17      	ldr	r3, [pc, #92]	; (8043724 <HAL_UART_MspInit+0x198>)
 80436c6:	2200      	movs	r2, #0
 80436c8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80436ca:	4b16      	ldr	r3, [pc, #88]	; (8043724 <HAL_UART_MspInit+0x198>)
 80436cc:	2200      	movs	r2, #0
 80436ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80436d0:	4814      	ldr	r0, [pc, #80]	; (8043724 <HAL_UART_MspInit+0x198>)
 80436d2:	f004 fe87 	bl	80483e4 <HAL_DMA_Init>
 80436d6:	4603      	mov	r3, r0
 80436d8:	2b00      	cmp	r3, #0
 80436da:	d001      	beq.n	80436e0 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 80436dc:	f7fe fb0c 	bl	8041cf8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80436e0:	2110      	movs	r1, #16
 80436e2:	4810      	ldr	r0, [pc, #64]	; (8043724 <HAL_UART_MspInit+0x198>)
 80436e4:	f005 f8ef 	bl	80488c6 <HAL_DMA_ConfigChannelAttributes>
 80436e8:	4603      	mov	r3, r0
 80436ea:	2b00      	cmp	r3, #0
 80436ec:	d001      	beq.n	80436f2 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80436ee:	f7fe fb03 	bl	8041cf8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80436f2:	687b      	ldr	r3, [r7, #4]
 80436f4:	4a0b      	ldr	r2, [pc, #44]	; (8043724 <HAL_UART_MspInit+0x198>)
 80436f6:	679a      	str	r2, [r3, #120]	; 0x78
 80436f8:	4a0a      	ldr	r2, [pc, #40]	; (8043724 <HAL_UART_MspInit+0x198>)
 80436fa:	687b      	ldr	r3, [r7, #4]
 80436fc:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80436fe:	2200      	movs	r2, #0
 8043700:	2100      	movs	r1, #0
 8043702:	2042      	movs	r0, #66	; 0x42
 8043704:	f004 fe38 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8043708:	2042      	movs	r0, #66	; 0x42
 804370a:	f004 fe4f 	bl	80483ac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 804370e:	e0ba      	b.n	8043886 <HAL_UART_MspInit+0x2fa>
 8043710:	40008000 	.word	0x40008000
 8043714:	40021000 	.word	0x40021000
 8043718:	42020400 	.word	0x42020400
 804371c:	20019564 	.word	0x20019564
 8043720:	40020058 	.word	0x40020058
 8043724:	200194fc 	.word	0x200194fc
 8043728:	4002006c 	.word	0x4002006c
  else if(uartHandle->Instance==USART3)
 804372c:	687b      	ldr	r3, [r7, #4]
 804372e:	681b      	ldr	r3, [r3, #0]
 8043730:	4a57      	ldr	r2, [pc, #348]	; (8043890 <HAL_UART_MspInit+0x304>)
 8043732:	4293      	cmp	r3, r2
 8043734:	f040 80a7 	bne.w	8043886 <HAL_UART_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8043738:	2304      	movs	r3, #4
 804373a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 804373c:	2300      	movs	r3, #0
 804373e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8043740:	f107 0318 	add.w	r3, r7, #24
 8043744:	4618      	mov	r0, r3
 8043746:	f007 f959 	bl	804a9fc <HAL_RCCEx_PeriphCLKConfig>
 804374a:	4603      	mov	r3, r0
 804374c:	2b00      	cmp	r3, #0
 804374e:	d001      	beq.n	8043754 <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8043750:	f7fe fad2 	bl	8041cf8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8043754:	4b4f      	ldr	r3, [pc, #316]	; (8043894 <HAL_UART_MspInit+0x308>)
 8043756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043758:	4a4e      	ldr	r2, [pc, #312]	; (8043894 <HAL_UART_MspInit+0x308>)
 804375a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804375e:	6593      	str	r3, [r2, #88]	; 0x58
 8043760:	4b4c      	ldr	r3, [pc, #304]	; (8043894 <HAL_UART_MspInit+0x308>)
 8043762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8043768:	60fb      	str	r3, [r7, #12]
 804376a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804376c:	4b49      	ldr	r3, [pc, #292]	; (8043894 <HAL_UART_MspInit+0x308>)
 804376e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8043770:	4a48      	ldr	r2, [pc, #288]	; (8043894 <HAL_UART_MspInit+0x308>)
 8043772:	f043 0304 	orr.w	r3, r3, #4
 8043776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8043778:	4b46      	ldr	r3, [pc, #280]	; (8043894 <HAL_UART_MspInit+0x308>)
 804377a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804377c:	f003 0304 	and.w	r3, r3, #4
 8043780:	60bb      	str	r3, [r7, #8]
 8043782:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EXT_TX_Pin|EXT_RX_Pin;
 8043784:	2330      	movs	r3, #48	; 0x30
 8043786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804378a:	2302      	movs	r3, #2
 804378c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043790:	2300      	movs	r3, #0
 8043792:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8043796:	2300      	movs	r3, #0
 8043798:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 804379c:	2307      	movs	r3, #7
 804379e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80437a2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80437a6:	4619      	mov	r1, r3
 80437a8:	483b      	ldr	r0, [pc, #236]	; (8043898 <HAL_UART_MspInit+0x30c>)
 80437aa:	f005 f91f 	bl	80489ec <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Channel2;
 80437ae:	4b3b      	ldr	r3, [pc, #236]	; (804389c <HAL_UART_MspInit+0x310>)
 80437b0:	4a3b      	ldr	r2, [pc, #236]	; (80438a0 <HAL_UART_MspInit+0x314>)
 80437b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80437b4:	4b39      	ldr	r3, [pc, #228]	; (804389c <HAL_UART_MspInit+0x310>)
 80437b6:	221d      	movs	r2, #29
 80437b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80437ba:	4b38      	ldr	r3, [pc, #224]	; (804389c <HAL_UART_MspInit+0x310>)
 80437bc:	2200      	movs	r2, #0
 80437be:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80437c0:	4b36      	ldr	r3, [pc, #216]	; (804389c <HAL_UART_MspInit+0x310>)
 80437c2:	2200      	movs	r2, #0
 80437c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80437c6:	4b35      	ldr	r3, [pc, #212]	; (804389c <HAL_UART_MspInit+0x310>)
 80437c8:	2280      	movs	r2, #128	; 0x80
 80437ca:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80437cc:	4b33      	ldr	r3, [pc, #204]	; (804389c <HAL_UART_MspInit+0x310>)
 80437ce:	2200      	movs	r2, #0
 80437d0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80437d2:	4b32      	ldr	r3, [pc, #200]	; (804389c <HAL_UART_MspInit+0x310>)
 80437d4:	2200      	movs	r2, #0
 80437d6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80437d8:	4b30      	ldr	r3, [pc, #192]	; (804389c <HAL_UART_MspInit+0x310>)
 80437da:	2200      	movs	r2, #0
 80437dc:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80437de:	4b2f      	ldr	r3, [pc, #188]	; (804389c <HAL_UART_MspInit+0x310>)
 80437e0:	2200      	movs	r2, #0
 80437e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80437e4:	482d      	ldr	r0, [pc, #180]	; (804389c <HAL_UART_MspInit+0x310>)
 80437e6:	f004 fdfd 	bl	80483e4 <HAL_DMA_Init>
 80437ea:	4603      	mov	r3, r0
 80437ec:	2b00      	cmp	r3, #0
 80437ee:	d001      	beq.n	80437f4 <HAL_UART_MspInit+0x268>
      Error_Handler();
 80437f0:	f7fe fa82 	bl	8041cf8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80437f4:	2110      	movs	r1, #16
 80437f6:	4829      	ldr	r0, [pc, #164]	; (804389c <HAL_UART_MspInit+0x310>)
 80437f8:	f005 f865 	bl	80488c6 <HAL_DMA_ConfigChannelAttributes>
 80437fc:	4603      	mov	r3, r0
 80437fe:	2b00      	cmp	r3, #0
 8043800:	d001      	beq.n	8043806 <HAL_UART_MspInit+0x27a>
      Error_Handler();
 8043802:	f7fe fa79 	bl	8041cf8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8043806:	687b      	ldr	r3, [r7, #4]
 8043808:	4a24      	ldr	r2, [pc, #144]	; (804389c <HAL_UART_MspInit+0x310>)
 804380a:	67da      	str	r2, [r3, #124]	; 0x7c
 804380c:	4a23      	ldr	r2, [pc, #140]	; (804389c <HAL_UART_MspInit+0x310>)
 804380e:	687b      	ldr	r3, [r7, #4]
 8043810:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA2_Channel3;
 8043812:	4b24      	ldr	r3, [pc, #144]	; (80438a4 <HAL_UART_MspInit+0x318>)
 8043814:	4a24      	ldr	r2, [pc, #144]	; (80438a8 <HAL_UART_MspInit+0x31c>)
 8043816:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8043818:	4b22      	ldr	r3, [pc, #136]	; (80438a4 <HAL_UART_MspInit+0x318>)
 804381a:	221e      	movs	r2, #30
 804381c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 804381e:	4b21      	ldr	r3, [pc, #132]	; (80438a4 <HAL_UART_MspInit+0x318>)
 8043820:	2210      	movs	r2, #16
 8043822:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8043824:	4b1f      	ldr	r3, [pc, #124]	; (80438a4 <HAL_UART_MspInit+0x318>)
 8043826:	2200      	movs	r2, #0
 8043828:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 804382a:	4b1e      	ldr	r3, [pc, #120]	; (80438a4 <HAL_UART_MspInit+0x318>)
 804382c:	2280      	movs	r2, #128	; 0x80
 804382e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8043830:	4b1c      	ldr	r3, [pc, #112]	; (80438a4 <HAL_UART_MspInit+0x318>)
 8043832:	2200      	movs	r2, #0
 8043834:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8043836:	4b1b      	ldr	r3, [pc, #108]	; (80438a4 <HAL_UART_MspInit+0x318>)
 8043838:	2200      	movs	r2, #0
 804383a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 804383c:	4b19      	ldr	r3, [pc, #100]	; (80438a4 <HAL_UART_MspInit+0x318>)
 804383e:	2200      	movs	r2, #0
 8043840:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8043842:	4b18      	ldr	r3, [pc, #96]	; (80438a4 <HAL_UART_MspInit+0x318>)
 8043844:	2200      	movs	r2, #0
 8043846:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8043848:	4816      	ldr	r0, [pc, #88]	; (80438a4 <HAL_UART_MspInit+0x318>)
 804384a:	f004 fdcb 	bl	80483e4 <HAL_DMA_Init>
 804384e:	4603      	mov	r3, r0
 8043850:	2b00      	cmp	r3, #0
 8043852:	d001      	beq.n	8043858 <HAL_UART_MspInit+0x2cc>
      Error_Handler();
 8043854:	f7fe fa50 	bl	8041cf8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart3_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8043858:	2110      	movs	r1, #16
 804385a:	4812      	ldr	r0, [pc, #72]	; (80438a4 <HAL_UART_MspInit+0x318>)
 804385c:	f005 f833 	bl	80488c6 <HAL_DMA_ConfigChannelAttributes>
 8043860:	4603      	mov	r3, r0
 8043862:	2b00      	cmp	r3, #0
 8043864:	d001      	beq.n	804386a <HAL_UART_MspInit+0x2de>
      Error_Handler();
 8043866:	f7fe fa47 	bl	8041cf8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 804386a:	687b      	ldr	r3, [r7, #4]
 804386c:	4a0d      	ldr	r2, [pc, #52]	; (80438a4 <HAL_UART_MspInit+0x318>)
 804386e:	679a      	str	r2, [r3, #120]	; 0x78
 8043870:	4a0c      	ldr	r2, [pc, #48]	; (80438a4 <HAL_UART_MspInit+0x318>)
 8043872:	687b      	ldr	r3, [r7, #4]
 8043874:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8043876:	2200      	movs	r2, #0
 8043878:	2100      	movs	r1, #0
 804387a:	203f      	movs	r0, #63	; 0x3f
 804387c:	f004 fd7c 	bl	8048378 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8043880:	203f      	movs	r0, #63	; 0x3f
 8043882:	f004 fd93 	bl	80483ac <HAL_NVIC_EnableIRQ>
}
 8043886:	bf00      	nop
 8043888:	37c0      	adds	r7, #192	; 0xc0
 804388a:	46bd      	mov	sp, r7
 804388c:	bd80      	pop	{r7, pc}
 804388e:	bf00      	nop
 8043890:	40004800 	.word	0x40004800
 8043894:	40021000 	.word	0x40021000
 8043898:	42020800 	.word	0x42020800
 804389c:	2001930c 	.word	0x2001930c
 80438a0:	4002041c 	.word	0x4002041c
 80438a4:	20019404 	.word	0x20019404
 80438a8:	40020430 	.word	0x40020430

080438ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80438ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80438e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80438b0:	f7ff faba 	bl	8042e28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80438b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80438b6:	e003      	b.n	80438c0 <LoopCopyDataInit>

080438b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80438b8:	4b0b      	ldr	r3, [pc, #44]	; (80438e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80438ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80438bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80438be:	3104      	adds	r1, #4

080438c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80438c0:	480a      	ldr	r0, [pc, #40]	; (80438ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80438c2:	4b0b      	ldr	r3, [pc, #44]	; (80438f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80438c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80438c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80438c8:	d3f6      	bcc.n	80438b8 <CopyDataInit>
	ldr	r2, =_sbss
 80438ca:	4a0a      	ldr	r2, [pc, #40]	; (80438f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80438cc:	e002      	b.n	80438d4 <LoopFillZerobss>

080438ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80438ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80438d0:	f842 3b04 	str.w	r3, [r2], #4

080438d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80438d4:	4b08      	ldr	r3, [pc, #32]	; (80438f8 <LoopForever+0x16>)
	cmp	r2, r3
 80438d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80438d8:	d3f9      	bcc.n	80438ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80438da:	f00a ff1d 	bl	804e718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80438de:	f7fe f8fb 	bl	8041ad8 <main>

080438e2 <LoopForever>:

LoopForever:
    b LoopForever
 80438e2:	e7fe      	b.n	80438e2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80438e4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80438e8:	0804ea40 	.word	0x0804ea40
	ldr	r0, =_sdata
 80438ec:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 80438f0:	20018060 	.word	0x20018060
	ldr	r2, =_sbss
 80438f4:	20018060 	.word	0x20018060
	ldr	r3, = _ebss
 80438f8:	200197cc 	.word	0x200197cc

080438fc <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80438fc:	e7fe      	b.n	80438fc <BusFault_Handler>
	...

08043900 <ICG20330_Init>:
  * @param  ICG20330_InitStruct: pointer to a ICG20330_InitTypeDef structure
  *         that contains the configuration setting for the ICG20330.
  * @retval None
  */
void ICG20330_Init(void* InitStruct)
{  
 8043900:	b580      	push	{r7, lr}
 8043902:	b084      	sub	sp, #16
 8043904:	af00      	add	r7, sp, #0
 8043906:	6078      	str	r0, [r7, #4]
  GYRO_InitTypeDef *init = (GYRO_InitTypeDef *) InitStruct;
 8043908:	687b      	ldr	r3, [r7, #4]
 804390a:	60fb      	str	r3, [r7, #12]
  uint8_t ctrl = 0x00;
 804390c:	2300      	movs	r3, #0
 804390e:	72fb      	strb	r3, [r7, #11]
  /* Configure the low level interface */
  GYRO_IO_Init();
 8043910:	f002 f9ca 	bl	8045ca8 <GYRO_IO_Init>
  
  switch (init->Power_Mode) {
 8043914:	68fb      	ldr	r3, [r7, #12]
 8043916:	781b      	ldrb	r3, [r3, #0]
 8043918:	2b03      	cmp	r3, #3
 804391a:	d817      	bhi.n	804394c <ICG20330_Init+0x4c>
 804391c:	a201      	add	r2, pc, #4	; (adr r2, 8043924 <ICG20330_Init+0x24>)
 804391e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043922:	bf00      	nop
 8043924:	08043935 	.word	0x08043935
 8043928:	0804393b 	.word	0x0804393b
 804392c:	08043941 	.word	0x08043941
 8043930:	08043947 	.word	0x08043947
	case ICG20330_MODE_POWERDOWN:
		ctrl = 0xFF;
 8043934:	23ff      	movs	r3, #255	; 0xff
 8043936:	72fb      	strb	r3, [r7, #11]
		break;
 8043938:	e009      	b.n	804394e <ICG20330_Init+0x4e>
	case ICG20330_MODE_STANDBY:
		ctrl = 0x10;
 804393a:	2310      	movs	r3, #16
 804393c:	72fb      	strb	r3, [r7, #11]
		break;
 804393e:	e006      	b.n	804394e <ICG20330_Init+0x4e>
	case ICG20330_MODE_SLEEP:
		ctrl = 0x40;
 8043940:	2340      	movs	r3, #64	; 0x40
 8043942:	72fb      	strb	r3, [r7, #11]
		break;
 8043944:	e003      	b.n	804394e <ICG20330_Init+0x4e>
	case ICG20330_MODE_ACTIVE:
		ctrl = 0x01;
 8043946:	2301      	movs	r3, #1
 8043948:	72fb      	strb	r3, [r7, #11]
		break;
 804394a:	e000      	b.n	804394e <ICG20330_Init+0x4e>
	default:
		break;
 804394c:	bf00      	nop
  }
  GYRO_IO_Write(&ctrl, ICG20330_PWR_MGMT_1_ADDR, 1);
 804394e:	f107 030b 	add.w	r3, r7, #11
 8043952:	2201      	movs	r2, #1
 8043954:	216b      	movs	r1, #107	; 0x6b
 8043956:	4618      	mov	r0, r3
 8043958:	f002 f9c4 	bl	8045ce4 <GYRO_IO_Write>
  
  ctrl &=~ (ICG20330_STBY_XG_DISABLE | ICG20330_STBY_YG_DISABLE | ICG20330_STBY_ZG_DISABLE);
 804395c:	7afb      	ldrb	r3, [r7, #11]
 804395e:	f023 0307 	bic.w	r3, r3, #7
 8043962:	b2db      	uxtb	r3, r3
 8043964:	72fb      	strb	r3, [r7, #11]
  GYRO_IO_Write(&ctrl, ICG20330_PWR_MGMT_2_ADDR, 1);
 8043966:	f107 030b 	add.w	r3, r7, #11
 804396a:	2201      	movs	r2, #1
 804396c:	216c      	movs	r1, #108	; 0x6c
 804396e:	4618      	mov	r0, r3
 8043970:	f002 f9b8 	bl	8045ce4 <GYRO_IO_Write>
}
 8043974:	bf00      	nop
 8043976:	3710      	adds	r7, #16
 8043978:	46bd      	mov	sp, r7
 804397a:	bd80      	pop	{r7, pc}

0804397c <ICG20330_DeInit>:
  * @brief ICG20330 De-initialization
  * @param  None
  * @retval None
  */
void ICG20330_DeInit(void)
{
 804397c:	b480      	push	{r7}
 804397e:	af00      	add	r7, sp, #0
}
 8043980:	bf00      	nop
 8043982:	46bd      	mov	sp, r7
 8043984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043988:	4770      	bx	lr

0804398a <ICG20330_ReadID>:
  * @brief  Read ID address of ICG20330
  * @param  None
  * @retval ID name
  */
uint8_t ICG20330_ReadID(void)
{
 804398a:	b580      	push	{r7, lr}
 804398c:	b082      	sub	sp, #8
 804398e:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8043990:	f002 f98a 	bl	8045ca8 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, ICG20330_WHO_AM_I_ADDR, 1);
 8043994:	1dfb      	adds	r3, r7, #7
 8043996:	2201      	movs	r2, #1
 8043998:	2175      	movs	r1, #117	; 0x75
 804399a:	4618      	mov	r0, r3
 804399c:	f002 f9b7 	bl	8045d0e <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80439a0:	79fb      	ldrb	r3, [r7, #7]
}
 80439a2:	4618      	mov	r0, r3
 80439a4:	3708      	adds	r7, #8
 80439a6:	46bd      	mov	sp, r7
 80439a8:	bd80      	pop	{r7, pc}

080439aa <ICG20330_RebootCmd>:
  * @brief  Reboot memory content of ICG20330
  * @param  None
  * @retval None
  */
void ICG20330_RebootCmd(void)
{
 80439aa:	b580      	push	{r7, lr}
 80439ac:	b082      	sub	sp, #8
 80439ae:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, ICG20330_PWR_MGMT_1_ADDR, 1);
 80439b0:	1dfb      	adds	r3, r7, #7
 80439b2:	2201      	movs	r2, #1
 80439b4:	216b      	movs	r1, #107	; 0x6b
 80439b6:	4618      	mov	r0, r3
 80439b8:	f002 f9a9 	bl	8045d0e <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= ICG20330_DEV_RESET;
 80439bc:	79fb      	ldrb	r3, [r7, #7]
 80439be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80439c2:	b2db      	uxtb	r3, r3
 80439c4:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, ICG20330_PWR_MGMT_1_ADDR, 1);
 80439c6:	1dfb      	adds	r3, r7, #7
 80439c8:	2201      	movs	r2, #1
 80439ca:	216b      	movs	r1, #107	; 0x6b
 80439cc:	4618      	mov	r0, r3
 80439ce:	f002 f989 	bl	8045ce4 <GYRO_IO_Write>
}
 80439d2:	bf00      	nop
 80439d4:	3708      	adds	r7, #8
 80439d6:	46bd      	mov	sp, r7
 80439d8:	bd80      	pop	{r7, pc}

080439da <ICG20330_LowPower>:
  * @brief Set ICG20330 in low-power mode
  * @param 
  * @retval  None
  */
void ICG20330_LowPower(uint16_t InitStruct)
{  
 80439da:	b580      	push	{r7, lr}
 80439dc:	b084      	sub	sp, #16
 80439de:	af00      	add	r7, sp, #0
 80439e0:	4603      	mov	r3, r0
 80439e2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80439e4:	2300      	movs	r3, #0
 80439e6:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80439e8:	88fb      	ldrh	r3, [r7, #6]
 80439ea:	b2db      	uxtb	r3, r3
 80439ec:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, ICG20330_PWR_MGMT_1_ADDR, 1);
 80439ee:	f107 030f 	add.w	r3, r7, #15
 80439f2:	2201      	movs	r2, #1
 80439f4:	216b      	movs	r1, #107	; 0x6b
 80439f6:	4618      	mov	r0, r3
 80439f8:	f002 f974 	bl	8045ce4 <GYRO_IO_Write>
}
 80439fc:	bf00      	nop
 80439fe:	3710      	adds	r7, #16
 8043a00:	46bd      	mov	sp, r7
 8043a02:	bd80      	pop	{r7, pc}

08043a04 <ICG20330_INT1InterruptConfig>:
  * @brief  Set ICG20330 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the ICG20330 Interrupt.
  * @retval None
  */
void ICG20330_INT1InterruptConfig(uint16_t Int1Config)
{
 8043a04:	b580      	push	{r7, lr}
 8043a06:	b084      	sub	sp, #16
 8043a08:	af00      	add	r7, sp, #0
 8043a0a:	4603      	mov	r3, r0
 8043a0c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8043a0e:	2300      	movs	r3, #0
 8043a10:	73fb      	strb	r3, [r7, #15]
 8043a12:	2300      	movs	r3, #0
 8043a14:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, ICG20330_INT_PIN_CFG_ADDR, 1);
 8043a16:	f107 030f 	add.w	r3, r7, #15
 8043a1a:	2201      	movs	r2, #1
 8043a1c:	2137      	movs	r1, #55	; 0x37
 8043a1e:	4618      	mov	r0, r3
 8043a20:	f002 f975 	bl	8045d0e <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, ICG20330_INT_ENABLE_ADDR, 1);
 8043a24:	f107 030e 	add.w	r3, r7, #14
 8043a28:	2201      	movs	r2, #1
 8043a2a:	2138      	movs	r1, #56	; 0x38
 8043a2c:	4618      	mov	r0, r3
 8043a2e:	f002 f96e 	bl	8045d0e <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8043a32:	7bfb      	ldrb	r3, [r7, #15]
 8043a34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8043a38:	b2db      	uxtb	r3, r3
 8043a3a:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8043a3c:	88fb      	ldrh	r3, [r7, #6]
 8043a3e:	b2db      	uxtb	r3, r3
 8043a40:	121b      	asrs	r3, r3, #8
 8043a42:	b25a      	sxtb	r2, r3
 8043a44:	7bfb      	ldrb	r3, [r7, #15]
 8043a46:	b25b      	sxtb	r3, r3
 8043a48:	4313      	orrs	r3, r2
 8043a4a:	b25b      	sxtb	r3, r3
 8043a4c:	b2db      	uxtb	r3, r3
 8043a4e:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8043a50:	7bbb      	ldrb	r3, [r7, #14]
 8043a52:	f023 0320 	bic.w	r3, r3, #32
 8043a56:	b2db      	uxtb	r3, r3
 8043a58:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8043a5a:	88fb      	ldrh	r3, [r7, #6]
 8043a5c:	b2da      	uxtb	r2, r3
 8043a5e:	7bbb      	ldrb	r3, [r7, #14]
 8043a60:	4313      	orrs	r3, r2
 8043a62:	b2db      	uxtb	r3, r3
 8043a64:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, ICG20330_INT_PIN_CFG_ADDR, 1);
 8043a66:	f107 030f 	add.w	r3, r7, #15
 8043a6a:	2201      	movs	r2, #1
 8043a6c:	2137      	movs	r1, #55	; 0x37
 8043a6e:	4618      	mov	r0, r3
 8043a70:	f002 f938 	bl	8045ce4 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, ICG20330_INT_ENABLE_ADDR, 1);
 8043a74:	f107 030e 	add.w	r3, r7, #14
 8043a78:	2201      	movs	r2, #1
 8043a7a:	2138      	movs	r1, #56	; 0x38
 8043a7c:	4618      	mov	r0, r3
 8043a7e:	f002 f931 	bl	8045ce4 <GYRO_IO_Write>
}
 8043a82:	bf00      	nop
 8043a84:	3710      	adds	r7, #16
 8043a86:	46bd      	mov	sp, r7
 8043a88:	bd80      	pop	{r7, pc}

08043a8a <ICG20330_EnableIT>:
  *        @arg ICG20330_INT1
  *        @arg ICG20330_INT2
  * @retval None
  */
void ICG20330_EnableIT(uint8_t IntSel)
{  
 8043a8a:	b580      	push	{r7, lr}
 8043a8c:	b084      	sub	sp, #16
 8043a8e:	af00      	add	r7, sp, #0
 8043a90:	4603      	mov	r3, r0
 8043a92:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, ICG20330_INT_ENABLE_ADDR, 1);
 8043a94:	f107 030f 	add.w	r3, r7, #15
 8043a98:	2201      	movs	r2, #1
 8043a9a:	2138      	movs	r1, #56	; 0x38
 8043a9c:	4618      	mov	r0, r3
 8043a9e:	f002 f936 	bl	8045d0e <GYRO_IO_Read>
//    tmpreg &= 0xF7;
//    tmpreg |= ICG20330_INT2INTERRUPT_ENABLE;
//  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&IntSel, ICG20330_INT_ENABLE_ADDR, 1);
 8043aa2:	1dfb      	adds	r3, r7, #7
 8043aa4:	2201      	movs	r2, #1
 8043aa6:	2138      	movs	r1, #56	; 0x38
 8043aa8:	4618      	mov	r0, r3
 8043aaa:	f002 f91b 	bl	8045ce4 <GYRO_IO_Write>
}
 8043aae:	bf00      	nop
 8043ab0:	3710      	adds	r7, #16
 8043ab2:	46bd      	mov	sp, r7
 8043ab4:	bd80      	pop	{r7, pc}

08043ab6 <ICG20330_DisableIT>:
  *        @arg ICG20330_INT1
  *        @arg ICG20330_INT2
  * @retval None
  */
void ICG20330_DisableIT(uint8_t IntSel)
{  
 8043ab6:	b580      	push	{r7, lr}
 8043ab8:	b084      	sub	sp, #16
 8043aba:	af00      	add	r7, sp, #0
 8043abc:	4603      	mov	r3, r0
 8043abe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, ICG20330_INT_ENABLE_ADDR, 1);
 8043ac0:	f107 030f 	add.w	r3, r7, #15
 8043ac4:	2201      	movs	r2, #1
 8043ac6:	2138      	movs	r1, #56	; 0x38
 8043ac8:	4618      	mov	r0, r3
 8043aca:	f002 f920 	bl	8045d0e <GYRO_IO_Read>
//  else if(IntSel == ICG20330_INT2)
//  {
//    tmpreg &= 0xF7;
//    tmpreg |= ICG20330_INT2INTERRUPT_DISABLE;
//  }
  tmpreg &=~ IntSel;
 8043ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8043ad2:	43db      	mvns	r3, r3
 8043ad4:	b25a      	sxtb	r2, r3
 8043ad6:	7bfb      	ldrb	r3, [r7, #15]
 8043ad8:	b25b      	sxtb	r3, r3
 8043ada:	4013      	ands	r3, r2
 8043adc:	b25b      	sxtb	r3, r3
 8043ade:	b2db      	uxtb	r3, r3
 8043ae0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, ICG20330_INT_ENABLE_ADDR, 1);
 8043ae2:	f107 030f 	add.w	r3, r7, #15
 8043ae6:	2201      	movs	r2, #1
 8043ae8:	2138      	movs	r1, #56	; 0x38
 8043aea:	4618      	mov	r0, r3
 8043aec:	f002 f8fa 	bl	8045ce4 <GYRO_IO_Write>
}
 8043af0:	bf00      	nop
 8043af2:	3710      	adds	r7, #16
 8043af4:	46bd      	mov	sp, r7
 8043af6:	bd80      	pop	{r7, pc}

08043af8 <ICG20330_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the ICG20330.
  * @retval None
  */
void ICG20330_FilterConfig(uint8_t FilterStruct)
{
 8043af8:	b580      	push	{r7, lr}
 8043afa:	b084      	sub	sp, #16
 8043afc:	af00      	add	r7, sp, #0
 8043afe:	4603      	mov	r3, r0
 8043b00:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, ICG20330_CONFIG_ADDR, 1);
 8043b02:	f107 030f 	add.w	r3, r7, #15
 8043b06:	2201      	movs	r2, #1
 8043b08:	211a      	movs	r1, #26
 8043b0a:	4618      	mov	r0, r3
 8043b0c:	f002 f8ff 	bl	8045d0e <GYRO_IO_Read>
//
//  /* Configure MEMS: mode and cutoff frequency */
//  tmpreg |= FilterStruct;
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&FilterStruct, ICG20330_CONFIG_ADDR, 1);
 8043b10:	1dfb      	adds	r3, r7, #7
 8043b12:	2201      	movs	r2, #1
 8043b14:	211a      	movs	r1, #26
 8043b16:	4618      	mov	r0, r3
 8043b18:	f002 f8e4 	bl	8045ce4 <GYRO_IO_Write>
}
 8043b1c:	bf00      	nop
 8043b1e:	3710      	adds	r7, #16
 8043b20:	46bd      	mov	sp, r7
 8043b22:	bd80      	pop	{r7, pc}

08043b24 <ICG20330_FilterCmd>:
  *         @arg: ICG20330_HIGHPASSFILTER_DISABLE
  *         @arg: ICG20330_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void ICG20330_FilterCmd(uint8_t HighPassFilterState)
{
 8043b24:	b580      	push	{r7, lr}
 8043b26:	b084      	sub	sp, #16
 8043b28:	af00      	add	r7, sp, #0
 8043b2a:	4603      	mov	r3, r0
 8043b2c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, ICG20330_GYRO_CONFIG_ADDR, 1);
 8043b2e:	f107 030f 	add.w	r3, r7, #15
 8043b32:	2201      	movs	r2, #1
 8043b34:	211b      	movs	r1, #27
 8043b36:	4618      	mov	r0, r3
 8043b38:	f002 f8e9 	bl	8045d0e <GYRO_IO_Read>
//  tmpreg &= 0xEF;
//
//  tmpreg |= HighPassFilterState;
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&HighPassFilterState, ICG20330_GYRO_CONFIG_ADDR, 1);
 8043b3c:	1dfb      	adds	r3, r7, #7
 8043b3e:	2201      	movs	r2, #1
 8043b40:	211b      	movs	r1, #27
 8043b42:	4618      	mov	r0, r3
 8043b44:	f002 f8ce 	bl	8045ce4 <GYRO_IO_Write>
}
 8043b48:	bf00      	nop
 8043b4a:	3710      	adds	r7, #16
 8043b4c:	46bd      	mov	sp, r7
 8043b4e:	bd80      	pop	{r7, pc}

08043b50 <ICG20330_ReadXYZAngRate>:
* @brief  Calculate the ICG20330 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void ICG20330_ReadXYZAngRate(float *pfData)
{
 8043b50:	b580      	push	{r7, lr}
 8043b52:	b08a      	sub	sp, #40	; 0x28
 8043b54:	af00      	add	r7, sp, #0
 8043b56:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8043b58:	2300      	movs	r3, #0
 8043b5a:	61bb      	str	r3, [r7, #24]
 8043b5c:	2300      	movs	r3, #0
 8043b5e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8043b60:	f107 0310 	add.w	r3, r7, #16
 8043b64:	2200      	movs	r2, #0
 8043b66:	601a      	str	r2, [r3, #0]
 8043b68:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8043b6a:	2300      	movs	r3, #0
 8043b6c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8043b6e:	f04f 0300 	mov.w	r3, #0
 8043b72:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8043b74:	2300      	movs	r3, #0
 8043b76:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,ICG20330_GYRO_CONFIG_ADDR,1);
 8043b78:	f107 030f 	add.w	r3, r7, #15
 8043b7c:	2201      	movs	r2, #1
 8043b7e:	211b      	movs	r1, #27
 8043b80:	4618      	mov	r0, r3
 8043b82:	f002 f8c4 	bl	8045d0e <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,ICG20330_GYRO_XOUT_H_ADDR,6);
 8043b86:	f107 0318 	add.w	r3, r7, #24
 8043b8a:	2206      	movs	r2, #6
 8043b8c:	2143      	movs	r1, #67	; 0x43
 8043b8e:	4618      	mov	r0, r3
 8043b90:	f002 f8bd 	bl	8045d0e <GYRO_IO_Read>
//      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
//    }
//  }
//  else
//  {
    for(i=0; i<3; i++)
 8043b94:	2300      	movs	r3, #0
 8043b96:	623b      	str	r3, [r7, #32]
 8043b98:	e01f      	b.n	8043bda <ICG20330_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8043b9a:	6a3b      	ldr	r3, [r7, #32]
 8043b9c:	005b      	lsls	r3, r3, #1
 8043b9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8043ba2:	4413      	add	r3, r2
 8043ba4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8043ba8:	b29b      	uxth	r3, r3
 8043baa:	021b      	lsls	r3, r3, #8
 8043bac:	b29a      	uxth	r2, r3
 8043bae:	6a3b      	ldr	r3, [r7, #32]
 8043bb0:	005b      	lsls	r3, r3, #1
 8043bb2:	3301      	adds	r3, #1
 8043bb4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8043bb8:	440b      	add	r3, r1
 8043bba:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8043bbe:	b29b      	uxth	r3, r3
 8043bc0:	4413      	add	r3, r2
 8043bc2:	b29b      	uxth	r3, r3
 8043bc4:	b21a      	sxth	r2, r3
 8043bc6:	6a3b      	ldr	r3, [r7, #32]
 8043bc8:	005b      	lsls	r3, r3, #1
 8043bca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8043bce:	440b      	add	r3, r1
 8043bd0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8043bd4:	6a3b      	ldr	r3, [r7, #32]
 8043bd6:	3301      	adds	r3, #1
 8043bd8:	623b      	str	r3, [r7, #32]
 8043bda:	6a3b      	ldr	r3, [r7, #32]
 8043bdc:	2b02      	cmp	r3, #2
 8043bde:	dddc      	ble.n	8043b9a <ICG20330_ReadXYZAngRate+0x4a>
    }
//  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & ICG20330_FS_SEL)
 8043be0:	7bfb      	ldrb	r3, [r7, #15]
 8043be2:	f003 0318 	and.w	r3, r3, #24
 8043be6:	2b18      	cmp	r3, #24
 8043be8:	d841      	bhi.n	8043c6e <ICG20330_ReadXYZAngRate+0x11e>
 8043bea:	a201      	add	r2, pc, #4	; (adr r2, 8043bf0 <ICG20330_ReadXYZAngRate+0xa0>)
 8043bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043bf0:	08043c55 	.word	0x08043c55
 8043bf4:	08043c6f 	.word	0x08043c6f
 8043bf8:	08043c6f 	.word	0x08043c6f
 8043bfc:	08043c6f 	.word	0x08043c6f
 8043c00:	08043c6f 	.word	0x08043c6f
 8043c04:	08043c6f 	.word	0x08043c6f
 8043c08:	08043c6f 	.word	0x08043c6f
 8043c0c:	08043c6f 	.word	0x08043c6f
 8043c10:	08043c5d 	.word	0x08043c5d
 8043c14:	08043c6f 	.word	0x08043c6f
 8043c18:	08043c6f 	.word	0x08043c6f
 8043c1c:	08043c6f 	.word	0x08043c6f
 8043c20:	08043c6f 	.word	0x08043c6f
 8043c24:	08043c6f 	.word	0x08043c6f
 8043c28:	08043c6f 	.word	0x08043c6f
 8043c2c:	08043c6f 	.word	0x08043c6f
 8043c30:	08043c63 	.word	0x08043c63
 8043c34:	08043c6f 	.word	0x08043c6f
 8043c38:	08043c6f 	.word	0x08043c6f
 8043c3c:	08043c6f 	.word	0x08043c6f
 8043c40:	08043c6f 	.word	0x08043c6f
 8043c44:	08043c6f 	.word	0x08043c6f
 8043c48:	08043c6f 	.word	0x08043c6f
 8043c4c:	08043c6f 	.word	0x08043c6f
 8043c50:	08043c69 	.word	0x08043c69
  {
  case ICG20330_FULLSCALE_63: //+-31.25
    sensitivity=ICG20330_SENSITIVITY_1024;
 8043c54:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8043c58:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8043c5a:	e008      	b.n	8043c6e <ICG20330_ReadXYZAngRate+0x11e>
    
  case ICG20330_FULLSCALE_125: //+-62.5
    sensitivity=ICG20330_SENSITIVITY_524;
 8043c5c:	4b1b      	ldr	r3, [pc, #108]	; (8043ccc <ICG20330_ReadXYZAngRate+0x17c>)
 8043c5e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8043c60:	e005      	b.n	8043c6e <ICG20330_ReadXYZAngRate+0x11e>
    
  case ICG20330_FULLSCALE_250: //+-125
    sensitivity=ICG20330_SENSITIVITY_262;
 8043c62:	4b1b      	ldr	r3, [pc, #108]	; (8043cd0 <ICG20330_ReadXYZAngRate+0x180>)
 8043c64:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8043c66:	e002      	b.n	8043c6e <ICG20330_ReadXYZAngRate+0x11e>
  case ICG20330_FULLSCALE_500: //+-250
     sensitivity=ICG20330_SENSITIVITY_131;
 8043c68:	4b1a      	ldr	r3, [pc, #104]	; (8043cd4 <ICG20330_ReadXYZAngRate+0x184>)
 8043c6a:	627b      	str	r3, [r7, #36]	; 0x24
     break;
 8043c6c:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8043c6e:	2300      	movs	r3, #0
 8043c70:	623b      	str	r3, [r7, #32]
 8043c72:	e023      	b.n	8043cbc <ICG20330_ReadXYZAngRate+0x16c>
  {
    pfData[i]=(float)(RawData[i]);
 8043c74:	6a3b      	ldr	r3, [r7, #32]
 8043c76:	005b      	lsls	r3, r3, #1
 8043c78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8043c7c:	4413      	add	r3, r2
 8043c7e:	f933 1c18 	ldrsh.w	r1, [r3, #-24]
 8043c82:	6a3b      	ldr	r3, [r7, #32]
 8043c84:	009b      	lsls	r3, r3, #2
 8043c86:	687a      	ldr	r2, [r7, #4]
 8043c88:	4413      	add	r3, r2
 8043c8a:	ee07 1a90 	vmov	s15, r1
 8043c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8043c92:	edc3 7a00 	vstr	s15, [r3]
    pfData[i]/=(float)(sensitivity);
 8043c96:	6a3b      	ldr	r3, [r7, #32]
 8043c98:	009b      	lsls	r3, r3, #2
 8043c9a:	687a      	ldr	r2, [r7, #4]
 8043c9c:	4413      	add	r3, r2
 8043c9e:	edd3 6a00 	vldr	s13, [r3]
 8043ca2:	6a3b      	ldr	r3, [r7, #32]
 8043ca4:	009b      	lsls	r3, r3, #2
 8043ca6:	687a      	ldr	r2, [r7, #4]
 8043ca8:	4413      	add	r3, r2
 8043caa:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8043cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8043cb2:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8043cb6:	6a3b      	ldr	r3, [r7, #32]
 8043cb8:	3301      	adds	r3, #1
 8043cba:	623b      	str	r3, [r7, #32]
 8043cbc:	6a3b      	ldr	r3, [r7, #32]
 8043cbe:	2b02      	cmp	r3, #2
 8043cc0:	ddd8      	ble.n	8043c74 <ICG20330_ReadXYZAngRate+0x124>
  }
}
 8043cc2:	bf00      	nop
 8043cc4:	bf00      	nop
 8043cc6:	3728      	adds	r7, #40	; 0x28
 8043cc8:	46bd      	mov	sp, r7
 8043cca:	bd80      	pop	{r7, pc}
 8043ccc:	44030000 	.word	0x44030000
 8043cd0:	43830000 	.word	0x43830000
 8043cd4:	43030000 	.word	0x43030000

08043cd8 <lr1110_board_init_io>:
#endif

static void lr1110_board_init_tcxo_io( const void* context );

void lr1110_board_init_io( const void* context )
{
 8043cd8:	b580      	push	{r7, lr}
 8043cda:	b086      	sub	sp, #24
 8043cdc:	af04      	add	r7, sp, #16
 8043cde:	6078      	str	r0, [r7, #4]
    GpioInit( &( ( lr1110_t* ) context )->reset, LR_NRST_GPIO_Port, LR_NRST_Pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8043ce0:	6878      	ldr	r0, [r7, #4]
 8043ce2:	2301      	movs	r3, #1
 8043ce4:	9302      	str	r3, [sp, #8]
 8043ce6:	2300      	movs	r3, #0
 8043ce8:	9301      	str	r3, [sp, #4]
 8043cea:	2300      	movs	r3, #0
 8043cec:	9300      	str	r3, [sp, #0]
 8043cee:	2301      	movs	r3, #1
 8043cf0:	2204      	movs	r2, #4
 8043cf2:	4919      	ldr	r1, [pc, #100]	; (8043d58 <lr1110_board_init_io+0x80>)
 8043cf4:	f7fd fba4 	bl	8041440 <GpioInit>
    GpioInit( &( ( lr1110_t* ) context )->spi.Nss, LR_NSS_GPIO_Port, LR_NSS_Pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8043cf8:	687b      	ldr	r3, [r7, #4]
 8043cfa:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8043cfe:	2301      	movs	r3, #1
 8043d00:	9302      	str	r3, [sp, #8]
 8043d02:	2300      	movs	r3, #0
 8043d04:	9301      	str	r3, [sp, #4]
 8043d06:	2300      	movs	r3, #0
 8043d08:	9300      	str	r3, [sp, #0]
 8043d0a:	2301      	movs	r3, #1
 8043d0c:	2201      	movs	r2, #1
 8043d0e:	4912      	ldr	r1, [pc, #72]	; (8043d58 <lr1110_board_init_io+0x80>)
 8043d10:	f7fd fb96 	bl	8041440 <GpioInit>
    GpioInit( &( ( lr1110_t* ) context )->dio_1, LR_RFSW4_GPIO_Port, LR_RFSW4_Pin, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8043d14:	687b      	ldr	r3, [r7, #4]
 8043d16:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8043d1a:	2300      	movs	r3, #0
 8043d1c:	9302      	str	r3, [sp, #8]
 8043d1e:	2300      	movs	r3, #0
 8043d20:	9301      	str	r3, [sp, #4]
 8043d22:	2300      	movs	r3, #0
 8043d24:	9300      	str	r3, [sp, #0]
 8043d26:	2300      	movs	r3, #0
 8043d28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8043d2c:	490a      	ldr	r1, [pc, #40]	; (8043d58 <lr1110_board_init_io+0x80>)
 8043d2e:	f7fd fb87 	bl	8041440 <GpioInit>
    GpioInit( &( ( lr1110_t* ) context )->busy, LR_BUSY_GPIO_Port, LR_BUSY_Pin, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8043d32:	687b      	ldr	r3, [r7, #4]
 8043d34:	f103 0014 	add.w	r0, r3, #20
 8043d38:	2300      	movs	r3, #0
 8043d3a:	9302      	str	r3, [sp, #8]
 8043d3c:	2300      	movs	r3, #0
 8043d3e:	9301      	str	r3, [sp, #4]
 8043d40:	2300      	movs	r3, #0
 8043d42:	9300      	str	r3, [sp, #0]
 8043d44:	2300      	movs	r3, #0
 8043d46:	2202      	movs	r2, #2
 8043d48:	4903      	ldr	r1, [pc, #12]	; (8043d58 <lr1110_board_init_io+0x80>)
 8043d4a:	f7fd fb79 	bl	8041440 <GpioInit>
}
 8043d4e:	bf00      	nop
 8043d50:	3708      	adds	r7, #8
 8043d52:	46bd      	mov	sp, r7
 8043d54:	bd80      	pop	{r7, pc}
 8043d56:	bf00      	nop
 8043d58:	42020c00 	.word	0x42020c00

08043d5c <lr1110_board_set_rf_tx_power>:
    GpioInit( &DbgPinRx, RADIO_DBG_PIN_RX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
#endif
}

void lr1110_board_set_rf_tx_power( const void* context, int8_t power )
{
 8043d5c:	b580      	push	{r7, lr}
 8043d5e:	b082      	sub	sp, #8
 8043d60:	af00      	add	r7, sp, #0
 8043d62:	6078      	str	r0, [r7, #4]
 8043d64:	460b      	mov	r3, r1
 8043d66:	70fb      	strb	r3, [r7, #3]
    // TODO: Add PA Config check
    if( power > 0 )
 8043d68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8043d6c:	2b00      	cmp	r3, #0
 8043d6e:	dd06      	ble.n	8043d7e <lr1110_board_set_rf_tx_power+0x22>
    {
        if( power > 22 )
 8043d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8043d74:	2b16      	cmp	r3, #22
 8043d76:	dd09      	ble.n	8043d8c <lr1110_board_set_rf_tx_power+0x30>
        {
            power = 22;
 8043d78:	2316      	movs	r3, #22
 8043d7a:	70fb      	strb	r3, [r7, #3]
 8043d7c:	e006      	b.n	8043d8c <lr1110_board_set_rf_tx_power+0x30>
        }
    }
    else
    {
        if( power < -9 )
 8043d7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8043d82:	f113 0f09 	cmn.w	r3, #9
 8043d86:	da01      	bge.n	8043d8c <lr1110_board_set_rf_tx_power+0x30>
        {
            power = -9;
 8043d88:	23f7      	movs	r3, #247	; 0xf7
 8043d8a:	70fb      	strb	r3, [r7, #3]
        }
    }
    lr1110_radio_set_tx_params( context, power, LR1110_RADIO_RAMP_32_US );
 8043d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8043d90:	2201      	movs	r2, #1
 8043d92:	4619      	mov	r1, r3
 8043d94:	6878      	ldr	r0, [r7, #4]
 8043d96:	f002 faaa 	bl	80462ee <lr1110_radio_set_tx_params>
}
 8043d9a:	bf00      	nop
 8043d9c:	3708      	adds	r7, #8
 8043d9e:	46bd      	mov	sp, r7
 8043da0:	bd80      	pop	{r7, pc}

08043da2 <lr1110_board_get_tcxo_wakeup_time>:

uint32_t lr1110_board_get_tcxo_wakeup_time( const void* context )
{
 8043da2:	b480      	push	{r7}
 8043da4:	b083      	sub	sp, #12
 8043da6:	af00      	add	r7, sp, #0
 8043da8:	6078      	str	r0, [r7, #4]
    return BOARD_TCXO_WAKEUP_TIME;
 8043daa:	2305      	movs	r3, #5
}
 8043dac:	4618      	mov	r0, r3
 8043dae:	370c      	adds	r7, #12
 8043db0:	46bd      	mov	sp, r7
 8043db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043db6:	4770      	bx	lr

08043db8 <lr1110_board_init>:

void lr1110_board_init( const void* context, lr1110_dio_irq_handler dio_irq )
{
 8043db8:	b580      	push	{r7, lr}
 8043dba:	b08a      	sub	sp, #40	; 0x28
 8043dbc:	af00      	add	r7, sp, #0
 8043dbe:	6078      	str	r0, [r7, #4]
 8043dc0:	6039      	str	r1, [r7, #0]
    lr1110_system_reset( context );
 8043dc2:	6878      	ldr	r0, [r7, #4]
 8043dc4:	f002 fcc1 	bl	804674a <lr1110_system_reset>
    lr1110_hal_set_operating_mode( context, LR1110_HAL_OP_MODE_STDBY_RC );
 8043dc8:	2101      	movs	r1, #1
 8043dca:	6878      	ldr	r0, [r7, #4]
 8043dcc:	f000 f9ed 	bl	80441aa <lr1110_hal_set_operating_mode>

    // Attach interrupt handler to radio irq pin
    GpioSetInterrupt( &( ( lr1110_t* ) context )->dio_1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, dio_irq );
 8043dd0:	687b      	ldr	r3, [r7, #4]
 8043dd2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8043dd6:	683b      	ldr	r3, [r7, #0]
 8043dd8:	2203      	movs	r2, #3
 8043dda:	2101      	movs	r1, #1
 8043ddc:	f7fd fb8c 	bl	80414f8 <GpioSetInterrupt>

    lr1110_system_stat1_t stat1;
    lr1110_system_stat2_t stat2;
    uint32_t              irq = 0;
 8043de0:	2300      	movs	r3, #0
 8043de2:	61fb      	str	r3, [r7, #28]
    lr1110_system_get_status( context, &stat1, &stat2, &irq );
 8043de4:	f107 031c 	add.w	r3, r7, #28
 8043de8:	f107 0220 	add.w	r2, r7, #32
 8043dec:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8043df0:	6878      	ldr	r0, [r7, #4]
 8043df2:	f002 fcb6 	bl	8046762 <lr1110_system_get_status>
    lr1110_system_version_t version;
    lr1110_system_get_version( context, &version );
 8043df6:	f107 0318 	add.w	r3, r7, #24
 8043dfa:	4619      	mov	r1, r3
 8043dfc:	6878      	ldr	r0, [r7, #4]
 8043dfe:	f002 fd04 	bl	804680a <lr1110_system_get_version>
    lr1110_system_errors_t errors = { 0 };
 8043e02:	2300      	movs	r3, #0
 8043e04:	82fb      	strh	r3, [r7, #22]
    lr1110_system_get_errors( context, &errors );
 8043e06:	f107 0316 	add.w	r3, r7, #22
 8043e0a:	4619      	mov	r1, r3
 8043e0c:	6878      	ldr	r0, [r7, #4]
 8043e0e:	f002 fd2d 	bl	804686c <lr1110_system_get_errors>
    lr1110_system_clear_errors( context );
 8043e12:	6878      	ldr	r0, [r7, #4]
 8043e14:	f002 fd55 	bl	80468c2 <lr1110_system_clear_errors>

    // Initialize TCXO control
    lr1110_board_init_tcxo_io( context );
 8043e18:	6878      	ldr	r0, [r7, #4]
 8043e1a:	f000 f82d 	bl	8043e78 <lr1110_board_init_tcxo_io>

    // Initialize RF switch control
    lr1110_system_rfswitch_cfg_t rf_switch_configuration;
    rf_switch_configuration.enable  = LR1110_SYSTEM_RFSW0_HIGH | LR1110_SYSTEM_RFSW1_HIGH;
 8043e1e:	2303      	movs	r3, #3
 8043e20:	733b      	strb	r3, [r7, #12]
    rf_switch_configuration.standby = 0;
 8043e22:	2300      	movs	r3, #0
 8043e24:	737b      	strb	r3, [r7, #13]
    rf_switch_configuration.rx      = LR1110_SYSTEM_RFSW0_HIGH;
 8043e26:	2301      	movs	r3, #1
 8043e28:	73bb      	strb	r3, [r7, #14]
    rf_switch_configuration.tx      = LR1110_SYSTEM_RFSW0_HIGH | LR1110_SYSTEM_RFSW1_HIGH;
 8043e2a:	2303      	movs	r3, #3
 8043e2c:	73fb      	strb	r3, [r7, #15]
    rf_switch_configuration.wifi    = 0;
 8043e2e:	2300      	movs	r3, #0
 8043e30:	74fb      	strb	r3, [r7, #19]
    rf_switch_configuration.gnss    = 0;
 8043e32:	2300      	movs	r3, #0
 8043e34:	74bb      	strb	r3, [r7, #18]

    lr1110_system_set_dio_as_rf_switch( context, &rf_switch_configuration );
 8043e36:	f107 030c 	add.w	r3, r7, #12
 8043e3a:	4619      	mov	r1, r3
 8043e3c:	6878      	ldr	r0, [r7, #4]
 8043e3e:	f002 fd8a 	bl	8046956 <lr1110_system_set_dio_as_rf_switch>

    lr1110_radio_pa_cfg_t paConfig = {
 8043e42:	2300      	movs	r3, #0
 8043e44:	723b      	strb	r3, [r7, #8]
 8043e46:	2300      	movs	r3, #0
 8043e48:	727b      	strb	r3, [r7, #9]
 8043e4a:	2304      	movs	r3, #4
 8043e4c:	72bb      	strb	r3, [r7, #10]
 8043e4e:	2300      	movs	r3, #0
 8043e50:	72fb      	strb	r3, [r7, #11]
        .pa_sel        = LR1110_RADIO_PA_SEL_LP,
        .pa_reg_supply = LR1110_RADIO_PA_REG_SUPPLY_VREG,
        .pa_duty_cycle  = 0x04,
        .pa_hp_sel     = 0x00,
    };
    lr1110_radio_set_pa_cfg( context, &paConfig );
 8043e52:	f107 0308 	add.w	r3, r7, #8
 8043e56:	4619      	mov	r1, r3
 8043e58:	6878      	ldr	r0, [r7, #4]
 8043e5a:	f002 fab1 	bl	80463c0 <lr1110_radio_set_pa_cfg>

    // Set packet type
    lr1110_radio_pkt_type_t packet_type = LR1110_RADIO_PKT_TYPE_LORA;
 8043e5e:	2302      	movs	r3, #2
 8043e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    lr1110_radio_set_pkt_type( context, packet_type );
 8043e64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8043e68:	4619      	mov	r1, r3
 8043e6a:	6878      	ldr	r0, [r7, #4]
 8043e6c:	f002 f95c 	bl	8046128 <lr1110_radio_set_pkt_type>
}
 8043e70:	bf00      	nop
 8043e72:	3728      	adds	r7, #40	; 0x28
 8043e74:	46bd      	mov	sp, r7
 8043e76:	bd80      	pop	{r7, pc}

08043e78 <lr1110_board_init_tcxo_io>:

static void lr1110_board_init_tcxo_io( const void* context )
{
 8043e78:	b580      	push	{r7, lr}
 8043e7a:	b084      	sub	sp, #16
 8043e7c:	af00      	add	r7, sp, #0
 8043e7e:	6078      	str	r0, [r7, #4]
#if( LR1110_SHIELD_HAS_TCXO == 1 )
    lr1110_system_set_tcxo_mode( context, LR1110_SYSTEM_TCXO_CTRL_1_8V,
                                 ( lr1110_board_get_tcxo_wakeup_time( context ) * 1000 ) / 30.52 );
 8043e80:	6878      	ldr	r0, [r7, #4]
 8043e82:	f7ff ff8e 	bl	8043da2 <lr1110_board_get_tcxo_wakeup_time>
 8043e86:	4603      	mov	r3, r0
 8043e88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8043e8c:	fb02 f303 	mul.w	r3, r2, r3
 8043e90:	4618      	mov	r0, r3
 8043e92:	f7fc fb13 	bl	80404bc <__aeabi_ui2d>
 8043e96:	a30e      	add	r3, pc, #56	; (adr r3, 8043ed0 <lr1110_board_init_tcxo_io+0x58>)
 8043e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043e9c:	f7fc fcb2 	bl	8040804 <__aeabi_ddiv>
 8043ea0:	4602      	mov	r2, r0
 8043ea2:	460b      	mov	r3, r1
    lr1110_system_set_tcxo_mode( context, LR1110_SYSTEM_TCXO_CTRL_1_8V,
 8043ea4:	4610      	mov	r0, r2
 8043ea6:	4619      	mov	r1, r3
 8043ea8:	f7fc fd94 	bl	80409d4 <__aeabi_d2uiz>
 8043eac:	4603      	mov	r3, r0
 8043eae:	461a      	mov	r2, r3
 8043eb0:	2102      	movs	r1, #2
 8043eb2:	6878      	ldr	r0, [r7, #4]
 8043eb4:	f002 fdda 	bl	8046a6c <lr1110_system_set_tcxo_mode>

    uint8_t calib_params = LR1110_SYSTEM_CALIB_LF_RC_MASK | LR1110_SYSTEM_CALIB_HF_RC_MASK |
 8043eb8:	233f      	movs	r3, #63	; 0x3f
 8043eba:	73fb      	strb	r3, [r7, #15]
                  LR1110_SYSTEM_CALIB_PLL_MASK | LR1110_SYSTEM_CALIB_ADC_MASK |
                  LR1110_SYSTEM_CALIB_IMG_MASK | LR1110_SYSTEM_CALIB_PLL_TX_MASK;
    lr1110_system_calibrate( context, calib_params );
 8043ebc:	7bfb      	ldrb	r3, [r7, #15]
 8043ebe:	4619      	mov	r1, r3
 8043ec0:	6878      	ldr	r0, [r7, #4]
 8043ec2:	f002 fd14 	bl	80468ee <lr1110_system_calibrate>
#endif
}
 8043ec6:	bf00      	nop
 8043ec8:	3710      	adds	r7, #16
 8043eca:	46bd      	mov	sp, r7
 8043ecc:	bd80      	pop	{r7, pc}
 8043ece:	bf00      	nop
 8043ed0:	b851eb85 	.word	0xb851eb85
 8043ed4:	403e851e 	.word	0x403e851e

08043ed8 <lr1110_hal_write>:
static lr1110_hal_status_t lr1110_hal_wait_on_busy( const void* context );

lr1110_hal_status_t lr1110_hal_write( const void* context, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length )

{
 8043ed8:	b580      	push	{r7, lr}
 8043eda:	b086      	sub	sp, #24
 8043edc:	af00      	add	r7, sp, #0
 8043ede:	60f8      	str	r0, [r7, #12]
 8043ee0:	60b9      	str	r1, [r7, #8]
 8043ee2:	603b      	str	r3, [r7, #0]
 8043ee4:	4613      	mov	r3, r2
 8043ee6:	80fb      	strh	r3, [r7, #6]
    if( lr1110_hal_wakeup( context ) == LR1110_HAL_STATUS_OK )
 8043ee8:	68f8      	ldr	r0, [r7, #12]
 8043eea:	f000 f917 	bl	804411c <lr1110_hal_wakeup>
 8043eee:	4603      	mov	r3, r0
 8043ef0:	2b00      	cmp	r3, #0
 8043ef2:	d147      	bne.n	8043f84 <lr1110_hal_write+0xac>
    {
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 8043ef4:	68fb      	ldr	r3, [r7, #12]
 8043ef6:	337c      	adds	r3, #124	; 0x7c
 8043ef8:	2100      	movs	r1, #0
 8043efa:	4618      	mov	r0, r3
 8043efc:	f7fd fc42 	bl	8041784 <GpioWrite>
        for( uint16_t i = 0; i < command_length; i++ )
 8043f00:	2300      	movs	r3, #0
 8043f02:	82fb      	strh	r3, [r7, #22]
 8043f04:	e00d      	b.n	8043f22 <lr1110_hal_write+0x4a>
        {
            SpiInOut( &( ( lr1110_t* ) context )->spi, command[i] );
 8043f06:	68fb      	ldr	r3, [r7, #12]
 8043f08:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8043f0c:	8afb      	ldrh	r3, [r7, #22]
 8043f0e:	68ba      	ldr	r2, [r7, #8]
 8043f10:	4413      	add	r3, r2
 8043f12:	781b      	ldrb	r3, [r3, #0]
 8043f14:	b29b      	uxth	r3, r3
 8043f16:	4619      	mov	r1, r3
 8043f18:	f7fe fdd6 	bl	8042ac8 <SpiInOut>
        for( uint16_t i = 0; i < command_length; i++ )
 8043f1c:	8afb      	ldrh	r3, [r7, #22]
 8043f1e:	3301      	adds	r3, #1
 8043f20:	82fb      	strh	r3, [r7, #22]
 8043f22:	8afa      	ldrh	r2, [r7, #22]
 8043f24:	88fb      	ldrh	r3, [r7, #6]
 8043f26:	429a      	cmp	r2, r3
 8043f28:	d3ed      	bcc.n	8043f06 <lr1110_hal_write+0x2e>
        }
        for( uint16_t i = 0; i < data_length; i++ )
 8043f2a:	2300      	movs	r3, #0
 8043f2c:	82bb      	strh	r3, [r7, #20]
 8043f2e:	e00d      	b.n	8043f4c <lr1110_hal_write+0x74>
        {
            SpiInOut( &( ( lr1110_t* ) context )->spi, data[i] );
 8043f30:	68fb      	ldr	r3, [r7, #12]
 8043f32:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8043f36:	8abb      	ldrh	r3, [r7, #20]
 8043f38:	683a      	ldr	r2, [r7, #0]
 8043f3a:	4413      	add	r3, r2
 8043f3c:	781b      	ldrb	r3, [r3, #0]
 8043f3e:	b29b      	uxth	r3, r3
 8043f40:	4619      	mov	r1, r3
 8043f42:	f7fe fdc1 	bl	8042ac8 <SpiInOut>
        for( uint16_t i = 0; i < data_length; i++ )
 8043f46:	8abb      	ldrh	r3, [r7, #20]
 8043f48:	3301      	adds	r3, #1
 8043f4a:	82bb      	strh	r3, [r7, #20]
 8043f4c:	8aba      	ldrh	r2, [r7, #20]
 8043f4e:	8c3b      	ldrh	r3, [r7, #32]
 8043f50:	429a      	cmp	r2, r3
 8043f52:	d3ed      	bcc.n	8043f30 <lr1110_hal_write+0x58>
        }
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 8043f54:	68fb      	ldr	r3, [r7, #12]
 8043f56:	337c      	adds	r3, #124	; 0x7c
 8043f58:	2101      	movs	r1, #1
 8043f5a:	4618      	mov	r0, r3
 8043f5c:	f7fd fc12 	bl	8041784 <GpioWrite>

        // 0x011B - LR1110_SYSTEM_SET_SLEEP_OC
        if( ( ( command[0] << 8 ) | command[1] ) != 0x011B )
 8043f60:	68bb      	ldr	r3, [r7, #8]
 8043f62:	781b      	ldrb	r3, [r3, #0]
 8043f64:	021b      	lsls	r3, r3, #8
 8043f66:	68ba      	ldr	r2, [r7, #8]
 8043f68:	3201      	adds	r2, #1
 8043f6a:	7812      	ldrb	r2, [r2, #0]
 8043f6c:	4313      	orrs	r3, r2
 8043f6e:	f240 121b 	movw	r2, #283	; 0x11b
 8043f72:	4293      	cmp	r3, r2
 8043f74:	d004      	beq.n	8043f80 <lr1110_hal_write+0xa8>
        {
            return lr1110_hal_wait_on_busy( context );
 8043f76:	68f8      	ldr	r0, [r7, #12]
 8043f78:	f000 f8f8 	bl	804416c <lr1110_hal_wait_on_busy>
 8043f7c:	4603      	mov	r3, r0
 8043f7e:	e002      	b.n	8043f86 <lr1110_hal_write+0xae>
        }
        else
        {
            return LR1110_HAL_STATUS_OK;
 8043f80:	2300      	movs	r3, #0
 8043f82:	e000      	b.n	8043f86 <lr1110_hal_write+0xae>
        }
    }
    return LR1110_HAL_STATUS_ERROR;
 8043f84:	2303      	movs	r3, #3
}
 8043f86:	4618      	mov	r0, r3
 8043f88:	3718      	adds	r7, #24
 8043f8a:	46bd      	mov	sp, r7
 8043f8c:	bd80      	pop	{r7, pc}

08043f8e <lr1110_hal_read>:

lr1110_hal_status_t lr1110_hal_read( const void* context, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint16_t data_length )
{
 8043f8e:	b580      	push	{r7, lr}
 8043f90:	b086      	sub	sp, #24
 8043f92:	af00      	add	r7, sp, #0
 8043f94:	60f8      	str	r0, [r7, #12]
 8043f96:	60b9      	str	r1, [r7, #8]
 8043f98:	603b      	str	r3, [r7, #0]
 8043f9a:	4613      	mov	r3, r2
 8043f9c:	80fb      	strh	r3, [r7, #6]
    if( lr1110_hal_wakeup( context ) == LR1110_HAL_STATUS_OK )
 8043f9e:	68f8      	ldr	r0, [r7, #12]
 8043fa0:	f000 f8bc 	bl	804411c <lr1110_hal_wakeup>
 8043fa4:	4603      	mov	r3, r0
 8043fa6:	2b00      	cmp	r3, #0
 8043fa8:	d151      	bne.n	804404e <lr1110_hal_read+0xc0>
    {
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 8043faa:	68fb      	ldr	r3, [r7, #12]
 8043fac:	337c      	adds	r3, #124	; 0x7c
 8043fae:	2100      	movs	r1, #0
 8043fb0:	4618      	mov	r0, r3
 8043fb2:	f7fd fbe7 	bl	8041784 <GpioWrite>

        for( uint16_t i = 0; i < command_length; i++ )
 8043fb6:	2300      	movs	r3, #0
 8043fb8:	82fb      	strh	r3, [r7, #22]
 8043fba:	e00d      	b.n	8043fd8 <lr1110_hal_read+0x4a>
        {
            SpiInOut( &( ( lr1110_t* ) context )->spi, command[i] );
 8043fbc:	68fb      	ldr	r3, [r7, #12]
 8043fbe:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8043fc2:	8afb      	ldrh	r3, [r7, #22]
 8043fc4:	68ba      	ldr	r2, [r7, #8]
 8043fc6:	4413      	add	r3, r2
 8043fc8:	781b      	ldrb	r3, [r3, #0]
 8043fca:	b29b      	uxth	r3, r3
 8043fcc:	4619      	mov	r1, r3
 8043fce:	f7fe fd7b 	bl	8042ac8 <SpiInOut>
        for( uint16_t i = 0; i < command_length; i++ )
 8043fd2:	8afb      	ldrh	r3, [r7, #22]
 8043fd4:	3301      	adds	r3, #1
 8043fd6:	82fb      	strh	r3, [r7, #22]
 8043fd8:	8afa      	ldrh	r2, [r7, #22]
 8043fda:	88fb      	ldrh	r3, [r7, #6]
 8043fdc:	429a      	cmp	r2, r3
 8043fde:	d3ed      	bcc.n	8043fbc <lr1110_hal_read+0x2e>
        }

        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 8043fe0:	68fb      	ldr	r3, [r7, #12]
 8043fe2:	337c      	adds	r3, #124	; 0x7c
 8043fe4:	2101      	movs	r1, #1
 8043fe6:	4618      	mov	r0, r3
 8043fe8:	f7fd fbcc 	bl	8041784 <GpioWrite>

        lr1110_hal_wait_on_busy( context );
 8043fec:	68f8      	ldr	r0, [r7, #12]
 8043fee:	f000 f8bd 	bl	804416c <lr1110_hal_wait_on_busy>

        // Send dummy byte
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 8043ff2:	68fb      	ldr	r3, [r7, #12]
 8043ff4:	337c      	adds	r3, #124	; 0x7c
 8043ff6:	2100      	movs	r1, #0
 8043ff8:	4618      	mov	r0, r3
 8043ffa:	f7fd fbc3 	bl	8041784 <GpioWrite>

        SpiInOut( &( ( lr1110_t* ) context )->spi, 0 );
 8043ffe:	68fb      	ldr	r3, [r7, #12]
 8044000:	333c      	adds	r3, #60	; 0x3c
 8044002:	2100      	movs	r1, #0
 8044004:	4618      	mov	r0, r3
 8044006:	f7fe fd5f 	bl	8042ac8 <SpiInOut>

        for( uint16_t i = 0; i < data_length; i++ )
 804400a:	2300      	movs	r3, #0
 804400c:	82bb      	strh	r3, [r7, #20]
 804400e:	e00f      	b.n	8044030 <lr1110_hal_read+0xa2>
        {
            data[i] = SpiInOut( &( ( lr1110_t* ) context )->spi, 0 );
 8044010:	68fb      	ldr	r3, [r7, #12]
 8044012:	333c      	adds	r3, #60	; 0x3c
 8044014:	2100      	movs	r1, #0
 8044016:	4618      	mov	r0, r3
 8044018:	f7fe fd56 	bl	8042ac8 <SpiInOut>
 804401c:	4603      	mov	r3, r0
 804401e:	4619      	mov	r1, r3
 8044020:	8abb      	ldrh	r3, [r7, #20]
 8044022:	683a      	ldr	r2, [r7, #0]
 8044024:	4413      	add	r3, r2
 8044026:	b2ca      	uxtb	r2, r1
 8044028:	701a      	strb	r2, [r3, #0]
        for( uint16_t i = 0; i < data_length; i++ )
 804402a:	8abb      	ldrh	r3, [r7, #20]
 804402c:	3301      	adds	r3, #1
 804402e:	82bb      	strh	r3, [r7, #20]
 8044030:	8aba      	ldrh	r2, [r7, #20]
 8044032:	8c3b      	ldrh	r3, [r7, #32]
 8044034:	429a      	cmp	r2, r3
 8044036:	d3eb      	bcc.n	8044010 <lr1110_hal_read+0x82>
        }

        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 8044038:	68fb      	ldr	r3, [r7, #12]
 804403a:	337c      	adds	r3, #124	; 0x7c
 804403c:	2101      	movs	r1, #1
 804403e:	4618      	mov	r0, r3
 8044040:	f7fd fba0 	bl	8041784 <GpioWrite>

        return lr1110_hal_wait_on_busy( context );
 8044044:	68f8      	ldr	r0, [r7, #12]
 8044046:	f000 f891 	bl	804416c <lr1110_hal_wait_on_busy>
 804404a:	4603      	mov	r3, r0
 804404c:	e000      	b.n	8044050 <lr1110_hal_read+0xc2>
    }
    return LR1110_HAL_STATUS_ERROR;
 804404e:	2303      	movs	r3, #3
}
 8044050:	4618      	mov	r0, r3
 8044052:	3718      	adds	r7, #24
 8044054:	46bd      	mov	sp, r7
 8044056:	bd80      	pop	{r7, pc}

08044058 <lr1110_hal_write_read>:

lr1110_hal_status_t lr1110_hal_write_read( const void* context, const uint8_t* command, uint8_t* data,
                                           const uint16_t data_length )
{
 8044058:	b580      	push	{r7, lr}
 804405a:	b086      	sub	sp, #24
 804405c:	af00      	add	r7, sp, #0
 804405e:	60f8      	str	r0, [r7, #12]
 8044060:	60b9      	str	r1, [r7, #8]
 8044062:	607a      	str	r2, [r7, #4]
 8044064:	807b      	strh	r3, [r7, #2]
    if( lr1110_hal_wakeup( context ) == LR1110_HAL_STATUS_OK )
 8044066:	68f8      	ldr	r0, [r7, #12]
 8044068:	f000 f858 	bl	804411c <lr1110_hal_wakeup>
 804406c:	4603      	mov	r3, r0
 804406e:	2b00      	cmp	r3, #0
 8044070:	d139      	bne.n	80440e6 <lr1110_hal_write_read+0x8e>
    {
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 8044072:	68fb      	ldr	r3, [r7, #12]
 8044074:	337c      	adds	r3, #124	; 0x7c
 8044076:	2100      	movs	r1, #0
 8044078:	4618      	mov	r0, r3
 804407a:	f7fd fb83 	bl	8041784 <GpioWrite>

        for( uint16_t i = 0; i < data_length; i++ )
 804407e:	2300      	movs	r3, #0
 8044080:	82fb      	strh	r3, [r7, #22]
 8044082:	e014      	b.n	80440ae <lr1110_hal_write_read+0x56>
        {
            data[i] = SpiInOut( &( ( lr1110_t* ) context )->spi, command[i] );
 8044084:	68fb      	ldr	r3, [r7, #12]
 8044086:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 804408a:	8afb      	ldrh	r3, [r7, #22]
 804408c:	68ba      	ldr	r2, [r7, #8]
 804408e:	4413      	add	r3, r2
 8044090:	781b      	ldrb	r3, [r3, #0]
 8044092:	b29b      	uxth	r3, r3
 8044094:	4619      	mov	r1, r3
 8044096:	f7fe fd17 	bl	8042ac8 <SpiInOut>
 804409a:	4603      	mov	r3, r0
 804409c:	4619      	mov	r1, r3
 804409e:	8afb      	ldrh	r3, [r7, #22]
 80440a0:	687a      	ldr	r2, [r7, #4]
 80440a2:	4413      	add	r3, r2
 80440a4:	b2ca      	uxtb	r2, r1
 80440a6:	701a      	strb	r2, [r3, #0]
        for( uint16_t i = 0; i < data_length; i++ )
 80440a8:	8afb      	ldrh	r3, [r7, #22]
 80440aa:	3301      	adds	r3, #1
 80440ac:	82fb      	strh	r3, [r7, #22]
 80440ae:	8afa      	ldrh	r2, [r7, #22]
 80440b0:	887b      	ldrh	r3, [r7, #2]
 80440b2:	429a      	cmp	r2, r3
 80440b4:	d3e6      	bcc.n	8044084 <lr1110_hal_write_read+0x2c>
        }

        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 80440b6:	68fb      	ldr	r3, [r7, #12]
 80440b8:	337c      	adds	r3, #124	; 0x7c
 80440ba:	2101      	movs	r1, #1
 80440bc:	4618      	mov	r0, r3
 80440be:	f7fd fb61 	bl	8041784 <GpioWrite>

        // 0x011B - LR1110_SYSTEM_SET_SLEEP_OC
        if( ( ( command[0] << 8 ) | command[1] ) != 0x011B )
 80440c2:	68bb      	ldr	r3, [r7, #8]
 80440c4:	781b      	ldrb	r3, [r3, #0]
 80440c6:	021b      	lsls	r3, r3, #8
 80440c8:	68ba      	ldr	r2, [r7, #8]
 80440ca:	3201      	adds	r2, #1
 80440cc:	7812      	ldrb	r2, [r2, #0]
 80440ce:	4313      	orrs	r3, r2
 80440d0:	f240 121b 	movw	r2, #283	; 0x11b
 80440d4:	4293      	cmp	r3, r2
 80440d6:	d004      	beq.n	80440e2 <lr1110_hal_write_read+0x8a>
        {
            return lr1110_hal_wait_on_busy( context );
 80440d8:	68f8      	ldr	r0, [r7, #12]
 80440da:	f000 f847 	bl	804416c <lr1110_hal_wait_on_busy>
 80440de:	4603      	mov	r3, r0
 80440e0:	e002      	b.n	80440e8 <lr1110_hal_write_read+0x90>
        }
        else
        {
            return LR1110_HAL_STATUS_OK;
 80440e2:	2300      	movs	r3, #0
 80440e4:	e000      	b.n	80440e8 <lr1110_hal_write_read+0x90>
        }
    }
    return LR1110_HAL_STATUS_ERROR;
 80440e6:	2303      	movs	r3, #3
}
 80440e8:	4618      	mov	r0, r3
 80440ea:	3718      	adds	r7, #24
 80440ec:	46bd      	mov	sp, r7
 80440ee:	bd80      	pop	{r7, pc}

080440f0 <lr1110_hal_reset>:

lr1110_hal_status_t lr1110_hal_reset( const void* context )
{
 80440f0:	b580      	push	{r7, lr}
 80440f2:	b082      	sub	sp, #8
 80440f4:	af00      	add	r7, sp, #0
 80440f6:	6078      	str	r0, [r7, #4]
    GpioWrite( &( ( lr1110_t* ) context )->reset, 0 );
 80440f8:	687b      	ldr	r3, [r7, #4]
 80440fa:	2100      	movs	r1, #0
 80440fc:	4618      	mov	r0, r3
 80440fe:	f7fd fb41 	bl	8041784 <GpioWrite>
    DelayMs( 1 );
 8044102:	2001      	movs	r0, #1
 8044104:	f7fd f876 	bl	80411f4 <DelayMs>
    GpioWrite( &( ( lr1110_t* ) context )->reset, 1 );
 8044108:	687b      	ldr	r3, [r7, #4]
 804410a:	2101      	movs	r1, #1
 804410c:	4618      	mov	r0, r3
 804410e:	f7fd fb39 	bl	8041784 <GpioWrite>
    return LR1110_HAL_STATUS_OK;
 8044112:	2300      	movs	r3, #0
}
 8044114:	4618      	mov	r0, r3
 8044116:	3708      	adds	r7, #8
 8044118:	46bd      	mov	sp, r7
 804411a:	bd80      	pop	{r7, pc}

0804411c <lr1110_hal_wakeup>:

lr1110_hal_status_t lr1110_hal_wakeup( const void* context )
{
 804411c:	b580      	push	{r7, lr}
 804411e:	b082      	sub	sp, #8
 8044120:	af00      	add	r7, sp, #0
 8044122:	6078      	str	r0, [r7, #4]
    if( ( lr1110_hal_get_operating_mode( context ) == LR1110_HAL_OP_MODE_SLEEP ) ||
 8044124:	6878      	ldr	r0, [r7, #4]
 8044126:	f000 f833 	bl	8044190 <lr1110_hal_get_operating_mode>
 804412a:	4603      	mov	r3, r0
 804412c:	2b00      	cmp	r3, #0
 804412e:	d005      	beq.n	804413c <lr1110_hal_wakeup+0x20>
        ( lr1110_hal_get_operating_mode( context ) == LR1110_HAL_OP_MODE_RX_DC ) )
 8044130:	6878      	ldr	r0, [r7, #4]
 8044132:	f000 f82d 	bl	8044190 <lr1110_hal_get_operating_mode>
 8044136:	4603      	mov	r3, r0
    if( ( lr1110_hal_get_operating_mode( context ) == LR1110_HAL_OP_MODE_SLEEP ) ||
 8044138:	2b07      	cmp	r3, #7
 804413a:	d10f      	bne.n	804415c <lr1110_hal_wakeup+0x40>
    {
        // Wakeup radio
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 804413c:	687b      	ldr	r3, [r7, #4]
 804413e:	337c      	adds	r3, #124	; 0x7c
 8044140:	2100      	movs	r1, #0
 8044142:	4618      	mov	r0, r3
 8044144:	f7fd fb1e 	bl	8041784 <GpioWrite>
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 8044148:	687b      	ldr	r3, [r7, #4]
 804414a:	337c      	adds	r3, #124	; 0x7c
 804414c:	2101      	movs	r1, #1
 804414e:	4618      	mov	r0, r3
 8044150:	f7fd fb18 	bl	8041784 <GpioWrite>
        // Radio is awake in STDBY_RC mode
        ( ( lr1110_t* ) context )->op_mode = LR1110_HAL_OP_MODE_STDBY_RC;
 8044154:	687b      	ldr	r3, [r7, #4]
 8044156:	2201      	movs	r2, #1
 8044158:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    }

    // Wait on busy pin for 100 ms
    return lr1110_hal_wait_on_busy( context );
 804415c:	6878      	ldr	r0, [r7, #4]
 804415e:	f000 f805 	bl	804416c <lr1110_hal_wait_on_busy>
 8044162:	4603      	mov	r3, r0
}
 8044164:	4618      	mov	r0, r3
 8044166:	3708      	adds	r7, #8
 8044168:	46bd      	mov	sp, r7
 804416a:	bd80      	pop	{r7, pc}

0804416c <lr1110_hal_wait_on_busy>:

static lr1110_hal_status_t lr1110_hal_wait_on_busy( const void* context )
{
 804416c:	b580      	push	{r7, lr}
 804416e:	b082      	sub	sp, #8
 8044170:	af00      	add	r7, sp, #0
 8044172:	6078      	str	r0, [r7, #4]
    while( GpioRead( &( ( lr1110_t* ) context )->busy ) == 1 )
 8044174:	bf00      	nop
 8044176:	687b      	ldr	r3, [r7, #4]
 8044178:	3314      	adds	r3, #20
 804417a:	4618      	mov	r0, r3
 804417c:	f7fd fb1b 	bl	80417b6 <GpioRead>
 8044180:	4603      	mov	r3, r0
 8044182:	2b01      	cmp	r3, #1
 8044184:	d0f7      	beq.n	8044176 <lr1110_hal_wait_on_busy+0xa>
    {
        ;
    }
    return LR1110_HAL_STATUS_OK;
 8044186:	2300      	movs	r3, #0
}
 8044188:	4618      	mov	r0, r3
 804418a:	3708      	adds	r7, #8
 804418c:	46bd      	mov	sp, r7
 804418e:	bd80      	pop	{r7, pc}

08044190 <lr1110_hal_get_operating_mode>:

lr1110_hal_operating_mode_t lr1110_hal_get_operating_mode( const void* context )
{
 8044190:	b480      	push	{r7}
 8044192:	b083      	sub	sp, #12
 8044194:	af00      	add	r7, sp, #0
 8044196:	6078      	str	r0, [r7, #4]
    return ( ( lr1110_t* ) context )->op_mode;
 8044198:	687b      	ldr	r3, [r7, #4]
 804419a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
}
 804419e:	4618      	mov	r0, r3
 80441a0:	370c      	adds	r7, #12
 80441a2:	46bd      	mov	sp, r7
 80441a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80441a8:	4770      	bx	lr

080441aa <lr1110_hal_set_operating_mode>:

void lr1110_hal_set_operating_mode( const void* context, lr1110_hal_operating_mode_t op_mode )
{
 80441aa:	b480      	push	{r7}
 80441ac:	b083      	sub	sp, #12
 80441ae:	af00      	add	r7, sp, #0
 80441b0:	6078      	str	r0, [r7, #4]
 80441b2:	460b      	mov	r3, r1
 80441b4:	70fb      	strb	r3, [r7, #3]
    ( ( lr1110_t* ) context )->op_mode = op_mode;
 80441b6:	687b      	ldr	r3, [r7, #4]
 80441b8:	78fa      	ldrb	r2, [r7, #3]
 80441ba:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        GpioWrite( &DbgPinTx, 0 );
        GpioWrite( &DbgPinRx, 0 );
        break;
    }
#endif
}
 80441be:	bf00      	nop
 80441c0:	370c      	adds	r7, #12
 80441c2:	46bd      	mov	sp, r7
 80441c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80441c8:	4770      	bx	lr
	...

080441cc <RadioGetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t RadioGetFskBandwidthRegValue( uint32_t bandwidth )
{
 80441cc:	b480      	push	{r7}
 80441ce:	b085      	sub	sp, #20
 80441d0:	af00      	add	r7, sp, #0
 80441d2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80441d4:	687b      	ldr	r3, [r7, #4]
 80441d6:	2b00      	cmp	r3, #0
 80441d8:	d101      	bne.n	80441de <RadioGetFskBandwidthRegValue+0x12>
    {
        return ( 0x1F );
 80441da:	231f      	movs	r3, #31
 80441dc:	e01f      	b.n	804421e <RadioGetFskBandwidthRegValue+0x52>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80441de:	2300      	movs	r3, #0
 80441e0:	73fb      	strb	r3, [r7, #15]
 80441e2:	e018      	b.n	8044216 <RadioGetFskBandwidthRegValue+0x4a>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 80441e4:	7bfb      	ldrb	r3, [r7, #15]
 80441e6:	4a11      	ldr	r2, [pc, #68]	; (804422c <RadioGetFskBandwidthRegValue+0x60>)
 80441e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80441ec:	687a      	ldr	r2, [r7, #4]
 80441ee:	429a      	cmp	r2, r3
 80441f0:	d30e      	bcc.n	8044210 <RadioGetFskBandwidthRegValue+0x44>
 80441f2:	7bfb      	ldrb	r3, [r7, #15]
 80441f4:	3301      	adds	r3, #1
 80441f6:	4a0d      	ldr	r2, [pc, #52]	; (804422c <RadioGetFskBandwidthRegValue+0x60>)
 80441f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80441fc:	687a      	ldr	r2, [r7, #4]
 80441fe:	429a      	cmp	r2, r3
 8044200:	d206      	bcs.n	8044210 <RadioGetFskBandwidthRegValue+0x44>
        {
            return FskBandwidths[i + 1].RegValue;
 8044202:	7bfb      	ldrb	r3, [r7, #15]
 8044204:	3301      	adds	r3, #1
 8044206:	4a09      	ldr	r2, [pc, #36]	; (804422c <RadioGetFskBandwidthRegValue+0x60>)
 8044208:	00db      	lsls	r3, r3, #3
 804420a:	4413      	add	r3, r2
 804420c:	791b      	ldrb	r3, [r3, #4]
 804420e:	e006      	b.n	804421e <RadioGetFskBandwidthRegValue+0x52>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8044210:	7bfb      	ldrb	r3, [r7, #15]
 8044212:	3301      	adds	r3, #1
 8044214:	73fb      	strb	r3, [r7, #15]
 8044216:	7bfb      	ldrb	r3, [r7, #15]
 8044218:	2b14      	cmp	r3, #20
 804421a:	d9e3      	bls.n	80441e4 <RadioGetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 )
 804421c:	e7fe      	b.n	804421c <RadioGetFskBandwidthRegValue+0x50>
        ;
}
 804421e:	4618      	mov	r0, r3
 8044220:	3714      	adds	r7, #20
 8044222:	46bd      	mov	sp, r7
 8044224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044228:	4770      	bx	lr
 804422a:	bf00      	nop
 804422c:	0804e8e0 	.word	0x0804e8e0

08044230 <RadioInit>:

void RadioInit( RadioEvents_t* events )
{
 8044230:	b580      	push	{r7, lr}
 8044232:	b082      	sub	sp, #8
 8044234:	af00      	add	r7, sp, #0
 8044236:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8044238:	4a15      	ldr	r2, [pc, #84]	; (8044290 <RadioInit+0x60>)
 804423a:	687b      	ldr	r3, [r7, #4]
 804423c:	6013      	str	r3, [r2, #0]

    lr1110_board_init( &LR1110, RadioOnDioIrq );
 804423e:	4915      	ldr	r1, [pc, #84]	; (8044294 <RadioInit+0x64>)
 8044240:	4815      	ldr	r0, [pc, #84]	; (8044298 <RadioInit+0x68>)
 8044242:	f7ff fdb9 	bl	8043db8 <lr1110_board_init>

    lr1110_system_set_standby( &LR1110, LR1110_SYSTEM_STANDBY_CFG_RC );
 8044246:	2100      	movs	r1, #0
 8044248:	4813      	ldr	r0, [pc, #76]	; (8044298 <RadioInit+0x68>)
 804424a:	f002 fc63 	bl	8046b14 <lr1110_system_set_standby>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_STDBY_RC );
 804424e:	2101      	movs	r1, #1
 8044250:	4811      	ldr	r0, [pc, #68]	; (8044298 <RadioInit+0x68>)
 8044252:	f7ff ffaa 	bl	80441aa <lr1110_hal_set_operating_mode>

    lr1110_system_set_reg_mode( &LR1110, LR1110_SYSTEM_REG_MODE_DCDC );
 8044256:	2101      	movs	r1, #1
 8044258:	480f      	ldr	r0, [pc, #60]	; (8044298 <RadioInit+0x68>)
 804425a:	f002 fb62 	bl	8046922 <lr1110_system_set_reg_mode>

    lr1110_radio_set_tx_params( &LR1110, 0, LR1110_RADIO_RAMP_208_US );
 804425e:	220c      	movs	r2, #12
 8044260:	2100      	movs	r1, #0
 8044262:	480d      	ldr	r0, [pc, #52]	; (8044298 <RadioInit+0x68>)
 8044264:	f002 f843 	bl	80462ee <lr1110_radio_set_tx_params>
    lr1110_system_set_dio_irq_params( &LR1110, LR1110_SYSTEM_IRQ_ALL_MASK, LR1110_SYSTEM_IRQ_NONE );
 8044268:	2200      	movs	r2, #0
 804426a:	490c      	ldr	r1, [pc, #48]	; (804429c <RadioInit+0x6c>)
 804426c:	480a      	ldr	r0, [pc, #40]	; (8044298 <RadioInit+0x68>)
 804426e:	f002 fba1 	bl	80469b4 <lr1110_system_set_dio_irq_params>

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8044272:	490b      	ldr	r1, [pc, #44]	; (80442a0 <RadioInit+0x70>)
 8044274:	480b      	ldr	r0, [pc, #44]	; (80442a4 <RadioInit+0x74>)
 8044276:	f7fe fea9 	bl	8042fcc <TimerInit>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 804427a:	490b      	ldr	r1, [pc, #44]	; (80442a8 <RadioInit+0x78>)
 804427c:	480b      	ldr	r0, [pc, #44]	; (80442ac <RadioInit+0x7c>)
 804427e:	f7fe fea5 	bl	8042fcc <TimerInit>

    IrqFired = false;
 8044282:	4b0b      	ldr	r3, [pc, #44]	; (80442b0 <RadioInit+0x80>)
 8044284:	2200      	movs	r2, #0
 8044286:	701a      	strb	r2, [r3, #0]
}
 8044288:	bf00      	nop
 804428a:	3708      	adds	r7, #8
 804428c:	46bd      	mov	sp, r7
 804428e:	bd80      	pop	{r7, pc}
 8044290:	20018348 	.word	0x20018348
 8044294:	08045045 	.word	0x08045045
 8044298:	200195d0 	.word	0x200195d0
 804429c:	03f807fc 	.word	0x03f807fc
 80442a0:	08044fe5 	.word	0x08044fe5
 80442a4:	2001968c 	.word	0x2001968c
 80442a8:	08045015 	.word	0x08045015
 80442ac:	200197b0 	.word	0x200197b0
 80442b0:	20018341 	.word	0x20018341

080442b4 <RadioGetStatus>:

RadioState_t RadioGetStatus( void )
{
 80442b4:	b580      	push	{r7, lr}
 80442b6:	af00      	add	r7, sp, #0
    switch( lr1110_hal_get_operating_mode( &LR1110 ) )
 80442b8:	480c      	ldr	r0, [pc, #48]	; (80442ec <RadioGetStatus+0x38>)
 80442ba:	f7ff ff69 	bl	8044190 <lr1110_hal_get_operating_mode>
 80442be:	4603      	mov	r3, r0
 80442c0:	2b08      	cmp	r3, #8
 80442c2:	d00d      	beq.n	80442e0 <RadioGetStatus+0x2c>
 80442c4:	2b08      	cmp	r3, #8
 80442c6:	dc0d      	bgt.n	80442e4 <RadioGetStatus+0x30>
 80442c8:	2b04      	cmp	r3, #4
 80442ca:	d005      	beq.n	80442d8 <RadioGetStatus+0x24>
 80442cc:	2b04      	cmp	r3, #4
 80442ce:	db09      	blt.n	80442e4 <RadioGetStatus+0x30>
 80442d0:	3b05      	subs	r3, #5
 80442d2:	2b02      	cmp	r3, #2
 80442d4:	d806      	bhi.n	80442e4 <RadioGetStatus+0x30>
 80442d6:	e001      	b.n	80442dc <RadioGetStatus+0x28>
    {
    case LR1110_HAL_OP_MODE_TX:
        return RF_TX_RUNNING;
 80442d8:	2302      	movs	r3, #2
 80442da:	e004      	b.n	80442e6 <RadioGetStatus+0x32>
    case LR1110_HAL_OP_MODE_RX:
    case LR1110_HAL_OP_MODE_RX_C:
    case LR1110_HAL_OP_MODE_RX_DC:
        return RF_RX_RUNNING;
 80442dc:	2301      	movs	r3, #1
 80442de:	e002      	b.n	80442e6 <RadioGetStatus+0x32>
    case LR1110_HAL_OP_MODE_CAD:
        return RF_CAD;
 80442e0:	2303      	movs	r3, #3
 80442e2:	e000      	b.n	80442e6 <RadioGetStatus+0x32>
    default:
        return RF_IDLE;
 80442e4:	2300      	movs	r3, #0
    }
}
 80442e6:	4618      	mov	r0, r3
 80442e8:	bd80      	pop	{r7, pc}
 80442ea:	bf00      	nop
 80442ec:	200195d0 	.word	0x200195d0

080442f0 <RadioSetModem>:

void RadioSetModem( RadioModems_t modem )
{
 80442f0:	b580      	push	{r7, lr}
 80442f2:	b082      	sub	sp, #8
 80442f4:	af00      	add	r7, sp, #0
 80442f6:	4603      	mov	r3, r0
 80442f8:	71fb      	strb	r3, [r7, #7]
    switch( modem )
 80442fa:	79fb      	ldrb	r3, [r7, #7]
 80442fc:	2b01      	cmp	r3, #1
 80442fe:	d007      	beq.n	8044310 <RadioSetModem+0x20>
    {
    default:
    case MODEM_FSK:
    	lr1110_radio_set_pkt_type( &LR1110, LR1110_RADIO_PKT_TYPE_GFSK );
 8044300:	2101      	movs	r1, #1
 8044302:	480f      	ldr	r0, [pc, #60]	; (8044340 <RadioSetModem+0x50>)
 8044304:	f001 ff10 	bl	8046128 <lr1110_radio_set_pkt_type>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        RadioPublicNetwork.Current = false;
 8044308:	4b0e      	ldr	r3, [pc, #56]	; (8044344 <RadioSetModem+0x54>)
 804430a:	2200      	movs	r2, #0
 804430c:	705a      	strb	r2, [r3, #1]
        break;
 804430e:	e013      	b.n	8044338 <RadioSetModem+0x48>
    case MODEM_LORA:
        lr1110_radio_set_pkt_type( &LR1110, LR1110_RADIO_PKT_TYPE_LORA );
 8044310:	2102      	movs	r1, #2
 8044312:	480b      	ldr	r0, [pc, #44]	; (8044340 <RadioSetModem+0x50>)
 8044314:	f001 ff08 	bl	8046128 <lr1110_radio_set_pkt_type>
        // Public/Private network register is reset when switching modems
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 8044318:	4b0a      	ldr	r3, [pc, #40]	; (8044344 <RadioSetModem+0x54>)
 804431a:	785a      	ldrb	r2, [r3, #1]
 804431c:	4b09      	ldr	r3, [pc, #36]	; (8044344 <RadioSetModem+0x54>)
 804431e:	781b      	ldrb	r3, [r3, #0]
 8044320:	429a      	cmp	r2, r3
 8044322:	d008      	beq.n	8044336 <RadioSetModem+0x46>
        {
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 8044324:	4b07      	ldr	r3, [pc, #28]	; (8044344 <RadioSetModem+0x54>)
 8044326:	781a      	ldrb	r2, [r3, #0]
 8044328:	4b06      	ldr	r3, [pc, #24]	; (8044344 <RadioSetModem+0x54>)
 804432a:	705a      	strb	r2, [r3, #1]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 804432c:	4b05      	ldr	r3, [pc, #20]	; (8044344 <RadioSetModem+0x54>)
 804432e:	785b      	ldrb	r3, [r3, #1]
 8044330:	4618      	mov	r0, r3
 8044332:	f000 fe27 	bl	8044f84 <RadioSetPublicNetwork>
        }
        break;
 8044336:	bf00      	nop
    }
}
 8044338:	bf00      	nop
 804433a:	3708      	adds	r7, #8
 804433c:	46bd      	mov	sp, r7
 804433e:	bd80      	pop	{r7, pc}
 8044340:	200195d0 	.word	0x200195d0
 8044344:	20018344 	.word	0x20018344

08044348 <RadioSetChannel>:

void RadioSetChannel( uint32_t freq )
{
 8044348:	b580      	push	{r7, lr}
 804434a:	b082      	sub	sp, #8
 804434c:	af00      	add	r7, sp, #0
 804434e:	6078      	str	r0, [r7, #4]
    lr1110_radio_set_rf_freq( &LR1110, freq );
 8044350:	6879      	ldr	r1, [r7, #4]
 8044352:	4803      	ldr	r0, [pc, #12]	; (8044360 <RadioSetChannel+0x18>)
 8044354:	f001 fec2 	bl	80460dc <lr1110_radio_set_rf_freq>
}
 8044358:	bf00      	nop
 804435a:	3708      	adds	r7, #8
 804435c:	46bd      	mov	sp, r7
 804435e:	bd80      	pop	{r7, pc}
 8044360:	200195d0 	.word	0x200195d0

08044364 <RadioIsChannelFree>:

bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8044364:	b580      	push	{r7, lr}
 8044366:	b090      	sub	sp, #64	; 0x40
 8044368:	af0a      	add	r7, sp, #40	; 0x28
 804436a:	60f8      	str	r0, [r7, #12]
 804436c:	60b9      	str	r1, [r7, #8]
 804436e:	603b      	str	r3, [r7, #0]
 8044370:	4613      	mov	r3, r2
 8044372:	80fb      	strh	r3, [r7, #6]
    bool     status           = true;
 8044374:	2301      	movs	r3, #1
 8044376:	75fb      	strb	r3, [r7, #23]
    int16_t  rssi             = 0;
 8044378:	2300      	movs	r3, #0
 804437a:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 804437c:	2300      	movs	r3, #0
 804437e:	613b      	str	r3, [r7, #16]

    RadioSetModem( MODEM_FSK );
 8044380:	2000      	movs	r0, #0
 8044382:	f7ff ffb5 	bl	80442f0 <RadioSetModem>

    RadioSetChannel( freq );
 8044386:	68f8      	ldr	r0, [r7, #12]
 8044388:	f7ff ffde 	bl	8044348 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 804438c:	2301      	movs	r3, #1
 804438e:	9309      	str	r3, [sp, #36]	; 0x24
 8044390:	2300      	movs	r3, #0
 8044392:	9308      	str	r3, [sp, #32]
 8044394:	2300      	movs	r3, #0
 8044396:	9307      	str	r3, [sp, #28]
 8044398:	2300      	movs	r3, #0
 804439a:	9306      	str	r3, [sp, #24]
 804439c:	2300      	movs	r3, #0
 804439e:	9305      	str	r3, [sp, #20]
 80443a0:	2300      	movs	r3, #0
 80443a2:	9304      	str	r3, [sp, #16]
 80443a4:	2300      	movs	r3, #0
 80443a6:	9303      	str	r3, [sp, #12]
 80443a8:	2300      	movs	r3, #0
 80443aa:	9302      	str	r3, [sp, #8]
 80443ac:	2303      	movs	r3, #3
 80443ae:	9301      	str	r3, [sp, #4]
 80443b0:	68bb      	ldr	r3, [r7, #8]
 80443b2:	9300      	str	r3, [sp, #0]
 80443b4:	2300      	movs	r3, #0
 80443b6:	f44f 7216 	mov.w	r2, #600	; 0x258
 80443ba:	68b9      	ldr	r1, [r7, #8]
 80443bc:	2000      	movs	r0, #0
 80443be:	f000 f83b 	bl	8044438 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 80443c2:	2000      	movs	r0, #0
 80443c4:	f000 fc76 	bl	8044cb4 <RadioRx>

    DelayMs( 1 );
 80443c8:	2001      	movs	r0, #1
 80443ca:	f7fc ff13 	bl	80411f4 <DelayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 80443ce:	f7fe fff6 	bl	80433be <TimerGetCurrentTime>
 80443d2:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80443d4:	e00d      	b.n	80443f2 <RadioIsChannelFree+0x8e>
    {
        rssi = RadioRssi( MODEM_FSK );
 80443d6:	2000      	movs	r0, #0
 80443d8:	f000 fd3a 	bl	8044e50 <RadioRssi>
 80443dc:	4603      	mov	r3, r0
 80443de:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80443e0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80443e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80443e8:	429a      	cmp	r2, r3
 80443ea:	dd02      	ble.n	80443f2 <RadioIsChannelFree+0x8e>
        {
            status = false;
 80443ec:	2300      	movs	r3, #0
 80443ee:	75fb      	strb	r3, [r7, #23]
            break;
 80443f0:	e006      	b.n	8044400 <RadioIsChannelFree+0x9c>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80443f2:	6938      	ldr	r0, [r7, #16]
 80443f4:	f7fe fff1 	bl	80433da <TimerGetElapsedTime>
 80443f8:	4602      	mov	r2, r0
 80443fa:	683b      	ldr	r3, [r7, #0]
 80443fc:	4293      	cmp	r3, r2
 80443fe:	d8ea      	bhi.n	80443d6 <RadioIsChannelFree+0x72>
        }
    }
    RadioSleep( );
 8044400:	f000 fc30 	bl	8044c64 <RadioSleep>
    return status;
 8044404:	7dfb      	ldrb	r3, [r7, #23]
}
 8044406:	4618      	mov	r0, r3
 8044408:	3718      	adds	r7, #24
 804440a:	46bd      	mov	sp, r7
 804440c:	bd80      	pop	{r7, pc}
	...

08044410 <RadioRandom>:

uint32_t RadioRandom( void )
{
 8044410:	b580      	push	{r7, lr}
 8044412:	b082      	sub	sp, #8
 8044414:	af00      	add	r7, sp, #0
    uint32_t rnd  = 0;
 8044416:	2300      	movs	r3, #0
 8044418:	607b      	str	r3, [r7, #4]

    RadioStandby( );
 804441a:	f000 fc3d 	bl	8044c98 <RadioStandby>

    lr1110_system_get_random_number( &LR1110, &rnd );
 804441e:	1d3b      	adds	r3, r7, #4
 8044420:	4619      	mov	r1, r3
 8044422:	4804      	ldr	r0, [pc, #16]	; (8044434 <RadioRandom+0x24>)
 8044424:	f002 fb90 	bl	8046b48 <lr1110_system_get_random_number>

    return rnd;
 8044428:	687b      	ldr	r3, [r7, #4]
}
 804442a:	4618      	mov	r0, r3
 804442c:	3708      	adds	r7, #8
 804442e:	46bd      	mov	sp, r7
 8044430:	bd80      	pop	{r7, pc}
 8044432:	bf00      	nop
 8044434:	200195d0 	.word	0x200195d0

08044438 <RadioSetRxConfig>:

void RadioSetRxConfig( RadioModems_t modem, uint32_t bandwidth, uint32_t datarate, uint8_t coderate,
                       uint32_t bandwidthAfc, uint16_t preambleLen, uint16_t symbTimeout, bool fixLen,
                       uint8_t payloadLen, bool crcOn, bool freqHopOn, uint8_t hopPeriod, bool iqInverted,
                       bool rxContinuous )
{
 8044438:	b580      	push	{r7, lr}
 804443a:	b086      	sub	sp, #24
 804443c:	af00      	add	r7, sp, #0
 804443e:	60b9      	str	r1, [r7, #8]
 8044440:	607a      	str	r2, [r7, #4]
 8044442:	461a      	mov	r2, r3
 8044444:	4603      	mov	r3, r0
 8044446:	73fb      	strb	r3, [r7, #15]
 8044448:	4613      	mov	r3, r2
 804444a:	73bb      	strb	r3, [r7, #14]
    RxContinuous = rxContinuous;
 804444c:	4a94      	ldr	r2, [pc, #592]	; (80446a0 <RadioSetRxConfig+0x268>)
 804444e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8044452:	7013      	strb	r3, [r2, #0]
    if( rxContinuous == true )
 8044454:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8044458:	2b00      	cmp	r3, #0
 804445a:	d001      	beq.n	8044460 <RadioSetRxConfig+0x28>
    {
        symbTimeout = 0;
 804445c:	2300      	movs	r3, #0
 804445e:	853b      	strh	r3, [r7, #40]	; 0x28
    }
    if( fixLen == true )
 8044460:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8044464:	2b00      	cmp	r3, #0
 8044466:	d004      	beq.n	8044472 <RadioSetRxConfig+0x3a>
    {
        MaxPayloadLength = payloadLen;
 8044468:	4a8e      	ldr	r2, [pc, #568]	; (80446a4 <RadioSetRxConfig+0x26c>)
 804446a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 804446e:	7013      	strb	r3, [r2, #0]
 8044470:	e002      	b.n	8044478 <RadioSetRxConfig+0x40>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8044472:	4b8c      	ldr	r3, [pc, #560]	; (80446a4 <RadioSetRxConfig+0x26c>)
 8044474:	22ff      	movs	r2, #255	; 0xff
 8044476:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8044478:	7bfb      	ldrb	r3, [r7, #15]
 804447a:	2b00      	cmp	r3, #0
 804447c:	d003      	beq.n	8044486 <RadioSetRxConfig+0x4e>
 804447e:	2b01      	cmp	r3, #1
 8044480:	f000 8089 	beq.w	8044596 <RadioSetRxConfig+0x15e>
        // Timeout Max, Timeout handled directly in SetRx function
        RxTimeout = 0xFFFF;

        break;
    }
}
 8044484:	e108      	b.n	8044698 <RadioSetRxConfig+0x260>
        lr1110_radio_stop_timeout_on_preamble( &LR1110, false );
 8044486:	2100      	movs	r1, #0
 8044488:	4887      	ldr	r0, [pc, #540]	; (80446a8 <RadioSetRxConfig+0x270>)
 804448a:	f001 ffbc 	bl	8046406 <lr1110_radio_stop_timeout_on_preamble>
        LR1110.modulation_params.packet_type = LR1110_RADIO_PKT_TYPE_GFSK;
 804448e:	4b86      	ldr	r3, [pc, #536]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044490:	2201      	movs	r2, #1
 8044492:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        LR1110.modulation_params.modulation.gfsk.br_in_bps     = datarate;
 8044496:	4a84      	ldr	r2, [pc, #528]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044498:	687b      	ldr	r3, [r7, #4]
 804449a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        LR1110.modulation_params.modulation.gfsk.pulse_shape = LR1110_RADIO_GFSK_PULSE_SHAPE_BT_1;
 804449e:	4b82      	ldr	r3, [pc, #520]	; (80446a8 <RadioSetRxConfig+0x270>)
 80444a0:	220b      	movs	r2, #11
 80444a2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            ( lr1110_radio_gfsk_bw_t ) RadioGetFskBandwidthRegValue( bandwidth << 1 ); // LR1110 badwidth is double sided
 80444a6:	68bb      	ldr	r3, [r7, #8]
 80444a8:	005b      	lsls	r3, r3, #1
 80444aa:	4618      	mov	r0, r3
 80444ac:	f7ff fe8e 	bl	80441cc <RadioGetFskBandwidthRegValue>
 80444b0:	4603      	mov	r3, r0
 80444b2:	461a      	mov	r2, r3
        LR1110.modulation_params.modulation.gfsk.bw_dsb_param =
 80444b4:	4b7c      	ldr	r3, [pc, #496]	; (80446a8 <RadioSetRxConfig+0x270>)
 80444b6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
        LR1110.packet_params.packet_type                     = LR1110_RADIO_PKT_TYPE_GFSK;
 80444ba:	4b7b      	ldr	r3, [pc, #492]	; (80446a8 <RadioSetRxConfig+0x270>)
 80444bc:	2201      	movs	r2, #1
 80444be:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        LR1110.packet_params.packet.gfsk.preamble_len_in_bits = ( preambleLen << 3 );  // convert byte into bit
 80444c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80444c4:	00db      	lsls	r3, r3, #3
 80444c6:	b29a      	uxth	r2, r3
 80444c8:	4b77      	ldr	r3, [pc, #476]	; (80446a8 <RadioSetRxConfig+0x270>)
 80444ca:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        LR1110.packet_params.packet.gfsk.preamble_detector    = LR1110_RADIO_GFSK_PREAMBLE_DETECTOR_MIN_8BITS;
 80444ce:	4b76      	ldr	r3, [pc, #472]	; (80446a8 <RadioSetRxConfig+0x270>)
 80444d0:	2204      	movs	r2, #4
 80444d2:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        LR1110.packet_params.packet.gfsk.sync_word_len_in_bits = 3 << 3;  // convert byte into bit
 80444d6:	4b74      	ldr	r3, [pc, #464]	; (80446a8 <RadioSetRxConfig+0x270>)
 80444d8:	2218      	movs	r2, #24
 80444da:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
        LR1110.packet_params.packet.gfsk.address_filtering         = LR1110_RADIO_GFSK_ADDRESS_FILTERING_DISABLE;
 80444de:	4b72      	ldr	r3, [pc, #456]	; (80446a8 <RadioSetRxConfig+0x270>)
 80444e0:	2200      	movs	r2, #0
 80444e2:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
            ( fixLen == true ) ? LR1110_RADIO_GFSK_PKT_FIX_LEN : LR1110_RADIO_GFSK_PKT_VAR_LEN;
 80444e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80444ea:	f083 0301 	eor.w	r3, r3, #1
 80444ee:	b2db      	uxtb	r3, r3
 80444f0:	461a      	mov	r2, r3
        LR1110.packet_params.packet.gfsk.header_type =
 80444f2:	4b6d      	ldr	r3, [pc, #436]	; (80446a8 <RadioSetRxConfig+0x270>)
 80444f4:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
        LR1110.packet_params.packet.gfsk.pld_len_in_bytes = MaxPayloadLength;
 80444f8:	4b6a      	ldr	r3, [pc, #424]	; (80446a4 <RadioSetRxConfig+0x26c>)
 80444fa:	781a      	ldrb	r2, [r3, #0]
 80444fc:	4b6a      	ldr	r3, [pc, #424]	; (80446a8 <RadioSetRxConfig+0x270>)
 80444fe:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
        if( crcOn == true )
 8044502:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8044506:	2b00      	cmp	r3, #0
 8044508:	d004      	beq.n	8044514 <RadioSetRxConfig+0xdc>
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_2_BYTES_INV;
 804450a:	4b67      	ldr	r3, [pc, #412]	; (80446a8 <RadioSetRxConfig+0x270>)
 804450c:	2206      	movs	r2, #6
 804450e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8044512:	e003      	b.n	804451c <RadioSetRxConfig+0xe4>
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_OFF;
 8044514:	4b64      	ldr	r3, [pc, #400]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044516:	2201      	movs	r2, #1
 8044518:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
        LR1110.packet_params.packet.gfsk.dc_free = LR1110_RADIO_GFSK_DC_FREE_WHITENING;
 804451c:	4b62      	ldr	r3, [pc, #392]	; (80446a8 <RadioSetRxConfig+0x270>)
 804451e:	2201      	movs	r2, #1
 8044520:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
        RadioStandby( );
 8044524:	f000 fbb8 	bl	8044c98 <RadioStandby>
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PKT_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8044528:	4b5f      	ldr	r3, [pc, #380]	; (80446a8 <RadioSetRxConfig+0x270>)
 804452a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 804452e:	2b01      	cmp	r3, #1
 8044530:	bf14      	ite	ne
 8044532:	2301      	movne	r3, #1
 8044534:	2300      	moveq	r3, #0
 8044536:	b2db      	uxtb	r3, r3
 8044538:	4618      	mov	r0, r3
 804453a:	f7ff fed9 	bl	80442f0 <RadioSetModem>
        lr1110_radio_set_gfsk_mod_params( &LR1110, &LR1110.modulation_params.modulation.gfsk );
 804453e:	495b      	ldr	r1, [pc, #364]	; (80446ac <RadioSetRxConfig+0x274>)
 8044540:	4859      	ldr	r0, [pc, #356]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044542:	f001 fe0b 	bl	804615c <lr1110_radio_set_gfsk_mod_params>
        lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
 8044546:	495a      	ldr	r1, [pc, #360]	; (80446b0 <RadioSetRxConfig+0x278>)
 8044548:	4857      	ldr	r0, [pc, #348]	; (80446a8 <RadioSetRxConfig+0x270>)
 804454a:	f001 fe6d 	bl	8046228 <lr1110_radio_set_gfsk_pkt_params>
        lr1110_radio_set_gfsk_sync_word( &LR1110, ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 804454e:	4a59      	ldr	r2, [pc, #356]	; (80446b4 <RadioSetRxConfig+0x27c>)
 8044550:	f107 0310 	add.w	r3, r7, #16
 8044554:	e892 0003 	ldmia.w	r2, {r0, r1}
 8044558:	e883 0003 	stmia.w	r3, {r0, r1}
 804455c:	f107 0310 	add.w	r3, r7, #16
 8044560:	4619      	mov	r1, r3
 8044562:	4851      	ldr	r0, [pc, #324]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044564:	f001 fd0d 	bl	8045f82 <lr1110_radio_set_gfsk_sync_word>
        lr1110_radio_set_gfsk_crc_params( &LR1110, 0x1D0F, 0x1021 );
 8044568:	f241 0221 	movw	r2, #4129	; 0x1021
 804456c:	f641 510f 	movw	r1, #7439	; 0x1d0f
 8044570:	484d      	ldr	r0, [pc, #308]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044572:	f001 ffa8 	bl	80464c6 <lr1110_radio_set_gfsk_crc_params>
        lr1110_radio_set_gfsk_whitening_seed( &LR1110, 0x01FF );
 8044576:	f240 11ff 	movw	r1, #511	; 0x1ff
 804457a:	484b      	ldr	r0, [pc, #300]	; (80446a8 <RadioSetRxConfig+0x270>)
 804457c:	f001 ffd9 	bl	8046532 <lr1110_radio_set_gfsk_whitening_seed>
        RxTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8044580:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8044582:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8044586:	fb02 f203 	mul.w	r2, r2, r3
 804458a:	687b      	ldr	r3, [r7, #4]
 804458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8044590:	4a49      	ldr	r2, [pc, #292]	; (80446b8 <RadioSetRxConfig+0x280>)
 8044592:	6013      	str	r3, [r2, #0]
        break;
 8044594:	e080      	b.n	8044698 <RadioSetRxConfig+0x260>
        lr1110_radio_stop_timeout_on_preamble( &LR1110, false );
 8044596:	2100      	movs	r1, #0
 8044598:	4843      	ldr	r0, [pc, #268]	; (80446a8 <RadioSetRxConfig+0x270>)
 804459a:	f001 ff34 	bl	8046406 <lr1110_radio_stop_timeout_on_preamble>
        lr1110_radio_set_lora_sync_timeout( &LR1110, symbTimeout );
 804459e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80445a0:	b2db      	uxtb	r3, r3
 80445a2:	4619      	mov	r1, r3
 80445a4:	4840      	ldr	r0, [pc, #256]	; (80446a8 <RadioSetRxConfig+0x270>)
 80445a6:	f001 ff74 	bl	8046492 <lr1110_radio_set_lora_sync_timeout>
        LR1110.modulation_params.packet_type            = LR1110_RADIO_PKT_TYPE_LORA;
 80445aa:	4b3f      	ldr	r3, [pc, #252]	; (80446a8 <RadioSetRxConfig+0x270>)
 80445ac:	2202      	movs	r2, #2
 80445ae:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        LR1110.modulation_params.modulation.lora.sf = ( lr1110_radio_lora_sf_t ) datarate;
 80445b2:	687b      	ldr	r3, [r7, #4]
 80445b4:	b2da      	uxtb	r2, r3
 80445b6:	4b3c      	ldr	r3, [pc, #240]	; (80446a8 <RadioSetRxConfig+0x270>)
 80445b8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        LR1110.modulation_params.modulation.lora.bw = Bandwidths[bandwidth];
 80445bc:	4a3f      	ldr	r2, [pc, #252]	; (80446bc <RadioSetRxConfig+0x284>)
 80445be:	68bb      	ldr	r3, [r7, #8]
 80445c0:	4413      	add	r3, r2
 80445c2:	781a      	ldrb	r2, [r3, #0]
 80445c4:	4b38      	ldr	r3, [pc, #224]	; (80446a8 <RadioSetRxConfig+0x270>)
 80445c6:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        LR1110.modulation_params.modulation.lora.cr = ( lr1110_radio_lora_cr_t ) coderate;
 80445ca:	4a37      	ldr	r2, [pc, #220]	; (80446a8 <RadioSetRxConfig+0x270>)
 80445cc:	7bbb      	ldrb	r3, [r7, #14]
 80445ce:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
        if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80445d2:	68bb      	ldr	r3, [r7, #8]
 80445d4:	2b00      	cmp	r3, #0
 80445d6:	d105      	bne.n	80445e4 <RadioSetRxConfig+0x1ac>
 80445d8:	687b      	ldr	r3, [r7, #4]
 80445da:	2b0b      	cmp	r3, #11
 80445dc:	d008      	beq.n	80445f0 <RadioSetRxConfig+0x1b8>
 80445de:	687b      	ldr	r3, [r7, #4]
 80445e0:	2b0c      	cmp	r3, #12
 80445e2:	d005      	beq.n	80445f0 <RadioSetRxConfig+0x1b8>
 80445e4:	68bb      	ldr	r3, [r7, #8]
 80445e6:	2b01      	cmp	r3, #1
 80445e8:	d107      	bne.n	80445fa <RadioSetRxConfig+0x1c2>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80445ea:	687b      	ldr	r3, [r7, #4]
 80445ec:	2b0c      	cmp	r3, #12
 80445ee:	d104      	bne.n	80445fa <RadioSetRxConfig+0x1c2>
            LR1110.modulation_params.modulation.lora.ldro = 0x01;
 80445f0:	4b2d      	ldr	r3, [pc, #180]	; (80446a8 <RadioSetRxConfig+0x270>)
 80445f2:	2201      	movs	r2, #1
 80445f4:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 80445f8:	e003      	b.n	8044602 <RadioSetRxConfig+0x1ca>
            LR1110.modulation_params.modulation.lora.ldro = 0x00;
 80445fa:	4b2b      	ldr	r3, [pc, #172]	; (80446a8 <RadioSetRxConfig+0x270>)
 80445fc:	2200      	movs	r2, #0
 80445fe:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        LR1110.packet_params.packet_type = LR1110_RADIO_PKT_TYPE_LORA;
 8044602:	4b29      	ldr	r3, [pc, #164]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044604:	2202      	movs	r2, #2
 8044606:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        if( ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF5 ) ||
 804460a:	4b27      	ldr	r3, [pc, #156]	; (80446a8 <RadioSetRxConfig+0x270>)
 804460c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8044610:	2b05      	cmp	r3, #5
 8044612:	d004      	beq.n	804461e <RadioSetRxConfig+0x1e6>
            ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF6 ) )
 8044614:	4b24      	ldr	r3, [pc, #144]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044616:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
        if( ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF5 ) ||
 804461a:	2b06      	cmp	r3, #6
 804461c:	d10c      	bne.n	8044638 <RadioSetRxConfig+0x200>
            if( preambleLen < 12 )
 804461e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8044620:	2b0b      	cmp	r3, #11
 8044622:	d804      	bhi.n	804462e <RadioSetRxConfig+0x1f6>
                LR1110.packet_params.packet.lora.preamble_len_in_symb = 12;
 8044624:	4b20      	ldr	r3, [pc, #128]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044626:	220c      	movs	r2, #12
 8044628:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
            if( preambleLen < 12 )
 804462c:	e008      	b.n	8044640 <RadioSetRxConfig+0x208>
                LR1110.packet_params.packet.lora.preamble_len_in_symb = preambleLen;
 804462e:	4a1e      	ldr	r2, [pc, #120]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044630:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8044632:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
            if( preambleLen < 12 )
 8044636:	e003      	b.n	8044640 <RadioSetRxConfig+0x208>
            LR1110.packet_params.packet.lora.preamble_len_in_symb = preambleLen;
 8044638:	4a1b      	ldr	r2, [pc, #108]	; (80446a8 <RadioSetRxConfig+0x270>)
 804463a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 804463c:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
        LR1110.packet_params.packet.lora.header_type = ( lr1110_radio_lora_pkt_len_modes_t ) fixLen;
 8044640:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8044644:	4b18      	ldr	r3, [pc, #96]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044646:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
        LR1110.packet_params.packet.lora.pld_len_in_bytes = MaxPayloadLength;
 804464a:	4b16      	ldr	r3, [pc, #88]	; (80446a4 <RadioSetRxConfig+0x26c>)
 804464c:	781a      	ldrb	r2, [r3, #0]
 804464e:	4b16      	ldr	r3, [pc, #88]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044650:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
        LR1110.packet_params.packet.lora.crc                    = ( lr1110_radio_lora_crc_t ) crcOn;
 8044654:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8044658:	4b13      	ldr	r3, [pc, #76]	; (80446a8 <RadioSetRxConfig+0x270>)
 804465a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        LR1110.packet_params.packet.lora.iq                     = ( lr1110_radio_lora_iq_t ) iqInverted;
 804465e:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8044662:	4b11      	ldr	r3, [pc, #68]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044664:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PKT_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8044668:	4b0f      	ldr	r3, [pc, #60]	; (80446a8 <RadioSetRxConfig+0x270>)
 804466a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 804466e:	2b01      	cmp	r3, #1
 8044670:	bf14      	ite	ne
 8044672:	2301      	movne	r3, #1
 8044674:	2300      	moveq	r3, #0
 8044676:	b2db      	uxtb	r3, r3
 8044678:	4618      	mov	r0, r3
 804467a:	f7ff fe39 	bl	80442f0 <RadioSetModem>
        lr1110_radio_set_lora_mod_params( &LR1110, &LR1110.modulation_params.modulation.lora );
 804467e:	4910      	ldr	r1, [pc, #64]	; (80446c0 <RadioSetRxConfig+0x288>)
 8044680:	4809      	ldr	r0, [pc, #36]	; (80446a8 <RadioSetRxConfig+0x270>)
 8044682:	f001 fdae 	bl	80461e2 <lr1110_radio_set_lora_mod_params>
        lr1110_radio_set_lora_pkt_params( &LR1110, &LR1110.packet_params.packet.lora );
 8044686:	490f      	ldr	r1, [pc, #60]	; (80446c4 <RadioSetRxConfig+0x28c>)
 8044688:	4807      	ldr	r0, [pc, #28]	; (80446a8 <RadioSetRxConfig+0x270>)
 804468a:	f001 fe03 	bl	8046294 <lr1110_radio_set_lora_pkt_params>
        RxTimeout = 0xFFFF;
 804468e:	4b0a      	ldr	r3, [pc, #40]	; (80446b8 <RadioSetRxConfig+0x280>)
 8044690:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8044694:	601a      	str	r2, [r3, #0]
        break;
 8044696:	bf00      	nop
}
 8044698:	bf00      	nop
 804469a:	3718      	adds	r7, #24
 804469c:	46bd      	mov	sp, r7
 804469e:	bd80      	pop	{r7, pc}
 80446a0:	20018340 	.word	0x20018340
 80446a4:	2001805c 	.word	0x2001805c
 80446a8:	200195d0 	.word	0x200195d0
 80446ac:	20019668 	.word	0x20019668
 80446b0:	2001967a 	.word	0x2001967a
 80446b4:	0804e7e8 	.word	0x0804e7e8
 80446b8:	2001833c 	.word	0x2001833c
 80446bc:	0804e990 	.word	0x0804e990
 80446c0:	20019674 	.word	0x20019674
 80446c4:	20019684 	.word	0x20019684

080446c8 <RadioSetTxConfig>:

void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev, uint32_t bandwidth, uint32_t datarate,
                       uint8_t coderate, uint16_t preambleLen, bool fixLen, bool crcOn, bool freqHopOn,
                       uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80446c8:	b580      	push	{r7, lr}
 80446ca:	b086      	sub	sp, #24
 80446cc:	af00      	add	r7, sp, #0
 80446ce:	60ba      	str	r2, [r7, #8]
 80446d0:	607b      	str	r3, [r7, #4]
 80446d2:	4603      	mov	r3, r0
 80446d4:	73fb      	strb	r3, [r7, #15]
 80446d6:	460b      	mov	r3, r1
 80446d8:	73bb      	strb	r3, [r7, #14]
    switch( modem )
 80446da:	7bfb      	ldrb	r3, [r7, #15]
 80446dc:	2b00      	cmp	r3, #0
 80446de:	d002      	beq.n	80446e6 <RadioSetTxConfig+0x1e>
 80446e0:	2b01      	cmp	r3, #1
 80446e2:	d079      	beq.n	80447d8 <RadioSetTxConfig+0x110>
 80446e4:	e0ee      	b.n	80448c4 <RadioSetTxConfig+0x1fc>
    {
    case MODEM_FSK:
        LR1110.modulation_params.packet_type   = LR1110_RADIO_PKT_TYPE_GFSK;
 80446e6:	4b7e      	ldr	r3, [pc, #504]	; (80448e0 <RadioSetTxConfig+0x218>)
 80446e8:	2201      	movs	r2, #1
 80446ea:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        LR1110.modulation_params.modulation.gfsk.br_in_bps = datarate;
 80446ee:	4a7c      	ldr	r2, [pc, #496]	; (80448e0 <RadioSetTxConfig+0x218>)
 80446f0:	6a3b      	ldr	r3, [r7, #32]
 80446f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

        LR1110.modulation_params.modulation.gfsk.pulse_shape = LR1110_RADIO_GFSK_PULSE_SHAPE_BT_1;
 80446f6:	4b7a      	ldr	r3, [pc, #488]	; (80448e0 <RadioSetTxConfig+0x218>)
 80446f8:	220b      	movs	r2, #11
 80446fa:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
        LR1110.modulation_params.modulation.gfsk.bw_dsb_param =
            ( lr1110_radio_gfsk_bw_t ) RadioGetFskBandwidthRegValue( bandwidth << 1 ); // LR1110 badwidth is double sided
 80446fe:	687b      	ldr	r3, [r7, #4]
 8044700:	005b      	lsls	r3, r3, #1
 8044702:	4618      	mov	r0, r3
 8044704:	f7ff fd62 	bl	80441cc <RadioGetFskBandwidthRegValue>
 8044708:	4603      	mov	r3, r0
 804470a:	461a      	mov	r2, r3
        LR1110.modulation_params.modulation.gfsk.bw_dsb_param =
 804470c:	4b74      	ldr	r3, [pc, #464]	; (80448e0 <RadioSetTxConfig+0x218>)
 804470e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
        LR1110.modulation_params.modulation.gfsk.fdev_in_hz = fdev;
 8044712:	4a73      	ldr	r2, [pc, #460]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044714:	68bb      	ldr	r3, [r7, #8]
 8044716:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

        LR1110.packet_params.packet_type                     = LR1110_RADIO_PKT_TYPE_GFSK;
 804471a:	4b71      	ldr	r3, [pc, #452]	; (80448e0 <RadioSetTxConfig+0x218>)
 804471c:	2201      	movs	r2, #1
 804471e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        LR1110.packet_params.packet.gfsk.preamble_len_in_bits = ( preambleLen << 3 );  // convert byte into bit
 8044722:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8044724:	00db      	lsls	r3, r3, #3
 8044726:	b29a      	uxth	r2, r3
 8044728:	4b6d      	ldr	r3, [pc, #436]	; (80448e0 <RadioSetTxConfig+0x218>)
 804472a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        LR1110.packet_params.packet.gfsk.preamble_detector           = LR1110_RADIO_GFSK_PREAMBLE_DETECTOR_MIN_8BITS;
 804472e:	4b6c      	ldr	r3, [pc, #432]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044730:	2204      	movs	r2, #4
 8044732:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        LR1110.packet_params.packet.gfsk.sync_word_len_in_bits = 3 << 3;  // convert byte into bit
 8044736:	4b6a      	ldr	r3, [pc, #424]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044738:	2218      	movs	r2, #24
 804473a:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
        LR1110.packet_params.packet.gfsk.address_filtering         = LR1110_RADIO_GFSK_ADDRESS_FILTERING_DISABLE;
 804473e:	4b68      	ldr	r3, [pc, #416]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044740:	2200      	movs	r2, #0
 8044742:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
        LR1110.packet_params.packet.gfsk.header_type =
            ( fixLen == true ) ? LR1110_RADIO_GFSK_PKT_FIX_LEN : LR1110_RADIO_GFSK_PKT_VAR_LEN;
 8044746:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 804474a:	f083 0301 	eor.w	r3, r3, #1
 804474e:	b2db      	uxtb	r3, r3
 8044750:	461a      	mov	r2, r3
        LR1110.packet_params.packet.gfsk.header_type =
 8044752:	4b63      	ldr	r3, [pc, #396]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044754:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf

        if( crcOn == true )
 8044758:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 804475c:	2b00      	cmp	r3, #0
 804475e:	d004      	beq.n	804476a <RadioSetTxConfig+0xa2>
        {
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_2_BYTES_INV;
 8044760:	4b5f      	ldr	r3, [pc, #380]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044762:	2206      	movs	r2, #6
 8044764:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8044768:	e003      	b.n	8044772 <RadioSetTxConfig+0xaa>
        }
        else
        {
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_OFF;
 804476a:	4b5d      	ldr	r3, [pc, #372]	; (80448e0 <RadioSetTxConfig+0x218>)
 804476c:	2201      	movs	r2, #1
 804476e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
        }
        LR1110.packet_params.packet.gfsk.dc_free = LR1110_RADIO_GFSK_DC_FREE_WHITENING;
 8044772:	4b5b      	ldr	r3, [pc, #364]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044774:	2201      	movs	r2, #1
 8044776:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2

        RadioStandby( );
 804477a:	f000 fa8d 	bl	8044c98 <RadioStandby>
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PKT_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA );
 804477e:	4b58      	ldr	r3, [pc, #352]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044780:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8044784:	2b01      	cmp	r3, #1
 8044786:	bf14      	ite	ne
 8044788:	2301      	movne	r3, #1
 804478a:	2300      	moveq	r3, #0
 804478c:	b2db      	uxtb	r3, r3
 804478e:	4618      	mov	r0, r3
 8044790:	f7ff fdae 	bl	80442f0 <RadioSetModem>
        lr1110_radio_set_gfsk_mod_params( &LR1110, &LR1110.modulation_params.modulation.gfsk );
 8044794:	4953      	ldr	r1, [pc, #332]	; (80448e4 <RadioSetTxConfig+0x21c>)
 8044796:	4852      	ldr	r0, [pc, #328]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044798:	f001 fce0 	bl	804615c <lr1110_radio_set_gfsk_mod_params>
        lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
 804479c:	4952      	ldr	r1, [pc, #328]	; (80448e8 <RadioSetTxConfig+0x220>)
 804479e:	4850      	ldr	r0, [pc, #320]	; (80448e0 <RadioSetTxConfig+0x218>)
 80447a0:	f001 fd42 	bl	8046228 <lr1110_radio_set_gfsk_pkt_params>
        lr1110_radio_set_gfsk_sync_word( &LR1110, ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80447a4:	4a51      	ldr	r2, [pc, #324]	; (80448ec <RadioSetTxConfig+0x224>)
 80447a6:	f107 0310 	add.w	r3, r7, #16
 80447aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80447ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80447b2:	f107 0310 	add.w	r3, r7, #16
 80447b6:	4619      	mov	r1, r3
 80447b8:	4849      	ldr	r0, [pc, #292]	; (80448e0 <RadioSetTxConfig+0x218>)
 80447ba:	f001 fbe2 	bl	8045f82 <lr1110_radio_set_gfsk_sync_word>
        lr1110_radio_set_gfsk_crc_params( &LR1110, 0x1D0F, 0x1021 );
 80447be:	f241 0221 	movw	r2, #4129	; 0x1021
 80447c2:	f641 510f 	movw	r1, #7439	; 0x1d0f
 80447c6:	4846      	ldr	r0, [pc, #280]	; (80448e0 <RadioSetTxConfig+0x218>)
 80447c8:	f001 fe7d 	bl	80464c6 <lr1110_radio_set_gfsk_crc_params>
        lr1110_radio_set_gfsk_whitening_seed( &LR1110, 0x01FF );
 80447cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80447d0:	4843      	ldr	r0, [pc, #268]	; (80448e0 <RadioSetTxConfig+0x218>)
 80447d2:	f001 feae 	bl	8046532 <lr1110_radio_set_gfsk_whitening_seed>
        break;
 80447d6:	e075      	b.n	80448c4 <RadioSetTxConfig+0x1fc>

    case MODEM_LORA:
        LR1110.modulation_params.packet_type            = LR1110_RADIO_PKT_TYPE_LORA;
 80447d8:	4b41      	ldr	r3, [pc, #260]	; (80448e0 <RadioSetTxConfig+0x218>)
 80447da:	2202      	movs	r2, #2
 80447dc:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        LR1110.modulation_params.modulation.lora.sf = ( lr1110_radio_lora_sf_t ) datarate;
 80447e0:	6a3b      	ldr	r3, [r7, #32]
 80447e2:	b2da      	uxtb	r2, r3
 80447e4:	4b3e      	ldr	r3, [pc, #248]	; (80448e0 <RadioSetTxConfig+0x218>)
 80447e6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        LR1110.modulation_params.modulation.lora.bw        = Bandwidths[bandwidth];
 80447ea:	4a41      	ldr	r2, [pc, #260]	; (80448f0 <RadioSetTxConfig+0x228>)
 80447ec:	687b      	ldr	r3, [r7, #4]
 80447ee:	4413      	add	r3, r2
 80447f0:	781a      	ldrb	r2, [r3, #0]
 80447f2:	4b3b      	ldr	r3, [pc, #236]	; (80448e0 <RadioSetTxConfig+0x218>)
 80447f4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        LR1110.modulation_params.modulation.lora.cr      = ( lr1110_radio_lora_cr_t ) coderate;
 80447f8:	4a39      	ldr	r2, [pc, #228]	; (80448e0 <RadioSetTxConfig+0x218>)
 80447fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80447fe:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6

        if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8044802:	687b      	ldr	r3, [r7, #4]
 8044804:	2b00      	cmp	r3, #0
 8044806:	d105      	bne.n	8044814 <RadioSetTxConfig+0x14c>
 8044808:	6a3b      	ldr	r3, [r7, #32]
 804480a:	2b0b      	cmp	r3, #11
 804480c:	d008      	beq.n	8044820 <RadioSetTxConfig+0x158>
 804480e:	6a3b      	ldr	r3, [r7, #32]
 8044810:	2b0c      	cmp	r3, #12
 8044812:	d005      	beq.n	8044820 <RadioSetTxConfig+0x158>
 8044814:	687b      	ldr	r3, [r7, #4]
 8044816:	2b01      	cmp	r3, #1
 8044818:	d107      	bne.n	804482a <RadioSetTxConfig+0x162>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 804481a:	6a3b      	ldr	r3, [r7, #32]
 804481c:	2b0c      	cmp	r3, #12
 804481e:	d104      	bne.n	804482a <RadioSetTxConfig+0x162>
        {
            LR1110.modulation_params.modulation.lora.ldro = 0x01;
 8044820:	4b2f      	ldr	r3, [pc, #188]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044822:	2201      	movs	r2, #1
 8044824:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 8044828:	e003      	b.n	8044832 <RadioSetTxConfig+0x16a>
        }
        else
        {
            LR1110.modulation_params.modulation.lora.ldro = 0x00;
 804482a:	4b2d      	ldr	r3, [pc, #180]	; (80448e0 <RadioSetTxConfig+0x218>)
 804482c:	2200      	movs	r2, #0
 804482e:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        }

        LR1110.packet_params.packet_type = LR1110_RADIO_PKT_TYPE_LORA;
 8044832:	4b2b      	ldr	r3, [pc, #172]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044834:	2202      	movs	r2, #2
 8044836:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

        if( ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF5 ) ||
 804483a:	4b29      	ldr	r3, [pc, #164]	; (80448e0 <RadioSetTxConfig+0x218>)
 804483c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8044840:	2b05      	cmp	r3, #5
 8044842:	d004      	beq.n	804484e <RadioSetTxConfig+0x186>
            ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF6 ) )
 8044844:	4b26      	ldr	r3, [pc, #152]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044846:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
        if( ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF5 ) ||
 804484a:	2b06      	cmp	r3, #6
 804484c:	d10c      	bne.n	8044868 <RadioSetTxConfig+0x1a0>
        {
            if( preambleLen < 12 )
 804484e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8044850:	2b0b      	cmp	r3, #11
 8044852:	d804      	bhi.n	804485e <RadioSetTxConfig+0x196>
            {
                LR1110.packet_params.packet.lora.preamble_len_in_symb = 12;
 8044854:	4b22      	ldr	r3, [pc, #136]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044856:	220c      	movs	r2, #12
 8044858:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
            if( preambleLen < 12 )
 804485c:	e008      	b.n	8044870 <RadioSetTxConfig+0x1a8>
            }
            else
            {
                LR1110.packet_params.packet.lora.preamble_len_in_symb = preambleLen;
 804485e:	4a20      	ldr	r2, [pc, #128]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044860:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8044862:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
            if( preambleLen < 12 )
 8044866:	e003      	b.n	8044870 <RadioSetTxConfig+0x1a8>
            }
        }
        else
        {
            LR1110.packet_params.packet.lora.preamble_len_in_symb = preambleLen;
 8044868:	4a1d      	ldr	r2, [pc, #116]	; (80448e0 <RadioSetTxConfig+0x218>)
 804486a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804486c:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
        }

        LR1110.packet_params.packet.lora.header_type            = ( lr1110_radio_lora_pkt_len_modes_t ) fixLen;
 8044870:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8044874:	4b1a      	ldr	r3, [pc, #104]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044876:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
        LR1110.packet_params.packet.lora.pld_len_in_bytes = MaxPayloadLength;
 804487a:	4b1e      	ldr	r3, [pc, #120]	; (80448f4 <RadioSetTxConfig+0x22c>)
 804487c:	781a      	ldrb	r2, [r3, #0]
 804487e:	4b18      	ldr	r3, [pc, #96]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044880:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
        LR1110.packet_params.packet.lora.crc                    = ( lr1110_radio_lora_crc_t ) crcOn;
 8044884:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8044888:	4b15      	ldr	r3, [pc, #84]	; (80448e0 <RadioSetTxConfig+0x218>)
 804488a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        LR1110.packet_params.packet.lora.iq                     = ( lr1110_radio_lora_iq_t ) iqInverted;
 804488e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8044892:	4b13      	ldr	r3, [pc, #76]	; (80448e0 <RadioSetTxConfig+0x218>)
 8044894:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

        RadioStandby( );
 8044898:	f000 f9fe 	bl	8044c98 <RadioStandby>
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PKT_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 804489c:	4b10      	ldr	r3, [pc, #64]	; (80448e0 <RadioSetTxConfig+0x218>)
 804489e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80448a2:	2b01      	cmp	r3, #1
 80448a4:	bf14      	ite	ne
 80448a6:	2301      	movne	r3, #1
 80448a8:	2300      	moveq	r3, #0
 80448aa:	b2db      	uxtb	r3, r3
 80448ac:	4618      	mov	r0, r3
 80448ae:	f7ff fd1f 	bl	80442f0 <RadioSetModem>
        lr1110_radio_set_lora_mod_params( &LR1110, &LR1110.modulation_params.modulation.lora );
 80448b2:	4911      	ldr	r1, [pc, #68]	; (80448f8 <RadioSetTxConfig+0x230>)
 80448b4:	480a      	ldr	r0, [pc, #40]	; (80448e0 <RadioSetTxConfig+0x218>)
 80448b6:	f001 fc94 	bl	80461e2 <lr1110_radio_set_lora_mod_params>
        lr1110_radio_set_lora_pkt_params( &LR1110, &LR1110.packet_params.packet.lora );
 80448ba:	4910      	ldr	r1, [pc, #64]	; (80448fc <RadioSetTxConfig+0x234>)
 80448bc:	4808      	ldr	r0, [pc, #32]	; (80448e0 <RadioSetTxConfig+0x218>)
 80448be:	f001 fce9 	bl	8046294 <lr1110_radio_set_lora_pkt_params>
        break;
 80448c2:	bf00      	nop
    }

    lr1110_board_set_rf_tx_power( &LR1110, power );
 80448c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80448c8:	4619      	mov	r1, r3
 80448ca:	4805      	ldr	r0, [pc, #20]	; (80448e0 <RadioSetTxConfig+0x218>)
 80448cc:	f7ff fa46 	bl	8043d5c <lr1110_board_set_rf_tx_power>
    TxTimeout = timeout;
 80448d0:	4a0b      	ldr	r2, [pc, #44]	; (8044900 <RadioSetTxConfig+0x238>)
 80448d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80448d4:	6013      	str	r3, [r2, #0]
}
 80448d6:	bf00      	nop
 80448d8:	3718      	adds	r7, #24
 80448da:	46bd      	mov	sp, r7
 80448dc:	bd80      	pop	{r7, pc}
 80448de:	bf00      	nop
 80448e0:	200195d0 	.word	0x200195d0
 80448e4:	20019668 	.word	0x20019668
 80448e8:	2001967a 	.word	0x2001967a
 80448ec:	0804e7e8 	.word	0x0804e7e8
 80448f0:	0804e990 	.word	0x0804e990
 80448f4:	2001805c 	.word	0x2001805c
 80448f8:	20019674 	.word	0x20019674
 80448fc:	20019684 	.word	0x20019684
 8044900:	20018338 	.word	0x20018338

08044904 <RadioCheckRfFrequency>:

bool RadioCheckRfFrequency( uint32_t frequency )
{
 8044904:	b480      	push	{r7}
 8044906:	b083      	sub	sp, #12
 8044908:	af00      	add	r7, sp, #0
 804490a:	6078      	str	r0, [r7, #4]
    return true;
 804490c:	2301      	movs	r3, #1
}
 804490e:	4618      	mov	r0, r3
 8044910:	370c      	adds	r7, #12
 8044912:	46bd      	mov	sp, r7
 8044914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044918:	4770      	bx	lr
	...

0804491c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( lr1110_radio_lora_bw_t bw )
{
 804491c:	b480      	push	{r7}
 804491e:	b085      	sub	sp, #20
 8044920:	af00      	add	r7, sp, #0
 8044922:	4603      	mov	r3, r0
 8044924:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8044926:	2300      	movs	r3, #0
 8044928:	60fb      	str	r3, [r7, #12]

    switch( bw )
 804492a:	79fb      	ldrb	r3, [r7, #7]
 804492c:	3b01      	subs	r3, #1
 804492e:	2b09      	cmp	r3, #9
 8044930:	d837      	bhi.n	80449a2 <RadioGetLoRaBandwidthInHz+0x86>
 8044932:	a201      	add	r2, pc, #4	; (adr r2, 8044938 <RadioGetLoRaBandwidthInHz+0x1c>)
 8044934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044938:	08044969 	.word	0x08044969
 804493c:	08044979 	.word	0x08044979
 8044940:	08044989 	.word	0x08044989
 8044944:	08044991 	.word	0x08044991
 8044948:	08044997 	.word	0x08044997
 804494c:	0804499d 	.word	0x0804499d
 8044950:	080449a3 	.word	0x080449a3
 8044954:	08044961 	.word	0x08044961
 8044958:	08044971 	.word	0x08044971
 804495c:	08044981 	.word	0x08044981
    {
    case LR1110_RADIO_LORA_BW_10:
        bandwidthInHz = 10417UL;
 8044960:	f642 03b1 	movw	r3, #10417	; 0x28b1
 8044964:	60fb      	str	r3, [r7, #12]
        break;
 8044966:	e01c      	b.n	80449a2 <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_15:
        bandwidthInHz = 15625UL;
 8044968:	f643 5309 	movw	r3, #15625	; 0x3d09
 804496c:	60fb      	str	r3, [r7, #12]
        break;
 804496e:	e018      	b.n	80449a2 <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_20:
        bandwidthInHz = 20833UL;
 8044970:	f245 1361 	movw	r3, #20833	; 0x5161
 8044974:	60fb      	str	r3, [r7, #12]
        break;
 8044976:	e014      	b.n	80449a2 <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_31:
        bandwidthInHz = 31250UL;
 8044978:	f647 2312 	movw	r3, #31250	; 0x7a12
 804497c:	60fb      	str	r3, [r7, #12]
        break;
 804497e:	e010      	b.n	80449a2 <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_41:
        bandwidthInHz = 41667UL;
 8044980:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 8044984:	60fb      	str	r3, [r7, #12]
        break;
 8044986:	e00c      	b.n	80449a2 <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_62:
        bandwidthInHz = 62500UL;
 8044988:	f24f 4324 	movw	r3, #62500	; 0xf424
 804498c:	60fb      	str	r3, [r7, #12]
        break;
 804498e:	e008      	b.n	80449a2 <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_125:
        bandwidthInHz = 125000UL;
 8044990:	4b07      	ldr	r3, [pc, #28]	; (80449b0 <RadioGetLoRaBandwidthInHz+0x94>)
 8044992:	60fb      	str	r3, [r7, #12]
        break;
 8044994:	e005      	b.n	80449a2 <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_250:
        bandwidthInHz = 250000UL;
 8044996:	4b07      	ldr	r3, [pc, #28]	; (80449b4 <RadioGetLoRaBandwidthInHz+0x98>)
 8044998:	60fb      	str	r3, [r7, #12]
        break;
 804499a:	e002      	b.n	80449a2 <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_500:
        bandwidthInHz = 500000UL;
 804499c:	4b06      	ldr	r3, [pc, #24]	; (80449b8 <RadioGetLoRaBandwidthInHz+0x9c>)
 804499e:	60fb      	str	r3, [r7, #12]
        break;
 80449a0:	bf00      	nop
    }

    return bandwidthInHz;
 80449a2:	68fb      	ldr	r3, [r7, #12]
}
 80449a4:	4618      	mov	r0, r3
 80449a6:	3714      	adds	r7, #20
 80449a8:	46bd      	mov	sp, r7
 80449aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80449ae:	4770      	bx	lr
 80449b0:	0001e848 	.word	0x0001e848
 80449b4:	0003d090 	.word	0x0003d090
 80449b8:	0007a120 	.word	0x0007a120

080449bc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 80449bc:	b480      	push	{r7}
 80449be:	b085      	sub	sp, #20
 80449c0:	af00      	add	r7, sp, #0
 80449c2:	6078      	str	r0, [r7, #4]
 80449c4:	4608      	mov	r0, r1
 80449c6:	4611      	mov	r1, r2
 80449c8:	461a      	mov	r2, r3
 80449ca:	4603      	mov	r3, r0
 80449cc:	70fb      	strb	r3, [r7, #3]
 80449ce:	460b      	mov	r3, r1
 80449d0:	803b      	strh	r3, [r7, #0]
 80449d2:	4613      	mov	r3, r2
 80449d4:	70bb      	strb	r3, [r7, #2]
    const uint8_t syncWordLength = 3;
 80449d6:	2303      	movs	r3, #3
 80449d8:	73fb      	strb	r3, [r7, #15]

    return ( preambleLen << 3 ) +
 80449da:	883b      	ldrh	r3, [r7, #0]
 80449dc:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 80449de:	78ba      	ldrb	r2, [r7, #2]
 80449e0:	f082 0201 	eor.w	r2, r2, #1
 80449e4:	b2d2      	uxtb	r2, r2
 80449e6:	2a00      	cmp	r2, #0
 80449e8:	d001      	beq.n	80449ee <RadioGetGfskTimeOnAirNumerator+0x32>
 80449ea:	2208      	movs	r2, #8
 80449ec:	e000      	b.n	80449f0 <RadioGetGfskTimeOnAirNumerator+0x34>
 80449ee:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 80449f0:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 80449f2:	7bfb      	ldrb	r3, [r7, #15]
 80449f4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 80449f6:	441a      	add	r2, r3
             ( ( payloadLen +
 80449f8:	7e3b      	ldrb	r3, [r7, #24]
               ( 0 ) +
               ( ( crcOn == true ) ? 2 : 0 ) 
 80449fa:	7f39      	ldrb	r1, [r7, #28]
 80449fc:	2900      	cmp	r1, #0
 80449fe:	d001      	beq.n	8044a04 <RadioGetGfskTimeOnAirNumerator+0x48>
 8044a00:	2102      	movs	r1, #2
 8044a02:	e000      	b.n	8044a06 <RadioGetGfskTimeOnAirNumerator+0x4a>
 8044a04:	2100      	movs	r1, #0
               ( 0 ) +
 8044a06:	440b      	add	r3, r1
               ) << 3 
 8044a08:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 8044a0a:	4413      	add	r3, r2
             );
}
 8044a0c:	4618      	mov	r0, r3
 8044a0e:	3714      	adds	r7, #20
 8044a10:	46bd      	mov	sp, r7
 8044a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044a16:	4770      	bx	lr

08044a18 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8044a18:	b480      	push	{r7}
 8044a1a:	b08b      	sub	sp, #44	; 0x2c
 8044a1c:	af00      	add	r7, sp, #0
 8044a1e:	60f8      	str	r0, [r7, #12]
 8044a20:	60b9      	str	r1, [r7, #8]
 8044a22:	4611      	mov	r1, r2
 8044a24:	461a      	mov	r2, r3
 8044a26:	460b      	mov	r3, r1
 8044a28:	71fb      	strb	r3, [r7, #7]
 8044a2a:	4613      	mov	r3, r2
 8044a2c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8044a2e:	79fb      	ldrb	r3, [r7, #7]
 8044a30:	3304      	adds	r3, #4
 8044a32:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8044a34:	2300      	movs	r3, #0
 8044a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8044a3a:	68bb      	ldr	r3, [r7, #8]
 8044a3c:	2b05      	cmp	r3, #5
 8044a3e:	d002      	beq.n	8044a46 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8044a40:	68bb      	ldr	r3, [r7, #8]
 8044a42:	2b06      	cmp	r3, #6
 8044a44:	d104      	bne.n	8044a50 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8044a46:	88bb      	ldrh	r3, [r7, #4]
 8044a48:	2b0b      	cmp	r3, #11
 8044a4a:	d801      	bhi.n	8044a50 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8044a4c:	230c      	movs	r3, #12
 8044a4e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8044a50:	68fb      	ldr	r3, [r7, #12]
 8044a52:	2b00      	cmp	r3, #0
 8044a54:	d105      	bne.n	8044a62 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 8044a56:	68bb      	ldr	r3, [r7, #8]
 8044a58:	2b0b      	cmp	r3, #11
 8044a5a:	d008      	beq.n	8044a6e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8044a5c:	68bb      	ldr	r3, [r7, #8]
 8044a5e:	2b0c      	cmp	r3, #12
 8044a60:	d005      	beq.n	8044a6e <RadioGetLoRaTimeOnAirNumerator+0x56>
 8044a62:	68fb      	ldr	r3, [r7, #12]
 8044a64:	2b01      	cmp	r3, #1
 8044a66:	d105      	bne.n	8044a74 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8044a68:	68bb      	ldr	r3, [r7, #8]
 8044a6a:	2b0c      	cmp	r3, #12
 8044a6c:	d102      	bne.n	8044a74 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8044a6e:	2301      	movs	r3, #1
 8044a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8044a74:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8044a78:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8044a7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8044a7e:	2a00      	cmp	r2, #0
 8044a80:	d001      	beq.n	8044a86 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 8044a82:	2210      	movs	r2, #16
 8044a84:	e000      	b.n	8044a88 <RadioGetLoRaTimeOnAirNumerator+0x70>
 8044a86:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8044a88:	4413      	add	r3, r2
 8044a8a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8044a8c:	68bb      	ldr	r3, [r7, #8]
 8044a8e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8044a90:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8044a92:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8044a96:	2a00      	cmp	r2, #0
 8044a98:	d001      	beq.n	8044a9e <RadioGetLoRaTimeOnAirNumerator+0x86>
 8044a9a:	2200      	movs	r2, #0
 8044a9c:	e000      	b.n	8044aa0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8044a9e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8044aa0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8044aa2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8044aa4:	68bb      	ldr	r3, [r7, #8]
 8044aa6:	2b06      	cmp	r3, #6
 8044aa8:	d803      	bhi.n	8044ab2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8044aaa:	68bb      	ldr	r3, [r7, #8]
 8044aac:	009b      	lsls	r3, r3, #2
 8044aae:	623b      	str	r3, [r7, #32]
 8044ab0:	e00e      	b.n	8044ad0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8044ab2:	69fb      	ldr	r3, [r7, #28]
 8044ab4:	3308      	adds	r3, #8
 8044ab6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8044ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8044abc:	2b00      	cmp	r3, #0
 8044abe:	d004      	beq.n	8044aca <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8044ac0:	68bb      	ldr	r3, [r7, #8]
 8044ac2:	3b02      	subs	r3, #2
 8044ac4:	009b      	lsls	r3, r3, #2
 8044ac6:	623b      	str	r3, [r7, #32]
 8044ac8:	e002      	b.n	8044ad0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8044aca:	68bb      	ldr	r3, [r7, #8]
 8044acc:	009b      	lsls	r3, r3, #2
 8044ace:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8044ad0:	69fb      	ldr	r3, [r7, #28]
 8044ad2:	2b00      	cmp	r3, #0
 8044ad4:	da01      	bge.n	8044ada <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8044ad6:	2300      	movs	r3, #0
 8044ad8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8044ada:	69fa      	ldr	r2, [r7, #28]
 8044adc:	6a3b      	ldr	r3, [r7, #32]
 8044ade:	4413      	add	r3, r2
 8044ae0:	1e5a      	subs	r2, r3, #1
 8044ae2:	6a3b      	ldr	r3, [r7, #32]
 8044ae4:	fb92 f3f3 	sdiv	r3, r2, r3
 8044ae8:	697a      	ldr	r2, [r7, #20]
 8044aea:	fb02 f203 	mul.w	r2, r2, r3
 8044aee:	88bb      	ldrh	r3, [r7, #4]
 8044af0:	4413      	add	r3, r2
    int32_t intermediate =
 8044af2:	330c      	adds	r3, #12
 8044af4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8044af6:	68bb      	ldr	r3, [r7, #8]
 8044af8:	2b06      	cmp	r3, #6
 8044afa:	d802      	bhi.n	8044b02 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8044afc:	69bb      	ldr	r3, [r7, #24]
 8044afe:	3302      	adds	r3, #2
 8044b00:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8044b02:	69bb      	ldr	r3, [r7, #24]
 8044b04:	009b      	lsls	r3, r3, #2
 8044b06:	1c5a      	adds	r2, r3, #1
 8044b08:	68bb      	ldr	r3, [r7, #8]
 8044b0a:	3b02      	subs	r3, #2
 8044b0c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8044b10:	4618      	mov	r0, r3
 8044b12:	372c      	adds	r7, #44	; 0x2c
 8044b14:	46bd      	mov	sp, r7
 8044b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b1a:	4770      	bx	lr

08044b1c <RadioTimeOnAir>:

uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8044b1c:	b580      	push	{r7, lr}
 8044b1e:	b08a      	sub	sp, #40	; 0x28
 8044b20:	af04      	add	r7, sp, #16
 8044b22:	60b9      	str	r1, [r7, #8]
 8044b24:	607a      	str	r2, [r7, #4]
 8044b26:	461a      	mov	r2, r3
 8044b28:	4603      	mov	r3, r0
 8044b2a:	73fb      	strb	r3, [r7, #15]
 8044b2c:	4613      	mov	r3, r2
 8044b2e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8044b30:	2300      	movs	r3, #0
 8044b32:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8044b34:	2301      	movs	r3, #1
 8044b36:	613b      	str	r3, [r7, #16]

    switch( modem )
 8044b38:	7bfb      	ldrb	r3, [r7, #15]
 8044b3a:	2b00      	cmp	r3, #0
 8044b3c:	d002      	beq.n	8044b44 <RadioTimeOnAir+0x28>
 8044b3e:	2b01      	cmp	r3, #1
 8044b40:	d017      	beq.n	8044b72 <RadioTimeOnAir+0x56>
 8044b42:	e035      	b.n	8044bb0 <RadioTimeOnAir+0x94>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8044b44:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8044b48:	8c3a      	ldrh	r2, [r7, #32]
 8044b4a:	7bb9      	ldrb	r1, [r7, #14]
 8044b4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8044b50:	9301      	str	r3, [sp, #4]
 8044b52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8044b56:	9300      	str	r3, [sp, #0]
 8044b58:	4603      	mov	r3, r0
 8044b5a:	6878      	ldr	r0, [r7, #4]
 8044b5c:	f7ff ff2e 	bl	80449bc <RadioGetGfskTimeOnAirNumerator>
 8044b60:	4603      	mov	r3, r0
 8044b62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8044b66:	fb02 f303 	mul.w	r3, r2, r3
 8044b6a:	617b      	str	r3, [r7, #20]
                                                                  preambleLen, fixLen,
                                                                  payloadLen, crcOn );
            denominator = datarate;
 8044b6c:	687b      	ldr	r3, [r7, #4]
 8044b6e:	613b      	str	r3, [r7, #16]
        }
        break;
 8044b70:	e01e      	b.n	8044bb0 <RadioTimeOnAir+0x94>
    case MODEM_LORA:
        {
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8044b72:	8c39      	ldrh	r1, [r7, #32]
 8044b74:	7bba      	ldrb	r2, [r7, #14]
 8044b76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8044b7a:	9302      	str	r3, [sp, #8]
 8044b7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8044b80:	9301      	str	r3, [sp, #4]
 8044b82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8044b86:	9300      	str	r3, [sp, #0]
 8044b88:	460b      	mov	r3, r1
 8044b8a:	6879      	ldr	r1, [r7, #4]
 8044b8c:	68b8      	ldr	r0, [r7, #8]
 8044b8e:	f7ff ff43 	bl	8044a18 <RadioGetLoRaTimeOnAirNumerator>
 8044b92:	4603      	mov	r3, r0
 8044b94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8044b98:	fb02 f303 	mul.w	r3, r2, r3
 8044b9c:	617b      	str	r3, [r7, #20]
                                                                  coderate, preambleLen,
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8044b9e:	4a0a      	ldr	r2, [pc, #40]	; (8044bc8 <RadioTimeOnAir+0xac>)
 8044ba0:	68bb      	ldr	r3, [r7, #8]
 8044ba2:	4413      	add	r3, r2
 8044ba4:	781b      	ldrb	r3, [r3, #0]
 8044ba6:	4618      	mov	r0, r3
 8044ba8:	f7ff feb8 	bl	804491c <RadioGetLoRaBandwidthInHz>
 8044bac:	6138      	str	r0, [r7, #16]
        }
        break;
 8044bae:	bf00      	nop
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 8044bb0:	697a      	ldr	r2, [r7, #20]
 8044bb2:	693b      	ldr	r3, [r7, #16]
 8044bb4:	4413      	add	r3, r2
 8044bb6:	1e5a      	subs	r2, r3, #1
 8044bb8:	693b      	ldr	r3, [r7, #16]
 8044bba:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8044bbe:	4618      	mov	r0, r3
 8044bc0:	3718      	adds	r7, #24
 8044bc2:	46bd      	mov	sp, r7
 8044bc4:	bd80      	pop	{r7, pc}
 8044bc6:	bf00      	nop
 8044bc8:	0804e990 	.word	0x0804e990

08044bcc <RadioSend>:

void RadioSend( uint8_t* buffer, uint8_t size )
{
 8044bcc:	b580      	push	{r7, lr}
 8044bce:	b084      	sub	sp, #16
 8044bd0:	af00      	add	r7, sp, #0
 8044bd2:	6078      	str	r0, [r7, #4]
 8044bd4:	460b      	mov	r3, r1
 8044bd6:	70fb      	strb	r3, [r7, #3]
    lr1110_radio_pkt_type_t packet_type;

    lr1110_system_set_dio_irq_params( &LR1110, LR1110_SYSTEM_IRQ_TX_DONE | LR1110_SYSTEM_IRQ_TIMEOUT,
 8044bd8:	2200      	movs	r2, #0
 8044bda:	f240 4104 	movw	r1, #1028	; 0x404
 8044bde:	481c      	ldr	r0, [pc, #112]	; (8044c50 <RadioSend+0x84>)
 8044be0:	f001 fee8 	bl	80469b4 <lr1110_system_set_dio_irq_params>
                                      LR1110_SYSTEM_IRQ_NONE );

    lr1110_radio_get_pkt_type( &LR1110, &packet_type );
 8044be4:	f107 030f 	add.w	r3, r7, #15
 8044be8:	4619      	mov	r1, r3
 8044bea:	4819      	ldr	r0, [pc, #100]	; (8044c50 <RadioSend+0x84>)
 8044bec:	f001 f8a4 	bl	8045d38 <lr1110_radio_get_pkt_type>
    if( packet_type == LR1110_RADIO_PKT_TYPE_LORA )
 8044bf0:	7bfb      	ldrb	r3, [r7, #15]
 8044bf2:	2b02      	cmp	r3, #2
 8044bf4:	d108      	bne.n	8044c08 <RadioSend+0x3c>
    {
        LR1110.packet_params.packet.lora.pld_len_in_bytes = size;
 8044bf6:	4a16      	ldr	r2, [pc, #88]	; (8044c50 <RadioSend+0x84>)
 8044bf8:	78fb      	ldrb	r3, [r7, #3]
 8044bfa:	f882 30b7 	strb.w	r3, [r2, #183]	; 0xb7
        lr1110_radio_set_lora_pkt_params( &LR1110, &LR1110.packet_params.packet.lora );
 8044bfe:	4915      	ldr	r1, [pc, #84]	; (8044c54 <RadioSend+0x88>)
 8044c00:	4813      	ldr	r0, [pc, #76]	; (8044c50 <RadioSend+0x84>)
 8044c02:	f001 fb47 	bl	8046294 <lr1110_radio_set_lora_pkt_params>
 8044c06:	e007      	b.n	8044c18 <RadioSend+0x4c>
    }
    else
    {
        LR1110.packet_params.packet.gfsk.pld_len_in_bytes = size;
 8044c08:	4a11      	ldr	r2, [pc, #68]	; (8044c50 <RadioSend+0x84>)
 8044c0a:	78fb      	ldrb	r3, [r7, #3]
 8044c0c:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
        lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
 8044c10:	4911      	ldr	r1, [pc, #68]	; (8044c58 <RadioSend+0x8c>)
 8044c12:	480f      	ldr	r0, [pc, #60]	; (8044c50 <RadioSend+0x84>)
 8044c14:	f001 fb08 	bl	8046228 <lr1110_radio_set_gfsk_pkt_params>
    }

    /* Send Payload */
    lr1110_regmem_write_buffer8( &LR1110, buffer, size );
 8044c18:	78fb      	ldrb	r3, [r7, #3]
 8044c1a:	461a      	mov	r2, r3
 8044c1c:	6879      	ldr	r1, [r7, #4]
 8044c1e:	480c      	ldr	r0, [pc, #48]	; (8044c50 <RadioSend+0x84>)
 8044c20:	f001 fd10 	bl	8046644 <lr1110_regmem_write_buffer8>
    lr1110_radio_set_tx( &LR1110, 0 );
 8044c24:	2100      	movs	r1, #0
 8044c26:	480a      	ldr	r0, [pc, #40]	; (8044c50 <RadioSend+0x84>)
 8044c28:	f001 fa24 	bl	8046074 <lr1110_radio_set_tx>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_TX );
 8044c2c:	2104      	movs	r1, #4
 8044c2e:	4808      	ldr	r0, [pc, #32]	; (8044c50 <RadioSend+0x84>)
 8044c30:	f7ff fabb 	bl	80441aa <lr1110_hal_set_operating_mode>

    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 8044c34:	4b09      	ldr	r3, [pc, #36]	; (8044c5c <RadioSend+0x90>)
 8044c36:	681b      	ldr	r3, [r3, #0]
 8044c38:	4619      	mov	r1, r3
 8044c3a:	4809      	ldr	r0, [pc, #36]	; (8044c60 <RadioSend+0x94>)
 8044c3c:	f7fe fb9e 	bl	804337c <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 8044c40:	4807      	ldr	r0, [pc, #28]	; (8044c60 <RadioSend+0x94>)
 8044c42:	f7fe f9e3 	bl	804300c <TimerStart>
}
 8044c46:	bf00      	nop
 8044c48:	3710      	adds	r7, #16
 8044c4a:	46bd      	mov	sp, r7
 8044c4c:	bd80      	pop	{r7, pc}
 8044c4e:	bf00      	nop
 8044c50:	200195d0 	.word	0x200195d0
 8044c54:	20019684 	.word	0x20019684
 8044c58:	2001967a 	.word	0x2001967a
 8044c5c:	20018338 	.word	0x20018338
 8044c60:	2001968c 	.word	0x2001968c

08044c64 <RadioSleep>:

void RadioSleep( void )
{
 8044c64:	b580      	push	{r7, lr}
 8044c66:	b082      	sub	sp, #8
 8044c68:	af00      	add	r7, sp, #0
    lr1110_system_sleep_cfg_t sleep_config;

    sleep_config.is_warm_start  = 1;
 8044c6a:	2301      	movs	r3, #1
 8044c6c:	713b      	strb	r3, [r7, #4]
    sleep_config.is_rtc_timeout = 0;
 8044c6e:	2300      	movs	r3, #0
 8044c70:	717b      	strb	r3, [r7, #5]

    lr1110_system_set_sleep( &LR1110, sleep_config, 0 );
 8044c72:	2200      	movs	r2, #0
 8044c74:	6879      	ldr	r1, [r7, #4]
 8044c76:	4807      	ldr	r0, [pc, #28]	; (8044c94 <RadioSleep+0x30>)
 8044c78:	f001 ff1e 	bl	8046ab8 <lr1110_system_set_sleep>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_SLEEP );
 8044c7c:	2100      	movs	r1, #0
 8044c7e:	4805      	ldr	r0, [pc, #20]	; (8044c94 <RadioSleep+0x30>)
 8044c80:	f7ff fa93 	bl	80441aa <lr1110_hal_set_operating_mode>

    DelayMs( 2 );
 8044c84:	2002      	movs	r0, #2
 8044c86:	f7fc fab5 	bl	80411f4 <DelayMs>
}
 8044c8a:	bf00      	nop
 8044c8c:	3708      	adds	r7, #8
 8044c8e:	46bd      	mov	sp, r7
 8044c90:	bd80      	pop	{r7, pc}
 8044c92:	bf00      	nop
 8044c94:	200195d0 	.word	0x200195d0

08044c98 <RadioStandby>:

void RadioStandby( void )
{
 8044c98:	b580      	push	{r7, lr}
 8044c9a:	af00      	add	r7, sp, #0
    lr1110_system_set_standby( &LR1110, LR1110_SYSTEM_STANDBY_CFG_RC );
 8044c9c:	2100      	movs	r1, #0
 8044c9e:	4804      	ldr	r0, [pc, #16]	; (8044cb0 <RadioStandby+0x18>)
 8044ca0:	f001 ff38 	bl	8046b14 <lr1110_system_set_standby>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_STDBY_RC );
 8044ca4:	2101      	movs	r1, #1
 8044ca6:	4802      	ldr	r0, [pc, #8]	; (8044cb0 <RadioStandby+0x18>)
 8044ca8:	f7ff fa7f 	bl	80441aa <lr1110_hal_set_operating_mode>
}
 8044cac:	bf00      	nop
 8044cae:	bd80      	pop	{r7, pc}
 8044cb0:	200195d0 	.word	0x200195d0

08044cb4 <RadioRx>:

void RadioRx( uint32_t timeout )
{
 8044cb4:	b580      	push	{r7, lr}
 8044cb6:	b082      	sub	sp, #8
 8044cb8:	af00      	add	r7, sp, #0
 8044cba:	6078      	str	r0, [r7, #4]
    lr1110_system_set_dio_irq_params(
 8044cbc:	2200      	movs	r2, #0
 8044cbe:	4917      	ldr	r1, [pc, #92]	; (8044d1c <RadioRx+0x68>)
 8044cc0:	4817      	ldr	r0, [pc, #92]	; (8044d20 <RadioRx+0x6c>)
 8044cc2:	f001 fe77 	bl	80469b4 <lr1110_system_set_dio_irq_params>
        &LR1110,
        LR1110_SYSTEM_IRQ_ALL_MASK,  // LR1110_SYSTEM_IRQ_RXDONE_MASK | LR1110_SYSTEM_IRQ_TIMEOUT_MASK,
        LR1110_SYSTEM_IRQ_NONE );

    lr1110_radio_cfg_rx_boosted( &LR1110, false );
 8044cc6:	2100      	movs	r1, #0
 8044cc8:	4815      	ldr	r0, [pc, #84]	; (8044d20 <RadioRx+0x6c>)
 8044cca:	f001 fc52 	bl	8046572 <lr1110_radio_cfg_rx_boosted>

    if( timeout != 0 )
 8044cce:	687b      	ldr	r3, [r7, #4]
 8044cd0:	2b00      	cmp	r3, #0
 8044cd2:	d006      	beq.n	8044ce2 <RadioRx+0x2e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8044cd4:	6879      	ldr	r1, [r7, #4]
 8044cd6:	4813      	ldr	r0, [pc, #76]	; (8044d24 <RadioRx+0x70>)
 8044cd8:	f7fe fb50 	bl	804337c <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8044cdc:	4811      	ldr	r0, [pc, #68]	; (8044d24 <RadioRx+0x70>)
 8044cde:	f7fe f995 	bl	804300c <TimerStart>
    }

    if( RxContinuous == true )
 8044ce2:	4b11      	ldr	r3, [pc, #68]	; (8044d28 <RadioRx+0x74>)
 8044ce4:	781b      	ldrb	r3, [r3, #0]
 8044ce6:	2b00      	cmp	r3, #0
 8044ce8:	d009      	beq.n	8044cfe <RadioRx+0x4a>
    {
        lr1110_radio_set_rx( &LR1110, 0xFFFFFF );  // Rx Continuous
 8044cea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8044cee:	480c      	ldr	r0, [pc, #48]	; (8044d20 <RadioRx+0x6c>)
 8044cf0:	f001 f98c 	bl	804600c <lr1110_radio_set_rx>
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX_C );
 8044cf4:	2106      	movs	r1, #6
 8044cf6:	480a      	ldr	r0, [pc, #40]	; (8044d20 <RadioRx+0x6c>)
 8044cf8:	f7ff fa57 	bl	80441aa <lr1110_hal_set_operating_mode>
    else
    {
        lr1110_radio_set_rx( &LR1110, ( RxTimeout * 32768 ) );
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX );
    }
}
 8044cfc:	e00a      	b.n	8044d14 <RadioRx+0x60>
        lr1110_radio_set_rx( &LR1110, ( RxTimeout * 32768 ) );
 8044cfe:	4b0b      	ldr	r3, [pc, #44]	; (8044d2c <RadioRx+0x78>)
 8044d00:	681b      	ldr	r3, [r3, #0]
 8044d02:	03db      	lsls	r3, r3, #15
 8044d04:	4619      	mov	r1, r3
 8044d06:	4806      	ldr	r0, [pc, #24]	; (8044d20 <RadioRx+0x6c>)
 8044d08:	f001 f980 	bl	804600c <lr1110_radio_set_rx>
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX );
 8044d0c:	2105      	movs	r1, #5
 8044d0e:	4804      	ldr	r0, [pc, #16]	; (8044d20 <RadioRx+0x6c>)
 8044d10:	f7ff fa4b 	bl	80441aa <lr1110_hal_set_operating_mode>
}
 8044d14:	bf00      	nop
 8044d16:	3708      	adds	r7, #8
 8044d18:	46bd      	mov	sp, r7
 8044d1a:	bd80      	pop	{r7, pc}
 8044d1c:	03f807fc 	.word	0x03f807fc
 8044d20:	200195d0 	.word	0x200195d0
 8044d24:	200197b0 	.word	0x200197b0
 8044d28:	20018340 	.word	0x20018340
 8044d2c:	2001833c 	.word	0x2001833c

08044d30 <RadioRxBoosted>:

void RadioRxBoosted( uint32_t timeout )
{
 8044d30:	b580      	push	{r7, lr}
 8044d32:	b082      	sub	sp, #8
 8044d34:	af00      	add	r7, sp, #0
 8044d36:	6078      	str	r0, [r7, #4]
    lr1110_system_set_dio_irq_params(
 8044d38:	2200      	movs	r2, #0
 8044d3a:	4917      	ldr	r1, [pc, #92]	; (8044d98 <RadioRxBoosted+0x68>)
 8044d3c:	4817      	ldr	r0, [pc, #92]	; (8044d9c <RadioRxBoosted+0x6c>)
 8044d3e:	f001 fe39 	bl	80469b4 <lr1110_system_set_dio_irq_params>
        &LR1110,
        LR1110_SYSTEM_IRQ_ALL_MASK,  // LR1110_SYSTEM_IRQ_RXDONE_MASK | LR1110_SYSTEM_IRQ_TIMEOUT_MASK,
        LR1110_SYSTEM_IRQ_NONE );

    if( timeout != 0 )
 8044d42:	687b      	ldr	r3, [r7, #4]
 8044d44:	2b00      	cmp	r3, #0
 8044d46:	d006      	beq.n	8044d56 <RadioRxBoosted+0x26>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8044d48:	6879      	ldr	r1, [r7, #4]
 8044d4a:	4815      	ldr	r0, [pc, #84]	; (8044da0 <RadioRxBoosted+0x70>)
 8044d4c:	f7fe fb16 	bl	804337c <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8044d50:	4813      	ldr	r0, [pc, #76]	; (8044da0 <RadioRxBoosted+0x70>)
 8044d52:	f7fe f95b 	bl	804300c <TimerStart>
    }

    lr1110_radio_cfg_rx_boosted( &LR1110, true );
 8044d56:	2101      	movs	r1, #1
 8044d58:	4810      	ldr	r0, [pc, #64]	; (8044d9c <RadioRxBoosted+0x6c>)
 8044d5a:	f001 fc0a 	bl	8046572 <lr1110_radio_cfg_rx_boosted>
    if( RxContinuous == true )
 8044d5e:	4b11      	ldr	r3, [pc, #68]	; (8044da4 <RadioRxBoosted+0x74>)
 8044d60:	781b      	ldrb	r3, [r3, #0]
 8044d62:	2b00      	cmp	r3, #0
 8044d64:	d009      	beq.n	8044d7a <RadioRxBoosted+0x4a>
    {
        lr1110_radio_set_rx( &LR1110, 0xFFFFFF );  // Rx Continuous
 8044d66:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8044d6a:	480c      	ldr	r0, [pc, #48]	; (8044d9c <RadioRxBoosted+0x6c>)
 8044d6c:	f001 f94e 	bl	804600c <lr1110_radio_set_rx>
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX_C );
 8044d70:	2106      	movs	r1, #6
 8044d72:	480a      	ldr	r0, [pc, #40]	; (8044d9c <RadioRxBoosted+0x6c>)
 8044d74:	f7ff fa19 	bl	80441aa <lr1110_hal_set_operating_mode>
    else
    {
        lr1110_radio_set_rx( &LR1110, ( RxTimeout * 32768 ) );
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX );
    }
}
 8044d78:	e00a      	b.n	8044d90 <RadioRxBoosted+0x60>
        lr1110_radio_set_rx( &LR1110, ( RxTimeout * 32768 ) );
 8044d7a:	4b0b      	ldr	r3, [pc, #44]	; (8044da8 <RadioRxBoosted+0x78>)
 8044d7c:	681b      	ldr	r3, [r3, #0]
 8044d7e:	03db      	lsls	r3, r3, #15
 8044d80:	4619      	mov	r1, r3
 8044d82:	4806      	ldr	r0, [pc, #24]	; (8044d9c <RadioRxBoosted+0x6c>)
 8044d84:	f001 f942 	bl	804600c <lr1110_radio_set_rx>
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX );
 8044d88:	2105      	movs	r1, #5
 8044d8a:	4804      	ldr	r0, [pc, #16]	; (8044d9c <RadioRxBoosted+0x6c>)
 8044d8c:	f7ff fa0d 	bl	80441aa <lr1110_hal_set_operating_mode>
}
 8044d90:	bf00      	nop
 8044d92:	3708      	adds	r7, #8
 8044d94:	46bd      	mov	sp, r7
 8044d96:	bd80      	pop	{r7, pc}
 8044d98:	03f807fc 	.word	0x03f807fc
 8044d9c:	200195d0 	.word	0x200195d0
 8044da0:	200197b0 	.word	0x200197b0
 8044da4:	20018340 	.word	0x20018340
 8044da8:	2001833c 	.word	0x2001833c

08044dac <RadioSetRxDutyCycle>:

void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8044dac:	b580      	push	{r7, lr}
 8044dae:	b082      	sub	sp, #8
 8044db0:	af00      	add	r7, sp, #0
 8044db2:	6078      	str	r0, [r7, #4]
 8044db4:	6039      	str	r1, [r7, #0]
    lr1110_radio_set_rx_duty_cycle( &LR1110, rxTime, sleepTime, 0 );
 8044db6:	2300      	movs	r3, #0
 8044db8:	683a      	ldr	r2, [r7, #0]
 8044dba:	6879      	ldr	r1, [r7, #4]
 8044dbc:	4805      	ldr	r0, [pc, #20]	; (8044dd4 <RadioSetRxDutyCycle+0x28>)
 8044dbe:	f001 fab4 	bl	804632a <lr1110_radio_set_rx_duty_cycle>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX_DC );
 8044dc2:	2107      	movs	r1, #7
 8044dc4:	4803      	ldr	r0, [pc, #12]	; (8044dd4 <RadioSetRxDutyCycle+0x28>)
 8044dc6:	f7ff f9f0 	bl	80441aa <lr1110_hal_set_operating_mode>
}
 8044dca:	bf00      	nop
 8044dcc:	3708      	adds	r7, #8
 8044dce:	46bd      	mov	sp, r7
 8044dd0:	bd80      	pop	{r7, pc}
 8044dd2:	bf00      	nop
 8044dd4:	200195d0 	.word	0x200195d0

08044dd8 <RadioStartCad>:

void RadioStartCad( void )
{
 8044dd8:	b580      	push	{r7, lr}
 8044dda:	af00      	add	r7, sp, #0
    lr1110_radio_set_cad( &LR1110 );
 8044ddc:	4804      	ldr	r0, [pc, #16]	; (8044df0 <RadioStartCad+0x18>)
 8044dde:	f001 fb2c 	bl	804643a <lr1110_radio_set_cad>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_CAD );
 8044de2:	2108      	movs	r1, #8
 8044de4:	4802      	ldr	r0, [pc, #8]	; (8044df0 <RadioStartCad+0x18>)
 8044de6:	f7ff f9e0 	bl	80441aa <lr1110_hal_set_operating_mode>
}
 8044dea:	bf00      	nop
 8044dec:	bd80      	pop	{r7, pc}
 8044dee:	bf00      	nop
 8044df0:	200195d0 	.word	0x200195d0

08044df4 <RadioSetTxContinuousWave>:
    lr1110_radio_set_tx( &LR1110, timeout * 32768 );
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_TX );
}

void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8044df4:	b580      	push	{r7, lr}
 8044df6:	b084      	sub	sp, #16
 8044df8:	af00      	add	r7, sp, #0
 8044dfa:	6078      	str	r0, [r7, #4]
 8044dfc:	460b      	mov	r3, r1
 8044dfe:	70fb      	strb	r3, [r7, #3]
 8044e00:	4613      	mov	r3, r2
 8044e02:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8044e04:	883b      	ldrh	r3, [r7, #0]
 8044e06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8044e0a:	fb02 f303 	mul.w	r3, r2, r3
 8044e0e:	60fb      	str	r3, [r7, #12]

    lr1110_radio_set_rf_freq( &LR1110, freq );
 8044e10:	6879      	ldr	r1, [r7, #4]
 8044e12:	480d      	ldr	r0, [pc, #52]	; (8044e48 <RadioSetTxContinuousWave+0x54>)
 8044e14:	f001 f962 	bl	80460dc <lr1110_radio_set_rf_freq>
    lr1110_board_set_rf_tx_power( &LR1110, power );
 8044e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8044e1c:	4619      	mov	r1, r3
 8044e1e:	480a      	ldr	r0, [pc, #40]	; (8044e48 <RadioSetTxContinuousWave+0x54>)
 8044e20:	f7fe ff9c 	bl	8043d5c <lr1110_board_set_rf_tx_power>
    lr1110_radio_set_tx_cw( &LR1110 );
 8044e24:	4808      	ldr	r0, [pc, #32]	; (8044e48 <RadioSetTxContinuousWave+0x54>)
 8044e26:	f001 fb1e 	bl	8046466 <lr1110_radio_set_tx_cw>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_TX );
 8044e2a:	2104      	movs	r1, #4
 8044e2c:	4806      	ldr	r0, [pc, #24]	; (8044e48 <RadioSetTxContinuousWave+0x54>)
 8044e2e:	f7ff f9bc 	bl	80441aa <lr1110_hal_set_operating_mode>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8044e32:	68f9      	ldr	r1, [r7, #12]
 8044e34:	4805      	ldr	r0, [pc, #20]	; (8044e4c <RadioSetTxContinuousWave+0x58>)
 8044e36:	f7fe faa1 	bl	804337c <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 8044e3a:	4804      	ldr	r0, [pc, #16]	; (8044e4c <RadioSetTxContinuousWave+0x58>)
 8044e3c:	f7fe f8e6 	bl	804300c <TimerStart>
}
 8044e40:	bf00      	nop
 8044e42:	3710      	adds	r7, #16
 8044e44:	46bd      	mov	sp, r7
 8044e46:	bd80      	pop	{r7, pc}
 8044e48:	200195d0 	.word	0x200195d0
 8044e4c:	2001968c 	.word	0x2001968c

08044e50 <RadioRssi>:

int16_t RadioRssi( RadioModems_t modem )
{
 8044e50:	b580      	push	{r7, lr}
 8044e52:	b084      	sub	sp, #16
 8044e54:	af00      	add	r7, sp, #0
 8044e56:	4603      	mov	r3, r0
 8044e58:	71fb      	strb	r3, [r7, #7]
    int8_t rssi = 0;
 8044e5a:	2300      	movs	r3, #0
 8044e5c:	73fb      	strb	r3, [r7, #15]

    lr1110_radio_get_rssi_inst( &LR1110, &rssi );
 8044e5e:	f107 030f 	add.w	r3, r7, #15
 8044e62:	4619      	mov	r1, r3
 8044e64:	4804      	ldr	r0, [pc, #16]	; (8044e78 <RadioRssi+0x28>)
 8044e66:	f001 f863 	bl	8045f30 <lr1110_radio_get_rssi_inst>

    return rssi;
 8044e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8044e6e:	b21b      	sxth	r3, r3
}
 8044e70:	4618      	mov	r0, r3
 8044e72:	3710      	adds	r7, #16
 8044e74:	46bd      	mov	sp, r7
 8044e76:	bd80      	pop	{r7, pc}
 8044e78:	200195d0 	.word	0x200195d0

08044e7c <RadioWrite>:

void RadioWrite( uint32_t addr, uint8_t data )
{
 8044e7c:	b580      	push	{r7, lr}
 8044e7e:	b082      	sub	sp, #8
 8044e80:	af00      	add	r7, sp, #0
 8044e82:	6078      	str	r0, [r7, #4]
 8044e84:	460b      	mov	r3, r1
 8044e86:	70fb      	strb	r3, [r7, #3]
    lr1110_regmem_write_mem8( &LR1110, addr, &data, 1 );
 8044e88:	1cfa      	adds	r2, r7, #3
 8044e8a:	2301      	movs	r3, #1
 8044e8c:	6879      	ldr	r1, [r7, #4]
 8044e8e:	4803      	ldr	r0, [pc, #12]	; (8044e9c <RadioWrite+0x20>)
 8044e90:	f001 fb9c 	bl	80465cc <lr1110_regmem_write_mem8>
}
 8044e94:	bf00      	nop
 8044e96:	3708      	adds	r7, #8
 8044e98:	46bd      	mov	sp, r7
 8044e9a:	bd80      	pop	{r7, pc}
 8044e9c:	200195d0 	.word	0x200195d0

08044ea0 <RadioRead>:

uint8_t RadioRead( uint32_t addr )
{
 8044ea0:	b580      	push	{r7, lr}
 8044ea2:	b084      	sub	sp, #16
 8044ea4:	af00      	add	r7, sp, #0
 8044ea6:	6078      	str	r0, [r7, #4]
    uint8_t data = 0;
 8044ea8:	2300      	movs	r3, #0
 8044eaa:	73fb      	strb	r3, [r7, #15]

    lr1110_regmem_read_mem8( &LR1110, addr, &data, 1 );
 8044eac:	f107 020f 	add.w	r2, r7, #15
 8044eb0:	2301      	movs	r3, #1
 8044eb2:	6879      	ldr	r1, [r7, #4]
 8044eb4:	4803      	ldr	r0, [pc, #12]	; (8044ec4 <RadioRead+0x24>)
 8044eb6:	f001 fba7 	bl	8046608 <lr1110_regmem_read_mem8>

    return data;
 8044eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8044ebc:	4618      	mov	r0, r3
 8044ebe:	3710      	adds	r7, #16
 8044ec0:	46bd      	mov	sp, r7
 8044ec2:	bd80      	pop	{r7, pc}
 8044ec4:	200195d0 	.word	0x200195d0

08044ec8 <RadioWriteBuffer>:

void RadioWriteBuffer( uint32_t addr, uint8_t* buffer, uint8_t size )
{
 8044ec8:	b580      	push	{r7, lr}
 8044eca:	b084      	sub	sp, #16
 8044ecc:	af00      	add	r7, sp, #0
 8044ece:	60f8      	str	r0, [r7, #12]
 8044ed0:	60b9      	str	r1, [r7, #8]
 8044ed2:	4613      	mov	r3, r2
 8044ed4:	71fb      	strb	r3, [r7, #7]
    lr1110_regmem_write_buffer8( &LR1110, buffer, size );
 8044ed6:	79fb      	ldrb	r3, [r7, #7]
 8044ed8:	461a      	mov	r2, r3
 8044eda:	68b9      	ldr	r1, [r7, #8]
 8044edc:	4803      	ldr	r0, [pc, #12]	; (8044eec <RadioWriteBuffer+0x24>)
 8044ede:	f001 fbb1 	bl	8046644 <lr1110_regmem_write_buffer8>
}
 8044ee2:	bf00      	nop
 8044ee4:	3710      	adds	r7, #16
 8044ee6:	46bd      	mov	sp, r7
 8044ee8:	bd80      	pop	{r7, pc}
 8044eea:	bf00      	nop
 8044eec:	200195d0 	.word	0x200195d0

08044ef0 <RadioReadBuffer>:

void RadioReadBuffer( uint32_t addr, uint8_t* buffer, uint8_t size )
{
 8044ef0:	b580      	push	{r7, lr}
 8044ef2:	b084      	sub	sp, #16
 8044ef4:	af00      	add	r7, sp, #0
 8044ef6:	60f8      	str	r0, [r7, #12]
 8044ef8:	60b9      	str	r1, [r7, #8]
 8044efa:	4613      	mov	r3, r2
 8044efc:	71fb      	strb	r3, [r7, #7]
    lr1110_regmem_read_buffer8( &LR1110, buffer, addr, size );
 8044efe:	68fb      	ldr	r3, [r7, #12]
 8044f00:	b2da      	uxtb	r2, r3
 8044f02:	79fb      	ldrb	r3, [r7, #7]
 8044f04:	68b9      	ldr	r1, [r7, #8]
 8044f06:	4803      	ldr	r0, [pc, #12]	; (8044f14 <RadioReadBuffer+0x24>)
 8044f08:	f001 fbb6 	bl	8046678 <lr1110_regmem_read_buffer8>
}
 8044f0c:	bf00      	nop
 8044f0e:	3710      	adds	r7, #16
 8044f10:	46bd      	mov	sp, r7
 8044f12:	bd80      	pop	{r7, pc}
 8044f14:	200195d0 	.word	0x200195d0

08044f18 <RadioSetMaxPayloadLength>:
{
    lr1110_regmem_read_buffer8( &LR1110, buffer, offset, size );
}

void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8044f18:	b580      	push	{r7, lr}
 8044f1a:	b082      	sub	sp, #8
 8044f1c:	af00      	add	r7, sp, #0
 8044f1e:	4603      	mov	r3, r0
 8044f20:	460a      	mov	r2, r1
 8044f22:	71fb      	strb	r3, [r7, #7]
 8044f24:	4613      	mov	r3, r2
 8044f26:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8044f28:	79fb      	ldrb	r3, [r7, #7]
 8044f2a:	2b01      	cmp	r3, #1
 8044f2c:	d10c      	bne.n	8044f48 <RadioSetMaxPayloadLength+0x30>
    {
        LR1110.packet_params.packet.lora.pld_len_in_bytes = MaxPayloadLength = max;
 8044f2e:	4a11      	ldr	r2, [pc, #68]	; (8044f74 <RadioSetMaxPayloadLength+0x5c>)
 8044f30:	79bb      	ldrb	r3, [r7, #6]
 8044f32:	7013      	strb	r3, [r2, #0]
 8044f34:	4b0f      	ldr	r3, [pc, #60]	; (8044f74 <RadioSetMaxPayloadLength+0x5c>)
 8044f36:	781a      	ldrb	r2, [r3, #0]
 8044f38:	4b0f      	ldr	r3, [pc, #60]	; (8044f78 <RadioSetMaxPayloadLength+0x60>)
 8044f3a:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
        lr1110_radio_set_lora_pkt_params( &LR1110, &LR1110.packet_params.packet.lora );
 8044f3e:	490f      	ldr	r1, [pc, #60]	; (8044f7c <RadioSetMaxPayloadLength+0x64>)
 8044f40:	480d      	ldr	r0, [pc, #52]	; (8044f78 <RadioSetMaxPayloadLength+0x60>)
 8044f42:	f001 f9a7 	bl	8046294 <lr1110_radio_set_lora_pkt_params>
        {
            LR1110.packet_params.packet.gfsk.pld_len_in_bytes = MaxPayloadLength = max;
            lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
        }
    }
}
 8044f46:	e010      	b.n	8044f6a <RadioSetMaxPayloadLength+0x52>
        if( LR1110.packet_params.packet.gfsk.header_type == LR1110_RADIO_GFSK_PKT_VAR_LEN )
 8044f48:	4b0b      	ldr	r3, [pc, #44]	; (8044f78 <RadioSetMaxPayloadLength+0x60>)
 8044f4a:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8044f4e:	2b01      	cmp	r3, #1
 8044f50:	d10b      	bne.n	8044f6a <RadioSetMaxPayloadLength+0x52>
            LR1110.packet_params.packet.gfsk.pld_len_in_bytes = MaxPayloadLength = max;
 8044f52:	4a08      	ldr	r2, [pc, #32]	; (8044f74 <RadioSetMaxPayloadLength+0x5c>)
 8044f54:	79bb      	ldrb	r3, [r7, #6]
 8044f56:	7013      	strb	r3, [r2, #0]
 8044f58:	4b06      	ldr	r3, [pc, #24]	; (8044f74 <RadioSetMaxPayloadLength+0x5c>)
 8044f5a:	781a      	ldrb	r2, [r3, #0]
 8044f5c:	4b06      	ldr	r3, [pc, #24]	; (8044f78 <RadioSetMaxPayloadLength+0x60>)
 8044f5e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
            lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
 8044f62:	4907      	ldr	r1, [pc, #28]	; (8044f80 <RadioSetMaxPayloadLength+0x68>)
 8044f64:	4804      	ldr	r0, [pc, #16]	; (8044f78 <RadioSetMaxPayloadLength+0x60>)
 8044f66:	f001 f95f 	bl	8046228 <lr1110_radio_set_gfsk_pkt_params>
}
 8044f6a:	bf00      	nop
 8044f6c:	3708      	adds	r7, #8
 8044f6e:	46bd      	mov	sp, r7
 8044f70:	bd80      	pop	{r7, pc}
 8044f72:	bf00      	nop
 8044f74:	2001805c 	.word	0x2001805c
 8044f78:	200195d0 	.word	0x200195d0
 8044f7c:	20019684 	.word	0x20019684
 8044f80:	2001967a 	.word	0x2001967a

08044f84 <RadioSetPublicNetwork>:

void RadioSetPublicNetwork( bool enable )
{
 8044f84:	b580      	push	{r7, lr}
 8044f86:	b082      	sub	sp, #8
 8044f88:	af00      	add	r7, sp, #0
 8044f8a:	4603      	mov	r3, r0
 8044f8c:	71fb      	strb	r3, [r7, #7]
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8044f8e:	4a0d      	ldr	r2, [pc, #52]	; (8044fc4 <RadioSetPublicNetwork+0x40>)
 8044f90:	79fb      	ldrb	r3, [r7, #7]
 8044f92:	7013      	strb	r3, [r2, #0]
 8044f94:	4b0b      	ldr	r3, [pc, #44]	; (8044fc4 <RadioSetPublicNetwork+0x40>)
 8044f96:	781a      	ldrb	r2, [r3, #0]
 8044f98:	4b0a      	ldr	r3, [pc, #40]	; (8044fc4 <RadioSetPublicNetwork+0x40>)
 8044f9a:	705a      	strb	r2, [r3, #1]

    RadioSetModem( MODEM_LORA );
 8044f9c:	2001      	movs	r0, #1
 8044f9e:	f7ff f9a7 	bl	80442f0 <RadioSetModem>
    if( enable == true )
 8044fa2:	79fb      	ldrb	r3, [r7, #7]
 8044fa4:	2b00      	cmp	r3, #0
 8044fa6:	d004      	beq.n	8044fb2 <RadioSetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        lr1110_radio_set_lora_sync_word( &LR1110, LR1110_RADIO_LORA_NETWORK_PUBLIC );
 8044fa8:	2101      	movs	r1, #1
 8044faa:	4807      	ldr	r0, [pc, #28]	; (8044fc8 <RadioSetPublicNetwork+0x44>)
 8044fac:	f001 f814 	bl	8045fd8 <lr1110_radio_set_lora_sync_word>
    else
    {
        // Change LoRa modem SyncWord
        lr1110_radio_set_lora_sync_word( &LR1110, LR1110_RADIO_LORA_NETWORK_PRIVATE );
    }
}
 8044fb0:	e003      	b.n	8044fba <RadioSetPublicNetwork+0x36>
        lr1110_radio_set_lora_sync_word( &LR1110, LR1110_RADIO_LORA_NETWORK_PRIVATE );
 8044fb2:	2100      	movs	r1, #0
 8044fb4:	4804      	ldr	r0, [pc, #16]	; (8044fc8 <RadioSetPublicNetwork+0x44>)
 8044fb6:	f001 f80f 	bl	8045fd8 <lr1110_radio_set_lora_sync_word>
}
 8044fba:	bf00      	nop
 8044fbc:	3708      	adds	r7, #8
 8044fbe:	46bd      	mov	sp, r7
 8044fc0:	bd80      	pop	{r7, pc}
 8044fc2:	bf00      	nop
 8044fc4:	20018344 	.word	0x20018344
 8044fc8:	200195d0 	.word	0x200195d0

08044fcc <RadioGetWakeupTime>:

uint32_t RadioGetWakeupTime( void )
{
 8044fcc:	b580      	push	{r7, lr}
 8044fce:	af00      	add	r7, sp, #0
    return lr1110_board_get_tcxo_wakeup_time( &LR1110 ) + 3;
 8044fd0:	4803      	ldr	r0, [pc, #12]	; (8044fe0 <RadioGetWakeupTime+0x14>)
 8044fd2:	f7fe fee6 	bl	8043da2 <lr1110_board_get_tcxo_wakeup_time>
 8044fd6:	4603      	mov	r3, r0
 8044fd8:	3303      	adds	r3, #3
}
 8044fda:	4618      	mov	r0, r3
 8044fdc:	bd80      	pop	{r7, pc}
 8044fde:	bf00      	nop
 8044fe0:	200195d0 	.word	0x200195d0

08044fe4 <RadioOnTxTimeoutIrq>:

void RadioOnTxTimeoutIrq( void* context )
{
 8044fe4:	b580      	push	{r7, lr}
 8044fe6:	b082      	sub	sp, #8
 8044fe8:	af00      	add	r7, sp, #0
 8044fea:	6078      	str	r0, [r7, #4]
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8044fec:	4b08      	ldr	r3, [pc, #32]	; (8045010 <RadioOnTxTimeoutIrq+0x2c>)
 8044fee:	681b      	ldr	r3, [r3, #0]
 8044ff0:	2b00      	cmp	r3, #0
 8044ff2:	d008      	beq.n	8045006 <RadioOnTxTimeoutIrq+0x22>
 8044ff4:	4b06      	ldr	r3, [pc, #24]	; (8045010 <RadioOnTxTimeoutIrq+0x2c>)
 8044ff6:	681b      	ldr	r3, [r3, #0]
 8044ff8:	685b      	ldr	r3, [r3, #4]
 8044ffa:	2b00      	cmp	r3, #0
 8044ffc:	d003      	beq.n	8045006 <RadioOnTxTimeoutIrq+0x22>
    {
        RadioEvents->TxTimeout( );
 8044ffe:	4b04      	ldr	r3, [pc, #16]	; (8045010 <RadioOnTxTimeoutIrq+0x2c>)
 8045000:	681b      	ldr	r3, [r3, #0]
 8045002:	685b      	ldr	r3, [r3, #4]
 8045004:	4798      	blx	r3
    }
}
 8045006:	bf00      	nop
 8045008:	3708      	adds	r7, #8
 804500a:	46bd      	mov	sp, r7
 804500c:	bd80      	pop	{r7, pc}
 804500e:	bf00      	nop
 8045010:	20018348 	.word	0x20018348

08045014 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
 8045014:	b580      	push	{r7, lr}
 8045016:	b082      	sub	sp, #8
 8045018:	af00      	add	r7, sp, #0
 804501a:	6078      	str	r0, [r7, #4]
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 804501c:	4b08      	ldr	r3, [pc, #32]	; (8045040 <RadioOnRxTimeoutIrq+0x2c>)
 804501e:	681b      	ldr	r3, [r3, #0]
 8045020:	2b00      	cmp	r3, #0
 8045022:	d008      	beq.n	8045036 <RadioOnRxTimeoutIrq+0x22>
 8045024:	4b06      	ldr	r3, [pc, #24]	; (8045040 <RadioOnRxTimeoutIrq+0x2c>)
 8045026:	681b      	ldr	r3, [r3, #0]
 8045028:	68db      	ldr	r3, [r3, #12]
 804502a:	2b00      	cmp	r3, #0
 804502c:	d003      	beq.n	8045036 <RadioOnRxTimeoutIrq+0x22>
    {
        RadioEvents->RxTimeout( );
 804502e:	4b04      	ldr	r3, [pc, #16]	; (8045040 <RadioOnRxTimeoutIrq+0x2c>)
 8045030:	681b      	ldr	r3, [r3, #0]
 8045032:	68db      	ldr	r3, [r3, #12]
 8045034:	4798      	blx	r3
    }
}
 8045036:	bf00      	nop
 8045038:	3708      	adds	r7, #8
 804503a:	46bd      	mov	sp, r7
 804503c:	bd80      	pop	{r7, pc}
 804503e:	bf00      	nop
 8045040:	20018348 	.word	0x20018348

08045044 <RadioOnDioIrq>:

void RadioOnDioIrq( void* context )
{
 8045044:	b480      	push	{r7}
 8045046:	b083      	sub	sp, #12
 8045048:	af00      	add	r7, sp, #0
 804504a:	6078      	str	r0, [r7, #4]
    IrqFired = true;
 804504c:	4b04      	ldr	r3, [pc, #16]	; (8045060 <RadioOnDioIrq+0x1c>)
 804504e:	2201      	movs	r2, #1
 8045050:	701a      	strb	r2, [r3, #0]
}
 8045052:	bf00      	nop
 8045054:	370c      	adds	r7, #12
 8045056:	46bd      	mov	sp, r7
 8045058:	f85d 7b04 	ldr.w	r7, [sp], #4
 804505c:	4770      	bx	lr
 804505e:	bf00      	nop
 8045060:	20018341 	.word	0x20018341

08045064 <lr1110_system_irq_process>:
 * \param [out] irq  Pointer to the interrupt field returned to the caller
 *
 * \see lr1110_system_get_status, lr1110_system_clear_irq
 */
static void lr1110_system_irq_process( const void* radio, uint32_t* irq )
{
 8045064:	b580      	push	{r7, lr}
 8045066:	b084      	sub	sp, #16
 8045068:	af00      	add	r7, sp, #0
 804506a:	6078      	str	r0, [r7, #4]
 804506c:	6039      	str	r1, [r7, #0]
    lr1110_system_stat1_t stat1;
    lr1110_system_stat2_t stat2;

    lr1110_hal_operating_mode_t op_mode = lr1110_hal_get_operating_mode( radio );
 804506e:	6878      	ldr	r0, [r7, #4]
 8045070:	f7ff f88e 	bl	8044190 <lr1110_hal_get_operating_mode>
 8045074:	4603      	mov	r3, r0
 8045076:	73fb      	strb	r3, [r7, #15]

    lr1110_system_get_status( radio, &stat1, &stat2, irq );
 8045078:	f107 0208 	add.w	r2, r7, #8
 804507c:	f107 010c 	add.w	r1, r7, #12
 8045080:	683b      	ldr	r3, [r7, #0]
 8045082:	6878      	ldr	r0, [r7, #4]
 8045084:	f001 fb6d 	bl	8046762 <lr1110_system_get_status>
    lr1110_system_clear_irq_status( radio, *irq );
 8045088:	683b      	ldr	r3, [r7, #0]
 804508a:	681b      	ldr	r3, [r3, #0]
 804508c:	4619      	mov	r1, r3
 804508e:	6878      	ldr	r0, [r7, #4]
 8045090:	f001 fcc6 	bl	8046a20 <lr1110_system_clear_irq_status>

    if( ( ( *irq & LR1110_SYSTEM_IRQ_TX_DONE ) != 0 ) || ( ( *irq & LR1110_SYSTEM_IRQ_CAD_DONE ) != 0 ) ||
 8045094:	683b      	ldr	r3, [r7, #0]
 8045096:	681b      	ldr	r3, [r3, #0]
 8045098:	f003 0304 	and.w	r3, r3, #4
 804509c:	2b00      	cmp	r3, #0
 804509e:	d10b      	bne.n	80450b8 <lr1110_system_irq_process+0x54>
 80450a0:	683b      	ldr	r3, [r7, #0]
 80450a2:	681b      	ldr	r3, [r3, #0]
 80450a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80450a8:	2b00      	cmp	r3, #0
 80450aa:	d105      	bne.n	80450b8 <lr1110_system_irq_process+0x54>
        ( ( *irq & LR1110_SYSTEM_IRQ_TIMEOUT ) != 0 ) )
 80450ac:	683b      	ldr	r3, [r7, #0]
 80450ae:	681b      	ldr	r3, [r3, #0]
 80450b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    if( ( ( *irq & LR1110_SYSTEM_IRQ_TX_DONE ) != 0 ) || ( ( *irq & LR1110_SYSTEM_IRQ_CAD_DONE ) != 0 ) ||
 80450b4:	2b00      	cmp	r3, #0
 80450b6:	d003      	beq.n	80450c0 <lr1110_system_irq_process+0x5c>
    {
        lr1110_hal_set_operating_mode( radio, LR1110_HAL_OP_MODE_STDBY_RC );
 80450b8:	2101      	movs	r1, #1
 80450ba:	6878      	ldr	r0, [r7, #4]
 80450bc:	f7ff f875 	bl	80441aa <lr1110_hal_set_operating_mode>
    }

    if( ( ( *irq & LR1110_SYSTEM_IRQ_HEADER_ERROR ) != 0 ) || ( ( *irq & LR1110_SYSTEM_IRQ_RX_DONE ) != 0 ) ||
 80450c0:	683b      	ldr	r3, [r7, #0]
 80450c2:	681b      	ldr	r3, [r3, #0]
 80450c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80450c8:	2b00      	cmp	r3, #0
 80450ca:	d10b      	bne.n	80450e4 <lr1110_system_irq_process+0x80>
 80450cc:	683b      	ldr	r3, [r7, #0]
 80450ce:	681b      	ldr	r3, [r3, #0]
 80450d0:	f003 0308 	and.w	r3, r3, #8
 80450d4:	2b00      	cmp	r3, #0
 80450d6:	d105      	bne.n	80450e4 <lr1110_system_irq_process+0x80>
        ( ( *irq & LR1110_SYSTEM_IRQ_CRC_ERROR ) != 0 ) )
 80450d8:	683b      	ldr	r3, [r7, #0]
 80450da:	681b      	ldr	r3, [r3, #0]
 80450dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
    if( ( ( *irq & LR1110_SYSTEM_IRQ_HEADER_ERROR ) != 0 ) || ( ( *irq & LR1110_SYSTEM_IRQ_RX_DONE ) != 0 ) ||
 80450e0:	2b00      	cmp	r3, #0
 80450e2:	d006      	beq.n	80450f2 <lr1110_system_irq_process+0x8e>
    {
        if( op_mode != LR1110_HAL_OP_MODE_RX_C )
 80450e4:	7bfb      	ldrb	r3, [r7, #15]
 80450e6:	2b06      	cmp	r3, #6
 80450e8:	d003      	beq.n	80450f2 <lr1110_system_irq_process+0x8e>
        {
            lr1110_hal_set_operating_mode( radio, LR1110_HAL_OP_MODE_STDBY_RC );
 80450ea:	2101      	movs	r1, #1
 80450ec:	6878      	ldr	r0, [r7, #4]
 80450ee:	f7ff f85c 	bl	80441aa <lr1110_hal_set_operating_mode>
        }
    }
}
 80450f2:	bf00      	nop
 80450f4:	3710      	adds	r7, #16
 80450f6:	46bd      	mov	sp, r7
 80450f8:	bd80      	pop	{r7, pc}
	...

080450fc <RadioIrqProcess>:

void RadioIrqProcess( void )
{
 80450fc:	b590      	push	{r4, r7, lr}
 80450fe:	b085      	sub	sp, #20
 8045100:	af00      	add	r7, sp, #0
    if( IrqFired == true )
 8045102:	4b7e      	ldr	r3, [pc, #504]	; (80452fc <RadioIrqProcess+0x200>)
 8045104:	781b      	ldrb	r3, [r3, #0]
 8045106:	2b00      	cmp	r3, #0
 8045108:	f000 80f3 	beq.w	80452f2 <RadioIrqProcess+0x1f6>
    {
        CRITICAL_SECTION_BEGIN( );
 804510c:	f107 030c 	add.w	r3, r7, #12
 8045110:	4618      	mov	r0, r3
 8045112:	f000 f903 	bl	804531c <BoardCriticalSectionBegin>
        // Clear IRQ flag
        IrqFired = false;
 8045116:	4b79      	ldr	r3, [pc, #484]	; (80452fc <RadioIrqProcess+0x200>)
 8045118:	2200      	movs	r2, #0
 804511a:	701a      	strb	r2, [r3, #0]
        CRITICAL_SECTION_END( );
 804511c:	f107 030c 	add.w	r3, r7, #12
 8045120:	4618      	mov	r0, r3
 8045122:	f000 f90d 	bl	8045340 <BoardCriticalSectionEnd>

        uint32_t irqRegs;
        // Get Status
        lr1110_system_irq_process( &LR1110, &irqRegs );
 8045126:	f107 0308 	add.w	r3, r7, #8
 804512a:	4619      	mov	r1, r3
 804512c:	4874      	ldr	r0, [pc, #464]	; (8045300 <RadioIrqProcess+0x204>)
 804512e:	f7ff ff99 	bl	8045064 <lr1110_system_irq_process>

        if( ( irqRegs & LR1110_SYSTEM_IRQ_TX_DONE ) == LR1110_SYSTEM_IRQ_TX_DONE )
 8045132:	68bb      	ldr	r3, [r7, #8]
 8045134:	f003 0304 	and.w	r3, r3, #4
 8045138:	2b00      	cmp	r3, #0
 804513a:	d00f      	beq.n	804515c <RadioIrqProcess+0x60>
        {
            TimerStop( &TxTimeoutTimer );
 804513c:	4871      	ldr	r0, [pc, #452]	; (8045304 <RadioIrqProcess+0x208>)
 804513e:	f7fe f885 	bl	804324c <TimerStop>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8045142:	4b71      	ldr	r3, [pc, #452]	; (8045308 <RadioIrqProcess+0x20c>)
 8045144:	681b      	ldr	r3, [r3, #0]
 8045146:	2b00      	cmp	r3, #0
 8045148:	d008      	beq.n	804515c <RadioIrqProcess+0x60>
 804514a:	4b6f      	ldr	r3, [pc, #444]	; (8045308 <RadioIrqProcess+0x20c>)
 804514c:	681b      	ldr	r3, [r3, #0]
 804514e:	681b      	ldr	r3, [r3, #0]
 8045150:	2b00      	cmp	r3, #0
 8045152:	d003      	beq.n	804515c <RadioIrqProcess+0x60>
            {
                RadioEvents->TxDone( );
 8045154:	4b6c      	ldr	r3, [pc, #432]	; (8045308 <RadioIrqProcess+0x20c>)
 8045156:	681b      	ldr	r3, [r3, #0]
 8045158:	681b      	ldr	r3, [r3, #0]
 804515a:	4798      	blx	r3
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_RX_DONE ) == LR1110_SYSTEM_IRQ_RX_DONE )
 804515c:	68bb      	ldr	r3, [r7, #8]
 804515e:	f003 0308 	and.w	r3, r3, #8
 8045162:	2b00      	cmp	r3, #0
 8045164:	d04a      	beq.n	80451fc <RadioIrqProcess+0x100>
        {
            lr1110_radio_pkt_type_t    packet_type;
            lr1110_radio_rx_buffer_status_t rxbuffer_status;

            TimerStop( &RxTimeoutTimer );
 8045166:	4869      	ldr	r0, [pc, #420]	; (804530c <RadioIrqProcess+0x210>)
 8045168:	f7fe f870 	bl	804324c <TimerStop>

            lr1110_radio_get_rx_buffer_status( &LR1110, &rxbuffer_status );
 804516c:	1d3b      	adds	r3, r7, #4
 804516e:	4619      	mov	r1, r3
 8045170:	4863      	ldr	r0, [pc, #396]	; (8045300 <RadioIrqProcess+0x204>)
 8045172:	f000 fe03 	bl	8045d7c <lr1110_radio_get_rx_buffer_status>
            lr1110_regmem_read_buffer8( &LR1110, RadioRxPayload, rxbuffer_status.buffer_start_pointer,
 8045176:	797a      	ldrb	r2, [r7, #5]
 8045178:	793b      	ldrb	r3, [r7, #4]
 804517a:	4965      	ldr	r1, [pc, #404]	; (8045310 <RadioIrqProcess+0x214>)
 804517c:	4860      	ldr	r0, [pc, #384]	; (8045300 <RadioIrqProcess+0x204>)
 804517e:	f001 fa7b 	bl	8046678 <lr1110_regmem_read_buffer8>
                                        rxbuffer_status.pld_len_in_bytes );

            lr1110_radio_get_pkt_type( &LR1110, &packet_type );
 8045182:	1dfb      	adds	r3, r7, #7
 8045184:	4619      	mov	r1, r3
 8045186:	485e      	ldr	r0, [pc, #376]	; (8045300 <RadioIrqProcess+0x204>)
 8045188:	f000 fdd6 	bl	8045d38 <lr1110_radio_get_pkt_type>
            if( packet_type == LR1110_RADIO_PKT_TYPE_LORA )
 804518c:	79fb      	ldrb	r3, [r7, #7]
 804518e:	2b02      	cmp	r3, #2
 8045190:	d11b      	bne.n	80451ca <RadioIrqProcess+0xce>
            {
                lr1110_radio_get_lora_pkt_status( &LR1110, &lora_packet_status );
 8045192:	4960      	ldr	r1, [pc, #384]	; (8045314 <RadioIrqProcess+0x218>)
 8045194:	485a      	ldr	r0, [pc, #360]	; (8045300 <RadioIrqProcess+0x204>)
 8045196:	f000 fe8d 	bl	8045eb4 <lr1110_radio_get_lora_pkt_status>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 804519a:	4b5b      	ldr	r3, [pc, #364]	; (8045308 <RadioIrqProcess+0x20c>)
 804519c:	681b      	ldr	r3, [r3, #0]
 804519e:	2b00      	cmp	r3, #0
 80451a0:	d02c      	beq.n	80451fc <RadioIrqProcess+0x100>
 80451a2:	4b59      	ldr	r3, [pc, #356]	; (8045308 <RadioIrqProcess+0x20c>)
 80451a4:	681b      	ldr	r3, [r3, #0]
 80451a6:	689b      	ldr	r3, [r3, #8]
 80451a8:	2b00      	cmp	r3, #0
 80451aa:	d027      	beq.n	80451fc <RadioIrqProcess+0x100>
                {
                    RadioEvents->RxDone( RadioRxPayload, rxbuffer_status.pld_len_in_bytes,
 80451ac:	4b56      	ldr	r3, [pc, #344]	; (8045308 <RadioIrqProcess+0x20c>)
 80451ae:	681b      	ldr	r3, [r3, #0]
 80451b0:	689c      	ldr	r4, [r3, #8]
 80451b2:	793b      	ldrb	r3, [r7, #4]
 80451b4:	b299      	uxth	r1, r3
                                         lora_packet_status.rssi_pkt_in_dbm, lora_packet_status.snr_pkt_in_db);
 80451b6:	4b57      	ldr	r3, [pc, #348]	; (8045314 <RadioIrqProcess+0x218>)
 80451b8:	f993 3000 	ldrsb.w	r3, [r3]
                    RadioEvents->RxDone( RadioRxPayload, rxbuffer_status.pld_len_in_bytes,
 80451bc:	b21a      	sxth	r2, r3
 80451be:	4b55      	ldr	r3, [pc, #340]	; (8045314 <RadioIrqProcess+0x218>)
 80451c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80451c4:	4852      	ldr	r0, [pc, #328]	; (8045310 <RadioIrqProcess+0x214>)
 80451c6:	47a0      	blx	r4
 80451c8:	e018      	b.n	80451fc <RadioIrqProcess+0x100>
                }
            }
            else
            {
                lr1110_radio_get_gfsk_pkt_status( &LR1110, &gfsk_packet_status );
 80451ca:	4953      	ldr	r1, [pc, #332]	; (8045318 <RadioIrqProcess+0x21c>)
 80451cc:	484c      	ldr	r0, [pc, #304]	; (8045300 <RadioIrqProcess+0x204>)
 80451ce:	f000 fdfc 	bl	8045dca <lr1110_radio_get_gfsk_pkt_status>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80451d2:	4b4d      	ldr	r3, [pc, #308]	; (8045308 <RadioIrqProcess+0x20c>)
 80451d4:	681b      	ldr	r3, [r3, #0]
 80451d6:	2b00      	cmp	r3, #0
 80451d8:	d010      	beq.n	80451fc <RadioIrqProcess+0x100>
 80451da:	4b4b      	ldr	r3, [pc, #300]	; (8045308 <RadioIrqProcess+0x20c>)
 80451dc:	681b      	ldr	r3, [r3, #0]
 80451de:	689b      	ldr	r3, [r3, #8]
 80451e0:	2b00      	cmp	r3, #0
 80451e2:	d00b      	beq.n	80451fc <RadioIrqProcess+0x100>
                {
                    RadioEvents->RxDone( RadioRxPayload, rxbuffer_status.pld_len_in_bytes,
 80451e4:	4b48      	ldr	r3, [pc, #288]	; (8045308 <RadioIrqProcess+0x20c>)
 80451e6:	681b      	ldr	r3, [r3, #0]
 80451e8:	689c      	ldr	r4, [r3, #8]
 80451ea:	793b      	ldrb	r3, [r7, #4]
 80451ec:	b299      	uxth	r1, r3
                                         gfsk_packet_status.rssi_avg_in_dbm, 0 );
 80451ee:	4b4a      	ldr	r3, [pc, #296]	; (8045318 <RadioIrqProcess+0x21c>)
 80451f0:	f993 3001 	ldrsb.w	r3, [r3, #1]
                    RadioEvents->RxDone( RadioRxPayload, rxbuffer_status.pld_len_in_bytes,
 80451f4:	b21a      	sxth	r2, r3
 80451f6:	2300      	movs	r3, #0
 80451f8:	4845      	ldr	r0, [pc, #276]	; (8045310 <RadioIrqProcess+0x214>)
 80451fa:	47a0      	blx	r4
                }
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_CRC_ERROR ) == LR1110_SYSTEM_IRQ_CRC_ERROR )
 80451fc:	68bb      	ldr	r3, [r7, #8]
 80451fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045202:	2b00      	cmp	r3, #0
 8045204:	d00c      	beq.n	8045220 <RadioIrqProcess+0x124>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8045206:	4b40      	ldr	r3, [pc, #256]	; (8045308 <RadioIrqProcess+0x20c>)
 8045208:	681b      	ldr	r3, [r3, #0]
 804520a:	2b00      	cmp	r3, #0
 804520c:	d008      	beq.n	8045220 <RadioIrqProcess+0x124>
 804520e:	4b3e      	ldr	r3, [pc, #248]	; (8045308 <RadioIrqProcess+0x20c>)
 8045210:	681b      	ldr	r3, [r3, #0]
 8045212:	691b      	ldr	r3, [r3, #16]
 8045214:	2b00      	cmp	r3, #0
 8045216:	d003      	beq.n	8045220 <RadioIrqProcess+0x124>
            {
                RadioEvents->RxError( );
 8045218:	4b3b      	ldr	r3, [pc, #236]	; (8045308 <RadioIrqProcess+0x20c>)
 804521a:	681b      	ldr	r3, [r3, #0]
 804521c:	691b      	ldr	r3, [r3, #16]
 804521e:	4798      	blx	r3
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_CAD_DONE) == LR1110_SYSTEM_IRQ_CAD_DONE )
 8045220:	68bb      	ldr	r3, [r7, #8]
 8045222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8045226:	2b00      	cmp	r3, #0
 8045228:	d015      	beq.n	8045256 <RadioIrqProcess+0x15a>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 804522a:	4b37      	ldr	r3, [pc, #220]	; (8045308 <RadioIrqProcess+0x20c>)
 804522c:	681b      	ldr	r3, [r3, #0]
 804522e:	2b00      	cmp	r3, #0
 8045230:	d011      	beq.n	8045256 <RadioIrqProcess+0x15a>
 8045232:	4b35      	ldr	r3, [pc, #212]	; (8045308 <RadioIrqProcess+0x20c>)
 8045234:	681b      	ldr	r3, [r3, #0]
 8045236:	699b      	ldr	r3, [r3, #24]
 8045238:	2b00      	cmp	r3, #0
 804523a:	d00c      	beq.n	8045256 <RadioIrqProcess+0x15a>
            {
                RadioEvents->CadDone(
 804523c:	4b32      	ldr	r3, [pc, #200]	; (8045308 <RadioIrqProcess+0x20c>)
 804523e:	681b      	ldr	r3, [r3, #0]
 8045240:	699b      	ldr	r3, [r3, #24]
                    ( ( irqRegs & LR1110_SYSTEM_IRQ_CAD_DETECTED) == LR1110_SYSTEM_IRQ_CAD_DETECTED ) );
 8045242:	68ba      	ldr	r2, [r7, #8]
 8045244:	f402 7200 	and.w	r2, r2, #512	; 0x200
                RadioEvents->CadDone(
 8045248:	2a00      	cmp	r2, #0
 804524a:	bf14      	ite	ne
 804524c:	2201      	movne	r2, #1
 804524e:	2200      	moveq	r2, #0
 8045250:	b2d2      	uxtb	r2, r2
 8045252:	4610      	mov	r0, r2
 8045254:	4798      	blx	r3
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_TIMEOUT ) == LR1110_SYSTEM_IRQ_TIMEOUT )
 8045256:	68bb      	ldr	r3, [r7, #8]
 8045258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804525c:	2b00      	cmp	r3, #0
 804525e:	d00f      	beq.n	8045280 <RadioIrqProcess+0x184>
        {
            TimerStop( &RxTimeoutTimer );
 8045260:	482a      	ldr	r0, [pc, #168]	; (804530c <RadioIrqProcess+0x210>)
 8045262:	f7fd fff3 	bl	804324c <TimerStop>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8045266:	4b28      	ldr	r3, [pc, #160]	; (8045308 <RadioIrqProcess+0x20c>)
 8045268:	681b      	ldr	r3, [r3, #0]
 804526a:	2b00      	cmp	r3, #0
 804526c:	d008      	beq.n	8045280 <RadioIrqProcess+0x184>
 804526e:	4b26      	ldr	r3, [pc, #152]	; (8045308 <RadioIrqProcess+0x20c>)
 8045270:	681b      	ldr	r3, [r3, #0]
 8045272:	68db      	ldr	r3, [r3, #12]
 8045274:	2b00      	cmp	r3, #0
 8045276:	d003      	beq.n	8045280 <RadioIrqProcess+0x184>
            {
                RadioEvents->RxTimeout( );
 8045278:	4b23      	ldr	r3, [pc, #140]	; (8045308 <RadioIrqProcess+0x20c>)
 804527a:	681b      	ldr	r3, [r3, #0]
 804527c:	68db      	ldr	r3, [r3, #12]
 804527e:	4798      	blx	r3
        if( ( irqRegs & LR1110_SYSTEM_IRQ_SYNC_WORD_HEADER_VALID ) == LR1110_SYSTEM_IRQ_SYNC_WORD_HEADER_VALID )
        {
            //__NOP( );
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_HEADER_ERROR) == LR1110_SYSTEM_IRQ_HEADER_ERROR )
 8045280:	68bb      	ldr	r3, [r7, #8]
 8045282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045286:	2b00      	cmp	r3, #0
 8045288:	d00f      	beq.n	80452aa <RadioIrqProcess+0x1ae>
        {
            TimerStop( &RxTimeoutTimer );
 804528a:	4820      	ldr	r0, [pc, #128]	; (804530c <RadioIrqProcess+0x210>)
 804528c:	f7fd ffde 	bl	804324c <TimerStop>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8045290:	4b1d      	ldr	r3, [pc, #116]	; (8045308 <RadioIrqProcess+0x20c>)
 8045292:	681b      	ldr	r3, [r3, #0]
 8045294:	2b00      	cmp	r3, #0
 8045296:	d008      	beq.n	80452aa <RadioIrqProcess+0x1ae>
 8045298:	4b1b      	ldr	r3, [pc, #108]	; (8045308 <RadioIrqProcess+0x20c>)
 804529a:	681b      	ldr	r3, [r3, #0]
 804529c:	68db      	ldr	r3, [r3, #12]
 804529e:	2b00      	cmp	r3, #0
 80452a0:	d003      	beq.n	80452aa <RadioIrqProcess+0x1ae>
            {
                RadioEvents->RxTimeout( );
 80452a2:	4b19      	ldr	r3, [pc, #100]	; (8045308 <RadioIrqProcess+0x20c>)
 80452a4:	681b      	ldr	r3, [r3, #0]
 80452a6:	68db      	ldr	r3, [r3, #12]
 80452a8:	4798      	blx	r3
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_GNSS_SCAN_DONE) == LR1110_SYSTEM_IRQ_GNSS_SCAN_DONE )
 80452aa:	68bb      	ldr	r3, [r7, #8]
 80452ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80452b0:	2b00      	cmp	r3, #0
 80452b2:	d00c      	beq.n	80452ce <RadioIrqProcess+0x1d2>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->GnssDone != NULL ) )
 80452b4:	4b14      	ldr	r3, [pc, #80]	; (8045308 <RadioIrqProcess+0x20c>)
 80452b6:	681b      	ldr	r3, [r3, #0]
 80452b8:	2b00      	cmp	r3, #0
 80452ba:	d008      	beq.n	80452ce <RadioIrqProcess+0x1d2>
 80452bc:	4b12      	ldr	r3, [pc, #72]	; (8045308 <RadioIrqProcess+0x20c>)
 80452be:	681b      	ldr	r3, [r3, #0]
 80452c0:	69db      	ldr	r3, [r3, #28]
 80452c2:	2b00      	cmp	r3, #0
 80452c4:	d003      	beq.n	80452ce <RadioIrqProcess+0x1d2>
            {
                RadioEvents->GnssDone( );
 80452c6:	4b10      	ldr	r3, [pc, #64]	; (8045308 <RadioIrqProcess+0x20c>)
 80452c8:	681b      	ldr	r3, [r3, #0]
 80452ca:	69db      	ldr	r3, [r3, #28]
 80452cc:	4798      	blx	r3
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_WIFI_SCAN_DONE ) == LR1110_SYSTEM_IRQ_WIFI_SCAN_DONE )
 80452ce:	68bb      	ldr	r3, [r7, #8]
 80452d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80452d4:	2b00      	cmp	r3, #0
 80452d6:	d00c      	beq.n	80452f2 <RadioIrqProcess+0x1f6>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->WifiDone != NULL ) )
 80452d8:	4b0b      	ldr	r3, [pc, #44]	; (8045308 <RadioIrqProcess+0x20c>)
 80452da:	681b      	ldr	r3, [r3, #0]
 80452dc:	2b00      	cmp	r3, #0
 80452de:	d008      	beq.n	80452f2 <RadioIrqProcess+0x1f6>
 80452e0:	4b09      	ldr	r3, [pc, #36]	; (8045308 <RadioIrqProcess+0x20c>)
 80452e2:	681b      	ldr	r3, [r3, #0]
 80452e4:	6a1b      	ldr	r3, [r3, #32]
 80452e6:	2b00      	cmp	r3, #0
 80452e8:	d003      	beq.n	80452f2 <RadioIrqProcess+0x1f6>
            {
                RadioEvents->WifiDone( );
 80452ea:	4b07      	ldr	r3, [pc, #28]	; (8045308 <RadioIrqProcess+0x20c>)
 80452ec:	681b      	ldr	r3, [r3, #0]
 80452ee:	6a1b      	ldr	r3, [r3, #32]
 80452f0:	4798      	blx	r3
            }
        }
    }
}
 80452f2:	bf00      	nop
 80452f4:	3714      	adds	r7, #20
 80452f6:	46bd      	mov	sp, r7
 80452f8:	bd90      	pop	{r4, r7, pc}
 80452fa:	bf00      	nop
 80452fc:	20018341 	.word	0x20018341
 8045300:	200195d0 	.word	0x200195d0
 8045304:	2001968c 	.word	0x2001968c
 8045308:	20018348 	.word	0x20018348
 804530c:	200197b0 	.word	0x200197b0
 8045310:	200196b0 	.word	0x200196b0
 8045314:	200195cc 	.word	0x200195cc
 8045318:	200196a4 	.word	0x200196a4

0804531c <BoardCriticalSectionBegin>:

/**
  * @}
  */
void BoardCriticalSectionBegin( uint32_t *mask )
{
 804531c:	b480      	push	{r7}
 804531e:	b085      	sub	sp, #20
 8045320:	af00      	add	r7, sp, #0
 8045322:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8045324:	f3ef 8310 	mrs	r3, PRIMASK
 8045328:	60fb      	str	r3, [r7, #12]
  return(result);
 804532a:	68fa      	ldr	r2, [r7, #12]
    *mask = __get_PRIMASK( );
 804532c:	687b      	ldr	r3, [r7, #4]
 804532e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8045330:	b672      	cpsid	i
}
 8045332:	bf00      	nop
    __disable_irq( );
}
 8045334:	bf00      	nop
 8045336:	3714      	adds	r7, #20
 8045338:	46bd      	mov	sp, r7
 804533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804533e:	4770      	bx	lr

08045340 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd( uint32_t *mask )
{
 8045340:	b480      	push	{r7}
 8045342:	b085      	sub	sp, #20
 8045344:	af00      	add	r7, sp, #0
 8045346:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( *mask );
 8045348:	687b      	ldr	r3, [r7, #4]
 804534a:	681b      	ldr	r3, [r3, #0]
 804534c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804534e:	68fb      	ldr	r3, [r7, #12]
 8045350:	f383 8810 	msr	PRIMASK, r3
}
 8045354:	bf00      	nop
}
 8045356:	bf00      	nop
 8045358:	3714      	adds	r7, #20
 804535a:	46bd      	mov	sp, r7
 804535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045360:	4770      	bx	lr
	...

08045364 <BSP_I2C1_Init>:
/**
  * @brief  Initialize BSP I2C1.
  * @retval BSP status.
  */
int32_t BSP_I2C1_Init()
{
 8045364:	b580      	push	{r7, lr}
 8045366:	b082      	sub	sp, #8
 8045368:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 804536a:	2300      	movs	r3, #0
 804536c:	607b      	str	r3, [r7, #4]

  if(&hi2c1 != NULL)
  {
	 hbus_i2c1 = hi2c1;
 804536e:	4a20      	ldr	r2, [pc, #128]	; (80453f0 <BSP_I2C1_Init+0x8c>)
 8045370:	4b20      	ldr	r3, [pc, #128]	; (80453f4 <BSP_I2C1_Init+0x90>)
 8045372:	4610      	mov	r0, r2
 8045374:	4619      	mov	r1, r3
 8045376:	237c      	movs	r3, #124	; 0x7c
 8045378:	461a      	mov	r2, r3
 804537a:	f009 f9f1 	bl	804e760 <memcpy>
  else
  {
	  hbus_i2c1.Instance = BUS_I2C1;
  }

  if (I2c1InitCounter == 0U)
 804537e:	4b1e      	ldr	r3, [pc, #120]	; (80453f8 <BSP_I2C1_Init+0x94>)
 8045380:	681b      	ldr	r3, [r3, #0]
 8045382:	2b00      	cmp	r3, #0
 8045384:	d125      	bne.n	80453d2 <BSP_I2C1_Init+0x6e>
  {
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
 8045386:	481a      	ldr	r0, [pc, #104]	; (80453f0 <BSP_I2C1_Init+0x8c>)
 8045388:	f004 fa8f 	bl	80498aa <HAL_I2C_GetState>
 804538c:	4603      	mov	r3, r0
 804538e:	2b00      	cmp	r3, #0
 8045390:	d11f      	bne.n	80453d2 <BSP_I2C1_Init+0x6e>
      if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(SystemCoreClock, BUS_I2C1_FREQUENCY)) != HAL_OK)
      {
        status = BSP_ERROR_BUS_FAILURE;
      }
#else
      if (Bus_IsI2c1MspCbValid == 0U)
 8045392:	4b1a      	ldr	r3, [pc, #104]	; (80453fc <BSP_I2C1_Init+0x98>)
 8045394:	681b      	ldr	r3, [r3, #0]
 8045396:	2b00      	cmp	r3, #0
 8045398:	d107      	bne.n	80453aa <BSP_I2C1_Init+0x46>
      {
        if (BSP_I2C1_RegisterDefaultMspCallbacks() != BSP_ERROR_NONE)
 804539a:	f000 f865 	bl	8045468 <BSP_I2C1_RegisterDefaultMspCallbacks>
 804539e:	4603      	mov	r3, r0
 80453a0:	2b00      	cmp	r3, #0
 80453a2:	d002      	beq.n	80453aa <BSP_I2C1_Init+0x46>
        {
          status = BSP_ERROR_MSP_FAILURE;
 80453a4:	f06f 0309 	mvn.w	r3, #9
 80453a8:	607b      	str	r3, [r7, #4]
        }
      }

      if (status == BSP_ERROR_NONE)
 80453aa:	687b      	ldr	r3, [r7, #4]
 80453ac:	2b00      	cmp	r3, #0
 80453ae:	d110      	bne.n	80453d2 <BSP_I2C1_Init+0x6e>
      {
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(SystemCoreClock, BUS_I2C1_FREQUENCY)) != HAL_OK)
 80453b0:	4b13      	ldr	r3, [pc, #76]	; (8045400 <BSP_I2C1_Init+0x9c>)
 80453b2:	681b      	ldr	r3, [r3, #0]
 80453b4:	4913      	ldr	r1, [pc, #76]	; (8045404 <BSP_I2C1_Init+0xa0>)
 80453b6:	4618      	mov	r0, r3
 80453b8:	f000 f9b2 	bl	8045720 <I2C_GetTiming>
 80453bc:	4603      	mov	r3, r0
 80453be:	4619      	mov	r1, r3
 80453c0:	480b      	ldr	r0, [pc, #44]	; (80453f0 <BSP_I2C1_Init+0x8c>)
 80453c2:	f7fc fa89 	bl	80418d8 <MX_I2C1_Init>
 80453c6:	4603      	mov	r3, r0
 80453c8:	2b00      	cmp	r3, #0
 80453ca:	d002      	beq.n	80453d2 <BSP_I2C1_Init+0x6e>
        {
          status = BSP_ERROR_BUS_FAILURE;
 80453cc:	f06f 0307 	mvn.w	r3, #7
 80453d0:	607b      	str	r3, [r7, #4]
        }
      }
#endif
    }
  }
  if (I2c1InitCounter < 0xFFFFFFFFU)
 80453d2:	4b09      	ldr	r3, [pc, #36]	; (80453f8 <BSP_I2C1_Init+0x94>)
 80453d4:	681b      	ldr	r3, [r3, #0]
 80453d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80453da:	d004      	beq.n	80453e6 <BSP_I2C1_Init+0x82>
  {
    I2c1InitCounter++;
 80453dc:	4b06      	ldr	r3, [pc, #24]	; (80453f8 <BSP_I2C1_Init+0x94>)
 80453de:	681b      	ldr	r3, [r3, #0]
 80453e0:	3301      	adds	r3, #1
 80453e2:	4a05      	ldr	r2, [pc, #20]	; (80453f8 <BSP_I2C1_Init+0x94>)
 80453e4:	6013      	str	r3, [r2, #0]
  }
  return status;
 80453e6:	687b      	ldr	r3, [r7, #4]
}
 80453e8:	4618      	mov	r0, r3
 80453ea:	3708      	adds	r7, #8
 80453ec:	46bd      	mov	sp, r7
 80453ee:	bd80      	pop	{r7, pc}
 80453f0:	20018d58 	.word	0x20018d58
 80453f4:	20018f68 	.word	0x20018f68
 80453f8:	2001834c 	.word	0x2001834c
 80453fc:	20018350 	.word	0x20018350
 8045400:	20018024 	.word	0x20018024
 8045404:	000186a0 	.word	0x000186a0

08045408 <BSP_I2C1_WriteReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status.
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8045408:	b580      	push	{r7, lr}
 804540a:	b086      	sub	sp, #24
 804540c:	af02      	add	r7, sp, #8
 804540e:	60ba      	str	r2, [r7, #8]
 8045410:	461a      	mov	r2, r3
 8045412:	4603      	mov	r3, r0
 8045414:	81fb      	strh	r3, [r7, #14]
 8045416:	460b      	mov	r3, r1
 8045418:	81bb      	strh	r3, [r7, #12]
 804541a:	4613      	mov	r3, r2
 804541c:	80fb      	strh	r3, [r7, #6]
  return I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 804541e:	89b9      	ldrh	r1, [r7, #12]
 8045420:	89f8      	ldrh	r0, [r7, #14]
 8045422:	88fb      	ldrh	r3, [r7, #6]
 8045424:	9300      	str	r3, [sp, #0]
 8045426:	68bb      	ldr	r3, [r7, #8]
 8045428:	2201      	movs	r2, #1
 804542a:	f000 f8d1 	bl	80455d0 <I2C1_WriteReg>
 804542e:	4603      	mov	r3, r0
}
 8045430:	4618      	mov	r0, r3
 8045432:	3710      	adds	r7, #16
 8045434:	46bd      	mov	sp, r7
 8045436:	bd80      	pop	{r7, pc}

08045438 <BSP_I2C1_ReadReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8045438:	b580      	push	{r7, lr}
 804543a:	b086      	sub	sp, #24
 804543c:	af02      	add	r7, sp, #8
 804543e:	60ba      	str	r2, [r7, #8]
 8045440:	461a      	mov	r2, r3
 8045442:	4603      	mov	r3, r0
 8045444:	81fb      	strh	r3, [r7, #14]
 8045446:	460b      	mov	r3, r1
 8045448:	81bb      	strh	r3, [r7, #12]
 804544a:	4613      	mov	r3, r2
 804544c:	80fb      	strh	r3, [r7, #6]
  return I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 804544e:	89b9      	ldrh	r1, [r7, #12]
 8045450:	89f8      	ldrh	r0, [r7, #14]
 8045452:	88fb      	ldrh	r3, [r7, #6]
 8045454:	9300      	str	r3, [sp, #0]
 8045456:	68bb      	ldr	r3, [r7, #8]
 8045458:	2201      	movs	r2, #1
 804545a:	f000 f90d 	bl	8045678 <I2C1_ReadReg>
 804545e:	4603      	mov	r3, r0
}
 8045460:	4618      	mov	r0, r3
 8045462:	3710      	adds	r7, #16
 8045464:	46bd      	mov	sp, r7
 8045466:	bd80      	pop	{r7, pc}

08045468 <BSP_I2C1_RegisterDefaultMspCallbacks>:
/**
  * @brief  Register Default I2C1 Bus Msp Callbacks
  * @retval BSP status
  */
int32_t BSP_I2C1_RegisterDefaultMspCallbacks(void)
{
 8045468:	b580      	push	{r7, lr}
 804546a:	b082      	sub	sp, #8
 804546c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 804546e:	2300      	movs	r3, #0
 8045470:	607b      	str	r3, [r7, #4]

  __HAL_I2C_RESET_HANDLE_STATE(&hbus_i2c1);
 8045472:	4b15      	ldr	r3, [pc, #84]	; (80454c8 <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 8045474:	2200      	movs	r2, #0
 8045476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 804547a:	4b13      	ldr	r3, [pc, #76]	; (80454c8 <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 804547c:	2200      	movs	r2, #0
 804547e:	675a      	str	r2, [r3, #116]	; 0x74
 8045480:	4b11      	ldr	r3, [pc, #68]	; (80454c8 <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 8045482:	2200      	movs	r2, #0
 8045484:	679a      	str	r2, [r3, #120]	; 0x78

  /* Register default MspInit/MspDeInit Callback */
  if (HAL_I2C_RegisterCallback(&hbus_i2c1, HAL_I2C_MSPINIT_CB_ID, I2C1_MspInit) != HAL_OK)
 8045486:	4a11      	ldr	r2, [pc, #68]	; (80454cc <BSP_I2C1_RegisterDefaultMspCallbacks+0x64>)
 8045488:	2109      	movs	r1, #9
 804548a:	480f      	ldr	r0, [pc, #60]	; (80454c8 <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 804548c:	f003 fe54 	bl	8049138 <HAL_I2C_RegisterCallback>
 8045490:	4603      	mov	r3, r0
 8045492:	2b00      	cmp	r3, #0
 8045494:	d003      	beq.n	804549e <BSP_I2C1_RegisterDefaultMspCallbacks+0x36>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8045496:	f06f 0303 	mvn.w	r3, #3
 804549a:	607b      	str	r3, [r7, #4]
 804549c:	e00e      	b.n	80454bc <BSP_I2C1_RegisterDefaultMspCallbacks+0x54>
  }
  else if (HAL_I2C_RegisterCallback(&hbus_i2c1, HAL_I2C_MSPDEINIT_CB_ID, I2C1_MspDeInit) != HAL_OK)
 804549e:	4a0c      	ldr	r2, [pc, #48]	; (80454d0 <BSP_I2C1_RegisterDefaultMspCallbacks+0x68>)
 80454a0:	210a      	movs	r1, #10
 80454a2:	4809      	ldr	r0, [pc, #36]	; (80454c8 <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 80454a4:	f003 fe48 	bl	8049138 <HAL_I2C_RegisterCallback>
 80454a8:	4603      	mov	r3, r0
 80454aa:	2b00      	cmp	r3, #0
 80454ac:	d003      	beq.n	80454b6 <BSP_I2C1_RegisterDefaultMspCallbacks+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80454ae:	f06f 0303 	mvn.w	r3, #3
 80454b2:	607b      	str	r3, [r7, #4]
 80454b4:	e002      	b.n	80454bc <BSP_I2C1_RegisterDefaultMspCallbacks+0x54>
  }
  else
  {
    Bus_IsI2c1MspCbValid = 1U;
 80454b6:	4b07      	ldr	r3, [pc, #28]	; (80454d4 <BSP_I2C1_RegisterDefaultMspCallbacks+0x6c>)
 80454b8:	2201      	movs	r2, #1
 80454ba:	601a      	str	r2, [r3, #0]
  }

  /* BSP status */
  return ret;
 80454bc:	687b      	ldr	r3, [r7, #4]
}
 80454be:	4618      	mov	r0, r3
 80454c0:	3708      	adds	r7, #8
 80454c2:	46bd      	mov	sp, r7
 80454c4:	bd80      	pop	{r7, pc}
 80454c6:	bf00      	nop
 80454c8:	20018d58 	.word	0x20018d58
 80454cc:	080454d9 	.word	0x080454d9
 80454d0:	0804558d 	.word	0x0804558d
 80454d4:	20018350 	.word	0x20018350

080454d8 <I2C1_MspInit>:
  * @brief  Initializes I2C1 MSP.
  * @param  hI2c I2C handle.
  * @retval None
  */
static void  I2C1_MspInit(I2C_HandleTypeDef *hI2c)
{
 80454d8:	b580      	push	{r7, lr}
 80454da:	b08a      	sub	sp, #40	; 0x28
 80454dc:	af00      	add	r7, sp, #0
 80454de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable VddIO2 for GPIOG */
  __HAL_RCC_PWR_CLK_ENABLE();
 80454e0:	4b28      	ldr	r3, [pc, #160]	; (8045584 <I2C1_MspInit+0xac>)
 80454e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80454e4:	4a27      	ldr	r2, [pc, #156]	; (8045584 <I2C1_MspInit+0xac>)
 80454e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80454ea:	6593      	str	r3, [r2, #88]	; 0x58
 80454ec:	4b25      	ldr	r3, [pc, #148]	; (8045584 <I2C1_MspInit+0xac>)
 80454ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80454f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80454f4:	613b      	str	r3, [r7, #16]
 80454f6:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 80454f8:	f005 f964 	bl	804a7c4 <HAL_PWREx_EnableVddIO2>
  /* Enable GPIO clock */
  BUS_I2C1_GPIO_CLK_ENABLE();
 80454fc:	4b21      	ldr	r3, [pc, #132]	; (8045584 <I2C1_MspInit+0xac>)
 80454fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8045500:	4a20      	ldr	r2, [pc, #128]	; (8045584 <I2C1_MspInit+0xac>)
 8045502:	f043 0302 	orr.w	r3, r3, #2
 8045506:	64d3      	str	r3, [r2, #76]	; 0x4c
 8045508:	4b1e      	ldr	r3, [pc, #120]	; (8045584 <I2C1_MspInit+0xac>)
 804550a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804550c:	f003 0302 	and.w	r3, r3, #2
 8045510:	60fb      	str	r3, [r7, #12]
 8045512:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C SCL as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SCL_GPIO_PIN;
 8045514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8045518:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 804551a:	2312      	movs	r3, #18
 804551c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 804551e:	2300      	movs	r3, #0
 8045520:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8045522:	2302      	movs	r3, #2
 8045524:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8045526:	2304      	movs	r3, #4
 8045528:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 804552a:	f107 0314 	add.w	r3, r7, #20
 804552e:	4619      	mov	r1, r3
 8045530:	4815      	ldr	r0, [pc, #84]	; (8045588 <I2C1_MspInit+0xb0>)
 8045532:	f003 fa5b 	bl	80489ec <HAL_GPIO_Init>

  /* Configure I2C SDA as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SDA_GPIO_PIN;
 8045536:	f44f 7300 	mov.w	r3, #512	; 0x200
 804553a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_GPIO_AF;
 804553c:	2304      	movs	r3, #4
 804553e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8045540:	f107 0314 	add.w	r3, r7, #20
 8045544:	4619      	mov	r1, r3
 8045546:	4810      	ldr	r0, [pc, #64]	; (8045588 <I2C1_MspInit+0xb0>)
 8045548:	f003 fa50 	bl	80489ec <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C1_CLK_ENABLE();
 804554c:	4b0d      	ldr	r3, [pc, #52]	; (8045584 <I2C1_MspInit+0xac>)
 804554e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8045550:	4a0c      	ldr	r2, [pc, #48]	; (8045584 <I2C1_MspInit+0xac>)
 8045552:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8045556:	6593      	str	r3, [r2, #88]	; 0x58
 8045558:	4b0a      	ldr	r3, [pc, #40]	; (8045584 <I2C1_MspInit+0xac>)
 804555a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804555c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8045560:	60bb      	str	r3, [r7, #8]
 8045562:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C1_FORCE_RESET();
 8045564:	4b07      	ldr	r3, [pc, #28]	; (8045584 <I2C1_MspInit+0xac>)
 8045566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045568:	4a06      	ldr	r2, [pc, #24]	; (8045584 <I2C1_MspInit+0xac>)
 804556a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 804556e:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  BUS_I2C1_RELEASE_RESET();
 8045570:	4b04      	ldr	r3, [pc, #16]	; (8045584 <I2C1_MspInit+0xac>)
 8045572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045574:	4a03      	ldr	r2, [pc, #12]	; (8045584 <I2C1_MspInit+0xac>)
 8045576:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 804557a:	6393      	str	r3, [r2, #56]	; 0x38
}
 804557c:	bf00      	nop
 804557e:	3728      	adds	r7, #40	; 0x28
 8045580:	46bd      	mov	sp, r7
 8045582:	bd80      	pop	{r7, pc}
 8045584:	40021000 	.word	0x40021000
 8045588:	42020400 	.word	0x42020400

0804558c <I2C1_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c I2C handle.
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 804558c:	b580      	push	{r7, lr}
 804558e:	b088      	sub	sp, #32
 8045590:	af00      	add	r7, sp, #0
 8045592:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* De-initialiaze I2C SCL and SDA */
  gpio_init_structure.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8045594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8045598:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin);
 804559a:	68fb      	ldr	r3, [r7, #12]
 804559c:	4619      	mov	r1, r3
 804559e:	480a      	ldr	r0, [pc, #40]	; (80455c8 <I2C1_MspDeInit+0x3c>)
 80455a0:	f003 fba4 	bl	8048cec <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80455a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80455a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80455aa:	68fb      	ldr	r3, [r7, #12]
 80455ac:	4619      	mov	r1, r3
 80455ae:	4806      	ldr	r0, [pc, #24]	; (80455c8 <I2C1_MspDeInit+0x3c>)
 80455b0:	f003 fb9c 	bl	8048cec <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
 80455b4:	4b05      	ldr	r3, [pc, #20]	; (80455cc <I2C1_MspDeInit+0x40>)
 80455b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80455b8:	4a04      	ldr	r2, [pc, #16]	; (80455cc <I2C1_MspDeInit+0x40>)
 80455ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80455be:	6593      	str	r3, [r2, #88]	; 0x58
}
 80455c0:	bf00      	nop
 80455c2:	3720      	adds	r7, #32
 80455c4:	46bd      	mov	sp, r7
 80455c6:	bd80      	pop	{r7, pc}
 80455c8:	42020400 	.word	0x42020400
 80455cc:	40021000 	.word	0x40021000

080455d0 <I2C1_WriteReg>:
  * @param  pData      The target register values to be written.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80455d0:	b580      	push	{r7, lr}
 80455d2:	b08a      	sub	sp, #40	; 0x28
 80455d4:	af04      	add	r7, sp, #16
 80455d6:	607b      	str	r3, [r7, #4]
 80455d8:	4603      	mov	r3, r0
 80455da:	81fb      	strh	r3, [r7, #14]
 80455dc:	460b      	mov	r3, r1
 80455de:	81bb      	strh	r3, [r7, #12]
 80455e0:	4613      	mov	r3, r2
 80455e2:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 80455e4:	2300      	movs	r3, #0
 80455e6:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C1_TIMEOUT) != HAL_OK)
 80455e8:	8978      	ldrh	r0, [r7, #10]
 80455ea:	89ba      	ldrh	r2, [r7, #12]
 80455ec:	89f9      	ldrh	r1, [r7, #14]
 80455ee:	f242 7310 	movw	r3, #10000	; 0x2710
 80455f2:	9302      	str	r3, [sp, #8]
 80455f4:	8c3b      	ldrh	r3, [r7, #32]
 80455f6:	9301      	str	r3, [sp, #4]
 80455f8:	687b      	ldr	r3, [r7, #4]
 80455fa:	9300      	str	r3, [sp, #0]
 80455fc:	4603      	mov	r3, r0
 80455fe:	481d      	ldr	r0, [pc, #116]	; (8045674 <I2C1_WriteReg+0xa4>)
 8045600:	f003 fe42 	bl	8049288 <HAL_I2C_Mem_Write>
 8045604:	4603      	mov	r3, r0
 8045606:	2b00      	cmp	r3, #0
 8045608:	d02f      	beq.n	804566a <I2C1_WriteReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c1);
 804560a:	481a      	ldr	r0, [pc, #104]	; (8045674 <I2C1_WriteReg+0xa4>)
 804560c:	f004 f95b 	bl	80498c6 <HAL_I2C_GetError>
 8045610:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 8045612:	693b      	ldr	r3, [r7, #16]
 8045614:	f003 0301 	and.w	r3, r3, #1
 8045618:	2b00      	cmp	r3, #0
 804561a:	d003      	beq.n	8045624 <I2C1_WriteReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 804561c:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8045620:	617b      	str	r3, [r7, #20]
 8045622:	e022      	b.n	804566a <I2C1_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8045624:	693b      	ldr	r3, [r7, #16]
 8045626:	f003 0302 	and.w	r3, r3, #2
 804562a:	2b00      	cmp	r3, #0
 804562c:	d003      	beq.n	8045636 <I2C1_WriteReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 804562e:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8045632:	617b      	str	r3, [r7, #20]
 8045634:	e019      	b.n	804566a <I2C1_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 8045636:	693b      	ldr	r3, [r7, #16]
 8045638:	f003 0304 	and.w	r3, r3, #4
 804563c:	2b00      	cmp	r3, #0
 804563e:	d003      	beq.n	8045648 <I2C1_WriteReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8045640:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8045644:	617b      	str	r3, [r7, #20]
 8045646:	e010      	b.n	804566a <I2C1_WriteReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8045648:	693b      	ldr	r3, [r7, #16]
 804564a:	f003 0320 	and.w	r3, r3, #32
 804564e:	2b00      	cmp	r3, #0
 8045650:	d104      	bne.n	804565c <I2C1_WriteReg+0x8c>
 8045652:	693b      	ldr	r3, [r7, #16]
 8045654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045658:	2b00      	cmp	r3, #0
 804565a:	d003      	beq.n	8045664 <I2C1_WriteReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 804565c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8045660:	617b      	str	r3, [r7, #20]
 8045662:	e002      	b.n	804566a <I2C1_WriteReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8045664:	f06f 0303 	mvn.w	r3, #3
 8045668:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 804566a:	697b      	ldr	r3, [r7, #20]
}
 804566c:	4618      	mov	r0, r3
 804566e:	3718      	adds	r7, #24
 8045670:	46bd      	mov	sp, r7
 8045672:	bd80      	pop	{r7, pc}
 8045674:	20018d58 	.word	0x20018d58

08045678 <I2C1_ReadReg>:
  * @param  pData      The target register values to be read.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8045678:	b580      	push	{r7, lr}
 804567a:	b08a      	sub	sp, #40	; 0x28
 804567c:	af04      	add	r7, sp, #16
 804567e:	607b      	str	r3, [r7, #4]
 8045680:	4603      	mov	r3, r0
 8045682:	81fb      	strh	r3, [r7, #14]
 8045684:	460b      	mov	r3, r1
 8045686:	81bb      	strh	r3, [r7, #12]
 8045688:	4613      	mov	r3, r2
 804568a:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 804568c:	2300      	movs	r3, #0
 804568e:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C1_TIMEOUT) != HAL_OK)
 8045690:	8978      	ldrh	r0, [r7, #10]
 8045692:	89ba      	ldrh	r2, [r7, #12]
 8045694:	89f9      	ldrh	r1, [r7, #14]
 8045696:	f242 7310 	movw	r3, #10000	; 0x2710
 804569a:	9302      	str	r3, [sp, #8]
 804569c:	8c3b      	ldrh	r3, [r7, #32]
 804569e:	9301      	str	r3, [sp, #4]
 80456a0:	687b      	ldr	r3, [r7, #4]
 80456a2:	9300      	str	r3, [sp, #0]
 80456a4:	4603      	mov	r3, r0
 80456a6:	481d      	ldr	r0, [pc, #116]	; (804571c <I2C1_ReadReg+0xa4>)
 80456a8:	f003 ff02 	bl	80494b0 <HAL_I2C_Mem_Read>
 80456ac:	4603      	mov	r3, r0
 80456ae:	2b00      	cmp	r3, #0
 80456b0:	d02f      	beq.n	8045712 <I2C1_ReadReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c1);
 80456b2:	481a      	ldr	r0, [pc, #104]	; (804571c <I2C1_ReadReg+0xa4>)
 80456b4:	f004 f907 	bl	80498c6 <HAL_I2C_GetError>
 80456b8:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 80456ba:	693b      	ldr	r3, [r7, #16]
 80456bc:	f003 0301 	and.w	r3, r3, #1
 80456c0:	2b00      	cmp	r3, #0
 80456c2:	d003      	beq.n	80456cc <I2C1_ReadReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 80456c4:	f06f 0366 	mvn.w	r3, #102	; 0x66
 80456c8:	617b      	str	r3, [r7, #20]
 80456ca:	e022      	b.n	8045712 <I2C1_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 80456cc:	693b      	ldr	r3, [r7, #16]
 80456ce:	f003 0302 	and.w	r3, r3, #2
 80456d2:	2b00      	cmp	r3, #0
 80456d4:	d003      	beq.n	80456de <I2C1_ReadReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 80456d6:	f06f 0364 	mvn.w	r3, #100	; 0x64
 80456da:	617b      	str	r3, [r7, #20]
 80456dc:	e019      	b.n	8045712 <I2C1_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 80456de:	693b      	ldr	r3, [r7, #16]
 80456e0:	f003 0304 	and.w	r3, r3, #4
 80456e4:	2b00      	cmp	r3, #0
 80456e6:	d003      	beq.n	80456f0 <I2C1_ReadReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80456e8:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80456ec:	617b      	str	r3, [r7, #20]
 80456ee:	e010      	b.n	8045712 <I2C1_ReadReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 80456f0:	693b      	ldr	r3, [r7, #16]
 80456f2:	f003 0320 	and.w	r3, r3, #32
 80456f6:	2b00      	cmp	r3, #0
 80456f8:	d104      	bne.n	8045704 <I2C1_ReadReg+0x8c>
 80456fa:	693b      	ldr	r3, [r7, #16]
 80456fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045700:	2b00      	cmp	r3, #0
 8045702:	d003      	beq.n	804570c <I2C1_ReadReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 8045704:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8045708:	617b      	str	r3, [r7, #20]
 804570a:	e002      	b.n	8045712 <I2C1_ReadReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 804570c:	f06f 0303 	mvn.w	r3, #3
 8045710:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8045712:	697b      	ldr	r3, [r7, #20]
}
 8045714:	4618      	mov	r0, r3
 8045716:	3718      	adds	r7, #24
 8045718:	46bd      	mov	sp, r7
 804571a:	bd80      	pop	{r7, pc}
 804571c:	20018d58 	.word	0x20018d58

08045720 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8045720:	b580      	push	{r7, lr}
 8045722:	b086      	sub	sp, #24
 8045724:	af00      	add	r7, sp, #0
 8045726:	6078      	str	r0, [r7, #4]
 8045728:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 804572a:	2300      	movs	r3, #0
 804572c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 804572e:	687b      	ldr	r3, [r7, #4]
 8045730:	2b00      	cmp	r3, #0
 8045732:	d06b      	beq.n	804580c <I2C_GetTiming+0xec>
 8045734:	683b      	ldr	r3, [r7, #0]
 8045736:	2b00      	cmp	r3, #0
 8045738:	d068      	beq.n	804580c <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 804573a:	2300      	movs	r3, #0
 804573c:	613b      	str	r3, [r7, #16]
 804573e:	e060      	b.n	8045802 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8045740:	4a35      	ldr	r2, [pc, #212]	; (8045818 <I2C_GetTiming+0xf8>)
 8045742:	693b      	ldr	r3, [r7, #16]
 8045744:	212c      	movs	r1, #44	; 0x2c
 8045746:	fb01 f303 	mul.w	r3, r1, r3
 804574a:	4413      	add	r3, r2
 804574c:	3304      	adds	r3, #4
 804574e:	681b      	ldr	r3, [r3, #0]
 8045750:	683a      	ldr	r2, [r7, #0]
 8045752:	429a      	cmp	r2, r3
 8045754:	d352      	bcc.n	80457fc <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8045756:	4a30      	ldr	r2, [pc, #192]	; (8045818 <I2C_GetTiming+0xf8>)
 8045758:	693b      	ldr	r3, [r7, #16]
 804575a:	212c      	movs	r1, #44	; 0x2c
 804575c:	fb01 f303 	mul.w	r3, r1, r3
 8045760:	4413      	add	r3, r2
 8045762:	3308      	adds	r3, #8
 8045764:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8045766:	683a      	ldr	r2, [r7, #0]
 8045768:	429a      	cmp	r2, r3
 804576a:	d847      	bhi.n	80457fc <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 804576c:	6939      	ldr	r1, [r7, #16]
 804576e:	6878      	ldr	r0, [r7, #4]
 8045770:	f000 f856 	bl	8045820 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8045774:	6939      	ldr	r1, [r7, #16]
 8045776:	6878      	ldr	r0, [r7, #4]
 8045778:	f000 f940 	bl	80459fc <I2C_Compute_SCLL_SCLH>
 804577c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 804577e:	68fb      	ldr	r3, [r7, #12]
 8045780:	2b7f      	cmp	r3, #127	; 0x7f
 8045782:	d842      	bhi.n	804580a <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8045784:	4925      	ldr	r1, [pc, #148]	; (804581c <I2C_GetTiming+0xfc>)
 8045786:	68fa      	ldr	r2, [r7, #12]
 8045788:	4613      	mov	r3, r2
 804578a:	009b      	lsls	r3, r3, #2
 804578c:	4413      	add	r3, r2
 804578e:	009b      	lsls	r3, r3, #2
 8045790:	440b      	add	r3, r1
 8045792:	681b      	ldr	r3, [r3, #0]
 8045794:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8045796:	4821      	ldr	r0, [pc, #132]	; (804581c <I2C_GetTiming+0xfc>)
 8045798:	68fa      	ldr	r2, [r7, #12]
 804579a:	4613      	mov	r3, r2
 804579c:	009b      	lsls	r3, r3, #2
 804579e:	4413      	add	r3, r2
 80457a0:	009b      	lsls	r3, r3, #2
 80457a2:	4403      	add	r3, r0
 80457a4:	3304      	adds	r3, #4
 80457a6:	681b      	ldr	r3, [r3, #0]
 80457a8:	051b      	lsls	r3, r3, #20
 80457aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80457ae:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80457b0:	481a      	ldr	r0, [pc, #104]	; (804581c <I2C_GetTiming+0xfc>)
 80457b2:	68fa      	ldr	r2, [r7, #12]
 80457b4:	4613      	mov	r3, r2
 80457b6:	009b      	lsls	r3, r3, #2
 80457b8:	4413      	add	r3, r2
 80457ba:	009b      	lsls	r3, r3, #2
 80457bc:	4403      	add	r3, r0
 80457be:	3308      	adds	r3, #8
 80457c0:	681b      	ldr	r3, [r3, #0]
 80457c2:	041b      	lsls	r3, r3, #16
 80457c4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80457c8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80457ca:	4814      	ldr	r0, [pc, #80]	; (804581c <I2C_GetTiming+0xfc>)
 80457cc:	68fa      	ldr	r2, [r7, #12]
 80457ce:	4613      	mov	r3, r2
 80457d0:	009b      	lsls	r3, r3, #2
 80457d2:	4413      	add	r3, r2
 80457d4:	009b      	lsls	r3, r3, #2
 80457d6:	4403      	add	r3, r0
 80457d8:	330c      	adds	r3, #12
 80457da:	681b      	ldr	r3, [r3, #0]
 80457dc:	021b      	lsls	r3, r3, #8
 80457de:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80457e0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80457e2:	480e      	ldr	r0, [pc, #56]	; (804581c <I2C_GetTiming+0xfc>)
 80457e4:	68fa      	ldr	r2, [r7, #12]
 80457e6:	4613      	mov	r3, r2
 80457e8:	009b      	lsls	r3, r3, #2
 80457ea:	4413      	add	r3, r2
 80457ec:	009b      	lsls	r3, r3, #2
 80457ee:	4403      	add	r3, r0
 80457f0:	3310      	adds	r3, #16
 80457f2:	681b      	ldr	r3, [r3, #0]
 80457f4:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80457f6:	430b      	orrs	r3, r1
 80457f8:	617b      	str	r3, [r7, #20]
        }
        break;
 80457fa:	e006      	b.n	804580a <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80457fc:	693b      	ldr	r3, [r7, #16]
 80457fe:	3301      	adds	r3, #1
 8045800:	613b      	str	r3, [r7, #16]
 8045802:	693b      	ldr	r3, [r7, #16]
 8045804:	2b02      	cmp	r3, #2
 8045806:	d99b      	bls.n	8045740 <I2C_GetTiming+0x20>
 8045808:	e000      	b.n	804580c <I2C_GetTiming+0xec>
        break;
 804580a:	bf00      	nop
      }
    }
  }

  return ret;
 804580c:	697b      	ldr	r3, [r7, #20]
}
 804580e:	4618      	mov	r0, r3
 8045810:	3718      	adds	r7, #24
 8045812:	46bd      	mov	sp, r7
 8045814:	bd80      	pop	{r7, pc}
 8045816:	bf00      	nop
 8045818:	0804e994 	.word	0x0804e994
 804581c:	20018354 	.word	0x20018354

08045820 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8045820:	b480      	push	{r7}
 8045822:	b08f      	sub	sp, #60	; 0x3c
 8045824:	af00      	add	r7, sp, #0
 8045826:	6078      	str	r0, [r7, #4]
 8045828:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 804582a:	2310      	movs	r3, #16
 804582c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 804582e:	687b      	ldr	r3, [r7, #4]
 8045830:	085a      	lsrs	r2, r3, #1
 8045832:	4b6e      	ldr	r3, [pc, #440]	; (80459ec <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8045834:	4413      	add	r3, r2
 8045836:	687a      	ldr	r2, [r7, #4]
 8045838:	fbb3 f3f2 	udiv	r3, r3, r2
 804583c:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 804583e:	2332      	movs	r3, #50	; 0x32
 8045840:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 8045842:	f44f 7382 	mov.w	r3, #260	; 0x104
 8045846:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8045848:	4a69      	ldr	r2, [pc, #420]	; (80459f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 804584a:	683b      	ldr	r3, [r7, #0]
 804584c:	212c      	movs	r1, #44	; 0x2c
 804584e:	fb01 f303 	mul.w	r3, r1, r3
 8045852:	4413      	add	r3, r2
 8045854:	3324      	adds	r3, #36	; 0x24
 8045856:	681b      	ldr	r3, [r3, #0]
 8045858:	4618      	mov	r0, r3
 804585a:	4a65      	ldr	r2, [pc, #404]	; (80459f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 804585c:	683b      	ldr	r3, [r7, #0]
 804585e:	212c      	movs	r1, #44	; 0x2c
 8045860:	fb01 f303 	mul.w	r3, r1, r3
 8045864:	4413      	add	r3, r2
 8045866:	330c      	adds	r3, #12
 8045868:	681b      	ldr	r3, [r3, #0]
 804586a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 804586c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 804586e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8045870:	495f      	ldr	r1, [pc, #380]	; (80459f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8045872:	683b      	ldr	r3, [r7, #0]
 8045874:	202c      	movs	r0, #44	; 0x2c
 8045876:	fb00 f303 	mul.w	r3, r0, r3
 804587a:	440b      	add	r3, r1
 804587c:	3328      	adds	r3, #40	; 0x28
 804587e:	681b      	ldr	r3, [r3, #0]
 8045880:	3303      	adds	r3, #3
 8045882:	69f9      	ldr	r1, [r7, #28]
 8045884:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8045888:	1ad3      	subs	r3, r2, r3
 804588a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 804588c:	4a58      	ldr	r2, [pc, #352]	; (80459f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 804588e:	683b      	ldr	r3, [r7, #0]
 8045890:	212c      	movs	r1, #44	; 0x2c
 8045892:	fb01 f303 	mul.w	r3, r1, r3
 8045896:	4413      	add	r3, r2
 8045898:	3310      	adds	r3, #16
 804589a:	681b      	ldr	r3, [r3, #0]
 804589c:	4618      	mov	r0, r3
 804589e:	4a54      	ldr	r2, [pc, #336]	; (80459f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80458a0:	683b      	ldr	r3, [r7, #0]
 80458a2:	212c      	movs	r1, #44	; 0x2c
 80458a4:	fb01 f303 	mul.w	r3, r1, r3
 80458a8:	4413      	add	r3, r2
 80458aa:	3320      	adds	r3, #32
 80458ac:	681b      	ldr	r3, [r3, #0]
 80458ae:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80458b0:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80458b2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80458b4:	494e      	ldr	r1, [pc, #312]	; (80459f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80458b6:	683b      	ldr	r3, [r7, #0]
 80458b8:	202c      	movs	r0, #44	; 0x2c
 80458ba:	fb00 f303 	mul.w	r3, r0, r3
 80458be:	440b      	add	r3, r1
 80458c0:	3328      	adds	r3, #40	; 0x28
 80458c2:	681b      	ldr	r3, [r3, #0]
 80458c4:	3304      	adds	r3, #4
 80458c6:	69f9      	ldr	r1, [r7, #28]
 80458c8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80458cc:	1ad3      	subs	r3, r2, r3
 80458ce:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80458d0:	4a47      	ldr	r2, [pc, #284]	; (80459f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80458d2:	683b      	ldr	r3, [r7, #0]
 80458d4:	212c      	movs	r1, #44	; 0x2c
 80458d6:	fb01 f303 	mul.w	r3, r1, r3
 80458da:	4413      	add	r3, r2
 80458dc:	3320      	adds	r3, #32
 80458de:	681b      	ldr	r3, [r3, #0]
 80458e0:	4618      	mov	r0, r3
 80458e2:	4a43      	ldr	r2, [pc, #268]	; (80459f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80458e4:	683b      	ldr	r3, [r7, #0]
 80458e6:	212c      	movs	r1, #44	; 0x2c
 80458e8:	fb01 f303 	mul.w	r3, r1, r3
 80458ec:	4413      	add	r3, r2
 80458ee:	3314      	adds	r3, #20
 80458f0:	681b      	ldr	r3, [r3, #0]
 80458f2:	4403      	add	r3, r0
 80458f4:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80458f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80458f8:	2b00      	cmp	r3, #0
 80458fa:	dc01      	bgt.n	8045900 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80458fc:	2300      	movs	r3, #0
 80458fe:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8045900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8045902:	2b00      	cmp	r3, #0
 8045904:	dc01      	bgt.n	804590a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8045906:	2300      	movs	r3, #0
 8045908:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 804590a:	2300      	movs	r3, #0
 804590c:	62bb      	str	r3, [r7, #40]	; 0x28
 804590e:	e062      	b.n	80459d6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8045910:	2300      	movs	r3, #0
 8045912:	627b      	str	r3, [r7, #36]	; 0x24
 8045914:	e059      	b.n	80459ca <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8045916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045918:	3301      	adds	r3, #1
 804591a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804591c:	3201      	adds	r2, #1
 804591e:	fb02 f203 	mul.w	r2, r2, r3
 8045922:	69fb      	ldr	r3, [r7, #28]
 8045924:	fb02 f303 	mul.w	r3, r2, r3
 8045928:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 804592a:	693b      	ldr	r3, [r7, #16]
 804592c:	68fa      	ldr	r2, [r7, #12]
 804592e:	429a      	cmp	r2, r3
 8045930:	d348      	bcc.n	80459c4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8045932:	2300      	movs	r3, #0
 8045934:	623b      	str	r3, [r7, #32]
 8045936:	e042      	b.n	80459be <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8045938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804593a:	3301      	adds	r3, #1
 804593c:	6a3a      	ldr	r2, [r7, #32]
 804593e:	fb02 f203 	mul.w	r2, r2, r3
 8045942:	69fb      	ldr	r3, [r7, #28]
 8045944:	fb02 f303 	mul.w	r3, r2, r3
 8045948:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 804594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804594c:	68ba      	ldr	r2, [r7, #8]
 804594e:	429a      	cmp	r2, r3
 8045950:	d332      	bcc.n	80459b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8045952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8045954:	68ba      	ldr	r2, [r7, #8]
 8045956:	429a      	cmp	r2, r3
 8045958:	d82e      	bhi.n	80459b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 804595a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804595e:	429a      	cmp	r2, r3
 8045960:	d02a      	beq.n	80459b8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8045962:	4b24      	ldr	r3, [pc, #144]	; (80459f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8045964:	681a      	ldr	r2, [r3, #0]
 8045966:	4924      	ldr	r1, [pc, #144]	; (80459f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8045968:	4613      	mov	r3, r2
 804596a:	009b      	lsls	r3, r3, #2
 804596c:	4413      	add	r3, r2
 804596e:	009b      	lsls	r3, r3, #2
 8045970:	440b      	add	r3, r1
 8045972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8045974:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8045976:	4b1f      	ldr	r3, [pc, #124]	; (80459f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8045978:	681a      	ldr	r2, [r3, #0]
 804597a:	491f      	ldr	r1, [pc, #124]	; (80459f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 804597c:	4613      	mov	r3, r2
 804597e:	009b      	lsls	r3, r3, #2
 8045980:	4413      	add	r3, r2
 8045982:	009b      	lsls	r3, r3, #2
 8045984:	440b      	add	r3, r1
 8045986:	3304      	adds	r3, #4
 8045988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804598a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 804598c:	4b19      	ldr	r3, [pc, #100]	; (80459f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 804598e:	681a      	ldr	r2, [r3, #0]
 8045990:	4919      	ldr	r1, [pc, #100]	; (80459f8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8045992:	4613      	mov	r3, r2
 8045994:	009b      	lsls	r3, r3, #2
 8045996:	4413      	add	r3, r2
 8045998:	009b      	lsls	r3, r3, #2
 804599a:	440b      	add	r3, r1
 804599c:	3308      	adds	r3, #8
 804599e:	6a3a      	ldr	r2, [r7, #32]
 80459a0:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80459a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80459a4:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80459a6:	4b13      	ldr	r3, [pc, #76]	; (80459f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80459a8:	681b      	ldr	r3, [r3, #0]
 80459aa:	3301      	adds	r3, #1
 80459ac:	4a11      	ldr	r2, [pc, #68]	; (80459f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80459ae:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80459b0:	4b10      	ldr	r3, [pc, #64]	; (80459f4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80459b2:	681b      	ldr	r3, [r3, #0]
 80459b4:	2b7f      	cmp	r3, #127	; 0x7f
 80459b6:	d812      	bhi.n	80459de <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80459b8:	6a3b      	ldr	r3, [r7, #32]
 80459ba:	3301      	adds	r3, #1
 80459bc:	623b      	str	r3, [r7, #32]
 80459be:	6a3b      	ldr	r3, [r7, #32]
 80459c0:	2b0f      	cmp	r3, #15
 80459c2:	d9b9      	bls.n	8045938 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80459c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80459c6:	3301      	adds	r3, #1
 80459c8:	627b      	str	r3, [r7, #36]	; 0x24
 80459ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80459cc:	2b0f      	cmp	r3, #15
 80459ce:	d9a2      	bls.n	8045916 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80459d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80459d2:	3301      	adds	r3, #1
 80459d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80459d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80459d8:	2b0f      	cmp	r3, #15
 80459da:	d999      	bls.n	8045910 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80459dc:	e000      	b.n	80459e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80459de:	bf00      	nop
          }
        }
      }
    }
  }
}
 80459e0:	373c      	adds	r7, #60	; 0x3c
 80459e2:	46bd      	mov	sp, r7
 80459e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80459e8:	4770      	bx	lr
 80459ea:	bf00      	nop
 80459ec:	3b9aca00 	.word	0x3b9aca00
 80459f0:	0804e994 	.word	0x0804e994
 80459f4:	20018d54 	.word	0x20018d54
 80459f8:	20018354 	.word	0x20018354

080459fc <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80459fc:	b480      	push	{r7}
 80459fe:	b093      	sub	sp, #76	; 0x4c
 8045a00:	af00      	add	r7, sp, #0
 8045a02:	6078      	str	r0, [r7, #4]
 8045a04:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 8045a06:	f04f 33ff 	mov.w	r3, #4294967295
 8045a0a:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8045a0c:	687b      	ldr	r3, [r7, #4]
 8045a0e:	085a      	lsrs	r2, r3, #1
 8045a10:	4b7a      	ldr	r3, [pc, #488]	; (8045bfc <I2C_Compute_SCLL_SCLH+0x200>)
 8045a12:	4413      	add	r3, r2
 8045a14:	687a      	ldr	r2, [r7, #4]
 8045a16:	fbb3 f3f2 	udiv	r3, r3, r2
 8045a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8045a1c:	4a78      	ldr	r2, [pc, #480]	; (8045c00 <I2C_Compute_SCLL_SCLH+0x204>)
 8045a1e:	683b      	ldr	r3, [r7, #0]
 8045a20:	212c      	movs	r1, #44	; 0x2c
 8045a22:	fb01 f303 	mul.w	r3, r1, r3
 8045a26:	4413      	add	r3, r2
 8045a28:	681b      	ldr	r3, [r3, #0]
 8045a2a:	085a      	lsrs	r2, r3, #1
 8045a2c:	4b73      	ldr	r3, [pc, #460]	; (8045bfc <I2C_Compute_SCLL_SCLH+0x200>)
 8045a2e:	4413      	add	r3, r2
 8045a30:	4973      	ldr	r1, [pc, #460]	; (8045c00 <I2C_Compute_SCLL_SCLH+0x204>)
 8045a32:	683a      	ldr	r2, [r7, #0]
 8045a34:	202c      	movs	r0, #44	; 0x2c
 8045a36:	fb00 f202 	mul.w	r2, r0, r2
 8045a3a:	440a      	add	r2, r1
 8045a3c:	6812      	ldr	r2, [r2, #0]
 8045a3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8045a42:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8045a44:	2332      	movs	r3, #50	; 0x32
 8045a46:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8045a48:	4a6d      	ldr	r2, [pc, #436]	; (8045c00 <I2C_Compute_SCLL_SCLH+0x204>)
 8045a4a:	683b      	ldr	r3, [r7, #0]
 8045a4c:	212c      	movs	r1, #44	; 0x2c
 8045a4e:	fb01 f303 	mul.w	r3, r1, r3
 8045a52:	4413      	add	r3, r2
 8045a54:	3328      	adds	r3, #40	; 0x28
 8045a56:	681a      	ldr	r2, [r3, #0]
 8045a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8045a5a:	fb02 f303 	mul.w	r3, r2, r3
 8045a5e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8045a60:	4a67      	ldr	r2, [pc, #412]	; (8045c00 <I2C_Compute_SCLL_SCLH+0x204>)
 8045a62:	683b      	ldr	r3, [r7, #0]
 8045a64:	212c      	movs	r1, #44	; 0x2c
 8045a66:	fb01 f303 	mul.w	r3, r1, r3
 8045a6a:	4413      	add	r3, r2
 8045a6c:	3304      	adds	r3, #4
 8045a6e:	681b      	ldr	r3, [r3, #0]
 8045a70:	4a62      	ldr	r2, [pc, #392]	; (8045bfc <I2C_Compute_SCLL_SCLH+0x200>)
 8045a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8045a76:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8045a78:	4a61      	ldr	r2, [pc, #388]	; (8045c00 <I2C_Compute_SCLL_SCLH+0x204>)
 8045a7a:	683b      	ldr	r3, [r7, #0]
 8045a7c:	212c      	movs	r1, #44	; 0x2c
 8045a7e:	fb01 f303 	mul.w	r3, r1, r3
 8045a82:	4413      	add	r3, r2
 8045a84:	3308      	adds	r3, #8
 8045a86:	681b      	ldr	r3, [r3, #0]
 8045a88:	4a5c      	ldr	r2, [pc, #368]	; (8045bfc <I2C_Compute_SCLL_SCLH+0x200>)
 8045a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8045a8e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8045a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045a92:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8045a94:	2300      	movs	r3, #0
 8045a96:	637b      	str	r3, [r7, #52]	; 0x34
 8045a98:	e0a3      	b.n	8045be2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8045a9a:	495a      	ldr	r1, [pc, #360]	; (8045c04 <I2C_Compute_SCLL_SCLH+0x208>)
 8045a9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8045a9e:	4613      	mov	r3, r2
 8045aa0:	009b      	lsls	r3, r3, #2
 8045aa2:	4413      	add	r3, r2
 8045aa4:	009b      	lsls	r3, r3, #2
 8045aa6:	440b      	add	r3, r1
 8045aa8:	681b      	ldr	r3, [r3, #0]
 8045aaa:	1c5a      	adds	r2, r3, #1
 8045aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8045aae:	fb02 f303 	mul.w	r3, r2, r3
 8045ab2:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8045ab4:	2300      	movs	r3, #0
 8045ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8045ab8:	e08c      	b.n	8045bd4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8045aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8045abc:	6a3b      	ldr	r3, [r7, #32]
 8045abe:	441a      	add	r2, r3
 8045ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8045ac2:	3301      	adds	r3, #1
 8045ac4:	6979      	ldr	r1, [r7, #20]
 8045ac6:	fb01 f103 	mul.w	r1, r1, r3
 8045aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8045acc:	005b      	lsls	r3, r3, #1
 8045ace:	440b      	add	r3, r1
 8045ad0:	4413      	add	r3, r2
 8045ad2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8045ad4:	4a4a      	ldr	r2, [pc, #296]	; (8045c00 <I2C_Compute_SCLL_SCLH+0x204>)
 8045ad6:	683b      	ldr	r3, [r7, #0]
 8045ad8:	212c      	movs	r1, #44	; 0x2c
 8045ada:	fb01 f303 	mul.w	r3, r1, r3
 8045ade:	4413      	add	r3, r2
 8045ae0:	3318      	adds	r3, #24
 8045ae2:	681b      	ldr	r3, [r3, #0]
 8045ae4:	693a      	ldr	r2, [r7, #16]
 8045ae6:	429a      	cmp	r2, r3
 8045ae8:	d971      	bls.n	8045bce <I2C_Compute_SCLL_SCLH+0x1d2>
 8045aea:	693a      	ldr	r2, [r7, #16]
 8045aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045aee:	1ad2      	subs	r2, r2, r3
 8045af0:	6a3b      	ldr	r3, [r7, #32]
 8045af2:	1ad3      	subs	r3, r2, r3
 8045af4:	089b      	lsrs	r3, r3, #2
 8045af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8045af8:	429a      	cmp	r2, r3
 8045afa:	d268      	bcs.n	8045bce <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8045afc:	2300      	movs	r3, #0
 8045afe:	63bb      	str	r3, [r7, #56]	; 0x38
 8045b00:	e062      	b.n	8045bc8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8045b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8045b04:	6a3b      	ldr	r3, [r7, #32]
 8045b06:	441a      	add	r2, r3
 8045b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8045b0a:	3301      	adds	r3, #1
 8045b0c:	6979      	ldr	r1, [r7, #20]
 8045b0e:	fb01 f103 	mul.w	r1, r1, r3
 8045b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8045b14:	005b      	lsls	r3, r3, #1
 8045b16:	440b      	add	r3, r1
 8045b18:	4413      	add	r3, r2
 8045b1a:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8045b1c:	693a      	ldr	r2, [r7, #16]
 8045b1e:	68fb      	ldr	r3, [r7, #12]
 8045b20:	441a      	add	r2, r3
 8045b22:	4937      	ldr	r1, [pc, #220]	; (8045c00 <I2C_Compute_SCLL_SCLH+0x204>)
 8045b24:	683b      	ldr	r3, [r7, #0]
 8045b26:	202c      	movs	r0, #44	; 0x2c
 8045b28:	fb00 f303 	mul.w	r3, r0, r3
 8045b2c:	440b      	add	r3, r1
 8045b2e:	3320      	adds	r3, #32
 8045b30:	681b      	ldr	r3, [r3, #0]
 8045b32:	441a      	add	r2, r3
 8045b34:	4932      	ldr	r1, [pc, #200]	; (8045c00 <I2C_Compute_SCLL_SCLH+0x204>)
 8045b36:	683b      	ldr	r3, [r7, #0]
 8045b38:	202c      	movs	r0, #44	; 0x2c
 8045b3a:	fb00 f303 	mul.w	r3, r0, r3
 8045b3e:	440b      	add	r3, r1
 8045b40:	3324      	adds	r3, #36	; 0x24
 8045b42:	681b      	ldr	r3, [r3, #0]
 8045b44:	4413      	add	r3, r2
 8045b46:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8045b48:	68ba      	ldr	r2, [r7, #8]
 8045b4a:	69bb      	ldr	r3, [r7, #24]
 8045b4c:	429a      	cmp	r2, r3
 8045b4e:	d338      	bcc.n	8045bc2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8045b50:	68ba      	ldr	r2, [r7, #8]
 8045b52:	69fb      	ldr	r3, [r7, #28]
 8045b54:	429a      	cmp	r2, r3
 8045b56:	d834      	bhi.n	8045bc2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8045b58:	4a29      	ldr	r2, [pc, #164]	; (8045c00 <I2C_Compute_SCLL_SCLH+0x204>)
 8045b5a:	683b      	ldr	r3, [r7, #0]
 8045b5c:	212c      	movs	r1, #44	; 0x2c
 8045b5e:	fb01 f303 	mul.w	r3, r1, r3
 8045b62:	4413      	add	r3, r2
 8045b64:	331c      	adds	r3, #28
 8045b66:	681b      	ldr	r3, [r3, #0]
 8045b68:	68fa      	ldr	r2, [r7, #12]
 8045b6a:	429a      	cmp	r2, r3
 8045b6c:	d329      	bcc.n	8045bc2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8045b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8045b70:	68fb      	ldr	r3, [r7, #12]
 8045b72:	429a      	cmp	r2, r3
 8045b74:	d225      	bcs.n	8045bc2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8045b76:	68ba      	ldr	r2, [r7, #8]
 8045b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045b7a:	1ad3      	subs	r3, r2, r3
 8045b7c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 8045b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045b80:	2b00      	cmp	r3, #0
 8045b82:	da02      	bge.n	8045b8a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8045b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045b86:	425b      	negs	r3, r3
 8045b88:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 8045b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045b8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8045b8e:	429a      	cmp	r2, r3
 8045b90:	d917      	bls.n	8045bc2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8045b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045b94:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8045b96:	491b      	ldr	r1, [pc, #108]	; (8045c04 <I2C_Compute_SCLL_SCLH+0x208>)
 8045b98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8045b9a:	4613      	mov	r3, r2
 8045b9c:	009b      	lsls	r3, r3, #2
 8045b9e:	4413      	add	r3, r2
 8045ba0:	009b      	lsls	r3, r3, #2
 8045ba2:	440b      	add	r3, r1
 8045ba4:	3310      	adds	r3, #16
 8045ba6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8045ba8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 8045baa:	4916      	ldr	r1, [pc, #88]	; (8045c04 <I2C_Compute_SCLL_SCLH+0x208>)
 8045bac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8045bae:	4613      	mov	r3, r2
 8045bb0:	009b      	lsls	r3, r3, #2
 8045bb2:	4413      	add	r3, r2
 8045bb4:	009b      	lsls	r3, r3, #2
 8045bb6:	440b      	add	r3, r1
 8045bb8:	330c      	adds	r3, #12
 8045bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8045bbc:	601a      	str	r2, [r3, #0]
              ret = count;
 8045bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8045bc0:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8045bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8045bc4:	3301      	adds	r3, #1
 8045bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8045bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8045bca:	2bff      	cmp	r3, #255	; 0xff
 8045bcc:	d999      	bls.n	8045b02 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8045bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8045bd0:	3301      	adds	r3, #1
 8045bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8045bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8045bd6:	2bff      	cmp	r3, #255	; 0xff
 8045bd8:	f67f af6f 	bls.w	8045aba <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8045bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8045bde:	3301      	adds	r3, #1
 8045be0:	637b      	str	r3, [r7, #52]	; 0x34
 8045be2:	4b09      	ldr	r3, [pc, #36]	; (8045c08 <I2C_Compute_SCLL_SCLH+0x20c>)
 8045be4:	681b      	ldr	r3, [r3, #0]
 8045be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8045be8:	429a      	cmp	r2, r3
 8045bea:	f4ff af56 	bcc.w	8045a9a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8045bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8045bf0:	4618      	mov	r0, r3
 8045bf2:	374c      	adds	r7, #76	; 0x4c
 8045bf4:	46bd      	mov	sp, r7
 8045bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045bfa:	4770      	bx	lr
 8045bfc:	3b9aca00 	.word	0x3b9aca00
 8045c00:	0804e994 	.word	0x0804e994
 8045c04:	20018354 	.word	0x20018354
 8045c08:	20018d54 	.word	0x20018d54

08045c0c <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 8045c0c:	b580      	push	{r7, lr}
 8045c0e:	b082      	sub	sp, #8
 8045c10:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8045c12:	2301      	movs	r3, #1
 8045c14:	71fb      	strb	r3, [r7, #7]
//  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef ICG20330_InitStructure;
//  GYRO_FilterConfigTypeDef ICG20330_FilterStructure = {0, 0};

  if (icg20330Drv.ReadID() == I_AM_ICG20330)
 8045c16:	4b18      	ldr	r3, [pc, #96]	; (8045c78 <BSP_GYRO_Init+0x6c>)
 8045c18:	689b      	ldr	r3, [r3, #8]
 8045c1a:	4798      	blx	r3
 8045c1c:	4603      	mov	r3, r0
 8045c1e:	2b92      	cmp	r3, #146	; 0x92
 8045c20:	d123      	bne.n	8045c6a <BSP_GYRO_Init+0x5e>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &icg20330Drv;
 8045c22:	4b16      	ldr	r3, [pc, #88]	; (8045c7c <BSP_GYRO_Init+0x70>)
 8045c24:	4a14      	ldr	r2, [pc, #80]	; (8045c78 <BSP_GYRO_Init+0x6c>)
 8045c26:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    ICG20330_InitStructure.Power_Mode = ICG20330_MODE_ACTIVE;
 8045c28:	2303      	movs	r3, #3
 8045c2a:	703b      	strb	r3, [r7, #0]
    ICG20330_InitStructure.Output_DataRate = ICG20330_OUTPUT_DATARATE_1;
 8045c2c:	2300      	movs	r3, #0
 8045c2e:	707b      	strb	r3, [r7, #1]
    ICG20330_InitStructure.Axes_Enable = ICG20330_AXES_ENABLE;
 8045c30:	2303      	movs	r3, #3
 8045c32:	70bb      	strb	r3, [r7, #2]
    ICG20330_InitStructure.Band_Width = ICG20330_BANDWIDTH_250;
 8045c34:	2302      	movs	r3, #2
 8045c36:	70fb      	strb	r3, [r7, #3]
    ICG20330_InitStructure.BlockData_Update = ICG20330_BlockDataUpdate_Continous;
 8045c38:	2300      	movs	r3, #0
 8045c3a:	713b      	strb	r3, [r7, #4]
    ICG20330_InitStructure.Endianness = ICG20330_BLE_LSB;
 8045c3c:	2300      	movs	r3, #0
 8045c3e:	717b      	strb	r3, [r7, #5]
    ICG20330_InitStructure.Full_Scale = ICG20330_FULLSCALE_500;
 8045c40:	2318      	movs	r3, #24
 8045c42:	71bb      	strb	r3, [r7, #6]

    /* Initialize component */
    GyroscopeDrv->Init(&ICG20330_InitStructure);
 8045c44:	4b0d      	ldr	r3, [pc, #52]	; (8045c7c <BSP_GYRO_Init+0x70>)
 8045c46:	681b      	ldr	r3, [r3, #0]
 8045c48:	681b      	ldr	r3, [r3, #0]
 8045c4a:	463a      	mov	r2, r7
 8045c4c:	4610      	mov	r0, r2
 8045c4e:	4798      	blx	r3

    /* Configure component filter */
      GyroscopeDrv->FilterConfig(0x00) ;
 8045c50:	4b0a      	ldr	r3, [pc, #40]	; (8045c7c <BSP_GYRO_Init+0x70>)
 8045c52:	681b      	ldr	r3, [r3, #0]
 8045c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045c56:	2000      	movs	r0, #0
 8045c58:	4798      	blx	r3

    /* Enable component filter */
    GyroscopeDrv->FilterCmd(0x1B);
 8045c5a:	4b08      	ldr	r3, [pc, #32]	; (8045c7c <BSP_GYRO_Init+0x70>)
 8045c5c:	681b      	ldr	r3, [r3, #0]
 8045c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045c60:	201b      	movs	r0, #27
 8045c62:	4798      	blx	r3

    ret = GYRO_OK;
 8045c64:	2300      	movs	r3, #0
 8045c66:	71fb      	strb	r3, [r7, #7]
 8045c68:	e001      	b.n	8045c6e <BSP_GYRO_Init+0x62>
  }
  else
  {
    ret = GYRO_ERROR;
 8045c6a:	2301      	movs	r3, #1
 8045c6c:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8045c6e:	79fb      	ldrb	r3, [r7, #7]
}
 8045c70:	4618      	mov	r0, r3
 8045c72:	3708      	adds	r7, #8
 8045c74:	46bd      	mov	sp, r7
 8045c76:	bd80      	pop	{r7, pc}
 8045c78:	20018028 	.word	0x20018028
 8045c7c:	20018dd4 	.word	0x20018dd4

08045c80 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8045c80:	b580      	push	{r7, lr}
 8045c82:	b082      	sub	sp, #8
 8045c84:	af00      	add	r7, sp, #0
 8045c86:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 8045c88:	4b06      	ldr	r3, [pc, #24]	; (8045ca4 <BSP_GYRO_GetXYZ+0x24>)
 8045c8a:	681b      	ldr	r3, [r3, #0]
 8045c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045c8e:	2b00      	cmp	r3, #0
 8045c90:	d004      	beq.n	8045c9c <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8045c92:	4b04      	ldr	r3, [pc, #16]	; (8045ca4 <BSP_GYRO_GetXYZ+0x24>)
 8045c94:	681b      	ldr	r3, [r3, #0]
 8045c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045c98:	6878      	ldr	r0, [r7, #4]
 8045c9a:	4798      	blx	r3
  }
}
 8045c9c:	bf00      	nop
 8045c9e:	3708      	adds	r7, #8
 8045ca0:	46bd      	mov	sp, r7
 8045ca2:	bd80      	pop	{r7, pc}
 8045ca4:	20018dd4 	.word	0x20018dd4

08045ca8 <GYRO_IO_Init>:

/**
  * @}
  */
void    GYRO_IO_Init(void)
{
 8045ca8:	b580      	push	{r7, lr}
 8045caa:	b082      	sub	sp, #8
 8045cac:	af00      	add	r7, sp, #0
	uint8_t data = 0x81;
 8045cae:	2381      	movs	r3, #129	; 0x81
 8045cb0:	71fb      	strb	r3, [r7, #7]

	BSP_I2C1_Init();
 8045cb2:	f7ff fb57 	bl	8045364 <BSP_I2C1_Init>

	HAL_GPIO_WritePin(GYO_DEN_GPIO_Port, GYO_DEN_Pin, GPIO_PIN_RESET);
 8045cb6:	2200      	movs	r2, #0
 8045cb8:	2102      	movs	r1, #2
 8045cba:	4809      	ldr	r0, [pc, #36]	; (8045ce0 <GYRO_IO_Init+0x38>)
 8045cbc:	f003 f91c 	bl	8048ef8 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8045cc0:	2032      	movs	r0, #50	; 0x32
 8045cc2:	f000 ff93 	bl	8046bec <HAL_Delay>

	GYRO_IO_Write(&data, ICG20330_PWR_MGMT_1_ADDR, 1);
 8045cc6:	1dfb      	adds	r3, r7, #7
 8045cc8:	2201      	movs	r2, #1
 8045cca:	216b      	movs	r1, #107	; 0x6b
 8045ccc:	4618      	mov	r0, r3
 8045cce:	f000 f809 	bl	8045ce4 <GYRO_IO_Write>
	HAL_Delay(100);
 8045cd2:	2064      	movs	r0, #100	; 0x64
 8045cd4:	f000 ff8a 	bl	8046bec <HAL_Delay>
}
 8045cd8:	bf00      	nop
 8045cda:	3708      	adds	r7, #8
 8045cdc:	46bd      	mov	sp, r7
 8045cde:	bd80      	pop	{r7, pc}
 8045ce0:	42021000 	.word	0x42021000

08045ce4 <GYRO_IO_Write>:
void    GYRO_IO_DeInit(void)
{
	BSP_I2C1_DeInit();
}
void    GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8045ce4:	b580      	push	{r7, lr}
 8045ce6:	b084      	sub	sp, #16
 8045ce8:	af00      	add	r7, sp, #0
 8045cea:	6078      	str	r0, [r7, #4]
 8045cec:	460b      	mov	r3, r1
 8045cee:	70fb      	strb	r3, [r7, #3]
 8045cf0:	4613      	mov	r3, r2
 8045cf2:	803b      	strh	r3, [r7, #0]
	uint16_t DevAddress = (ICG20330_ADDR << 1) | 0x00;
 8045cf4:	23d2      	movs	r3, #210	; 0xd2
 8045cf6:	81fb      	strh	r3, [r7, #14]
	BSP_I2C1_WriteReg(DevAddress, WriteAddr, pBuffer, NumByteToWrite);
 8045cf8:	78fb      	ldrb	r3, [r7, #3]
 8045cfa:	b299      	uxth	r1, r3
 8045cfc:	883b      	ldrh	r3, [r7, #0]
 8045cfe:	89f8      	ldrh	r0, [r7, #14]
 8045d00:	687a      	ldr	r2, [r7, #4]
 8045d02:	f7ff fb81 	bl	8045408 <BSP_I2C1_WriteReg>

}
 8045d06:	bf00      	nop
 8045d08:	3710      	adds	r7, #16
 8045d0a:	46bd      	mov	sp, r7
 8045d0c:	bd80      	pop	{r7, pc}

08045d0e <GYRO_IO_Read>:
void    GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8045d0e:	b580      	push	{r7, lr}
 8045d10:	b084      	sub	sp, #16
 8045d12:	af00      	add	r7, sp, #0
 8045d14:	6078      	str	r0, [r7, #4]
 8045d16:	460b      	mov	r3, r1
 8045d18:	70fb      	strb	r3, [r7, #3]
 8045d1a:	4613      	mov	r3, r2
 8045d1c:	803b      	strh	r3, [r7, #0]
	uint16_t DevAddress = (ICG20330_ADDR << 1) | 0x01;
 8045d1e:	23d3      	movs	r3, #211	; 0xd3
 8045d20:	81fb      	strh	r3, [r7, #14]
	BSP_I2C1_ReadReg(DevAddress, ReadAddr, pBuffer, NumByteToRead);
 8045d22:	78fb      	ldrb	r3, [r7, #3]
 8045d24:	b299      	uxth	r1, r3
 8045d26:	883b      	ldrh	r3, [r7, #0]
 8045d28:	89f8      	ldrh	r0, [r7, #14]
 8045d2a:	687a      	ldr	r2, [r7, #4]
 8045d2c:	f7ff fb84 	bl	8045438 <BSP_I2C1_ReadReg>
}
 8045d30:	bf00      	nop
 8045d32:	3710      	adds	r7, #16
 8045d34:	46bd      	mov	sp, r7
 8045d36:	bd80      	pop	{r7, pc}

08045d38 <lr1110_radio_get_pkt_type>:

    return status;
}

lr1110_status_t lr1110_radio_get_pkt_type( const void* context, lr1110_radio_pkt_type_t* pkt_type )
{
 8045d38:	b580      	push	{r7, lr}
 8045d3a:	b086      	sub	sp, #24
 8045d3c:	af02      	add	r7, sp, #8
 8045d3e:	6078      	str	r0, [r7, #4]
 8045d40:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_GET_PKT_TYPE_CMD_LENGTH];
    uint8_t pkt_type_raw = 0;
 8045d42:	2300      	movs	r3, #0
 8045d44:	72fb      	strb	r3, [r7, #11]

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PKT_TYPE_OC >> 8 );
 8045d46:	2302      	movs	r3, #2
 8045d48:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_PKT_TYPE_OC >> 0 );
 8045d4a:	2302      	movs	r3, #2
 8045d4c:	737b      	strb	r3, [r7, #13]

    lr1110_status_t status =
        ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_PKT_TYPE_CMD_LENGTH, &pkt_type_raw, 1 );
 8045d4e:	f107 030b 	add.w	r3, r7, #11
 8045d52:	f107 010c 	add.w	r1, r7, #12
 8045d56:	2201      	movs	r2, #1
 8045d58:	9200      	str	r2, [sp, #0]
 8045d5a:	2202      	movs	r2, #2
 8045d5c:	6878      	ldr	r0, [r7, #4]
 8045d5e:	f7fe f916 	bl	8043f8e <lr1110_hal_read>
 8045d62:	4603      	mov	r3, r0
 8045d64:	73fb      	strb	r3, [r7, #15]

    if( status == LR1110_STATUS_OK )
 8045d66:	7bfb      	ldrb	r3, [r7, #15]
 8045d68:	2b00      	cmp	r3, #0
 8045d6a:	d102      	bne.n	8045d72 <lr1110_radio_get_pkt_type+0x3a>
    {
        *pkt_type = ( lr1110_radio_pkt_type_t ) pkt_type_raw;
 8045d6c:	7afa      	ldrb	r2, [r7, #11]
 8045d6e:	683b      	ldr	r3, [r7, #0]
 8045d70:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8045d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8045d74:	4618      	mov	r0, r3
 8045d76:	3710      	adds	r7, #16
 8045d78:	46bd      	mov	sp, r7
 8045d7a:	bd80      	pop	{r7, pc}

08045d7c <lr1110_radio_get_rx_buffer_status>:

lr1110_status_t lr1110_radio_get_rx_buffer_status( const void*                      context,
                                                   lr1110_radio_rx_buffer_status_t* rx_buffer_status )
{
 8045d7c:	b580      	push	{r7, lr}
 8045d7e:	b086      	sub	sp, #24
 8045d80:	af02      	add	r7, sp, #8
 8045d82:	6078      	str	r0, [r7, #4]
 8045d84:	6039      	str	r1, [r7, #0]
    uint8_t         cbuffer[LR1110_RADIO_GET_RXBUFFER_STATUS_CMD_LENGTH];
    uint8_t         rbuffer[sizeof( *rx_buffer_status )] = { 0x00 };
 8045d86:	2300      	movs	r3, #0
 8045d88:	813b      	strh	r3, [r7, #8]
    lr1110_status_t status                               = LR1110_STATUS_ERROR;
 8045d8a:	2303      	movs	r3, #3
 8045d8c:	73fb      	strb	r3, [r7, #15]

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_RXBUFFER_STATUS_OC >> 8 );
 8045d8e:	2302      	movs	r3, #2
 8045d90:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_RXBUFFER_STATUS_OC >> 0 );
 8045d92:	2303      	movs	r3, #3
 8045d94:	737b      	strb	r3, [r7, #13]

    status = ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_RXBUFFER_STATUS_CMD_LENGTH,
 8045d96:	f107 0308 	add.w	r3, r7, #8
 8045d9a:	f107 010c 	add.w	r1, r7, #12
 8045d9e:	2202      	movs	r2, #2
 8045da0:	9200      	str	r2, [sp, #0]
 8045da2:	2202      	movs	r2, #2
 8045da4:	6878      	ldr	r0, [r7, #4]
 8045da6:	f7fe f8f2 	bl	8043f8e <lr1110_hal_read>
 8045daa:	4603      	mov	r3, r0
 8045dac:	73fb      	strb	r3, [r7, #15]
                                                  rbuffer, sizeof( *rx_buffer_status ) );

    if( status == LR1110_STATUS_OK )
 8045dae:	7bfb      	ldrb	r3, [r7, #15]
 8045db0:	2b00      	cmp	r3, #0
 8045db2:	d105      	bne.n	8045dc0 <lr1110_radio_get_rx_buffer_status+0x44>
    {
        rx_buffer_status->pld_len_in_bytes     = rbuffer[0];
 8045db4:	7a3a      	ldrb	r2, [r7, #8]
 8045db6:	683b      	ldr	r3, [r7, #0]
 8045db8:	701a      	strb	r2, [r3, #0]
        rx_buffer_status->buffer_start_pointer = rbuffer[1];
 8045dba:	7a7a      	ldrb	r2, [r7, #9]
 8045dbc:	683b      	ldr	r3, [r7, #0]
 8045dbe:	705a      	strb	r2, [r3, #1]
    }

    return status;
 8045dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8045dc2:	4618      	mov	r0, r3
 8045dc4:	3710      	adds	r7, #16
 8045dc6:	46bd      	mov	sp, r7
 8045dc8:	bd80      	pop	{r7, pc}

08045dca <lr1110_radio_get_gfsk_pkt_status>:

lr1110_status_t lr1110_radio_get_gfsk_pkt_status( const void* context, lr1110_radio_pkt_status_gfsk_t* pkt_status )
{
 8045dca:	b580      	push	{r7, lr}
 8045dcc:	b086      	sub	sp, #24
 8045dce:	af02      	add	r7, sp, #8
 8045dd0:	6078      	str	r0, [r7, #4]
 8045dd2:	6039      	str	r1, [r7, #0]
    uint8_t         cbuffer[LR1110_RADIO_GET_PKT_STATUS_CMD_LENGTH];
    uint8_t         rbuffer[4] = { 0x00 };
 8045dd4:	2300      	movs	r3, #0
 8045dd6:	60bb      	str	r3, [r7, #8]
    lr1110_status_t status     = LR1110_STATUS_ERROR;
 8045dd8:	2303      	movs	r3, #3
 8045dda:	73fb      	strb	r3, [r7, #15]

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PKT_STATUS_OC >> 8 );
 8045ddc:	2302      	movs	r3, #2
 8045dde:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_PKT_STATUS_OC >> 0 );
 8045de0:	2304      	movs	r3, #4
 8045de2:	737b      	strb	r3, [r7, #13]

    status =
        ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_PKT_STATUS_CMD_LENGTH, rbuffer, 4 );
 8045de4:	f107 0308 	add.w	r3, r7, #8
 8045de8:	f107 010c 	add.w	r1, r7, #12
 8045dec:	2204      	movs	r2, #4
 8045dee:	9200      	str	r2, [sp, #0]
 8045df0:	2202      	movs	r2, #2
 8045df2:	6878      	ldr	r0, [r7, #4]
 8045df4:	f7fe f8cb 	bl	8043f8e <lr1110_hal_read>
 8045df8:	4603      	mov	r3, r0
 8045dfa:	73fb      	strb	r3, [r7, #15]

    if( status == LR1110_STATUS_OK )
 8045dfc:	7bfb      	ldrb	r3, [r7, #15]
 8045dfe:	2b00      	cmp	r3, #0
 8045e00:	d153      	bne.n	8045eaa <lr1110_radio_get_gfsk_pkt_status+0xe0>
    {
        pkt_status->rssi_sync_in_dbm = -( int8_t )( rbuffer[0] >> 1 );
 8045e02:	7a3b      	ldrb	r3, [r7, #8]
 8045e04:	085b      	lsrs	r3, r3, #1
 8045e06:	b2db      	uxtb	r3, r3
 8045e08:	425b      	negs	r3, r3
 8045e0a:	b2db      	uxtb	r3, r3
 8045e0c:	b25a      	sxtb	r2, r3
 8045e0e:	683b      	ldr	r3, [r7, #0]
 8045e10:	701a      	strb	r2, [r3, #0]
        pkt_status->rssi_avg_in_dbm  = -( int8_t )( rbuffer[1] >> 1 );
 8045e12:	7a7b      	ldrb	r3, [r7, #9]
 8045e14:	085b      	lsrs	r3, r3, #1
 8045e16:	b2db      	uxtb	r3, r3
 8045e18:	425b      	negs	r3, r3
 8045e1a:	b2db      	uxtb	r3, r3
 8045e1c:	b25a      	sxtb	r2, r3
 8045e1e:	683b      	ldr	r3, [r7, #0]
 8045e20:	705a      	strb	r2, [r3, #1]
        pkt_status->rx_len_in_bytes  = rbuffer[2];
 8045e22:	7aba      	ldrb	r2, [r7, #10]
 8045e24:	683b      	ldr	r3, [r7, #0]
 8045e26:	709a      	strb	r2, [r3, #2]
        pkt_status->is_addr_err      = ( ( rbuffer[3] & 0x20 ) != 0 ) ? true : false;
 8045e28:	7afb      	ldrb	r3, [r7, #11]
 8045e2a:	115b      	asrs	r3, r3, #5
 8045e2c:	f003 0301 	and.w	r3, r3, #1
 8045e30:	2b00      	cmp	r3, #0
 8045e32:	bf14      	ite	ne
 8045e34:	2301      	movne	r3, #1
 8045e36:	2300      	moveq	r3, #0
 8045e38:	b2da      	uxtb	r2, r3
 8045e3a:	683b      	ldr	r3, [r7, #0]
 8045e3c:	70da      	strb	r2, [r3, #3]
        pkt_status->is_crc_err       = ( ( rbuffer[3] & 0x10 ) != 0 ) ? true : false;
 8045e3e:	7afb      	ldrb	r3, [r7, #11]
 8045e40:	111b      	asrs	r3, r3, #4
 8045e42:	f003 0301 	and.w	r3, r3, #1
 8045e46:	2b00      	cmp	r3, #0
 8045e48:	bf14      	ite	ne
 8045e4a:	2301      	movne	r3, #1
 8045e4c:	2300      	moveq	r3, #0
 8045e4e:	b2da      	uxtb	r2, r3
 8045e50:	683b      	ldr	r3, [r7, #0]
 8045e52:	711a      	strb	r2, [r3, #4]
        pkt_status->is_len_err       = ( ( rbuffer[3] & 0x08 ) != 0 ) ? true : false;
 8045e54:	7afb      	ldrb	r3, [r7, #11]
 8045e56:	10db      	asrs	r3, r3, #3
 8045e58:	f003 0301 	and.w	r3, r3, #1
 8045e5c:	2b00      	cmp	r3, #0
 8045e5e:	bf14      	ite	ne
 8045e60:	2301      	movne	r3, #1
 8045e62:	2300      	moveq	r3, #0
 8045e64:	b2da      	uxtb	r2, r3
 8045e66:	683b      	ldr	r3, [r7, #0]
 8045e68:	715a      	strb	r2, [r3, #5]
        pkt_status->is_abort_err     = ( ( rbuffer[3] & 0x04 ) != 0 ) ? true : false;
 8045e6a:	7afb      	ldrb	r3, [r7, #11]
 8045e6c:	109b      	asrs	r3, r3, #2
 8045e6e:	f003 0301 	and.w	r3, r3, #1
 8045e72:	2b00      	cmp	r3, #0
 8045e74:	bf14      	ite	ne
 8045e76:	2301      	movne	r3, #1
 8045e78:	2300      	moveq	r3, #0
 8045e7a:	b2da      	uxtb	r2, r3
 8045e7c:	683b      	ldr	r3, [r7, #0]
 8045e7e:	719a      	strb	r2, [r3, #6]
        pkt_status->is_received      = ( ( rbuffer[3] & 0x02 ) != 0 ) ? true : false;
 8045e80:	7afb      	ldrb	r3, [r7, #11]
 8045e82:	105b      	asrs	r3, r3, #1
 8045e84:	f003 0301 	and.w	r3, r3, #1
 8045e88:	2b00      	cmp	r3, #0
 8045e8a:	bf14      	ite	ne
 8045e8c:	2301      	movne	r3, #1
 8045e8e:	2300      	moveq	r3, #0
 8045e90:	b2da      	uxtb	r2, r3
 8045e92:	683b      	ldr	r3, [r7, #0]
 8045e94:	71da      	strb	r2, [r3, #7]
        pkt_status->is_sent          = ( ( rbuffer[3] & 0x01 ) != 0 ) ? true : false;
 8045e96:	7afb      	ldrb	r3, [r7, #11]
 8045e98:	f003 0301 	and.w	r3, r3, #1
 8045e9c:	2b00      	cmp	r3, #0
 8045e9e:	bf14      	ite	ne
 8045ea0:	2301      	movne	r3, #1
 8045ea2:	2300      	moveq	r3, #0
 8045ea4:	b2da      	uxtb	r2, r3
 8045ea6:	683b      	ldr	r3, [r7, #0]
 8045ea8:	721a      	strb	r2, [r3, #8]
    }

    return status;
 8045eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8045eac:	4618      	mov	r0, r3
 8045eae:	3710      	adds	r7, #16
 8045eb0:	46bd      	mov	sp, r7
 8045eb2:	bd80      	pop	{r7, pc}

08045eb4 <lr1110_radio_get_lora_pkt_status>:

lr1110_status_t lr1110_radio_get_lora_pkt_status( const void* context, lr1110_radio_pkt_status_lora_t* pkt_status )
{
 8045eb4:	b580      	push	{r7, lr}
 8045eb6:	b086      	sub	sp, #24
 8045eb8:	af02      	add	r7, sp, #8
 8045eba:	6078      	str	r0, [r7, #4]
 8045ebc:	6039      	str	r1, [r7, #0]
    uint8_t         cbuffer[LR1110_RADIO_GET_PKT_STATUS_CMD_LENGTH];
    uint8_t         rbuffer[3] = { 0x00 };
 8045ebe:	4b1b      	ldr	r3, [pc, #108]	; (8045f2c <lr1110_radio_get_lora_pkt_status+0x78>)
 8045ec0:	881b      	ldrh	r3, [r3, #0]
 8045ec2:	813b      	strh	r3, [r7, #8]
 8045ec4:	2300      	movs	r3, #0
 8045ec6:	72bb      	strb	r3, [r7, #10]
    lr1110_status_t status     = LR1110_STATUS_ERROR;
 8045ec8:	2303      	movs	r3, #3
 8045eca:	73fb      	strb	r3, [r7, #15]

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PKT_STATUS_OC >> 8 );
 8045ecc:	2302      	movs	r3, #2
 8045ece:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_PKT_STATUS_OC >> 0 );
 8045ed0:	2304      	movs	r3, #4
 8045ed2:	737b      	strb	r3, [r7, #13]

    status =
        ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_PKT_STATUS_CMD_LENGTH, rbuffer, 3 );
 8045ed4:	f107 0308 	add.w	r3, r7, #8
 8045ed8:	f107 010c 	add.w	r1, r7, #12
 8045edc:	2203      	movs	r2, #3
 8045ede:	9200      	str	r2, [sp, #0]
 8045ee0:	2202      	movs	r2, #2
 8045ee2:	6878      	ldr	r0, [r7, #4]
 8045ee4:	f7fe f853 	bl	8043f8e <lr1110_hal_read>
 8045ee8:	4603      	mov	r3, r0
 8045eea:	73fb      	strb	r3, [r7, #15]

    if( status == LR1110_STATUS_OK )
 8045eec:	7bfb      	ldrb	r3, [r7, #15]
 8045eee:	2b00      	cmp	r3, #0
 8045ef0:	d116      	bne.n	8045f20 <lr1110_radio_get_lora_pkt_status+0x6c>
    {
        pkt_status->rssi_pkt_in_dbm        = -( int8_t )( rbuffer[0] >> 1 );
 8045ef2:	7a3b      	ldrb	r3, [r7, #8]
 8045ef4:	085b      	lsrs	r3, r3, #1
 8045ef6:	b2db      	uxtb	r3, r3
 8045ef8:	425b      	negs	r3, r3
 8045efa:	b2db      	uxtb	r3, r3
 8045efc:	b25a      	sxtb	r2, r3
 8045efe:	683b      	ldr	r3, [r7, #0]
 8045f00:	701a      	strb	r2, [r3, #0]
        pkt_status->snr_pkt_in_db          = ( ( ( int8_t ) rbuffer[1] ) + 2 ) >> 2;
 8045f02:	7a7b      	ldrb	r3, [r7, #9]
 8045f04:	b25b      	sxtb	r3, r3
 8045f06:	3302      	adds	r3, #2
 8045f08:	109b      	asrs	r3, r3, #2
 8045f0a:	b25a      	sxtb	r2, r3
 8045f0c:	683b      	ldr	r3, [r7, #0]
 8045f0e:	705a      	strb	r2, [r3, #1]
        pkt_status->signal_rssi_pkt_in_dbm = -( int8_t )( rbuffer[2] >> 1 );
 8045f10:	7abb      	ldrb	r3, [r7, #10]
 8045f12:	085b      	lsrs	r3, r3, #1
 8045f14:	b2db      	uxtb	r3, r3
 8045f16:	425b      	negs	r3, r3
 8045f18:	b2db      	uxtb	r3, r3
 8045f1a:	b25a      	sxtb	r2, r3
 8045f1c:	683b      	ldr	r3, [r7, #0]
 8045f1e:	709a      	strb	r2, [r3, #2]
    }

    return status;
 8045f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8045f22:	4618      	mov	r0, r3
 8045f24:	3710      	adds	r7, #16
 8045f26:	46bd      	mov	sp, r7
 8045f28:	bd80      	pop	{r7, pc}
 8045f2a:	bf00      	nop
 8045f2c:	0804e7f0 	.word	0x0804e7f0

08045f30 <lr1110_radio_get_rssi_inst>:

lr1110_status_t lr1110_radio_get_rssi_inst( const void* context, int8_t* rssi_in_dbm )
{
 8045f30:	b580      	push	{r7, lr}
 8045f32:	b086      	sub	sp, #24
 8045f34:	af02      	add	r7, sp, #8
 8045f36:	6078      	str	r0, [r7, #4]
 8045f38:	6039      	str	r1, [r7, #0]
    uint8_t         cbuffer[LR1110_RADIO_GET_RSSI_INST_CMD_LENGTH];
    uint8_t         rssi   = 0;
 8045f3a:	2300      	movs	r3, #0
 8045f3c:	72fb      	strb	r3, [r7, #11]
    lr1110_status_t status = LR1110_STATUS_ERROR;
 8045f3e:	2303      	movs	r3, #3
 8045f40:	73fb      	strb	r3, [r7, #15]

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_RSSI_INST_OC >> 8 );
 8045f42:	2302      	movs	r3, #2
 8045f44:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_RSSI_INST_OC >> 0 );
 8045f46:	2305      	movs	r3, #5
 8045f48:	737b      	strb	r3, [r7, #13]

    status = ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_RSSI_INST_CMD_LENGTH, &rssi,
 8045f4a:	f107 030b 	add.w	r3, r7, #11
 8045f4e:	f107 010c 	add.w	r1, r7, #12
 8045f52:	2201      	movs	r2, #1
 8045f54:	9200      	str	r2, [sp, #0]
 8045f56:	2202      	movs	r2, #2
 8045f58:	6878      	ldr	r0, [r7, #4]
 8045f5a:	f7fe f818 	bl	8043f8e <lr1110_hal_read>
 8045f5e:	4603      	mov	r3, r0
 8045f60:	73fb      	strb	r3, [r7, #15]
                                                  sizeof( rssi ) );

    if( status == LR1110_STATUS_OK )
 8045f62:	7bfb      	ldrb	r3, [r7, #15]
 8045f64:	2b00      	cmp	r3, #0
 8045f66:	d107      	bne.n	8045f78 <lr1110_radio_get_rssi_inst+0x48>
    {
        *rssi_in_dbm = -( int8_t )( rssi >> 1 );
 8045f68:	7afb      	ldrb	r3, [r7, #11]
 8045f6a:	085b      	lsrs	r3, r3, #1
 8045f6c:	b2db      	uxtb	r3, r3
 8045f6e:	425b      	negs	r3, r3
 8045f70:	b2db      	uxtb	r3, r3
 8045f72:	b25a      	sxtb	r2, r3
 8045f74:	683b      	ldr	r3, [r7, #0]
 8045f76:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8045f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8045f7a:	4618      	mov	r0, r3
 8045f7c:	3710      	adds	r7, #16
 8045f7e:	46bd      	mov	sp, r7
 8045f80:	bd80      	pop	{r7, pc}

08045f82 <lr1110_radio_set_gfsk_sync_word>:

lr1110_status_t lr1110_radio_set_gfsk_sync_word( const void* context, const uint8_t* gfsk_sync_word )
{
 8045f82:	b580      	push	{r7, lr}
 8045f84:	b088      	sub	sp, #32
 8045f86:	af02      	add	r7, sp, #8
 8045f88:	6078      	str	r0, [r7, #4]
 8045f8a:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_GFSK_SYNC_WORD_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_SYNC_WORD_OC >> 8 );
 8045f8c:	2302      	movs	r3, #2
 8045f8e:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_GFSK_SYNC_WORD_OC >> 0 );
 8045f90:	2306      	movs	r3, #6
 8045f92:	737b      	strb	r3, [r7, #13]

    for( uint8_t index = 0; index < 8; index++ )
 8045f94:	2300      	movs	r3, #0
 8045f96:	75fb      	strb	r3, [r7, #23]
 8045f98:	e00d      	b.n	8045fb6 <lr1110_radio_set_gfsk_sync_word+0x34>
    {
        cbuffer[2 + index] = gfsk_sync_word[index];
 8045f9a:	7dfb      	ldrb	r3, [r7, #23]
 8045f9c:	683a      	ldr	r2, [r7, #0]
 8045f9e:	441a      	add	r2, r3
 8045fa0:	7dfb      	ldrb	r3, [r7, #23]
 8045fa2:	3302      	adds	r3, #2
 8045fa4:	7812      	ldrb	r2, [r2, #0]
 8045fa6:	f107 0118 	add.w	r1, r7, #24
 8045faa:	440b      	add	r3, r1
 8045fac:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for( uint8_t index = 0; index < 8; index++ )
 8045fb0:	7dfb      	ldrb	r3, [r7, #23]
 8045fb2:	3301      	adds	r3, #1
 8045fb4:	75fb      	strb	r3, [r7, #23]
 8045fb6:	7dfb      	ldrb	r3, [r7, #23]
 8045fb8:	2b07      	cmp	r3, #7
 8045fba:	d9ee      	bls.n	8045f9a <lr1110_radio_set_gfsk_sync_word+0x18>
    }

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_GFSK_SYNC_WORD_CMD_LENGTH, 0, 0 );
 8045fbc:	f107 010c 	add.w	r1, r7, #12
 8045fc0:	2300      	movs	r3, #0
 8045fc2:	9300      	str	r3, [sp, #0]
 8045fc4:	2300      	movs	r3, #0
 8045fc6:	220a      	movs	r2, #10
 8045fc8:	6878      	ldr	r0, [r7, #4]
 8045fca:	f7fd ff85 	bl	8043ed8 <lr1110_hal_write>
 8045fce:	4603      	mov	r3, r0
}
 8045fd0:	4618      	mov	r0, r3
 8045fd2:	3718      	adds	r7, #24
 8045fd4:	46bd      	mov	sp, r7
 8045fd6:	bd80      	pop	{r7, pc}

08045fd8 <lr1110_radio_set_lora_sync_word>:
only, please use lr1110_radio_set_lora_public_network. \
To deactivate this warning, define C preprocessor symbol \
LR1110_DISABLE_WARNINGS."
#endif
lr1110_status_t lr1110_radio_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 8045fd8:	b580      	push	{r7, lr}
 8045fda:	b086      	sub	sp, #24
 8045fdc:	af02      	add	r7, sp, #8
 8045fde:	6078      	str	r0, [r7, #4]
 8045fe0:	460b      	mov	r3, r1
 8045fe2:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_WORD_OC >> 8 );
 8045fe4:	2302      	movs	r3, #2
 8045fe6:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_WORD_OC >> 0 );
 8045fe8:	232b      	movs	r3, #43	; 0x2b
 8045fea:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = sync_word;
 8045fec:	78fb      	ldrb	r3, [r7, #3]
 8045fee:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH, 0, 0 );
 8045ff0:	f107 010c 	add.w	r1, r7, #12
 8045ff4:	2300      	movs	r3, #0
 8045ff6:	9300      	str	r3, [sp, #0]
 8045ff8:	2300      	movs	r3, #0
 8045ffa:	2203      	movs	r2, #3
 8045ffc:	6878      	ldr	r0, [r7, #4]
 8045ffe:	f7fd ff6b 	bl	8043ed8 <lr1110_hal_write>
 8046002:	4603      	mov	r3, r0
}
 8046004:	4618      	mov	r0, r3
 8046006:	3710      	adds	r7, #16
 8046008:	46bd      	mov	sp, r7
 804600a:	bd80      	pop	{r7, pc}

0804600c <lr1110_radio_set_rx>:

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH, 0, 0 );
}

lr1110_status_t lr1110_radio_set_rx( const void* context, const uint32_t timeout_in_ms )
{
 804600c:	b580      	push	{r7, lr}
 804600e:	b084      	sub	sp, #16
 8046010:	af00      	add	r7, sp, #0
 8046012:	6078      	str	r0, [r7, #4]
 8046014:	6039      	str	r1, [r7, #0]
    const uint32_t timeout_in_rtc_step = lr1110_radio_convert_time_in_ms_to_rtc_step( timeout_in_ms );
 8046016:	6838      	ldr	r0, [r7, #0]
 8046018:	f000 fac6 	bl	80465a8 <lr1110_radio_convert_time_in_ms_to_rtc_step>
 804601c:	60f8      	str	r0, [r7, #12]

    return lr1110_radio_set_rx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 804601e:	68f9      	ldr	r1, [r7, #12]
 8046020:	6878      	ldr	r0, [r7, #4]
 8046022:	f000 f805 	bl	8046030 <lr1110_radio_set_rx_with_timeout_in_rtc_step>
 8046026:	4603      	mov	r3, r0
}
 8046028:	4618      	mov	r0, r3
 804602a:	3710      	adds	r7, #16
 804602c:	46bd      	mov	sp, r7
 804602e:	bd80      	pop	{r7, pc}

08046030 <lr1110_radio_set_rx_with_timeout_in_rtc_step>:

lr1110_status_t lr1110_radio_set_rx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout )
{
 8046030:	b580      	push	{r7, lr}
 8046032:	b086      	sub	sp, #24
 8046034:	af02      	add	r7, sp, #8
 8046036:	6078      	str	r0, [r7, #4]
 8046038:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_RX_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_OC >> 8 );
 804603a:	2302      	movs	r3, #2
 804603c:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_RX_OC >> 0 );
 804603e:	2309      	movs	r3, #9
 8046040:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t )( timeout >> 16 );
 8046042:	683b      	ldr	r3, [r7, #0]
 8046044:	0c1b      	lsrs	r3, r3, #16
 8046046:	b2db      	uxtb	r3, r3
 8046048:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t )( timeout >> 8 );
 804604a:	683b      	ldr	r3, [r7, #0]
 804604c:	0a1b      	lsrs	r3, r3, #8
 804604e:	b2db      	uxtb	r3, r3
 8046050:	72fb      	strb	r3, [r7, #11]
    cbuffer[4] = ( uint8_t )( timeout >> 0 );
 8046052:	683b      	ldr	r3, [r7, #0]
 8046054:	b2db      	uxtb	r3, r3
 8046056:	733b      	strb	r3, [r7, #12]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_RX_CMD_LENGTH, 0, 0 );
 8046058:	f107 0108 	add.w	r1, r7, #8
 804605c:	2300      	movs	r3, #0
 804605e:	9300      	str	r3, [sp, #0]
 8046060:	2300      	movs	r3, #0
 8046062:	2205      	movs	r2, #5
 8046064:	6878      	ldr	r0, [r7, #4]
 8046066:	f7fd ff37 	bl	8043ed8 <lr1110_hal_write>
 804606a:	4603      	mov	r3, r0
}
 804606c:	4618      	mov	r0, r3
 804606e:	3710      	adds	r7, #16
 8046070:	46bd      	mov	sp, r7
 8046072:	bd80      	pop	{r7, pc}

08046074 <lr1110_radio_set_tx>:

lr1110_status_t lr1110_radio_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 8046074:	b580      	push	{r7, lr}
 8046076:	b084      	sub	sp, #16
 8046078:	af00      	add	r7, sp, #0
 804607a:	6078      	str	r0, [r7, #4]
 804607c:	6039      	str	r1, [r7, #0]
    const uint32_t timeout_in_rtc_step = lr1110_radio_convert_time_in_ms_to_rtc_step( timeout_in_ms );
 804607e:	6838      	ldr	r0, [r7, #0]
 8046080:	f000 fa92 	bl	80465a8 <lr1110_radio_convert_time_in_ms_to_rtc_step>
 8046084:	60f8      	str	r0, [r7, #12]

    return lr1110_radio_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8046086:	68f9      	ldr	r1, [r7, #12]
 8046088:	6878      	ldr	r0, [r7, #4]
 804608a:	f000 f805 	bl	8046098 <lr1110_radio_set_tx_with_timeout_in_rtc_step>
 804608e:	4603      	mov	r3, r0
}
 8046090:	4618      	mov	r0, r3
 8046092:	3710      	adds	r7, #16
 8046094:	46bd      	mov	sp, r7
 8046096:	bd80      	pop	{r7, pc}

08046098 <lr1110_radio_set_tx_with_timeout_in_rtc_step>:

lr1110_status_t lr1110_radio_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8046098:	b580      	push	{r7, lr}
 804609a:	b086      	sub	sp, #24
 804609c:	af02      	add	r7, sp, #8
 804609e:	6078      	str	r0, [r7, #4]
 80460a0:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_TX_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_OC >> 8 );
 80460a2:	2302      	movs	r3, #2
 80460a4:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_TX_OC >> 0 );
 80460a6:	230a      	movs	r3, #10
 80460a8:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 80460aa:	683b      	ldr	r3, [r7, #0]
 80460ac:	0c1b      	lsrs	r3, r3, #16
 80460ae:	b2db      	uxtb	r3, r3
 80460b0:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 80460b2:	683b      	ldr	r3, [r7, #0]
 80460b4:	0a1b      	lsrs	r3, r3, #8
 80460b6:	b2db      	uxtb	r3, r3
 80460b8:	72fb      	strb	r3, [r7, #11]
    cbuffer[4] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 80460ba:	683b      	ldr	r3, [r7, #0]
 80460bc:	b2db      	uxtb	r3, r3
 80460be:	733b      	strb	r3, [r7, #12]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_TX_CMD_LENGTH, 0, 0 );
 80460c0:	f107 0108 	add.w	r1, r7, #8
 80460c4:	2300      	movs	r3, #0
 80460c6:	9300      	str	r3, [sp, #0]
 80460c8:	2300      	movs	r3, #0
 80460ca:	2205      	movs	r2, #5
 80460cc:	6878      	ldr	r0, [r7, #4]
 80460ce:	f7fd ff03 	bl	8043ed8 <lr1110_hal_write>
 80460d2:	4603      	mov	r3, r0
}
 80460d4:	4618      	mov	r0, r3
 80460d6:	3710      	adds	r7, #16
 80460d8:	46bd      	mov	sp, r7
 80460da:	bd80      	pop	{r7, pc}

080460dc <lr1110_radio_set_rf_freq>:

lr1110_status_t lr1110_radio_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 80460dc:	b580      	push	{r7, lr}
 80460de:	b086      	sub	sp, #24
 80460e0:	af02      	add	r7, sp, #8
 80460e2:	6078      	str	r0, [r7, #4]
 80460e4:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_RF_FREQUENCY_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RF_FREQUENCY_OC >> 8 );
 80460e6:	2302      	movs	r3, #2
 80460e8:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_RF_FREQUENCY_OC >> 0 );
 80460ea:	230b      	movs	r3, #11
 80460ec:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t )( freq_in_hz >> 24 );
 80460ee:	683b      	ldr	r3, [r7, #0]
 80460f0:	0e1b      	lsrs	r3, r3, #24
 80460f2:	b2db      	uxtb	r3, r3
 80460f4:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t )( freq_in_hz >> 16 );
 80460f6:	683b      	ldr	r3, [r7, #0]
 80460f8:	0c1b      	lsrs	r3, r3, #16
 80460fa:	b2db      	uxtb	r3, r3
 80460fc:	72fb      	strb	r3, [r7, #11]
    cbuffer[4] = ( uint8_t )( freq_in_hz >> 8 );
 80460fe:	683b      	ldr	r3, [r7, #0]
 8046100:	0a1b      	lsrs	r3, r3, #8
 8046102:	b2db      	uxtb	r3, r3
 8046104:	733b      	strb	r3, [r7, #12]
    cbuffer[5] = ( uint8_t )( freq_in_hz >> 0 );
 8046106:	683b      	ldr	r3, [r7, #0]
 8046108:	b2db      	uxtb	r3, r3
 804610a:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_RF_FREQUENCY_CMD_LENGTH, 0, 0 );
 804610c:	f107 0108 	add.w	r1, r7, #8
 8046110:	2300      	movs	r3, #0
 8046112:	9300      	str	r3, [sp, #0]
 8046114:	2300      	movs	r3, #0
 8046116:	2206      	movs	r2, #6
 8046118:	6878      	ldr	r0, [r7, #4]
 804611a:	f7fd fedd 	bl	8043ed8 <lr1110_hal_write>
 804611e:	4603      	mov	r3, r0
}
 8046120:	4618      	mov	r0, r3
 8046122:	3710      	adds	r7, #16
 8046124:	46bd      	mov	sp, r7
 8046126:	bd80      	pop	{r7, pc}

08046128 <lr1110_radio_set_pkt_type>:

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_CAD_PARAMS_CMD_LENGTH, 0, 0 );
}

lr1110_status_t lr1110_radio_set_pkt_type( const void* context, const lr1110_radio_pkt_type_t pkt_type )
{
 8046128:	b580      	push	{r7, lr}
 804612a:	b086      	sub	sp, #24
 804612c:	af02      	add	r7, sp, #8
 804612e:	6078      	str	r0, [r7, #4]
 8046130:	460b      	mov	r3, r1
 8046132:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_RADIO_SET_PKT_TYPE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PKT_TYPE_OC >> 8 );
 8046134:	2302      	movs	r3, #2
 8046136:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PKT_TYPE_OC >> 0 );
 8046138:	230e      	movs	r3, #14
 804613a:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t ) pkt_type;
 804613c:	78fb      	ldrb	r3, [r7, #3]
 804613e:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_PKT_TYPE_CMD_LENGTH, 0, 0 );
 8046140:	f107 010c 	add.w	r1, r7, #12
 8046144:	2300      	movs	r3, #0
 8046146:	9300      	str	r3, [sp, #0]
 8046148:	2300      	movs	r3, #0
 804614a:	2203      	movs	r2, #3
 804614c:	6878      	ldr	r0, [r7, #4]
 804614e:	f7fd fec3 	bl	8043ed8 <lr1110_hal_write>
 8046152:	4603      	mov	r3, r0
}
 8046154:	4618      	mov	r0, r3
 8046156:	3710      	adds	r7, #16
 8046158:	46bd      	mov	sp, r7
 804615a:	bd80      	pop	{r7, pc}

0804615c <lr1110_radio_set_gfsk_mod_params>:

lr1110_status_t lr1110_radio_set_gfsk_mod_params( const void*                           context,
                                                  const lr1110_radio_mod_params_gfsk_t* mod_params )
{
 804615c:	b580      	push	{r7, lr}
 804615e:	b088      	sub	sp, #32
 8046160:	af02      	add	r7, sp, #8
 8046162:	6078      	str	r0, [r7, #4]
 8046164:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_MODULATION_PARAMS_GFSK_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 8 );
 8046166:	2302      	movs	r3, #2
 8046168:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 0 );
 804616a:	230f      	movs	r3, #15
 804616c:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t )( mod_params->br_in_bps >> 24 );
 804616e:	683b      	ldr	r3, [r7, #0]
 8046170:	681b      	ldr	r3, [r3, #0]
 8046172:	0e1b      	lsrs	r3, r3, #24
 8046174:	b2db      	uxtb	r3, r3
 8046176:	73bb      	strb	r3, [r7, #14]
    cbuffer[3] = ( uint8_t )( mod_params->br_in_bps >> 16 );
 8046178:	683b      	ldr	r3, [r7, #0]
 804617a:	681b      	ldr	r3, [r3, #0]
 804617c:	0c1b      	lsrs	r3, r3, #16
 804617e:	b2db      	uxtb	r3, r3
 8046180:	73fb      	strb	r3, [r7, #15]
    cbuffer[4] = ( uint8_t )( mod_params->br_in_bps >> 8 );
 8046182:	683b      	ldr	r3, [r7, #0]
 8046184:	681b      	ldr	r3, [r3, #0]
 8046186:	0a1b      	lsrs	r3, r3, #8
 8046188:	b2db      	uxtb	r3, r3
 804618a:	743b      	strb	r3, [r7, #16]
    cbuffer[5] = ( uint8_t )( mod_params->br_in_bps >> 0 );
 804618c:	683b      	ldr	r3, [r7, #0]
 804618e:	681b      	ldr	r3, [r3, #0]
 8046190:	b2db      	uxtb	r3, r3
 8046192:	747b      	strb	r3, [r7, #17]

    cbuffer[6] = ( uint8_t ) mod_params->pulse_shape;
 8046194:	683b      	ldr	r3, [r7, #0]
 8046196:	791b      	ldrb	r3, [r3, #4]
 8046198:	74bb      	strb	r3, [r7, #18]
    cbuffer[7] = ( uint8_t ) mod_params->bw_dsb_param;
 804619a:	683b      	ldr	r3, [r7, #0]
 804619c:	795b      	ldrb	r3, [r3, #5]
 804619e:	74fb      	strb	r3, [r7, #19]

    cbuffer[8]  = ( uint8_t )( mod_params->fdev_in_hz >> 24 );
 80461a0:	683b      	ldr	r3, [r7, #0]
 80461a2:	689b      	ldr	r3, [r3, #8]
 80461a4:	0e1b      	lsrs	r3, r3, #24
 80461a6:	b2db      	uxtb	r3, r3
 80461a8:	753b      	strb	r3, [r7, #20]
    cbuffer[9]  = ( uint8_t )( mod_params->fdev_in_hz >> 16 );
 80461aa:	683b      	ldr	r3, [r7, #0]
 80461ac:	689b      	ldr	r3, [r3, #8]
 80461ae:	0c1b      	lsrs	r3, r3, #16
 80461b0:	b2db      	uxtb	r3, r3
 80461b2:	757b      	strb	r3, [r7, #21]
    cbuffer[10] = ( uint8_t )( mod_params->fdev_in_hz >> 8 );
 80461b4:	683b      	ldr	r3, [r7, #0]
 80461b6:	689b      	ldr	r3, [r3, #8]
 80461b8:	0a1b      	lsrs	r3, r3, #8
 80461ba:	b2db      	uxtb	r3, r3
 80461bc:	75bb      	strb	r3, [r7, #22]
    cbuffer[11] = ( uint8_t )( mod_params->fdev_in_hz >> 0 );
 80461be:	683b      	ldr	r3, [r7, #0]
 80461c0:	689b      	ldr	r3, [r3, #8]
 80461c2:	b2db      	uxtb	r3, r3
 80461c4:	75fb      	strb	r3, [r7, #23]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_GFSK_CMD_LENGTH,
 80461c6:	f107 010c 	add.w	r1, r7, #12
 80461ca:	2300      	movs	r3, #0
 80461cc:	9300      	str	r3, [sp, #0]
 80461ce:	2300      	movs	r3, #0
 80461d0:	220c      	movs	r2, #12
 80461d2:	6878      	ldr	r0, [r7, #4]
 80461d4:	f7fd fe80 	bl	8043ed8 <lr1110_hal_write>
 80461d8:	4603      	mov	r3, r0
                                                 0, 0 );
}
 80461da:	4618      	mov	r0, r3
 80461dc:	3718      	adds	r7, #24
 80461de:	46bd      	mov	sp, r7
 80461e0:	bd80      	pop	{r7, pc}

080461e2 <lr1110_radio_set_lora_mod_params>:

lr1110_status_t lr1110_radio_set_lora_mod_params( const void*                           context,
                                                  const lr1110_radio_mod_params_lora_t* mod_params )
{
 80461e2:	b580      	push	{r7, lr}
 80461e4:	b086      	sub	sp, #24
 80461e6:	af02      	add	r7, sp, #8
 80461e8:	6078      	str	r0, [r7, #4]
 80461ea:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 8 );
 80461ec:	2302      	movs	r3, #2
 80461ee:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 0 );
 80461f0:	230f      	movs	r3, #15
 80461f2:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t ) mod_params->sf;
 80461f4:	683b      	ldr	r3, [r7, #0]
 80461f6:	781b      	ldrb	r3, [r3, #0]
 80461f8:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t ) mod_params->bw;
 80461fa:	683b      	ldr	r3, [r7, #0]
 80461fc:	785b      	ldrb	r3, [r3, #1]
 80461fe:	72fb      	strb	r3, [r7, #11]
    cbuffer[4] = ( uint8_t ) mod_params->cr;
 8046200:	683b      	ldr	r3, [r7, #0]
 8046202:	789b      	ldrb	r3, [r3, #2]
 8046204:	733b      	strb	r3, [r7, #12]
    cbuffer[5] = ( uint8_t ) mod_params->ldro;
 8046206:	683b      	ldr	r3, [r7, #0]
 8046208:	78db      	ldrb	r3, [r3, #3]
 804620a:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH,
 804620c:	f107 0108 	add.w	r1, r7, #8
 8046210:	2300      	movs	r3, #0
 8046212:	9300      	str	r3, [sp, #0]
 8046214:	2300      	movs	r3, #0
 8046216:	2206      	movs	r2, #6
 8046218:	6878      	ldr	r0, [r7, #4]
 804621a:	f7fd fe5d 	bl	8043ed8 <lr1110_hal_write>
 804621e:	4603      	mov	r3, r0
                                                 0, 0 );
}
 8046220:	4618      	mov	r0, r3
 8046222:	3710      	adds	r7, #16
 8046224:	46bd      	mov	sp, r7
 8046226:	bd80      	pop	{r7, pc}

08046228 <lr1110_radio_set_gfsk_pkt_params>:

lr1110_status_t lr1110_radio_set_gfsk_pkt_params( const void*                           context,
                                                  const lr1110_radio_pkt_params_gfsk_t* pkt_params )
{
 8046228:	b580      	push	{r7, lr}
 804622a:	b088      	sub	sp, #32
 804622c:	af02      	add	r7, sp, #8
 804622e:	6078      	str	r0, [r7, #4]
 8046230:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_PKT_PARAM_GFSK_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PKT_PARAM_OC >> 8 );
 8046232:	2302      	movs	r3, #2
 8046234:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PKT_PARAM_OC >> 0 );
 8046236:	2310      	movs	r3, #16
 8046238:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t )( pkt_params->preamble_len_in_bits >> 8 );
 804623a:	683b      	ldr	r3, [r7, #0]
 804623c:	881b      	ldrh	r3, [r3, #0]
 804623e:	0a1b      	lsrs	r3, r3, #8
 8046240:	b29b      	uxth	r3, r3
 8046242:	b2db      	uxtb	r3, r3
 8046244:	73bb      	strb	r3, [r7, #14]
    cbuffer[3] = ( uint8_t )( pkt_params->preamble_len_in_bits >> 0 );
 8046246:	683b      	ldr	r3, [r7, #0]
 8046248:	881b      	ldrh	r3, [r3, #0]
 804624a:	b2db      	uxtb	r3, r3
 804624c:	73fb      	strb	r3, [r7, #15]

    cbuffer[4] = ( uint8_t )( pkt_params->preamble_detector );
 804624e:	683b      	ldr	r3, [r7, #0]
 8046250:	789b      	ldrb	r3, [r3, #2]
 8046252:	743b      	strb	r3, [r7, #16]

    cbuffer[5] = pkt_params->sync_word_len_in_bits;
 8046254:	683b      	ldr	r3, [r7, #0]
 8046256:	78db      	ldrb	r3, [r3, #3]
 8046258:	747b      	strb	r3, [r7, #17]

    cbuffer[6] = ( uint8_t )( pkt_params->address_filtering );
 804625a:	683b      	ldr	r3, [r7, #0]
 804625c:	791b      	ldrb	r3, [r3, #4]
 804625e:	74bb      	strb	r3, [r7, #18]

    cbuffer[7] = ( uint8_t )( pkt_params->header_type );
 8046260:	683b      	ldr	r3, [r7, #0]
 8046262:	795b      	ldrb	r3, [r3, #5]
 8046264:	74fb      	strb	r3, [r7, #19]

    cbuffer[8] = pkt_params->pld_len_in_bytes;
 8046266:	683b      	ldr	r3, [r7, #0]
 8046268:	799b      	ldrb	r3, [r3, #6]
 804626a:	753b      	strb	r3, [r7, #20]

    cbuffer[9] = ( uint8_t )( pkt_params->crc_type );
 804626c:	683b      	ldr	r3, [r7, #0]
 804626e:	79db      	ldrb	r3, [r3, #7]
 8046270:	757b      	strb	r3, [r7, #21]

    cbuffer[10] = ( uint8_t )( pkt_params->dc_free );
 8046272:	683b      	ldr	r3, [r7, #0]
 8046274:	7a1b      	ldrb	r3, [r3, #8]
 8046276:	75bb      	strb	r3, [r7, #22]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_PKT_PARAM_GFSK_CMD_LENGTH, 0, 0 );
 8046278:	f107 010c 	add.w	r1, r7, #12
 804627c:	2300      	movs	r3, #0
 804627e:	9300      	str	r3, [sp, #0]
 8046280:	2300      	movs	r3, #0
 8046282:	220b      	movs	r2, #11
 8046284:	6878      	ldr	r0, [r7, #4]
 8046286:	f7fd fe27 	bl	8043ed8 <lr1110_hal_write>
 804628a:	4603      	mov	r3, r0
}
 804628c:	4618      	mov	r0, r3
 804628e:	3718      	adds	r7, #24
 8046290:	46bd      	mov	sp, r7
 8046292:	bd80      	pop	{r7, pc}

08046294 <lr1110_radio_set_lora_pkt_params>:

lr1110_status_t lr1110_radio_set_lora_pkt_params( const void*                           context,
                                                  const lr1110_radio_pkt_params_lora_t* pkt_params )
{
 8046294:	b580      	push	{r7, lr}
 8046296:	b086      	sub	sp, #24
 8046298:	af02      	add	r7, sp, #8
 804629a:	6078      	str	r0, [r7, #4]
 804629c:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_PKT_PARAM_LORA_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PKT_PARAM_OC >> 8 );
 804629e:	2302      	movs	r3, #2
 80462a0:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PKT_PARAM_OC >> 0 );
 80462a2:	2310      	movs	r3, #16
 80462a4:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t )( pkt_params->preamble_len_in_symb >> 8 );
 80462a6:	683b      	ldr	r3, [r7, #0]
 80462a8:	881b      	ldrh	r3, [r3, #0]
 80462aa:	0a1b      	lsrs	r3, r3, #8
 80462ac:	b29b      	uxth	r3, r3
 80462ae:	b2db      	uxtb	r3, r3
 80462b0:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t )( pkt_params->preamble_len_in_symb >> 0 );
 80462b2:	683b      	ldr	r3, [r7, #0]
 80462b4:	881b      	ldrh	r3, [r3, #0]
 80462b6:	b2db      	uxtb	r3, r3
 80462b8:	72fb      	strb	r3, [r7, #11]

    cbuffer[4] = ( uint8_t )( pkt_params->header_type );
 80462ba:	683b      	ldr	r3, [r7, #0]
 80462bc:	789b      	ldrb	r3, [r3, #2]
 80462be:	733b      	strb	r3, [r7, #12]

    cbuffer[5] = pkt_params->pld_len_in_bytes;
 80462c0:	683b      	ldr	r3, [r7, #0]
 80462c2:	78db      	ldrb	r3, [r3, #3]
 80462c4:	737b      	strb	r3, [r7, #13]

    cbuffer[6] = ( uint8_t )( pkt_params->crc );
 80462c6:	683b      	ldr	r3, [r7, #0]
 80462c8:	791b      	ldrb	r3, [r3, #4]
 80462ca:	73bb      	strb	r3, [r7, #14]

    cbuffer[7] = ( uint8_t )( pkt_params->iq );
 80462cc:	683b      	ldr	r3, [r7, #0]
 80462ce:	795b      	ldrb	r3, [r3, #5]
 80462d0:	73fb      	strb	r3, [r7, #15]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_PKT_PARAM_LORA_CMD_LENGTH, 0, 0 );
 80462d2:	f107 0108 	add.w	r1, r7, #8
 80462d6:	2300      	movs	r3, #0
 80462d8:	9300      	str	r3, [sp, #0]
 80462da:	2300      	movs	r3, #0
 80462dc:	2208      	movs	r2, #8
 80462de:	6878      	ldr	r0, [r7, #4]
 80462e0:	f7fd fdfa 	bl	8043ed8 <lr1110_hal_write>
 80462e4:	4603      	mov	r3, r0
}
 80462e6:	4618      	mov	r0, r3
 80462e8:	3710      	adds	r7, #16
 80462ea:	46bd      	mov	sp, r7
 80462ec:	bd80      	pop	{r7, pc}

080462ee <lr1110_radio_set_tx_params>:

lr1110_status_t lr1110_radio_set_tx_params( const void* context, const int8_t pwr_in_dbm,
                                            const lr1110_radio_ramp_time_t ramp_time )
{
 80462ee:	b580      	push	{r7, lr}
 80462f0:	b086      	sub	sp, #24
 80462f2:	af02      	add	r7, sp, #8
 80462f4:	6078      	str	r0, [r7, #4]
 80462f6:	460b      	mov	r3, r1
 80462f8:	70fb      	strb	r3, [r7, #3]
 80462fa:	4613      	mov	r3, r2
 80462fc:	70bb      	strb	r3, [r7, #2]
    uint8_t cbuffer[LR1110_RADIO_SET_TX_PARAMS_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_PARAMS_OC >> 8 );
 80462fe:	2302      	movs	r3, #2
 8046300:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_TX_PARAMS_OC >> 0 );
 8046302:	2311      	movs	r3, #17
 8046304:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t ) pwr_in_dbm;
 8046306:	78fb      	ldrb	r3, [r7, #3]
 8046308:	73bb      	strb	r3, [r7, #14]
    cbuffer[3] = ( uint8_t ) ramp_time;
 804630a:	78bb      	ldrb	r3, [r7, #2]
 804630c:	73fb      	strb	r3, [r7, #15]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_TX_PARAMS_CMD_LENGTH, 0, 0 );
 804630e:	f107 010c 	add.w	r1, r7, #12
 8046312:	2300      	movs	r3, #0
 8046314:	9300      	str	r3, [sp, #0]
 8046316:	2300      	movs	r3, #0
 8046318:	2204      	movs	r2, #4
 804631a:	6878      	ldr	r0, [r7, #4]
 804631c:	f7fd fddc 	bl	8043ed8 <lr1110_hal_write>
 8046320:	4603      	mov	r3, r0
}
 8046322:	4618      	mov	r0, r3
 8046324:	3710      	adds	r7, #16
 8046326:	46bd      	mov	sp, r7
 8046328:	bd80      	pop	{r7, pc}

0804632a <lr1110_radio_set_rx_duty_cycle>:
}

lr1110_status_t lr1110_radio_set_rx_duty_cycle( const void* context, const uint32_t rx_period_in_ms,
                                                const uint32_t                          sleep_period_in_ms,
                                                const lr1110_radio_rx_duty_cycle_mode_t mode )
{
 804632a:	b580      	push	{r7, lr}
 804632c:	b086      	sub	sp, #24
 804632e:	af00      	add	r7, sp, #0
 8046330:	60f8      	str	r0, [r7, #12]
 8046332:	60b9      	str	r1, [r7, #8]
 8046334:	607a      	str	r2, [r7, #4]
 8046336:	70fb      	strb	r3, [r7, #3]
    const uint32_t rx_period_in_rtc_step    = lr1110_radio_convert_time_in_ms_to_rtc_step( rx_period_in_ms );
 8046338:	68b8      	ldr	r0, [r7, #8]
 804633a:	f000 f935 	bl	80465a8 <lr1110_radio_convert_time_in_ms_to_rtc_step>
 804633e:	6178      	str	r0, [r7, #20]
    const uint32_t sleep_period_in_rtc_step = lr1110_radio_convert_time_in_ms_to_rtc_step( sleep_period_in_ms );
 8046340:	6878      	ldr	r0, [r7, #4]
 8046342:	f000 f931 	bl	80465a8 <lr1110_radio_convert_time_in_ms_to_rtc_step>
 8046346:	6138      	str	r0, [r7, #16]

    return lr1110_radio_set_rx_duty_cycle_with_timings_in_rtc_step( context, rx_period_in_rtc_step,
 8046348:	78fb      	ldrb	r3, [r7, #3]
 804634a:	693a      	ldr	r2, [r7, #16]
 804634c:	6979      	ldr	r1, [r7, #20]
 804634e:	68f8      	ldr	r0, [r7, #12]
 8046350:	f000 f805 	bl	804635e <lr1110_radio_set_rx_duty_cycle_with_timings_in_rtc_step>
 8046354:	4603      	mov	r3, r0
                                                                    sleep_period_in_rtc_step, mode );
}
 8046356:	4618      	mov	r0, r3
 8046358:	3718      	adds	r7, #24
 804635a:	46bd      	mov	sp, r7
 804635c:	bd80      	pop	{r7, pc}

0804635e <lr1110_radio_set_rx_duty_cycle_with_timings_in_rtc_step>:

lr1110_status_t lr1110_radio_set_rx_duty_cycle_with_timings_in_rtc_step( const void*    context,
                                                                         const uint32_t rx_period_in_rtc_step,
                                                                         const uint32_t sleep_period_in_rtc_step,
                                                                         const lr1110_radio_rx_duty_cycle_mode_t mode )
{
 804635e:	b580      	push	{r7, lr}
 8046360:	b08a      	sub	sp, #40	; 0x28
 8046362:	af02      	add	r7, sp, #8
 8046364:	60f8      	str	r0, [r7, #12]
 8046366:	60b9      	str	r1, [r7, #8]
 8046368:	607a      	str	r2, [r7, #4]
 804636a:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_RADIO_SET_RX_DUTY_CYCLE_MODE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_DUTY_CYCLE_OC >> 8 );
 804636c:	2302      	movs	r3, #2
 804636e:	753b      	strb	r3, [r7, #20]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_RX_DUTY_CYCLE_OC >> 0 );
 8046370:	2314      	movs	r3, #20
 8046372:	757b      	strb	r3, [r7, #21]

    cbuffer[2] = ( uint8_t )( rx_period_in_rtc_step >> 16 );
 8046374:	68bb      	ldr	r3, [r7, #8]
 8046376:	0c1b      	lsrs	r3, r3, #16
 8046378:	b2db      	uxtb	r3, r3
 804637a:	75bb      	strb	r3, [r7, #22]
    cbuffer[3] = ( uint8_t )( rx_period_in_rtc_step >> 8 );
 804637c:	68bb      	ldr	r3, [r7, #8]
 804637e:	0a1b      	lsrs	r3, r3, #8
 8046380:	b2db      	uxtb	r3, r3
 8046382:	75fb      	strb	r3, [r7, #23]
    cbuffer[4] = ( uint8_t )( rx_period_in_rtc_step >> 0 );
 8046384:	68bb      	ldr	r3, [r7, #8]
 8046386:	b2db      	uxtb	r3, r3
 8046388:	763b      	strb	r3, [r7, #24]

    cbuffer[5] = ( uint8_t )( sleep_period_in_rtc_step >> 16 );
 804638a:	687b      	ldr	r3, [r7, #4]
 804638c:	0c1b      	lsrs	r3, r3, #16
 804638e:	b2db      	uxtb	r3, r3
 8046390:	767b      	strb	r3, [r7, #25]
    cbuffer[6] = ( uint8_t )( sleep_period_in_rtc_step >> 8 );
 8046392:	687b      	ldr	r3, [r7, #4]
 8046394:	0a1b      	lsrs	r3, r3, #8
 8046396:	b2db      	uxtb	r3, r3
 8046398:	76bb      	strb	r3, [r7, #26]
    cbuffer[7] = ( uint8_t )( sleep_period_in_rtc_step >> 0 );
 804639a:	687b      	ldr	r3, [r7, #4]
 804639c:	b2db      	uxtb	r3, r3
 804639e:	76fb      	strb	r3, [r7, #27]

    cbuffer[8] = mode;
 80463a0:	78fb      	ldrb	r3, [r7, #3]
 80463a2:	773b      	strb	r3, [r7, #28]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_RX_DUTY_CYCLE_MODE_CMD_LENGTH, 0,
 80463a4:	f107 0114 	add.w	r1, r7, #20
 80463a8:	2300      	movs	r3, #0
 80463aa:	9300      	str	r3, [sp, #0]
 80463ac:	2300      	movs	r3, #0
 80463ae:	2209      	movs	r2, #9
 80463b0:	68f8      	ldr	r0, [r7, #12]
 80463b2:	f7fd fd91 	bl	8043ed8 <lr1110_hal_write>
 80463b6:	4603      	mov	r3, r0
                                                 0 );
}
 80463b8:	4618      	mov	r0, r3
 80463ba:	3720      	adds	r7, #32
 80463bc:	46bd      	mov	sp, r7
 80463be:	bd80      	pop	{r7, pc}

080463c0 <lr1110_radio_set_pa_cfg>:

lr1110_status_t lr1110_radio_set_pa_cfg( const void* context, const lr1110_radio_pa_cfg_t* pa_cfg )
{
 80463c0:	b580      	push	{r7, lr}
 80463c2:	b086      	sub	sp, #24
 80463c4:	af02      	add	r7, sp, #8
 80463c6:	6078      	str	r0, [r7, #4]
 80463c8:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_PA_CFG_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PA_CFG_OC >> 8 );
 80463ca:	2302      	movs	r3, #2
 80463cc:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PA_CFG_OC >> 0 );
 80463ce:	2315      	movs	r3, #21
 80463d0:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t ) pa_cfg->pa_sel;
 80463d2:	683b      	ldr	r3, [r7, #0]
 80463d4:	781b      	ldrb	r3, [r3, #0]
 80463d6:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t ) pa_cfg->pa_reg_supply;
 80463d8:	683b      	ldr	r3, [r7, #0]
 80463da:	785b      	ldrb	r3, [r3, #1]
 80463dc:	72fb      	strb	r3, [r7, #11]

    cbuffer[4] = pa_cfg->pa_duty_cycle;
 80463de:	683b      	ldr	r3, [r7, #0]
 80463e0:	789b      	ldrb	r3, [r3, #2]
 80463e2:	733b      	strb	r3, [r7, #12]
    cbuffer[5] = pa_cfg->pa_hp_sel;
 80463e4:	683b      	ldr	r3, [r7, #0]
 80463e6:	78db      	ldrb	r3, [r3, #3]
 80463e8:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_PA_CFG_CMD_LENGTH, 0, 0 );
 80463ea:	f107 0108 	add.w	r1, r7, #8
 80463ee:	2300      	movs	r3, #0
 80463f0:	9300      	str	r3, [sp, #0]
 80463f2:	2300      	movs	r3, #0
 80463f4:	2206      	movs	r2, #6
 80463f6:	6878      	ldr	r0, [r7, #4]
 80463f8:	f7fd fd6e 	bl	8043ed8 <lr1110_hal_write>
 80463fc:	4603      	mov	r3, r0
}
 80463fe:	4618      	mov	r0, r3
 8046400:	3710      	adds	r7, #16
 8046402:	46bd      	mov	sp, r7
 8046404:	bd80      	pop	{r7, pc}

08046406 <lr1110_radio_stop_timeout_on_preamble>:

lr1110_status_t lr1110_radio_stop_timeout_on_preamble( const void* context, const bool stop_timeout_on_preamble )
{
 8046406:	b580      	push	{r7, lr}
 8046408:	b086      	sub	sp, #24
 804640a:	af02      	add	r7, sp, #8
 804640c:	6078      	str	r0, [r7, #4]
 804640e:	460b      	mov	r3, r1
 8046410:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_OC >> 8 );
 8046412:	2302      	movs	r3, #2
 8046414:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_OC >> 0 );
 8046416:	2317      	movs	r3, #23
 8046418:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t ) stop_timeout_on_preamble;
 804641a:	78fb      	ldrb	r3, [r7, #3]
 804641c:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_CMD_LENGTH, 0,
 804641e:	f107 010c 	add.w	r1, r7, #12
 8046422:	2300      	movs	r3, #0
 8046424:	9300      	str	r3, [sp, #0]
 8046426:	2300      	movs	r3, #0
 8046428:	2203      	movs	r2, #3
 804642a:	6878      	ldr	r0, [r7, #4]
 804642c:	f7fd fd54 	bl	8043ed8 <lr1110_hal_write>
 8046430:	4603      	mov	r3, r0
                                                 0 );
}
 8046432:	4618      	mov	r0, r3
 8046434:	3710      	adds	r7, #16
 8046436:	46bd      	mov	sp, r7
 8046438:	bd80      	pop	{r7, pc}

0804643a <lr1110_radio_set_cad>:

lr1110_status_t lr1110_radio_set_cad( const void* context )
{
 804643a:	b580      	push	{r7, lr}
 804643c:	b086      	sub	sp, #24
 804643e:	af02      	add	r7, sp, #8
 8046440:	6078      	str	r0, [r7, #4]
    uint8_t cbuffer[LR1110_RADIO_SET_CAD_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_CAD_OC >> 8 );
 8046442:	2302      	movs	r3, #2
 8046444:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_CAD_OC >> 0 );
 8046446:	2318      	movs	r3, #24
 8046448:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_CAD_CMD_LENGTH, 0, 0 );
 804644a:	f107 010c 	add.w	r1, r7, #12
 804644e:	2300      	movs	r3, #0
 8046450:	9300      	str	r3, [sp, #0]
 8046452:	2300      	movs	r3, #0
 8046454:	2202      	movs	r2, #2
 8046456:	6878      	ldr	r0, [r7, #4]
 8046458:	f7fd fd3e 	bl	8043ed8 <lr1110_hal_write>
 804645c:	4603      	mov	r3, r0
}
 804645e:	4618      	mov	r0, r3
 8046460:	3710      	adds	r7, #16
 8046462:	46bd      	mov	sp, r7
 8046464:	bd80      	pop	{r7, pc}

08046466 <lr1110_radio_set_tx_cw>:

lr1110_status_t lr1110_radio_set_tx_cw( const void* context )
{
 8046466:	b580      	push	{r7, lr}
 8046468:	b086      	sub	sp, #24
 804646a:	af02      	add	r7, sp, #8
 804646c:	6078      	str	r0, [r7, #4]
    uint8_t cbuffer[LR1110_RADIO_SET_TX_CW_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_CW_OC >> 8 );
 804646e:	2302      	movs	r3, #2
 8046470:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_TX_CW_OC >> 0 );
 8046472:	2319      	movs	r3, #25
 8046474:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_TX_CW_CMD_LENGTH, 0, 0 );
 8046476:	f107 010c 	add.w	r1, r7, #12
 804647a:	2300      	movs	r3, #0
 804647c:	9300      	str	r3, [sp, #0]
 804647e:	2300      	movs	r3, #0
 8046480:	2202      	movs	r2, #2
 8046482:	6878      	ldr	r0, [r7, #4]
 8046484:	f7fd fd28 	bl	8043ed8 <lr1110_hal_write>
 8046488:	4603      	mov	r3, r0
}
 804648a:	4618      	mov	r0, r3
 804648c:	3710      	adds	r7, #16
 804648e:	46bd      	mov	sp, r7
 8046490:	bd80      	pop	{r7, pc}

08046492 <lr1110_radio_set_lora_sync_timeout>:
    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_TX_INFINITE_PREAMBLE_CMD_LENGTH, 0,
                                                 0 );
}

lr1110_status_t lr1110_radio_set_lora_sync_timeout( const void* context, const uint8_t nb_symbol )
{
 8046492:	b580      	push	{r7, lr}
 8046494:	b086      	sub	sp, #24
 8046496:	af02      	add	r7, sp, #8
 8046498:	6078      	str	r0, [r7, #4]
 804649a:	460b      	mov	r3, r1
 804649c:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_OC >> 8 );
 804649e:	2302      	movs	r3, #2
 80464a0:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_OC >> 0 );
 80464a2:	231b      	movs	r3, #27
 80464a4:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = nb_symbol;
 80464a6:	78fb      	ldrb	r3, [r7, #3]
 80464a8:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_CMD_LENGTH, 0,
 80464aa:	f107 010c 	add.w	r1, r7, #12
 80464ae:	2300      	movs	r3, #0
 80464b0:	9300      	str	r3, [sp, #0]
 80464b2:	2300      	movs	r3, #0
 80464b4:	2203      	movs	r2, #3
 80464b6:	6878      	ldr	r0, [r7, #4]
 80464b8:	f7fd fd0e 	bl	8043ed8 <lr1110_hal_write>
 80464bc:	4603      	mov	r3, r0
                                                 0 );
}
 80464be:	4618      	mov	r0, r3
 80464c0:	3710      	adds	r7, #16
 80464c2:	46bd      	mov	sp, r7
 80464c4:	bd80      	pop	{r7, pc}

080464c6 <lr1110_radio_set_gfsk_crc_params>:

lr1110_status_t lr1110_radio_set_gfsk_crc_params( const void* context, const uint32_t seed, const uint32_t polynomial )
{
 80464c6:	b580      	push	{r7, lr}
 80464c8:	b08a      	sub	sp, #40	; 0x28
 80464ca:	af02      	add	r7, sp, #8
 80464cc:	60f8      	str	r0, [r7, #12]
 80464ce:	60b9      	str	r1, [r7, #8]
 80464d0:	607a      	str	r2, [r7, #4]
    uint8_t cbuffer[LR1110_RADIO_SET_GFSK_CRC_PARAMS_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_CRC_PARAMS_OC >> 8 );
 80464d2:	2302      	movs	r3, #2
 80464d4:	753b      	strb	r3, [r7, #20]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_GFSK_CRC_PARAMS_OC >> 0 );
 80464d6:	2324      	movs	r3, #36	; 0x24
 80464d8:	757b      	strb	r3, [r7, #21]

    cbuffer[2] = ( uint8_t )( seed >> 24 );
 80464da:	68bb      	ldr	r3, [r7, #8]
 80464dc:	0e1b      	lsrs	r3, r3, #24
 80464de:	b2db      	uxtb	r3, r3
 80464e0:	75bb      	strb	r3, [r7, #22]
    cbuffer[3] = ( uint8_t )( seed >> 16 );
 80464e2:	68bb      	ldr	r3, [r7, #8]
 80464e4:	0c1b      	lsrs	r3, r3, #16
 80464e6:	b2db      	uxtb	r3, r3
 80464e8:	75fb      	strb	r3, [r7, #23]
    cbuffer[4] = ( uint8_t )( seed >> 8 );
 80464ea:	68bb      	ldr	r3, [r7, #8]
 80464ec:	0a1b      	lsrs	r3, r3, #8
 80464ee:	b2db      	uxtb	r3, r3
 80464f0:	763b      	strb	r3, [r7, #24]
    cbuffer[5] = ( uint8_t )( seed >> 0 );
 80464f2:	68bb      	ldr	r3, [r7, #8]
 80464f4:	b2db      	uxtb	r3, r3
 80464f6:	767b      	strb	r3, [r7, #25]

    cbuffer[6] = ( uint8_t )( polynomial >> 24 );
 80464f8:	687b      	ldr	r3, [r7, #4]
 80464fa:	0e1b      	lsrs	r3, r3, #24
 80464fc:	b2db      	uxtb	r3, r3
 80464fe:	76bb      	strb	r3, [r7, #26]
    cbuffer[7] = ( uint8_t )( polynomial >> 16 );
 8046500:	687b      	ldr	r3, [r7, #4]
 8046502:	0c1b      	lsrs	r3, r3, #16
 8046504:	b2db      	uxtb	r3, r3
 8046506:	76fb      	strb	r3, [r7, #27]
    cbuffer[8] = ( uint8_t )( polynomial >> 8 );
 8046508:	687b      	ldr	r3, [r7, #4]
 804650a:	0a1b      	lsrs	r3, r3, #8
 804650c:	b2db      	uxtb	r3, r3
 804650e:	773b      	strb	r3, [r7, #28]
    cbuffer[9] = ( uint8_t )( polynomial >> 0 );
 8046510:	687b      	ldr	r3, [r7, #4]
 8046512:	b2db      	uxtb	r3, r3
 8046514:	777b      	strb	r3, [r7, #29]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_GFSK_CRC_PARAMS_CMD_LENGTH, 0, 0 );
 8046516:	f107 0114 	add.w	r1, r7, #20
 804651a:	2300      	movs	r3, #0
 804651c:	9300      	str	r3, [sp, #0]
 804651e:	2300      	movs	r3, #0
 8046520:	220a      	movs	r2, #10
 8046522:	68f8      	ldr	r0, [r7, #12]
 8046524:	f7fd fcd8 	bl	8043ed8 <lr1110_hal_write>
 8046528:	4603      	mov	r3, r0
}
 804652a:	4618      	mov	r0, r3
 804652c:	3720      	adds	r7, #32
 804652e:	46bd      	mov	sp, r7
 8046530:	bd80      	pop	{r7, pc}

08046532 <lr1110_radio_set_gfsk_whitening_seed>:

lr1110_status_t lr1110_radio_set_gfsk_whitening_seed( const void* context, const uint16_t seed )
{
 8046532:	b580      	push	{r7, lr}
 8046534:	b086      	sub	sp, #24
 8046536:	af02      	add	r7, sp, #8
 8046538:	6078      	str	r0, [r7, #4]
 804653a:	460b      	mov	r3, r1
 804653c:	807b      	strh	r3, [r7, #2]
    uint8_t cbuffer[LR1110_RADIO_SET_GFSK_WHITENING_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_WHITENING_PARAMS_OC >> 8 );
 804653e:	2302      	movs	r3, #2
 8046540:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_GFSK_WHITENING_PARAMS_OC >> 0 );
 8046542:	2325      	movs	r3, #37	; 0x25
 8046544:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t )( seed >> 8 );
 8046546:	887b      	ldrh	r3, [r7, #2]
 8046548:	0a1b      	lsrs	r3, r3, #8
 804654a:	b29b      	uxth	r3, r3
 804654c:	b2db      	uxtb	r3, r3
 804654e:	73bb      	strb	r3, [r7, #14]
    cbuffer[3] = ( uint8_t )( seed >> 0 );
 8046550:	887b      	ldrh	r3, [r7, #2]
 8046552:	b2db      	uxtb	r3, r3
 8046554:	73fb      	strb	r3, [r7, #15]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_GFSK_WHITENING_CMD_LENGTH, 0, 0 );
 8046556:	f107 010c 	add.w	r1, r7, #12
 804655a:	2300      	movs	r3, #0
 804655c:	9300      	str	r3, [sp, #0]
 804655e:	2300      	movs	r3, #0
 8046560:	2204      	movs	r2, #4
 8046562:	6878      	ldr	r0, [r7, #4]
 8046564:	f7fd fcb8 	bl	8043ed8 <lr1110_hal_write>
 8046568:	4603      	mov	r3, r0
}
 804656a:	4618      	mov	r0, r3
 804656c:	3710      	adds	r7, #16
 804656e:	46bd      	mov	sp, r7
 8046570:	bd80      	pop	{r7, pc}

08046572 <lr1110_radio_cfg_rx_boosted>:

lr1110_status_t lr1110_radio_cfg_rx_boosted( const void* context, const bool enable_boost_mode )
{
 8046572:	b580      	push	{r7, lr}
 8046574:	b086      	sub	sp, #24
 8046576:	af02      	add	r7, sp, #8
 8046578:	6078      	str	r0, [r7, #4]
 804657a:	460b      	mov	r3, r1
 804657c:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_RADIO_SET_RX_BOOSTED_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_BOOSTED_OC >> 8 );
 804657e:	2302      	movs	r3, #2
 8046580:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_RX_BOOSTED_OC >> 0 );
 8046582:	2327      	movs	r3, #39	; 0x27
 8046584:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( enable_boost_mode == true ) ? 0x01 : 0x00;
 8046586:	78fb      	ldrb	r3, [r7, #3]
 8046588:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_RX_BOOSTED_LENGTH, 0, 0 );
 804658a:	f107 010c 	add.w	r1, r7, #12
 804658e:	2300      	movs	r3, #0
 8046590:	9300      	str	r3, [sp, #0]
 8046592:	2300      	movs	r3, #0
 8046594:	2203      	movs	r2, #3
 8046596:	6878      	ldr	r0, [r7, #4]
 8046598:	f7fd fc9e 	bl	8043ed8 <lr1110_hal_write>
 804659c:	4603      	mov	r3, r0
}
 804659e:	4618      	mov	r0, r3
 80465a0:	3710      	adds	r7, #16
 80465a2:	46bd      	mov	sp, r7
 80465a4:	bd80      	pop	{r7, pc}
	...

080465a8 <lr1110_radio_convert_time_in_ms_to_rtc_step>:
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
}

uint32_t lr1110_radio_convert_time_in_ms_to_rtc_step( uint32_t time_in_ms )
{
 80465a8:	b480      	push	{r7}
 80465aa:	b083      	sub	sp, #12
 80465ac:	af00      	add	r7, sp, #0
 80465ae:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( time_in_ms * LR1110_RTC_FREQ_IN_HZ / 1000 );
 80465b0:	687b      	ldr	r3, [r7, #4]
 80465b2:	03db      	lsls	r3, r3, #15
 80465b4:	4a04      	ldr	r2, [pc, #16]	; (80465c8 <lr1110_radio_convert_time_in_ms_to_rtc_step+0x20>)
 80465b6:	fba2 2303 	umull	r2, r3, r2, r3
 80465ba:	099b      	lsrs	r3, r3, #6
}
 80465bc:	4618      	mov	r0, r3
 80465be:	370c      	adds	r7, #12
 80465c0:	46bd      	mov	sp, r7
 80465c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80465c6:	4770      	bx	lr
 80465c8:	10624dd3 	.word	0x10624dd3

080465cc <lr1110_regmem_write_mem8>:
    return status;
}

lr1110_status_t lr1110_regmem_write_mem8( const void* context, const uint32_t address, const uint8_t* buffer,
                                          const uint8_t length )
{
 80465cc:	b580      	push	{r7, lr}
 80465ce:	b088      	sub	sp, #32
 80465d0:	af02      	add	r7, sp, #8
 80465d2:	60f8      	str	r0, [r7, #12]
 80465d4:	60b9      	str	r1, [r7, #8]
 80465d6:	607a      	str	r2, [r7, #4]
 80465d8:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_REGMEM_WRITE_MEM8_CMD_LENGTH];

    lr1110_regmem_fill_cbuffer_opcode_address( cbuffer, LR1110_REGMEM_WRITE_MEM8_OC, address );
 80465da:	f107 0310 	add.w	r3, r7, #16
 80465de:	68ba      	ldr	r2, [r7, #8]
 80465e0:	f240 1107 	movw	r1, #263	; 0x107
 80465e4:	4618      	mov	r0, r3
 80465e6:	f000 f869 	bl	80466bc <lr1110_regmem_fill_cbuffer_opcode_address>

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_REGMEM_WRITE_MEM8_CMD_LENGTH, buffer,
 80465ea:	78fb      	ldrb	r3, [r7, #3]
 80465ec:	b29b      	uxth	r3, r3
 80465ee:	f107 0110 	add.w	r1, r7, #16
 80465f2:	9300      	str	r3, [sp, #0]
 80465f4:	687b      	ldr	r3, [r7, #4]
 80465f6:	2206      	movs	r2, #6
 80465f8:	68f8      	ldr	r0, [r7, #12]
 80465fa:	f7fd fc6d 	bl	8043ed8 <lr1110_hal_write>
 80465fe:	4603      	mov	r3, r0
                                                 length );
}
 8046600:	4618      	mov	r0, r3
 8046602:	3718      	adds	r7, #24
 8046604:	46bd      	mov	sp, r7
 8046606:	bd80      	pop	{r7, pc}

08046608 <lr1110_regmem_read_mem8>:

lr1110_status_t lr1110_regmem_read_mem8( const void* context, const uint32_t address, uint8_t* buffer,
                                         const uint8_t length )
{
 8046608:	b580      	push	{r7, lr}
 804660a:	b088      	sub	sp, #32
 804660c:	af02      	add	r7, sp, #8
 804660e:	60f8      	str	r0, [r7, #12]
 8046610:	60b9      	str	r1, [r7, #8]
 8046612:	607a      	str	r2, [r7, #4]
 8046614:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_REGMEM_READ_MEM8_CMD_LENGTH];

    lr1110_regmem_fill_cbuffer_opcode_address_length( cbuffer, LR1110_REGMEM_READ_MEM8_OC, address, length );
 8046616:	78fb      	ldrb	r3, [r7, #3]
 8046618:	f107 0010 	add.w	r0, r7, #16
 804661c:	68ba      	ldr	r2, [r7, #8]
 804661e:	f44f 7184 	mov.w	r1, #264	; 0x108
 8046622:	f000 f87a 	bl	804671a <lr1110_regmem_fill_cbuffer_opcode_address_length>

    return ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_REGMEM_READ_MEM8_CMD_LENGTH, buffer, length );
 8046626:	78fb      	ldrb	r3, [r7, #3]
 8046628:	b29b      	uxth	r3, r3
 804662a:	f107 0110 	add.w	r1, r7, #16
 804662e:	9300      	str	r3, [sp, #0]
 8046630:	687b      	ldr	r3, [r7, #4]
 8046632:	2207      	movs	r2, #7
 8046634:	68f8      	ldr	r0, [r7, #12]
 8046636:	f7fd fcaa 	bl	8043f8e <lr1110_hal_read>
 804663a:	4603      	mov	r3, r0
}
 804663c:	4618      	mov	r0, r3
 804663e:	3718      	adds	r7, #24
 8046640:	46bd      	mov	sp, r7
 8046642:	bd80      	pop	{r7, pc}

08046644 <lr1110_regmem_write_buffer8>:

lr1110_status_t lr1110_regmem_write_buffer8( const void* context, const uint8_t* buffer, const uint8_t length )
{
 8046644:	b580      	push	{r7, lr}
 8046646:	b088      	sub	sp, #32
 8046648:	af02      	add	r7, sp, #8
 804664a:	60f8      	str	r0, [r7, #12]
 804664c:	60b9      	str	r1, [r7, #8]
 804664e:	4613      	mov	r3, r2
 8046650:	71fb      	strb	r3, [r7, #7]
    uint8_t cbuffer[LR1110_REGMEM_WRITE_BUFFER8_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_WRITE_BUFFER8_OC >> 8 );
 8046652:	2301      	movs	r3, #1
 8046654:	753b      	strb	r3, [r7, #20]
    cbuffer[1] = ( uint8_t )( LR1110_REGMEM_WRITE_BUFFER8_OC >> 0 );
 8046656:	2309      	movs	r3, #9
 8046658:	757b      	strb	r3, [r7, #21]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_REGMEM_WRITE_BUFFER8_CMD_LENGTH, buffer,
 804665a:	79fb      	ldrb	r3, [r7, #7]
 804665c:	b29b      	uxth	r3, r3
 804665e:	f107 0114 	add.w	r1, r7, #20
 8046662:	9300      	str	r3, [sp, #0]
 8046664:	68bb      	ldr	r3, [r7, #8]
 8046666:	2202      	movs	r2, #2
 8046668:	68f8      	ldr	r0, [r7, #12]
 804666a:	f7fd fc35 	bl	8043ed8 <lr1110_hal_write>
 804666e:	4603      	mov	r3, r0
                                                 length );
}
 8046670:	4618      	mov	r0, r3
 8046672:	3718      	adds	r7, #24
 8046674:	46bd      	mov	sp, r7
 8046676:	bd80      	pop	{r7, pc}

08046678 <lr1110_regmem_read_buffer8>:

lr1110_status_t lr1110_regmem_read_buffer8( const void* context, uint8_t* buffer, const uint8_t offset,
                                            const uint8_t length )
{
 8046678:	b580      	push	{r7, lr}
 804667a:	b088      	sub	sp, #32
 804667c:	af02      	add	r7, sp, #8
 804667e:	60f8      	str	r0, [r7, #12]
 8046680:	60b9      	str	r1, [r7, #8]
 8046682:	4611      	mov	r1, r2
 8046684:	461a      	mov	r2, r3
 8046686:	460b      	mov	r3, r1
 8046688:	71fb      	strb	r3, [r7, #7]
 804668a:	4613      	mov	r3, r2
 804668c:	71bb      	strb	r3, [r7, #6]
    uint8_t cbuffer[LR1110_REGMEM_READ_BUFFER8_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_READ_BUFFER8_OC >> 8 );
 804668e:	2301      	movs	r3, #1
 8046690:	753b      	strb	r3, [r7, #20]
    cbuffer[1] = ( uint8_t )( LR1110_REGMEM_READ_BUFFER8_OC >> 0 );
 8046692:	230a      	movs	r3, #10
 8046694:	757b      	strb	r3, [r7, #21]

    cbuffer[2] = offset;
 8046696:	79fb      	ldrb	r3, [r7, #7]
 8046698:	75bb      	strb	r3, [r7, #22]
    cbuffer[3] = length;
 804669a:	79bb      	ldrb	r3, [r7, #6]
 804669c:	75fb      	strb	r3, [r7, #23]

    return ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_REGMEM_READ_BUFFER8_CMD_LENGTH, buffer,
 804669e:	79bb      	ldrb	r3, [r7, #6]
 80466a0:	b29b      	uxth	r3, r3
 80466a2:	f107 0114 	add.w	r1, r7, #20
 80466a6:	9300      	str	r3, [sp, #0]
 80466a8:	68bb      	ldr	r3, [r7, #8]
 80466aa:	2204      	movs	r2, #4
 80466ac:	68f8      	ldr	r0, [r7, #12]
 80466ae:	f7fd fc6e 	bl	8043f8e <lr1110_hal_read>
 80466b2:	4603      	mov	r3, r0
                                                length );
}
 80466b4:	4618      	mov	r0, r3
 80466b6:	3718      	adds	r7, #24
 80466b8:	46bd      	mov	sp, r7
 80466ba:	bd80      	pop	{r7, pc}

080466bc <lr1110_regmem_fill_cbuffer_opcode_address>:
 * -----------------------------------------------------------------------------
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

void lr1110_regmem_fill_cbuffer_opcode_address( uint8_t* cbuffer, uint16_t opcode, uint32_t address )
{
 80466bc:	b480      	push	{r7}
 80466be:	b085      	sub	sp, #20
 80466c0:	af00      	add	r7, sp, #0
 80466c2:	60f8      	str	r0, [r7, #12]
 80466c4:	460b      	mov	r3, r1
 80466c6:	607a      	str	r2, [r7, #4]
 80466c8:	817b      	strh	r3, [r7, #10]
    cbuffer[0] = ( uint8_t )( opcode >> 8 );
 80466ca:	897b      	ldrh	r3, [r7, #10]
 80466cc:	0a1b      	lsrs	r3, r3, #8
 80466ce:	b29b      	uxth	r3, r3
 80466d0:	b2da      	uxtb	r2, r3
 80466d2:	68fb      	ldr	r3, [r7, #12]
 80466d4:	701a      	strb	r2, [r3, #0]
    cbuffer[1] = ( uint8_t )( opcode >> 0 );
 80466d6:	68fb      	ldr	r3, [r7, #12]
 80466d8:	3301      	adds	r3, #1
 80466da:	897a      	ldrh	r2, [r7, #10]
 80466dc:	b2d2      	uxtb	r2, r2
 80466de:	701a      	strb	r2, [r3, #0]

    cbuffer[2] = ( uint8_t )( address >> 24 );
 80466e0:	687b      	ldr	r3, [r7, #4]
 80466e2:	0e1a      	lsrs	r2, r3, #24
 80466e4:	68fb      	ldr	r3, [r7, #12]
 80466e6:	3302      	adds	r3, #2
 80466e8:	b2d2      	uxtb	r2, r2
 80466ea:	701a      	strb	r2, [r3, #0]
    cbuffer[3] = ( uint8_t )( address >> 16 );
 80466ec:	687b      	ldr	r3, [r7, #4]
 80466ee:	0c1a      	lsrs	r2, r3, #16
 80466f0:	68fb      	ldr	r3, [r7, #12]
 80466f2:	3303      	adds	r3, #3
 80466f4:	b2d2      	uxtb	r2, r2
 80466f6:	701a      	strb	r2, [r3, #0]
    cbuffer[4] = ( uint8_t )( address >> 8 );
 80466f8:	687b      	ldr	r3, [r7, #4]
 80466fa:	0a1a      	lsrs	r2, r3, #8
 80466fc:	68fb      	ldr	r3, [r7, #12]
 80466fe:	3304      	adds	r3, #4
 8046700:	b2d2      	uxtb	r2, r2
 8046702:	701a      	strb	r2, [r3, #0]
    cbuffer[5] = ( uint8_t )( address >> 0 );
 8046704:	68fb      	ldr	r3, [r7, #12]
 8046706:	3305      	adds	r3, #5
 8046708:	687a      	ldr	r2, [r7, #4]
 804670a:	b2d2      	uxtb	r2, r2
 804670c:	701a      	strb	r2, [r3, #0]
}
 804670e:	bf00      	nop
 8046710:	3714      	adds	r7, #20
 8046712:	46bd      	mov	sp, r7
 8046714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046718:	4770      	bx	lr

0804671a <lr1110_regmem_fill_cbuffer_opcode_address_length>:

void lr1110_regmem_fill_cbuffer_opcode_address_length( uint8_t* cbuffer, uint16_t opcode, uint32_t address,
                                                       uint8_t length )
{
 804671a:	b580      	push	{r7, lr}
 804671c:	b084      	sub	sp, #16
 804671e:	af00      	add	r7, sp, #0
 8046720:	60f8      	str	r0, [r7, #12]
 8046722:	607a      	str	r2, [r7, #4]
 8046724:	461a      	mov	r2, r3
 8046726:	460b      	mov	r3, r1
 8046728:	817b      	strh	r3, [r7, #10]
 804672a:	4613      	mov	r3, r2
 804672c:	727b      	strb	r3, [r7, #9]
    lr1110_regmem_fill_cbuffer_opcode_address( cbuffer, opcode, address );
 804672e:	897b      	ldrh	r3, [r7, #10]
 8046730:	687a      	ldr	r2, [r7, #4]
 8046732:	4619      	mov	r1, r3
 8046734:	68f8      	ldr	r0, [r7, #12]
 8046736:	f7ff ffc1 	bl	80466bc <lr1110_regmem_fill_cbuffer_opcode_address>
    cbuffer[6] = length;
 804673a:	68fb      	ldr	r3, [r7, #12]
 804673c:	3306      	adds	r3, #6
 804673e:	7a7a      	ldrb	r2, [r7, #9]
 8046740:	701a      	strb	r2, [r3, #0]
}
 8046742:	bf00      	nop
 8046744:	3710      	adds	r7, #16
 8046746:	46bd      	mov	sp, r7
 8046748:	bd80      	pop	{r7, pc}

0804674a <lr1110_system_reset>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

lr1110_status_t lr1110_system_reset( const void* context )
{
 804674a:	b580      	push	{r7, lr}
 804674c:	b082      	sub	sp, #8
 804674e:	af00      	add	r7, sp, #0
 8046750:	6078      	str	r0, [r7, #4]
    return ( lr1110_status_t ) lr1110_hal_reset( context );
 8046752:	6878      	ldr	r0, [r7, #4]
 8046754:	f7fd fccc 	bl	80440f0 <lr1110_hal_reset>
 8046758:	4603      	mov	r3, r0
}
 804675a:	4618      	mov	r0, r3
 804675c:	3708      	adds	r7, #8
 804675e:	46bd      	mov	sp, r7
 8046760:	bd80      	pop	{r7, pc}

08046762 <lr1110_system_get_status>:

lr1110_status_t lr1110_system_get_status( const void* context, lr1110_system_stat1_t* stat1,
                                          lr1110_system_stat2_t* stat2, lr1110_system_irq_mask_t* irq_status )
{
 8046762:	b580      	push	{r7, lr}
 8046764:	b086      	sub	sp, #24
 8046766:	af00      	add	r7, sp, #0
 8046768:	60f8      	str	r0, [r7, #12]
 804676a:	60b9      	str	r1, [r7, #8]
 804676c:	607a      	str	r2, [r7, #4]
 804676e:	603b      	str	r3, [r7, #0]
    uint8_t         cbuffer[LR1110_SYSTEM_GET_STATUS_CMD_LENGTH] = { 0x00 };
 8046770:	2300      	movs	r3, #0
 8046772:	613b      	str	r3, [r7, #16]
 8046774:	2300      	movs	r3, #0
 8046776:	82bb      	strh	r3, [r7, #20]
    lr1110_status_t status                                       = LR1110_STATUS_ERROR;
 8046778:	2303      	movs	r3, #3
 804677a:	75fb      	strb	r3, [r7, #23]

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_STATUS_OC >> 8 );
 804677c:	2301      	movs	r3, #1
 804677e:	743b      	strb	r3, [r7, #16]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_STATUS_OC >> 0 );
 8046780:	2300      	movs	r3, #0
 8046782:	747b      	strb	r3, [r7, #17]

    status =
        ( lr1110_status_t ) lr1110_hal_write_read( context, cbuffer, cbuffer, LR1110_SYSTEM_GET_STATUS_CMD_LENGTH );
 8046784:	f107 0210 	add.w	r2, r7, #16
 8046788:	f107 0110 	add.w	r1, r7, #16
 804678c:	2306      	movs	r3, #6
 804678e:	68f8      	ldr	r0, [r7, #12]
 8046790:	f7fd fc62 	bl	8044058 <lr1110_hal_write_read>
 8046794:	4603      	mov	r3, r0
 8046796:	75fb      	strb	r3, [r7, #23]

    if( status == LR1110_STATUS_OK )
 8046798:	7dfb      	ldrb	r3, [r7, #23]
 804679a:	2b00      	cmp	r3, #0
 804679c:	d130      	bne.n	8046800 <lr1110_system_get_status+0x9e>
    {
        stat1->is_interrupt_active = ( ( cbuffer[0] & 0x01 ) != 0 ) ? true : false;
 804679e:	7c3b      	ldrb	r3, [r7, #16]
 80467a0:	f003 0301 	and.w	r3, r3, #1
 80467a4:	2b00      	cmp	r3, #0
 80467a6:	bf14      	ite	ne
 80467a8:	2301      	movne	r3, #1
 80467aa:	2300      	moveq	r3, #0
 80467ac:	b2da      	uxtb	r2, r3
 80467ae:	68bb      	ldr	r3, [r7, #8]
 80467b0:	705a      	strb	r2, [r3, #1]
        stat1->command_status      = ( lr1110_system_command_status_t )( cbuffer[0] >> 1 );
 80467b2:	7c3b      	ldrb	r3, [r7, #16]
 80467b4:	085b      	lsrs	r3, r3, #1
 80467b6:	b2da      	uxtb	r2, r3
 80467b8:	68bb      	ldr	r3, [r7, #8]
 80467ba:	701a      	strb	r2, [r3, #0]

        stat2->is_running_from_flash = ( ( cbuffer[1] & 0x01 ) != 0 ) ? true : false;
 80467bc:	7c7b      	ldrb	r3, [r7, #17]
 80467be:	f003 0301 	and.w	r3, r3, #1
 80467c2:	2b00      	cmp	r3, #0
 80467c4:	bf14      	ite	ne
 80467c6:	2301      	movne	r3, #1
 80467c8:	2300      	moveq	r3, #0
 80467ca:	b2da      	uxtb	r2, r3
 80467cc:	687b      	ldr	r3, [r7, #4]
 80467ce:	709a      	strb	r2, [r3, #2]
        stat2->chip_mode             = ( lr1110_system_chip_modes_t )( ( cbuffer[1] & 0x0F ) >> 1 );
 80467d0:	7c7b      	ldrb	r3, [r7, #17]
 80467d2:	105b      	asrs	r3, r3, #1
 80467d4:	f003 0307 	and.w	r3, r3, #7
 80467d8:	b2da      	uxtb	r2, r3
 80467da:	687b      	ldr	r3, [r7, #4]
 80467dc:	705a      	strb	r2, [r3, #1]
        stat2->reset_status          = ( lr1110_system_reset_status_t )( ( cbuffer[1] & 0xF0 ) >> 4 );
 80467de:	7c7b      	ldrb	r3, [r7, #17]
 80467e0:	091b      	lsrs	r3, r3, #4
 80467e2:	b2da      	uxtb	r2, r3
 80467e4:	687b      	ldr	r3, [r7, #4]
 80467e6:	701a      	strb	r2, [r3, #0]

        *irq_status =
            ( ( lr1110_system_irq_mask_t ) cbuffer[2] << 24 ) + ( ( lr1110_system_irq_mask_t ) cbuffer[3] << 16 ) +
 80467e8:	7cbb      	ldrb	r3, [r7, #18]
 80467ea:	061a      	lsls	r2, r3, #24
 80467ec:	7cfb      	ldrb	r3, [r7, #19]
 80467ee:	041b      	lsls	r3, r3, #16
 80467f0:	441a      	add	r2, r3
            ( ( lr1110_system_irq_mask_t ) cbuffer[4] << 8 ) + ( ( lr1110_system_irq_mask_t ) cbuffer[5] << 0 );
 80467f2:	7d3b      	ldrb	r3, [r7, #20]
 80467f4:	021b      	lsls	r3, r3, #8
            ( ( lr1110_system_irq_mask_t ) cbuffer[2] << 24 ) + ( ( lr1110_system_irq_mask_t ) cbuffer[3] << 16 ) +
 80467f6:	4413      	add	r3, r2
            ( ( lr1110_system_irq_mask_t ) cbuffer[4] << 8 ) + ( ( lr1110_system_irq_mask_t ) cbuffer[5] << 0 );
 80467f8:	7d7a      	ldrb	r2, [r7, #21]
 80467fa:	441a      	add	r2, r3
        *irq_status =
 80467fc:	683b      	ldr	r3, [r7, #0]
 80467fe:	601a      	str	r2, [r3, #0]
    }

    return status;
 8046800:	7dfb      	ldrb	r3, [r7, #23]
}
 8046802:	4618      	mov	r0, r3
 8046804:	3718      	adds	r7, #24
 8046806:	46bd      	mov	sp, r7
 8046808:	bd80      	pop	{r7, pc}

0804680a <lr1110_system_get_version>:

    return status;
}

lr1110_status_t lr1110_system_get_version( const void* context, lr1110_system_version_t* version )
{
 804680a:	b580      	push	{r7, lr}
 804680c:	b086      	sub	sp, #24
 804680e:	af02      	add	r7, sp, #8
 8046810:	6078      	str	r0, [r7, #4]
 8046812:	6039      	str	r1, [r7, #0]
    uint8_t         cbuffer[LR1110_SYSTEM_GET_VERSION_CMD_LENGTH];
    uint8_t         rbuffer[LR1110_SYSTEM_VERSION_LENGTH] = { 0x00 };
 8046814:	2300      	movs	r3, #0
 8046816:	60bb      	str	r3, [r7, #8]
    lr1110_status_t status                                = LR1110_STATUS_ERROR;
 8046818:	2303      	movs	r3, #3
 804681a:	73fb      	strb	r3, [r7, #15]

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_VERSION_OC >> 8 );
 804681c:	2301      	movs	r3, #1
 804681e:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_VERSION_OC >> 0 );
 8046820:	2301      	movs	r3, #1
 8046822:	737b      	strb	r3, [r7, #13]

    status = ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_SYSTEM_GET_VERSION_CMD_LENGTH, rbuffer,
 8046824:	f107 0308 	add.w	r3, r7, #8
 8046828:	f107 010c 	add.w	r1, r7, #12
 804682c:	2204      	movs	r2, #4
 804682e:	9200      	str	r2, [sp, #0]
 8046830:	2202      	movs	r2, #2
 8046832:	6878      	ldr	r0, [r7, #4]
 8046834:	f7fd fbab 	bl	8043f8e <lr1110_hal_read>
 8046838:	4603      	mov	r3, r0
 804683a:	73fb      	strb	r3, [r7, #15]
                                                  LR1110_SYSTEM_VERSION_LENGTH );

    if( status == LR1110_STATUS_OK )
 804683c:	7bfb      	ldrb	r3, [r7, #15]
 804683e:	2b00      	cmp	r3, #0
 8046840:	d10f      	bne.n	8046862 <lr1110_system_get_version+0x58>
    {
        version->hw   = rbuffer[0];
 8046842:	7a3a      	ldrb	r2, [r7, #8]
 8046844:	683b      	ldr	r3, [r7, #0]
 8046846:	701a      	strb	r2, [r3, #0]
        version->type = rbuffer[1];
 8046848:	7a7a      	ldrb	r2, [r7, #9]
 804684a:	683b      	ldr	r3, [r7, #0]
 804684c:	705a      	strb	r2, [r3, #1]
        version->fw   = ( ( uint16_t ) rbuffer[2] << 8 ) + ( uint16_t ) rbuffer[3];
 804684e:	7abb      	ldrb	r3, [r7, #10]
 8046850:	b29b      	uxth	r3, r3
 8046852:	021b      	lsls	r3, r3, #8
 8046854:	b29a      	uxth	r2, r3
 8046856:	7afb      	ldrb	r3, [r7, #11]
 8046858:	b29b      	uxth	r3, r3
 804685a:	4413      	add	r3, r2
 804685c:	b29a      	uxth	r2, r3
 804685e:	683b      	ldr	r3, [r7, #0]
 8046860:	805a      	strh	r2, [r3, #2]
    }

    return status;
 8046862:	7bfb      	ldrb	r3, [r7, #15]
}
 8046864:	4618      	mov	r0, r3
 8046866:	3710      	adds	r7, #16
 8046868:	46bd      	mov	sp, r7
 804686a:	bd80      	pop	{r7, pc}

0804686c <lr1110_system_get_errors>:

lr1110_status_t lr1110_system_get_errors( const void* context, lr1110_system_errors_t* errors )
{
 804686c:	b580      	push	{r7, lr}
 804686e:	b086      	sub	sp, #24
 8046870:	af02      	add	r7, sp, #8
 8046872:	6078      	str	r0, [r7, #4]
 8046874:	6039      	str	r1, [r7, #0]
    uint8_t         cbuffer[LR1110_SYSTEM_GET_ERRORS_CMD_LENGTH];
    uint8_t         rbuffer[sizeof( errors )] = { 0x00 };
 8046876:	2300      	movs	r3, #0
 8046878:	60bb      	str	r3, [r7, #8]
    lr1110_status_t status                    = LR1110_STATUS_ERROR;
 804687a:	2303      	movs	r3, #3
 804687c:	73fb      	strb	r3, [r7, #15]

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_ERRORS_OC >> 8 );
 804687e:	2301      	movs	r3, #1
 8046880:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_ERRORS_OC >> 0 );
 8046882:	230d      	movs	r3, #13
 8046884:	737b      	strb	r3, [r7, #13]

    status = ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_SYSTEM_GET_ERRORS_CMD_LENGTH, rbuffer,
 8046886:	f107 0308 	add.w	r3, r7, #8
 804688a:	f107 010c 	add.w	r1, r7, #12
 804688e:	2202      	movs	r2, #2
 8046890:	9200      	str	r2, [sp, #0]
 8046892:	2202      	movs	r2, #2
 8046894:	6878      	ldr	r0, [r7, #4]
 8046896:	f7fd fb7a 	bl	8043f8e <lr1110_hal_read>
 804689a:	4603      	mov	r3, r0
 804689c:	73fb      	strb	r3, [r7, #15]
                                                  sizeof( *errors ) );

    if( status == LR1110_STATUS_OK )
 804689e:	7bfb      	ldrb	r3, [r7, #15]
 80468a0:	2b00      	cmp	r3, #0
 80468a2:	d109      	bne.n	80468b8 <lr1110_system_get_errors+0x4c>
    {
        *errors = ( ( uint16_t ) rbuffer[0] << 8 ) + ( uint16_t ) rbuffer[1];
 80468a4:	7a3b      	ldrb	r3, [r7, #8]
 80468a6:	b29b      	uxth	r3, r3
 80468a8:	021b      	lsls	r3, r3, #8
 80468aa:	b29a      	uxth	r2, r3
 80468ac:	7a7b      	ldrb	r3, [r7, #9]
 80468ae:	b29b      	uxth	r3, r3
 80468b0:	4413      	add	r3, r2
 80468b2:	b29a      	uxth	r2, r3
 80468b4:	683b      	ldr	r3, [r7, #0]
 80468b6:	801a      	strh	r2, [r3, #0]
    }

    return status;
 80468b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80468ba:	4618      	mov	r0, r3
 80468bc:	3710      	adds	r7, #16
 80468be:	46bd      	mov	sp, r7
 80468c0:	bd80      	pop	{r7, pc}

080468c2 <lr1110_system_clear_errors>:

lr1110_status_t lr1110_system_clear_errors( const void* context )
{
 80468c2:	b580      	push	{r7, lr}
 80468c4:	b086      	sub	sp, #24
 80468c6:	af02      	add	r7, sp, #8
 80468c8:	6078      	str	r0, [r7, #4]
    uint8_t cbuffer[LR1110_SYSTEM_CLEAR_ERRORS_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CLEAR_ERRORS_OC >> 8 );
 80468ca:	2301      	movs	r3, #1
 80468cc:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_CLEAR_ERRORS_OC >> 0 );
 80468ce:	230e      	movs	r3, #14
 80468d0:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_CLEAR_ERRORS_CMD_LENGTH, 0, 0 );
 80468d2:	f107 010c 	add.w	r1, r7, #12
 80468d6:	2300      	movs	r3, #0
 80468d8:	9300      	str	r3, [sp, #0]
 80468da:	2300      	movs	r3, #0
 80468dc:	2202      	movs	r2, #2
 80468de:	6878      	ldr	r0, [r7, #4]
 80468e0:	f7fd fafa 	bl	8043ed8 <lr1110_hal_write>
 80468e4:	4603      	mov	r3, r0
}
 80468e6:	4618      	mov	r0, r3
 80468e8:	3710      	adds	r7, #16
 80468ea:	46bd      	mov	sp, r7
 80468ec:	bd80      	pop	{r7, pc}

080468ee <lr1110_system_calibrate>:

lr1110_status_t lr1110_system_calibrate( const void* context, const uint8_t calib_param )
{
 80468ee:	b580      	push	{r7, lr}
 80468f0:	b086      	sub	sp, #24
 80468f2:	af02      	add	r7, sp, #8
 80468f4:	6078      	str	r0, [r7, #4]
 80468f6:	460b      	mov	r3, r1
 80468f8:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_SYSTEM_CALIBRATE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CALIBRATE_OC >> 8 );
 80468fa:	2301      	movs	r3, #1
 80468fc:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_CALIBRATE_OC >> 0 );
 80468fe:	230f      	movs	r3, #15
 8046900:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = calib_param;
 8046902:	78fb      	ldrb	r3, [r7, #3]
 8046904:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_CALIBRATE_CMD_LENGTH, 0, 0 );
 8046906:	f107 010c 	add.w	r1, r7, #12
 804690a:	2300      	movs	r3, #0
 804690c:	9300      	str	r3, [sp, #0]
 804690e:	2300      	movs	r3, #0
 8046910:	2203      	movs	r2, #3
 8046912:	6878      	ldr	r0, [r7, #4]
 8046914:	f7fd fae0 	bl	8043ed8 <lr1110_hal_write>
 8046918:	4603      	mov	r3, r0
}
 804691a:	4618      	mov	r0, r3
 804691c:	3710      	adds	r7, #16
 804691e:	46bd      	mov	sp, r7
 8046920:	bd80      	pop	{r7, pc}

08046922 <lr1110_system_set_reg_mode>:

lr1110_status_t lr1110_system_set_reg_mode( const void* context, const lr1110_system_reg_mode_t reg_mode )
{
 8046922:	b580      	push	{r7, lr}
 8046924:	b086      	sub	sp, #24
 8046926:	af02      	add	r7, sp, #8
 8046928:	6078      	str	r0, [r7, #4]
 804692a:	460b      	mov	r3, r1
 804692c:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_SYSTEM_SET_REGMODE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_REGMODE_OC >> 8 );
 804692e:	2301      	movs	r3, #1
 8046930:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_REGMODE_OC >> 0 );
 8046932:	2310      	movs	r3, #16
 8046934:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t ) reg_mode;
 8046936:	78fb      	ldrb	r3, [r7, #3]
 8046938:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_REGMODE_CMD_LENGTH, 0, 0 );
 804693a:	f107 010c 	add.w	r1, r7, #12
 804693e:	2300      	movs	r3, #0
 8046940:	9300      	str	r3, [sp, #0]
 8046942:	2300      	movs	r3, #0
 8046944:	2203      	movs	r2, #3
 8046946:	6878      	ldr	r0, [r7, #4]
 8046948:	f7fd fac6 	bl	8043ed8 <lr1110_hal_write>
 804694c:	4603      	mov	r3, r0
}
 804694e:	4618      	mov	r0, r3
 8046950:	3710      	adds	r7, #16
 8046952:	46bd      	mov	sp, r7
 8046954:	bd80      	pop	{r7, pc}

08046956 <lr1110_system_set_dio_as_rf_switch>:
    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_CALIBRATE_IMAGE_CMD_LENGTH, 0, 0 );
}

lr1110_status_t lr1110_system_set_dio_as_rf_switch( const void*                         context,
                                                    const lr1110_system_rfswitch_cfg_t* rf_switch_cfg )
{
 8046956:	b580      	push	{r7, lr}
 8046958:	b088      	sub	sp, #32
 804695a:	af02      	add	r7, sp, #8
 804695c:	6078      	str	r0, [r7, #4]
 804695e:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_OC >> 8 );
 8046960:	2301      	movs	r3, #1
 8046962:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_OC >> 0 );
 8046964:	2312      	movs	r3, #18
 8046966:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = rf_switch_cfg->enable;
 8046968:	683b      	ldr	r3, [r7, #0]
 804696a:	781b      	ldrb	r3, [r3, #0]
 804696c:	73bb      	strb	r3, [r7, #14]
    cbuffer[3] = rf_switch_cfg->standby;
 804696e:	683b      	ldr	r3, [r7, #0]
 8046970:	785b      	ldrb	r3, [r3, #1]
 8046972:	73fb      	strb	r3, [r7, #15]
    cbuffer[4] = rf_switch_cfg->rx;
 8046974:	683b      	ldr	r3, [r7, #0]
 8046976:	789b      	ldrb	r3, [r3, #2]
 8046978:	743b      	strb	r3, [r7, #16]
    cbuffer[5] = rf_switch_cfg->tx;
 804697a:	683b      	ldr	r3, [r7, #0]
 804697c:	78db      	ldrb	r3, [r3, #3]
 804697e:	747b      	strb	r3, [r7, #17]
    cbuffer[6] = rf_switch_cfg->tx_hp;
 8046980:	683b      	ldr	r3, [r7, #0]
 8046982:	791b      	ldrb	r3, [r3, #4]
 8046984:	74bb      	strb	r3, [r7, #18]
    cbuffer[7] = rf_switch_cfg->tx_hf;
 8046986:	683b      	ldr	r3, [r7, #0]
 8046988:	795b      	ldrb	r3, [r3, #5]
 804698a:	74fb      	strb	r3, [r7, #19]
    cbuffer[8] = rf_switch_cfg->gnss;
 804698c:	683b      	ldr	r3, [r7, #0]
 804698e:	799b      	ldrb	r3, [r3, #6]
 8046990:	753b      	strb	r3, [r7, #20]
    cbuffer[9] = rf_switch_cfg->wifi;
 8046992:	683b      	ldr	r3, [r7, #0]
 8046994:	79db      	ldrb	r3, [r3, #7]
 8046996:	757b      	strb	r3, [r7, #21]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH, 0,
 8046998:	f107 010c 	add.w	r1, r7, #12
 804699c:	2300      	movs	r3, #0
 804699e:	9300      	str	r3, [sp, #0]
 80469a0:	2300      	movs	r3, #0
 80469a2:	220a      	movs	r2, #10
 80469a4:	6878      	ldr	r0, [r7, #4]
 80469a6:	f7fd fa97 	bl	8043ed8 <lr1110_hal_write>
 80469aa:	4603      	mov	r3, r0
                                                 0 );
}
 80469ac:	4618      	mov	r0, r3
 80469ae:	3718      	adds	r7, #24
 80469b0:	46bd      	mov	sp, r7
 80469b2:	bd80      	pop	{r7, pc}

080469b4 <lr1110_system_set_dio_irq_params>:

lr1110_status_t lr1110_system_set_dio_irq_params( const void* context, const uint32_t irqs_to_enable_dio1,
                                                  const uint32_t irqs_to_enable_dio2 )
{
 80469b4:	b580      	push	{r7, lr}
 80469b6:	b08a      	sub	sp, #40	; 0x28
 80469b8:	af02      	add	r7, sp, #8
 80469ba:	60f8      	str	r0, [r7, #12]
 80469bc:	60b9      	str	r1, [r7, #8]
 80469be:	607a      	str	r2, [r7, #4]
    uint8_t cbuffer[LR1110_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_DIOIRQPARAMS_OC >> 8 );
 80469c0:	2301      	movs	r3, #1
 80469c2:	753b      	strb	r3, [r7, #20]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_DIOIRQPARAMS_OC >> 0 );
 80469c4:	2313      	movs	r3, #19
 80469c6:	757b      	strb	r3, [r7, #21]

    cbuffer[2] = ( uint8_t )( irqs_to_enable_dio1 >> 24 );
 80469c8:	68bb      	ldr	r3, [r7, #8]
 80469ca:	0e1b      	lsrs	r3, r3, #24
 80469cc:	b2db      	uxtb	r3, r3
 80469ce:	75bb      	strb	r3, [r7, #22]
    cbuffer[3] = ( uint8_t )( irqs_to_enable_dio1 >> 16 );
 80469d0:	68bb      	ldr	r3, [r7, #8]
 80469d2:	0c1b      	lsrs	r3, r3, #16
 80469d4:	b2db      	uxtb	r3, r3
 80469d6:	75fb      	strb	r3, [r7, #23]
    cbuffer[4] = ( uint8_t )( irqs_to_enable_dio1 >> 8 );
 80469d8:	68bb      	ldr	r3, [r7, #8]
 80469da:	0a1b      	lsrs	r3, r3, #8
 80469dc:	b2db      	uxtb	r3, r3
 80469de:	763b      	strb	r3, [r7, #24]
    cbuffer[5] = ( uint8_t )( irqs_to_enable_dio1 >> 0 );
 80469e0:	68bb      	ldr	r3, [r7, #8]
 80469e2:	b2db      	uxtb	r3, r3
 80469e4:	767b      	strb	r3, [r7, #25]

    cbuffer[6] = ( uint8_t )( irqs_to_enable_dio2 >> 24 );
 80469e6:	687b      	ldr	r3, [r7, #4]
 80469e8:	0e1b      	lsrs	r3, r3, #24
 80469ea:	b2db      	uxtb	r3, r3
 80469ec:	76bb      	strb	r3, [r7, #26]
    cbuffer[7] = ( uint8_t )( irqs_to_enable_dio2 >> 16 );
 80469ee:	687b      	ldr	r3, [r7, #4]
 80469f0:	0c1b      	lsrs	r3, r3, #16
 80469f2:	b2db      	uxtb	r3, r3
 80469f4:	76fb      	strb	r3, [r7, #27]
    cbuffer[8] = ( uint8_t )( irqs_to_enable_dio2 >> 8 );
 80469f6:	687b      	ldr	r3, [r7, #4]
 80469f8:	0a1b      	lsrs	r3, r3, #8
 80469fa:	b2db      	uxtb	r3, r3
 80469fc:	773b      	strb	r3, [r7, #28]
    cbuffer[9] = ( uint8_t )( irqs_to_enable_dio2 >> 0 );
 80469fe:	687b      	ldr	r3, [r7, #4]
 8046a00:	b2db      	uxtb	r3, r3
 8046a02:	777b      	strb	r3, [r7, #29]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH, 0, 0 );
 8046a04:	f107 0114 	add.w	r1, r7, #20
 8046a08:	2300      	movs	r3, #0
 8046a0a:	9300      	str	r3, [sp, #0]
 8046a0c:	2300      	movs	r3, #0
 8046a0e:	220a      	movs	r2, #10
 8046a10:	68f8      	ldr	r0, [r7, #12]
 8046a12:	f7fd fa61 	bl	8043ed8 <lr1110_hal_write>
 8046a16:	4603      	mov	r3, r0
}
 8046a18:	4618      	mov	r0, r3
 8046a1a:	3720      	adds	r7, #32
 8046a1c:	46bd      	mov	sp, r7
 8046a1e:	bd80      	pop	{r7, pc}

08046a20 <lr1110_system_clear_irq_status>:

lr1110_status_t lr1110_system_clear_irq_status( const void* context, const lr1110_system_irq_mask_t irqs_to_clear )
{
 8046a20:	b580      	push	{r7, lr}
 8046a22:	b086      	sub	sp, #24
 8046a24:	af02      	add	r7, sp, #8
 8046a26:	6078      	str	r0, [r7, #4]
 8046a28:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_SYSTEM_CLEAR_IRQ_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CLEAR_IRQ_OC >> 8 );
 8046a2a:	2301      	movs	r3, #1
 8046a2c:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_CLEAR_IRQ_OC >> 0 );
 8046a2e:	2314      	movs	r3, #20
 8046a30:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t )( irqs_to_clear >> 24 );
 8046a32:	683b      	ldr	r3, [r7, #0]
 8046a34:	0e1b      	lsrs	r3, r3, #24
 8046a36:	b2db      	uxtb	r3, r3
 8046a38:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t )( irqs_to_clear >> 16 );
 8046a3a:	683b      	ldr	r3, [r7, #0]
 8046a3c:	0c1b      	lsrs	r3, r3, #16
 8046a3e:	b2db      	uxtb	r3, r3
 8046a40:	72fb      	strb	r3, [r7, #11]
    cbuffer[4] = ( uint8_t )( irqs_to_clear >> 8 );
 8046a42:	683b      	ldr	r3, [r7, #0]
 8046a44:	0a1b      	lsrs	r3, r3, #8
 8046a46:	b2db      	uxtb	r3, r3
 8046a48:	733b      	strb	r3, [r7, #12]
    cbuffer[5] = ( uint8_t )( irqs_to_clear >> 0 );
 8046a4a:	683b      	ldr	r3, [r7, #0]
 8046a4c:	b2db      	uxtb	r3, r3
 8046a4e:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_CLEAR_IRQ_CMD_LENGTH, 0, 0 );
 8046a50:	f107 0108 	add.w	r1, r7, #8
 8046a54:	2300      	movs	r3, #0
 8046a56:	9300      	str	r3, [sp, #0]
 8046a58:	2300      	movs	r3, #0
 8046a5a:	2206      	movs	r2, #6
 8046a5c:	6878      	ldr	r0, [r7, #4]
 8046a5e:	f7fd fa3b 	bl	8043ed8 <lr1110_hal_write>
 8046a62:	4603      	mov	r3, r0
}
 8046a64:	4618      	mov	r0, r3
 8046a66:	3710      	adds	r7, #16
 8046a68:	46bd      	mov	sp, r7
 8046a6a:	bd80      	pop	{r7, pc}

08046a6c <lr1110_system_set_tcxo_mode>:
    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_CFG_LFCLK_CMD_LENGTH, 0, 0 );
}

lr1110_status_t lr1110_system_set_tcxo_mode( const void* context, const lr1110_system_tcxo_supply_voltage_t tune,
                                             const uint32_t timeout )
{
 8046a6c:	b580      	push	{r7, lr}
 8046a6e:	b088      	sub	sp, #32
 8046a70:	af02      	add	r7, sp, #8
 8046a72:	60f8      	str	r0, [r7, #12]
 8046a74:	460b      	mov	r3, r1
 8046a76:	607a      	str	r2, [r7, #4]
 8046a78:	72fb      	strb	r3, [r7, #11]
    uint8_t cbuffer[LR1110_SYSTEM_SET_TCXO_MODE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_TCXO_MODE_OC >> 8 );
 8046a7a:	2301      	movs	r3, #1
 8046a7c:	743b      	strb	r3, [r7, #16]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_TCXO_MODE_OC >> 0 );
 8046a7e:	2317      	movs	r3, #23
 8046a80:	747b      	strb	r3, [r7, #17]

    cbuffer[2] = ( uint8_t ) tune;
 8046a82:	7afb      	ldrb	r3, [r7, #11]
 8046a84:	74bb      	strb	r3, [r7, #18]

    cbuffer[3] = ( uint8_t )( timeout >> 16 );
 8046a86:	687b      	ldr	r3, [r7, #4]
 8046a88:	0c1b      	lsrs	r3, r3, #16
 8046a8a:	b2db      	uxtb	r3, r3
 8046a8c:	74fb      	strb	r3, [r7, #19]
    cbuffer[4] = ( uint8_t )( timeout >> 8 );
 8046a8e:	687b      	ldr	r3, [r7, #4]
 8046a90:	0a1b      	lsrs	r3, r3, #8
 8046a92:	b2db      	uxtb	r3, r3
 8046a94:	753b      	strb	r3, [r7, #20]
    cbuffer[5] = ( uint8_t )( timeout >> 0 );
 8046a96:	687b      	ldr	r3, [r7, #4]
 8046a98:	b2db      	uxtb	r3, r3
 8046a9a:	757b      	strb	r3, [r7, #21]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_TCXO_MODE_CMD_LENGTH, 0, 0 );
 8046a9c:	f107 0110 	add.w	r1, r7, #16
 8046aa0:	2300      	movs	r3, #0
 8046aa2:	9300      	str	r3, [sp, #0]
 8046aa4:	2300      	movs	r3, #0
 8046aa6:	2206      	movs	r2, #6
 8046aa8:	68f8      	ldr	r0, [r7, #12]
 8046aaa:	f7fd fa15 	bl	8043ed8 <lr1110_hal_write>
 8046aae:	4603      	mov	r3, r0
}
 8046ab0:	4618      	mov	r0, r3
 8046ab2:	3718      	adds	r7, #24
 8046ab4:	46bd      	mov	sp, r7
 8046ab6:	bd80      	pop	{r7, pc}

08046ab8 <lr1110_system_set_sleep>:
    return status;
}

lr1110_status_t lr1110_system_set_sleep( const void* context, const lr1110_system_sleep_cfg_t sleep_cfg,
                                         const uint32_t sleep_time )
{
 8046ab8:	b580      	push	{r7, lr}
 8046aba:	b088      	sub	sp, #32
 8046abc:	af02      	add	r7, sp, #8
 8046abe:	60f8      	str	r0, [r7, #12]
 8046ac0:	8139      	strh	r1, [r7, #8]
 8046ac2:	607a      	str	r2, [r7, #4]
    uint8_t cbuffer[LR1110_SYSTEM_SET_SLEEP_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_SLEEP_OC >> 8 );
 8046ac4:	2301      	movs	r3, #1
 8046ac6:	743b      	strb	r3, [r7, #16]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_SLEEP_OC >> 0 );
 8046ac8:	231b      	movs	r3, #27
 8046aca:	747b      	strb	r3, [r7, #17]

    cbuffer[2] = ( sleep_cfg.is_rtc_timeout << 1 ) + sleep_cfg.is_warm_start;
 8046acc:	7a7b      	ldrb	r3, [r7, #9]
 8046ace:	005b      	lsls	r3, r3, #1
 8046ad0:	b2db      	uxtb	r3, r3
 8046ad2:	7a3a      	ldrb	r2, [r7, #8]
 8046ad4:	4413      	add	r3, r2
 8046ad6:	b2db      	uxtb	r3, r3
 8046ad8:	74bb      	strb	r3, [r7, #18]

    cbuffer[3] = ( uint8_t )( sleep_time >> 24 );
 8046ada:	687b      	ldr	r3, [r7, #4]
 8046adc:	0e1b      	lsrs	r3, r3, #24
 8046ade:	b2db      	uxtb	r3, r3
 8046ae0:	74fb      	strb	r3, [r7, #19]
    cbuffer[4] = ( uint8_t )( sleep_time >> 16 );
 8046ae2:	687b      	ldr	r3, [r7, #4]
 8046ae4:	0c1b      	lsrs	r3, r3, #16
 8046ae6:	b2db      	uxtb	r3, r3
 8046ae8:	753b      	strb	r3, [r7, #20]
    cbuffer[5] = ( uint8_t )( sleep_time >> 8 );
 8046aea:	687b      	ldr	r3, [r7, #4]
 8046aec:	0a1b      	lsrs	r3, r3, #8
 8046aee:	b2db      	uxtb	r3, r3
 8046af0:	757b      	strb	r3, [r7, #21]
    cbuffer[6] = ( uint8_t )( sleep_time >> 0 );
 8046af2:	687b      	ldr	r3, [r7, #4]
 8046af4:	b2db      	uxtb	r3, r3
 8046af6:	75bb      	strb	r3, [r7, #22]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_SLEEP_CMD_LENGTH, 0, 0 );
 8046af8:	f107 0110 	add.w	r1, r7, #16
 8046afc:	2300      	movs	r3, #0
 8046afe:	9300      	str	r3, [sp, #0]
 8046b00:	2300      	movs	r3, #0
 8046b02:	2207      	movs	r2, #7
 8046b04:	68f8      	ldr	r0, [r7, #12]
 8046b06:	f7fd f9e7 	bl	8043ed8 <lr1110_hal_write>
 8046b0a:	4603      	mov	r3, r0
}
 8046b0c:	4618      	mov	r0, r3
 8046b0e:	3718      	adds	r7, #24
 8046b10:	46bd      	mov	sp, r7
 8046b12:	bd80      	pop	{r7, pc}

08046b14 <lr1110_system_set_standby>:

lr1110_status_t lr1110_system_set_standby( const void* context, const lr1110_system_standby_cfg_t standby_cfg )
{
 8046b14:	b580      	push	{r7, lr}
 8046b16:	b086      	sub	sp, #24
 8046b18:	af02      	add	r7, sp, #8
 8046b1a:	6078      	str	r0, [r7, #4]
 8046b1c:	460b      	mov	r3, r1
 8046b1e:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_SYSTEM_SET_STANDBY_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_STANDBY_OC >> 8 );
 8046b20:	2301      	movs	r3, #1
 8046b22:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_STANDBY_OC >> 0 );
 8046b24:	231c      	movs	r3, #28
 8046b26:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t ) standby_cfg;
 8046b28:	78fb      	ldrb	r3, [r7, #3]
 8046b2a:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_STANDBY_CMD_LENGTH, 0, 0 );
 8046b2c:	f107 010c 	add.w	r1, r7, #12
 8046b30:	2300      	movs	r3, #0
 8046b32:	9300      	str	r3, [sp, #0]
 8046b34:	2300      	movs	r3, #0
 8046b36:	2203      	movs	r2, #3
 8046b38:	6878      	ldr	r0, [r7, #4]
 8046b3a:	f7fd f9cd 	bl	8043ed8 <lr1110_hal_write>
 8046b3e:	4603      	mov	r3, r0
}
 8046b40:	4618      	mov	r0, r3
 8046b42:	3710      	adds	r7, #16
 8046b44:	46bd      	mov	sp, r7
 8046b46:	bd80      	pop	{r7, pc}

08046b48 <lr1110_system_get_random_number>:
    return ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_SYSTEM_READ_PIN_CUSTOM_EUI_CMD_LENGTH, pin,
                                                LR1110_SYSTEM_PIN_LENGTH );
}

lr1110_status_t lr1110_system_get_random_number( const void* context, uint32_t* random_number )
{
 8046b48:	b580      	push	{r7, lr}
 8046b4a:	b086      	sub	sp, #24
 8046b4c:	af02      	add	r7, sp, #8
 8046b4e:	6078      	str	r0, [r7, #4]
 8046b50:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_SYSTEM_GET_RANDOM_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_RANDOM_OC >> 8 );
 8046b52:	2301      	movs	r3, #1
 8046b54:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_RANDOM_OC >> 0 );
 8046b56:	2320      	movs	r3, #32
 8046b58:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_SYSTEM_GET_RANDOM_CMD_LENGTH,
 8046b5a:	f107 010c 	add.w	r1, r7, #12
 8046b5e:	2304      	movs	r3, #4
 8046b60:	9300      	str	r3, [sp, #0]
 8046b62:	683b      	ldr	r3, [r7, #0]
 8046b64:	2202      	movs	r2, #2
 8046b66:	6878      	ldr	r0, [r7, #4]
 8046b68:	f7fd fa11 	bl	8043f8e <lr1110_hal_read>
 8046b6c:	4603      	mov	r3, r0
                                                ( uint8_t* ) random_number, sizeof( uint32_t ) );
}
 8046b6e:	4618      	mov	r0, r3
 8046b70:	3710      	adds	r7, #16
 8046b72:	46bd      	mov	sp, r7
 8046b74:	bd80      	pop	{r7, pc}

08046b76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8046b76:	b580      	push	{r7, lr}
 8046b78:	b082      	sub	sp, #8
 8046b7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8046b7c:	2300      	movs	r3, #0
 8046b7e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8046b80:	2004      	movs	r0, #4
 8046b82:	f001 fbee 	bl	8048362 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8046b86:	f7fc f957 	bl	8042e38 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8046b8a:	2000      	movs	r0, #0
 8046b8c:	f7fc f80a 	bl	8042ba4 <HAL_InitTick>
 8046b90:	4603      	mov	r3, r0
 8046b92:	2b00      	cmp	r3, #0
 8046b94:	d002      	beq.n	8046b9c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8046b96:	2301      	movs	r3, #1
 8046b98:	71fb      	strb	r3, [r7, #7]
 8046b9a:	e001      	b.n	8046ba0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8046b9c:	f7fb ffd8 	bl	8042b50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8046ba0:	79fb      	ldrb	r3, [r7, #7]
}
 8046ba2:	4618      	mov	r0, r3
 8046ba4:	3708      	adds	r7, #8
 8046ba6:	46bd      	mov	sp, r7
 8046ba8:	bd80      	pop	{r7, pc}
	...

08046bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8046bac:	b480      	push	{r7}
 8046bae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8046bb0:	4b06      	ldr	r3, [pc, #24]	; (8046bcc <HAL_IncTick+0x20>)
 8046bb2:	781b      	ldrb	r3, [r3, #0]
 8046bb4:	461a      	mov	r2, r3
 8046bb6:	4b06      	ldr	r3, [pc, #24]	; (8046bd0 <HAL_IncTick+0x24>)
 8046bb8:	681b      	ldr	r3, [r3, #0]
 8046bba:	4413      	add	r3, r2
 8046bbc:	4a04      	ldr	r2, [pc, #16]	; (8046bd0 <HAL_IncTick+0x24>)
 8046bbe:	6013      	str	r3, [r2, #0]
}
 8046bc0:	bf00      	nop
 8046bc2:	46bd      	mov	sp, r7
 8046bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046bc8:	4770      	bx	lr
 8046bca:	bf00      	nop
 8046bcc:	2001805d 	.word	0x2001805d
 8046bd0:	200197c8 	.word	0x200197c8

08046bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8046bd4:	b480      	push	{r7}
 8046bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8046bd8:	4b03      	ldr	r3, [pc, #12]	; (8046be8 <HAL_GetTick+0x14>)
 8046bda:	681b      	ldr	r3, [r3, #0]
}
 8046bdc:	4618      	mov	r0, r3
 8046bde:	46bd      	mov	sp, r7
 8046be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046be4:	4770      	bx	lr
 8046be6:	bf00      	nop
 8046be8:	200197c8 	.word	0x200197c8

08046bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8046bec:	b580      	push	{r7, lr}
 8046bee:	b084      	sub	sp, #16
 8046bf0:	af00      	add	r7, sp, #0
 8046bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8046bf4:	f7ff ffee 	bl	8046bd4 <HAL_GetTick>
 8046bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8046bfa:	687b      	ldr	r3, [r7, #4]
 8046bfc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8046bfe:	68fb      	ldr	r3, [r7, #12]
 8046c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046c04:	d005      	beq.n	8046c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8046c06:	4b0a      	ldr	r3, [pc, #40]	; (8046c30 <HAL_Delay+0x44>)
 8046c08:	781b      	ldrb	r3, [r3, #0]
 8046c0a:	461a      	mov	r2, r3
 8046c0c:	68fb      	ldr	r3, [r7, #12]
 8046c0e:	4413      	add	r3, r2
 8046c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8046c12:	bf00      	nop
 8046c14:	f7ff ffde 	bl	8046bd4 <HAL_GetTick>
 8046c18:	4602      	mov	r2, r0
 8046c1a:	68bb      	ldr	r3, [r7, #8]
 8046c1c:	1ad3      	subs	r3, r2, r3
 8046c1e:	68fa      	ldr	r2, [r7, #12]
 8046c20:	429a      	cmp	r2, r3
 8046c22:	d8f7      	bhi.n	8046c14 <HAL_Delay+0x28>
  {
  }
}
 8046c24:	bf00      	nop
 8046c26:	bf00      	nop
 8046c28:	3710      	adds	r7, #16
 8046c2a:	46bd      	mov	sp, r7
 8046c2c:	bd80      	pop	{r7, pc}
 8046c2e:	bf00      	nop
 8046c30:	2001805d 	.word	0x2001805d

08046c34 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8046c34:	b480      	push	{r7}
 8046c36:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8046c38:	4b05      	ldr	r3, [pc, #20]	; (8046c50 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8046c3a:	685b      	ldr	r3, [r3, #4]
 8046c3c:	4a04      	ldr	r2, [pc, #16]	; (8046c50 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8046c3e:	f043 0302 	orr.w	r3, r3, #2
 8046c42:	6053      	str	r3, [r2, #4]
}
 8046c44:	bf00      	nop
 8046c46:	46bd      	mov	sp, r7
 8046c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046c4c:	4770      	bx	lr
 8046c4e:	bf00      	nop
 8046c50:	e0044000 	.word	0xe0044000

08046c54 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8046c54:	b480      	push	{r7}
 8046c56:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8046c58:	4b05      	ldr	r3, [pc, #20]	; (8046c70 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8046c5a:	685b      	ldr	r3, [r3, #4]
 8046c5c:	4a04      	ldr	r2, [pc, #16]	; (8046c70 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8046c5e:	f043 0304 	orr.w	r3, r3, #4
 8046c62:	6053      	str	r3, [r2, #4]
}
 8046c64:	bf00      	nop
 8046c66:	46bd      	mov	sp, r7
 8046c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046c6c:	4770      	bx	lr
 8046c6e:	bf00      	nop
 8046c70:	e0044000 	.word	0xe0044000

08046c74 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8046c74:	b480      	push	{r7}
 8046c76:	b083      	sub	sp, #12
 8046c78:	af00      	add	r7, sp, #0
 8046c7a:	6078      	str	r0, [r7, #4]
 8046c7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8046c7e:	687b      	ldr	r3, [r7, #4]
 8046c80:	689b      	ldr	r3, [r3, #8]
 8046c82:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8046c86:	683b      	ldr	r3, [r7, #0]
 8046c88:	431a      	orrs	r2, r3
 8046c8a:	687b      	ldr	r3, [r7, #4]
 8046c8c:	609a      	str	r2, [r3, #8]
}
 8046c8e:	bf00      	nop
 8046c90:	370c      	adds	r7, #12
 8046c92:	46bd      	mov	sp, r7
 8046c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046c98:	4770      	bx	lr

08046c9a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8046c9a:	b480      	push	{r7}
 8046c9c:	b083      	sub	sp, #12
 8046c9e:	af00      	add	r7, sp, #0
 8046ca0:	6078      	str	r0, [r7, #4]
 8046ca2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8046ca4:	687b      	ldr	r3, [r7, #4]
 8046ca6:	689b      	ldr	r3, [r3, #8]
 8046ca8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8046cac:	683b      	ldr	r3, [r7, #0]
 8046cae:	431a      	orrs	r2, r3
 8046cb0:	687b      	ldr	r3, [r7, #4]
 8046cb2:	609a      	str	r2, [r3, #8]
}
 8046cb4:	bf00      	nop
 8046cb6:	370c      	adds	r7, #12
 8046cb8:	46bd      	mov	sp, r7
 8046cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046cbe:	4770      	bx	lr

08046cc0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8046cc0:	b480      	push	{r7}
 8046cc2:	b083      	sub	sp, #12
 8046cc4:	af00      	add	r7, sp, #0
 8046cc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8046cc8:	687b      	ldr	r3, [r7, #4]
 8046cca:	689b      	ldr	r3, [r3, #8]
 8046ccc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8046cd0:	4618      	mov	r0, r3
 8046cd2:	370c      	adds	r7, #12
 8046cd4:	46bd      	mov	sp, r7
 8046cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046cda:	4770      	bx	lr

08046cdc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8046cdc:	b480      	push	{r7}
 8046cde:	b087      	sub	sp, #28
 8046ce0:	af00      	add	r7, sp, #0
 8046ce2:	60f8      	str	r0, [r7, #12]
 8046ce4:	60b9      	str	r1, [r7, #8]
 8046ce6:	607a      	str	r2, [r7, #4]
 8046ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8046cea:	68fb      	ldr	r3, [r7, #12]
 8046cec:	3360      	adds	r3, #96	; 0x60
 8046cee:	461a      	mov	r2, r3
 8046cf0:	68bb      	ldr	r3, [r7, #8]
 8046cf2:	009b      	lsls	r3, r3, #2
 8046cf4:	4413      	add	r3, r2
 8046cf6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8046cf8:	697b      	ldr	r3, [r7, #20]
 8046cfa:	681a      	ldr	r2, [r3, #0]
 8046cfc:	4b08      	ldr	r3, [pc, #32]	; (8046d20 <LL_ADC_SetOffset+0x44>)
 8046cfe:	4013      	ands	r3, r2
 8046d00:	687a      	ldr	r2, [r7, #4]
 8046d02:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8046d06:	683a      	ldr	r2, [r7, #0]
 8046d08:	430a      	orrs	r2, r1
 8046d0a:	4313      	orrs	r3, r2
 8046d0c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8046d10:	697b      	ldr	r3, [r7, #20]
 8046d12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8046d14:	bf00      	nop
 8046d16:	371c      	adds	r7, #28
 8046d18:	46bd      	mov	sp, r7
 8046d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046d1e:	4770      	bx	lr
 8046d20:	03fff000 	.word	0x03fff000

08046d24 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8046d24:	b480      	push	{r7}
 8046d26:	b085      	sub	sp, #20
 8046d28:	af00      	add	r7, sp, #0
 8046d2a:	6078      	str	r0, [r7, #4]
 8046d2c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8046d2e:	687b      	ldr	r3, [r7, #4]
 8046d30:	3360      	adds	r3, #96	; 0x60
 8046d32:	461a      	mov	r2, r3
 8046d34:	683b      	ldr	r3, [r7, #0]
 8046d36:	009b      	lsls	r3, r3, #2
 8046d38:	4413      	add	r3, r2
 8046d3a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8046d3c:	68fb      	ldr	r3, [r7, #12]
 8046d3e:	681b      	ldr	r3, [r3, #0]
 8046d40:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8046d44:	4618      	mov	r0, r3
 8046d46:	3714      	adds	r7, #20
 8046d48:	46bd      	mov	sp, r7
 8046d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046d4e:	4770      	bx	lr

08046d50 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8046d50:	b480      	push	{r7}
 8046d52:	b087      	sub	sp, #28
 8046d54:	af00      	add	r7, sp, #0
 8046d56:	60f8      	str	r0, [r7, #12]
 8046d58:	60b9      	str	r1, [r7, #8]
 8046d5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8046d5c:	68fb      	ldr	r3, [r7, #12]
 8046d5e:	3360      	adds	r3, #96	; 0x60
 8046d60:	461a      	mov	r2, r3
 8046d62:	68bb      	ldr	r3, [r7, #8]
 8046d64:	009b      	lsls	r3, r3, #2
 8046d66:	4413      	add	r3, r2
 8046d68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8046d6a:	697b      	ldr	r3, [r7, #20]
 8046d6c:	681b      	ldr	r3, [r3, #0]
 8046d6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8046d72:	687b      	ldr	r3, [r7, #4]
 8046d74:	431a      	orrs	r2, r3
 8046d76:	697b      	ldr	r3, [r7, #20]
 8046d78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8046d7a:	bf00      	nop
 8046d7c:	371c      	adds	r7, #28
 8046d7e:	46bd      	mov	sp, r7
 8046d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046d84:	4770      	bx	lr

08046d86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8046d86:	b480      	push	{r7}
 8046d88:	b083      	sub	sp, #12
 8046d8a:	af00      	add	r7, sp, #0
 8046d8c:	6078      	str	r0, [r7, #4]
 8046d8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8046d90:	687b      	ldr	r3, [r7, #4]
 8046d92:	695b      	ldr	r3, [r3, #20]
 8046d94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8046d98:	683b      	ldr	r3, [r7, #0]
 8046d9a:	431a      	orrs	r2, r3
 8046d9c:	687b      	ldr	r3, [r7, #4]
 8046d9e:	615a      	str	r2, [r3, #20]
}
 8046da0:	bf00      	nop
 8046da2:	370c      	adds	r7, #12
 8046da4:	46bd      	mov	sp, r7
 8046da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046daa:	4770      	bx	lr

08046dac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8046dac:	b480      	push	{r7}
 8046dae:	b083      	sub	sp, #12
 8046db0:	af00      	add	r7, sp, #0
 8046db2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8046db4:	687b      	ldr	r3, [r7, #4]
 8046db6:	68db      	ldr	r3, [r3, #12]
 8046db8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8046dbc:	2b00      	cmp	r3, #0
 8046dbe:	d101      	bne.n	8046dc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8046dc0:	2301      	movs	r3, #1
 8046dc2:	e000      	b.n	8046dc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8046dc4:	2300      	movs	r3, #0
}
 8046dc6:	4618      	mov	r0, r3
 8046dc8:	370c      	adds	r7, #12
 8046dca:	46bd      	mov	sp, r7
 8046dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046dd0:	4770      	bx	lr

08046dd2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8046dd2:	b480      	push	{r7}
 8046dd4:	b087      	sub	sp, #28
 8046dd6:	af00      	add	r7, sp, #0
 8046dd8:	60f8      	str	r0, [r7, #12]
 8046dda:	60b9      	str	r1, [r7, #8]
 8046ddc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8046dde:	68fb      	ldr	r3, [r7, #12]
 8046de0:	3330      	adds	r3, #48	; 0x30
 8046de2:	461a      	mov	r2, r3
 8046de4:	68bb      	ldr	r3, [r7, #8]
 8046de6:	0a1b      	lsrs	r3, r3, #8
 8046de8:	009b      	lsls	r3, r3, #2
 8046dea:	f003 030c 	and.w	r3, r3, #12
 8046dee:	4413      	add	r3, r2
 8046df0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8046df2:	697b      	ldr	r3, [r7, #20]
 8046df4:	681a      	ldr	r2, [r3, #0]
 8046df6:	68bb      	ldr	r3, [r7, #8]
 8046df8:	f003 031f 	and.w	r3, r3, #31
 8046dfc:	211f      	movs	r1, #31
 8046dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8046e02:	43db      	mvns	r3, r3
 8046e04:	401a      	ands	r2, r3
 8046e06:	687b      	ldr	r3, [r7, #4]
 8046e08:	0e9b      	lsrs	r3, r3, #26
 8046e0a:	f003 011f 	and.w	r1, r3, #31
 8046e0e:	68bb      	ldr	r3, [r7, #8]
 8046e10:	f003 031f 	and.w	r3, r3, #31
 8046e14:	fa01 f303 	lsl.w	r3, r1, r3
 8046e18:	431a      	orrs	r2, r3
 8046e1a:	697b      	ldr	r3, [r7, #20]
 8046e1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8046e1e:	bf00      	nop
 8046e20:	371c      	adds	r7, #28
 8046e22:	46bd      	mov	sp, r7
 8046e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046e28:	4770      	bx	lr

08046e2a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8046e2a:	b480      	push	{r7}
 8046e2c:	b083      	sub	sp, #12
 8046e2e:	af00      	add	r7, sp, #0
 8046e30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8046e32:	687b      	ldr	r3, [r7, #4]
 8046e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8046e36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8046e3a:	2b00      	cmp	r3, #0
 8046e3c:	d101      	bne.n	8046e42 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8046e3e:	2301      	movs	r3, #1
 8046e40:	e000      	b.n	8046e44 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8046e42:	2300      	movs	r3, #0
}
 8046e44:	4618      	mov	r0, r3
 8046e46:	370c      	adds	r7, #12
 8046e48:	46bd      	mov	sp, r7
 8046e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046e4e:	4770      	bx	lr

08046e50 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8046e50:	b480      	push	{r7}
 8046e52:	b087      	sub	sp, #28
 8046e54:	af00      	add	r7, sp, #0
 8046e56:	60f8      	str	r0, [r7, #12]
 8046e58:	60b9      	str	r1, [r7, #8]
 8046e5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8046e5c:	68fb      	ldr	r3, [r7, #12]
 8046e5e:	3314      	adds	r3, #20
 8046e60:	461a      	mov	r2, r3
 8046e62:	68bb      	ldr	r3, [r7, #8]
 8046e64:	0e5b      	lsrs	r3, r3, #25
 8046e66:	009b      	lsls	r3, r3, #2
 8046e68:	f003 0304 	and.w	r3, r3, #4
 8046e6c:	4413      	add	r3, r2
 8046e6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8046e70:	697b      	ldr	r3, [r7, #20]
 8046e72:	681a      	ldr	r2, [r3, #0]
 8046e74:	68bb      	ldr	r3, [r7, #8]
 8046e76:	0d1b      	lsrs	r3, r3, #20
 8046e78:	f003 031f 	and.w	r3, r3, #31
 8046e7c:	2107      	movs	r1, #7
 8046e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8046e82:	43db      	mvns	r3, r3
 8046e84:	401a      	ands	r2, r3
 8046e86:	68bb      	ldr	r3, [r7, #8]
 8046e88:	0d1b      	lsrs	r3, r3, #20
 8046e8a:	f003 031f 	and.w	r3, r3, #31
 8046e8e:	6879      	ldr	r1, [r7, #4]
 8046e90:	fa01 f303 	lsl.w	r3, r1, r3
 8046e94:	431a      	orrs	r2, r3
 8046e96:	697b      	ldr	r3, [r7, #20]
 8046e98:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8046e9a:	bf00      	nop
 8046e9c:	371c      	adds	r7, #28
 8046e9e:	46bd      	mov	sp, r7
 8046ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046ea4:	4770      	bx	lr
	...

08046ea8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8046ea8:	b480      	push	{r7}
 8046eaa:	b085      	sub	sp, #20
 8046eac:	af00      	add	r7, sp, #0
 8046eae:	60f8      	str	r0, [r7, #12]
 8046eb0:	60b9      	str	r1, [r7, #8]
 8046eb2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8046eb4:	68fb      	ldr	r3, [r7, #12]
 8046eb6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8046eba:	68bb      	ldr	r3, [r7, #8]
 8046ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8046ec0:	43db      	mvns	r3, r3
 8046ec2:	401a      	ands	r2, r3
 8046ec4:	687b      	ldr	r3, [r7, #4]
 8046ec6:	f003 0318 	and.w	r3, r3, #24
 8046eca:	4908      	ldr	r1, [pc, #32]	; (8046eec <LL_ADC_SetChannelSingleDiff+0x44>)
 8046ecc:	40d9      	lsrs	r1, r3
 8046ece:	68bb      	ldr	r3, [r7, #8]
 8046ed0:	400b      	ands	r3, r1
 8046ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8046ed6:	431a      	orrs	r2, r3
 8046ed8:	68fb      	ldr	r3, [r7, #12]
 8046eda:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8046ede:	bf00      	nop
 8046ee0:	3714      	adds	r7, #20
 8046ee2:	46bd      	mov	sp, r7
 8046ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046ee8:	4770      	bx	lr
 8046eea:	bf00      	nop
 8046eec:	0007ffff 	.word	0x0007ffff

08046ef0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8046ef0:	b480      	push	{r7}
 8046ef2:	b083      	sub	sp, #12
 8046ef4:	af00      	add	r7, sp, #0
 8046ef6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8046ef8:	687b      	ldr	r3, [r7, #4]
 8046efa:	689b      	ldr	r3, [r3, #8]
 8046efc:	f003 031f 	and.w	r3, r3, #31
}
 8046f00:	4618      	mov	r0, r3
 8046f02:	370c      	adds	r7, #12
 8046f04:	46bd      	mov	sp, r7
 8046f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046f0a:	4770      	bx	lr

08046f0c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8046f0c:	b480      	push	{r7}
 8046f0e:	b083      	sub	sp, #12
 8046f10:	af00      	add	r7, sp, #0
 8046f12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8046f14:	687b      	ldr	r3, [r7, #4]
 8046f16:	689b      	ldr	r3, [r3, #8]
 8046f18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8046f1c:	4618      	mov	r0, r3
 8046f1e:	370c      	adds	r7, #12
 8046f20:	46bd      	mov	sp, r7
 8046f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046f26:	4770      	bx	lr

08046f28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8046f28:	b480      	push	{r7}
 8046f2a:	b083      	sub	sp, #12
 8046f2c:	af00      	add	r7, sp, #0
 8046f2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8046f30:	687b      	ldr	r3, [r7, #4]
 8046f32:	689b      	ldr	r3, [r3, #8]
 8046f34:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8046f38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8046f3c:	687a      	ldr	r2, [r7, #4]
 8046f3e:	6093      	str	r3, [r2, #8]
}
 8046f40:	bf00      	nop
 8046f42:	370c      	adds	r7, #12
 8046f44:	46bd      	mov	sp, r7
 8046f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046f4a:	4770      	bx	lr

08046f4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8046f4c:	b480      	push	{r7}
 8046f4e:	b083      	sub	sp, #12
 8046f50:	af00      	add	r7, sp, #0
 8046f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8046f54:	687b      	ldr	r3, [r7, #4]
 8046f56:	689b      	ldr	r3, [r3, #8]
 8046f58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8046f5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8046f60:	d101      	bne.n	8046f66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8046f62:	2301      	movs	r3, #1
 8046f64:	e000      	b.n	8046f68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8046f66:	2300      	movs	r3, #0
}
 8046f68:	4618      	mov	r0, r3
 8046f6a:	370c      	adds	r7, #12
 8046f6c:	46bd      	mov	sp, r7
 8046f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046f72:	4770      	bx	lr

08046f74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8046f74:	b480      	push	{r7}
 8046f76:	b083      	sub	sp, #12
 8046f78:	af00      	add	r7, sp, #0
 8046f7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8046f7c:	687b      	ldr	r3, [r7, #4]
 8046f7e:	689b      	ldr	r3, [r3, #8]
 8046f80:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8046f84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8046f88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8046f8c:	687b      	ldr	r3, [r7, #4]
 8046f8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8046f90:	bf00      	nop
 8046f92:	370c      	adds	r7, #12
 8046f94:	46bd      	mov	sp, r7
 8046f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046f9a:	4770      	bx	lr

08046f9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8046f9c:	b480      	push	{r7}
 8046f9e:	b083      	sub	sp, #12
 8046fa0:	af00      	add	r7, sp, #0
 8046fa2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8046fa4:	687b      	ldr	r3, [r7, #4]
 8046fa6:	689b      	ldr	r3, [r3, #8]
 8046fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8046fac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8046fb0:	d101      	bne.n	8046fb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8046fb2:	2301      	movs	r3, #1
 8046fb4:	e000      	b.n	8046fb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8046fb6:	2300      	movs	r3, #0
}
 8046fb8:	4618      	mov	r0, r3
 8046fba:	370c      	adds	r7, #12
 8046fbc:	46bd      	mov	sp, r7
 8046fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046fc2:	4770      	bx	lr

08046fc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8046fc4:	b480      	push	{r7}
 8046fc6:	b083      	sub	sp, #12
 8046fc8:	af00      	add	r7, sp, #0
 8046fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8046fcc:	687b      	ldr	r3, [r7, #4]
 8046fce:	689b      	ldr	r3, [r3, #8]
 8046fd0:	f003 0301 	and.w	r3, r3, #1
 8046fd4:	2b01      	cmp	r3, #1
 8046fd6:	d101      	bne.n	8046fdc <LL_ADC_IsEnabled+0x18>
 8046fd8:	2301      	movs	r3, #1
 8046fda:	e000      	b.n	8046fde <LL_ADC_IsEnabled+0x1a>
 8046fdc:	2300      	movs	r3, #0
}
 8046fde:	4618      	mov	r0, r3
 8046fe0:	370c      	adds	r7, #12
 8046fe2:	46bd      	mov	sp, r7
 8046fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046fe8:	4770      	bx	lr

08046fea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8046fea:	b480      	push	{r7}
 8046fec:	b083      	sub	sp, #12
 8046fee:	af00      	add	r7, sp, #0
 8046ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8046ff2:	687b      	ldr	r3, [r7, #4]
 8046ff4:	689b      	ldr	r3, [r3, #8]
 8046ff6:	f003 0304 	and.w	r3, r3, #4
 8046ffa:	2b04      	cmp	r3, #4
 8046ffc:	d101      	bne.n	8047002 <LL_ADC_REG_IsConversionOngoing+0x18>
 8046ffe:	2301      	movs	r3, #1
 8047000:	e000      	b.n	8047004 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8047002:	2300      	movs	r3, #0
}
 8047004:	4618      	mov	r0, r3
 8047006:	370c      	adds	r7, #12
 8047008:	46bd      	mov	sp, r7
 804700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804700e:	4770      	bx	lr

08047010 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8047010:	b480      	push	{r7}
 8047012:	b083      	sub	sp, #12
 8047014:	af00      	add	r7, sp, #0
 8047016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8047018:	687b      	ldr	r3, [r7, #4]
 804701a:	689b      	ldr	r3, [r3, #8]
 804701c:	f003 0308 	and.w	r3, r3, #8
 8047020:	2b08      	cmp	r3, #8
 8047022:	d101      	bne.n	8047028 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8047024:	2301      	movs	r3, #1
 8047026:	e000      	b.n	804702a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8047028:	2300      	movs	r3, #0
}
 804702a:	4618      	mov	r0, r3
 804702c:	370c      	adds	r7, #12
 804702e:	46bd      	mov	sp, r7
 8047030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047034:	4770      	bx	lr
	...

08047038 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8047038:	b590      	push	{r4, r7, lr}
 804703a:	b089      	sub	sp, #36	; 0x24
 804703c:	af00      	add	r7, sp, #0
 804703e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8047040:	2300      	movs	r3, #0
 8047042:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8047044:	2300      	movs	r3, #0
 8047046:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8047048:	687b      	ldr	r3, [r7, #4]
 804704a:	2b00      	cmp	r3, #0
 804704c:	d101      	bne.n	8047052 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 804704e:	2301      	movs	r3, #1
 8047050:	e17c      	b.n	804734c <HAL_ADC_Init+0x314>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8047052:	687b      	ldr	r3, [r7, #4]
 8047054:	691b      	ldr	r3, [r3, #16]
 8047056:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8047058:	687b      	ldr	r3, [r7, #4]
 804705a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804705c:	2b00      	cmp	r3, #0
 804705e:	d132      	bne.n	80470c6 <HAL_ADC_Init+0x8e>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8047060:	687b      	ldr	r3, [r7, #4]
 8047062:	4a9d      	ldr	r2, [pc, #628]	; (80472d8 <HAL_ADC_Init+0x2a0>)
 8047064:	669a      	str	r2, [r3, #104]	; 0x68
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8047066:	687b      	ldr	r3, [r7, #4]
 8047068:	4a9c      	ldr	r2, [pc, #624]	; (80472dc <HAL_ADC_Init+0x2a4>)
 804706a:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 804706c:	687b      	ldr	r3, [r7, #4]
 804706e:	4a9c      	ldr	r2, [pc, #624]	; (80472e0 <HAL_ADC_Init+0x2a8>)
 8047070:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8047072:	687b      	ldr	r3, [r7, #4]
 8047074:	4a9b      	ldr	r2, [pc, #620]	; (80472e4 <HAL_ADC_Init+0x2ac>)
 8047076:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8047078:	687b      	ldr	r3, [r7, #4]
 804707a:	4a9b      	ldr	r2, [pc, #620]	; (80472e8 <HAL_ADC_Init+0x2b0>)
 804707c:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 804707e:	687b      	ldr	r3, [r7, #4]
 8047080:	4a9a      	ldr	r2, [pc, #616]	; (80472ec <HAL_ADC_Init+0x2b4>)
 8047082:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8047084:	687b      	ldr	r3, [r7, #4]
 8047086:	4a9a      	ldr	r2, [pc, #616]	; (80472f0 <HAL_ADC_Init+0x2b8>)
 8047088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 804708c:	687b      	ldr	r3, [r7, #4]
 804708e:	4a99      	ldr	r2, [pc, #612]	; (80472f4 <HAL_ADC_Init+0x2bc>)
 8047090:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8047094:	687b      	ldr	r3, [r7, #4]
 8047096:	4a98      	ldr	r2, [pc, #608]	; (80472f8 <HAL_ADC_Init+0x2c0>)
 8047098:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (hadc->MspInitCallback == NULL)
 804709c:	687b      	ldr	r3, [r7, #4]
 804709e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80470a2:	2b00      	cmp	r3, #0
 80470a4:	d103      	bne.n	80470ae <HAL_ADC_Init+0x76>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 80470a6:	687b      	ldr	r3, [r7, #4]
 80470a8:	4a94      	ldr	r2, [pc, #592]	; (80472fc <HAL_ADC_Init+0x2c4>)
 80470aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 80470ae:	687b      	ldr	r3, [r7, #4]
 80470b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80470b4:	6878      	ldr	r0, [r7, #4]
 80470b6:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80470b8:	687b      	ldr	r3, [r7, #4]
 80470ba:	2200      	movs	r2, #0
 80470bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80470be:	687b      	ldr	r3, [r7, #4]
 80470c0:	2200      	movs	r2, #0
 80470c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80470c6:	687b      	ldr	r3, [r7, #4]
 80470c8:	681b      	ldr	r3, [r3, #0]
 80470ca:	4618      	mov	r0, r3
 80470cc:	f7ff ff3e 	bl	8046f4c <LL_ADC_IsDeepPowerDownEnabled>
 80470d0:	4603      	mov	r3, r0
 80470d2:	2b00      	cmp	r3, #0
 80470d4:	d004      	beq.n	80470e0 <HAL_ADC_Init+0xa8>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80470d6:	687b      	ldr	r3, [r7, #4]
 80470d8:	681b      	ldr	r3, [r3, #0]
 80470da:	4618      	mov	r0, r3
 80470dc:	f7ff ff24 	bl	8046f28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80470e0:	687b      	ldr	r3, [r7, #4]
 80470e2:	681b      	ldr	r3, [r3, #0]
 80470e4:	4618      	mov	r0, r3
 80470e6:	f7ff ff59 	bl	8046f9c <LL_ADC_IsInternalRegulatorEnabled>
 80470ea:	4603      	mov	r3, r0
 80470ec:	2b00      	cmp	r3, #0
 80470ee:	d113      	bne.n	8047118 <HAL_ADC_Init+0xe0>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80470f0:	687b      	ldr	r3, [r7, #4]
 80470f2:	681b      	ldr	r3, [r3, #0]
 80470f4:	4618      	mov	r0, r3
 80470f6:	f7ff ff3d 	bl	8046f74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80470fa:	4b81      	ldr	r3, [pc, #516]	; (8047300 <HAL_ADC_Init+0x2c8>)
 80470fc:	681b      	ldr	r3, [r3, #0]
 80470fe:	099b      	lsrs	r3, r3, #6
 8047100:	4a80      	ldr	r2, [pc, #512]	; (8047304 <HAL_ADC_Init+0x2cc>)
 8047102:	fba2 2303 	umull	r2, r3, r2, r3
 8047106:	099b      	lsrs	r3, r3, #6
 8047108:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 804710a:	e002      	b.n	8047112 <HAL_ADC_Init+0xda>
    {
      wait_loop_index--;
 804710c:	68bb      	ldr	r3, [r7, #8]
 804710e:	3b01      	subs	r3, #1
 8047110:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8047112:	68bb      	ldr	r3, [r7, #8]
 8047114:	2b00      	cmp	r3, #0
 8047116:	d1f9      	bne.n	804710c <HAL_ADC_Init+0xd4>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8047118:	687b      	ldr	r3, [r7, #4]
 804711a:	681b      	ldr	r3, [r3, #0]
 804711c:	4618      	mov	r0, r3
 804711e:	f7ff ff3d 	bl	8046f9c <LL_ADC_IsInternalRegulatorEnabled>
 8047122:	4603      	mov	r3, r0
 8047124:	2b00      	cmp	r3, #0
 8047126:	d10d      	bne.n	8047144 <HAL_ADC_Init+0x10c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8047128:	687b      	ldr	r3, [r7, #4]
 804712a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804712c:	f043 0210 	orr.w	r2, r3, #16
 8047130:	687b      	ldr	r3, [r7, #4]
 8047132:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8047134:	687b      	ldr	r3, [r7, #4]
 8047136:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8047138:	f043 0201 	orr.w	r2, r3, #1
 804713c:	687b      	ldr	r3, [r7, #4]
 804713e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8047140:	2301      	movs	r3, #1
 8047142:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8047144:	687b      	ldr	r3, [r7, #4]
 8047146:	681b      	ldr	r3, [r3, #0]
 8047148:	4618      	mov	r0, r3
 804714a:	f7ff ff4e 	bl	8046fea <LL_ADC_REG_IsConversionOngoing>
 804714e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8047150:	687b      	ldr	r3, [r7, #4]
 8047152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047154:	f003 0310 	and.w	r3, r3, #16
 8047158:	2b00      	cmp	r3, #0
 804715a:	f040 80ee 	bne.w	804733a <HAL_ADC_Init+0x302>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 804715e:	697b      	ldr	r3, [r7, #20]
 8047160:	2b00      	cmp	r3, #0
 8047162:	f040 80ea 	bne.w	804733a <HAL_ADC_Init+0x302>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8047166:	687b      	ldr	r3, [r7, #4]
 8047168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804716a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 804716e:	f043 0202 	orr.w	r2, r3, #2
 8047172:	687b      	ldr	r3, [r7, #4]
 8047174:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8047176:	687b      	ldr	r3, [r7, #4]
 8047178:	681b      	ldr	r3, [r3, #0]
 804717a:	4618      	mov	r0, r3
 804717c:	f7ff ff22 	bl	8046fc4 <LL_ADC_IsEnabled>
 8047180:	4603      	mov	r3, r0
 8047182:	2b00      	cmp	r3, #0
 8047184:	d110      	bne.n	80471a8 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8047186:	4860      	ldr	r0, [pc, #384]	; (8047308 <HAL_ADC_Init+0x2d0>)
 8047188:	f7ff ff1c 	bl	8046fc4 <LL_ADC_IsEnabled>
 804718c:	4604      	mov	r4, r0
 804718e:	485f      	ldr	r0, [pc, #380]	; (804730c <HAL_ADC_Init+0x2d4>)
 8047190:	f7ff ff18 	bl	8046fc4 <LL_ADC_IsEnabled>
 8047194:	4603      	mov	r3, r0
 8047196:	4323      	orrs	r3, r4
 8047198:	2b00      	cmp	r3, #0
 804719a:	d105      	bne.n	80471a8 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 804719c:	687b      	ldr	r3, [r7, #4]
 804719e:	685b      	ldr	r3, [r3, #4]
 80471a0:	4619      	mov	r1, r3
 80471a2:	485b      	ldr	r0, [pc, #364]	; (8047310 <HAL_ADC_Init+0x2d8>)
 80471a4:	f7ff fd66 	bl	8046c74 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80471a8:	687b      	ldr	r3, [r7, #4]
 80471aa:	7e5b      	ldrb	r3, [r3, #25]
 80471ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80471ae:	687b      	ldr	r3, [r7, #4]
 80471b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80471b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80471b4:	687b      	ldr	r3, [r7, #4]
 80471b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80471b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80471ba:	687b      	ldr	r3, [r7, #4]
 80471bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80471be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80471c0:	687b      	ldr	r3, [r7, #4]
 80471c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80471c6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80471c8:	4313      	orrs	r3, r2
 80471ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80471cc:	687b      	ldr	r3, [r7, #4]
 80471ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80471d2:	2b01      	cmp	r3, #1
 80471d4:	d106      	bne.n	80471e4 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80471d6:	687b      	ldr	r3, [r7, #4]
 80471d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80471da:	3b01      	subs	r3, #1
 80471dc:	045b      	lsls	r3, r3, #17
 80471de:	69ba      	ldr	r2, [r7, #24]
 80471e0:	4313      	orrs	r3, r2
 80471e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80471e4:	687b      	ldr	r3, [r7, #4]
 80471e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80471e8:	2b00      	cmp	r3, #0
 80471ea:	d009      	beq.n	8047200 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80471ec:	687b      	ldr	r3, [r7, #4]
 80471ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80471f0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80471f4:	687b      	ldr	r3, [r7, #4]
 80471f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80471f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80471fa:	69ba      	ldr	r2, [r7, #24]
 80471fc:	4313      	orrs	r3, r2
 80471fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8047200:	687b      	ldr	r3, [r7, #4]
 8047202:	681b      	ldr	r3, [r3, #0]
 8047204:	68da      	ldr	r2, [r3, #12]
 8047206:	4b43      	ldr	r3, [pc, #268]	; (8047314 <HAL_ADC_Init+0x2dc>)
 8047208:	4013      	ands	r3, r2
 804720a:	687a      	ldr	r2, [r7, #4]
 804720c:	6812      	ldr	r2, [r2, #0]
 804720e:	69b9      	ldr	r1, [r7, #24]
 8047210:	430b      	orrs	r3, r1
 8047212:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8047214:	687b      	ldr	r3, [r7, #4]
 8047216:	681b      	ldr	r3, [r3, #0]
 8047218:	4618      	mov	r0, r3
 804721a:	f7ff fee6 	bl	8046fea <LL_ADC_REG_IsConversionOngoing>
 804721e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8047220:	687b      	ldr	r3, [r7, #4]
 8047222:	681b      	ldr	r3, [r3, #0]
 8047224:	4618      	mov	r0, r3
 8047226:	f7ff fef3 	bl	8047010 <LL_ADC_INJ_IsConversionOngoing>
 804722a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 804722c:	693b      	ldr	r3, [r7, #16]
 804722e:	2b00      	cmp	r3, #0
 8047230:	d140      	bne.n	80472b4 <HAL_ADC_Init+0x27c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8047232:	68fb      	ldr	r3, [r7, #12]
 8047234:	2b00      	cmp	r3, #0
 8047236:	d13d      	bne.n	80472b4 <HAL_ADC_Init+0x27c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8047238:	687b      	ldr	r3, [r7, #4]
 804723a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 804723c:	687b      	ldr	r3, [r7, #4]
 804723e:	7e1b      	ldrb	r3, [r3, #24]
 8047240:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8047242:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8047244:	687b      	ldr	r3, [r7, #4]
 8047246:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804724a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 804724c:	4313      	orrs	r3, r2
 804724e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8047250:	687b      	ldr	r3, [r7, #4]
 8047252:	681b      	ldr	r3, [r3, #0]
 8047254:	68db      	ldr	r3, [r3, #12]
 8047256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 804725a:	f023 0306 	bic.w	r3, r3, #6
 804725e:	687a      	ldr	r2, [r7, #4]
 8047260:	6812      	ldr	r2, [r2, #0]
 8047262:	69b9      	ldr	r1, [r7, #24]
 8047264:	430b      	orrs	r3, r1
 8047266:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8047268:	687b      	ldr	r3, [r7, #4]
 804726a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 804726e:	2b01      	cmp	r3, #1
 8047270:	d118      	bne.n	80472a4 <HAL_ADC_Init+0x26c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8047272:	687b      	ldr	r3, [r7, #4]
 8047274:	681b      	ldr	r3, [r3, #0]
 8047276:	691b      	ldr	r3, [r3, #16]
 8047278:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 804727c:	f023 0304 	bic.w	r3, r3, #4
 8047280:	687a      	ldr	r2, [r7, #4]
 8047282:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8047284:	687a      	ldr	r2, [r7, #4]
 8047286:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8047288:	4311      	orrs	r1, r2
 804728a:	687a      	ldr	r2, [r7, #4]
 804728c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 804728e:	4311      	orrs	r1, r2
 8047290:	687a      	ldr	r2, [r7, #4]
 8047292:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8047294:	430a      	orrs	r2, r1
 8047296:	431a      	orrs	r2, r3
 8047298:	687b      	ldr	r3, [r7, #4]
 804729a:	681b      	ldr	r3, [r3, #0]
 804729c:	f042 0201 	orr.w	r2, r2, #1
 80472a0:	611a      	str	r2, [r3, #16]
 80472a2:	e007      	b.n	80472b4 <HAL_ADC_Init+0x27c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80472a4:	687b      	ldr	r3, [r7, #4]
 80472a6:	681b      	ldr	r3, [r3, #0]
 80472a8:	691a      	ldr	r2, [r3, #16]
 80472aa:	687b      	ldr	r3, [r7, #4]
 80472ac:	681b      	ldr	r3, [r3, #0]
 80472ae:	f022 0201 	bic.w	r2, r2, #1
 80472b2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80472b4:	687b      	ldr	r3, [r7, #4]
 80472b6:	691b      	ldr	r3, [r3, #16]
 80472b8:	2b01      	cmp	r3, #1
 80472ba:	d12d      	bne.n	8047318 <HAL_ADC_Init+0x2e0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80472bc:	687b      	ldr	r3, [r7, #4]
 80472be:	681b      	ldr	r3, [r3, #0]
 80472c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80472c2:	f023 010f 	bic.w	r1, r3, #15
 80472c6:	687b      	ldr	r3, [r7, #4]
 80472c8:	69db      	ldr	r3, [r3, #28]
 80472ca:	1e5a      	subs	r2, r3, #1
 80472cc:	687b      	ldr	r3, [r7, #4]
 80472ce:	681b      	ldr	r3, [r3, #0]
 80472d0:	430a      	orrs	r2, r1
 80472d2:	631a      	str	r2, [r3, #48]	; 0x30
 80472d4:	e028      	b.n	8047328 <HAL_ADC_Init+0x2f0>
 80472d6:	bf00      	nop
 80472d8:	0804779d 	.word	0x0804779d
 80472dc:	080477b1 	.word	0x080477b1
 80472e0:	080477c5 	.word	0x080477c5
 80472e4:	080477d9 	.word	0x080477d9
 80472e8:	08048009 	.word	0x08048009
 80472ec:	0804801d 	.word	0x0804801d
 80472f0:	08048031 	.word	0x08048031
 80472f4:	08048045 	.word	0x08048045
 80472f8:	08048059 	.word	0x08048059
 80472fc:	08040ee5 	.word	0x08040ee5
 8047300:	20018024 	.word	0x20018024
 8047304:	053e2d63 	.word	0x053e2d63
 8047308:	42028000 	.word	0x42028000
 804730c:	42028100 	.word	0x42028100
 8047310:	42028300 	.word	0x42028300
 8047314:	fff0c007 	.word	0xfff0c007
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8047318:	687b      	ldr	r3, [r7, #4]
 804731a:	681b      	ldr	r3, [r3, #0]
 804731c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804731e:	687b      	ldr	r3, [r7, #4]
 8047320:	681b      	ldr	r3, [r3, #0]
 8047322:	f022 020f 	bic.w	r2, r2, #15
 8047326:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8047328:	687b      	ldr	r3, [r7, #4]
 804732a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804732c:	f023 0303 	bic.w	r3, r3, #3
 8047330:	f043 0201 	orr.w	r2, r3, #1
 8047334:	687b      	ldr	r3, [r7, #4]
 8047336:	659a      	str	r2, [r3, #88]	; 0x58
 8047338:	e007      	b.n	804734a <HAL_ADC_Init+0x312>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 804733a:	687b      	ldr	r3, [r7, #4]
 804733c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804733e:	f043 0210 	orr.w	r2, r3, #16
 8047342:	687b      	ldr	r3, [r7, #4]
 8047344:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8047346:	2301      	movs	r3, #1
 8047348:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 804734a:	7ffb      	ldrb	r3, [r7, #31]
}
 804734c:	4618      	mov	r0, r3
 804734e:	3724      	adds	r7, #36	; 0x24
 8047350:	46bd      	mov	sp, r7
 8047352:	bd90      	pop	{r4, r7, pc}

08047354 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8047354:	b580      	push	{r7, lr}
 8047356:	b08a      	sub	sp, #40	; 0x28
 8047358:	af00      	add	r7, sp, #0
 804735a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 804735c:	2300      	movs	r3, #0
 804735e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8047360:	687b      	ldr	r3, [r7, #4]
 8047362:	681b      	ldr	r3, [r3, #0]
 8047364:	681b      	ldr	r3, [r3, #0]
 8047366:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8047368:	687b      	ldr	r3, [r7, #4]
 804736a:	681b      	ldr	r3, [r3, #0]
 804736c:	685b      	ldr	r3, [r3, #4]
 804736e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8047370:	4883      	ldr	r0, [pc, #524]	; (8047580 <HAL_ADC_IRQHandler+0x22c>)
 8047372:	f7ff fdbd 	bl	8046ef0 <LL_ADC_GetMultimode>
 8047376:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8047378:	69fb      	ldr	r3, [r7, #28]
 804737a:	f003 0302 	and.w	r3, r3, #2
 804737e:	2b00      	cmp	r3, #0
 8047380:	d019      	beq.n	80473b6 <HAL_ADC_IRQHandler+0x62>
 8047382:	69bb      	ldr	r3, [r7, #24]
 8047384:	f003 0302 	and.w	r3, r3, #2
 8047388:	2b00      	cmp	r3, #0
 804738a:	d014      	beq.n	80473b6 <HAL_ADC_IRQHandler+0x62>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 804738c:	687b      	ldr	r3, [r7, #4]
 804738e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047390:	f003 0310 	and.w	r3, r3, #16
 8047394:	2b00      	cmp	r3, #0
 8047396:	d105      	bne.n	80473a4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8047398:	687b      	ldr	r3, [r7, #4]
 804739a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804739c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80473a0:	687b      	ldr	r3, [r7, #4]
 80473a2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
 80473a4:	687b      	ldr	r3, [r7, #4]
 80473a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80473aa:	6878      	ldr	r0, [r7, #4]
 80473ac:	4798      	blx	r3
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80473ae:	687b      	ldr	r3, [r7, #4]
 80473b0:	681b      	ldr	r3, [r3, #0]
 80473b2:	2202      	movs	r2, #2
 80473b4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80473b6:	69fb      	ldr	r3, [r7, #28]
 80473b8:	f003 0304 	and.w	r3, r3, #4
 80473bc:	2b00      	cmp	r3, #0
 80473be:	d004      	beq.n	80473ca <HAL_ADC_IRQHandler+0x76>
 80473c0:	69bb      	ldr	r3, [r7, #24]
 80473c2:	f003 0304 	and.w	r3, r3, #4
 80473c6:	2b00      	cmp	r3, #0
 80473c8:	d10a      	bne.n	80473e0 <HAL_ADC_IRQHandler+0x8c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80473ca:	69fb      	ldr	r3, [r7, #28]
 80473cc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80473d0:	2b00      	cmp	r3, #0
 80473d2:	f000 8084 	beq.w	80474de <HAL_ADC_IRQHandler+0x18a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80473d6:	69bb      	ldr	r3, [r7, #24]
 80473d8:	f003 0308 	and.w	r3, r3, #8
 80473dc:	2b00      	cmp	r3, #0
 80473de:	d07e      	beq.n	80474de <HAL_ADC_IRQHandler+0x18a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80473e0:	687b      	ldr	r3, [r7, #4]
 80473e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80473e4:	f003 0310 	and.w	r3, r3, #16
 80473e8:	2b00      	cmp	r3, #0
 80473ea:	d105      	bne.n	80473f8 <HAL_ADC_IRQHandler+0xa4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80473ec:	687b      	ldr	r3, [r7, #4]
 80473ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80473f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80473f4:	687b      	ldr	r3, [r7, #4]
 80473f6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80473f8:	687b      	ldr	r3, [r7, #4]
 80473fa:	681b      	ldr	r3, [r3, #0]
 80473fc:	4618      	mov	r0, r3
 80473fe:	f7ff fcd5 	bl	8046dac <LL_ADC_REG_IsTriggerSourceSWStart>
 8047402:	4603      	mov	r3, r0
 8047404:	2b00      	cmp	r3, #0
 8047406:	d062      	beq.n	80474ce <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8047408:	687b      	ldr	r3, [r7, #4]
 804740a:	681b      	ldr	r3, [r3, #0]
 804740c:	4a5d      	ldr	r2, [pc, #372]	; (8047584 <HAL_ADC_IRQHandler+0x230>)
 804740e:	4293      	cmp	r3, r2
 8047410:	d002      	beq.n	8047418 <HAL_ADC_IRQHandler+0xc4>
 8047412:	687b      	ldr	r3, [r7, #4]
 8047414:	681b      	ldr	r3, [r3, #0]
 8047416:	e000      	b.n	804741a <HAL_ADC_IRQHandler+0xc6>
 8047418:	4b5b      	ldr	r3, [pc, #364]	; (8047588 <HAL_ADC_IRQHandler+0x234>)
 804741a:	687a      	ldr	r2, [r7, #4]
 804741c:	6812      	ldr	r2, [r2, #0]
 804741e:	4293      	cmp	r3, r2
 8047420:	d008      	beq.n	8047434 <HAL_ADC_IRQHandler+0xe0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8047422:	697b      	ldr	r3, [r7, #20]
 8047424:	2b00      	cmp	r3, #0
 8047426:	d005      	beq.n	8047434 <HAL_ADC_IRQHandler+0xe0>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8047428:	697b      	ldr	r3, [r7, #20]
 804742a:	2b05      	cmp	r3, #5
 804742c:	d002      	beq.n	8047434 <HAL_ADC_IRQHandler+0xe0>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 804742e:	697b      	ldr	r3, [r7, #20]
 8047430:	2b09      	cmp	r3, #9
 8047432:	d104      	bne.n	804743e <HAL_ADC_IRQHandler+0xea>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8047434:	687b      	ldr	r3, [r7, #4]
 8047436:	681b      	ldr	r3, [r3, #0]
 8047438:	68db      	ldr	r3, [r3, #12]
 804743a:	623b      	str	r3, [r7, #32]
 804743c:	e00c      	b.n	8047458 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 804743e:	687b      	ldr	r3, [r7, #4]
 8047440:	681b      	ldr	r3, [r3, #0]
 8047442:	4a50      	ldr	r2, [pc, #320]	; (8047584 <HAL_ADC_IRQHandler+0x230>)
 8047444:	4293      	cmp	r3, r2
 8047446:	d002      	beq.n	804744e <HAL_ADC_IRQHandler+0xfa>
 8047448:	687b      	ldr	r3, [r7, #4]
 804744a:	681b      	ldr	r3, [r3, #0]
 804744c:	e000      	b.n	8047450 <HAL_ADC_IRQHandler+0xfc>
 804744e:	4b4e      	ldr	r3, [pc, #312]	; (8047588 <HAL_ADC_IRQHandler+0x234>)
 8047450:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8047452:	693b      	ldr	r3, [r7, #16]
 8047454:	68db      	ldr	r3, [r3, #12]
 8047456:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8047458:	6a3b      	ldr	r3, [r7, #32]
 804745a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 804745e:	2b00      	cmp	r3, #0
 8047460:	d135      	bne.n	80474ce <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8047462:	687b      	ldr	r3, [r7, #4]
 8047464:	681b      	ldr	r3, [r3, #0]
 8047466:	681b      	ldr	r3, [r3, #0]
 8047468:	f003 0308 	and.w	r3, r3, #8
 804746c:	2b08      	cmp	r3, #8
 804746e:	d12e      	bne.n	80474ce <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8047470:	687b      	ldr	r3, [r7, #4]
 8047472:	681b      	ldr	r3, [r3, #0]
 8047474:	4618      	mov	r0, r3
 8047476:	f7ff fdb8 	bl	8046fea <LL_ADC_REG_IsConversionOngoing>
 804747a:	4603      	mov	r3, r0
 804747c:	2b00      	cmp	r3, #0
 804747e:	d11a      	bne.n	80474b6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8047480:	687b      	ldr	r3, [r7, #4]
 8047482:	681b      	ldr	r3, [r3, #0]
 8047484:	685a      	ldr	r2, [r3, #4]
 8047486:	687b      	ldr	r3, [r7, #4]
 8047488:	681b      	ldr	r3, [r3, #0]
 804748a:	f022 020c 	bic.w	r2, r2, #12
 804748e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8047490:	687b      	ldr	r3, [r7, #4]
 8047492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047494:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8047498:	687b      	ldr	r3, [r7, #4]
 804749a:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 804749c:	687b      	ldr	r3, [r7, #4]
 804749e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80474a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80474a4:	2b00      	cmp	r3, #0
 80474a6:	d112      	bne.n	80474ce <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80474a8:	687b      	ldr	r3, [r7, #4]
 80474aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80474ac:	f043 0201 	orr.w	r2, r3, #1
 80474b0:	687b      	ldr	r3, [r7, #4]
 80474b2:	659a      	str	r2, [r3, #88]	; 0x58
 80474b4:	e00b      	b.n	80474ce <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80474b6:	687b      	ldr	r3, [r7, #4]
 80474b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80474ba:	f043 0210 	orr.w	r2, r3, #16
 80474be:	687b      	ldr	r3, [r7, #4]
 80474c0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80474c2:	687b      	ldr	r3, [r7, #4]
 80474c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80474c6:	f043 0201 	orr.w	r2, r3, #1
 80474ca:	687b      	ldr	r3, [r7, #4]
 80474cc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
    /*       to determine if conversion has been triggered from EOC or EOS,   */
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 80474ce:	687b      	ldr	r3, [r7, #4]
 80474d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80474d2:	6878      	ldr	r0, [r7, #4]
 80474d4:	4798      	blx	r3
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80474d6:	687b      	ldr	r3, [r7, #4]
 80474d8:	681b      	ldr	r3, [r3, #0]
 80474da:	220c      	movs	r2, #12
 80474dc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80474de:	69fb      	ldr	r3, [r7, #28]
 80474e0:	f003 0320 	and.w	r3, r3, #32
 80474e4:	2b00      	cmp	r3, #0
 80474e6:	d004      	beq.n	80474f2 <HAL_ADC_IRQHandler+0x19e>
 80474e8:	69bb      	ldr	r3, [r7, #24]
 80474ea:	f003 0320 	and.w	r3, r3, #32
 80474ee:	2b00      	cmp	r3, #0
 80474f0:	d10b      	bne.n	804750a <HAL_ADC_IRQHandler+0x1b6>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80474f2:	69fb      	ldr	r3, [r7, #28]
 80474f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80474f8:	2b00      	cmp	r3, #0
 80474fa:	f000 809f 	beq.w	804763c <HAL_ADC_IRQHandler+0x2e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80474fe:	69bb      	ldr	r3, [r7, #24]
 8047500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047504:	2b00      	cmp	r3, #0
 8047506:	f000 8099 	beq.w	804763c <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 804750a:	687b      	ldr	r3, [r7, #4]
 804750c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804750e:	f003 0310 	and.w	r3, r3, #16
 8047512:	2b00      	cmp	r3, #0
 8047514:	d105      	bne.n	8047522 <HAL_ADC_IRQHandler+0x1ce>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8047516:	687b      	ldr	r3, [r7, #4]
 8047518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804751a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 804751e:	687b      	ldr	r3, [r7, #4]
 8047520:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8047522:	687b      	ldr	r3, [r7, #4]
 8047524:	681b      	ldr	r3, [r3, #0]
 8047526:	4618      	mov	r0, r3
 8047528:	f7ff fc7f 	bl	8046e2a <LL_ADC_INJ_IsTriggerSourceSWStart>
 804752c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 804752e:	687b      	ldr	r3, [r7, #4]
 8047530:	681b      	ldr	r3, [r3, #0]
 8047532:	4618      	mov	r0, r3
 8047534:	f7ff fc3a 	bl	8046dac <LL_ADC_REG_IsTriggerSourceSWStart>
 8047538:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 804753a:	687b      	ldr	r3, [r7, #4]
 804753c:	681b      	ldr	r3, [r3, #0]
 804753e:	4a11      	ldr	r2, [pc, #68]	; (8047584 <HAL_ADC_IRQHandler+0x230>)
 8047540:	4293      	cmp	r3, r2
 8047542:	d002      	beq.n	804754a <HAL_ADC_IRQHandler+0x1f6>
 8047544:	687b      	ldr	r3, [r7, #4]
 8047546:	681b      	ldr	r3, [r3, #0]
 8047548:	e000      	b.n	804754c <HAL_ADC_IRQHandler+0x1f8>
 804754a:	4b0f      	ldr	r3, [pc, #60]	; (8047588 <HAL_ADC_IRQHandler+0x234>)
 804754c:	687a      	ldr	r2, [r7, #4]
 804754e:	6812      	ldr	r2, [r2, #0]
 8047550:	4293      	cmp	r3, r2
 8047552:	d008      	beq.n	8047566 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8047554:	697b      	ldr	r3, [r7, #20]
 8047556:	2b00      	cmp	r3, #0
 8047558:	d005      	beq.n	8047566 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 804755a:	697b      	ldr	r3, [r7, #20]
 804755c:	2b06      	cmp	r3, #6
 804755e:	d002      	beq.n	8047566 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8047560:	697b      	ldr	r3, [r7, #20]
 8047562:	2b07      	cmp	r3, #7
 8047564:	d104      	bne.n	8047570 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8047566:	687b      	ldr	r3, [r7, #4]
 8047568:	681b      	ldr	r3, [r3, #0]
 804756a:	68db      	ldr	r3, [r3, #12]
 804756c:	623b      	str	r3, [r7, #32]
 804756e:	e012      	b.n	8047596 <HAL_ADC_IRQHandler+0x242>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8047570:	687b      	ldr	r3, [r7, #4]
 8047572:	681b      	ldr	r3, [r3, #0]
 8047574:	4a03      	ldr	r2, [pc, #12]	; (8047584 <HAL_ADC_IRQHandler+0x230>)
 8047576:	4293      	cmp	r3, r2
 8047578:	d008      	beq.n	804758c <HAL_ADC_IRQHandler+0x238>
 804757a:	687b      	ldr	r3, [r7, #4]
 804757c:	681b      	ldr	r3, [r3, #0]
 804757e:	e006      	b.n	804758e <HAL_ADC_IRQHandler+0x23a>
 8047580:	42028300 	.word	0x42028300
 8047584:	42028100 	.word	0x42028100
 8047588:	42028000 	.word	0x42028000
 804758c:	4b81      	ldr	r3, [pc, #516]	; (8047794 <HAL_ADC_IRQHandler+0x440>)
 804758e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8047590:	693b      	ldr	r3, [r7, #16]
 8047592:	68db      	ldr	r3, [r3, #12]
 8047594:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8047596:	68fb      	ldr	r3, [r7, #12]
 8047598:	2b00      	cmp	r3, #0
 804759a:	d10c      	bne.n	80475b6 <HAL_ADC_IRQHandler+0x262>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 804759c:	6a3b      	ldr	r3, [r7, #32]
 804759e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 80475a2:	2b00      	cmp	r3, #0
 80475a4:	d142      	bne.n	804762c <HAL_ADC_IRQHandler+0x2d8>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 80475a6:	68bb      	ldr	r3, [r7, #8]
 80475a8:	2b00      	cmp	r3, #0
 80475aa:	d03f      	beq.n	804762c <HAL_ADC_IRQHandler+0x2d8>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 80475ac:	6a3b      	ldr	r3, [r7, #32]
 80475ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 80475b2:	2b00      	cmp	r3, #0
 80475b4:	d13a      	bne.n	804762c <HAL_ADC_IRQHandler+0x2d8>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80475b6:	687b      	ldr	r3, [r7, #4]
 80475b8:	681b      	ldr	r3, [r3, #0]
 80475ba:	681b      	ldr	r3, [r3, #0]
 80475bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80475c0:	2b40      	cmp	r3, #64	; 0x40
 80475c2:	d133      	bne.n	804762c <HAL_ADC_IRQHandler+0x2d8>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80475c4:	6a3b      	ldr	r3, [r7, #32]
 80475c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80475ca:	2b00      	cmp	r3, #0
 80475cc:	d12e      	bne.n	804762c <HAL_ADC_IRQHandler+0x2d8>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80475ce:	687b      	ldr	r3, [r7, #4]
 80475d0:	681b      	ldr	r3, [r3, #0]
 80475d2:	4618      	mov	r0, r3
 80475d4:	f7ff fd1c 	bl	8047010 <LL_ADC_INJ_IsConversionOngoing>
 80475d8:	4603      	mov	r3, r0
 80475da:	2b00      	cmp	r3, #0
 80475dc:	d11a      	bne.n	8047614 <HAL_ADC_IRQHandler+0x2c0>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80475de:	687b      	ldr	r3, [r7, #4]
 80475e0:	681b      	ldr	r3, [r3, #0]
 80475e2:	685a      	ldr	r2, [r3, #4]
 80475e4:	687b      	ldr	r3, [r7, #4]
 80475e6:	681b      	ldr	r3, [r3, #0]
 80475e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80475ec:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80475ee:	687b      	ldr	r3, [r7, #4]
 80475f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80475f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80475f6:	687b      	ldr	r3, [r7, #4]
 80475f8:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80475fa:	687b      	ldr	r3, [r7, #4]
 80475fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80475fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8047602:	2b00      	cmp	r3, #0
 8047604:	d112      	bne.n	804762c <HAL_ADC_IRQHandler+0x2d8>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8047606:	687b      	ldr	r3, [r7, #4]
 8047608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804760a:	f043 0201 	orr.w	r2, r3, #1
 804760e:	687b      	ldr	r3, [r7, #4]
 8047610:	659a      	str	r2, [r3, #88]	; 0x58
 8047612:	e00b      	b.n	804762c <HAL_ADC_IRQHandler+0x2d8>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8047614:	687b      	ldr	r3, [r7, #4]
 8047616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047618:	f043 0210 	orr.w	r2, r3, #16
 804761c:	687b      	ldr	r3, [r7, #4]
 804761e:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8047620:	687b      	ldr	r3, [r7, #4]
 8047622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8047624:	f043 0201 	orr.w	r2, r3, #1
 8047628:	687b      	ldr	r3, [r7, #4]
 804762a:	65da      	str	r2, [r3, #92]	; 0x5c
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
 804762c:	687b      	ldr	r3, [r7, #4]
 804762e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8047630:	6878      	ldr	r0, [r7, #4]
 8047632:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8047634:	687b      	ldr	r3, [r7, #4]
 8047636:	681b      	ldr	r3, [r3, #0]
 8047638:	2260      	movs	r2, #96	; 0x60
 804763a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 804763c:	69fb      	ldr	r3, [r7, #28]
 804763e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047642:	2b00      	cmp	r3, #0
 8047644:	d012      	beq.n	804766c <HAL_ADC_IRQHandler+0x318>
 8047646:	69bb      	ldr	r3, [r7, #24]
 8047648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804764c:	2b00      	cmp	r3, #0
 804764e:	d00d      	beq.n	804766c <HAL_ADC_IRQHandler+0x318>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8047650:	687b      	ldr	r3, [r7, #4]
 8047652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047654:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8047658:	687b      	ldr	r3, [r7, #4]
 804765a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
 804765c:	687b      	ldr	r3, [r7, #4]
 804765e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047660:	6878      	ldr	r0, [r7, #4]
 8047662:	4798      	blx	r3
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8047664:	687b      	ldr	r3, [r7, #4]
 8047666:	681b      	ldr	r3, [r3, #0]
 8047668:	2280      	movs	r2, #128	; 0x80
 804766a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 804766c:	69fb      	ldr	r3, [r7, #28]
 804766e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8047672:	2b00      	cmp	r3, #0
 8047674:	d014      	beq.n	80476a0 <HAL_ADC_IRQHandler+0x34c>
 8047676:	69bb      	ldr	r3, [r7, #24]
 8047678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804767c:	2b00      	cmp	r3, #0
 804767e:	d00f      	beq.n	80476a0 <HAL_ADC_IRQHandler+0x34c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8047680:	687b      	ldr	r3, [r7, #4]
 8047682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047684:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8047688:	687b      	ldr	r3, [r7, #4]
 804768a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
 804768c:	687b      	ldr	r3, [r7, #4]
 804768e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8047692:	6878      	ldr	r0, [r7, #4]
 8047694:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8047696:	687b      	ldr	r3, [r7, #4]
 8047698:	681b      	ldr	r3, [r3, #0]
 804769a:	f44f 7280 	mov.w	r2, #256	; 0x100
 804769e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80476a0:	69fb      	ldr	r3, [r7, #28]
 80476a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80476a6:	2b00      	cmp	r3, #0
 80476a8:	d014      	beq.n	80476d4 <HAL_ADC_IRQHandler+0x380>
 80476aa:	69bb      	ldr	r3, [r7, #24]
 80476ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80476b0:	2b00      	cmp	r3, #0
 80476b2:	d00f      	beq.n	80476d4 <HAL_ADC_IRQHandler+0x380>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80476b4:	687b      	ldr	r3, [r7, #4]
 80476b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80476b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80476bc:	687b      	ldr	r3, [r7, #4]
 80476be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
 80476c0:	687b      	ldr	r3, [r7, #4]
 80476c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80476c6:	6878      	ldr	r0, [r7, #4]
 80476c8:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80476ca:	687b      	ldr	r3, [r7, #4]
 80476cc:	681b      	ldr	r3, [r3, #0]
 80476ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80476d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80476d4:	69fb      	ldr	r3, [r7, #28]
 80476d6:	f003 0310 	and.w	r3, r3, #16
 80476da:	2b00      	cmp	r3, #0
 80476dc:	d037      	beq.n	804774e <HAL_ADC_IRQHandler+0x3fa>
 80476de:	69bb      	ldr	r3, [r7, #24]
 80476e0:	f003 0310 	and.w	r3, r3, #16
 80476e4:	2b00      	cmp	r3, #0
 80476e6:	d032      	beq.n	804774e <HAL_ADC_IRQHandler+0x3fa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80476e8:	687b      	ldr	r3, [r7, #4]
 80476ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80476ec:	2b00      	cmp	r3, #0
 80476ee:	d102      	bne.n	80476f6 <HAL_ADC_IRQHandler+0x3a2>
    {
      overrun_error = 1UL;
 80476f0:	2301      	movs	r3, #1
 80476f2:	627b      	str	r3, [r7, #36]	; 0x24
 80476f4:	e014      	b.n	8047720 <HAL_ADC_IRQHandler+0x3cc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80476f6:	697b      	ldr	r3, [r7, #20]
 80476f8:	2b00      	cmp	r3, #0
 80476fa:	d008      	beq.n	804770e <HAL_ADC_IRQHandler+0x3ba>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80476fc:	4826      	ldr	r0, [pc, #152]	; (8047798 <HAL_ADC_IRQHandler+0x444>)
 80476fe:	f7ff fc05 	bl	8046f0c <LL_ADC_GetMultiDMATransfer>
 8047702:	4603      	mov	r3, r0
 8047704:	2b00      	cmp	r3, #0
 8047706:	d00b      	beq.n	8047720 <HAL_ADC_IRQHandler+0x3cc>
        {
          overrun_error = 1UL;
 8047708:	2301      	movs	r3, #1
 804770a:	627b      	str	r3, [r7, #36]	; 0x24
 804770c:	e008      	b.n	8047720 <HAL_ADC_IRQHandler+0x3cc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 804770e:	687b      	ldr	r3, [r7, #4]
 8047710:	681b      	ldr	r3, [r3, #0]
 8047712:	68db      	ldr	r3, [r3, #12]
 8047714:	f003 0301 	and.w	r3, r3, #1
 8047718:	2b00      	cmp	r3, #0
 804771a:	d001      	beq.n	8047720 <HAL_ADC_IRQHandler+0x3cc>
        {
          overrun_error = 1UL;
 804771c:	2301      	movs	r3, #1
 804771e:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8047720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047722:	2b01      	cmp	r3, #1
 8047724:	d10f      	bne.n	8047746 <HAL_ADC_IRQHandler+0x3f2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8047726:	687b      	ldr	r3, [r7, #4]
 8047728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804772a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 804772e:	687b      	ldr	r3, [r7, #4]
 8047730:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8047732:	687b      	ldr	r3, [r7, #4]
 8047734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8047736:	f043 0202 	orr.w	r2, r3, #2
 804773a:	687b      	ldr	r3, [r7, #4]
 804773c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Note: In case of overrun, ADC conversion data is preserved until     */
      /*       flag OVR is reset.                                             */
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 804773e:	687b      	ldr	r3, [r7, #4]
 8047740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8047742:	6878      	ldr	r0, [r7, #4]
 8047744:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8047746:	687b      	ldr	r3, [r7, #4]
 8047748:	681b      	ldr	r3, [r3, #0]
 804774a:	2210      	movs	r2, #16
 804774c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 804774e:	69fb      	ldr	r3, [r7, #28]
 8047750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8047754:	2b00      	cmp	r3, #0
 8047756:	d019      	beq.n	804778c <HAL_ADC_IRQHandler+0x438>
 8047758:	69bb      	ldr	r3, [r7, #24]
 804775a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804775e:	2b00      	cmp	r3, #0
 8047760:	d014      	beq.n	804778c <HAL_ADC_IRQHandler+0x438>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8047762:	687b      	ldr	r3, [r7, #4]
 8047764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047766:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 804776a:	687b      	ldr	r3, [r7, #4]
 804776c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 804776e:	687b      	ldr	r3, [r7, #4]
 8047770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8047772:	f043 0208 	orr.w	r2, r3, #8
 8047776:	687b      	ldr	r3, [r7, #4]
 8047778:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 804777a:	687b      	ldr	r3, [r7, #4]
 804777c:	681b      	ldr	r3, [r3, #0]
 804777e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8047782:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
 8047784:	687b      	ldr	r3, [r7, #4]
 8047786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8047788:	6878      	ldr	r0, [r7, #4]
 804778a:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 804778c:	bf00      	nop
 804778e:	3728      	adds	r7, #40	; 0x28
 8047790:	46bd      	mov	sp, r7
 8047792:	bd80      	pop	{r7, pc}
 8047794:	42028000 	.word	0x42028000
 8047798:	42028300 	.word	0x42028300

0804779c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 804779c:	b480      	push	{r7}
 804779e:	b083      	sub	sp, #12
 80477a0:	af00      	add	r7, sp, #0
 80477a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80477a4:	bf00      	nop
 80477a6:	370c      	adds	r7, #12
 80477a8:	46bd      	mov	sp, r7
 80477aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80477ae:	4770      	bx	lr

080477b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80477b0:	b480      	push	{r7}
 80477b2:	b083      	sub	sp, #12
 80477b4:	af00      	add	r7, sp, #0
 80477b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80477b8:	bf00      	nop
 80477ba:	370c      	adds	r7, #12
 80477bc:	46bd      	mov	sp, r7
 80477be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80477c2:	4770      	bx	lr

080477c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80477c4:	b480      	push	{r7}
 80477c6:	b083      	sub	sp, #12
 80477c8:	af00      	add	r7, sp, #0
 80477ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80477cc:	bf00      	nop
 80477ce:	370c      	adds	r7, #12
 80477d0:	46bd      	mov	sp, r7
 80477d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80477d6:	4770      	bx	lr

080477d8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80477d8:	b480      	push	{r7}
 80477da:	b083      	sub	sp, #12
 80477dc:	af00      	add	r7, sp, #0
 80477de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80477e0:	bf00      	nop
 80477e2:	370c      	adds	r7, #12
 80477e4:	46bd      	mov	sp, r7
 80477e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80477ea:	4770      	bx	lr

080477ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80477ec:	b590      	push	{r4, r7, lr}
 80477ee:	b0b7      	sub	sp, #220	; 0xdc
 80477f0:	af00      	add	r7, sp, #0
 80477f2:	6078      	str	r0, [r7, #4]
 80477f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80477f6:	2300      	movs	r3, #0
 80477f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80477fc:	2300      	movs	r3, #0
 80477fe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8047800:	687b      	ldr	r3, [r7, #4]
 8047802:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8047806:	2b01      	cmp	r3, #1
 8047808:	d101      	bne.n	804780e <HAL_ADC_ConfigChannel+0x22>
 804780a:	2302      	movs	r3, #2
 804780c:	e3c0      	b.n	8047f90 <HAL_ADC_ConfigChannel+0x7a4>
 804780e:	687b      	ldr	r3, [r7, #4]
 8047810:	2201      	movs	r2, #1
 8047812:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8047816:	687b      	ldr	r3, [r7, #4]
 8047818:	681b      	ldr	r3, [r3, #0]
 804781a:	4618      	mov	r0, r3
 804781c:	f7ff fbe5 	bl	8046fea <LL_ADC_REG_IsConversionOngoing>
 8047820:	4603      	mov	r3, r0
 8047822:	2b00      	cmp	r3, #0
 8047824:	f040 83a5 	bne.w	8047f72 <HAL_ADC_ConfigChannel+0x786>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8047828:	687b      	ldr	r3, [r7, #4]
 804782a:	6818      	ldr	r0, [r3, #0]
 804782c:	683b      	ldr	r3, [r7, #0]
 804782e:	6859      	ldr	r1, [r3, #4]
 8047830:	683b      	ldr	r3, [r7, #0]
 8047832:	681b      	ldr	r3, [r3, #0]
 8047834:	461a      	mov	r2, r3
 8047836:	f7ff facc 	bl	8046dd2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 804783a:	687b      	ldr	r3, [r7, #4]
 804783c:	681b      	ldr	r3, [r3, #0]
 804783e:	4618      	mov	r0, r3
 8047840:	f7ff fbd3 	bl	8046fea <LL_ADC_REG_IsConversionOngoing>
 8047844:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8047848:	687b      	ldr	r3, [r7, #4]
 804784a:	681b      	ldr	r3, [r3, #0]
 804784c:	4618      	mov	r0, r3
 804784e:	f7ff fbdf 	bl	8047010 <LL_ADC_INJ_IsConversionOngoing>
 8047852:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8047856:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 804785a:	2b00      	cmp	r3, #0
 804785c:	f040 81c1 	bne.w	8047be2 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8047860:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8047864:	2b00      	cmp	r3, #0
 8047866:	f040 81bc 	bne.w	8047be2 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 804786a:	683b      	ldr	r3, [r7, #0]
 804786c:	689b      	ldr	r3, [r3, #8]
 804786e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8047872:	d10f      	bne.n	8047894 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8047874:	687b      	ldr	r3, [r7, #4]
 8047876:	6818      	ldr	r0, [r3, #0]
 8047878:	683b      	ldr	r3, [r7, #0]
 804787a:	681b      	ldr	r3, [r3, #0]
 804787c:	2200      	movs	r2, #0
 804787e:	4619      	mov	r1, r3
 8047880:	f7ff fae6 	bl	8046e50 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8047884:	687b      	ldr	r3, [r7, #4]
 8047886:	681b      	ldr	r3, [r3, #0]
 8047888:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 804788c:	4618      	mov	r0, r3
 804788e:	f7ff fa7a 	bl	8046d86 <LL_ADC_SetSamplingTimeCommonConfig>
 8047892:	e00e      	b.n	80478b2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8047894:	687b      	ldr	r3, [r7, #4]
 8047896:	6818      	ldr	r0, [r3, #0]
 8047898:	683b      	ldr	r3, [r7, #0]
 804789a:	6819      	ldr	r1, [r3, #0]
 804789c:	683b      	ldr	r3, [r7, #0]
 804789e:	689b      	ldr	r3, [r3, #8]
 80478a0:	461a      	mov	r2, r3
 80478a2:	f7ff fad5 	bl	8046e50 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80478a6:	687b      	ldr	r3, [r7, #4]
 80478a8:	681b      	ldr	r3, [r3, #0]
 80478aa:	2100      	movs	r1, #0
 80478ac:	4618      	mov	r0, r3
 80478ae:	f7ff fa6a 	bl	8046d86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80478b2:	683b      	ldr	r3, [r7, #0]
 80478b4:	695a      	ldr	r2, [r3, #20]
 80478b6:	687b      	ldr	r3, [r7, #4]
 80478b8:	681b      	ldr	r3, [r3, #0]
 80478ba:	68db      	ldr	r3, [r3, #12]
 80478bc:	08db      	lsrs	r3, r3, #3
 80478be:	f003 0303 	and.w	r3, r3, #3
 80478c2:	005b      	lsls	r3, r3, #1
 80478c4:	fa02 f303 	lsl.w	r3, r2, r3
 80478c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80478cc:	683b      	ldr	r3, [r7, #0]
 80478ce:	691b      	ldr	r3, [r3, #16]
 80478d0:	2b04      	cmp	r3, #4
 80478d2:	d00a      	beq.n	80478ea <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80478d4:	687b      	ldr	r3, [r7, #4]
 80478d6:	6818      	ldr	r0, [r3, #0]
 80478d8:	683b      	ldr	r3, [r7, #0]
 80478da:	6919      	ldr	r1, [r3, #16]
 80478dc:	683b      	ldr	r3, [r7, #0]
 80478de:	681a      	ldr	r2, [r3, #0]
 80478e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80478e4:	f7ff f9fa 	bl	8046cdc <LL_ADC_SetOffset>
 80478e8:	e17b      	b.n	8047be2 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80478ea:	687b      	ldr	r3, [r7, #4]
 80478ec:	681b      	ldr	r3, [r3, #0]
 80478ee:	2100      	movs	r1, #0
 80478f0:	4618      	mov	r0, r3
 80478f2:	f7ff fa17 	bl	8046d24 <LL_ADC_GetOffsetChannel>
 80478f6:	4603      	mov	r3, r0
 80478f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80478fc:	2b00      	cmp	r3, #0
 80478fe:	d10a      	bne.n	8047916 <HAL_ADC_ConfigChannel+0x12a>
 8047900:	687b      	ldr	r3, [r7, #4]
 8047902:	681b      	ldr	r3, [r3, #0]
 8047904:	2100      	movs	r1, #0
 8047906:	4618      	mov	r0, r3
 8047908:	f7ff fa0c 	bl	8046d24 <LL_ADC_GetOffsetChannel>
 804790c:	4603      	mov	r3, r0
 804790e:	0e9b      	lsrs	r3, r3, #26
 8047910:	f003 021f 	and.w	r2, r3, #31
 8047914:	e01e      	b.n	8047954 <HAL_ADC_ConfigChannel+0x168>
 8047916:	687b      	ldr	r3, [r7, #4]
 8047918:	681b      	ldr	r3, [r3, #0]
 804791a:	2100      	movs	r1, #0
 804791c:	4618      	mov	r0, r3
 804791e:	f7ff fa01 	bl	8046d24 <LL_ADC_GetOffsetChannel>
 8047922:	4603      	mov	r3, r0
 8047924:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047928:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 804792c:	fa93 f3a3 	rbit	r3, r3
 8047930:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8047934:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8047938:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 804793c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8047940:	2b00      	cmp	r3, #0
 8047942:	d101      	bne.n	8047948 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8047944:	2320      	movs	r3, #32
 8047946:	e004      	b.n	8047952 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8047948:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 804794c:	fab3 f383 	clz	r3, r3
 8047950:	b2db      	uxtb	r3, r3
 8047952:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8047954:	683b      	ldr	r3, [r7, #0]
 8047956:	681b      	ldr	r3, [r3, #0]
 8047958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 804795c:	2b00      	cmp	r3, #0
 804795e:	d105      	bne.n	804796c <HAL_ADC_ConfigChannel+0x180>
 8047960:	683b      	ldr	r3, [r7, #0]
 8047962:	681b      	ldr	r3, [r3, #0]
 8047964:	0e9b      	lsrs	r3, r3, #26
 8047966:	f003 031f 	and.w	r3, r3, #31
 804796a:	e018      	b.n	804799e <HAL_ADC_ConfigChannel+0x1b2>
 804796c:	683b      	ldr	r3, [r7, #0]
 804796e:	681b      	ldr	r3, [r3, #0]
 8047970:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047974:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8047978:	fa93 f3a3 	rbit	r3, r3
 804797c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8047980:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8047984:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8047988:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 804798c:	2b00      	cmp	r3, #0
 804798e:	d101      	bne.n	8047994 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8047990:	2320      	movs	r3, #32
 8047992:	e004      	b.n	804799e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8047994:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8047998:	fab3 f383 	clz	r3, r3
 804799c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 804799e:	429a      	cmp	r2, r3
 80479a0:	d106      	bne.n	80479b0 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80479a2:	687b      	ldr	r3, [r7, #4]
 80479a4:	681b      	ldr	r3, [r3, #0]
 80479a6:	2200      	movs	r2, #0
 80479a8:	2100      	movs	r1, #0
 80479aa:	4618      	mov	r0, r3
 80479ac:	f7ff f9d0 	bl	8046d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80479b0:	687b      	ldr	r3, [r7, #4]
 80479b2:	681b      	ldr	r3, [r3, #0]
 80479b4:	2101      	movs	r1, #1
 80479b6:	4618      	mov	r0, r3
 80479b8:	f7ff f9b4 	bl	8046d24 <LL_ADC_GetOffsetChannel>
 80479bc:	4603      	mov	r3, r0
 80479be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80479c2:	2b00      	cmp	r3, #0
 80479c4:	d10a      	bne.n	80479dc <HAL_ADC_ConfigChannel+0x1f0>
 80479c6:	687b      	ldr	r3, [r7, #4]
 80479c8:	681b      	ldr	r3, [r3, #0]
 80479ca:	2101      	movs	r1, #1
 80479cc:	4618      	mov	r0, r3
 80479ce:	f7ff f9a9 	bl	8046d24 <LL_ADC_GetOffsetChannel>
 80479d2:	4603      	mov	r3, r0
 80479d4:	0e9b      	lsrs	r3, r3, #26
 80479d6:	f003 021f 	and.w	r2, r3, #31
 80479da:	e01e      	b.n	8047a1a <HAL_ADC_ConfigChannel+0x22e>
 80479dc:	687b      	ldr	r3, [r7, #4]
 80479de:	681b      	ldr	r3, [r3, #0]
 80479e0:	2101      	movs	r1, #1
 80479e2:	4618      	mov	r0, r3
 80479e4:	f7ff f99e 	bl	8046d24 <LL_ADC_GetOffsetChannel>
 80479e8:	4603      	mov	r3, r0
 80479ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80479ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80479f2:	fa93 f3a3 	rbit	r3, r3
 80479f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80479fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80479fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8047a02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8047a06:	2b00      	cmp	r3, #0
 8047a08:	d101      	bne.n	8047a0e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8047a0a:	2320      	movs	r3, #32
 8047a0c:	e004      	b.n	8047a18 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8047a0e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8047a12:	fab3 f383 	clz	r3, r3
 8047a16:	b2db      	uxtb	r3, r3
 8047a18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8047a1a:	683b      	ldr	r3, [r7, #0]
 8047a1c:	681b      	ldr	r3, [r3, #0]
 8047a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047a22:	2b00      	cmp	r3, #0
 8047a24:	d105      	bne.n	8047a32 <HAL_ADC_ConfigChannel+0x246>
 8047a26:	683b      	ldr	r3, [r7, #0]
 8047a28:	681b      	ldr	r3, [r3, #0]
 8047a2a:	0e9b      	lsrs	r3, r3, #26
 8047a2c:	f003 031f 	and.w	r3, r3, #31
 8047a30:	e018      	b.n	8047a64 <HAL_ADC_ConfigChannel+0x278>
 8047a32:	683b      	ldr	r3, [r7, #0]
 8047a34:	681b      	ldr	r3, [r3, #0]
 8047a36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047a3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8047a3e:	fa93 f3a3 	rbit	r3, r3
 8047a42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8047a46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8047a4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8047a4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8047a52:	2b00      	cmp	r3, #0
 8047a54:	d101      	bne.n	8047a5a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8047a56:	2320      	movs	r3, #32
 8047a58:	e004      	b.n	8047a64 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8047a5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8047a5e:	fab3 f383 	clz	r3, r3
 8047a62:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8047a64:	429a      	cmp	r2, r3
 8047a66:	d106      	bne.n	8047a76 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8047a68:	687b      	ldr	r3, [r7, #4]
 8047a6a:	681b      	ldr	r3, [r3, #0]
 8047a6c:	2200      	movs	r2, #0
 8047a6e:	2101      	movs	r1, #1
 8047a70:	4618      	mov	r0, r3
 8047a72:	f7ff f96d 	bl	8046d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8047a76:	687b      	ldr	r3, [r7, #4]
 8047a78:	681b      	ldr	r3, [r3, #0]
 8047a7a:	2102      	movs	r1, #2
 8047a7c:	4618      	mov	r0, r3
 8047a7e:	f7ff f951 	bl	8046d24 <LL_ADC_GetOffsetChannel>
 8047a82:	4603      	mov	r3, r0
 8047a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047a88:	2b00      	cmp	r3, #0
 8047a8a:	d10a      	bne.n	8047aa2 <HAL_ADC_ConfigChannel+0x2b6>
 8047a8c:	687b      	ldr	r3, [r7, #4]
 8047a8e:	681b      	ldr	r3, [r3, #0]
 8047a90:	2102      	movs	r1, #2
 8047a92:	4618      	mov	r0, r3
 8047a94:	f7ff f946 	bl	8046d24 <LL_ADC_GetOffsetChannel>
 8047a98:	4603      	mov	r3, r0
 8047a9a:	0e9b      	lsrs	r3, r3, #26
 8047a9c:	f003 021f 	and.w	r2, r3, #31
 8047aa0:	e01e      	b.n	8047ae0 <HAL_ADC_ConfigChannel+0x2f4>
 8047aa2:	687b      	ldr	r3, [r7, #4]
 8047aa4:	681b      	ldr	r3, [r3, #0]
 8047aa6:	2102      	movs	r1, #2
 8047aa8:	4618      	mov	r0, r3
 8047aaa:	f7ff f93b 	bl	8046d24 <LL_ADC_GetOffsetChannel>
 8047aae:	4603      	mov	r3, r0
 8047ab0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8047ab8:	fa93 f3a3 	rbit	r3, r3
 8047abc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8047ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8047ac4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8047ac8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8047acc:	2b00      	cmp	r3, #0
 8047ace:	d101      	bne.n	8047ad4 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8047ad0:	2320      	movs	r3, #32
 8047ad2:	e004      	b.n	8047ade <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8047ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8047ad8:	fab3 f383 	clz	r3, r3
 8047adc:	b2db      	uxtb	r3, r3
 8047ade:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8047ae0:	683b      	ldr	r3, [r7, #0]
 8047ae2:	681b      	ldr	r3, [r3, #0]
 8047ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047ae8:	2b00      	cmp	r3, #0
 8047aea:	d105      	bne.n	8047af8 <HAL_ADC_ConfigChannel+0x30c>
 8047aec:	683b      	ldr	r3, [r7, #0]
 8047aee:	681b      	ldr	r3, [r3, #0]
 8047af0:	0e9b      	lsrs	r3, r3, #26
 8047af2:	f003 031f 	and.w	r3, r3, #31
 8047af6:	e016      	b.n	8047b26 <HAL_ADC_ConfigChannel+0x33a>
 8047af8:	683b      	ldr	r3, [r7, #0]
 8047afa:	681b      	ldr	r3, [r3, #0]
 8047afc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047b00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8047b04:	fa93 f3a3 	rbit	r3, r3
 8047b08:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8047b0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8047b0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8047b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8047b14:	2b00      	cmp	r3, #0
 8047b16:	d101      	bne.n	8047b1c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8047b18:	2320      	movs	r3, #32
 8047b1a:	e004      	b.n	8047b26 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8047b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8047b20:	fab3 f383 	clz	r3, r3
 8047b24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8047b26:	429a      	cmp	r2, r3
 8047b28:	d106      	bne.n	8047b38 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8047b2a:	687b      	ldr	r3, [r7, #4]
 8047b2c:	681b      	ldr	r3, [r3, #0]
 8047b2e:	2200      	movs	r2, #0
 8047b30:	2102      	movs	r1, #2
 8047b32:	4618      	mov	r0, r3
 8047b34:	f7ff f90c 	bl	8046d50 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8047b38:	687b      	ldr	r3, [r7, #4]
 8047b3a:	681b      	ldr	r3, [r3, #0]
 8047b3c:	2103      	movs	r1, #3
 8047b3e:	4618      	mov	r0, r3
 8047b40:	f7ff f8f0 	bl	8046d24 <LL_ADC_GetOffsetChannel>
 8047b44:	4603      	mov	r3, r0
 8047b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047b4a:	2b00      	cmp	r3, #0
 8047b4c:	d10a      	bne.n	8047b64 <HAL_ADC_ConfigChannel+0x378>
 8047b4e:	687b      	ldr	r3, [r7, #4]
 8047b50:	681b      	ldr	r3, [r3, #0]
 8047b52:	2103      	movs	r1, #3
 8047b54:	4618      	mov	r0, r3
 8047b56:	f7ff f8e5 	bl	8046d24 <LL_ADC_GetOffsetChannel>
 8047b5a:	4603      	mov	r3, r0
 8047b5c:	0e9b      	lsrs	r3, r3, #26
 8047b5e:	f003 021f 	and.w	r2, r3, #31
 8047b62:	e017      	b.n	8047b94 <HAL_ADC_ConfigChannel+0x3a8>
 8047b64:	687b      	ldr	r3, [r7, #4]
 8047b66:	681b      	ldr	r3, [r3, #0]
 8047b68:	2103      	movs	r1, #3
 8047b6a:	4618      	mov	r0, r3
 8047b6c:	f7ff f8da 	bl	8046d24 <LL_ADC_GetOffsetChannel>
 8047b70:	4603      	mov	r3, r0
 8047b72:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8047b76:	fa93 f3a3 	rbit	r3, r3
 8047b7a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8047b7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8047b7e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8047b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8047b82:	2b00      	cmp	r3, #0
 8047b84:	d101      	bne.n	8047b8a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8047b86:	2320      	movs	r3, #32
 8047b88:	e003      	b.n	8047b92 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8047b8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8047b8c:	fab3 f383 	clz	r3, r3
 8047b90:	b2db      	uxtb	r3, r3
 8047b92:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8047b94:	683b      	ldr	r3, [r7, #0]
 8047b96:	681b      	ldr	r3, [r3, #0]
 8047b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047b9c:	2b00      	cmp	r3, #0
 8047b9e:	d105      	bne.n	8047bac <HAL_ADC_ConfigChannel+0x3c0>
 8047ba0:	683b      	ldr	r3, [r7, #0]
 8047ba2:	681b      	ldr	r3, [r3, #0]
 8047ba4:	0e9b      	lsrs	r3, r3, #26
 8047ba6:	f003 031f 	and.w	r3, r3, #31
 8047baa:	e011      	b.n	8047bd0 <HAL_ADC_ConfigChannel+0x3e4>
 8047bac:	683b      	ldr	r3, [r7, #0]
 8047bae:	681b      	ldr	r3, [r3, #0]
 8047bb0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047bb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8047bb4:	fa93 f3a3 	rbit	r3, r3
 8047bb8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8047bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8047bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8047bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8047bc0:	2b00      	cmp	r3, #0
 8047bc2:	d101      	bne.n	8047bc8 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8047bc4:	2320      	movs	r3, #32
 8047bc6:	e003      	b.n	8047bd0 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8047bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8047bca:	fab3 f383 	clz	r3, r3
 8047bce:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8047bd0:	429a      	cmp	r2, r3
 8047bd2:	d106      	bne.n	8047be2 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8047bd4:	687b      	ldr	r3, [r7, #4]
 8047bd6:	681b      	ldr	r3, [r3, #0]
 8047bd8:	2200      	movs	r2, #0
 8047bda:	2103      	movs	r1, #3
 8047bdc:	4618      	mov	r0, r3
 8047bde:	f7ff f8b7 	bl	8046d50 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8047be2:	687b      	ldr	r3, [r7, #4]
 8047be4:	681b      	ldr	r3, [r3, #0]
 8047be6:	4618      	mov	r0, r3
 8047be8:	f7ff f9ec 	bl	8046fc4 <LL_ADC_IsEnabled>
 8047bec:	4603      	mov	r3, r0
 8047bee:	2b00      	cmp	r3, #0
 8047bf0:	f040 81c8 	bne.w	8047f84 <HAL_ADC_ConfigChannel+0x798>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8047bf4:	687b      	ldr	r3, [r7, #4]
 8047bf6:	6818      	ldr	r0, [r3, #0]
 8047bf8:	683b      	ldr	r3, [r7, #0]
 8047bfa:	6819      	ldr	r1, [r3, #0]
 8047bfc:	683b      	ldr	r3, [r7, #0]
 8047bfe:	68db      	ldr	r3, [r3, #12]
 8047c00:	461a      	mov	r2, r3
 8047c02:	f7ff f951 	bl	8046ea8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8047c06:	683b      	ldr	r3, [r7, #0]
 8047c08:	68db      	ldr	r3, [r3, #12]
 8047c0a:	4a8f      	ldr	r2, [pc, #572]	; (8047e48 <HAL_ADC_ConfigChannel+0x65c>)
 8047c0c:	4293      	cmp	r3, r2
 8047c0e:	f040 8131 	bne.w	8047e74 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8047c12:	687b      	ldr	r3, [r7, #4]
 8047c14:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8047c16:	683b      	ldr	r3, [r7, #0]
 8047c18:	681b      	ldr	r3, [r3, #0]
 8047c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047c1e:	2b00      	cmp	r3, #0
 8047c20:	d10b      	bne.n	8047c3a <HAL_ADC_ConfigChannel+0x44e>
 8047c22:	683b      	ldr	r3, [r7, #0]
 8047c24:	681b      	ldr	r3, [r3, #0]
 8047c26:	0e9b      	lsrs	r3, r3, #26
 8047c28:	3301      	adds	r3, #1
 8047c2a:	f003 031f 	and.w	r3, r3, #31
 8047c2e:	2b09      	cmp	r3, #9
 8047c30:	bf94      	ite	ls
 8047c32:	2301      	movls	r3, #1
 8047c34:	2300      	movhi	r3, #0
 8047c36:	b2db      	uxtb	r3, r3
 8047c38:	e019      	b.n	8047c6e <HAL_ADC_ConfigChannel+0x482>
 8047c3a:	683b      	ldr	r3, [r7, #0]
 8047c3c:	681b      	ldr	r3, [r3, #0]
 8047c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8047c42:	fa93 f3a3 	rbit	r3, r3
 8047c46:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8047c48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8047c4a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8047c4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8047c4e:	2b00      	cmp	r3, #0
 8047c50:	d101      	bne.n	8047c56 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8047c52:	2320      	movs	r3, #32
 8047c54:	e003      	b.n	8047c5e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8047c56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8047c58:	fab3 f383 	clz	r3, r3
 8047c5c:	b2db      	uxtb	r3, r3
 8047c5e:	3301      	adds	r3, #1
 8047c60:	f003 031f 	and.w	r3, r3, #31
 8047c64:	2b09      	cmp	r3, #9
 8047c66:	bf94      	ite	ls
 8047c68:	2301      	movls	r3, #1
 8047c6a:	2300      	movhi	r3, #0
 8047c6c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8047c6e:	2b00      	cmp	r3, #0
 8047c70:	d079      	beq.n	8047d66 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8047c72:	683b      	ldr	r3, [r7, #0]
 8047c74:	681b      	ldr	r3, [r3, #0]
 8047c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047c7a:	2b00      	cmp	r3, #0
 8047c7c:	d107      	bne.n	8047c8e <HAL_ADC_ConfigChannel+0x4a2>
 8047c7e:	683b      	ldr	r3, [r7, #0]
 8047c80:	681b      	ldr	r3, [r3, #0]
 8047c82:	0e9b      	lsrs	r3, r3, #26
 8047c84:	3301      	adds	r3, #1
 8047c86:	069b      	lsls	r3, r3, #26
 8047c88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8047c8c:	e015      	b.n	8047cba <HAL_ADC_ConfigChannel+0x4ce>
 8047c8e:	683b      	ldr	r3, [r7, #0]
 8047c90:	681b      	ldr	r3, [r3, #0]
 8047c92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047c94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8047c96:	fa93 f3a3 	rbit	r3, r3
 8047c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8047c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8047c9e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8047ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8047ca2:	2b00      	cmp	r3, #0
 8047ca4:	d101      	bne.n	8047caa <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8047ca6:	2320      	movs	r3, #32
 8047ca8:	e003      	b.n	8047cb2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8047caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8047cac:	fab3 f383 	clz	r3, r3
 8047cb0:	b2db      	uxtb	r3, r3
 8047cb2:	3301      	adds	r3, #1
 8047cb4:	069b      	lsls	r3, r3, #26
 8047cb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8047cba:	683b      	ldr	r3, [r7, #0]
 8047cbc:	681b      	ldr	r3, [r3, #0]
 8047cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047cc2:	2b00      	cmp	r3, #0
 8047cc4:	d109      	bne.n	8047cda <HAL_ADC_ConfigChannel+0x4ee>
 8047cc6:	683b      	ldr	r3, [r7, #0]
 8047cc8:	681b      	ldr	r3, [r3, #0]
 8047cca:	0e9b      	lsrs	r3, r3, #26
 8047ccc:	3301      	adds	r3, #1
 8047cce:	f003 031f 	and.w	r3, r3, #31
 8047cd2:	2101      	movs	r1, #1
 8047cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8047cd8:	e017      	b.n	8047d0a <HAL_ADC_ConfigChannel+0x51e>
 8047cda:	683b      	ldr	r3, [r7, #0]
 8047cdc:	681b      	ldr	r3, [r3, #0]
 8047cde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8047ce2:	fa93 f3a3 	rbit	r3, r3
 8047ce6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8047ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8047cea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8047cec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8047cee:	2b00      	cmp	r3, #0
 8047cf0:	d101      	bne.n	8047cf6 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8047cf2:	2320      	movs	r3, #32
 8047cf4:	e003      	b.n	8047cfe <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8047cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8047cf8:	fab3 f383 	clz	r3, r3
 8047cfc:	b2db      	uxtb	r3, r3
 8047cfe:	3301      	adds	r3, #1
 8047d00:	f003 031f 	and.w	r3, r3, #31
 8047d04:	2101      	movs	r1, #1
 8047d06:	fa01 f303 	lsl.w	r3, r1, r3
 8047d0a:	ea42 0103 	orr.w	r1, r2, r3
 8047d0e:	683b      	ldr	r3, [r7, #0]
 8047d10:	681b      	ldr	r3, [r3, #0]
 8047d12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047d16:	2b00      	cmp	r3, #0
 8047d18:	d10a      	bne.n	8047d30 <HAL_ADC_ConfigChannel+0x544>
 8047d1a:	683b      	ldr	r3, [r7, #0]
 8047d1c:	681b      	ldr	r3, [r3, #0]
 8047d1e:	0e9b      	lsrs	r3, r3, #26
 8047d20:	3301      	adds	r3, #1
 8047d22:	f003 021f 	and.w	r2, r3, #31
 8047d26:	4613      	mov	r3, r2
 8047d28:	005b      	lsls	r3, r3, #1
 8047d2a:	4413      	add	r3, r2
 8047d2c:	051b      	lsls	r3, r3, #20
 8047d2e:	e018      	b.n	8047d62 <HAL_ADC_ConfigChannel+0x576>
 8047d30:	683b      	ldr	r3, [r7, #0]
 8047d32:	681b      	ldr	r3, [r3, #0]
 8047d34:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047d38:	fa93 f3a3 	rbit	r3, r3
 8047d3c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8047d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8047d40:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8047d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8047d44:	2b00      	cmp	r3, #0
 8047d46:	d101      	bne.n	8047d4c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8047d48:	2320      	movs	r3, #32
 8047d4a:	e003      	b.n	8047d54 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8047d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8047d4e:	fab3 f383 	clz	r3, r3
 8047d52:	b2db      	uxtb	r3, r3
 8047d54:	3301      	adds	r3, #1
 8047d56:	f003 021f 	and.w	r2, r3, #31
 8047d5a:	4613      	mov	r3, r2
 8047d5c:	005b      	lsls	r3, r3, #1
 8047d5e:	4413      	add	r3, r2
 8047d60:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8047d62:	430b      	orrs	r3, r1
 8047d64:	e081      	b.n	8047e6a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8047d66:	683b      	ldr	r3, [r7, #0]
 8047d68:	681b      	ldr	r3, [r3, #0]
 8047d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047d6e:	2b00      	cmp	r3, #0
 8047d70:	d107      	bne.n	8047d82 <HAL_ADC_ConfigChannel+0x596>
 8047d72:	683b      	ldr	r3, [r7, #0]
 8047d74:	681b      	ldr	r3, [r3, #0]
 8047d76:	0e9b      	lsrs	r3, r3, #26
 8047d78:	3301      	adds	r3, #1
 8047d7a:	069b      	lsls	r3, r3, #26
 8047d7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8047d80:	e015      	b.n	8047dae <HAL_ADC_ConfigChannel+0x5c2>
 8047d82:	683b      	ldr	r3, [r7, #0]
 8047d84:	681b      	ldr	r3, [r3, #0]
 8047d86:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047d8a:	fa93 f3a3 	rbit	r3, r3
 8047d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8047d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8047d92:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8047d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8047d96:	2b00      	cmp	r3, #0
 8047d98:	d101      	bne.n	8047d9e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8047d9a:	2320      	movs	r3, #32
 8047d9c:	e003      	b.n	8047da6 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8047d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8047da0:	fab3 f383 	clz	r3, r3
 8047da4:	b2db      	uxtb	r3, r3
 8047da6:	3301      	adds	r3, #1
 8047da8:	069b      	lsls	r3, r3, #26
 8047daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8047dae:	683b      	ldr	r3, [r7, #0]
 8047db0:	681b      	ldr	r3, [r3, #0]
 8047db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047db6:	2b00      	cmp	r3, #0
 8047db8:	d109      	bne.n	8047dce <HAL_ADC_ConfigChannel+0x5e2>
 8047dba:	683b      	ldr	r3, [r7, #0]
 8047dbc:	681b      	ldr	r3, [r3, #0]
 8047dbe:	0e9b      	lsrs	r3, r3, #26
 8047dc0:	3301      	adds	r3, #1
 8047dc2:	f003 031f 	and.w	r3, r3, #31
 8047dc6:	2101      	movs	r1, #1
 8047dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8047dcc:	e017      	b.n	8047dfe <HAL_ADC_ConfigChannel+0x612>
 8047dce:	683b      	ldr	r3, [r7, #0]
 8047dd0:	681b      	ldr	r3, [r3, #0]
 8047dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047dd4:	6a3b      	ldr	r3, [r7, #32]
 8047dd6:	fa93 f3a3 	rbit	r3, r3
 8047dda:	61fb      	str	r3, [r7, #28]
  return result;
 8047ddc:	69fb      	ldr	r3, [r7, #28]
 8047dde:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8047de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047de2:	2b00      	cmp	r3, #0
 8047de4:	d101      	bne.n	8047dea <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8047de6:	2320      	movs	r3, #32
 8047de8:	e003      	b.n	8047df2 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8047dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047dec:	fab3 f383 	clz	r3, r3
 8047df0:	b2db      	uxtb	r3, r3
 8047df2:	3301      	adds	r3, #1
 8047df4:	f003 031f 	and.w	r3, r3, #31
 8047df8:	2101      	movs	r1, #1
 8047dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8047dfe:	ea42 0103 	orr.w	r1, r2, r3
 8047e02:	683b      	ldr	r3, [r7, #0]
 8047e04:	681b      	ldr	r3, [r3, #0]
 8047e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047e0a:	2b00      	cmp	r3, #0
 8047e0c:	d10d      	bne.n	8047e2a <HAL_ADC_ConfigChannel+0x63e>
 8047e0e:	683b      	ldr	r3, [r7, #0]
 8047e10:	681b      	ldr	r3, [r3, #0]
 8047e12:	0e9b      	lsrs	r3, r3, #26
 8047e14:	3301      	adds	r3, #1
 8047e16:	f003 021f 	and.w	r2, r3, #31
 8047e1a:	4613      	mov	r3, r2
 8047e1c:	005b      	lsls	r3, r3, #1
 8047e1e:	4413      	add	r3, r2
 8047e20:	3b1e      	subs	r3, #30
 8047e22:	051b      	lsls	r3, r3, #20
 8047e24:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8047e28:	e01e      	b.n	8047e68 <HAL_ADC_ConfigChannel+0x67c>
 8047e2a:	683b      	ldr	r3, [r7, #0]
 8047e2c:	681b      	ldr	r3, [r3, #0]
 8047e2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047e30:	697b      	ldr	r3, [r7, #20]
 8047e32:	fa93 f3a3 	rbit	r3, r3
 8047e36:	613b      	str	r3, [r7, #16]
  return result;
 8047e38:	693b      	ldr	r3, [r7, #16]
 8047e3a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8047e3c:	69bb      	ldr	r3, [r7, #24]
 8047e3e:	2b00      	cmp	r3, #0
 8047e40:	d104      	bne.n	8047e4c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8047e42:	2320      	movs	r3, #32
 8047e44:	e006      	b.n	8047e54 <HAL_ADC_ConfigChannel+0x668>
 8047e46:	bf00      	nop
 8047e48:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8047e4c:	69bb      	ldr	r3, [r7, #24]
 8047e4e:	fab3 f383 	clz	r3, r3
 8047e52:	b2db      	uxtb	r3, r3
 8047e54:	3301      	adds	r3, #1
 8047e56:	f003 021f 	and.w	r2, r3, #31
 8047e5a:	4613      	mov	r3, r2
 8047e5c:	005b      	lsls	r3, r3, #1
 8047e5e:	4413      	add	r3, r2
 8047e60:	3b1e      	subs	r3, #30
 8047e62:	051b      	lsls	r3, r3, #20
 8047e64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8047e68:	430b      	orrs	r3, r1
 8047e6a:	683a      	ldr	r2, [r7, #0]
 8047e6c:	6892      	ldr	r2, [r2, #8]
 8047e6e:	4619      	mov	r1, r3
 8047e70:	f7fe ffee 	bl	8046e50 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8047e74:	683b      	ldr	r3, [r7, #0]
 8047e76:	681a      	ldr	r2, [r3, #0]
 8047e78:	4b47      	ldr	r3, [pc, #284]	; (8047f98 <HAL_ADC_ConfigChannel+0x7ac>)
 8047e7a:	4013      	ands	r3, r2
 8047e7c:	2b00      	cmp	r3, #0
 8047e7e:	f000 8081 	beq.w	8047f84 <HAL_ADC_ConfigChannel+0x798>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8047e82:	4846      	ldr	r0, [pc, #280]	; (8047f9c <HAL_ADC_ConfigChannel+0x7b0>)
 8047e84:	f7fe ff1c 	bl	8046cc0 <LL_ADC_GetCommonPathInternalCh>
 8047e88:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8047e8c:	4844      	ldr	r0, [pc, #272]	; (8047fa0 <HAL_ADC_ConfigChannel+0x7b4>)
 8047e8e:	f7ff f899 	bl	8046fc4 <LL_ADC_IsEnabled>
 8047e92:	4604      	mov	r4, r0
 8047e94:	4843      	ldr	r0, [pc, #268]	; (8047fa4 <HAL_ADC_ConfigChannel+0x7b8>)
 8047e96:	f7ff f895 	bl	8046fc4 <LL_ADC_IsEnabled>
 8047e9a:	4603      	mov	r3, r0
 8047e9c:	4323      	orrs	r3, r4
 8047e9e:	2b00      	cmp	r3, #0
 8047ea0:	d15d      	bne.n	8047f5e <HAL_ADC_ConfigChannel+0x772>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8047ea2:	683b      	ldr	r3, [r7, #0]
 8047ea4:	681b      	ldr	r3, [r3, #0]
 8047ea6:	4a40      	ldr	r2, [pc, #256]	; (8047fa8 <HAL_ADC_ConfigChannel+0x7bc>)
 8047ea8:	4293      	cmp	r3, r2
 8047eaa:	d126      	bne.n	8047efa <HAL_ADC_ConfigChannel+0x70e>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8047eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8047eb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8047eb4:	2b00      	cmp	r3, #0
 8047eb6:	d120      	bne.n	8047efa <HAL_ADC_ConfigChannel+0x70e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8047eb8:	687b      	ldr	r3, [r7, #4]
 8047eba:	681b      	ldr	r3, [r3, #0]
 8047ebc:	4a38      	ldr	r2, [pc, #224]	; (8047fa0 <HAL_ADC_ConfigChannel+0x7b4>)
 8047ebe:	4293      	cmp	r3, r2
 8047ec0:	d160      	bne.n	8047f84 <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8047ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8047ec6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8047eca:	4619      	mov	r1, r3
 8047ecc:	4833      	ldr	r0, [pc, #204]	; (8047f9c <HAL_ADC_ConfigChannel+0x7b0>)
 8047ece:	f7fe fee4 	bl	8046c9a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8047ed2:	4b36      	ldr	r3, [pc, #216]	; (8047fac <HAL_ADC_ConfigChannel+0x7c0>)
 8047ed4:	681b      	ldr	r3, [r3, #0]
 8047ed6:	099b      	lsrs	r3, r3, #6
 8047ed8:	4a35      	ldr	r2, [pc, #212]	; (8047fb0 <HAL_ADC_ConfigChannel+0x7c4>)
 8047eda:	fba2 2303 	umull	r2, r3, r2, r3
 8047ede:	099a      	lsrs	r2, r3, #6
 8047ee0:	4613      	mov	r3, r2
 8047ee2:	005b      	lsls	r3, r3, #1
 8047ee4:	4413      	add	r3, r2
 8047ee6:	009b      	lsls	r3, r3, #2
 8047ee8:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8047eea:	e002      	b.n	8047ef2 <HAL_ADC_ConfigChannel+0x706>
              {
                wait_loop_index--;
 8047eec:	68fb      	ldr	r3, [r7, #12]
 8047eee:	3b01      	subs	r3, #1
 8047ef0:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8047ef2:	68fb      	ldr	r3, [r7, #12]
 8047ef4:	2b00      	cmp	r3, #0
 8047ef6:	d1f9      	bne.n	8047eec <HAL_ADC_ConfigChannel+0x700>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8047ef8:	e044      	b.n	8047f84 <HAL_ADC_ConfigChannel+0x798>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8047efa:	683b      	ldr	r3, [r7, #0]
 8047efc:	681b      	ldr	r3, [r3, #0]
 8047efe:	4a2d      	ldr	r2, [pc, #180]	; (8047fb4 <HAL_ADC_ConfigChannel+0x7c8>)
 8047f00:	4293      	cmp	r3, r2
 8047f02:	d113      	bne.n	8047f2c <HAL_ADC_ConfigChannel+0x740>
 8047f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8047f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8047f0c:	2b00      	cmp	r3, #0
 8047f0e:	d10d      	bne.n	8047f2c <HAL_ADC_ConfigChannel+0x740>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8047f10:	687b      	ldr	r3, [r7, #4]
 8047f12:	681b      	ldr	r3, [r3, #0]
 8047f14:	4a22      	ldr	r2, [pc, #136]	; (8047fa0 <HAL_ADC_ConfigChannel+0x7b4>)
 8047f16:	4293      	cmp	r3, r2
 8047f18:	d134      	bne.n	8047f84 <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8047f1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8047f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8047f22:	4619      	mov	r1, r3
 8047f24:	481d      	ldr	r0, [pc, #116]	; (8047f9c <HAL_ADC_ConfigChannel+0x7b0>)
 8047f26:	f7fe feb8 	bl	8046c9a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8047f2a:	e02b      	b.n	8047f84 <HAL_ADC_ConfigChannel+0x798>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8047f2c:	683b      	ldr	r3, [r7, #0]
 8047f2e:	681b      	ldr	r3, [r3, #0]
 8047f30:	4a21      	ldr	r2, [pc, #132]	; (8047fb8 <HAL_ADC_ConfigChannel+0x7cc>)
 8047f32:	4293      	cmp	r3, r2
 8047f34:	d126      	bne.n	8047f84 <HAL_ADC_ConfigChannel+0x798>
 8047f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8047f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8047f3e:	2b00      	cmp	r3, #0
 8047f40:	d120      	bne.n	8047f84 <HAL_ADC_ConfigChannel+0x798>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8047f42:	687b      	ldr	r3, [r7, #4]
 8047f44:	681b      	ldr	r3, [r3, #0]
 8047f46:	4a16      	ldr	r2, [pc, #88]	; (8047fa0 <HAL_ADC_ConfigChannel+0x7b4>)
 8047f48:	4293      	cmp	r3, r2
 8047f4a:	d11b      	bne.n	8047f84 <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8047f4c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8047f50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8047f54:	4619      	mov	r1, r3
 8047f56:	4811      	ldr	r0, [pc, #68]	; (8047f9c <HAL_ADC_ConfigChannel+0x7b0>)
 8047f58:	f7fe fe9f 	bl	8046c9a <LL_ADC_SetCommonPathInternalCh>
 8047f5c:	e012      	b.n	8047f84 <HAL_ADC_ConfigChannel+0x798>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8047f5e:	687b      	ldr	r3, [r7, #4]
 8047f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047f62:	f043 0220 	orr.w	r2, r3, #32
 8047f66:	687b      	ldr	r3, [r7, #4]
 8047f68:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8047f6a:	2301      	movs	r3, #1
 8047f6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8047f70:	e008      	b.n	8047f84 <HAL_ADC_ConfigChannel+0x798>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8047f72:	687b      	ldr	r3, [r7, #4]
 8047f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047f76:	f043 0220 	orr.w	r2, r3, #32
 8047f7a:	687b      	ldr	r3, [r7, #4]
 8047f7c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8047f7e:	2301      	movs	r3, #1
 8047f80:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8047f84:	687b      	ldr	r3, [r7, #4]
 8047f86:	2200      	movs	r2, #0
 8047f88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8047f8c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8047f90:	4618      	mov	r0, r3
 8047f92:	37dc      	adds	r7, #220	; 0xdc
 8047f94:	46bd      	mov	sp, r7
 8047f96:	bd90      	pop	{r4, r7, pc}
 8047f98:	80080000 	.word	0x80080000
 8047f9c:	42028300 	.word	0x42028300
 8047fa0:	42028000 	.word	0x42028000
 8047fa4:	42028100 	.word	0x42028100
 8047fa8:	c7520000 	.word	0xc7520000
 8047fac:	20018024 	.word	0x20018024
 8047fb0:	053e2d63 	.word	0x053e2d63
 8047fb4:	cb840000 	.word	0xcb840000
 8047fb8:	80000001 	.word	0x80000001

08047fbc <LL_ADC_IsEnabled>:
{
 8047fbc:	b480      	push	{r7}
 8047fbe:	b083      	sub	sp, #12
 8047fc0:	af00      	add	r7, sp, #0
 8047fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8047fc4:	687b      	ldr	r3, [r7, #4]
 8047fc6:	689b      	ldr	r3, [r3, #8]
 8047fc8:	f003 0301 	and.w	r3, r3, #1
 8047fcc:	2b01      	cmp	r3, #1
 8047fce:	d101      	bne.n	8047fd4 <LL_ADC_IsEnabled+0x18>
 8047fd0:	2301      	movs	r3, #1
 8047fd2:	e000      	b.n	8047fd6 <LL_ADC_IsEnabled+0x1a>
 8047fd4:	2300      	movs	r3, #0
}
 8047fd6:	4618      	mov	r0, r3
 8047fd8:	370c      	adds	r7, #12
 8047fda:	46bd      	mov	sp, r7
 8047fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047fe0:	4770      	bx	lr

08047fe2 <LL_ADC_REG_IsConversionOngoing>:
{
 8047fe2:	b480      	push	{r7}
 8047fe4:	b083      	sub	sp, #12
 8047fe6:	af00      	add	r7, sp, #0
 8047fe8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8047fea:	687b      	ldr	r3, [r7, #4]
 8047fec:	689b      	ldr	r3, [r3, #8]
 8047fee:	f003 0304 	and.w	r3, r3, #4
 8047ff2:	2b04      	cmp	r3, #4
 8047ff4:	d101      	bne.n	8047ffa <LL_ADC_REG_IsConversionOngoing+0x18>
 8047ff6:	2301      	movs	r3, #1
 8047ff8:	e000      	b.n	8047ffc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8047ffa:	2300      	movs	r3, #0
}
 8047ffc:	4618      	mov	r0, r3
 8047ffe:	370c      	adds	r7, #12
 8048000:	46bd      	mov	sp, r7
 8048002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048006:	4770      	bx	lr

08048008 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8048008:	b480      	push	{r7}
 804800a:	b083      	sub	sp, #12
 804800c:	af00      	add	r7, sp, #0
 804800e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8048010:	bf00      	nop
 8048012:	370c      	adds	r7, #12
 8048014:	46bd      	mov	sp, r7
 8048016:	f85d 7b04 	ldr.w	r7, [sp], #4
 804801a:	4770      	bx	lr

0804801c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 804801c:	b480      	push	{r7}
 804801e:	b083      	sub	sp, #12
 8048020:	af00      	add	r7, sp, #0
 8048022:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8048024:	bf00      	nop
 8048026:	370c      	adds	r7, #12
 8048028:	46bd      	mov	sp, r7
 804802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804802e:	4770      	bx	lr

08048030 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8048030:	b480      	push	{r7}
 8048032:	b083      	sub	sp, #12
 8048034:	af00      	add	r7, sp, #0
 8048036:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8048038:	bf00      	nop
 804803a:	370c      	adds	r7, #12
 804803c:	46bd      	mov	sp, r7
 804803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048042:	4770      	bx	lr

08048044 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8048044:	b480      	push	{r7}
 8048046:	b083      	sub	sp, #12
 8048048:	af00      	add	r7, sp, #0
 804804a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 804804c:	bf00      	nop
 804804e:	370c      	adds	r7, #12
 8048050:	46bd      	mov	sp, r7
 8048052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048056:	4770      	bx	lr

08048058 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8048058:	b480      	push	{r7}
 804805a:	b083      	sub	sp, #12
 804805c:	af00      	add	r7, sp, #0
 804805e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8048060:	bf00      	nop
 8048062:	370c      	adds	r7, #12
 8048064:	46bd      	mov	sp, r7
 8048066:	f85d 7b04 	ldr.w	r7, [sp], #4
 804806a:	4770      	bx	lr

0804806c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 804806c:	b590      	push	{r4, r7, lr}
 804806e:	b0ab      	sub	sp, #172	; 0xac
 8048070:	af00      	add	r7, sp, #0
 8048072:	6078      	str	r0, [r7, #4]
 8048074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8048076:	2300      	movs	r3, #0
 8048078:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 804807c:	687b      	ldr	r3, [r7, #4]
 804807e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8048082:	2b01      	cmp	r3, #1
 8048084:	d101      	bne.n	804808a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8048086:	2302      	movs	r3, #2
 8048088:	e090      	b.n	80481ac <HAL_ADCEx_MultiModeConfigChannel+0x140>
 804808a:	687b      	ldr	r3, [r7, #4]
 804808c:	2201      	movs	r2, #1
 804808e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8048092:	687b      	ldr	r3, [r7, #4]
 8048094:	681b      	ldr	r3, [r3, #0]
 8048096:	4a47      	ldr	r2, [pc, #284]	; (80481b4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8048098:	4293      	cmp	r3, r2
 804809a:	d102      	bne.n	80480a2 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 804809c:	4b46      	ldr	r3, [pc, #280]	; (80481b8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 804809e:	60bb      	str	r3, [r7, #8]
 80480a0:	e001      	b.n	80480a6 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80480a2:	2300      	movs	r3, #0
 80480a4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80480a6:	68bb      	ldr	r3, [r7, #8]
 80480a8:	2b00      	cmp	r3, #0
 80480aa:	d10b      	bne.n	80480c4 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80480ac:	687b      	ldr	r3, [r7, #4]
 80480ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80480b0:	f043 0220 	orr.w	r2, r3, #32
 80480b4:	687b      	ldr	r3, [r7, #4]
 80480b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80480b8:	687b      	ldr	r3, [r7, #4]
 80480ba:	2200      	movs	r2, #0
 80480bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 80480c0:	2301      	movs	r3, #1
 80480c2:	e073      	b.n	80481ac <HAL_ADCEx_MultiModeConfigChannel+0x140>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80480c4:	68bb      	ldr	r3, [r7, #8]
 80480c6:	4618      	mov	r0, r3
 80480c8:	f7ff ff8b 	bl	8047fe2 <LL_ADC_REG_IsConversionOngoing>
 80480cc:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80480d0:	687b      	ldr	r3, [r7, #4]
 80480d2:	681b      	ldr	r3, [r3, #0]
 80480d4:	4618      	mov	r0, r3
 80480d6:	f7ff ff84 	bl	8047fe2 <LL_ADC_REG_IsConversionOngoing>
 80480da:	4603      	mov	r3, r0
 80480dc:	2b00      	cmp	r3, #0
 80480de:	d154      	bne.n	804818a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80480e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80480e4:	2b00      	cmp	r3, #0
 80480e6:	d150      	bne.n	804818a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80480e8:	4b34      	ldr	r3, [pc, #208]	; (80481bc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80480ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80480ee:	683b      	ldr	r3, [r7, #0]
 80480f0:	681b      	ldr	r3, [r3, #0]
 80480f2:	2b00      	cmp	r3, #0
 80480f4:	d02b      	beq.n	804814e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80480f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80480fa:	689b      	ldr	r3, [r3, #8]
 80480fc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8048100:	683b      	ldr	r3, [r7, #0]
 8048102:	6859      	ldr	r1, [r3, #4]
 8048104:	687b      	ldr	r3, [r7, #4]
 8048106:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804810a:	035b      	lsls	r3, r3, #13
 804810c:	430b      	orrs	r3, r1
 804810e:	431a      	orrs	r2, r3
 8048110:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8048114:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8048116:	4827      	ldr	r0, [pc, #156]	; (80481b4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8048118:	f7ff ff50 	bl	8047fbc <LL_ADC_IsEnabled>
 804811c:	4604      	mov	r4, r0
 804811e:	4826      	ldr	r0, [pc, #152]	; (80481b8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8048120:	f7ff ff4c 	bl	8047fbc <LL_ADC_IsEnabled>
 8048124:	4603      	mov	r3, r0
 8048126:	4323      	orrs	r3, r4
 8048128:	2b00      	cmp	r3, #0
 804812a:	d138      	bne.n	804819e <HAL_ADCEx_MultiModeConfigChannel+0x132>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 804812c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8048130:	689b      	ldr	r3, [r3, #8]
 8048132:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8048136:	f023 030f 	bic.w	r3, r3, #15
 804813a:	683a      	ldr	r2, [r7, #0]
 804813c:	6811      	ldr	r1, [r2, #0]
 804813e:	683a      	ldr	r2, [r7, #0]
 8048140:	6892      	ldr	r2, [r2, #8]
 8048142:	430a      	orrs	r2, r1
 8048144:	431a      	orrs	r2, r3
 8048146:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 804814a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 804814c:	e027      	b.n	804819e <HAL_ADCEx_MultiModeConfigChannel+0x132>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 804814e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8048152:	689b      	ldr	r3, [r3, #8]
 8048154:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8048158:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 804815c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 804815e:	4815      	ldr	r0, [pc, #84]	; (80481b4 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8048160:	f7ff ff2c 	bl	8047fbc <LL_ADC_IsEnabled>
 8048164:	4604      	mov	r4, r0
 8048166:	4814      	ldr	r0, [pc, #80]	; (80481b8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8048168:	f7ff ff28 	bl	8047fbc <LL_ADC_IsEnabled>
 804816c:	4603      	mov	r3, r0
 804816e:	4323      	orrs	r3, r4
 8048170:	2b00      	cmp	r3, #0
 8048172:	d114      	bne.n	804819e <HAL_ADCEx_MultiModeConfigChannel+0x132>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8048174:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8048178:	689b      	ldr	r3, [r3, #8]
 804817a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 804817e:	f023 030f 	bic.w	r3, r3, #15
 8048182:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8048186:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8048188:	e009      	b.n	804819e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 804818a:	687b      	ldr	r3, [r7, #4]
 804818c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804818e:	f043 0220 	orr.w	r2, r3, #32
 8048192:	687b      	ldr	r3, [r7, #4]
 8048194:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8048196:	2301      	movs	r3, #1
 8048198:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 804819c:	e000      	b.n	80481a0 <HAL_ADCEx_MultiModeConfigChannel+0x134>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 804819e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80481a0:	687b      	ldr	r3, [r7, #4]
 80481a2:	2200      	movs	r2, #0
 80481a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80481a8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 80481ac:	4618      	mov	r0, r3
 80481ae:	37ac      	adds	r7, #172	; 0xac
 80481b0:	46bd      	mov	sp, r7
 80481b2:	bd90      	pop	{r4, r7, pc}
 80481b4:	42028000 	.word	0x42028000
 80481b8:	42028100 	.word	0x42028100
 80481bc:	42028300 	.word	0x42028300

080481c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80481c0:	b480      	push	{r7}
 80481c2:	b085      	sub	sp, #20
 80481c4:	af00      	add	r7, sp, #0
 80481c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80481c8:	687b      	ldr	r3, [r7, #4]
 80481ca:	f003 0307 	and.w	r3, r3, #7
 80481ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80481d0:	4b0c      	ldr	r3, [pc, #48]	; (8048204 <__NVIC_SetPriorityGrouping+0x44>)
 80481d2:	68db      	ldr	r3, [r3, #12]
 80481d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80481d6:	68ba      	ldr	r2, [r7, #8]
 80481d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80481dc:	4013      	ands	r3, r2
 80481de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80481e0:	68fb      	ldr	r3, [r7, #12]
 80481e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80481e4:	68bb      	ldr	r3, [r7, #8]
 80481e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80481e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80481ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80481f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80481f2:	4a04      	ldr	r2, [pc, #16]	; (8048204 <__NVIC_SetPriorityGrouping+0x44>)
 80481f4:	68bb      	ldr	r3, [r7, #8]
 80481f6:	60d3      	str	r3, [r2, #12]
}
 80481f8:	bf00      	nop
 80481fa:	3714      	adds	r7, #20
 80481fc:	46bd      	mov	sp, r7
 80481fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048202:	4770      	bx	lr
 8048204:	e000ed00 	.word	0xe000ed00

08048208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8048208:	b480      	push	{r7}
 804820a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 804820c:	4b04      	ldr	r3, [pc, #16]	; (8048220 <__NVIC_GetPriorityGrouping+0x18>)
 804820e:	68db      	ldr	r3, [r3, #12]
 8048210:	0a1b      	lsrs	r3, r3, #8
 8048212:	f003 0307 	and.w	r3, r3, #7
}
 8048216:	4618      	mov	r0, r3
 8048218:	46bd      	mov	sp, r7
 804821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804821e:	4770      	bx	lr
 8048220:	e000ed00 	.word	0xe000ed00

08048224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8048224:	b480      	push	{r7}
 8048226:	b083      	sub	sp, #12
 8048228:	af00      	add	r7, sp, #0
 804822a:	4603      	mov	r3, r0
 804822c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 804822e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8048232:	2b00      	cmp	r3, #0
 8048234:	db0b      	blt.n	804824e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8048236:	79fb      	ldrb	r3, [r7, #7]
 8048238:	f003 021f 	and.w	r2, r3, #31
 804823c:	4907      	ldr	r1, [pc, #28]	; (804825c <__NVIC_EnableIRQ+0x38>)
 804823e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8048242:	095b      	lsrs	r3, r3, #5
 8048244:	2001      	movs	r0, #1
 8048246:	fa00 f202 	lsl.w	r2, r0, r2
 804824a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 804824e:	bf00      	nop
 8048250:	370c      	adds	r7, #12
 8048252:	46bd      	mov	sp, r7
 8048254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048258:	4770      	bx	lr
 804825a:	bf00      	nop
 804825c:	e000e100 	.word	0xe000e100

08048260 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8048260:	b480      	push	{r7}
 8048262:	b083      	sub	sp, #12
 8048264:	af00      	add	r7, sp, #0
 8048266:	4603      	mov	r3, r0
 8048268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 804826a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804826e:	2b00      	cmp	r3, #0
 8048270:	db12      	blt.n	8048298 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8048272:	79fb      	ldrb	r3, [r7, #7]
 8048274:	f003 021f 	and.w	r2, r3, #31
 8048278:	490a      	ldr	r1, [pc, #40]	; (80482a4 <__NVIC_DisableIRQ+0x44>)
 804827a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804827e:	095b      	lsrs	r3, r3, #5
 8048280:	2001      	movs	r0, #1
 8048282:	fa00 f202 	lsl.w	r2, r0, r2
 8048286:	3320      	adds	r3, #32
 8048288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 804828c:	f3bf 8f4f 	dsb	sy
}
 8048290:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8048292:	f3bf 8f6f 	isb	sy
}
 8048296:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8048298:	bf00      	nop
 804829a:	370c      	adds	r7, #12
 804829c:	46bd      	mov	sp, r7
 804829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80482a2:	4770      	bx	lr
 80482a4:	e000e100 	.word	0xe000e100

080482a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80482a8:	b480      	push	{r7}
 80482aa:	b083      	sub	sp, #12
 80482ac:	af00      	add	r7, sp, #0
 80482ae:	4603      	mov	r3, r0
 80482b0:	6039      	str	r1, [r7, #0]
 80482b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80482b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80482b8:	2b00      	cmp	r3, #0
 80482ba:	db0a      	blt.n	80482d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80482bc:	683b      	ldr	r3, [r7, #0]
 80482be:	b2da      	uxtb	r2, r3
 80482c0:	490c      	ldr	r1, [pc, #48]	; (80482f4 <__NVIC_SetPriority+0x4c>)
 80482c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80482c6:	0152      	lsls	r2, r2, #5
 80482c8:	b2d2      	uxtb	r2, r2
 80482ca:	440b      	add	r3, r1
 80482cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80482d0:	e00a      	b.n	80482e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80482d2:	683b      	ldr	r3, [r7, #0]
 80482d4:	b2da      	uxtb	r2, r3
 80482d6:	4908      	ldr	r1, [pc, #32]	; (80482f8 <__NVIC_SetPriority+0x50>)
 80482d8:	79fb      	ldrb	r3, [r7, #7]
 80482da:	f003 030f 	and.w	r3, r3, #15
 80482de:	3b04      	subs	r3, #4
 80482e0:	0152      	lsls	r2, r2, #5
 80482e2:	b2d2      	uxtb	r2, r2
 80482e4:	440b      	add	r3, r1
 80482e6:	761a      	strb	r2, [r3, #24]
}
 80482e8:	bf00      	nop
 80482ea:	370c      	adds	r7, #12
 80482ec:	46bd      	mov	sp, r7
 80482ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80482f2:	4770      	bx	lr
 80482f4:	e000e100 	.word	0xe000e100
 80482f8:	e000ed00 	.word	0xe000ed00

080482fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80482fc:	b480      	push	{r7}
 80482fe:	b089      	sub	sp, #36	; 0x24
 8048300:	af00      	add	r7, sp, #0
 8048302:	60f8      	str	r0, [r7, #12]
 8048304:	60b9      	str	r1, [r7, #8]
 8048306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8048308:	68fb      	ldr	r3, [r7, #12]
 804830a:	f003 0307 	and.w	r3, r3, #7
 804830e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8048310:	69fb      	ldr	r3, [r7, #28]
 8048312:	f1c3 0307 	rsb	r3, r3, #7
 8048316:	2b03      	cmp	r3, #3
 8048318:	bf28      	it	cs
 804831a:	2303      	movcs	r3, #3
 804831c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 804831e:	69fb      	ldr	r3, [r7, #28]
 8048320:	3303      	adds	r3, #3
 8048322:	2b06      	cmp	r3, #6
 8048324:	d902      	bls.n	804832c <NVIC_EncodePriority+0x30>
 8048326:	69fb      	ldr	r3, [r7, #28]
 8048328:	3b04      	subs	r3, #4
 804832a:	e000      	b.n	804832e <NVIC_EncodePriority+0x32>
 804832c:	2300      	movs	r3, #0
 804832e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8048330:	f04f 32ff 	mov.w	r2, #4294967295
 8048334:	69bb      	ldr	r3, [r7, #24]
 8048336:	fa02 f303 	lsl.w	r3, r2, r3
 804833a:	43da      	mvns	r2, r3
 804833c:	68bb      	ldr	r3, [r7, #8]
 804833e:	401a      	ands	r2, r3
 8048340:	697b      	ldr	r3, [r7, #20]
 8048342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8048344:	f04f 31ff 	mov.w	r1, #4294967295
 8048348:	697b      	ldr	r3, [r7, #20]
 804834a:	fa01 f303 	lsl.w	r3, r1, r3
 804834e:	43d9      	mvns	r1, r3
 8048350:	687b      	ldr	r3, [r7, #4]
 8048352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8048354:	4313      	orrs	r3, r2
         );
}
 8048356:	4618      	mov	r0, r3
 8048358:	3724      	adds	r7, #36	; 0x24
 804835a:	46bd      	mov	sp, r7
 804835c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048360:	4770      	bx	lr

08048362 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8048362:	b580      	push	{r7, lr}
 8048364:	b082      	sub	sp, #8
 8048366:	af00      	add	r7, sp, #0
 8048368:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 804836a:	6878      	ldr	r0, [r7, #4]
 804836c:	f7ff ff28 	bl	80481c0 <__NVIC_SetPriorityGrouping>
}
 8048370:	bf00      	nop
 8048372:	3708      	adds	r7, #8
 8048374:	46bd      	mov	sp, r7
 8048376:	bd80      	pop	{r7, pc}

08048378 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8048378:	b580      	push	{r7, lr}
 804837a:	b086      	sub	sp, #24
 804837c:	af00      	add	r7, sp, #0
 804837e:	4603      	mov	r3, r0
 8048380:	60b9      	str	r1, [r7, #8]
 8048382:	607a      	str	r2, [r7, #4]
 8048384:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8048386:	f7ff ff3f 	bl	8048208 <__NVIC_GetPriorityGrouping>
 804838a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 804838c:	687a      	ldr	r2, [r7, #4]
 804838e:	68b9      	ldr	r1, [r7, #8]
 8048390:	6978      	ldr	r0, [r7, #20]
 8048392:	f7ff ffb3 	bl	80482fc <NVIC_EncodePriority>
 8048396:	4602      	mov	r2, r0
 8048398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804839c:	4611      	mov	r1, r2
 804839e:	4618      	mov	r0, r3
 80483a0:	f7ff ff82 	bl	80482a8 <__NVIC_SetPriority>
}
 80483a4:	bf00      	nop
 80483a6:	3718      	adds	r7, #24
 80483a8:	46bd      	mov	sp, r7
 80483aa:	bd80      	pop	{r7, pc}

080483ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80483ac:	b580      	push	{r7, lr}
 80483ae:	b082      	sub	sp, #8
 80483b0:	af00      	add	r7, sp, #0
 80483b2:	4603      	mov	r3, r0
 80483b4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80483b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80483ba:	4618      	mov	r0, r3
 80483bc:	f7ff ff32 	bl	8048224 <__NVIC_EnableIRQ>
}
 80483c0:	bf00      	nop
 80483c2:	3708      	adds	r7, #8
 80483c4:	46bd      	mov	sp, r7
 80483c6:	bd80      	pop	{r7, pc}

080483c8 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80483c8:	b580      	push	{r7, lr}
 80483ca:	b082      	sub	sp, #8
 80483cc:	af00      	add	r7, sp, #0
 80483ce:	4603      	mov	r3, r0
 80483d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80483d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80483d6:	4618      	mov	r0, r3
 80483d8:	f7ff ff42 	bl	8048260 <__NVIC_DisableIRQ>
}
 80483dc:	bf00      	nop
 80483de:	3708      	adds	r7, #8
 80483e0:	46bd      	mov	sp, r7
 80483e2:	bd80      	pop	{r7, pc}

080483e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80483e4:	b580      	push	{r7, lr}
 80483e6:	b084      	sub	sp, #16
 80483e8:	af00      	add	r7, sp, #0
 80483ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80483ec:	687b      	ldr	r3, [r7, #4]
 80483ee:	2b00      	cmp	r3, #0
 80483f0:	d101      	bne.n	80483f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80483f2:	2301      	movs	r3, #1
 80483f4:	e08d      	b.n	8048512 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80483f6:	687b      	ldr	r3, [r7, #4]
 80483f8:	681b      	ldr	r3, [r3, #0]
 80483fa:	461a      	mov	r2, r3
 80483fc:	4b47      	ldr	r3, [pc, #284]	; (804851c <HAL_DMA_Init+0x138>)
 80483fe:	429a      	cmp	r2, r3
 8048400:	d80f      	bhi.n	8048422 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8048402:	687b      	ldr	r3, [r7, #4]
 8048404:	681b      	ldr	r3, [r3, #0]
 8048406:	461a      	mov	r2, r3
 8048408:	4b45      	ldr	r3, [pc, #276]	; (8048520 <HAL_DMA_Init+0x13c>)
 804840a:	4413      	add	r3, r2
 804840c:	4a45      	ldr	r2, [pc, #276]	; (8048524 <HAL_DMA_Init+0x140>)
 804840e:	fba2 2303 	umull	r2, r3, r2, r3
 8048412:	091b      	lsrs	r3, r3, #4
 8048414:	009a      	lsls	r2, r3, #2
 8048416:	687b      	ldr	r3, [r7, #4]
 8048418:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 804841a:	687b      	ldr	r3, [r7, #4]
 804841c:	4a42      	ldr	r2, [pc, #264]	; (8048528 <HAL_DMA_Init+0x144>)
 804841e:	649a      	str	r2, [r3, #72]	; 0x48
 8048420:	e00e      	b.n	8048440 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8048422:	687b      	ldr	r3, [r7, #4]
 8048424:	681b      	ldr	r3, [r3, #0]
 8048426:	461a      	mov	r2, r3
 8048428:	4b40      	ldr	r3, [pc, #256]	; (804852c <HAL_DMA_Init+0x148>)
 804842a:	4413      	add	r3, r2
 804842c:	4a3d      	ldr	r2, [pc, #244]	; (8048524 <HAL_DMA_Init+0x140>)
 804842e:	fba2 2303 	umull	r2, r3, r2, r3
 8048432:	091b      	lsrs	r3, r3, #4
 8048434:	009a      	lsls	r2, r3, #2
 8048436:	687b      	ldr	r3, [r7, #4]
 8048438:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 804843a:	687b      	ldr	r3, [r7, #4]
 804843c:	4a3c      	ldr	r2, [pc, #240]	; (8048530 <HAL_DMA_Init+0x14c>)
 804843e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8048440:	687b      	ldr	r3, [r7, #4]
 8048442:	2202      	movs	r2, #2
 8048444:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8048448:	687b      	ldr	r3, [r7, #4]
 804844a:	681b      	ldr	r3, [r3, #0]
 804844c:	681b      	ldr	r3, [r3, #0]
 804844e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8048450:	68fb      	ldr	r3, [r7, #12]
 8048452:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8048456:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 804845a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 804845c:	687b      	ldr	r3, [r7, #4]
 804845e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8048460:	687b      	ldr	r3, [r7, #4]
 8048462:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8048464:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8048466:	687b      	ldr	r3, [r7, #4]
 8048468:	691b      	ldr	r3, [r3, #16]
 804846a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 804846c:	687b      	ldr	r3, [r7, #4]
 804846e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8048470:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8048472:	687b      	ldr	r3, [r7, #4]
 8048474:	699b      	ldr	r3, [r3, #24]
 8048476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8048478:	687b      	ldr	r3, [r7, #4]
 804847a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 804847c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 804847e:	687b      	ldr	r3, [r7, #4]
 8048480:	6a1b      	ldr	r3, [r3, #32]
 8048482:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8048484:	68fa      	ldr	r2, [r7, #12]
 8048486:	4313      	orrs	r3, r2
 8048488:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 804848a:	687b      	ldr	r3, [r7, #4]
 804848c:	681b      	ldr	r3, [r3, #0]
 804848e:	68fa      	ldr	r2, [r7, #12]
 8048490:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8048492:	6878      	ldr	r0, [r7, #4]
 8048494:	f000 fa48 	bl	8048928 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8048498:	687b      	ldr	r3, [r7, #4]
 804849a:	689b      	ldr	r3, [r3, #8]
 804849c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80484a0:	d102      	bne.n	80484a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80484a2:	687b      	ldr	r3, [r7, #4]
 80484a4:	2200      	movs	r2, #0
 80484a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80484a8:	687b      	ldr	r3, [r7, #4]
 80484aa:	685a      	ldr	r2, [r3, #4]
 80484ac:	687b      	ldr	r3, [r7, #4]
 80484ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80484b0:	b2d2      	uxtb	r2, r2
 80484b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80484b4:	687b      	ldr	r3, [r7, #4]
 80484b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80484b8:	687a      	ldr	r2, [r7, #4]
 80484ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80484bc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80484be:	687b      	ldr	r3, [r7, #4]
 80484c0:	685b      	ldr	r3, [r3, #4]
 80484c2:	2b00      	cmp	r3, #0
 80484c4:	d010      	beq.n	80484e8 <HAL_DMA_Init+0x104>
 80484c6:	687b      	ldr	r3, [r7, #4]
 80484c8:	685b      	ldr	r3, [r3, #4]
 80484ca:	2b04      	cmp	r3, #4
 80484cc:	d80c      	bhi.n	80484e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80484ce:	6878      	ldr	r0, [r7, #4]
 80484d0:	f000 fa68 	bl	80489a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80484d4:	687b      	ldr	r3, [r7, #4]
 80484d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80484d8:	2200      	movs	r2, #0
 80484da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80484dc:	687b      	ldr	r3, [r7, #4]
 80484de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80484e0:	687a      	ldr	r2, [r7, #4]
 80484e2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80484e4:	605a      	str	r2, [r3, #4]
 80484e6:	e008      	b.n	80484fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80484e8:	687b      	ldr	r3, [r7, #4]
 80484ea:	2200      	movs	r2, #0
 80484ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80484ee:	687b      	ldr	r3, [r7, #4]
 80484f0:	2200      	movs	r2, #0
 80484f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80484f4:	687b      	ldr	r3, [r7, #4]
 80484f6:	2200      	movs	r2, #0
 80484f8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80484fa:	687b      	ldr	r3, [r7, #4]
 80484fc:	2200      	movs	r2, #0
 80484fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8048500:	687b      	ldr	r3, [r7, #4]
 8048502:	2201      	movs	r2, #1
 8048504:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8048508:	687b      	ldr	r3, [r7, #4]
 804850a:	2200      	movs	r2, #0
 804850c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8048510:	2300      	movs	r3, #0
}
 8048512:	4618      	mov	r0, r3
 8048514:	3710      	adds	r7, #16
 8048516:	46bd      	mov	sp, r7
 8048518:	bd80      	pop	{r7, pc}
 804851a:	bf00      	nop
 804851c:	40020407 	.word	0x40020407
 8048520:	bffdfff8 	.word	0xbffdfff8
 8048524:	cccccccd 	.word	0xcccccccd
 8048528:	40020000 	.word	0x40020000
 804852c:	bffdfbf8 	.word	0xbffdfbf8
 8048530:	40020400 	.word	0x40020400

08048534 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8048534:	b480      	push	{r7}
 8048536:	b085      	sub	sp, #20
 8048538:	af00      	add	r7, sp, #0
 804853a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 804853c:	2300      	movs	r3, #0
 804853e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8048540:	687b      	ldr	r3, [r7, #4]
 8048542:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8048546:	b2db      	uxtb	r3, r3
 8048548:	2b02      	cmp	r3, #2
 804854a:	d008      	beq.n	804855e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 804854c:	687b      	ldr	r3, [r7, #4]
 804854e:	2204      	movs	r2, #4
 8048550:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8048552:	687b      	ldr	r3, [r7, #4]
 8048554:	2200      	movs	r2, #0
 8048556:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 804855a:	2301      	movs	r3, #1
 804855c:	e040      	b.n	80485e0 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 804855e:	687b      	ldr	r3, [r7, #4]
 8048560:	681b      	ldr	r3, [r3, #0]
 8048562:	681a      	ldr	r2, [r3, #0]
 8048564:	687b      	ldr	r3, [r7, #4]
 8048566:	681b      	ldr	r3, [r3, #0]
 8048568:	f022 020e 	bic.w	r2, r2, #14
 804856c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 804856e:	687b      	ldr	r3, [r7, #4]
 8048570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8048572:	681a      	ldr	r2, [r3, #0]
 8048574:	687b      	ldr	r3, [r7, #4]
 8048576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8048578:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 804857c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 804857e:	687b      	ldr	r3, [r7, #4]
 8048580:	681b      	ldr	r3, [r3, #0]
 8048582:	681a      	ldr	r2, [r3, #0]
 8048584:	687b      	ldr	r3, [r7, #4]
 8048586:	681b      	ldr	r3, [r3, #0]
 8048588:	f022 0201 	bic.w	r2, r2, #1
 804858c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 804858e:	687b      	ldr	r3, [r7, #4]
 8048590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048592:	f003 021c 	and.w	r2, r3, #28
 8048596:	687b      	ldr	r3, [r7, #4]
 8048598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804859a:	2101      	movs	r1, #1
 804859c:	fa01 f202 	lsl.w	r2, r1, r2
 80485a0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80485a2:	687b      	ldr	r3, [r7, #4]
 80485a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80485a6:	687a      	ldr	r2, [r7, #4]
 80485a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80485aa:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80485ac:	687b      	ldr	r3, [r7, #4]
 80485ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80485b0:	2b00      	cmp	r3, #0
 80485b2:	d00c      	beq.n	80485ce <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80485b4:	687b      	ldr	r3, [r7, #4]
 80485b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80485b8:	681a      	ldr	r2, [r3, #0]
 80485ba:	687b      	ldr	r3, [r7, #4]
 80485bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80485be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80485c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80485c4:	687b      	ldr	r3, [r7, #4]
 80485c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80485c8:	687a      	ldr	r2, [r7, #4]
 80485ca:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80485cc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80485ce:	687b      	ldr	r3, [r7, #4]
 80485d0:	2201      	movs	r2, #1
 80485d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80485d6:	687b      	ldr	r3, [r7, #4]
 80485d8:	2200      	movs	r2, #0
 80485da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80485de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80485e0:	4618      	mov	r0, r3
 80485e2:	3714      	adds	r7, #20
 80485e4:	46bd      	mov	sp, r7
 80485e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80485ea:	4770      	bx	lr

080485ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80485ec:	b580      	push	{r7, lr}
 80485ee:	b084      	sub	sp, #16
 80485f0:	af00      	add	r7, sp, #0
 80485f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80485f4:	2300      	movs	r3, #0
 80485f6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80485f8:	687b      	ldr	r3, [r7, #4]
 80485fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80485fe:	b2db      	uxtb	r3, r3
 8048600:	2b02      	cmp	r3, #2
 8048602:	d005      	beq.n	8048610 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8048604:	687b      	ldr	r3, [r7, #4]
 8048606:	2204      	movs	r2, #4
 8048608:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 804860a:	2301      	movs	r3, #1
 804860c:	73fb      	strb	r3, [r7, #15]
 804860e:	e047      	b.n	80486a0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8048610:	687b      	ldr	r3, [r7, #4]
 8048612:	681b      	ldr	r3, [r3, #0]
 8048614:	681a      	ldr	r2, [r3, #0]
 8048616:	687b      	ldr	r3, [r7, #4]
 8048618:	681b      	ldr	r3, [r3, #0]
 804861a:	f022 020e 	bic.w	r2, r2, #14
 804861e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8048620:	687b      	ldr	r3, [r7, #4]
 8048622:	681b      	ldr	r3, [r3, #0]
 8048624:	681a      	ldr	r2, [r3, #0]
 8048626:	687b      	ldr	r3, [r7, #4]
 8048628:	681b      	ldr	r3, [r3, #0]
 804862a:	f022 0201 	bic.w	r2, r2, #1
 804862e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8048630:	687b      	ldr	r3, [r7, #4]
 8048632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8048634:	681a      	ldr	r2, [r3, #0]
 8048636:	687b      	ldr	r3, [r7, #4]
 8048638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804863a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 804863e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8048640:	687b      	ldr	r3, [r7, #4]
 8048642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048644:	f003 021c 	and.w	r2, r3, #28
 8048648:	687b      	ldr	r3, [r7, #4]
 804864a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804864c:	2101      	movs	r1, #1
 804864e:	fa01 f202 	lsl.w	r2, r1, r2
 8048652:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8048654:	687b      	ldr	r3, [r7, #4]
 8048656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048658:	687a      	ldr	r2, [r7, #4]
 804865a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 804865c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 804865e:	687b      	ldr	r3, [r7, #4]
 8048660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8048662:	2b00      	cmp	r3, #0
 8048664:	d00c      	beq.n	8048680 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8048666:	687b      	ldr	r3, [r7, #4]
 8048668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804866a:	681a      	ldr	r2, [r3, #0]
 804866c:	687b      	ldr	r3, [r7, #4]
 804866e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8048670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8048674:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8048676:	687b      	ldr	r3, [r7, #4]
 8048678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804867a:	687a      	ldr	r2, [r7, #4]
 804867c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 804867e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8048680:	687b      	ldr	r3, [r7, #4]
 8048682:	2201      	movs	r2, #1
 8048684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8048688:	687b      	ldr	r3, [r7, #4]
 804868a:	2200      	movs	r2, #0
 804868c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8048690:	687b      	ldr	r3, [r7, #4]
 8048692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048694:	2b00      	cmp	r3, #0
 8048696:	d003      	beq.n	80486a0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8048698:	687b      	ldr	r3, [r7, #4]
 804869a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804869c:	6878      	ldr	r0, [r7, #4]
 804869e:	4798      	blx	r3
    }
  }
  return status;
 80486a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80486a2:	4618      	mov	r0, r3
 80486a4:	3710      	adds	r7, #16
 80486a6:	46bd      	mov	sp, r7
 80486a8:	bd80      	pop	{r7, pc}

080486aa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80486aa:	b580      	push	{r7, lr}
 80486ac:	b084      	sub	sp, #16
 80486ae:	af00      	add	r7, sp, #0
 80486b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80486b2:	687b      	ldr	r3, [r7, #4]
 80486b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80486b6:	681b      	ldr	r3, [r3, #0]
 80486b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80486ba:	687b      	ldr	r3, [r7, #4]
 80486bc:	681b      	ldr	r3, [r3, #0]
 80486be:	681b      	ldr	r3, [r3, #0]
 80486c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80486c2:	687b      	ldr	r3, [r7, #4]
 80486c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80486c6:	f003 031c 	and.w	r3, r3, #28
 80486ca:	2204      	movs	r2, #4
 80486cc:	409a      	lsls	r2, r3
 80486ce:	68fb      	ldr	r3, [r7, #12]
 80486d0:	4013      	ands	r3, r2
 80486d2:	2b00      	cmp	r3, #0
 80486d4:	d053      	beq.n	804877e <HAL_DMA_IRQHandler+0xd4>
 80486d6:	68bb      	ldr	r3, [r7, #8]
 80486d8:	f003 0304 	and.w	r3, r3, #4
 80486dc:	2b00      	cmp	r3, #0
 80486de:	d04e      	beq.n	804877e <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80486e0:	687b      	ldr	r3, [r7, #4]
 80486e2:	681b      	ldr	r3, [r3, #0]
 80486e4:	681b      	ldr	r3, [r3, #0]
 80486e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80486ea:	2b00      	cmp	r3, #0
 80486ec:	d024      	beq.n	8048738 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80486ee:	687b      	ldr	r3, [r7, #4]
 80486f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80486f2:	f003 021c 	and.w	r2, r3, #28
 80486f6:	687b      	ldr	r3, [r7, #4]
 80486f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80486fa:	2104      	movs	r1, #4
 80486fc:	fa01 f202 	lsl.w	r2, r1, r2
 8048700:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8048702:	687b      	ldr	r3, [r7, #4]
 8048704:	681b      	ldr	r3, [r3, #0]
 8048706:	681b      	ldr	r3, [r3, #0]
 8048708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804870c:	2b00      	cmp	r3, #0
 804870e:	d109      	bne.n	8048724 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8048710:	687b      	ldr	r3, [r7, #4]
 8048712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048714:	2b00      	cmp	r3, #0
 8048716:	f000 80c0 	beq.w	804889a <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 804871a:	687b      	ldr	r3, [r7, #4]
 804871c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804871e:	6878      	ldr	r0, [r7, #4]
 8048720:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8048722:	e0ba      	b.n	804889a <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8048724:	687b      	ldr	r3, [r7, #4]
 8048726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048728:	2b00      	cmp	r3, #0
 804872a:	f000 80b6 	beq.w	804889a <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 804872e:	687b      	ldr	r3, [r7, #4]
 8048730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8048732:	6878      	ldr	r0, [r7, #4]
 8048734:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8048736:	e0b0      	b.n	804889a <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8048738:	687b      	ldr	r3, [r7, #4]
 804873a:	681b      	ldr	r3, [r3, #0]
 804873c:	681b      	ldr	r3, [r3, #0]
 804873e:	f003 0320 	and.w	r3, r3, #32
 8048742:	2b00      	cmp	r3, #0
 8048744:	d107      	bne.n	8048756 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8048746:	687b      	ldr	r3, [r7, #4]
 8048748:	681b      	ldr	r3, [r3, #0]
 804874a:	681a      	ldr	r2, [r3, #0]
 804874c:	687b      	ldr	r3, [r7, #4]
 804874e:	681b      	ldr	r3, [r3, #0]
 8048750:	f022 0204 	bic.w	r2, r2, #4
 8048754:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8048756:	687b      	ldr	r3, [r7, #4]
 8048758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804875a:	f003 021c 	and.w	r2, r3, #28
 804875e:	687b      	ldr	r3, [r7, #4]
 8048760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8048762:	2104      	movs	r1, #4
 8048764:	fa01 f202 	lsl.w	r2, r1, r2
 8048768:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 804876a:	687b      	ldr	r3, [r7, #4]
 804876c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804876e:	2b00      	cmp	r3, #0
 8048770:	f000 8093 	beq.w	804889a <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8048774:	687b      	ldr	r3, [r7, #4]
 8048776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048778:	6878      	ldr	r0, [r7, #4]
 804877a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 804877c:	e08d      	b.n	804889a <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 804877e:	687b      	ldr	r3, [r7, #4]
 8048780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048782:	f003 031c 	and.w	r3, r3, #28
 8048786:	2202      	movs	r2, #2
 8048788:	409a      	lsls	r2, r3
 804878a:	68fb      	ldr	r3, [r7, #12]
 804878c:	4013      	ands	r3, r2
 804878e:	2b00      	cmp	r3, #0
 8048790:	d04e      	beq.n	8048830 <HAL_DMA_IRQHandler+0x186>
 8048792:	68bb      	ldr	r3, [r7, #8]
 8048794:	f003 0302 	and.w	r3, r3, #2
 8048798:	2b00      	cmp	r3, #0
 804879a:	d049      	beq.n	8048830 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 804879c:	687b      	ldr	r3, [r7, #4]
 804879e:	681b      	ldr	r3, [r3, #0]
 80487a0:	681b      	ldr	r3, [r3, #0]
 80487a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80487a6:	2b00      	cmp	r3, #0
 80487a8:	d018      	beq.n	80487dc <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80487aa:	687b      	ldr	r3, [r7, #4]
 80487ac:	681b      	ldr	r3, [r3, #0]
 80487ae:	681b      	ldr	r3, [r3, #0]
 80487b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80487b4:	2b00      	cmp	r3, #0
 80487b6:	d108      	bne.n	80487ca <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80487b8:	687b      	ldr	r3, [r7, #4]
 80487ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80487bc:	2b00      	cmp	r3, #0
 80487be:	d06e      	beq.n	804889e <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80487c0:	687b      	ldr	r3, [r7, #4]
 80487c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80487c4:	6878      	ldr	r0, [r7, #4]
 80487c6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80487c8:	e069      	b.n	804889e <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80487ca:	687b      	ldr	r3, [r7, #4]
 80487cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80487ce:	2b00      	cmp	r3, #0
 80487d0:	d065      	beq.n	804889e <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80487d2:	687b      	ldr	r3, [r7, #4]
 80487d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80487d6:	6878      	ldr	r0, [r7, #4]
 80487d8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80487da:	e060      	b.n	804889e <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80487dc:	687b      	ldr	r3, [r7, #4]
 80487de:	681b      	ldr	r3, [r3, #0]
 80487e0:	681b      	ldr	r3, [r3, #0]
 80487e2:	f003 0320 	and.w	r3, r3, #32
 80487e6:	2b00      	cmp	r3, #0
 80487e8:	d10b      	bne.n	8048802 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80487ea:	687b      	ldr	r3, [r7, #4]
 80487ec:	681b      	ldr	r3, [r3, #0]
 80487ee:	681a      	ldr	r2, [r3, #0]
 80487f0:	687b      	ldr	r3, [r7, #4]
 80487f2:	681b      	ldr	r3, [r3, #0]
 80487f4:	f022 020a 	bic.w	r2, r2, #10
 80487f8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80487fa:	687b      	ldr	r3, [r7, #4]
 80487fc:	2201      	movs	r2, #1
 80487fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8048802:	687b      	ldr	r3, [r7, #4]
 8048804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048806:	f003 021c 	and.w	r2, r3, #28
 804880a:	687b      	ldr	r3, [r7, #4]
 804880c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804880e:	2102      	movs	r1, #2
 8048810:	fa01 f202 	lsl.w	r2, r1, r2
 8048814:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8048816:	687b      	ldr	r3, [r7, #4]
 8048818:	2200      	movs	r2, #0
 804881a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 804881e:	687b      	ldr	r3, [r7, #4]
 8048820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048822:	2b00      	cmp	r3, #0
 8048824:	d03b      	beq.n	804889e <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8048826:	687b      	ldr	r3, [r7, #4]
 8048828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804882a:	6878      	ldr	r0, [r7, #4]
 804882c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 804882e:	e036      	b.n	804889e <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8048830:	687b      	ldr	r3, [r7, #4]
 8048832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048834:	f003 031c 	and.w	r3, r3, #28
 8048838:	2208      	movs	r2, #8
 804883a:	409a      	lsls	r2, r3
 804883c:	68fb      	ldr	r3, [r7, #12]
 804883e:	4013      	ands	r3, r2
 8048840:	2b00      	cmp	r3, #0
 8048842:	d02e      	beq.n	80488a2 <HAL_DMA_IRQHandler+0x1f8>
 8048844:	68bb      	ldr	r3, [r7, #8]
 8048846:	f003 0308 	and.w	r3, r3, #8
 804884a:	2b00      	cmp	r3, #0
 804884c:	d029      	beq.n	80488a2 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 804884e:	687b      	ldr	r3, [r7, #4]
 8048850:	681b      	ldr	r3, [r3, #0]
 8048852:	681a      	ldr	r2, [r3, #0]
 8048854:	687b      	ldr	r3, [r7, #4]
 8048856:	681b      	ldr	r3, [r3, #0]
 8048858:	f022 020e 	bic.w	r2, r2, #14
 804885c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 804885e:	687b      	ldr	r3, [r7, #4]
 8048860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048862:	f003 021c 	and.w	r2, r3, #28
 8048866:	687b      	ldr	r3, [r7, #4]
 8048868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804886a:	2101      	movs	r1, #1
 804886c:	fa01 f202 	lsl.w	r2, r1, r2
 8048870:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8048872:	687b      	ldr	r3, [r7, #4]
 8048874:	2201      	movs	r2, #1
 8048876:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8048878:	687b      	ldr	r3, [r7, #4]
 804887a:	2201      	movs	r2, #1
 804887c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8048880:	687b      	ldr	r3, [r7, #4]
 8048882:	2200      	movs	r2, #0
 8048884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8048888:	687b      	ldr	r3, [r7, #4]
 804888a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804888c:	2b00      	cmp	r3, #0
 804888e:	d008      	beq.n	80488a2 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8048890:	687b      	ldr	r3, [r7, #4]
 8048892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8048894:	6878      	ldr	r0, [r7, #4]
 8048896:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8048898:	e002      	b.n	80488a0 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 804889a:	bf00      	nop
 804889c:	e000      	b.n	80488a0 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 804889e:	bf00      	nop
  return;
 80488a0:	bf00      	nop
 80488a2:	bf00      	nop
}
 80488a4:	3710      	adds	r7, #16
 80488a6:	46bd      	mov	sp, r7
 80488a8:	bd80      	pop	{r7, pc}

080488aa <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80488aa:	b480      	push	{r7}
 80488ac:	b083      	sub	sp, #12
 80488ae:	af00      	add	r7, sp, #0
 80488b0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80488b2:	687b      	ldr	r3, [r7, #4]
 80488b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80488b8:	b2db      	uxtb	r3, r3
}
 80488ba:	4618      	mov	r0, r3
 80488bc:	370c      	adds	r7, #12
 80488be:	46bd      	mov	sp, r7
 80488c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80488c4:	4770      	bx	lr

080488c6 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80488c6:	b480      	push	{r7}
 80488c8:	b085      	sub	sp, #20
 80488ca:	af00      	add	r7, sp, #0
 80488cc:	6078      	str	r0, [r7, #4]
 80488ce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80488d0:	2300      	movs	r3, #0
 80488d2:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80488d4:	687b      	ldr	r3, [r7, #4]
 80488d6:	2b00      	cmp	r3, #0
 80488d8:	d103      	bne.n	80488e2 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80488da:	2301      	movs	r3, #1
 80488dc:	72fb      	strb	r3, [r7, #11]
    return status;
 80488de:	7afb      	ldrb	r3, [r7, #11]
 80488e0:	e01b      	b.n	804891a <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80488e2:	687b      	ldr	r3, [r7, #4]
 80488e4:	681b      	ldr	r3, [r3, #0]
 80488e6:	681b      	ldr	r3, [r3, #0]
 80488e8:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80488ea:	683b      	ldr	r3, [r7, #0]
 80488ec:	f003 0310 	and.w	r3, r3, #16
 80488f0:	2b00      	cmp	r3, #0
 80488f2:	d00d      	beq.n	8048910 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80488f4:	683b      	ldr	r3, [r7, #0]
 80488f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80488fa:	2b00      	cmp	r3, #0
 80488fc:	d004      	beq.n	8048908 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80488fe:	68fb      	ldr	r3, [r7, #12]
 8048900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8048904:	60fb      	str	r3, [r7, #12]
 8048906:	e003      	b.n	8048910 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8048908:	68fb      	ldr	r3, [r7, #12]
 804890a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 804890e:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8048910:	687b      	ldr	r3, [r7, #4]
 8048912:	681b      	ldr	r3, [r3, #0]
 8048914:	68fa      	ldr	r2, [r7, #12]
 8048916:	601a      	str	r2, [r3, #0]

  return status;
 8048918:	7afb      	ldrb	r3, [r7, #11]
}
 804891a:	4618      	mov	r0, r3
 804891c:	3714      	adds	r7, #20
 804891e:	46bd      	mov	sp, r7
 8048920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048924:	4770      	bx	lr
	...

08048928 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8048928:	b480      	push	{r7}
 804892a:	b085      	sub	sp, #20
 804892c:	af00      	add	r7, sp, #0
 804892e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8048930:	687b      	ldr	r3, [r7, #4]
 8048932:	681b      	ldr	r3, [r3, #0]
 8048934:	461a      	mov	r2, r3
 8048936:	4b17      	ldr	r3, [pc, #92]	; (8048994 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8048938:	429a      	cmp	r2, r3
 804893a:	d80a      	bhi.n	8048952 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 804893c:	687b      	ldr	r3, [r7, #4]
 804893e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048940:	089b      	lsrs	r3, r3, #2
 8048942:	009b      	lsls	r3, r3, #2
 8048944:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8048948:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 804894c:	687a      	ldr	r2, [r7, #4]
 804894e:	6513      	str	r3, [r2, #80]	; 0x50
 8048950:	e007      	b.n	8048962 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8048952:	687b      	ldr	r3, [r7, #4]
 8048954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048956:	089b      	lsrs	r3, r3, #2
 8048958:	009a      	lsls	r2, r3, #2
 804895a:	4b0f      	ldr	r3, [pc, #60]	; (8048998 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 804895c:	4413      	add	r3, r2
 804895e:	687a      	ldr	r2, [r7, #4]
 8048960:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8048962:	687b      	ldr	r3, [r7, #4]
 8048964:	681b      	ldr	r3, [r3, #0]
 8048966:	b2db      	uxtb	r3, r3
 8048968:	3b08      	subs	r3, #8
 804896a:	4a0c      	ldr	r2, [pc, #48]	; (804899c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 804896c:	fba2 2303 	umull	r2, r3, r2, r3
 8048970:	091b      	lsrs	r3, r3, #4
 8048972:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8048974:	687b      	ldr	r3, [r7, #4]
 8048976:	4a0a      	ldr	r2, [pc, #40]	; (80489a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8048978:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 804897a:	68fb      	ldr	r3, [r7, #12]
 804897c:	f003 031f 	and.w	r3, r3, #31
 8048980:	2201      	movs	r2, #1
 8048982:	409a      	lsls	r2, r3
 8048984:	687b      	ldr	r3, [r7, #4]
 8048986:	659a      	str	r2, [r3, #88]	; 0x58
}
 8048988:	bf00      	nop
 804898a:	3714      	adds	r7, #20
 804898c:	46bd      	mov	sp, r7
 804898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048992:	4770      	bx	lr
 8048994:	40020407 	.word	0x40020407
 8048998:	40020820 	.word	0x40020820
 804899c:	cccccccd 	.word	0xcccccccd
 80489a0:	40020880 	.word	0x40020880

080489a4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80489a4:	b480      	push	{r7}
 80489a6:	b085      	sub	sp, #20
 80489a8:	af00      	add	r7, sp, #0
 80489aa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80489ac:	687b      	ldr	r3, [r7, #4]
 80489ae:	685b      	ldr	r3, [r3, #4]
 80489b0:	b2db      	uxtb	r3, r3
 80489b2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80489b4:	68fa      	ldr	r2, [r7, #12]
 80489b6:	4b0b      	ldr	r3, [pc, #44]	; (80489e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80489b8:	4413      	add	r3, r2
 80489ba:	009b      	lsls	r3, r3, #2
 80489bc:	461a      	mov	r2, r3
 80489be:	687b      	ldr	r3, [r7, #4]
 80489c0:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80489c2:	687b      	ldr	r3, [r7, #4]
 80489c4:	4a08      	ldr	r2, [pc, #32]	; (80489e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80489c6:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80489c8:	68fb      	ldr	r3, [r7, #12]
 80489ca:	3b01      	subs	r3, #1
 80489cc:	f003 0303 	and.w	r3, r3, #3
 80489d0:	2201      	movs	r2, #1
 80489d2:	409a      	lsls	r2, r3
 80489d4:	687b      	ldr	r3, [r7, #4]
 80489d6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80489d8:	bf00      	nop
 80489da:	3714      	adds	r7, #20
 80489dc:	46bd      	mov	sp, r7
 80489de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489e2:	4770      	bx	lr
 80489e4:	1000823f 	.word	0x1000823f
 80489e8:	40020940 	.word	0x40020940

080489ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80489ec:	b480      	push	{r7}
 80489ee:	b087      	sub	sp, #28
 80489f0:	af00      	add	r7, sp, #0
 80489f2:	6078      	str	r0, [r7, #4]
 80489f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80489f6:	2300      	movs	r3, #0
 80489f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80489fa:	e158      	b.n	8048cae <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80489fc:	683b      	ldr	r3, [r7, #0]
 80489fe:	681a      	ldr	r2, [r3, #0]
 8048a00:	2101      	movs	r1, #1
 8048a02:	697b      	ldr	r3, [r7, #20]
 8048a04:	fa01 f303 	lsl.w	r3, r1, r3
 8048a08:	4013      	ands	r3, r2
 8048a0a:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8048a0c:	68fb      	ldr	r3, [r7, #12]
 8048a0e:	2b00      	cmp	r3, #0
 8048a10:	f000 814a 	beq.w	8048ca8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8048a14:	683b      	ldr	r3, [r7, #0]
 8048a16:	685b      	ldr	r3, [r3, #4]
 8048a18:	2b01      	cmp	r3, #1
 8048a1a:	d00b      	beq.n	8048a34 <HAL_GPIO_Init+0x48>
 8048a1c:	683b      	ldr	r3, [r7, #0]
 8048a1e:	685b      	ldr	r3, [r3, #4]
 8048a20:	2b02      	cmp	r3, #2
 8048a22:	d007      	beq.n	8048a34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8048a24:	683b      	ldr	r3, [r7, #0]
 8048a26:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8048a28:	2b11      	cmp	r3, #17
 8048a2a:	d003      	beq.n	8048a34 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8048a2c:	683b      	ldr	r3, [r7, #0]
 8048a2e:	685b      	ldr	r3, [r3, #4]
 8048a30:	2b12      	cmp	r3, #18
 8048a32:	d130      	bne.n	8048a96 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8048a34:	687b      	ldr	r3, [r7, #4]
 8048a36:	689b      	ldr	r3, [r3, #8]
 8048a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8048a3a:	697b      	ldr	r3, [r7, #20]
 8048a3c:	005b      	lsls	r3, r3, #1
 8048a3e:	2203      	movs	r2, #3
 8048a40:	fa02 f303 	lsl.w	r3, r2, r3
 8048a44:	43db      	mvns	r3, r3
 8048a46:	693a      	ldr	r2, [r7, #16]
 8048a48:	4013      	ands	r3, r2
 8048a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8048a4c:	683b      	ldr	r3, [r7, #0]
 8048a4e:	68da      	ldr	r2, [r3, #12]
 8048a50:	697b      	ldr	r3, [r7, #20]
 8048a52:	005b      	lsls	r3, r3, #1
 8048a54:	fa02 f303 	lsl.w	r3, r2, r3
 8048a58:	693a      	ldr	r2, [r7, #16]
 8048a5a:	4313      	orrs	r3, r2
 8048a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8048a5e:	687b      	ldr	r3, [r7, #4]
 8048a60:	693a      	ldr	r2, [r7, #16]
 8048a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8048a64:	687b      	ldr	r3, [r7, #4]
 8048a66:	685b      	ldr	r3, [r3, #4]
 8048a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8048a6a:	2201      	movs	r2, #1
 8048a6c:	697b      	ldr	r3, [r7, #20]
 8048a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8048a72:	43db      	mvns	r3, r3
 8048a74:	693a      	ldr	r2, [r7, #16]
 8048a76:	4013      	ands	r3, r2
 8048a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8048a7a:	683b      	ldr	r3, [r7, #0]
 8048a7c:	685b      	ldr	r3, [r3, #4]
 8048a7e:	091b      	lsrs	r3, r3, #4
 8048a80:	f003 0201 	and.w	r2, r3, #1
 8048a84:	697b      	ldr	r3, [r7, #20]
 8048a86:	fa02 f303 	lsl.w	r3, r2, r3
 8048a8a:	693a      	ldr	r2, [r7, #16]
 8048a8c:	4313      	orrs	r3, r2
 8048a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8048a90:	687b      	ldr	r3, [r7, #4]
 8048a92:	693a      	ldr	r2, [r7, #16]
 8048a94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8048a96:	687b      	ldr	r3, [r7, #4]
 8048a98:	68db      	ldr	r3, [r3, #12]
 8048a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8048a9c:	697b      	ldr	r3, [r7, #20]
 8048a9e:	005b      	lsls	r3, r3, #1
 8048aa0:	2203      	movs	r2, #3
 8048aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8048aa6:	43db      	mvns	r3, r3
 8048aa8:	693a      	ldr	r2, [r7, #16]
 8048aaa:	4013      	ands	r3, r2
 8048aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8048aae:	683b      	ldr	r3, [r7, #0]
 8048ab0:	689a      	ldr	r2, [r3, #8]
 8048ab2:	697b      	ldr	r3, [r7, #20]
 8048ab4:	005b      	lsls	r3, r3, #1
 8048ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8048aba:	693a      	ldr	r2, [r7, #16]
 8048abc:	4313      	orrs	r3, r2
 8048abe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8048ac0:	687b      	ldr	r3, [r7, #4]
 8048ac2:	693a      	ldr	r2, [r7, #16]
 8048ac4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8048ac6:	683b      	ldr	r3, [r7, #0]
 8048ac8:	685b      	ldr	r3, [r3, #4]
 8048aca:	2b02      	cmp	r3, #2
 8048acc:	d003      	beq.n	8048ad6 <HAL_GPIO_Init+0xea>
 8048ace:	683b      	ldr	r3, [r7, #0]
 8048ad0:	685b      	ldr	r3, [r3, #4]
 8048ad2:	2b12      	cmp	r3, #18
 8048ad4:	d123      	bne.n	8048b1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8048ad6:	697b      	ldr	r3, [r7, #20]
 8048ad8:	08da      	lsrs	r2, r3, #3
 8048ada:	687b      	ldr	r3, [r7, #4]
 8048adc:	3208      	adds	r2, #8
 8048ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8048ae4:	697b      	ldr	r3, [r7, #20]
 8048ae6:	f003 0307 	and.w	r3, r3, #7
 8048aea:	009b      	lsls	r3, r3, #2
 8048aec:	220f      	movs	r2, #15
 8048aee:	fa02 f303 	lsl.w	r3, r2, r3
 8048af2:	43db      	mvns	r3, r3
 8048af4:	693a      	ldr	r2, [r7, #16]
 8048af6:	4013      	ands	r3, r2
 8048af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8048afa:	683b      	ldr	r3, [r7, #0]
 8048afc:	691a      	ldr	r2, [r3, #16]
 8048afe:	697b      	ldr	r3, [r7, #20]
 8048b00:	f003 0307 	and.w	r3, r3, #7
 8048b04:	009b      	lsls	r3, r3, #2
 8048b06:	fa02 f303 	lsl.w	r3, r2, r3
 8048b0a:	693a      	ldr	r2, [r7, #16]
 8048b0c:	4313      	orrs	r3, r2
 8048b0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8048b10:	697b      	ldr	r3, [r7, #20]
 8048b12:	08da      	lsrs	r2, r3, #3
 8048b14:	687b      	ldr	r3, [r7, #4]
 8048b16:	3208      	adds	r2, #8
 8048b18:	6939      	ldr	r1, [r7, #16]
 8048b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8048b1e:	687b      	ldr	r3, [r7, #4]
 8048b20:	681b      	ldr	r3, [r3, #0]
 8048b22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8048b24:	697b      	ldr	r3, [r7, #20]
 8048b26:	005b      	lsls	r3, r3, #1
 8048b28:	2203      	movs	r2, #3
 8048b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8048b2e:	43db      	mvns	r3, r3
 8048b30:	693a      	ldr	r2, [r7, #16]
 8048b32:	4013      	ands	r3, r2
 8048b34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8048b36:	683b      	ldr	r3, [r7, #0]
 8048b38:	685b      	ldr	r3, [r3, #4]
 8048b3a:	f003 0203 	and.w	r2, r3, #3
 8048b3e:	697b      	ldr	r3, [r7, #20]
 8048b40:	005b      	lsls	r3, r3, #1
 8048b42:	fa02 f303 	lsl.w	r3, r2, r3
 8048b46:	693a      	ldr	r2, [r7, #16]
 8048b48:	4313      	orrs	r3, r2
 8048b4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8048b4c:	687b      	ldr	r3, [r7, #4]
 8048b4e:	693a      	ldr	r2, [r7, #16]
 8048b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8048b52:	683b      	ldr	r3, [r7, #0]
 8048b54:	685b      	ldr	r3, [r3, #4]
 8048b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8048b5a:	2b00      	cmp	r3, #0
 8048b5c:	f000 80a4 	beq.w	8048ca8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8048b60:	4a5a      	ldr	r2, [pc, #360]	; (8048ccc <HAL_GPIO_Init+0x2e0>)
 8048b62:	697b      	ldr	r3, [r7, #20]
 8048b64:	089b      	lsrs	r3, r3, #2
 8048b66:	3318      	adds	r3, #24
 8048b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8048b6c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8048b6e:	697b      	ldr	r3, [r7, #20]
 8048b70:	f003 0303 	and.w	r3, r3, #3
 8048b74:	00db      	lsls	r3, r3, #3
 8048b76:	220f      	movs	r2, #15
 8048b78:	fa02 f303 	lsl.w	r3, r2, r3
 8048b7c:	43db      	mvns	r3, r3
 8048b7e:	693a      	ldr	r2, [r7, #16]
 8048b80:	4013      	ands	r3, r2
 8048b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8048b84:	687b      	ldr	r3, [r7, #4]
 8048b86:	4a52      	ldr	r2, [pc, #328]	; (8048cd0 <HAL_GPIO_Init+0x2e4>)
 8048b88:	4293      	cmp	r3, r2
 8048b8a:	d025      	beq.n	8048bd8 <HAL_GPIO_Init+0x1ec>
 8048b8c:	687b      	ldr	r3, [r7, #4]
 8048b8e:	4a51      	ldr	r2, [pc, #324]	; (8048cd4 <HAL_GPIO_Init+0x2e8>)
 8048b90:	4293      	cmp	r3, r2
 8048b92:	d01f      	beq.n	8048bd4 <HAL_GPIO_Init+0x1e8>
 8048b94:	687b      	ldr	r3, [r7, #4]
 8048b96:	4a50      	ldr	r2, [pc, #320]	; (8048cd8 <HAL_GPIO_Init+0x2ec>)
 8048b98:	4293      	cmp	r3, r2
 8048b9a:	d019      	beq.n	8048bd0 <HAL_GPIO_Init+0x1e4>
 8048b9c:	687b      	ldr	r3, [r7, #4]
 8048b9e:	4a4f      	ldr	r2, [pc, #316]	; (8048cdc <HAL_GPIO_Init+0x2f0>)
 8048ba0:	4293      	cmp	r3, r2
 8048ba2:	d013      	beq.n	8048bcc <HAL_GPIO_Init+0x1e0>
 8048ba4:	687b      	ldr	r3, [r7, #4]
 8048ba6:	4a4e      	ldr	r2, [pc, #312]	; (8048ce0 <HAL_GPIO_Init+0x2f4>)
 8048ba8:	4293      	cmp	r3, r2
 8048baa:	d00d      	beq.n	8048bc8 <HAL_GPIO_Init+0x1dc>
 8048bac:	687b      	ldr	r3, [r7, #4]
 8048bae:	4a4d      	ldr	r2, [pc, #308]	; (8048ce4 <HAL_GPIO_Init+0x2f8>)
 8048bb0:	4293      	cmp	r3, r2
 8048bb2:	d007      	beq.n	8048bc4 <HAL_GPIO_Init+0x1d8>
 8048bb4:	687b      	ldr	r3, [r7, #4]
 8048bb6:	4a4c      	ldr	r2, [pc, #304]	; (8048ce8 <HAL_GPIO_Init+0x2fc>)
 8048bb8:	4293      	cmp	r3, r2
 8048bba:	d101      	bne.n	8048bc0 <HAL_GPIO_Init+0x1d4>
 8048bbc:	2306      	movs	r3, #6
 8048bbe:	e00c      	b.n	8048bda <HAL_GPIO_Init+0x1ee>
 8048bc0:	2307      	movs	r3, #7
 8048bc2:	e00a      	b.n	8048bda <HAL_GPIO_Init+0x1ee>
 8048bc4:	2305      	movs	r3, #5
 8048bc6:	e008      	b.n	8048bda <HAL_GPIO_Init+0x1ee>
 8048bc8:	2304      	movs	r3, #4
 8048bca:	e006      	b.n	8048bda <HAL_GPIO_Init+0x1ee>
 8048bcc:	2303      	movs	r3, #3
 8048bce:	e004      	b.n	8048bda <HAL_GPIO_Init+0x1ee>
 8048bd0:	2302      	movs	r3, #2
 8048bd2:	e002      	b.n	8048bda <HAL_GPIO_Init+0x1ee>
 8048bd4:	2301      	movs	r3, #1
 8048bd6:	e000      	b.n	8048bda <HAL_GPIO_Init+0x1ee>
 8048bd8:	2300      	movs	r3, #0
 8048bda:	697a      	ldr	r2, [r7, #20]
 8048bdc:	f002 0203 	and.w	r2, r2, #3
 8048be0:	00d2      	lsls	r2, r2, #3
 8048be2:	4093      	lsls	r3, r2
 8048be4:	693a      	ldr	r2, [r7, #16]
 8048be6:	4313      	orrs	r3, r2
 8048be8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8048bea:	4938      	ldr	r1, [pc, #224]	; (8048ccc <HAL_GPIO_Init+0x2e0>)
 8048bec:	697b      	ldr	r3, [r7, #20]
 8048bee:	089b      	lsrs	r3, r3, #2
 8048bf0:	3318      	adds	r3, #24
 8048bf2:	693a      	ldr	r2, [r7, #16]
 8048bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8048bf8:	4b34      	ldr	r3, [pc, #208]	; (8048ccc <HAL_GPIO_Init+0x2e0>)
 8048bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8048bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8048c00:	68fb      	ldr	r3, [r7, #12]
 8048c02:	43db      	mvns	r3, r3
 8048c04:	693a      	ldr	r2, [r7, #16]
 8048c06:	4013      	ands	r3, r2
 8048c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8048c0a:	683b      	ldr	r3, [r7, #0]
 8048c0c:	685b      	ldr	r3, [r3, #4]
 8048c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8048c12:	2b00      	cmp	r3, #0
 8048c14:	d003      	beq.n	8048c1e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8048c16:	693a      	ldr	r2, [r7, #16]
 8048c18:	68fb      	ldr	r3, [r7, #12]
 8048c1a:	4313      	orrs	r3, r2
 8048c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8048c1e:	4a2b      	ldr	r2, [pc, #172]	; (8048ccc <HAL_GPIO_Init+0x2e0>)
 8048c20:	693b      	ldr	r3, [r7, #16]
 8048c22:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8048c26:	4b29      	ldr	r3, [pc, #164]	; (8048ccc <HAL_GPIO_Init+0x2e0>)
 8048c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8048c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8048c2e:	68fb      	ldr	r3, [r7, #12]
 8048c30:	43db      	mvns	r3, r3
 8048c32:	693a      	ldr	r2, [r7, #16]
 8048c34:	4013      	ands	r3, r2
 8048c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8048c38:	683b      	ldr	r3, [r7, #0]
 8048c3a:	685b      	ldr	r3, [r3, #4]
 8048c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8048c40:	2b00      	cmp	r3, #0
 8048c42:	d003      	beq.n	8048c4c <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8048c44:	693a      	ldr	r2, [r7, #16]
 8048c46:	68fb      	ldr	r3, [r7, #12]
 8048c48:	4313      	orrs	r3, r2
 8048c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8048c4c:	4a1f      	ldr	r2, [pc, #124]	; (8048ccc <HAL_GPIO_Init+0x2e0>)
 8048c4e:	693b      	ldr	r3, [r7, #16]
 8048c50:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8048c54:	4b1d      	ldr	r3, [pc, #116]	; (8048ccc <HAL_GPIO_Init+0x2e0>)
 8048c56:	681b      	ldr	r3, [r3, #0]
 8048c58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8048c5a:	68fb      	ldr	r3, [r7, #12]
 8048c5c:	43db      	mvns	r3, r3
 8048c5e:	693a      	ldr	r2, [r7, #16]
 8048c60:	4013      	ands	r3, r2
 8048c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8048c64:	683b      	ldr	r3, [r7, #0]
 8048c66:	685b      	ldr	r3, [r3, #4]
 8048c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8048c6c:	2b00      	cmp	r3, #0
 8048c6e:	d003      	beq.n	8048c78 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8048c70:	693a      	ldr	r2, [r7, #16]
 8048c72:	68fb      	ldr	r3, [r7, #12]
 8048c74:	4313      	orrs	r3, r2
 8048c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8048c78:	4a14      	ldr	r2, [pc, #80]	; (8048ccc <HAL_GPIO_Init+0x2e0>)
 8048c7a:	693b      	ldr	r3, [r7, #16]
 8048c7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8048c7e:	4b13      	ldr	r3, [pc, #76]	; (8048ccc <HAL_GPIO_Init+0x2e0>)
 8048c80:	685b      	ldr	r3, [r3, #4]
 8048c82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8048c84:	68fb      	ldr	r3, [r7, #12]
 8048c86:	43db      	mvns	r3, r3
 8048c88:	693a      	ldr	r2, [r7, #16]
 8048c8a:	4013      	ands	r3, r2
 8048c8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8048c8e:	683b      	ldr	r3, [r7, #0]
 8048c90:	685b      	ldr	r3, [r3, #4]
 8048c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8048c96:	2b00      	cmp	r3, #0
 8048c98:	d003      	beq.n	8048ca2 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8048c9a:	693a      	ldr	r2, [r7, #16]
 8048c9c:	68fb      	ldr	r3, [r7, #12]
 8048c9e:	4313      	orrs	r3, r2
 8048ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8048ca2:	4a0a      	ldr	r2, [pc, #40]	; (8048ccc <HAL_GPIO_Init+0x2e0>)
 8048ca4:	693b      	ldr	r3, [r7, #16]
 8048ca6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8048ca8:	697b      	ldr	r3, [r7, #20]
 8048caa:	3301      	adds	r3, #1
 8048cac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8048cae:	683b      	ldr	r3, [r7, #0]
 8048cb0:	681a      	ldr	r2, [r3, #0]
 8048cb2:	697b      	ldr	r3, [r7, #20]
 8048cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8048cb8:	2b00      	cmp	r3, #0
 8048cba:	f47f ae9f 	bne.w	80489fc <HAL_GPIO_Init+0x10>
  }
}
 8048cbe:	bf00      	nop
 8048cc0:	bf00      	nop
 8048cc2:	371c      	adds	r7, #28
 8048cc4:	46bd      	mov	sp, r7
 8048cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048cca:	4770      	bx	lr
 8048ccc:	4002f400 	.word	0x4002f400
 8048cd0:	42020000 	.word	0x42020000
 8048cd4:	42020400 	.word	0x42020400
 8048cd8:	42020800 	.word	0x42020800
 8048cdc:	42020c00 	.word	0x42020c00
 8048ce0:	42021000 	.word	0x42021000
 8048ce4:	42021400 	.word	0x42021400
 8048ce8:	42021800 	.word	0x42021800

08048cec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8048cec:	b480      	push	{r7}
 8048cee:	b087      	sub	sp, #28
 8048cf0:	af00      	add	r7, sp, #0
 8048cf2:	6078      	str	r0, [r7, #4]
 8048cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8048cf6:	2300      	movs	r3, #0
 8048cf8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8048cfa:	e0c7      	b.n	8048e8c <HAL_GPIO_DeInit+0x1a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8048cfc:	2201      	movs	r2, #1
 8048cfe:	697b      	ldr	r3, [r7, #20]
 8048d00:	fa02 f303 	lsl.w	r3, r2, r3
 8048d04:	683a      	ldr	r2, [r7, #0]
 8048d06:	4013      	ands	r3, r2
 8048d08:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8048d0a:	693b      	ldr	r3, [r7, #16]
 8048d0c:	2b00      	cmp	r3, #0
 8048d0e:	f000 80ba 	beq.w	8048e86 <HAL_GPIO_DeInit+0x19a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      temp = EXTI->EXTICR[position >> 2U];
 8048d12:	4a65      	ldr	r2, [pc, #404]	; (8048ea8 <HAL_GPIO_DeInit+0x1bc>)
 8048d14:	697b      	ldr	r3, [r7, #20]
 8048d16:	089b      	lsrs	r3, r3, #2
 8048d18:	3318      	adds	r3, #24
 8048d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8048d1e:	60fb      	str	r3, [r7, #12]
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8048d20:	697b      	ldr	r3, [r7, #20]
 8048d22:	f003 0303 	and.w	r3, r3, #3
 8048d26:	00db      	lsls	r3, r3, #3
 8048d28:	220f      	movs	r2, #15
 8048d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8048d2e:	68fa      	ldr	r2, [r7, #12]
 8048d30:	4013      	ands	r3, r2
 8048d32:	60fb      	str	r3, [r7, #12]
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8048d34:	687b      	ldr	r3, [r7, #4]
 8048d36:	4a5d      	ldr	r2, [pc, #372]	; (8048eac <HAL_GPIO_DeInit+0x1c0>)
 8048d38:	4293      	cmp	r3, r2
 8048d3a:	d025      	beq.n	8048d88 <HAL_GPIO_DeInit+0x9c>
 8048d3c:	687b      	ldr	r3, [r7, #4]
 8048d3e:	4a5c      	ldr	r2, [pc, #368]	; (8048eb0 <HAL_GPIO_DeInit+0x1c4>)
 8048d40:	4293      	cmp	r3, r2
 8048d42:	d01f      	beq.n	8048d84 <HAL_GPIO_DeInit+0x98>
 8048d44:	687b      	ldr	r3, [r7, #4]
 8048d46:	4a5b      	ldr	r2, [pc, #364]	; (8048eb4 <HAL_GPIO_DeInit+0x1c8>)
 8048d48:	4293      	cmp	r3, r2
 8048d4a:	d019      	beq.n	8048d80 <HAL_GPIO_DeInit+0x94>
 8048d4c:	687b      	ldr	r3, [r7, #4]
 8048d4e:	4a5a      	ldr	r2, [pc, #360]	; (8048eb8 <HAL_GPIO_DeInit+0x1cc>)
 8048d50:	4293      	cmp	r3, r2
 8048d52:	d013      	beq.n	8048d7c <HAL_GPIO_DeInit+0x90>
 8048d54:	687b      	ldr	r3, [r7, #4]
 8048d56:	4a59      	ldr	r2, [pc, #356]	; (8048ebc <HAL_GPIO_DeInit+0x1d0>)
 8048d58:	4293      	cmp	r3, r2
 8048d5a:	d00d      	beq.n	8048d78 <HAL_GPIO_DeInit+0x8c>
 8048d5c:	687b      	ldr	r3, [r7, #4]
 8048d5e:	4a58      	ldr	r2, [pc, #352]	; (8048ec0 <HAL_GPIO_DeInit+0x1d4>)
 8048d60:	4293      	cmp	r3, r2
 8048d62:	d007      	beq.n	8048d74 <HAL_GPIO_DeInit+0x88>
 8048d64:	687b      	ldr	r3, [r7, #4]
 8048d66:	4a57      	ldr	r2, [pc, #348]	; (8048ec4 <HAL_GPIO_DeInit+0x1d8>)
 8048d68:	4293      	cmp	r3, r2
 8048d6a:	d101      	bne.n	8048d70 <HAL_GPIO_DeInit+0x84>
 8048d6c:	2306      	movs	r3, #6
 8048d6e:	e00c      	b.n	8048d8a <HAL_GPIO_DeInit+0x9e>
 8048d70:	2307      	movs	r3, #7
 8048d72:	e00a      	b.n	8048d8a <HAL_GPIO_DeInit+0x9e>
 8048d74:	2305      	movs	r3, #5
 8048d76:	e008      	b.n	8048d8a <HAL_GPIO_DeInit+0x9e>
 8048d78:	2304      	movs	r3, #4
 8048d7a:	e006      	b.n	8048d8a <HAL_GPIO_DeInit+0x9e>
 8048d7c:	2303      	movs	r3, #3
 8048d7e:	e004      	b.n	8048d8a <HAL_GPIO_DeInit+0x9e>
 8048d80:	2302      	movs	r3, #2
 8048d82:	e002      	b.n	8048d8a <HAL_GPIO_DeInit+0x9e>
 8048d84:	2301      	movs	r3, #1
 8048d86:	e000      	b.n	8048d8a <HAL_GPIO_DeInit+0x9e>
 8048d88:	2300      	movs	r3, #0
 8048d8a:	697a      	ldr	r2, [r7, #20]
 8048d8c:	f002 0203 	and.w	r2, r2, #3
 8048d90:	00d2      	lsls	r2, r2, #3
 8048d92:	4093      	lsls	r3, r2
 8048d94:	68fa      	ldr	r2, [r7, #12]
 8048d96:	429a      	cmp	r2, r3
 8048d98:	d136      	bne.n	8048e08 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8048d9a:	4b43      	ldr	r3, [pc, #268]	; (8048ea8 <HAL_GPIO_DeInit+0x1bc>)
 8048d9c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8048da0:	693b      	ldr	r3, [r7, #16]
 8048da2:	43db      	mvns	r3, r3
 8048da4:	4940      	ldr	r1, [pc, #256]	; (8048ea8 <HAL_GPIO_DeInit+0x1bc>)
 8048da6:	4013      	ands	r3, r2
 8048da8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8048dac:	4b3e      	ldr	r3, [pc, #248]	; (8048ea8 <HAL_GPIO_DeInit+0x1bc>)
 8048dae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8048db2:	693b      	ldr	r3, [r7, #16]
 8048db4:	43db      	mvns	r3, r3
 8048db6:	493c      	ldr	r1, [pc, #240]	; (8048ea8 <HAL_GPIO_DeInit+0x1bc>)
 8048db8:	4013      	ands	r3, r2
 8048dba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8048dbe:	4b3a      	ldr	r3, [pc, #232]	; (8048ea8 <HAL_GPIO_DeInit+0x1bc>)
 8048dc0:	681a      	ldr	r2, [r3, #0]
 8048dc2:	693b      	ldr	r3, [r7, #16]
 8048dc4:	43db      	mvns	r3, r3
 8048dc6:	4938      	ldr	r1, [pc, #224]	; (8048ea8 <HAL_GPIO_DeInit+0x1bc>)
 8048dc8:	4013      	ands	r3, r2
 8048dca:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8048dcc:	4b36      	ldr	r3, [pc, #216]	; (8048ea8 <HAL_GPIO_DeInit+0x1bc>)
 8048dce:	685a      	ldr	r2, [r3, #4]
 8048dd0:	693b      	ldr	r3, [r7, #16]
 8048dd2:	43db      	mvns	r3, r3
 8048dd4:	4934      	ldr	r1, [pc, #208]	; (8048ea8 <HAL_GPIO_DeInit+0x1bc>)
 8048dd6:	4013      	ands	r3, r2
 8048dd8:	604b      	str	r3, [r1, #4]

        temp = (0x0FUL) << (8U * (position & 0x03U));
 8048dda:	697b      	ldr	r3, [r7, #20]
 8048ddc:	f003 0303 	and.w	r3, r3, #3
 8048de0:	00db      	lsls	r3, r3, #3
 8048de2:	220f      	movs	r2, #15
 8048de4:	fa02 f303 	lsl.w	r3, r2, r3
 8048de8:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~temp;
 8048dea:	4a2f      	ldr	r2, [pc, #188]	; (8048ea8 <HAL_GPIO_DeInit+0x1bc>)
 8048dec:	697b      	ldr	r3, [r7, #20]
 8048dee:	089b      	lsrs	r3, r3, #2
 8048df0:	3318      	adds	r3, #24
 8048df2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8048df6:	68fb      	ldr	r3, [r7, #12]
 8048df8:	43da      	mvns	r2, r3
 8048dfa:	482b      	ldr	r0, [pc, #172]	; (8048ea8 <HAL_GPIO_DeInit+0x1bc>)
 8048dfc:	697b      	ldr	r3, [r7, #20]
 8048dfe:	089b      	lsrs	r3, r3, #2
 8048e00:	400a      	ands	r2, r1
 8048e02:	3318      	adds	r3, #24
 8048e04:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8048e08:	687b      	ldr	r3, [r7, #4]
 8048e0a:	681a      	ldr	r2, [r3, #0]
 8048e0c:	697b      	ldr	r3, [r7, #20]
 8048e0e:	005b      	lsls	r3, r3, #1
 8048e10:	2103      	movs	r1, #3
 8048e12:	fa01 f303 	lsl.w	r3, r1, r3
 8048e16:	431a      	orrs	r2, r3
 8048e18:	687b      	ldr	r3, [r7, #4]
 8048e1a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8048e1c:	697b      	ldr	r3, [r7, #20]
 8048e1e:	08da      	lsrs	r2, r3, #3
 8048e20:	687b      	ldr	r3, [r7, #4]
 8048e22:	3208      	adds	r2, #8
 8048e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8048e28:	697b      	ldr	r3, [r7, #20]
 8048e2a:	f003 0307 	and.w	r3, r3, #7
 8048e2e:	009b      	lsls	r3, r3, #2
 8048e30:	220f      	movs	r2, #15
 8048e32:	fa02 f303 	lsl.w	r3, r2, r3
 8048e36:	43db      	mvns	r3, r3
 8048e38:	697a      	ldr	r2, [r7, #20]
 8048e3a:	08d2      	lsrs	r2, r2, #3
 8048e3c:	4019      	ands	r1, r3
 8048e3e:	687b      	ldr	r3, [r7, #4]
 8048e40:	3208      	adds	r2, #8
 8048e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8048e46:	687b      	ldr	r3, [r7, #4]
 8048e48:	689a      	ldr	r2, [r3, #8]
 8048e4a:	697b      	ldr	r3, [r7, #20]
 8048e4c:	005b      	lsls	r3, r3, #1
 8048e4e:	2103      	movs	r1, #3
 8048e50:	fa01 f303 	lsl.w	r3, r1, r3
 8048e54:	43db      	mvns	r3, r3
 8048e56:	401a      	ands	r2, r3
 8048e58:	687b      	ldr	r3, [r7, #4]
 8048e5a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8048e5c:	687b      	ldr	r3, [r7, #4]
 8048e5e:	685a      	ldr	r2, [r3, #4]
 8048e60:	2101      	movs	r1, #1
 8048e62:	697b      	ldr	r3, [r7, #20]
 8048e64:	fa01 f303 	lsl.w	r3, r1, r3
 8048e68:	43db      	mvns	r3, r3
 8048e6a:	401a      	ands	r2, r3
 8048e6c:	687b      	ldr	r3, [r7, #4]
 8048e6e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8048e70:	687b      	ldr	r3, [r7, #4]
 8048e72:	68da      	ldr	r2, [r3, #12]
 8048e74:	697b      	ldr	r3, [r7, #20]
 8048e76:	005b      	lsls	r3, r3, #1
 8048e78:	2103      	movs	r1, #3
 8048e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8048e7e:	43db      	mvns	r3, r3
 8048e80:	401a      	ands	r2, r3
 8048e82:	687b      	ldr	r3, [r7, #4]
 8048e84:	60da      	str	r2, [r3, #12]
    }

    position++;
 8048e86:	697b      	ldr	r3, [r7, #20]
 8048e88:	3301      	adds	r3, #1
 8048e8a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8048e8c:	683a      	ldr	r2, [r7, #0]
 8048e8e:	697b      	ldr	r3, [r7, #20]
 8048e90:	fa22 f303 	lsr.w	r3, r2, r3
 8048e94:	2b00      	cmp	r3, #0
 8048e96:	f47f af31 	bne.w	8048cfc <HAL_GPIO_DeInit+0x10>
  }
}
 8048e9a:	bf00      	nop
 8048e9c:	bf00      	nop
 8048e9e:	371c      	adds	r7, #28
 8048ea0:	46bd      	mov	sp, r7
 8048ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048ea6:	4770      	bx	lr
 8048ea8:	4002f400 	.word	0x4002f400
 8048eac:	42020000 	.word	0x42020000
 8048eb0:	42020400 	.word	0x42020400
 8048eb4:	42020800 	.word	0x42020800
 8048eb8:	42020c00 	.word	0x42020c00
 8048ebc:	42021000 	.word	0x42021000
 8048ec0:	42021400 	.word	0x42021400
 8048ec4:	42021800 	.word	0x42021800

08048ec8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8048ec8:	b480      	push	{r7}
 8048eca:	b085      	sub	sp, #20
 8048ecc:	af00      	add	r7, sp, #0
 8048ece:	6078      	str	r0, [r7, #4]
 8048ed0:	460b      	mov	r3, r1
 8048ed2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != 0U)
 8048ed4:	687b      	ldr	r3, [r7, #4]
 8048ed6:	691a      	ldr	r2, [r3, #16]
 8048ed8:	887b      	ldrh	r3, [r7, #2]
 8048eda:	4013      	ands	r3, r2
 8048edc:	2b00      	cmp	r3, #0
 8048ede:	d002      	beq.n	8048ee6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8048ee0:	2301      	movs	r3, #1
 8048ee2:	73fb      	strb	r3, [r7, #15]
 8048ee4:	e001      	b.n	8048eea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8048ee6:	2300      	movs	r3, #0
 8048ee8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8048eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8048eec:	4618      	mov	r0, r3
 8048eee:	3714      	adds	r7, #20
 8048ef0:	46bd      	mov	sp, r7
 8048ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048ef6:	4770      	bx	lr

08048ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8048ef8:	b480      	push	{r7}
 8048efa:	b083      	sub	sp, #12
 8048efc:	af00      	add	r7, sp, #0
 8048efe:	6078      	str	r0, [r7, #4]
 8048f00:	460b      	mov	r3, r1
 8048f02:	807b      	strh	r3, [r7, #2]
 8048f04:	4613      	mov	r3, r2
 8048f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8048f08:	787b      	ldrb	r3, [r7, #1]
 8048f0a:	2b00      	cmp	r3, #0
 8048f0c:	d003      	beq.n	8048f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8048f0e:	887a      	ldrh	r2, [r7, #2]
 8048f10:	687b      	ldr	r3, [r7, #4]
 8048f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8048f14:	e002      	b.n	8048f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8048f16:	887a      	ldrh	r2, [r7, #2]
 8048f18:	687b      	ldr	r3, [r7, #4]
 8048f1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8048f1c:	bf00      	nop
 8048f1e:	370c      	adds	r7, #12
 8048f20:	46bd      	mov	sp, r7
 8048f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048f26:	4770      	bx	lr

08048f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8048f28:	b580      	push	{r7, lr}
 8048f2a:	b082      	sub	sp, #8
 8048f2c:	af00      	add	r7, sp, #0
 8048f2e:	4603      	mov	r3, r0
 8048f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8048f32:	4b0f      	ldr	r3, [pc, #60]	; (8048f70 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8048f34:	68da      	ldr	r2, [r3, #12]
 8048f36:	88fb      	ldrh	r3, [r7, #6]
 8048f38:	4013      	ands	r3, r2
 8048f3a:	2b00      	cmp	r3, #0
 8048f3c:	d006      	beq.n	8048f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8048f3e:	4a0c      	ldr	r2, [pc, #48]	; (8048f70 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8048f40:	88fb      	ldrh	r3, [r7, #6]
 8048f42:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8048f44:	88fb      	ldrh	r3, [r7, #6]
 8048f46:	4618      	mov	r0, r3
 8048f48:	f000 f814 	bl	8048f74 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if(__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8048f4c:	4b08      	ldr	r3, [pc, #32]	; (8048f70 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8048f4e:	691a      	ldr	r2, [r3, #16]
 8048f50:	88fb      	ldrh	r3, [r7, #6]
 8048f52:	4013      	ands	r3, r2
 8048f54:	2b00      	cmp	r3, #0
 8048f56:	d006      	beq.n	8048f66 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8048f58:	4a05      	ldr	r2, [pc, #20]	; (8048f70 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8048f5a:	88fb      	ldrh	r3, [r7, #6]
 8048f5c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8048f5e:	88fb      	ldrh	r3, [r7, #6]
 8048f60:	4618      	mov	r0, r3
 8048f62:	f000 f812 	bl	8048f8a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8048f66:	bf00      	nop
 8048f68:	3708      	adds	r7, #8
 8048f6a:	46bd      	mov	sp, r7
 8048f6c:	bd80      	pop	{r7, pc}
 8048f6e:	bf00      	nop
 8048f70:	4002f400 	.word	0x4002f400

08048f74 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8048f74:	b480      	push	{r7}
 8048f76:	b083      	sub	sp, #12
 8048f78:	af00      	add	r7, sp, #0
 8048f7a:	4603      	mov	r3, r0
 8048f7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8048f7e:	bf00      	nop
 8048f80:	370c      	adds	r7, #12
 8048f82:	46bd      	mov	sp, r7
 8048f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048f88:	4770      	bx	lr

08048f8a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8048f8a:	b480      	push	{r7}
 8048f8c:	b083      	sub	sp, #12
 8048f8e:	af00      	add	r7, sp, #0
 8048f90:	4603      	mov	r3, r0
 8048f92:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8048f94:	bf00      	nop
 8048f96:	370c      	adds	r7, #12
 8048f98:	46bd      	mov	sp, r7
 8048f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048f9e:	4770      	bx	lr

08048fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8048fa0:	b580      	push	{r7, lr}
 8048fa2:	b082      	sub	sp, #8
 8048fa4:	af00      	add	r7, sp, #0
 8048fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8048fa8:	687b      	ldr	r3, [r7, #4]
 8048faa:	2b00      	cmp	r3, #0
 8048fac:	d101      	bne.n	8048fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8048fae:	2301      	movs	r3, #1
 8048fb0:	e0a7      	b.n	8049102 <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8048fb2:	687b      	ldr	r3, [r7, #4]
 8048fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8048fb8:	b2db      	uxtb	r3, r3
 8048fba:	2b00      	cmp	r3, #0
 8048fbc:	d12c      	bne.n	8049018 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8048fbe:	687b      	ldr	r3, [r7, #4]
 8048fc0:	2200      	movs	r2, #0
 8048fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8048fc6:	687b      	ldr	r3, [r7, #4]
 8048fc8:	4a50      	ldr	r2, [pc, #320]	; (804910c <HAL_I2C_Init+0x16c>)
 8048fca:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8048fcc:	687b      	ldr	r3, [r7, #4]
 8048fce:	4a50      	ldr	r2, [pc, #320]	; (8049110 <HAL_I2C_Init+0x170>)
 8048fd0:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8048fd2:	687b      	ldr	r3, [r7, #4]
 8048fd4:	4a4f      	ldr	r2, [pc, #316]	; (8049114 <HAL_I2C_Init+0x174>)
 8048fd6:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8048fd8:	687b      	ldr	r3, [r7, #4]
 8048fda:	4a4f      	ldr	r2, [pc, #316]	; (8049118 <HAL_I2C_Init+0x178>)
 8048fdc:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8048fde:	687b      	ldr	r3, [r7, #4]
 8048fe0:	4a4e      	ldr	r2, [pc, #312]	; (804911c <HAL_I2C_Init+0x17c>)
 8048fe2:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8048fe4:	687b      	ldr	r3, [r7, #4]
 8048fe6:	4a4e      	ldr	r2, [pc, #312]	; (8049120 <HAL_I2C_Init+0x180>)
 8048fe8:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8048fea:	687b      	ldr	r3, [r7, #4]
 8048fec:	4a4d      	ldr	r2, [pc, #308]	; (8049124 <HAL_I2C_Init+0x184>)
 8048fee:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8048ff0:	687b      	ldr	r3, [r7, #4]
 8048ff2:	4a4d      	ldr	r2, [pc, #308]	; (8049128 <HAL_I2C_Init+0x188>)
 8048ff4:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8048ff6:	687b      	ldr	r3, [r7, #4]
 8048ff8:	4a4c      	ldr	r2, [pc, #304]	; (804912c <HAL_I2C_Init+0x18c>)
 8048ffa:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8048ffc:	687b      	ldr	r3, [r7, #4]
 8048ffe:	4a4c      	ldr	r2, [pc, #304]	; (8049130 <HAL_I2C_Init+0x190>)
 8049000:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 8049002:	687b      	ldr	r3, [r7, #4]
 8049004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8049006:	2b00      	cmp	r3, #0
 8049008:	d102      	bne.n	8049010 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 804900a:	687b      	ldr	r3, [r7, #4]
 804900c:	4a49      	ldr	r2, [pc, #292]	; (8049134 <HAL_I2C_Init+0x194>)
 804900e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8049010:	687b      	ldr	r3, [r7, #4]
 8049012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8049014:	6878      	ldr	r0, [r7, #4]
 8049016:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8049018:	687b      	ldr	r3, [r7, #4]
 804901a:	2224      	movs	r2, #36	; 0x24
 804901c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8049020:	687b      	ldr	r3, [r7, #4]
 8049022:	681b      	ldr	r3, [r3, #0]
 8049024:	681a      	ldr	r2, [r3, #0]
 8049026:	687b      	ldr	r3, [r7, #4]
 8049028:	681b      	ldr	r3, [r3, #0]
 804902a:	f022 0201 	bic.w	r2, r2, #1
 804902e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8049030:	687b      	ldr	r3, [r7, #4]
 8049032:	685a      	ldr	r2, [r3, #4]
 8049034:	687b      	ldr	r3, [r7, #4]
 8049036:	681b      	ldr	r3, [r3, #0]
 8049038:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 804903c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 804903e:	687b      	ldr	r3, [r7, #4]
 8049040:	681b      	ldr	r3, [r3, #0]
 8049042:	689a      	ldr	r2, [r3, #8]
 8049044:	687b      	ldr	r3, [r7, #4]
 8049046:	681b      	ldr	r3, [r3, #0]
 8049048:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 804904c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 804904e:	687b      	ldr	r3, [r7, #4]
 8049050:	68db      	ldr	r3, [r3, #12]
 8049052:	2b01      	cmp	r3, #1
 8049054:	d107      	bne.n	8049066 <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8049056:	687b      	ldr	r3, [r7, #4]
 8049058:	689a      	ldr	r2, [r3, #8]
 804905a:	687b      	ldr	r3, [r7, #4]
 804905c:	681b      	ldr	r3, [r3, #0]
 804905e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8049062:	609a      	str	r2, [r3, #8]
 8049064:	e006      	b.n	8049074 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8049066:	687b      	ldr	r3, [r7, #4]
 8049068:	689a      	ldr	r2, [r3, #8]
 804906a:	687b      	ldr	r3, [r7, #4]
 804906c:	681b      	ldr	r3, [r3, #0]
 804906e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8049072:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8049074:	687b      	ldr	r3, [r7, #4]
 8049076:	68db      	ldr	r3, [r3, #12]
 8049078:	2b02      	cmp	r3, #2
 804907a:	d104      	bne.n	8049086 <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 804907c:	687b      	ldr	r3, [r7, #4]
 804907e:	681b      	ldr	r3, [r3, #0]
 8049080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8049084:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8049086:	687b      	ldr	r3, [r7, #4]
 8049088:	681b      	ldr	r3, [r3, #0]
 804908a:	685b      	ldr	r3, [r3, #4]
 804908c:	687a      	ldr	r2, [r7, #4]
 804908e:	6812      	ldr	r2, [r2, #0]
 8049090:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8049094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8049098:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 804909a:	687b      	ldr	r3, [r7, #4]
 804909c:	681b      	ldr	r3, [r3, #0]
 804909e:	68da      	ldr	r2, [r3, #12]
 80490a0:	687b      	ldr	r3, [r7, #4]
 80490a2:	681b      	ldr	r3, [r3, #0]
 80490a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80490a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80490aa:	687b      	ldr	r3, [r7, #4]
 80490ac:	691a      	ldr	r2, [r3, #16]
 80490ae:	687b      	ldr	r3, [r7, #4]
 80490b0:	695b      	ldr	r3, [r3, #20]
 80490b2:	ea42 0103 	orr.w	r1, r2, r3
 80490b6:	687b      	ldr	r3, [r7, #4]
 80490b8:	699b      	ldr	r3, [r3, #24]
 80490ba:	021a      	lsls	r2, r3, #8
 80490bc:	687b      	ldr	r3, [r7, #4]
 80490be:	681b      	ldr	r3, [r3, #0]
 80490c0:	430a      	orrs	r2, r1
 80490c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80490c4:	687b      	ldr	r3, [r7, #4]
 80490c6:	69d9      	ldr	r1, [r3, #28]
 80490c8:	687b      	ldr	r3, [r7, #4]
 80490ca:	6a1a      	ldr	r2, [r3, #32]
 80490cc:	687b      	ldr	r3, [r7, #4]
 80490ce:	681b      	ldr	r3, [r3, #0]
 80490d0:	430a      	orrs	r2, r1
 80490d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80490d4:	687b      	ldr	r3, [r7, #4]
 80490d6:	681b      	ldr	r3, [r3, #0]
 80490d8:	681a      	ldr	r2, [r3, #0]
 80490da:	687b      	ldr	r3, [r7, #4]
 80490dc:	681b      	ldr	r3, [r3, #0]
 80490de:	f042 0201 	orr.w	r2, r2, #1
 80490e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80490e4:	687b      	ldr	r3, [r7, #4]
 80490e6:	2200      	movs	r2, #0
 80490e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80490ea:	687b      	ldr	r3, [r7, #4]
 80490ec:	2220      	movs	r2, #32
 80490ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80490f2:	687b      	ldr	r3, [r7, #4]
 80490f4:	2200      	movs	r2, #0
 80490f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80490f8:	687b      	ldr	r3, [r7, #4]
 80490fa:	2200      	movs	r2, #0
 80490fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8049100:	2300      	movs	r3, #0
}
 8049102:	4618      	mov	r0, r3
 8049104:	3708      	adds	r7, #8
 8049106:	46bd      	mov	sp, r7
 8049108:	bd80      	pop	{r7, pc}
 804910a:	bf00      	nop
 804910c:	080497db 	.word	0x080497db
 8049110:	080497ef 	.word	0x080497ef
 8049114:	08049803 	.word	0x08049803
 8049118:	08049817 	.word	0x08049817
 804911c:	08049847 	.word	0x08049847
 8049120:	0804985b 	.word	0x0804985b
 8049124:	0804986f 	.word	0x0804986f
 8049128:	08049883 	.word	0x08049883
 804912c:	08049897 	.word	0x08049897
 8049130:	0804982b 	.word	0x0804982b
 8049134:	08041959 	.word	0x08041959

08049138 <HAL_I2C_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_RegisterCallback(I2C_HandleTypeDef *hi2c, HAL_I2C_CallbackIDTypeDef CallbackID,
                                           pI2C_CallbackTypeDef pCallback)
{
 8049138:	b480      	push	{r7}
 804913a:	b087      	sub	sp, #28
 804913c:	af00      	add	r7, sp, #0
 804913e:	60f8      	str	r0, [r7, #12]
 8049140:	460b      	mov	r3, r1
 8049142:	607a      	str	r2, [r7, #4]
 8049144:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8049146:	2300      	movs	r3, #0
 8049148:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 804914a:	687b      	ldr	r3, [r7, #4]
 804914c:	2b00      	cmp	r3, #0
 804914e:	d107      	bne.n	8049160 <HAL_I2C_RegisterCallback+0x28>
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8049150:	68fb      	ldr	r3, [r7, #12]
 8049152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049154:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8049158:	68fb      	ldr	r3, [r7, #12]
 804915a:	645a      	str	r2, [r3, #68]	; 0x44

    return HAL_ERROR;
 804915c:	2301      	movs	r3, #1
 804915e:	e08c      	b.n	804927a <HAL_I2C_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(hi2c);
 8049160:	68fb      	ldr	r3, [r7, #12]
 8049162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8049166:	2b01      	cmp	r3, #1
 8049168:	d101      	bne.n	804916e <HAL_I2C_RegisterCallback+0x36>
 804916a:	2302      	movs	r3, #2
 804916c:	e085      	b.n	804927a <HAL_I2C_RegisterCallback+0x142>
 804916e:	68fb      	ldr	r3, [r7, #12]
 8049170:	2201      	movs	r2, #1
 8049172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (HAL_I2C_STATE_READY == hi2c->State)
 8049176:	68fb      	ldr	r3, [r7, #12]
 8049178:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804917c:	b2db      	uxtb	r3, r3
 804917e:	2b20      	cmp	r3, #32
 8049180:	d151      	bne.n	8049226 <HAL_I2C_RegisterCallback+0xee>
  {
    switch (CallbackID)
 8049182:	7afb      	ldrb	r3, [r7, #11]
 8049184:	2b0a      	cmp	r3, #10
 8049186:	d845      	bhi.n	8049214 <HAL_I2C_RegisterCallback+0xdc>
 8049188:	a201      	add	r2, pc, #4	; (adr r2, 8049190 <HAL_I2C_RegisterCallback+0x58>)
 804918a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804918e:	bf00      	nop
 8049190:	080491bd 	.word	0x080491bd
 8049194:	080491c5 	.word	0x080491c5
 8049198:	080491cd 	.word	0x080491cd
 804919c:	080491d5 	.word	0x080491d5
 80491a0:	080491dd 	.word	0x080491dd
 80491a4:	080491e5 	.word	0x080491e5
 80491a8:	080491ed 	.word	0x080491ed
 80491ac:	080491f5 	.word	0x080491f5
 80491b0:	080491fd 	.word	0x080491fd
 80491b4:	08049205 	.word	0x08049205
 80491b8:	0804920d 	.word	0x0804920d
    {
      case HAL_I2C_MASTER_TX_COMPLETE_CB_ID :
        hi2c->MasterTxCpltCallback = pCallback;
 80491bc:	68fb      	ldr	r3, [r7, #12]
 80491be:	687a      	ldr	r2, [r7, #4]
 80491c0:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 80491c2:	e055      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MASTER_RX_COMPLETE_CB_ID :
        hi2c->MasterRxCpltCallback = pCallback;
 80491c4:	68fb      	ldr	r3, [r7, #12]
 80491c6:	687a      	ldr	r2, [r7, #4]
 80491c8:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80491ca:	e051      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_SLAVE_TX_COMPLETE_CB_ID :
        hi2c->SlaveTxCpltCallback = pCallback;
 80491cc:	68fb      	ldr	r3, [r7, #12]
 80491ce:	687a      	ldr	r2, [r7, #4]
 80491d0:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80491d2:	e04d      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_SLAVE_RX_COMPLETE_CB_ID :
        hi2c->SlaveRxCpltCallback = pCallback;
 80491d4:	68fb      	ldr	r3, [r7, #12]
 80491d6:	687a      	ldr	r2, [r7, #4]
 80491d8:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80491da:	e049      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_LISTEN_COMPLETE_CB_ID :
        hi2c->ListenCpltCallback = pCallback;
 80491dc:	68fb      	ldr	r3, [r7, #12]
 80491de:	687a      	ldr	r2, [r7, #4]
 80491e0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80491e2:	e045      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MEM_TX_COMPLETE_CB_ID :
        hi2c->MemTxCpltCallback = pCallback;
 80491e4:	68fb      	ldr	r3, [r7, #12]
 80491e6:	687a      	ldr	r2, [r7, #4]
 80491e8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80491ea:	e041      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MEM_RX_COMPLETE_CB_ID :
        hi2c->MemRxCpltCallback = pCallback;
 80491ec:	68fb      	ldr	r3, [r7, #12]
 80491ee:	687a      	ldr	r2, [r7, #4]
 80491f0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80491f2:	e03d      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_ERROR_CB_ID :
        hi2c->ErrorCallback = pCallback;
 80491f4:	68fb      	ldr	r3, [r7, #12]
 80491f6:	687a      	ldr	r2, [r7, #4]
 80491f8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80491fa:	e039      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_ABORT_CB_ID :
        hi2c->AbortCpltCallback = pCallback;
 80491fc:	68fb      	ldr	r3, [r7, #12]
 80491fe:	687a      	ldr	r2, [r7, #4]
 8049200:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8049202:	e035      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 8049204:	68fb      	ldr	r3, [r7, #12]
 8049206:	687a      	ldr	r2, [r7, #4]
 8049208:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 804920a:	e031      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 804920c:	68fb      	ldr	r3, [r7, #12]
 804920e:	687a      	ldr	r2, [r7, #4]
 8049210:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8049212:	e02d      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8049214:	68fb      	ldr	r3, [r7, #12]
 8049216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049218:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 804921c:	68fb      	ldr	r3, [r7, #12]
 804921e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8049220:	2301      	movs	r3, #1
 8049222:	75fb      	strb	r3, [r7, #23]
        break;
 8049224:	e024      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>
    }
  }
  else if (HAL_I2C_STATE_RESET == hi2c->State)
 8049226:	68fb      	ldr	r3, [r7, #12]
 8049228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804922c:	b2db      	uxtb	r3, r3
 804922e:	2b00      	cmp	r3, #0
 8049230:	d116      	bne.n	8049260 <HAL_I2C_RegisterCallback+0x128>
  {
    switch (CallbackID)
 8049232:	7afb      	ldrb	r3, [r7, #11]
 8049234:	2b09      	cmp	r3, #9
 8049236:	d002      	beq.n	804923e <HAL_I2C_RegisterCallback+0x106>
 8049238:	2b0a      	cmp	r3, #10
 804923a:	d004      	beq.n	8049246 <HAL_I2C_RegisterCallback+0x10e>
 804923c:	e007      	b.n	804924e <HAL_I2C_RegisterCallback+0x116>
    {
      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 804923e:	68fb      	ldr	r3, [r7, #12]
 8049240:	687a      	ldr	r2, [r7, #4]
 8049242:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8049244:	e014      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 8049246:	68fb      	ldr	r3, [r7, #12]
 8049248:	687a      	ldr	r2, [r7, #4]
 804924a:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 804924c:	e010      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 804924e:	68fb      	ldr	r3, [r7, #12]
 8049250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049252:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8049256:	68fb      	ldr	r3, [r7, #12]
 8049258:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 804925a:	2301      	movs	r3, #1
 804925c:	75fb      	strb	r3, [r7, #23]
        break;
 804925e:	e007      	b.n	8049270 <HAL_I2C_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8049260:	68fb      	ldr	r3, [r7, #12]
 8049262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049264:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8049268:	68fb      	ldr	r3, [r7, #12]
 804926a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Return error status */
    status =  HAL_ERROR;
 804926c:	2301      	movs	r3, #1
 804926e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8049270:	68fb      	ldr	r3, [r7, #12]
 8049272:	2200      	movs	r2, #0
 8049274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return status;
 8049278:	7dfb      	ldrb	r3, [r7, #23]
}
 804927a:	4618      	mov	r0, r3
 804927c:	371c      	adds	r7, #28
 804927e:	46bd      	mov	sp, r7
 8049280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049284:	4770      	bx	lr
 8049286:	bf00      	nop

08049288 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8049288:	b580      	push	{r7, lr}
 804928a:	b088      	sub	sp, #32
 804928c:	af02      	add	r7, sp, #8
 804928e:	60f8      	str	r0, [r7, #12]
 8049290:	4608      	mov	r0, r1
 8049292:	4611      	mov	r1, r2
 8049294:	461a      	mov	r2, r3
 8049296:	4603      	mov	r3, r0
 8049298:	817b      	strh	r3, [r7, #10]
 804929a:	460b      	mov	r3, r1
 804929c:	813b      	strh	r3, [r7, #8]
 804929e:	4613      	mov	r3, r2
 80492a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80492a2:	68fb      	ldr	r3, [r7, #12]
 80492a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80492a8:	b2db      	uxtb	r3, r3
 80492aa:	2b20      	cmp	r3, #32
 80492ac:	f040 80f9 	bne.w	80494a2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80492b0:	6a3b      	ldr	r3, [r7, #32]
 80492b2:	2b00      	cmp	r3, #0
 80492b4:	d002      	beq.n	80492bc <HAL_I2C_Mem_Write+0x34>
 80492b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80492b8:	2b00      	cmp	r3, #0
 80492ba:	d105      	bne.n	80492c8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80492bc:	68fb      	ldr	r3, [r7, #12]
 80492be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80492c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80492c4:	2301      	movs	r3, #1
 80492c6:	e0ed      	b.n	80494a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80492c8:	68fb      	ldr	r3, [r7, #12]
 80492ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80492ce:	2b01      	cmp	r3, #1
 80492d0:	d101      	bne.n	80492d6 <HAL_I2C_Mem_Write+0x4e>
 80492d2:	2302      	movs	r3, #2
 80492d4:	e0e6      	b.n	80494a4 <HAL_I2C_Mem_Write+0x21c>
 80492d6:	68fb      	ldr	r3, [r7, #12]
 80492d8:	2201      	movs	r2, #1
 80492da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80492de:	f7fd fc79 	bl	8046bd4 <HAL_GetTick>
 80492e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80492e4:	697b      	ldr	r3, [r7, #20]
 80492e6:	9300      	str	r3, [sp, #0]
 80492e8:	2319      	movs	r3, #25
 80492ea:	2201      	movs	r2, #1
 80492ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80492f0:	68f8      	ldr	r0, [r7, #12]
 80492f2:	f001 f820 	bl	804a336 <I2C_WaitOnFlagUntilTimeout>
 80492f6:	4603      	mov	r3, r0
 80492f8:	2b00      	cmp	r3, #0
 80492fa:	d001      	beq.n	8049300 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80492fc:	2301      	movs	r3, #1
 80492fe:	e0d1      	b.n	80494a4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8049300:	68fb      	ldr	r3, [r7, #12]
 8049302:	2221      	movs	r2, #33	; 0x21
 8049304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8049308:	68fb      	ldr	r3, [r7, #12]
 804930a:	2240      	movs	r2, #64	; 0x40
 804930c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8049310:	68fb      	ldr	r3, [r7, #12]
 8049312:	2200      	movs	r2, #0
 8049314:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8049316:	68fb      	ldr	r3, [r7, #12]
 8049318:	6a3a      	ldr	r2, [r7, #32]
 804931a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 804931c:	68fb      	ldr	r3, [r7, #12]
 804931e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8049320:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8049322:	68fb      	ldr	r3, [r7, #12]
 8049324:	2200      	movs	r2, #0
 8049326:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8049328:	88f8      	ldrh	r0, [r7, #6]
 804932a:	893a      	ldrh	r2, [r7, #8]
 804932c:	8979      	ldrh	r1, [r7, #10]
 804932e:	697b      	ldr	r3, [r7, #20]
 8049330:	9301      	str	r3, [sp, #4]
 8049332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049334:	9300      	str	r3, [sp, #0]
 8049336:	4603      	mov	r3, r0
 8049338:	68f8      	ldr	r0, [r7, #12]
 804933a:	f000 fbd3 	bl	8049ae4 <I2C_RequestMemoryWrite>
 804933e:	4603      	mov	r3, r0
 8049340:	2b00      	cmp	r3, #0
 8049342:	d005      	beq.n	8049350 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8049344:	68fb      	ldr	r3, [r7, #12]
 8049346:	2200      	movs	r2, #0
 8049348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 804934c:	2301      	movs	r3, #1
 804934e:	e0a9      	b.n	80494a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8049350:	68fb      	ldr	r3, [r7, #12]
 8049352:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049354:	b29b      	uxth	r3, r3
 8049356:	2bff      	cmp	r3, #255	; 0xff
 8049358:	d90e      	bls.n	8049378 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 804935a:	68fb      	ldr	r3, [r7, #12]
 804935c:	22ff      	movs	r2, #255	; 0xff
 804935e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8049360:	68fb      	ldr	r3, [r7, #12]
 8049362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049364:	b2da      	uxtb	r2, r3
 8049366:	8979      	ldrh	r1, [r7, #10]
 8049368:	2300      	movs	r3, #0
 804936a:	9300      	str	r3, [sp, #0]
 804936c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8049370:	68f8      	ldr	r0, [r7, #12]
 8049372:	f001 f903 	bl	804a57c <I2C_TransferConfig>
 8049376:	e00f      	b.n	8049398 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8049378:	68fb      	ldr	r3, [r7, #12]
 804937a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804937c:	b29a      	uxth	r2, r3
 804937e:	68fb      	ldr	r3, [r7, #12]
 8049380:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8049382:	68fb      	ldr	r3, [r7, #12]
 8049384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049386:	b2da      	uxtb	r2, r3
 8049388:	8979      	ldrh	r1, [r7, #10]
 804938a:	2300      	movs	r3, #0
 804938c:	9300      	str	r3, [sp, #0]
 804938e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8049392:	68f8      	ldr	r0, [r7, #12]
 8049394:	f001 f8f2 	bl	804a57c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8049398:	697a      	ldr	r2, [r7, #20]
 804939a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804939c:	68f8      	ldr	r0, [r7, #12]
 804939e:	f001 f80a 	bl	804a3b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80493a2:	4603      	mov	r3, r0
 80493a4:	2b00      	cmp	r3, #0
 80493a6:	d001      	beq.n	80493ac <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80493a8:	2301      	movs	r3, #1
 80493aa:	e07b      	b.n	80494a4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80493ac:	68fb      	ldr	r3, [r7, #12]
 80493ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80493b0:	781a      	ldrb	r2, [r3, #0]
 80493b2:	68fb      	ldr	r3, [r7, #12]
 80493b4:	681b      	ldr	r3, [r3, #0]
 80493b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80493b8:	68fb      	ldr	r3, [r7, #12]
 80493ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80493bc:	1c5a      	adds	r2, r3, #1
 80493be:	68fb      	ldr	r3, [r7, #12]
 80493c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80493c2:	68fb      	ldr	r3, [r7, #12]
 80493c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80493c6:	b29b      	uxth	r3, r3
 80493c8:	3b01      	subs	r3, #1
 80493ca:	b29a      	uxth	r2, r3
 80493cc:	68fb      	ldr	r3, [r7, #12]
 80493ce:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80493d0:	68fb      	ldr	r3, [r7, #12]
 80493d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80493d4:	3b01      	subs	r3, #1
 80493d6:	b29a      	uxth	r2, r3
 80493d8:	68fb      	ldr	r3, [r7, #12]
 80493da:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80493dc:	68fb      	ldr	r3, [r7, #12]
 80493de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80493e0:	b29b      	uxth	r3, r3
 80493e2:	2b00      	cmp	r3, #0
 80493e4:	d034      	beq.n	8049450 <HAL_I2C_Mem_Write+0x1c8>
 80493e6:	68fb      	ldr	r3, [r7, #12]
 80493e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80493ea:	2b00      	cmp	r3, #0
 80493ec:	d130      	bne.n	8049450 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80493ee:	697b      	ldr	r3, [r7, #20]
 80493f0:	9300      	str	r3, [sp, #0]
 80493f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80493f4:	2200      	movs	r2, #0
 80493f6:	2180      	movs	r1, #128	; 0x80
 80493f8:	68f8      	ldr	r0, [r7, #12]
 80493fa:	f000 ff9c 	bl	804a336 <I2C_WaitOnFlagUntilTimeout>
 80493fe:	4603      	mov	r3, r0
 8049400:	2b00      	cmp	r3, #0
 8049402:	d001      	beq.n	8049408 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8049404:	2301      	movs	r3, #1
 8049406:	e04d      	b.n	80494a4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8049408:	68fb      	ldr	r3, [r7, #12]
 804940a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804940c:	b29b      	uxth	r3, r3
 804940e:	2bff      	cmp	r3, #255	; 0xff
 8049410:	d90e      	bls.n	8049430 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8049412:	68fb      	ldr	r3, [r7, #12]
 8049414:	22ff      	movs	r2, #255	; 0xff
 8049416:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8049418:	68fb      	ldr	r3, [r7, #12]
 804941a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804941c:	b2da      	uxtb	r2, r3
 804941e:	8979      	ldrh	r1, [r7, #10]
 8049420:	2300      	movs	r3, #0
 8049422:	9300      	str	r3, [sp, #0]
 8049424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8049428:	68f8      	ldr	r0, [r7, #12]
 804942a:	f001 f8a7 	bl	804a57c <I2C_TransferConfig>
 804942e:	e00f      	b.n	8049450 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8049430:	68fb      	ldr	r3, [r7, #12]
 8049432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049434:	b29a      	uxth	r2, r3
 8049436:	68fb      	ldr	r3, [r7, #12]
 8049438:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 804943a:	68fb      	ldr	r3, [r7, #12]
 804943c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804943e:	b2da      	uxtb	r2, r3
 8049440:	8979      	ldrh	r1, [r7, #10]
 8049442:	2300      	movs	r3, #0
 8049444:	9300      	str	r3, [sp, #0]
 8049446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 804944a:	68f8      	ldr	r0, [r7, #12]
 804944c:	f001 f896 	bl	804a57c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8049450:	68fb      	ldr	r3, [r7, #12]
 8049452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049454:	b29b      	uxth	r3, r3
 8049456:	2b00      	cmp	r3, #0
 8049458:	d19e      	bne.n	8049398 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 804945a:	697a      	ldr	r2, [r7, #20]
 804945c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804945e:	68f8      	ldr	r0, [r7, #12]
 8049460:	f000 ffe9 	bl	804a436 <I2C_WaitOnSTOPFlagUntilTimeout>
 8049464:	4603      	mov	r3, r0
 8049466:	2b00      	cmp	r3, #0
 8049468:	d001      	beq.n	804946e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 804946a:	2301      	movs	r3, #1
 804946c:	e01a      	b.n	80494a4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 804946e:	68fb      	ldr	r3, [r7, #12]
 8049470:	681b      	ldr	r3, [r3, #0]
 8049472:	2220      	movs	r2, #32
 8049474:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8049476:	68fb      	ldr	r3, [r7, #12]
 8049478:	681b      	ldr	r3, [r3, #0]
 804947a:	6859      	ldr	r1, [r3, #4]
 804947c:	68fb      	ldr	r3, [r7, #12]
 804947e:	681a      	ldr	r2, [r3, #0]
 8049480:	4b0a      	ldr	r3, [pc, #40]	; (80494ac <HAL_I2C_Mem_Write+0x224>)
 8049482:	400b      	ands	r3, r1
 8049484:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8049486:	68fb      	ldr	r3, [r7, #12]
 8049488:	2220      	movs	r2, #32
 804948a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 804948e:	68fb      	ldr	r3, [r7, #12]
 8049490:	2200      	movs	r2, #0
 8049492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8049496:	68fb      	ldr	r3, [r7, #12]
 8049498:	2200      	movs	r2, #0
 804949a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 804949e:	2300      	movs	r3, #0
 80494a0:	e000      	b.n	80494a4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80494a2:	2302      	movs	r3, #2
  }
}
 80494a4:	4618      	mov	r0, r3
 80494a6:	3718      	adds	r7, #24
 80494a8:	46bd      	mov	sp, r7
 80494aa:	bd80      	pop	{r7, pc}
 80494ac:	fe00e800 	.word	0xfe00e800

080494b0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80494b0:	b580      	push	{r7, lr}
 80494b2:	b088      	sub	sp, #32
 80494b4:	af02      	add	r7, sp, #8
 80494b6:	60f8      	str	r0, [r7, #12]
 80494b8:	4608      	mov	r0, r1
 80494ba:	4611      	mov	r1, r2
 80494bc:	461a      	mov	r2, r3
 80494be:	4603      	mov	r3, r0
 80494c0:	817b      	strh	r3, [r7, #10]
 80494c2:	460b      	mov	r3, r1
 80494c4:	813b      	strh	r3, [r7, #8]
 80494c6:	4613      	mov	r3, r2
 80494c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80494ca:	68fb      	ldr	r3, [r7, #12]
 80494cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80494d0:	b2db      	uxtb	r3, r3
 80494d2:	2b20      	cmp	r3, #32
 80494d4:	f040 80fd 	bne.w	80496d2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80494d8:	6a3b      	ldr	r3, [r7, #32]
 80494da:	2b00      	cmp	r3, #0
 80494dc:	d002      	beq.n	80494e4 <HAL_I2C_Mem_Read+0x34>
 80494de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80494e0:	2b00      	cmp	r3, #0
 80494e2:	d105      	bne.n	80494f0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80494e4:	68fb      	ldr	r3, [r7, #12]
 80494e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80494ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80494ec:	2301      	movs	r3, #1
 80494ee:	e0f1      	b.n	80496d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80494f0:	68fb      	ldr	r3, [r7, #12]
 80494f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80494f6:	2b01      	cmp	r3, #1
 80494f8:	d101      	bne.n	80494fe <HAL_I2C_Mem_Read+0x4e>
 80494fa:	2302      	movs	r3, #2
 80494fc:	e0ea      	b.n	80496d4 <HAL_I2C_Mem_Read+0x224>
 80494fe:	68fb      	ldr	r3, [r7, #12]
 8049500:	2201      	movs	r2, #1
 8049502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8049506:	f7fd fb65 	bl	8046bd4 <HAL_GetTick>
 804950a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 804950c:	697b      	ldr	r3, [r7, #20]
 804950e:	9300      	str	r3, [sp, #0]
 8049510:	2319      	movs	r3, #25
 8049512:	2201      	movs	r2, #1
 8049514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8049518:	68f8      	ldr	r0, [r7, #12]
 804951a:	f000 ff0c 	bl	804a336 <I2C_WaitOnFlagUntilTimeout>
 804951e:	4603      	mov	r3, r0
 8049520:	2b00      	cmp	r3, #0
 8049522:	d001      	beq.n	8049528 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8049524:	2301      	movs	r3, #1
 8049526:	e0d5      	b.n	80496d4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8049528:	68fb      	ldr	r3, [r7, #12]
 804952a:	2222      	movs	r2, #34	; 0x22
 804952c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8049530:	68fb      	ldr	r3, [r7, #12]
 8049532:	2240      	movs	r2, #64	; 0x40
 8049534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8049538:	68fb      	ldr	r3, [r7, #12]
 804953a:	2200      	movs	r2, #0
 804953c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 804953e:	68fb      	ldr	r3, [r7, #12]
 8049540:	6a3a      	ldr	r2, [r7, #32]
 8049542:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8049544:	68fb      	ldr	r3, [r7, #12]
 8049546:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8049548:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 804954a:	68fb      	ldr	r3, [r7, #12]
 804954c:	2200      	movs	r2, #0
 804954e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8049550:	88f8      	ldrh	r0, [r7, #6]
 8049552:	893a      	ldrh	r2, [r7, #8]
 8049554:	8979      	ldrh	r1, [r7, #10]
 8049556:	697b      	ldr	r3, [r7, #20]
 8049558:	9301      	str	r3, [sp, #4]
 804955a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804955c:	9300      	str	r3, [sp, #0]
 804955e:	4603      	mov	r3, r0
 8049560:	68f8      	ldr	r0, [r7, #12]
 8049562:	f000 fb13 	bl	8049b8c <I2C_RequestMemoryRead>
 8049566:	4603      	mov	r3, r0
 8049568:	2b00      	cmp	r3, #0
 804956a:	d005      	beq.n	8049578 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 804956c:	68fb      	ldr	r3, [r7, #12]
 804956e:	2200      	movs	r2, #0
 8049570:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8049574:	2301      	movs	r3, #1
 8049576:	e0ad      	b.n	80496d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8049578:	68fb      	ldr	r3, [r7, #12]
 804957a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804957c:	b29b      	uxth	r3, r3
 804957e:	2bff      	cmp	r3, #255	; 0xff
 8049580:	d90e      	bls.n	80495a0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8049582:	68fb      	ldr	r3, [r7, #12]
 8049584:	22ff      	movs	r2, #255	; 0xff
 8049586:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8049588:	68fb      	ldr	r3, [r7, #12]
 804958a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804958c:	b2da      	uxtb	r2, r3
 804958e:	8979      	ldrh	r1, [r7, #10]
 8049590:	4b52      	ldr	r3, [pc, #328]	; (80496dc <HAL_I2C_Mem_Read+0x22c>)
 8049592:	9300      	str	r3, [sp, #0]
 8049594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8049598:	68f8      	ldr	r0, [r7, #12]
 804959a:	f000 ffef 	bl	804a57c <I2C_TransferConfig>
 804959e:	e00f      	b.n	80495c0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80495a0:	68fb      	ldr	r3, [r7, #12]
 80495a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80495a4:	b29a      	uxth	r2, r3
 80495a6:	68fb      	ldr	r3, [r7, #12]
 80495a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80495aa:	68fb      	ldr	r3, [r7, #12]
 80495ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80495ae:	b2da      	uxtb	r2, r3
 80495b0:	8979      	ldrh	r1, [r7, #10]
 80495b2:	4b4a      	ldr	r3, [pc, #296]	; (80496dc <HAL_I2C_Mem_Read+0x22c>)
 80495b4:	9300      	str	r3, [sp, #0]
 80495b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80495ba:	68f8      	ldr	r0, [r7, #12]
 80495bc:	f000 ffde 	bl	804a57c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80495c0:	697b      	ldr	r3, [r7, #20]
 80495c2:	9300      	str	r3, [sp, #0]
 80495c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80495c6:	2200      	movs	r2, #0
 80495c8:	2104      	movs	r1, #4
 80495ca:	68f8      	ldr	r0, [r7, #12]
 80495cc:	f000 feb3 	bl	804a336 <I2C_WaitOnFlagUntilTimeout>
 80495d0:	4603      	mov	r3, r0
 80495d2:	2b00      	cmp	r3, #0
 80495d4:	d001      	beq.n	80495da <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80495d6:	2301      	movs	r3, #1
 80495d8:	e07c      	b.n	80496d4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80495da:	68fb      	ldr	r3, [r7, #12]
 80495dc:	681b      	ldr	r3, [r3, #0]
 80495de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80495e0:	68fb      	ldr	r3, [r7, #12]
 80495e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80495e4:	b2d2      	uxtb	r2, r2
 80495e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80495e8:	68fb      	ldr	r3, [r7, #12]
 80495ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80495ec:	1c5a      	adds	r2, r3, #1
 80495ee:	68fb      	ldr	r3, [r7, #12]
 80495f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80495f2:	68fb      	ldr	r3, [r7, #12]
 80495f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80495f6:	3b01      	subs	r3, #1
 80495f8:	b29a      	uxth	r2, r3
 80495fa:	68fb      	ldr	r3, [r7, #12]
 80495fc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80495fe:	68fb      	ldr	r3, [r7, #12]
 8049600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049602:	b29b      	uxth	r3, r3
 8049604:	3b01      	subs	r3, #1
 8049606:	b29a      	uxth	r2, r3
 8049608:	68fb      	ldr	r3, [r7, #12]
 804960a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 804960c:	68fb      	ldr	r3, [r7, #12]
 804960e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049610:	b29b      	uxth	r3, r3
 8049612:	2b00      	cmp	r3, #0
 8049614:	d034      	beq.n	8049680 <HAL_I2C_Mem_Read+0x1d0>
 8049616:	68fb      	ldr	r3, [r7, #12]
 8049618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804961a:	2b00      	cmp	r3, #0
 804961c:	d130      	bne.n	8049680 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 804961e:	697b      	ldr	r3, [r7, #20]
 8049620:	9300      	str	r3, [sp, #0]
 8049622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049624:	2200      	movs	r2, #0
 8049626:	2180      	movs	r1, #128	; 0x80
 8049628:	68f8      	ldr	r0, [r7, #12]
 804962a:	f000 fe84 	bl	804a336 <I2C_WaitOnFlagUntilTimeout>
 804962e:	4603      	mov	r3, r0
 8049630:	2b00      	cmp	r3, #0
 8049632:	d001      	beq.n	8049638 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8049634:	2301      	movs	r3, #1
 8049636:	e04d      	b.n	80496d4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8049638:	68fb      	ldr	r3, [r7, #12]
 804963a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804963c:	b29b      	uxth	r3, r3
 804963e:	2bff      	cmp	r3, #255	; 0xff
 8049640:	d90e      	bls.n	8049660 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8049642:	68fb      	ldr	r3, [r7, #12]
 8049644:	22ff      	movs	r2, #255	; 0xff
 8049646:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8049648:	68fb      	ldr	r3, [r7, #12]
 804964a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804964c:	b2da      	uxtb	r2, r3
 804964e:	8979      	ldrh	r1, [r7, #10]
 8049650:	2300      	movs	r3, #0
 8049652:	9300      	str	r3, [sp, #0]
 8049654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8049658:	68f8      	ldr	r0, [r7, #12]
 804965a:	f000 ff8f 	bl	804a57c <I2C_TransferConfig>
 804965e:	e00f      	b.n	8049680 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8049660:	68fb      	ldr	r3, [r7, #12]
 8049662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049664:	b29a      	uxth	r2, r3
 8049666:	68fb      	ldr	r3, [r7, #12]
 8049668:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 804966a:	68fb      	ldr	r3, [r7, #12]
 804966c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804966e:	b2da      	uxtb	r2, r3
 8049670:	8979      	ldrh	r1, [r7, #10]
 8049672:	2300      	movs	r3, #0
 8049674:	9300      	str	r3, [sp, #0]
 8049676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 804967a:	68f8      	ldr	r0, [r7, #12]
 804967c:	f000 ff7e 	bl	804a57c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8049680:	68fb      	ldr	r3, [r7, #12]
 8049682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049684:	b29b      	uxth	r3, r3
 8049686:	2b00      	cmp	r3, #0
 8049688:	d19a      	bne.n	80495c0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 804968a:	697a      	ldr	r2, [r7, #20]
 804968c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804968e:	68f8      	ldr	r0, [r7, #12]
 8049690:	f000 fed1 	bl	804a436 <I2C_WaitOnSTOPFlagUntilTimeout>
 8049694:	4603      	mov	r3, r0
 8049696:	2b00      	cmp	r3, #0
 8049698:	d001      	beq.n	804969e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 804969a:	2301      	movs	r3, #1
 804969c:	e01a      	b.n	80496d4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 804969e:	68fb      	ldr	r3, [r7, #12]
 80496a0:	681b      	ldr	r3, [r3, #0]
 80496a2:	2220      	movs	r2, #32
 80496a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80496a6:	68fb      	ldr	r3, [r7, #12]
 80496a8:	681b      	ldr	r3, [r3, #0]
 80496aa:	6859      	ldr	r1, [r3, #4]
 80496ac:	68fb      	ldr	r3, [r7, #12]
 80496ae:	681a      	ldr	r2, [r3, #0]
 80496b0:	4b0b      	ldr	r3, [pc, #44]	; (80496e0 <HAL_I2C_Mem_Read+0x230>)
 80496b2:	400b      	ands	r3, r1
 80496b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80496b6:	68fb      	ldr	r3, [r7, #12]
 80496b8:	2220      	movs	r2, #32
 80496ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80496be:	68fb      	ldr	r3, [r7, #12]
 80496c0:	2200      	movs	r2, #0
 80496c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80496c6:	68fb      	ldr	r3, [r7, #12]
 80496c8:	2200      	movs	r2, #0
 80496ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80496ce:	2300      	movs	r3, #0
 80496d0:	e000      	b.n	80496d4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80496d2:	2302      	movs	r3, #2
  }
}
 80496d4:	4618      	mov	r0, r3
 80496d6:	3718      	adds	r7, #24
 80496d8:	46bd      	mov	sp, r7
 80496da:	bd80      	pop	{r7, pc}
 80496dc:	80002400 	.word	0x80002400
 80496e0:	fe00e800 	.word	0xfe00e800

080496e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80496e4:	b580      	push	{r7, lr}
 80496e6:	b084      	sub	sp, #16
 80496e8:	af00      	add	r7, sp, #0
 80496ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80496ec:	687b      	ldr	r3, [r7, #4]
 80496ee:	681b      	ldr	r3, [r3, #0]
 80496f0:	699b      	ldr	r3, [r3, #24]
 80496f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80496f4:	687b      	ldr	r3, [r7, #4]
 80496f6:	681b      	ldr	r3, [r3, #0]
 80496f8:	681b      	ldr	r3, [r3, #0]
 80496fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80496fc:	687b      	ldr	r3, [r7, #4]
 80496fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8049700:	2b00      	cmp	r3, #0
 8049702:	d005      	beq.n	8049710 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8049704:	687b      	ldr	r3, [r7, #4]
 8049706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8049708:	68ba      	ldr	r2, [r7, #8]
 804970a:	68f9      	ldr	r1, [r7, #12]
 804970c:	6878      	ldr	r0, [r7, #4]
 804970e:	4798      	blx	r3
  }
}
 8049710:	bf00      	nop
 8049712:	3710      	adds	r7, #16
 8049714:	46bd      	mov	sp, r7
 8049716:	bd80      	pop	{r7, pc}

08049718 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8049718:	b580      	push	{r7, lr}
 804971a:	b086      	sub	sp, #24
 804971c:	af00      	add	r7, sp, #0
 804971e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8049720:	687b      	ldr	r3, [r7, #4]
 8049722:	681b      	ldr	r3, [r3, #0]
 8049724:	699b      	ldr	r3, [r3, #24]
 8049726:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8049728:	687b      	ldr	r3, [r7, #4]
 804972a:	681b      	ldr	r3, [r3, #0]
 804972c:	681b      	ldr	r3, [r3, #0]
 804972e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8049730:	697b      	ldr	r3, [r7, #20]
 8049732:	0a1b      	lsrs	r3, r3, #8
 8049734:	f003 0301 	and.w	r3, r3, #1
 8049738:	2b00      	cmp	r3, #0
 804973a:	d010      	beq.n	804975e <HAL_I2C_ER_IRQHandler+0x46>
 804973c:	693b      	ldr	r3, [r7, #16]
 804973e:	09db      	lsrs	r3, r3, #7
 8049740:	f003 0301 	and.w	r3, r3, #1
 8049744:	2b00      	cmp	r3, #0
 8049746:	d00a      	beq.n	804975e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8049748:	687b      	ldr	r3, [r7, #4]
 804974a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804974c:	f043 0201 	orr.w	r2, r3, #1
 8049750:	687b      	ldr	r3, [r7, #4]
 8049752:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8049754:	687b      	ldr	r3, [r7, #4]
 8049756:	681b      	ldr	r3, [r3, #0]
 8049758:	f44f 7280 	mov.w	r2, #256	; 0x100
 804975c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 804975e:	697b      	ldr	r3, [r7, #20]
 8049760:	0a9b      	lsrs	r3, r3, #10
 8049762:	f003 0301 	and.w	r3, r3, #1
 8049766:	2b00      	cmp	r3, #0
 8049768:	d010      	beq.n	804978c <HAL_I2C_ER_IRQHandler+0x74>
 804976a:	693b      	ldr	r3, [r7, #16]
 804976c:	09db      	lsrs	r3, r3, #7
 804976e:	f003 0301 	and.w	r3, r3, #1
 8049772:	2b00      	cmp	r3, #0
 8049774:	d00a      	beq.n	804978c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8049776:	687b      	ldr	r3, [r7, #4]
 8049778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804977a:	f043 0208 	orr.w	r2, r3, #8
 804977e:	687b      	ldr	r3, [r7, #4]
 8049780:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8049782:	687b      	ldr	r3, [r7, #4]
 8049784:	681b      	ldr	r3, [r3, #0]
 8049786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 804978a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 804978c:	697b      	ldr	r3, [r7, #20]
 804978e:	0a5b      	lsrs	r3, r3, #9
 8049790:	f003 0301 	and.w	r3, r3, #1
 8049794:	2b00      	cmp	r3, #0
 8049796:	d010      	beq.n	80497ba <HAL_I2C_ER_IRQHandler+0xa2>
 8049798:	693b      	ldr	r3, [r7, #16]
 804979a:	09db      	lsrs	r3, r3, #7
 804979c:	f003 0301 	and.w	r3, r3, #1
 80497a0:	2b00      	cmp	r3, #0
 80497a2:	d00a      	beq.n	80497ba <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80497a4:	687b      	ldr	r3, [r7, #4]
 80497a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80497a8:	f043 0202 	orr.w	r2, r3, #2
 80497ac:	687b      	ldr	r3, [r7, #4]
 80497ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80497b0:	687b      	ldr	r3, [r7, #4]
 80497b2:	681b      	ldr	r3, [r3, #0]
 80497b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80497b8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80497ba:	687b      	ldr	r3, [r7, #4]
 80497bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80497be:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80497c0:	68fb      	ldr	r3, [r7, #12]
 80497c2:	f003 030b 	and.w	r3, r3, #11
 80497c6:	2b00      	cmp	r3, #0
 80497c8:	d003      	beq.n	80497d2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80497ca:	68f9      	ldr	r1, [r7, #12]
 80497cc:	6878      	ldr	r0, [r7, #4]
 80497ce:	f000 fc77 	bl	804a0c0 <I2C_ITError>
  }
}
 80497d2:	bf00      	nop
 80497d4:	3718      	adds	r7, #24
 80497d6:	46bd      	mov	sp, r7
 80497d8:	bd80      	pop	{r7, pc}

080497da <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80497da:	b480      	push	{r7}
 80497dc:	b083      	sub	sp, #12
 80497de:	af00      	add	r7, sp, #0
 80497e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80497e2:	bf00      	nop
 80497e4:	370c      	adds	r7, #12
 80497e6:	46bd      	mov	sp, r7
 80497e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80497ec:	4770      	bx	lr

080497ee <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80497ee:	b480      	push	{r7}
 80497f0:	b083      	sub	sp, #12
 80497f2:	af00      	add	r7, sp, #0
 80497f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80497f6:	bf00      	nop
 80497f8:	370c      	adds	r7, #12
 80497fa:	46bd      	mov	sp, r7
 80497fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049800:	4770      	bx	lr

08049802 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8049802:	b480      	push	{r7}
 8049804:	b083      	sub	sp, #12
 8049806:	af00      	add	r7, sp, #0
 8049808:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 804980a:	bf00      	nop
 804980c:	370c      	adds	r7, #12
 804980e:	46bd      	mov	sp, r7
 8049810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049814:	4770      	bx	lr

08049816 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8049816:	b480      	push	{r7}
 8049818:	b083      	sub	sp, #12
 804981a:	af00      	add	r7, sp, #0
 804981c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 804981e:	bf00      	nop
 8049820:	370c      	adds	r7, #12
 8049822:	46bd      	mov	sp, r7
 8049824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049828:	4770      	bx	lr

0804982a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 804982a:	b480      	push	{r7}
 804982c:	b083      	sub	sp, #12
 804982e:	af00      	add	r7, sp, #0
 8049830:	6078      	str	r0, [r7, #4]
 8049832:	460b      	mov	r3, r1
 8049834:	70fb      	strb	r3, [r7, #3]
 8049836:	4613      	mov	r3, r2
 8049838:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 804983a:	bf00      	nop
 804983c:	370c      	adds	r7, #12
 804983e:	46bd      	mov	sp, r7
 8049840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049844:	4770      	bx	lr

08049846 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8049846:	b480      	push	{r7}
 8049848:	b083      	sub	sp, #12
 804984a:	af00      	add	r7, sp, #0
 804984c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 804984e:	bf00      	nop
 8049850:	370c      	adds	r7, #12
 8049852:	46bd      	mov	sp, r7
 8049854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049858:	4770      	bx	lr

0804985a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 804985a:	b480      	push	{r7}
 804985c:	b083      	sub	sp, #12
 804985e:	af00      	add	r7, sp, #0
 8049860:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8049862:	bf00      	nop
 8049864:	370c      	adds	r7, #12
 8049866:	46bd      	mov	sp, r7
 8049868:	f85d 7b04 	ldr.w	r7, [sp], #4
 804986c:	4770      	bx	lr

0804986e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 804986e:	b480      	push	{r7}
 8049870:	b083      	sub	sp, #12
 8049872:	af00      	add	r7, sp, #0
 8049874:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8049876:	bf00      	nop
 8049878:	370c      	adds	r7, #12
 804987a:	46bd      	mov	sp, r7
 804987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049880:	4770      	bx	lr

08049882 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8049882:	b480      	push	{r7}
 8049884:	b083      	sub	sp, #12
 8049886:	af00      	add	r7, sp, #0
 8049888:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 804988a:	bf00      	nop
 804988c:	370c      	adds	r7, #12
 804988e:	46bd      	mov	sp, r7
 8049890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049894:	4770      	bx	lr

08049896 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8049896:	b480      	push	{r7}
 8049898:	b083      	sub	sp, #12
 804989a:	af00      	add	r7, sp, #0
 804989c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 804989e:	bf00      	nop
 80498a0:	370c      	adds	r7, #12
 80498a2:	46bd      	mov	sp, r7
 80498a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80498a8:	4770      	bx	lr

080498aa <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80498aa:	b480      	push	{r7}
 80498ac:	b083      	sub	sp, #12
 80498ae:	af00      	add	r7, sp, #0
 80498b0:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80498b2:	687b      	ldr	r3, [r7, #4]
 80498b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80498b8:	b2db      	uxtb	r3, r3
}
 80498ba:	4618      	mov	r0, r3
 80498bc:	370c      	adds	r7, #12
 80498be:	46bd      	mov	sp, r7
 80498c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80498c4:	4770      	bx	lr

080498c6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80498c6:	b480      	push	{r7}
 80498c8:	b083      	sub	sp, #12
 80498ca:	af00      	add	r7, sp, #0
 80498cc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80498ce:	687b      	ldr	r3, [r7, #4]
 80498d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80498d2:	4618      	mov	r0, r3
 80498d4:	370c      	adds	r7, #12
 80498d6:	46bd      	mov	sp, r7
 80498d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80498dc:	4770      	bx	lr

080498de <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80498de:	b580      	push	{r7, lr}
 80498e0:	b086      	sub	sp, #24
 80498e2:	af00      	add	r7, sp, #0
 80498e4:	60f8      	str	r0, [r7, #12]
 80498e6:	60b9      	str	r1, [r7, #8]
 80498e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80498ea:	68fb      	ldr	r3, [r7, #12]
 80498ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80498ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80498f0:	68bb      	ldr	r3, [r7, #8]
 80498f2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80498f4:	68fb      	ldr	r3, [r7, #12]
 80498f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80498fa:	2b01      	cmp	r3, #1
 80498fc:	d101      	bne.n	8049902 <I2C_Slave_ISR_IT+0x24>
 80498fe:	2302      	movs	r3, #2
 8049900:	e0ec      	b.n	8049adc <I2C_Slave_ISR_IT+0x1fe>
 8049902:	68fb      	ldr	r3, [r7, #12]
 8049904:	2201      	movs	r2, #1
 8049906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 804990a:	693b      	ldr	r3, [r7, #16]
 804990c:	095b      	lsrs	r3, r3, #5
 804990e:	f003 0301 	and.w	r3, r3, #1
 8049912:	2b00      	cmp	r3, #0
 8049914:	d009      	beq.n	804992a <I2C_Slave_ISR_IT+0x4c>
 8049916:	687b      	ldr	r3, [r7, #4]
 8049918:	095b      	lsrs	r3, r3, #5
 804991a:	f003 0301 	and.w	r3, r3, #1
 804991e:	2b00      	cmp	r3, #0
 8049920:	d003      	beq.n	804992a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8049922:	6939      	ldr	r1, [r7, #16]
 8049924:	68f8      	ldr	r0, [r7, #12]
 8049926:	f000 fa69 	bl	8049dfc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 804992a:	693b      	ldr	r3, [r7, #16]
 804992c:	091b      	lsrs	r3, r3, #4
 804992e:	f003 0301 	and.w	r3, r3, #1
 8049932:	2b00      	cmp	r3, #0
 8049934:	d04d      	beq.n	80499d2 <I2C_Slave_ISR_IT+0xf4>
 8049936:	687b      	ldr	r3, [r7, #4]
 8049938:	091b      	lsrs	r3, r3, #4
 804993a:	f003 0301 	and.w	r3, r3, #1
 804993e:	2b00      	cmp	r3, #0
 8049940:	d047      	beq.n	80499d2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8049942:	68fb      	ldr	r3, [r7, #12]
 8049944:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049946:	b29b      	uxth	r3, r3
 8049948:	2b00      	cmp	r3, #0
 804994a:	d128      	bne.n	804999e <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 804994c:	68fb      	ldr	r3, [r7, #12]
 804994e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049952:	b2db      	uxtb	r3, r3
 8049954:	2b28      	cmp	r3, #40	; 0x28
 8049956:	d108      	bne.n	804996a <I2C_Slave_ISR_IT+0x8c>
 8049958:	697b      	ldr	r3, [r7, #20]
 804995a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804995e:	d104      	bne.n	804996a <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8049960:	6939      	ldr	r1, [r7, #16]
 8049962:	68f8      	ldr	r0, [r7, #12]
 8049964:	f000 fb56 	bl	804a014 <I2C_ITListenCplt>
 8049968:	e032      	b.n	80499d0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 804996a:	68fb      	ldr	r3, [r7, #12]
 804996c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049970:	b2db      	uxtb	r3, r3
 8049972:	2b29      	cmp	r3, #41	; 0x29
 8049974:	d10e      	bne.n	8049994 <I2C_Slave_ISR_IT+0xb6>
 8049976:	697b      	ldr	r3, [r7, #20]
 8049978:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 804997c:	d00a      	beq.n	8049994 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 804997e:	68fb      	ldr	r3, [r7, #12]
 8049980:	681b      	ldr	r3, [r3, #0]
 8049982:	2210      	movs	r2, #16
 8049984:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8049986:	68f8      	ldr	r0, [r7, #12]
 8049988:	f000 fc93 	bl	804a2b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 804998c:	68f8      	ldr	r0, [r7, #12]
 804998e:	f000 f9d5 	bl	8049d3c <I2C_ITSlaveSeqCplt>
 8049992:	e01d      	b.n	80499d0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8049994:	68fb      	ldr	r3, [r7, #12]
 8049996:	681b      	ldr	r3, [r3, #0]
 8049998:	2210      	movs	r2, #16
 804999a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 804999c:	e096      	b.n	8049acc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 804999e:	68fb      	ldr	r3, [r7, #12]
 80499a0:	681b      	ldr	r3, [r3, #0]
 80499a2:	2210      	movs	r2, #16
 80499a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80499a6:	68fb      	ldr	r3, [r7, #12]
 80499a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80499aa:	f043 0204 	orr.w	r2, r3, #4
 80499ae:	68fb      	ldr	r3, [r7, #12]
 80499b0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80499b2:	697b      	ldr	r3, [r7, #20]
 80499b4:	2b00      	cmp	r3, #0
 80499b6:	d004      	beq.n	80499c2 <I2C_Slave_ISR_IT+0xe4>
 80499b8:	697b      	ldr	r3, [r7, #20]
 80499ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80499be:	f040 8085 	bne.w	8049acc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80499c2:	68fb      	ldr	r3, [r7, #12]
 80499c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80499c6:	4619      	mov	r1, r3
 80499c8:	68f8      	ldr	r0, [r7, #12]
 80499ca:	f000 fb79 	bl	804a0c0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80499ce:	e07d      	b.n	8049acc <I2C_Slave_ISR_IT+0x1ee>
 80499d0:	e07c      	b.n	8049acc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80499d2:	693b      	ldr	r3, [r7, #16]
 80499d4:	089b      	lsrs	r3, r3, #2
 80499d6:	f003 0301 	and.w	r3, r3, #1
 80499da:	2b00      	cmp	r3, #0
 80499dc:	d030      	beq.n	8049a40 <I2C_Slave_ISR_IT+0x162>
 80499de:	687b      	ldr	r3, [r7, #4]
 80499e0:	089b      	lsrs	r3, r3, #2
 80499e2:	f003 0301 	and.w	r3, r3, #1
 80499e6:	2b00      	cmp	r3, #0
 80499e8:	d02a      	beq.n	8049a40 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80499ea:	68fb      	ldr	r3, [r7, #12]
 80499ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80499ee:	b29b      	uxth	r3, r3
 80499f0:	2b00      	cmp	r3, #0
 80499f2:	d018      	beq.n	8049a26 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80499f4:	68fb      	ldr	r3, [r7, #12]
 80499f6:	681b      	ldr	r3, [r3, #0]
 80499f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80499fa:	68fb      	ldr	r3, [r7, #12]
 80499fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80499fe:	b2d2      	uxtb	r2, r2
 8049a00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8049a02:	68fb      	ldr	r3, [r7, #12]
 8049a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049a06:	1c5a      	adds	r2, r3, #1
 8049a08:	68fb      	ldr	r3, [r7, #12]
 8049a0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8049a0c:	68fb      	ldr	r3, [r7, #12]
 8049a0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049a10:	3b01      	subs	r3, #1
 8049a12:	b29a      	uxth	r2, r3
 8049a14:	68fb      	ldr	r3, [r7, #12]
 8049a16:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8049a18:	68fb      	ldr	r3, [r7, #12]
 8049a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049a1c:	b29b      	uxth	r3, r3
 8049a1e:	3b01      	subs	r3, #1
 8049a20:	b29a      	uxth	r2, r3
 8049a22:	68fb      	ldr	r3, [r7, #12]
 8049a24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8049a26:	68fb      	ldr	r3, [r7, #12]
 8049a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049a2a:	b29b      	uxth	r3, r3
 8049a2c:	2b00      	cmp	r3, #0
 8049a2e:	d14f      	bne.n	8049ad0 <I2C_Slave_ISR_IT+0x1f2>
 8049a30:	697b      	ldr	r3, [r7, #20]
 8049a32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8049a36:	d04b      	beq.n	8049ad0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8049a38:	68f8      	ldr	r0, [r7, #12]
 8049a3a:	f000 f97f 	bl	8049d3c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8049a3e:	e047      	b.n	8049ad0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8049a40:	693b      	ldr	r3, [r7, #16]
 8049a42:	08db      	lsrs	r3, r3, #3
 8049a44:	f003 0301 	and.w	r3, r3, #1
 8049a48:	2b00      	cmp	r3, #0
 8049a4a:	d00a      	beq.n	8049a62 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8049a4c:	687b      	ldr	r3, [r7, #4]
 8049a4e:	08db      	lsrs	r3, r3, #3
 8049a50:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8049a54:	2b00      	cmp	r3, #0
 8049a56:	d004      	beq.n	8049a62 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8049a58:	6939      	ldr	r1, [r7, #16]
 8049a5a:	68f8      	ldr	r0, [r7, #12]
 8049a5c:	f000 f8ea 	bl	8049c34 <I2C_ITAddrCplt>
 8049a60:	e037      	b.n	8049ad2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8049a62:	693b      	ldr	r3, [r7, #16]
 8049a64:	085b      	lsrs	r3, r3, #1
 8049a66:	f003 0301 	and.w	r3, r3, #1
 8049a6a:	2b00      	cmp	r3, #0
 8049a6c:	d031      	beq.n	8049ad2 <I2C_Slave_ISR_IT+0x1f4>
 8049a6e:	687b      	ldr	r3, [r7, #4]
 8049a70:	085b      	lsrs	r3, r3, #1
 8049a72:	f003 0301 	and.w	r3, r3, #1
 8049a76:	2b00      	cmp	r3, #0
 8049a78:	d02b      	beq.n	8049ad2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8049a7a:	68fb      	ldr	r3, [r7, #12]
 8049a7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049a7e:	b29b      	uxth	r3, r3
 8049a80:	2b00      	cmp	r3, #0
 8049a82:	d018      	beq.n	8049ab6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8049a84:	68fb      	ldr	r3, [r7, #12]
 8049a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049a88:	781a      	ldrb	r2, [r3, #0]
 8049a8a:	68fb      	ldr	r3, [r7, #12]
 8049a8c:	681b      	ldr	r3, [r3, #0]
 8049a8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8049a90:	68fb      	ldr	r3, [r7, #12]
 8049a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049a94:	1c5a      	adds	r2, r3, #1
 8049a96:	68fb      	ldr	r3, [r7, #12]
 8049a98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8049a9a:	68fb      	ldr	r3, [r7, #12]
 8049a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049a9e:	b29b      	uxth	r3, r3
 8049aa0:	3b01      	subs	r3, #1
 8049aa2:	b29a      	uxth	r2, r3
 8049aa4:	68fb      	ldr	r3, [r7, #12]
 8049aa6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8049aa8:	68fb      	ldr	r3, [r7, #12]
 8049aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049aac:	3b01      	subs	r3, #1
 8049aae:	b29a      	uxth	r2, r3
 8049ab0:	68fb      	ldr	r3, [r7, #12]
 8049ab2:	851a      	strh	r2, [r3, #40]	; 0x28
 8049ab4:	e00d      	b.n	8049ad2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8049ab6:	697b      	ldr	r3, [r7, #20]
 8049ab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8049abc:	d002      	beq.n	8049ac4 <I2C_Slave_ISR_IT+0x1e6>
 8049abe:	697b      	ldr	r3, [r7, #20]
 8049ac0:	2b00      	cmp	r3, #0
 8049ac2:	d106      	bne.n	8049ad2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8049ac4:	68f8      	ldr	r0, [r7, #12]
 8049ac6:	f000 f939 	bl	8049d3c <I2C_ITSlaveSeqCplt>
 8049aca:	e002      	b.n	8049ad2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8049acc:	bf00      	nop
 8049ace:	e000      	b.n	8049ad2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8049ad0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8049ad2:	68fb      	ldr	r3, [r7, #12]
 8049ad4:	2200      	movs	r2, #0
 8049ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8049ada:	2300      	movs	r3, #0
}
 8049adc:	4618      	mov	r0, r3
 8049ade:	3718      	adds	r7, #24
 8049ae0:	46bd      	mov	sp, r7
 8049ae2:	bd80      	pop	{r7, pc}

08049ae4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8049ae4:	b580      	push	{r7, lr}
 8049ae6:	b086      	sub	sp, #24
 8049ae8:	af02      	add	r7, sp, #8
 8049aea:	60f8      	str	r0, [r7, #12]
 8049aec:	4608      	mov	r0, r1
 8049aee:	4611      	mov	r1, r2
 8049af0:	461a      	mov	r2, r3
 8049af2:	4603      	mov	r3, r0
 8049af4:	817b      	strh	r3, [r7, #10]
 8049af6:	460b      	mov	r3, r1
 8049af8:	813b      	strh	r3, [r7, #8]
 8049afa:	4613      	mov	r3, r2
 8049afc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8049afe:	88fb      	ldrh	r3, [r7, #6]
 8049b00:	b2da      	uxtb	r2, r3
 8049b02:	8979      	ldrh	r1, [r7, #10]
 8049b04:	4b20      	ldr	r3, [pc, #128]	; (8049b88 <I2C_RequestMemoryWrite+0xa4>)
 8049b06:	9300      	str	r3, [sp, #0]
 8049b08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8049b0c:	68f8      	ldr	r0, [r7, #12]
 8049b0e:	f000 fd35 	bl	804a57c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8049b12:	69fa      	ldr	r2, [r7, #28]
 8049b14:	69b9      	ldr	r1, [r7, #24]
 8049b16:	68f8      	ldr	r0, [r7, #12]
 8049b18:	f000 fc4d 	bl	804a3b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8049b1c:	4603      	mov	r3, r0
 8049b1e:	2b00      	cmp	r3, #0
 8049b20:	d001      	beq.n	8049b26 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8049b22:	2301      	movs	r3, #1
 8049b24:	e02c      	b.n	8049b80 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8049b26:	88fb      	ldrh	r3, [r7, #6]
 8049b28:	2b01      	cmp	r3, #1
 8049b2a:	d105      	bne.n	8049b38 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8049b2c:	893b      	ldrh	r3, [r7, #8]
 8049b2e:	b2da      	uxtb	r2, r3
 8049b30:	68fb      	ldr	r3, [r7, #12]
 8049b32:	681b      	ldr	r3, [r3, #0]
 8049b34:	629a      	str	r2, [r3, #40]	; 0x28
 8049b36:	e015      	b.n	8049b64 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8049b38:	893b      	ldrh	r3, [r7, #8]
 8049b3a:	0a1b      	lsrs	r3, r3, #8
 8049b3c:	b29b      	uxth	r3, r3
 8049b3e:	b2da      	uxtb	r2, r3
 8049b40:	68fb      	ldr	r3, [r7, #12]
 8049b42:	681b      	ldr	r3, [r3, #0]
 8049b44:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8049b46:	69fa      	ldr	r2, [r7, #28]
 8049b48:	69b9      	ldr	r1, [r7, #24]
 8049b4a:	68f8      	ldr	r0, [r7, #12]
 8049b4c:	f000 fc33 	bl	804a3b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8049b50:	4603      	mov	r3, r0
 8049b52:	2b00      	cmp	r3, #0
 8049b54:	d001      	beq.n	8049b5a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8049b56:	2301      	movs	r3, #1
 8049b58:	e012      	b.n	8049b80 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8049b5a:	893b      	ldrh	r3, [r7, #8]
 8049b5c:	b2da      	uxtb	r2, r3
 8049b5e:	68fb      	ldr	r3, [r7, #12]
 8049b60:	681b      	ldr	r3, [r3, #0]
 8049b62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8049b64:	69fb      	ldr	r3, [r7, #28]
 8049b66:	9300      	str	r3, [sp, #0]
 8049b68:	69bb      	ldr	r3, [r7, #24]
 8049b6a:	2200      	movs	r2, #0
 8049b6c:	2180      	movs	r1, #128	; 0x80
 8049b6e:	68f8      	ldr	r0, [r7, #12]
 8049b70:	f000 fbe1 	bl	804a336 <I2C_WaitOnFlagUntilTimeout>
 8049b74:	4603      	mov	r3, r0
 8049b76:	2b00      	cmp	r3, #0
 8049b78:	d001      	beq.n	8049b7e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8049b7a:	2301      	movs	r3, #1
 8049b7c:	e000      	b.n	8049b80 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8049b7e:	2300      	movs	r3, #0
}
 8049b80:	4618      	mov	r0, r3
 8049b82:	3710      	adds	r7, #16
 8049b84:	46bd      	mov	sp, r7
 8049b86:	bd80      	pop	{r7, pc}
 8049b88:	80002000 	.word	0x80002000

08049b8c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8049b8c:	b580      	push	{r7, lr}
 8049b8e:	b086      	sub	sp, #24
 8049b90:	af02      	add	r7, sp, #8
 8049b92:	60f8      	str	r0, [r7, #12]
 8049b94:	4608      	mov	r0, r1
 8049b96:	4611      	mov	r1, r2
 8049b98:	461a      	mov	r2, r3
 8049b9a:	4603      	mov	r3, r0
 8049b9c:	817b      	strh	r3, [r7, #10]
 8049b9e:	460b      	mov	r3, r1
 8049ba0:	813b      	strh	r3, [r7, #8]
 8049ba2:	4613      	mov	r3, r2
 8049ba4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8049ba6:	88fb      	ldrh	r3, [r7, #6]
 8049ba8:	b2da      	uxtb	r2, r3
 8049baa:	8979      	ldrh	r1, [r7, #10]
 8049bac:	4b20      	ldr	r3, [pc, #128]	; (8049c30 <I2C_RequestMemoryRead+0xa4>)
 8049bae:	9300      	str	r3, [sp, #0]
 8049bb0:	2300      	movs	r3, #0
 8049bb2:	68f8      	ldr	r0, [r7, #12]
 8049bb4:	f000 fce2 	bl	804a57c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8049bb8:	69fa      	ldr	r2, [r7, #28]
 8049bba:	69b9      	ldr	r1, [r7, #24]
 8049bbc:	68f8      	ldr	r0, [r7, #12]
 8049bbe:	f000 fbfa 	bl	804a3b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8049bc2:	4603      	mov	r3, r0
 8049bc4:	2b00      	cmp	r3, #0
 8049bc6:	d001      	beq.n	8049bcc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8049bc8:	2301      	movs	r3, #1
 8049bca:	e02c      	b.n	8049c26 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8049bcc:	88fb      	ldrh	r3, [r7, #6]
 8049bce:	2b01      	cmp	r3, #1
 8049bd0:	d105      	bne.n	8049bde <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8049bd2:	893b      	ldrh	r3, [r7, #8]
 8049bd4:	b2da      	uxtb	r2, r3
 8049bd6:	68fb      	ldr	r3, [r7, #12]
 8049bd8:	681b      	ldr	r3, [r3, #0]
 8049bda:	629a      	str	r2, [r3, #40]	; 0x28
 8049bdc:	e015      	b.n	8049c0a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8049bde:	893b      	ldrh	r3, [r7, #8]
 8049be0:	0a1b      	lsrs	r3, r3, #8
 8049be2:	b29b      	uxth	r3, r3
 8049be4:	b2da      	uxtb	r2, r3
 8049be6:	68fb      	ldr	r3, [r7, #12]
 8049be8:	681b      	ldr	r3, [r3, #0]
 8049bea:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8049bec:	69fa      	ldr	r2, [r7, #28]
 8049bee:	69b9      	ldr	r1, [r7, #24]
 8049bf0:	68f8      	ldr	r0, [r7, #12]
 8049bf2:	f000 fbe0 	bl	804a3b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8049bf6:	4603      	mov	r3, r0
 8049bf8:	2b00      	cmp	r3, #0
 8049bfa:	d001      	beq.n	8049c00 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8049bfc:	2301      	movs	r3, #1
 8049bfe:	e012      	b.n	8049c26 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8049c00:	893b      	ldrh	r3, [r7, #8]
 8049c02:	b2da      	uxtb	r2, r3
 8049c04:	68fb      	ldr	r3, [r7, #12]
 8049c06:	681b      	ldr	r3, [r3, #0]
 8049c08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8049c0a:	69fb      	ldr	r3, [r7, #28]
 8049c0c:	9300      	str	r3, [sp, #0]
 8049c0e:	69bb      	ldr	r3, [r7, #24]
 8049c10:	2200      	movs	r2, #0
 8049c12:	2140      	movs	r1, #64	; 0x40
 8049c14:	68f8      	ldr	r0, [r7, #12]
 8049c16:	f000 fb8e 	bl	804a336 <I2C_WaitOnFlagUntilTimeout>
 8049c1a:	4603      	mov	r3, r0
 8049c1c:	2b00      	cmp	r3, #0
 8049c1e:	d001      	beq.n	8049c24 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8049c20:	2301      	movs	r3, #1
 8049c22:	e000      	b.n	8049c26 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8049c24:	2300      	movs	r3, #0
}
 8049c26:	4618      	mov	r0, r3
 8049c28:	3710      	adds	r7, #16
 8049c2a:	46bd      	mov	sp, r7
 8049c2c:	bd80      	pop	{r7, pc}
 8049c2e:	bf00      	nop
 8049c30:	80002000 	.word	0x80002000

08049c34 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8049c34:	b580      	push	{r7, lr}
 8049c36:	b084      	sub	sp, #16
 8049c38:	af00      	add	r7, sp, #0
 8049c3a:	6078      	str	r0, [r7, #4]
 8049c3c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8049c3e:	687b      	ldr	r3, [r7, #4]
 8049c40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049c44:	b2db      	uxtb	r3, r3
 8049c46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8049c4a:	2b28      	cmp	r3, #40	; 0x28
 8049c4c:	d16a      	bne.n	8049d24 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8049c4e:	687b      	ldr	r3, [r7, #4]
 8049c50:	681b      	ldr	r3, [r3, #0]
 8049c52:	699b      	ldr	r3, [r3, #24]
 8049c54:	0c1b      	lsrs	r3, r3, #16
 8049c56:	b2db      	uxtb	r3, r3
 8049c58:	f003 0301 	and.w	r3, r3, #1
 8049c5c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8049c5e:	687b      	ldr	r3, [r7, #4]
 8049c60:	681b      	ldr	r3, [r3, #0]
 8049c62:	699b      	ldr	r3, [r3, #24]
 8049c64:	0c1b      	lsrs	r3, r3, #16
 8049c66:	b29b      	uxth	r3, r3
 8049c68:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8049c6c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8049c6e:	687b      	ldr	r3, [r7, #4]
 8049c70:	681b      	ldr	r3, [r3, #0]
 8049c72:	689b      	ldr	r3, [r3, #8]
 8049c74:	b29b      	uxth	r3, r3
 8049c76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8049c7a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8049c7c:	687b      	ldr	r3, [r7, #4]
 8049c7e:	681b      	ldr	r3, [r3, #0]
 8049c80:	68db      	ldr	r3, [r3, #12]
 8049c82:	b29b      	uxth	r3, r3
 8049c84:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8049c88:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8049c8a:	687b      	ldr	r3, [r7, #4]
 8049c8c:	68db      	ldr	r3, [r3, #12]
 8049c8e:	2b02      	cmp	r3, #2
 8049c90:	d138      	bne.n	8049d04 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8049c92:	897b      	ldrh	r3, [r7, #10]
 8049c94:	09db      	lsrs	r3, r3, #7
 8049c96:	b29a      	uxth	r2, r3
 8049c98:	89bb      	ldrh	r3, [r7, #12]
 8049c9a:	4053      	eors	r3, r2
 8049c9c:	b29b      	uxth	r3, r3
 8049c9e:	f003 0306 	and.w	r3, r3, #6
 8049ca2:	2b00      	cmp	r3, #0
 8049ca4:	d11c      	bne.n	8049ce0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8049ca6:	897b      	ldrh	r3, [r7, #10]
 8049ca8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8049caa:	687b      	ldr	r3, [r7, #4]
 8049cac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8049cae:	1c5a      	adds	r2, r3, #1
 8049cb0:	687b      	ldr	r3, [r7, #4]
 8049cb2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8049cb4:	687b      	ldr	r3, [r7, #4]
 8049cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8049cb8:	2b02      	cmp	r3, #2
 8049cba:	d13b      	bne.n	8049d34 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8049cbc:	687b      	ldr	r3, [r7, #4]
 8049cbe:	2200      	movs	r2, #0
 8049cc0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8049cc2:	687b      	ldr	r3, [r7, #4]
 8049cc4:	681b      	ldr	r3, [r3, #0]
 8049cc6:	2208      	movs	r2, #8
 8049cc8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8049cca:	687b      	ldr	r3, [r7, #4]
 8049ccc:	2200      	movs	r2, #0
 8049cce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8049cd2:	687b      	ldr	r3, [r7, #4]
 8049cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8049cd6:	89ba      	ldrh	r2, [r7, #12]
 8049cd8:	7bf9      	ldrb	r1, [r7, #15]
 8049cda:	6878      	ldr	r0, [r7, #4]
 8049cdc:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8049cde:	e029      	b.n	8049d34 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8049ce0:	893b      	ldrh	r3, [r7, #8]
 8049ce2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8049ce4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8049ce8:	6878      	ldr	r0, [r7, #4]
 8049cea:	f000 fc75 	bl	804a5d8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8049cee:	687b      	ldr	r3, [r7, #4]
 8049cf0:	2200      	movs	r2, #0
 8049cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8049cf6:	687b      	ldr	r3, [r7, #4]
 8049cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8049cfa:	89ba      	ldrh	r2, [r7, #12]
 8049cfc:	7bf9      	ldrb	r1, [r7, #15]
 8049cfe:	6878      	ldr	r0, [r7, #4]
 8049d00:	4798      	blx	r3
}
 8049d02:	e017      	b.n	8049d34 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8049d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8049d08:	6878      	ldr	r0, [r7, #4]
 8049d0a:	f000 fc65 	bl	804a5d8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8049d0e:	687b      	ldr	r3, [r7, #4]
 8049d10:	2200      	movs	r2, #0
 8049d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8049d16:	687b      	ldr	r3, [r7, #4]
 8049d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8049d1a:	89ba      	ldrh	r2, [r7, #12]
 8049d1c:	7bf9      	ldrb	r1, [r7, #15]
 8049d1e:	6878      	ldr	r0, [r7, #4]
 8049d20:	4798      	blx	r3
}
 8049d22:	e007      	b.n	8049d34 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8049d24:	687b      	ldr	r3, [r7, #4]
 8049d26:	681b      	ldr	r3, [r3, #0]
 8049d28:	2208      	movs	r2, #8
 8049d2a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8049d2c:	687b      	ldr	r3, [r7, #4]
 8049d2e:	2200      	movs	r2, #0
 8049d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8049d34:	bf00      	nop
 8049d36:	3710      	adds	r7, #16
 8049d38:	46bd      	mov	sp, r7
 8049d3a:	bd80      	pop	{r7, pc}

08049d3c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8049d3c:	b580      	push	{r7, lr}
 8049d3e:	b084      	sub	sp, #16
 8049d40:	af00      	add	r7, sp, #0
 8049d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8049d44:	687b      	ldr	r3, [r7, #4]
 8049d46:	681b      	ldr	r3, [r3, #0]
 8049d48:	681b      	ldr	r3, [r3, #0]
 8049d4a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8049d4c:	687b      	ldr	r3, [r7, #4]
 8049d4e:	2200      	movs	r2, #0
 8049d50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8049d54:	68fb      	ldr	r3, [r7, #12]
 8049d56:	0b9b      	lsrs	r3, r3, #14
 8049d58:	f003 0301 	and.w	r3, r3, #1
 8049d5c:	2b00      	cmp	r3, #0
 8049d5e:	d008      	beq.n	8049d72 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8049d60:	687b      	ldr	r3, [r7, #4]
 8049d62:	681b      	ldr	r3, [r3, #0]
 8049d64:	681a      	ldr	r2, [r3, #0]
 8049d66:	687b      	ldr	r3, [r7, #4]
 8049d68:	681b      	ldr	r3, [r3, #0]
 8049d6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8049d6e:	601a      	str	r2, [r3, #0]
 8049d70:	e00d      	b.n	8049d8e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8049d72:	68fb      	ldr	r3, [r7, #12]
 8049d74:	0bdb      	lsrs	r3, r3, #15
 8049d76:	f003 0301 	and.w	r3, r3, #1
 8049d7a:	2b00      	cmp	r3, #0
 8049d7c:	d007      	beq.n	8049d8e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8049d7e:	687b      	ldr	r3, [r7, #4]
 8049d80:	681b      	ldr	r3, [r3, #0]
 8049d82:	681a      	ldr	r2, [r3, #0]
 8049d84:	687b      	ldr	r3, [r7, #4]
 8049d86:	681b      	ldr	r3, [r3, #0]
 8049d88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8049d8c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8049d8e:	687b      	ldr	r3, [r7, #4]
 8049d90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049d94:	b2db      	uxtb	r3, r3
 8049d96:	2b29      	cmp	r3, #41	; 0x29
 8049d98:	d113      	bne.n	8049dc2 <I2C_ITSlaveSeqCplt+0x86>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8049d9a:	687b      	ldr	r3, [r7, #4]
 8049d9c:	2228      	movs	r2, #40	; 0x28
 8049d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8049da2:	687b      	ldr	r3, [r7, #4]
 8049da4:	2221      	movs	r2, #33	; 0x21
 8049da6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8049da8:	2101      	movs	r1, #1
 8049daa:	6878      	ldr	r0, [r7, #4]
 8049dac:	f000 fc14 	bl	804a5d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8049db0:	687b      	ldr	r3, [r7, #4]
 8049db2:	2200      	movs	r2, #0
 8049db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 8049db8:	687b      	ldr	r3, [r7, #4]
 8049dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8049dbc:	6878      	ldr	r0, [r7, #4]
 8049dbe:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8049dc0:	e018      	b.n	8049df4 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8049dc2:	687b      	ldr	r3, [r7, #4]
 8049dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049dc8:	b2db      	uxtb	r3, r3
 8049dca:	2b2a      	cmp	r3, #42	; 0x2a
 8049dcc:	d112      	bne.n	8049df4 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8049dce:	687b      	ldr	r3, [r7, #4]
 8049dd0:	2228      	movs	r2, #40	; 0x28
 8049dd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8049dd6:	687b      	ldr	r3, [r7, #4]
 8049dd8:	2222      	movs	r2, #34	; 0x22
 8049dda:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8049ddc:	2102      	movs	r1, #2
 8049dde:	6878      	ldr	r0, [r7, #4]
 8049de0:	f000 fbfa 	bl	804a5d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8049de4:	687b      	ldr	r3, [r7, #4]
 8049de6:	2200      	movs	r2, #0
 8049de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8049dec:	687b      	ldr	r3, [r7, #4]
 8049dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8049df0:	6878      	ldr	r0, [r7, #4]
 8049df2:	4798      	blx	r3
}
 8049df4:	bf00      	nop
 8049df6:	3710      	adds	r7, #16
 8049df8:	46bd      	mov	sp, r7
 8049dfa:	bd80      	pop	{r7, pc}

08049dfc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8049dfc:	b580      	push	{r7, lr}
 8049dfe:	b086      	sub	sp, #24
 8049e00:	af00      	add	r7, sp, #0
 8049e02:	6078      	str	r0, [r7, #4]
 8049e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8049e06:	687b      	ldr	r3, [r7, #4]
 8049e08:	681b      	ldr	r3, [r3, #0]
 8049e0a:	681b      	ldr	r3, [r3, #0]
 8049e0c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8049e0e:	683b      	ldr	r3, [r7, #0]
 8049e10:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8049e12:	687b      	ldr	r3, [r7, #4]
 8049e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049e18:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8049e1a:	687b      	ldr	r3, [r7, #4]
 8049e1c:	681b      	ldr	r3, [r3, #0]
 8049e1e:	2220      	movs	r2, #32
 8049e20:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8049e22:	7bfb      	ldrb	r3, [r7, #15]
 8049e24:	2b21      	cmp	r3, #33	; 0x21
 8049e26:	d002      	beq.n	8049e2e <I2C_ITSlaveCplt+0x32>
 8049e28:	7bfb      	ldrb	r3, [r7, #15]
 8049e2a:	2b29      	cmp	r3, #41	; 0x29
 8049e2c:	d108      	bne.n	8049e40 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8049e2e:	f248 0101 	movw	r1, #32769	; 0x8001
 8049e32:	6878      	ldr	r0, [r7, #4]
 8049e34:	f000 fbd0 	bl	804a5d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8049e38:	687b      	ldr	r3, [r7, #4]
 8049e3a:	2221      	movs	r2, #33	; 0x21
 8049e3c:	631a      	str	r2, [r3, #48]	; 0x30
 8049e3e:	e00d      	b.n	8049e5c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8049e40:	7bfb      	ldrb	r3, [r7, #15]
 8049e42:	2b22      	cmp	r3, #34	; 0x22
 8049e44:	d002      	beq.n	8049e4c <I2C_ITSlaveCplt+0x50>
 8049e46:	7bfb      	ldrb	r3, [r7, #15]
 8049e48:	2b2a      	cmp	r3, #42	; 0x2a
 8049e4a:	d107      	bne.n	8049e5c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8049e4c:	f248 0102 	movw	r1, #32770	; 0x8002
 8049e50:	6878      	ldr	r0, [r7, #4]
 8049e52:	f000 fbc1 	bl	804a5d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8049e56:	687b      	ldr	r3, [r7, #4]
 8049e58:	2222      	movs	r2, #34	; 0x22
 8049e5a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8049e5c:	687b      	ldr	r3, [r7, #4]
 8049e5e:	681b      	ldr	r3, [r3, #0]
 8049e60:	685a      	ldr	r2, [r3, #4]
 8049e62:	687b      	ldr	r3, [r7, #4]
 8049e64:	681b      	ldr	r3, [r3, #0]
 8049e66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8049e6a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8049e6c:	687b      	ldr	r3, [r7, #4]
 8049e6e:	681b      	ldr	r3, [r3, #0]
 8049e70:	6859      	ldr	r1, [r3, #4]
 8049e72:	687b      	ldr	r3, [r7, #4]
 8049e74:	681a      	ldr	r2, [r3, #0]
 8049e76:	4b65      	ldr	r3, [pc, #404]	; (804a00c <I2C_ITSlaveCplt+0x210>)
 8049e78:	400b      	ands	r3, r1
 8049e7a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8049e7c:	6878      	ldr	r0, [r7, #4]
 8049e7e:	f000 fa18 	bl	804a2b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8049e82:	693b      	ldr	r3, [r7, #16]
 8049e84:	0b9b      	lsrs	r3, r3, #14
 8049e86:	f003 0301 	and.w	r3, r3, #1
 8049e8a:	2b00      	cmp	r3, #0
 8049e8c:	d013      	beq.n	8049eb6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8049e8e:	687b      	ldr	r3, [r7, #4]
 8049e90:	681b      	ldr	r3, [r3, #0]
 8049e92:	681a      	ldr	r2, [r3, #0]
 8049e94:	687b      	ldr	r3, [r7, #4]
 8049e96:	681b      	ldr	r3, [r3, #0]
 8049e98:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8049e9c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8049e9e:	687b      	ldr	r3, [r7, #4]
 8049ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049ea2:	2b00      	cmp	r3, #0
 8049ea4:	d020      	beq.n	8049ee8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8049ea6:	687b      	ldr	r3, [r7, #4]
 8049ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8049eaa:	681b      	ldr	r3, [r3, #0]
 8049eac:	685b      	ldr	r3, [r3, #4]
 8049eae:	b29a      	uxth	r2, r3
 8049eb0:	687b      	ldr	r3, [r7, #4]
 8049eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8049eb4:	e018      	b.n	8049ee8 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8049eb6:	693b      	ldr	r3, [r7, #16]
 8049eb8:	0bdb      	lsrs	r3, r3, #15
 8049eba:	f003 0301 	and.w	r3, r3, #1
 8049ebe:	2b00      	cmp	r3, #0
 8049ec0:	d012      	beq.n	8049ee8 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8049ec2:	687b      	ldr	r3, [r7, #4]
 8049ec4:	681b      	ldr	r3, [r3, #0]
 8049ec6:	681a      	ldr	r2, [r3, #0]
 8049ec8:	687b      	ldr	r3, [r7, #4]
 8049eca:	681b      	ldr	r3, [r3, #0]
 8049ecc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8049ed0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8049ed2:	687b      	ldr	r3, [r7, #4]
 8049ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049ed6:	2b00      	cmp	r3, #0
 8049ed8:	d006      	beq.n	8049ee8 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8049eda:	687b      	ldr	r3, [r7, #4]
 8049edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8049ede:	681b      	ldr	r3, [r3, #0]
 8049ee0:	685b      	ldr	r3, [r3, #4]
 8049ee2:	b29a      	uxth	r2, r3
 8049ee4:	687b      	ldr	r3, [r7, #4]
 8049ee6:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8049ee8:	697b      	ldr	r3, [r7, #20]
 8049eea:	089b      	lsrs	r3, r3, #2
 8049eec:	f003 0301 	and.w	r3, r3, #1
 8049ef0:	2b00      	cmp	r3, #0
 8049ef2:	d020      	beq.n	8049f36 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8049ef4:	697b      	ldr	r3, [r7, #20]
 8049ef6:	f023 0304 	bic.w	r3, r3, #4
 8049efa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8049efc:	687b      	ldr	r3, [r7, #4]
 8049efe:	681b      	ldr	r3, [r3, #0]
 8049f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8049f02:	687b      	ldr	r3, [r7, #4]
 8049f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049f06:	b2d2      	uxtb	r2, r2
 8049f08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8049f0a:	687b      	ldr	r3, [r7, #4]
 8049f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049f0e:	1c5a      	adds	r2, r3, #1
 8049f10:	687b      	ldr	r3, [r7, #4]
 8049f12:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8049f14:	687b      	ldr	r3, [r7, #4]
 8049f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049f18:	2b00      	cmp	r3, #0
 8049f1a:	d00c      	beq.n	8049f36 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8049f1c:	687b      	ldr	r3, [r7, #4]
 8049f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049f20:	3b01      	subs	r3, #1
 8049f22:	b29a      	uxth	r2, r3
 8049f24:	687b      	ldr	r3, [r7, #4]
 8049f26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8049f28:	687b      	ldr	r3, [r7, #4]
 8049f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049f2c:	b29b      	uxth	r3, r3
 8049f2e:	3b01      	subs	r3, #1
 8049f30:	b29a      	uxth	r2, r3
 8049f32:	687b      	ldr	r3, [r7, #4]
 8049f34:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8049f36:	687b      	ldr	r3, [r7, #4]
 8049f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049f3a:	b29b      	uxth	r3, r3
 8049f3c:	2b00      	cmp	r3, #0
 8049f3e:	d005      	beq.n	8049f4c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8049f40:	687b      	ldr	r3, [r7, #4]
 8049f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049f44:	f043 0204 	orr.w	r2, r3, #4
 8049f48:	687b      	ldr	r3, [r7, #4]
 8049f4a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8049f4c:	687b      	ldr	r3, [r7, #4]
 8049f4e:	2200      	movs	r2, #0
 8049f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8049f54:	687b      	ldr	r3, [r7, #4]
 8049f56:	2200      	movs	r2, #0
 8049f58:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8049f5a:	687b      	ldr	r3, [r7, #4]
 8049f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049f5e:	2b00      	cmp	r3, #0
 8049f60:	d010      	beq.n	8049f84 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8049f62:	687b      	ldr	r3, [r7, #4]
 8049f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049f66:	4619      	mov	r1, r3
 8049f68:	6878      	ldr	r0, [r7, #4]
 8049f6a:	f000 f8a9 	bl	804a0c0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8049f6e:	687b      	ldr	r3, [r7, #4]
 8049f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049f74:	b2db      	uxtb	r3, r3
 8049f76:	2b28      	cmp	r3, #40	; 0x28
 8049f78:	d144      	bne.n	804a004 <I2C_ITSlaveCplt+0x208>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8049f7a:	6979      	ldr	r1, [r7, #20]
 8049f7c:	6878      	ldr	r0, [r7, #4]
 8049f7e:	f000 f849 	bl	804a014 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8049f82:	e03f      	b.n	804a004 <I2C_ITSlaveCplt+0x208>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8049f84:	687b      	ldr	r3, [r7, #4]
 8049f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049f88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8049f8c:	d015      	beq.n	8049fba <I2C_ITSlaveCplt+0x1be>
    I2C_ITSlaveSeqCplt(hi2c);
 8049f8e:	6878      	ldr	r0, [r7, #4]
 8049f90:	f7ff fed4 	bl	8049d3c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8049f94:	687b      	ldr	r3, [r7, #4]
 8049f96:	4a1e      	ldr	r2, [pc, #120]	; (804a010 <I2C_ITSlaveCplt+0x214>)
 8049f98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8049f9a:	687b      	ldr	r3, [r7, #4]
 8049f9c:	2220      	movs	r2, #32
 8049f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8049fa2:	687b      	ldr	r3, [r7, #4]
 8049fa4:	2200      	movs	r2, #0
 8049fa6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8049fa8:	687b      	ldr	r3, [r7, #4]
 8049faa:	2200      	movs	r2, #0
 8049fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 8049fb0:	687b      	ldr	r3, [r7, #4]
 8049fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8049fb4:	6878      	ldr	r0, [r7, #4]
 8049fb6:	4798      	blx	r3
}
 8049fb8:	e024      	b.n	804a004 <I2C_ITSlaveCplt+0x208>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8049fba:	687b      	ldr	r3, [r7, #4]
 8049fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049fc0:	b2db      	uxtb	r3, r3
 8049fc2:	2b22      	cmp	r3, #34	; 0x22
 8049fc4:	d10f      	bne.n	8049fe6 <I2C_ITSlaveCplt+0x1ea>
    hi2c->State = HAL_I2C_STATE_READY;
 8049fc6:	687b      	ldr	r3, [r7, #4]
 8049fc8:	2220      	movs	r2, #32
 8049fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8049fce:	687b      	ldr	r3, [r7, #4]
 8049fd0:	2200      	movs	r2, #0
 8049fd2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8049fd4:	687b      	ldr	r3, [r7, #4]
 8049fd6:	2200      	movs	r2, #0
 8049fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8049fdc:	687b      	ldr	r3, [r7, #4]
 8049fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8049fe0:	6878      	ldr	r0, [r7, #4]
 8049fe2:	4798      	blx	r3
}
 8049fe4:	e00e      	b.n	804a004 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8049fe6:	687b      	ldr	r3, [r7, #4]
 8049fe8:	2220      	movs	r2, #32
 8049fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8049fee:	687b      	ldr	r3, [r7, #4]
 8049ff0:	2200      	movs	r2, #0
 8049ff2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8049ff4:	687b      	ldr	r3, [r7, #4]
 8049ff6:	2200      	movs	r2, #0
 8049ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 8049ffc:	687b      	ldr	r3, [r7, #4]
 8049ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804a000:	6878      	ldr	r0, [r7, #4]
 804a002:	4798      	blx	r3
}
 804a004:	bf00      	nop
 804a006:	3718      	adds	r7, #24
 804a008:	46bd      	mov	sp, r7
 804a00a:	bd80      	pop	{r7, pc}
 804a00c:	fe00e800 	.word	0xfe00e800
 804a010:	ffff0000 	.word	0xffff0000

0804a014 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 804a014:	b580      	push	{r7, lr}
 804a016:	b082      	sub	sp, #8
 804a018:	af00      	add	r7, sp, #0
 804a01a:	6078      	str	r0, [r7, #4]
 804a01c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 804a01e:	687b      	ldr	r3, [r7, #4]
 804a020:	4a26      	ldr	r2, [pc, #152]	; (804a0bc <I2C_ITListenCplt+0xa8>)
 804a022:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 804a024:	687b      	ldr	r3, [r7, #4]
 804a026:	2200      	movs	r2, #0
 804a028:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 804a02a:	687b      	ldr	r3, [r7, #4]
 804a02c:	2220      	movs	r2, #32
 804a02e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 804a032:	687b      	ldr	r3, [r7, #4]
 804a034:	2200      	movs	r2, #0
 804a036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 804a03a:	687b      	ldr	r3, [r7, #4]
 804a03c:	2200      	movs	r2, #0
 804a03e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 804a040:	683b      	ldr	r3, [r7, #0]
 804a042:	089b      	lsrs	r3, r3, #2
 804a044:	f003 0301 	and.w	r3, r3, #1
 804a048:	2b00      	cmp	r3, #0
 804a04a:	d022      	beq.n	804a092 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 804a04c:	687b      	ldr	r3, [r7, #4]
 804a04e:	681b      	ldr	r3, [r3, #0]
 804a050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804a052:	687b      	ldr	r3, [r7, #4]
 804a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a056:	b2d2      	uxtb	r2, r2
 804a058:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 804a05a:	687b      	ldr	r3, [r7, #4]
 804a05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a05e:	1c5a      	adds	r2, r3, #1
 804a060:	687b      	ldr	r3, [r7, #4]
 804a062:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 804a064:	687b      	ldr	r3, [r7, #4]
 804a066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804a068:	2b00      	cmp	r3, #0
 804a06a:	d012      	beq.n	804a092 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 804a06c:	687b      	ldr	r3, [r7, #4]
 804a06e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804a070:	3b01      	subs	r3, #1
 804a072:	b29a      	uxth	r2, r3
 804a074:	687b      	ldr	r3, [r7, #4]
 804a076:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 804a078:	687b      	ldr	r3, [r7, #4]
 804a07a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804a07c:	b29b      	uxth	r3, r3
 804a07e:	3b01      	subs	r3, #1
 804a080:	b29a      	uxth	r2, r3
 804a082:	687b      	ldr	r3, [r7, #4]
 804a084:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 804a086:	687b      	ldr	r3, [r7, #4]
 804a088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a08a:	f043 0204 	orr.w	r2, r3, #4
 804a08e:	687b      	ldr	r3, [r7, #4]
 804a090:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 804a092:	f248 0103 	movw	r1, #32771	; 0x8003
 804a096:	6878      	ldr	r0, [r7, #4]
 804a098:	f000 fa9e 	bl	804a5d8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 804a09c:	687b      	ldr	r3, [r7, #4]
 804a09e:	681b      	ldr	r3, [r3, #0]
 804a0a0:	2210      	movs	r2, #16
 804a0a2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 804a0a4:	687b      	ldr	r3, [r7, #4]
 804a0a6:	2200      	movs	r2, #0
 804a0a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 804a0ac:	687b      	ldr	r3, [r7, #4]
 804a0ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804a0b0:	6878      	ldr	r0, [r7, #4]
 804a0b2:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 804a0b4:	bf00      	nop
 804a0b6:	3708      	adds	r7, #8
 804a0b8:	46bd      	mov	sp, r7
 804a0ba:	bd80      	pop	{r7, pc}
 804a0bc:	ffff0000 	.word	0xffff0000

0804a0c0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 804a0c0:	b580      	push	{r7, lr}
 804a0c2:	b084      	sub	sp, #16
 804a0c4:	af00      	add	r7, sp, #0
 804a0c6:	6078      	str	r0, [r7, #4]
 804a0c8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 804a0ca:	687b      	ldr	r3, [r7, #4]
 804a0cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a0d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 804a0d2:	687b      	ldr	r3, [r7, #4]
 804a0d4:	2200      	movs	r2, #0
 804a0d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 804a0da:	687b      	ldr	r3, [r7, #4]
 804a0dc:	4a5d      	ldr	r2, [pc, #372]	; (804a254 <I2C_ITError+0x194>)
 804a0de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 804a0e0:	687b      	ldr	r3, [r7, #4]
 804a0e2:	2200      	movs	r2, #0
 804a0e4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 804a0e6:	687b      	ldr	r3, [r7, #4]
 804a0e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804a0ea:	683b      	ldr	r3, [r7, #0]
 804a0ec:	431a      	orrs	r2, r3
 804a0ee:	687b      	ldr	r3, [r7, #4]
 804a0f0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 804a0f2:	7bfb      	ldrb	r3, [r7, #15]
 804a0f4:	2b28      	cmp	r3, #40	; 0x28
 804a0f6:	d005      	beq.n	804a104 <I2C_ITError+0x44>
 804a0f8:	7bfb      	ldrb	r3, [r7, #15]
 804a0fa:	2b29      	cmp	r3, #41	; 0x29
 804a0fc:	d002      	beq.n	804a104 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 804a0fe:	7bfb      	ldrb	r3, [r7, #15]
 804a100:	2b2a      	cmp	r3, #42	; 0x2a
 804a102:	d10b      	bne.n	804a11c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 804a104:	2103      	movs	r1, #3
 804a106:	6878      	ldr	r0, [r7, #4]
 804a108:	f000 fa66 	bl	804a5d8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 804a10c:	687b      	ldr	r3, [r7, #4]
 804a10e:	2228      	movs	r2, #40	; 0x28
 804a110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 804a114:	687b      	ldr	r3, [r7, #4]
 804a116:	4a50      	ldr	r2, [pc, #320]	; (804a258 <I2C_ITError+0x198>)
 804a118:	635a      	str	r2, [r3, #52]	; 0x34
 804a11a:	e011      	b.n	804a140 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 804a11c:	f248 0103 	movw	r1, #32771	; 0x8003
 804a120:	6878      	ldr	r0, [r7, #4]
 804a122:	f000 fa59 	bl	804a5d8 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 804a126:	687b      	ldr	r3, [r7, #4]
 804a128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a12c:	b2db      	uxtb	r3, r3
 804a12e:	2b60      	cmp	r3, #96	; 0x60
 804a130:	d003      	beq.n	804a13a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 804a132:	687b      	ldr	r3, [r7, #4]
 804a134:	2220      	movs	r2, #32
 804a136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 804a13a:	687b      	ldr	r3, [r7, #4]
 804a13c:	2200      	movs	r2, #0
 804a13e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 804a140:	687b      	ldr	r3, [r7, #4]
 804a142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804a144:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 804a146:	687b      	ldr	r3, [r7, #4]
 804a148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a14a:	2b00      	cmp	r3, #0
 804a14c:	d039      	beq.n	804a1c2 <I2C_ITError+0x102>
 804a14e:	68bb      	ldr	r3, [r7, #8]
 804a150:	2b11      	cmp	r3, #17
 804a152:	d002      	beq.n	804a15a <I2C_ITError+0x9a>
 804a154:	68bb      	ldr	r3, [r7, #8]
 804a156:	2b21      	cmp	r3, #33	; 0x21
 804a158:	d133      	bne.n	804a1c2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 804a15a:	687b      	ldr	r3, [r7, #4]
 804a15c:	681b      	ldr	r3, [r3, #0]
 804a15e:	681b      	ldr	r3, [r3, #0]
 804a160:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804a164:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804a168:	d107      	bne.n	804a17a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 804a16a:	687b      	ldr	r3, [r7, #4]
 804a16c:	681b      	ldr	r3, [r3, #0]
 804a16e:	681a      	ldr	r2, [r3, #0]
 804a170:	687b      	ldr	r3, [r7, #4]
 804a172:	681b      	ldr	r3, [r3, #0]
 804a174:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 804a178:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 804a17a:	687b      	ldr	r3, [r7, #4]
 804a17c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a17e:	4618      	mov	r0, r3
 804a180:	f7fe fb93 	bl	80488aa <HAL_DMA_GetState>
 804a184:	4603      	mov	r3, r0
 804a186:	2b01      	cmp	r3, #1
 804a188:	d017      	beq.n	804a1ba <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 804a18a:	687b      	ldr	r3, [r7, #4]
 804a18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a18e:	4a33      	ldr	r2, [pc, #204]	; (804a25c <I2C_ITError+0x19c>)
 804a190:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 804a192:	687b      	ldr	r3, [r7, #4]
 804a194:	2200      	movs	r2, #0
 804a196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 804a19a:	687b      	ldr	r3, [r7, #4]
 804a19c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a19e:	4618      	mov	r0, r3
 804a1a0:	f7fe fa24 	bl	80485ec <HAL_DMA_Abort_IT>
 804a1a4:	4603      	mov	r3, r0
 804a1a6:	2b00      	cmp	r3, #0
 804a1a8:	d04d      	beq.n	804a246 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 804a1aa:	687b      	ldr	r3, [r7, #4]
 804a1ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804a1b0:	687a      	ldr	r2, [r7, #4]
 804a1b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 804a1b4:	4610      	mov	r0, r2
 804a1b6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 804a1b8:	e045      	b.n	804a246 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 804a1ba:	6878      	ldr	r0, [r7, #4]
 804a1bc:	f000 f850 	bl	804a260 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 804a1c0:	e041      	b.n	804a246 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 804a1c2:	687b      	ldr	r3, [r7, #4]
 804a1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a1c6:	2b00      	cmp	r3, #0
 804a1c8:	d039      	beq.n	804a23e <I2C_ITError+0x17e>
 804a1ca:	68bb      	ldr	r3, [r7, #8]
 804a1cc:	2b12      	cmp	r3, #18
 804a1ce:	d002      	beq.n	804a1d6 <I2C_ITError+0x116>
 804a1d0:	68bb      	ldr	r3, [r7, #8]
 804a1d2:	2b22      	cmp	r3, #34	; 0x22
 804a1d4:	d133      	bne.n	804a23e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 804a1d6:	687b      	ldr	r3, [r7, #4]
 804a1d8:	681b      	ldr	r3, [r3, #0]
 804a1da:	681b      	ldr	r3, [r3, #0]
 804a1dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804a1e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804a1e4:	d107      	bne.n	804a1f6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 804a1e6:	687b      	ldr	r3, [r7, #4]
 804a1e8:	681b      	ldr	r3, [r3, #0]
 804a1ea:	681a      	ldr	r2, [r3, #0]
 804a1ec:	687b      	ldr	r3, [r7, #4]
 804a1ee:	681b      	ldr	r3, [r3, #0]
 804a1f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 804a1f4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 804a1f6:	687b      	ldr	r3, [r7, #4]
 804a1f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a1fa:	4618      	mov	r0, r3
 804a1fc:	f7fe fb55 	bl	80488aa <HAL_DMA_GetState>
 804a200:	4603      	mov	r3, r0
 804a202:	2b01      	cmp	r3, #1
 804a204:	d017      	beq.n	804a236 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 804a206:	687b      	ldr	r3, [r7, #4]
 804a208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a20a:	4a14      	ldr	r2, [pc, #80]	; (804a25c <I2C_ITError+0x19c>)
 804a20c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 804a20e:	687b      	ldr	r3, [r7, #4]
 804a210:	2200      	movs	r2, #0
 804a212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 804a216:	687b      	ldr	r3, [r7, #4]
 804a218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a21a:	4618      	mov	r0, r3
 804a21c:	f7fe f9e6 	bl	80485ec <HAL_DMA_Abort_IT>
 804a220:	4603      	mov	r3, r0
 804a222:	2b00      	cmp	r3, #0
 804a224:	d011      	beq.n	804a24a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 804a226:	687b      	ldr	r3, [r7, #4]
 804a228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a22a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804a22c:	687a      	ldr	r2, [r7, #4]
 804a22e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 804a230:	4610      	mov	r0, r2
 804a232:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 804a234:	e009      	b.n	804a24a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 804a236:	6878      	ldr	r0, [r7, #4]
 804a238:	f000 f812 	bl	804a260 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 804a23c:	e005      	b.n	804a24a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 804a23e:	6878      	ldr	r0, [r7, #4]
 804a240:	f000 f80e 	bl	804a260 <I2C_TreatErrorCallback>
  }
}
 804a244:	e002      	b.n	804a24c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 804a246:	bf00      	nop
 804a248:	e000      	b.n	804a24c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 804a24a:	bf00      	nop
}
 804a24c:	bf00      	nop
 804a24e:	3710      	adds	r7, #16
 804a250:	46bd      	mov	sp, r7
 804a252:	bd80      	pop	{r7, pc}
 804a254:	ffff0000 	.word	0xffff0000
 804a258:	080498df 	.word	0x080498df
 804a25c:	0804a2fb 	.word	0x0804a2fb

0804a260 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 804a260:	b580      	push	{r7, lr}
 804a262:	b082      	sub	sp, #8
 804a264:	af00      	add	r7, sp, #0
 804a266:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 804a268:	687b      	ldr	r3, [r7, #4]
 804a26a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a26e:	b2db      	uxtb	r3, r3
 804a270:	2b60      	cmp	r3, #96	; 0x60
 804a272:	d10f      	bne.n	804a294 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 804a274:	687b      	ldr	r3, [r7, #4]
 804a276:	2220      	movs	r2, #32
 804a278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 804a27c:	687b      	ldr	r3, [r7, #4]
 804a27e:	2200      	movs	r2, #0
 804a280:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804a282:	687b      	ldr	r3, [r7, #4]
 804a284:	2200      	movs	r2, #0
 804a286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 804a28a:	687b      	ldr	r3, [r7, #4]
 804a28c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804a28e:	6878      	ldr	r0, [r7, #4]
 804a290:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 804a292:	e00a      	b.n	804a2aa <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 804a294:	687b      	ldr	r3, [r7, #4]
 804a296:	2200      	movs	r2, #0
 804a298:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 804a29a:	687b      	ldr	r3, [r7, #4]
 804a29c:	2200      	movs	r2, #0
 804a29e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 804a2a2:	687b      	ldr	r3, [r7, #4]
 804a2a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 804a2a6:	6878      	ldr	r0, [r7, #4]
 804a2a8:	4798      	blx	r3
}
 804a2aa:	bf00      	nop
 804a2ac:	3708      	adds	r7, #8
 804a2ae:	46bd      	mov	sp, r7
 804a2b0:	bd80      	pop	{r7, pc}

0804a2b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 804a2b2:	b480      	push	{r7}
 804a2b4:	b083      	sub	sp, #12
 804a2b6:	af00      	add	r7, sp, #0
 804a2b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 804a2ba:	687b      	ldr	r3, [r7, #4]
 804a2bc:	681b      	ldr	r3, [r3, #0]
 804a2be:	699b      	ldr	r3, [r3, #24]
 804a2c0:	f003 0302 	and.w	r3, r3, #2
 804a2c4:	2b02      	cmp	r3, #2
 804a2c6:	d103      	bne.n	804a2d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 804a2c8:	687b      	ldr	r3, [r7, #4]
 804a2ca:	681b      	ldr	r3, [r3, #0]
 804a2cc:	2200      	movs	r2, #0
 804a2ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 804a2d0:	687b      	ldr	r3, [r7, #4]
 804a2d2:	681b      	ldr	r3, [r3, #0]
 804a2d4:	699b      	ldr	r3, [r3, #24]
 804a2d6:	f003 0301 	and.w	r3, r3, #1
 804a2da:	2b01      	cmp	r3, #1
 804a2dc:	d007      	beq.n	804a2ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 804a2de:	687b      	ldr	r3, [r7, #4]
 804a2e0:	681b      	ldr	r3, [r3, #0]
 804a2e2:	699a      	ldr	r2, [r3, #24]
 804a2e4:	687b      	ldr	r3, [r7, #4]
 804a2e6:	681b      	ldr	r3, [r3, #0]
 804a2e8:	f042 0201 	orr.w	r2, r2, #1
 804a2ec:	619a      	str	r2, [r3, #24]
  }
}
 804a2ee:	bf00      	nop
 804a2f0:	370c      	adds	r7, #12
 804a2f2:	46bd      	mov	sp, r7
 804a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a2f8:	4770      	bx	lr

0804a2fa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 804a2fa:	b580      	push	{r7, lr}
 804a2fc:	b084      	sub	sp, #16
 804a2fe:	af00      	add	r7, sp, #0
 804a300:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 804a302:	687b      	ldr	r3, [r7, #4]
 804a304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804a306:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 804a308:	68fb      	ldr	r3, [r7, #12]
 804a30a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a30c:	2b00      	cmp	r3, #0
 804a30e:	d003      	beq.n	804a318 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 804a310:	68fb      	ldr	r3, [r7, #12]
 804a312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a314:	2200      	movs	r2, #0
 804a316:	641a      	str	r2, [r3, #64]	; 0x40
  }
  if (hi2c->hdmarx != NULL)
 804a318:	68fb      	ldr	r3, [r7, #12]
 804a31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a31c:	2b00      	cmp	r3, #0
 804a31e:	d003      	beq.n	804a328 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 804a320:	68fb      	ldr	r3, [r7, #12]
 804a322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a324:	2200      	movs	r2, #0
 804a326:	641a      	str	r2, [r3, #64]	; 0x40
  }

  I2C_TreatErrorCallback(hi2c);
 804a328:	68f8      	ldr	r0, [r7, #12]
 804a32a:	f7ff ff99 	bl	804a260 <I2C_TreatErrorCallback>
}
 804a32e:	bf00      	nop
 804a330:	3710      	adds	r7, #16
 804a332:	46bd      	mov	sp, r7
 804a334:	bd80      	pop	{r7, pc}

0804a336 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 804a336:	b580      	push	{r7, lr}
 804a338:	b084      	sub	sp, #16
 804a33a:	af00      	add	r7, sp, #0
 804a33c:	60f8      	str	r0, [r7, #12]
 804a33e:	60b9      	str	r1, [r7, #8]
 804a340:	603b      	str	r3, [r7, #0]
 804a342:	4613      	mov	r3, r2
 804a344:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 804a346:	e022      	b.n	804a38e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804a348:	683b      	ldr	r3, [r7, #0]
 804a34a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804a34e:	d01e      	beq.n	804a38e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804a350:	f7fc fc40 	bl	8046bd4 <HAL_GetTick>
 804a354:	4602      	mov	r2, r0
 804a356:	69bb      	ldr	r3, [r7, #24]
 804a358:	1ad3      	subs	r3, r2, r3
 804a35a:	683a      	ldr	r2, [r7, #0]
 804a35c:	429a      	cmp	r2, r3
 804a35e:	d302      	bcc.n	804a366 <I2C_WaitOnFlagUntilTimeout+0x30>
 804a360:	683b      	ldr	r3, [r7, #0]
 804a362:	2b00      	cmp	r3, #0
 804a364:	d113      	bne.n	804a38e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 804a366:	68fb      	ldr	r3, [r7, #12]
 804a368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a36a:	f043 0220 	orr.w	r2, r3, #32
 804a36e:	68fb      	ldr	r3, [r7, #12]
 804a370:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 804a372:	68fb      	ldr	r3, [r7, #12]
 804a374:	2220      	movs	r2, #32
 804a376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 804a37a:	68fb      	ldr	r3, [r7, #12]
 804a37c:	2200      	movs	r2, #0
 804a37e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 804a382:	68fb      	ldr	r3, [r7, #12]
 804a384:	2200      	movs	r2, #0
 804a386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 804a38a:	2301      	movs	r3, #1
 804a38c:	e00f      	b.n	804a3ae <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 804a38e:	68fb      	ldr	r3, [r7, #12]
 804a390:	681b      	ldr	r3, [r3, #0]
 804a392:	699a      	ldr	r2, [r3, #24]
 804a394:	68bb      	ldr	r3, [r7, #8]
 804a396:	4013      	ands	r3, r2
 804a398:	68ba      	ldr	r2, [r7, #8]
 804a39a:	429a      	cmp	r2, r3
 804a39c:	bf0c      	ite	eq
 804a39e:	2301      	moveq	r3, #1
 804a3a0:	2300      	movne	r3, #0
 804a3a2:	b2db      	uxtb	r3, r3
 804a3a4:	461a      	mov	r2, r3
 804a3a6:	79fb      	ldrb	r3, [r7, #7]
 804a3a8:	429a      	cmp	r2, r3
 804a3aa:	d0cd      	beq.n	804a348 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 804a3ac:	2300      	movs	r3, #0
}
 804a3ae:	4618      	mov	r0, r3
 804a3b0:	3710      	adds	r7, #16
 804a3b2:	46bd      	mov	sp, r7
 804a3b4:	bd80      	pop	{r7, pc}

0804a3b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 804a3b6:	b580      	push	{r7, lr}
 804a3b8:	b084      	sub	sp, #16
 804a3ba:	af00      	add	r7, sp, #0
 804a3bc:	60f8      	str	r0, [r7, #12]
 804a3be:	60b9      	str	r1, [r7, #8]
 804a3c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 804a3c2:	e02c      	b.n	804a41e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 804a3c4:	687a      	ldr	r2, [r7, #4]
 804a3c6:	68b9      	ldr	r1, [r7, #8]
 804a3c8:	68f8      	ldr	r0, [r7, #12]
 804a3ca:	f000 f871 	bl	804a4b0 <I2C_IsAcknowledgeFailed>
 804a3ce:	4603      	mov	r3, r0
 804a3d0:	2b00      	cmp	r3, #0
 804a3d2:	d001      	beq.n	804a3d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 804a3d4:	2301      	movs	r3, #1
 804a3d6:	e02a      	b.n	804a42e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804a3d8:	68bb      	ldr	r3, [r7, #8]
 804a3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 804a3de:	d01e      	beq.n	804a41e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804a3e0:	f7fc fbf8 	bl	8046bd4 <HAL_GetTick>
 804a3e4:	4602      	mov	r2, r0
 804a3e6:	687b      	ldr	r3, [r7, #4]
 804a3e8:	1ad3      	subs	r3, r2, r3
 804a3ea:	68ba      	ldr	r2, [r7, #8]
 804a3ec:	429a      	cmp	r2, r3
 804a3ee:	d302      	bcc.n	804a3f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 804a3f0:	68bb      	ldr	r3, [r7, #8]
 804a3f2:	2b00      	cmp	r3, #0
 804a3f4:	d113      	bne.n	804a41e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 804a3f6:	68fb      	ldr	r3, [r7, #12]
 804a3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a3fa:	f043 0220 	orr.w	r2, r3, #32
 804a3fe:	68fb      	ldr	r3, [r7, #12]
 804a400:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 804a402:	68fb      	ldr	r3, [r7, #12]
 804a404:	2220      	movs	r2, #32
 804a406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 804a40a:	68fb      	ldr	r3, [r7, #12]
 804a40c:	2200      	movs	r2, #0
 804a40e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 804a412:	68fb      	ldr	r3, [r7, #12]
 804a414:	2200      	movs	r2, #0
 804a416:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 804a41a:	2301      	movs	r3, #1
 804a41c:	e007      	b.n	804a42e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 804a41e:	68fb      	ldr	r3, [r7, #12]
 804a420:	681b      	ldr	r3, [r3, #0]
 804a422:	699b      	ldr	r3, [r3, #24]
 804a424:	f003 0302 	and.w	r3, r3, #2
 804a428:	2b02      	cmp	r3, #2
 804a42a:	d1cb      	bne.n	804a3c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 804a42c:	2300      	movs	r3, #0
}
 804a42e:	4618      	mov	r0, r3
 804a430:	3710      	adds	r7, #16
 804a432:	46bd      	mov	sp, r7
 804a434:	bd80      	pop	{r7, pc}

0804a436 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 804a436:	b580      	push	{r7, lr}
 804a438:	b084      	sub	sp, #16
 804a43a:	af00      	add	r7, sp, #0
 804a43c:	60f8      	str	r0, [r7, #12]
 804a43e:	60b9      	str	r1, [r7, #8]
 804a440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 804a442:	e028      	b.n	804a496 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 804a444:	687a      	ldr	r2, [r7, #4]
 804a446:	68b9      	ldr	r1, [r7, #8]
 804a448:	68f8      	ldr	r0, [r7, #12]
 804a44a:	f000 f831 	bl	804a4b0 <I2C_IsAcknowledgeFailed>
 804a44e:	4603      	mov	r3, r0
 804a450:	2b00      	cmp	r3, #0
 804a452:	d001      	beq.n	804a458 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 804a454:	2301      	movs	r3, #1
 804a456:	e026      	b.n	804a4a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804a458:	f7fc fbbc 	bl	8046bd4 <HAL_GetTick>
 804a45c:	4602      	mov	r2, r0
 804a45e:	687b      	ldr	r3, [r7, #4]
 804a460:	1ad3      	subs	r3, r2, r3
 804a462:	68ba      	ldr	r2, [r7, #8]
 804a464:	429a      	cmp	r2, r3
 804a466:	d302      	bcc.n	804a46e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 804a468:	68bb      	ldr	r3, [r7, #8]
 804a46a:	2b00      	cmp	r3, #0
 804a46c:	d113      	bne.n	804a496 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 804a46e:	68fb      	ldr	r3, [r7, #12]
 804a470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a472:	f043 0220 	orr.w	r2, r3, #32
 804a476:	68fb      	ldr	r3, [r7, #12]
 804a478:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 804a47a:	68fb      	ldr	r3, [r7, #12]
 804a47c:	2220      	movs	r2, #32
 804a47e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 804a482:	68fb      	ldr	r3, [r7, #12]
 804a484:	2200      	movs	r2, #0
 804a486:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 804a48a:	68fb      	ldr	r3, [r7, #12]
 804a48c:	2200      	movs	r2, #0
 804a48e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 804a492:	2301      	movs	r3, #1
 804a494:	e007      	b.n	804a4a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 804a496:	68fb      	ldr	r3, [r7, #12]
 804a498:	681b      	ldr	r3, [r3, #0]
 804a49a:	699b      	ldr	r3, [r3, #24]
 804a49c:	f003 0320 	and.w	r3, r3, #32
 804a4a0:	2b20      	cmp	r3, #32
 804a4a2:	d1cf      	bne.n	804a444 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 804a4a4:	2300      	movs	r3, #0
}
 804a4a6:	4618      	mov	r0, r3
 804a4a8:	3710      	adds	r7, #16
 804a4aa:	46bd      	mov	sp, r7
 804a4ac:	bd80      	pop	{r7, pc}
	...

0804a4b0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 804a4b0:	b580      	push	{r7, lr}
 804a4b2:	b084      	sub	sp, #16
 804a4b4:	af00      	add	r7, sp, #0
 804a4b6:	60f8      	str	r0, [r7, #12]
 804a4b8:	60b9      	str	r1, [r7, #8]
 804a4ba:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 804a4bc:	68fb      	ldr	r3, [r7, #12]
 804a4be:	681b      	ldr	r3, [r3, #0]
 804a4c0:	699b      	ldr	r3, [r3, #24]
 804a4c2:	f003 0310 	and.w	r3, r3, #16
 804a4c6:	2b10      	cmp	r3, #16
 804a4c8:	d151      	bne.n	804a56e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 804a4ca:	e022      	b.n	804a512 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 804a4cc:	68bb      	ldr	r3, [r7, #8]
 804a4ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 804a4d2:	d01e      	beq.n	804a512 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804a4d4:	f7fc fb7e 	bl	8046bd4 <HAL_GetTick>
 804a4d8:	4602      	mov	r2, r0
 804a4da:	687b      	ldr	r3, [r7, #4]
 804a4dc:	1ad3      	subs	r3, r2, r3
 804a4de:	68ba      	ldr	r2, [r7, #8]
 804a4e0:	429a      	cmp	r2, r3
 804a4e2:	d302      	bcc.n	804a4ea <I2C_IsAcknowledgeFailed+0x3a>
 804a4e4:	68bb      	ldr	r3, [r7, #8]
 804a4e6:	2b00      	cmp	r3, #0
 804a4e8:	d113      	bne.n	804a512 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 804a4ea:	68fb      	ldr	r3, [r7, #12]
 804a4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a4ee:	f043 0220 	orr.w	r2, r3, #32
 804a4f2:	68fb      	ldr	r3, [r7, #12]
 804a4f4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 804a4f6:	68fb      	ldr	r3, [r7, #12]
 804a4f8:	2220      	movs	r2, #32
 804a4fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 804a4fe:	68fb      	ldr	r3, [r7, #12]
 804a500:	2200      	movs	r2, #0
 804a502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 804a506:	68fb      	ldr	r3, [r7, #12]
 804a508:	2200      	movs	r2, #0
 804a50a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 804a50e:	2301      	movs	r3, #1
 804a510:	e02e      	b.n	804a570 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 804a512:	68fb      	ldr	r3, [r7, #12]
 804a514:	681b      	ldr	r3, [r3, #0]
 804a516:	699b      	ldr	r3, [r3, #24]
 804a518:	f003 0320 	and.w	r3, r3, #32
 804a51c:	2b20      	cmp	r3, #32
 804a51e:	d1d5      	bne.n	804a4cc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 804a520:	68fb      	ldr	r3, [r7, #12]
 804a522:	681b      	ldr	r3, [r3, #0]
 804a524:	2210      	movs	r2, #16
 804a526:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 804a528:	68fb      	ldr	r3, [r7, #12]
 804a52a:	681b      	ldr	r3, [r3, #0]
 804a52c:	2220      	movs	r2, #32
 804a52e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 804a530:	68f8      	ldr	r0, [r7, #12]
 804a532:	f7ff febe 	bl	804a2b2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 804a536:	68fb      	ldr	r3, [r7, #12]
 804a538:	681b      	ldr	r3, [r3, #0]
 804a53a:	6859      	ldr	r1, [r3, #4]
 804a53c:	68fb      	ldr	r3, [r7, #12]
 804a53e:	681a      	ldr	r2, [r3, #0]
 804a540:	4b0d      	ldr	r3, [pc, #52]	; (804a578 <I2C_IsAcknowledgeFailed+0xc8>)
 804a542:	400b      	ands	r3, r1
 804a544:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 804a546:	68fb      	ldr	r3, [r7, #12]
 804a548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a54a:	f043 0204 	orr.w	r2, r3, #4
 804a54e:	68fb      	ldr	r3, [r7, #12]
 804a550:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 804a552:	68fb      	ldr	r3, [r7, #12]
 804a554:	2220      	movs	r2, #32
 804a556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 804a55a:	68fb      	ldr	r3, [r7, #12]
 804a55c:	2200      	movs	r2, #0
 804a55e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804a562:	68fb      	ldr	r3, [r7, #12]
 804a564:	2200      	movs	r2, #0
 804a566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 804a56a:	2301      	movs	r3, #1
 804a56c:	e000      	b.n	804a570 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 804a56e:	2300      	movs	r3, #0
}
 804a570:	4618      	mov	r0, r3
 804a572:	3710      	adds	r7, #16
 804a574:	46bd      	mov	sp, r7
 804a576:	bd80      	pop	{r7, pc}
 804a578:	fe00e800 	.word	0xfe00e800

0804a57c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 804a57c:	b480      	push	{r7}
 804a57e:	b085      	sub	sp, #20
 804a580:	af00      	add	r7, sp, #0
 804a582:	60f8      	str	r0, [r7, #12]
 804a584:	607b      	str	r3, [r7, #4]
 804a586:	460b      	mov	r3, r1
 804a588:	817b      	strh	r3, [r7, #10]
 804a58a:	4613      	mov	r3, r2
 804a58c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 804a58e:	68fb      	ldr	r3, [r7, #12]
 804a590:	681b      	ldr	r3, [r3, #0]
 804a592:	685a      	ldr	r2, [r3, #4]
 804a594:	69bb      	ldr	r3, [r7, #24]
 804a596:	0d5b      	lsrs	r3, r3, #21
 804a598:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 804a59c:	4b0d      	ldr	r3, [pc, #52]	; (804a5d4 <I2C_TransferConfig+0x58>)
 804a59e:	430b      	orrs	r3, r1
 804a5a0:	43db      	mvns	r3, r3
 804a5a2:	ea02 0103 	and.w	r1, r2, r3
 804a5a6:	897b      	ldrh	r3, [r7, #10]
 804a5a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 804a5ac:	7a7b      	ldrb	r3, [r7, #9]
 804a5ae:	041b      	lsls	r3, r3, #16
 804a5b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804a5b4:	431a      	orrs	r2, r3
 804a5b6:	687b      	ldr	r3, [r7, #4]
 804a5b8:	431a      	orrs	r2, r3
 804a5ba:	69bb      	ldr	r3, [r7, #24]
 804a5bc:	431a      	orrs	r2, r3
 804a5be:	68fb      	ldr	r3, [r7, #12]
 804a5c0:	681b      	ldr	r3, [r3, #0]
 804a5c2:	430a      	orrs	r2, r1
 804a5c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 804a5c6:	bf00      	nop
 804a5c8:	3714      	adds	r7, #20
 804a5ca:	46bd      	mov	sp, r7
 804a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a5d0:	4770      	bx	lr
 804a5d2:	bf00      	nop
 804a5d4:	03ff63ff 	.word	0x03ff63ff

0804a5d8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 804a5d8:	b480      	push	{r7}
 804a5da:	b085      	sub	sp, #20
 804a5dc:	af00      	add	r7, sp, #0
 804a5de:	6078      	str	r0, [r7, #4]
 804a5e0:	460b      	mov	r3, r1
 804a5e2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 804a5e4:	2300      	movs	r3, #0
 804a5e6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 804a5e8:	887b      	ldrh	r3, [r7, #2]
 804a5ea:	f003 0301 	and.w	r3, r3, #1
 804a5ee:	2b00      	cmp	r3, #0
 804a5f0:	d00f      	beq.n	804a612 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 804a5f2:	68fb      	ldr	r3, [r7, #12]
 804a5f4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 804a5f8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 804a5fa:	687b      	ldr	r3, [r7, #4]
 804a5fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a600:	b2db      	uxtb	r3, r3
 804a602:	f003 0328 	and.w	r3, r3, #40	; 0x28
 804a606:	2b28      	cmp	r3, #40	; 0x28
 804a608:	d003      	beq.n	804a612 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 804a60a:	68fb      	ldr	r3, [r7, #12]
 804a60c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 804a610:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 804a612:	887b      	ldrh	r3, [r7, #2]
 804a614:	f003 0302 	and.w	r3, r3, #2
 804a618:	2b00      	cmp	r3, #0
 804a61a:	d00f      	beq.n	804a63c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 804a61c:	68fb      	ldr	r3, [r7, #12]
 804a61e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 804a622:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 804a624:	687b      	ldr	r3, [r7, #4]
 804a626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a62a:	b2db      	uxtb	r3, r3
 804a62c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 804a630:	2b28      	cmp	r3, #40	; 0x28
 804a632:	d003      	beq.n	804a63c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 804a634:	68fb      	ldr	r3, [r7, #12]
 804a636:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 804a63a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 804a63c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 804a640:	2b00      	cmp	r3, #0
 804a642:	da03      	bge.n	804a64c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 804a644:	68fb      	ldr	r3, [r7, #12]
 804a646:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 804a64a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 804a64c:	887b      	ldrh	r3, [r7, #2]
 804a64e:	2b10      	cmp	r3, #16
 804a650:	d103      	bne.n	804a65a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 804a652:	68fb      	ldr	r3, [r7, #12]
 804a654:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 804a658:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 804a65a:	887b      	ldrh	r3, [r7, #2]
 804a65c:	2b20      	cmp	r3, #32
 804a65e:	d103      	bne.n	804a668 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 804a660:	68fb      	ldr	r3, [r7, #12]
 804a662:	f043 0320 	orr.w	r3, r3, #32
 804a666:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 804a668:	887b      	ldrh	r3, [r7, #2]
 804a66a:	2b40      	cmp	r3, #64	; 0x40
 804a66c:	d103      	bne.n	804a676 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 804a66e:	68fb      	ldr	r3, [r7, #12]
 804a670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804a674:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 804a676:	687b      	ldr	r3, [r7, #4]
 804a678:	681b      	ldr	r3, [r3, #0]
 804a67a:	6819      	ldr	r1, [r3, #0]
 804a67c:	68fb      	ldr	r3, [r7, #12]
 804a67e:	43da      	mvns	r2, r3
 804a680:	687b      	ldr	r3, [r7, #4]
 804a682:	681b      	ldr	r3, [r3, #0]
 804a684:	400a      	ands	r2, r1
 804a686:	601a      	str	r2, [r3, #0]
}
 804a688:	bf00      	nop
 804a68a:	3714      	adds	r7, #20
 804a68c:	46bd      	mov	sp, r7
 804a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a692:	4770      	bx	lr

0804a694 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 804a694:	b480      	push	{r7}
 804a696:	b083      	sub	sp, #12
 804a698:	af00      	add	r7, sp, #0
 804a69a:	6078      	str	r0, [r7, #4]
 804a69c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 804a69e:	687b      	ldr	r3, [r7, #4]
 804a6a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a6a4:	b2db      	uxtb	r3, r3
 804a6a6:	2b20      	cmp	r3, #32
 804a6a8:	d138      	bne.n	804a71c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 804a6aa:	687b      	ldr	r3, [r7, #4]
 804a6ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 804a6b0:	2b01      	cmp	r3, #1
 804a6b2:	d101      	bne.n	804a6b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 804a6b4:	2302      	movs	r3, #2
 804a6b6:	e032      	b.n	804a71e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 804a6b8:	687b      	ldr	r3, [r7, #4]
 804a6ba:	2201      	movs	r2, #1
 804a6bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 804a6c0:	687b      	ldr	r3, [r7, #4]
 804a6c2:	2224      	movs	r2, #36	; 0x24
 804a6c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 804a6c8:	687b      	ldr	r3, [r7, #4]
 804a6ca:	681b      	ldr	r3, [r3, #0]
 804a6cc:	681a      	ldr	r2, [r3, #0]
 804a6ce:	687b      	ldr	r3, [r7, #4]
 804a6d0:	681b      	ldr	r3, [r3, #0]
 804a6d2:	f022 0201 	bic.w	r2, r2, #1
 804a6d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 804a6d8:	687b      	ldr	r3, [r7, #4]
 804a6da:	681b      	ldr	r3, [r3, #0]
 804a6dc:	681a      	ldr	r2, [r3, #0]
 804a6de:	687b      	ldr	r3, [r7, #4]
 804a6e0:	681b      	ldr	r3, [r3, #0]
 804a6e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 804a6e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 804a6e8:	687b      	ldr	r3, [r7, #4]
 804a6ea:	681b      	ldr	r3, [r3, #0]
 804a6ec:	6819      	ldr	r1, [r3, #0]
 804a6ee:	687b      	ldr	r3, [r7, #4]
 804a6f0:	681b      	ldr	r3, [r3, #0]
 804a6f2:	683a      	ldr	r2, [r7, #0]
 804a6f4:	430a      	orrs	r2, r1
 804a6f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 804a6f8:	687b      	ldr	r3, [r7, #4]
 804a6fa:	681b      	ldr	r3, [r3, #0]
 804a6fc:	681a      	ldr	r2, [r3, #0]
 804a6fe:	687b      	ldr	r3, [r7, #4]
 804a700:	681b      	ldr	r3, [r3, #0]
 804a702:	f042 0201 	orr.w	r2, r2, #1
 804a706:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 804a708:	687b      	ldr	r3, [r7, #4]
 804a70a:	2220      	movs	r2, #32
 804a70c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804a710:	687b      	ldr	r3, [r7, #4]
 804a712:	2200      	movs	r2, #0
 804a714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 804a718:	2300      	movs	r3, #0
 804a71a:	e000      	b.n	804a71e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 804a71c:	2302      	movs	r3, #2
  }
}
 804a71e:	4618      	mov	r0, r3
 804a720:	370c      	adds	r7, #12
 804a722:	46bd      	mov	sp, r7
 804a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a728:	4770      	bx	lr

0804a72a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 804a72a:	b480      	push	{r7}
 804a72c:	b085      	sub	sp, #20
 804a72e:	af00      	add	r7, sp, #0
 804a730:	6078      	str	r0, [r7, #4]
 804a732:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 804a734:	687b      	ldr	r3, [r7, #4]
 804a736:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a73a:	b2db      	uxtb	r3, r3
 804a73c:	2b20      	cmp	r3, #32
 804a73e:	d139      	bne.n	804a7b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 804a740:	687b      	ldr	r3, [r7, #4]
 804a742:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 804a746:	2b01      	cmp	r3, #1
 804a748:	d101      	bne.n	804a74e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 804a74a:	2302      	movs	r3, #2
 804a74c:	e033      	b.n	804a7b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 804a74e:	687b      	ldr	r3, [r7, #4]
 804a750:	2201      	movs	r2, #1
 804a752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 804a756:	687b      	ldr	r3, [r7, #4]
 804a758:	2224      	movs	r2, #36	; 0x24
 804a75a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 804a75e:	687b      	ldr	r3, [r7, #4]
 804a760:	681b      	ldr	r3, [r3, #0]
 804a762:	681a      	ldr	r2, [r3, #0]
 804a764:	687b      	ldr	r3, [r7, #4]
 804a766:	681b      	ldr	r3, [r3, #0]
 804a768:	f022 0201 	bic.w	r2, r2, #1
 804a76c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 804a76e:	687b      	ldr	r3, [r7, #4]
 804a770:	681b      	ldr	r3, [r3, #0]
 804a772:	681b      	ldr	r3, [r3, #0]
 804a774:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 804a776:	68fb      	ldr	r3, [r7, #12]
 804a778:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 804a77c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 804a77e:	683b      	ldr	r3, [r7, #0]
 804a780:	021b      	lsls	r3, r3, #8
 804a782:	68fa      	ldr	r2, [r7, #12]
 804a784:	4313      	orrs	r3, r2
 804a786:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 804a788:	687b      	ldr	r3, [r7, #4]
 804a78a:	681b      	ldr	r3, [r3, #0]
 804a78c:	68fa      	ldr	r2, [r7, #12]
 804a78e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 804a790:	687b      	ldr	r3, [r7, #4]
 804a792:	681b      	ldr	r3, [r3, #0]
 804a794:	681a      	ldr	r2, [r3, #0]
 804a796:	687b      	ldr	r3, [r7, #4]
 804a798:	681b      	ldr	r3, [r3, #0]
 804a79a:	f042 0201 	orr.w	r2, r2, #1
 804a79e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 804a7a0:	687b      	ldr	r3, [r7, #4]
 804a7a2:	2220      	movs	r2, #32
 804a7a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804a7a8:	687b      	ldr	r3, [r7, #4]
 804a7aa:	2200      	movs	r2, #0
 804a7ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 804a7b0:	2300      	movs	r3, #0
 804a7b2:	e000      	b.n	804a7b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 804a7b4:	2302      	movs	r3, #2
  }
}
 804a7b6:	4618      	mov	r0, r3
 804a7b8:	3714      	adds	r7, #20
 804a7ba:	46bd      	mov	sp, r7
 804a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a7c0:	4770      	bx	lr
	...

0804a7c4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 804a7c4:	b480      	push	{r7}
 804a7c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 804a7c8:	4b05      	ldr	r3, [pc, #20]	; (804a7e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 804a7ca:	685b      	ldr	r3, [r3, #4]
 804a7cc:	4a04      	ldr	r2, [pc, #16]	; (804a7e0 <HAL_PWREx_EnableVddIO2+0x1c>)
 804a7ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 804a7d2:	6053      	str	r3, [r2, #4]
}
 804a7d4:	bf00      	nop
 804a7d6:	46bd      	mov	sp, r7
 804a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a7dc:	4770      	bx	lr
 804a7de:	bf00      	nop
 804a7e0:	40007000 	.word	0x40007000

0804a7e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 804a7e4:	b480      	push	{r7}
 804a7e6:	b089      	sub	sp, #36	; 0x24
 804a7e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 804a7ea:	2300      	movs	r3, #0
 804a7ec:	61fb      	str	r3, [r7, #28]
 804a7ee:	2300      	movs	r3, #0
 804a7f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 804a7f2:	4b47      	ldr	r3, [pc, #284]	; (804a910 <HAL_RCC_GetSysClockFreq+0x12c>)
 804a7f4:	689b      	ldr	r3, [r3, #8]
 804a7f6:	f003 030c 	and.w	r3, r3, #12
 804a7fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 804a7fc:	4b44      	ldr	r3, [pc, #272]	; (804a910 <HAL_RCC_GetSysClockFreq+0x12c>)
 804a7fe:	68db      	ldr	r3, [r3, #12]
 804a800:	f003 0303 	and.w	r3, r3, #3
 804a804:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 804a806:	693b      	ldr	r3, [r7, #16]
 804a808:	2b00      	cmp	r3, #0
 804a80a:	d005      	beq.n	804a818 <HAL_RCC_GetSysClockFreq+0x34>
 804a80c:	693b      	ldr	r3, [r7, #16]
 804a80e:	2b0c      	cmp	r3, #12
 804a810:	d121      	bne.n	804a856 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 804a812:	68fb      	ldr	r3, [r7, #12]
 804a814:	2b01      	cmp	r3, #1
 804a816:	d11e      	bne.n	804a856 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 804a818:	4b3d      	ldr	r3, [pc, #244]	; (804a910 <HAL_RCC_GetSysClockFreq+0x12c>)
 804a81a:	681b      	ldr	r3, [r3, #0]
 804a81c:	f003 0308 	and.w	r3, r3, #8
 804a820:	2b00      	cmp	r3, #0
 804a822:	d107      	bne.n	804a834 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 804a824:	4b3a      	ldr	r3, [pc, #232]	; (804a910 <HAL_RCC_GetSysClockFreq+0x12c>)
 804a826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804a82a:	0a1b      	lsrs	r3, r3, #8
 804a82c:	f003 030f 	and.w	r3, r3, #15
 804a830:	61fb      	str	r3, [r7, #28]
 804a832:	e005      	b.n	804a840 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 804a834:	4b36      	ldr	r3, [pc, #216]	; (804a910 <HAL_RCC_GetSysClockFreq+0x12c>)
 804a836:	681b      	ldr	r3, [r3, #0]
 804a838:	091b      	lsrs	r3, r3, #4
 804a83a:	f003 030f 	and.w	r3, r3, #15
 804a83e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 804a840:	4a34      	ldr	r2, [pc, #208]	; (804a914 <HAL_RCC_GetSysClockFreq+0x130>)
 804a842:	69fb      	ldr	r3, [r7, #28]
 804a844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804a848:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 804a84a:	693b      	ldr	r3, [r7, #16]
 804a84c:	2b00      	cmp	r3, #0
 804a84e:	d10d      	bne.n	804a86c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 804a850:	69fb      	ldr	r3, [r7, #28]
 804a852:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 804a854:	e00a      	b.n	804a86c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 804a856:	693b      	ldr	r3, [r7, #16]
 804a858:	2b04      	cmp	r3, #4
 804a85a:	d102      	bne.n	804a862 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 804a85c:	4b2e      	ldr	r3, [pc, #184]	; (804a918 <HAL_RCC_GetSysClockFreq+0x134>)
 804a85e:	61bb      	str	r3, [r7, #24]
 804a860:	e004      	b.n	804a86c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 804a862:	693b      	ldr	r3, [r7, #16]
 804a864:	2b08      	cmp	r3, #8
 804a866:	d101      	bne.n	804a86c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 804a868:	4b2c      	ldr	r3, [pc, #176]	; (804a91c <HAL_RCC_GetSysClockFreq+0x138>)
 804a86a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 804a86c:	693b      	ldr	r3, [r7, #16]
 804a86e:	2b0c      	cmp	r3, #12
 804a870:	d146      	bne.n	804a900 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 804a872:	4b27      	ldr	r3, [pc, #156]	; (804a910 <HAL_RCC_GetSysClockFreq+0x12c>)
 804a874:	68db      	ldr	r3, [r3, #12]
 804a876:	f003 0303 	and.w	r3, r3, #3
 804a87a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 804a87c:	4b24      	ldr	r3, [pc, #144]	; (804a910 <HAL_RCC_GetSysClockFreq+0x12c>)
 804a87e:	68db      	ldr	r3, [r3, #12]
 804a880:	091b      	lsrs	r3, r3, #4
 804a882:	f003 030f 	and.w	r3, r3, #15
 804a886:	3301      	adds	r3, #1
 804a888:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 804a88a:	68bb      	ldr	r3, [r7, #8]
 804a88c:	2b02      	cmp	r3, #2
 804a88e:	d003      	beq.n	804a898 <HAL_RCC_GetSysClockFreq+0xb4>
 804a890:	68bb      	ldr	r3, [r7, #8]
 804a892:	2b03      	cmp	r3, #3
 804a894:	d00d      	beq.n	804a8b2 <HAL_RCC_GetSysClockFreq+0xce>
 804a896:	e019      	b.n	804a8cc <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804a898:	4a1f      	ldr	r2, [pc, #124]	; (804a918 <HAL_RCC_GetSysClockFreq+0x134>)
 804a89a:	687b      	ldr	r3, [r7, #4]
 804a89c:	fbb2 f3f3 	udiv	r3, r2, r3
 804a8a0:	4a1b      	ldr	r2, [pc, #108]	; (804a910 <HAL_RCC_GetSysClockFreq+0x12c>)
 804a8a2:	68d2      	ldr	r2, [r2, #12]
 804a8a4:	0a12      	lsrs	r2, r2, #8
 804a8a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804a8aa:	fb02 f303 	mul.w	r3, r2, r3
 804a8ae:	617b      	str	r3, [r7, #20]
        break;
 804a8b0:	e019      	b.n	804a8e6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804a8b2:	4a1a      	ldr	r2, [pc, #104]	; (804a91c <HAL_RCC_GetSysClockFreq+0x138>)
 804a8b4:	687b      	ldr	r3, [r7, #4]
 804a8b6:	fbb2 f3f3 	udiv	r3, r2, r3
 804a8ba:	4a15      	ldr	r2, [pc, #84]	; (804a910 <HAL_RCC_GetSysClockFreq+0x12c>)
 804a8bc:	68d2      	ldr	r2, [r2, #12]
 804a8be:	0a12      	lsrs	r2, r2, #8
 804a8c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804a8c4:	fb02 f303 	mul.w	r3, r2, r3
 804a8c8:	617b      	str	r3, [r7, #20]
        break;
 804a8ca:	e00c      	b.n	804a8e6 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804a8cc:	69fa      	ldr	r2, [r7, #28]
 804a8ce:	687b      	ldr	r3, [r7, #4]
 804a8d0:	fbb2 f3f3 	udiv	r3, r2, r3
 804a8d4:	4a0e      	ldr	r2, [pc, #56]	; (804a910 <HAL_RCC_GetSysClockFreq+0x12c>)
 804a8d6:	68d2      	ldr	r2, [r2, #12]
 804a8d8:	0a12      	lsrs	r2, r2, #8
 804a8da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804a8de:	fb02 f303 	mul.w	r3, r2, r3
 804a8e2:	617b      	str	r3, [r7, #20]
        break;
 804a8e4:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 804a8e6:	4b0a      	ldr	r3, [pc, #40]	; (804a910 <HAL_RCC_GetSysClockFreq+0x12c>)
 804a8e8:	68db      	ldr	r3, [r3, #12]
 804a8ea:	0e5b      	lsrs	r3, r3, #25
 804a8ec:	f003 0303 	and.w	r3, r3, #3
 804a8f0:	3301      	adds	r3, #1
 804a8f2:	005b      	lsls	r3, r3, #1
 804a8f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 804a8f6:	697a      	ldr	r2, [r7, #20]
 804a8f8:	683b      	ldr	r3, [r7, #0]
 804a8fa:	fbb2 f3f3 	udiv	r3, r2, r3
 804a8fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 804a900:	69bb      	ldr	r3, [r7, #24]
}
 804a902:	4618      	mov	r0, r3
 804a904:	3724      	adds	r7, #36	; 0x24
 804a906:	46bd      	mov	sp, r7
 804a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a90c:	4770      	bx	lr
 804a90e:	bf00      	nop
 804a910:	40021000 	.word	0x40021000
 804a914:	0804e834 	.word	0x0804e834
 804a918:	00f42400 	.word	0x00f42400
 804a91c:	007a1200 	.word	0x007a1200

0804a920 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 804a920:	b580      	push	{r7, lr}
 804a922:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 804a924:	f7ff ff5e 	bl	804a7e4 <HAL_RCC_GetSysClockFreq>
 804a928:	4602      	mov	r2, r0
 804a92a:	4b05      	ldr	r3, [pc, #20]	; (804a940 <HAL_RCC_GetHCLKFreq+0x20>)
 804a92c:	689b      	ldr	r3, [r3, #8]
 804a92e:	091b      	lsrs	r3, r3, #4
 804a930:	f003 030f 	and.w	r3, r3, #15
 804a934:	4903      	ldr	r1, [pc, #12]	; (804a944 <HAL_RCC_GetHCLKFreq+0x24>)
 804a936:	5ccb      	ldrb	r3, [r1, r3]
 804a938:	fa22 f303 	lsr.w	r3, r2, r3
}
 804a93c:	4618      	mov	r0, r3
 804a93e:	bd80      	pop	{r7, pc}
 804a940:	40021000 	.word	0x40021000
 804a944:	0804e81c 	.word	0x0804e81c

0804a948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 804a948:	b580      	push	{r7, lr}
 804a94a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 804a94c:	f7ff ffe8 	bl	804a920 <HAL_RCC_GetHCLKFreq>
 804a950:	4602      	mov	r2, r0
 804a952:	4b05      	ldr	r3, [pc, #20]	; (804a968 <HAL_RCC_GetPCLK1Freq+0x20>)
 804a954:	689b      	ldr	r3, [r3, #8]
 804a956:	0a1b      	lsrs	r3, r3, #8
 804a958:	f003 0307 	and.w	r3, r3, #7
 804a95c:	4903      	ldr	r1, [pc, #12]	; (804a96c <HAL_RCC_GetPCLK1Freq+0x24>)
 804a95e:	5ccb      	ldrb	r3, [r1, r3]
 804a960:	fa22 f303 	lsr.w	r3, r2, r3
}
 804a964:	4618      	mov	r0, r3
 804a966:	bd80      	pop	{r7, pc}
 804a968:	40021000 	.word	0x40021000
 804a96c:	0804e82c 	.word	0x0804e82c

0804a970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 804a970:	b580      	push	{r7, lr}
 804a972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 804a974:	f7ff ffd4 	bl	804a920 <HAL_RCC_GetHCLKFreq>
 804a978:	4602      	mov	r2, r0
 804a97a:	4b05      	ldr	r3, [pc, #20]	; (804a990 <HAL_RCC_GetPCLK2Freq+0x20>)
 804a97c:	689b      	ldr	r3, [r3, #8]
 804a97e:	0adb      	lsrs	r3, r3, #11
 804a980:	f003 0307 	and.w	r3, r3, #7
 804a984:	4903      	ldr	r1, [pc, #12]	; (804a994 <HAL_RCC_GetPCLK2Freq+0x24>)
 804a986:	5ccb      	ldrb	r3, [r1, r3]
 804a988:	fa22 f303 	lsr.w	r3, r2, r3
}
 804a98c:	4618      	mov	r0, r3
 804a98e:	bd80      	pop	{r7, pc}
 804a990:	40021000 	.word	0x40021000
 804a994:	0804e82c 	.word	0x0804e82c

0804a998 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 804a998:	b480      	push	{r7}
 804a99a:	b083      	sub	sp, #12
 804a99c:	af00      	add	r7, sp, #0
 804a99e:	6078      	str	r0, [r7, #4]
 804a9a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 804a9a2:	687b      	ldr	r3, [r7, #4]
 804a9a4:	220f      	movs	r2, #15
 804a9a6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 804a9a8:	4b12      	ldr	r3, [pc, #72]	; (804a9f4 <HAL_RCC_GetClockConfig+0x5c>)
 804a9aa:	689b      	ldr	r3, [r3, #8]
 804a9ac:	f003 0203 	and.w	r2, r3, #3
 804a9b0:	687b      	ldr	r3, [r7, #4]
 804a9b2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 804a9b4:	4b0f      	ldr	r3, [pc, #60]	; (804a9f4 <HAL_RCC_GetClockConfig+0x5c>)
 804a9b6:	689b      	ldr	r3, [r3, #8]
 804a9b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 804a9bc:	687b      	ldr	r3, [r7, #4]
 804a9be:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 804a9c0:	4b0c      	ldr	r3, [pc, #48]	; (804a9f4 <HAL_RCC_GetClockConfig+0x5c>)
 804a9c2:	689b      	ldr	r3, [r3, #8]
 804a9c4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 804a9c8:	687b      	ldr	r3, [r7, #4]
 804a9ca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 804a9cc:	4b09      	ldr	r3, [pc, #36]	; (804a9f4 <HAL_RCC_GetClockConfig+0x5c>)
 804a9ce:	689b      	ldr	r3, [r3, #8]
 804a9d0:	08db      	lsrs	r3, r3, #3
 804a9d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 804a9d6:	687b      	ldr	r3, [r7, #4]
 804a9d8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 804a9da:	4b07      	ldr	r3, [pc, #28]	; (804a9f8 <HAL_RCC_GetClockConfig+0x60>)
 804a9dc:	681b      	ldr	r3, [r3, #0]
 804a9de:	f003 020f 	and.w	r2, r3, #15
 804a9e2:	683b      	ldr	r3, [r7, #0]
 804a9e4:	601a      	str	r2, [r3, #0]
}
 804a9e6:	bf00      	nop
 804a9e8:	370c      	adds	r7, #12
 804a9ea:	46bd      	mov	sp, r7
 804a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a9f0:	4770      	bx	lr
 804a9f2:	bf00      	nop
 804a9f4:	40021000 	.word	0x40021000
 804a9f8:	40022000 	.word	0x40022000

0804a9fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 804a9fc:	b580      	push	{r7, lr}
 804a9fe:	b088      	sub	sp, #32
 804aa00:	af00      	add	r7, sp, #0
 804aa02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 804aa04:	2300      	movs	r3, #0
 804aa06:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 804aa08:	2300      	movs	r3, #0
 804aa0a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 804aa0c:	687b      	ldr	r3, [r7, #4]
 804aa0e:	681b      	ldr	r3, [r3, #0]
 804aa10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804aa14:	2b00      	cmp	r3, #0
 804aa16:	d040      	beq.n	804aa9a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 804aa18:	687b      	ldr	r3, [r7, #4]
 804aa1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804aa1c:	2b80      	cmp	r3, #128	; 0x80
 804aa1e:	d02a      	beq.n	804aa76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 804aa20:	2b80      	cmp	r3, #128	; 0x80
 804aa22:	d825      	bhi.n	804aa70 <HAL_RCCEx_PeriphCLKConfig+0x74>
 804aa24:	2b60      	cmp	r3, #96	; 0x60
 804aa26:	d026      	beq.n	804aa76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 804aa28:	2b60      	cmp	r3, #96	; 0x60
 804aa2a:	d821      	bhi.n	804aa70 <HAL_RCCEx_PeriphCLKConfig+0x74>
 804aa2c:	2b40      	cmp	r3, #64	; 0x40
 804aa2e:	d006      	beq.n	804aa3e <HAL_RCCEx_PeriphCLKConfig+0x42>
 804aa30:	2b40      	cmp	r3, #64	; 0x40
 804aa32:	d81d      	bhi.n	804aa70 <HAL_RCCEx_PeriphCLKConfig+0x74>
 804aa34:	2b00      	cmp	r3, #0
 804aa36:	d009      	beq.n	804aa4c <HAL_RCCEx_PeriphCLKConfig+0x50>
 804aa38:	2b20      	cmp	r3, #32
 804aa3a:	d010      	beq.n	804aa5e <HAL_RCCEx_PeriphCLKConfig+0x62>
 804aa3c:	e018      	b.n	804aa70 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 804aa3e:	4b87      	ldr	r3, [pc, #540]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804aa40:	68db      	ldr	r3, [r3, #12]
 804aa42:	4a86      	ldr	r2, [pc, #536]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804aa44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804aa48:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 804aa4a:	e015      	b.n	804aa78 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 804aa4c:	687b      	ldr	r3, [r7, #4]
 804aa4e:	3304      	adds	r3, #4
 804aa50:	2100      	movs	r1, #0
 804aa52:	4618      	mov	r0, r3
 804aa54:	f000 fb46 	bl	804b0e4 <RCCEx_PLLSAI1_Config>
 804aa58:	4603      	mov	r3, r0
 804aa5a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 804aa5c:	e00c      	b.n	804aa78 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 804aa5e:	687b      	ldr	r3, [r7, #4]
 804aa60:	3320      	adds	r3, #32
 804aa62:	2100      	movs	r1, #0
 804aa64:	4618      	mov	r0, r3
 804aa66:	f000 fc13 	bl	804b290 <RCCEx_PLLSAI2_Config>
 804aa6a:	4603      	mov	r3, r0
 804aa6c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 804aa6e:	e003      	b.n	804aa78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804aa70:	2301      	movs	r3, #1
 804aa72:	77fb      	strb	r3, [r7, #31]
        break;
 804aa74:	e000      	b.n	804aa78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 804aa76:	bf00      	nop
    }

    if (ret == HAL_OK)
 804aa78:	7ffb      	ldrb	r3, [r7, #31]
 804aa7a:	2b00      	cmp	r3, #0
 804aa7c:	d10b      	bne.n	804aa96 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 804aa7e:	4b77      	ldr	r3, [pc, #476]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804aa80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804aa84:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 804aa88:	687b      	ldr	r3, [r7, #4]
 804aa8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804aa8c:	4973      	ldr	r1, [pc, #460]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804aa8e:	4313      	orrs	r3, r2
 804aa90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 804aa94:	e001      	b.n	804aa9a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804aa96:	7ffb      	ldrb	r3, [r7, #31]
 804aa98:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 804aa9a:	687b      	ldr	r3, [r7, #4]
 804aa9c:	681b      	ldr	r3, [r3, #0]
 804aa9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804aaa2:	2b00      	cmp	r3, #0
 804aaa4:	d047      	beq.n	804ab36 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 804aaa6:	687b      	ldr	r3, [r7, #4]
 804aaa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804aaaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804aaae:	d030      	beq.n	804ab12 <HAL_RCCEx_PeriphCLKConfig+0x116>
 804aab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804aab4:	d82a      	bhi.n	804ab0c <HAL_RCCEx_PeriphCLKConfig+0x110>
 804aab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804aaba:	d02a      	beq.n	804ab12 <HAL_RCCEx_PeriphCLKConfig+0x116>
 804aabc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804aac0:	d824      	bhi.n	804ab0c <HAL_RCCEx_PeriphCLKConfig+0x110>
 804aac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804aac6:	d008      	beq.n	804aada <HAL_RCCEx_PeriphCLKConfig+0xde>
 804aac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804aacc:	d81e      	bhi.n	804ab0c <HAL_RCCEx_PeriphCLKConfig+0x110>
 804aace:	2b00      	cmp	r3, #0
 804aad0:	d00a      	beq.n	804aae8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 804aad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804aad6:	d010      	beq.n	804aafa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 804aad8:	e018      	b.n	804ab0c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 804aada:	4b60      	ldr	r3, [pc, #384]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804aadc:	68db      	ldr	r3, [r3, #12]
 804aade:	4a5f      	ldr	r2, [pc, #380]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804aae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804aae4:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804aae6:	e015      	b.n	804ab14 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 804aae8:	687b      	ldr	r3, [r7, #4]
 804aaea:	3304      	adds	r3, #4
 804aaec:	2100      	movs	r1, #0
 804aaee:	4618      	mov	r0, r3
 804aaf0:	f000 faf8 	bl	804b0e4 <RCCEx_PLLSAI1_Config>
 804aaf4:	4603      	mov	r3, r0
 804aaf6:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804aaf8:	e00c      	b.n	804ab14 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 804aafa:	687b      	ldr	r3, [r7, #4]
 804aafc:	3320      	adds	r3, #32
 804aafe:	2100      	movs	r1, #0
 804ab00:	4618      	mov	r0, r3
 804ab02:	f000 fbc5 	bl	804b290 <RCCEx_PLLSAI2_Config>
 804ab06:	4603      	mov	r3, r0
 804ab08:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804ab0a:	e003      	b.n	804ab14 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804ab0c:	2301      	movs	r3, #1
 804ab0e:	77fb      	strb	r3, [r7, #31]
        break;
 804ab10:	e000      	b.n	804ab14 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 804ab12:	bf00      	nop
    }

    if (ret == HAL_OK)
 804ab14:	7ffb      	ldrb	r3, [r7, #31]
 804ab16:	2b00      	cmp	r3, #0
 804ab18:	d10b      	bne.n	804ab32 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 804ab1a:	4b50      	ldr	r3, [pc, #320]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ab1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804ab20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 804ab24:	687b      	ldr	r3, [r7, #4]
 804ab26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804ab28:	494c      	ldr	r1, [pc, #304]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ab2a:	4313      	orrs	r3, r2
 804ab2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 804ab30:	e001      	b.n	804ab36 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804ab32:	7ffb      	ldrb	r3, [r7, #31]
 804ab34:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 804ab36:	687b      	ldr	r3, [r7, #4]
 804ab38:	681b      	ldr	r3, [r3, #0]
 804ab3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804ab3e:	2b00      	cmp	r3, #0
 804ab40:	f000 809b 	beq.w	804ac7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 804ab44:	2300      	movs	r3, #0
 804ab46:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 804ab48:	4b44      	ldr	r3, [pc, #272]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ab4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804ab4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804ab50:	2b00      	cmp	r3, #0
 804ab52:	d10d      	bne.n	804ab70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 804ab54:	4b41      	ldr	r3, [pc, #260]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ab56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804ab58:	4a40      	ldr	r2, [pc, #256]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ab5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804ab5e:	6593      	str	r3, [r2, #88]	; 0x58
 804ab60:	4b3e      	ldr	r3, [pc, #248]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ab62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804ab64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804ab68:	60fb      	str	r3, [r7, #12]
 804ab6a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 804ab6c:	2301      	movs	r3, #1
 804ab6e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 804ab70:	4b3b      	ldr	r3, [pc, #236]	; (804ac60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 804ab72:	681b      	ldr	r3, [r3, #0]
 804ab74:	4a3a      	ldr	r2, [pc, #232]	; (804ac60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 804ab76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804ab7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 804ab7c:	f7fc f82a 	bl	8046bd4 <HAL_GetTick>
 804ab80:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804ab82:	e009      	b.n	804ab98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804ab84:	f7fc f826 	bl	8046bd4 <HAL_GetTick>
 804ab88:	4602      	mov	r2, r0
 804ab8a:	693b      	ldr	r3, [r7, #16]
 804ab8c:	1ad3      	subs	r3, r2, r3
 804ab8e:	2b02      	cmp	r3, #2
 804ab90:	d902      	bls.n	804ab98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 804ab92:	2303      	movs	r3, #3
 804ab94:	77fb      	strb	r3, [r7, #31]
        break;
 804ab96:	e005      	b.n	804aba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804ab98:	4b31      	ldr	r3, [pc, #196]	; (804ac60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 804ab9a:	681b      	ldr	r3, [r3, #0]
 804ab9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804aba0:	2b00      	cmp	r3, #0
 804aba2:	d0ef      	beq.n	804ab84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if (ret == HAL_OK)
 804aba4:	7ffb      	ldrb	r3, [r7, #31]
 804aba6:	2b00      	cmp	r3, #0
 804aba8:	d15c      	bne.n	804ac64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 804abaa:	4b2c      	ldr	r3, [pc, #176]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804abac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804abb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804abb4:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 804abb6:	69bb      	ldr	r3, [r7, #24]
 804abb8:	2b00      	cmp	r3, #0
 804abba:	d01f      	beq.n	804abfc <HAL_RCCEx_PeriphCLKConfig+0x200>
 804abbc:	687b      	ldr	r3, [r7, #4]
 804abbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804abc2:	69ba      	ldr	r2, [r7, #24]
 804abc4:	429a      	cmp	r2, r3
 804abc6:	d019      	beq.n	804abfc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 804abc8:	4b24      	ldr	r3, [pc, #144]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804abca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804abce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804abd2:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 804abd4:	4b21      	ldr	r3, [pc, #132]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804abd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804abda:	4a20      	ldr	r2, [pc, #128]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804abdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804abe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 804abe4:	4b1d      	ldr	r3, [pc, #116]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804abe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804abea:	4a1c      	ldr	r2, [pc, #112]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804abec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804abf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 804abf4:	4a19      	ldr	r2, [pc, #100]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804abf6:	69bb      	ldr	r3, [r7, #24]
 804abf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 804abfc:	69bb      	ldr	r3, [r7, #24]
 804abfe:	f003 0301 	and.w	r3, r3, #1
 804ac02:	2b00      	cmp	r3, #0
 804ac04:	d016      	beq.n	804ac34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804ac06:	f7fb ffe5 	bl	8046bd4 <HAL_GetTick>
 804ac0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804ac0c:	e00b      	b.n	804ac26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804ac0e:	f7fb ffe1 	bl	8046bd4 <HAL_GetTick>
 804ac12:	4602      	mov	r2, r0
 804ac14:	693b      	ldr	r3, [r7, #16]
 804ac16:	1ad3      	subs	r3, r2, r3
 804ac18:	f241 3288 	movw	r2, #5000	; 0x1388
 804ac1c:	4293      	cmp	r3, r2
 804ac1e:	d902      	bls.n	804ac26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 804ac20:	2303      	movs	r3, #3
 804ac22:	77fb      	strb	r3, [r7, #31]
            break;
 804ac24:	e006      	b.n	804ac34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804ac26:	4b0d      	ldr	r3, [pc, #52]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ac28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804ac2c:	f003 0302 	and.w	r3, r3, #2
 804ac30:	2b00      	cmp	r3, #0
 804ac32:	d0ec      	beq.n	804ac0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if (ret == HAL_OK)
 804ac34:	7ffb      	ldrb	r3, [r7, #31]
 804ac36:	2b00      	cmp	r3, #0
 804ac38:	d10c      	bne.n	804ac54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804ac3a:	4b08      	ldr	r3, [pc, #32]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ac3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804ac40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 804ac44:	687b      	ldr	r3, [r7, #4]
 804ac46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804ac4a:	4904      	ldr	r1, [pc, #16]	; (804ac5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ac4c:	4313      	orrs	r3, r2
 804ac4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 804ac52:	e009      	b.n	804ac68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 804ac54:	7ffb      	ldrb	r3, [r7, #31]
 804ac56:	77bb      	strb	r3, [r7, #30]
 804ac58:	e006      	b.n	804ac68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 804ac5a:	bf00      	nop
 804ac5c:	40021000 	.word	0x40021000
 804ac60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 804ac64:	7ffb      	ldrb	r3, [r7, #31]
 804ac66:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 804ac68:	7dfb      	ldrb	r3, [r7, #23]
 804ac6a:	2b01      	cmp	r3, #1
 804ac6c:	d105      	bne.n	804ac7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 804ac6e:	4baf      	ldr	r3, [pc, #700]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ac70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804ac72:	4aae      	ldr	r2, [pc, #696]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ac74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804ac78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 804ac7a:	687b      	ldr	r3, [r7, #4]
 804ac7c:	681b      	ldr	r3, [r3, #0]
 804ac7e:	f003 0301 	and.w	r3, r3, #1
 804ac82:	2b00      	cmp	r3, #0
 804ac84:	d00a      	beq.n	804ac9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 804ac86:	4ba9      	ldr	r3, [pc, #676]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ac88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804ac8c:	f023 0203 	bic.w	r2, r3, #3
 804ac90:	687b      	ldr	r3, [r7, #4]
 804ac92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804ac94:	49a5      	ldr	r1, [pc, #660]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ac96:	4313      	orrs	r3, r2
 804ac98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 804ac9c:	687b      	ldr	r3, [r7, #4]
 804ac9e:	681b      	ldr	r3, [r3, #0]
 804aca0:	f003 0302 	and.w	r3, r3, #2
 804aca4:	2b00      	cmp	r3, #0
 804aca6:	d00a      	beq.n	804acbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 804aca8:	4ba0      	ldr	r3, [pc, #640]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804acaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804acae:	f023 020c 	bic.w	r2, r3, #12
 804acb2:	687b      	ldr	r3, [r7, #4]
 804acb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804acb6:	499d      	ldr	r1, [pc, #628]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804acb8:	4313      	orrs	r3, r2
 804acba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 804acbe:	687b      	ldr	r3, [r7, #4]
 804acc0:	681b      	ldr	r3, [r3, #0]
 804acc2:	f003 0304 	and.w	r3, r3, #4
 804acc6:	2b00      	cmp	r3, #0
 804acc8:	d00a      	beq.n	804ace0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 804acca:	4b98      	ldr	r3, [pc, #608]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804accc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804acd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 804acd4:	687b      	ldr	r3, [r7, #4]
 804acd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804acd8:	4994      	ldr	r1, [pc, #592]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804acda:	4313      	orrs	r3, r2
 804acdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 804ace0:	687b      	ldr	r3, [r7, #4]
 804ace2:	681b      	ldr	r3, [r3, #0]
 804ace4:	f003 0308 	and.w	r3, r3, #8
 804ace8:	2b00      	cmp	r3, #0
 804acea:	d00a      	beq.n	804ad02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 804acec:	4b8f      	ldr	r3, [pc, #572]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804acee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804acf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 804acf6:	687b      	ldr	r3, [r7, #4]
 804acf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804acfa:	498c      	ldr	r1, [pc, #560]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804acfc:	4313      	orrs	r3, r2
 804acfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 804ad02:	687b      	ldr	r3, [r7, #4]
 804ad04:	681b      	ldr	r3, [r3, #0]
 804ad06:	f003 0310 	and.w	r3, r3, #16
 804ad0a:	2b00      	cmp	r3, #0
 804ad0c:	d00a      	beq.n	804ad24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 804ad0e:	4b87      	ldr	r3, [pc, #540]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ad10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804ad14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 804ad18:	687b      	ldr	r3, [r7, #4]
 804ad1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804ad1c:	4983      	ldr	r1, [pc, #524]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ad1e:	4313      	orrs	r3, r2
 804ad20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 804ad24:	687b      	ldr	r3, [r7, #4]
 804ad26:	681b      	ldr	r3, [r3, #0]
 804ad28:	f003 0320 	and.w	r3, r3, #32
 804ad2c:	2b00      	cmp	r3, #0
 804ad2e:	d00a      	beq.n	804ad46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 804ad30:	4b7e      	ldr	r3, [pc, #504]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ad32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804ad36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 804ad3a:	687b      	ldr	r3, [r7, #4]
 804ad3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804ad3e:	497b      	ldr	r1, [pc, #492]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ad40:	4313      	orrs	r3, r2
 804ad42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 804ad46:	687b      	ldr	r3, [r7, #4]
 804ad48:	681b      	ldr	r3, [r3, #0]
 804ad4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804ad4e:	2b00      	cmp	r3, #0
 804ad50:	d00a      	beq.n	804ad68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 804ad52:	4b76      	ldr	r3, [pc, #472]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ad54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804ad58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 804ad5c:	687b      	ldr	r3, [r7, #4]
 804ad5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804ad60:	4972      	ldr	r1, [pc, #456]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ad62:	4313      	orrs	r3, r2
 804ad64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 804ad68:	687b      	ldr	r3, [r7, #4]
 804ad6a:	681b      	ldr	r3, [r3, #0]
 804ad6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804ad70:	2b00      	cmp	r3, #0
 804ad72:	d00a      	beq.n	804ad8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 804ad74:	4b6d      	ldr	r3, [pc, #436]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ad76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804ad7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 804ad7e:	687b      	ldr	r3, [r7, #4]
 804ad80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804ad82:	496a      	ldr	r1, [pc, #424]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ad84:	4313      	orrs	r3, r2
 804ad86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 804ad8a:	687b      	ldr	r3, [r7, #4]
 804ad8c:	681b      	ldr	r3, [r3, #0]
 804ad8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804ad92:	2b00      	cmp	r3, #0
 804ad94:	d00a      	beq.n	804adac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 804ad96:	4b65      	ldr	r3, [pc, #404]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ad98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804ad9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 804ada0:	687b      	ldr	r3, [r7, #4]
 804ada2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804ada4:	4961      	ldr	r1, [pc, #388]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ada6:	4313      	orrs	r3, r2
 804ada8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 804adac:	687b      	ldr	r3, [r7, #4]
 804adae:	681b      	ldr	r3, [r3, #0]
 804adb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804adb4:	2b00      	cmp	r3, #0
 804adb6:	d031      	beq.n	804ae1c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 804adb8:	687b      	ldr	r3, [r7, #4]
 804adba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 804adbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804adc0:	d00e      	beq.n	804ade0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 804adc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804adc6:	d814      	bhi.n	804adf2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 804adc8:	2b00      	cmp	r3, #0
 804adca:	d015      	beq.n	804adf8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 804adcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 804add0:	d10f      	bne.n	804adf2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804add2:	4b56      	ldr	r3, [pc, #344]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804add4:	68db      	ldr	r3, [r3, #12]
 804add6:	4a55      	ldr	r2, [pc, #340]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804add8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804addc:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 804adde:	e00c      	b.n	804adfa <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 804ade0:	687b      	ldr	r3, [r7, #4]
 804ade2:	3304      	adds	r3, #4
 804ade4:	2100      	movs	r1, #0
 804ade6:	4618      	mov	r0, r3
 804ade8:	f000 f97c 	bl	804b0e4 <RCCEx_PLLSAI1_Config>
 804adec:	4603      	mov	r3, r0
 804adee:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 804adf0:	e003      	b.n	804adfa <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      default:
        ret = HAL_ERROR;
 804adf2:	2301      	movs	r3, #1
 804adf4:	77fb      	strb	r3, [r7, #31]
        break;
 804adf6:	e000      	b.n	804adfa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        break;
 804adf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 804adfa:	7ffb      	ldrb	r3, [r7, #31]
 804adfc:	2b00      	cmp	r3, #0
 804adfe:	d10b      	bne.n	804ae18 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 804ae00:	4b4a      	ldr	r3, [pc, #296]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ae02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804ae06:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 804ae0a:	687b      	ldr	r3, [r7, #4]
 804ae0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 804ae0e:	4947      	ldr	r1, [pc, #284]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ae10:	4313      	orrs	r3, r2
 804ae12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 804ae16:	e001      	b.n	804ae1c <HAL_RCCEx_PeriphCLKConfig+0x420>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804ae18:	7ffb      	ldrb	r3, [r7, #31]
 804ae1a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 804ae1c:	687b      	ldr	r3, [r7, #4]
 804ae1e:	681b      	ldr	r3, [r3, #0]
 804ae20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804ae24:	2b00      	cmp	r3, #0
 804ae26:	d00a      	beq.n	804ae3e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 804ae28:	4b40      	ldr	r3, [pc, #256]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ae2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804ae2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 804ae32:	687b      	ldr	r3, [r7, #4]
 804ae34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804ae36:	493d      	ldr	r1, [pc, #244]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ae38:	4313      	orrs	r3, r2
 804ae3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 804ae3e:	687b      	ldr	r3, [r7, #4]
 804ae40:	681b      	ldr	r3, [r3, #0]
 804ae42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804ae46:	2b00      	cmp	r3, #0
 804ae48:	d00a      	beq.n	804ae60 <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 804ae4a:	4b38      	ldr	r3, [pc, #224]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ae4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804ae50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 804ae54:	687b      	ldr	r3, [r7, #4]
 804ae56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804ae58:	4934      	ldr	r1, [pc, #208]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ae5a:	4313      	orrs	r3, r2
 804ae5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 804ae60:	687b      	ldr	r3, [r7, #4]
 804ae62:	681b      	ldr	r3, [r3, #0]
 804ae64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804ae68:	2b00      	cmp	r3, #0
 804ae6a:	d00a      	beq.n	804ae82 <HAL_RCCEx_PeriphCLKConfig+0x486>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 804ae6c:	4b2f      	ldr	r3, [pc, #188]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ae6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804ae72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 804ae76:	687b      	ldr	r3, [r7, #4]
 804ae78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804ae7a:	492c      	ldr	r1, [pc, #176]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ae7c:	4313      	orrs	r3, r2
 804ae7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 804ae82:	687b      	ldr	r3, [r7, #4]
 804ae84:	681b      	ldr	r3, [r3, #0]
 804ae86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804ae8a:	2b00      	cmp	r3, #0
 804ae8c:	d00a      	beq.n	804aea4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 804ae8e:	4b27      	ldr	r3, [pc, #156]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ae90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804ae94:	f023 0203 	bic.w	r2, r3, #3
 804ae98:	687b      	ldr	r3, [r7, #4]
 804ae9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804ae9c:	4923      	ldr	r1, [pc, #140]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804ae9e:	4313      	orrs	r3, r2
 804aea0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 804aea4:	687b      	ldr	r3, [r7, #4]
 804aea6:	681b      	ldr	r3, [r3, #0]
 804aea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 804aeac:	2b00      	cmp	r3, #0
 804aeae:	d028      	beq.n	804af02 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 804aeb0:	4b1e      	ldr	r3, [pc, #120]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804aeb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804aeb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804aeba:	687b      	ldr	r3, [r7, #4]
 804aebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804aebe:	491b      	ldr	r1, [pc, #108]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804aec0:	4313      	orrs	r3, r2
 804aec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 804aec6:	687b      	ldr	r3, [r7, #4]
 804aec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804aeca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804aece:	d106      	bne.n	804aede <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804aed0:	4b16      	ldr	r3, [pc, #88]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804aed2:	68db      	ldr	r3, [r3, #12]
 804aed4:	4a15      	ldr	r2, [pc, #84]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804aed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804aeda:	60d3      	str	r3, [r2, #12]
 804aedc:	e011      	b.n	804af02 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 804aede:	687b      	ldr	r3, [r7, #4]
 804aee0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804aee2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 804aee6:	d10c      	bne.n	804af02 <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 804aee8:	687b      	ldr	r3, [r7, #4]
 804aeea:	3304      	adds	r3, #4
 804aeec:	2101      	movs	r1, #1
 804aeee:	4618      	mov	r0, r3
 804aef0:	f000 f8f8 	bl	804b0e4 <RCCEx_PLLSAI1_Config>
 804aef4:	4603      	mov	r3, r0
 804aef6:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 804aef8:	7ffb      	ldrb	r3, [r7, #31]
 804aefa:	2b00      	cmp	r3, #0
 804aefc:	d001      	beq.n	804af02 <HAL_RCCEx_PeriphCLKConfig+0x506>
        {
          /* set overall return value */
          status = ret;
 804aefe:	7ffb      	ldrb	r3, [r7, #31]
 804af00:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 804af02:	687b      	ldr	r3, [r7, #4]
 804af04:	681b      	ldr	r3, [r3, #0]
 804af06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804af0a:	2b00      	cmp	r3, #0
 804af0c:	d04d      	beq.n	804afaa <HAL_RCCEx_PeriphCLKConfig+0x5ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 804af0e:	687b      	ldr	r3, [r7, #4]
 804af10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804af12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804af16:	d10b      	bne.n	804af30 <HAL_RCCEx_PeriphCLKConfig+0x534>
 804af18:	4b04      	ldr	r3, [pc, #16]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804af1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804af1e:	4a03      	ldr	r2, [pc, #12]	; (804af2c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804af20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804af24:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 804af28:	e015      	b.n	804af56 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 804af2a:	bf00      	nop
 804af2c:	40021000 	.word	0x40021000
 804af30:	4b6b      	ldr	r3, [pc, #428]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804af32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804af36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804af3a:	687b      	ldr	r3, [r7, #4]
 804af3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804af3e:	4968      	ldr	r1, [pc, #416]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804af40:	4313      	orrs	r3, r2
 804af42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 804af46:	4b66      	ldr	r3, [pc, #408]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804af48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804af4c:	4a64      	ldr	r2, [pc, #400]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804af4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 804af52:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 804af56:	687b      	ldr	r3, [r7, #4]
 804af58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804af5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 804af5e:	d10d      	bne.n	804af7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 804af60:	687b      	ldr	r3, [r7, #4]
 804af62:	3304      	adds	r3, #4
 804af64:	2101      	movs	r1, #1
 804af66:	4618      	mov	r0, r3
 804af68:	f000 f8bc 	bl	804b0e4 <RCCEx_PLLSAI1_Config>
 804af6c:	4603      	mov	r3, r0
 804af6e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 804af70:	7ffb      	ldrb	r3, [r7, #31]
 804af72:	2b00      	cmp	r3, #0
 804af74:	d019      	beq.n	804afaa <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      {
        /* set overall return value */
        status = ret;
 804af76:	7ffb      	ldrb	r3, [r7, #31]
 804af78:	77bb      	strb	r3, [r7, #30]
 804af7a:	e016      	b.n	804afaa <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 804af7c:	687b      	ldr	r3, [r7, #4]
 804af7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804af80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804af84:	d106      	bne.n	804af94 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804af86:	4b56      	ldr	r3, [pc, #344]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804af88:	68db      	ldr	r3, [r3, #12]
 804af8a:	4a55      	ldr	r2, [pc, #340]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804af8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804af90:	60d3      	str	r3, [r2, #12]
 804af92:	e00a      	b.n	804afaa <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 804af94:	687b      	ldr	r3, [r7, #4]
 804af96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804af98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804af9c:	d105      	bne.n	804afaa <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 804af9e:	4b50      	ldr	r3, [pc, #320]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804afa0:	68db      	ldr	r3, [r3, #12]
 804afa2:	4a4f      	ldr	r2, [pc, #316]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804afa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804afa8:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 804afaa:	687b      	ldr	r3, [r7, #4]
 804afac:	681b      	ldr	r3, [r3, #0]
 804afae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 804afb2:	2b00      	cmp	r3, #0
 804afb4:	d028      	beq.n	804b008 <HAL_RCCEx_PeriphCLKConfig+0x60c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 804afb6:	4b4a      	ldr	r3, [pc, #296]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804afb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804afbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804afc0:	687b      	ldr	r3, [r7, #4]
 804afc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804afc4:	4946      	ldr	r1, [pc, #280]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804afc6:	4313      	orrs	r3, r2
 804afc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 804afcc:	687b      	ldr	r3, [r7, #4]
 804afce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804afd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804afd4:	d106      	bne.n	804afe4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804afd6:	4b42      	ldr	r3, [pc, #264]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804afd8:	68db      	ldr	r3, [r3, #12]
 804afda:	4a41      	ldr	r2, [pc, #260]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804afdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804afe0:	60d3      	str	r3, [r2, #12]
 804afe2:	e011      	b.n	804b008 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 804afe4:	687b      	ldr	r3, [r7, #4]
 804afe6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804afe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 804afec:	d10c      	bne.n	804b008 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 804afee:	687b      	ldr	r3, [r7, #4]
 804aff0:	3304      	adds	r3, #4
 804aff2:	2101      	movs	r1, #1
 804aff4:	4618      	mov	r0, r3
 804aff6:	f000 f875 	bl	804b0e4 <RCCEx_PLLSAI1_Config>
 804affa:	4603      	mov	r3, r0
 804affc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 804affe:	7ffb      	ldrb	r3, [r7, #31]
 804b000:	2b00      	cmp	r3, #0
 804b002:	d001      	beq.n	804b008 <HAL_RCCEx_PeriphCLKConfig+0x60c>
      {
        /* set overall return value */
        status = ret;
 804b004:	7ffb      	ldrb	r3, [r7, #31]
 804b006:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 804b008:	687b      	ldr	r3, [r7, #4]
 804b00a:	681b      	ldr	r3, [r3, #0]
 804b00c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804b010:	2b00      	cmp	r3, #0
 804b012:	d01e      	beq.n	804b052 <HAL_RCCEx_PeriphCLKConfig+0x656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 804b014:	4b32      	ldr	r3, [pc, #200]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b01a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 804b01e:	687b      	ldr	r3, [r7, #4]
 804b020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804b024:	492e      	ldr	r1, [pc, #184]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b026:	4313      	orrs	r3, r2
 804b028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 804b02c:	687b      	ldr	r3, [r7, #4]
 804b02e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804b032:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 804b036:	d10c      	bne.n	804b052 <HAL_RCCEx_PeriphCLKConfig+0x656>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 804b038:	687b      	ldr	r3, [r7, #4]
 804b03a:	3304      	adds	r3, #4
 804b03c:	2102      	movs	r1, #2
 804b03e:	4618      	mov	r0, r3
 804b040:	f000 f850 	bl	804b0e4 <RCCEx_PLLSAI1_Config>
 804b044:	4603      	mov	r3, r0
 804b046:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 804b048:	7ffb      	ldrb	r3, [r7, #31]
 804b04a:	2b00      	cmp	r3, #0
 804b04c:	d001      	beq.n	804b052 <HAL_RCCEx_PeriphCLKConfig+0x656>
      {
        /* set overall return value */
        status = ret;
 804b04e:	7ffb      	ldrb	r3, [r7, #31]
 804b050:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 804b052:	687b      	ldr	r3, [r7, #4]
 804b054:	681b      	ldr	r3, [r3, #0]
 804b056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804b05a:	2b00      	cmp	r3, #0
 804b05c:	d00b      	beq.n	804b076 <HAL_RCCEx_PeriphCLKConfig+0x67a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 804b05e:	4b20      	ldr	r3, [pc, #128]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b060:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804b064:	f023 0204 	bic.w	r2, r3, #4
 804b068:	687b      	ldr	r3, [r7, #4]
 804b06a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804b06e:	491c      	ldr	r1, [pc, #112]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b070:	4313      	orrs	r3, r2
 804b072:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 804b076:	687b      	ldr	r3, [r7, #4]
 804b078:	681b      	ldr	r3, [r3, #0]
 804b07a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804b07e:	2b00      	cmp	r3, #0
 804b080:	d00b      	beq.n	804b09a <HAL_RCCEx_PeriphCLKConfig+0x69e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 804b082:	4b17      	ldr	r3, [pc, #92]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b084:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804b088:	f023 0218 	bic.w	r2, r3, #24
 804b08c:	687b      	ldr	r3, [r7, #4]
 804b08e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b092:	4913      	ldr	r1, [pc, #76]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b094:	4313      	orrs	r3, r2
 804b096:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 804b09a:	687b      	ldr	r3, [r7, #4]
 804b09c:	681b      	ldr	r3, [r3, #0]
 804b09e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804b0a2:	2b00      	cmp	r3, #0
 804b0a4:	d017      	beq.n	804b0d6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 804b0a6:	4b0e      	ldr	r3, [pc, #56]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b0a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804b0ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 804b0b0:	687b      	ldr	r3, [r7, #4]
 804b0b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804b0b6:	490a      	ldr	r1, [pc, #40]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b0b8:	4313      	orrs	r3, r2
 804b0ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 804b0be:	687b      	ldr	r3, [r7, #4]
 804b0c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804b0c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804b0c8:	d105      	bne.n	804b0d6 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804b0ca:	4b05      	ldr	r3, [pc, #20]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b0cc:	68db      	ldr	r3, [r3, #12]
 804b0ce:	4a04      	ldr	r2, [pc, #16]	; (804b0e0 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b0d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804b0d4:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 804b0d6:	7fbb      	ldrb	r3, [r7, #30]
}
 804b0d8:	4618      	mov	r0, r3
 804b0da:	3720      	adds	r7, #32
 804b0dc:	46bd      	mov	sp, r7
 804b0de:	bd80      	pop	{r7, pc}
 804b0e0:	40021000 	.word	0x40021000

0804b0e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 804b0e4:	b580      	push	{r7, lr}
 804b0e6:	b084      	sub	sp, #16
 804b0e8:	af00      	add	r7, sp, #0
 804b0ea:	6078      	str	r0, [r7, #4]
 804b0ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 804b0ee:	2300      	movs	r3, #0
 804b0f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 804b0f2:	687b      	ldr	r3, [r7, #4]
 804b0f4:	681b      	ldr	r3, [r3, #0]
 804b0f6:	2b03      	cmp	r3, #3
 804b0f8:	d018      	beq.n	804b12c <RCCEx_PLLSAI1_Config+0x48>
 804b0fa:	2b03      	cmp	r3, #3
 804b0fc:	d81f      	bhi.n	804b13e <RCCEx_PLLSAI1_Config+0x5a>
 804b0fe:	2b01      	cmp	r3, #1
 804b100:	d002      	beq.n	804b108 <RCCEx_PLLSAI1_Config+0x24>
 804b102:	2b02      	cmp	r3, #2
 804b104:	d009      	beq.n	804b11a <RCCEx_PLLSAI1_Config+0x36>
 804b106:	e01a      	b.n	804b13e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 804b108:	4b5d      	ldr	r3, [pc, #372]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b10a:	681b      	ldr	r3, [r3, #0]
 804b10c:	f003 0302 	and.w	r3, r3, #2
 804b110:	2b00      	cmp	r3, #0
 804b112:	d117      	bne.n	804b144 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 804b114:	2301      	movs	r3, #1
 804b116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804b118:	e014      	b.n	804b144 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 804b11a:	4b59      	ldr	r3, [pc, #356]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b11c:	681b      	ldr	r3, [r3, #0]
 804b11e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804b122:	2b00      	cmp	r3, #0
 804b124:	d110      	bne.n	804b148 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 804b126:	2301      	movs	r3, #1
 804b128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804b12a:	e00d      	b.n	804b148 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 804b12c:	4b54      	ldr	r3, [pc, #336]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b12e:	681b      	ldr	r3, [r3, #0]
 804b130:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 804b134:	2b00      	cmp	r3, #0
 804b136:	d109      	bne.n	804b14c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 804b138:	2301      	movs	r3, #1
 804b13a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804b13c:	e006      	b.n	804b14c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 804b13e:	2301      	movs	r3, #1
 804b140:	73fb      	strb	r3, [r7, #15]
      break;
 804b142:	e004      	b.n	804b14e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 804b144:	bf00      	nop
 804b146:	e002      	b.n	804b14e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 804b148:	bf00      	nop
 804b14a:	e000      	b.n	804b14e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 804b14c:	bf00      	nop
  }

  if (status == HAL_OK)
 804b14e:	7bfb      	ldrb	r3, [r7, #15]
 804b150:	2b00      	cmp	r3, #0
 804b152:	f040 808f 	bne.w	804b274 <RCCEx_PLLSAI1_Config+0x190>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 804b156:	4b4a      	ldr	r3, [pc, #296]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b158:	681b      	ldr	r3, [r3, #0]
 804b15a:	4a49      	ldr	r2, [pc, #292]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b15c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 804b160:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804b162:	f7fb fd37 	bl	8046bd4 <HAL_GetTick>
 804b166:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 804b168:	e009      	b.n	804b17e <RCCEx_PLLSAI1_Config+0x9a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 804b16a:	f7fb fd33 	bl	8046bd4 <HAL_GetTick>
 804b16e:	4602      	mov	r2, r0
 804b170:	68bb      	ldr	r3, [r7, #8]
 804b172:	1ad3      	subs	r3, r2, r3
 804b174:	2b02      	cmp	r3, #2
 804b176:	d902      	bls.n	804b17e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_TIMEOUT;
 804b178:	2303      	movs	r3, #3
 804b17a:	73fb      	strb	r3, [r7, #15]
        break;
 804b17c:	e005      	b.n	804b18a <RCCEx_PLLSAI1_Config+0xa6>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 804b17e:	4b40      	ldr	r3, [pc, #256]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b180:	681b      	ldr	r3, [r3, #0]
 804b182:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 804b186:	2b00      	cmp	r3, #0
 804b188:	d1ef      	bne.n	804b16a <RCCEx_PLLSAI1_Config+0x86>
      }
    }

    if (status == HAL_OK)
 804b18a:	7bfb      	ldrb	r3, [r7, #15]
 804b18c:	2b00      	cmp	r3, #0
 804b18e:	d171      	bne.n	804b274 <RCCEx_PLLSAI1_Config+0x190>
    {
      if (Divider == DIVIDER_P_UPDATE)
 804b190:	683b      	ldr	r3, [r7, #0]
 804b192:	2b00      	cmp	r3, #0
 804b194:	d116      	bne.n	804b1c4 <RCCEx_PLLSAI1_Config+0xe0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 804b196:	4b3a      	ldr	r3, [pc, #232]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b198:	691a      	ldr	r2, [r3, #16]
 804b19a:	4b3a      	ldr	r3, [pc, #232]	; (804b284 <RCCEx_PLLSAI1_Config+0x1a0>)
 804b19c:	4013      	ands	r3, r2
 804b19e:	687a      	ldr	r2, [r7, #4]
 804b1a0:	6892      	ldr	r2, [r2, #8]
 804b1a2:	0211      	lsls	r1, r2, #8
 804b1a4:	687a      	ldr	r2, [r7, #4]
 804b1a6:	68d2      	ldr	r2, [r2, #12]
 804b1a8:	06d2      	lsls	r2, r2, #27
 804b1aa:	4311      	orrs	r1, r2
 804b1ac:	687a      	ldr	r2, [r7, #4]
 804b1ae:	6852      	ldr	r2, [r2, #4]
 804b1b0:	3a01      	subs	r2, #1
 804b1b2:	0112      	lsls	r2, r2, #4
 804b1b4:	4311      	orrs	r1, r2
 804b1b6:	687a      	ldr	r2, [r7, #4]
 804b1b8:	6812      	ldr	r2, [r2, #0]
 804b1ba:	430a      	orrs	r2, r1
 804b1bc:	4930      	ldr	r1, [pc, #192]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b1be:	4313      	orrs	r3, r2
 804b1c0:	610b      	str	r3, [r1, #16]
 804b1c2:	e033      	b.n	804b22c <RCCEx_PLLSAI1_Config+0x148>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 804b1c4:	683b      	ldr	r3, [r7, #0]
 804b1c6:	2b01      	cmp	r3, #1
 804b1c8:	d118      	bne.n	804b1fc <RCCEx_PLLSAI1_Config+0x118>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 804b1ca:	4b2d      	ldr	r3, [pc, #180]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b1cc:	691a      	ldr	r2, [r3, #16]
 804b1ce:	4b2e      	ldr	r3, [pc, #184]	; (804b288 <RCCEx_PLLSAI1_Config+0x1a4>)
 804b1d0:	4013      	ands	r3, r2
 804b1d2:	687a      	ldr	r2, [r7, #4]
 804b1d4:	6892      	ldr	r2, [r2, #8]
 804b1d6:	0211      	lsls	r1, r2, #8
 804b1d8:	687a      	ldr	r2, [r7, #4]
 804b1da:	6912      	ldr	r2, [r2, #16]
 804b1dc:	0852      	lsrs	r2, r2, #1
 804b1de:	3a01      	subs	r2, #1
 804b1e0:	0552      	lsls	r2, r2, #21
 804b1e2:	4311      	orrs	r1, r2
 804b1e4:	687a      	ldr	r2, [r7, #4]
 804b1e6:	6852      	ldr	r2, [r2, #4]
 804b1e8:	3a01      	subs	r2, #1
 804b1ea:	0112      	lsls	r2, r2, #4
 804b1ec:	4311      	orrs	r1, r2
 804b1ee:	687a      	ldr	r2, [r7, #4]
 804b1f0:	6812      	ldr	r2, [r2, #0]
 804b1f2:	430a      	orrs	r2, r1
 804b1f4:	4922      	ldr	r1, [pc, #136]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b1f6:	4313      	orrs	r3, r2
 804b1f8:	610b      	str	r3, [r1, #16]
 804b1fa:	e017      	b.n	804b22c <RCCEx_PLLSAI1_Config+0x148>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 804b1fc:	4b20      	ldr	r3, [pc, #128]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b1fe:	691a      	ldr	r2, [r3, #16]
 804b200:	4b22      	ldr	r3, [pc, #136]	; (804b28c <RCCEx_PLLSAI1_Config+0x1a8>)
 804b202:	4013      	ands	r3, r2
 804b204:	687a      	ldr	r2, [r7, #4]
 804b206:	6892      	ldr	r2, [r2, #8]
 804b208:	0211      	lsls	r1, r2, #8
 804b20a:	687a      	ldr	r2, [r7, #4]
 804b20c:	6952      	ldr	r2, [r2, #20]
 804b20e:	0852      	lsrs	r2, r2, #1
 804b210:	3a01      	subs	r2, #1
 804b212:	0652      	lsls	r2, r2, #25
 804b214:	4311      	orrs	r1, r2
 804b216:	687a      	ldr	r2, [r7, #4]
 804b218:	6852      	ldr	r2, [r2, #4]
 804b21a:	3a01      	subs	r2, #1
 804b21c:	0112      	lsls	r2, r2, #4
 804b21e:	4311      	orrs	r1, r2
 804b220:	687a      	ldr	r2, [r7, #4]
 804b222:	6812      	ldr	r2, [r2, #0]
 804b224:	430a      	orrs	r2, r1
 804b226:	4916      	ldr	r1, [pc, #88]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b228:	4313      	orrs	r3, r2
 804b22a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 804b22c:	4b14      	ldr	r3, [pc, #80]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b22e:	681b      	ldr	r3, [r3, #0]
 804b230:	4a13      	ldr	r2, [pc, #76]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b232:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 804b236:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804b238:	f7fb fccc 	bl	8046bd4 <HAL_GetTick>
 804b23c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 804b23e:	e009      	b.n	804b254 <RCCEx_PLLSAI1_Config+0x170>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 804b240:	f7fb fcc8 	bl	8046bd4 <HAL_GetTick>
 804b244:	4602      	mov	r2, r0
 804b246:	68bb      	ldr	r3, [r7, #8]
 804b248:	1ad3      	subs	r3, r2, r3
 804b24a:	2b02      	cmp	r3, #2
 804b24c:	d902      	bls.n	804b254 <RCCEx_PLLSAI1_Config+0x170>
        {
          status = HAL_TIMEOUT;
 804b24e:	2303      	movs	r3, #3
 804b250:	73fb      	strb	r3, [r7, #15]
          break;
 804b252:	e005      	b.n	804b260 <RCCEx_PLLSAI1_Config+0x17c>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 804b254:	4b0a      	ldr	r3, [pc, #40]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b256:	681b      	ldr	r3, [r3, #0]
 804b258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 804b25c:	2b00      	cmp	r3, #0
 804b25e:	d0ef      	beq.n	804b240 <RCCEx_PLLSAI1_Config+0x15c>
        }
      }

      if (status == HAL_OK)
 804b260:	7bfb      	ldrb	r3, [r7, #15]
 804b262:	2b00      	cmp	r3, #0
 804b264:	d106      	bne.n	804b274 <RCCEx_PLLSAI1_Config+0x190>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 804b266:	4b06      	ldr	r3, [pc, #24]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b268:	691a      	ldr	r2, [r3, #16]
 804b26a:	687b      	ldr	r3, [r7, #4]
 804b26c:	699b      	ldr	r3, [r3, #24]
 804b26e:	4904      	ldr	r1, [pc, #16]	; (804b280 <RCCEx_PLLSAI1_Config+0x19c>)
 804b270:	4313      	orrs	r3, r2
 804b272:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 804b274:	7bfb      	ldrb	r3, [r7, #15]
}
 804b276:	4618      	mov	r0, r3
 804b278:	3710      	adds	r7, #16
 804b27a:	46bd      	mov	sp, r7
 804b27c:	bd80      	pop	{r7, pc}
 804b27e:	bf00      	nop
 804b280:	40021000 	.word	0x40021000
 804b284:	07ff800c 	.word	0x07ff800c
 804b288:	ff9f800c 	.word	0xff9f800c
 804b28c:	f9ff800c 	.word	0xf9ff800c

0804b290 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 804b290:	b580      	push	{r7, lr}
 804b292:	b084      	sub	sp, #16
 804b294:	af00      	add	r7, sp, #0
 804b296:	6078      	str	r0, [r7, #4]
 804b298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 804b29a:	2300      	movs	r3, #0
 804b29c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 804b29e:	687b      	ldr	r3, [r7, #4]
 804b2a0:	681b      	ldr	r3, [r3, #0]
 804b2a2:	2b03      	cmp	r3, #3
 804b2a4:	d018      	beq.n	804b2d8 <RCCEx_PLLSAI2_Config+0x48>
 804b2a6:	2b03      	cmp	r3, #3
 804b2a8:	d81f      	bhi.n	804b2ea <RCCEx_PLLSAI2_Config+0x5a>
 804b2aa:	2b01      	cmp	r3, #1
 804b2ac:	d002      	beq.n	804b2b4 <RCCEx_PLLSAI2_Config+0x24>
 804b2ae:	2b02      	cmp	r3, #2
 804b2b0:	d009      	beq.n	804b2c6 <RCCEx_PLLSAI2_Config+0x36>
 804b2b2:	e01a      	b.n	804b2ea <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 804b2b4:	4b42      	ldr	r3, [pc, #264]	; (804b3c0 <RCCEx_PLLSAI2_Config+0x130>)
 804b2b6:	681b      	ldr	r3, [r3, #0]
 804b2b8:	f003 0302 	and.w	r3, r3, #2
 804b2bc:	2b00      	cmp	r3, #0
 804b2be:	d117      	bne.n	804b2f0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 804b2c0:	2301      	movs	r3, #1
 804b2c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804b2c4:	e014      	b.n	804b2f0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 804b2c6:	4b3e      	ldr	r3, [pc, #248]	; (804b3c0 <RCCEx_PLLSAI2_Config+0x130>)
 804b2c8:	681b      	ldr	r3, [r3, #0]
 804b2ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804b2ce:	2b00      	cmp	r3, #0
 804b2d0:	d110      	bne.n	804b2f4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 804b2d2:	2301      	movs	r3, #1
 804b2d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804b2d6:	e00d      	b.n	804b2f4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 804b2d8:	4b39      	ldr	r3, [pc, #228]	; (804b3c0 <RCCEx_PLLSAI2_Config+0x130>)
 804b2da:	681b      	ldr	r3, [r3, #0]
 804b2dc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 804b2e0:	2b00      	cmp	r3, #0
 804b2e2:	d109      	bne.n	804b2f8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 804b2e4:	2301      	movs	r3, #1
 804b2e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804b2e8:	e006      	b.n	804b2f8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 804b2ea:	2301      	movs	r3, #1
 804b2ec:	73fb      	strb	r3, [r7, #15]
      break;
 804b2ee:	e004      	b.n	804b2fa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 804b2f0:	bf00      	nop
 804b2f2:	e002      	b.n	804b2fa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 804b2f4:	bf00      	nop
 804b2f6:	e000      	b.n	804b2fa <RCCEx_PLLSAI2_Config+0x6a>
      break;
 804b2f8:	bf00      	nop
  }

  if (status == HAL_OK)
 804b2fa:	7bfb      	ldrb	r3, [r7, #15]
 804b2fc:	2b00      	cmp	r3, #0
 804b2fe:	d159      	bne.n	804b3b4 <RCCEx_PLLSAI2_Config+0x124>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 804b300:	4b2f      	ldr	r3, [pc, #188]	; (804b3c0 <RCCEx_PLLSAI2_Config+0x130>)
 804b302:	681b      	ldr	r3, [r3, #0]
 804b304:	4a2e      	ldr	r2, [pc, #184]	; (804b3c0 <RCCEx_PLLSAI2_Config+0x130>)
 804b306:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804b30a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804b30c:	f7fb fc62 	bl	8046bd4 <HAL_GetTick>
 804b310:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 804b312:	e009      	b.n	804b328 <RCCEx_PLLSAI2_Config+0x98>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 804b314:	f7fb fc5e 	bl	8046bd4 <HAL_GetTick>
 804b318:	4602      	mov	r2, r0
 804b31a:	68bb      	ldr	r3, [r7, #8]
 804b31c:	1ad3      	subs	r3, r2, r3
 804b31e:	2b02      	cmp	r3, #2
 804b320:	d902      	bls.n	804b328 <RCCEx_PLLSAI2_Config+0x98>
      {
        status = HAL_TIMEOUT;
 804b322:	2303      	movs	r3, #3
 804b324:	73fb      	strb	r3, [r7, #15]
        break;
 804b326:	e005      	b.n	804b334 <RCCEx_PLLSAI2_Config+0xa4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 804b328:	4b25      	ldr	r3, [pc, #148]	; (804b3c0 <RCCEx_PLLSAI2_Config+0x130>)
 804b32a:	681b      	ldr	r3, [r3, #0]
 804b32c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804b330:	2b00      	cmp	r3, #0
 804b332:	d1ef      	bne.n	804b314 <RCCEx_PLLSAI2_Config+0x84>
      }
    }

    if (status == HAL_OK)
 804b334:	7bfb      	ldrb	r3, [r7, #15]
 804b336:	2b00      	cmp	r3, #0
 804b338:	d13c      	bne.n	804b3b4 <RCCEx_PLLSAI2_Config+0x124>
    {
      if (Divider == DIVIDER_P_UPDATE)
 804b33a:	683b      	ldr	r3, [r7, #0]
 804b33c:	2b00      	cmp	r3, #0
 804b33e:	d115      	bne.n	804b36c <RCCEx_PLLSAI2_Config+0xdc>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 804b340:	4b1f      	ldr	r3, [pc, #124]	; (804b3c0 <RCCEx_PLLSAI2_Config+0x130>)
 804b342:	695a      	ldr	r2, [r3, #20]
 804b344:	4b1f      	ldr	r3, [pc, #124]	; (804b3c4 <RCCEx_PLLSAI2_Config+0x134>)
 804b346:	4013      	ands	r3, r2
 804b348:	687a      	ldr	r2, [r7, #4]
 804b34a:	6892      	ldr	r2, [r2, #8]
 804b34c:	0211      	lsls	r1, r2, #8
 804b34e:	687a      	ldr	r2, [r7, #4]
 804b350:	68d2      	ldr	r2, [r2, #12]
 804b352:	06d2      	lsls	r2, r2, #27
 804b354:	4311      	orrs	r1, r2
 804b356:	687a      	ldr	r2, [r7, #4]
 804b358:	6852      	ldr	r2, [r2, #4]
 804b35a:	3a01      	subs	r2, #1
 804b35c:	0112      	lsls	r2, r2, #4
 804b35e:	4311      	orrs	r1, r2
 804b360:	687a      	ldr	r2, [r7, #4]
 804b362:	6812      	ldr	r2, [r2, #0]
 804b364:	430a      	orrs	r2, r1
 804b366:	4916      	ldr	r1, [pc, #88]	; (804b3c0 <RCCEx_PLLSAI2_Config+0x130>)
 804b368:	4313      	orrs	r3, r2
 804b36a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 804b36c:	4b14      	ldr	r3, [pc, #80]	; (804b3c0 <RCCEx_PLLSAI2_Config+0x130>)
 804b36e:	681b      	ldr	r3, [r3, #0]
 804b370:	4a13      	ldr	r2, [pc, #76]	; (804b3c0 <RCCEx_PLLSAI2_Config+0x130>)
 804b372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804b376:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804b378:	f7fb fc2c 	bl	8046bd4 <HAL_GetTick>
 804b37c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 804b37e:	e009      	b.n	804b394 <RCCEx_PLLSAI2_Config+0x104>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 804b380:	f7fb fc28 	bl	8046bd4 <HAL_GetTick>
 804b384:	4602      	mov	r2, r0
 804b386:	68bb      	ldr	r3, [r7, #8]
 804b388:	1ad3      	subs	r3, r2, r3
 804b38a:	2b02      	cmp	r3, #2
 804b38c:	d902      	bls.n	804b394 <RCCEx_PLLSAI2_Config+0x104>
        {
          status = HAL_TIMEOUT;
 804b38e:	2303      	movs	r3, #3
 804b390:	73fb      	strb	r3, [r7, #15]
          break;
 804b392:	e005      	b.n	804b3a0 <RCCEx_PLLSAI2_Config+0x110>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 804b394:	4b0a      	ldr	r3, [pc, #40]	; (804b3c0 <RCCEx_PLLSAI2_Config+0x130>)
 804b396:	681b      	ldr	r3, [r3, #0]
 804b398:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804b39c:	2b00      	cmp	r3, #0
 804b39e:	d0ef      	beq.n	804b380 <RCCEx_PLLSAI2_Config+0xf0>
        }
      }

      if (status == HAL_OK)
 804b3a0:	7bfb      	ldrb	r3, [r7, #15]
 804b3a2:	2b00      	cmp	r3, #0
 804b3a4:	d106      	bne.n	804b3b4 <RCCEx_PLLSAI2_Config+0x124>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 804b3a6:	4b06      	ldr	r3, [pc, #24]	; (804b3c0 <RCCEx_PLLSAI2_Config+0x130>)
 804b3a8:	695a      	ldr	r2, [r3, #20]
 804b3aa:	687b      	ldr	r3, [r7, #4]
 804b3ac:	691b      	ldr	r3, [r3, #16]
 804b3ae:	4904      	ldr	r1, [pc, #16]	; (804b3c0 <RCCEx_PLLSAI2_Config+0x130>)
 804b3b0:	4313      	orrs	r3, r2
 804b3b2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 804b3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 804b3b6:	4618      	mov	r0, r3
 804b3b8:	3710      	adds	r7, #16
 804b3ba:	46bd      	mov	sp, r7
 804b3bc:	bd80      	pop	{r7, pc}
 804b3be:	bf00      	nop
 804b3c0:	40021000 	.word	0x40021000
 804b3c4:	07ff800c 	.word	0x07ff800c

0804b3c8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 804b3c8:	b580      	push	{r7, lr}
 804b3ca:	b084      	sub	sp, #16
 804b3cc:	af00      	add	r7, sp, #0
 804b3ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 804b3d0:	687b      	ldr	r3, [r7, #4]
 804b3d2:	2b00      	cmp	r3, #0
 804b3d4:	d101      	bne.n	804b3da <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 804b3d6:	2301      	movs	r3, #1
 804b3d8:	e092      	b.n	804b500 <HAL_RNG_Init+0x138>
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));

#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
  if (hrng->State == HAL_RNG_STATE_RESET)
 804b3da:	687b      	ldr	r3, [r7, #4]
 804b3dc:	7a5b      	ldrb	r3, [r3, #9]
 804b3de:	b2db      	uxtb	r3, r3
 804b3e0:	2b00      	cmp	r3, #0
 804b3e2:	d113      	bne.n	804b40c <HAL_RNG_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 804b3e4:	687b      	ldr	r3, [r7, #4]
 804b3e6:	2200      	movs	r2, #0
 804b3e8:	721a      	strb	r2, [r3, #8]

    hrng->ReadyDataCallback  = HAL_RNG_ReadyDataCallback;  /* Legacy weak ReadyDataCallback  */
 804b3ea:	687b      	ldr	r3, [r7, #4]
 804b3ec:	4a46      	ldr	r2, [pc, #280]	; (804b508 <HAL_RNG_Init+0x140>)
 804b3ee:	615a      	str	r2, [r3, #20]
    hrng->ErrorCallback      = HAL_RNG_ErrorCallback;      /* Legacy weak ErrorCallback      */
 804b3f0:	687b      	ldr	r3, [r7, #4]
 804b3f2:	4a46      	ldr	r2, [pc, #280]	; (804b50c <HAL_RNG_Init+0x144>)
 804b3f4:	619a      	str	r2, [r3, #24]

    if (hrng->MspInitCallback == NULL)
 804b3f6:	687b      	ldr	r3, [r7, #4]
 804b3f8:	69db      	ldr	r3, [r3, #28]
 804b3fa:	2b00      	cmp	r3, #0
 804b3fc:	d102      	bne.n	804b404 <HAL_RNG_Init+0x3c>
    {
      hrng->MspInitCallback = HAL_RNG_MspInit; /* Legacy weak MspInit  */
 804b3fe:	687b      	ldr	r3, [r7, #4]
 804b400:	4a43      	ldr	r2, [pc, #268]	; (804b510 <HAL_RNG_Init+0x148>)
 804b402:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
 804b404:	687b      	ldr	r3, [r7, #4]
 804b406:	69db      	ldr	r3, [r3, #28]
 804b408:	6878      	ldr	r0, [r7, #4]
 804b40a:	4798      	blx	r3
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 804b40c:	687b      	ldr	r3, [r7, #4]
 804b40e:	2202      	movs	r2, #2
 804b410:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 804b412:	687b      	ldr	r3, [r7, #4]
 804b414:	681b      	ldr	r3, [r3, #0]
 804b416:	681a      	ldr	r2, [r3, #0]
 804b418:	687b      	ldr	r3, [r7, #4]
 804b41a:	681b      	ldr	r3, [r3, #0]
 804b41c:	f022 0204 	bic.w	r2, r2, #4
 804b420:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 804b422:	687b      	ldr	r3, [r7, #4]
 804b424:	681b      	ldr	r3, [r3, #0]
 804b426:	681b      	ldr	r3, [r3, #0]
 804b428:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804b42c:	f023 0320 	bic.w	r3, r3, #32
 804b430:	687a      	ldr	r2, [r7, #4]
 804b432:	6852      	ldr	r2, [r2, #4]
 804b434:	431a      	orrs	r2, r3
 804b436:	687b      	ldr	r3, [r7, #4]
 804b438:	681b      	ldr	r3, [r3, #0]
 804b43a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 804b43e:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 804b440:	687b      	ldr	r3, [r7, #4]
 804b442:	681b      	ldr	r3, [r3, #0]
 804b444:	4a33      	ldr	r2, [pc, #204]	; (804b514 <HAL_RNG_Init+0x14c>)
 804b446:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 804b448:	687b      	ldr	r3, [r7, #4]
 804b44a:	681b      	ldr	r3, [r3, #0]
 804b44c:	4a32      	ldr	r2, [pc, #200]	; (804b518 <HAL_RNG_Init+0x150>)
 804b44e:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 804b450:	687b      	ldr	r3, [r7, #4]
 804b452:	681b      	ldr	r3, [r3, #0]
 804b454:	681a      	ldr	r2, [r3, #0]
 804b456:	687b      	ldr	r3, [r7, #4]
 804b458:	681b      	ldr	r3, [r3, #0]
 804b45a:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 804b45e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 804b460:	f7fb fbb8 	bl	8046bd4 <HAL_GetTick>
 804b464:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 804b466:	e00e      	b.n	804b486 <HAL_RNG_Init+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 804b468:	f7fb fbb4 	bl	8046bd4 <HAL_GetTick>
 804b46c:	4602      	mov	r2, r0
 804b46e:	68fb      	ldr	r3, [r7, #12]
 804b470:	1ad3      	subs	r3, r2, r3
 804b472:	2b02      	cmp	r3, #2
 804b474:	d907      	bls.n	804b486 <HAL_RNG_Init+0xbe>
    {
      hrng->State = HAL_RNG_STATE_READY;
 804b476:	687b      	ldr	r3, [r7, #4]
 804b478:	2201      	movs	r2, #1
 804b47a:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 804b47c:	687b      	ldr	r3, [r7, #4]
 804b47e:	2202      	movs	r2, #2
 804b480:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 804b482:	2301      	movs	r3, #1
 804b484:	e03c      	b.n	804b500 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 804b486:	687b      	ldr	r3, [r7, #4]
 804b488:	681b      	ldr	r3, [r3, #0]
 804b48a:	681b      	ldr	r3, [r3, #0]
 804b48c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 804b490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804b494:	d0e8      	beq.n	804b468 <HAL_RNG_Init+0xa0>
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 804b496:	687b      	ldr	r3, [r7, #4]
 804b498:	681b      	ldr	r3, [r3, #0]
 804b49a:	681a      	ldr	r2, [r3, #0]
 804b49c:	687b      	ldr	r3, [r7, #4]
 804b49e:	681b      	ldr	r3, [r3, #0]
 804b4a0:	f042 0204 	orr.w	r2, r2, #4
 804b4a4:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 804b4a6:	687b      	ldr	r3, [r7, #4]
 804b4a8:	681b      	ldr	r3, [r3, #0]
 804b4aa:	685b      	ldr	r3, [r3, #4]
 804b4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804b4b0:	2b40      	cmp	r3, #64	; 0x40
 804b4b2:	d104      	bne.n	804b4be <HAL_RNG_Init+0xf6>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 804b4b4:	687b      	ldr	r3, [r7, #4]
 804b4b6:	2204      	movs	r2, #4
 804b4b8:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 804b4ba:	2301      	movs	r3, #1
 804b4bc:	e020      	b.n	804b500 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 804b4be:	f7fb fb89 	bl	8046bd4 <HAL_GetTick>
 804b4c2:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 804b4c4:	e00e      	b.n	804b4e4 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 804b4c6:	f7fb fb85 	bl	8046bd4 <HAL_GetTick>
 804b4ca:	4602      	mov	r2, r0
 804b4cc:	68fb      	ldr	r3, [r7, #12]
 804b4ce:	1ad3      	subs	r3, r2, r3
 804b4d0:	2b02      	cmp	r3, #2
 804b4d2:	d907      	bls.n	804b4e4 <HAL_RNG_Init+0x11c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 804b4d4:	687b      	ldr	r3, [r7, #4]
 804b4d6:	2204      	movs	r2, #4
 804b4d8:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 804b4da:	687b      	ldr	r3, [r7, #4]
 804b4dc:	2202      	movs	r2, #2
 804b4de:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 804b4e0:	2301      	movs	r3, #1
 804b4e2:	e00d      	b.n	804b500 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 804b4e4:	687b      	ldr	r3, [r7, #4]
 804b4e6:	681b      	ldr	r3, [r3, #0]
 804b4e8:	685b      	ldr	r3, [r3, #4]
 804b4ea:	f003 0304 	and.w	r3, r3, #4
 804b4ee:	2b04      	cmp	r3, #4
 804b4f0:	d0e9      	beq.n	804b4c6 <HAL_RNG_Init+0xfe>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 804b4f2:	687b      	ldr	r3, [r7, #4]
 804b4f4:	2201      	movs	r2, #1
 804b4f6:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 804b4f8:	687b      	ldr	r3, [r7, #4]
 804b4fa:	2200      	movs	r2, #0
 804b4fc:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 804b4fe:	2300      	movs	r3, #0
}
 804b500:	4618      	mov	r0, r3
 804b502:	3710      	adds	r7, #16
 804b504:	46bd      	mov	sp, r7
 804b506:	bd80      	pop	{r7, pc}
 804b508:	0804b5fd 	.word	0x0804b5fd
 804b50c:	0804b613 	.word	0x0804b613
 804b510:	08041d3d 	.word	0x08041d3d
 804b514:	17590abc 	.word	0x17590abc
 804b518:	000caa74 	.word	0x000caa74

0804b51c <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 804b51c:	b580      	push	{r7, lr}
 804b51e:	b084      	sub	sp, #16
 804b520:	af00      	add	r7, sp, #0
 804b522:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 804b524:	2300      	movs	r3, #0
 804b526:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 804b528:	687b      	ldr	r3, [r7, #4]
 804b52a:	681b      	ldr	r3, [r3, #0]
 804b52c:	685b      	ldr	r3, [r3, #4]
 804b52e:	f003 0320 	and.w	r3, r3, #32
 804b532:	2b20      	cmp	r3, #32
 804b534:	d105      	bne.n	804b542 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 804b536:	687b      	ldr	r3, [r7, #4]
 804b538:	2210      	movs	r2, #16
 804b53a:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 804b53c:	2301      	movs	r3, #1
 804b53e:	60fb      	str	r3, [r7, #12]
 804b540:	e023      	b.n	804b58a <HAL_RNG_IRQHandler+0x6e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 804b542:	687b      	ldr	r3, [r7, #4]
 804b544:	681b      	ldr	r3, [r3, #0]
 804b546:	685b      	ldr	r3, [r3, #4]
 804b548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804b54c:	2b40      	cmp	r3, #64	; 0x40
 804b54e:	d11c      	bne.n	804b58a <HAL_RNG_IRQHandler+0x6e>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 804b550:	687b      	ldr	r3, [r7, #4]
 804b552:	681b      	ldr	r3, [r3, #0]
 804b554:	685b      	ldr	r3, [r3, #4]
 804b556:	f003 0304 	and.w	r3, r3, #4
 804b55a:	2b04      	cmp	r3, #4
 804b55c:	d008      	beq.n	804b570 <HAL_RNG_IRQHandler+0x54>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 804b55e:	687b      	ldr	r3, [r7, #4]
 804b560:	681b      	ldr	r3, [r3, #0]
 804b562:	685a      	ldr	r2, [r3, #4]
 804b564:	687b      	ldr	r3, [r7, #4]
 804b566:	681b      	ldr	r3, [r3, #0]
 804b568:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804b56c:	605a      	str	r2, [r3, #4]
 804b56e:	e00c      	b.n	804b58a <HAL_RNG_IRQHandler+0x6e>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 804b570:	687b      	ldr	r3, [r7, #4]
 804b572:	2208      	movs	r2, #8
 804b574:	60da      	str	r2, [r3, #12]
      rngclockerror = 1U;
 804b576:	2301      	movs	r3, #1
 804b578:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 804b57a:	687b      	ldr	r3, [r7, #4]
 804b57c:	681b      	ldr	r3, [r3, #0]
 804b57e:	681a      	ldr	r2, [r3, #0]
 804b580:	687b      	ldr	r3, [r7, #4]
 804b582:	681b      	ldr	r3, [r3, #0]
 804b584:	f022 0208 	bic.w	r2, r2, #8
 804b588:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 804b58a:	68fb      	ldr	r3, [r7, #12]
 804b58c:	2b01      	cmp	r3, #1
 804b58e:	d10c      	bne.n	804b5aa <HAL_RNG_IRQHandler+0x8e>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 804b590:	687b      	ldr	r3, [r7, #4]
 804b592:	2204      	movs	r2, #4
 804b594:	725a      	strb	r2, [r3, #9]

#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
 804b596:	687b      	ldr	r3, [r7, #4]
 804b598:	699b      	ldr	r3, [r3, #24]
 804b59a:	6878      	ldr	r0, [r7, #4]
 804b59c:	4798      	blx	r3
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 804b59e:	687b      	ldr	r3, [r7, #4]
 804b5a0:	681b      	ldr	r3, [r3, #0]
 804b5a2:	f06f 0260 	mvn.w	r2, #96	; 0x60
 804b5a6:	605a      	str	r2, [r3, #4]

    return;
 804b5a8:	e025      	b.n	804b5f6 <HAL_RNG_IRQHandler+0xda>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 804b5aa:	687b      	ldr	r3, [r7, #4]
 804b5ac:	681b      	ldr	r3, [r3, #0]
 804b5ae:	685b      	ldr	r3, [r3, #4]
 804b5b0:	f003 0301 	and.w	r3, r3, #1
 804b5b4:	2b01      	cmp	r3, #1
 804b5b6:	d11e      	bne.n	804b5f6 <HAL_RNG_IRQHandler+0xda>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 804b5b8:	687b      	ldr	r3, [r7, #4]
 804b5ba:	681b      	ldr	r3, [r3, #0]
 804b5bc:	681a      	ldr	r2, [r3, #0]
 804b5be:	687b      	ldr	r3, [r7, #4]
 804b5c0:	681b      	ldr	r3, [r3, #0]
 804b5c2:	f022 0208 	bic.w	r2, r2, #8
 804b5c6:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 804b5c8:	687b      	ldr	r3, [r7, #4]
 804b5ca:	681b      	ldr	r3, [r3, #0]
 804b5cc:	689a      	ldr	r2, [r3, #8]
 804b5ce:	687b      	ldr	r3, [r7, #4]
 804b5d0:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 804b5d2:	687b      	ldr	r3, [r7, #4]
 804b5d4:	7a5b      	ldrb	r3, [r3, #9]
 804b5d6:	b2db      	uxtb	r3, r3
 804b5d8:	2b04      	cmp	r3, #4
 804b5da:	d00c      	beq.n	804b5f6 <HAL_RNG_IRQHandler+0xda>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 804b5dc:	687b      	ldr	r3, [r7, #4]
 804b5de:	2201      	movs	r2, #1
 804b5e0:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 804b5e2:	687b      	ldr	r3, [r7, #4]
 804b5e4:	2200      	movs	r2, #0
 804b5e6:	721a      	strb	r2, [r3, #8]

#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
 804b5e8:	687b      	ldr	r3, [r7, #4]
 804b5ea:	695b      	ldr	r3, [r3, #20]
 804b5ec:	687a      	ldr	r2, [r7, #4]
 804b5ee:	6912      	ldr	r2, [r2, #16]
 804b5f0:	4611      	mov	r1, r2
 804b5f2:	6878      	ldr	r0, [r7, #4]
 804b5f4:	4798      	blx	r3
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 804b5f6:	3710      	adds	r7, #16
 804b5f8:	46bd      	mov	sp, r7
 804b5fa:	bd80      	pop	{r7, pc}

0804b5fc <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 804b5fc:	b480      	push	{r7}
 804b5fe:	b083      	sub	sp, #12
 804b600:	af00      	add	r7, sp, #0
 804b602:	6078      	str	r0, [r7, #4]
 804b604:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 804b606:	bf00      	nop
 804b608:	370c      	adds	r7, #12
 804b60a:	46bd      	mov	sp, r7
 804b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b610:	4770      	bx	lr

0804b612 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 804b612:	b480      	push	{r7}
 804b614:	b083      	sub	sp, #12
 804b616:	af00      	add	r7, sp, #0
 804b618:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 804b61a:	bf00      	nop
 804b61c:	370c      	adds	r7, #12
 804b61e:	46bd      	mov	sp, r7
 804b620:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b624:	4770      	bx	lr
	...

0804b628 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 804b628:	b580      	push	{r7, lr}
 804b62a:	b084      	sub	sp, #16
 804b62c:	af00      	add	r7, sp, #0
 804b62e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 804b630:	2301      	movs	r3, #1
 804b632:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 804b634:	687b      	ldr	r3, [r7, #4]
 804b636:	2b00      	cmp	r3, #0
 804b638:	f000 809f 	beq.w	804b77a <HAL_RTC_Init+0x152>
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    if (hrtc->State == HAL_RTC_STATE_RESET)
 804b63c:	687b      	ldr	r3, [r7, #4]
 804b63e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 804b642:	b2db      	uxtb	r3, r3
 804b644:	2b00      	cmp	r3, #0
 804b646:	d148      	bne.n	804b6da <HAL_RTC_Init+0xb2>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 804b648:	687b      	ldr	r3, [r7, #4]
 804b64a:	2200      	movs	r2, #0
 804b64c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;             /* Legacy weak AlarmAEventCallback      */
 804b650:	687b      	ldr	r3, [r7, #4]
 804b652:	4a4c      	ldr	r2, [pc, #304]	; (804b784 <HAL_RTC_Init+0x15c>)
 804b654:	629a      	str	r2, [r3, #40]	; 0x28
      hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak AlarmBEventCallback      */
 804b656:	687b      	ldr	r3, [r7, #4]
 804b658:	4a4b      	ldr	r2, [pc, #300]	; (804b788 <HAL_RTC_Init+0x160>)
 804b65a:	62da      	str	r2, [r3, #44]	; 0x2c
      hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;        /* Legacy weak TimeStampEventCallback   */
 804b65c:	687b      	ldr	r3, [r7, #4]
 804b65e:	4a4b      	ldr	r2, [pc, #300]	; (804b78c <HAL_RTC_Init+0x164>)
 804b660:	631a      	str	r2, [r3, #48]	; 0x30
      hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback;      /* Legacy weak WakeUpTimerEventCallback */
 804b662:	687b      	ldr	r3, [r7, #4]
 804b664:	4a4a      	ldr	r2, [pc, #296]	; (804b790 <HAL_RTC_Init+0x168>)
 804b666:	635a      	str	r2, [r3, #52]	; 0x34
      hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;          /* Legacy weak Tamper1EventCallback     */
 804b668:	687b      	ldr	r3, [r7, #4]
 804b66a:	4a4a      	ldr	r2, [pc, #296]	; (804b794 <HAL_RTC_Init+0x16c>)
 804b66c:	639a      	str	r2, [r3, #56]	; 0x38
      hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;          /* Legacy weak Tamper2EventCallback     */
 804b66e:	687b      	ldr	r3, [r7, #4]
 804b670:	4a49      	ldr	r2, [pc, #292]	; (804b798 <HAL_RTC_Init+0x170>)
 804b672:	63da      	str	r2, [r3, #60]	; 0x3c
      hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;          /* Legacy weak Tamper3EventCallback     */
 804b674:	687b      	ldr	r3, [r7, #4]
 804b676:	4a49      	ldr	r2, [pc, #292]	; (804b79c <HAL_RTC_Init+0x174>)
 804b678:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Tamper4EventCallback         =  HAL_RTCEx_Tamper4EventCallback;          /* Legacy weak Tamper4EventCallback     */
 804b67a:	687b      	ldr	r3, [r7, #4]
 804b67c:	4a48      	ldr	r2, [pc, #288]	; (804b7a0 <HAL_RTC_Init+0x178>)
 804b67e:	645a      	str	r2, [r3, #68]	; 0x44
      hrtc->Tamper5EventCallback         =  HAL_RTCEx_Tamper5EventCallback;          /* Legacy weak Tamper5EventCallback     */
 804b680:	687b      	ldr	r3, [r7, #4]
 804b682:	4a48      	ldr	r2, [pc, #288]	; (804b7a4 <HAL_RTC_Init+0x17c>)
 804b684:	649a      	str	r2, [r3, #72]	; 0x48
      hrtc->Tamper6EventCallback         =  HAL_RTCEx_Tamper6EventCallback;          /* Legacy weak Tamper6EventCallback     */
 804b686:	687b      	ldr	r3, [r7, #4]
 804b688:	4a47      	ldr	r2, [pc, #284]	; (804b7a8 <HAL_RTC_Init+0x180>)
 804b68a:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Tamper7EventCallback         =  HAL_RTCEx_Tamper7EventCallback;          /* Legacy weak Tamper7EventCallback     */
 804b68c:	687b      	ldr	r3, [r7, #4]
 804b68e:	4a47      	ldr	r2, [pc, #284]	; (804b7ac <HAL_RTC_Init+0x184>)
 804b690:	651a      	str	r2, [r3, #80]	; 0x50
      hrtc->Tamper8EventCallback         =  HAL_RTCEx_Tamper8EventCallback;          /* Legacy weak Tamper8EventCallback     */
 804b692:	687b      	ldr	r3, [r7, #4]
 804b694:	4a46      	ldr	r2, [pc, #280]	; (804b7b0 <HAL_RTC_Init+0x188>)
 804b696:	655a      	str	r2, [r3, #84]	; 0x54
      hrtc->InternalTamper1EventCallback =  HAL_RTCEx_InternalTamper1EventCallback;  /* Legacy weak InternalTamper1EventCallback */
 804b698:	687b      	ldr	r3, [r7, #4]
 804b69a:	4a46      	ldr	r2, [pc, #280]	; (804b7b4 <HAL_RTC_Init+0x18c>)
 804b69c:	659a      	str	r2, [r3, #88]	; 0x58
      hrtc->InternalTamper2EventCallback =  HAL_RTCEx_InternalTamper2EventCallback;  /* Legacy weak InternalTamper2EventCallback */
 804b69e:	687b      	ldr	r3, [r7, #4]
 804b6a0:	4a45      	ldr	r2, [pc, #276]	; (804b7b8 <HAL_RTC_Init+0x190>)
 804b6a2:	65da      	str	r2, [r3, #92]	; 0x5c
      hrtc->InternalTamper3EventCallback =  HAL_RTCEx_InternalTamper3EventCallback;  /* Legacy weak InternalTamper3EventCallback */
 804b6a4:	687b      	ldr	r3, [r7, #4]
 804b6a6:	4a45      	ldr	r2, [pc, #276]	; (804b7bc <HAL_RTC_Init+0x194>)
 804b6a8:	661a      	str	r2, [r3, #96]	; 0x60
      hrtc->InternalTamper5EventCallback =  HAL_RTCEx_InternalTamper5EventCallback;  /* Legacy weak InternalTamper5EventCallback */
 804b6aa:	687b      	ldr	r3, [r7, #4]
 804b6ac:	4a44      	ldr	r2, [pc, #272]	; (804b7c0 <HAL_RTC_Init+0x198>)
 804b6ae:	665a      	str	r2, [r3, #100]	; 0x64
      hrtc->InternalTamper8EventCallback =  HAL_RTCEx_InternalTamper8EventCallback;  /* Legacy weak InternalTamper8EventCallback */
 804b6b0:	687b      	ldr	r3, [r7, #4]
 804b6b2:	4a44      	ldr	r2, [pc, #272]	; (804b7c4 <HAL_RTC_Init+0x19c>)
 804b6b4:	669a      	str	r2, [r3, #104]	; 0x68

      if (hrtc->MspInitCallback == NULL)
 804b6b6:	687b      	ldr	r3, [r7, #4]
 804b6b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804b6ba:	2b00      	cmp	r3, #0
 804b6bc:	d102      	bne.n	804b6c4 <HAL_RTC_Init+0x9c>
      {
        hrtc->MspInitCallback = HAL_RTC_MspInit;
 804b6be:	687b      	ldr	r3, [r7, #4]
 804b6c0:	4a41      	ldr	r2, [pc, #260]	; (804b7c8 <HAL_RTC_Init+0x1a0>)
 804b6c2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      /* Init the low level hardware */
      hrtc->MspInitCallback(hrtc);
 804b6c4:	687b      	ldr	r3, [r7, #4]
 804b6c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804b6c8:	6878      	ldr	r0, [r7, #4]
 804b6ca:	4798      	blx	r3

      if (hrtc->MspDeInitCallback == NULL)
 804b6cc:	687b      	ldr	r3, [r7, #4]
 804b6ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804b6d0:	2b00      	cmp	r3, #0
 804b6d2:	d102      	bne.n	804b6da <HAL_RTC_Init+0xb2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 804b6d4:	687b      	ldr	r3, [r7, #4]
 804b6d6:	4a3d      	ldr	r2, [pc, #244]	; (804b7cc <HAL_RTC_Init+0x1a4>)
 804b6d8:	671a      	str	r2, [r3, #112]	; 0x70
      HAL_RTC_MspInit(hrtc);
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 804b6da:	687b      	ldr	r3, [r7, #4]
 804b6dc:	2202      	movs	r2, #2
 804b6de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804b6e2:	4b3b      	ldr	r3, [pc, #236]	; (804b7d0 <HAL_RTC_Init+0x1a8>)
 804b6e4:	22ca      	movs	r2, #202	; 0xca
 804b6e6:	625a      	str	r2, [r3, #36]	; 0x24
 804b6e8:	4b39      	ldr	r3, [pc, #228]	; (804b7d0 <HAL_RTC_Init+0x1a8>)
 804b6ea:	2253      	movs	r2, #83	; 0x53
 804b6ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 804b6ee:	6878      	ldr	r0, [r7, #4]
 804b6f0:	f000 fa74 	bl	804bbdc <RTC_EnterInitMode>
 804b6f4:	4603      	mov	r3, r0
 804b6f6:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 804b6f8:	7bfb      	ldrb	r3, [r7, #15]
 804b6fa:	2b00      	cmp	r3, #0
 804b6fc:	d133      	bne.n	804b766 <HAL_RTC_Init+0x13e>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 804b6fe:	4b34      	ldr	r3, [pc, #208]	; (804b7d0 <HAL_RTC_Init+0x1a8>)
 804b700:	699b      	ldr	r3, [r3, #24]
 804b702:	4a33      	ldr	r2, [pc, #204]	; (804b7d0 <HAL_RTC_Init+0x1a8>)
 804b704:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 804b708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804b70c:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 804b70e:	4b30      	ldr	r3, [pc, #192]	; (804b7d0 <HAL_RTC_Init+0x1a8>)
 804b710:	699a      	ldr	r2, [r3, #24]
 804b712:	687b      	ldr	r3, [r7, #4]
 804b714:	6859      	ldr	r1, [r3, #4]
 804b716:	687b      	ldr	r3, [r7, #4]
 804b718:	691b      	ldr	r3, [r3, #16]
 804b71a:	4319      	orrs	r1, r3
 804b71c:	687b      	ldr	r3, [r7, #4]
 804b71e:	699b      	ldr	r3, [r3, #24]
 804b720:	430b      	orrs	r3, r1
 804b722:	492b      	ldr	r1, [pc, #172]	; (804b7d0 <HAL_RTC_Init+0x1a8>)
 804b724:	4313      	orrs	r3, r2
 804b726:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 804b728:	687b      	ldr	r3, [r7, #4]
 804b72a:	68da      	ldr	r2, [r3, #12]
 804b72c:	687b      	ldr	r3, [r7, #4]
 804b72e:	689b      	ldr	r3, [r3, #8]
 804b730:	041b      	lsls	r3, r3, #16
 804b732:	4927      	ldr	r1, [pc, #156]	; (804b7d0 <HAL_RTC_Init+0x1a8>)
 804b734:	4313      	orrs	r3, r2
 804b736:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 804b738:	6878      	ldr	r0, [r7, #4]
 804b73a:	f000 fa83 	bl	804bc44 <RTC_ExitInitMode>
 804b73e:	4603      	mov	r3, r0
 804b740:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 804b742:	7bfb      	ldrb	r3, [r7, #15]
 804b744:	2b00      	cmp	r3, #0
 804b746:	d10e      	bne.n	804b766 <HAL_RTC_Init+0x13e>
      {
        MODIFY_REG(RTC->CR, \
 804b748:	4b21      	ldr	r3, [pc, #132]	; (804b7d0 <HAL_RTC_Init+0x1a8>)
 804b74a:	699b      	ldr	r3, [r3, #24]
 804b74c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 804b750:	687b      	ldr	r3, [r7, #4]
 804b752:	6a19      	ldr	r1, [r3, #32]
 804b754:	687b      	ldr	r3, [r7, #4]
 804b756:	69db      	ldr	r3, [r3, #28]
 804b758:	4319      	orrs	r1, r3
 804b75a:	687b      	ldr	r3, [r7, #4]
 804b75c:	695b      	ldr	r3, [r3, #20]
 804b75e:	430b      	orrs	r3, r1
 804b760:	491b      	ldr	r1, [pc, #108]	; (804b7d0 <HAL_RTC_Init+0x1a8>)
 804b762:	4313      	orrs	r3, r2
 804b764:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804b766:	4b1a      	ldr	r3, [pc, #104]	; (804b7d0 <HAL_RTC_Init+0x1a8>)
 804b768:	22ff      	movs	r2, #255	; 0xff
 804b76a:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 804b76c:	7bfb      	ldrb	r3, [r7, #15]
 804b76e:	2b00      	cmp	r3, #0
 804b770:	d103      	bne.n	804b77a <HAL_RTC_Init+0x152>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 804b772:	687b      	ldr	r3, [r7, #4]
 804b774:	2201      	movs	r2, #1
 804b776:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 804b77a:	7bfb      	ldrb	r3, [r7, #15]
}
 804b77c:	4618      	mov	r0, r3
 804b77e:	3710      	adds	r7, #16
 804b780:	46bd      	mov	sp, r7
 804b782:	bd80      	pop	{r7, pc}
 804b784:	0804244d 	.word	0x0804244d
 804b788:	0804bff1 	.word	0x0804bff1
 804b78c:	0804be0d 	.word	0x0804be0d
 804b790:	0804bf65 	.word	0x0804bf65
 804b794:	0804c005 	.word	0x0804c005
 804b798:	0804c019 	.word	0x0804c019
 804b79c:	0804c02d 	.word	0x0804c02d
 804b7a0:	0804c041 	.word	0x0804c041
 804b7a4:	0804c055 	.word	0x0804c055
 804b7a8:	0804c069 	.word	0x0804c069
 804b7ac:	0804c07d 	.word	0x0804c07d
 804b7b0:	0804c091 	.word	0x0804c091
 804b7b4:	0804c0a5 	.word	0x0804c0a5
 804b7b8:	0804c0b9 	.word	0x0804c0b9
 804b7bc:	0804c0cd 	.word	0x0804c0cd
 804b7c0:	0804c0e1 	.word	0x0804c0e1
 804b7c4:	0804c0f5 	.word	0x0804c0f5
 804b7c8:	08041eb9 	.word	0x08041eb9
 804b7cc:	08041f45 	.word	0x08041f45
 804b7d0:	40002800 	.word	0x40002800

0804b7d4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 804b7d4:	b580      	push	{r7, lr}
 804b7d6:	b086      	sub	sp, #24
 804b7d8:	af00      	add	r7, sp, #0
 804b7da:	60f8      	str	r0, [r7, #12]
 804b7dc:	60b9      	str	r1, [r7, #8]
 804b7de:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 804b7e0:	4b29      	ldr	r3, [pc, #164]	; (804b888 <HAL_RTC_GetTime+0xb4>)
 804b7e2:	689a      	ldr	r2, [r3, #8]
 804b7e4:	68bb      	ldr	r3, [r7, #8]
 804b7e6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 804b7e8:	4b27      	ldr	r3, [pc, #156]	; (804b888 <HAL_RTC_GetTime+0xb4>)
 804b7ea:	691b      	ldr	r3, [r3, #16]
 804b7ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 804b7f0:	68bb      	ldr	r3, [r7, #8]
 804b7f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 804b7f4:	4b24      	ldr	r3, [pc, #144]	; (804b888 <HAL_RTC_GetTime+0xb4>)
 804b7f6:	681b      	ldr	r3, [r3, #0]
 804b7f8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 804b7fc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 804b800:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 804b802:	697b      	ldr	r3, [r7, #20]
 804b804:	0c1b      	lsrs	r3, r3, #16
 804b806:	b2db      	uxtb	r3, r3
 804b808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 804b80c:	b2da      	uxtb	r2, r3
 804b80e:	68bb      	ldr	r3, [r7, #8]
 804b810:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 804b812:	697b      	ldr	r3, [r7, #20]
 804b814:	0a1b      	lsrs	r3, r3, #8
 804b816:	b2db      	uxtb	r3, r3
 804b818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804b81c:	b2da      	uxtb	r2, r3
 804b81e:	68bb      	ldr	r3, [r7, #8]
 804b820:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 804b822:	697b      	ldr	r3, [r7, #20]
 804b824:	b2db      	uxtb	r3, r3
 804b826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804b82a:	b2da      	uxtb	r2, r3
 804b82c:	68bb      	ldr	r3, [r7, #8]
 804b82e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 804b830:	697b      	ldr	r3, [r7, #20]
 804b832:	0d9b      	lsrs	r3, r3, #22
 804b834:	b2db      	uxtb	r3, r3
 804b836:	f003 0301 	and.w	r3, r3, #1
 804b83a:	b2da      	uxtb	r2, r3
 804b83c:	68bb      	ldr	r3, [r7, #8]
 804b83e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 804b840:	687b      	ldr	r3, [r7, #4]
 804b842:	2b00      	cmp	r3, #0
 804b844:	d11a      	bne.n	804b87c <HAL_RTC_GetTime+0xa8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 804b846:	68bb      	ldr	r3, [r7, #8]
 804b848:	781b      	ldrb	r3, [r3, #0]
 804b84a:	4618      	mov	r0, r3
 804b84c:	f000 fa58 	bl	804bd00 <RTC_Bcd2ToByte>
 804b850:	4603      	mov	r3, r0
 804b852:	461a      	mov	r2, r3
 804b854:	68bb      	ldr	r3, [r7, #8]
 804b856:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 804b858:	68bb      	ldr	r3, [r7, #8]
 804b85a:	785b      	ldrb	r3, [r3, #1]
 804b85c:	4618      	mov	r0, r3
 804b85e:	f000 fa4f 	bl	804bd00 <RTC_Bcd2ToByte>
 804b862:	4603      	mov	r3, r0
 804b864:	461a      	mov	r2, r3
 804b866:	68bb      	ldr	r3, [r7, #8]
 804b868:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 804b86a:	68bb      	ldr	r3, [r7, #8]
 804b86c:	789b      	ldrb	r3, [r3, #2]
 804b86e:	4618      	mov	r0, r3
 804b870:	f000 fa46 	bl	804bd00 <RTC_Bcd2ToByte>
 804b874:	4603      	mov	r3, r0
 804b876:	461a      	mov	r2, r3
 804b878:	68bb      	ldr	r3, [r7, #8]
 804b87a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 804b87c:	2300      	movs	r3, #0
}
 804b87e:	4618      	mov	r0, r3
 804b880:	3718      	adds	r7, #24
 804b882:	46bd      	mov	sp, r7
 804b884:	bd80      	pop	{r7, pc}
 804b886:	bf00      	nop
 804b888:	40002800 	.word	0x40002800

0804b88c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 804b88c:	b580      	push	{r7, lr}
 804b88e:	b086      	sub	sp, #24
 804b890:	af00      	add	r7, sp, #0
 804b892:	60f8      	str	r0, [r7, #12]
 804b894:	60b9      	str	r1, [r7, #8]
 804b896:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 804b898:	4b22      	ldr	r3, [pc, #136]	; (804b924 <HAL_RTC_GetDate+0x98>)
 804b89a:	685b      	ldr	r3, [r3, #4]
 804b89c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 804b8a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 804b8a4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 804b8a6:	697b      	ldr	r3, [r7, #20]
 804b8a8:	0c1b      	lsrs	r3, r3, #16
 804b8aa:	b2da      	uxtb	r2, r3
 804b8ac:	68bb      	ldr	r3, [r7, #8]
 804b8ae:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 804b8b0:	697b      	ldr	r3, [r7, #20]
 804b8b2:	0a1b      	lsrs	r3, r3, #8
 804b8b4:	b2db      	uxtb	r3, r3
 804b8b6:	f003 031f 	and.w	r3, r3, #31
 804b8ba:	b2da      	uxtb	r2, r3
 804b8bc:	68bb      	ldr	r3, [r7, #8]
 804b8be:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 804b8c0:	697b      	ldr	r3, [r7, #20]
 804b8c2:	b2db      	uxtb	r3, r3
 804b8c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 804b8c8:	b2da      	uxtb	r2, r3
 804b8ca:	68bb      	ldr	r3, [r7, #8]
 804b8cc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 804b8ce:	697b      	ldr	r3, [r7, #20]
 804b8d0:	0b5b      	lsrs	r3, r3, #13
 804b8d2:	b2db      	uxtb	r3, r3
 804b8d4:	f003 0307 	and.w	r3, r3, #7
 804b8d8:	b2da      	uxtb	r2, r3
 804b8da:	68bb      	ldr	r3, [r7, #8]
 804b8dc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 804b8de:	687b      	ldr	r3, [r7, #4]
 804b8e0:	2b00      	cmp	r3, #0
 804b8e2:	d11a      	bne.n	804b91a <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 804b8e4:	68bb      	ldr	r3, [r7, #8]
 804b8e6:	78db      	ldrb	r3, [r3, #3]
 804b8e8:	4618      	mov	r0, r3
 804b8ea:	f000 fa09 	bl	804bd00 <RTC_Bcd2ToByte>
 804b8ee:	4603      	mov	r3, r0
 804b8f0:	461a      	mov	r2, r3
 804b8f2:	68bb      	ldr	r3, [r7, #8]
 804b8f4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 804b8f6:	68bb      	ldr	r3, [r7, #8]
 804b8f8:	785b      	ldrb	r3, [r3, #1]
 804b8fa:	4618      	mov	r0, r3
 804b8fc:	f000 fa00 	bl	804bd00 <RTC_Bcd2ToByte>
 804b900:	4603      	mov	r3, r0
 804b902:	461a      	mov	r2, r3
 804b904:	68bb      	ldr	r3, [r7, #8]
 804b906:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 804b908:	68bb      	ldr	r3, [r7, #8]
 804b90a:	789b      	ldrb	r3, [r3, #2]
 804b90c:	4618      	mov	r0, r3
 804b90e:	f000 f9f7 	bl	804bd00 <RTC_Bcd2ToByte>
 804b912:	4603      	mov	r3, r0
 804b914:	461a      	mov	r2, r3
 804b916:	68bb      	ldr	r3, [r7, #8]
 804b918:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 804b91a:	2300      	movs	r3, #0
}
 804b91c:	4618      	mov	r0, r3
 804b91e:	3718      	adds	r7, #24
 804b920:	46bd      	mov	sp, r7
 804b922:	bd80      	pop	{r7, pc}
 804b924:	40002800 	.word	0x40002800

0804b928 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 804b928:	b590      	push	{r4, r7, lr}
 804b92a:	b087      	sub	sp, #28
 804b92c:	af00      	add	r7, sp, #0
 804b92e:	60f8      	str	r0, [r7, #12]
 804b930:	60b9      	str	r1, [r7, #8]
 804b932:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 804b934:	68fb      	ldr	r3, [r7, #12]
 804b936:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 804b93a:	2b01      	cmp	r3, #1
 804b93c:	d101      	bne.n	804b942 <HAL_RTC_SetAlarm_IT+0x1a>
 804b93e:	2302      	movs	r3, #2
 804b940:	e0b4      	b.n	804baac <HAL_RTC_SetAlarm_IT+0x184>
 804b942:	68fb      	ldr	r3, [r7, #12]
 804b944:	2201      	movs	r2, #1
 804b946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 804b94a:	68fb      	ldr	r3, [r7, #12]
 804b94c:	2202      	movs	r2, #2
 804b94e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if (Format == RTC_FORMAT_BIN)
 804b952:	687b      	ldr	r3, [r7, #4]
 804b954:	2b00      	cmp	r3, #0
 804b956:	d136      	bne.n	804b9c6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 804b958:	4b56      	ldr	r3, [pc, #344]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804b95a:	699b      	ldr	r3, [r3, #24]
 804b95c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804b960:	2b00      	cmp	r3, #0
 804b962:	d102      	bne.n	804b96a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 804b964:	68bb      	ldr	r3, [r7, #8]
 804b966:	2200      	movs	r2, #0
 804b968:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 804b96a:	68bb      	ldr	r3, [r7, #8]
 804b96c:	781b      	ldrb	r3, [r3, #0]
 804b96e:	4618      	mov	r0, r3
 804b970:	f000 f9a6 	bl	804bcc0 <RTC_ByteToBcd2>
 804b974:	4603      	mov	r3, r0
 804b976:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 804b978:	68bb      	ldr	r3, [r7, #8]
 804b97a:	785b      	ldrb	r3, [r3, #1]
 804b97c:	4618      	mov	r0, r3
 804b97e:	f000 f99f 	bl	804bcc0 <RTC_ByteToBcd2>
 804b982:	4603      	mov	r3, r0
 804b984:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 804b986:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 804b988:	68bb      	ldr	r3, [r7, #8]
 804b98a:	789b      	ldrb	r3, [r3, #2]
 804b98c:	4618      	mov	r0, r3
 804b98e:	f000 f997 	bl	804bcc0 <RTC_ByteToBcd2>
 804b992:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 804b994:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 804b998:	68bb      	ldr	r3, [r7, #8]
 804b99a:	78db      	ldrb	r3, [r3, #3]
 804b99c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 804b99e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 804b9a2:	68bb      	ldr	r3, [r7, #8]
 804b9a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 804b9a8:	4618      	mov	r0, r3
 804b9aa:	f000 f989 	bl	804bcc0 <RTC_ByteToBcd2>
 804b9ae:	4603      	mov	r3, r0
 804b9b0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 804b9b2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 804b9b6:	68bb      	ldr	r3, [r7, #8]
 804b9b8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 804b9ba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 804b9bc:	68bb      	ldr	r3, [r7, #8]
 804b9be:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 804b9c0:	4313      	orrs	r3, r2
 804b9c2:	617b      	str	r3, [r7, #20]
 804b9c4:	e022      	b.n	804ba0c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else /* Format BCD */
  {
    if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 804b9c6:	4b3b      	ldr	r3, [pc, #236]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804b9c8:	699b      	ldr	r3, [r3, #24]
 804b9ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804b9ce:	2b00      	cmp	r3, #0
 804b9d0:	d102      	bne.n	804b9d8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 804b9d2:	68bb      	ldr	r3, [r7, #8]
 804b9d4:	2200      	movs	r2, #0
 804b9d6:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 804b9d8:	68bb      	ldr	r3, [r7, #8]
 804b9da:	781b      	ldrb	r3, [r3, #0]
 804b9dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 804b9de:	68bb      	ldr	r3, [r7, #8]
 804b9e0:	785b      	ldrb	r3, [r3, #1]
 804b9e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 804b9e4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 804b9e6:	68ba      	ldr	r2, [r7, #8]
 804b9e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 804b9ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 804b9ec:	68bb      	ldr	r3, [r7, #8]
 804b9ee:	78db      	ldrb	r3, [r3, #3]
 804b9f0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 804b9f2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 804b9f4:	68bb      	ldr	r3, [r7, #8]
 804b9f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 804b9fa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 804b9fc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 804b9fe:	68bb      	ldr	r3, [r7, #8]
 804ba00:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 804ba02:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 804ba04:	68bb      	ldr	r3, [r7, #8]
 804ba06:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 804ba08:	4313      	orrs	r3, r2
 804ba0a:	617b      	str	r3, [r7, #20]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 804ba0c:	68bb      	ldr	r3, [r7, #8]
 804ba0e:	685a      	ldr	r2, [r3, #4]
 804ba10:	68bb      	ldr	r3, [r7, #8]
 804ba12:	699b      	ldr	r3, [r3, #24]
 804ba14:	4313      	orrs	r3, r2
 804ba16:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804ba18:	4b26      	ldr	r3, [pc, #152]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba1a:	22ca      	movs	r2, #202	; 0xca
 804ba1c:	625a      	str	r2, [r3, #36]	; 0x24
 804ba1e:	4b25      	ldr	r3, [pc, #148]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba20:	2253      	movs	r2, #83	; 0x53
 804ba22:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 804ba24:	68bb      	ldr	r3, [r7, #8]
 804ba26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ba28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804ba2c:	d115      	bne.n	804ba5a <HAL_RTC_SetAlarm_IT+0x132>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 804ba2e:	4b21      	ldr	r3, [pc, #132]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba30:	699b      	ldr	r3, [r3, #24]
 804ba32:	4a20      	ldr	r2, [pc, #128]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba34:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 804ba38:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 804ba3a:	4b1e      	ldr	r3, [pc, #120]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba3c:	2201      	movs	r2, #1
 804ba3e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configure the Alarm A */
    WRITE_REG(RTC->ALRMAR, (uint32_t)tmpreg);
 804ba40:	4a1c      	ldr	r2, [pc, #112]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba42:	697b      	ldr	r3, [r7, #20]
 804ba44:	6413      	str	r3, [r2, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    WRITE_REG(RTC->ALRMASSR, subsecondtmpreg);
 804ba46:	4a1b      	ldr	r2, [pc, #108]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba48:	693b      	ldr	r3, [r7, #16]
 804ba4a:	6453      	str	r3, [r2, #68]	; 0x44
    /* Configure the Alarm interrupt : Enable Alarm */
    SET_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 804ba4c:	4b19      	ldr	r3, [pc, #100]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba4e:	699b      	ldr	r3, [r3, #24]
 804ba50:	4a18      	ldr	r2, [pc, #96]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba52:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 804ba56:	6193      	str	r3, [r2, #24]
 804ba58:	e014      	b.n	804ba84 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 804ba5a:	4b16      	ldr	r3, [pc, #88]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba5c:	699b      	ldr	r3, [r3, #24]
 804ba5e:	4a15      	ldr	r2, [pc, #84]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba60:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 804ba64:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 804ba66:	4b13      	ldr	r3, [pc, #76]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba68:	2202      	movs	r2, #2
 804ba6a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configure the Alarm B */
    WRITE_REG(RTC->ALRMBR, (uint32_t)tmpreg);
 804ba6c:	4a11      	ldr	r2, [pc, #68]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba6e:	697b      	ldr	r3, [r7, #20]
 804ba70:	6493      	str	r3, [r2, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    WRITE_REG(RTC->ALRMBSSR, subsecondtmpreg);
 804ba72:	4a10      	ldr	r2, [pc, #64]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba74:	693b      	ldr	r3, [r7, #16]
 804ba76:	64d3      	str	r3, [r2, #76]	; 0x4c
    /* Configure the Alarm B interrupt : Enable Alarm */
    SET_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 804ba78:	4b0e      	ldr	r3, [pc, #56]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba7a:	699b      	ldr	r3, [r3, #24]
 804ba7c:	4a0d      	ldr	r2, [pc, #52]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba7e:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 804ba82:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 804ba84:	4b0c      	ldr	r3, [pc, #48]	; (804bab8 <HAL_RTC_SetAlarm_IT+0x190>)
 804ba86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804ba8a:	4a0b      	ldr	r2, [pc, #44]	; (804bab8 <HAL_RTC_SetAlarm_IT+0x190>)
 804ba8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804ba90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804ba94:	4b07      	ldr	r3, [pc, #28]	; (804bab4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804ba96:	22ff      	movs	r2, #255	; 0xff
 804ba98:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 804ba9a:	68fb      	ldr	r3, [r7, #12]
 804ba9c:	2201      	movs	r2, #1
 804ba9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 804baa2:	68fb      	ldr	r3, [r7, #12]
 804baa4:	2200      	movs	r2, #0
 804baa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 804baaa:	2300      	movs	r3, #0
}
 804baac:	4618      	mov	r0, r3
 804baae:	371c      	adds	r7, #28
 804bab0:	46bd      	mov	sp, r7
 804bab2:	bd90      	pop	{r4, r7, pc}
 804bab4:	40002800 	.word	0x40002800
 804bab8:	4002f400 	.word	0x4002f400

0804babc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 804babc:	b480      	push	{r7}
 804babe:	b083      	sub	sp, #12
 804bac0:	af00      	add	r7, sp, #0
 804bac2:	6078      	str	r0, [r7, #4]
 804bac4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 804bac6:	687b      	ldr	r3, [r7, #4]
 804bac8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 804bacc:	2b01      	cmp	r3, #1
 804bace:	d101      	bne.n	804bad4 <HAL_RTC_DeactivateAlarm+0x18>
 804bad0:	2302      	movs	r3, #2
 804bad2:	e02a      	b.n	804bb2a <HAL_RTC_DeactivateAlarm+0x6e>
 804bad4:	687b      	ldr	r3, [r7, #4]
 804bad6:	2201      	movs	r2, #1
 804bad8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 804badc:	687b      	ldr	r3, [r7, #4]
 804bade:	2202      	movs	r2, #2
 804bae0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804bae4:	4b14      	ldr	r3, [pc, #80]	; (804bb38 <HAL_RTC_DeactivateAlarm+0x7c>)
 804bae6:	22ca      	movs	r2, #202	; 0xca
 804bae8:	625a      	str	r2, [r3, #36]	; 0x24
 804baea:	4b13      	ldr	r3, [pc, #76]	; (804bb38 <HAL_RTC_DeactivateAlarm+0x7c>)
 804baec:	2253      	movs	r2, #83	; 0x53
 804baee:	625a      	str	r2, [r3, #36]	; 0x24

  /* In case of interrupt mode is used, the interrupt source must disabled */
  if (Alarm == RTC_ALARM_A)
 804baf0:	683b      	ldr	r3, [r7, #0]
 804baf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804baf6:	d106      	bne.n	804bb06 <HAL_RTC_DeactivateAlarm+0x4a>
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 804baf8:	4b0f      	ldr	r3, [pc, #60]	; (804bb38 <HAL_RTC_DeactivateAlarm+0x7c>)
 804bafa:	699b      	ldr	r3, [r3, #24]
 804bafc:	4a0e      	ldr	r2, [pc, #56]	; (804bb38 <HAL_RTC_DeactivateAlarm+0x7c>)
 804bafe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 804bb02:	6193      	str	r3, [r2, #24]
 804bb04:	e005      	b.n	804bb12 <HAL_RTC_DeactivateAlarm+0x56>
  }
  else
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 804bb06:	4b0c      	ldr	r3, [pc, #48]	; (804bb38 <HAL_RTC_DeactivateAlarm+0x7c>)
 804bb08:	699b      	ldr	r3, [r3, #24]
 804bb0a:	4a0b      	ldr	r2, [pc, #44]	; (804bb38 <HAL_RTC_DeactivateAlarm+0x7c>)
 804bb0c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 804bb10:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804bb12:	4b09      	ldr	r3, [pc, #36]	; (804bb38 <HAL_RTC_DeactivateAlarm+0x7c>)
 804bb14:	22ff      	movs	r2, #255	; 0xff
 804bb16:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 804bb18:	687b      	ldr	r3, [r7, #4]
 804bb1a:	2201      	movs	r2, #1
 804bb1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 804bb20:	687b      	ldr	r3, [r7, #4]
 804bb22:	2200      	movs	r2, #0
 804bb24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 804bb28:	2300      	movs	r3, #0
}
 804bb2a:	4618      	mov	r0, r3
 804bb2c:	370c      	adds	r7, #12
 804bb2e:	46bd      	mov	sp, r7
 804bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bb34:	4770      	bx	lr
 804bb36:	bf00      	nop
 804bb38:	40002800 	.word	0x40002800

0804bb3c <HAL_RTC_AlarmIRQHandler>:
  * @note   Alarm non-secure is available in non-secure driver.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 804bb3c:	b580      	push	{r7, lr}
 804bb3e:	b084      	sub	sp, #16
 804bb40:	af00      	add	r7, sp, #0
 804bb42:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);
 804bb44:	4b11      	ldr	r3, [pc, #68]	; (804bb8c <HAL_RTC_AlarmIRQHandler+0x50>)
 804bb46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804bb48:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 804bb4a:	68fb      	ldr	r3, [r7, #12]
 804bb4c:	f003 0301 	and.w	r3, r3, #1
 804bb50:	2b00      	cmp	r3, #0
 804bb52:	d006      	beq.n	804bb62 <HAL_RTC_AlarmIRQHandler+0x26>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 804bb54:	4b0d      	ldr	r3, [pc, #52]	; (804bb8c <HAL_RTC_AlarmIRQHandler+0x50>)
 804bb56:	2201      	movs	r2, #1
 804bb58:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
 804bb5a:	687b      	ldr	r3, [r7, #4]
 804bb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804bb5e:	6878      	ldr	r0, [r7, #4]
 804bb60:	4798      	blx	r3
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 804bb62:	68fb      	ldr	r3, [r7, #12]
 804bb64:	f003 0302 	and.w	r3, r3, #2
 804bb68:	2b00      	cmp	r3, #0
 804bb6a:	d006      	beq.n	804bb7a <HAL_RTC_AlarmIRQHandler+0x3e>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 804bb6c:	4b07      	ldr	r3, [pc, #28]	; (804bb8c <HAL_RTC_AlarmIRQHandler+0x50>)
 804bb6e:	2202      	movs	r2, #2
 804bb70:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
 804bb72:	687b      	ldr	r3, [r7, #4]
 804bb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804bb76:	6878      	ldr	r0, [r7, #4]
 804bb78:	4798      	blx	r3
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 804bb7a:	687b      	ldr	r3, [r7, #4]
 804bb7c:	2201      	movs	r2, #1
 804bb7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 804bb82:	bf00      	nop
 804bb84:	3710      	adds	r7, #16
 804bb86:	46bd      	mov	sp, r7
 804bb88:	bd80      	pop	{r7, pc}
 804bb8a:	bf00      	nop
 804bb8c:	40002800 	.word	0x40002800

0804bb90 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 804bb90:	b580      	push	{r7, lr}
 804bb92:	b084      	sub	sp, #16
 804bb94:	af00      	add	r7, sp, #0
 804bb96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 804bb98:	4b0f      	ldr	r3, [pc, #60]	; (804bbd8 <HAL_RTC_WaitForSynchro+0x48>)
 804bb9a:	68db      	ldr	r3, [r3, #12]
 804bb9c:	4a0e      	ldr	r2, [pc, #56]	; (804bbd8 <HAL_RTC_WaitForSynchro+0x48>)
 804bb9e:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 804bba2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 804bba4:	f7fb f816 	bl	8046bd4 <HAL_GetTick>
 804bba8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 804bbaa:	e009      	b.n	804bbc0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 804bbac:	f7fb f812 	bl	8046bd4 <HAL_GetTick>
 804bbb0:	4602      	mov	r2, r0
 804bbb2:	68fb      	ldr	r3, [r7, #12]
 804bbb4:	1ad3      	subs	r3, r2, r3
 804bbb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804bbba:	d901      	bls.n	804bbc0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 804bbbc:	2303      	movs	r3, #3
 804bbbe:	e006      	b.n	804bbce <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 804bbc0:	4b05      	ldr	r3, [pc, #20]	; (804bbd8 <HAL_RTC_WaitForSynchro+0x48>)
 804bbc2:	68db      	ldr	r3, [r3, #12]
 804bbc4:	f003 0320 	and.w	r3, r3, #32
 804bbc8:	2b00      	cmp	r3, #0
 804bbca:	d0ef      	beq.n	804bbac <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 804bbcc:	2300      	movs	r3, #0
}
 804bbce:	4618      	mov	r0, r3
 804bbd0:	3710      	adds	r7, #16
 804bbd2:	46bd      	mov	sp, r7
 804bbd4:	bd80      	pop	{r7, pc}
 804bbd6:	bf00      	nop
 804bbd8:	40002800 	.word	0x40002800

0804bbdc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 804bbdc:	b580      	push	{r7, lr}
 804bbde:	b084      	sub	sp, #16
 804bbe0:	af00      	add	r7, sp, #0
 804bbe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 804bbe4:	2300      	movs	r3, #0
 804bbe6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 804bbe8:	4b15      	ldr	r3, [pc, #84]	; (804bc40 <RTC_EnterInitMode+0x64>)
 804bbea:	68db      	ldr	r3, [r3, #12]
 804bbec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804bbf0:	2b00      	cmp	r3, #0
 804bbf2:	d120      	bne.n	804bc36 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 804bbf4:	4b12      	ldr	r3, [pc, #72]	; (804bc40 <RTC_EnterInitMode+0x64>)
 804bbf6:	68db      	ldr	r3, [r3, #12]
 804bbf8:	4a11      	ldr	r2, [pc, #68]	; (804bc40 <RTC_EnterInitMode+0x64>)
 804bbfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804bbfe:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 804bc00:	f7fa ffe8 	bl	8046bd4 <HAL_GetTick>
 804bc04:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 804bc06:	e00d      	b.n	804bc24 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 804bc08:	f7fa ffe4 	bl	8046bd4 <HAL_GetTick>
 804bc0c:	4602      	mov	r2, r0
 804bc0e:	68bb      	ldr	r3, [r7, #8]
 804bc10:	1ad3      	subs	r3, r2, r3
 804bc12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804bc16:	d905      	bls.n	804bc24 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 804bc18:	2303      	movs	r3, #3
 804bc1a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 804bc1c:	687b      	ldr	r3, [r7, #4]
 804bc1e:	2203      	movs	r2, #3
 804bc20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 804bc24:	4b06      	ldr	r3, [pc, #24]	; (804bc40 <RTC_EnterInitMode+0x64>)
 804bc26:	68db      	ldr	r3, [r3, #12]
 804bc28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804bc2c:	2b00      	cmp	r3, #0
 804bc2e:	d102      	bne.n	804bc36 <RTC_EnterInitMode+0x5a>
 804bc30:	7bfb      	ldrb	r3, [r7, #15]
 804bc32:	2b03      	cmp	r3, #3
 804bc34:	d1e8      	bne.n	804bc08 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 804bc36:	7bfb      	ldrb	r3, [r7, #15]
}
 804bc38:	4618      	mov	r0, r3
 804bc3a:	3710      	adds	r7, #16
 804bc3c:	46bd      	mov	sp, r7
 804bc3e:	bd80      	pop	{r7, pc}
 804bc40:	40002800 	.word	0x40002800

0804bc44 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 804bc44:	b580      	push	{r7, lr}
 804bc46:	b084      	sub	sp, #16
 804bc48:	af00      	add	r7, sp, #0
 804bc4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 804bc4c:	2300      	movs	r3, #0
 804bc4e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 804bc50:	4b1a      	ldr	r3, [pc, #104]	; (804bcbc <RTC_ExitInitMode+0x78>)
 804bc52:	68db      	ldr	r3, [r3, #12]
 804bc54:	4a19      	ldr	r2, [pc, #100]	; (804bcbc <RTC_ExitInitMode+0x78>)
 804bc56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804bc5a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 804bc5c:	4b17      	ldr	r3, [pc, #92]	; (804bcbc <RTC_ExitInitMode+0x78>)
 804bc5e:	699b      	ldr	r3, [r3, #24]
 804bc60:	f003 0320 	and.w	r3, r3, #32
 804bc64:	2b00      	cmp	r3, #0
 804bc66:	d10c      	bne.n	804bc82 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 804bc68:	6878      	ldr	r0, [r7, #4]
 804bc6a:	f7ff ff91 	bl	804bb90 <HAL_RTC_WaitForSynchro>
 804bc6e:	4603      	mov	r3, r0
 804bc70:	2b00      	cmp	r3, #0
 804bc72:	d01e      	beq.n	804bcb2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 804bc74:	687b      	ldr	r3, [r7, #4]
 804bc76:	2203      	movs	r2, #3
 804bc78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 804bc7c:	2303      	movs	r3, #3
 804bc7e:	73fb      	strb	r3, [r7, #15]
 804bc80:	e017      	b.n	804bcb2 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 804bc82:	4b0e      	ldr	r3, [pc, #56]	; (804bcbc <RTC_ExitInitMode+0x78>)
 804bc84:	699b      	ldr	r3, [r3, #24]
 804bc86:	4a0d      	ldr	r2, [pc, #52]	; (804bcbc <RTC_ExitInitMode+0x78>)
 804bc88:	f023 0320 	bic.w	r3, r3, #32
 804bc8c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 804bc8e:	6878      	ldr	r0, [r7, #4]
 804bc90:	f7ff ff7e 	bl	804bb90 <HAL_RTC_WaitForSynchro>
 804bc94:	4603      	mov	r3, r0
 804bc96:	2b00      	cmp	r3, #0
 804bc98:	d005      	beq.n	804bca6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 804bc9a:	687b      	ldr	r3, [r7, #4]
 804bc9c:	2203      	movs	r2, #3
 804bc9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 804bca2:	2303      	movs	r3, #3
 804bca4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 804bca6:	4b05      	ldr	r3, [pc, #20]	; (804bcbc <RTC_ExitInitMode+0x78>)
 804bca8:	699b      	ldr	r3, [r3, #24]
 804bcaa:	4a04      	ldr	r2, [pc, #16]	; (804bcbc <RTC_ExitInitMode+0x78>)
 804bcac:	f043 0320 	orr.w	r3, r3, #32
 804bcb0:	6193      	str	r3, [r2, #24]
  }

  return status;
 804bcb2:	7bfb      	ldrb	r3, [r7, #15]
}
 804bcb4:	4618      	mov	r0, r3
 804bcb6:	3710      	adds	r7, #16
 804bcb8:	46bd      	mov	sp, r7
 804bcba:	bd80      	pop	{r7, pc}
 804bcbc:	40002800 	.word	0x40002800

0804bcc0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 804bcc0:	b480      	push	{r7}
 804bcc2:	b085      	sub	sp, #20
 804bcc4:	af00      	add	r7, sp, #0
 804bcc6:	4603      	mov	r3, r0
 804bcc8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 804bcca:	2300      	movs	r3, #0
 804bccc:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 804bcce:	79fb      	ldrb	r3, [r7, #7]
 804bcd0:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 804bcd2:	e005      	b.n	804bce0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 804bcd4:	68fb      	ldr	r3, [r7, #12]
 804bcd6:	3301      	adds	r3, #1
 804bcd8:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 804bcda:	7afb      	ldrb	r3, [r7, #11]
 804bcdc:	3b0a      	subs	r3, #10
 804bcde:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 804bce0:	7afb      	ldrb	r3, [r7, #11]
 804bce2:	2b09      	cmp	r3, #9
 804bce4:	d8f6      	bhi.n	804bcd4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 804bce6:	68fb      	ldr	r3, [r7, #12]
 804bce8:	b2db      	uxtb	r3, r3
 804bcea:	011b      	lsls	r3, r3, #4
 804bcec:	b2da      	uxtb	r2, r3
 804bcee:	7afb      	ldrb	r3, [r7, #11]
 804bcf0:	4313      	orrs	r3, r2
 804bcf2:	b2db      	uxtb	r3, r3
}
 804bcf4:	4618      	mov	r0, r3
 804bcf6:	3714      	adds	r7, #20
 804bcf8:	46bd      	mov	sp, r7
 804bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bcfe:	4770      	bx	lr

0804bd00 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 804bd00:	b480      	push	{r7}
 804bd02:	b085      	sub	sp, #20
 804bd04:	af00      	add	r7, sp, #0
 804bd06:	4603      	mov	r3, r0
 804bd08:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 804bd0a:	79fb      	ldrb	r3, [r7, #7]
 804bd0c:	091b      	lsrs	r3, r3, #4
 804bd0e:	b2db      	uxtb	r3, r3
 804bd10:	461a      	mov	r2, r3
 804bd12:	4613      	mov	r3, r2
 804bd14:	009b      	lsls	r3, r3, #2
 804bd16:	4413      	add	r3, r2
 804bd18:	005b      	lsls	r3, r3, #1
 804bd1a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 804bd1c:	68fb      	ldr	r3, [r7, #12]
 804bd1e:	b2da      	uxtb	r2, r3
 804bd20:	79fb      	ldrb	r3, [r7, #7]
 804bd22:	f003 030f 	and.w	r3, r3, #15
 804bd26:	b2db      	uxtb	r3, r3
 804bd28:	4413      	add	r3, r2
 804bd2a:	b2db      	uxtb	r3, r3
}
 804bd2c:	4618      	mov	r0, r3
 804bd2e:	3714      	adds	r7, #20
 804bd30:	46bd      	mov	sp, r7
 804bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bd36:	4770      	bx	lr

0804bd38 <HAL_RTCEx_SetTimeStamp_IT>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 804bd38:	b480      	push	{r7}
 804bd3a:	b085      	sub	sp, #20
 804bd3c:	af00      	add	r7, sp, #0
 804bd3e:	60f8      	str	r0, [r7, #12]
 804bd40:	60b9      	str	r1, [r7, #8]
 804bd42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 804bd44:	68fb      	ldr	r3, [r7, #12]
 804bd46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 804bd4a:	2b01      	cmp	r3, #1
 804bd4c:	d101      	bne.n	804bd52 <HAL_RTCEx_SetTimeStamp_IT+0x1a>
 804bd4e:	2302      	movs	r3, #2
 804bd50:	e035      	b.n	804bdbe <HAL_RTCEx_SetTimeStamp_IT+0x86>
 804bd52:	68fb      	ldr	r3, [r7, #12]
 804bd54:	2201      	movs	r2, #1
 804bd56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 804bd5a:	68fb      	ldr	r3, [r7, #12]
 804bd5c:	2202      	movs	r2, #2
 804bd5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* RTC timestamp Interrupt Configuration: EXTI configuration */
  __HAL_RTC_TIMESTAMP_EXTI_ENABLE_IT();
 804bd62:	4b1a      	ldr	r3, [pc, #104]	; (804bdcc <HAL_RTCEx_SetTimeStamp_IT+0x94>)
 804bd64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804bd68:	4a18      	ldr	r2, [pc, #96]	; (804bdcc <HAL_RTCEx_SetTimeStamp_IT+0x94>)
 804bd6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804bd6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Get the RTC_CR register and clear the bits to be configured */
  CLEAR_BIT(RTC->CR, (RTC_CR_TSEDGE | RTC_CR_TSE));
 804bd72:	4b17      	ldr	r3, [pc, #92]	; (804bdd0 <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804bd74:	699b      	ldr	r3, [r3, #24]
 804bd76:	4a16      	ldr	r2, [pc, #88]	; (804bdd0 <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804bd78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804bd7c:	f023 0308 	bic.w	r3, r3, #8
 804bd80:	6193      	str	r3, [r2, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804bd82:	4b13      	ldr	r3, [pc, #76]	; (804bdd0 <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804bd84:	22ca      	movs	r2, #202	; 0xca
 804bd86:	625a      	str	r2, [r3, #36]	; 0x24
 804bd88:	4b11      	ldr	r3, [pc, #68]	; (804bdd0 <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804bd8a:	2253      	movs	r2, #83	; 0x53
 804bd8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE before Enable bit to avoid unwanted TSF setting. */
  SET_BIT(RTC->CR, (uint32_t)TimeStampEdge);
 804bd8e:	4b10      	ldr	r3, [pc, #64]	; (804bdd0 <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804bd90:	699a      	ldr	r2, [r3, #24]
 804bd92:	490f      	ldr	r1, [pc, #60]	; (804bdd0 <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804bd94:	68bb      	ldr	r3, [r7, #8]
 804bd96:	4313      	orrs	r3, r2
 804bd98:	618b      	str	r3, [r1, #24]

  /* Enable timestamp and IT */
  SET_BIT(RTC->CR, RTC_CR_TSE | RTC_CR_TSIE);
 804bd9a:	4b0d      	ldr	r3, [pc, #52]	; (804bdd0 <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804bd9c:	699b      	ldr	r3, [r3, #24]
 804bd9e:	4a0c      	ldr	r2, [pc, #48]	; (804bdd0 <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804bda0:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 804bda4:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804bda6:	4b0a      	ldr	r3, [pc, #40]	; (804bdd0 <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804bda8:	22ff      	movs	r2, #255	; 0xff
 804bdaa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 804bdac:	68fb      	ldr	r3, [r7, #12]
 804bdae:	2201      	movs	r2, #1
 804bdb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 804bdb4:	68fb      	ldr	r3, [r7, #12]
 804bdb6:	2200      	movs	r2, #0
 804bdb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 804bdbc:	2300      	movs	r3, #0
}
 804bdbe:	4618      	mov	r0, r3
 804bdc0:	3714      	adds	r7, #20
 804bdc2:	46bd      	mov	sp, r7
 804bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bdc8:	4770      	bx	lr
 804bdca:	bf00      	nop
 804bdcc:	4002f400 	.word	0x4002f400
 804bdd0:	40002800 	.word	0x40002800

0804bdd4 <HAL_RTCEx_TimeStampIRQHandler>:
  * @brief  Handle TimeStamp non-secure interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_TimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 804bdd4:	b580      	push	{r7, lr}
 804bdd6:	b082      	sub	sp, #8
 804bdd8:	af00      	add	r7, sp, #0
 804bdda:	6078      	str	r0, [r7, #4]
  if (READ_BIT(RTC->MISR, RTC_MISR_TSMF) != 0U)
 804bddc:	4b0a      	ldr	r3, [pc, #40]	; (804be08 <HAL_RTCEx_TimeStampIRQHandler+0x34>)
 804bdde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804bde0:	f003 0308 	and.w	r3, r3, #8
 804bde4:	2b00      	cmp	r3, #0
 804bde6:	d006      	beq.n	804bdf6 <HAL_RTCEx_TimeStampIRQHandler+0x22>
  {
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call TimeStampEvent registered Callback */
    hrtc->TimeStampEventCallback(hrtc);
 804bde8:	687b      	ldr	r3, [r7, #4]
 804bdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804bdec:	6878      	ldr	r0, [r7, #4]
 804bdee:	4798      	blx	r3
#else
    HAL_RTCEx_TimeStampEventCallback(hrtc);
#endif
    /* Clearing flags after the Callback because the content of RTC_TSTR and RTC_TSDR are cleared when TSF bit is reset.*/
    WRITE_REG(RTC->SCR, RTC_SCR_CITSF | RTC_SCR_CTSF);
 804bdf0:	4b05      	ldr	r3, [pc, #20]	; (804be08 <HAL_RTCEx_TimeStampIRQHandler+0x34>)
 804bdf2:	2228      	movs	r2, #40	; 0x28
 804bdf4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 804bdf6:	687b      	ldr	r3, [r7, #4]
 804bdf8:	2201      	movs	r2, #1
 804bdfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 804bdfe:	bf00      	nop
 804be00:	3708      	adds	r7, #8
 804be02:	46bd      	mov	sp, r7
 804be04:	bd80      	pop	{r7, pc}
 804be06:	bf00      	nop
 804be08:	40002800 	.word	0x40002800

0804be0c <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 804be0c:	b480      	push	{r7}
 804be0e:	b083      	sub	sp, #12
 804be10:	af00      	add	r7, sp, #0
 804be12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 804be14:	bf00      	nop
 804be16:	370c      	adds	r7, #12
 804be18:	46bd      	mov	sp, r7
 804be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804be1e:	4770      	bx	lr

0804be20 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 804be20:	b580      	push	{r7, lr}
 804be22:	b086      	sub	sp, #24
 804be24:	af00      	add	r7, sp, #0
 804be26:	60f8      	str	r0, [r7, #12]
 804be28:	60b9      	str	r1, [r7, #8]
 804be2a:	607a      	str	r2, [r7, #4]
 804be2c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 804be2e:	68fb      	ldr	r3, [r7, #12]
 804be30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 804be34:	2b01      	cmp	r3, #1
 804be36:	d101      	bne.n	804be3c <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 804be38:	2302      	movs	r3, #2
 804be3a:	e06f      	b.n	804bf1c <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
 804be3c:	68fb      	ldr	r3, [r7, #12]
 804be3e:	2201      	movs	r2, #1
 804be40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 804be44:	68fb      	ldr	r3, [r7, #12]
 804be46:	2202      	movs	r2, #2
 804be48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804be4c:	4b35      	ldr	r3, [pc, #212]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804be4e:	22ca      	movs	r2, #202	; 0xca
 804be50:	625a      	str	r2, [r3, #36]	; 0x24
 804be52:	4b34      	ldr	r3, [pc, #208]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804be54:	2253      	movs	r2, #83	; 0x53
 804be56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 804be58:	4b32      	ldr	r3, [pc, #200]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804be5a:	699b      	ldr	r3, [r3, #24]
 804be5c:	4a31      	ldr	r2, [pc, #196]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804be5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 804be62:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 804be64:	4b2f      	ldr	r3, [pc, #188]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804be66:	2204      	movs	r2, #4
 804be68:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 804be6a:	4b2e      	ldr	r3, [pc, #184]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804be6c:	68db      	ldr	r3, [r3, #12]
 804be6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804be72:	2b00      	cmp	r3, #0
 804be74:	d11e      	bne.n	804beb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 804be76:	f7fa fead 	bl	8046bd4 <HAL_GetTick>
 804be7a:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 804be7c:	e014      	b.n	804bea8 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 804be7e:	f7fa fea9 	bl	8046bd4 <HAL_GetTick>
 804be82:	4602      	mov	r2, r0
 804be84:	697b      	ldr	r3, [r7, #20]
 804be86:	1ad3      	subs	r3, r2, r3
 804be88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804be8c:	d90c      	bls.n	804bea8 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804be8e:	4b25      	ldr	r3, [pc, #148]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804be90:	22ff      	movs	r2, #255	; 0xff
 804be92:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 804be94:	68fb      	ldr	r3, [r7, #12]
 804be96:	2203      	movs	r2, #3
 804be98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 804be9c:	68fb      	ldr	r3, [r7, #12]
 804be9e:	2200      	movs	r2, #0
 804bea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 804bea4:	2303      	movs	r3, #3
 804bea6:	e039      	b.n	804bf1c <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 804bea8:	4b1e      	ldr	r3, [pc, #120]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804beaa:	68db      	ldr	r3, [r3, #12]
 804beac:	f003 0304 	and.w	r3, r3, #4
 804beb0:	2b00      	cmp	r3, #0
 804beb2:	d0e4      	beq.n	804be7e <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 804beb4:	683b      	ldr	r3, [r7, #0]
 804beb6:	041a      	lsls	r2, r3, #16
 804beb8:	491a      	ldr	r1, [pc, #104]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804beba:	68bb      	ldr	r3, [r7, #8]
 804bebc:	4313      	orrs	r3, r2
 804bebe:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 804bec0:	4b18      	ldr	r3, [pc, #96]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804bec2:	699b      	ldr	r3, [r3, #24]
 804bec4:	f023 0207 	bic.w	r2, r3, #7
 804bec8:	4916      	ldr	r1, [pc, #88]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804beca:	687b      	ldr	r3, [r7, #4]
 804becc:	4313      	orrs	r3, r2
 804bece:	618b      	str	r3, [r1, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 804bed0:	683b      	ldr	r3, [r7, #0]
 804bed2:	2b00      	cmp	r3, #0
 804bed4:	d008      	beq.n	804bee8 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 804bed6:	4b14      	ldr	r3, [pc, #80]	; (804bf28 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 804bed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804bedc:	4a12      	ldr	r2, [pc, #72]	; (804bf28 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 804bede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804bee2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 804bee6:	e007      	b.n	804bef8 <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 804bee8:	4b0f      	ldr	r3, [pc, #60]	; (804bf28 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 804beea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804beee:	4a0e      	ldr	r2, [pc, #56]	; (804bf28 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 804bef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804bef4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 804bef8:	4b0a      	ldr	r3, [pc, #40]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804befa:	699b      	ldr	r3, [r3, #24]
 804befc:	4a09      	ldr	r2, [pc, #36]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804befe:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 804bf02:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804bf04:	4b07      	ldr	r3, [pc, #28]	; (804bf24 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804bf06:	22ff      	movs	r2, #255	; 0xff
 804bf08:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 804bf0a:	68fb      	ldr	r3, [r7, #12]
 804bf0c:	2201      	movs	r2, #1
 804bf0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 804bf12:	68fb      	ldr	r3, [r7, #12]
 804bf14:	2200      	movs	r2, #0
 804bf16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 804bf1a:	2300      	movs	r3, #0
}
 804bf1c:	4618      	mov	r0, r3
 804bf1e:	3718      	adds	r7, #24
 804bf20:	46bd      	mov	sp, r7
 804bf22:	bd80      	pop	{r7, pc}
 804bf24:	40002800 	.word	0x40002800
 804bf28:	4002f400 	.word	0x4002f400

0804bf2c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer non-secure interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 804bf2c:	b580      	push	{r7, lr}
 804bf2e:	b082      	sub	sp, #8
 804bf30:	af00      	add	r7, sp, #0
 804bf32:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 804bf34:	4b0a      	ldr	r3, [pc, #40]	; (804bf60 <HAL_RTCEx_WakeUpTimerIRQHandler+0x34>)
 804bf36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804bf38:	f003 0304 	and.w	r3, r3, #4
 804bf3c:	2b00      	cmp	r3, #0
 804bf3e:	d006      	beq.n	804bf4e <HAL_RTCEx_WakeUpTimerIRQHandler+0x22>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 804bf40:	4b07      	ldr	r3, [pc, #28]	; (804bf60 <HAL_RTCEx_WakeUpTimerIRQHandler+0x34>)
 804bf42:	2204      	movs	r2, #4
 804bf44:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
 804bf46:	687b      	ldr	r3, [r7, #4]
 804bf48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804bf4a:	6878      	ldr	r0, [r7, #4]
 804bf4c:	4798      	blx	r3
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 804bf4e:	687b      	ldr	r3, [r7, #4]
 804bf50:	2201      	movs	r2, #1
 804bf52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 804bf56:	bf00      	nop
 804bf58:	3708      	adds	r7, #8
 804bf5a:	46bd      	mov	sp, r7
 804bf5c:	bd80      	pop	{r7, pc}
 804bf5e:	bf00      	nop
 804bf60:	40002800 	.word	0x40002800

0804bf64 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 804bf64:	b480      	push	{r7}
 804bf66:	b083      	sub	sp, #12
 804bf68:	af00      	add	r7, sp, #0
 804bf6a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 804bf6c:	bf00      	nop
 804bf6e:	370c      	adds	r7, #12
 804bf70:	46bd      	mov	sp, r7
 804bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bf76:	4770      	bx	lr

0804bf78 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 804bf78:	b480      	push	{r7}
 804bf7a:	b083      	sub	sp, #12
 804bf7c:	af00      	add	r7, sp, #0
 804bf7e:	6078      	str	r0, [r7, #4]
 804bf80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 804bf82:	687b      	ldr	r3, [r7, #4]
 804bf84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 804bf88:	2b01      	cmp	r3, #1
 804bf8a:	d101      	bne.n	804bf90 <HAL_RTCEx_SetCalibrationOutPut+0x18>
 804bf8c:	2302      	movs	r3, #2
 804bf8e:	e027      	b.n	804bfe0 <HAL_RTCEx_SetCalibrationOutPut+0x68>
 804bf90:	687b      	ldr	r3, [r7, #4]
 804bf92:	2201      	movs	r2, #1
 804bf94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 804bf98:	687b      	ldr	r3, [r7, #4]
 804bf9a:	2202      	movs	r2, #2
 804bf9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804bfa0:	4b12      	ldr	r3, [pc, #72]	; (804bfec <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804bfa2:	22ca      	movs	r2, #202	; 0xca
 804bfa4:	625a      	str	r2, [r3, #36]	; 0x24
 804bfa6:	4b11      	ldr	r3, [pc, #68]	; (804bfec <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804bfa8:	2253      	movs	r2, #83	; 0x53
 804bfaa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the RTC_CR register */
  MODIFY_REG(RTC->CR, RTC_CR_COSEL, CalibOutput);
 804bfac:	4b0f      	ldr	r3, [pc, #60]	; (804bfec <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804bfae:	699b      	ldr	r3, [r3, #24]
 804bfb0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 804bfb4:	490d      	ldr	r1, [pc, #52]	; (804bfec <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804bfb6:	683b      	ldr	r3, [r7, #0]
 804bfb8:	4313      	orrs	r3, r2
 804bfba:	618b      	str	r3, [r1, #24]

  /* Enable calibration output */
  SET_BIT(RTC->CR, RTC_CR_COE);
 804bfbc:	4b0b      	ldr	r3, [pc, #44]	; (804bfec <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804bfbe:	699b      	ldr	r3, [r3, #24]
 804bfc0:	4a0a      	ldr	r2, [pc, #40]	; (804bfec <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804bfc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 804bfc6:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804bfc8:	4b08      	ldr	r3, [pc, #32]	; (804bfec <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804bfca:	22ff      	movs	r2, #255	; 0xff
 804bfcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 804bfce:	687b      	ldr	r3, [r7, #4]
 804bfd0:	2201      	movs	r2, #1
 804bfd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 804bfd6:	687b      	ldr	r3, [r7, #4]
 804bfd8:	2200      	movs	r2, #0
 804bfda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 804bfde:	2300      	movs	r3, #0
}
 804bfe0:	4618      	mov	r0, r3
 804bfe2:	370c      	adds	r7, #12
 804bfe4:	46bd      	mov	sp, r7
 804bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bfea:	4770      	bx	lr
 804bfec:	40002800 	.word	0x40002800

0804bff0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 804bff0:	b480      	push	{r7}
 804bff2:	b083      	sub	sp, #12
 804bff4:	af00      	add	r7, sp, #0
 804bff6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 804bff8:	bf00      	nop
 804bffa:	370c      	adds	r7, #12
 804bffc:	46bd      	mov	sp, r7
 804bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c002:	4770      	bx	lr

0804c004 <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c004:	b480      	push	{r7}
 804c006:	b083      	sub	sp, #12
 804c008:	af00      	add	r7, sp, #0
 804c00a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 804c00c:	bf00      	nop
 804c00e:	370c      	adds	r7, #12
 804c010:	46bd      	mov	sp, r7
 804c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c016:	4770      	bx	lr

0804c018 <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c018:	b480      	push	{r7}
 804c01a:	b083      	sub	sp, #12
 804c01c:	af00      	add	r7, sp, #0
 804c01e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 804c020:	bf00      	nop
 804c022:	370c      	adds	r7, #12
 804c024:	46bd      	mov	sp, r7
 804c026:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c02a:	4770      	bx	lr

0804c02c <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c02c:	b480      	push	{r7}
 804c02e:	b083      	sub	sp, #12
 804c030:	af00      	add	r7, sp, #0
 804c032:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 804c034:	bf00      	nop
 804c036:	370c      	adds	r7, #12
 804c038:	46bd      	mov	sp, r7
 804c03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c03e:	4770      	bx	lr

0804c040 <HAL_RTCEx_Tamper4EventCallback>:
  * @brief  Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper4EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c040:	b480      	push	{r7}
 804c042:	b083      	sub	sp, #12
 804c044:	af00      	add	r7, sp, #0
 804c046:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper4EventCallback could be implemented in the user file
   */
}
 804c048:	bf00      	nop
 804c04a:	370c      	adds	r7, #12
 804c04c:	46bd      	mov	sp, r7
 804c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c052:	4770      	bx	lr

0804c054 <HAL_RTCEx_Tamper5EventCallback>:
  * @brief  Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c054:	b480      	push	{r7}
 804c056:	b083      	sub	sp, #12
 804c058:	af00      	add	r7, sp, #0
 804c05a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper5EventCallback could be implemented in the user file
   */
}
 804c05c:	bf00      	nop
 804c05e:	370c      	adds	r7, #12
 804c060:	46bd      	mov	sp, r7
 804c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c066:	4770      	bx	lr

0804c068 <HAL_RTCEx_Tamper6EventCallback>:
  * @brief  Tamper 6 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper6EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c068:	b480      	push	{r7}
 804c06a:	b083      	sub	sp, #12
 804c06c:	af00      	add	r7, sp, #0
 804c06e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper6EventCallback could be implemented in the user file
   */
}
 804c070:	bf00      	nop
 804c072:	370c      	adds	r7, #12
 804c074:	46bd      	mov	sp, r7
 804c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c07a:	4770      	bx	lr

0804c07c <HAL_RTCEx_Tamper7EventCallback>:
  * @brief  Tamper 7 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper7EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c07c:	b480      	push	{r7}
 804c07e:	b083      	sub	sp, #12
 804c080:	af00      	add	r7, sp, #0
 804c082:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper7EventCallback could be implemented in the user file
   */
}
 804c084:	bf00      	nop
 804c086:	370c      	adds	r7, #12
 804c088:	46bd      	mov	sp, r7
 804c08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c08e:	4770      	bx	lr

0804c090 <HAL_RTCEx_Tamper8EventCallback>:
  * @brief  Tamper 8 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper8EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c090:	b480      	push	{r7}
 804c092:	b083      	sub	sp, #12
 804c094:	af00      	add	r7, sp, #0
 804c096:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper8EventCallback could be implemented in the user file
   */
}
 804c098:	bf00      	nop
 804c09a:	370c      	adds	r7, #12
 804c09c:	46bd      	mov	sp, r7
 804c09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c0a2:	4770      	bx	lr

0804c0a4 <HAL_RTCEx_InternalTamper1EventCallback>:
  * @brief  Internal Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c0a4:	b480      	push	{r7}
 804c0a6:	b083      	sub	sp, #12
 804c0a8:	af00      	add	r7, sp, #0
 804c0aa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper1EventCallback could be implemented in the user file
   */
}
 804c0ac:	bf00      	nop
 804c0ae:	370c      	adds	r7, #12
 804c0b0:	46bd      	mov	sp, r7
 804c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c0b6:	4770      	bx	lr

0804c0b8 <HAL_RTCEx_InternalTamper2EventCallback>:
  * @brief  Internal Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c0b8:	b480      	push	{r7}
 804c0ba:	b083      	sub	sp, #12
 804c0bc:	af00      	add	r7, sp, #0
 804c0be:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper2EventCallback could be implemented in the user file
   */
}
 804c0c0:	bf00      	nop
 804c0c2:	370c      	adds	r7, #12
 804c0c4:	46bd      	mov	sp, r7
 804c0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c0ca:	4770      	bx	lr

0804c0cc <HAL_RTCEx_InternalTamper3EventCallback>:
  * @brief  Internal Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c0cc:	b480      	push	{r7}
 804c0ce:	b083      	sub	sp, #12
 804c0d0:	af00      	add	r7, sp, #0
 804c0d2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper3EventCallback could be implemented in the user file
   */
}
 804c0d4:	bf00      	nop
 804c0d6:	370c      	adds	r7, #12
 804c0d8:	46bd      	mov	sp, r7
 804c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c0de:	4770      	bx	lr

0804c0e0 <HAL_RTCEx_InternalTamper5EventCallback>:
  * @brief  Internal Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c0e0:	b480      	push	{r7}
 804c0e2:	b083      	sub	sp, #12
 804c0e4:	af00      	add	r7, sp, #0
 804c0e6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper5EventCallback could be implemented in the user file
   */
}
 804c0e8:	bf00      	nop
 804c0ea:	370c      	adds	r7, #12
 804c0ec:	46bd      	mov	sp, r7
 804c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c0f2:	4770      	bx	lr

0804c0f4 <HAL_RTCEx_InternalTamper8EventCallback>:
  * @brief  Internal Tamper 8 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper8EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c0f4:	b480      	push	{r7}
 804c0f6:	b083      	sub	sp, #12
 804c0f8:	af00      	add	r7, sp, #0
 804c0fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper8EventCallback could be implemented in the user file
   */
}
 804c0fc:	bf00      	nop
 804c0fe:	370c      	adds	r7, #12
 804c100:	46bd      	mov	sp, r7
 804c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c106:	4770      	bx	lr

0804c108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 804c108:	b580      	push	{r7, lr}
 804c10a:	b084      	sub	sp, #16
 804c10c:	af00      	add	r7, sp, #0
 804c10e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 804c110:	687b      	ldr	r3, [r7, #4]
 804c112:	2b00      	cmp	r3, #0
 804c114:	d101      	bne.n	804c11a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 804c116:	2301      	movs	r3, #1
 804c118:	e0b9      	b.n	804c28e <HAL_SPI_Init+0x186>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 804c11a:	687b      	ldr	r3, [r7, #4]
 804c11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c11e:	2b00      	cmp	r3, #0
 804c120:	d108      	bne.n	804c134 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 804c122:	687b      	ldr	r3, [r7, #4]
 804c124:	685b      	ldr	r3, [r3, #4]
 804c126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804c12a:	d009      	beq.n	804c140 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 804c12c:	687b      	ldr	r3, [r7, #4]
 804c12e:	2200      	movs	r2, #0
 804c130:	61da      	str	r2, [r3, #28]
 804c132:	e005      	b.n	804c140 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 804c134:	687b      	ldr	r3, [r7, #4]
 804c136:	2200      	movs	r2, #0
 804c138:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 804c13a:	687b      	ldr	r3, [r7, #4]
 804c13c:	2200      	movs	r2, #0
 804c13e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804c140:	687b      	ldr	r3, [r7, #4]
 804c142:	2200      	movs	r2, #0
 804c144:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 804c146:	687b      	ldr	r3, [r7, #4]
 804c148:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 804c14c:	b2db      	uxtb	r3, r3
 804c14e:	2b00      	cmp	r3, #0
 804c150:	d12a      	bne.n	804c1a8 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 804c152:	687b      	ldr	r3, [r7, #4]
 804c154:	2200      	movs	r2, #0
 804c156:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 804c15a:	687b      	ldr	r3, [r7, #4]
 804c15c:	4a4e      	ldr	r2, [pc, #312]	; (804c298 <HAL_SPI_Init+0x190>)
 804c15e:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 804c160:	687b      	ldr	r3, [r7, #4]
 804c162:	4a4e      	ldr	r2, [pc, #312]	; (804c29c <HAL_SPI_Init+0x194>)
 804c164:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 804c166:	687b      	ldr	r3, [r7, #4]
 804c168:	4a4d      	ldr	r2, [pc, #308]	; (804c2a0 <HAL_SPI_Init+0x198>)
 804c16a:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 804c16c:	687b      	ldr	r3, [r7, #4]
 804c16e:	4a4d      	ldr	r2, [pc, #308]	; (804c2a4 <HAL_SPI_Init+0x19c>)
 804c170:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 804c172:	687b      	ldr	r3, [r7, #4]
 804c174:	4a4c      	ldr	r2, [pc, #304]	; (804c2a8 <HAL_SPI_Init+0x1a0>)
 804c176:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 804c178:	687b      	ldr	r3, [r7, #4]
 804c17a:	4a4c      	ldr	r2, [pc, #304]	; (804c2ac <HAL_SPI_Init+0x1a4>)
 804c17c:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 804c17e:	687b      	ldr	r3, [r7, #4]
 804c180:	4a4b      	ldr	r2, [pc, #300]	; (804c2b0 <HAL_SPI_Init+0x1a8>)
 804c182:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 804c184:	687b      	ldr	r3, [r7, #4]
 804c186:	4a4b      	ldr	r2, [pc, #300]	; (804c2b4 <HAL_SPI_Init+0x1ac>)
 804c188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 804c18c:	687b      	ldr	r3, [r7, #4]
 804c18e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804c192:	2b00      	cmp	r3, #0
 804c194:	d103      	bne.n	804c19e <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 804c196:	687b      	ldr	r3, [r7, #4]
 804c198:	4a47      	ldr	r2, [pc, #284]	; (804c2b8 <HAL_SPI_Init+0x1b0>)
 804c19a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 804c19e:	687b      	ldr	r3, [r7, #4]
 804c1a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804c1a4:	6878      	ldr	r0, [r7, #4]
 804c1a6:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 804c1a8:	687b      	ldr	r3, [r7, #4]
 804c1aa:	2202      	movs	r2, #2
 804c1ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 804c1b0:	687b      	ldr	r3, [r7, #4]
 804c1b2:	681b      	ldr	r3, [r3, #0]
 804c1b4:	681a      	ldr	r2, [r3, #0]
 804c1b6:	687b      	ldr	r3, [r7, #4]
 804c1b8:	681b      	ldr	r3, [r3, #0]
 804c1ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804c1be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 804c1c0:	687b      	ldr	r3, [r7, #4]
 804c1c2:	68db      	ldr	r3, [r3, #12]
 804c1c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804c1c8:	d902      	bls.n	804c1d0 <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 804c1ca:	2300      	movs	r3, #0
 804c1cc:	60fb      	str	r3, [r7, #12]
 804c1ce:	e002      	b.n	804c1d6 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 804c1d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804c1d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 804c1d6:	687b      	ldr	r3, [r7, #4]
 804c1d8:	68db      	ldr	r3, [r3, #12]
 804c1da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 804c1de:	d007      	beq.n	804c1f0 <HAL_SPI_Init+0xe8>
 804c1e0:	687b      	ldr	r3, [r7, #4]
 804c1e2:	68db      	ldr	r3, [r3, #12]
 804c1e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804c1e8:	d002      	beq.n	804c1f0 <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804c1ea:	687b      	ldr	r3, [r7, #4]
 804c1ec:	2200      	movs	r2, #0
 804c1ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 804c1f0:	687b      	ldr	r3, [r7, #4]
 804c1f2:	685b      	ldr	r3, [r3, #4]
 804c1f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 804c1f8:	687b      	ldr	r3, [r7, #4]
 804c1fa:	689b      	ldr	r3, [r3, #8]
 804c1fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 804c200:	431a      	orrs	r2, r3
 804c202:	687b      	ldr	r3, [r7, #4]
 804c204:	691b      	ldr	r3, [r3, #16]
 804c206:	f003 0302 	and.w	r3, r3, #2
 804c20a:	431a      	orrs	r2, r3
 804c20c:	687b      	ldr	r3, [r7, #4]
 804c20e:	695b      	ldr	r3, [r3, #20]
 804c210:	f003 0301 	and.w	r3, r3, #1
 804c214:	431a      	orrs	r2, r3
 804c216:	687b      	ldr	r3, [r7, #4]
 804c218:	699b      	ldr	r3, [r3, #24]
 804c21a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804c21e:	431a      	orrs	r2, r3
 804c220:	687b      	ldr	r3, [r7, #4]
 804c222:	69db      	ldr	r3, [r3, #28]
 804c224:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804c228:	431a      	orrs	r2, r3
 804c22a:	687b      	ldr	r3, [r7, #4]
 804c22c:	6a1b      	ldr	r3, [r3, #32]
 804c22e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804c232:	ea42 0103 	orr.w	r1, r2, r3
 804c236:	687b      	ldr	r3, [r7, #4]
 804c238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804c23a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 804c23e:	687b      	ldr	r3, [r7, #4]
 804c240:	681b      	ldr	r3, [r3, #0]
 804c242:	430a      	orrs	r2, r1
 804c244:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 804c246:	687b      	ldr	r3, [r7, #4]
 804c248:	699b      	ldr	r3, [r3, #24]
 804c24a:	0c1b      	lsrs	r3, r3, #16
 804c24c:	f003 0204 	and.w	r2, r3, #4
 804c250:	687b      	ldr	r3, [r7, #4]
 804c252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c254:	f003 0310 	and.w	r3, r3, #16
 804c258:	431a      	orrs	r2, r3
 804c25a:	687b      	ldr	r3, [r7, #4]
 804c25c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804c25e:	f003 0308 	and.w	r3, r3, #8
 804c262:	431a      	orrs	r2, r3
 804c264:	687b      	ldr	r3, [r7, #4]
 804c266:	68db      	ldr	r3, [r3, #12]
 804c268:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 804c26c:	ea42 0103 	orr.w	r1, r2, r3
 804c270:	68fb      	ldr	r3, [r7, #12]
 804c272:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 804c276:	687b      	ldr	r3, [r7, #4]
 804c278:	681b      	ldr	r3, [r3, #0]
 804c27a:	430a      	orrs	r2, r1
 804c27c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 804c27e:	687b      	ldr	r3, [r7, #4]
 804c280:	2200      	movs	r2, #0
 804c282:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 804c284:	687b      	ldr	r3, [r7, #4]
 804c286:	2201      	movs	r2, #1
 804c288:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 804c28c:	2300      	movs	r3, #0
}
 804c28e:	4618      	mov	r0, r3
 804c290:	3710      	adds	r7, #16
 804c292:	46bd      	mov	sp, r7
 804c294:	bd80      	pop	{r7, pc}
 804c296:	bf00      	nop
 804c298:	0804c8e5 	.word	0x0804c8e5
 804c29c:	0804c8f9 	.word	0x0804c8f9
 804c2a0:	0804c90d 	.word	0x0804c90d
 804c2a4:	0804c921 	.word	0x0804c921
 804c2a8:	0804c935 	.word	0x0804c935
 804c2ac:	0804c949 	.word	0x0804c949
 804c2b0:	0804c95d 	.word	0x0804c95d
 804c2b4:	0804c971 	.word	0x0804c971
 804c2b8:	08042559 	.word	0x08042559

0804c2bc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 804c2bc:	b580      	push	{r7, lr}
 804c2be:	b08a      	sub	sp, #40	; 0x28
 804c2c0:	af00      	add	r7, sp, #0
 804c2c2:	60f8      	str	r0, [r7, #12]
 804c2c4:	60b9      	str	r1, [r7, #8]
 804c2c6:	607a      	str	r2, [r7, #4]
 804c2c8:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 804c2ca:	2301      	movs	r3, #1
 804c2cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 804c2ce:	2300      	movs	r3, #0
 804c2d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 804c2d4:	68fb      	ldr	r3, [r7, #12]
 804c2d6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 804c2da:	2b01      	cmp	r3, #1
 804c2dc:	d101      	bne.n	804c2e2 <HAL_SPI_TransmitReceive+0x26>
 804c2de:	2302      	movs	r3, #2
 804c2e0:	e1fb      	b.n	804c6da <HAL_SPI_TransmitReceive+0x41e>
 804c2e2:	68fb      	ldr	r3, [r7, #12]
 804c2e4:	2201      	movs	r2, #1
 804c2e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 804c2ea:	f7fa fc73 	bl	8046bd4 <HAL_GetTick>
 804c2ee:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 804c2f0:	68fb      	ldr	r3, [r7, #12]
 804c2f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 804c2f6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 804c2f8:	68fb      	ldr	r3, [r7, #12]
 804c2fa:	685b      	ldr	r3, [r3, #4]
 804c2fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 804c2fe:	887b      	ldrh	r3, [r7, #2]
 804c300:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 804c302:	887b      	ldrh	r3, [r7, #2]
 804c304:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 804c306:	7efb      	ldrb	r3, [r7, #27]
 804c308:	2b01      	cmp	r3, #1
 804c30a:	d00e      	beq.n	804c32a <HAL_SPI_TransmitReceive+0x6e>
 804c30c:	697b      	ldr	r3, [r7, #20]
 804c30e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804c312:	d106      	bne.n	804c322 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 804c314:	68fb      	ldr	r3, [r7, #12]
 804c316:	689b      	ldr	r3, [r3, #8]
 804c318:	2b00      	cmp	r3, #0
 804c31a:	d102      	bne.n	804c322 <HAL_SPI_TransmitReceive+0x66>
 804c31c:	7efb      	ldrb	r3, [r7, #27]
 804c31e:	2b04      	cmp	r3, #4
 804c320:	d003      	beq.n	804c32a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 804c322:	2302      	movs	r3, #2
 804c324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 804c328:	e1cd      	b.n	804c6c6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 804c32a:	68bb      	ldr	r3, [r7, #8]
 804c32c:	2b00      	cmp	r3, #0
 804c32e:	d005      	beq.n	804c33c <HAL_SPI_TransmitReceive+0x80>
 804c330:	687b      	ldr	r3, [r7, #4]
 804c332:	2b00      	cmp	r3, #0
 804c334:	d002      	beq.n	804c33c <HAL_SPI_TransmitReceive+0x80>
 804c336:	887b      	ldrh	r3, [r7, #2]
 804c338:	2b00      	cmp	r3, #0
 804c33a:	d103      	bne.n	804c344 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 804c33c:	2301      	movs	r3, #1
 804c33e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 804c342:	e1c0      	b.n	804c6c6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 804c344:	68fb      	ldr	r3, [r7, #12]
 804c346:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 804c34a:	b2db      	uxtb	r3, r3
 804c34c:	2b04      	cmp	r3, #4
 804c34e:	d003      	beq.n	804c358 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 804c350:	68fb      	ldr	r3, [r7, #12]
 804c352:	2205      	movs	r2, #5
 804c354:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 804c358:	68fb      	ldr	r3, [r7, #12]
 804c35a:	2200      	movs	r2, #0
 804c35c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 804c35e:	68fb      	ldr	r3, [r7, #12]
 804c360:	687a      	ldr	r2, [r7, #4]
 804c362:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 804c364:	68fb      	ldr	r3, [r7, #12]
 804c366:	887a      	ldrh	r2, [r7, #2]
 804c368:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 804c36c:	68fb      	ldr	r3, [r7, #12]
 804c36e:	887a      	ldrh	r2, [r7, #2]
 804c370:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 804c374:	68fb      	ldr	r3, [r7, #12]
 804c376:	68ba      	ldr	r2, [r7, #8]
 804c378:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 804c37a:	68fb      	ldr	r3, [r7, #12]
 804c37c:	887a      	ldrh	r2, [r7, #2]
 804c37e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 804c380:	68fb      	ldr	r3, [r7, #12]
 804c382:	887a      	ldrh	r2, [r7, #2]
 804c384:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 804c386:	68fb      	ldr	r3, [r7, #12]
 804c388:	2200      	movs	r2, #0
 804c38a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 804c38c:	68fb      	ldr	r3, [r7, #12]
 804c38e:	2200      	movs	r2, #0
 804c390:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 804c392:	68fb      	ldr	r3, [r7, #12]
 804c394:	68db      	ldr	r3, [r3, #12]
 804c396:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804c39a:	d802      	bhi.n	804c3a2 <HAL_SPI_TransmitReceive+0xe6>
 804c39c:	8a3b      	ldrh	r3, [r7, #16]
 804c39e:	2b01      	cmp	r3, #1
 804c3a0:	d908      	bls.n	804c3b4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 804c3a2:	68fb      	ldr	r3, [r7, #12]
 804c3a4:	681b      	ldr	r3, [r3, #0]
 804c3a6:	685a      	ldr	r2, [r3, #4]
 804c3a8:	68fb      	ldr	r3, [r7, #12]
 804c3aa:	681b      	ldr	r3, [r3, #0]
 804c3ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 804c3b0:	605a      	str	r2, [r3, #4]
 804c3b2:	e007      	b.n	804c3c4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 804c3b4:	68fb      	ldr	r3, [r7, #12]
 804c3b6:	681b      	ldr	r3, [r3, #0]
 804c3b8:	685a      	ldr	r2, [r3, #4]
 804c3ba:	68fb      	ldr	r3, [r7, #12]
 804c3bc:	681b      	ldr	r3, [r3, #0]
 804c3be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 804c3c2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 804c3c4:	68fb      	ldr	r3, [r7, #12]
 804c3c6:	681b      	ldr	r3, [r3, #0]
 804c3c8:	681b      	ldr	r3, [r3, #0]
 804c3ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804c3ce:	2b40      	cmp	r3, #64	; 0x40
 804c3d0:	d007      	beq.n	804c3e2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 804c3d2:	68fb      	ldr	r3, [r7, #12]
 804c3d4:	681b      	ldr	r3, [r3, #0]
 804c3d6:	681a      	ldr	r2, [r3, #0]
 804c3d8:	68fb      	ldr	r3, [r7, #12]
 804c3da:	681b      	ldr	r3, [r3, #0]
 804c3dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804c3e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 804c3e2:	68fb      	ldr	r3, [r7, #12]
 804c3e4:	68db      	ldr	r3, [r3, #12]
 804c3e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804c3ea:	d97c      	bls.n	804c4e6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 804c3ec:	68fb      	ldr	r3, [r7, #12]
 804c3ee:	685b      	ldr	r3, [r3, #4]
 804c3f0:	2b00      	cmp	r3, #0
 804c3f2:	d002      	beq.n	804c3fa <HAL_SPI_TransmitReceive+0x13e>
 804c3f4:	8a7b      	ldrh	r3, [r7, #18]
 804c3f6:	2b01      	cmp	r3, #1
 804c3f8:	d169      	bne.n	804c4ce <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804c3fa:	68fb      	ldr	r3, [r7, #12]
 804c3fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c3fe:	881a      	ldrh	r2, [r3, #0]
 804c400:	68fb      	ldr	r3, [r7, #12]
 804c402:	681b      	ldr	r3, [r3, #0]
 804c404:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 804c406:	68fb      	ldr	r3, [r7, #12]
 804c408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c40a:	1c9a      	adds	r2, r3, #2
 804c40c:	68fb      	ldr	r3, [r7, #12]
 804c40e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 804c410:	68fb      	ldr	r3, [r7, #12]
 804c412:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c414:	b29b      	uxth	r3, r3
 804c416:	3b01      	subs	r3, #1
 804c418:	b29a      	uxth	r2, r3
 804c41a:	68fb      	ldr	r3, [r7, #12]
 804c41c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804c41e:	e056      	b.n	804c4ce <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 804c420:	68fb      	ldr	r3, [r7, #12]
 804c422:	681b      	ldr	r3, [r3, #0]
 804c424:	689b      	ldr	r3, [r3, #8]
 804c426:	f003 0302 	and.w	r3, r3, #2
 804c42a:	2b02      	cmp	r3, #2
 804c42c:	d11b      	bne.n	804c466 <HAL_SPI_TransmitReceive+0x1aa>
 804c42e:	68fb      	ldr	r3, [r7, #12]
 804c430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c432:	b29b      	uxth	r3, r3
 804c434:	2b00      	cmp	r3, #0
 804c436:	d016      	beq.n	804c466 <HAL_SPI_TransmitReceive+0x1aa>
 804c438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804c43a:	2b01      	cmp	r3, #1
 804c43c:	d113      	bne.n	804c466 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804c43e:	68fb      	ldr	r3, [r7, #12]
 804c440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c442:	881a      	ldrh	r2, [r3, #0]
 804c444:	68fb      	ldr	r3, [r7, #12]
 804c446:	681b      	ldr	r3, [r3, #0]
 804c448:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 804c44a:	68fb      	ldr	r3, [r7, #12]
 804c44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c44e:	1c9a      	adds	r2, r3, #2
 804c450:	68fb      	ldr	r3, [r7, #12]
 804c452:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 804c454:	68fb      	ldr	r3, [r7, #12]
 804c456:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c458:	b29b      	uxth	r3, r3
 804c45a:	3b01      	subs	r3, #1
 804c45c:	b29a      	uxth	r2, r3
 804c45e:	68fb      	ldr	r3, [r7, #12]
 804c460:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 804c462:	2300      	movs	r3, #0
 804c464:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 804c466:	68fb      	ldr	r3, [r7, #12]
 804c468:	681b      	ldr	r3, [r3, #0]
 804c46a:	689b      	ldr	r3, [r3, #8]
 804c46c:	f003 0301 	and.w	r3, r3, #1
 804c470:	2b01      	cmp	r3, #1
 804c472:	d11c      	bne.n	804c4ae <HAL_SPI_TransmitReceive+0x1f2>
 804c474:	68fb      	ldr	r3, [r7, #12]
 804c476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c47a:	b29b      	uxth	r3, r3
 804c47c:	2b00      	cmp	r3, #0
 804c47e:	d016      	beq.n	804c4ae <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 804c480:	68fb      	ldr	r3, [r7, #12]
 804c482:	681b      	ldr	r3, [r3, #0]
 804c484:	68da      	ldr	r2, [r3, #12]
 804c486:	68fb      	ldr	r3, [r7, #12]
 804c488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c48a:	b292      	uxth	r2, r2
 804c48c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 804c48e:	68fb      	ldr	r3, [r7, #12]
 804c490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c492:	1c9a      	adds	r2, r3, #2
 804c494:	68fb      	ldr	r3, [r7, #12]
 804c496:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 804c498:	68fb      	ldr	r3, [r7, #12]
 804c49a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c49e:	b29b      	uxth	r3, r3
 804c4a0:	3b01      	subs	r3, #1
 804c4a2:	b29a      	uxth	r2, r3
 804c4a4:	68fb      	ldr	r3, [r7, #12]
 804c4a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 804c4aa:	2301      	movs	r3, #1
 804c4ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 804c4ae:	f7fa fb91 	bl	8046bd4 <HAL_GetTick>
 804c4b2:	4602      	mov	r2, r0
 804c4b4:	69fb      	ldr	r3, [r7, #28]
 804c4b6:	1ad3      	subs	r3, r2, r3
 804c4b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804c4ba:	429a      	cmp	r2, r3
 804c4bc:	d807      	bhi.n	804c4ce <HAL_SPI_TransmitReceive+0x212>
 804c4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804c4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 804c4c4:	d003      	beq.n	804c4ce <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 804c4c6:	2303      	movs	r3, #3
 804c4c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 804c4cc:	e0fb      	b.n	804c6c6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804c4ce:	68fb      	ldr	r3, [r7, #12]
 804c4d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c4d2:	b29b      	uxth	r3, r3
 804c4d4:	2b00      	cmp	r3, #0
 804c4d6:	d1a3      	bne.n	804c420 <HAL_SPI_TransmitReceive+0x164>
 804c4d8:	68fb      	ldr	r3, [r7, #12]
 804c4da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c4de:	b29b      	uxth	r3, r3
 804c4e0:	2b00      	cmp	r3, #0
 804c4e2:	d19d      	bne.n	804c420 <HAL_SPI_TransmitReceive+0x164>
 804c4e4:	e0df      	b.n	804c6a6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 804c4e6:	68fb      	ldr	r3, [r7, #12]
 804c4e8:	685b      	ldr	r3, [r3, #4]
 804c4ea:	2b00      	cmp	r3, #0
 804c4ec:	d003      	beq.n	804c4f6 <HAL_SPI_TransmitReceive+0x23a>
 804c4ee:	8a7b      	ldrh	r3, [r7, #18]
 804c4f0:	2b01      	cmp	r3, #1
 804c4f2:	f040 80cb 	bne.w	804c68c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 804c4f6:	68fb      	ldr	r3, [r7, #12]
 804c4f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c4fa:	b29b      	uxth	r3, r3
 804c4fc:	2b01      	cmp	r3, #1
 804c4fe:	d912      	bls.n	804c526 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804c500:	68fb      	ldr	r3, [r7, #12]
 804c502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c504:	881a      	ldrh	r2, [r3, #0]
 804c506:	68fb      	ldr	r3, [r7, #12]
 804c508:	681b      	ldr	r3, [r3, #0]
 804c50a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 804c50c:	68fb      	ldr	r3, [r7, #12]
 804c50e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c510:	1c9a      	adds	r2, r3, #2
 804c512:	68fb      	ldr	r3, [r7, #12]
 804c514:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 804c516:	68fb      	ldr	r3, [r7, #12]
 804c518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c51a:	b29b      	uxth	r3, r3
 804c51c:	3b02      	subs	r3, #2
 804c51e:	b29a      	uxth	r2, r3
 804c520:	68fb      	ldr	r3, [r7, #12]
 804c522:	87da      	strh	r2, [r3, #62]	; 0x3e
 804c524:	e0b2      	b.n	804c68c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 804c526:	68fb      	ldr	r3, [r7, #12]
 804c528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 804c52a:	68fb      	ldr	r3, [r7, #12]
 804c52c:	681b      	ldr	r3, [r3, #0]
 804c52e:	330c      	adds	r3, #12
 804c530:	7812      	ldrb	r2, [r2, #0]
 804c532:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 804c534:	68fb      	ldr	r3, [r7, #12]
 804c536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c538:	1c5a      	adds	r2, r3, #1
 804c53a:	68fb      	ldr	r3, [r7, #12]
 804c53c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 804c53e:	68fb      	ldr	r3, [r7, #12]
 804c540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c542:	b29b      	uxth	r3, r3
 804c544:	3b01      	subs	r3, #1
 804c546:	b29a      	uxth	r2, r3
 804c548:	68fb      	ldr	r3, [r7, #12]
 804c54a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804c54c:	e09e      	b.n	804c68c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 804c54e:	68fb      	ldr	r3, [r7, #12]
 804c550:	681b      	ldr	r3, [r3, #0]
 804c552:	689b      	ldr	r3, [r3, #8]
 804c554:	f003 0302 	and.w	r3, r3, #2
 804c558:	2b02      	cmp	r3, #2
 804c55a:	d134      	bne.n	804c5c6 <HAL_SPI_TransmitReceive+0x30a>
 804c55c:	68fb      	ldr	r3, [r7, #12]
 804c55e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c560:	b29b      	uxth	r3, r3
 804c562:	2b00      	cmp	r3, #0
 804c564:	d02f      	beq.n	804c5c6 <HAL_SPI_TransmitReceive+0x30a>
 804c566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804c568:	2b01      	cmp	r3, #1
 804c56a:	d12c      	bne.n	804c5c6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 804c56c:	68fb      	ldr	r3, [r7, #12]
 804c56e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c570:	b29b      	uxth	r3, r3
 804c572:	2b01      	cmp	r3, #1
 804c574:	d912      	bls.n	804c59c <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804c576:	68fb      	ldr	r3, [r7, #12]
 804c578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c57a:	881a      	ldrh	r2, [r3, #0]
 804c57c:	68fb      	ldr	r3, [r7, #12]
 804c57e:	681b      	ldr	r3, [r3, #0]
 804c580:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 804c582:	68fb      	ldr	r3, [r7, #12]
 804c584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c586:	1c9a      	adds	r2, r3, #2
 804c588:	68fb      	ldr	r3, [r7, #12]
 804c58a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 804c58c:	68fb      	ldr	r3, [r7, #12]
 804c58e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c590:	b29b      	uxth	r3, r3
 804c592:	3b02      	subs	r3, #2
 804c594:	b29a      	uxth	r2, r3
 804c596:	68fb      	ldr	r3, [r7, #12]
 804c598:	87da      	strh	r2, [r3, #62]	; 0x3e
 804c59a:	e012      	b.n	804c5c2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 804c59c:	68fb      	ldr	r3, [r7, #12]
 804c59e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 804c5a0:	68fb      	ldr	r3, [r7, #12]
 804c5a2:	681b      	ldr	r3, [r3, #0]
 804c5a4:	330c      	adds	r3, #12
 804c5a6:	7812      	ldrb	r2, [r2, #0]
 804c5a8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 804c5aa:	68fb      	ldr	r3, [r7, #12]
 804c5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c5ae:	1c5a      	adds	r2, r3, #1
 804c5b0:	68fb      	ldr	r3, [r7, #12]
 804c5b2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 804c5b4:	68fb      	ldr	r3, [r7, #12]
 804c5b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c5b8:	b29b      	uxth	r3, r3
 804c5ba:	3b01      	subs	r3, #1
 804c5bc:	b29a      	uxth	r2, r3
 804c5be:	68fb      	ldr	r3, [r7, #12]
 804c5c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 804c5c2:	2300      	movs	r3, #0
 804c5c4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 804c5c6:	68fb      	ldr	r3, [r7, #12]
 804c5c8:	681b      	ldr	r3, [r3, #0]
 804c5ca:	689b      	ldr	r3, [r3, #8]
 804c5cc:	f003 0301 	and.w	r3, r3, #1
 804c5d0:	2b01      	cmp	r3, #1
 804c5d2:	d148      	bne.n	804c666 <HAL_SPI_TransmitReceive+0x3aa>
 804c5d4:	68fb      	ldr	r3, [r7, #12]
 804c5d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c5da:	b29b      	uxth	r3, r3
 804c5dc:	2b00      	cmp	r3, #0
 804c5de:	d042      	beq.n	804c666 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 804c5e0:	68fb      	ldr	r3, [r7, #12]
 804c5e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c5e6:	b29b      	uxth	r3, r3
 804c5e8:	2b01      	cmp	r3, #1
 804c5ea:	d923      	bls.n	804c634 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 804c5ec:	68fb      	ldr	r3, [r7, #12]
 804c5ee:	681b      	ldr	r3, [r3, #0]
 804c5f0:	68da      	ldr	r2, [r3, #12]
 804c5f2:	68fb      	ldr	r3, [r7, #12]
 804c5f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c5f6:	b292      	uxth	r2, r2
 804c5f8:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 804c5fa:	68fb      	ldr	r3, [r7, #12]
 804c5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c5fe:	1c9a      	adds	r2, r3, #2
 804c600:	68fb      	ldr	r3, [r7, #12]
 804c602:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 804c604:	68fb      	ldr	r3, [r7, #12]
 804c606:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c60a:	b29b      	uxth	r3, r3
 804c60c:	3b02      	subs	r3, #2
 804c60e:	b29a      	uxth	r2, r3
 804c610:	68fb      	ldr	r3, [r7, #12]
 804c612:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 804c616:	68fb      	ldr	r3, [r7, #12]
 804c618:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c61c:	b29b      	uxth	r3, r3
 804c61e:	2b01      	cmp	r3, #1
 804c620:	d81f      	bhi.n	804c662 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 804c622:	68fb      	ldr	r3, [r7, #12]
 804c624:	681b      	ldr	r3, [r3, #0]
 804c626:	685a      	ldr	r2, [r3, #4]
 804c628:	68fb      	ldr	r3, [r7, #12]
 804c62a:	681b      	ldr	r3, [r3, #0]
 804c62c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 804c630:	605a      	str	r2, [r3, #4]
 804c632:	e016      	b.n	804c662 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 804c634:	68fb      	ldr	r3, [r7, #12]
 804c636:	681b      	ldr	r3, [r3, #0]
 804c638:	f103 020c 	add.w	r2, r3, #12
 804c63c:	68fb      	ldr	r3, [r7, #12]
 804c63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c640:	7812      	ldrb	r2, [r2, #0]
 804c642:	b2d2      	uxtb	r2, r2
 804c644:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 804c646:	68fb      	ldr	r3, [r7, #12]
 804c648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c64a:	1c5a      	adds	r2, r3, #1
 804c64c:	68fb      	ldr	r3, [r7, #12]
 804c64e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 804c650:	68fb      	ldr	r3, [r7, #12]
 804c652:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c656:	b29b      	uxth	r3, r3
 804c658:	3b01      	subs	r3, #1
 804c65a:	b29a      	uxth	r2, r3
 804c65c:	68fb      	ldr	r3, [r7, #12]
 804c65e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 804c662:	2301      	movs	r3, #1
 804c664:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 804c666:	f7fa fab5 	bl	8046bd4 <HAL_GetTick>
 804c66a:	4602      	mov	r2, r0
 804c66c:	69fb      	ldr	r3, [r7, #28]
 804c66e:	1ad3      	subs	r3, r2, r3
 804c670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804c672:	429a      	cmp	r2, r3
 804c674:	d803      	bhi.n	804c67e <HAL_SPI_TransmitReceive+0x3c2>
 804c676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804c678:	f1b3 3fff 	cmp.w	r3, #4294967295
 804c67c:	d102      	bne.n	804c684 <HAL_SPI_TransmitReceive+0x3c8>
 804c67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804c680:	2b00      	cmp	r3, #0
 804c682:	d103      	bne.n	804c68c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 804c684:	2303      	movs	r3, #3
 804c686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 804c68a:	e01c      	b.n	804c6c6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804c68c:	68fb      	ldr	r3, [r7, #12]
 804c68e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c690:	b29b      	uxth	r3, r3
 804c692:	2b00      	cmp	r3, #0
 804c694:	f47f af5b 	bne.w	804c54e <HAL_SPI_TransmitReceive+0x292>
 804c698:	68fb      	ldr	r3, [r7, #12]
 804c69a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c69e:	b29b      	uxth	r3, r3
 804c6a0:	2b00      	cmp	r3, #0
 804c6a2:	f47f af54 	bne.w	804c54e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 804c6a6:	69fa      	ldr	r2, [r7, #28]
 804c6a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 804c6aa:	68f8      	ldr	r0, [r7, #12]
 804c6ac:	f000 fa96 	bl	804cbdc <SPI_EndRxTxTransaction>
 804c6b0:	4603      	mov	r3, r0
 804c6b2:	2b00      	cmp	r3, #0
 804c6b4:	d006      	beq.n	804c6c4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 804c6b6:	2301      	movs	r3, #1
 804c6b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 804c6bc:	68fb      	ldr	r3, [r7, #12]
 804c6be:	2220      	movs	r2, #32
 804c6c0:	661a      	str	r2, [r3, #96]	; 0x60
 804c6c2:	e000      	b.n	804c6c6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 804c6c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 804c6c6:	68fb      	ldr	r3, [r7, #12]
 804c6c8:	2201      	movs	r2, #1
 804c6ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 804c6ce:	68fb      	ldr	r3, [r7, #12]
 804c6d0:	2200      	movs	r2, #0
 804c6d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 804c6d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 804c6da:	4618      	mov	r0, r3
 804c6dc:	3728      	adds	r7, #40	; 0x28
 804c6de:	46bd      	mov	sp, r7
 804c6e0:	bd80      	pop	{r7, pc}
	...

0804c6e4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 804c6e4:	b580      	push	{r7, lr}
 804c6e6:	b088      	sub	sp, #32
 804c6e8:	af00      	add	r7, sp, #0
 804c6ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 804c6ec:	687b      	ldr	r3, [r7, #4]
 804c6ee:	681b      	ldr	r3, [r3, #0]
 804c6f0:	685b      	ldr	r3, [r3, #4]
 804c6f2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 804c6f4:	687b      	ldr	r3, [r7, #4]
 804c6f6:	681b      	ldr	r3, [r3, #0]
 804c6f8:	689b      	ldr	r3, [r3, #8]
 804c6fa:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 804c6fc:	69bb      	ldr	r3, [r7, #24]
 804c6fe:	099b      	lsrs	r3, r3, #6
 804c700:	f003 0301 	and.w	r3, r3, #1
 804c704:	2b00      	cmp	r3, #0
 804c706:	d10f      	bne.n	804c728 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 804c708:	69bb      	ldr	r3, [r7, #24]
 804c70a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 804c70e:	2b00      	cmp	r3, #0
 804c710:	d00a      	beq.n	804c728 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 804c712:	69fb      	ldr	r3, [r7, #28]
 804c714:	099b      	lsrs	r3, r3, #6
 804c716:	f003 0301 	and.w	r3, r3, #1
 804c71a:	2b00      	cmp	r3, #0
 804c71c:	d004      	beq.n	804c728 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 804c71e:	687b      	ldr	r3, [r7, #4]
 804c720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804c722:	6878      	ldr	r0, [r7, #4]
 804c724:	4798      	blx	r3
    return;
 804c726:	e0d8      	b.n	804c8da <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 804c728:	69bb      	ldr	r3, [r7, #24]
 804c72a:	085b      	lsrs	r3, r3, #1
 804c72c:	f003 0301 	and.w	r3, r3, #1
 804c730:	2b00      	cmp	r3, #0
 804c732:	d00a      	beq.n	804c74a <HAL_SPI_IRQHandler+0x66>
 804c734:	69fb      	ldr	r3, [r7, #28]
 804c736:	09db      	lsrs	r3, r3, #7
 804c738:	f003 0301 	and.w	r3, r3, #1
 804c73c:	2b00      	cmp	r3, #0
 804c73e:	d004      	beq.n	804c74a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 804c740:	687b      	ldr	r3, [r7, #4]
 804c742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804c744:	6878      	ldr	r0, [r7, #4]
 804c746:	4798      	blx	r3
    return;
 804c748:	e0c7      	b.n	804c8da <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 804c74a:	69bb      	ldr	r3, [r7, #24]
 804c74c:	095b      	lsrs	r3, r3, #5
 804c74e:	f003 0301 	and.w	r3, r3, #1
 804c752:	2b00      	cmp	r3, #0
 804c754:	d10c      	bne.n	804c770 <HAL_SPI_IRQHandler+0x8c>
 804c756:	69bb      	ldr	r3, [r7, #24]
 804c758:	099b      	lsrs	r3, r3, #6
 804c75a:	f003 0301 	and.w	r3, r3, #1
 804c75e:	2b00      	cmp	r3, #0
 804c760:	d106      	bne.n	804c770 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 804c762:	69bb      	ldr	r3, [r7, #24]
 804c764:	0a1b      	lsrs	r3, r3, #8
 804c766:	f003 0301 	and.w	r3, r3, #1
 804c76a:	2b00      	cmp	r3, #0
 804c76c:	f000 80b5 	beq.w	804c8da <HAL_SPI_IRQHandler+0x1f6>
 804c770:	69fb      	ldr	r3, [r7, #28]
 804c772:	095b      	lsrs	r3, r3, #5
 804c774:	f003 0301 	and.w	r3, r3, #1
 804c778:	2b00      	cmp	r3, #0
 804c77a:	f000 80ae 	beq.w	804c8da <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 804c77e:	69bb      	ldr	r3, [r7, #24]
 804c780:	099b      	lsrs	r3, r3, #6
 804c782:	f003 0301 	and.w	r3, r3, #1
 804c786:	2b00      	cmp	r3, #0
 804c788:	d023      	beq.n	804c7d2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 804c78a:	687b      	ldr	r3, [r7, #4]
 804c78c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 804c790:	b2db      	uxtb	r3, r3
 804c792:	2b03      	cmp	r3, #3
 804c794:	d011      	beq.n	804c7ba <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 804c796:	687b      	ldr	r3, [r7, #4]
 804c798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804c79a:	f043 0204 	orr.w	r2, r3, #4
 804c79e:	687b      	ldr	r3, [r7, #4]
 804c7a0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 804c7a2:	2300      	movs	r3, #0
 804c7a4:	617b      	str	r3, [r7, #20]
 804c7a6:	687b      	ldr	r3, [r7, #4]
 804c7a8:	681b      	ldr	r3, [r3, #0]
 804c7aa:	68db      	ldr	r3, [r3, #12]
 804c7ac:	617b      	str	r3, [r7, #20]
 804c7ae:	687b      	ldr	r3, [r7, #4]
 804c7b0:	681b      	ldr	r3, [r3, #0]
 804c7b2:	689b      	ldr	r3, [r3, #8]
 804c7b4:	617b      	str	r3, [r7, #20]
 804c7b6:	697b      	ldr	r3, [r7, #20]
 804c7b8:	e00b      	b.n	804c7d2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 804c7ba:	2300      	movs	r3, #0
 804c7bc:	613b      	str	r3, [r7, #16]
 804c7be:	687b      	ldr	r3, [r7, #4]
 804c7c0:	681b      	ldr	r3, [r3, #0]
 804c7c2:	68db      	ldr	r3, [r3, #12]
 804c7c4:	613b      	str	r3, [r7, #16]
 804c7c6:	687b      	ldr	r3, [r7, #4]
 804c7c8:	681b      	ldr	r3, [r3, #0]
 804c7ca:	689b      	ldr	r3, [r3, #8]
 804c7cc:	613b      	str	r3, [r7, #16]
 804c7ce:	693b      	ldr	r3, [r7, #16]
        return;
 804c7d0:	e083      	b.n	804c8da <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 804c7d2:	69bb      	ldr	r3, [r7, #24]
 804c7d4:	095b      	lsrs	r3, r3, #5
 804c7d6:	f003 0301 	and.w	r3, r3, #1
 804c7da:	2b00      	cmp	r3, #0
 804c7dc:	d014      	beq.n	804c808 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 804c7de:	687b      	ldr	r3, [r7, #4]
 804c7e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804c7e2:	f043 0201 	orr.w	r2, r3, #1
 804c7e6:	687b      	ldr	r3, [r7, #4]
 804c7e8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 804c7ea:	2300      	movs	r3, #0
 804c7ec:	60fb      	str	r3, [r7, #12]
 804c7ee:	687b      	ldr	r3, [r7, #4]
 804c7f0:	681b      	ldr	r3, [r3, #0]
 804c7f2:	689b      	ldr	r3, [r3, #8]
 804c7f4:	60fb      	str	r3, [r7, #12]
 804c7f6:	687b      	ldr	r3, [r7, #4]
 804c7f8:	681b      	ldr	r3, [r3, #0]
 804c7fa:	681a      	ldr	r2, [r3, #0]
 804c7fc:	687b      	ldr	r3, [r7, #4]
 804c7fe:	681b      	ldr	r3, [r3, #0]
 804c800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804c804:	601a      	str	r2, [r3, #0]
 804c806:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 804c808:	69bb      	ldr	r3, [r7, #24]
 804c80a:	0a1b      	lsrs	r3, r3, #8
 804c80c:	f003 0301 	and.w	r3, r3, #1
 804c810:	2b00      	cmp	r3, #0
 804c812:	d00c      	beq.n	804c82e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 804c814:	687b      	ldr	r3, [r7, #4]
 804c816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804c818:	f043 0208 	orr.w	r2, r3, #8
 804c81c:	687b      	ldr	r3, [r7, #4]
 804c81e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 804c820:	2300      	movs	r3, #0
 804c822:	60bb      	str	r3, [r7, #8]
 804c824:	687b      	ldr	r3, [r7, #4]
 804c826:	681b      	ldr	r3, [r3, #0]
 804c828:	689b      	ldr	r3, [r3, #8]
 804c82a:	60bb      	str	r3, [r7, #8]
 804c82c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 804c82e:	687b      	ldr	r3, [r7, #4]
 804c830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804c832:	2b00      	cmp	r3, #0
 804c834:	d050      	beq.n	804c8d8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 804c836:	687b      	ldr	r3, [r7, #4]
 804c838:	681b      	ldr	r3, [r3, #0]
 804c83a:	685a      	ldr	r2, [r3, #4]
 804c83c:	687b      	ldr	r3, [r7, #4]
 804c83e:	681b      	ldr	r3, [r3, #0]
 804c840:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 804c844:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 804c846:	687b      	ldr	r3, [r7, #4]
 804c848:	2201      	movs	r2, #1
 804c84a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 804c84e:	69fb      	ldr	r3, [r7, #28]
 804c850:	f003 0302 	and.w	r3, r3, #2
 804c854:	2b00      	cmp	r3, #0
 804c856:	d104      	bne.n	804c862 <HAL_SPI_IRQHandler+0x17e>
 804c858:	69fb      	ldr	r3, [r7, #28]
 804c85a:	f003 0301 	and.w	r3, r3, #1
 804c85e:	2b00      	cmp	r3, #0
 804c860:	d034      	beq.n	804c8cc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 804c862:	687b      	ldr	r3, [r7, #4]
 804c864:	681b      	ldr	r3, [r3, #0]
 804c866:	685a      	ldr	r2, [r3, #4]
 804c868:	687b      	ldr	r3, [r7, #4]
 804c86a:	681b      	ldr	r3, [r3, #0]
 804c86c:	f022 0203 	bic.w	r2, r2, #3
 804c870:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 804c872:	687b      	ldr	r3, [r7, #4]
 804c874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804c876:	2b00      	cmp	r3, #0
 804c878:	d011      	beq.n	804c89e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 804c87a:	687b      	ldr	r3, [r7, #4]
 804c87c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804c87e:	4a18      	ldr	r2, [pc, #96]	; (804c8e0 <HAL_SPI_IRQHandler+0x1fc>)
 804c880:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 804c882:	687b      	ldr	r3, [r7, #4]
 804c884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804c886:	4618      	mov	r0, r3
 804c888:	f7fb feb0 	bl	80485ec <HAL_DMA_Abort_IT>
 804c88c:	4603      	mov	r3, r0
 804c88e:	2b00      	cmp	r3, #0
 804c890:	d005      	beq.n	804c89e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 804c892:	687b      	ldr	r3, [r7, #4]
 804c894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804c896:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 804c89a:	687b      	ldr	r3, [r7, #4]
 804c89c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 804c89e:	687b      	ldr	r3, [r7, #4]
 804c8a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804c8a2:	2b00      	cmp	r3, #0
 804c8a4:	d017      	beq.n	804c8d6 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 804c8a6:	687b      	ldr	r3, [r7, #4]
 804c8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804c8aa:	4a0d      	ldr	r2, [pc, #52]	; (804c8e0 <HAL_SPI_IRQHandler+0x1fc>)
 804c8ac:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 804c8ae:	687b      	ldr	r3, [r7, #4]
 804c8b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804c8b2:	4618      	mov	r0, r3
 804c8b4:	f7fb fe9a 	bl	80485ec <HAL_DMA_Abort_IT>
 804c8b8:	4603      	mov	r3, r0
 804c8ba:	2b00      	cmp	r3, #0
 804c8bc:	d00b      	beq.n	804c8d6 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 804c8be:	687b      	ldr	r3, [r7, #4]
 804c8c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804c8c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 804c8c6:	687b      	ldr	r3, [r7, #4]
 804c8c8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 804c8ca:	e004      	b.n	804c8d6 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 804c8cc:	687b      	ldr	r3, [r7, #4]
 804c8ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804c8d0:	6878      	ldr	r0, [r7, #4]
 804c8d2:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 804c8d4:	e000      	b.n	804c8d8 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 804c8d6:	bf00      	nop
    return;
 804c8d8:	bf00      	nop
  }
}
 804c8da:	3720      	adds	r7, #32
 804c8dc:	46bd      	mov	sp, r7
 804c8de:	bd80      	pop	{r7, pc}
 804c8e0:	0804c985 	.word	0x0804c985

0804c8e4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 804c8e4:	b480      	push	{r7}
 804c8e6:	b083      	sub	sp, #12
 804c8e8:	af00      	add	r7, sp, #0
 804c8ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 804c8ec:	bf00      	nop
 804c8ee:	370c      	adds	r7, #12
 804c8f0:	46bd      	mov	sp, r7
 804c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c8f6:	4770      	bx	lr

0804c8f8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 804c8f8:	b480      	push	{r7}
 804c8fa:	b083      	sub	sp, #12
 804c8fc:	af00      	add	r7, sp, #0
 804c8fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 804c900:	bf00      	nop
 804c902:	370c      	adds	r7, #12
 804c904:	46bd      	mov	sp, r7
 804c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c90a:	4770      	bx	lr

0804c90c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 804c90c:	b480      	push	{r7}
 804c90e:	b083      	sub	sp, #12
 804c910:	af00      	add	r7, sp, #0
 804c912:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 804c914:	bf00      	nop
 804c916:	370c      	adds	r7, #12
 804c918:	46bd      	mov	sp, r7
 804c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c91e:	4770      	bx	lr

0804c920 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 804c920:	b480      	push	{r7}
 804c922:	b083      	sub	sp, #12
 804c924:	af00      	add	r7, sp, #0
 804c926:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 804c928:	bf00      	nop
 804c92a:	370c      	adds	r7, #12
 804c92c:	46bd      	mov	sp, r7
 804c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c932:	4770      	bx	lr

0804c934 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 804c934:	b480      	push	{r7}
 804c936:	b083      	sub	sp, #12
 804c938:	af00      	add	r7, sp, #0
 804c93a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 804c93c:	bf00      	nop
 804c93e:	370c      	adds	r7, #12
 804c940:	46bd      	mov	sp, r7
 804c942:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c946:	4770      	bx	lr

0804c948 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 804c948:	b480      	push	{r7}
 804c94a:	b083      	sub	sp, #12
 804c94c:	af00      	add	r7, sp, #0
 804c94e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 804c950:	bf00      	nop
 804c952:	370c      	adds	r7, #12
 804c954:	46bd      	mov	sp, r7
 804c956:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c95a:	4770      	bx	lr

0804c95c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 804c95c:	b480      	push	{r7}
 804c95e:	b083      	sub	sp, #12
 804c960:	af00      	add	r7, sp, #0
 804c962:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 804c964:	bf00      	nop
 804c966:	370c      	adds	r7, #12
 804c968:	46bd      	mov	sp, r7
 804c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c96e:	4770      	bx	lr

0804c970 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 804c970:	b480      	push	{r7}
 804c972:	b083      	sub	sp, #12
 804c974:	af00      	add	r7, sp, #0
 804c976:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 804c978:	bf00      	nop
 804c97a:	370c      	adds	r7, #12
 804c97c:	46bd      	mov	sp, r7
 804c97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c982:	4770      	bx	lr

0804c984 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 804c984:	b580      	push	{r7, lr}
 804c986:	b084      	sub	sp, #16
 804c988:	af00      	add	r7, sp, #0
 804c98a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 804c98c:	687b      	ldr	r3, [r7, #4]
 804c98e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804c990:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 804c992:	68fb      	ldr	r3, [r7, #12]
 804c994:	2200      	movs	r2, #0
 804c996:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 804c99a:	68fb      	ldr	r3, [r7, #12]
 804c99c:	2200      	movs	r2, #0
 804c99e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 804c9a0:	68fb      	ldr	r3, [r7, #12]
 804c9a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804c9a4:	68f8      	ldr	r0, [r7, #12]
 804c9a6:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 804c9a8:	bf00      	nop
 804c9aa:	3710      	adds	r7, #16
 804c9ac:	46bd      	mov	sp, r7
 804c9ae:	bd80      	pop	{r7, pc}

0804c9b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 804c9b0:	b580      	push	{r7, lr}
 804c9b2:	b088      	sub	sp, #32
 804c9b4:	af00      	add	r7, sp, #0
 804c9b6:	60f8      	str	r0, [r7, #12]
 804c9b8:	60b9      	str	r1, [r7, #8]
 804c9ba:	603b      	str	r3, [r7, #0]
 804c9bc:	4613      	mov	r3, r2
 804c9be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 804c9c0:	f7fa f908 	bl	8046bd4 <HAL_GetTick>
 804c9c4:	4602      	mov	r2, r0
 804c9c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804c9c8:	1a9b      	subs	r3, r3, r2
 804c9ca:	683a      	ldr	r2, [r7, #0]
 804c9cc:	4413      	add	r3, r2
 804c9ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 804c9d0:	f7fa f900 	bl	8046bd4 <HAL_GetTick>
 804c9d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 804c9d6:	4b39      	ldr	r3, [pc, #228]	; (804cabc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 804c9d8:	681b      	ldr	r3, [r3, #0]
 804c9da:	015b      	lsls	r3, r3, #5
 804c9dc:	0d1b      	lsrs	r3, r3, #20
 804c9de:	69fa      	ldr	r2, [r7, #28]
 804c9e0:	fb02 f303 	mul.w	r3, r2, r3
 804c9e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 804c9e6:	e054      	b.n	804ca92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 804c9e8:	683b      	ldr	r3, [r7, #0]
 804c9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 804c9ee:	d050      	beq.n	804ca92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 804c9f0:	f7fa f8f0 	bl	8046bd4 <HAL_GetTick>
 804c9f4:	4602      	mov	r2, r0
 804c9f6:	69bb      	ldr	r3, [r7, #24]
 804c9f8:	1ad3      	subs	r3, r2, r3
 804c9fa:	69fa      	ldr	r2, [r7, #28]
 804c9fc:	429a      	cmp	r2, r3
 804c9fe:	d902      	bls.n	804ca06 <SPI_WaitFlagStateUntilTimeout+0x56>
 804ca00:	69fb      	ldr	r3, [r7, #28]
 804ca02:	2b00      	cmp	r3, #0
 804ca04:	d13d      	bne.n	804ca82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 804ca06:	68fb      	ldr	r3, [r7, #12]
 804ca08:	681b      	ldr	r3, [r3, #0]
 804ca0a:	685a      	ldr	r2, [r3, #4]
 804ca0c:	68fb      	ldr	r3, [r7, #12]
 804ca0e:	681b      	ldr	r3, [r3, #0]
 804ca10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 804ca14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804ca16:	68fb      	ldr	r3, [r7, #12]
 804ca18:	685b      	ldr	r3, [r3, #4]
 804ca1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804ca1e:	d111      	bne.n	804ca44 <SPI_WaitFlagStateUntilTimeout+0x94>
 804ca20:	68fb      	ldr	r3, [r7, #12]
 804ca22:	689b      	ldr	r3, [r3, #8]
 804ca24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804ca28:	d004      	beq.n	804ca34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 804ca2a:	68fb      	ldr	r3, [r7, #12]
 804ca2c:	689b      	ldr	r3, [r3, #8]
 804ca2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804ca32:	d107      	bne.n	804ca44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 804ca34:	68fb      	ldr	r3, [r7, #12]
 804ca36:	681b      	ldr	r3, [r3, #0]
 804ca38:	681a      	ldr	r2, [r3, #0]
 804ca3a:	68fb      	ldr	r3, [r7, #12]
 804ca3c:	681b      	ldr	r3, [r3, #0]
 804ca3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804ca42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 804ca44:	68fb      	ldr	r3, [r7, #12]
 804ca46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804ca48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804ca4c:	d10f      	bne.n	804ca6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 804ca4e:	68fb      	ldr	r3, [r7, #12]
 804ca50:	681b      	ldr	r3, [r3, #0]
 804ca52:	681a      	ldr	r2, [r3, #0]
 804ca54:	68fb      	ldr	r3, [r7, #12]
 804ca56:	681b      	ldr	r3, [r3, #0]
 804ca58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 804ca5c:	601a      	str	r2, [r3, #0]
 804ca5e:	68fb      	ldr	r3, [r7, #12]
 804ca60:	681b      	ldr	r3, [r3, #0]
 804ca62:	681a      	ldr	r2, [r3, #0]
 804ca64:	68fb      	ldr	r3, [r7, #12]
 804ca66:	681b      	ldr	r3, [r3, #0]
 804ca68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 804ca6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 804ca6e:	68fb      	ldr	r3, [r7, #12]
 804ca70:	2201      	movs	r2, #1
 804ca72:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 804ca76:	68fb      	ldr	r3, [r7, #12]
 804ca78:	2200      	movs	r2, #0
 804ca7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 804ca7e:	2303      	movs	r3, #3
 804ca80:	e017      	b.n	804cab2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 804ca82:	697b      	ldr	r3, [r7, #20]
 804ca84:	2b00      	cmp	r3, #0
 804ca86:	d101      	bne.n	804ca8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 804ca88:	2300      	movs	r3, #0
 804ca8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 804ca8c:	697b      	ldr	r3, [r7, #20]
 804ca8e:	3b01      	subs	r3, #1
 804ca90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 804ca92:	68fb      	ldr	r3, [r7, #12]
 804ca94:	681b      	ldr	r3, [r3, #0]
 804ca96:	689a      	ldr	r2, [r3, #8]
 804ca98:	68bb      	ldr	r3, [r7, #8]
 804ca9a:	4013      	ands	r3, r2
 804ca9c:	68ba      	ldr	r2, [r7, #8]
 804ca9e:	429a      	cmp	r2, r3
 804caa0:	bf0c      	ite	eq
 804caa2:	2301      	moveq	r3, #1
 804caa4:	2300      	movne	r3, #0
 804caa6:	b2db      	uxtb	r3, r3
 804caa8:	461a      	mov	r2, r3
 804caaa:	79fb      	ldrb	r3, [r7, #7]
 804caac:	429a      	cmp	r2, r3
 804caae:	d19b      	bne.n	804c9e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 804cab0:	2300      	movs	r3, #0
}
 804cab2:	4618      	mov	r0, r3
 804cab4:	3720      	adds	r7, #32
 804cab6:	46bd      	mov	sp, r7
 804cab8:	bd80      	pop	{r7, pc}
 804caba:	bf00      	nop
 804cabc:	20018024 	.word	0x20018024

0804cac0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 804cac0:	b580      	push	{r7, lr}
 804cac2:	b088      	sub	sp, #32
 804cac4:	af00      	add	r7, sp, #0
 804cac6:	60f8      	str	r0, [r7, #12]
 804cac8:	60b9      	str	r1, [r7, #8]
 804caca:	607a      	str	r2, [r7, #4]
 804cacc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 804cace:	f7fa f881 	bl	8046bd4 <HAL_GetTick>
 804cad2:	4602      	mov	r2, r0
 804cad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804cad6:	1a9b      	subs	r3, r3, r2
 804cad8:	683a      	ldr	r2, [r7, #0]
 804cada:	4413      	add	r3, r2
 804cadc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 804cade:	f7fa f879 	bl	8046bd4 <HAL_GetTick>
 804cae2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 804cae4:	4b3c      	ldr	r3, [pc, #240]	; (804cbd8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 804cae6:	681a      	ldr	r2, [r3, #0]
 804cae8:	4613      	mov	r3, r2
 804caea:	009b      	lsls	r3, r3, #2
 804caec:	4413      	add	r3, r2
 804caee:	00da      	lsls	r2, r3, #3
 804caf0:	1ad3      	subs	r3, r2, r3
 804caf2:	0d1b      	lsrs	r3, r3, #20
 804caf4:	69fa      	ldr	r2, [r7, #28]
 804caf6:	fb02 f303 	mul.w	r3, r2, r3
 804cafa:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 804cafc:	e05f      	b.n	804cbbe <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 804cafe:	68bb      	ldr	r3, [r7, #8]
 804cb00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 804cb04:	d106      	bne.n	804cb14 <SPI_WaitFifoStateUntilTimeout+0x54>
 804cb06:	687b      	ldr	r3, [r7, #4]
 804cb08:	2b00      	cmp	r3, #0
 804cb0a:	d103      	bne.n	804cb14 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 804cb0c:	68fb      	ldr	r3, [r7, #12]
 804cb0e:	681b      	ldr	r3, [r3, #0]
 804cb10:	330c      	adds	r3, #12
 804cb12:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 804cb14:	683b      	ldr	r3, [r7, #0]
 804cb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 804cb1a:	d050      	beq.n	804cbbe <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 804cb1c:	f7fa f85a 	bl	8046bd4 <HAL_GetTick>
 804cb20:	4602      	mov	r2, r0
 804cb22:	69bb      	ldr	r3, [r7, #24]
 804cb24:	1ad3      	subs	r3, r2, r3
 804cb26:	69fa      	ldr	r2, [r7, #28]
 804cb28:	429a      	cmp	r2, r3
 804cb2a:	d902      	bls.n	804cb32 <SPI_WaitFifoStateUntilTimeout+0x72>
 804cb2c:	69fb      	ldr	r3, [r7, #28]
 804cb2e:	2b00      	cmp	r3, #0
 804cb30:	d13d      	bne.n	804cbae <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 804cb32:	68fb      	ldr	r3, [r7, #12]
 804cb34:	681b      	ldr	r3, [r3, #0]
 804cb36:	685a      	ldr	r2, [r3, #4]
 804cb38:	68fb      	ldr	r3, [r7, #12]
 804cb3a:	681b      	ldr	r3, [r3, #0]
 804cb3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 804cb40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804cb42:	68fb      	ldr	r3, [r7, #12]
 804cb44:	685b      	ldr	r3, [r3, #4]
 804cb46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804cb4a:	d111      	bne.n	804cb70 <SPI_WaitFifoStateUntilTimeout+0xb0>
 804cb4c:	68fb      	ldr	r3, [r7, #12]
 804cb4e:	689b      	ldr	r3, [r3, #8]
 804cb50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804cb54:	d004      	beq.n	804cb60 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 804cb56:	68fb      	ldr	r3, [r7, #12]
 804cb58:	689b      	ldr	r3, [r3, #8]
 804cb5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804cb5e:	d107      	bne.n	804cb70 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 804cb60:	68fb      	ldr	r3, [r7, #12]
 804cb62:	681b      	ldr	r3, [r3, #0]
 804cb64:	681a      	ldr	r2, [r3, #0]
 804cb66:	68fb      	ldr	r3, [r7, #12]
 804cb68:	681b      	ldr	r3, [r3, #0]
 804cb6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804cb6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 804cb70:	68fb      	ldr	r3, [r7, #12]
 804cb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804cb74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804cb78:	d10f      	bne.n	804cb9a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 804cb7a:	68fb      	ldr	r3, [r7, #12]
 804cb7c:	681b      	ldr	r3, [r3, #0]
 804cb7e:	681a      	ldr	r2, [r3, #0]
 804cb80:	68fb      	ldr	r3, [r7, #12]
 804cb82:	681b      	ldr	r3, [r3, #0]
 804cb84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 804cb88:	601a      	str	r2, [r3, #0]
 804cb8a:	68fb      	ldr	r3, [r7, #12]
 804cb8c:	681b      	ldr	r3, [r3, #0]
 804cb8e:	681a      	ldr	r2, [r3, #0]
 804cb90:	68fb      	ldr	r3, [r7, #12]
 804cb92:	681b      	ldr	r3, [r3, #0]
 804cb94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 804cb98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 804cb9a:	68fb      	ldr	r3, [r7, #12]
 804cb9c:	2201      	movs	r2, #1
 804cb9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 804cba2:	68fb      	ldr	r3, [r7, #12]
 804cba4:	2200      	movs	r2, #0
 804cba6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 804cbaa:	2303      	movs	r3, #3
 804cbac:	e010      	b.n	804cbd0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 804cbae:	697b      	ldr	r3, [r7, #20]
 804cbb0:	2b00      	cmp	r3, #0
 804cbb2:	d101      	bne.n	804cbb8 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 804cbb4:	2300      	movs	r3, #0
 804cbb6:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 804cbb8:	697b      	ldr	r3, [r7, #20]
 804cbba:	3b01      	subs	r3, #1
 804cbbc:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 804cbbe:	68fb      	ldr	r3, [r7, #12]
 804cbc0:	681b      	ldr	r3, [r3, #0]
 804cbc2:	689a      	ldr	r2, [r3, #8]
 804cbc4:	68bb      	ldr	r3, [r7, #8]
 804cbc6:	4013      	ands	r3, r2
 804cbc8:	687a      	ldr	r2, [r7, #4]
 804cbca:	429a      	cmp	r2, r3
 804cbcc:	d197      	bne.n	804cafe <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 804cbce:	2300      	movs	r3, #0
}
 804cbd0:	4618      	mov	r0, r3
 804cbd2:	3720      	adds	r7, #32
 804cbd4:	46bd      	mov	sp, r7
 804cbd6:	bd80      	pop	{r7, pc}
 804cbd8:	20018024 	.word	0x20018024

0804cbdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 804cbdc:	b580      	push	{r7, lr}
 804cbde:	b086      	sub	sp, #24
 804cbe0:	af02      	add	r7, sp, #8
 804cbe2:	60f8      	str	r0, [r7, #12]
 804cbe4:	60b9      	str	r1, [r7, #8]
 804cbe6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 804cbe8:	687b      	ldr	r3, [r7, #4]
 804cbea:	9300      	str	r3, [sp, #0]
 804cbec:	68bb      	ldr	r3, [r7, #8]
 804cbee:	2200      	movs	r2, #0
 804cbf0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 804cbf4:	68f8      	ldr	r0, [r7, #12]
 804cbf6:	f7ff ff63 	bl	804cac0 <SPI_WaitFifoStateUntilTimeout>
 804cbfa:	4603      	mov	r3, r0
 804cbfc:	2b00      	cmp	r3, #0
 804cbfe:	d007      	beq.n	804cc10 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804cc00:	68fb      	ldr	r3, [r7, #12]
 804cc02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804cc04:	f043 0220 	orr.w	r2, r3, #32
 804cc08:	68fb      	ldr	r3, [r7, #12]
 804cc0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 804cc0c:	2303      	movs	r3, #3
 804cc0e:	e027      	b.n	804cc60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 804cc10:	687b      	ldr	r3, [r7, #4]
 804cc12:	9300      	str	r3, [sp, #0]
 804cc14:	68bb      	ldr	r3, [r7, #8]
 804cc16:	2200      	movs	r2, #0
 804cc18:	2180      	movs	r1, #128	; 0x80
 804cc1a:	68f8      	ldr	r0, [r7, #12]
 804cc1c:	f7ff fec8 	bl	804c9b0 <SPI_WaitFlagStateUntilTimeout>
 804cc20:	4603      	mov	r3, r0
 804cc22:	2b00      	cmp	r3, #0
 804cc24:	d007      	beq.n	804cc36 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804cc26:	68fb      	ldr	r3, [r7, #12]
 804cc28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804cc2a:	f043 0220 	orr.w	r2, r3, #32
 804cc2e:	68fb      	ldr	r3, [r7, #12]
 804cc30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 804cc32:	2303      	movs	r3, #3
 804cc34:	e014      	b.n	804cc60 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 804cc36:	687b      	ldr	r3, [r7, #4]
 804cc38:	9300      	str	r3, [sp, #0]
 804cc3a:	68bb      	ldr	r3, [r7, #8]
 804cc3c:	2200      	movs	r2, #0
 804cc3e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 804cc42:	68f8      	ldr	r0, [r7, #12]
 804cc44:	f7ff ff3c 	bl	804cac0 <SPI_WaitFifoStateUntilTimeout>
 804cc48:	4603      	mov	r3, r0
 804cc4a:	2b00      	cmp	r3, #0
 804cc4c:	d007      	beq.n	804cc5e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804cc4e:	68fb      	ldr	r3, [r7, #12]
 804cc50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804cc52:	f043 0220 	orr.w	r2, r3, #32
 804cc56:	68fb      	ldr	r3, [r7, #12]
 804cc58:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 804cc5a:	2303      	movs	r3, #3
 804cc5c:	e000      	b.n	804cc60 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 804cc5e:	2300      	movs	r3, #0
}
 804cc60:	4618      	mov	r0, r3
 804cc62:	3710      	adds	r7, #16
 804cc64:	46bd      	mov	sp, r7
 804cc66:	bd80      	pop	{r7, pc}

0804cc68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 804cc68:	b580      	push	{r7, lr}
 804cc6a:	b082      	sub	sp, #8
 804cc6c:	af00      	add	r7, sp, #0
 804cc6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 804cc70:	687b      	ldr	r3, [r7, #4]
 804cc72:	2b00      	cmp	r3, #0
 804cc74:	d101      	bne.n	804cc7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 804cc76:	2301      	movs	r3, #1
 804cc78:	e054      	b.n	804cd24 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 804cc7a:	687b      	ldr	r3, [r7, #4]
 804cc7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804cc80:	b2db      	uxtb	r3, r3
 804cc82:	2b00      	cmp	r3, #0
 804cc84:	d111      	bne.n	804ccaa <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 804cc86:	687b      	ldr	r3, [r7, #4]
 804cc88:	2200      	movs	r2, #0
 804cc8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 804cc8e:	6878      	ldr	r0, [r7, #4]
 804cc90:	f000 fbb2 	bl	804d3f8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 804cc94:	687b      	ldr	r3, [r7, #4]
 804cc96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804cc98:	2b00      	cmp	r3, #0
 804cc9a:	d102      	bne.n	804cca2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 804cc9c:	687b      	ldr	r3, [r7, #4]
 804cc9e:	4a23      	ldr	r2, [pc, #140]	; (804cd2c <HAL_TIM_Base_Init+0xc4>)
 804cca0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 804cca2:	687b      	ldr	r3, [r7, #4]
 804cca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804cca6:	6878      	ldr	r0, [r7, #4]
 804cca8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804ccaa:	687b      	ldr	r3, [r7, #4]
 804ccac:	2202      	movs	r2, #2
 804ccae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 804ccb2:	687b      	ldr	r3, [r7, #4]
 804ccb4:	681a      	ldr	r2, [r3, #0]
 804ccb6:	687b      	ldr	r3, [r7, #4]
 804ccb8:	3304      	adds	r3, #4
 804ccba:	4619      	mov	r1, r3
 804ccbc:	4610      	mov	r0, r2
 804ccbe:	f000 fb01 	bl	804d2c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 804ccc2:	687b      	ldr	r3, [r7, #4]
 804ccc4:	2201      	movs	r2, #1
 804ccc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804ccca:	687b      	ldr	r3, [r7, #4]
 804cccc:	2201      	movs	r2, #1
 804ccce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 804ccd2:	687b      	ldr	r3, [r7, #4]
 804ccd4:	2201      	movs	r2, #1
 804ccd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 804ccda:	687b      	ldr	r3, [r7, #4]
 804ccdc:	2201      	movs	r2, #1
 804ccde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 804cce2:	687b      	ldr	r3, [r7, #4]
 804cce4:	2201      	movs	r2, #1
 804cce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 804ccea:	687b      	ldr	r3, [r7, #4]
 804ccec:	2201      	movs	r2, #1
 804ccee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 804ccf2:	687b      	ldr	r3, [r7, #4]
 804ccf4:	2201      	movs	r2, #1
 804ccf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804ccfa:	687b      	ldr	r3, [r7, #4]
 804ccfc:	2201      	movs	r2, #1
 804ccfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 804cd02:	687b      	ldr	r3, [r7, #4]
 804cd04:	2201      	movs	r2, #1
 804cd06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 804cd0a:	687b      	ldr	r3, [r7, #4]
 804cd0c:	2201      	movs	r2, #1
 804cd0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 804cd12:	687b      	ldr	r3, [r7, #4]
 804cd14:	2201      	movs	r2, #1
 804cd16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 804cd1a:	687b      	ldr	r3, [r7, #4]
 804cd1c:	2201      	movs	r2, #1
 804cd1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 804cd22:	2300      	movs	r3, #0
}
 804cd24:	4618      	mov	r0, r3
 804cd26:	3708      	adds	r7, #8
 804cd28:	46bd      	mov	sp, r7
 804cd2a:	bd80      	pop	{r7, pc}
 804cd2c:	0804cd31 	.word	0x0804cd31

0804cd30 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 804cd30:	b480      	push	{r7}
 804cd32:	b083      	sub	sp, #12
 804cd34:	af00      	add	r7, sp, #0
 804cd36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 804cd38:	bf00      	nop
 804cd3a:	370c      	adds	r7, #12
 804cd3c:	46bd      	mov	sp, r7
 804cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cd42:	4770      	bx	lr

0804cd44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 804cd44:	b480      	push	{r7}
 804cd46:	b085      	sub	sp, #20
 804cd48:	af00      	add	r7, sp, #0
 804cd4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 804cd4c:	687b      	ldr	r3, [r7, #4]
 804cd4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804cd52:	b2db      	uxtb	r3, r3
 804cd54:	2b01      	cmp	r3, #1
 804cd56:	d001      	beq.n	804cd5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 804cd58:	2301      	movs	r3, #1
 804cd5a:	e04f      	b.n	804cdfc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804cd5c:	687b      	ldr	r3, [r7, #4]
 804cd5e:	2202      	movs	r2, #2
 804cd60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 804cd64:	687b      	ldr	r3, [r7, #4]
 804cd66:	681b      	ldr	r3, [r3, #0]
 804cd68:	68da      	ldr	r2, [r3, #12]
 804cd6a:	687b      	ldr	r3, [r7, #4]
 804cd6c:	681b      	ldr	r3, [r3, #0]
 804cd6e:	f042 0201 	orr.w	r2, r2, #1
 804cd72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 804cd74:	687b      	ldr	r3, [r7, #4]
 804cd76:	681b      	ldr	r3, [r3, #0]
 804cd78:	4a23      	ldr	r2, [pc, #140]	; (804ce08 <HAL_TIM_Base_Start_IT+0xc4>)
 804cd7a:	4293      	cmp	r3, r2
 804cd7c:	d01d      	beq.n	804cdba <HAL_TIM_Base_Start_IT+0x76>
 804cd7e:	687b      	ldr	r3, [r7, #4]
 804cd80:	681b      	ldr	r3, [r3, #0]
 804cd82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804cd86:	d018      	beq.n	804cdba <HAL_TIM_Base_Start_IT+0x76>
 804cd88:	687b      	ldr	r3, [r7, #4]
 804cd8a:	681b      	ldr	r3, [r3, #0]
 804cd8c:	4a1f      	ldr	r2, [pc, #124]	; (804ce0c <HAL_TIM_Base_Start_IT+0xc8>)
 804cd8e:	4293      	cmp	r3, r2
 804cd90:	d013      	beq.n	804cdba <HAL_TIM_Base_Start_IT+0x76>
 804cd92:	687b      	ldr	r3, [r7, #4]
 804cd94:	681b      	ldr	r3, [r3, #0]
 804cd96:	4a1e      	ldr	r2, [pc, #120]	; (804ce10 <HAL_TIM_Base_Start_IT+0xcc>)
 804cd98:	4293      	cmp	r3, r2
 804cd9a:	d00e      	beq.n	804cdba <HAL_TIM_Base_Start_IT+0x76>
 804cd9c:	687b      	ldr	r3, [r7, #4]
 804cd9e:	681b      	ldr	r3, [r3, #0]
 804cda0:	4a1c      	ldr	r2, [pc, #112]	; (804ce14 <HAL_TIM_Base_Start_IT+0xd0>)
 804cda2:	4293      	cmp	r3, r2
 804cda4:	d009      	beq.n	804cdba <HAL_TIM_Base_Start_IT+0x76>
 804cda6:	687b      	ldr	r3, [r7, #4]
 804cda8:	681b      	ldr	r3, [r3, #0]
 804cdaa:	4a1b      	ldr	r2, [pc, #108]	; (804ce18 <HAL_TIM_Base_Start_IT+0xd4>)
 804cdac:	4293      	cmp	r3, r2
 804cdae:	d004      	beq.n	804cdba <HAL_TIM_Base_Start_IT+0x76>
 804cdb0:	687b      	ldr	r3, [r7, #4]
 804cdb2:	681b      	ldr	r3, [r3, #0]
 804cdb4:	4a19      	ldr	r2, [pc, #100]	; (804ce1c <HAL_TIM_Base_Start_IT+0xd8>)
 804cdb6:	4293      	cmp	r3, r2
 804cdb8:	d115      	bne.n	804cde6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 804cdba:	687b      	ldr	r3, [r7, #4]
 804cdbc:	681b      	ldr	r3, [r3, #0]
 804cdbe:	689a      	ldr	r2, [r3, #8]
 804cdc0:	4b17      	ldr	r3, [pc, #92]	; (804ce20 <HAL_TIM_Base_Start_IT+0xdc>)
 804cdc2:	4013      	ands	r3, r2
 804cdc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804cdc6:	68fb      	ldr	r3, [r7, #12]
 804cdc8:	2b06      	cmp	r3, #6
 804cdca:	d015      	beq.n	804cdf8 <HAL_TIM_Base_Start_IT+0xb4>
 804cdcc:	68fb      	ldr	r3, [r7, #12]
 804cdce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804cdd2:	d011      	beq.n	804cdf8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 804cdd4:	687b      	ldr	r3, [r7, #4]
 804cdd6:	681b      	ldr	r3, [r3, #0]
 804cdd8:	681a      	ldr	r2, [r3, #0]
 804cdda:	687b      	ldr	r3, [r7, #4]
 804cddc:	681b      	ldr	r3, [r3, #0]
 804cdde:	f042 0201 	orr.w	r2, r2, #1
 804cde2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804cde4:	e008      	b.n	804cdf8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 804cde6:	687b      	ldr	r3, [r7, #4]
 804cde8:	681b      	ldr	r3, [r3, #0]
 804cdea:	681a      	ldr	r2, [r3, #0]
 804cdec:	687b      	ldr	r3, [r7, #4]
 804cdee:	681b      	ldr	r3, [r3, #0]
 804cdf0:	f042 0201 	orr.w	r2, r2, #1
 804cdf4:	601a      	str	r2, [r3, #0]
 804cdf6:	e000      	b.n	804cdfa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804cdf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 804cdfa:	2300      	movs	r3, #0
}
 804cdfc:	4618      	mov	r0, r3
 804cdfe:	3714      	adds	r7, #20
 804ce00:	46bd      	mov	sp, r7
 804ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ce06:	4770      	bx	lr
 804ce08:	40012c00 	.word	0x40012c00
 804ce0c:	40000400 	.word	0x40000400
 804ce10:	40000800 	.word	0x40000800
 804ce14:	40000c00 	.word	0x40000c00
 804ce18:	40013400 	.word	0x40013400
 804ce1c:	40014000 	.word	0x40014000
 804ce20:	00010007 	.word	0x00010007

0804ce24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 804ce24:	b580      	push	{r7, lr}
 804ce26:	b086      	sub	sp, #24
 804ce28:	af00      	add	r7, sp, #0
 804ce2a:	6078      	str	r0, [r7, #4]
 804ce2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 804ce2e:	687b      	ldr	r3, [r7, #4]
 804ce30:	2b00      	cmp	r3, #0
 804ce32:	d101      	bne.n	804ce38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 804ce34:	2301      	movs	r3, #1
 804ce36:	e0a2      	b.n	804cf7e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 804ce38:	687b      	ldr	r3, [r7, #4]
 804ce3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804ce3e:	b2db      	uxtb	r3, r3
 804ce40:	2b00      	cmp	r3, #0
 804ce42:	d111      	bne.n	804ce68 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 804ce44:	687b      	ldr	r3, [r7, #4]
 804ce46:	2200      	movs	r2, #0
 804ce48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 804ce4c:	6878      	ldr	r0, [r7, #4]
 804ce4e:	f000 fad3 	bl	804d3f8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 804ce52:	687b      	ldr	r3, [r7, #4]
 804ce54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804ce56:	2b00      	cmp	r3, #0
 804ce58:	d102      	bne.n	804ce60 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 804ce5a:	687b      	ldr	r3, [r7, #4]
 804ce5c:	4a4a      	ldr	r2, [pc, #296]	; (804cf88 <HAL_TIM_Encoder_Init+0x164>)
 804ce5e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 804ce60:	687b      	ldr	r3, [r7, #4]
 804ce62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804ce64:	6878      	ldr	r0, [r7, #4]
 804ce66:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804ce68:	687b      	ldr	r3, [r7, #4]
 804ce6a:	2202      	movs	r2, #2
 804ce6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 804ce70:	687b      	ldr	r3, [r7, #4]
 804ce72:	681b      	ldr	r3, [r3, #0]
 804ce74:	689b      	ldr	r3, [r3, #8]
 804ce76:	687a      	ldr	r2, [r7, #4]
 804ce78:	6812      	ldr	r2, [r2, #0]
 804ce7a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 804ce7e:	f023 0307 	bic.w	r3, r3, #7
 804ce82:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 804ce84:	687b      	ldr	r3, [r7, #4]
 804ce86:	681a      	ldr	r2, [r3, #0]
 804ce88:	687b      	ldr	r3, [r7, #4]
 804ce8a:	3304      	adds	r3, #4
 804ce8c:	4619      	mov	r1, r3
 804ce8e:	4610      	mov	r0, r2
 804ce90:	f000 fa18 	bl	804d2c4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 804ce94:	687b      	ldr	r3, [r7, #4]
 804ce96:	681b      	ldr	r3, [r3, #0]
 804ce98:	689b      	ldr	r3, [r3, #8]
 804ce9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 804ce9c:	687b      	ldr	r3, [r7, #4]
 804ce9e:	681b      	ldr	r3, [r3, #0]
 804cea0:	699b      	ldr	r3, [r3, #24]
 804cea2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 804cea4:	687b      	ldr	r3, [r7, #4]
 804cea6:	681b      	ldr	r3, [r3, #0]
 804cea8:	6a1b      	ldr	r3, [r3, #32]
 804ceaa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 804ceac:	683b      	ldr	r3, [r7, #0]
 804ceae:	681b      	ldr	r3, [r3, #0]
 804ceb0:	697a      	ldr	r2, [r7, #20]
 804ceb2:	4313      	orrs	r3, r2
 804ceb4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 804ceb6:	693b      	ldr	r3, [r7, #16]
 804ceb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804cebc:	f023 0303 	bic.w	r3, r3, #3
 804cec0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 804cec2:	683b      	ldr	r3, [r7, #0]
 804cec4:	689a      	ldr	r2, [r3, #8]
 804cec6:	683b      	ldr	r3, [r7, #0]
 804cec8:	699b      	ldr	r3, [r3, #24]
 804ceca:	021b      	lsls	r3, r3, #8
 804cecc:	4313      	orrs	r3, r2
 804cece:	693a      	ldr	r2, [r7, #16]
 804ced0:	4313      	orrs	r3, r2
 804ced2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 804ced4:	693b      	ldr	r3, [r7, #16]
 804ced6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 804ceda:	f023 030c 	bic.w	r3, r3, #12
 804cede:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 804cee0:	693b      	ldr	r3, [r7, #16]
 804cee2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 804cee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804ceea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 804ceec:	683b      	ldr	r3, [r7, #0]
 804ceee:	68da      	ldr	r2, [r3, #12]
 804cef0:	683b      	ldr	r3, [r7, #0]
 804cef2:	69db      	ldr	r3, [r3, #28]
 804cef4:	021b      	lsls	r3, r3, #8
 804cef6:	4313      	orrs	r3, r2
 804cef8:	693a      	ldr	r2, [r7, #16]
 804cefa:	4313      	orrs	r3, r2
 804cefc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 804cefe:	683b      	ldr	r3, [r7, #0]
 804cf00:	691b      	ldr	r3, [r3, #16]
 804cf02:	011a      	lsls	r2, r3, #4
 804cf04:	683b      	ldr	r3, [r7, #0]
 804cf06:	6a1b      	ldr	r3, [r3, #32]
 804cf08:	031b      	lsls	r3, r3, #12
 804cf0a:	4313      	orrs	r3, r2
 804cf0c:	693a      	ldr	r2, [r7, #16]
 804cf0e:	4313      	orrs	r3, r2
 804cf10:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 804cf12:	68fb      	ldr	r3, [r7, #12]
 804cf14:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 804cf18:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 804cf1a:	68fb      	ldr	r3, [r7, #12]
 804cf1c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 804cf20:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 804cf22:	683b      	ldr	r3, [r7, #0]
 804cf24:	685a      	ldr	r2, [r3, #4]
 804cf26:	683b      	ldr	r3, [r7, #0]
 804cf28:	695b      	ldr	r3, [r3, #20]
 804cf2a:	011b      	lsls	r3, r3, #4
 804cf2c:	4313      	orrs	r3, r2
 804cf2e:	68fa      	ldr	r2, [r7, #12]
 804cf30:	4313      	orrs	r3, r2
 804cf32:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 804cf34:	687b      	ldr	r3, [r7, #4]
 804cf36:	681b      	ldr	r3, [r3, #0]
 804cf38:	697a      	ldr	r2, [r7, #20]
 804cf3a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 804cf3c:	687b      	ldr	r3, [r7, #4]
 804cf3e:	681b      	ldr	r3, [r3, #0]
 804cf40:	693a      	ldr	r2, [r7, #16]
 804cf42:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 804cf44:	687b      	ldr	r3, [r7, #4]
 804cf46:	681b      	ldr	r3, [r3, #0]
 804cf48:	68fa      	ldr	r2, [r7, #12]
 804cf4a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 804cf4c:	687b      	ldr	r3, [r7, #4]
 804cf4e:	2201      	movs	r2, #1
 804cf50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 804cf54:	687b      	ldr	r3, [r7, #4]
 804cf56:	2201      	movs	r2, #1
 804cf58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 804cf5c:	687b      	ldr	r3, [r7, #4]
 804cf5e:	2201      	movs	r2, #1
 804cf60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 804cf64:	687b      	ldr	r3, [r7, #4]
 804cf66:	2201      	movs	r2, #1
 804cf68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 804cf6c:	687b      	ldr	r3, [r7, #4]
 804cf6e:	2201      	movs	r2, #1
 804cf70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 804cf74:	687b      	ldr	r3, [r7, #4]
 804cf76:	2201      	movs	r2, #1
 804cf78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 804cf7c:	2300      	movs	r3, #0
}
 804cf7e:	4618      	mov	r0, r3
 804cf80:	3718      	adds	r7, #24
 804cf82:	46bd      	mov	sp, r7
 804cf84:	bd80      	pop	{r7, pc}
 804cf86:	bf00      	nop
 804cf88:	08042f05 	.word	0x08042f05

0804cf8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 804cf8c:	b580      	push	{r7, lr}
 804cf8e:	b082      	sub	sp, #8
 804cf90:	af00      	add	r7, sp, #0
 804cf92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 804cf94:	687b      	ldr	r3, [r7, #4]
 804cf96:	681b      	ldr	r3, [r3, #0]
 804cf98:	691b      	ldr	r3, [r3, #16]
 804cf9a:	f003 0302 	and.w	r3, r3, #2
 804cf9e:	2b02      	cmp	r3, #2
 804cfa0:	d128      	bne.n	804cff4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 804cfa2:	687b      	ldr	r3, [r7, #4]
 804cfa4:	681b      	ldr	r3, [r3, #0]
 804cfa6:	68db      	ldr	r3, [r3, #12]
 804cfa8:	f003 0302 	and.w	r3, r3, #2
 804cfac:	2b02      	cmp	r3, #2
 804cfae:	d121      	bne.n	804cff4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 804cfb0:	687b      	ldr	r3, [r7, #4]
 804cfb2:	681b      	ldr	r3, [r3, #0]
 804cfb4:	f06f 0202 	mvn.w	r2, #2
 804cfb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 804cfba:	687b      	ldr	r3, [r7, #4]
 804cfbc:	2201      	movs	r2, #1
 804cfbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 804cfc0:	687b      	ldr	r3, [r7, #4]
 804cfc2:	681b      	ldr	r3, [r3, #0]
 804cfc4:	699b      	ldr	r3, [r3, #24]
 804cfc6:	f003 0303 	and.w	r3, r3, #3
 804cfca:	2b00      	cmp	r3, #0
 804cfcc:	d005      	beq.n	804cfda <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 804cfce:	687b      	ldr	r3, [r7, #4]
 804cfd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804cfd4:	6878      	ldr	r0, [r7, #4]
 804cfd6:	4798      	blx	r3
 804cfd8:	e009      	b.n	804cfee <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 804cfda:	687b      	ldr	r3, [r7, #4]
 804cfdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804cfe0:	6878      	ldr	r0, [r7, #4]
 804cfe2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 804cfe4:	687b      	ldr	r3, [r7, #4]
 804cfe6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 804cfea:	6878      	ldr	r0, [r7, #4]
 804cfec:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804cfee:	687b      	ldr	r3, [r7, #4]
 804cff0:	2200      	movs	r2, #0
 804cff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 804cff4:	687b      	ldr	r3, [r7, #4]
 804cff6:	681b      	ldr	r3, [r3, #0]
 804cff8:	691b      	ldr	r3, [r3, #16]
 804cffa:	f003 0304 	and.w	r3, r3, #4
 804cffe:	2b04      	cmp	r3, #4
 804d000:	d128      	bne.n	804d054 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 804d002:	687b      	ldr	r3, [r7, #4]
 804d004:	681b      	ldr	r3, [r3, #0]
 804d006:	68db      	ldr	r3, [r3, #12]
 804d008:	f003 0304 	and.w	r3, r3, #4
 804d00c:	2b04      	cmp	r3, #4
 804d00e:	d121      	bne.n	804d054 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 804d010:	687b      	ldr	r3, [r7, #4]
 804d012:	681b      	ldr	r3, [r3, #0]
 804d014:	f06f 0204 	mvn.w	r2, #4
 804d018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 804d01a:	687b      	ldr	r3, [r7, #4]
 804d01c:	2202      	movs	r2, #2
 804d01e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 804d020:	687b      	ldr	r3, [r7, #4]
 804d022:	681b      	ldr	r3, [r3, #0]
 804d024:	699b      	ldr	r3, [r3, #24]
 804d026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804d02a:	2b00      	cmp	r3, #0
 804d02c:	d005      	beq.n	804d03a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 804d02e:	687b      	ldr	r3, [r7, #4]
 804d030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804d034:	6878      	ldr	r0, [r7, #4]
 804d036:	4798      	blx	r3
 804d038:	e009      	b.n	804d04e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 804d03a:	687b      	ldr	r3, [r7, #4]
 804d03c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804d040:	6878      	ldr	r0, [r7, #4]
 804d042:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 804d044:	687b      	ldr	r3, [r7, #4]
 804d046:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 804d04a:	6878      	ldr	r0, [r7, #4]
 804d04c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804d04e:	687b      	ldr	r3, [r7, #4]
 804d050:	2200      	movs	r2, #0
 804d052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 804d054:	687b      	ldr	r3, [r7, #4]
 804d056:	681b      	ldr	r3, [r3, #0]
 804d058:	691b      	ldr	r3, [r3, #16]
 804d05a:	f003 0308 	and.w	r3, r3, #8
 804d05e:	2b08      	cmp	r3, #8
 804d060:	d128      	bne.n	804d0b4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 804d062:	687b      	ldr	r3, [r7, #4]
 804d064:	681b      	ldr	r3, [r3, #0]
 804d066:	68db      	ldr	r3, [r3, #12]
 804d068:	f003 0308 	and.w	r3, r3, #8
 804d06c:	2b08      	cmp	r3, #8
 804d06e:	d121      	bne.n	804d0b4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 804d070:	687b      	ldr	r3, [r7, #4]
 804d072:	681b      	ldr	r3, [r3, #0]
 804d074:	f06f 0208 	mvn.w	r2, #8
 804d078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 804d07a:	687b      	ldr	r3, [r7, #4]
 804d07c:	2204      	movs	r2, #4
 804d07e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 804d080:	687b      	ldr	r3, [r7, #4]
 804d082:	681b      	ldr	r3, [r3, #0]
 804d084:	69db      	ldr	r3, [r3, #28]
 804d086:	f003 0303 	and.w	r3, r3, #3
 804d08a:	2b00      	cmp	r3, #0
 804d08c:	d005      	beq.n	804d09a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 804d08e:	687b      	ldr	r3, [r7, #4]
 804d090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804d094:	6878      	ldr	r0, [r7, #4]
 804d096:	4798      	blx	r3
 804d098:	e009      	b.n	804d0ae <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 804d09a:	687b      	ldr	r3, [r7, #4]
 804d09c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804d0a0:	6878      	ldr	r0, [r7, #4]
 804d0a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 804d0a4:	687b      	ldr	r3, [r7, #4]
 804d0a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 804d0aa:	6878      	ldr	r0, [r7, #4]
 804d0ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804d0ae:	687b      	ldr	r3, [r7, #4]
 804d0b0:	2200      	movs	r2, #0
 804d0b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 804d0b4:	687b      	ldr	r3, [r7, #4]
 804d0b6:	681b      	ldr	r3, [r3, #0]
 804d0b8:	691b      	ldr	r3, [r3, #16]
 804d0ba:	f003 0310 	and.w	r3, r3, #16
 804d0be:	2b10      	cmp	r3, #16
 804d0c0:	d128      	bne.n	804d114 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 804d0c2:	687b      	ldr	r3, [r7, #4]
 804d0c4:	681b      	ldr	r3, [r3, #0]
 804d0c6:	68db      	ldr	r3, [r3, #12]
 804d0c8:	f003 0310 	and.w	r3, r3, #16
 804d0cc:	2b10      	cmp	r3, #16
 804d0ce:	d121      	bne.n	804d114 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 804d0d0:	687b      	ldr	r3, [r7, #4]
 804d0d2:	681b      	ldr	r3, [r3, #0]
 804d0d4:	f06f 0210 	mvn.w	r2, #16
 804d0d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 804d0da:	687b      	ldr	r3, [r7, #4]
 804d0dc:	2208      	movs	r2, #8
 804d0de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 804d0e0:	687b      	ldr	r3, [r7, #4]
 804d0e2:	681b      	ldr	r3, [r3, #0]
 804d0e4:	69db      	ldr	r3, [r3, #28]
 804d0e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804d0ea:	2b00      	cmp	r3, #0
 804d0ec:	d005      	beq.n	804d0fa <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 804d0ee:	687b      	ldr	r3, [r7, #4]
 804d0f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804d0f4:	6878      	ldr	r0, [r7, #4]
 804d0f6:	4798      	blx	r3
 804d0f8:	e009      	b.n	804d10e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 804d0fa:	687b      	ldr	r3, [r7, #4]
 804d0fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804d100:	6878      	ldr	r0, [r7, #4]
 804d102:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 804d104:	687b      	ldr	r3, [r7, #4]
 804d106:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 804d10a:	6878      	ldr	r0, [r7, #4]
 804d10c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804d10e:	687b      	ldr	r3, [r7, #4]
 804d110:	2200      	movs	r2, #0
 804d112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 804d114:	687b      	ldr	r3, [r7, #4]
 804d116:	681b      	ldr	r3, [r3, #0]
 804d118:	691b      	ldr	r3, [r3, #16]
 804d11a:	f003 0301 	and.w	r3, r3, #1
 804d11e:	2b01      	cmp	r3, #1
 804d120:	d110      	bne.n	804d144 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 804d122:	687b      	ldr	r3, [r7, #4]
 804d124:	681b      	ldr	r3, [r3, #0]
 804d126:	68db      	ldr	r3, [r3, #12]
 804d128:	f003 0301 	and.w	r3, r3, #1
 804d12c:	2b01      	cmp	r3, #1
 804d12e:	d109      	bne.n	804d144 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 804d130:	687b      	ldr	r3, [r7, #4]
 804d132:	681b      	ldr	r3, [r3, #0]
 804d134:	f06f 0201 	mvn.w	r2, #1
 804d138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 804d13a:	687b      	ldr	r3, [r7, #4]
 804d13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804d140:	6878      	ldr	r0, [r7, #4]
 804d142:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 804d144:	687b      	ldr	r3, [r7, #4]
 804d146:	681b      	ldr	r3, [r3, #0]
 804d148:	691b      	ldr	r3, [r3, #16]
 804d14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804d14e:	2b80      	cmp	r3, #128	; 0x80
 804d150:	d110      	bne.n	804d174 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 804d152:	687b      	ldr	r3, [r7, #4]
 804d154:	681b      	ldr	r3, [r3, #0]
 804d156:	68db      	ldr	r3, [r3, #12]
 804d158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804d15c:	2b80      	cmp	r3, #128	; 0x80
 804d15e:	d109      	bne.n	804d174 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 804d160:	687b      	ldr	r3, [r7, #4]
 804d162:	681b      	ldr	r3, [r3, #0]
 804d164:	f06f 0280 	mvn.w	r2, #128	; 0x80
 804d168:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 804d16a:	687b      	ldr	r3, [r7, #4]
 804d16c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 804d170:	6878      	ldr	r0, [r7, #4]
 804d172:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 804d174:	687b      	ldr	r3, [r7, #4]
 804d176:	681b      	ldr	r3, [r3, #0]
 804d178:	691b      	ldr	r3, [r3, #16]
 804d17a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804d17e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804d182:	d110      	bne.n	804d1a6 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 804d184:	687b      	ldr	r3, [r7, #4]
 804d186:	681b      	ldr	r3, [r3, #0]
 804d188:	68db      	ldr	r3, [r3, #12]
 804d18a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804d18e:	2b80      	cmp	r3, #128	; 0x80
 804d190:	d109      	bne.n	804d1a6 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 804d192:	687b      	ldr	r3, [r7, #4]
 804d194:	681b      	ldr	r3, [r3, #0]
 804d196:	f46f 7280 	mvn.w	r2, #256	; 0x100
 804d19a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 804d19c:	687b      	ldr	r3, [r7, #4]
 804d19e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 804d1a2:	6878      	ldr	r0, [r7, #4]
 804d1a4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 804d1a6:	687b      	ldr	r3, [r7, #4]
 804d1a8:	681b      	ldr	r3, [r3, #0]
 804d1aa:	691b      	ldr	r3, [r3, #16]
 804d1ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804d1b0:	2b40      	cmp	r3, #64	; 0x40
 804d1b2:	d110      	bne.n	804d1d6 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 804d1b4:	687b      	ldr	r3, [r7, #4]
 804d1b6:	681b      	ldr	r3, [r3, #0]
 804d1b8:	68db      	ldr	r3, [r3, #12]
 804d1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804d1be:	2b40      	cmp	r3, #64	; 0x40
 804d1c0:	d109      	bne.n	804d1d6 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 804d1c2:	687b      	ldr	r3, [r7, #4]
 804d1c4:	681b      	ldr	r3, [r3, #0]
 804d1c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 804d1ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 804d1cc:	687b      	ldr	r3, [r7, #4]
 804d1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804d1d2:	6878      	ldr	r0, [r7, #4]
 804d1d4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 804d1d6:	687b      	ldr	r3, [r7, #4]
 804d1d8:	681b      	ldr	r3, [r3, #0]
 804d1da:	691b      	ldr	r3, [r3, #16]
 804d1dc:	f003 0320 	and.w	r3, r3, #32
 804d1e0:	2b20      	cmp	r3, #32
 804d1e2:	d110      	bne.n	804d206 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 804d1e4:	687b      	ldr	r3, [r7, #4]
 804d1e6:	681b      	ldr	r3, [r3, #0]
 804d1e8:	68db      	ldr	r3, [r3, #12]
 804d1ea:	f003 0320 	and.w	r3, r3, #32
 804d1ee:	2b20      	cmp	r3, #32
 804d1f0:	d109      	bne.n	804d206 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 804d1f2:	687b      	ldr	r3, [r7, #4]
 804d1f4:	681b      	ldr	r3, [r3, #0]
 804d1f6:	f06f 0220 	mvn.w	r2, #32
 804d1fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 804d1fc:	687b      	ldr	r3, [r7, #4]
 804d1fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 804d202:	6878      	ldr	r0, [r7, #4]
 804d204:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 804d206:	bf00      	nop
 804d208:	3708      	adds	r7, #8
 804d20a:	46bd      	mov	sp, r7
 804d20c:	bd80      	pop	{r7, pc}

0804d20e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 804d20e:	b480      	push	{r7}
 804d210:	b083      	sub	sp, #12
 804d212:	af00      	add	r7, sp, #0
 804d214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 804d216:	bf00      	nop
 804d218:	370c      	adds	r7, #12
 804d21a:	46bd      	mov	sp, r7
 804d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d220:	4770      	bx	lr

0804d222 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 804d222:	b480      	push	{r7}
 804d224:	b083      	sub	sp, #12
 804d226:	af00      	add	r7, sp, #0
 804d228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 804d22a:	bf00      	nop
 804d22c:	370c      	adds	r7, #12
 804d22e:	46bd      	mov	sp, r7
 804d230:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d234:	4770      	bx	lr

0804d236 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 804d236:	b480      	push	{r7}
 804d238:	b083      	sub	sp, #12
 804d23a:	af00      	add	r7, sp, #0
 804d23c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 804d23e:	bf00      	nop
 804d240:	370c      	adds	r7, #12
 804d242:	46bd      	mov	sp, r7
 804d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d248:	4770      	bx	lr

0804d24a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 804d24a:	b480      	push	{r7}
 804d24c:	b083      	sub	sp, #12
 804d24e:	af00      	add	r7, sp, #0
 804d250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 804d252:	bf00      	nop
 804d254:	370c      	adds	r7, #12
 804d256:	46bd      	mov	sp, r7
 804d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d25c:	4770      	bx	lr

0804d25e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 804d25e:	b480      	push	{r7}
 804d260:	b083      	sub	sp, #12
 804d262:	af00      	add	r7, sp, #0
 804d264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 804d266:	bf00      	nop
 804d268:	370c      	adds	r7, #12
 804d26a:	46bd      	mov	sp, r7
 804d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d270:	4770      	bx	lr

0804d272 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 804d272:	b480      	push	{r7}
 804d274:	b083      	sub	sp, #12
 804d276:	af00      	add	r7, sp, #0
 804d278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 804d27a:	bf00      	nop
 804d27c:	370c      	adds	r7, #12
 804d27e:	46bd      	mov	sp, r7
 804d280:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d284:	4770      	bx	lr

0804d286 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 804d286:	b480      	push	{r7}
 804d288:	b083      	sub	sp, #12
 804d28a:	af00      	add	r7, sp, #0
 804d28c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 804d28e:	bf00      	nop
 804d290:	370c      	adds	r7, #12
 804d292:	46bd      	mov	sp, r7
 804d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d298:	4770      	bx	lr

0804d29a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 804d29a:	b480      	push	{r7}
 804d29c:	b083      	sub	sp, #12
 804d29e:	af00      	add	r7, sp, #0
 804d2a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 804d2a2:	bf00      	nop
 804d2a4:	370c      	adds	r7, #12
 804d2a6:	46bd      	mov	sp, r7
 804d2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d2ac:	4770      	bx	lr

0804d2ae <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 804d2ae:	b480      	push	{r7}
 804d2b0:	b083      	sub	sp, #12
 804d2b2:	af00      	add	r7, sp, #0
 804d2b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 804d2b6:	bf00      	nop
 804d2b8:	370c      	adds	r7, #12
 804d2ba:	46bd      	mov	sp, r7
 804d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d2c0:	4770      	bx	lr
	...

0804d2c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 804d2c4:	b480      	push	{r7}
 804d2c6:	b085      	sub	sp, #20
 804d2c8:	af00      	add	r7, sp, #0
 804d2ca:	6078      	str	r0, [r7, #4]
 804d2cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 804d2ce:	687b      	ldr	r3, [r7, #4]
 804d2d0:	681b      	ldr	r3, [r3, #0]
 804d2d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 804d2d4:	687b      	ldr	r3, [r7, #4]
 804d2d6:	4a40      	ldr	r2, [pc, #256]	; (804d3d8 <TIM_Base_SetConfig+0x114>)
 804d2d8:	4293      	cmp	r3, r2
 804d2da:	d013      	beq.n	804d304 <TIM_Base_SetConfig+0x40>
 804d2dc:	687b      	ldr	r3, [r7, #4]
 804d2de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804d2e2:	d00f      	beq.n	804d304 <TIM_Base_SetConfig+0x40>
 804d2e4:	687b      	ldr	r3, [r7, #4]
 804d2e6:	4a3d      	ldr	r2, [pc, #244]	; (804d3dc <TIM_Base_SetConfig+0x118>)
 804d2e8:	4293      	cmp	r3, r2
 804d2ea:	d00b      	beq.n	804d304 <TIM_Base_SetConfig+0x40>
 804d2ec:	687b      	ldr	r3, [r7, #4]
 804d2ee:	4a3c      	ldr	r2, [pc, #240]	; (804d3e0 <TIM_Base_SetConfig+0x11c>)
 804d2f0:	4293      	cmp	r3, r2
 804d2f2:	d007      	beq.n	804d304 <TIM_Base_SetConfig+0x40>
 804d2f4:	687b      	ldr	r3, [r7, #4]
 804d2f6:	4a3b      	ldr	r2, [pc, #236]	; (804d3e4 <TIM_Base_SetConfig+0x120>)
 804d2f8:	4293      	cmp	r3, r2
 804d2fa:	d003      	beq.n	804d304 <TIM_Base_SetConfig+0x40>
 804d2fc:	687b      	ldr	r3, [r7, #4]
 804d2fe:	4a3a      	ldr	r2, [pc, #232]	; (804d3e8 <TIM_Base_SetConfig+0x124>)
 804d300:	4293      	cmp	r3, r2
 804d302:	d108      	bne.n	804d316 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 804d304:	68fb      	ldr	r3, [r7, #12]
 804d306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804d30a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 804d30c:	683b      	ldr	r3, [r7, #0]
 804d30e:	685b      	ldr	r3, [r3, #4]
 804d310:	68fa      	ldr	r2, [r7, #12]
 804d312:	4313      	orrs	r3, r2
 804d314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 804d316:	687b      	ldr	r3, [r7, #4]
 804d318:	4a2f      	ldr	r2, [pc, #188]	; (804d3d8 <TIM_Base_SetConfig+0x114>)
 804d31a:	4293      	cmp	r3, r2
 804d31c:	d01f      	beq.n	804d35e <TIM_Base_SetConfig+0x9a>
 804d31e:	687b      	ldr	r3, [r7, #4]
 804d320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804d324:	d01b      	beq.n	804d35e <TIM_Base_SetConfig+0x9a>
 804d326:	687b      	ldr	r3, [r7, #4]
 804d328:	4a2c      	ldr	r2, [pc, #176]	; (804d3dc <TIM_Base_SetConfig+0x118>)
 804d32a:	4293      	cmp	r3, r2
 804d32c:	d017      	beq.n	804d35e <TIM_Base_SetConfig+0x9a>
 804d32e:	687b      	ldr	r3, [r7, #4]
 804d330:	4a2b      	ldr	r2, [pc, #172]	; (804d3e0 <TIM_Base_SetConfig+0x11c>)
 804d332:	4293      	cmp	r3, r2
 804d334:	d013      	beq.n	804d35e <TIM_Base_SetConfig+0x9a>
 804d336:	687b      	ldr	r3, [r7, #4]
 804d338:	4a2a      	ldr	r2, [pc, #168]	; (804d3e4 <TIM_Base_SetConfig+0x120>)
 804d33a:	4293      	cmp	r3, r2
 804d33c:	d00f      	beq.n	804d35e <TIM_Base_SetConfig+0x9a>
 804d33e:	687b      	ldr	r3, [r7, #4]
 804d340:	4a29      	ldr	r2, [pc, #164]	; (804d3e8 <TIM_Base_SetConfig+0x124>)
 804d342:	4293      	cmp	r3, r2
 804d344:	d00b      	beq.n	804d35e <TIM_Base_SetConfig+0x9a>
 804d346:	687b      	ldr	r3, [r7, #4]
 804d348:	4a28      	ldr	r2, [pc, #160]	; (804d3ec <TIM_Base_SetConfig+0x128>)
 804d34a:	4293      	cmp	r3, r2
 804d34c:	d007      	beq.n	804d35e <TIM_Base_SetConfig+0x9a>
 804d34e:	687b      	ldr	r3, [r7, #4]
 804d350:	4a27      	ldr	r2, [pc, #156]	; (804d3f0 <TIM_Base_SetConfig+0x12c>)
 804d352:	4293      	cmp	r3, r2
 804d354:	d003      	beq.n	804d35e <TIM_Base_SetConfig+0x9a>
 804d356:	687b      	ldr	r3, [r7, #4]
 804d358:	4a26      	ldr	r2, [pc, #152]	; (804d3f4 <TIM_Base_SetConfig+0x130>)
 804d35a:	4293      	cmp	r3, r2
 804d35c:	d108      	bne.n	804d370 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 804d35e:	68fb      	ldr	r3, [r7, #12]
 804d360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804d364:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 804d366:	683b      	ldr	r3, [r7, #0]
 804d368:	68db      	ldr	r3, [r3, #12]
 804d36a:	68fa      	ldr	r2, [r7, #12]
 804d36c:	4313      	orrs	r3, r2
 804d36e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 804d370:	68fb      	ldr	r3, [r7, #12]
 804d372:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 804d376:	683b      	ldr	r3, [r7, #0]
 804d378:	695b      	ldr	r3, [r3, #20]
 804d37a:	4313      	orrs	r3, r2
 804d37c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 804d37e:	687b      	ldr	r3, [r7, #4]
 804d380:	68fa      	ldr	r2, [r7, #12]
 804d382:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 804d384:	683b      	ldr	r3, [r7, #0]
 804d386:	689a      	ldr	r2, [r3, #8]
 804d388:	687b      	ldr	r3, [r7, #4]
 804d38a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 804d38c:	683b      	ldr	r3, [r7, #0]
 804d38e:	681a      	ldr	r2, [r3, #0]
 804d390:	687b      	ldr	r3, [r7, #4]
 804d392:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 804d394:	687b      	ldr	r3, [r7, #4]
 804d396:	4a10      	ldr	r2, [pc, #64]	; (804d3d8 <TIM_Base_SetConfig+0x114>)
 804d398:	4293      	cmp	r3, r2
 804d39a:	d00f      	beq.n	804d3bc <TIM_Base_SetConfig+0xf8>
 804d39c:	687b      	ldr	r3, [r7, #4]
 804d39e:	4a12      	ldr	r2, [pc, #72]	; (804d3e8 <TIM_Base_SetConfig+0x124>)
 804d3a0:	4293      	cmp	r3, r2
 804d3a2:	d00b      	beq.n	804d3bc <TIM_Base_SetConfig+0xf8>
 804d3a4:	687b      	ldr	r3, [r7, #4]
 804d3a6:	4a11      	ldr	r2, [pc, #68]	; (804d3ec <TIM_Base_SetConfig+0x128>)
 804d3a8:	4293      	cmp	r3, r2
 804d3aa:	d007      	beq.n	804d3bc <TIM_Base_SetConfig+0xf8>
 804d3ac:	687b      	ldr	r3, [r7, #4]
 804d3ae:	4a10      	ldr	r2, [pc, #64]	; (804d3f0 <TIM_Base_SetConfig+0x12c>)
 804d3b0:	4293      	cmp	r3, r2
 804d3b2:	d003      	beq.n	804d3bc <TIM_Base_SetConfig+0xf8>
 804d3b4:	687b      	ldr	r3, [r7, #4]
 804d3b6:	4a0f      	ldr	r2, [pc, #60]	; (804d3f4 <TIM_Base_SetConfig+0x130>)
 804d3b8:	4293      	cmp	r3, r2
 804d3ba:	d103      	bne.n	804d3c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 804d3bc:	683b      	ldr	r3, [r7, #0]
 804d3be:	691a      	ldr	r2, [r3, #16]
 804d3c0:	687b      	ldr	r3, [r7, #4]
 804d3c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 804d3c4:	687b      	ldr	r3, [r7, #4]
 804d3c6:	2201      	movs	r2, #1
 804d3c8:	615a      	str	r2, [r3, #20]
}
 804d3ca:	bf00      	nop
 804d3cc:	3714      	adds	r7, #20
 804d3ce:	46bd      	mov	sp, r7
 804d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d3d4:	4770      	bx	lr
 804d3d6:	bf00      	nop
 804d3d8:	40012c00 	.word	0x40012c00
 804d3dc:	40000400 	.word	0x40000400
 804d3e0:	40000800 	.word	0x40000800
 804d3e4:	40000c00 	.word	0x40000c00
 804d3e8:	40013400 	.word	0x40013400
 804d3ec:	40014000 	.word	0x40014000
 804d3f0:	40014400 	.word	0x40014400
 804d3f4:	40014800 	.word	0x40014800

0804d3f8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 804d3f8:	b480      	push	{r7}
 804d3fa:	b083      	sub	sp, #12
 804d3fc:	af00      	add	r7, sp, #0
 804d3fe:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 804d400:	687b      	ldr	r3, [r7, #4]
 804d402:	4a1e      	ldr	r2, [pc, #120]	; (804d47c <TIM_ResetCallback+0x84>)
 804d404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 804d408:	687b      	ldr	r3, [r7, #4]
 804d40a:	4a1d      	ldr	r2, [pc, #116]	; (804d480 <TIM_ResetCallback+0x88>)
 804d40c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 804d410:	687b      	ldr	r3, [r7, #4]
 804d412:	4a1c      	ldr	r2, [pc, #112]	; (804d484 <TIM_ResetCallback+0x8c>)
 804d414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 804d418:	687b      	ldr	r3, [r7, #4]
 804d41a:	4a1b      	ldr	r2, [pc, #108]	; (804d488 <TIM_ResetCallback+0x90>)
 804d41c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 804d420:	687b      	ldr	r3, [r7, #4]
 804d422:	4a1a      	ldr	r2, [pc, #104]	; (804d48c <TIM_ResetCallback+0x94>)
 804d424:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 804d428:	687b      	ldr	r3, [r7, #4]
 804d42a:	4a19      	ldr	r2, [pc, #100]	; (804d490 <TIM_ResetCallback+0x98>)
 804d42c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 804d430:	687b      	ldr	r3, [r7, #4]
 804d432:	4a18      	ldr	r2, [pc, #96]	; (804d494 <TIM_ResetCallback+0x9c>)
 804d434:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 804d438:	687b      	ldr	r3, [r7, #4]
 804d43a:	4a17      	ldr	r2, [pc, #92]	; (804d498 <TIM_ResetCallback+0xa0>)
 804d43c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 804d440:	687b      	ldr	r3, [r7, #4]
 804d442:	4a16      	ldr	r2, [pc, #88]	; (804d49c <TIM_ResetCallback+0xa4>)
 804d444:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 804d448:	687b      	ldr	r3, [r7, #4]
 804d44a:	4a15      	ldr	r2, [pc, #84]	; (804d4a0 <TIM_ResetCallback+0xa8>)
 804d44c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 804d450:	687b      	ldr	r3, [r7, #4]
 804d452:	4a14      	ldr	r2, [pc, #80]	; (804d4a4 <TIM_ResetCallback+0xac>)
 804d454:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 804d458:	687b      	ldr	r3, [r7, #4]
 804d45a:	4a13      	ldr	r2, [pc, #76]	; (804d4a8 <TIM_ResetCallback+0xb0>)
 804d45c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 804d460:	687b      	ldr	r3, [r7, #4]
 804d462:	4a12      	ldr	r2, [pc, #72]	; (804d4ac <TIM_ResetCallback+0xb4>)
 804d464:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 804d468:	687b      	ldr	r3, [r7, #4]
 804d46a:	4a11      	ldr	r2, [pc, #68]	; (804d4b0 <TIM_ResetCallback+0xb8>)
 804d46c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 804d470:	bf00      	nop
 804d472:	370c      	adds	r7, #12
 804d474:	46bd      	mov	sp, r7
 804d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d47a:	4770      	bx	lr
 804d47c:	08041cd5 	.word	0x08041cd5
 804d480:	0804d20f 	.word	0x0804d20f
 804d484:	0804d287 	.word	0x0804d287
 804d488:	0804d29b 	.word	0x0804d29b
 804d48c:	0804d237 	.word	0x0804d237
 804d490:	0804d24b 	.word	0x0804d24b
 804d494:	0804d223 	.word	0x0804d223
 804d498:	0804d25f 	.word	0x0804d25f
 804d49c:	0804d273 	.word	0x0804d273
 804d4a0:	0804d2af 	.word	0x0804d2af
 804d4a4:	0804d5c5 	.word	0x0804d5c5
 804d4a8:	0804d5d9 	.word	0x0804d5d9
 804d4ac:	0804d5ed 	.word	0x0804d5ed
 804d4b0:	0804d601 	.word	0x0804d601

0804d4b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 804d4b4:	b480      	push	{r7}
 804d4b6:	b085      	sub	sp, #20
 804d4b8:	af00      	add	r7, sp, #0
 804d4ba:	6078      	str	r0, [r7, #4]
 804d4bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 804d4be:	687b      	ldr	r3, [r7, #4]
 804d4c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 804d4c4:	2b01      	cmp	r3, #1
 804d4c6:	d101      	bne.n	804d4cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 804d4c8:	2302      	movs	r3, #2
 804d4ca:	e068      	b.n	804d59e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 804d4cc:	687b      	ldr	r3, [r7, #4]
 804d4ce:	2201      	movs	r2, #1
 804d4d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 804d4d4:	687b      	ldr	r3, [r7, #4]
 804d4d6:	2202      	movs	r2, #2
 804d4d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 804d4dc:	687b      	ldr	r3, [r7, #4]
 804d4de:	681b      	ldr	r3, [r3, #0]
 804d4e0:	685b      	ldr	r3, [r3, #4]
 804d4e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 804d4e4:	687b      	ldr	r3, [r7, #4]
 804d4e6:	681b      	ldr	r3, [r3, #0]
 804d4e8:	689b      	ldr	r3, [r3, #8]
 804d4ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 804d4ec:	687b      	ldr	r3, [r7, #4]
 804d4ee:	681b      	ldr	r3, [r3, #0]
 804d4f0:	4a2e      	ldr	r2, [pc, #184]	; (804d5ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 804d4f2:	4293      	cmp	r3, r2
 804d4f4:	d004      	beq.n	804d500 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 804d4f6:	687b      	ldr	r3, [r7, #4]
 804d4f8:	681b      	ldr	r3, [r3, #0]
 804d4fa:	4a2d      	ldr	r2, [pc, #180]	; (804d5b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 804d4fc:	4293      	cmp	r3, r2
 804d4fe:	d108      	bne.n	804d512 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 804d500:	68fb      	ldr	r3, [r7, #12]
 804d502:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 804d506:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 804d508:	683b      	ldr	r3, [r7, #0]
 804d50a:	685b      	ldr	r3, [r3, #4]
 804d50c:	68fa      	ldr	r2, [r7, #12]
 804d50e:	4313      	orrs	r3, r2
 804d510:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 804d512:	68fb      	ldr	r3, [r7, #12]
 804d514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804d518:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 804d51a:	683b      	ldr	r3, [r7, #0]
 804d51c:	681b      	ldr	r3, [r3, #0]
 804d51e:	68fa      	ldr	r2, [r7, #12]
 804d520:	4313      	orrs	r3, r2
 804d522:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 804d524:	687b      	ldr	r3, [r7, #4]
 804d526:	681b      	ldr	r3, [r3, #0]
 804d528:	68fa      	ldr	r2, [r7, #12]
 804d52a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 804d52c:	687b      	ldr	r3, [r7, #4]
 804d52e:	681b      	ldr	r3, [r3, #0]
 804d530:	4a1e      	ldr	r2, [pc, #120]	; (804d5ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 804d532:	4293      	cmp	r3, r2
 804d534:	d01d      	beq.n	804d572 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 804d536:	687b      	ldr	r3, [r7, #4]
 804d538:	681b      	ldr	r3, [r3, #0]
 804d53a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804d53e:	d018      	beq.n	804d572 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 804d540:	687b      	ldr	r3, [r7, #4]
 804d542:	681b      	ldr	r3, [r3, #0]
 804d544:	4a1b      	ldr	r2, [pc, #108]	; (804d5b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 804d546:	4293      	cmp	r3, r2
 804d548:	d013      	beq.n	804d572 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 804d54a:	687b      	ldr	r3, [r7, #4]
 804d54c:	681b      	ldr	r3, [r3, #0]
 804d54e:	4a1a      	ldr	r2, [pc, #104]	; (804d5b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 804d550:	4293      	cmp	r3, r2
 804d552:	d00e      	beq.n	804d572 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 804d554:	687b      	ldr	r3, [r7, #4]
 804d556:	681b      	ldr	r3, [r3, #0]
 804d558:	4a18      	ldr	r2, [pc, #96]	; (804d5bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 804d55a:	4293      	cmp	r3, r2
 804d55c:	d009      	beq.n	804d572 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 804d55e:	687b      	ldr	r3, [r7, #4]
 804d560:	681b      	ldr	r3, [r3, #0]
 804d562:	4a13      	ldr	r2, [pc, #76]	; (804d5b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 804d564:	4293      	cmp	r3, r2
 804d566:	d004      	beq.n	804d572 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 804d568:	687b      	ldr	r3, [r7, #4]
 804d56a:	681b      	ldr	r3, [r3, #0]
 804d56c:	4a14      	ldr	r2, [pc, #80]	; (804d5c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 804d56e:	4293      	cmp	r3, r2
 804d570:	d10c      	bne.n	804d58c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 804d572:	68bb      	ldr	r3, [r7, #8]
 804d574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804d578:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 804d57a:	683b      	ldr	r3, [r7, #0]
 804d57c:	689b      	ldr	r3, [r3, #8]
 804d57e:	68ba      	ldr	r2, [r7, #8]
 804d580:	4313      	orrs	r3, r2
 804d582:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 804d584:	687b      	ldr	r3, [r7, #4]
 804d586:	681b      	ldr	r3, [r3, #0]
 804d588:	68ba      	ldr	r2, [r7, #8]
 804d58a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 804d58c:	687b      	ldr	r3, [r7, #4]
 804d58e:	2201      	movs	r2, #1
 804d590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 804d594:	687b      	ldr	r3, [r7, #4]
 804d596:	2200      	movs	r2, #0
 804d598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 804d59c:	2300      	movs	r3, #0
}
 804d59e:	4618      	mov	r0, r3
 804d5a0:	3714      	adds	r7, #20
 804d5a2:	46bd      	mov	sp, r7
 804d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d5a8:	4770      	bx	lr
 804d5aa:	bf00      	nop
 804d5ac:	40012c00 	.word	0x40012c00
 804d5b0:	40013400 	.word	0x40013400
 804d5b4:	40000400 	.word	0x40000400
 804d5b8:	40000800 	.word	0x40000800
 804d5bc:	40000c00 	.word	0x40000c00
 804d5c0:	40014000 	.word	0x40014000

0804d5c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 804d5c4:	b480      	push	{r7}
 804d5c6:	b083      	sub	sp, #12
 804d5c8:	af00      	add	r7, sp, #0
 804d5ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 804d5cc:	bf00      	nop
 804d5ce:	370c      	adds	r7, #12
 804d5d0:	46bd      	mov	sp, r7
 804d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d5d6:	4770      	bx	lr

0804d5d8 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 804d5d8:	b480      	push	{r7}
 804d5da:	b083      	sub	sp, #12
 804d5dc:	af00      	add	r7, sp, #0
 804d5de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 804d5e0:	bf00      	nop
 804d5e2:	370c      	adds	r7, #12
 804d5e4:	46bd      	mov	sp, r7
 804d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d5ea:	4770      	bx	lr

0804d5ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 804d5ec:	b480      	push	{r7}
 804d5ee:	b083      	sub	sp, #12
 804d5f0:	af00      	add	r7, sp, #0
 804d5f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 804d5f4:	bf00      	nop
 804d5f6:	370c      	adds	r7, #12
 804d5f8:	46bd      	mov	sp, r7
 804d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d5fe:	4770      	bx	lr

0804d600 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 804d600:	b480      	push	{r7}
 804d602:	b083      	sub	sp, #12
 804d604:	af00      	add	r7, sp, #0
 804d606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 804d608:	bf00      	nop
 804d60a:	370c      	adds	r7, #12
 804d60c:	46bd      	mov	sp, r7
 804d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d612:	4770      	bx	lr

0804d614 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 804d614:	b580      	push	{r7, lr}
 804d616:	b082      	sub	sp, #8
 804d618:	af00      	add	r7, sp, #0
 804d61a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 804d61c:	687b      	ldr	r3, [r7, #4]
 804d61e:	2b00      	cmp	r3, #0
 804d620:	d101      	bne.n	804d626 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 804d622:	2301      	movs	r3, #1
 804d624:	e042      	b.n	804d6ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 804d626:	687b      	ldr	r3, [r7, #4]
 804d628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804d62c:	2b00      	cmp	r3, #0
 804d62e:	d106      	bne.n	804d63e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 804d630:	687b      	ldr	r3, [r7, #4]
 804d632:	2200      	movs	r2, #0
 804d634:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804d638:	6878      	ldr	r0, [r7, #4]
 804d63a:	f7f5 ffa7 	bl	804358c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 804d63e:	687b      	ldr	r3, [r7, #4]
 804d640:	2224      	movs	r2, #36	; 0x24
 804d642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 804d646:	687b      	ldr	r3, [r7, #4]
 804d648:	681b      	ldr	r3, [r3, #0]
 804d64a:	681a      	ldr	r2, [r3, #0]
 804d64c:	687b      	ldr	r3, [r7, #4]
 804d64e:	681b      	ldr	r3, [r3, #0]
 804d650:	f022 0201 	bic.w	r2, r2, #1
 804d654:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 804d656:	6878      	ldr	r0, [r7, #4]
 804d658:	f000 fa80 	bl	804db5c <UART_SetConfig>
 804d65c:	4603      	mov	r3, r0
 804d65e:	2b01      	cmp	r3, #1
 804d660:	d101      	bne.n	804d666 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 804d662:	2301      	movs	r3, #1
 804d664:	e022      	b.n	804d6ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 804d666:	687b      	ldr	r3, [r7, #4]
 804d668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804d66a:	2b00      	cmp	r3, #0
 804d66c:	d002      	beq.n	804d674 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 804d66e:	6878      	ldr	r0, [r7, #4]
 804d670:	f000 fd48 	bl	804e104 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 804d674:	687b      	ldr	r3, [r7, #4]
 804d676:	681b      	ldr	r3, [r3, #0]
 804d678:	685a      	ldr	r2, [r3, #4]
 804d67a:	687b      	ldr	r3, [r7, #4]
 804d67c:	681b      	ldr	r3, [r3, #0]
 804d67e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 804d682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 804d684:	687b      	ldr	r3, [r7, #4]
 804d686:	681b      	ldr	r3, [r3, #0]
 804d688:	689a      	ldr	r2, [r3, #8]
 804d68a:	687b      	ldr	r3, [r7, #4]
 804d68c:	681b      	ldr	r3, [r3, #0]
 804d68e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804d692:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 804d694:	687b      	ldr	r3, [r7, #4]
 804d696:	681b      	ldr	r3, [r3, #0]
 804d698:	681a      	ldr	r2, [r3, #0]
 804d69a:	687b      	ldr	r3, [r7, #4]
 804d69c:	681b      	ldr	r3, [r3, #0]
 804d69e:	f042 0201 	orr.w	r2, r2, #1
 804d6a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 804d6a4:	6878      	ldr	r0, [r7, #4]
 804d6a6:	f000 fdcf 	bl	804e248 <UART_CheckIdleState>
 804d6aa:	4603      	mov	r3, r0
}
 804d6ac:	4618      	mov	r0, r3
 804d6ae:	3708      	adds	r7, #8
 804d6b0:	46bd      	mov	sp, r7
 804d6b2:	bd80      	pop	{r7, pc}

0804d6b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 804d6b4:	b580      	push	{r7, lr}
 804d6b6:	b088      	sub	sp, #32
 804d6b8:	af00      	add	r7, sp, #0
 804d6ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 804d6bc:	687b      	ldr	r3, [r7, #4]
 804d6be:	681b      	ldr	r3, [r3, #0]
 804d6c0:	69db      	ldr	r3, [r3, #28]
 804d6c2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 804d6c4:	687b      	ldr	r3, [r7, #4]
 804d6c6:	681b      	ldr	r3, [r3, #0]
 804d6c8:	681b      	ldr	r3, [r3, #0]
 804d6ca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 804d6cc:	687b      	ldr	r3, [r7, #4]
 804d6ce:	681b      	ldr	r3, [r3, #0]
 804d6d0:	689b      	ldr	r3, [r3, #8]
 804d6d2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 804d6d4:	69fa      	ldr	r2, [r7, #28]
 804d6d6:	f640 030f 	movw	r3, #2063	; 0x80f
 804d6da:	4013      	ands	r3, r2
 804d6dc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 804d6de:	693b      	ldr	r3, [r7, #16]
 804d6e0:	2b00      	cmp	r3, #0
 804d6e2:	d118      	bne.n	804d716 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 804d6e4:	69fb      	ldr	r3, [r7, #28]
 804d6e6:	f003 0320 	and.w	r3, r3, #32
 804d6ea:	2b00      	cmp	r3, #0
 804d6ec:	d013      	beq.n	804d716 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 804d6ee:	69bb      	ldr	r3, [r7, #24]
 804d6f0:	f003 0320 	and.w	r3, r3, #32
 804d6f4:	2b00      	cmp	r3, #0
 804d6f6:	d104      	bne.n	804d702 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 804d6f8:	697b      	ldr	r3, [r7, #20]
 804d6fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804d6fe:	2b00      	cmp	r3, #0
 804d700:	d009      	beq.n	804d716 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 804d702:	687b      	ldr	r3, [r7, #4]
 804d704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804d706:	2b00      	cmp	r3, #0
 804d708:	f000 81fb 	beq.w	804db02 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 804d70c:	687b      	ldr	r3, [r7, #4]
 804d70e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804d710:	6878      	ldr	r0, [r7, #4]
 804d712:	4798      	blx	r3
      }
      return;
 804d714:	e1f5      	b.n	804db02 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 804d716:	693b      	ldr	r3, [r7, #16]
 804d718:	2b00      	cmp	r3, #0
 804d71a:	f000 80ef 	beq.w	804d8fc <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 804d71e:	697a      	ldr	r2, [r7, #20]
 804d720:	4b73      	ldr	r3, [pc, #460]	; (804d8f0 <HAL_UART_IRQHandler+0x23c>)
 804d722:	4013      	ands	r3, r2
 804d724:	2b00      	cmp	r3, #0
 804d726:	d105      	bne.n	804d734 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 804d728:	69ba      	ldr	r2, [r7, #24]
 804d72a:	4b72      	ldr	r3, [pc, #456]	; (804d8f4 <HAL_UART_IRQHandler+0x240>)
 804d72c:	4013      	ands	r3, r2
 804d72e:	2b00      	cmp	r3, #0
 804d730:	f000 80e4 	beq.w	804d8fc <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 804d734:	69fb      	ldr	r3, [r7, #28]
 804d736:	f003 0301 	and.w	r3, r3, #1
 804d73a:	2b00      	cmp	r3, #0
 804d73c:	d010      	beq.n	804d760 <HAL_UART_IRQHandler+0xac>
 804d73e:	69bb      	ldr	r3, [r7, #24]
 804d740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804d744:	2b00      	cmp	r3, #0
 804d746:	d00b      	beq.n	804d760 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 804d748:	687b      	ldr	r3, [r7, #4]
 804d74a:	681b      	ldr	r3, [r3, #0]
 804d74c:	2201      	movs	r2, #1
 804d74e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 804d750:	687b      	ldr	r3, [r7, #4]
 804d752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804d756:	f043 0201 	orr.w	r2, r3, #1
 804d75a:	687b      	ldr	r3, [r7, #4]
 804d75c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 804d760:	69fb      	ldr	r3, [r7, #28]
 804d762:	f003 0302 	and.w	r3, r3, #2
 804d766:	2b00      	cmp	r3, #0
 804d768:	d010      	beq.n	804d78c <HAL_UART_IRQHandler+0xd8>
 804d76a:	697b      	ldr	r3, [r7, #20]
 804d76c:	f003 0301 	and.w	r3, r3, #1
 804d770:	2b00      	cmp	r3, #0
 804d772:	d00b      	beq.n	804d78c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 804d774:	687b      	ldr	r3, [r7, #4]
 804d776:	681b      	ldr	r3, [r3, #0]
 804d778:	2202      	movs	r2, #2
 804d77a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 804d77c:	687b      	ldr	r3, [r7, #4]
 804d77e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804d782:	f043 0204 	orr.w	r2, r3, #4
 804d786:	687b      	ldr	r3, [r7, #4]
 804d788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 804d78c:	69fb      	ldr	r3, [r7, #28]
 804d78e:	f003 0304 	and.w	r3, r3, #4
 804d792:	2b00      	cmp	r3, #0
 804d794:	d010      	beq.n	804d7b8 <HAL_UART_IRQHandler+0x104>
 804d796:	697b      	ldr	r3, [r7, #20]
 804d798:	f003 0301 	and.w	r3, r3, #1
 804d79c:	2b00      	cmp	r3, #0
 804d79e:	d00b      	beq.n	804d7b8 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 804d7a0:	687b      	ldr	r3, [r7, #4]
 804d7a2:	681b      	ldr	r3, [r3, #0]
 804d7a4:	2204      	movs	r2, #4
 804d7a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 804d7a8:	687b      	ldr	r3, [r7, #4]
 804d7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804d7ae:	f043 0202 	orr.w	r2, r3, #2
 804d7b2:	687b      	ldr	r3, [r7, #4]
 804d7b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 804d7b8:	69fb      	ldr	r3, [r7, #28]
 804d7ba:	f003 0308 	and.w	r3, r3, #8
 804d7be:	2b00      	cmp	r3, #0
 804d7c0:	d015      	beq.n	804d7ee <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 804d7c2:	69bb      	ldr	r3, [r7, #24]
 804d7c4:	f003 0320 	and.w	r3, r3, #32
 804d7c8:	2b00      	cmp	r3, #0
 804d7ca:	d104      	bne.n	804d7d6 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 804d7cc:	697a      	ldr	r2, [r7, #20]
 804d7ce:	4b48      	ldr	r3, [pc, #288]	; (804d8f0 <HAL_UART_IRQHandler+0x23c>)
 804d7d0:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 804d7d2:	2b00      	cmp	r3, #0
 804d7d4:	d00b      	beq.n	804d7ee <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 804d7d6:	687b      	ldr	r3, [r7, #4]
 804d7d8:	681b      	ldr	r3, [r3, #0]
 804d7da:	2208      	movs	r2, #8
 804d7dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 804d7de:	687b      	ldr	r3, [r7, #4]
 804d7e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804d7e4:	f043 0208 	orr.w	r2, r3, #8
 804d7e8:	687b      	ldr	r3, [r7, #4]
 804d7ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 804d7ee:	69fb      	ldr	r3, [r7, #28]
 804d7f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804d7f4:	2b00      	cmp	r3, #0
 804d7f6:	d011      	beq.n	804d81c <HAL_UART_IRQHandler+0x168>
 804d7f8:	69bb      	ldr	r3, [r7, #24]
 804d7fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 804d7fe:	2b00      	cmp	r3, #0
 804d800:	d00c      	beq.n	804d81c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 804d802:	687b      	ldr	r3, [r7, #4]
 804d804:	681b      	ldr	r3, [r3, #0]
 804d806:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804d80a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 804d80c:	687b      	ldr	r3, [r7, #4]
 804d80e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804d812:	f043 0220 	orr.w	r2, r3, #32
 804d816:	687b      	ldr	r3, [r7, #4]
 804d818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 804d81c:	687b      	ldr	r3, [r7, #4]
 804d81e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804d822:	2b00      	cmp	r3, #0
 804d824:	f000 816f 	beq.w	804db06 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 804d828:	69fb      	ldr	r3, [r7, #28]
 804d82a:	f003 0320 	and.w	r3, r3, #32
 804d82e:	2b00      	cmp	r3, #0
 804d830:	d011      	beq.n	804d856 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 804d832:	69bb      	ldr	r3, [r7, #24]
 804d834:	f003 0320 	and.w	r3, r3, #32
 804d838:	2b00      	cmp	r3, #0
 804d83a:	d104      	bne.n	804d846 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 804d83c:	697b      	ldr	r3, [r7, #20]
 804d83e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804d842:	2b00      	cmp	r3, #0
 804d844:	d007      	beq.n	804d856 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 804d846:	687b      	ldr	r3, [r7, #4]
 804d848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804d84a:	2b00      	cmp	r3, #0
 804d84c:	d003      	beq.n	804d856 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 804d84e:	687b      	ldr	r3, [r7, #4]
 804d850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804d852:	6878      	ldr	r0, [r7, #4]
 804d854:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 804d856:	687b      	ldr	r3, [r7, #4]
 804d858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804d85c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 804d85e:	687b      	ldr	r3, [r7, #4]
 804d860:	681b      	ldr	r3, [r3, #0]
 804d862:	689b      	ldr	r3, [r3, #8]
 804d864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804d868:	2b40      	cmp	r3, #64	; 0x40
 804d86a:	d004      	beq.n	804d876 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 804d86c:	68fb      	ldr	r3, [r7, #12]
 804d86e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 804d872:	2b00      	cmp	r3, #0
 804d874:	d031      	beq.n	804d8da <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 804d876:	6878      	ldr	r0, [r7, #4]
 804d878:	f000 fdb1 	bl	804e3de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804d87c:	687b      	ldr	r3, [r7, #4]
 804d87e:	681b      	ldr	r3, [r3, #0]
 804d880:	689b      	ldr	r3, [r3, #8]
 804d882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804d886:	2b40      	cmp	r3, #64	; 0x40
 804d888:	d123      	bne.n	804d8d2 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804d88a:	687b      	ldr	r3, [r7, #4]
 804d88c:	681b      	ldr	r3, [r3, #0]
 804d88e:	689a      	ldr	r2, [r3, #8]
 804d890:	687b      	ldr	r3, [r7, #4]
 804d892:	681b      	ldr	r3, [r3, #0]
 804d894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804d898:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 804d89a:	687b      	ldr	r3, [r7, #4]
 804d89c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804d89e:	2b00      	cmp	r3, #0
 804d8a0:	d013      	beq.n	804d8ca <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 804d8a2:	687b      	ldr	r3, [r7, #4]
 804d8a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804d8a6:	4a14      	ldr	r2, [pc, #80]	; (804d8f8 <HAL_UART_IRQHandler+0x244>)
 804d8a8:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 804d8aa:	687b      	ldr	r3, [r7, #4]
 804d8ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804d8ae:	4618      	mov	r0, r3
 804d8b0:	f7fa fe9c 	bl	80485ec <HAL_DMA_Abort_IT>
 804d8b4:	4603      	mov	r3, r0
 804d8b6:	2b00      	cmp	r3, #0
 804d8b8:	d017      	beq.n	804d8ea <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 804d8ba:	687b      	ldr	r3, [r7, #4]
 804d8bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804d8be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804d8c0:	687a      	ldr	r2, [r7, #4]
 804d8c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 804d8c4:	4610      	mov	r0, r2
 804d8c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804d8c8:	e00f      	b.n	804d8ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 804d8ca:	6878      	ldr	r0, [r7, #4]
 804d8cc:	f000 f930 	bl	804db30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804d8d0:	e00b      	b.n	804d8ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 804d8d2:	6878      	ldr	r0, [r7, #4]
 804d8d4:	f000 f92c 	bl	804db30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804d8d8:	e007      	b.n	804d8ea <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 804d8da:	6878      	ldr	r0, [r7, #4]
 804d8dc:	f000 f928 	bl	804db30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 804d8e0:	687b      	ldr	r3, [r7, #4]
 804d8e2:	2200      	movs	r2, #0
 804d8e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 804d8e8:	e10d      	b.n	804db06 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804d8ea:	bf00      	nop
    return;
 804d8ec:	e10b      	b.n	804db06 <HAL_UART_IRQHandler+0x452>
 804d8ee:	bf00      	nop
 804d8f0:	10000001 	.word	0x10000001
 804d8f4:	04000120 	.word	0x04000120
 804d8f8:	0804e443 	.word	0x0804e443

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804d8fc:	687b      	ldr	r3, [r7, #4]
 804d8fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804d900:	2b01      	cmp	r3, #1
 804d902:	f040 80ab 	bne.w	804da5c <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 804d906:	69fb      	ldr	r3, [r7, #28]
 804d908:	f003 0310 	and.w	r3, r3, #16
 804d90c:	2b00      	cmp	r3, #0
 804d90e:	f000 80a5 	beq.w	804da5c <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 804d912:	69bb      	ldr	r3, [r7, #24]
 804d914:	f003 0310 	and.w	r3, r3, #16
 804d918:	2b00      	cmp	r3, #0
 804d91a:	f000 809f 	beq.w	804da5c <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 804d91e:	687b      	ldr	r3, [r7, #4]
 804d920:	681b      	ldr	r3, [r3, #0]
 804d922:	2210      	movs	r2, #16
 804d924:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804d926:	687b      	ldr	r3, [r7, #4]
 804d928:	681b      	ldr	r3, [r3, #0]
 804d92a:	689b      	ldr	r3, [r3, #8]
 804d92c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804d930:	2b40      	cmp	r3, #64	; 0x40
 804d932:	d155      	bne.n	804d9e0 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 804d934:	687b      	ldr	r3, [r7, #4]
 804d936:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804d938:	681b      	ldr	r3, [r3, #0]
 804d93a:	685b      	ldr	r3, [r3, #4]
 804d93c:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 804d93e:	893b      	ldrh	r3, [r7, #8]
 804d940:	2b00      	cmp	r3, #0
 804d942:	f000 80e2 	beq.w	804db0a <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 804d946:	687b      	ldr	r3, [r7, #4]
 804d948:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 804d94c:	893a      	ldrh	r2, [r7, #8]
 804d94e:	429a      	cmp	r2, r3
 804d950:	f080 80db 	bcs.w	804db0a <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 804d954:	687b      	ldr	r3, [r7, #4]
 804d956:	893a      	ldrh	r2, [r7, #8]
 804d958:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 804d95c:	687b      	ldr	r3, [r7, #4]
 804d95e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804d960:	681b      	ldr	r3, [r3, #0]
 804d962:	681b      	ldr	r3, [r3, #0]
 804d964:	f003 0320 	and.w	r3, r3, #32
 804d968:	2b00      	cmp	r3, #0
 804d96a:	d12b      	bne.n	804d9c4 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 804d96c:	687b      	ldr	r3, [r7, #4]
 804d96e:	681b      	ldr	r3, [r3, #0]
 804d970:	681a      	ldr	r2, [r3, #0]
 804d972:	687b      	ldr	r3, [r7, #4]
 804d974:	681b      	ldr	r3, [r3, #0]
 804d976:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 804d97a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804d97c:	687b      	ldr	r3, [r7, #4]
 804d97e:	681b      	ldr	r3, [r3, #0]
 804d980:	689a      	ldr	r2, [r3, #8]
 804d982:	687b      	ldr	r3, [r7, #4]
 804d984:	681b      	ldr	r3, [r3, #0]
 804d986:	f022 0201 	bic.w	r2, r2, #1
 804d98a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804d98c:	687b      	ldr	r3, [r7, #4]
 804d98e:	681b      	ldr	r3, [r3, #0]
 804d990:	689a      	ldr	r2, [r3, #8]
 804d992:	687b      	ldr	r3, [r7, #4]
 804d994:	681b      	ldr	r3, [r3, #0]
 804d996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804d99a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 804d99c:	687b      	ldr	r3, [r7, #4]
 804d99e:	2220      	movs	r2, #32
 804d9a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804d9a4:	687b      	ldr	r3, [r7, #4]
 804d9a6:	2200      	movs	r2, #0
 804d9a8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804d9aa:	687b      	ldr	r3, [r7, #4]
 804d9ac:	681b      	ldr	r3, [r3, #0]
 804d9ae:	681a      	ldr	r2, [r3, #0]
 804d9b0:	687b      	ldr	r3, [r7, #4]
 804d9b2:	681b      	ldr	r3, [r3, #0]
 804d9b4:	f022 0210 	bic.w	r2, r2, #16
 804d9b8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 804d9ba:	687b      	ldr	r3, [r7, #4]
 804d9bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804d9be:	4618      	mov	r0, r3
 804d9c0:	f7fa fdb8 	bl	8048534 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 804d9c4:	687b      	ldr	r3, [r7, #4]
 804d9c6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 804d9ca:	687b      	ldr	r3, [r7, #4]
 804d9cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804d9d0:	b29b      	uxth	r3, r3
 804d9d2:	1ad3      	subs	r3, r2, r3
 804d9d4:	b29b      	uxth	r3, r3
 804d9d6:	4619      	mov	r1, r3
 804d9d8:	6878      	ldr	r0, [r7, #4]
 804d9da:	f000 f8b3 	bl	804db44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 804d9de:	e094      	b.n	804db0a <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 804d9e0:	687b      	ldr	r3, [r7, #4]
 804d9e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 804d9e6:	687b      	ldr	r3, [r7, #4]
 804d9e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804d9ec:	b29b      	uxth	r3, r3
 804d9ee:	1ad3      	subs	r3, r2, r3
 804d9f0:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 804d9f2:	687b      	ldr	r3, [r7, #4]
 804d9f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804d9f8:	b29b      	uxth	r3, r3
 804d9fa:	2b00      	cmp	r3, #0
 804d9fc:	f000 8087 	beq.w	804db0e <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 804da00:	897b      	ldrh	r3, [r7, #10]
 804da02:	2b00      	cmp	r3, #0
 804da04:	f000 8083 	beq.w	804db0e <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 804da08:	687b      	ldr	r3, [r7, #4]
 804da0a:	681b      	ldr	r3, [r3, #0]
 804da0c:	681a      	ldr	r2, [r3, #0]
 804da0e:	687b      	ldr	r3, [r7, #4]
 804da10:	681b      	ldr	r3, [r3, #0]
 804da12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 804da16:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 804da18:	687b      	ldr	r3, [r7, #4]
 804da1a:	681b      	ldr	r3, [r3, #0]
 804da1c:	689b      	ldr	r3, [r3, #8]
 804da1e:	687a      	ldr	r2, [r7, #4]
 804da20:	6812      	ldr	r2, [r2, #0]
 804da22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804da26:	f023 0301 	bic.w	r3, r3, #1
 804da2a:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 804da2c:	687b      	ldr	r3, [r7, #4]
 804da2e:	2220      	movs	r2, #32
 804da30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804da34:	687b      	ldr	r3, [r7, #4]
 804da36:	2200      	movs	r2, #0
 804da38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 804da3a:	687b      	ldr	r3, [r7, #4]
 804da3c:	2200      	movs	r2, #0
 804da3e:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804da40:	687b      	ldr	r3, [r7, #4]
 804da42:	681b      	ldr	r3, [r3, #0]
 804da44:	681a      	ldr	r2, [r3, #0]
 804da46:	687b      	ldr	r3, [r7, #4]
 804da48:	681b      	ldr	r3, [r3, #0]
 804da4a:	f022 0210 	bic.w	r2, r2, #16
 804da4e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 804da50:	897b      	ldrh	r3, [r7, #10]
 804da52:	4619      	mov	r1, r3
 804da54:	6878      	ldr	r0, [r7, #4]
 804da56:	f000 f875 	bl	804db44 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 804da5a:	e058      	b.n	804db0e <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 804da5c:	69fb      	ldr	r3, [r7, #28]
 804da5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804da62:	2b00      	cmp	r3, #0
 804da64:	d00d      	beq.n	804da82 <HAL_UART_IRQHandler+0x3ce>
 804da66:	697b      	ldr	r3, [r7, #20]
 804da68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804da6c:	2b00      	cmp	r3, #0
 804da6e:	d008      	beq.n	804da82 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 804da70:	687b      	ldr	r3, [r7, #4]
 804da72:	681b      	ldr	r3, [r3, #0]
 804da74:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804da78:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 804da7a:	6878      	ldr	r0, [r7, #4]
 804da7c:	f000 fd11 	bl	804e4a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 804da80:	e048      	b.n	804db14 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 804da82:	69fb      	ldr	r3, [r7, #28]
 804da84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804da88:	2b00      	cmp	r3, #0
 804da8a:	d012      	beq.n	804dab2 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 804da8c:	69bb      	ldr	r3, [r7, #24]
 804da8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804da92:	2b00      	cmp	r3, #0
 804da94:	d104      	bne.n	804daa0 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 804da96:	697b      	ldr	r3, [r7, #20]
 804da98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804da9c:	2b00      	cmp	r3, #0
 804da9e:	d008      	beq.n	804dab2 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 804daa0:	687b      	ldr	r3, [r7, #4]
 804daa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804daa4:	2b00      	cmp	r3, #0
 804daa6:	d034      	beq.n	804db12 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 804daa8:	687b      	ldr	r3, [r7, #4]
 804daaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804daac:	6878      	ldr	r0, [r7, #4]
 804daae:	4798      	blx	r3
    }
    return;
 804dab0:	e02f      	b.n	804db12 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 804dab2:	69fb      	ldr	r3, [r7, #28]
 804dab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804dab8:	2b00      	cmp	r3, #0
 804daba:	d008      	beq.n	804dace <HAL_UART_IRQHandler+0x41a>
 804dabc:	69bb      	ldr	r3, [r7, #24]
 804dabe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804dac2:	2b00      	cmp	r3, #0
 804dac4:	d003      	beq.n	804dace <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 804dac6:	6878      	ldr	r0, [r7, #4]
 804dac8:	f000 fcd1 	bl	804e46e <UART_EndTransmit_IT>
    return;
 804dacc:	e022      	b.n	804db14 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 804dace:	69fb      	ldr	r3, [r7, #28]
 804dad0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804dad4:	2b00      	cmp	r3, #0
 804dad6:	d008      	beq.n	804daea <HAL_UART_IRQHandler+0x436>
 804dad8:	69bb      	ldr	r3, [r7, #24]
 804dada:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 804dade:	2b00      	cmp	r3, #0
 804dae0:	d003      	beq.n	804daea <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 804dae2:	6878      	ldr	r0, [r7, #4]
 804dae4:	f000 fcf1 	bl	804e4ca <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 804dae8:	e014      	b.n	804db14 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 804daea:	69fb      	ldr	r3, [r7, #28]
 804daec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804daf0:	2b00      	cmp	r3, #0
 804daf2:	d00f      	beq.n	804db14 <HAL_UART_IRQHandler+0x460>
 804daf4:	69bb      	ldr	r3, [r7, #24]
 804daf6:	2b00      	cmp	r3, #0
 804daf8:	da0c      	bge.n	804db14 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 804dafa:	6878      	ldr	r0, [r7, #4]
 804dafc:	f000 fcdb 	bl	804e4b6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 804db00:	e008      	b.n	804db14 <HAL_UART_IRQHandler+0x460>
      return;
 804db02:	bf00      	nop
 804db04:	e006      	b.n	804db14 <HAL_UART_IRQHandler+0x460>
    return;
 804db06:	bf00      	nop
 804db08:	e004      	b.n	804db14 <HAL_UART_IRQHandler+0x460>
      return;
 804db0a:	bf00      	nop
 804db0c:	e002      	b.n	804db14 <HAL_UART_IRQHandler+0x460>
      return;
 804db0e:	bf00      	nop
 804db10:	e000      	b.n	804db14 <HAL_UART_IRQHandler+0x460>
    return;
 804db12:	bf00      	nop
  }
}
 804db14:	3720      	adds	r7, #32
 804db16:	46bd      	mov	sp, r7
 804db18:	bd80      	pop	{r7, pc}
 804db1a:	bf00      	nop

0804db1c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 804db1c:	b480      	push	{r7}
 804db1e:	b083      	sub	sp, #12
 804db20:	af00      	add	r7, sp, #0
 804db22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 804db24:	bf00      	nop
 804db26:	370c      	adds	r7, #12
 804db28:	46bd      	mov	sp, r7
 804db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804db2e:	4770      	bx	lr

0804db30 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 804db30:	b480      	push	{r7}
 804db32:	b083      	sub	sp, #12
 804db34:	af00      	add	r7, sp, #0
 804db36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 804db38:	bf00      	nop
 804db3a:	370c      	adds	r7, #12
 804db3c:	46bd      	mov	sp, r7
 804db3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804db42:	4770      	bx	lr

0804db44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 804db44:	b480      	push	{r7}
 804db46:	b083      	sub	sp, #12
 804db48:	af00      	add	r7, sp, #0
 804db4a:	6078      	str	r0, [r7, #4]
 804db4c:	460b      	mov	r3, r1
 804db4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 804db50:	bf00      	nop
 804db52:	370c      	adds	r7, #12
 804db54:	46bd      	mov	sp, r7
 804db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 804db5a:	4770      	bx	lr

0804db5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 804db5c:	b5b0      	push	{r4, r5, r7, lr}
 804db5e:	b088      	sub	sp, #32
 804db60:	af00      	add	r7, sp, #0
 804db62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 804db64:	2300      	movs	r3, #0
 804db66:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 804db68:	687b      	ldr	r3, [r7, #4]
 804db6a:	689a      	ldr	r2, [r3, #8]
 804db6c:	687b      	ldr	r3, [r7, #4]
 804db6e:	691b      	ldr	r3, [r3, #16]
 804db70:	431a      	orrs	r2, r3
 804db72:	687b      	ldr	r3, [r7, #4]
 804db74:	695b      	ldr	r3, [r3, #20]
 804db76:	431a      	orrs	r2, r3
 804db78:	687b      	ldr	r3, [r7, #4]
 804db7a:	69db      	ldr	r3, [r3, #28]
 804db7c:	4313      	orrs	r3, r2
 804db7e:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 804db80:	687b      	ldr	r3, [r7, #4]
 804db82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804db84:	69fa      	ldr	r2, [r7, #28]
 804db86:	4313      	orrs	r3, r2
 804db88:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 804db8a:	687b      	ldr	r3, [r7, #4]
 804db8c:	681b      	ldr	r3, [r3, #0]
 804db8e:	681a      	ldr	r2, [r3, #0]
 804db90:	4bb1      	ldr	r3, [pc, #708]	; (804de58 <UART_SetConfig+0x2fc>)
 804db92:	4013      	ands	r3, r2
 804db94:	687a      	ldr	r2, [r7, #4]
 804db96:	6812      	ldr	r2, [r2, #0]
 804db98:	69f9      	ldr	r1, [r7, #28]
 804db9a:	430b      	orrs	r3, r1
 804db9c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 804db9e:	687b      	ldr	r3, [r7, #4]
 804dba0:	681b      	ldr	r3, [r3, #0]
 804dba2:	685b      	ldr	r3, [r3, #4]
 804dba4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 804dba8:	687b      	ldr	r3, [r7, #4]
 804dbaa:	68da      	ldr	r2, [r3, #12]
 804dbac:	687b      	ldr	r3, [r7, #4]
 804dbae:	681b      	ldr	r3, [r3, #0]
 804dbb0:	430a      	orrs	r2, r1
 804dbb2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 804dbb4:	687b      	ldr	r3, [r7, #4]
 804dbb6:	699b      	ldr	r3, [r3, #24]
 804dbb8:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 804dbba:	687b      	ldr	r3, [r7, #4]
 804dbbc:	681b      	ldr	r3, [r3, #0]
 804dbbe:	4aa7      	ldr	r2, [pc, #668]	; (804de5c <UART_SetConfig+0x300>)
 804dbc0:	4293      	cmp	r3, r2
 804dbc2:	d004      	beq.n	804dbce <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 804dbc4:	687b      	ldr	r3, [r7, #4]
 804dbc6:	6a1b      	ldr	r3, [r3, #32]
 804dbc8:	69fa      	ldr	r2, [r7, #28]
 804dbca:	4313      	orrs	r3, r2
 804dbcc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 804dbce:	687b      	ldr	r3, [r7, #4]
 804dbd0:	681b      	ldr	r3, [r3, #0]
 804dbd2:	689b      	ldr	r3, [r3, #8]
 804dbd4:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 804dbd8:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 804dbdc:	687a      	ldr	r2, [r7, #4]
 804dbde:	6812      	ldr	r2, [r2, #0]
 804dbe0:	69f9      	ldr	r1, [r7, #28]
 804dbe2:	430b      	orrs	r3, r1
 804dbe4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 804dbe6:	687b      	ldr	r3, [r7, #4]
 804dbe8:	681b      	ldr	r3, [r3, #0]
 804dbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804dbec:	f023 010f 	bic.w	r1, r3, #15
 804dbf0:	687b      	ldr	r3, [r7, #4]
 804dbf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804dbf4:	687b      	ldr	r3, [r7, #4]
 804dbf6:	681b      	ldr	r3, [r3, #0]
 804dbf8:	430a      	orrs	r2, r1
 804dbfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 804dbfc:	687b      	ldr	r3, [r7, #4]
 804dbfe:	681b      	ldr	r3, [r3, #0]
 804dc00:	4a97      	ldr	r2, [pc, #604]	; (804de60 <UART_SetConfig+0x304>)
 804dc02:	4293      	cmp	r3, r2
 804dc04:	d121      	bne.n	804dc4a <UART_SetConfig+0xee>
 804dc06:	4b97      	ldr	r3, [pc, #604]	; (804de64 <UART_SetConfig+0x308>)
 804dc08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804dc0c:	f003 0303 	and.w	r3, r3, #3
 804dc10:	2b03      	cmp	r3, #3
 804dc12:	d817      	bhi.n	804dc44 <UART_SetConfig+0xe8>
 804dc14:	a201      	add	r2, pc, #4	; (adr r2, 804dc1c <UART_SetConfig+0xc0>)
 804dc16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804dc1a:	bf00      	nop
 804dc1c:	0804dc2d 	.word	0x0804dc2d
 804dc20:	0804dc39 	.word	0x0804dc39
 804dc24:	0804dc33 	.word	0x0804dc33
 804dc28:	0804dc3f 	.word	0x0804dc3f
 804dc2c:	2301      	movs	r3, #1
 804dc2e:	76fb      	strb	r3, [r7, #27]
 804dc30:	e0e7      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dc32:	2302      	movs	r3, #2
 804dc34:	76fb      	strb	r3, [r7, #27]
 804dc36:	e0e4      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dc38:	2304      	movs	r3, #4
 804dc3a:	76fb      	strb	r3, [r7, #27]
 804dc3c:	e0e1      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dc3e:	2308      	movs	r3, #8
 804dc40:	76fb      	strb	r3, [r7, #27]
 804dc42:	e0de      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dc44:	2310      	movs	r3, #16
 804dc46:	76fb      	strb	r3, [r7, #27]
 804dc48:	e0db      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dc4a:	687b      	ldr	r3, [r7, #4]
 804dc4c:	681b      	ldr	r3, [r3, #0]
 804dc4e:	4a86      	ldr	r2, [pc, #536]	; (804de68 <UART_SetConfig+0x30c>)
 804dc50:	4293      	cmp	r3, r2
 804dc52:	d132      	bne.n	804dcba <UART_SetConfig+0x15e>
 804dc54:	4b83      	ldr	r3, [pc, #524]	; (804de64 <UART_SetConfig+0x308>)
 804dc56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804dc5a:	f003 030c 	and.w	r3, r3, #12
 804dc5e:	2b0c      	cmp	r3, #12
 804dc60:	d828      	bhi.n	804dcb4 <UART_SetConfig+0x158>
 804dc62:	a201      	add	r2, pc, #4	; (adr r2, 804dc68 <UART_SetConfig+0x10c>)
 804dc64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804dc68:	0804dc9d 	.word	0x0804dc9d
 804dc6c:	0804dcb5 	.word	0x0804dcb5
 804dc70:	0804dcb5 	.word	0x0804dcb5
 804dc74:	0804dcb5 	.word	0x0804dcb5
 804dc78:	0804dca9 	.word	0x0804dca9
 804dc7c:	0804dcb5 	.word	0x0804dcb5
 804dc80:	0804dcb5 	.word	0x0804dcb5
 804dc84:	0804dcb5 	.word	0x0804dcb5
 804dc88:	0804dca3 	.word	0x0804dca3
 804dc8c:	0804dcb5 	.word	0x0804dcb5
 804dc90:	0804dcb5 	.word	0x0804dcb5
 804dc94:	0804dcb5 	.word	0x0804dcb5
 804dc98:	0804dcaf 	.word	0x0804dcaf
 804dc9c:	2300      	movs	r3, #0
 804dc9e:	76fb      	strb	r3, [r7, #27]
 804dca0:	e0af      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dca2:	2302      	movs	r3, #2
 804dca4:	76fb      	strb	r3, [r7, #27]
 804dca6:	e0ac      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dca8:	2304      	movs	r3, #4
 804dcaa:	76fb      	strb	r3, [r7, #27]
 804dcac:	e0a9      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dcae:	2308      	movs	r3, #8
 804dcb0:	76fb      	strb	r3, [r7, #27]
 804dcb2:	e0a6      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dcb4:	2310      	movs	r3, #16
 804dcb6:	76fb      	strb	r3, [r7, #27]
 804dcb8:	e0a3      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dcba:	687b      	ldr	r3, [r7, #4]
 804dcbc:	681b      	ldr	r3, [r3, #0]
 804dcbe:	4a6b      	ldr	r2, [pc, #428]	; (804de6c <UART_SetConfig+0x310>)
 804dcc0:	4293      	cmp	r3, r2
 804dcc2:	d120      	bne.n	804dd06 <UART_SetConfig+0x1aa>
 804dcc4:	4b67      	ldr	r3, [pc, #412]	; (804de64 <UART_SetConfig+0x308>)
 804dcc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804dcca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 804dcce:	2b30      	cmp	r3, #48	; 0x30
 804dcd0:	d013      	beq.n	804dcfa <UART_SetConfig+0x19e>
 804dcd2:	2b30      	cmp	r3, #48	; 0x30
 804dcd4:	d814      	bhi.n	804dd00 <UART_SetConfig+0x1a4>
 804dcd6:	2b20      	cmp	r3, #32
 804dcd8:	d009      	beq.n	804dcee <UART_SetConfig+0x192>
 804dcda:	2b20      	cmp	r3, #32
 804dcdc:	d810      	bhi.n	804dd00 <UART_SetConfig+0x1a4>
 804dcde:	2b00      	cmp	r3, #0
 804dce0:	d002      	beq.n	804dce8 <UART_SetConfig+0x18c>
 804dce2:	2b10      	cmp	r3, #16
 804dce4:	d006      	beq.n	804dcf4 <UART_SetConfig+0x198>
 804dce6:	e00b      	b.n	804dd00 <UART_SetConfig+0x1a4>
 804dce8:	2300      	movs	r3, #0
 804dcea:	76fb      	strb	r3, [r7, #27]
 804dcec:	e089      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dcee:	2302      	movs	r3, #2
 804dcf0:	76fb      	strb	r3, [r7, #27]
 804dcf2:	e086      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dcf4:	2304      	movs	r3, #4
 804dcf6:	76fb      	strb	r3, [r7, #27]
 804dcf8:	e083      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dcfa:	2308      	movs	r3, #8
 804dcfc:	76fb      	strb	r3, [r7, #27]
 804dcfe:	e080      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dd00:	2310      	movs	r3, #16
 804dd02:	76fb      	strb	r3, [r7, #27]
 804dd04:	e07d      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dd06:	687b      	ldr	r3, [r7, #4]
 804dd08:	681b      	ldr	r3, [r3, #0]
 804dd0a:	4a59      	ldr	r2, [pc, #356]	; (804de70 <UART_SetConfig+0x314>)
 804dd0c:	4293      	cmp	r3, r2
 804dd0e:	d120      	bne.n	804dd52 <UART_SetConfig+0x1f6>
 804dd10:	4b54      	ldr	r3, [pc, #336]	; (804de64 <UART_SetConfig+0x308>)
 804dd12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804dd16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 804dd1a:	2bc0      	cmp	r3, #192	; 0xc0
 804dd1c:	d013      	beq.n	804dd46 <UART_SetConfig+0x1ea>
 804dd1e:	2bc0      	cmp	r3, #192	; 0xc0
 804dd20:	d814      	bhi.n	804dd4c <UART_SetConfig+0x1f0>
 804dd22:	2b80      	cmp	r3, #128	; 0x80
 804dd24:	d009      	beq.n	804dd3a <UART_SetConfig+0x1de>
 804dd26:	2b80      	cmp	r3, #128	; 0x80
 804dd28:	d810      	bhi.n	804dd4c <UART_SetConfig+0x1f0>
 804dd2a:	2b00      	cmp	r3, #0
 804dd2c:	d002      	beq.n	804dd34 <UART_SetConfig+0x1d8>
 804dd2e:	2b40      	cmp	r3, #64	; 0x40
 804dd30:	d006      	beq.n	804dd40 <UART_SetConfig+0x1e4>
 804dd32:	e00b      	b.n	804dd4c <UART_SetConfig+0x1f0>
 804dd34:	2300      	movs	r3, #0
 804dd36:	76fb      	strb	r3, [r7, #27]
 804dd38:	e063      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dd3a:	2302      	movs	r3, #2
 804dd3c:	76fb      	strb	r3, [r7, #27]
 804dd3e:	e060      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dd40:	2304      	movs	r3, #4
 804dd42:	76fb      	strb	r3, [r7, #27]
 804dd44:	e05d      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dd46:	2308      	movs	r3, #8
 804dd48:	76fb      	strb	r3, [r7, #27]
 804dd4a:	e05a      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dd4c:	2310      	movs	r3, #16
 804dd4e:	76fb      	strb	r3, [r7, #27]
 804dd50:	e057      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dd52:	687b      	ldr	r3, [r7, #4]
 804dd54:	681b      	ldr	r3, [r3, #0]
 804dd56:	4a47      	ldr	r2, [pc, #284]	; (804de74 <UART_SetConfig+0x318>)
 804dd58:	4293      	cmp	r3, r2
 804dd5a:	d125      	bne.n	804dda8 <UART_SetConfig+0x24c>
 804dd5c:	4b41      	ldr	r3, [pc, #260]	; (804de64 <UART_SetConfig+0x308>)
 804dd5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804dd62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804dd66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804dd6a:	d017      	beq.n	804dd9c <UART_SetConfig+0x240>
 804dd6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804dd70:	d817      	bhi.n	804dda2 <UART_SetConfig+0x246>
 804dd72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804dd76:	d00b      	beq.n	804dd90 <UART_SetConfig+0x234>
 804dd78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804dd7c:	d811      	bhi.n	804dda2 <UART_SetConfig+0x246>
 804dd7e:	2b00      	cmp	r3, #0
 804dd80:	d003      	beq.n	804dd8a <UART_SetConfig+0x22e>
 804dd82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804dd86:	d006      	beq.n	804dd96 <UART_SetConfig+0x23a>
 804dd88:	e00b      	b.n	804dda2 <UART_SetConfig+0x246>
 804dd8a:	2300      	movs	r3, #0
 804dd8c:	76fb      	strb	r3, [r7, #27]
 804dd8e:	e038      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dd90:	2302      	movs	r3, #2
 804dd92:	76fb      	strb	r3, [r7, #27]
 804dd94:	e035      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dd96:	2304      	movs	r3, #4
 804dd98:	76fb      	strb	r3, [r7, #27]
 804dd9a:	e032      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dd9c:	2308      	movs	r3, #8
 804dd9e:	76fb      	strb	r3, [r7, #27]
 804dda0:	e02f      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dda2:	2310      	movs	r3, #16
 804dda4:	76fb      	strb	r3, [r7, #27]
 804dda6:	e02c      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dda8:	687b      	ldr	r3, [r7, #4]
 804ddaa:	681b      	ldr	r3, [r3, #0]
 804ddac:	4a2b      	ldr	r2, [pc, #172]	; (804de5c <UART_SetConfig+0x300>)
 804ddae:	4293      	cmp	r3, r2
 804ddb0:	d125      	bne.n	804ddfe <UART_SetConfig+0x2a2>
 804ddb2:	4b2c      	ldr	r3, [pc, #176]	; (804de64 <UART_SetConfig+0x308>)
 804ddb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804ddb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 804ddbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 804ddc0:	d017      	beq.n	804ddf2 <UART_SetConfig+0x296>
 804ddc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 804ddc6:	d817      	bhi.n	804ddf8 <UART_SetConfig+0x29c>
 804ddc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804ddcc:	d00b      	beq.n	804dde6 <UART_SetConfig+0x28a>
 804ddce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804ddd2:	d811      	bhi.n	804ddf8 <UART_SetConfig+0x29c>
 804ddd4:	2b00      	cmp	r3, #0
 804ddd6:	d003      	beq.n	804dde0 <UART_SetConfig+0x284>
 804ddd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804dddc:	d006      	beq.n	804ddec <UART_SetConfig+0x290>
 804ddde:	e00b      	b.n	804ddf8 <UART_SetConfig+0x29c>
 804dde0:	2300      	movs	r3, #0
 804dde2:	76fb      	strb	r3, [r7, #27]
 804dde4:	e00d      	b.n	804de02 <UART_SetConfig+0x2a6>
 804dde6:	2302      	movs	r3, #2
 804dde8:	76fb      	strb	r3, [r7, #27]
 804ddea:	e00a      	b.n	804de02 <UART_SetConfig+0x2a6>
 804ddec:	2304      	movs	r3, #4
 804ddee:	76fb      	strb	r3, [r7, #27]
 804ddf0:	e007      	b.n	804de02 <UART_SetConfig+0x2a6>
 804ddf2:	2308      	movs	r3, #8
 804ddf4:	76fb      	strb	r3, [r7, #27]
 804ddf6:	e004      	b.n	804de02 <UART_SetConfig+0x2a6>
 804ddf8:	2310      	movs	r3, #16
 804ddfa:	76fb      	strb	r3, [r7, #27]
 804ddfc:	e001      	b.n	804de02 <UART_SetConfig+0x2a6>
 804ddfe:	2310      	movs	r3, #16
 804de00:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 804de02:	687b      	ldr	r3, [r7, #4]
 804de04:	681b      	ldr	r3, [r3, #0]
 804de06:	4a15      	ldr	r2, [pc, #84]	; (804de5c <UART_SetConfig+0x300>)
 804de08:	4293      	cmp	r3, r2
 804de0a:	f040 80a3 	bne.w	804df54 <UART_SetConfig+0x3f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 804de0e:	7efb      	ldrb	r3, [r7, #27]
 804de10:	2b08      	cmp	r3, #8
 804de12:	d83b      	bhi.n	804de8c <UART_SetConfig+0x330>
 804de14:	a201      	add	r2, pc, #4	; (adr r2, 804de1c <UART_SetConfig+0x2c0>)
 804de16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804de1a:	bf00      	nop
 804de1c:	0804de41 	.word	0x0804de41
 804de20:	0804de49 	.word	0x0804de49
 804de24:	0804de51 	.word	0x0804de51
 804de28:	0804de8d 	.word	0x0804de8d
 804de2c:	0804de7d 	.word	0x0804de7d
 804de30:	0804de8d 	.word	0x0804de8d
 804de34:	0804de8d 	.word	0x0804de8d
 804de38:	0804de8d 	.word	0x0804de8d
 804de3c:	0804de85 	.word	0x0804de85
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804de40:	f7fc fd82 	bl	804a948 <HAL_RCC_GetPCLK1Freq>
 804de44:	6178      	str	r0, [r7, #20]
        break;
 804de46:	e026      	b.n	804de96 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804de48:	f7fc fd92 	bl	804a970 <HAL_RCC_GetPCLK2Freq>
 804de4c:	6178      	str	r0, [r7, #20]
        break;
 804de4e:	e022      	b.n	804de96 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804de50:	4b09      	ldr	r3, [pc, #36]	; (804de78 <UART_SetConfig+0x31c>)
 804de52:	617b      	str	r3, [r7, #20]
        break;
 804de54:	e01f      	b.n	804de96 <UART_SetConfig+0x33a>
 804de56:	bf00      	nop
 804de58:	cfff69f3 	.word	0xcfff69f3
 804de5c:	40008000 	.word	0x40008000
 804de60:	40013800 	.word	0x40013800
 804de64:	40021000 	.word	0x40021000
 804de68:	40004400 	.word	0x40004400
 804de6c:	40004800 	.word	0x40004800
 804de70:	40004c00 	.word	0x40004c00
 804de74:	40005000 	.word	0x40005000
 804de78:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804de7c:	f7fc fcb2 	bl	804a7e4 <HAL_RCC_GetSysClockFreq>
 804de80:	6178      	str	r0, [r7, #20]
        break;
 804de82:	e008      	b.n	804de96 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804de84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804de88:	617b      	str	r3, [r7, #20]
        break;
 804de8a:	e004      	b.n	804de96 <UART_SetConfig+0x33a>
      default:
        pclk = 0U;
 804de8c:	2300      	movs	r3, #0
 804de8e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 804de90:	2301      	movs	r3, #1
 804de92:	76bb      	strb	r3, [r7, #26]
        break;
 804de94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 804de96:	697b      	ldr	r3, [r7, #20]
 804de98:	2b00      	cmp	r3, #0
 804de9a:	f000 811b 	beq.w	804e0d4 <UART_SetConfig+0x578>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 804de9e:	687b      	ldr	r3, [r7, #4]
 804dea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804dea2:	4a96      	ldr	r2, [pc, #600]	; (804e0fc <UART_SetConfig+0x5a0>)
 804dea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804dea8:	461a      	mov	r2, r3
 804deaa:	697b      	ldr	r3, [r7, #20]
 804deac:	fbb3 f3f2 	udiv	r3, r3, r2
 804deb0:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 804deb2:	687b      	ldr	r3, [r7, #4]
 804deb4:	685a      	ldr	r2, [r3, #4]
 804deb6:	4613      	mov	r3, r2
 804deb8:	005b      	lsls	r3, r3, #1
 804deba:	4413      	add	r3, r2
 804debc:	68ba      	ldr	r2, [r7, #8]
 804debe:	429a      	cmp	r2, r3
 804dec0:	d305      	bcc.n	804dece <UART_SetConfig+0x372>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 804dec2:	687b      	ldr	r3, [r7, #4]
 804dec4:	685b      	ldr	r3, [r3, #4]
 804dec6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 804dec8:	68ba      	ldr	r2, [r7, #8]
 804deca:	429a      	cmp	r2, r3
 804decc:	d902      	bls.n	804ded4 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 804dece:	2301      	movs	r3, #1
 804ded0:	76bb      	strb	r3, [r7, #26]
 804ded2:	e0ff      	b.n	804e0d4 <UART_SetConfig+0x578>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804ded4:	697b      	ldr	r3, [r7, #20]
 804ded6:	4618      	mov	r0, r3
 804ded8:	f04f 0100 	mov.w	r1, #0
 804dedc:	687b      	ldr	r3, [r7, #4]
 804dede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804dee0:	4a86      	ldr	r2, [pc, #536]	; (804e0fc <UART_SetConfig+0x5a0>)
 804dee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804dee6:	b29a      	uxth	r2, r3
 804dee8:	f04f 0300 	mov.w	r3, #0
 804deec:	f7f2 fd92 	bl	8040a14 <__aeabi_uldivmod>
 804def0:	4602      	mov	r2, r0
 804def2:	460b      	mov	r3, r1
 804def4:	4610      	mov	r0, r2
 804def6:	4619      	mov	r1, r3
 804def8:	f04f 0200 	mov.w	r2, #0
 804defc:	f04f 0300 	mov.w	r3, #0
 804df00:	020b      	lsls	r3, r1, #8
 804df02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 804df06:	0202      	lsls	r2, r0, #8
 804df08:	6879      	ldr	r1, [r7, #4]
 804df0a:	6849      	ldr	r1, [r1, #4]
 804df0c:	0849      	lsrs	r1, r1, #1
 804df0e:	4608      	mov	r0, r1
 804df10:	f04f 0100 	mov.w	r1, #0
 804df14:	1814      	adds	r4, r2, r0
 804df16:	eb43 0501 	adc.w	r5, r3, r1
 804df1a:	687b      	ldr	r3, [r7, #4]
 804df1c:	685b      	ldr	r3, [r3, #4]
 804df1e:	461a      	mov	r2, r3
 804df20:	f04f 0300 	mov.w	r3, #0
 804df24:	4620      	mov	r0, r4
 804df26:	4629      	mov	r1, r5
 804df28:	f7f2 fd74 	bl	8040a14 <__aeabi_uldivmod>
 804df2c:	4602      	mov	r2, r0
 804df2e:	460b      	mov	r3, r1
 804df30:	4613      	mov	r3, r2
 804df32:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 804df34:	693b      	ldr	r3, [r7, #16]
 804df36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804df3a:	d308      	bcc.n	804df4e <UART_SetConfig+0x3f2>
 804df3c:	693b      	ldr	r3, [r7, #16]
 804df3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804df42:	d204      	bcs.n	804df4e <UART_SetConfig+0x3f2>
        {
          huart->Instance->BRR = usartdiv;
 804df44:	687b      	ldr	r3, [r7, #4]
 804df46:	681b      	ldr	r3, [r3, #0]
 804df48:	693a      	ldr	r2, [r7, #16]
 804df4a:	60da      	str	r2, [r3, #12]
 804df4c:	e0c2      	b.n	804e0d4 <UART_SetConfig+0x578>
        }
        else
        {
          ret = HAL_ERROR;
 804df4e:	2301      	movs	r3, #1
 804df50:	76bb      	strb	r3, [r7, #26]
 804df52:	e0bf      	b.n	804e0d4 <UART_SetConfig+0x578>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804df54:	687b      	ldr	r3, [r7, #4]
 804df56:	69db      	ldr	r3, [r3, #28]
 804df58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804df5c:	d165      	bne.n	804e02a <UART_SetConfig+0x4ce>
  {
    switch (clocksource)
 804df5e:	7efb      	ldrb	r3, [r7, #27]
 804df60:	2b08      	cmp	r3, #8
 804df62:	d828      	bhi.n	804dfb6 <UART_SetConfig+0x45a>
 804df64:	a201      	add	r2, pc, #4	; (adr r2, 804df6c <UART_SetConfig+0x410>)
 804df66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804df6a:	bf00      	nop
 804df6c:	0804df91 	.word	0x0804df91
 804df70:	0804df99 	.word	0x0804df99
 804df74:	0804dfa1 	.word	0x0804dfa1
 804df78:	0804dfb7 	.word	0x0804dfb7
 804df7c:	0804dfa7 	.word	0x0804dfa7
 804df80:	0804dfb7 	.word	0x0804dfb7
 804df84:	0804dfb7 	.word	0x0804dfb7
 804df88:	0804dfb7 	.word	0x0804dfb7
 804df8c:	0804dfaf 	.word	0x0804dfaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804df90:	f7fc fcda 	bl	804a948 <HAL_RCC_GetPCLK1Freq>
 804df94:	6178      	str	r0, [r7, #20]
        break;
 804df96:	e013      	b.n	804dfc0 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804df98:	f7fc fcea 	bl	804a970 <HAL_RCC_GetPCLK2Freq>
 804df9c:	6178      	str	r0, [r7, #20]
        break;
 804df9e:	e00f      	b.n	804dfc0 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804dfa0:	4b57      	ldr	r3, [pc, #348]	; (804e100 <UART_SetConfig+0x5a4>)
 804dfa2:	617b      	str	r3, [r7, #20]
        break;
 804dfa4:	e00c      	b.n	804dfc0 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804dfa6:	f7fc fc1d 	bl	804a7e4 <HAL_RCC_GetSysClockFreq>
 804dfaa:	6178      	str	r0, [r7, #20]
        break;
 804dfac:	e008      	b.n	804dfc0 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804dfae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804dfb2:	617b      	str	r3, [r7, #20]
        break;
 804dfb4:	e004      	b.n	804dfc0 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 804dfb6:	2300      	movs	r3, #0
 804dfb8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 804dfba:	2301      	movs	r3, #1
 804dfbc:	76bb      	strb	r3, [r7, #26]
        break;
 804dfbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 804dfc0:	697b      	ldr	r3, [r7, #20]
 804dfc2:	2b00      	cmp	r3, #0
 804dfc4:	f000 8086 	beq.w	804e0d4 <UART_SetConfig+0x578>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804dfc8:	687b      	ldr	r3, [r7, #4]
 804dfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804dfcc:	4a4b      	ldr	r2, [pc, #300]	; (804e0fc <UART_SetConfig+0x5a0>)
 804dfce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804dfd2:	461a      	mov	r2, r3
 804dfd4:	697b      	ldr	r3, [r7, #20]
 804dfd6:	fbb3 f3f2 	udiv	r3, r3, r2
 804dfda:	005a      	lsls	r2, r3, #1
 804dfdc:	687b      	ldr	r3, [r7, #4]
 804dfde:	685b      	ldr	r3, [r3, #4]
 804dfe0:	085b      	lsrs	r3, r3, #1
 804dfe2:	441a      	add	r2, r3
 804dfe4:	687b      	ldr	r3, [r7, #4]
 804dfe6:	685b      	ldr	r3, [r3, #4]
 804dfe8:	fbb2 f3f3 	udiv	r3, r2, r3
 804dfec:	b29b      	uxth	r3, r3
 804dfee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804dff0:	693b      	ldr	r3, [r7, #16]
 804dff2:	2b0f      	cmp	r3, #15
 804dff4:	d916      	bls.n	804e024 <UART_SetConfig+0x4c8>
 804dff6:	693b      	ldr	r3, [r7, #16]
 804dff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804dffc:	d212      	bcs.n	804e024 <UART_SetConfig+0x4c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 804dffe:	693b      	ldr	r3, [r7, #16]
 804e000:	b29b      	uxth	r3, r3
 804e002:	f023 030f 	bic.w	r3, r3, #15
 804e006:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 804e008:	693b      	ldr	r3, [r7, #16]
 804e00a:	085b      	lsrs	r3, r3, #1
 804e00c:	b29b      	uxth	r3, r3
 804e00e:	f003 0307 	and.w	r3, r3, #7
 804e012:	b29a      	uxth	r2, r3
 804e014:	89fb      	ldrh	r3, [r7, #14]
 804e016:	4313      	orrs	r3, r2
 804e018:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 804e01a:	687b      	ldr	r3, [r7, #4]
 804e01c:	681b      	ldr	r3, [r3, #0]
 804e01e:	89fa      	ldrh	r2, [r7, #14]
 804e020:	60da      	str	r2, [r3, #12]
 804e022:	e057      	b.n	804e0d4 <UART_SetConfig+0x578>
      }
      else
      {
        ret = HAL_ERROR;
 804e024:	2301      	movs	r3, #1
 804e026:	76bb      	strb	r3, [r7, #26]
 804e028:	e054      	b.n	804e0d4 <UART_SetConfig+0x578>
      }
    }
  }
  else
  {
    switch (clocksource)
 804e02a:	7efb      	ldrb	r3, [r7, #27]
 804e02c:	2b08      	cmp	r3, #8
 804e02e:	d828      	bhi.n	804e082 <UART_SetConfig+0x526>
 804e030:	a201      	add	r2, pc, #4	; (adr r2, 804e038 <UART_SetConfig+0x4dc>)
 804e032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804e036:	bf00      	nop
 804e038:	0804e05d 	.word	0x0804e05d
 804e03c:	0804e065 	.word	0x0804e065
 804e040:	0804e06d 	.word	0x0804e06d
 804e044:	0804e083 	.word	0x0804e083
 804e048:	0804e073 	.word	0x0804e073
 804e04c:	0804e083 	.word	0x0804e083
 804e050:	0804e083 	.word	0x0804e083
 804e054:	0804e083 	.word	0x0804e083
 804e058:	0804e07b 	.word	0x0804e07b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804e05c:	f7fc fc74 	bl	804a948 <HAL_RCC_GetPCLK1Freq>
 804e060:	6178      	str	r0, [r7, #20]
        break;
 804e062:	e013      	b.n	804e08c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804e064:	f7fc fc84 	bl	804a970 <HAL_RCC_GetPCLK2Freq>
 804e068:	6178      	str	r0, [r7, #20]
        break;
 804e06a:	e00f      	b.n	804e08c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804e06c:	4b24      	ldr	r3, [pc, #144]	; (804e100 <UART_SetConfig+0x5a4>)
 804e06e:	617b      	str	r3, [r7, #20]
        break;
 804e070:	e00c      	b.n	804e08c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804e072:	f7fc fbb7 	bl	804a7e4 <HAL_RCC_GetSysClockFreq>
 804e076:	6178      	str	r0, [r7, #20]
        break;
 804e078:	e008      	b.n	804e08c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804e07a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804e07e:	617b      	str	r3, [r7, #20]
        break;
 804e080:	e004      	b.n	804e08c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 804e082:	2300      	movs	r3, #0
 804e084:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 804e086:	2301      	movs	r3, #1
 804e088:	76bb      	strb	r3, [r7, #26]
        break;
 804e08a:	bf00      	nop
    }

    if (pclk != 0U)
 804e08c:	697b      	ldr	r3, [r7, #20]
 804e08e:	2b00      	cmp	r3, #0
 804e090:	d020      	beq.n	804e0d4 <UART_SetConfig+0x578>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804e092:	687b      	ldr	r3, [r7, #4]
 804e094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804e096:	4a19      	ldr	r2, [pc, #100]	; (804e0fc <UART_SetConfig+0x5a0>)
 804e098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804e09c:	461a      	mov	r2, r3
 804e09e:	697b      	ldr	r3, [r7, #20]
 804e0a0:	fbb3 f2f2 	udiv	r2, r3, r2
 804e0a4:	687b      	ldr	r3, [r7, #4]
 804e0a6:	685b      	ldr	r3, [r3, #4]
 804e0a8:	085b      	lsrs	r3, r3, #1
 804e0aa:	441a      	add	r2, r3
 804e0ac:	687b      	ldr	r3, [r7, #4]
 804e0ae:	685b      	ldr	r3, [r3, #4]
 804e0b0:	fbb2 f3f3 	udiv	r3, r2, r3
 804e0b4:	b29b      	uxth	r3, r3
 804e0b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804e0b8:	693b      	ldr	r3, [r7, #16]
 804e0ba:	2b0f      	cmp	r3, #15
 804e0bc:	d908      	bls.n	804e0d0 <UART_SetConfig+0x574>
 804e0be:	693b      	ldr	r3, [r7, #16]
 804e0c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804e0c4:	d204      	bcs.n	804e0d0 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 804e0c6:	687b      	ldr	r3, [r7, #4]
 804e0c8:	681b      	ldr	r3, [r3, #0]
 804e0ca:	693a      	ldr	r2, [r7, #16]
 804e0cc:	60da      	str	r2, [r3, #12]
 804e0ce:	e001      	b.n	804e0d4 <UART_SetConfig+0x578>
      }
      else
      {
        ret = HAL_ERROR;
 804e0d0:	2301      	movs	r3, #1
 804e0d2:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 804e0d4:	687b      	ldr	r3, [r7, #4]
 804e0d6:	2201      	movs	r2, #1
 804e0d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 804e0dc:	687b      	ldr	r3, [r7, #4]
 804e0de:	2201      	movs	r2, #1
 804e0e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 804e0e4:	687b      	ldr	r3, [r7, #4]
 804e0e6:	2200      	movs	r2, #0
 804e0e8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 804e0ea:	687b      	ldr	r3, [r7, #4]
 804e0ec:	2200      	movs	r2, #0
 804e0ee:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 804e0f0:	7ebb      	ldrb	r3, [r7, #26]
}
 804e0f2:	4618      	mov	r0, r3
 804e0f4:	3720      	adds	r7, #32
 804e0f6:	46bd      	mov	sp, r7
 804e0f8:	bdb0      	pop	{r4, r5, r7, pc}
 804e0fa:	bf00      	nop
 804e0fc:	0804ea18 	.word	0x0804ea18
 804e100:	00f42400 	.word	0x00f42400

0804e104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 804e104:	b480      	push	{r7}
 804e106:	b083      	sub	sp, #12
 804e108:	af00      	add	r7, sp, #0
 804e10a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 804e10c:	687b      	ldr	r3, [r7, #4]
 804e10e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e110:	f003 0301 	and.w	r3, r3, #1
 804e114:	2b00      	cmp	r3, #0
 804e116:	d00a      	beq.n	804e12e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 804e118:	687b      	ldr	r3, [r7, #4]
 804e11a:	681b      	ldr	r3, [r3, #0]
 804e11c:	685b      	ldr	r3, [r3, #4]
 804e11e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 804e122:	687b      	ldr	r3, [r7, #4]
 804e124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804e126:	687b      	ldr	r3, [r7, #4]
 804e128:	681b      	ldr	r3, [r3, #0]
 804e12a:	430a      	orrs	r2, r1
 804e12c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 804e12e:	687b      	ldr	r3, [r7, #4]
 804e130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e132:	f003 0302 	and.w	r3, r3, #2
 804e136:	2b00      	cmp	r3, #0
 804e138:	d00a      	beq.n	804e150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 804e13a:	687b      	ldr	r3, [r7, #4]
 804e13c:	681b      	ldr	r3, [r3, #0]
 804e13e:	685b      	ldr	r3, [r3, #4]
 804e140:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 804e144:	687b      	ldr	r3, [r7, #4]
 804e146:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804e148:	687b      	ldr	r3, [r7, #4]
 804e14a:	681b      	ldr	r3, [r3, #0]
 804e14c:	430a      	orrs	r2, r1
 804e14e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 804e150:	687b      	ldr	r3, [r7, #4]
 804e152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e154:	f003 0304 	and.w	r3, r3, #4
 804e158:	2b00      	cmp	r3, #0
 804e15a:	d00a      	beq.n	804e172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 804e15c:	687b      	ldr	r3, [r7, #4]
 804e15e:	681b      	ldr	r3, [r3, #0]
 804e160:	685b      	ldr	r3, [r3, #4]
 804e162:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 804e166:	687b      	ldr	r3, [r7, #4]
 804e168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804e16a:	687b      	ldr	r3, [r7, #4]
 804e16c:	681b      	ldr	r3, [r3, #0]
 804e16e:	430a      	orrs	r2, r1
 804e170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 804e172:	687b      	ldr	r3, [r7, #4]
 804e174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e176:	f003 0308 	and.w	r3, r3, #8
 804e17a:	2b00      	cmp	r3, #0
 804e17c:	d00a      	beq.n	804e194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 804e17e:	687b      	ldr	r3, [r7, #4]
 804e180:	681b      	ldr	r3, [r3, #0]
 804e182:	685b      	ldr	r3, [r3, #4]
 804e184:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 804e188:	687b      	ldr	r3, [r7, #4]
 804e18a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 804e18c:	687b      	ldr	r3, [r7, #4]
 804e18e:	681b      	ldr	r3, [r3, #0]
 804e190:	430a      	orrs	r2, r1
 804e192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 804e194:	687b      	ldr	r3, [r7, #4]
 804e196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e198:	f003 0310 	and.w	r3, r3, #16
 804e19c:	2b00      	cmp	r3, #0
 804e19e:	d00a      	beq.n	804e1b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 804e1a0:	687b      	ldr	r3, [r7, #4]
 804e1a2:	681b      	ldr	r3, [r3, #0]
 804e1a4:	689b      	ldr	r3, [r3, #8]
 804e1a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 804e1aa:	687b      	ldr	r3, [r7, #4]
 804e1ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804e1ae:	687b      	ldr	r3, [r7, #4]
 804e1b0:	681b      	ldr	r3, [r3, #0]
 804e1b2:	430a      	orrs	r2, r1
 804e1b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 804e1b6:	687b      	ldr	r3, [r7, #4]
 804e1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e1ba:	f003 0320 	and.w	r3, r3, #32
 804e1be:	2b00      	cmp	r3, #0
 804e1c0:	d00a      	beq.n	804e1d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 804e1c2:	687b      	ldr	r3, [r7, #4]
 804e1c4:	681b      	ldr	r3, [r3, #0]
 804e1c6:	689b      	ldr	r3, [r3, #8]
 804e1c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 804e1cc:	687b      	ldr	r3, [r7, #4]
 804e1ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804e1d0:	687b      	ldr	r3, [r7, #4]
 804e1d2:	681b      	ldr	r3, [r3, #0]
 804e1d4:	430a      	orrs	r2, r1
 804e1d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 804e1d8:	687b      	ldr	r3, [r7, #4]
 804e1da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804e1e0:	2b00      	cmp	r3, #0
 804e1e2:	d01a      	beq.n	804e21a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 804e1e4:	687b      	ldr	r3, [r7, #4]
 804e1e6:	681b      	ldr	r3, [r3, #0]
 804e1e8:	685b      	ldr	r3, [r3, #4]
 804e1ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 804e1ee:	687b      	ldr	r3, [r7, #4]
 804e1f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804e1f2:	687b      	ldr	r3, [r7, #4]
 804e1f4:	681b      	ldr	r3, [r3, #0]
 804e1f6:	430a      	orrs	r2, r1
 804e1f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 804e1fa:	687b      	ldr	r3, [r7, #4]
 804e1fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804e1fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804e202:	d10a      	bne.n	804e21a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 804e204:	687b      	ldr	r3, [r7, #4]
 804e206:	681b      	ldr	r3, [r3, #0]
 804e208:	685b      	ldr	r3, [r3, #4]
 804e20a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 804e20e:	687b      	ldr	r3, [r7, #4]
 804e210:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 804e212:	687b      	ldr	r3, [r7, #4]
 804e214:	681b      	ldr	r3, [r3, #0]
 804e216:	430a      	orrs	r2, r1
 804e218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804e21a:	687b      	ldr	r3, [r7, #4]
 804e21c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e21e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804e222:	2b00      	cmp	r3, #0
 804e224:	d00a      	beq.n	804e23c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 804e226:	687b      	ldr	r3, [r7, #4]
 804e228:	681b      	ldr	r3, [r3, #0]
 804e22a:	685b      	ldr	r3, [r3, #4]
 804e22c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 804e230:	687b      	ldr	r3, [r7, #4]
 804e232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 804e234:	687b      	ldr	r3, [r7, #4]
 804e236:	681b      	ldr	r3, [r3, #0]
 804e238:	430a      	orrs	r2, r1
 804e23a:	605a      	str	r2, [r3, #4]
  }
}
 804e23c:	bf00      	nop
 804e23e:	370c      	adds	r7, #12
 804e240:	46bd      	mov	sp, r7
 804e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e246:	4770      	bx	lr

0804e248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 804e248:	b580      	push	{r7, lr}
 804e24a:	b086      	sub	sp, #24
 804e24c:	af02      	add	r7, sp, #8
 804e24e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804e250:	687b      	ldr	r3, [r7, #4]
 804e252:	2200      	movs	r2, #0
 804e254:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 804e258:	f7f8 fcbc 	bl	8046bd4 <HAL_GetTick>
 804e25c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 804e25e:	687b      	ldr	r3, [r7, #4]
 804e260:	681b      	ldr	r3, [r3, #0]
 804e262:	681b      	ldr	r3, [r3, #0]
 804e264:	f003 0308 	and.w	r3, r3, #8
 804e268:	2b08      	cmp	r3, #8
 804e26a:	d10e      	bne.n	804e28a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 804e26c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 804e270:	9300      	str	r3, [sp, #0]
 804e272:	68fb      	ldr	r3, [r7, #12]
 804e274:	2200      	movs	r2, #0
 804e276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 804e27a:	6878      	ldr	r0, [r7, #4]
 804e27c:	f000 f82f 	bl	804e2de <UART_WaitOnFlagUntilTimeout>
 804e280:	4603      	mov	r3, r0
 804e282:	2b00      	cmp	r3, #0
 804e284:	d001      	beq.n	804e28a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 804e286:	2303      	movs	r3, #3
 804e288:	e025      	b.n	804e2d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 804e28a:	687b      	ldr	r3, [r7, #4]
 804e28c:	681b      	ldr	r3, [r3, #0]
 804e28e:	681b      	ldr	r3, [r3, #0]
 804e290:	f003 0304 	and.w	r3, r3, #4
 804e294:	2b04      	cmp	r3, #4
 804e296:	d10e      	bne.n	804e2b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 804e298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 804e29c:	9300      	str	r3, [sp, #0]
 804e29e:	68fb      	ldr	r3, [r7, #12]
 804e2a0:	2200      	movs	r2, #0
 804e2a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 804e2a6:	6878      	ldr	r0, [r7, #4]
 804e2a8:	f000 f819 	bl	804e2de <UART_WaitOnFlagUntilTimeout>
 804e2ac:	4603      	mov	r3, r0
 804e2ae:	2b00      	cmp	r3, #0
 804e2b0:	d001      	beq.n	804e2b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 804e2b2:	2303      	movs	r3, #3
 804e2b4:	e00f      	b.n	804e2d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 804e2b6:	687b      	ldr	r3, [r7, #4]
 804e2b8:	2220      	movs	r2, #32
 804e2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 804e2be:	687b      	ldr	r3, [r7, #4]
 804e2c0:	2220      	movs	r2, #32
 804e2c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804e2c6:	687b      	ldr	r3, [r7, #4]
 804e2c8:	2200      	movs	r2, #0
 804e2ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 804e2cc:	687b      	ldr	r3, [r7, #4]
 804e2ce:	2200      	movs	r2, #0
 804e2d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804e2d4:	2300      	movs	r3, #0
}
 804e2d6:	4618      	mov	r0, r3
 804e2d8:	3710      	adds	r7, #16
 804e2da:	46bd      	mov	sp, r7
 804e2dc:	bd80      	pop	{r7, pc}

0804e2de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 804e2de:	b580      	push	{r7, lr}
 804e2e0:	b084      	sub	sp, #16
 804e2e2:	af00      	add	r7, sp, #0
 804e2e4:	60f8      	str	r0, [r7, #12]
 804e2e6:	60b9      	str	r1, [r7, #8]
 804e2e8:	603b      	str	r3, [r7, #0]
 804e2ea:	4613      	mov	r3, r2
 804e2ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804e2ee:	e062      	b.n	804e3b6 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804e2f0:	69bb      	ldr	r3, [r7, #24]
 804e2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 804e2f6:	d05e      	beq.n	804e3b6 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804e2f8:	f7f8 fc6c 	bl	8046bd4 <HAL_GetTick>
 804e2fc:	4602      	mov	r2, r0
 804e2fe:	683b      	ldr	r3, [r7, #0]
 804e300:	1ad3      	subs	r3, r2, r3
 804e302:	69ba      	ldr	r2, [r7, #24]
 804e304:	429a      	cmp	r2, r3
 804e306:	d302      	bcc.n	804e30e <UART_WaitOnFlagUntilTimeout+0x30>
 804e308:	69bb      	ldr	r3, [r7, #24]
 804e30a:	2b00      	cmp	r3, #0
 804e30c:	d11d      	bne.n	804e34a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 804e30e:	68fb      	ldr	r3, [r7, #12]
 804e310:	681b      	ldr	r3, [r3, #0]
 804e312:	681a      	ldr	r2, [r3, #0]
 804e314:	68fb      	ldr	r3, [r7, #12]
 804e316:	681b      	ldr	r3, [r3, #0]
 804e318:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 804e31c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804e31e:	68fb      	ldr	r3, [r7, #12]
 804e320:	681b      	ldr	r3, [r3, #0]
 804e322:	689a      	ldr	r2, [r3, #8]
 804e324:	68fb      	ldr	r3, [r7, #12]
 804e326:	681b      	ldr	r3, [r3, #0]
 804e328:	f022 0201 	bic.w	r2, r2, #1
 804e32c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 804e32e:	68fb      	ldr	r3, [r7, #12]
 804e330:	2220      	movs	r2, #32
 804e332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 804e336:	68fb      	ldr	r3, [r7, #12]
 804e338:	2220      	movs	r2, #32
 804e33a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 804e33e:	68fb      	ldr	r3, [r7, #12]
 804e340:	2200      	movs	r2, #0
 804e342:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 804e346:	2303      	movs	r3, #3
 804e348:	e045      	b.n	804e3d6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 804e34a:	68fb      	ldr	r3, [r7, #12]
 804e34c:	681b      	ldr	r3, [r3, #0]
 804e34e:	681b      	ldr	r3, [r3, #0]
 804e350:	f003 0304 	and.w	r3, r3, #4
 804e354:	2b00      	cmp	r3, #0
 804e356:	d02e      	beq.n	804e3b6 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 804e358:	68fb      	ldr	r3, [r7, #12]
 804e35a:	681b      	ldr	r3, [r3, #0]
 804e35c:	69db      	ldr	r3, [r3, #28]
 804e35e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804e362:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804e366:	d126      	bne.n	804e3b6 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 804e368:	68fb      	ldr	r3, [r7, #12]
 804e36a:	681b      	ldr	r3, [r3, #0]
 804e36c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804e370:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 804e372:	68fb      	ldr	r3, [r7, #12]
 804e374:	681b      	ldr	r3, [r3, #0]
 804e376:	681a      	ldr	r2, [r3, #0]
 804e378:	68fb      	ldr	r3, [r7, #12]
 804e37a:	681b      	ldr	r3, [r3, #0]
 804e37c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 804e380:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804e382:	68fb      	ldr	r3, [r7, #12]
 804e384:	681b      	ldr	r3, [r3, #0]
 804e386:	689a      	ldr	r2, [r3, #8]
 804e388:	68fb      	ldr	r3, [r7, #12]
 804e38a:	681b      	ldr	r3, [r3, #0]
 804e38c:	f022 0201 	bic.w	r2, r2, #1
 804e390:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 804e392:	68fb      	ldr	r3, [r7, #12]
 804e394:	2220      	movs	r2, #32
 804e396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 804e39a:	68fb      	ldr	r3, [r7, #12]
 804e39c:	2220      	movs	r2, #32
 804e39e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 804e3a2:	68fb      	ldr	r3, [r7, #12]
 804e3a4:	2220      	movs	r2, #32
 804e3a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 804e3aa:	68fb      	ldr	r3, [r7, #12]
 804e3ac:	2200      	movs	r2, #0
 804e3ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 804e3b2:	2303      	movs	r3, #3
 804e3b4:	e00f      	b.n	804e3d6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804e3b6:	68fb      	ldr	r3, [r7, #12]
 804e3b8:	681b      	ldr	r3, [r3, #0]
 804e3ba:	69da      	ldr	r2, [r3, #28]
 804e3bc:	68bb      	ldr	r3, [r7, #8]
 804e3be:	4013      	ands	r3, r2
 804e3c0:	68ba      	ldr	r2, [r7, #8]
 804e3c2:	429a      	cmp	r2, r3
 804e3c4:	bf0c      	ite	eq
 804e3c6:	2301      	moveq	r3, #1
 804e3c8:	2300      	movne	r3, #0
 804e3ca:	b2db      	uxtb	r3, r3
 804e3cc:	461a      	mov	r2, r3
 804e3ce:	79fb      	ldrb	r3, [r7, #7]
 804e3d0:	429a      	cmp	r2, r3
 804e3d2:	d08d      	beq.n	804e2f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 804e3d4:	2300      	movs	r3, #0
}
 804e3d6:	4618      	mov	r0, r3
 804e3d8:	3710      	adds	r7, #16
 804e3da:	46bd      	mov	sp, r7
 804e3dc:	bd80      	pop	{r7, pc}

0804e3de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 804e3de:	b480      	push	{r7}
 804e3e0:	b083      	sub	sp, #12
 804e3e2:	af00      	add	r7, sp, #0
 804e3e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 804e3e6:	687b      	ldr	r3, [r7, #4]
 804e3e8:	681b      	ldr	r3, [r3, #0]
 804e3ea:	681a      	ldr	r2, [r3, #0]
 804e3ec:	687b      	ldr	r3, [r7, #4]
 804e3ee:	681b      	ldr	r3, [r3, #0]
 804e3f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 804e3f4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 804e3f6:	687b      	ldr	r3, [r7, #4]
 804e3f8:	681b      	ldr	r3, [r3, #0]
 804e3fa:	689b      	ldr	r3, [r3, #8]
 804e3fc:	687a      	ldr	r2, [r7, #4]
 804e3fe:	6812      	ldr	r2, [r2, #0]
 804e400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804e404:	f023 0301 	bic.w	r3, r3, #1
 804e408:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804e40a:	687b      	ldr	r3, [r7, #4]
 804e40c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804e40e:	2b01      	cmp	r3, #1
 804e410:	d107      	bne.n	804e422 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804e412:	687b      	ldr	r3, [r7, #4]
 804e414:	681b      	ldr	r3, [r3, #0]
 804e416:	681a      	ldr	r2, [r3, #0]
 804e418:	687b      	ldr	r3, [r7, #4]
 804e41a:	681b      	ldr	r3, [r3, #0]
 804e41c:	f022 0210 	bic.w	r2, r2, #16
 804e420:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 804e422:	687b      	ldr	r3, [r7, #4]
 804e424:	2220      	movs	r2, #32
 804e426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804e42a:	687b      	ldr	r3, [r7, #4]
 804e42c:	2200      	movs	r2, #0
 804e42e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 804e430:	687b      	ldr	r3, [r7, #4]
 804e432:	2200      	movs	r2, #0
 804e434:	671a      	str	r2, [r3, #112]	; 0x70
}
 804e436:	bf00      	nop
 804e438:	370c      	adds	r7, #12
 804e43a:	46bd      	mov	sp, r7
 804e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e440:	4770      	bx	lr

0804e442 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 804e442:	b580      	push	{r7, lr}
 804e444:	b084      	sub	sp, #16
 804e446:	af00      	add	r7, sp, #0
 804e448:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804e44a:	687b      	ldr	r3, [r7, #4]
 804e44c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e44e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 804e450:	68fb      	ldr	r3, [r7, #12]
 804e452:	2200      	movs	r2, #0
 804e454:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 804e458:	68fb      	ldr	r3, [r7, #12]
 804e45a:	2200      	movs	r2, #0
 804e45c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 804e460:	68f8      	ldr	r0, [r7, #12]
 804e462:	f7ff fb65 	bl	804db30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804e466:	bf00      	nop
 804e468:	3710      	adds	r7, #16
 804e46a:	46bd      	mov	sp, r7
 804e46c:	bd80      	pop	{r7, pc}

0804e46e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 804e46e:	b580      	push	{r7, lr}
 804e470:	b082      	sub	sp, #8
 804e472:	af00      	add	r7, sp, #0
 804e474:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 804e476:	687b      	ldr	r3, [r7, #4]
 804e478:	681b      	ldr	r3, [r3, #0]
 804e47a:	681a      	ldr	r2, [r3, #0]
 804e47c:	687b      	ldr	r3, [r7, #4]
 804e47e:	681b      	ldr	r3, [r3, #0]
 804e480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804e484:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 804e486:	687b      	ldr	r3, [r7, #4]
 804e488:	2220      	movs	r2, #32
 804e48a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 804e48e:	687b      	ldr	r3, [r7, #4]
 804e490:	2200      	movs	r2, #0
 804e492:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 804e494:	6878      	ldr	r0, [r7, #4]
 804e496:	f7ff fb41 	bl	804db1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804e49a:	bf00      	nop
 804e49c:	3708      	adds	r7, #8
 804e49e:	46bd      	mov	sp, r7
 804e4a0:	bd80      	pop	{r7, pc}

0804e4a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 804e4a2:	b480      	push	{r7}
 804e4a4:	b083      	sub	sp, #12
 804e4a6:	af00      	add	r7, sp, #0
 804e4a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 804e4aa:	bf00      	nop
 804e4ac:	370c      	adds	r7, #12
 804e4ae:	46bd      	mov	sp, r7
 804e4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e4b4:	4770      	bx	lr

0804e4b6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 804e4b6:	b480      	push	{r7}
 804e4b8:	b083      	sub	sp, #12
 804e4ba:	af00      	add	r7, sp, #0
 804e4bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 804e4be:	bf00      	nop
 804e4c0:	370c      	adds	r7, #12
 804e4c2:	46bd      	mov	sp, r7
 804e4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e4c8:	4770      	bx	lr

0804e4ca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 804e4ca:	b480      	push	{r7}
 804e4cc:	b083      	sub	sp, #12
 804e4ce:	af00      	add	r7, sp, #0
 804e4d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 804e4d2:	bf00      	nop
 804e4d4:	370c      	adds	r7, #12
 804e4d6:	46bd      	mov	sp, r7
 804e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e4dc:	4770      	bx	lr

0804e4de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 804e4de:	b480      	push	{r7}
 804e4e0:	b085      	sub	sp, #20
 804e4e2:	af00      	add	r7, sp, #0
 804e4e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 804e4e6:	687b      	ldr	r3, [r7, #4]
 804e4e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 804e4ec:	2b01      	cmp	r3, #1
 804e4ee:	d101      	bne.n	804e4f4 <HAL_UARTEx_DisableFifoMode+0x16>
 804e4f0:	2302      	movs	r3, #2
 804e4f2:	e027      	b.n	804e544 <HAL_UARTEx_DisableFifoMode+0x66>
 804e4f4:	687b      	ldr	r3, [r7, #4]
 804e4f6:	2201      	movs	r2, #1
 804e4f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 804e4fc:	687b      	ldr	r3, [r7, #4]
 804e4fe:	2224      	movs	r2, #36	; 0x24
 804e500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804e504:	687b      	ldr	r3, [r7, #4]
 804e506:	681b      	ldr	r3, [r3, #0]
 804e508:	681b      	ldr	r3, [r3, #0]
 804e50a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804e50c:	687b      	ldr	r3, [r7, #4]
 804e50e:	681b      	ldr	r3, [r3, #0]
 804e510:	681a      	ldr	r2, [r3, #0]
 804e512:	687b      	ldr	r3, [r7, #4]
 804e514:	681b      	ldr	r3, [r3, #0]
 804e516:	f022 0201 	bic.w	r2, r2, #1
 804e51a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 804e51c:	68fb      	ldr	r3, [r7, #12]
 804e51e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 804e522:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 804e524:	687b      	ldr	r3, [r7, #4]
 804e526:	2200      	movs	r2, #0
 804e528:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804e52a:	687b      	ldr	r3, [r7, #4]
 804e52c:	681b      	ldr	r3, [r3, #0]
 804e52e:	68fa      	ldr	r2, [r7, #12]
 804e530:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804e532:	687b      	ldr	r3, [r7, #4]
 804e534:	2220      	movs	r2, #32
 804e536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 804e53a:	687b      	ldr	r3, [r7, #4]
 804e53c:	2200      	movs	r2, #0
 804e53e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804e542:	2300      	movs	r3, #0
}
 804e544:	4618      	mov	r0, r3
 804e546:	3714      	adds	r7, #20
 804e548:	46bd      	mov	sp, r7
 804e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e54e:	4770      	bx	lr

0804e550 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 804e550:	b580      	push	{r7, lr}
 804e552:	b084      	sub	sp, #16
 804e554:	af00      	add	r7, sp, #0
 804e556:	6078      	str	r0, [r7, #4]
 804e558:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 804e55a:	687b      	ldr	r3, [r7, #4]
 804e55c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 804e560:	2b01      	cmp	r3, #1
 804e562:	d101      	bne.n	804e568 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 804e564:	2302      	movs	r3, #2
 804e566:	e02d      	b.n	804e5c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 804e568:	687b      	ldr	r3, [r7, #4]
 804e56a:	2201      	movs	r2, #1
 804e56c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 804e570:	687b      	ldr	r3, [r7, #4]
 804e572:	2224      	movs	r2, #36	; 0x24
 804e574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804e578:	687b      	ldr	r3, [r7, #4]
 804e57a:	681b      	ldr	r3, [r3, #0]
 804e57c:	681b      	ldr	r3, [r3, #0]
 804e57e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804e580:	687b      	ldr	r3, [r7, #4]
 804e582:	681b      	ldr	r3, [r3, #0]
 804e584:	681a      	ldr	r2, [r3, #0]
 804e586:	687b      	ldr	r3, [r7, #4]
 804e588:	681b      	ldr	r3, [r3, #0]
 804e58a:	f022 0201 	bic.w	r2, r2, #1
 804e58e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 804e590:	687b      	ldr	r3, [r7, #4]
 804e592:	681b      	ldr	r3, [r3, #0]
 804e594:	689b      	ldr	r3, [r3, #8]
 804e596:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 804e59a:	687b      	ldr	r3, [r7, #4]
 804e59c:	681b      	ldr	r3, [r3, #0]
 804e59e:	683a      	ldr	r2, [r7, #0]
 804e5a0:	430a      	orrs	r2, r1
 804e5a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 804e5a4:	6878      	ldr	r0, [r7, #4]
 804e5a6:	f000 f84f 	bl	804e648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804e5aa:	687b      	ldr	r3, [r7, #4]
 804e5ac:	681b      	ldr	r3, [r3, #0]
 804e5ae:	68fa      	ldr	r2, [r7, #12]
 804e5b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804e5b2:	687b      	ldr	r3, [r7, #4]
 804e5b4:	2220      	movs	r2, #32
 804e5b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 804e5ba:	687b      	ldr	r3, [r7, #4]
 804e5bc:	2200      	movs	r2, #0
 804e5be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804e5c2:	2300      	movs	r3, #0
}
 804e5c4:	4618      	mov	r0, r3
 804e5c6:	3710      	adds	r7, #16
 804e5c8:	46bd      	mov	sp, r7
 804e5ca:	bd80      	pop	{r7, pc}

0804e5cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 804e5cc:	b580      	push	{r7, lr}
 804e5ce:	b084      	sub	sp, #16
 804e5d0:	af00      	add	r7, sp, #0
 804e5d2:	6078      	str	r0, [r7, #4]
 804e5d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 804e5d6:	687b      	ldr	r3, [r7, #4]
 804e5d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 804e5dc:	2b01      	cmp	r3, #1
 804e5de:	d101      	bne.n	804e5e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 804e5e0:	2302      	movs	r3, #2
 804e5e2:	e02d      	b.n	804e640 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 804e5e4:	687b      	ldr	r3, [r7, #4]
 804e5e6:	2201      	movs	r2, #1
 804e5e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 804e5ec:	687b      	ldr	r3, [r7, #4]
 804e5ee:	2224      	movs	r2, #36	; 0x24
 804e5f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804e5f4:	687b      	ldr	r3, [r7, #4]
 804e5f6:	681b      	ldr	r3, [r3, #0]
 804e5f8:	681b      	ldr	r3, [r3, #0]
 804e5fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804e5fc:	687b      	ldr	r3, [r7, #4]
 804e5fe:	681b      	ldr	r3, [r3, #0]
 804e600:	681a      	ldr	r2, [r3, #0]
 804e602:	687b      	ldr	r3, [r7, #4]
 804e604:	681b      	ldr	r3, [r3, #0]
 804e606:	f022 0201 	bic.w	r2, r2, #1
 804e60a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 804e60c:	687b      	ldr	r3, [r7, #4]
 804e60e:	681b      	ldr	r3, [r3, #0]
 804e610:	689b      	ldr	r3, [r3, #8]
 804e612:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 804e616:	687b      	ldr	r3, [r7, #4]
 804e618:	681b      	ldr	r3, [r3, #0]
 804e61a:	683a      	ldr	r2, [r7, #0]
 804e61c:	430a      	orrs	r2, r1
 804e61e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 804e620:	6878      	ldr	r0, [r7, #4]
 804e622:	f000 f811 	bl	804e648 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804e626:	687b      	ldr	r3, [r7, #4]
 804e628:	681b      	ldr	r3, [r3, #0]
 804e62a:	68fa      	ldr	r2, [r7, #12]
 804e62c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804e62e:	687b      	ldr	r3, [r7, #4]
 804e630:	2220      	movs	r2, #32
 804e632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 804e636:	687b      	ldr	r3, [r7, #4]
 804e638:	2200      	movs	r2, #0
 804e63a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804e63e:	2300      	movs	r3, #0
}
 804e640:	4618      	mov	r0, r3
 804e642:	3710      	adds	r7, #16
 804e644:	46bd      	mov	sp, r7
 804e646:	bd80      	pop	{r7, pc}

0804e648 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 804e648:	b480      	push	{r7}
 804e64a:	b089      	sub	sp, #36	; 0x24
 804e64c:	af00      	add	r7, sp, #0
 804e64e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 804e650:	4a2f      	ldr	r2, [pc, #188]	; (804e710 <UARTEx_SetNbDataToProcess+0xc8>)
 804e652:	f107 0314 	add.w	r3, r7, #20
 804e656:	e892 0003 	ldmia.w	r2, {r0, r1}
 804e65a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 804e65e:	4a2d      	ldr	r2, [pc, #180]	; (804e714 <UARTEx_SetNbDataToProcess+0xcc>)
 804e660:	f107 030c 	add.w	r3, r7, #12
 804e664:	e892 0003 	ldmia.w	r2, {r0, r1}
 804e668:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 804e66c:	687b      	ldr	r3, [r7, #4]
 804e66e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804e670:	2b00      	cmp	r3, #0
 804e672:	d108      	bne.n	804e686 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 804e674:	687b      	ldr	r3, [r7, #4]
 804e676:	2201      	movs	r2, #1
 804e678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 804e67c:	687b      	ldr	r3, [r7, #4]
 804e67e:	2201      	movs	r2, #1
 804e680:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 804e684:	e03d      	b.n	804e702 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 804e686:	2308      	movs	r3, #8
 804e688:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 804e68a:	2308      	movs	r3, #8
 804e68c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 804e68e:	687b      	ldr	r3, [r7, #4]
 804e690:	681b      	ldr	r3, [r3, #0]
 804e692:	689b      	ldr	r3, [r3, #8]
 804e694:	0e5b      	lsrs	r3, r3, #25
 804e696:	b2db      	uxtb	r3, r3
 804e698:	f003 0307 	and.w	r3, r3, #7
 804e69c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 804e69e:	687b      	ldr	r3, [r7, #4]
 804e6a0:	681b      	ldr	r3, [r3, #0]
 804e6a2:	689b      	ldr	r3, [r3, #8]
 804e6a4:	0f5b      	lsrs	r3, r3, #29
 804e6a6:	b2db      	uxtb	r3, r3
 804e6a8:	f003 0307 	and.w	r3, r3, #7
 804e6ac:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 804e6ae:	7fbb      	ldrb	r3, [r7, #30]
 804e6b0:	7f3a      	ldrb	r2, [r7, #28]
 804e6b2:	f107 0120 	add.w	r1, r7, #32
 804e6b6:	440a      	add	r2, r1
 804e6b8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 804e6bc:	fb02 f303 	mul.w	r3, r2, r3
 804e6c0:	7f3a      	ldrb	r2, [r7, #28]
 804e6c2:	f107 0120 	add.w	r1, r7, #32
 804e6c6:	440a      	add	r2, r1
 804e6c8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 804e6cc:	fb93 f3f2 	sdiv	r3, r3, r2
 804e6d0:	b29a      	uxth	r2, r3
 804e6d2:	687b      	ldr	r3, [r7, #4]
 804e6d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 804e6d8:	7ffb      	ldrb	r3, [r7, #31]
 804e6da:	7f7a      	ldrb	r2, [r7, #29]
 804e6dc:	f107 0120 	add.w	r1, r7, #32
 804e6e0:	440a      	add	r2, r1
 804e6e2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 804e6e6:	fb02 f303 	mul.w	r3, r2, r3
 804e6ea:	7f7a      	ldrb	r2, [r7, #29]
 804e6ec:	f107 0120 	add.w	r1, r7, #32
 804e6f0:	440a      	add	r2, r1
 804e6f2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 804e6f6:	fb93 f3f2 	sdiv	r3, r3, r2
 804e6fa:	b29a      	uxth	r2, r3
 804e6fc:	687b      	ldr	r3, [r7, #4]
 804e6fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 804e702:	bf00      	nop
 804e704:	3724      	adds	r7, #36	; 0x24
 804e706:	46bd      	mov	sp, r7
 804e708:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e70c:	4770      	bx	lr
 804e70e:	bf00      	nop
 804e710:	0804e7f4 	.word	0x0804e7f4
 804e714:	0804e7fc 	.word	0x0804e7fc

0804e718 <__libc_init_array>:
 804e718:	b570      	push	{r4, r5, r6, lr}
 804e71a:	4d0d      	ldr	r5, [pc, #52]	; (804e750 <__libc_init_array+0x38>)
 804e71c:	2600      	movs	r6, #0
 804e71e:	4c0d      	ldr	r4, [pc, #52]	; (804e754 <__libc_init_array+0x3c>)
 804e720:	1b64      	subs	r4, r4, r5
 804e722:	10a4      	asrs	r4, r4, #2
 804e724:	42a6      	cmp	r6, r4
 804e726:	d109      	bne.n	804e73c <__libc_init_array+0x24>
 804e728:	4d0b      	ldr	r5, [pc, #44]	; (804e758 <__libc_init_array+0x40>)
 804e72a:	2600      	movs	r6, #0
 804e72c:	4c0b      	ldr	r4, [pc, #44]	; (804e75c <__libc_init_array+0x44>)
 804e72e:	f000 f82d 	bl	804e78c <_init>
 804e732:	1b64      	subs	r4, r4, r5
 804e734:	10a4      	asrs	r4, r4, #2
 804e736:	42a6      	cmp	r6, r4
 804e738:	d105      	bne.n	804e746 <__libc_init_array+0x2e>
 804e73a:	bd70      	pop	{r4, r5, r6, pc}
 804e73c:	f855 3b04 	ldr.w	r3, [r5], #4
 804e740:	3601      	adds	r6, #1
 804e742:	4798      	blx	r3
 804e744:	e7ee      	b.n	804e724 <__libc_init_array+0xc>
 804e746:	f855 3b04 	ldr.w	r3, [r5], #4
 804e74a:	3601      	adds	r6, #1
 804e74c:	4798      	blx	r3
 804e74e:	e7f2      	b.n	804e736 <__libc_init_array+0x1e>
 804e750:	0804ea38 	.word	0x0804ea38
 804e754:	0804ea38 	.word	0x0804ea38
 804e758:	0804ea38 	.word	0x0804ea38
 804e75c:	0804ea3c 	.word	0x0804ea3c

0804e760 <memcpy>:
 804e760:	440a      	add	r2, r1
 804e762:	1e43      	subs	r3, r0, #1
 804e764:	4291      	cmp	r1, r2
 804e766:	d100      	bne.n	804e76a <memcpy+0xa>
 804e768:	4770      	bx	lr
 804e76a:	b510      	push	{r4, lr}
 804e76c:	f811 4b01 	ldrb.w	r4, [r1], #1
 804e770:	4291      	cmp	r1, r2
 804e772:	f803 4f01 	strb.w	r4, [r3, #1]!
 804e776:	d1f9      	bne.n	804e76c <memcpy+0xc>
 804e778:	bd10      	pop	{r4, pc}

0804e77a <memset>:
 804e77a:	4402      	add	r2, r0
 804e77c:	4603      	mov	r3, r0
 804e77e:	4293      	cmp	r3, r2
 804e780:	d100      	bne.n	804e784 <memset+0xa>
 804e782:	4770      	bx	lr
 804e784:	f803 1b01 	strb.w	r1, [r3], #1
 804e788:	e7f9      	b.n	804e77e <memset+0x4>
	...

0804e78c <_init>:
 804e78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e78e:	bf00      	nop
 804e790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e792:	bc08      	pop	{r3}
 804e794:	469e      	mov	lr, r3
 804e796:	4770      	bx	lr

0804e798 <_fini>:
 804e798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804e79a:	bf00      	nop
 804e79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804e79e:	bc08      	pop	{r3}
 804e7a0:	469e      	mov	lr, r3
 804e7a2:	4770      	bx	lr
 804e7a4:	0000      	movs	r0, r0
	...

0804e7a8 <__SECURE_LEDToggle_YELLOW_veneer>:
 804e7a8:	b401      	push	{r0}
 804e7aa:	4802      	ldr	r0, [pc, #8]	; (804e7b4 <__SECURE_LEDToggle_YELLOW_veneer+0xc>)
 804e7ac:	4684      	mov	ip, r0
 804e7ae:	bc01      	pop	{r0}
 804e7b0:	4760      	bx	ip
 804e7b2:	bf00      	nop
 804e7b4:	0c03e019 	.word	0x0c03e019

0804e7b8 <__SECURE_SystemCoreClockUpdate_veneer>:
 804e7b8:	b401      	push	{r0}
 804e7ba:	4802      	ldr	r0, [pc, #8]	; (804e7c4 <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 804e7bc:	4684      	mov	ip, r0
 804e7be:	bc01      	pop	{r0}
 804e7c0:	4760      	bx	ip
 804e7c2:	bf00      	nop
 804e7c4:	0c03e009 	.word	0x0c03e009

0804e7c8 <__SECURE_LEDToggle_RED_veneer>:
 804e7c8:	b401      	push	{r0}
 804e7ca:	4802      	ldr	r0, [pc, #8]	; (804e7d4 <__SECURE_LEDToggle_RED_veneer+0xc>)
 804e7cc:	4684      	mov	ip, r0
 804e7ce:	bc01      	pop	{r0}
 804e7d0:	4760      	bx	ip
 804e7d2:	bf00      	nop
 804e7d4:	0c03e001 	.word	0x0c03e001

0804e7d8 <__SECURE_RegisterCallback_veneer>:
 804e7d8:	b401      	push	{r0}
 804e7da:	4802      	ldr	r0, [pc, #8]	; (804e7e4 <__SECURE_RegisterCallback_veneer+0xc>)
 804e7dc:	4684      	mov	ip, r0
 804e7de:	bc01      	pop	{r0}
 804e7e0:	4760      	bx	ip
 804e7e2:	bf00      	nop
 804e7e4:	0c03e011 	.word	0x0c03e011
