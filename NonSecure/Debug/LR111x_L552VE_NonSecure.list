
LR111x_L552VE_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019958  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000151c  08059b50  08059b50  00029b50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0805b06c  0805b06c  00038484  2**0
                  CONTENTS
  4 .ARM          00000008  0805b06c  0805b06c  0002b06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0805b074  0805b074  00038484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0805b074  0805b074  0002b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805b078  0805b078  0002b078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000484  20018000  0805b07c  00038000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000030ac  20018484  0805b500  00038484  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001b530  0805b500  0003b530  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00038484  2**0
                  CONTENTS, READONLY
 12 .debug_info   000abb74  00000000  00000000  000384ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000eca0  00000000  00000000  000e402e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0003546b  00000000  00000000  000f2cce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003968  00000000  00000000  00128140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003c78  00000000  00000000  0012baa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0004dcb5  00000000  00000000  0012f720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0001a6eb  00000000  00000000  0017d3d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00197ac0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bad4  00000000  00000000  00197b14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	20018484 	.word	0x20018484
 8040214:	00000000 	.word	0x00000000
 8040218:	08059ae8 	.word	0x08059ae8

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20018488 	.word	0x20018488
 8040234:	08059ae8 	.word	0x08059ae8

08040238 <strlen>:
 8040238:	4603      	mov	r3, r0
 804023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 804023e:	2a00      	cmp	r2, #0
 8040240:	d1fb      	bne.n	804023a <strlen+0x2>
 8040242:	1a18      	subs	r0, r3, r0
 8040244:	3801      	subs	r0, #1
 8040246:	4770      	bx	lr

08040248 <__aeabi_drsub>:
 8040248:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 804024c:	e002      	b.n	8040254 <__adddf3>
 804024e:	bf00      	nop

08040250 <__aeabi_dsub>:
 8040250:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08040254 <__adddf3>:
 8040254:	b530      	push	{r4, r5, lr}
 8040256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 804025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 804025e:	ea94 0f05 	teq	r4, r5
 8040262:	bf08      	it	eq
 8040264:	ea90 0f02 	teqeq	r0, r2
 8040268:	bf1f      	itttt	ne
 804026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 804026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8040272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8040276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 804027a:	f000 80e2 	beq.w	8040442 <__adddf3+0x1ee>
 804027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8040282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8040286:	bfb8      	it	lt
 8040288:	426d      	neglt	r5, r5
 804028a:	dd0c      	ble.n	80402a6 <__adddf3+0x52>
 804028c:	442c      	add	r4, r5
 804028e:	ea80 0202 	eor.w	r2, r0, r2
 8040292:	ea81 0303 	eor.w	r3, r1, r3
 8040296:	ea82 0000 	eor.w	r0, r2, r0
 804029a:	ea83 0101 	eor.w	r1, r3, r1
 804029e:	ea80 0202 	eor.w	r2, r0, r2
 80402a2:	ea81 0303 	eor.w	r3, r1, r3
 80402a6:	2d36      	cmp	r5, #54	; 0x36
 80402a8:	bf88      	it	hi
 80402aa:	bd30      	pophi	{r4, r5, pc}
 80402ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80402b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80402b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80402b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80402bc:	d002      	beq.n	80402c4 <__adddf3+0x70>
 80402be:	4240      	negs	r0, r0
 80402c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80402c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80402c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80402cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80402d0:	d002      	beq.n	80402d8 <__adddf3+0x84>
 80402d2:	4252      	negs	r2, r2
 80402d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80402d8:	ea94 0f05 	teq	r4, r5
 80402dc:	f000 80a7 	beq.w	804042e <__adddf3+0x1da>
 80402e0:	f1a4 0401 	sub.w	r4, r4, #1
 80402e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80402e8:	db0d      	blt.n	8040306 <__adddf3+0xb2>
 80402ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80402ee:	fa22 f205 	lsr.w	r2, r2, r5
 80402f2:	1880      	adds	r0, r0, r2
 80402f4:	f141 0100 	adc.w	r1, r1, #0
 80402f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80402fc:	1880      	adds	r0, r0, r2
 80402fe:	fa43 f305 	asr.w	r3, r3, r5
 8040302:	4159      	adcs	r1, r3
 8040304:	e00e      	b.n	8040324 <__adddf3+0xd0>
 8040306:	f1a5 0520 	sub.w	r5, r5, #32
 804030a:	f10e 0e20 	add.w	lr, lr, #32
 804030e:	2a01      	cmp	r2, #1
 8040310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8040314:	bf28      	it	cs
 8040316:	f04c 0c02 	orrcs.w	ip, ip, #2
 804031a:	fa43 f305 	asr.w	r3, r3, r5
 804031e:	18c0      	adds	r0, r0, r3
 8040320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8040324:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040328:	d507      	bpl.n	804033a <__adddf3+0xe6>
 804032a:	f04f 0e00 	mov.w	lr, #0
 804032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8040332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8040336:	eb6e 0101 	sbc.w	r1, lr, r1
 804033a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 804033e:	d31b      	bcc.n	8040378 <__adddf3+0x124>
 8040340:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8040344:	d30c      	bcc.n	8040360 <__adddf3+0x10c>
 8040346:	0849      	lsrs	r1, r1, #1
 8040348:	ea5f 0030 	movs.w	r0, r0, rrx
 804034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8040350:	f104 0401 	add.w	r4, r4, #1
 8040354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8040358:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 804035c:	f080 809a 	bcs.w	8040494 <__adddf3+0x240>
 8040360:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8040364:	bf08      	it	eq
 8040366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 804036a:	f150 0000 	adcs.w	r0, r0, #0
 804036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040372:	ea41 0105 	orr.w	r1, r1, r5
 8040376:	bd30      	pop	{r4, r5, pc}
 8040378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 804037c:	4140      	adcs	r0, r0
 804037e:	eb41 0101 	adc.w	r1, r1, r1
 8040382:	3c01      	subs	r4, #1
 8040384:	bf28      	it	cs
 8040386:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 804038a:	d2e9      	bcs.n	8040360 <__adddf3+0x10c>
 804038c:	f091 0f00 	teq	r1, #0
 8040390:	bf04      	itt	eq
 8040392:	4601      	moveq	r1, r0
 8040394:	2000      	moveq	r0, #0
 8040396:	fab1 f381 	clz	r3, r1
 804039a:	bf08      	it	eq
 804039c:	3320      	addeq	r3, #32
 804039e:	f1a3 030b 	sub.w	r3, r3, #11
 80403a2:	f1b3 0220 	subs.w	r2, r3, #32
 80403a6:	da0c      	bge.n	80403c2 <__adddf3+0x16e>
 80403a8:	320c      	adds	r2, #12
 80403aa:	dd08      	ble.n	80403be <__adddf3+0x16a>
 80403ac:	f102 0c14 	add.w	ip, r2, #20
 80403b0:	f1c2 020c 	rsb	r2, r2, #12
 80403b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80403b8:	fa21 f102 	lsr.w	r1, r1, r2
 80403bc:	e00c      	b.n	80403d8 <__adddf3+0x184>
 80403be:	f102 0214 	add.w	r2, r2, #20
 80403c2:	bfd8      	it	le
 80403c4:	f1c2 0c20 	rsble	ip, r2, #32
 80403c8:	fa01 f102 	lsl.w	r1, r1, r2
 80403cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80403d0:	bfdc      	itt	le
 80403d2:	ea41 010c 	orrle.w	r1, r1, ip
 80403d6:	4090      	lslle	r0, r2
 80403d8:	1ae4      	subs	r4, r4, r3
 80403da:	bfa2      	ittt	ge
 80403dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80403e0:	4329      	orrge	r1, r5
 80403e2:	bd30      	popge	{r4, r5, pc}
 80403e4:	ea6f 0404 	mvn.w	r4, r4
 80403e8:	3c1f      	subs	r4, #31
 80403ea:	da1c      	bge.n	8040426 <__adddf3+0x1d2>
 80403ec:	340c      	adds	r4, #12
 80403ee:	dc0e      	bgt.n	804040e <__adddf3+0x1ba>
 80403f0:	f104 0414 	add.w	r4, r4, #20
 80403f4:	f1c4 0220 	rsb	r2, r4, #32
 80403f8:	fa20 f004 	lsr.w	r0, r0, r4
 80403fc:	fa01 f302 	lsl.w	r3, r1, r2
 8040400:	ea40 0003 	orr.w	r0, r0, r3
 8040404:	fa21 f304 	lsr.w	r3, r1, r4
 8040408:	ea45 0103 	orr.w	r1, r5, r3
 804040c:	bd30      	pop	{r4, r5, pc}
 804040e:	f1c4 040c 	rsb	r4, r4, #12
 8040412:	f1c4 0220 	rsb	r2, r4, #32
 8040416:	fa20 f002 	lsr.w	r0, r0, r2
 804041a:	fa01 f304 	lsl.w	r3, r1, r4
 804041e:	ea40 0003 	orr.w	r0, r0, r3
 8040422:	4629      	mov	r1, r5
 8040424:	bd30      	pop	{r4, r5, pc}
 8040426:	fa21 f004 	lsr.w	r0, r1, r4
 804042a:	4629      	mov	r1, r5
 804042c:	bd30      	pop	{r4, r5, pc}
 804042e:	f094 0f00 	teq	r4, #0
 8040432:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8040436:	bf06      	itte	eq
 8040438:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 804043c:	3401      	addeq	r4, #1
 804043e:	3d01      	subne	r5, #1
 8040440:	e74e      	b.n	80402e0 <__adddf3+0x8c>
 8040442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8040446:	bf18      	it	ne
 8040448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 804044c:	d029      	beq.n	80404a2 <__adddf3+0x24e>
 804044e:	ea94 0f05 	teq	r4, r5
 8040452:	bf08      	it	eq
 8040454:	ea90 0f02 	teqeq	r0, r2
 8040458:	d005      	beq.n	8040466 <__adddf3+0x212>
 804045a:	ea54 0c00 	orrs.w	ip, r4, r0
 804045e:	bf04      	itt	eq
 8040460:	4619      	moveq	r1, r3
 8040462:	4610      	moveq	r0, r2
 8040464:	bd30      	pop	{r4, r5, pc}
 8040466:	ea91 0f03 	teq	r1, r3
 804046a:	bf1e      	ittt	ne
 804046c:	2100      	movne	r1, #0
 804046e:	2000      	movne	r0, #0
 8040470:	bd30      	popne	{r4, r5, pc}
 8040472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8040476:	d105      	bne.n	8040484 <__adddf3+0x230>
 8040478:	0040      	lsls	r0, r0, #1
 804047a:	4149      	adcs	r1, r1
 804047c:	bf28      	it	cs
 804047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8040482:	bd30      	pop	{r4, r5, pc}
 8040484:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8040488:	bf3c      	itt	cc
 804048a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 804048e:	bd30      	popcc	{r4, r5, pc}
 8040490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8040494:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8040498:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 804049c:	f04f 0000 	mov.w	r0, #0
 80404a0:	bd30      	pop	{r4, r5, pc}
 80404a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80404a6:	bf1a      	itte	ne
 80404a8:	4619      	movne	r1, r3
 80404aa:	4610      	movne	r0, r2
 80404ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80404b0:	bf1c      	itt	ne
 80404b2:	460b      	movne	r3, r1
 80404b4:	4602      	movne	r2, r0
 80404b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80404ba:	bf06      	itte	eq
 80404bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80404c0:	ea91 0f03 	teqeq	r1, r3
 80404c4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80404c8:	bd30      	pop	{r4, r5, pc}
 80404ca:	bf00      	nop

080404cc <__aeabi_ui2d>:
 80404cc:	f090 0f00 	teq	r0, #0
 80404d0:	bf04      	itt	eq
 80404d2:	2100      	moveq	r1, #0
 80404d4:	4770      	bxeq	lr
 80404d6:	b530      	push	{r4, r5, lr}
 80404d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80404dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80404e0:	f04f 0500 	mov.w	r5, #0
 80404e4:	f04f 0100 	mov.w	r1, #0
 80404e8:	e750      	b.n	804038c <__adddf3+0x138>
 80404ea:	bf00      	nop

080404ec <__aeabi_i2d>:
 80404ec:	f090 0f00 	teq	r0, #0
 80404f0:	bf04      	itt	eq
 80404f2:	2100      	moveq	r1, #0
 80404f4:	4770      	bxeq	lr
 80404f6:	b530      	push	{r4, r5, lr}
 80404f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80404fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040500:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8040504:	bf48      	it	mi
 8040506:	4240      	negmi	r0, r0
 8040508:	f04f 0100 	mov.w	r1, #0
 804050c:	e73e      	b.n	804038c <__adddf3+0x138>
 804050e:	bf00      	nop

08040510 <__aeabi_f2d>:
 8040510:	0042      	lsls	r2, r0, #1
 8040512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8040516:	ea4f 0131 	mov.w	r1, r1, rrx
 804051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 804051e:	bf1f      	itttt	ne
 8040520:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8040524:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8040528:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 804052c:	4770      	bxne	lr
 804052e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8040532:	bf08      	it	eq
 8040534:	4770      	bxeq	lr
 8040536:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 804053a:	bf04      	itt	eq
 804053c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8040540:	4770      	bxeq	lr
 8040542:	b530      	push	{r4, r5, lr}
 8040544:	f44f 7460 	mov.w	r4, #896	; 0x380
 8040548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 804054c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8040550:	e71c      	b.n	804038c <__adddf3+0x138>
 8040552:	bf00      	nop

08040554 <__aeabi_ul2d>:
 8040554:	ea50 0201 	orrs.w	r2, r0, r1
 8040558:	bf08      	it	eq
 804055a:	4770      	bxeq	lr
 804055c:	b530      	push	{r4, r5, lr}
 804055e:	f04f 0500 	mov.w	r5, #0
 8040562:	e00a      	b.n	804057a <__aeabi_l2d+0x16>

08040564 <__aeabi_l2d>:
 8040564:	ea50 0201 	orrs.w	r2, r0, r1
 8040568:	bf08      	it	eq
 804056a:	4770      	bxeq	lr
 804056c:	b530      	push	{r4, r5, lr}
 804056e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8040572:	d502      	bpl.n	804057a <__aeabi_l2d+0x16>
 8040574:	4240      	negs	r0, r0
 8040576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 804057a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 804057e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8040582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8040586:	f43f aed8 	beq.w	804033a <__adddf3+0xe6>
 804058a:	f04f 0203 	mov.w	r2, #3
 804058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8040592:	bf18      	it	ne
 8040594:	3203      	addne	r2, #3
 8040596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 804059a:	bf18      	it	ne
 804059c:	3203      	addne	r2, #3
 804059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80405a2:	f1c2 0320 	rsb	r3, r2, #32
 80405a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80405aa:	fa20 f002 	lsr.w	r0, r0, r2
 80405ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80405b2:	ea40 000e 	orr.w	r0, r0, lr
 80405b6:	fa21 f102 	lsr.w	r1, r1, r2
 80405ba:	4414      	add	r4, r2
 80405bc:	e6bd      	b.n	804033a <__adddf3+0xe6>
 80405be:	bf00      	nop

080405c0 <__aeabi_dmul>:
 80405c0:	b570      	push	{r4, r5, r6, lr}
 80405c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80405c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80405ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80405ce:	bf1d      	ittte	ne
 80405d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80405d4:	ea94 0f0c 	teqne	r4, ip
 80405d8:	ea95 0f0c 	teqne	r5, ip
 80405dc:	f000 f8de 	bleq	804079c <__aeabi_dmul+0x1dc>
 80405e0:	442c      	add	r4, r5
 80405e2:	ea81 0603 	eor.w	r6, r1, r3
 80405e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80405ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80405ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80405f2:	bf18      	it	ne
 80405f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80405f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80405fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8040600:	d038      	beq.n	8040674 <__aeabi_dmul+0xb4>
 8040602:	fba0 ce02 	umull	ip, lr, r0, r2
 8040606:	f04f 0500 	mov.w	r5, #0
 804060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 804060e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8040612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8040616:	f04f 0600 	mov.w	r6, #0
 804061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 804061e:	f09c 0f00 	teq	ip, #0
 8040622:	bf18      	it	ne
 8040624:	f04e 0e01 	orrne.w	lr, lr, #1
 8040628:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 804062c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8040630:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8040634:	d204      	bcs.n	8040640 <__aeabi_dmul+0x80>
 8040636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 804063a:	416d      	adcs	r5, r5
 804063c:	eb46 0606 	adc.w	r6, r6, r6
 8040640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8040644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8040648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 804064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8040650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8040654:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040658:	bf88      	it	hi
 804065a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 804065e:	d81e      	bhi.n	804069e <__aeabi_dmul+0xde>
 8040660:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8040664:	bf08      	it	eq
 8040666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 804066a:	f150 0000 	adcs.w	r0, r0, #0
 804066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040672:	bd70      	pop	{r4, r5, r6, pc}
 8040674:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8040678:	ea46 0101 	orr.w	r1, r6, r1
 804067c:	ea40 0002 	orr.w	r0, r0, r2
 8040680:	ea81 0103 	eor.w	r1, r1, r3
 8040684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8040688:	bfc2      	ittt	gt
 804068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 804068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8040692:	bd70      	popgt	{r4, r5, r6, pc}
 8040694:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040698:	f04f 0e00 	mov.w	lr, #0
 804069c:	3c01      	subs	r4, #1
 804069e:	f300 80ab 	bgt.w	80407f8 <__aeabi_dmul+0x238>
 80406a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80406a6:	bfde      	ittt	le
 80406a8:	2000      	movle	r0, #0
 80406aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80406ae:	bd70      	pople	{r4, r5, r6, pc}
 80406b0:	f1c4 0400 	rsb	r4, r4, #0
 80406b4:	3c20      	subs	r4, #32
 80406b6:	da35      	bge.n	8040724 <__aeabi_dmul+0x164>
 80406b8:	340c      	adds	r4, #12
 80406ba:	dc1b      	bgt.n	80406f4 <__aeabi_dmul+0x134>
 80406bc:	f104 0414 	add.w	r4, r4, #20
 80406c0:	f1c4 0520 	rsb	r5, r4, #32
 80406c4:	fa00 f305 	lsl.w	r3, r0, r5
 80406c8:	fa20 f004 	lsr.w	r0, r0, r4
 80406cc:	fa01 f205 	lsl.w	r2, r1, r5
 80406d0:	ea40 0002 	orr.w	r0, r0, r2
 80406d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80406d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80406dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80406e0:	fa21 f604 	lsr.w	r6, r1, r4
 80406e4:	eb42 0106 	adc.w	r1, r2, r6
 80406e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80406ec:	bf08      	it	eq
 80406ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80406f2:	bd70      	pop	{r4, r5, r6, pc}
 80406f4:	f1c4 040c 	rsb	r4, r4, #12
 80406f8:	f1c4 0520 	rsb	r5, r4, #32
 80406fc:	fa00 f304 	lsl.w	r3, r0, r4
 8040700:	fa20 f005 	lsr.w	r0, r0, r5
 8040704:	fa01 f204 	lsl.w	r2, r1, r4
 8040708:	ea40 0002 	orr.w	r0, r0, r2
 804070c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8040714:	f141 0100 	adc.w	r1, r1, #0
 8040718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 804071c:	bf08      	it	eq
 804071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8040722:	bd70      	pop	{r4, r5, r6, pc}
 8040724:	f1c4 0520 	rsb	r5, r4, #32
 8040728:	fa00 f205 	lsl.w	r2, r0, r5
 804072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8040730:	fa20 f304 	lsr.w	r3, r0, r4
 8040734:	fa01 f205 	lsl.w	r2, r1, r5
 8040738:	ea43 0302 	orr.w	r3, r3, r2
 804073c:	fa21 f004 	lsr.w	r0, r1, r4
 8040740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8040744:	fa21 f204 	lsr.w	r2, r1, r4
 8040748:	ea20 0002 	bic.w	r0, r0, r2
 804074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8040750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8040754:	bf08      	it	eq
 8040756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 804075a:	bd70      	pop	{r4, r5, r6, pc}
 804075c:	f094 0f00 	teq	r4, #0
 8040760:	d10f      	bne.n	8040782 <__aeabi_dmul+0x1c2>
 8040762:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8040766:	0040      	lsls	r0, r0, #1
 8040768:	eb41 0101 	adc.w	r1, r1, r1
 804076c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040770:	bf08      	it	eq
 8040772:	3c01      	subeq	r4, #1
 8040774:	d0f7      	beq.n	8040766 <__aeabi_dmul+0x1a6>
 8040776:	ea41 0106 	orr.w	r1, r1, r6
 804077a:	f095 0f00 	teq	r5, #0
 804077e:	bf18      	it	ne
 8040780:	4770      	bxne	lr
 8040782:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8040786:	0052      	lsls	r2, r2, #1
 8040788:	eb43 0303 	adc.w	r3, r3, r3
 804078c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8040790:	bf08      	it	eq
 8040792:	3d01      	subeq	r5, #1
 8040794:	d0f7      	beq.n	8040786 <__aeabi_dmul+0x1c6>
 8040796:	ea43 0306 	orr.w	r3, r3, r6
 804079a:	4770      	bx	lr
 804079c:	ea94 0f0c 	teq	r4, ip
 80407a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80407a4:	bf18      	it	ne
 80407a6:	ea95 0f0c 	teqne	r5, ip
 80407aa:	d00c      	beq.n	80407c6 <__aeabi_dmul+0x206>
 80407ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80407b0:	bf18      	it	ne
 80407b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80407b6:	d1d1      	bne.n	804075c <__aeabi_dmul+0x19c>
 80407b8:	ea81 0103 	eor.w	r1, r1, r3
 80407bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80407c0:	f04f 0000 	mov.w	r0, #0
 80407c4:	bd70      	pop	{r4, r5, r6, pc}
 80407c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80407ca:	bf06      	itte	eq
 80407cc:	4610      	moveq	r0, r2
 80407ce:	4619      	moveq	r1, r3
 80407d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80407d4:	d019      	beq.n	804080a <__aeabi_dmul+0x24a>
 80407d6:	ea94 0f0c 	teq	r4, ip
 80407da:	d102      	bne.n	80407e2 <__aeabi_dmul+0x222>
 80407dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80407e0:	d113      	bne.n	804080a <__aeabi_dmul+0x24a>
 80407e2:	ea95 0f0c 	teq	r5, ip
 80407e6:	d105      	bne.n	80407f4 <__aeabi_dmul+0x234>
 80407e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80407ec:	bf1c      	itt	ne
 80407ee:	4610      	movne	r0, r2
 80407f0:	4619      	movne	r1, r3
 80407f2:	d10a      	bne.n	804080a <__aeabi_dmul+0x24a>
 80407f4:	ea81 0103 	eor.w	r1, r1, r3
 80407f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80407fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8040800:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8040804:	f04f 0000 	mov.w	r0, #0
 8040808:	bd70      	pop	{r4, r5, r6, pc}
 804080a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 804080e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8040812:	bd70      	pop	{r4, r5, r6, pc}

08040814 <__aeabi_ddiv>:
 8040814:	b570      	push	{r4, r5, r6, lr}
 8040816:	f04f 0cff 	mov.w	ip, #255	; 0xff
 804081a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 804081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8040822:	bf1d      	ittte	ne
 8040824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8040828:	ea94 0f0c 	teqne	r4, ip
 804082c:	ea95 0f0c 	teqne	r5, ip
 8040830:	f000 f8a7 	bleq	8040982 <__aeabi_ddiv+0x16e>
 8040834:	eba4 0405 	sub.w	r4, r4, r5
 8040838:	ea81 0e03 	eor.w	lr, r1, r3
 804083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8040840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8040844:	f000 8088 	beq.w	8040958 <__aeabi_ddiv+0x144>
 8040848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 804084c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8040850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8040854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8040858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 804085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8040860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8040864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8040868:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 804086c:	429d      	cmp	r5, r3
 804086e:	bf08      	it	eq
 8040870:	4296      	cmpeq	r6, r2
 8040872:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8040876:	f504 7440 	add.w	r4, r4, #768	; 0x300
 804087a:	d202      	bcs.n	8040882 <__aeabi_ddiv+0x6e>
 804087c:	085b      	lsrs	r3, r3, #1
 804087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8040882:	1ab6      	subs	r6, r6, r2
 8040884:	eb65 0503 	sbc.w	r5, r5, r3
 8040888:	085b      	lsrs	r3, r3, #1
 804088a:	ea4f 0232 	mov.w	r2, r2, rrx
 804088e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8040892:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8040896:	ebb6 0e02 	subs.w	lr, r6, r2
 804089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 804089e:	bf22      	ittt	cs
 80408a0:	1ab6      	subcs	r6, r6, r2
 80408a2:	4675      	movcs	r5, lr
 80408a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80408a8:	085b      	lsrs	r3, r3, #1
 80408aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80408ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80408b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408b6:	bf22      	ittt	cs
 80408b8:	1ab6      	subcs	r6, r6, r2
 80408ba:	4675      	movcs	r5, lr
 80408bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80408c0:	085b      	lsrs	r3, r3, #1
 80408c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80408c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80408ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408ce:	bf22      	ittt	cs
 80408d0:	1ab6      	subcs	r6, r6, r2
 80408d2:	4675      	movcs	r5, lr
 80408d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80408d8:	085b      	lsrs	r3, r3, #1
 80408da:	ea4f 0232 	mov.w	r2, r2, rrx
 80408de:	ebb6 0e02 	subs.w	lr, r6, r2
 80408e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80408e6:	bf22      	ittt	cs
 80408e8:	1ab6      	subcs	r6, r6, r2
 80408ea:	4675      	movcs	r5, lr
 80408ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80408f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80408f4:	d018      	beq.n	8040928 <__aeabi_ddiv+0x114>
 80408f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80408fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80408fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8040902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8040906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 804090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 804090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8040912:	d1c0      	bne.n	8040896 <__aeabi_ddiv+0x82>
 8040914:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8040918:	d10b      	bne.n	8040932 <__aeabi_ddiv+0x11e>
 804091a:	ea41 0100 	orr.w	r1, r1, r0
 804091e:	f04f 0000 	mov.w	r0, #0
 8040922:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8040926:	e7b6      	b.n	8040896 <__aeabi_ddiv+0x82>
 8040928:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 804092c:	bf04      	itt	eq
 804092e:	4301      	orreq	r1, r0
 8040930:	2000      	moveq	r0, #0
 8040932:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8040936:	bf88      	it	hi
 8040938:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 804093c:	f63f aeaf 	bhi.w	804069e <__aeabi_dmul+0xde>
 8040940:	ebb5 0c03 	subs.w	ip, r5, r3
 8040944:	bf04      	itt	eq
 8040946:	ebb6 0c02 	subseq.w	ip, r6, r2
 804094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 804094e:	f150 0000 	adcs.w	r0, r0, #0
 8040952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8040956:	bd70      	pop	{r4, r5, r6, pc}
 8040958:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 804095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8040960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8040964:	bfc2      	ittt	gt
 8040966:	ebd4 050c 	rsbsgt	r5, r4, ip
 804096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 804096e:	bd70      	popgt	{r4, r5, r6, pc}
 8040970:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040974:	f04f 0e00 	mov.w	lr, #0
 8040978:	3c01      	subs	r4, #1
 804097a:	e690      	b.n	804069e <__aeabi_dmul+0xde>
 804097c:	ea45 0e06 	orr.w	lr, r5, r6
 8040980:	e68d      	b.n	804069e <__aeabi_dmul+0xde>
 8040982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8040986:	ea94 0f0c 	teq	r4, ip
 804098a:	bf08      	it	eq
 804098c:	ea95 0f0c 	teqeq	r5, ip
 8040990:	f43f af3b 	beq.w	804080a <__aeabi_dmul+0x24a>
 8040994:	ea94 0f0c 	teq	r4, ip
 8040998:	d10a      	bne.n	80409b0 <__aeabi_ddiv+0x19c>
 804099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 804099e:	f47f af34 	bne.w	804080a <__aeabi_dmul+0x24a>
 80409a2:	ea95 0f0c 	teq	r5, ip
 80409a6:	f47f af25 	bne.w	80407f4 <__aeabi_dmul+0x234>
 80409aa:	4610      	mov	r0, r2
 80409ac:	4619      	mov	r1, r3
 80409ae:	e72c      	b.n	804080a <__aeabi_dmul+0x24a>
 80409b0:	ea95 0f0c 	teq	r5, ip
 80409b4:	d106      	bne.n	80409c4 <__aeabi_ddiv+0x1b0>
 80409b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80409ba:	f43f aefd 	beq.w	80407b8 <__aeabi_dmul+0x1f8>
 80409be:	4610      	mov	r0, r2
 80409c0:	4619      	mov	r1, r3
 80409c2:	e722      	b.n	804080a <__aeabi_dmul+0x24a>
 80409c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80409c8:	bf18      	it	ne
 80409ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80409ce:	f47f aec5 	bne.w	804075c <__aeabi_dmul+0x19c>
 80409d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80409d6:	f47f af0d 	bne.w	80407f4 <__aeabi_dmul+0x234>
 80409da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80409de:	f47f aeeb 	bne.w	80407b8 <__aeabi_dmul+0x1f8>
 80409e2:	e712      	b.n	804080a <__aeabi_dmul+0x24a>

080409e4 <__gedf2>:
 80409e4:	f04f 3cff 	mov.w	ip, #4294967295
 80409e8:	e006      	b.n	80409f8 <__cmpdf2+0x4>
 80409ea:	bf00      	nop

080409ec <__ledf2>:
 80409ec:	f04f 0c01 	mov.w	ip, #1
 80409f0:	e002      	b.n	80409f8 <__cmpdf2+0x4>
 80409f2:	bf00      	nop

080409f4 <__cmpdf2>:
 80409f4:	f04f 0c01 	mov.w	ip, #1
 80409f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80409fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a08:	bf18      	it	ne
 8040a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8040a0e:	d01b      	beq.n	8040a48 <__cmpdf2+0x54>
 8040a10:	b001      	add	sp, #4
 8040a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8040a16:	bf0c      	ite	eq
 8040a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8040a1c:	ea91 0f03 	teqne	r1, r3
 8040a20:	bf02      	ittt	eq
 8040a22:	ea90 0f02 	teqeq	r0, r2
 8040a26:	2000      	moveq	r0, #0
 8040a28:	4770      	bxeq	lr
 8040a2a:	f110 0f00 	cmn.w	r0, #0
 8040a2e:	ea91 0f03 	teq	r1, r3
 8040a32:	bf58      	it	pl
 8040a34:	4299      	cmppl	r1, r3
 8040a36:	bf08      	it	eq
 8040a38:	4290      	cmpeq	r0, r2
 8040a3a:	bf2c      	ite	cs
 8040a3c:	17d8      	asrcs	r0, r3, #31
 8040a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8040a42:	f040 0001 	orr.w	r0, r0, #1
 8040a46:	4770      	bx	lr
 8040a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a50:	d102      	bne.n	8040a58 <__cmpdf2+0x64>
 8040a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040a56:	d107      	bne.n	8040a68 <__cmpdf2+0x74>
 8040a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040a60:	d1d6      	bne.n	8040a10 <__cmpdf2+0x1c>
 8040a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040a66:	d0d3      	beq.n	8040a10 <__cmpdf2+0x1c>
 8040a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8040a6c:	4770      	bx	lr
 8040a6e:	bf00      	nop

08040a70 <__aeabi_cdrcmple>:
 8040a70:	4684      	mov	ip, r0
 8040a72:	4610      	mov	r0, r2
 8040a74:	4662      	mov	r2, ip
 8040a76:	468c      	mov	ip, r1
 8040a78:	4619      	mov	r1, r3
 8040a7a:	4663      	mov	r3, ip
 8040a7c:	e000      	b.n	8040a80 <__aeabi_cdcmpeq>
 8040a7e:	bf00      	nop

08040a80 <__aeabi_cdcmpeq>:
 8040a80:	b501      	push	{r0, lr}
 8040a82:	f7ff ffb7 	bl	80409f4 <__cmpdf2>
 8040a86:	2800      	cmp	r0, #0
 8040a88:	bf48      	it	mi
 8040a8a:	f110 0f00 	cmnmi.w	r0, #0
 8040a8e:	bd01      	pop	{r0, pc}

08040a90 <__aeabi_dcmpeq>:
 8040a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040a94:	f7ff fff4 	bl	8040a80 <__aeabi_cdcmpeq>
 8040a98:	bf0c      	ite	eq
 8040a9a:	2001      	moveq	r0, #1
 8040a9c:	2000      	movne	r0, #0
 8040a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8040aa2:	bf00      	nop

08040aa4 <__aeabi_dcmplt>:
 8040aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040aa8:	f7ff ffea 	bl	8040a80 <__aeabi_cdcmpeq>
 8040aac:	bf34      	ite	cc
 8040aae:	2001      	movcc	r0, #1
 8040ab0:	2000      	movcs	r0, #0
 8040ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8040ab6:	bf00      	nop

08040ab8 <__aeabi_dcmple>:
 8040ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040abc:	f7ff ffe0 	bl	8040a80 <__aeabi_cdcmpeq>
 8040ac0:	bf94      	ite	ls
 8040ac2:	2001      	movls	r0, #1
 8040ac4:	2000      	movhi	r0, #0
 8040ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8040aca:	bf00      	nop

08040acc <__aeabi_dcmpge>:
 8040acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040ad0:	f7ff ffce 	bl	8040a70 <__aeabi_cdrcmple>
 8040ad4:	bf94      	ite	ls
 8040ad6:	2001      	movls	r0, #1
 8040ad8:	2000      	movhi	r0, #0
 8040ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8040ade:	bf00      	nop

08040ae0 <__aeabi_dcmpgt>:
 8040ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8040ae4:	f7ff ffc4 	bl	8040a70 <__aeabi_cdrcmple>
 8040ae8:	bf34      	ite	cc
 8040aea:	2001      	movcc	r0, #1
 8040aec:	2000      	movcs	r0, #0
 8040aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8040af2:	bf00      	nop

08040af4 <__aeabi_dcmpun>:
 8040af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8040af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040afc:	d102      	bne.n	8040b04 <__aeabi_dcmpun+0x10>
 8040afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8040b02:	d10a      	bne.n	8040b1a <__aeabi_dcmpun+0x26>
 8040b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8040b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8040b0c:	d102      	bne.n	8040b14 <__aeabi_dcmpun+0x20>
 8040b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8040b12:	d102      	bne.n	8040b1a <__aeabi_dcmpun+0x26>
 8040b14:	f04f 0000 	mov.w	r0, #0
 8040b18:	4770      	bx	lr
 8040b1a:	f04f 0001 	mov.w	r0, #1
 8040b1e:	4770      	bx	lr

08040b20 <__aeabi_d2iz>:
 8040b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040b24:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040b28:	d215      	bcs.n	8040b56 <__aeabi_d2iz+0x36>
 8040b2a:	d511      	bpl.n	8040b50 <__aeabi_d2iz+0x30>
 8040b2c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040b34:	d912      	bls.n	8040b5c <__aeabi_d2iz+0x3c>
 8040b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040b3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040b42:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8040b46:	fa23 f002 	lsr.w	r0, r3, r2
 8040b4a:	bf18      	it	ne
 8040b4c:	4240      	negne	r0, r0
 8040b4e:	4770      	bx	lr
 8040b50:	f04f 0000 	mov.w	r0, #0
 8040b54:	4770      	bx	lr
 8040b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040b5a:	d105      	bne.n	8040b68 <__aeabi_d2iz+0x48>
 8040b5c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8040b60:	bf08      	it	eq
 8040b62:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8040b66:	4770      	bx	lr
 8040b68:	f04f 0000 	mov.w	r0, #0
 8040b6c:	4770      	bx	lr
 8040b6e:	bf00      	nop

08040b70 <__aeabi_d2uiz>:
 8040b70:	004a      	lsls	r2, r1, #1
 8040b72:	d211      	bcs.n	8040b98 <__aeabi_d2uiz+0x28>
 8040b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8040b78:	d211      	bcs.n	8040b9e <__aeabi_d2uiz+0x2e>
 8040b7a:	d50d      	bpl.n	8040b98 <__aeabi_d2uiz+0x28>
 8040b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8040b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8040b84:	d40e      	bmi.n	8040ba4 <__aeabi_d2uiz+0x34>
 8040b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8040b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8040b92:	fa23 f002 	lsr.w	r0, r3, r2
 8040b96:	4770      	bx	lr
 8040b98:	f04f 0000 	mov.w	r0, #0
 8040b9c:	4770      	bx	lr
 8040b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8040ba2:	d102      	bne.n	8040baa <__aeabi_d2uiz+0x3a>
 8040ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8040ba8:	4770      	bx	lr
 8040baa:	f04f 0000 	mov.w	r0, #0
 8040bae:	4770      	bx	lr

08040bb0 <__aeabi_d2f>:
 8040bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8040bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8040bb8:	bf24      	itt	cs
 8040bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8040bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8040bc2:	d90d      	bls.n	8040be0 <__aeabi_d2f+0x30>
 8040bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8040bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8040bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8040bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8040bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8040bd8:	bf08      	it	eq
 8040bda:	f020 0001 	biceq.w	r0, r0, #1
 8040bde:	4770      	bx	lr
 8040be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8040be4:	d121      	bne.n	8040c2a <__aeabi_d2f+0x7a>
 8040be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8040bea:	bfbc      	itt	lt
 8040bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8040bf0:	4770      	bxlt	lr
 8040bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8040bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8040bfa:	f1c2 0218 	rsb	r2, r2, #24
 8040bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8040c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8040c06:	fa20 f002 	lsr.w	r0, r0, r2
 8040c0a:	bf18      	it	ne
 8040c0c:	f040 0001 	orrne.w	r0, r0, #1
 8040c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8040c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8040c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8040c1c:	ea40 000c 	orr.w	r0, r0, ip
 8040c20:	fa23 f302 	lsr.w	r3, r3, r2
 8040c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8040c28:	e7cc      	b.n	8040bc4 <__aeabi_d2f+0x14>
 8040c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8040c2e:	d107      	bne.n	8040c40 <__aeabi_d2f+0x90>
 8040c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8040c34:	bf1e      	ittt	ne
 8040c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8040c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8040c3e:	4770      	bxne	lr
 8040c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8040c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8040c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8040c4c:	4770      	bx	lr
 8040c4e:	bf00      	nop

08040c50 <__aeabi_uldivmod>:
 8040c50:	b953      	cbnz	r3, 8040c68 <__aeabi_uldivmod+0x18>
 8040c52:	b94a      	cbnz	r2, 8040c68 <__aeabi_uldivmod+0x18>
 8040c54:	2900      	cmp	r1, #0
 8040c56:	bf08      	it	eq
 8040c58:	2800      	cmpeq	r0, #0
 8040c5a:	bf1c      	itt	ne
 8040c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8040c60:	f04f 30ff 	movne.w	r0, #4294967295
 8040c64:	f000 b9b6 	b.w	8040fd4 <__aeabi_idiv0>
 8040c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8040c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040c70:	f000 f83c 	bl	8040cec <__udivmoddi4>
 8040c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040c7c:	b004      	add	sp, #16
 8040c7e:	4770      	bx	lr

08040c80 <__aeabi_d2lz>:
 8040c80:	b538      	push	{r3, r4, r5, lr}
 8040c82:	2200      	movs	r2, #0
 8040c84:	2300      	movs	r3, #0
 8040c86:	4604      	mov	r4, r0
 8040c88:	460d      	mov	r5, r1
 8040c8a:	f7ff ff0b 	bl	8040aa4 <__aeabi_dcmplt>
 8040c8e:	b928      	cbnz	r0, 8040c9c <__aeabi_d2lz+0x1c>
 8040c90:	4620      	mov	r0, r4
 8040c92:	4629      	mov	r1, r5
 8040c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8040c98:	f000 b80a 	b.w	8040cb0 <__aeabi_d2ulz>
 8040c9c:	4620      	mov	r0, r4
 8040c9e:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8040ca2:	f000 f805 	bl	8040cb0 <__aeabi_d2ulz>
 8040ca6:	4240      	negs	r0, r0
 8040ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8040cac:	bd38      	pop	{r3, r4, r5, pc}
 8040cae:	bf00      	nop

08040cb0 <__aeabi_d2ulz>:
 8040cb0:	b5d0      	push	{r4, r6, r7, lr}
 8040cb2:	2200      	movs	r2, #0
 8040cb4:	4b0b      	ldr	r3, [pc, #44]	; (8040ce4 <__aeabi_d2ulz+0x34>)
 8040cb6:	4606      	mov	r6, r0
 8040cb8:	460f      	mov	r7, r1
 8040cba:	f7ff fc81 	bl	80405c0 <__aeabi_dmul>
 8040cbe:	f7ff ff57 	bl	8040b70 <__aeabi_d2uiz>
 8040cc2:	4604      	mov	r4, r0
 8040cc4:	f7ff fc02 	bl	80404cc <__aeabi_ui2d>
 8040cc8:	2200      	movs	r2, #0
 8040cca:	4b07      	ldr	r3, [pc, #28]	; (8040ce8 <__aeabi_d2ulz+0x38>)
 8040ccc:	f7ff fc78 	bl	80405c0 <__aeabi_dmul>
 8040cd0:	4602      	mov	r2, r0
 8040cd2:	460b      	mov	r3, r1
 8040cd4:	4630      	mov	r0, r6
 8040cd6:	4639      	mov	r1, r7
 8040cd8:	f7ff faba 	bl	8040250 <__aeabi_dsub>
 8040cdc:	f7ff ff48 	bl	8040b70 <__aeabi_d2uiz>
 8040ce0:	4621      	mov	r1, r4
 8040ce2:	bdd0      	pop	{r4, r6, r7, pc}
 8040ce4:	3df00000 	.word	0x3df00000
 8040ce8:	41f00000 	.word	0x41f00000

08040cec <__udivmoddi4>:
 8040cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8040cf0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8040cf2:	4604      	mov	r4, r0
 8040cf4:	4688      	mov	r8, r1
 8040cf6:	2b00      	cmp	r3, #0
 8040cf8:	f040 8084 	bne.w	8040e04 <__udivmoddi4+0x118>
 8040cfc:	428a      	cmp	r2, r1
 8040cfe:	4617      	mov	r7, r2
 8040d00:	d943      	bls.n	8040d8a <__udivmoddi4+0x9e>
 8040d02:	fab2 f282 	clz	r2, r2
 8040d06:	b142      	cbz	r2, 8040d1a <__udivmoddi4+0x2e>
 8040d08:	f1c2 0020 	rsb	r0, r2, #32
 8040d0c:	4091      	lsls	r1, r2
 8040d0e:	4097      	lsls	r7, r2
 8040d10:	fa24 f000 	lsr.w	r0, r4, r0
 8040d14:	4094      	lsls	r4, r2
 8040d16:	ea40 0801 	orr.w	r8, r0, r1
 8040d1a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8040d1e:	0c23      	lsrs	r3, r4, #16
 8040d20:	fa1f fe87 	uxth.w	lr, r7
 8040d24:	fbb8 f6fc 	udiv	r6, r8, ip
 8040d28:	fb0c 8116 	mls	r1, ip, r6, r8
 8040d2c:	fb06 f00e 	mul.w	r0, r6, lr
 8040d30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8040d34:	4298      	cmp	r0, r3
 8040d36:	d907      	bls.n	8040d48 <__udivmoddi4+0x5c>
 8040d38:	18fb      	adds	r3, r7, r3
 8040d3a:	f106 31ff 	add.w	r1, r6, #4294967295
 8040d3e:	d202      	bcs.n	8040d46 <__udivmoddi4+0x5a>
 8040d40:	4298      	cmp	r0, r3
 8040d42:	f200 8131 	bhi.w	8040fa8 <__udivmoddi4+0x2bc>
 8040d46:	460e      	mov	r6, r1
 8040d48:	1a19      	subs	r1, r3, r0
 8040d4a:	b2a3      	uxth	r3, r4
 8040d4c:	fbb1 f0fc 	udiv	r0, r1, ip
 8040d50:	fb0c 1110 	mls	r1, ip, r0, r1
 8040d54:	fb00 fe0e 	mul.w	lr, r0, lr
 8040d58:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040d5c:	45a6      	cmp	lr, r4
 8040d5e:	d907      	bls.n	8040d70 <__udivmoddi4+0x84>
 8040d60:	193c      	adds	r4, r7, r4
 8040d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8040d66:	d202      	bcs.n	8040d6e <__udivmoddi4+0x82>
 8040d68:	45a6      	cmp	lr, r4
 8040d6a:	f200 811a 	bhi.w	8040fa2 <__udivmoddi4+0x2b6>
 8040d6e:	4618      	mov	r0, r3
 8040d70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040d74:	eba4 040e 	sub.w	r4, r4, lr
 8040d78:	2600      	movs	r6, #0
 8040d7a:	b11d      	cbz	r5, 8040d84 <__udivmoddi4+0x98>
 8040d7c:	40d4      	lsrs	r4, r2
 8040d7e:	2300      	movs	r3, #0
 8040d80:	e9c5 4300 	strd	r4, r3, [r5]
 8040d84:	4631      	mov	r1, r6
 8040d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040d8a:	b902      	cbnz	r2, 8040d8e <__udivmoddi4+0xa2>
 8040d8c:	deff      	udf	#255	; 0xff
 8040d8e:	fab2 f282 	clz	r2, r2
 8040d92:	2a00      	cmp	r2, #0
 8040d94:	d152      	bne.n	8040e3c <__udivmoddi4+0x150>
 8040d96:	1bcb      	subs	r3, r1, r7
 8040d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040d9c:	fa1f f887 	uxth.w	r8, r7
 8040da0:	2601      	movs	r6, #1
 8040da2:	0c21      	lsrs	r1, r4, #16
 8040da4:	fbb3 fcfe 	udiv	ip, r3, lr
 8040da8:	fb0e 301c 	mls	r0, lr, ip, r3
 8040dac:	fb08 f90c 	mul.w	r9, r8, ip
 8040db0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8040db4:	4589      	cmp	r9, r1
 8040db6:	d90b      	bls.n	8040dd0 <__udivmoddi4+0xe4>
 8040db8:	1879      	adds	r1, r7, r1
 8040dba:	f10c 33ff 	add.w	r3, ip, #4294967295
 8040dbe:	bf2c      	ite	cs
 8040dc0:	2001      	movcs	r0, #1
 8040dc2:	2000      	movcc	r0, #0
 8040dc4:	4589      	cmp	r9, r1
 8040dc6:	d902      	bls.n	8040dce <__udivmoddi4+0xe2>
 8040dc8:	2800      	cmp	r0, #0
 8040dca:	f000 80f0 	beq.w	8040fae <__udivmoddi4+0x2c2>
 8040dce:	469c      	mov	ip, r3
 8040dd0:	eba1 0109 	sub.w	r1, r1, r9
 8040dd4:	b2a3      	uxth	r3, r4
 8040dd6:	fbb1 f0fe 	udiv	r0, r1, lr
 8040dda:	fb0e 1110 	mls	r1, lr, r0, r1
 8040dde:	fb08 f800 	mul.w	r8, r8, r0
 8040de2:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040de6:	45a0      	cmp	r8, r4
 8040de8:	d907      	bls.n	8040dfa <__udivmoddi4+0x10e>
 8040dea:	193c      	adds	r4, r7, r4
 8040dec:	f100 33ff 	add.w	r3, r0, #4294967295
 8040df0:	d202      	bcs.n	8040df8 <__udivmoddi4+0x10c>
 8040df2:	45a0      	cmp	r8, r4
 8040df4:	f200 80d2 	bhi.w	8040f9c <__udivmoddi4+0x2b0>
 8040df8:	4618      	mov	r0, r3
 8040dfa:	eba4 0408 	sub.w	r4, r4, r8
 8040dfe:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8040e02:	e7ba      	b.n	8040d7a <__udivmoddi4+0x8e>
 8040e04:	428b      	cmp	r3, r1
 8040e06:	d909      	bls.n	8040e1c <__udivmoddi4+0x130>
 8040e08:	2d00      	cmp	r5, #0
 8040e0a:	f000 80be 	beq.w	8040f8a <__udivmoddi4+0x29e>
 8040e0e:	2600      	movs	r6, #0
 8040e10:	e9c5 0100 	strd	r0, r1, [r5]
 8040e14:	4630      	mov	r0, r6
 8040e16:	4631      	mov	r1, r6
 8040e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040e1c:	fab3 f683 	clz	r6, r3
 8040e20:	2e00      	cmp	r6, #0
 8040e22:	d14d      	bne.n	8040ec0 <__udivmoddi4+0x1d4>
 8040e24:	428b      	cmp	r3, r1
 8040e26:	f0c0 80b3 	bcc.w	8040f90 <__udivmoddi4+0x2a4>
 8040e2a:	4282      	cmp	r2, r0
 8040e2c:	f240 80b0 	bls.w	8040f90 <__udivmoddi4+0x2a4>
 8040e30:	4630      	mov	r0, r6
 8040e32:	2d00      	cmp	r5, #0
 8040e34:	d0a6      	beq.n	8040d84 <__udivmoddi4+0x98>
 8040e36:	e9c5 4800 	strd	r4, r8, [r5]
 8040e3a:	e7a3      	b.n	8040d84 <__udivmoddi4+0x98>
 8040e3c:	4097      	lsls	r7, r2
 8040e3e:	f1c2 0320 	rsb	r3, r2, #32
 8040e42:	fa01 f002 	lsl.w	r0, r1, r2
 8040e46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040e4a:	40d9      	lsrs	r1, r3
 8040e4c:	fa24 f303 	lsr.w	r3, r4, r3
 8040e50:	fa1f f887 	uxth.w	r8, r7
 8040e54:	4094      	lsls	r4, r2
 8040e56:	4303      	orrs	r3, r0
 8040e58:	fbb1 f0fe 	udiv	r0, r1, lr
 8040e5c:	0c1e      	lsrs	r6, r3, #16
 8040e5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8040e62:	fb00 fc08 	mul.w	ip, r0, r8
 8040e66:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8040e6a:	458c      	cmp	ip, r1
 8040e6c:	d90e      	bls.n	8040e8c <__udivmoddi4+0x1a0>
 8040e6e:	1879      	adds	r1, r7, r1
 8040e70:	f100 36ff 	add.w	r6, r0, #4294967295
 8040e74:	bf2c      	ite	cs
 8040e76:	f04f 0901 	movcs.w	r9, #1
 8040e7a:	f04f 0900 	movcc.w	r9, #0
 8040e7e:	458c      	cmp	ip, r1
 8040e80:	d903      	bls.n	8040e8a <__udivmoddi4+0x19e>
 8040e82:	f1b9 0f00 	cmp.w	r9, #0
 8040e86:	f000 8096 	beq.w	8040fb6 <__udivmoddi4+0x2ca>
 8040e8a:	4630      	mov	r0, r6
 8040e8c:	eba1 010c 	sub.w	r1, r1, ip
 8040e90:	b29b      	uxth	r3, r3
 8040e92:	fbb1 f6fe 	udiv	r6, r1, lr
 8040e96:	fb0e 1116 	mls	r1, lr, r6, r1
 8040e9a:	fb06 fc08 	mul.w	ip, r6, r8
 8040e9e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8040ea2:	458c      	cmp	ip, r1
 8040ea4:	d907      	bls.n	8040eb6 <__udivmoddi4+0x1ca>
 8040ea6:	1879      	adds	r1, r7, r1
 8040ea8:	f106 33ff 	add.w	r3, r6, #4294967295
 8040eac:	d202      	bcs.n	8040eb4 <__udivmoddi4+0x1c8>
 8040eae:	458c      	cmp	ip, r1
 8040eb0:	f200 8088 	bhi.w	8040fc4 <__udivmoddi4+0x2d8>
 8040eb4:	461e      	mov	r6, r3
 8040eb6:	eba1 030c 	sub.w	r3, r1, ip
 8040eba:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040ebe:	e770      	b.n	8040da2 <__udivmoddi4+0xb6>
 8040ec0:	f1c6 0720 	rsb	r7, r6, #32
 8040ec4:	fa03 f406 	lsl.w	r4, r3, r6
 8040ec8:	fa02 fc06 	lsl.w	ip, r2, r6
 8040ecc:	fa01 fe06 	lsl.w	lr, r1, r6
 8040ed0:	40fa      	lsrs	r2, r7
 8040ed2:	fa20 f807 	lsr.w	r8, r0, r7
 8040ed6:	40f9      	lsrs	r1, r7
 8040ed8:	fa00 f306 	lsl.w	r3, r0, r6
 8040edc:	4322      	orrs	r2, r4
 8040ede:	ea48 040e 	orr.w	r4, r8, lr
 8040ee2:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8040ee6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8040eea:	fa1f f982 	uxth.w	r9, r2
 8040eee:	fbb1 faf8 	udiv	sl, r1, r8
 8040ef2:	fb08 111a 	mls	r1, r8, sl, r1
 8040ef6:	fb0a f009 	mul.w	r0, sl, r9
 8040efa:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 8040efe:	4570      	cmp	r0, lr
 8040f00:	d90e      	bls.n	8040f20 <__udivmoddi4+0x234>
 8040f02:	eb12 0e0e 	adds.w	lr, r2, lr
 8040f06:	f10a 31ff 	add.w	r1, sl, #4294967295
 8040f0a:	bf2c      	ite	cs
 8040f0c:	f04f 0b01 	movcs.w	fp, #1
 8040f10:	f04f 0b00 	movcc.w	fp, #0
 8040f14:	4570      	cmp	r0, lr
 8040f16:	d902      	bls.n	8040f1e <__udivmoddi4+0x232>
 8040f18:	f1bb 0f00 	cmp.w	fp, #0
 8040f1c:	d04e      	beq.n	8040fbc <__udivmoddi4+0x2d0>
 8040f1e:	468a      	mov	sl, r1
 8040f20:	ebae 0e00 	sub.w	lr, lr, r0
 8040f24:	b2a4      	uxth	r4, r4
 8040f26:	fbbe f0f8 	udiv	r0, lr, r8
 8040f2a:	fb08 ee10 	mls	lr, r8, r0, lr
 8040f2e:	fb00 f909 	mul.w	r9, r0, r9
 8040f32:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8040f36:	45f1      	cmp	r9, lr
 8040f38:	d907      	bls.n	8040f4a <__udivmoddi4+0x25e>
 8040f3a:	eb12 0e0e 	adds.w	lr, r2, lr
 8040f3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8040f42:	d201      	bcs.n	8040f48 <__udivmoddi4+0x25c>
 8040f44:	45f1      	cmp	r9, lr
 8040f46:	d840      	bhi.n	8040fca <__udivmoddi4+0x2de>
 8040f48:	4608      	mov	r0, r1
 8040f4a:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 8040f4e:	ebae 0e09 	sub.w	lr, lr, r9
 8040f52:	fba0 890c 	umull	r8, r9, r0, ip
 8040f56:	45ce      	cmp	lr, r9
 8040f58:	4641      	mov	r1, r8
 8040f5a:	464c      	mov	r4, r9
 8040f5c:	d302      	bcc.n	8040f64 <__udivmoddi4+0x278>
 8040f5e:	d106      	bne.n	8040f6e <__udivmoddi4+0x282>
 8040f60:	4543      	cmp	r3, r8
 8040f62:	d204      	bcs.n	8040f6e <__udivmoddi4+0x282>
 8040f64:	3801      	subs	r0, #1
 8040f66:	ebb8 010c 	subs.w	r1, r8, ip
 8040f6a:	eb69 0402 	sbc.w	r4, r9, r2
 8040f6e:	b37d      	cbz	r5, 8040fd0 <__udivmoddi4+0x2e4>
 8040f70:	1a5a      	subs	r2, r3, r1
 8040f72:	eb6e 0e04 	sbc.w	lr, lr, r4
 8040f76:	40f2      	lsrs	r2, r6
 8040f78:	fa0e f707 	lsl.w	r7, lr, r7
 8040f7c:	fa2e f306 	lsr.w	r3, lr, r6
 8040f80:	2600      	movs	r6, #0
 8040f82:	4317      	orrs	r7, r2
 8040f84:	e9c5 7300 	strd	r7, r3, [r5]
 8040f88:	e6fc      	b.n	8040d84 <__udivmoddi4+0x98>
 8040f8a:	462e      	mov	r6, r5
 8040f8c:	4628      	mov	r0, r5
 8040f8e:	e6f9      	b.n	8040d84 <__udivmoddi4+0x98>
 8040f90:	1a84      	subs	r4, r0, r2
 8040f92:	eb61 0103 	sbc.w	r1, r1, r3
 8040f96:	2001      	movs	r0, #1
 8040f98:	4688      	mov	r8, r1
 8040f9a:	e74a      	b.n	8040e32 <__udivmoddi4+0x146>
 8040f9c:	3802      	subs	r0, #2
 8040f9e:	443c      	add	r4, r7
 8040fa0:	e72b      	b.n	8040dfa <__udivmoddi4+0x10e>
 8040fa2:	3802      	subs	r0, #2
 8040fa4:	443c      	add	r4, r7
 8040fa6:	e6e3      	b.n	8040d70 <__udivmoddi4+0x84>
 8040fa8:	3e02      	subs	r6, #2
 8040faa:	443b      	add	r3, r7
 8040fac:	e6cc      	b.n	8040d48 <__udivmoddi4+0x5c>
 8040fae:	f1ac 0c02 	sub.w	ip, ip, #2
 8040fb2:	4439      	add	r1, r7
 8040fb4:	e70c      	b.n	8040dd0 <__udivmoddi4+0xe4>
 8040fb6:	3802      	subs	r0, #2
 8040fb8:	4439      	add	r1, r7
 8040fba:	e767      	b.n	8040e8c <__udivmoddi4+0x1a0>
 8040fbc:	f1aa 0a02 	sub.w	sl, sl, #2
 8040fc0:	4496      	add	lr, r2
 8040fc2:	e7ad      	b.n	8040f20 <__udivmoddi4+0x234>
 8040fc4:	3e02      	subs	r6, #2
 8040fc6:	4439      	add	r1, r7
 8040fc8:	e775      	b.n	8040eb6 <__udivmoddi4+0x1ca>
 8040fca:	3802      	subs	r0, #2
 8040fcc:	4496      	add	lr, r2
 8040fce:	e7bc      	b.n	8040f4a <__udivmoddi4+0x25e>
 8040fd0:	462e      	mov	r6, r5
 8040fd2:	e6d7      	b.n	8040d84 <__udivmoddi4+0x98>

08040fd4 <__aeabi_idiv0>:
 8040fd4:	4770      	bx	lr
 8040fd6:	bf00      	nop

08040fd8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8040fd8:	b500      	push	{lr}
 8040fda:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8040fdc:	2300      	movs	r3, #0
 8040fde:	9307      	str	r3, [sp, #28]
 8040fe0:	9308      	str	r3, [sp, #32]
 8040fe2:	9309      	str	r3, [sp, #36]	; 0x24
  ADC_ChannelConfTypeDef sConfig = {0};
 8040fe4:	9301      	str	r3, [sp, #4]
 8040fe6:	9302      	str	r3, [sp, #8]
 8040fe8:	9303      	str	r3, [sp, #12]
 8040fea:	9304      	str	r3, [sp, #16]
 8040fec:	9305      	str	r3, [sp, #20]
 8040fee:	9306      	str	r3, [sp, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8040ff0:	481e      	ldr	r0, [pc, #120]	; (804106c <MX_ADC1_Init+0x94>)
 8040ff2:	4a1f      	ldr	r2, [pc, #124]	; (8041070 <MX_ADC1_Init+0x98>)
 8040ff4:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8040ff6:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8040ff8:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8040ffa:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8040ffc:	6103      	str	r3, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8040ffe:	2204      	movs	r2, #4
 8041000:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8041002:	7603      	strb	r3, [r0, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8041004:	7643      	strb	r3, [r0, #25]
  hadc1.Init.NbrOfConversion = 1;
 8041006:	2201      	movs	r2, #1
 8041008:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 804100a:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 804100e:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8041010:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8041012:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8041016:	6343      	str	r3, [r0, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8041018:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 804101c:	f005 f942 	bl	80462a4 <HAL_ADC_Init>
 8041020:	b9d0      	cbnz	r0, 8041058 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8041022:	2300      	movs	r3, #0
 8041024:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8041026:	a907      	add	r1, sp, #28
 8041028:	4810      	ldr	r0, [pc, #64]	; (804106c <MX_ADC1_Init+0x94>)
 804102a:	f006 f8c3 	bl	80471b4 <HAL_ADCEx_MultiModeConfigChannel>
 804102e:	b9b0      	cbnz	r0, 804105e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8041030:	4b10      	ldr	r3, [pc, #64]	; (8041074 <MX_ADC1_Init+0x9c>)
 8041032:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8041034:	2306      	movs	r3, #6
 8041036:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8041038:	2300      	movs	r3, #0
 804103a:	9303      	str	r3, [sp, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 804103c:	227f      	movs	r2, #127	; 0x7f
 804103e:	9204      	str	r2, [sp, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8041040:	2204      	movs	r2, #4
 8041042:	9205      	str	r2, [sp, #20]
  sConfig.Offset = 0;
 8041044:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8041046:	eb0d 0102 	add.w	r1, sp, r2
 804104a:	4808      	ldr	r0, [pc, #32]	; (804106c <MX_ADC1_Init+0x94>)
 804104c:	f005 fc24 	bl	8046898 <HAL_ADC_ConfigChannel>
 8041050:	b940      	cbnz	r0, 8041064 <MX_ADC1_Init+0x8c>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8041052:	b00b      	add	sp, #44	; 0x2c
 8041054:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8041058:	f000 ff6a 	bl	8041f30 <Error_Handler>
 804105c:	e7e1      	b.n	8041022 <MX_ADC1_Init+0x4a>
    Error_Handler();
 804105e:	f000 ff67 	bl	8041f30 <Error_Handler>
 8041062:	e7e5      	b.n	8041030 <MX_ADC1_Init+0x58>
    Error_Handler();
 8041064:	f000 ff64 	bl	8041f30 <Error_Handler>
}
 8041068:	e7f3      	b.n	8041052 <MX_ADC1_Init+0x7a>
 804106a:	bf00      	nop
 804106c:	2001a11c 	.word	0x2001a11c
 8041070:	42028000 	.word	0x42028000
 8041074:	cb840000 	.word	0xcb840000

08041078 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8041078:	b500      	push	{lr}
 804107a:	b087      	sub	sp, #28

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 804107c:	2300      	movs	r3, #0
 804107e:	9300      	str	r3, [sp, #0]
 8041080:	9301      	str	r3, [sp, #4]
 8041082:	9302      	str	r3, [sp, #8]
 8041084:	9303      	str	r3, [sp, #12]
 8041086:	9304      	str	r3, [sp, #16]
 8041088:	9305      	str	r3, [sp, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 804108a:	4819      	ldr	r0, [pc, #100]	; (80410f0 <MX_ADC2_Init+0x78>)
 804108c:	4a19      	ldr	r2, [pc, #100]	; (80410f4 <MX_ADC2_Init+0x7c>)
 804108e:	6002      	str	r2, [r0, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8041090:	6043      	str	r3, [r0, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8041092:	6083      	str	r3, [r0, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8041094:	60c3      	str	r3, [r0, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8041096:	6103      	str	r3, [r0, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8041098:	2204      	movs	r2, #4
 804109a:	6142      	str	r2, [r0, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 804109c:	7603      	strb	r3, [r0, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 804109e:	7643      	strb	r3, [r0, #25]
  hadc2.Init.NbrOfConversion = 1;
 80410a0:	2201      	movs	r2, #1
 80410a2:	61c2      	str	r2, [r0, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80410a4:	f880 3020 	strb.w	r3, [r0, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80410a8:	6283      	str	r3, [r0, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80410aa:	62c3      	str	r3, [r0, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80410ac:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80410b0:	6343      	str	r3, [r0, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80410b2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80410b6:	f005 f8f5 	bl	80462a4 <HAL_ADC_Init>
 80410ba:	b990      	cbnz	r0, 80410e2 <MX_ADC2_Init+0x6a>
  {
    Error_Handler();
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80410bc:	4b0e      	ldr	r3, [pc, #56]	; (80410f8 <MX_ADC2_Init+0x80>)
 80410be:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80410c0:	2306      	movs	r3, #6
 80410c2:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80410c4:	2300      	movs	r3, #0
 80410c6:	9302      	str	r3, [sp, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80410c8:	227f      	movs	r2, #127	; 0x7f
 80410ca:	9203      	str	r2, [sp, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80410cc:	2204      	movs	r2, #4
 80410ce:	9204      	str	r2, [sp, #16]
  sConfig.Offset = 0;
 80410d0:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80410d2:	4669      	mov	r1, sp
 80410d4:	4806      	ldr	r0, [pc, #24]	; (80410f0 <MX_ADC2_Init+0x78>)
 80410d6:	f005 fbdf 	bl	8046898 <HAL_ADC_ConfigChannel>
 80410da:	b928      	cbnz	r0, 80410e8 <MX_ADC2_Init+0x70>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80410dc:	b007      	add	sp, #28
 80410de:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80410e2:	f000 ff25 	bl	8041f30 <Error_Handler>
 80410e6:	e7e9      	b.n	80410bc <MX_ADC2_Init+0x44>
    Error_Handler();
 80410e8:	f000 ff22 	bl	8041f30 <Error_Handler>
}
 80410ec:	e7f6      	b.n	80410dc <MX_ADC2_Init+0x64>
 80410ee:	bf00      	nop
 80410f0:	2001a088 	.word	0x2001a088
 80410f4:	42028100 	.word	0x42028100
 80410f8:	32601000 	.word	0x32601000

080410fc <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80410fc:	b530      	push	{r4, r5, lr}
 80410fe:	b0af      	sub	sp, #188	; 0xbc
 8041100:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041102:	2100      	movs	r1, #0
 8041104:	9129      	str	r1, [sp, #164]	; 0xa4
 8041106:	912a      	str	r1, [sp, #168]	; 0xa8
 8041108:	912b      	str	r1, [sp, #172]	; 0xac
 804110a:	912c      	str	r1, [sp, #176]	; 0xb0
 804110c:	912d      	str	r1, [sp, #180]	; 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 804110e:	2294      	movs	r2, #148	; 0x94
 8041110:	a804      	add	r0, sp, #16
 8041112:	f013 ff42 	bl	8054f9a <memset>
  if(adcHandle->Instance==ADC1)
 8041116:	6823      	ldr	r3, [r4, #0]
 8041118:	4a50      	ldr	r2, [pc, #320]	; (804125c <HAL_ADC_MspInit+0x160>)
 804111a:	4293      	cmp	r3, r2
 804111c:	d004      	beq.n	8041128 <HAL_ADC_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(adcHandle->Instance==ADC2)
 804111e:	4a50      	ldr	r2, [pc, #320]	; (8041260 <HAL_ADC_MspInit+0x164>)
 8041120:	4293      	cmp	r3, r2
 8041122:	d05f      	beq.n	80411e4 <HAL_ADC_MspInit+0xe8>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8041124:	b02f      	add	sp, #188	; 0xbc
 8041126:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8041128:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 804112c:	9304      	str	r3, [sp, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 804112e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8041132:	9324      	str	r3, [sp, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8041134:	a804      	add	r0, sp, #16
 8041136:	f007 ff11 	bl	8048f5c <HAL_RCCEx_PeriphCLKConfig>
 804113a:	2800      	cmp	r0, #0
 804113c:	d13e      	bne.n	80411bc <HAL_ADC_MspInit+0xc0>
    HAL_RCC_ADC_CLK_ENABLED++;
 804113e:	4a49      	ldr	r2, [pc, #292]	; (8041264 <HAL_ADC_MspInit+0x168>)
 8041140:	6813      	ldr	r3, [r2, #0]
 8041142:	3301      	adds	r3, #1
 8041144:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8041146:	2b01      	cmp	r3, #1
 8041148:	d03b      	beq.n	80411c2 <HAL_ADC_MspInit+0xc6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 804114a:	4b47      	ldr	r3, [pc, #284]	; (8041268 <HAL_ADC_MspInit+0x16c>)
 804114c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 804114e:	f042 0202 	orr.w	r2, r2, #2
 8041152:	64da      	str	r2, [r3, #76]	; 0x4c
 8041154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041156:	f003 0302 	and.w	r3, r3, #2
 804115a:	9301      	str	r3, [sp, #4]
 804115c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = EXT_AN_Pin;
 804115e:	2302      	movs	r3, #2
 8041160:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8041162:	2303      	movs	r3, #3
 8041164:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041166:	2500      	movs	r5, #0
 8041168:	952b      	str	r5, [sp, #172]	; 0xac
    HAL_GPIO_Init(EXT_AN_GPIO_Port, &GPIO_InitStruct);
 804116a:	a929      	add	r1, sp, #164	; 0xa4
 804116c:	483f      	ldr	r0, [pc, #252]	; (804126c <HAL_ADC_MspInit+0x170>)
 804116e:	f006 fb2f 	bl	80477d0 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Channel6;
 8041172:	483f      	ldr	r0, [pc, #252]	; (8041270 <HAL_ADC_MspInit+0x174>)
 8041174:	4b3f      	ldr	r3, [pc, #252]	; (8041274 <HAL_ADC_MspInit+0x178>)
 8041176:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8041178:	2305      	movs	r3, #5
 804117a:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 804117c:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 804117e:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8041180:	2380      	movs	r3, #128	; 0x80
 8041182:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8041184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8041188:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 804118a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804118e:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8041190:	61c5      	str	r5, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8041192:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8041194:	f006 f95a 	bl	804744c <HAL_DMA_Init>
 8041198:	b9f0      	cbnz	r0, 80411d8 <HAL_ADC_MspInit+0xdc>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 804119a:	2110      	movs	r1, #16
 804119c:	4834      	ldr	r0, [pc, #208]	; (8041270 <HAL_ADC_MspInit+0x174>)
 804119e:	f006 fb04 	bl	80477aa <HAL_DMA_ConfigChannelAttributes>
 80411a2:	b9e0      	cbnz	r0, 80411de <HAL_ADC_MspInit+0xe2>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80411a4:	4b32      	ldr	r3, [pc, #200]	; (8041270 <HAL_ADC_MspInit+0x174>)
 80411a6:	6523      	str	r3, [r4, #80]	; 0x50
 80411a8:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80411aa:	2200      	movs	r2, #0
 80411ac:	4611      	mov	r1, r2
 80411ae:	2025      	movs	r0, #37	; 0x25
 80411b0:	f006 f89a 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80411b4:	2025      	movs	r0, #37	; 0x25
 80411b6:	f006 f8cb 	bl	8047350 <HAL_NVIC_EnableIRQ>
 80411ba:	e7b3      	b.n	8041124 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 80411bc:	f000 feb8 	bl	8041f30 <Error_Handler>
 80411c0:	e7bd      	b.n	804113e <HAL_ADC_MspInit+0x42>
      __HAL_RCC_ADC_CLK_ENABLE();
 80411c2:	4b29      	ldr	r3, [pc, #164]	; (8041268 <HAL_ADC_MspInit+0x16c>)
 80411c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80411c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80411ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80411cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80411ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80411d2:	9300      	str	r3, [sp, #0]
 80411d4:	9b00      	ldr	r3, [sp, #0]
 80411d6:	e7b8      	b.n	804114a <HAL_ADC_MspInit+0x4e>
      Error_Handler();
 80411d8:	f000 feaa 	bl	8041f30 <Error_Handler>
 80411dc:	e7dd      	b.n	804119a <HAL_ADC_MspInit+0x9e>
      Error_Handler();
 80411de:	f000 fea7 	bl	8041f30 <Error_Handler>
 80411e2:	e7df      	b.n	80411a4 <HAL_ADC_MspInit+0xa8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80411e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80411e8:	9304      	str	r3, [sp, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80411ea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80411ee:	9324      	str	r3, [sp, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80411f0:	a804      	add	r0, sp, #16
 80411f2:	f007 feb3 	bl	8048f5c <HAL_RCCEx_PeriphCLKConfig>
 80411f6:	bb10      	cbnz	r0, 804123e <HAL_ADC_MspInit+0x142>
    HAL_RCC_ADC_CLK_ENABLED++;
 80411f8:	4a1a      	ldr	r2, [pc, #104]	; (8041264 <HAL_ADC_MspInit+0x168>)
 80411fa:	6813      	ldr	r3, [r2, #0]
 80411fc:	3301      	adds	r3, #1
 80411fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8041200:	2b01      	cmp	r3, #1
 8041202:	d01f      	beq.n	8041244 <HAL_ADC_MspInit+0x148>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8041204:	4b18      	ldr	r3, [pc, #96]	; (8041268 <HAL_ADC_MspInit+0x16c>)
 8041206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8041208:	f042 0201 	orr.w	r2, r2, #1
 804120c:	64da      	str	r2, [r3, #76]	; 0x4c
 804120e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041210:	f003 0301 	and.w	r3, r3, #1
 8041214:	9303      	str	r3, [sp, #12]
 8041216:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = CURRENT_AN_Pin;
 8041218:	2380      	movs	r3, #128	; 0x80
 804121a:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 804121c:	2303      	movs	r3, #3
 804121e:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041220:	2400      	movs	r4, #0
 8041222:	942b      	str	r4, [sp, #172]	; 0xac
    HAL_GPIO_Init(CURRENT_AN_GPIO_Port, &GPIO_InitStruct);
 8041224:	a929      	add	r1, sp, #164	; 0xa4
 8041226:	4814      	ldr	r0, [pc, #80]	; (8041278 <HAL_ADC_MspInit+0x17c>)
 8041228:	f006 fad2 	bl	80477d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 804122c:	4622      	mov	r2, r4
 804122e:	4621      	mov	r1, r4
 8041230:	2025      	movs	r0, #37	; 0x25
 8041232:	f006 f859 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8041236:	2025      	movs	r0, #37	; 0x25
 8041238:	f006 f88a 	bl	8047350 <HAL_NVIC_EnableIRQ>
}
 804123c:	e772      	b.n	8041124 <HAL_ADC_MspInit+0x28>
      Error_Handler();
 804123e:	f000 fe77 	bl	8041f30 <Error_Handler>
 8041242:	e7d9      	b.n	80411f8 <HAL_ADC_MspInit+0xfc>
      __HAL_RCC_ADC_CLK_ENABLE();
 8041244:	4b08      	ldr	r3, [pc, #32]	; (8041268 <HAL_ADC_MspInit+0x16c>)
 8041246:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8041248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 804124c:	64da      	str	r2, [r3, #76]	; 0x4c
 804124e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041250:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041254:	9302      	str	r3, [sp, #8]
 8041256:	9b02      	ldr	r3, [sp, #8]
 8041258:	e7d4      	b.n	8041204 <HAL_ADC_MspInit+0x108>
 804125a:	bf00      	nop
 804125c:	42028000 	.word	0x42028000
 8041260:	42028100 	.word	0x42028100
 8041264:	200184a0 	.word	0x200184a0
 8041268:	40021000 	.word	0x40021000
 804126c:	42020400 	.word	0x42020400
 8041270:	2001a1b0 	.word	0x2001a1b0
 8041274:	4002046c 	.word	0x4002046c
 8041278:	42020000 	.word	0x42020000

0804127c <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 804127c:	b082      	sub	sp, #8
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 804127e:	4b0f      	ldr	r3, [pc, #60]	; (80412bc <MX_CRC_Init+0x40>)
 8041280:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8041282:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8041286:	649a      	str	r2, [r3, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8041288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804128a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804128e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8041290:	9b01      	ldr	r3, [sp, #4]
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 8041292:	4b0b      	ldr	r3, [pc, #44]	; (80412c0 <MX_CRC_Init+0x44>)
 8041294:	689a      	ldr	r2, [r3, #8]
 8041296:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 804129a:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 804129c:	689a      	ldr	r2, [r3, #8]
 804129e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80412a2:	609a      	str	r2, [r3, #8]
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
  WRITE_REG(CRCx->POL, PolynomCoef);
 80412a4:	4a07      	ldr	r2, [pc, #28]	; (80412c4 <MX_CRC_Init+0x48>)
 80412a6:	615a      	str	r2, [r3, #20]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 80412a8:	689a      	ldr	r2, [r3, #8]
 80412aa:	f022 0218 	bic.w	r2, r2, #24
 80412ae:	609a      	str	r2, [r3, #8]
  WRITE_REG(CRCx->INIT, InitCrc);
 80412b0:	f04f 32ff 	mov.w	r2, #4294967295
 80412b4:	611a      	str	r2, [r3, #16]
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80412b6:	b002      	add	sp, #8
 80412b8:	4770      	bx	lr
 80412ba:	bf00      	nop
 80412bc:	40021000 	.word	0x40021000
 80412c0:	40023000 	.word	0x40023000
 80412c4:	04c11db7 	.word	0x04c11db7

080412c8 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 80412c8:	b508      	push	{r3, lr}
    HAL_Delay( ms );
 80412ca:	f004 ff6d 	bl	80461a8 <HAL_Delay>
}
 80412ce:	bd08      	pop	{r3, pc}

080412d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80412d0:	b500      	push	{lr}
 80412d2:	b085      	sub	sp, #20

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80412d4:	4b23      	ldr	r3, [pc, #140]	; (8041364 <MX_DMA_Init+0x94>)
 80412d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80412d8:	f042 0204 	orr.w	r2, r2, #4
 80412dc:	649a      	str	r2, [r3, #72]	; 0x48
 80412de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80412e0:	f002 0204 	and.w	r2, r2, #4
 80412e4:	9201      	str	r2, [sp, #4]
 80412e6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80412e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80412ea:	f042 0201 	orr.w	r2, r2, #1
 80412ee:	649a      	str	r2, [r3, #72]	; 0x48
 80412f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80412f2:	f002 0201 	and.w	r2, r2, #1
 80412f6:	9202      	str	r2, [sp, #8]
 80412f8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80412fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80412fc:	f042 0202 	orr.w	r2, r2, #2
 8041300:	649a      	str	r2, [r3, #72]	; 0x48
 8041302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041304:	f003 0302 	and.w	r3, r3, #2
 8041308:	9303      	str	r3, [sp, #12]
 804130a:	9b03      	ldr	r3, [sp, #12]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 804130c:	2200      	movs	r2, #0
 804130e:	4611      	mov	r1, r2
 8041310:	2021      	movs	r0, #33	; 0x21
 8041312:	f005 ffe9 	bl	80472e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8041316:	2021      	movs	r0, #33	; 0x21
 8041318:	f006 f81a 	bl	8047350 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 804131c:	2200      	movs	r2, #0
 804131e:	4611      	mov	r1, r2
 8041320:	2022      	movs	r0, #34	; 0x22
 8041322:	f005 ffe1 	bl	80472e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8041326:	2022      	movs	r0, #34	; 0x22
 8041328:	f006 f812 	bl	8047350 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 804132c:	2200      	movs	r2, #0
 804132e:	4611      	mov	r1, r2
 8041330:	2051      	movs	r0, #81	; 0x51
 8041332:	f005 ffd9 	bl	80472e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8041336:	2051      	movs	r0, #81	; 0x51
 8041338:	f006 f80a 	bl	8047350 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 804133c:	2200      	movs	r2, #0
 804133e:	4611      	mov	r1, r2
 8041340:	2052      	movs	r0, #82	; 0x52
 8041342:	f005 ffd1 	bl	80472e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8041346:	2052      	movs	r0, #82	; 0x52
 8041348:	f006 f802 	bl	8047350 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 804134c:	2200      	movs	r2, #0
 804134e:	4611      	mov	r1, r2
 8041350:	2055      	movs	r0, #85	; 0x55
 8041352:	f005 ffc9 	bl	80472e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8041356:	2055      	movs	r0, #85	; 0x55
 8041358:	f005 fffa 	bl	8047350 <HAL_NVIC_EnableIRQ>

}
 804135c:	b005      	add	sp, #20
 804135e:	f85d fb04 	ldr.w	pc, [sp], #4
 8041362:	bf00      	nop
 8041364:	40021000 	.word	0x40021000

08041368 <FifoNext>:
 */
#include "fifo.h"

static uint16_t FifoNext( Fifo_t *fifo, uint16_t index )
{
    return ( index + 1 ) % fifo->Size;
 8041368:	3101      	adds	r1, #1
 804136a:	8903      	ldrh	r3, [r0, #8]
 804136c:	fb91 f0f3 	sdiv	r0, r1, r3
 8041370:	fb03 1010 	mls	r0, r3, r0, r1
}
 8041374:	b280      	uxth	r0, r0
 8041376:	4770      	bx	lr

08041378 <FifoInit>:

void FifoInit( Fifo_t *fifo, uint8_t *buffer, uint16_t size )
{
    fifo->Begin = 0;
 8041378:	2300      	movs	r3, #0
 804137a:	8003      	strh	r3, [r0, #0]
    fifo->End = 0;
 804137c:	8043      	strh	r3, [r0, #2]
    fifo->Data = buffer;
 804137e:	6041      	str	r1, [r0, #4]
    fifo->Size = size;
 8041380:	8102      	strh	r2, [r0, #8]
}
 8041382:	4770      	bx	lr

08041384 <FifoPush>:

void FifoPush( Fifo_t *fifo, uint8_t data )
{
 8041384:	b538      	push	{r3, r4, r5, lr}
 8041386:	4604      	mov	r4, r0
 8041388:	460d      	mov	r5, r1
    fifo->End = FifoNext( fifo, fifo->End );
 804138a:	8841      	ldrh	r1, [r0, #2]
 804138c:	f7ff ffec 	bl	8041368 <FifoNext>
 8041390:	8060      	strh	r0, [r4, #2]
    fifo->Data[fifo->End] = data;
 8041392:	6863      	ldr	r3, [r4, #4]
 8041394:	541d      	strb	r5, [r3, r0]
}
 8041396:	bd38      	pop	{r3, r4, r5, pc}

08041398 <FifoPop>:

uint8_t FifoPop( Fifo_t *fifo )
{
 8041398:	b538      	push	{r3, r4, r5, lr}
 804139a:	4604      	mov	r4, r0
    uint8_t data = fifo->Data[FifoNext( fifo, fifo->Begin )];
 804139c:	6845      	ldr	r5, [r0, #4]
 804139e:	8801      	ldrh	r1, [r0, #0]
 80413a0:	f7ff ffe2 	bl	8041368 <FifoNext>
 80413a4:	4603      	mov	r3, r0
 80413a6:	5c28      	ldrb	r0, [r5, r0]

    fifo->Begin = FifoNext( fifo, fifo->Begin );
 80413a8:	8023      	strh	r3, [r4, #0]
    return data;
}
 80413aa:	bd38      	pop	{r3, r4, r5, pc}

080413ac <IsFifoEmpty>:
    fifo->End = 0;
}

bool IsFifoEmpty( Fifo_t *fifo )
{
    return ( fifo->Begin == fifo->End );
 80413ac:	8802      	ldrh	r2, [r0, #0]
 80413ae:	8840      	ldrh	r0, [r0, #2]
}
 80413b0:	4282      	cmp	r2, r0
 80413b2:	bf14      	ite	ne
 80413b4:	2000      	movne	r0, #0
 80413b6:	2001      	moveq	r0, #1
 80413b8:	4770      	bx	lr
	...

080413bc <MX_GPIO_Init>:
     PB15   ------> UCPD1_CC2
     PA15 (JTDI)   ------> UCPD1_CC1
     PB5   ------> UCPD1_DBCC1
*/
void MX_GPIO_Init(void)
{
 80413bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80413c0:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80413c2:	2400      	movs	r4, #0
 80413c4:	9405      	str	r4, [sp, #20]
 80413c6:	9406      	str	r4, [sp, #24]
 80413c8:	9407      	str	r4, [sp, #28]
 80413ca:	9408      	str	r4, [sp, #32]
 80413cc:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80413ce:	4b51      	ldr	r3, [pc, #324]	; (8041514 <MX_GPIO_Init+0x158>)
 80413d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80413d2:	f042 0210 	orr.w	r2, r2, #16
 80413d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80413d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80413da:	f002 0210 	and.w	r2, r2, #16
 80413de:	9200      	str	r2, [sp, #0]
 80413e0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80413e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80413e4:	f042 0201 	orr.w	r2, r2, #1
 80413e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80413ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80413ec:	f002 0201 	and.w	r2, r2, #1
 80413f0:	9201      	str	r2, [sp, #4]
 80413f2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80413f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80413f6:	f042 0204 	orr.w	r2, r2, #4
 80413fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80413fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80413fe:	f002 0204 	and.w	r2, r2, #4
 8041402:	9202      	str	r2, [sp, #8]
 8041404:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8041406:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8041408:	f042 0202 	orr.w	r2, r2, #2
 804140c:	64da      	str	r2, [r3, #76]	; 0x4c
 804140e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8041410:	f002 0202 	and.w	r2, r2, #2
 8041414:	9203      	str	r2, [sp, #12]
 8041416:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8041418:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 804141a:	f042 0208 	orr.w	r2, r2, #8
 804141e:	64da      	str	r2, [r3, #76]	; 0x4c
 8041420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041422:	f003 0308 	and.w	r3, r3, #8
 8041426:	9304      	str	r3, [sp, #16]
 8041428:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, GPIO_PIN_SET);
 804142a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8041524 <MX_GPIO_Init+0x168>
 804142e:	2201      	movs	r2, #1
 8041430:	2110      	movs	r1, #16
 8041432:	4648      	mov	r0, r9
 8041434:	f006 fb39 	bl	8047aaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LR_NSS_Pin|LR_NRST_Pin, GPIO_PIN_SET);
 8041438:	4e37      	ldr	r6, [pc, #220]	; (8041518 <MX_GPIO_Init+0x15c>)
 804143a:	2201      	movs	r2, #1
 804143c:	2105      	movs	r1, #5
 804143e:	4630      	mov	r0, r6
 8041440:	f006 fb33 	bl	8047aaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHARGE_CE_GPIO_Port, CHARGE_CE_Pin, GPIO_PIN_SET);
 8041444:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8041528 <MX_GPIO_Init+0x16c>
 8041448:	2201      	movs	r2, #1
 804144a:	2110      	movs	r1, #16
 804144c:	4640      	mov	r0, r8
 804144e:	f006 fb2c 	bl	8047aaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYO_DEN_GPIO_Port, GYO_DEN_Pin, GPIO_PIN_RESET);
 8041452:	4f32      	ldr	r7, [pc, #200]	; (804151c <MX_GPIO_Init+0x160>)
 8041454:	4622      	mov	r2, r4
 8041456:	2102      	movs	r1, #2
 8041458:	4638      	mov	r0, r7
 804145a:	f006 fb26 	bl	8047aaa <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYO_INT2_Pin;
 804145e:	2308      	movs	r3, #8
 8041460:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8041462:	4b2f      	ldr	r3, [pc, #188]	; (8041520 <MX_GPIO_Init+0x164>)
 8041464:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041466:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GYO_INT2_GPIO_Port, &GPIO_InitStruct);
 8041468:	a905      	add	r1, sp, #20
 804146a:	4638      	mov	r0, r7
 804146c:	f006 f9b0 	bl	80477d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CURRENT_CS_Pin;
 8041470:	f04f 0b10 	mov.w	fp, #16
 8041474:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8041478:	2501      	movs	r5, #1
 804147a:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 804147c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804147e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(CURRENT_CS_GPIO_Port, &GPIO_InitStruct);
 8041480:	a905      	add	r1, sp, #20
 8041482:	4648      	mov	r0, r9
 8041484:	f006 f9a4 	bl	80477d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8041488:	f44f 4a00 	mov.w	sl, #32768	; 0x8000
 804148c:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8041490:	2203      	movs	r2, #3
 8041492:	9206      	str	r2, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041494:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041496:	a905      	add	r1, sp, #20
 8041498:	4640      	mov	r0, r8
 804149a:	f006 f999 	bl	80477d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LR_RFSW2_Pin|LR_RFSW3_Pin;
 804149e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80414a2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80414a4:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80414a6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80414a8:	a905      	add	r1, sp, #20
 80414aa:	4630      	mov	r0, r6
 80414ac:	f006 f990 	bl	80477d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LR_IRQ_Pin|LR_BUSY_Pin;
 80414b0:	f244 0302 	movw	r3, #16386	; 0x4002
 80414b4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80414b6:	4b1a      	ldr	r3, [pc, #104]	; (8041520 <MX_GPIO_Init+0x164>)
 80414b8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80414ba:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80414bc:	a905      	add	r1, sp, #20
 80414be:	4630      	mov	r0, r6
 80414c0:	f006 f986 	bl	80477d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_CC1_Pin;
 80414c4:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80414c8:	2303      	movs	r3, #3
 80414ca:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80414cc:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(OTG_FS_CC1_GPIO_Port, &GPIO_InitStruct);
 80414ce:	a905      	add	r1, sp, #20
 80414d0:	4648      	mov	r0, r9
 80414d2:	f006 f97d 	bl	80477d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LR_NSS_Pin|LR_NRST_Pin;
 80414d6:	2305      	movs	r3, #5
 80414d8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80414da:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80414dc:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80414de:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80414e0:	a905      	add	r1, sp, #20
 80414e2:	4630      	mov	r0, r6
 80414e4:	f006 f974 	bl	80477d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHARGE_CE_Pin;
 80414e8:	f8cd b014 	str.w	fp, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80414ec:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80414ee:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80414f0:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(CHARGE_CE_GPIO_Port, &GPIO_InitStruct);
 80414f2:	a905      	add	r1, sp, #20
 80414f4:	4640      	mov	r0, r8
 80414f6:	f006 f96b 	bl	80477d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYO_DEN_Pin;
 80414fa:	2302      	movs	r3, #2
 80414fc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80414fe:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041500:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041502:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GYO_DEN_GPIO_Port, &GPIO_InitStruct);
 8041504:	a905      	add	r1, sp, #20
 8041506:	4638      	mov	r0, r7
 8041508:	f006 f962 	bl	80477d0 <HAL_GPIO_Init>

}
 804150c:	b00b      	add	sp, #44	; 0x2c
 804150e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8041512:	bf00      	nop
 8041514:	40021000 	.word	0x40021000
 8041518:	42020c00 	.word	0x42020c00
 804151c:	42021000 	.word	0x42021000
 8041520:	10110000 	.word	0x10110000
 8041524:	42020000 	.word	0x42020000
 8041528:	42020400 	.word	0x42020400

0804152c <GpioSetInterrupt>:
        uint32_t priority = 0;

        IRQn_Type IRQnb = EXTI0_IRQn;
        GPIO_InitTypeDef   GPIO_InitStructure;

        if( irqHandler == NULL )
 804152c:	2b00      	cmp	r3, #0
 804152e:	f000 80b6 	beq.w	804169e <GpioSetInterrupt+0x172>
{
 8041532:	b530      	push	{r4, r5, lr}
 8041534:	b087      	sub	sp, #28
 8041536:	4604      	mov	r4, r0
 8041538:	4615      	mov	r5, r2
        {
            return;
        }

        obj->IrqHandler = irqHandler;
 804153a:	6103      	str	r3, [r0, #16]

        GPIO_InitStructure.Pin =  obj->pinIndex;
 804153c:	8843      	ldrh	r3, [r0, #2]
 804153e:	9301      	str	r3, [sp, #4]

        if( irqMode == IRQ_RISING_EDGE )
 8041540:	2901      	cmp	r1, #1
 8041542:	d012      	beq.n	804156a <GpioSetInterrupt+0x3e>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
        }
        else if( irqMode == IRQ_FALLING_EDGE )
 8041544:	2902      	cmp	r1, #2
 8041546:	d013      	beq.n	8041570 <GpioSetInterrupt+0x44>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8041548:	4b55      	ldr	r3, [pc, #340]	; (80416a0 <GpioSetInterrupt+0x174>)
 804154a:	9302      	str	r3, [sp, #8]
        }

        GPIO_InitStructure.Pull = obj->pull;
 804154c:	7aa3      	ldrb	r3, [r4, #10]
 804154e:	9303      	str	r3, [sp, #12]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8041550:	2302      	movs	r3, #2
 8041552:	9304      	str	r3, [sp, #16]

        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8041554:	a901      	add	r1, sp, #4
 8041556:	6860      	ldr	r0, [r4, #4]
 8041558:	f006 f93a 	bl	80477d0 <HAL_GPIO_Init>

        switch( irqPriority )
 804155c:	2d02      	cmp	r5, #2
 804155e:	d02e      	beq.n	80415be <GpioSetInterrupt+0x92>
 8041560:	d80b      	bhi.n	804157a <GpioSetInterrupt+0x4e>
 8041562:	2d01      	cmp	r5, #1
 8041564:	d807      	bhi.n	8041576 <GpioSetInterrupt+0x4a>
 8041566:	2103      	movs	r1, #3
 8041568:	e00a      	b.n	8041580 <GpioSetInterrupt+0x54>
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 804156a:	4b4e      	ldr	r3, [pc, #312]	; (80416a4 <GpioSetInterrupt+0x178>)
 804156c:	9302      	str	r3, [sp, #8]
 804156e:	e7ed      	b.n	804154c <GpioSetInterrupt+0x20>
            GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8041570:	4b4d      	ldr	r3, [pc, #308]	; (80416a8 <GpioSetInterrupt+0x17c>)
 8041572:	9302      	str	r3, [sp, #8]
 8041574:	e7ea      	b.n	804154c <GpioSetInterrupt+0x20>
        case IRQ_HIGH_PRIORITY:
            priority = 1;
            break;
        case IRQ_VERY_HIGH_PRIORITY:
        default:
            priority = 0;
 8041576:	2100      	movs	r1, #0
 8041578:	e002      	b.n	8041580 <GpioSetInterrupt+0x54>
        switch( irqPriority )
 804157a:	2d03      	cmp	r5, #3
 804157c:	d121      	bne.n	80415c2 <GpioSetInterrupt+0x96>
            priority = 1;
 804157e:	2101      	movs	r1, #1
            break;
        }

        switch( obj->pinIndex )
 8041580:	8863      	ldrh	r3, [r4, #2]
 8041582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8041586:	d06e      	beq.n	8041666 <GpioSetInterrupt+0x13a>
 8041588:	d827      	bhi.n	80415da <GpioSetInterrupt+0xae>
 804158a:	2b20      	cmp	r3, #32
 804158c:	d81b      	bhi.n	80415c6 <GpioSetInterrupt+0x9a>
 804158e:	b21a      	sxth	r2, r3
 8041590:	2a00      	cmp	r2, #0
 8041592:	d078      	beq.n	8041686 <GpioSetInterrupt+0x15a>
 8041594:	3b01      	subs	r3, #1
 8041596:	2b1f      	cmp	r3, #31
 8041598:	d87f      	bhi.n	804169a <GpioSetInterrupt+0x16e>
 804159a:	e8df f003 	tbb	[pc, r3]
 804159e:	4c48      	.short	0x4c48
 80415a0:	7e7e507e 	.word	0x7e7e507e
 80415a4:	7e7e547e 	.word	0x7e7e547e
 80415a8:	7e7e7e7e 	.word	0x7e7e7e7e
 80415ac:	7e7e587e 	.word	0x7e7e587e
 80415b0:	7e7e7e7e 	.word	0x7e7e7e7e
 80415b4:	7e7e7e7e 	.word	0x7e7e7e7e
 80415b8:	7e7e7e7e 	.word	0x7e7e7e7e
 80415bc:	5c7e      	.short	0x5c7e
            priority = 2;
 80415be:	2102      	movs	r1, #2
 80415c0:	e7de      	b.n	8041580 <GpioSetInterrupt+0x54>
            priority = 0;
 80415c2:	2100      	movs	r1, #0
 80415c4:	e7dc      	b.n	8041580 <GpioSetInterrupt+0x54>
        switch( obj->pinIndex )
 80415c6:	2b40      	cmp	r3, #64	; 0x40
 80415c8:	d049      	beq.n	804165e <GpioSetInterrupt+0x132>
 80415ca:	2b80      	cmp	r3, #128	; 0x80
 80415cc:	d103      	bne.n	80415d6 <GpioSetInterrupt+0xaa>
        case GPIO_PIN_6:
        	GpioIrq[6] = obj;
            IRQnb = EXTI6_IRQn;
            break;
        case GPIO_PIN_7:
        	GpioIrq[7] = obj;
 80415ce:	4b37      	ldr	r3, [pc, #220]	; (80416ac <GpioSetInterrupt+0x180>)
 80415d0:	61dc      	str	r4, [r3, #28]
            IRQnb = EXTI7_IRQn;
 80415d2:	2412      	movs	r4, #18
            break;
 80415d4:	e058      	b.n	8041688 <GpioSetInterrupt+0x15c>
        switch( obj->pinIndex )
 80415d6:	240b      	movs	r4, #11
 80415d8:	e056      	b.n	8041688 <GpioSetInterrupt+0x15c>
 80415da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80415de:	d04a      	beq.n	8041676 <GpioSetInterrupt+0x14a>
 80415e0:	d909      	bls.n	80415f6 <GpioSetInterrupt+0xca>
 80415e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80415e6:	d04a      	beq.n	804167e <GpioSetInterrupt+0x152>
 80415e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80415ec:	d116      	bne.n	804161c <GpioSetInterrupt+0xf0>
        case GPIO_PIN_14:
        	GpioIrq[14] = obj;
            IRQnb = EXTI14_IRQn;
            break;
        case GPIO_PIN_15:
        	GpioIrq[15] = obj;
 80415ee:	4b2f      	ldr	r3, [pc, #188]	; (80416ac <GpioSetInterrupt+0x180>)
 80415f0:	63dc      	str	r4, [r3, #60]	; 0x3c
            IRQnb = EXTI15_IRQn;
 80415f2:	241a      	movs	r4, #26
            break;
 80415f4:	e048      	b.n	8041688 <GpioSetInterrupt+0x15c>
        switch( obj->pinIndex )
 80415f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80415fa:	d038      	beq.n	804166e <GpioSetInterrupt+0x142>
 80415fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8041600:	d103      	bne.n	804160a <GpioSetInterrupt+0xde>
        	GpioIrq[11] = obj;
 8041602:	4b2a      	ldr	r3, [pc, #168]	; (80416ac <GpioSetInterrupt+0x180>)
 8041604:	62dc      	str	r4, [r3, #44]	; 0x2c
            IRQnb = EXTI11_IRQn;
 8041606:	2416      	movs	r4, #22
            break;
 8041608:	e03e      	b.n	8041688 <GpioSetInterrupt+0x15c>
        switch( obj->pinIndex )
 804160a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804160e:	d103      	bne.n	8041618 <GpioSetInterrupt+0xec>
        	GpioIrq[9] = obj;
 8041610:	4b26      	ldr	r3, [pc, #152]	; (80416ac <GpioSetInterrupt+0x180>)
 8041612:	625c      	str	r4, [r3, #36]	; 0x24
            IRQnb = EXTI9_IRQn;
 8041614:	2414      	movs	r4, #20
            break;
 8041616:	e037      	b.n	8041688 <GpioSetInterrupt+0x15c>
        switch( obj->pinIndex )
 8041618:	240b      	movs	r4, #11
 804161a:	e035      	b.n	8041688 <GpioSetInterrupt+0x15c>
 804161c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8041620:	d103      	bne.n	804162a <GpioSetInterrupt+0xfe>
        	GpioIrq[13] = obj;
 8041622:	4b22      	ldr	r3, [pc, #136]	; (80416ac <GpioSetInterrupt+0x180>)
 8041624:	635c      	str	r4, [r3, #52]	; 0x34
            IRQnb = EXTI13_IRQn;
 8041626:	2418      	movs	r4, #24
            break;
 8041628:	e02e      	b.n	8041688 <GpioSetInterrupt+0x15c>
        switch( obj->pinIndex )
 804162a:	240b      	movs	r4, #11
 804162c:	e02c      	b.n	8041688 <GpioSetInterrupt+0x15c>
        	GpioIrq[0] = obj;
 804162e:	4b1f      	ldr	r3, [pc, #124]	; (80416ac <GpioSetInterrupt+0x180>)
 8041630:	601c      	str	r4, [r3, #0]
            IRQnb = EXTI0_IRQn;
 8041632:	240b      	movs	r4, #11
            break;
 8041634:	e028      	b.n	8041688 <GpioSetInterrupt+0x15c>
        	GpioIrq[1] = obj;
 8041636:	4b1d      	ldr	r3, [pc, #116]	; (80416ac <GpioSetInterrupt+0x180>)
 8041638:	605c      	str	r4, [r3, #4]
            IRQnb = EXTI1_IRQn;
 804163a:	240c      	movs	r4, #12
            break;
 804163c:	e024      	b.n	8041688 <GpioSetInterrupt+0x15c>
        	GpioIrq[2] = obj;
 804163e:	4b1b      	ldr	r3, [pc, #108]	; (80416ac <GpioSetInterrupt+0x180>)
 8041640:	609c      	str	r4, [r3, #8]
            IRQnb = EXTI2_IRQn;
 8041642:	240d      	movs	r4, #13
            break;
 8041644:	e020      	b.n	8041688 <GpioSetInterrupt+0x15c>
        	GpioIrq[3] = obj;
 8041646:	4b19      	ldr	r3, [pc, #100]	; (80416ac <GpioSetInterrupt+0x180>)
 8041648:	60dc      	str	r4, [r3, #12]
            IRQnb = EXTI3_IRQn;
 804164a:	240e      	movs	r4, #14
            break;
 804164c:	e01c      	b.n	8041688 <GpioSetInterrupt+0x15c>
        	GpioIrq[4] = obj;
 804164e:	4b17      	ldr	r3, [pc, #92]	; (80416ac <GpioSetInterrupt+0x180>)
 8041650:	611c      	str	r4, [r3, #16]
            IRQnb = EXTI4_IRQn;
 8041652:	240f      	movs	r4, #15
            break;
 8041654:	e018      	b.n	8041688 <GpioSetInterrupt+0x15c>
        	GpioIrq[5] = obj;
 8041656:	4b15      	ldr	r3, [pc, #84]	; (80416ac <GpioSetInterrupt+0x180>)
 8041658:	615c      	str	r4, [r3, #20]
            IRQnb = EXTI5_IRQn;
 804165a:	2410      	movs	r4, #16
            break;
 804165c:	e014      	b.n	8041688 <GpioSetInterrupt+0x15c>
        	GpioIrq[6] = obj;
 804165e:	4b13      	ldr	r3, [pc, #76]	; (80416ac <GpioSetInterrupt+0x180>)
 8041660:	619c      	str	r4, [r3, #24]
            IRQnb = EXTI6_IRQn;
 8041662:	2411      	movs	r4, #17
            break;
 8041664:	e010      	b.n	8041688 <GpioSetInterrupt+0x15c>
        	GpioIrq[8] = obj;
 8041666:	4b11      	ldr	r3, [pc, #68]	; (80416ac <GpioSetInterrupt+0x180>)
 8041668:	621c      	str	r4, [r3, #32]
            IRQnb = EXTI8_IRQn;
 804166a:	2413      	movs	r4, #19
            break;
 804166c:	e00c      	b.n	8041688 <GpioSetInterrupt+0x15c>
        	GpioIrq[10] = obj;
 804166e:	4b0f      	ldr	r3, [pc, #60]	; (80416ac <GpioSetInterrupt+0x180>)
 8041670:	629c      	str	r4, [r3, #40]	; 0x28
            IRQnb = EXTI10_IRQn;
 8041672:	2415      	movs	r4, #21
            break;
 8041674:	e008      	b.n	8041688 <GpioSetInterrupt+0x15c>
        	GpioIrq[12] = obj;
 8041676:	4b0d      	ldr	r3, [pc, #52]	; (80416ac <GpioSetInterrupt+0x180>)
 8041678:	631c      	str	r4, [r3, #48]	; 0x30
            IRQnb = EXTI12_IRQn;
 804167a:	2417      	movs	r4, #23
            break;
 804167c:	e004      	b.n	8041688 <GpioSetInterrupt+0x15c>
        	GpioIrq[14] = obj;
 804167e:	4b0b      	ldr	r3, [pc, #44]	; (80416ac <GpioSetInterrupt+0x180>)
 8041680:	639c      	str	r4, [r3, #56]	; 0x38
            IRQnb = EXTI14_IRQn;
 8041682:	2419      	movs	r4, #25
            break;
 8041684:	e000      	b.n	8041688 <GpioSetInterrupt+0x15c>
        switch( obj->pinIndex )
 8041686:	240b      	movs	r4, #11
            break;
        }

//        GpioIrq[( obj->pin ) & 0x0F] = obj;

        HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 8041688:	2200      	movs	r2, #0
 804168a:	4620      	mov	r0, r4
 804168c:	f005 fe2c 	bl	80472e8 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( IRQnb );
 8041690:	4620      	mov	r0, r4
 8041692:	f005 fe5d 	bl	8047350 <HAL_NVIC_EnableIRQ>
//#if defined( BOARD_IOE_EXT )
//        // IOExt Pin
//        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
//#endif
//    }
}
 8041696:	b007      	add	sp, #28
 8041698:	bd30      	pop	{r4, r5, pc}
        switch( obj->pinIndex )
 804169a:	240b      	movs	r4, #11
 804169c:	e7f4      	b.n	8041688 <GpioSetInterrupt+0x15c>
 804169e:	4770      	bx	lr
 80416a0:	10310000 	.word	0x10310000
 80416a4:	10110000 	.word	0x10110000
 80416a8:	10210000 	.word	0x10210000
 80416ac:	200184a4 	.word	0x200184a4

080416b0 <GpioWrite>:
//#endif
//    }
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 80416b0:	b508      	push	{r3, lr}
        if( obj == NULL )
        {
            assert_param( FAIL );
        }
        // Check if pin is not connected
        if( obj->pin == NC )
 80416b2:	f990 3000 	ldrsb.w	r3, [r0]
 80416b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80416ba:	d004      	beq.n	80416c6 <GpioWrite+0x16>
        {
            return;
        }
        HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 80416bc:	b2ca      	uxtb	r2, r1
 80416be:	8841      	ldrh	r1, [r0, #2]
 80416c0:	6840      	ldr	r0, [r0, #4]
 80416c2:	f006 f9f2 	bl	8047aaa <HAL_GPIO_WritePin>
//#if defined( BOARD_IOE_EXT )
//        // IOExt Pin
//        GpioIoeWrite( obj, value );
//#endif
//    }
}
 80416c6:	bd08      	pop	{r3, pc}

080416c8 <GpioInit>:
{
 80416c8:	b570      	push	{r4, r5, r6, lr}
 80416ca:	b08a      	sub	sp, #40	; 0x28
 80416cc:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 80416d0:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
        obj->pin = pin;
 80416d4:	7002      	strb	r2, [r0, #0]
        if( pin == NC  || port == NULL)
 80416d6:	2900      	cmp	r1, #0
 80416d8:	d03b      	beq.n	8041752 <GpioInit+0x8a>
 80416da:	4604      	mov	r4, r0
        obj->pinIndex = pin; //( 0x01 << ( obj->pin & 0x0F ) );
 80416dc:	8042      	strh	r2, [r0, #2]
        if( ( obj->port ) == GPIOA )
 80416de:	4a43      	ldr	r2, [pc, #268]	; (80417ec <GpioInit+0x124>)
 80416e0:	4291      	cmp	r1, r2
 80416e2:	d018      	beq.n	8041716 <GpioInit+0x4e>
        else if( ( obj->port ) == GPIOB )
 80416e4:	4a42      	ldr	r2, [pc, #264]	; (80417f0 <GpioInit+0x128>)
 80416e6:	4291      	cmp	r1, r2
 80416e8:	d035      	beq.n	8041756 <GpioInit+0x8e>
        else if( ( obj->port ) == GPIOC )
 80416ea:	4a42      	ldr	r2, [pc, #264]	; (80417f4 <GpioInit+0x12c>)
 80416ec:	4291      	cmp	r1, r2
 80416ee:	d041      	beq.n	8041774 <GpioInit+0xac>
        else if( ( obj->port ) == GPIOD )
 80416f0:	4a41      	ldr	r2, [pc, #260]	; (80417f8 <GpioInit+0x130>)
 80416f2:	4291      	cmp	r1, r2
 80416f4:	d04d      	beq.n	8041792 <GpioInit+0xca>
            obj->port = GPIOH;
 80416f6:	4a41      	ldr	r2, [pc, #260]	; (80417fc <GpioInit+0x134>)
 80416f8:	6062      	str	r2, [r4, #4]
            __HAL_RCC_GPIOH_CLK_ENABLE( );
 80416fa:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 80416fe:	f5a2 6240 	sub.w	r2, r2, #3072	; 0xc00
 8041702:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8041704:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8041708:	64d1      	str	r1, [r2, #76]	; 0x4c
 804170a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 804170c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8041710:	9204      	str	r2, [sp, #16]
 8041712:	9a04      	ldr	r2, [sp, #16]
 8041714:	e00d      	b.n	8041732 <GpioInit+0x6a>
            obj->port = GPIOA;
 8041716:	6062      	str	r2, [r4, #4]
            __HAL_RCC_GPIOA_CLK_ENABLE( );
 8041718:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 804171c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8041720:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8041722:	f041 0101 	orr.w	r1, r1, #1
 8041726:	64d1      	str	r1, [r2, #76]	; 0x4c
 8041728:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 804172a:	f002 0201 	and.w	r2, r2, #1
 804172e:	9200      	str	r2, [sp, #0]
 8041730:	9a00      	ldr	r2, [sp, #0]
        GPIO_InitStructure.Pin =  obj->pinIndex ;
 8041732:	8862      	ldrh	r2, [r4, #2]
 8041734:	9205      	str	r2, [sp, #20]
        GPIO_InitStructure.Pull = obj->pull = type;
 8041736:	72a5      	strb	r5, [r4, #10]
 8041738:	9507      	str	r5, [sp, #28]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 804173a:	2202      	movs	r2, #2
 804173c:	9208      	str	r2, [sp, #32]
        if( mode == PIN_INPUT )
 804173e:	2b00      	cmp	r3, #0
 8041740:	d136      	bne.n	80417b0 <GpioInit+0xe8>
            GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8041742:	2200      	movs	r2, #0
 8041744:	9206      	str	r2, [sp, #24]
        if( mode == PIN_OUTPUT )
 8041746:	2b01      	cmp	r3, #1
 8041748:	d04b      	beq.n	80417e2 <GpioInit+0x11a>
        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 804174a:	a905      	add	r1, sp, #20
 804174c:	6860      	ldr	r0, [r4, #4]
 804174e:	f006 f83f 	bl	80477d0 <HAL_GPIO_Init>
}
 8041752:	b00a      	add	sp, #40	; 0x28
 8041754:	bd70      	pop	{r4, r5, r6, pc}
            obj->port = GPIOB;
 8041756:	6062      	str	r2, [r4, #4]
            __HAL_RCC_GPIOB_CLK_ENABLE( );
 8041758:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 804175c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8041760:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8041762:	f041 0102 	orr.w	r1, r1, #2
 8041766:	64d1      	str	r1, [r2, #76]	; 0x4c
 8041768:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 804176a:	f002 0202 	and.w	r2, r2, #2
 804176e:	9201      	str	r2, [sp, #4]
 8041770:	9a01      	ldr	r2, [sp, #4]
 8041772:	e7de      	b.n	8041732 <GpioInit+0x6a>
            obj->port = GPIOC;
 8041774:	6062      	str	r2, [r4, #4]
            __HAL_RCC_GPIOC_CLK_ENABLE( );
 8041776:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 804177a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 804177e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8041780:	f041 0104 	orr.w	r1, r1, #4
 8041784:	64d1      	str	r1, [r2, #76]	; 0x4c
 8041786:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8041788:	f002 0204 	and.w	r2, r2, #4
 804178c:	9202      	str	r2, [sp, #8]
 804178e:	9a02      	ldr	r2, [sp, #8]
 8041790:	e7cf      	b.n	8041732 <GpioInit+0x6a>
            obj->port = GPIOD;
 8041792:	6062      	str	r2, [r4, #4]
            __HAL_RCC_GPIOD_CLK_ENABLE( );
 8041794:	f102 427e 	add.w	r2, r2, #4261412864	; 0xfe000000
 8041798:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804179c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 804179e:	f041 0108 	orr.w	r1, r1, #8
 80417a2:	64d1      	str	r1, [r2, #76]	; 0x4c
 80417a4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80417a6:	f002 0208 	and.w	r2, r2, #8
 80417aa:	9203      	str	r2, [sp, #12]
 80417ac:	9a03      	ldr	r2, [sp, #12]
 80417ae:	e7c0      	b.n	8041732 <GpioInit+0x6a>
        else if( mode == PIN_ANALOGIC )
 80417b0:	2b03      	cmp	r3, #3
 80417b2:	d006      	beq.n	80417c2 <GpioInit+0xfa>
        else if( mode == PIN_ALTERNATE_FCT )
 80417b4:	2b02      	cmp	r3, #2
 80417b6:	d007      	beq.n	80417c8 <GpioInit+0x100>
            if( config == PIN_OPEN_DRAIN )
 80417b8:	2e01      	cmp	r6, #1
 80417ba:	d00f      	beq.n	80417dc <GpioInit+0x114>
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80417bc:	2201      	movs	r2, #1
 80417be:	9206      	str	r2, [sp, #24]
 80417c0:	e7c1      	b.n	8041746 <GpioInit+0x7e>
            GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80417c2:	2203      	movs	r2, #3
 80417c4:	9206      	str	r2, [sp, #24]
 80417c6:	e7be      	b.n	8041746 <GpioInit+0x7e>
            if( config == PIN_OPEN_DRAIN )
 80417c8:	2e01      	cmp	r6, #1
 80417ca:	d004      	beq.n	80417d6 <GpioInit+0x10e>
                GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80417cc:	2202      	movs	r2, #2
 80417ce:	9206      	str	r2, [sp, #24]
            GPIO_InitStructure.Alternate = value;
 80417d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80417d2:	9209      	str	r2, [sp, #36]	; 0x24
 80417d4:	e7b7      	b.n	8041746 <GpioInit+0x7e>
                GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 80417d6:	2212      	movs	r2, #18
 80417d8:	9206      	str	r2, [sp, #24]
 80417da:	e7f9      	b.n	80417d0 <GpioInit+0x108>
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 80417dc:	2211      	movs	r2, #17
 80417de:	9206      	str	r2, [sp, #24]
 80417e0:	e7b1      	b.n	8041746 <GpioInit+0x7e>
            GpioWrite( obj, value );
 80417e2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80417e4:	4620      	mov	r0, r4
 80417e6:	f7ff ff63 	bl	80416b0 <GpioWrite>
 80417ea:	e7ae      	b.n	804174a <GpioInit+0x82>
 80417ec:	42020000 	.word	0x42020000
 80417f0:	42020400 	.word	0x42020400
 80417f4:	42020800 	.word	0x42020800
 80417f8:	42020c00 	.word	0x42020c00
 80417fc:	42021c00 	.word	0x42021c00

08041800 <GpioRead>:
//#endif
//    }
}

uint32_t GpioRead( Gpio_t *obj )
{
 8041800:	b508      	push	{r3, lr}
        if( obj == NULL )
        {
            assert_param( FAIL );
        }
        // Check if pin is not connected
        if( obj->pin == NC )
 8041802:	f990 3000 	ldrsb.w	r3, [r0]
 8041806:	f1b3 3fff 	cmp.w	r3, #4294967295
 804180a:	d004      	beq.n	8041816 <GpioRead+0x16>
        {
            return 0;
        }
        return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
 804180c:	8841      	ldrh	r1, [r0, #2]
 804180e:	6840      	ldr	r0, [r0, #4]
 8041810:	f006 f944 	bl	8047a9c <HAL_GPIO_ReadPin>
//        return GpioIoeRead( obj );
//#else
//        return 0;
//#endif
//    }
}
 8041814:	bd08      	pop	{r3, pc}
            return 0;
 8041816:	2000      	movs	r0, #0
 8041818:	e7fc      	b.n	8041814 <GpioRead+0x14>

0804181a <EXTI0_IRQHandler>:

void EXTI0_IRQHandler( void )
{
 804181a:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 804181c:	2001      	movs	r0, #1
 804181e:	f006 f94b 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 8041822:	bd08      	pop	{r3, pc}

08041824 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 8041824:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8041826:	2002      	movs	r0, #2
 8041828:	f006 f946 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 804182c:	bd08      	pop	{r3, pc}

0804182e <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 804182e:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8041830:	2004      	movs	r0, #4
 8041832:	f006 f941 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 8041836:	bd08      	pop	{r3, pc}

08041838 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 8041838:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 804183a:	2008      	movs	r0, #8
 804183c:	f006 f93c 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 8041840:	bd08      	pop	{r3, pc}

08041842 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 8041842:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 8041844:	2010      	movs	r0, #16
 8041846:	f006 f937 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 804184a:	bd08      	pop	{r3, pc}

0804184c <EXTI5_IRQHandler>:

void EXTI5_IRQHandler( void )
{
 804184c:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 804184e:	2020      	movs	r0, #32
 8041850:	f006 f932 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 8041854:	bd08      	pop	{r3, pc}

08041856 <EXTI6_IRQHandler>:

void EXTI6_IRQHandler( void )
{
 8041856:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 8041858:	2040      	movs	r0, #64	; 0x40
 804185a:	f006 f92d 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 804185e:	bd08      	pop	{r3, pc}

08041860 <EXTI7_IRQHandler>:

void EXTI7_IRQHandler( void )
{
 8041860:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 8041862:	2080      	movs	r0, #128	; 0x80
 8041864:	f006 f928 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 8041868:	bd08      	pop	{r3, pc}

0804186a <EXTI8_IRQHandler>:

void EXTI8_IRQHandler( void )
{
 804186a:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 804186c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8041870:	f006 f922 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 8041874:	bd08      	pop	{r3, pc}

08041876 <EXTI9_IRQHandler>:

void EXTI9_IRQHandler( void )
{
 8041876:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8041878:	f44f 7000 	mov.w	r0, #512	; 0x200
 804187c:	f006 f91c 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 8041880:	bd08      	pop	{r3, pc}

08041882 <EXTI10_IRQHandler>:

void EXTI10_IRQHandler( void )
{
 8041882:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8041884:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8041888:	f006 f916 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 804188c:	bd08      	pop	{r3, pc}

0804188e <EXTI11_IRQHandler>:

void EXTI11_IRQHandler( void )
{
 804188e:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 8041890:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8041894:	f006 f910 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 8041898:	bd08      	pop	{r3, pc}

0804189a <EXTI12_IRQHandler>:

void EXTI12_IRQHandler( void )
{
 804189a:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 804189c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80418a0:	f006 f90a 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 80418a4:	bd08      	pop	{r3, pc}

080418a6 <EXTI13_IRQHandler>:

void EXTI13_IRQHandler( void )
{
 80418a6:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 80418a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80418ac:	f006 f904 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 80418b0:	bd08      	pop	{r3, pc}

080418b2 <EXTI14_IRQHandler>:

void EXTI14_IRQHandler( void )
{
 80418b2:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 80418b4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80418b8:	f006 f8fe 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 80418bc:	bd08      	pop	{r3, pc}

080418be <EXTI15_IRQHandler>:

void EXTI15_IRQHandler( void )
{
 80418be:	b508      	push	{r3, lr}
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 80418c0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80418c4:	f006 f8f8 	bl	8047ab8 <HAL_GPIO_EXTI_IRQHandler>
}
 80418c8:	bd08      	pop	{r3, pc}
	...

080418cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80418cc:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80418ce:	4812      	ldr	r0, [pc, #72]	; (8041918 <MX_I2C1_Init+0x4c>)
 80418d0:	4b12      	ldr	r3, [pc, #72]	; (804191c <MX_I2C1_Init+0x50>)
 80418d2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x30F77489;
 80418d4:	4b12      	ldr	r3, [pc, #72]	; (8041920 <MX_I2C1_Init+0x54>)
 80418d6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80418d8:	2300      	movs	r3, #0
 80418da:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80418dc:	2201      	movs	r2, #1
 80418de:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80418e0:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80418e2:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80418e4:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80418e6:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80418e8:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80418ea:	f006 fd93 	bl	8048414 <HAL_I2C_Init>
 80418ee:	b950      	cbnz	r0, 8041906 <MX_I2C1_Init+0x3a>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80418f0:	2100      	movs	r1, #0
 80418f2:	4809      	ldr	r0, [pc, #36]	; (8041918 <MX_I2C1_Init+0x4c>)
 80418f4:	f007 f872 	bl	80489dc <HAL_I2CEx_ConfigAnalogFilter>
 80418f8:	b940      	cbnz	r0, 804190c <MX_I2C1_Init+0x40>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80418fa:	2100      	movs	r1, #0
 80418fc:	4806      	ldr	r0, [pc, #24]	; (8041918 <MX_I2C1_Init+0x4c>)
 80418fe:	f007 f89b 	bl	8048a38 <HAL_I2CEx_ConfigDigitalFilter>
 8041902:	b930      	cbnz	r0, 8041912 <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8041904:	bd08      	pop	{r3, pc}
    Error_Handler();
 8041906:	f000 fb13 	bl	8041f30 <Error_Handler>
 804190a:	e7f1      	b.n	80418f0 <MX_I2C1_Init+0x24>
    Error_Handler();
 804190c:	f000 fb10 	bl	8041f30 <Error_Handler>
 8041910:	e7f3      	b.n	80418fa <MX_I2C1_Init+0x2e>
    Error_Handler();
 8041912:	f000 fb0d 	bl	8041f30 <Error_Handler>
}
 8041916:	e7f5      	b.n	8041904 <MX_I2C1_Init+0x38>
 8041918:	2001a218 	.word	0x2001a218
 804191c:	40005400 	.word	0x40005400
 8041920:	30f77489 	.word	0x30f77489

08041924 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8041924:	b530      	push	{r4, r5, lr}
 8041926:	b0ad      	sub	sp, #180	; 0xb4
 8041928:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804192a:	2100      	movs	r1, #0
 804192c:	9127      	str	r1, [sp, #156]	; 0x9c
 804192e:	9128      	str	r1, [sp, #160]	; 0xa0
 8041930:	9129      	str	r1, [sp, #164]	; 0xa4
 8041932:	912a      	str	r1, [sp, #168]	; 0xa8
 8041934:	912b      	str	r1, [sp, #172]	; 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8041936:	2294      	movs	r2, #148	; 0x94
 8041938:	a802      	add	r0, sp, #8
 804193a:	f013 fb2e 	bl	8054f9a <memset>
  if(i2cHandle->Instance==I2C1)
 804193e:	6822      	ldr	r2, [r4, #0]
 8041940:	4b21      	ldr	r3, [pc, #132]	; (80419c8 <HAL_I2C_MspInit+0xa4>)
 8041942:	429a      	cmp	r2, r3
 8041944:	d001      	beq.n	804194a <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8041946:	b02d      	add	sp, #180	; 0xb4
 8041948:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 804194a:	2340      	movs	r3, #64	; 0x40
 804194c:	9302      	str	r3, [sp, #8]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 804194e:	2300      	movs	r3, #0
 8041950:	9315      	str	r3, [sp, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8041952:	a802      	add	r0, sp, #8
 8041954:	f007 fb02 	bl	8048f5c <HAL_RCCEx_PeriphCLKConfig>
 8041958:	2800      	cmp	r0, #0
 804195a:	d132      	bne.n	80419c2 <HAL_I2C_MspInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 804195c:	4c1b      	ldr	r4, [pc, #108]	; (80419cc <HAL_I2C_MspInit+0xa8>)
 804195e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8041960:	f043 0302 	orr.w	r3, r3, #2
 8041964:	64e3      	str	r3, [r4, #76]	; 0x4c
 8041966:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8041968:	f003 0302 	and.w	r3, r3, #2
 804196c:	9300      	str	r3, [sp, #0]
 804196e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = EXT_SCL_Pin|EXT_SDA_Pin;
 8041970:	f44f 7340 	mov.w	r3, #768	; 0x300
 8041974:	9327      	str	r3, [sp, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8041976:	2312      	movs	r3, #18
 8041978:	9328      	str	r3, [sp, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 804197a:	2301      	movs	r3, #1
 804197c:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804197e:	2500      	movs	r5, #0
 8041980:	952a      	str	r5, [sp, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8041982:	2304      	movs	r3, #4
 8041984:	932b      	str	r3, [sp, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8041986:	a927      	add	r1, sp, #156	; 0x9c
 8041988:	4811      	ldr	r0, [pc, #68]	; (80419d0 <HAL_I2C_MspInit+0xac>)
 804198a:	f005 ff21 	bl	80477d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 804198e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8041990:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8041994:	65a3      	str	r3, [r4, #88]	; 0x58
 8041996:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8041998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804199c:	9301      	str	r3, [sp, #4]
 804199e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80419a0:	462a      	mov	r2, r5
 80419a2:	4629      	mov	r1, r5
 80419a4:	2037      	movs	r0, #55	; 0x37
 80419a6:	f005 fc9f 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80419aa:	2037      	movs	r0, #55	; 0x37
 80419ac:	f005 fcd0 	bl	8047350 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80419b0:	462a      	mov	r2, r5
 80419b2:	4629      	mov	r1, r5
 80419b4:	2038      	movs	r0, #56	; 0x38
 80419b6:	f005 fc97 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80419ba:	2038      	movs	r0, #56	; 0x38
 80419bc:	f005 fcc8 	bl	8047350 <HAL_NVIC_EnableIRQ>
}
 80419c0:	e7c1      	b.n	8041946 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80419c2:	f000 fab5 	bl	8041f30 <Error_Handler>
 80419c6:	e7c9      	b.n	804195c <HAL_I2C_MspInit+0x38>
 80419c8:	40005400 	.word	0x40005400
 80419cc:	40021000 	.word	0x40021000
 80419d0:	42020400 	.word	0x42020400

080419d4 <LpmSetStopMode>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80419d4:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80419d8:	b672      	cpsid	i

void LpmSetStopMode( LpmId_t id, LpmSetMode_t mode )
{
    CRITICAL_SECTION_BEGIN( );

    switch( mode )
 80419da:	b141      	cbz	r1, 80419ee <LpmSetStopMode+0x1a>
 80419dc:	2901      	cmp	r1, #1
 80419de:	d103      	bne.n	80419e8 <LpmSetStopMode+0x14>
    {
        case LPM_DISABLE:
        {
            StopModeDisable |= ( uint32_t )id;
 80419e0:	4906      	ldr	r1, [pc, #24]	; (80419fc <LpmSetStopMode+0x28>)
 80419e2:	680a      	ldr	r2, [r1, #0]
 80419e4:	4310      	orrs	r0, r2
 80419e6:	6008      	str	r0, [r1, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80419e8:	f383 8810 	msr	PRIMASK, r3
        }
    }

    CRITICAL_SECTION_END( );
    return;
}
 80419ec:	4770      	bx	lr
            StopModeDisable &= ~( uint32_t )id;
 80419ee:	4903      	ldr	r1, [pc, #12]	; (80419fc <LpmSetStopMode+0x28>)
 80419f0:	680a      	ldr	r2, [r1, #0]
 80419f2:	ea22 0000 	bic.w	r0, r2, r0
 80419f6:	6008      	str	r0, [r1, #0]
            break;
 80419f8:	e7f6      	b.n	80419e8 <LpmSetStopMode+0x14>
 80419fa:	bf00      	nop
 80419fc:	200184e8 	.word	0x200184e8

08041a00 <LpmGetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8041a00:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8041a04:	b672      	cpsid	i
{
    LpmGetMode_t mode;

    CRITICAL_SECTION_BEGIN( );

    if( StopModeDisable != 0 )
 8041a06:	4a07      	ldr	r2, [pc, #28]	; (8041a24 <LpmGetMode+0x24>)
 8041a08:	6812      	ldr	r2, [r2, #0]
 8041a0a:	b922      	cbnz	r2, 8041a16 <LpmGetMode+0x16>
    {
        mode = LPM_SLEEP_MODE;
    }
    else
    {
        if( OffModeDisable != 0 )
 8041a0c:	4a06      	ldr	r2, [pc, #24]	; (8041a28 <LpmGetMode+0x28>)
 8041a0e:	6812      	ldr	r2, [r2, #0]
 8041a10:	b12a      	cbz	r2, 8041a1e <LpmGetMode+0x1e>
        {
            mode = LPM_STOP_MODE;
 8041a12:	2001      	movs	r0, #1
 8041a14:	e000      	b.n	8041a18 <LpmGetMode+0x18>
        mode = LPM_SLEEP_MODE;
 8041a16:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041a18:	f383 8810 	msr	PRIMASK, r3
        }
    }

    CRITICAL_SECTION_END( );
    return mode;
}
 8041a1c:	4770      	bx	lr
            mode = LPM_OFF_MODE;
 8041a1e:	2002      	movs	r0, #2
 8041a20:	e7fa      	b.n	8041a18 <LpmGetMode+0x18>
 8041a22:	bf00      	nop
 8041a24:	200184e8 	.word	0x200184e8
 8041a28:	200184e4 	.word	0x200184e4

08041a2c <LpmEnterSleepMode>:

__weak void LpmEnterSleepMode( void )
{
 8041a2c:	b508      	push	{r3, lr}
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8041a2e:	2101      	movs	r1, #1
 8041a30:	2000      	movs	r0, #0
 8041a32:	f007 f82d 	bl	8048a90 <HAL_PWR_EnterSLEEPMode>
}
 8041a36:	bd08      	pop	{r3, pc}

08041a38 <LpmExitSleepMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8041a38:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8041a3c:	b672      	cpsid	i
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041a3e:	f383 8810 	msr	PRIMASK, r3

	    // Initilizes the peripherals
//	    BoardInitMcu( );

	    CRITICAL_SECTION_END( );
}
 8041a42:	4770      	bx	lr

08041a44 <LpmEnterStopMode>:

__weak void LpmEnterStopMode( void )
{
 8041a44:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8041a46:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8041a4a:	b672      	cpsid	i
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041a4c:	f383 8810 	msr	PRIMASK, r3
//	    BoardDeInitMcu( );

	    CRITICAL_SECTION_END( );

	    // Enter Stop Mode
	    HAL_PWR_EnterSTOPMode( PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI );
 8041a50:	2101      	movs	r1, #1
 8041a52:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8041a56:	f007 f841 	bl	8048adc <HAL_PWR_EnterSTOPMode>
}
 8041a5a:	bd08      	pop	{r3, pc}

08041a5c <LpmExitStopMode>:

__weak void LpmExitStopMode( void )
{
}
 8041a5c:	4770      	bx	lr

08041a5e <LpmEnterOffMode>:

__weak void LpmEnterOffMode( void )
{
}
 8041a5e:	4770      	bx	lr

08041a60 <LpmExitOffMode>:

__weak void LpmExitOffMode( void )
{
}
 8041a60:	4770      	bx	lr
	...

08041a64 <LpmEnterLowPower>:
{
 8041a64:	b508      	push	{r3, lr}
    if( StopModeDisable != 0 )
 8041a66:	4b0a      	ldr	r3, [pc, #40]	; (8041a90 <LpmEnterLowPower+0x2c>)
 8041a68:	681b      	ldr	r3, [r3, #0]
 8041a6a:	b93b      	cbnz	r3, 8041a7c <LpmEnterLowPower+0x18>
        if( OffModeDisable != 0 )
 8041a6c:	4b09      	ldr	r3, [pc, #36]	; (8041a94 <LpmEnterLowPower+0x30>)
 8041a6e:	681b      	ldr	r3, [r3, #0]
 8041a70:	b14b      	cbz	r3, 8041a86 <LpmEnterLowPower+0x22>
            LpmEnterStopMode( );
 8041a72:	f7ff ffe7 	bl	8041a44 <LpmEnterStopMode>
            LpmExitStopMode( );
 8041a76:	f7ff fff1 	bl	8041a5c <LpmExitStopMode>
}
 8041a7a:	bd08      	pop	{r3, pc}
        LpmEnterSleepMode( );
 8041a7c:	f7ff ffd6 	bl	8041a2c <LpmEnterSleepMode>
        LpmExitSleepMode( );
 8041a80:	f7ff ffda 	bl	8041a38 <LpmExitSleepMode>
 8041a84:	e7f9      	b.n	8041a7a <LpmEnterLowPower+0x16>
            LpmEnterOffMode( );
 8041a86:	f7ff ffea 	bl	8041a5e <LpmEnterOffMode>
            LpmExitOffMode( );
 8041a8a:	f7ff ffe9 	bl	8041a60 <LpmExitOffMode>
    return;
 8041a8e:	e7f4      	b.n	8041a7a <LpmEnterLowPower+0x16>
 8041a90:	200184e8 	.word	0x200184e8
 8041a94:	200184e4 	.word	0x200184e4

08041a98 <OnMacProcessNotify>:
}


static void OnMacProcessNotify( void )
{
    IsMacProcessPending = 1;
 8041a98:	4b01      	ldr	r3, [pc, #4]	; (8041aa0 <OnMacProcessNotify+0x8>)
 8041a9a:	2201      	movs	r2, #1
 8041a9c:	701a      	strb	r2, [r3, #0]
}
 8041a9e:	4770      	bx	lr
 8041aa0:	200185df 	.word	0x200185df

08041aa4 <OnSysTimeUpdate>:

#if( LMH_SYS_TIME_UPDATE_NEW_API == 1 )
static void OnSysTimeUpdate( bool isSynchronized, int32_t timeCorrection )
{

}
 8041aa4:	4770      	bx	lr
	...

08041aa8 <OnTxFrameCtrlChanged>:
    }
}

static void OnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8041aa8:	4b01      	ldr	r3, [pc, #4]	; (8041ab0 <OnTxFrameCtrlChanged+0x8>)
 8041aaa:	7098      	strb	r0, [r3, #2]
}
 8041aac:	4770      	bx	lr
 8041aae:	bf00      	nop
 8041ab0:	20018040 	.word	0x20018040

08041ab4 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8041ab4:	3800      	subs	r0, #0
 8041ab6:	bf18      	it	ne
 8041ab8:	2001      	movne	r0, #1
 8041aba:	4b01      	ldr	r3, [pc, #4]	; (8041ac0 <OnPingSlotPeriodicityChanged+0xc>)
 8041abc:	7318      	strb	r0, [r3, #12]
}
 8041abe:	4770      	bx	lr
 8041ac0:	20018040 	.word	0x20018040

08041ac4 <OnTxPeriodicityChanged>:
{
 8041ac4:	b508      	push	{r3, lr}
    TxPeriodicity = periodicity;
 8041ac6:	4b08      	ldr	r3, [pc, #32]	; (8041ae8 <OnTxPeriodicityChanged+0x24>)
 8041ac8:	6018      	str	r0, [r3, #0]
    if( TxPeriodicity == 0 )
 8041aca:	681b      	ldr	r3, [r3, #0]
 8041acc:	b103      	cbz	r3, 8041ad0 <OnTxPeriodicityChanged+0xc>
}
 8041ace:	bd08      	pop	{r3, pc}
        TxPeriodicity = APP_TX_DUTYCYCLE + randr( -APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND );
 8041ad0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8041ad4:	4805      	ldr	r0, [pc, #20]	; (8041aec <OnTxPeriodicityChanged+0x28>)
 8041ad6:	f013 f9dd 	bl	8054e94 <randr>
 8041ada:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8041ade:	3008      	adds	r0, #8
 8041ae0:	4b01      	ldr	r3, [pc, #4]	; (8041ae8 <OnTxPeriodicityChanged+0x24>)
 8041ae2:	6018      	str	r0, [r3, #0]
}
 8041ae4:	e7f3      	b.n	8041ace <OnTxPeriodicityChanged+0xa>
 8041ae6:	bf00      	nop
 8041ae8:	2001862c 	.word	0x2001862c
 8041aec:	fffffc18 	.word	0xfffffc18

08041af0 <OnTxTimerEvent>:

/*!
 * Function executed on TxTimer event
 */
static void OnTxTimerEvent( void* context )
{
 8041af0:	b510      	push	{r4, lr}
    TimerStop( &TxTimer );
 8041af2:	4c08      	ldr	r4, [pc, #32]	; (8041b14 <OnTxTimerEvent+0x24>)
 8041af4:	4620      	mov	r0, r4
 8041af6:	f001 fb33 	bl	8043160 <TimerStop>

    IsTxFramePending = 1;
 8041afa:	4b07      	ldr	r3, [pc, #28]	; (8041b18 <OnTxTimerEvent+0x28>)
 8041afc:	2201      	movs	r2, #1
 8041afe:	701a      	strb	r2, [r3, #0]

    // Schedule next transmission
    TimerSetValue( &TxTimer, TxPeriodicity );
 8041b00:	4b06      	ldr	r3, [pc, #24]	; (8041b1c <OnTxTimerEvent+0x2c>)
 8041b02:	6819      	ldr	r1, [r3, #0]
 8041b04:	4620      	mov	r0, r4
 8041b06:	f001 fb67 	bl	80431d8 <TimerSetValue>
    TimerStart( &TxTimer );
 8041b0a:	4620      	mov	r0, r4
 8041b0c:	f001 fab4 	bl	8043078 <TimerStart>
}
 8041b10:	bd10      	pop	{r4, pc}
 8041b12:	bf00      	nop
 8041b14:	20018630 	.word	0x20018630
 8041b18:	200185e0 	.word	0x200185e0
 8041b1c:	2001862c 	.word	0x2001862c

08041b20 <StartTxProcess>:
    switch( txEvent )
 8041b20:	2801      	cmp	r0, #1
 8041b22:	d100      	bne.n	8041b26 <StartTxProcess+0x6>
 8041b24:	4770      	bx	lr
{
 8041b26:	b510      	push	{r4, lr}
            TimerInit( &TxTimer, OnTxTimerEvent );
 8041b28:	4c06      	ldr	r4, [pc, #24]	; (8041b44 <StartTxProcess+0x24>)
 8041b2a:	4907      	ldr	r1, [pc, #28]	; (8041b48 <StartTxProcess+0x28>)
 8041b2c:	4620      	mov	r0, r4
 8041b2e:	f001 fa99 	bl	8043064 <TimerInit>
            TimerSetValue( &TxTimer, TxPeriodicity );
 8041b32:	4b06      	ldr	r3, [pc, #24]	; (8041b4c <StartTxProcess+0x2c>)
 8041b34:	6819      	ldr	r1, [r3, #0]
 8041b36:	4620      	mov	r0, r4
 8041b38:	f001 fb4e 	bl	80431d8 <TimerSetValue>
            OnTxTimerEvent( NULL );
 8041b3c:	2000      	movs	r0, #0
 8041b3e:	f7ff ffd7 	bl	8041af0 <OnTxTimerEvent>
}
 8041b42:	bd10      	pop	{r4, pc}
 8041b44:	20018630 	.word	0x20018630
 8041b48:	08041af1 	.word	0x08041af1
 8041b4c:	2001862c 	.word	0x2001862c

08041b50 <OnBeaconStatusChange>:
{
 8041b50:	b510      	push	{r4, lr}
 8041b52:	4604      	mov	r4, r0
    switch( params->State )
 8041b54:	7843      	ldrb	r3, [r0, #1]
 8041b56:	2b02      	cmp	r3, #2
 8041b58:	d007      	beq.n	8041b6a <OnBeaconStatusChange+0x1a>
 8041b5a:	2b03      	cmp	r3, #3
 8041b5c:	d009      	beq.n	8041b72 <OnBeaconStatusChange+0x22>
 8041b5e:	2b01      	cmp	r3, #1
 8041b60:	d007      	beq.n	8041b72 <OnBeaconStatusChange+0x22>
    DisplayBeaconUpdate( params );
 8041b62:	4620      	mov	r0, r4
 8041b64:	f00a fb08 	bl	804c178 <DisplayBeaconUpdate>
}
 8041b68:	bd10      	pop	{r4, pc}
            TimerStart( &LedBeaconTimer );
 8041b6a:	4804      	ldr	r0, [pc, #16]	; (8041b7c <OnBeaconStatusChange+0x2c>)
 8041b6c:	f001 fa84 	bl	8043078 <TimerStart>
            break;
 8041b70:	e7f7      	b.n	8041b62 <OnBeaconStatusChange+0x12>
            TimerStop( &LedBeaconTimer );
 8041b72:	4802      	ldr	r0, [pc, #8]	; (8041b7c <OnBeaconStatusChange+0x2c>)
 8041b74:	f001 faf4 	bl	8043160 <TimerStop>
            break;
 8041b78:	e7f3      	b.n	8041b62 <OnBeaconStatusChange+0x12>
 8041b7a:	bf00      	nop
 8041b7c:	20018614 	.word	0x20018614

08041b80 <OnClassChange>:
{
 8041b80:	b500      	push	{lr}
 8041b82:	b083      	sub	sp, #12
    DisplayClassUpdate( deviceClass );
 8041b84:	f00a fb4a 	bl	804c21c <DisplayClassUpdate>
    LmHandlerAppData_t appData =
 8041b88:	2100      	movs	r1, #0
 8041b8a:	f88d 1000 	strb.w	r1, [sp]
 8041b8e:	f88d 1001 	strb.w	r1, [sp, #1]
 8041b92:	9101      	str	r1, [sp, #4]
    LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
 8041b94:	4668      	mov	r0, sp
 8041b96:	f00a fe1d 	bl	804c7d4 <LmHandlerSend>
}
 8041b9a:	b003      	add	sp, #12
 8041b9c:	f85d fb04 	ldr.w	pc, [sp], #4

08041ba0 <OnRxData>:
{
 8041ba0:	b510      	push	{r4, lr}
 8041ba2:	4604      	mov	r4, r0
    DisplayRxUpdate( appData, params );
 8041ba4:	f00a fa78 	bl	804c098 <DisplayRxUpdate>
    switch( appData->Port )
 8041ba8:	7823      	ldrb	r3, [r4, #0]
 8041baa:	3b01      	subs	r3, #1
 8041bac:	2b01      	cmp	r3, #1
 8041bae:	d906      	bls.n	8041bbe <OnRxData+0x1e>
    SECURE_LED_RED(true);
 8041bb0:	2001      	movs	r0, #1
 8041bb2:	f017 ffb5 	bl	8059b20 <__SECURE_LED_RED_veneer>
    TimerStart( &Led2Timer );
 8041bb6:	4805      	ldr	r0, [pc, #20]	; (8041bcc <OnRxData+0x2c>)
 8041bb8:	f001 fa5e 	bl	8043078 <TimerStart>
}
 8041bbc:	bd10      	pop	{r4, pc}
            AppLedStateOn = appData->Buffer[0] & 0x01;
 8041bbe:	6863      	ldr	r3, [r4, #4]
 8041bc0:	781b      	ldrb	r3, [r3, #0]
 8041bc2:	f003 0301 	and.w	r3, r3, #1
 8041bc6:	4a02      	ldr	r2, [pc, #8]	; (8041bd0 <OnRxData+0x30>)
 8041bc8:	7013      	strb	r3, [r2, #0]
        break;
 8041bca:	e7f1      	b.n	8041bb0 <OnRxData+0x10>
 8041bcc:	200185fc 	.word	0x200185fc
 8041bd0:	200185de 	.word	0x200185de

08041bd4 <OnLedBeaconTimerEvent>:

/*!
 * \brief Function executed on Beacon timer Timeout event
 */
static void OnLedBeaconTimerEvent( void* context )
{
 8041bd4:	b508      	push	{r3, lr}
//    GpioWrite( &Led2, 1 );
    SECURE_LED_RED(true);
 8041bd6:	2001      	movs	r0, #1
 8041bd8:	f017 ffa2 	bl	8059b20 <__SECURE_LED_RED_veneer>
    TimerStart( &Led2Timer );
 8041bdc:	4803      	ldr	r0, [pc, #12]	; (8041bec <OnLedBeaconTimerEvent+0x18>)
 8041bde:	f001 fa4b 	bl	8043078 <TimerStart>

    TimerStart( &LedBeaconTimer );
 8041be2:	4803      	ldr	r0, [pc, #12]	; (8041bf0 <OnLedBeaconTimerEvent+0x1c>)
 8041be4:	f001 fa48 	bl	8043078 <TimerStart>
}
 8041be8:	bd08      	pop	{r3, pc}
 8041bea:	bf00      	nop
 8041bec:	200185fc 	.word	0x200185fc
 8041bf0:	20018614 	.word	0x20018614

08041bf4 <OnLed2TimerEvent>:
{
 8041bf4:	b508      	push	{r3, lr}
    TimerStop( &Led2Timer );
 8041bf6:	4803      	ldr	r0, [pc, #12]	; (8041c04 <OnLed2TimerEvent+0x10>)
 8041bf8:	f001 fab2 	bl	8043160 <TimerStop>
    SECURE_LED_RED(false);
 8041bfc:	2000      	movs	r0, #0
 8041bfe:	f017 ff8f 	bl	8059b20 <__SECURE_LED_RED_veneer>
}
 8041c02:	bd08      	pop	{r3, pc}
 8041c04:	200185fc 	.word	0x200185fc

08041c08 <OnTxData>:
{
 8041c08:	b508      	push	{r3, lr}
    DisplayTxUpdate( params );
 8041c0a:	f00a f983 	bl	804bf14 <DisplayTxUpdate>
}
 8041c0e:	bd08      	pop	{r3, pc}

08041c10 <OnJoinRequest>:
{
 8041c10:	b510      	push	{r4, lr}
 8041c12:	4604      	mov	r4, r0
    DisplayJoinRequestUpdate( params );
 8041c14:	f00a f944 	bl	804bea0 <DisplayJoinRequestUpdate>
    if( params->Status == LORAMAC_HANDLER_ERROR )
 8041c18:	f994 3005 	ldrsb.w	r3, [r4, #5]
 8041c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8041c20:	d003      	beq.n	8041c2a <OnJoinRequest+0x1a>
        LmHandlerRequestClass( LORAWAN_DEFAULT_CLASS );
 8041c22:	2000      	movs	r0, #0
 8041c24:	f00a fe66 	bl	804c8f4 <LmHandlerRequestClass>
}
 8041c28:	bd10      	pop	{r4, pc}
        LmHandlerJoin( );
 8041c2a:	f00a fd97 	bl	804c75c <LmHandlerJoin>
 8041c2e:	e7fb      	b.n	8041c28 <OnJoinRequest+0x18>

08041c30 <OnMacMlmeRequest>:
{
 8041c30:	b508      	push	{r3, lr}
    DisplayMacMlmeRequestUpdate( status, mlmeReq, nextTxIn );
 8041c32:	f00a f8d3 	bl	804bddc <DisplayMacMlmeRequestUpdate>
}
 8041c36:	bd08      	pop	{r3, pc}

08041c38 <OnMacMcpsRequest>:
{
 8041c38:	b508      	push	{r3, lr}
    DisplayMacMcpsRequestUpdate( status, mcpsReq, nextTxIn );
 8041c3a:	f00a f87f 	bl	804bd3c <DisplayMacMcpsRequestUpdate>
}
 8041c3e:	bd08      	pop	{r3, pc}

08041c40 <OnNetworkParametersChange>:
{
 8041c40:	b508      	push	{r3, lr}
    DisplayNetworkParametersUpdate( params );
 8041c42:	f00a f83b 	bl	804bcbc <DisplayNetworkParametersUpdate>
}
 8041c46:	bd08      	pop	{r3, pc}

08041c48 <OnNvmDataChange>:
{
 8041c48:	b508      	push	{r3, lr}
    DisplayNvmDataChange( state, size );
 8041c4a:	f00a f821 	bl	804bc90 <DisplayNvmDataChange>
}
 8041c4e:	bd08      	pop	{r3, pc}

08041c50 <OnLed1TimerEvent>:
{
 8041c50:	b508      	push	{r3, lr}
    TimerStop( &Led1Timer );
 8041c52:	4803      	ldr	r0, [pc, #12]	; (8041c60 <OnLed1TimerEvent+0x10>)
 8041c54:	f001 fa84 	bl	8043160 <TimerStop>
    SECURE_LED_YELLOW(false);
 8041c58:	2000      	movs	r0, #0
 8041c5a:	f017 ff71 	bl	8059b40 <__SECURE_LED_YELLOW_veneer>
}
 8041c5e:	bd08      	pop	{r3, pc}
 8041c60:	200185e4 	.word	0x200185e4

08041c64 <PrepareTxFrame>:
{
 8041c64:	b538      	push	{r3, r4, r5, lr}
    if( LmHandlerIsBusy( ) == true )
 8041c66:	f00a fd93 	bl	804c790 <LmHandlerIsBusy>
 8041c6a:	b100      	cbz	r0, 8041c6e <PrepareTxFrame+0xa>
}
 8041c6c:	bd38      	pop	{r3, r4, r5, pc}
    AppData.Port = LORAWAN_APP_PORT;
 8041c6e:	4c26      	ldr	r4, [pc, #152]	; (8041d08 <PrepareTxFrame+0xa4>)
 8041c70:	2502      	movs	r5, #2
 8041c72:	7025      	strb	r5, [r4, #0]
    CayenneLppReset( );
 8041c74:	f009 fef4 	bl	804ba60 <CayenneLppReset>
    CayenneLppAddDigitalInput( channel++, AppLedStateOn );
 8041c78:	4b24      	ldr	r3, [pc, #144]	; (8041d0c <PrepareTxFrame+0xa8>)
 8041c7a:	7819      	ldrb	r1, [r3, #0]
 8041c7c:	2000      	movs	r0, #0
 8041c7e:	f009 ff07 	bl	804ba90 <CayenneLppAddDigitalInput>
    CayenneLppAddAnalogInput( channel++, BoardGetBatteryLevel( ) * 100 / 254 );
 8041c82:	f003 f863 	bl	8044d4c <BoardGetBatteryLevel>
 8041c86:	2364      	movs	r3, #100	; 0x64
 8041c88:	fb03 f000 	mul.w	r0, r3, r0
 8041c8c:	4b20      	ldr	r3, [pc, #128]	; (8041d10 <PrepareTxFrame+0xac>)
 8041c8e:	fb83 2300 	smull	r2, r3, r3, r0
 8041c92:	4403      	add	r3, r0
 8041c94:	17c0      	asrs	r0, r0, #31
 8041c96:	ebc0 13e3 	rsb	r3, r0, r3, asr #7
 8041c9a:	ee00 3a10 	vmov	s0, r3
 8041c9e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8041ca2:	2001      	movs	r0, #1
 8041ca4:	f009 ff10 	bl	804bac8 <CayenneLppAddAnalogInput>
    CayenneLppAddAnalogInput( channel++, iddValue[0]);
 8041ca8:	4b1a      	ldr	r3, [pc, #104]	; (8041d14 <PrepareTxFrame+0xb0>)
 8041caa:	ed93 0a00 	vldr	s0, [r3]
 8041cae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8041cb2:	4628      	mov	r0, r5
 8041cb4:	f009 ff08 	bl	804bac8 <CayenneLppAddAnalogInput>
    CayenneLppAddGyrometer(channel++, pfData[0], pfData[1], pfData[2]);
 8041cb8:	4b17      	ldr	r3, [pc, #92]	; (8041d18 <PrepareTxFrame+0xb4>)
 8041cba:	ed93 1a02 	vldr	s2, [r3, #8]
 8041cbe:	edd3 0a01 	vldr	s1, [r3, #4]
 8041cc2:	ed93 0a00 	vldr	s0, [r3]
 8041cc6:	2003      	movs	r0, #3
 8041cc8:	f009 ff28 	bl	804bb1c <CayenneLppAddGyrometer>
    CayenneLppAddGps(channel++, latitude, longitude, meters);
 8041ccc:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8041d1c <PrepareTxFrame+0xb8>
 8041cd0:	eeb0 1a40 	vmov.f32	s2, s0
 8041cd4:	eef0 0a40 	vmov.f32	s1, s0
 8041cd8:	2004      	movs	r0, #4
 8041cda:	f009 ff65 	bl	804bba8 <CayenneLppAddGps>
    CayenneLppCopy( AppData.Buffer );
 8041cde:	6860      	ldr	r0, [r4, #4]
 8041ce0:	f009 feca 	bl	804ba78 <CayenneLppCopy>
    AppData.BufferSize = CayenneLppGetSize( );
 8041ce4:	f009 fec2 	bl	804ba6c <CayenneLppGetSize>
 8041ce8:	7060      	strb	r0, [r4, #1]
    if( LmHandlerSend( &AppData, LmHandlerParams.IsTxConfirmed ) == LORAMAC_HANDLER_SUCCESS )
 8041cea:	4b0d      	ldr	r3, [pc, #52]	; (8041d20 <PrepareTxFrame+0xbc>)
 8041cec:	7899      	ldrb	r1, [r3, #2]
 8041cee:	4620      	mov	r0, r4
 8041cf0:	f00a fd70 	bl	804c7d4 <LmHandlerSend>
 8041cf4:	2800      	cmp	r0, #0
 8041cf6:	d1b9      	bne.n	8041c6c <PrepareTxFrame+0x8>
        SECURE_LED_YELLOW(true);
 8041cf8:	2001      	movs	r0, #1
 8041cfa:	f017 ff21 	bl	8059b40 <__SECURE_LED_YELLOW_veneer>
        TimerStart( &Led1Timer );
 8041cfe:	4809      	ldr	r0, [pc, #36]	; (8041d24 <PrepareTxFrame+0xc0>)
 8041d00:	f001 f9ba 	bl	8043078 <TimerStart>
 8041d04:	e7b2      	b.n	8041c6c <PrepareTxFrame+0x8>
 8041d06:	bf00      	nop
 8041d08:	20018000 	.word	0x20018000
 8041d0c:	200185de 	.word	0x200185de
 8041d10:	81020409 	.word	0x81020409
 8041d14:	20018648 	.word	0x20018648
 8041d18:	20018650 	.word	0x20018650
 8041d1c:	00000000 	.word	0x00000000
 8041d20:	20018040 	.word	0x20018040
 8041d24:	200185e4 	.word	0x200185e4

08041d28 <UplinkProcess>:
{
 8041d28:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8041d2a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8041d2e:	b672      	cpsid	i
    isPending = IsTxFramePending;
 8041d30:	4a06      	ldr	r2, [pc, #24]	; (8041d4c <UplinkProcess+0x24>)
 8041d32:	7813      	ldrb	r3, [r2, #0]
 8041d34:	b2db      	uxtb	r3, r3
    IsTxFramePending = 0;
 8041d36:	2000      	movs	r0, #0
 8041d38:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8041d3a:	f381 8810 	msr	PRIMASK, r1
    if( isPending == 1 )
 8041d3e:	2b01      	cmp	r3, #1
 8041d40:	d000      	beq.n	8041d44 <UplinkProcess+0x1c>
}
 8041d42:	bd08      	pop	{r3, pc}
        PrepareTxFrame( );
 8041d44:	f7ff ff8e 	bl	8041c64 <PrepareTxFrame>
}
 8041d48:	e7fb      	b.n	8041d42 <UplinkProcess+0x1a>
 8041d4a:	bf00      	nop
 8041d4c:	200185e0 	.word	0x200185e0

08041d50 <main>:
{
 8041d50:	b510      	push	{r4, lr}
 8041d52:	b088      	sub	sp, #32
  HAL_Init();
 8041d54:	f004 fa04 	bl	8046160 <HAL_Init>
    HAL_DBGMCU_EnableDBGStopMode( );
 8041d58:	f004 fa3a 	bl	80461d0 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode( );
 8041d5c:	f004 fa40 	bl	80461e0 <HAL_DBGMCU_EnableDBGStandbyMode>
    SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 8041d60:	4958      	ldr	r1, [pc, #352]	; (8041ec4 <main+0x174>)
 8041d62:	2000      	movs	r0, #0
 8041d64:	f017 fee4 	bl	8059b30 <__SECURE_RegisterCallback_veneer>
    SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 8041d68:	4957      	ldr	r1, [pc, #348]	; (8041ec8 <main+0x178>)
 8041d6a:	2001      	movs	r0, #1
 8041d6c:	f017 fee0 	bl	8059b30 <__SECURE_RegisterCallback_veneer>
  MX_GPIO_Init();
 8041d70:	f7ff fb24 	bl	80413bc <MX_GPIO_Init>
  MX_DMA_Init();
 8041d74:	f7ff faac 	bl	80412d0 <MX_DMA_Init>
  MX_ADC1_Init();
 8041d78:	f7ff f92e 	bl	8040fd8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8041d7c:	f7ff fda6 	bl	80418cc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8041d80:	f001 faa2 	bl	80432c8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8041d84:	f000 f984 	bl	8042090 <MX_RTC_Init>
  MX_SPI1_Init();
 8041d88:	f000 fbe4 	bl	8042554 <MX_SPI1_Init>
  MX_SPI3_Init();
 8041d8c:	f000 fc0a 	bl	80425a4 <MX_SPI3_Init>
  MX_TIM1_Init();
 8041d90:	f001 f88c 	bl	8042eac <MX_TIM1_Init>
  MX_ADC2_Init();
 8041d94:	f7ff f970 	bl	8041078 <MX_ADC2_Init>
  MX_LPUART1_UART_Init();
 8041d98:	f001 fa46 	bl	8043228 <MX_LPUART1_UART_Init>
  MX_CRC_Init();
 8041d9c:	f7ff fa6e 	bl	804127c <MX_CRC_Init>
  MX_RNG_Init();
 8041da0:	f000 f8d6 	bl	8041f50 <MX_RNG_Init>
  RtcInit();
 8041da4:	f000 fa36 	bl	8042214 <RtcInit>
  BSP_GYRO_Init();
 8041da8:	f003 fb3c 	bl	8045424 <BSP_GYRO_Init>
  BSP_IDD_Init(0);
 8041dac:	2000      	movs	r0, #0
 8041dae:	f003 fac7 	bl	8045340 <BSP_IDD_Init>
  BSP_IDD_Init(1);
 8041db2:	2001      	movs	r0, #1
 8041db4:	f003 fac4 	bl	8045340 <BSP_IDD_Init>
  SpiInit(&LR1110.spi, SPI_3, LR_MOSI_GPIO_Port, LR_MOSI_Pin,
 8041db8:	4a44      	ldr	r2, [pc, #272]	; (8041ecc <main+0x17c>)
 8041dba:	4c45      	ldr	r4, [pc, #276]	; (8041ed0 <main+0x180>)
 8041dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8041dc0:	9305      	str	r3, [sp, #20]
 8041dc2:	2300      	movs	r3, #0
 8041dc4:	9304      	str	r3, [sp, #16]
 8041dc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8041dca:	9303      	str	r3, [sp, #12]
 8041dcc:	9202      	str	r2, [sp, #8]
 8041dce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8041dd2:	9301      	str	r3, [sp, #4]
 8041dd4:	9200      	str	r2, [sp, #0]
 8041dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8041dda:	2102      	movs	r1, #2
 8041ddc:	4620      	mov	r0, r4
 8041dde:	f000 fce3 	bl	80427a8 <SpiInit>
  lr1110_board_init_io( &LR1110 );
 8041de2:	f1a4 003c 	sub.w	r0, r4, #60	; 0x3c
 8041de6:	f001 ffcf 	bl	8043d88 <lr1110_board_init_io>
  TimerInit( &Led1Timer, OnLed1TimerEvent );
 8041dea:	4c3a      	ldr	r4, [pc, #232]	; (8041ed4 <main+0x184>)
 8041dec:	493a      	ldr	r1, [pc, #232]	; (8041ed8 <main+0x188>)
 8041dee:	4620      	mov	r0, r4
 8041df0:	f001 f938 	bl	8043064 <TimerInit>
  TimerSetValue( &Led1Timer, 25 );
 8041df4:	2119      	movs	r1, #25
 8041df6:	4620      	mov	r0, r4
 8041df8:	f001 f9ee 	bl	80431d8 <TimerSetValue>
  TimerInit( &Led2Timer, OnLed2TimerEvent );
 8041dfc:	4c37      	ldr	r4, [pc, #220]	; (8041edc <main+0x18c>)
 8041dfe:	4938      	ldr	r1, [pc, #224]	; (8041ee0 <main+0x190>)
 8041e00:	4620      	mov	r0, r4
 8041e02:	f001 f92f 	bl	8043064 <TimerInit>
  TimerSetValue( &Led2Timer, 25 );
 8041e06:	2119      	movs	r1, #25
 8041e08:	4620      	mov	r0, r4
 8041e0a:	f001 f9e5 	bl	80431d8 <TimerSetValue>
  TimerInit( &LedBeaconTimer, OnLedBeaconTimerEvent );
 8041e0e:	4c35      	ldr	r4, [pc, #212]	; (8041ee4 <main+0x194>)
 8041e10:	4935      	ldr	r1, [pc, #212]	; (8041ee8 <main+0x198>)
 8041e12:	4620      	mov	r0, r4
 8041e14:	f001 f926 	bl	8043064 <TimerInit>
  TimerSetValue( &LedBeaconTimer, 5000 );
 8041e18:	f241 3188 	movw	r1, #5000	; 0x1388
 8041e1c:	4620      	mov	r0, r4
 8041e1e:	f001 f9db 	bl	80431d8 <TimerSetValue>
  TxPeriodicity = APP_TX_DUTYCYCLE + randr( -APP_TX_DUTYCYCLE_RND, APP_TX_DUTYCYCLE_RND );
 8041e22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8041e26:	4831      	ldr	r0, [pc, #196]	; (8041eec <main+0x19c>)
 8041e28:	f013 f834 	bl	8054e94 <randr>
 8041e2c:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8041e30:	3008      	adds	r0, #8
 8041e32:	4a2f      	ldr	r2, [pc, #188]	; (8041ef0 <main+0x1a0>)
 8041e34:	6010      	str	r0, [r2, #0]
  const Version_t appVersion = { .Value = FIRMWARE_VERSION };
 8041e36:	f04f 7381 	mov.w	r3, #16908288	; 0x1020000
 8041e3a:	9307      	str	r3, [sp, #28]
  const Version_t gitHubVersion = { .Value = GITHUB_VERSION };
 8041e3c:	f04f 63a0 	mov.w	r3, #83886080	; 0x5000000
 8041e40:	9306      	str	r3, [sp, #24]
  DisplayAppInfo( "periodic-uplink-lpp",
 8041e42:	aa06      	add	r2, sp, #24
 8041e44:	a907      	add	r1, sp, #28
 8041e46:	482b      	ldr	r0, [pc, #172]	; (8041ef4 <main+0x1a4>)
 8041e48:	f00a f9f4 	bl	804c234 <DisplayAppInfo>
  if ( LmHandlerInit( &LmHandlerCallbacks, &LmHandlerParams ) != LORAMAC_HANDLER_SUCCESS )
 8041e4c:	492a      	ldr	r1, [pc, #168]	; (8041ef8 <main+0x1a8>)
 8041e4e:	482b      	ldr	r0, [pc, #172]	; (8041efc <main+0x1ac>)
 8041e50:	f00a fb8a 	bl	804c568 <LmHandlerInit>
 8041e54:	b118      	cbz	r0, 8041e5e <main+0x10e>
	  printf( "LoRaMac wasn't properly initialized\n" );
 8041e56:	482a      	ldr	r0, [pc, #168]	; (8041f00 <main+0x1b0>)
 8041e58:	f013 ffc0 	bl	8055ddc <puts>
	  while ( 1 )
 8041e5c:	e7fe      	b.n	8041e5c <main+0x10c>
  LmHandlerSetSystemMaxRxError( 20 );
 8041e5e:	2014      	movs	r0, #20
 8041e60:	f00a fe6a 	bl	804cb38 <LmHandlerSetSystemMaxRxError>
  LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams );
 8041e64:	4927      	ldr	r1, [pc, #156]	; (8041f04 <main+0x1b4>)
 8041e66:	2000      	movs	r0, #0
 8041e68:	f00a fe76 	bl	804cb58 <LmHandlerPackageRegister>
  LmHandlerJoin( );
 8041e6c:	f00a fc76 	bl	804c75c <LmHandlerJoin>
  StartTxProcess( LORAMAC_HANDLER_TX_ON_TIMER );
 8041e70:	2000      	movs	r0, #0
 8041e72:	f7ff fe55 	bl	8041b20 <StartTxProcess>
 8041e76:	e003      	b.n	8041e80 <main+0x130>
			BoardLowPowerHandler();
 8041e78:	f002 ffc8 	bl	8044e0c <BoardLowPowerHandler>
 8041e7c:	f384 8810 	msr	PRIMASK, r4
		CliProcess(&hlpuart1);
 8041e80:	4821      	ldr	r0, [pc, #132]	; (8041f08 <main+0x1b8>)
 8041e82:	f00a fa03 	bl	804c28c <CliProcess>
		LmHandlerProcess();
 8041e86:	f00a fecb 	bl	804cc20 <LmHandlerProcess>
		BSP_IDD_StartMeasurement(0);
 8041e8a:	2000      	movs	r0, #0
 8041e8c:	f003 fa62 	bl	8045354 <BSP_IDD_StartMeasurement>
		BSP_IDD_GetValue(0, (uint32_t*) &iddValue[0]);
 8041e90:	4c1e      	ldr	r4, [pc, #120]	; (8041f0c <main+0x1bc>)
 8041e92:	4621      	mov	r1, r4
 8041e94:	2000      	movs	r0, #0
 8041e96:	f003 fa93 	bl	80453c0 <BSP_IDD_GetValue>
		BSP_IDD_GetValue(1, (uint32_t*) &iddValue[1]);
 8041e9a:	1d21      	adds	r1, r4, #4
 8041e9c:	2001      	movs	r0, #1
 8041e9e:	f003 fa8f 	bl	80453c0 <BSP_IDD_GetValue>
		BSP_GYRO_GetXYZ(pfData);
 8041ea2:	481b      	ldr	r0, [pc, #108]	; (8041f10 <main+0x1c0>)
 8041ea4:	f003 faee 	bl	8045484 <BSP_GYRO_GetXYZ>
		UplinkProcess();
 8041ea8:	f7ff ff3e 	bl	8041d28 <UplinkProcess>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8041eac:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8041eb0:	b672      	cpsid	i
		if (IsMacProcessPending == 1) {
 8041eb2:	4b18      	ldr	r3, [pc, #96]	; (8041f14 <main+0x1c4>)
 8041eb4:	781b      	ldrb	r3, [r3, #0]
 8041eb6:	b2db      	uxtb	r3, r3
 8041eb8:	2b01      	cmp	r3, #1
 8041eba:	d1dd      	bne.n	8041e78 <main+0x128>
			IsMacProcessPending = 0;
 8041ebc:	4b15      	ldr	r3, [pc, #84]	; (8041f14 <main+0x1c4>)
 8041ebe:	2200      	movs	r2, #0
 8041ec0:	701a      	strb	r2, [r3, #0]
 8041ec2:	e7db      	b.n	8041e7c <main+0x12c>
 8041ec4:	08041f43 	.word	0x08041f43
 8041ec8:	08041f49 	.word	0x08041f49
 8041ecc:	42020800 	.word	0x42020800
 8041ed0:	2001b0f4 	.word	0x2001b0f4
 8041ed4:	200185e4 	.word	0x200185e4
 8041ed8:	08041c51 	.word	0x08041c51
 8041edc:	200185fc 	.word	0x200185fc
 8041ee0:	08041bf5 	.word	0x08041bf5
 8041ee4:	20018614 	.word	0x20018614
 8041ee8:	08041bd5 	.word	0x08041bd5
 8041eec:	fffffc18 	.word	0xfffffc18
 8041ef0:	2001862c 	.word	0x2001862c
 8041ef4:	08059bd0 	.word	0x08059bd0
 8041ef8:	20018040 	.word	0x20018040
 8041efc:	20018008 	.word	0x20018008
 8041f00:	08059be4 	.word	0x08059be4
 8041f04:	20018050 	.word	0x20018050
 8041f08:	2001af2c 	.word	0x2001af2c
 8041f0c:	20018648 	.word	0x20018648
 8041f10:	20018650 	.word	0x20018650
 8041f14:	200185df 	.word	0x200185df

08041f18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8041f18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8041f1a:	6802      	ldr	r2, [r0, #0]
 8041f1c:	4b03      	ldr	r3, [pc, #12]	; (8041f2c <HAL_TIM_PeriodElapsedCallback+0x14>)
 8041f1e:	429a      	cmp	r2, r3
 8041f20:	d000      	beq.n	8041f24 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8041f22:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 8041f24:	f004 f92e 	bl	8046184 <HAL_IncTick>
}
 8041f28:	e7fb      	b.n	8041f22 <HAL_TIM_PeriodElapsedCallback+0xa>
 8041f2a:	bf00      	nop
 8041f2c:	40001000 	.word	0x40001000

08041f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8041f30:	b508      	push	{r3, lr}
 8041f32:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  SECURE_LEDToggle_RED();
 8041f34:	f017 fdec 	bl	8059b10 <__SECURE_LEDToggle_RED_veneer>
	  HAL_Delay(500);
 8041f38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8041f3c:	f004 f934 	bl	80461a8 <HAL_Delay>
  while (1)
 8041f40:	e7f8      	b.n	8041f34 <Error_Handler+0x4>

08041f42 <SecureFault_Callback>:
{
 8041f42:	b508      	push	{r3, lr}
  Error_Handler();
 8041f44:	f7ff fff4 	bl	8041f30 <Error_Handler>

08041f48 <SecureError_Callback>:
{
 8041f48:	b508      	push	{r3, lr}
  Error_Handler();
 8041f4a:	f7ff fff1 	bl	8041f30 <Error_Handler>
	...

08041f50 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8041f50:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8041f52:	4806      	ldr	r0, [pc, #24]	; (8041f6c <MX_RNG_Init+0x1c>)
 8041f54:	4b06      	ldr	r3, [pc, #24]	; (8041f70 <MX_RNG_Init+0x20>)
 8041f56:	6003      	str	r3, [r0, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8041f58:	2300      	movs	r3, #0
 8041f5a:	6043      	str	r3, [r0, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8041f5c:	f007 faae 	bl	80494bc <HAL_RNG_Init>
 8041f60:	b900      	cbnz	r0, 8041f64 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8041f62:	bd08      	pop	{r3, pc}
    Error_Handler();
 8041f64:	f7ff ffe4 	bl	8041f30 <Error_Handler>
}
 8041f68:	e7fb      	b.n	8041f62 <MX_RNG_Init+0x12>
 8041f6a:	bf00      	nop
 8041f6c:	2001a294 	.word	0x2001a294
 8041f70:	420c0800 	.word	0x420c0800

08041f74 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8041f74:	b510      	push	{r4, lr}
 8041f76:	b0a6      	sub	sp, #152	; 0x98
 8041f78:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8041f7a:	2294      	movs	r2, #148	; 0x94
 8041f7c:	2100      	movs	r1, #0
 8041f7e:	a801      	add	r0, sp, #4
 8041f80:	f013 f80b 	bl	8054f9a <memset>
  if(rngHandle->Instance==RNG)
 8041f84:	6822      	ldr	r2, [r4, #0]
 8041f86:	4b12      	ldr	r3, [pc, #72]	; (8041fd0 <HAL_RNG_MspInit+0x5c>)
 8041f88:	429a      	cmp	r2, r3
 8041f8a:	d001      	beq.n	8041f90 <HAL_RNG_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8041f8c:	b026      	add	sp, #152	; 0x98
 8041f8e:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8041f90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8041f94:	9301      	str	r3, [sp, #4]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8041f96:	2300      	movs	r3, #0
 8041f98:	9320      	str	r3, [sp, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8041f9a:	a801      	add	r0, sp, #4
 8041f9c:	f006 ffde 	bl	8048f5c <HAL_RCCEx_PeriphCLKConfig>
 8041fa0:	b990      	cbnz	r0, 8041fc8 <HAL_RNG_MspInit+0x54>
    __HAL_RCC_RNG_CLK_ENABLE();
 8041fa2:	4b0c      	ldr	r3, [pc, #48]	; (8041fd4 <HAL_RNG_MspInit+0x60>)
 8041fa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8041fa6:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8041faa:	64da      	str	r2, [r3, #76]	; 0x4c
 8041fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8041fb2:	9300      	str	r3, [sp, #0]
 8041fb4:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8041fb6:	2200      	movs	r2, #0
 8041fb8:	4611      	mov	r1, r2
 8041fba:	205e      	movs	r0, #94	; 0x5e
 8041fbc:	f005 f994 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8041fc0:	205e      	movs	r0, #94	; 0x5e
 8041fc2:	f005 f9c5 	bl	8047350 <HAL_NVIC_EnableIRQ>
}
 8041fc6:	e7e1      	b.n	8041f8c <HAL_RNG_MspInit+0x18>
      Error_Handler();
 8041fc8:	f7ff ffb2 	bl	8041f30 <Error_Handler>
 8041fcc:	e7e9      	b.n	8041fa2 <HAL_RNG_MspInit+0x2e>
 8041fce:	bf00      	nop
 8041fd0:	420c0800 	.word	0x420c0800
 8041fd4:	40021000 	.word	0x40021000

08041fd8 <RtcGetCalendarValue>:
{
    return McuWakeUpTimeCal;
}

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 8041fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8041fdc:	4680      	mov	r8, r0
 8041fde:	460f      	mov	r7, r1
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 8041fe0:	4c26      	ldr	r4, [pc, #152]	; (804207c <RtcGetCalendarValue+0xa4>)
 8041fe2:	68a6      	ldr	r6, [r4, #8]
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 8041fe4:	4d26      	ldr	r5, [pc, #152]	; (8042080 <RtcGetCalendarValue+0xa8>)
 8041fe6:	2200      	movs	r2, #0
 8041fe8:	4641      	mov	r1, r8
 8041fea:	4628      	mov	r0, r5
 8041fec:	f007 fdde 	bl	8049bac <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &RtcHandle, time, RTC_FORMAT_BIN );
 8041ff0:	2200      	movs	r2, #0
 8041ff2:	4639      	mov	r1, r7
 8041ff4:	4628      	mov	r0, r5
 8041ff6:	f007 fdb3 	bl	8049b60 <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 8041ffa:	68a3      	ldr	r3, [r4, #8]
 8041ffc:	42b3      	cmp	r3, r6
 8041ffe:	d1ef      	bne.n	8041fe0 <RtcGetCalendarValue+0x8>

    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 8042000:	f898 2003 	ldrb.w	r2, [r8, #3]
 8042004:	f240 53b5 	movw	r3, #1461	; 0x5b5
 8042008:	fb03 f302 	mul.w	r3, r3, r2
 804200c:	3303      	adds	r3, #3
 804200e:	089c      	lsrs	r4, r3, #2

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 8042010:	f012 0f03 	tst.w	r2, #3
 8042014:	d12f      	bne.n	8042076 <RtcGetCalendarValue+0x9e>
 8042016:	4a1b      	ldr	r2, [pc, #108]	; (8042084 <RtcGetCalendarValue+0xac>)

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8042018:	f898 0001 	ldrb.w	r0, [r8, #1]
 804201c:	3801      	subs	r0, #1
 804201e:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 8042022:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8042026:	3301      	adds	r3, #1
 8042028:	eb03 71d3 	add.w	r1, r3, r3, lsr #31
 804202c:	0043      	lsls	r3, r0, #1
 804202e:	fa22 f303 	lsr.w	r3, r2, r3
 8042032:	f003 0303 	and.w	r3, r3, #3
 8042036:	ebc3 0361 	rsb	r3, r3, r1, asr #1
 804203a:	4423      	add	r3, r4

    seconds += ( date->Date -1 );
 804203c:	f898 2002 	ldrb.w	r2, [r8, #2]
 8042040:	4413      	add	r3, r2
 8042042:	3b01      	subs	r3, #1

    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;

    seconds += ( ( uint32_t )time->Seconds +
 8042044:	78b8      	ldrb	r0, [r7, #2]
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 8042046:	7839      	ldrb	r1, [r7, #0]
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 8042048:	787a      	ldrb	r2, [r7, #1]
 804204a:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 804204e:	0092      	lsls	r2, r2, #2
 8042050:	f44f 6461 	mov.w	r4, #3600	; 0xe10
 8042054:	fb04 2201 	mla	r2, r4, r1, r2
 8042058:	4402      	add	r2, r0
    seconds += ( ( uint32_t )time->Seconds +
 804205a:	490b      	ldr	r1, [pc, #44]	; (8042088 <RtcGetCalendarValue+0xb0>)
 804205c:	fb01 2303 	mla	r3, r1, r3, r2

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 8042060:	0d99      	lsrs	r1, r3, #22
 8042062:	0298      	lsls	r0, r3, #10
 8042064:	687b      	ldr	r3, [r7, #4]
 8042066:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 804206a:	3303      	adds	r3, #3

    return( calendarValue );
}
 804206c:	18c0      	adds	r0, r0, r3
 804206e:	f141 0100 	adc.w	r1, r1, #0
 8042072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 8042076:	4a05      	ldr	r2, [pc, #20]	; (804208c <RtcGetCalendarValue+0xb4>)
 8042078:	e7ce      	b.n	8042018 <RtcGetCalendarValue+0x40>
 804207a:	bf00      	nop
 804207c:	40002800 	.word	0x40002800
 8042080:	20018688 	.word	0x20018688
 8042084:	00445550 	.word	0x00445550
 8042088:	00015180 	.word	0x00015180
 804208c:	0099aaa0 	.word	0x0099aaa0

08042090 <MX_RTC_Init>:
{
 8042090:	b500      	push	{lr}
 8042092:	b08b      	sub	sp, #44	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8042094:	2228      	movs	r2, #40	; 0x28
 8042096:	2100      	movs	r1, #0
 8042098:	4668      	mov	r0, sp
 804209a:	f012 ff7e 	bl	8054f9a <memset>
  hrtc.Instance = RTC;
 804209e:	482d      	ldr	r0, [pc, #180]	; (8042154 <MX_RTC_Init+0xc4>)
 80420a0:	4b2d      	ldr	r3, [pc, #180]	; (8042158 <MX_RTC_Init+0xc8>)
 80420a2:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80420a4:	2300      	movs	r3, #0
 80420a6:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 80420a8:	227f      	movs	r2, #127	; 0x7f
 80420aa:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 80420ac:	22ff      	movs	r2, #255	; 0xff
 80420ae:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80420b0:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80420b2:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80420b4:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80420b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80420ba:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80420bc:	6203      	str	r3, [r0, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80420be:	f007 fb5b 	bl	8049778 <HAL_RTC_Init>
 80420c2:	2800      	cmp	r0, #0
 80420c4:	d134      	bne.n	8042130 <MX_RTC_Init+0xa0>
  sAlarm.AlarmTime.Hours = 0x0;
 80420c6:	2300      	movs	r3, #0
 80420c8:	f88d 3000 	strb.w	r3, [sp]
  sAlarm.AlarmTime.Minutes = 0x0;
 80420cc:	f88d 3001 	strb.w	r3, [sp, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80420d0:	f88d 3002 	strb.w	r3, [sp, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80420d4:	9301      	str	r3, [sp, #4]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80420d6:	9305      	str	r3, [sp, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80420d8:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80420da:	9307      	str	r3, [sp, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80420dc:	2201      	movs	r2, #1
 80420de:	f88d 2020 	strb.w	r2, [sp, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80420e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80420e6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80420e8:	4669      	mov	r1, sp
 80420ea:	481a      	ldr	r0, [pc, #104]	; (8042154 <MX_RTC_Init+0xc4>)
 80420ec:	f007 fca4 	bl	8049a38 <HAL_RTC_SetAlarm_IT>
 80420f0:	bb08      	cbnz	r0, 8042136 <MX_RTC_Init+0xa6>
  sAlarm.Alarm = RTC_ALARM_B;
 80420f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80420f6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80420f8:	2201      	movs	r2, #1
 80420fa:	4669      	mov	r1, sp
 80420fc:	4815      	ldr	r0, [pc, #84]	; (8042154 <MX_RTC_Init+0xc4>)
 80420fe:	f007 fc9b 	bl	8049a38 <HAL_RTC_SetAlarm_IT>
 8042102:	b9d8      	cbnz	r0, 804213c <MX_RTC_Init+0xac>
  if (HAL_RTCEx_SetTimeStamp_IT(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8042104:	2200      	movs	r2, #0
 8042106:	4611      	mov	r1, r2
 8042108:	4812      	ldr	r0, [pc, #72]	; (8042154 <MX_RTC_Init+0xc4>)
 804210a:	f007 fd6f 	bl	8049bec <HAL_RTCEx_SetTimeStamp_IT>
 804210e:	b9c0      	cbnz	r0, 8042142 <MX_RTC_Init+0xb2>
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8042110:	2300      	movs	r3, #0
 8042112:	461a      	mov	r2, r3
 8042114:	4619      	mov	r1, r3
 8042116:	480f      	ldr	r0, [pc, #60]	; (8042154 <MX_RTC_Init+0xc4>)
 8042118:	f007 fdb2 	bl	8049c80 <HAL_RTCEx_SetWakeUpTimer_IT>
 804211c:	b9a0      	cbnz	r0, 8042148 <MX_RTC_Init+0xb8>
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 804211e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8042122:	480c      	ldr	r0, [pc, #48]	; (8042154 <MX_RTC_Init+0xc4>)
 8042124:	f007 fe28 	bl	8049d78 <HAL_RTCEx_SetCalibrationOutPut>
 8042128:	b988      	cbnz	r0, 804214e <MX_RTC_Init+0xbe>
}
 804212a:	b00b      	add	sp, #44	; 0x2c
 804212c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8042130:	f7ff fefe 	bl	8041f30 <Error_Handler>
 8042134:	e7c7      	b.n	80420c6 <MX_RTC_Init+0x36>
    Error_Handler();
 8042136:	f7ff fefb 	bl	8041f30 <Error_Handler>
 804213a:	e7da      	b.n	80420f2 <MX_RTC_Init+0x62>
    Error_Handler();
 804213c:	f7ff fef8 	bl	8041f30 <Error_Handler>
 8042140:	e7e0      	b.n	8042104 <MX_RTC_Init+0x74>
    Error_Handler();
 8042142:	f7ff fef5 	bl	8041f30 <Error_Handler>
 8042146:	e7e3      	b.n	8042110 <MX_RTC_Init+0x80>
    Error_Handler();
 8042148:	f7ff fef2 	bl	8041f30 <Error_Handler>
 804214c:	e7e7      	b.n	804211e <MX_RTC_Init+0x8e>
    Error_Handler();
 804214e:	f7ff feef 	bl	8041f30 <Error_Handler>
}
 8042152:	e7ea      	b.n	804212a <MX_RTC_Init+0x9a>
 8042154:	2001a2b8 	.word	0x2001a2b8
 8042158:	40002800 	.word	0x40002800

0804215c <HAL_RTC_MspInit>:
{
 804215c:	b510      	push	{r4, lr}
 804215e:	b0a6      	sub	sp, #152	; 0x98
 8042160:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8042162:	2294      	movs	r2, #148	; 0x94
 8042164:	2100      	movs	r1, #0
 8042166:	a801      	add	r0, sp, #4
 8042168:	f012 ff17 	bl	8054f9a <memset>
  if(rtcHandle->Instance==RTC)
 804216c:	6822      	ldr	r2, [r4, #0]
 804216e:	4b15      	ldr	r3, [pc, #84]	; (80421c4 <HAL_RTC_MspInit+0x68>)
 8042170:	429a      	cmp	r2, r3
 8042172:	d001      	beq.n	8042178 <HAL_RTC_MspInit+0x1c>
}
 8042174:	b026      	add	sp, #152	; 0x98
 8042176:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8042178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 804217c:	9301      	str	r3, [sp, #4]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 804217e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8042182:	9325      	str	r3, [sp, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8042184:	a801      	add	r0, sp, #4
 8042186:	f006 fee9 	bl	8048f5c <HAL_RCCEx_PeriphCLKConfig>
 804218a:	b9c0      	cbnz	r0, 80421be <HAL_RTC_MspInit+0x62>
    __HAL_RCC_RTC_ENABLE();
 804218c:	4b0e      	ldr	r3, [pc, #56]	; (80421c8 <HAL_RTC_MspInit+0x6c>)
 804218e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8042192:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8042196:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 804219a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 804219c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80421a0:	659a      	str	r2, [r3, #88]	; 0x58
 80421a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80421a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80421a8:	9300      	str	r3, [sp, #0]
 80421aa:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80421ac:	2200      	movs	r2, #0
 80421ae:	4611      	mov	r1, r2
 80421b0:	2002      	movs	r0, #2
 80421b2:	f005 f899 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80421b6:	2002      	movs	r0, #2
 80421b8:	f005 f8ca 	bl	8047350 <HAL_NVIC_EnableIRQ>
}
 80421bc:	e7da      	b.n	8042174 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80421be:	f7ff feb7 	bl	8041f30 <Error_Handler>
 80421c2:	e7e3      	b.n	804218c <HAL_RTC_MspInit+0x30>
 80421c4:	40002800 	.word	0x40002800
 80421c8:	40021000 	.word	0x40021000

080421cc <HAL_RTC_MspDeInit>:
{
 80421cc:	b508      	push	{r3, lr}
  if(rtcHandle->Instance==RTC)
 80421ce:	6802      	ldr	r2, [r0, #0]
 80421d0:	4b09      	ldr	r3, [pc, #36]	; (80421f8 <HAL_RTC_MspDeInit+0x2c>)
 80421d2:	429a      	cmp	r2, r3
 80421d4:	d000      	beq.n	80421d8 <HAL_RTC_MspDeInit+0xc>
}
 80421d6:	bd08      	pop	{r3, pc}
    __HAL_RCC_RTC_DISABLE();
 80421d8:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 80421dc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80421e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80421e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_DISABLE();
 80421e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80421ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80421ee:	659a      	str	r2, [r3, #88]	; 0x58
    HAL_NVIC_DisableIRQ(RTC_IRQn);
 80421f0:	2002      	movs	r0, #2
 80421f2:	f005 f8bb 	bl	804736c <HAL_NVIC_DisableIRQ>
}
 80421f6:	e7ee      	b.n	80421d6 <HAL_RTC_MspDeInit+0xa>
 80421f8:	40002800 	.word	0x40002800

080421fc <RtcSetTimerContext>:
{
 80421fc:	b510      	push	{r4, lr}
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 80421fe:	4c04      	ldr	r4, [pc, #16]	; (8042210 <RtcSetTimerContext+0x14>)
 8042200:	1d21      	adds	r1, r4, #4
 8042202:	f104 0018 	add.w	r0, r4, #24
 8042206:	f7ff fee7 	bl	8041fd8 <RtcGetCalendarValue>
 804220a:	6020      	str	r0, [r4, #0]
}
 804220c:	bd10      	pop	{r4, pc}
 804220e:	bf00      	nop
 8042210:	20018700 	.word	0x20018700

08042214 <RtcInit>:
    if( RtcInitialized == false )
 8042214:	4b29      	ldr	r3, [pc, #164]	; (80422bc <RtcInit+0xa8>)
 8042216:	781b      	ldrb	r3, [r3, #0]
 8042218:	b103      	cbz	r3, 804221c <RtcInit+0x8>
 804221a:	4770      	bx	lr
{
 804221c:	b570      	push	{r4, r5, r6, lr}
 804221e:	b086      	sub	sp, #24
        __HAL_RCC_RTC_ENABLE( );
 8042220:	4a27      	ldr	r2, [pc, #156]	; (80422c0 <RtcInit+0xac>)
 8042222:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8042226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804222a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        RtcHandle.Instance            = RTC;
 804222e:	4d25      	ldr	r5, [pc, #148]	; (80422c4 <RtcInit+0xb0>)
 8042230:	4b25      	ldr	r3, [pc, #148]	; (80422c8 <RtcInit+0xb4>)
 8042232:	602b      	str	r3, [r5, #0]
        RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_24;
 8042234:	2400      	movs	r4, #0
 8042236:	606c      	str	r4, [r5, #4]
        RtcHandle.Init.AsynchPrediv   = PREDIV_A;  // RTC_ASYNCH_PREDIV;
 8042238:	231f      	movs	r3, #31
 804223a:	60ab      	str	r3, [r5, #8]
        RtcHandle.Init.SynchPrediv    = PREDIV_S;  // RTC_SYNCH_PREDIV;
 804223c:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8042240:	60eb      	str	r3, [r5, #12]
        RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
 8042242:	612c      	str	r4, [r5, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8042244:	61ac      	str	r4, [r5, #24]
        RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 8042246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 804224a:	61eb      	str	r3, [r5, #28]
        HAL_RTC_Init( &RtcHandle );
 804224c:	4628      	mov	r0, r5
 804224e:	f007 fa93 	bl	8049778 <HAL_RTC_Init>
        date.Year                     = 0;
 8042252:	f88d 4017 	strb.w	r4, [sp, #23]
        date.Month                    = RTC_MONTH_JANUARY;
 8042256:	2601      	movs	r6, #1
 8042258:	f88d 6015 	strb.w	r6, [sp, #21]
        date.Date                     = 1;
 804225c:	f88d 6016 	strb.w	r6, [sp, #22]
        date.WeekDay                  = RTC_WEEKDAY_MONDAY;
 8042260:	f88d 6014 	strb.w	r6, [sp, #20]
        HAL_RTC_SetDate( &RtcHandle, &date, RTC_FORMAT_BIN );
 8042264:	4622      	mov	r2, r4
 8042266:	a905      	add	r1, sp, #20
 8042268:	4628      	mov	r0, r5
 804226a:	f007 fb91 	bl	8049990 <HAL_RTC_SetDate>
        time.Hours                    = 0;
 804226e:	f88d 4000 	strb.w	r4, [sp]
        time.Minutes                  = 0;
 8042272:	f88d 4001 	strb.w	r4, [sp, #1]
        time.Seconds                  = 0;
 8042276:	f88d 4002 	strb.w	r4, [sp, #2]
        time.SubSeconds               = 0;
 804227a:	9401      	str	r4, [sp, #4]
        time.TimeFormat               = 0;
 804227c:	f88d 4003 	strb.w	r4, [sp, #3]
        time.StoreOperation           = RTC_STOREOPERATION_RESET;
 8042280:	9404      	str	r4, [sp, #16]
        time.DayLightSaving           = RTC_DAYLIGHTSAVING_NONE;
 8042282:	9403      	str	r4, [sp, #12]
        HAL_RTC_SetTime( &RtcHandle, &time, RTC_FORMAT_BIN );
 8042284:	4622      	mov	r2, r4
 8042286:	4669      	mov	r1, sp
 8042288:	4628      	mov	r0, r5
 804228a:	f007 fb1d 	bl	80498c8 <HAL_RTC_SetTime>
        HAL_RTCEx_EnableBypassShadow( &RtcHandle );
 804228e:	4628      	mov	r0, r5
 8042290:	f007 fd9a 	bl	8049dc8 <HAL_RTCEx_EnableBypassShadow>
        HAL_NVIC_SetPriority( RTC_IRQn, 1, 0 );
 8042294:	4622      	mov	r2, r4
 8042296:	4631      	mov	r1, r6
 8042298:	2002      	movs	r0, #2
 804229a:	f005 f825 	bl	80472e8 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_IRQn );
 804229e:	2002      	movs	r0, #2
 80422a0:	f005 f856 	bl	8047350 <HAL_NVIC_EnableIRQ>
        HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 80422a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80422a8:	4628      	mov	r0, r5
 80422aa:	f007 f9b9 	bl	8049620 <HAL_RTC_DeactivateAlarm>
        RtcSetTimerContext( );
 80422ae:	f7ff ffa5 	bl	80421fc <RtcSetTimerContext>
        RtcInitialized = true;
 80422b2:	4b02      	ldr	r3, [pc, #8]	; (80422bc <RtcInit+0xa8>)
 80422b4:	701e      	strb	r6, [r3, #0]
}
 80422b6:	b006      	add	sp, #24
 80422b8:	bd70      	pop	{r4, r5, r6, pc}
 80422ba:	bf00      	nop
 80422bc:	200186fc 	.word	0x200186fc
 80422c0:	40021000 	.word	0x40021000
 80422c4:	20018688 	.word	0x20018688
 80422c8:	40002800 	.word	0x40002800

080422cc <RtcGetTimerContext>:
}
 80422cc:	4b01      	ldr	r3, [pc, #4]	; (80422d4 <RtcGetTimerContext+0x8>)
 80422ce:	6818      	ldr	r0, [r3, #0]
 80422d0:	4770      	bx	lr
 80422d2:	bf00      	nop
 80422d4:	20018700 	.word	0x20018700

080422d8 <RtcGetMinimumTimeout>:
}
 80422d8:	2003      	movs	r0, #3
 80422da:	4770      	bx	lr

080422dc <RtcMs2Tick>:
{
 80422dc:	b508      	push	{r3, lr}
 80422de:	4601      	mov	r1, r0
    return ( uint32_t )( ( ( ( uint64_t )milliseconds ) * CONV_DENOM ) / CONV_NUMER );
 80422e0:	227d      	movs	r2, #125	; 0x7d
 80422e2:	2300      	movs	r3, #0
 80422e4:	01c0      	lsls	r0, r0, #7
 80422e6:	0e49      	lsrs	r1, r1, #25
 80422e8:	f7fe fcb2 	bl	8040c50 <__aeabi_uldivmod>
}
 80422ec:	bd08      	pop	{r3, pc}

080422ee <RtcTick2Ms>:
    uint32_t seconds = tick >> N_PREDIV_S;
 80422ee:	0a81      	lsrs	r1, r0, #10
    tick = tick & PREDIV_S;
 80422f0:	f3c0 0309 	ubfx	r3, r0, #0, #10
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 80422f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80422f8:	fb00 f303 	mul.w	r3, r0, r3
 80422fc:	0a9b      	lsrs	r3, r3, #10
}
 80422fe:	fb00 3001 	mla	r0, r0, r1, r3
 8042302:	4770      	bx	lr

08042304 <RtcStopAlarm>:
{
 8042304:	b508      	push	{r3, lr}
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8042306:	f44f 7180 	mov.w	r1, #256	; 0x100
 804230a:	4803      	ldr	r0, [pc, #12]	; (8042318 <RtcStopAlarm+0x14>)
 804230c:	f007 f988 	bl	8049620 <HAL_RTC_DeactivateAlarm>
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 8042310:	4b02      	ldr	r3, [pc, #8]	; (804231c <RtcStopAlarm+0x18>)
 8042312:	2201      	movs	r2, #1
 8042314:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8042316:	bd08      	pop	{r3, pc}
 8042318:	20018688 	.word	0x20018688
 804231c:	40002800 	.word	0x40002800

08042320 <RtcStartAlarm>:
{
 8042320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8042322:	b087      	sub	sp, #28
 8042324:	4604      	mov	r4, r0
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 8042326:	4f49      	ldr	r7, [pc, #292]	; (804244c <RtcStartAlarm+0x12c>)
 8042328:	ad01      	add	r5, sp, #4
 804232a:	1d3e      	adds	r6, r7, #4
 804232c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 804232e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 8042330:	69bb      	ldr	r3, [r7, #24]
 8042332:	9300      	str	r3, [sp, #0]
    RtcStopAlarm( );
 8042334:	f7ff ffe6 	bl	8042304 <RtcStopAlarm>
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 8042338:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 804233c:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8042340:	3303      	adds	r3, #3
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 8042342:	f3c4 0209 	ubfx	r2, r4, #0, #10
 8042346:	fa12 f383 	uxtah	r3, r2, r3
 804234a:	b29b      	uxth	r3, r3
    timeout >>= N_PREDIV_S;
 804234c:	0aa0      	lsrs	r0, r4, #10
    rtcAlarmDays =  date.Date;
 804234e:	f89d 5002 	ldrb.w	r5, [sp, #2]
    while( timeout >= SECONDS_IN_1DAY )
 8042352:	4a3f      	ldr	r2, [pc, #252]	; (8042450 <RtcStartAlarm+0x130>)
 8042354:	4290      	cmp	r0, r2
 8042356:	d906      	bls.n	8042366 <RtcStartAlarm+0x46>
        timeout -= SECONDS_IN_1DAY;
 8042358:	f5a0 30a8 	sub.w	r0, r0, #86016	; 0x15000
 804235c:	f5a0 70c0 	sub.w	r0, r0, #384	; 0x180
        rtcAlarmDays++;
 8042360:	1c6a      	adds	r2, r5, #1
 8042362:	b295      	uxth	r5, r2
 8042364:	e7f5      	b.n	8042352 <RtcStartAlarm+0x32>
    rtcAlarmHours = time.Hours;
 8042366:	f89d 1004 	ldrb.w	r1, [sp, #4]
    while( timeout >= SECONDS_IN_1HOUR )
 804236a:	f5b0 6f61 	cmp.w	r0, #3600	; 0xe10
 804236e:	d304      	bcc.n	804237a <RtcStartAlarm+0x5a>
        timeout -= SECONDS_IN_1HOUR;
 8042370:	f5a0 6061 	sub.w	r0, r0, #3600	; 0xe10
        rtcAlarmHours++;
 8042374:	3101      	adds	r1, #1
 8042376:	b289      	uxth	r1, r1
 8042378:	e7f7      	b.n	804236a <RtcStartAlarm+0x4a>
    rtcAlarmMinutes = time.Minutes;
 804237a:	f89d 4005 	ldrb.w	r4, [sp, #5]
    while( timeout >= SECONDS_IN_1MINUTE )
 804237e:	e002      	b.n	8042386 <RtcStartAlarm+0x66>
        timeout -= SECONDS_IN_1MINUTE;
 8042380:	383c      	subs	r0, #60	; 0x3c
        rtcAlarmMinutes++;
 8042382:	3401      	adds	r4, #1
 8042384:	b2a4      	uxth	r4, r4
    while( timeout >= SECONDS_IN_1MINUTE )
 8042386:	283b      	cmp	r0, #59	; 0x3b
 8042388:	d8fa      	bhi.n	8042380 <RtcStartAlarm+0x60>
    rtcAlarmSeconds =  time.Seconds + timeout;
 804238a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 804238e:	fa12 f080 	uxtah	r0, r2, r0
 8042392:	b280      	uxth	r0, r0
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8042394:	e004      	b.n	80423a0 <RtcStartAlarm+0x80>
        rtcAlarmSubSeconds -= ( PREDIV_S + 1 );
 8042396:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 804239a:	b29b      	uxth	r3, r3
        rtcAlarmSeconds++;
 804239c:	3001      	adds	r0, #1
 804239e:	b280      	uxth	r0, r0
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 80423a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80423a4:	d2f7      	bcs.n	8042396 <RtcStartAlarm+0x76>
    while( rtcAlarmSeconds >= SECONDS_IN_1MINUTE )
 80423a6:	283b      	cmp	r0, #59	; 0x3b
 80423a8:	d908      	bls.n	80423bc <RtcStartAlarm+0x9c>
        rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80423aa:	383c      	subs	r0, #60	; 0x3c
 80423ac:	b280      	uxth	r0, r0
        rtcAlarmMinutes++;
 80423ae:	3401      	adds	r4, #1
 80423b0:	b2a4      	uxth	r4, r4
 80423b2:	e7f8      	b.n	80423a6 <RtcStartAlarm+0x86>
        rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80423b4:	3c3c      	subs	r4, #60	; 0x3c
 80423b6:	b2a4      	uxth	r4, r4
        rtcAlarmHours++;
 80423b8:	3101      	adds	r1, #1
 80423ba:	b289      	uxth	r1, r1
    while( rtcAlarmMinutes >= MINUTES_IN_1HOUR )
 80423bc:	2c3b      	cmp	r4, #59	; 0x3b
 80423be:	d8f9      	bhi.n	80423b4 <RtcStartAlarm+0x94>
 80423c0:	e003      	b.n	80423ca <RtcStartAlarm+0xaa>
        rtcAlarmHours -= HOURS_IN_1DAY;
 80423c2:	3918      	subs	r1, #24
 80423c4:	b289      	uxth	r1, r1
        rtcAlarmDays++;
 80423c6:	1c6a      	adds	r2, r5, #1
 80423c8:	b295      	uxth	r5, r2
    while( rtcAlarmHours >= HOURS_IN_1DAY )
 80423ca:	2917      	cmp	r1, #23
 80423cc:	d8f9      	bhi.n	80423c2 <RtcStartAlarm+0xa2>
    if( date.Year % 4 == 0 )
 80423ce:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80423d2:	f012 0f03 	tst.w	r2, #3
 80423d6:	d12a      	bne.n	804242e <RtcStartAlarm+0x10e>
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 80423d8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80423dc:	3a01      	subs	r2, #1
 80423de:	4e1d      	ldr	r6, [pc, #116]	; (8042454 <RtcStartAlarm+0x134>)
 80423e0:	5cb2      	ldrb	r2, [r6, r2]
 80423e2:	b296      	uxth	r6, r2
 80423e4:	42ae      	cmp	r6, r5
 80423e6:	d204      	bcs.n	80423f2 <RtcStartAlarm+0xd2>
            rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[date.Month - 1];
 80423e8:	fb95 f6f2 	sdiv	r6, r5, r2
 80423ec:	fb02 5216 	mls	r2, r2, r6, r5
 80423f0:	b295      	uxth	r5, r2
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 80423f2:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80423f6:	3303      	adds	r3, #3
 80423f8:	4e17      	ldr	r6, [pc, #92]	; (8042458 <RtcStartAlarm+0x138>)
 80423fa:	6073      	str	r3, [r6, #4]
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK;
 80423fc:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 8042400:	61b3      	str	r3, [r6, #24]
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 8042402:	70b0      	strb	r0, [r6, #2]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 8042404:	7074      	strb	r4, [r6, #1]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 8042406:	7031      	strb	r1, [r6, #0]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 8042408:	f886 5020 	strb.w	r5, [r6, #32]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 804240c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8042410:	70f3      	strb	r3, [r6, #3]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8042412:	2200      	movs	r2, #0
 8042414:	61f2      	str	r2, [r6, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 8042416:	6172      	str	r2, [r6, #20]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 8042418:	f44f 7380 	mov.w	r3, #256	; 0x100
 804241c:	6273      	str	r3, [r6, #36]	; 0x24
    RtcAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 804241e:	60f2      	str	r2, [r6, #12]
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8042420:	6132      	str	r2, [r6, #16]
    HAL_RTC_SetAlarm_IT( &RtcHandle, &RtcAlarm, RTC_FORMAT_BIN );
 8042422:	4631      	mov	r1, r6
 8042424:	480d      	ldr	r0, [pc, #52]	; (804245c <RtcStartAlarm+0x13c>)
 8042426:	f007 fb07 	bl	8049a38 <HAL_RTC_SetAlarm_IT>
}
 804242a:	b007      	add	sp, #28
 804242c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 804242e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8042432:	3a01      	subs	r2, #1
 8042434:	4e0a      	ldr	r6, [pc, #40]	; (8042460 <RtcStartAlarm+0x140>)
 8042436:	5cb2      	ldrb	r2, [r6, r2]
 8042438:	b296      	uxth	r6, r2
 804243a:	42ae      	cmp	r6, r5
 804243c:	d2d9      	bcs.n	80423f2 <RtcStartAlarm+0xd2>
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 804243e:	fb95 f6f2 	sdiv	r6, r5, r2
 8042442:	fb02 5216 	mls	r2, r2, r6, r5
 8042446:	b295      	uxth	r5, r2
 8042448:	e7d3      	b.n	80423f2 <RtcStartAlarm+0xd2>
 804244a:	bf00      	nop
 804244c:	20018700 	.word	0x20018700
 8042450:	0001517f 	.word	0x0001517f
 8042454:	08059c14 	.word	0x08059c14
 8042458:	20018660 	.word	0x20018660
 804245c:	20018688 	.word	0x20018688
 8042460:	08059c08 	.word	0x08059c08

08042464 <RtcGetTimerValue>:
{
 8042464:	b500      	push	{lr}
 8042466:	b087      	sub	sp, #28
    uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 8042468:	a901      	add	r1, sp, #4
 804246a:	4668      	mov	r0, sp
 804246c:	f7ff fdb4 	bl	8041fd8 <RtcGetCalendarValue>
}
 8042470:	b007      	add	sp, #28
 8042472:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08042478 <RtcGetTimerElapsedTime>:
{
 8042478:	b500      	push	{lr}
 804247a:	b087      	sub	sp, #28
  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 804247c:	a901      	add	r1, sp, #4
 804247e:	4668      	mov	r0, sp
 8042480:	f7ff fdaa 	bl	8041fd8 <RtcGetCalendarValue>
  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 8042484:	4b02      	ldr	r3, [pc, #8]	; (8042490 <RtcGetTimerElapsedTime+0x18>)
 8042486:	681b      	ldr	r3, [r3, #0]
}
 8042488:	1ac0      	subs	r0, r0, r3
 804248a:	b007      	add	sp, #28
 804248c:	f85d fb04 	ldr.w	pc, [sp], #4
 8042490:	20018700 	.word	0x20018700

08042494 <RtcSetAlarm>:
{
 8042494:	b570      	push	{r4, r5, r6, lr}
 8042496:	4606      	mov	r6, r0
    if( ( int64_t )( MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 8042498:	4b11      	ldr	r3, [pc, #68]	; (80424e0 <RtcSetAlarm+0x4c>)
 804249a:	f9b3 4000 	ldrsh.w	r4, [r3]
 804249e:	3403      	adds	r4, #3
 80424a0:	17e5      	asrs	r5, r4, #31
 80424a2:	f7ff ffe9 	bl	8042478 <RtcGetTimerElapsedTime>
 80424a6:	1a32      	subs	r2, r6, r0
 80424a8:	2300      	movs	r3, #0
 80424aa:	4294      	cmp	r4, r2
 80424ac:	eb75 0303 	sbcs.w	r3, r5, r3
 80424b0:	da0b      	bge.n	80424ca <RtcSetAlarm+0x36>
        LpmSetStopMode( LPM_RTC_ID, LPM_ENABLE );
 80424b2:	2100      	movs	r1, #0
 80424b4:	2004      	movs	r0, #4
 80424b6:	f7ff fa8d 	bl	80419d4 <LpmSetStopMode>
    if( LpmGetMode( ) == LPM_STOP_MODE )
 80424ba:	f7ff faa1 	bl	8041a00 <LpmGetMode>
 80424be:	2801      	cmp	r0, #1
 80424c0:	d008      	beq.n	80424d4 <RtcSetAlarm+0x40>
    RtcStartAlarm( timeout );
 80424c2:	4630      	mov	r0, r6
 80424c4:	f7ff ff2c 	bl	8042320 <RtcStartAlarm>
}
 80424c8:	bd70      	pop	{r4, r5, r6, pc}
        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
 80424ca:	2101      	movs	r1, #1
 80424cc:	2004      	movs	r0, #4
 80424ce:	f7ff fa81 	bl	80419d4 <LpmSetStopMode>
 80424d2:	e7f2      	b.n	80424ba <RtcSetAlarm+0x26>
        timeout = timeout - McuWakeUpTimeCal;
 80424d4:	4b02      	ldr	r3, [pc, #8]	; (80424e0 <RtcSetAlarm+0x4c>)
 80424d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80424da:	1af6      	subs	r6, r6, r3
 80424dc:	e7f1      	b.n	80424c2 <RtcSetAlarm+0x2e>
 80424de:	bf00      	nop
 80424e0:	2001865c 	.word	0x2001865c

080424e4 <RtcGetCalendarTime>:

uint32_t RtcGetCalendarTime( uint16_t *milliseconds )
{
 80424e4:	b530      	push	{r4, r5, lr}
 80424e6:	b087      	sub	sp, #28
 80424e8:	4605      	mov	r5, r0
    RTC_TimeTypeDef time ;
    RTC_DateTypeDef date;
    uint32_t ticks;

    uint64_t calendarValue = RtcGetCalendarValue( &date, &time );
 80424ea:	a901      	add	r1, sp, #4
 80424ec:	4668      	mov	r0, sp
 80424ee:	f7ff fd73 	bl	8041fd8 <RtcGetCalendarValue>

    uint32_t seconds = ( uint32_t )( calendarValue >> N_PREDIV_S );
 80424f2:	0a84      	lsrs	r4, r0, #10
 80424f4:	ea44 5481 	orr.w	r4, r4, r1, lsl #22

    ticks =  ( uint32_t )calendarValue & PREDIV_S;

    *milliseconds = RtcTick2Ms( ticks );
 80424f8:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80424fc:	f7ff fef7 	bl	80422ee <RtcTick2Ms>
 8042500:	8028      	strh	r0, [r5, #0]

    return seconds;
}
 8042502:	4620      	mov	r0, r4
 8042504:	b007      	add	sp, #28
 8042506:	bd30      	pop	{r4, r5, pc}

08042508 <HAL_RTC_AlarmAEventCallback>:
 * \brief  Alarm A callback.
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
 8042508:	b508      	push	{r3, lr}
    TimerIrqHandler( );
 804250a:	f000 fde7 	bl	80430dc <TimerIrqHandler>
}
 804250e:	bd08      	pop	{r3, pc}

08042510 <RtcBkupWrite>:

void RtcBkupWrite( uint32_t data0, uint32_t data1 )
{
 8042510:	b538      	push	{r3, r4, r5, lr}
 8042512:	4602      	mov	r2, r0
 8042514:	460c      	mov	r4, r1
    HAL_RTCEx_BKUPWrite( &RtcHandle, RTC_BKP_DR0, data0 );
 8042516:	4d05      	ldr	r5, [pc, #20]	; (804252c <RtcBkupWrite+0x1c>)
 8042518:	2100      	movs	r1, #0
 804251a:	4628      	mov	r0, r5
 804251c:	f007 fc82 	bl	8049e24 <HAL_RTCEx_BKUPWrite>
    HAL_RTCEx_BKUPWrite( &RtcHandle, RTC_BKP_DR1, data1 );
 8042520:	4622      	mov	r2, r4
 8042522:	2101      	movs	r1, #1
 8042524:	4628      	mov	r0, r5
 8042526:	f007 fc7d 	bl	8049e24 <HAL_RTCEx_BKUPWrite>
}
 804252a:	bd38      	pop	{r3, r4, r5, pc}
 804252c:	20018688 	.word	0x20018688

08042530 <RtcBkupRead>:

void RtcBkupRead( uint32_t *data0, uint32_t *data1 )
{
 8042530:	b570      	push	{r4, r5, r6, lr}
 8042532:	4605      	mov	r5, r0
 8042534:	460c      	mov	r4, r1
  *data0 = HAL_RTCEx_BKUPRead( &RtcHandle, RTC_BKP_DR0 );
 8042536:	4e06      	ldr	r6, [pc, #24]	; (8042550 <RtcBkupRead+0x20>)
 8042538:	2100      	movs	r1, #0
 804253a:	4630      	mov	r0, r6
 804253c:	f007 fc79 	bl	8049e32 <HAL_RTCEx_BKUPRead>
 8042540:	6028      	str	r0, [r5, #0]
  *data1 = HAL_RTCEx_BKUPRead( &RtcHandle, RTC_BKP_DR1 );
 8042542:	2101      	movs	r1, #1
 8042544:	4630      	mov	r0, r6
 8042546:	f007 fc74 	bl	8049e32 <HAL_RTCEx_BKUPRead>
 804254a:	6020      	str	r0, [r4, #0]
}
 804254c:	bd70      	pop	{r4, r5, r6, pc}
 804254e:	bf00      	nop
 8042550:	20018688 	.word	0x20018688

08042554 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8042554:	b508      	push	{r3, lr}
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8042556:	4811      	ldr	r0, [pc, #68]	; (804259c <MX_SPI1_Init+0x48>)
 8042558:	4b11      	ldr	r3, [pc, #68]	; (80425a0 <MX_SPI1_Init+0x4c>)
 804255a:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 804255c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8042560:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8042562:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8042566:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8042568:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 804256c:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 804256e:	2300      	movs	r3, #0
 8042570:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8042572:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8042574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8042578:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 804257a:	2208      	movs	r2, #8
 804257c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 804257e:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8042580:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8042582:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8042584:	2207      	movs	r2, #7
 8042586:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8042588:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 804258a:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 804258c:	f007 fdb2 	bl	804a0f4 <HAL_SPI_Init>
 8042590:	b900      	cbnz	r0, 8042594 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8042592:	bd08      	pop	{r3, pc}
    Error_Handler();
 8042594:	f7ff fccc 	bl	8041f30 <Error_Handler>
}
 8042598:	e7fb      	b.n	8042592 <MX_SPI1_Init+0x3e>
 804259a:	bf00      	nop
 804259c:	2001a3b8 	.word	0x2001a3b8
 80425a0:	40013000 	.word	0x40013000

080425a4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80425a4:	b508      	push	{r3, lr}
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80425a6:	4810      	ldr	r0, [pc, #64]	; (80425e8 <MX_SPI3_Init+0x44>)
 80425a8:	4b10      	ldr	r3, [pc, #64]	; (80425ec <MX_SPI3_Init+0x48>)
 80425aa:	6003      	str	r3, [r0, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80425ac:	f44f 7382 	mov.w	r3, #260	; 0x104
 80425b0:	6043      	str	r3, [r0, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80425b2:	2300      	movs	r3, #0
 80425b4:	6083      	str	r3, [r0, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80425b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80425ba:	60c2      	str	r2, [r0, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80425bc:	6103      	str	r3, [r0, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80425be:	6143      	str	r3, [r0, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80425c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80425c4:	6182      	str	r2, [r0, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80425c6:	2208      	movs	r2, #8
 80425c8:	61c2      	str	r2, [r0, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80425ca:	6203      	str	r3, [r0, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80425cc:	6243      	str	r3, [r0, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80425ce:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80425d0:	2207      	movs	r2, #7
 80425d2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80425d4:	6303      	str	r3, [r0, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80425d6:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80425d8:	f007 fd8c 	bl	804a0f4 <HAL_SPI_Init>
 80425dc:	b900      	cbnz	r0, 80425e0 <MX_SPI3_Init+0x3c>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80425de:	bd08      	pop	{r3, pc}
    Error_Handler();
 80425e0:	f7ff fca6 	bl	8041f30 <Error_Handler>
}
 80425e4:	e7fb      	b.n	80425de <MX_SPI3_Init+0x3a>
 80425e6:	bf00      	nop
 80425e8:	2001a32c 	.word	0x2001a32c
 80425ec:	40003c00 	.word	0x40003c00

080425f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80425f0:	b510      	push	{r4, lr}
 80425f2:	b08a      	sub	sp, #40	; 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80425f4:	2300      	movs	r3, #0
 80425f6:	9305      	str	r3, [sp, #20]
 80425f8:	9306      	str	r3, [sp, #24]
 80425fa:	9307      	str	r3, [sp, #28]
 80425fc:	9308      	str	r3, [sp, #32]
 80425fe:	9309      	str	r3, [sp, #36]	; 0x24
  if(spiHandle->Instance==SPI1)
 8042600:	6803      	ldr	r3, [r0, #0]
 8042602:	4a2d      	ldr	r2, [pc, #180]	; (80426b8 <HAL_SPI_MspInit+0xc8>)
 8042604:	4293      	cmp	r3, r2
 8042606:	d004      	beq.n	8042612 <HAL_SPI_MspInit+0x22>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI3)
 8042608:	4a2c      	ldr	r2, [pc, #176]	; (80426bc <HAL_SPI_MspInit+0xcc>)
 804260a:	4293      	cmp	r3, r2
 804260c:	d02a      	beq.n	8042664 <HAL_SPI_MspInit+0x74>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 804260e:	b00a      	add	sp, #40	; 0x28
 8042610:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8042612:	4b2b      	ldr	r3, [pc, #172]	; (80426c0 <HAL_SPI_MspInit+0xd0>)
 8042614:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8042616:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 804261a:	661a      	str	r2, [r3, #96]	; 0x60
 804261c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 804261e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8042622:	9201      	str	r2, [sp, #4]
 8042624:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8042626:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8042628:	f042 0201 	orr.w	r2, r2, #1
 804262c:	64da      	str	r2, [r3, #76]	; 0x4c
 804262e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042630:	f003 0301 	and.w	r3, r3, #1
 8042634:	9302      	str	r3, [sp, #8]
 8042636:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = CURRENT_SCK_Pin|CURRENT_MISO_Pin;
 8042638:	2360      	movs	r3, #96	; 0x60
 804263a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804263c:	2302      	movs	r3, #2
 804263e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8042640:	2400      	movs	r4, #0
 8042642:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8042644:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8042646:	2305      	movs	r3, #5
 8042648:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804264a:	a905      	add	r1, sp, #20
 804264c:	481d      	ldr	r0, [pc, #116]	; (80426c4 <HAL_SPI_MspInit+0xd4>)
 804264e:	f005 f8bf 	bl	80477d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8042652:	4622      	mov	r2, r4
 8042654:	4621      	mov	r1, r4
 8042656:	203b      	movs	r0, #59	; 0x3b
 8042658:	f004 fe46 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 804265c:	203b      	movs	r0, #59	; 0x3b
 804265e:	f004 fe77 	bl	8047350 <HAL_NVIC_EnableIRQ>
 8042662:	e7d4      	b.n	804260e <HAL_SPI_MspInit+0x1e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8042664:	4b16      	ldr	r3, [pc, #88]	; (80426c0 <HAL_SPI_MspInit+0xd0>)
 8042666:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8042668:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 804266c:	659a      	str	r2, [r3, #88]	; 0x58
 804266e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8042670:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8042674:	9203      	str	r2, [sp, #12]
 8042676:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8042678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 804267a:	f042 0204 	orr.w	r2, r2, #4
 804267e:	64da      	str	r2, [r3, #76]	; 0x4c
 8042680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042682:	f003 0304 	and.w	r3, r3, #4
 8042686:	9304      	str	r3, [sp, #16]
 8042688:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 804268a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 804268e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8042690:	2302      	movs	r3, #2
 8042692:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8042694:	2400      	movs	r4, #0
 8042696:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8042698:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 804269a:	2306      	movs	r3, #6
 804269c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 804269e:	a905      	add	r1, sp, #20
 80426a0:	4809      	ldr	r0, [pc, #36]	; (80426c8 <HAL_SPI_MspInit+0xd8>)
 80426a2:	f005 f895 	bl	80477d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80426a6:	4622      	mov	r2, r4
 80426a8:	4621      	mov	r1, r4
 80426aa:	2063      	movs	r0, #99	; 0x63
 80426ac:	f004 fe1c 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80426b0:	2063      	movs	r0, #99	; 0x63
 80426b2:	f004 fe4d 	bl	8047350 <HAL_NVIC_EnableIRQ>
}
 80426b6:	e7aa      	b.n	804260e <HAL_SPI_MspInit+0x1e>
 80426b8:	40013000 	.word	0x40013000
 80426bc:	40003c00 	.word	0x40003c00
 80426c0:	40021000 	.word	0x40021000
 80426c4:	42020000 	.word	0x42020000
 80426c8:	42020800 	.word	0x42020800

080426cc <SpiFormat>:
    GpioInit( &obj->Sclk, obj->Sclk.port, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &obj->Nss, obj->Nss.port, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}

void SpiFormat( Spi_t *obj, int8_t bits, int8_t cpol, int8_t cpha, int8_t slave )
{
 80426cc:	b4f0      	push	{r4, r5, r6, r7}
 80426ce:	f99d 5010 	ldrsb.w	r5, [sp, #16]
    SpiHandle[obj->SpiId].Init.Direction = SPI_DIRECTION_2LINES;
 80426d2:	7804      	ldrb	r4, [r0, #0]
 80426d4:	4e22      	ldr	r6, [pc, #136]	; (8042760 <SpiFormat+0x94>)
 80426d6:	278c      	movs	r7, #140	; 0x8c
 80426d8:	fb07 6404 	mla	r4, r7, r4, r6
 80426dc:	2600      	movs	r6, #0
 80426de:	60a6      	str	r6, [r4, #8]
    if( bits == 8 )
 80426e0:	2908      	cmp	r1, #8
 80426e2:	d02d      	beq.n	8042740 <SpiFormat+0x74>
    {
        SpiHandle[obj->SpiId].Init.DataSize = SPI_DATASIZE_8BIT;
    }
    else
    {
        SpiHandle[obj->SpiId].Init.DataSize = SPI_DATASIZE_16BIT;
 80426e4:	7801      	ldrb	r1, [r0, #0]
 80426e6:	4c1e      	ldr	r4, [pc, #120]	; (8042760 <SpiFormat+0x94>)
 80426e8:	268c      	movs	r6, #140	; 0x8c
 80426ea:	fb06 4101 	mla	r1, r6, r1, r4
 80426ee:	f44f 6470 	mov.w	r4, #3840	; 0xf00
 80426f2:	60cc      	str	r4, [r1, #12]
    }
    SpiHandle[obj->SpiId].Init.CLKPolarity = cpol;
 80426f4:	7806      	ldrb	r6, [r0, #0]
 80426f6:	491a      	ldr	r1, [pc, #104]	; (8042760 <SpiFormat+0x94>)
 80426f8:	248c      	movs	r4, #140	; 0x8c
 80426fa:	fb04 1606 	mla	r6, r4, r6, r1
 80426fe:	6132      	str	r2, [r6, #16]
    SpiHandle[obj->SpiId].Init.CLKPhase = cpha;
 8042700:	7802      	ldrb	r2, [r0, #0]
 8042702:	fb04 1202 	mla	r2, r4, r2, r1
 8042706:	6153      	str	r3, [r2, #20]
    SpiHandle[obj->SpiId].Init.FirstBit = SPI_FIRSTBIT_MSB;
 8042708:	7803      	ldrb	r3, [r0, #0]
 804270a:	fb04 1303 	mla	r3, r4, r3, r1
 804270e:	2200      	movs	r2, #0
 8042710:	621a      	str	r2, [r3, #32]
    SpiHandle[obj->SpiId].Init.TIMode = SPI_TIMODE_DISABLE;
 8042712:	7803      	ldrb	r3, [r0, #0]
 8042714:	fb04 1303 	mla	r3, r4, r3, r1
 8042718:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle[obj->SpiId].Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804271a:	7803      	ldrb	r3, [r0, #0]
 804271c:	fb04 1303 	mla	r3, r4, r3, r1
 8042720:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle[obj->SpiId].Init.CRCPolynomial = 7;
 8042722:	7803      	ldrb	r3, [r0, #0]
 8042724:	fb04 1103 	mla	r1, r4, r3, r1
 8042728:	2307      	movs	r3, #7
 804272a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if( slave == 0 )
 804272c:	b985      	cbnz	r5, 8042750 <SpiFormat+0x84>
    {
        SpiHandle[obj->SpiId].Init.Mode = SPI_MODE_MASTER;
 804272e:	7803      	ldrb	r3, [r0, #0]
 8042730:	4a0b      	ldr	r2, [pc, #44]	; (8042760 <SpiFormat+0x94>)
 8042732:	fb04 2303 	mla	r3, r4, r3, r2
 8042736:	f44f 7282 	mov.w	r2, #260	; 0x104
 804273a:	605a      	str	r2, [r3, #4]
    }
    else
    {
        SpiHandle[obj->SpiId].Init.Mode = SPI_MODE_SLAVE;
    }
}
 804273c:	bcf0      	pop	{r4, r5, r6, r7}
 804273e:	4770      	bx	lr
        SpiHandle[obj->SpiId].Init.DataSize = SPI_DATASIZE_8BIT;
 8042740:	7801      	ldrb	r1, [r0, #0]
 8042742:	4c07      	ldr	r4, [pc, #28]	; (8042760 <SpiFormat+0x94>)
 8042744:	fb07 4101 	mla	r1, r7, r1, r4
 8042748:	f44f 64e0 	mov.w	r4, #1792	; 0x700
 804274c:	60cc      	str	r4, [r1, #12]
 804274e:	e7d1      	b.n	80426f4 <SpiFormat+0x28>
        SpiHandle[obj->SpiId].Init.Mode = SPI_MODE_SLAVE;
 8042750:	7803      	ldrb	r3, [r0, #0]
 8042752:	4a03      	ldr	r2, [pc, #12]	; (8042760 <SpiFormat+0x94>)
 8042754:	218c      	movs	r1, #140	; 0x8c
 8042756:	fb01 2303 	mla	r3, r1, r3, r2
 804275a:	2200      	movs	r2, #0
 804275c:	605a      	str	r2, [r3, #4]
}
 804275e:	e7ed      	b.n	804273c <SpiFormat+0x70>
 8042760:	2001871c 	.word	0x2001871c

08042764 <SpiFrequency>:

void SpiFrequency( Spi_t *obj, uint32_t hz )
{
    uint32_t divisor = 0;
    uint32_t sysClkTmp = SystemCoreClock;
 8042764:	4b0e      	ldr	r3, [pc, #56]	; (80427a0 <SpiFrequency+0x3c>)
 8042766:	681a      	ldr	r2, [r3, #0]
    uint32_t divisor = 0;
 8042768:	2300      	movs	r3, #0
    uint32_t baudRate;

    while( sysClkTmp > hz )
 804276a:	428a      	cmp	r2, r1
 804276c:	d903      	bls.n	8042776 <SpiFrequency+0x12>
    {
        divisor++;
 804276e:	3301      	adds	r3, #1
        sysClkTmp = ( sysClkTmp >> 1 );
 8042770:	0852      	lsrs	r2, r2, #1

        if( divisor >= 7 )
 8042772:	2b06      	cmp	r3, #6
 8042774:	d9f9      	bls.n	804276a <SpiFrequency+0x6>
        {
            break;
        }
    }

    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 8042776:	f013 0204 	ands.w	r2, r3, #4
 804277a:	d000      	beq.n	804277e <SpiFrequency+0x1a>
 804277c:	2220      	movs	r2, #32
              ( ( ( divisor & 0x2 ) == 0 ) ? 0x0 : SPI_CR1_BR_1 ) |
 804277e:	f013 0102 	ands.w	r1, r3, #2
 8042782:	d000      	beq.n	8042786 <SpiFrequency+0x22>
 8042784:	2110      	movs	r1, #16
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 8042786:	430a      	orrs	r2, r1
              ( ( ( divisor & 0x1 ) == 0 ) ? 0x0 : SPI_CR1_BR_0 );
 8042788:	f013 0301 	ands.w	r3, r3, #1
 804278c:	d000      	beq.n	8042790 <SpiFrequency+0x2c>
 804278e:	2308      	movs	r3, #8
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 8042790:	4313      	orrs	r3, r2

    SpiHandle[obj->SpiId].Init.BaudRatePrescaler = baudRate;
 8042792:	7802      	ldrb	r2, [r0, #0]
 8042794:	4903      	ldr	r1, [pc, #12]	; (80427a4 <SpiFrequency+0x40>)
 8042796:	208c      	movs	r0, #140	; 0x8c
 8042798:	fb00 1202 	mla	r2, r0, r2, r1
 804279c:	61d3      	str	r3, [r2, #28]
}
 804279e:	4770      	bx	lr
 80427a0:	20018060 	.word	0x20018060
 80427a4:	2001871c 	.word	0x2001871c

080427a8 <SpiInit>:
{
 80427a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80427ac:	b08b      	sub	sp, #44	; 0x2c
 80427ae:	4605      	mov	r5, r0
 80427b0:	460c      	mov	r4, r1
 80427b2:	4611      	mov	r1, r2
 80427b4:	461a      	mov	r2, r3
 80427b6:	f8bd 9054 	ldrh.w	r9, [sp, #84]	; 0x54
 80427ba:	f8bd 805c 	ldrh.w	r8, [sp, #92]	; 0x5c
 80427be:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 80427c2:	9305      	str	r3, [sp, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80427c4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80427c8:	b672      	cpsid	i
    obj->SpiId = spiId;
 80427ca:	7004      	strb	r4, [r0, #0]
    if( spiId == SPI_1 )
 80427cc:	2c00      	cmp	r4, #0
 80427ce:	d061      	beq.n	8042894 <SpiInit+0xec>
    else if( spiId == SPI_2 )
 80427d0:	2c01      	cmp	r4, #1
 80427d2:	f000 80ab 	beq.w	804292c <SpiInit+0x184>
		__HAL_RCC_SPI3_FORCE_RESET( );
 80427d6:	487b      	ldr	r0, [pc, #492]	; (80429c4 <SpiInit+0x21c>)
 80427d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80427da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80427de:	6383      	str	r3, [r0, #56]	; 0x38
		__HAL_RCC_SPI3_RELEASE_RESET( );
 80427e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80427e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80427e6:	6383      	str	r3, [r0, #56]	; 0x38
		__HAL_RCC_SPI3_CLK_ENABLE( );
 80427e8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80427ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80427ee:	6583      	str	r3, [r0, #88]	; 0x58
 80427f0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80427f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80427f6:	9309      	str	r3, [sp, #36]	; 0x24
 80427f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
		SpiHandle[spiId].Instance = ( SPI_TypeDef* )SPI3_BASE;
 80427fa:	238c      	movs	r3, #140	; 0x8c
 80427fc:	fb03 f304 	mul.w	r3, r3, r4
 8042800:	4871      	ldr	r0, [pc, #452]	; (80429c8 <SpiInit+0x220>)
 8042802:	4e72      	ldr	r6, [pc, #456]	; (80429cc <SpiInit+0x224>)
 8042804:	50c6      	str	r6, [r0, r3]
		GpioInit( &obj->Mosi, mosiPort, mosiPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_NO_PULL, GPIO_AF6_SPI3 );
 8042806:	f04f 0a06 	mov.w	sl, #6
 804280a:	f8cd a008 	str.w	sl, [sp, #8]
 804280e:	2600      	movs	r6, #0
 8042810:	9601      	str	r6, [sp, #4]
 8042812:	9600      	str	r6, [sp, #0]
 8042814:	2302      	movs	r3, #2
 8042816:	1d28      	adds	r0, r5, #4
 8042818:	f7fe ff56 	bl	80416c8 <GpioInit>
		        GpioInit( &obj->Miso, misoPort, misoPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_NO_PULL, GPIO_AF6_SPI3 );
 804281c:	f8cd a008 	str.w	sl, [sp, #8]
 8042820:	9601      	str	r6, [sp, #4]
 8042822:	9600      	str	r6, [sp, #0]
 8042824:	2302      	movs	r3, #2
 8042826:	464a      	mov	r2, r9
 8042828:	9914      	ldr	r1, [sp, #80]	; 0x50
 804282a:	f105 0018 	add.w	r0, r5, #24
 804282e:	f7fe ff4b 	bl	80416c8 <GpioInit>
		        GpioInit( &obj->Sclk, sclkPort, sclkPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_NO_PULL, GPIO_AF6_SPI3 );
 8042832:	f8cd a008 	str.w	sl, [sp, #8]
 8042836:	9601      	str	r6, [sp, #4]
 8042838:	9600      	str	r6, [sp, #0]
 804283a:	2302      	movs	r3, #2
 804283c:	4642      	mov	r2, r8
 804283e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8042840:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8042844:	f7fe ff40 	bl	80416c8 <GpioInit>
		        GpioInit( &obj->Nss, nssPort, nssPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF6_SPI3 );
 8042848:	f8cd a008 	str.w	sl, [sp, #8]
 804284c:	2301      	movs	r3, #1
 804284e:	9301      	str	r3, [sp, #4]
 8042850:	9600      	str	r6, [sp, #0]
 8042852:	2302      	movs	r3, #2
 8042854:	9a05      	ldr	r2, [sp, #20]
 8042856:	9918      	ldr	r1, [sp, #96]	; 0x60
 8042858:	f105 0040 	add.w	r0, r5, #64	; 0x40
 804285c:	f7fe ff34 	bl	80416c8 <GpioInit>
        SpiHandle[spiId].Init.NSS = SPI_NSS_SOFT;
 8042860:	4959      	ldr	r1, [pc, #356]	; (80429c8 <SpiInit+0x220>)
 8042862:	238c      	movs	r3, #140	; 0x8c
 8042864:	fb03 1404 	mla	r4, r3, r4, r1
 8042868:	f44f 7300 	mov.w	r3, #512	; 0x200
 804286c:	61a3      	str	r3, [r4, #24]
        SpiFormat( obj, 8, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 804286e:	2200      	movs	r2, #0
 8042870:	9200      	str	r2, [sp, #0]
 8042872:	4613      	mov	r3, r2
 8042874:	2108      	movs	r1, #8
 8042876:	4628      	mov	r0, r5
 8042878:	f7ff ff28 	bl	80426cc <SpiFormat>
    SpiFrequency( obj, 10000000 );
 804287c:	4954      	ldr	r1, [pc, #336]	; (80429d0 <SpiInit+0x228>)
 804287e:	4628      	mov	r0, r5
 8042880:	f7ff ff70 	bl	8042764 <SpiFrequency>
    HAL_SPI_Init( &SpiHandle[spiId] );
 8042884:	4620      	mov	r0, r4
 8042886:	f007 fc35 	bl	804a0f4 <HAL_SPI_Init>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804288a:	f387 8810 	msr	PRIMASK, r7
}
 804288e:	b00b      	add	sp, #44	; 0x2c
 8042890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        __HAL_RCC_SPI1_FORCE_RESET( );
 8042894:	484b      	ldr	r0, [pc, #300]	; (80429c4 <SpiInit+0x21c>)
 8042896:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8042898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804289c:	6403      	str	r3, [r0, #64]	; 0x40
        __HAL_RCC_SPI1_RELEASE_RESET( );
 804289e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80428a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80428a4:	6403      	str	r3, [r0, #64]	; 0x40
        __HAL_RCC_SPI1_CLK_ENABLE( );
 80428a6:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80428a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80428ac:	6603      	str	r3, [r0, #96]	; 0x60
 80428ae:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80428b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80428b4:	9307      	str	r3, [sp, #28]
 80428b6:	9b07      	ldr	r3, [sp, #28]
        SpiHandle[spiId].Instance = ( SPI_TypeDef* )SPI1_BASE;
 80428b8:	238c      	movs	r3, #140	; 0x8c
 80428ba:	fb03 f304 	mul.w	r3, r3, r4
 80428be:	4842      	ldr	r0, [pc, #264]	; (80429c8 <SpiInit+0x220>)
 80428c0:	4e44      	ldr	r6, [pc, #272]	; (80429d4 <SpiInit+0x22c>)
 80428c2:	50c6      	str	r6, [r0, r3]
        GpioInit( &obj->Mosi, mosiPort, mosiPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 80428c4:	f04f 0b05 	mov.w	fp, #5
 80428c8:	f8cd b008 	str.w	fp, [sp, #8]
 80428cc:	2602      	movs	r6, #2
 80428ce:	9601      	str	r6, [sp, #4]
 80428d0:	f04f 0a00 	mov.w	sl, #0
 80428d4:	f8cd a000 	str.w	sl, [sp]
 80428d8:	4633      	mov	r3, r6
 80428da:	1d28      	adds	r0, r5, #4
 80428dc:	f7fe fef4 	bl	80416c8 <GpioInit>
        GpioInit( &obj->Miso, misoPort, misoPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 80428e0:	f8cd b008 	str.w	fp, [sp, #8]
 80428e4:	9601      	str	r6, [sp, #4]
 80428e6:	f8cd a000 	str.w	sl, [sp]
 80428ea:	4633      	mov	r3, r6
 80428ec:	464a      	mov	r2, r9
 80428ee:	9914      	ldr	r1, [sp, #80]	; 0x50
 80428f0:	f105 0018 	add.w	r0, r5, #24
 80428f4:	f7fe fee8 	bl	80416c8 <GpioInit>
        GpioInit( &obj->Sclk, sclkPort, sclkPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 80428f8:	f8cd b008 	str.w	fp, [sp, #8]
 80428fc:	9601      	str	r6, [sp, #4]
 80428fe:	f8cd a000 	str.w	sl, [sp]
 8042902:	4633      	mov	r3, r6
 8042904:	4642      	mov	r2, r8
 8042906:	9916      	ldr	r1, [sp, #88]	; 0x58
 8042908:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 804290c:	f7fe fedc 	bl	80416c8 <GpioInit>
        GpioInit( &obj->Nss, nssPort, nssPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI1 );
 8042910:	f8cd b008 	str.w	fp, [sp, #8]
 8042914:	2301      	movs	r3, #1
 8042916:	9301      	str	r3, [sp, #4]
 8042918:	f8cd a000 	str.w	sl, [sp]
 804291c:	4633      	mov	r3, r6
 804291e:	9a05      	ldr	r2, [sp, #20]
 8042920:	9918      	ldr	r1, [sp, #96]	; 0x60
 8042922:	f105 0040 	add.w	r0, r5, #64	; 0x40
 8042926:	f7fe fecf 	bl	80416c8 <GpioInit>
 804292a:	e799      	b.n	8042860 <SpiInit+0xb8>
        __HAL_RCC_SPI2_FORCE_RESET( );
 804292c:	4b25      	ldr	r3, [pc, #148]	; (80429c4 <SpiInit+0x21c>)
 804292e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8042930:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8042934:	6398      	str	r0, [r3, #56]	; 0x38
        __HAL_RCC_SPI2_RELEASE_RESET( );
 8042936:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8042938:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
 804293c:	6398      	str	r0, [r3, #56]	; 0x38
        __HAL_RCC_SPI2_CLK_ENABLE( );
 804293e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8042940:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
 8042944:	6598      	str	r0, [r3, #88]	; 0x58
 8042946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804294c:	9308      	str	r3, [sp, #32]
 804294e:	9b08      	ldr	r3, [sp, #32]
        SpiHandle[spiId].Instance = ( SPI_TypeDef* )SPI2_BASE;
 8042950:	238c      	movs	r3, #140	; 0x8c
 8042952:	fb03 f304 	mul.w	r3, r3, r4
 8042956:	481c      	ldr	r0, [pc, #112]	; (80429c8 <SpiInit+0x220>)
 8042958:	4e1f      	ldr	r6, [pc, #124]	; (80429d8 <SpiInit+0x230>)
 804295a:	50c6      	str	r6, [r0, r3]
        GpioInit( &obj->Mosi, mosiPort, mosiPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 804295c:	f04f 0a05 	mov.w	sl, #5
 8042960:	f8cd a008 	str.w	sl, [sp, #8]
 8042964:	2602      	movs	r6, #2
 8042966:	9601      	str	r6, [sp, #4]
 8042968:	f04f 0b00 	mov.w	fp, #0
 804296c:	f8cd b000 	str.w	fp, [sp]
 8042970:	4633      	mov	r3, r6
 8042972:	1d28      	adds	r0, r5, #4
 8042974:	f7fe fea8 	bl	80416c8 <GpioInit>
                GpioInit( &obj->Miso, misoPort, misoPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 8042978:	f8cd a008 	str.w	sl, [sp, #8]
 804297c:	9601      	str	r6, [sp, #4]
 804297e:	f8cd b000 	str.w	fp, [sp]
 8042982:	4633      	mov	r3, r6
 8042984:	464a      	mov	r2, r9
 8042986:	9914      	ldr	r1, [sp, #80]	; 0x50
 8042988:	f105 0018 	add.w	r0, r5, #24
 804298c:	f7fe fe9c 	bl	80416c8 <GpioInit>
                GpioInit( &obj->Sclk, sclkPort, sclkPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 8042990:	f8cd a008 	str.w	sl, [sp, #8]
 8042994:	9601      	str	r6, [sp, #4]
 8042996:	f8cd b000 	str.w	fp, [sp]
 804299a:	4633      	mov	r3, r6
 804299c:	4642      	mov	r2, r8
 804299e:	9916      	ldr	r1, [sp, #88]	; 0x58
 80429a0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80429a4:	f7fe fe90 	bl	80416c8 <GpioInit>
                GpioInit( &obj->Nss, nssPort, nssPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI2 );
 80429a8:	f8cd a008 	str.w	sl, [sp, #8]
 80429ac:	2301      	movs	r3, #1
 80429ae:	9301      	str	r3, [sp, #4]
 80429b0:	f8cd b000 	str.w	fp, [sp]
 80429b4:	4633      	mov	r3, r6
 80429b6:	9a05      	ldr	r2, [sp, #20]
 80429b8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80429ba:	f105 0040 	add.w	r0, r5, #64	; 0x40
 80429be:	f7fe fe83 	bl	80416c8 <GpioInit>
 80429c2:	e74d      	b.n	8042860 <SpiInit+0xb8>
 80429c4:	40021000 	.word	0x40021000
 80429c8:	2001871c 	.word	0x2001871c
 80429cc:	40003c00 	.word	0x40003c00
 80429d0:	00989680 	.word	0x00989680
 80429d4:	40013000 	.word	0x40013000
 80429d8:	40003800 	.word	0x40003800

080429dc <SpiInOut>:

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 80429dc:	b570      	push	{r4, r5, r6, lr}
 80429de:	b086      	sub	sp, #24
 80429e0:	f8ad 100e 	strh.w	r1, [sp, #14]
    uint8_t rxData = 0;
 80429e4:	2300      	movs	r3, #0
 80429e6:	f88d 3017 	strb.w	r3, [sp, #23]
    if( ( obj == NULL ) || ( SpiHandle[obj->SpiId].Instance ) == NULL )
    {
        assert_param( FAIL );
    }

    __HAL_SPI_ENABLE( &SpiHandle[obj->SpiId] );
 80429ea:	7803      	ldrb	r3, [r0, #0]
 80429ec:	4c0f      	ldr	r4, [pc, #60]	; (8042a2c <SpiInOut+0x50>)
 80429ee:	258c      	movs	r5, #140	; 0x8c
 80429f0:	fb05 f303 	mul.w	r3, r5, r3
 80429f4:	58e2      	ldr	r2, [r4, r3]
 80429f6:	6813      	ldr	r3, [r2, #0]
 80429f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80429fc:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80429fe:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8042a02:	b672      	cpsid	i

    CRITICAL_SECTION_BEGIN( );

    HAL_SPI_TransmitReceive( &SpiHandle[obj->SpiId], ( uint8_t* )&outData, &rxData, 1, HAL_MAX_DELAY );
 8042a04:	7800      	ldrb	r0, [r0, #0]
 8042a06:	f04f 33ff 	mov.w	r3, #4294967295
 8042a0a:	9300      	str	r3, [sp, #0]
 8042a0c:	2301      	movs	r3, #1
 8042a0e:	f10d 0217 	add.w	r2, sp, #23
 8042a12:	f10d 010e 	add.w	r1, sp, #14
 8042a16:	fb05 4000 	mla	r0, r5, r0, r4
 8042a1a:	f007 fc05 	bl	804a228 <HAL_SPI_TransmitReceive>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8042a1e:	f386 8810 	msr	PRIMASK, r6

    CRITICAL_SECTION_END( );

    return( rxData );
}
 8042a22:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8042a26:	b006      	add	sp, #24
 8042a28:	bd70      	pop	{r4, r5, r6, pc}
 8042a2a:	bf00      	nop
 8042a2c:	2001871c 	.word	0x2001871c

08042a30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8042a30:	b500      	push	{lr}
 8042a32:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8042a34:	4b0e      	ldr	r3, [pc, #56]	; (8042a70 <HAL_MspInit+0x40>)
 8042a36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8042a38:	f042 0201 	orr.w	r2, r2, #1
 8042a3c:	661a      	str	r2, [r3, #96]	; 0x60
 8042a3e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8042a40:	f002 0201 	and.w	r2, r2, #1
 8042a44:	9200      	str	r2, [sp, #0]
 8042a46:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8042a48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8042a4a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8042a4e:	659a      	str	r2, [r3, #88]	; 0x58
 8042a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042a56:	9301      	str	r3, [sp, #4]
 8042a58:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8042a5a:	2200      	movs	r2, #0
 8042a5c:	4611      	mov	r1, r2
 8042a5e:	205f      	movs	r0, #95	; 0x5f
 8042a60:	f004 fc42 	bl	80472e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8042a64:	205f      	movs	r0, #95	; 0x5f
 8042a66:	f004 fc73 	bl	8047350 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8042a6a:	b003      	add	sp, #12
 8042a6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8042a70:	40021000 	.word	0x40021000

08042a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8042a74:	b500      	push	{lr}
 8042a76:	b089      	sub	sp, #36	; 0x24
 8042a78:	4601      	mov	r1, r0
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8042a7a:	2200      	movs	r2, #0
 8042a7c:	2031      	movs	r0, #49	; 0x31
 8042a7e:	f004 fc33 	bl	80472e8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8042a82:	2031      	movs	r0, #49	; 0x31
 8042a84:	f004 fc64 	bl	8047350 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8042a88:	4b14      	ldr	r3, [pc, #80]	; (8042adc <HAL_InitTick+0x68>)
 8042a8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8042a8c:	f042 0210 	orr.w	r2, r2, #16
 8042a90:	659a      	str	r2, [r3, #88]	; 0x58
 8042a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042a94:	f003 0310 	and.w	r3, r3, #16
 8042a98:	9301      	str	r3, [sp, #4]
 8042a9a:	9b01      	ldr	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8042a9c:	a902      	add	r1, sp, #8
 8042a9e:	a803      	add	r0, sp, #12
 8042aa0:	f006 f93c 	bl	8048d1c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8042aa4:	f006 f91a 	bl	8048cdc <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8042aa8:	4b0d      	ldr	r3, [pc, #52]	; (8042ae0 <HAL_InitTick+0x6c>)
 8042aaa:	fba3 2300 	umull	r2, r3, r3, r0
 8042aae:	0c9b      	lsrs	r3, r3, #18
 8042ab0:	3b01      	subs	r3, #1

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8042ab2:	480c      	ldr	r0, [pc, #48]	; (8042ae4 <HAL_InitTick+0x70>)
 8042ab4:	4a0c      	ldr	r2, [pc, #48]	; (8042ae8 <HAL_InitTick+0x74>)
 8042ab6:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8042ab8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8042abc:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8042abe:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8042ac0:	2300      	movs	r3, #0
 8042ac2:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8042ac4:	6083      	str	r3, [r0, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8042ac6:	f008 f859 	bl	804ab7c <HAL_TIM_Base_Init>
 8042aca:	b118      	cbz	r0, 8042ad4 <HAL_InitTick+0x60>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
 8042acc:	2001      	movs	r0, #1
}
 8042ace:	b009      	add	sp, #36	; 0x24
 8042ad0:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_TIM_Base_Start_IT(&htim6);
 8042ad4:	4803      	ldr	r0, [pc, #12]	; (8042ae4 <HAL_InitTick+0x70>)
 8042ad6:	f007 fe83 	bl	804a7e0 <HAL_TIM_Base_Start_IT>
 8042ada:	e7f8      	b.n	8042ace <HAL_InitTick+0x5a>
 8042adc:	40021000 	.word	0x40021000
 8042ae0:	431bde83 	.word	0x431bde83
 8042ae4:	2001a444 	.word	0x2001a444
 8042ae8:	40001000 	.word	0x40001000

08042aec <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8042aec:	e7fe      	b.n	8042aec <MemManage_Handler>

08042aee <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8042aee:	e7fe      	b.n	8042aee <UsageFault_Handler>

08042af0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8042af0:	4770      	bx	lr

08042af2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8042af2:	4770      	bx	lr

08042af4 <SysTick_Handler>:
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8042af4:	4770      	bx	lr
	...

08042af8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupts through EXTI line 17.
  */
void RTC_IRQHandler(void)
{
 8042af8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8042afa:	4c05      	ldr	r4, [pc, #20]	; (8042b10 <RTC_IRQHandler+0x18>)
 8042afc:	4620      	mov	r0, r4
 8042afe:	f006 fdbb 	bl	8049678 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_TimeStampIRQHandler(&hrtc);
 8042b02:	4620      	mov	r0, r4
 8042b04:	f007 f8a8 	bl	8049c58 <HAL_RTCEx_TimeStampIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8042b08:	4620      	mov	r0, r4
 8042b0a:	f007 f921 	bl	8049d50 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8042b0e:	bd10      	pop	{r4, pc}
 8042b10:	2001a2b8 	.word	0x2001a2b8

08042b14 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8042b14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8042b16:	4802      	ldr	r0, [pc, #8]	; (8042b20 <DMA1_Channel5_IRQHandler+0xc>)
 8042b18:	f004 fdbd 	bl	8047696 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8042b1c:	bd08      	pop	{r3, pc}
 8042b1e:	bf00      	nop
 8042b20:	2001b03c 	.word	0x2001b03c

08042b24 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8042b24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8042b26:	4802      	ldr	r0, [pc, #8]	; (8042b30 <DMA1_Channel6_IRQHandler+0xc>)
 8042b28:	f004 fdb5 	bl	8047696 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8042b2c:	bd08      	pop	{r3, pc}
 8042b2e:	bf00      	nop
 8042b30:	2001afd4 	.word	0x2001afd4

08042b34 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8042b34:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8042b36:	4803      	ldr	r0, [pc, #12]	; (8042b44 <ADC1_2_IRQHandler+0x10>)
 8042b38:	f003 fd66 	bl	8046608 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8042b3c:	4802      	ldr	r0, [pc, #8]	; (8042b48 <ADC1_2_IRQHandler+0x14>)
 8042b3e:	f003 fd63 	bl	8046608 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8042b42:	bd08      	pop	{r3, pc}
 8042b44:	2001a11c 	.word	0x2001a11c
 8042b48:	2001a088 	.word	0x2001a088

08042b4c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8042b4c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8042b4e:	4802      	ldr	r0, [pc, #8]	; (8042b58 <TIM1_BRK_IRQHandler+0xc>)
 8042b50:	f007 fe8c 	bl	804a86c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8042b54:	bd08      	pop	{r3, pc}
 8042b56:	bf00      	nop
 8042b58:	2001a500 	.word	0x2001a500

08042b5c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8042b5c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8042b5e:	4802      	ldr	r0, [pc, #8]	; (8042b68 <TIM1_UP_IRQHandler+0xc>)
 8042b60:	f007 fe84 	bl	804a86c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8042b64:	bd08      	pop	{r3, pc}
 8042b66:	bf00      	nop
 8042b68:	2001a500 	.word	0x2001a500

08042b6c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8042b6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8042b6e:	4802      	ldr	r0, [pc, #8]	; (8042b78 <TIM1_TRG_COM_IRQHandler+0xc>)
 8042b70:	f007 fe7c 	bl	804a86c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8042b74:	bd08      	pop	{r3, pc}
 8042b76:	bf00      	nop
 8042b78:	2001a500 	.word	0x2001a500

08042b7c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8042b7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8042b7e:	4802      	ldr	r0, [pc, #8]	; (8042b88 <TIM1_CC_IRQHandler+0xc>)
 8042b80:	f007 fe74 	bl	804a86c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8042b84:	bd08      	pop	{r3, pc}
 8042b86:	bf00      	nop
 8042b88:	2001a500 	.word	0x2001a500

08042b8c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8042b8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8042b8e:	4802      	ldr	r0, [pc, #8]	; (8042b98 <TIM6_IRQHandler+0xc>)
 8042b90:	f007 fe6c 	bl	804a86c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8042b94:	bd08      	pop	{r3, pc}
 8042b96:	bf00      	nop
 8042b98:	2001a444 	.word	0x2001a444

08042b9c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8042b9c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8042b9e:	4802      	ldr	r0, [pc, #8]	; (8042ba8 <I2C1_EV_IRQHandler+0xc>)
 8042ba0:	f005 feda 	bl	8048958 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8042ba4:	bd08      	pop	{r3, pc}
 8042ba6:	bf00      	nop
 8042ba8:	2001a218 	.word	0x2001a218

08042bac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8042bac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8042bae:	4802      	ldr	r0, [pc, #8]	; (8042bb8 <I2C1_ER_IRQHandler+0xc>)
 8042bb0:	f005 feda 	bl	8048968 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8042bb4:	bd08      	pop	{r3, pc}
 8042bb6:	bf00      	nop
 8042bb8:	2001a218 	.word	0x2001a218

08042bbc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8042bbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8042bbe:	4802      	ldr	r0, [pc, #8]	; (8042bc8 <SPI1_IRQHandler+0xc>)
 8042bc0:	f007 fd72 	bl	804a6a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8042bc4:	bd08      	pop	{r3, pc}
 8042bc6:	bf00      	nop
 8042bc8:	2001a3b8 	.word	0x2001a3b8

08042bcc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8042bcc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8042bce:	4802      	ldr	r0, [pc, #8]	; (8042bd8 <USART3_IRQHandler+0xc>)
 8042bd0:	f008 f932 	bl	804ae38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8042bd4:	bd08      	pop	{r3, pc}
 8042bd6:	bf00      	nop
 8042bd8:	2001a630 	.word	0x2001a630

08042bdc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 8042bdc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8042bde:	4802      	ldr	r0, [pc, #8]	; (8042be8 <LPUART1_IRQHandler+0xc>)
 8042be0:	f008 f92a 	bl	804ae38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8042be4:	bd08      	pop	{r3, pc}
 8042be6:	bf00      	nop
 8042be8:	2001af2c 	.word	0x2001af2c

08042bec <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8042bec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8042bee:	4802      	ldr	r0, [pc, #8]	; (8042bf8 <DMA2_Channel2_IRQHandler+0xc>)
 8042bf0:	f004 fd51 	bl	8047696 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8042bf4:	bd08      	pop	{r3, pc}
 8042bf6:	bf00      	nop
 8042bf8:	2001a5c8 	.word	0x2001a5c8

08042bfc <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8042bfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8042bfe:	4802      	ldr	r0, [pc, #8]	; (8042c08 <DMA2_Channel3_IRQHandler+0xc>)
 8042c00:	f004 fd49 	bl	8047696 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 8042c04:	bd08      	pop	{r3, pc}
 8042c06:	bf00      	nop
 8042c08:	2001aec4 	.word	0x2001aec4

08042c0c <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8042c0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8042c0e:	4802      	ldr	r0, [pc, #8]	; (8042c18 <DMA2_Channel6_IRQHandler+0xc>)
 8042c10:	f004 fd41 	bl	8047696 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8042c14:	bd08      	pop	{r3, pc}
 8042c16:	bf00      	nop
 8042c18:	2001a1b0 	.word	0x2001a1b0

08042c1c <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8042c1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8042c1e:	4802      	ldr	r0, [pc, #8]	; (8042c28 <RNG_IRQHandler+0xc>)
 8042c20:	f006 fcc0 	bl	80495a4 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8042c24:	bd08      	pop	{r3, pc}
 8042c26:	bf00      	nop
 8042c28:	2001a294 	.word	0x2001a294

08042c2c <FPU_IRQHandler>:

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8042c2c:	4770      	bx	lr
	...

08042c30 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8042c30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8042c32:	4802      	ldr	r0, [pc, #8]	; (8042c3c <SPI3_IRQHandler+0xc>)
 8042c34:	f007 fd38 	bl	804a6a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8042c38:	bd08      	pop	{r3, pc}
 8042c3a:	bf00      	nop
 8042c3c:	2001a32c 	.word	0x2001a32c

08042c40 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8042c40:	2001      	movs	r0, #1
 8042c42:	4770      	bx	lr

08042c44 <_kill>:

int _kill(int pid, int sig)
{
 8042c44:	b508      	push	{r3, lr}
	errno = EINVAL;
 8042c46:	f012 f971 	bl	8054f2c <__errno>
 8042c4a:	2316      	movs	r3, #22
 8042c4c:	6003      	str	r3, [r0, #0]
	return -1;
}
 8042c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8042c52:	bd08      	pop	{r3, pc}

08042c54 <_exit>:

void _exit (int status)
{
 8042c54:	b508      	push	{r3, lr}
	_kill(status, -1);
 8042c56:	f04f 31ff 	mov.w	r1, #4294967295
 8042c5a:	f7ff fff3 	bl	8042c44 <_kill>
	while (1) {}		/* Make sure we hang here */
 8042c5e:	e7fe      	b.n	8042c5e <_exit+0xa>

08042c60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8042c60:	b570      	push	{r4, r5, r6, lr}
 8042c62:	460c      	mov	r4, r1
 8042c64:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8042c66:	2500      	movs	r5, #0
 8042c68:	42b5      	cmp	r5, r6
 8042c6a:	da07      	bge.n	8042c7c <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8042c6c:	e000      	b.n	8042c70 <_read+0x10>
 8042c6e:	bf00      	nop
 8042c70:	4621      	mov	r1, r4
 8042c72:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8042c76:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8042c78:	460c      	mov	r4, r1
 8042c7a:	e7f5      	b.n	8042c68 <_read+0x8>
	}

return len;
}
 8042c7c:	4630      	mov	r0, r6
 8042c7e:	bd70      	pop	{r4, r5, r6, pc}

08042c80 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8042c80:	b570      	push	{r4, r5, r6, lr}
 8042c82:	460c      	mov	r4, r1
 8042c84:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8042c86:	2500      	movs	r5, #0
 8042c88:	42b5      	cmp	r5, r6
 8042c8a:	da05      	bge.n	8042c98 <_write+0x18>
	{
		__io_putchar(*ptr++);
 8042c8c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8042c90:	f002 f836 	bl	8044d00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8042c94:	3501      	adds	r5, #1
 8042c96:	e7f7      	b.n	8042c88 <_write+0x8>
	}
	return len;
}
 8042c98:	4630      	mov	r0, r6
 8042c9a:	bd70      	pop	{r4, r5, r6, pc}

08042c9c <_close>:

int _close(int file)
{
	return -1;
}
 8042c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8042ca0:	4770      	bx	lr

08042ca2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8042ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8042ca6:	604b      	str	r3, [r1, #4]
	return 0;
}
 8042ca8:	2000      	movs	r0, #0
 8042caa:	4770      	bx	lr

08042cac <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8042cac:	2001      	movs	r0, #1
 8042cae:	4770      	bx	lr

08042cb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8042cb0:	2000      	movs	r0, #0
 8042cb2:	4770      	bx	lr

08042cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8042cb4:	b510      	push	{r4, lr}
 8042cb6:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8042cb8:	4a0c      	ldr	r2, [pc, #48]	; (8042cec <_sbrk+0x38>)
 8042cba:	490d      	ldr	r1, [pc, #52]	; (8042cf0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8042cbc:	480d      	ldr	r0, [pc, #52]	; (8042cf4 <_sbrk+0x40>)
 8042cbe:	6800      	ldr	r0, [r0, #0]
 8042cc0:	b140      	cbz	r0, 8042cd4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8042cc2:	480c      	ldr	r0, [pc, #48]	; (8042cf4 <_sbrk+0x40>)
 8042cc4:	6800      	ldr	r0, [r0, #0]
 8042cc6:	4403      	add	r3, r0
 8042cc8:	1a52      	subs	r2, r2, r1
 8042cca:	4293      	cmp	r3, r2
 8042ccc:	d806      	bhi.n	8042cdc <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8042cce:	4a09      	ldr	r2, [pc, #36]	; (8042cf4 <_sbrk+0x40>)
 8042cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8042cd2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8042cd4:	4807      	ldr	r0, [pc, #28]	; (8042cf4 <_sbrk+0x40>)
 8042cd6:	4c08      	ldr	r4, [pc, #32]	; (8042cf8 <_sbrk+0x44>)
 8042cd8:	6004      	str	r4, [r0, #0]
 8042cda:	e7f2      	b.n	8042cc2 <_sbrk+0xe>
    errno = ENOMEM;
 8042cdc:	f012 f926 	bl	8054f2c <__errno>
 8042ce0:	230c      	movs	r3, #12
 8042ce2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8042ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8042ce8:	e7f3      	b.n	8042cd2 <_sbrk+0x1e>
 8042cea:	bf00      	nop
 8042cec:	20030000 	.word	0x20030000
 8042cf0:	00000400 	.word	0x00000400
 8042cf4:	200188c0 	.word	0x200188c0
 8042cf8:	2001b530 	.word	0x2001b530

08042cfc <SystemInit>:
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8042cfc:	4770      	bx	lr
	...

08042d00 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8042d00:	b508      	push	{r3, lr}
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8042d02:	f016 fefd 	bl	8059b00 <__SECURE_SystemCoreClockUpdate_veneer>
 8042d06:	4b01      	ldr	r3, [pc, #4]	; (8042d0c <SystemCoreClockUpdate+0xc>)
 8042d08:	6018      	str	r0, [r3, #0]
}
 8042d0a:	bd08      	pop	{r3, pc}
 8042d0c:	20018060 	.word	0x20018060

08042d10 <SysTimeAdd>:
static void CalendarDiv60( uint32_t in, uint32_t* out, uint32_t* remainder );

const char *WeekDayString[]={ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8042d10:	b082      	sub	sp, #8
 8042d12:	b082      	sub	sp, #8
 8042d14:	f10d 0c08 	add.w	ip, sp, #8
 8042d18:	e90c 0006 	stmdb	ip, {r1, r2}
 8042d1c:	9303      	str	r3, [sp, #12]
    SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds + b.Seconds;
 8042d1e:	9a00      	ldr	r2, [sp, #0]
 8042d20:	4413      	add	r3, r2
 8042d22:	6003      	str	r3, [r0, #0]
    c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8042d24:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8042d28:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8042d2c:	440a      	add	r2, r1
 8042d2e:	b291      	uxth	r1, r2
 8042d30:	b212      	sxth	r2, r2
 8042d32:	8082      	strh	r2, [r0, #4]
    if( c.SubSeconds >= 1000 )
 8042d34:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8042d38:	db04      	blt.n	8042d44 <SysTimeAdd+0x34>
    {
        c.Seconds++;
 8042d3a:	3301      	adds	r3, #1
 8042d3c:	6003      	str	r3, [r0, #0]
        c.SubSeconds -= 1000;
 8042d3e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8042d42:	8081      	strh	r1, [r0, #4]
    }
    return c;
}
 8042d44:	b002      	add	sp, #8
 8042d46:	b002      	add	sp, #8
 8042d48:	4770      	bx	lr

08042d4a <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8042d4a:	b082      	sub	sp, #8
 8042d4c:	b082      	sub	sp, #8
 8042d4e:	f10d 0c08 	add.w	ip, sp, #8
 8042d52:	e90c 0006 	stmdb	ip, {r1, r2}
 8042d56:	9303      	str	r3, [sp, #12]
    SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

    c.Seconds = a.Seconds - b.Seconds;
 8042d58:	9a00      	ldr	r2, [sp, #0]
 8042d5a:	1ad3      	subs	r3, r2, r3
 8042d5c:	6003      	str	r3, [r0, #0]
    c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8042d5e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8042d62:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8042d66:	1a52      	subs	r2, r2, r1
 8042d68:	b291      	uxth	r1, r2
 8042d6a:	b212      	sxth	r2, r2
 8042d6c:	8082      	strh	r2, [r0, #4]
    if( c.SubSeconds < 0 )
 8042d6e:	2a00      	cmp	r2, #0
 8042d70:	db02      	blt.n	8042d78 <SysTimeSub+0x2e>
    {
        c.Seconds--;
        c.SubSeconds += 1000;
    }
    return c;
}
 8042d72:	b002      	add	sp, #8
 8042d74:	b002      	add	sp, #8
 8042d76:	4770      	bx	lr
        c.Seconds--;
 8042d78:	3b01      	subs	r3, #1
 8042d7a:	6003      	str	r3, [r0, #0]
        c.SubSeconds += 1000;
 8042d7c:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8042d80:	8081      	strh	r1, [r0, #4]
    return c;
 8042d82:	e7f6      	b.n	8042d72 <SysTimeSub+0x28>

08042d84 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8042d84:	b510      	push	{r4, lr}
 8042d86:	b088      	sub	sp, #32
 8042d88:	ac02      	add	r4, sp, #8
 8042d8a:	e884 0003 	stmia.w	r4, {r0, r1}
    SysTime_t deltaTime;
  
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8042d8e:	2300      	movs	r3, #0
 8042d90:	9304      	str	r3, [sp, #16]
 8042d92:	f8ad 3014 	strh.w	r3, [sp, #20]

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8042d96:	a805      	add	r0, sp, #20
 8042d98:	f7ff fba4 	bl	80424e4 <RtcGetCalendarTime>
 8042d9c:	4603      	mov	r3, r0
 8042d9e:	9004      	str	r0, [sp, #16]

    // sysTime is epoch
    deltaTime = SysTimeSub( sysTime, calendarTime );
 8042da0:	9a05      	ldr	r2, [sp, #20]
 8042da2:	9200      	str	r2, [sp, #0]
 8042da4:	e894 0006 	ldmia.w	r4, {r1, r2}
 8042da8:	a806      	add	r0, sp, #24
 8042daa:	f7ff ffce 	bl	8042d4a <SysTimeSub>

    RtcBkupWrite( deltaTime.Seconds, ( uint32_t )deltaTime.SubSeconds );
 8042dae:	f9bd 101c 	ldrsh.w	r1, [sp, #28]
 8042db2:	9806      	ldr	r0, [sp, #24]
 8042db4:	f7ff fbac 	bl	8042510 <RtcBkupWrite>
}
 8042db8:	b008      	add	sp, #32
 8042dba:	bd10      	pop	{r4, pc}

08042dbc <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8042dbc:	b510      	push	{r4, lr}
 8042dbe:	b088      	sub	sp, #32
 8042dc0:	4604      	mov	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8042dc2:	2300      	movs	r3, #0
 8042dc4:	9306      	str	r3, [sp, #24]
 8042dc6:	f8ad 301c 	strh.w	r3, [sp, #28]
    SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
    uint32_t seconds;
    uint32_t subSeconds;

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8042dca:	a807      	add	r0, sp, #28
 8042dcc:	f7ff fb8a 	bl	80424e4 <RtcGetCalendarTime>
 8042dd0:	9006      	str	r0, [sp, #24]

    RtcBkupRead( &seconds, &subSeconds );
 8042dd2:	a904      	add	r1, sp, #16
 8042dd4:	a805      	add	r0, sp, #20
 8042dd6:	f7ff fbab 	bl	8042530 <RtcBkupRead>

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };
 8042dda:	9b05      	ldr	r3, [sp, #20]
 8042ddc:	9302      	str	r3, [sp, #8]
 8042dde:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8042de2:	f8ad 300c 	strh.w	r3, [sp, #12]

    sysTime = SysTimeAdd( deltaTime, calendarTime );
 8042de6:	9b07      	ldr	r3, [sp, #28]
 8042de8:	9300      	str	r3, [sp, #0]
 8042dea:	9b06      	ldr	r3, [sp, #24]
 8042dec:	9a03      	ldr	r2, [sp, #12]
 8042dee:	9902      	ldr	r1, [sp, #8]
 8042df0:	4620      	mov	r0, r4
 8042df2:	f7ff ff8d 	bl	8042d10 <SysTimeAdd>

    return sysTime;
}
 8042df6:	4620      	mov	r0, r4
 8042df8:	b008      	add	sp, #32
 8042dfa:	bd10      	pop	{r4, pc}

08042dfc <SysTimeGetMcuTime>:

SysTime_t SysTimeGetMcuTime( void )
{
 8042dfc:	b530      	push	{r4, r5, lr}
 8042dfe:	b083      	sub	sp, #12
 8042e00:	4604      	mov	r4, r0
    SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8042e02:	2300      	movs	r3, #0
 8042e04:	9300      	str	r3, [sp, #0]
 8042e06:	f8ad 3004 	strh.w	r3, [sp, #4]

    calendarTime.Seconds = RtcGetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8042e0a:	466d      	mov	r5, sp
 8042e0c:	a801      	add	r0, sp, #4
 8042e0e:	f7ff fb69 	bl	80424e4 <RtcGetCalendarTime>
 8042e12:	9000      	str	r0, [sp, #0]

    return calendarTime;
 8042e14:	e895 0003 	ldmia.w	r5, {r0, r1}
 8042e18:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8042e1c:	4620      	mov	r0, r4
 8042e1e:	b003      	add	sp, #12
 8042e20:	bd30      	pop	{r4, r5, pc}

08042e22 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8042e22:	b510      	push	{r4, lr}
 8042e24:	b08a      	sub	sp, #40	; 0x28
 8042e26:	ac02      	add	r4, sp, #8
 8042e28:	e884 0003 	stmia.w	r4, {r0, r1}
    uint32_t seconds;
    uint32_t subSeconds;

    RtcBkupRead( &seconds, &subSeconds );
 8042e2c:	a908      	add	r1, sp, #32
 8042e2e:	a809      	add	r0, sp, #36	; 0x24
 8042e30:	f7ff fb7e 	bl	8042530 <RtcBkupRead>

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };
 8042e34:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8042e38:	f8ad 301c 	strh.w	r3, [sp, #28]

    SysTime_t calendarTime = SysTimeSub( sysTime, deltaTime );
 8042e3c:	9b07      	ldr	r3, [sp, #28]
 8042e3e:	9300      	str	r3, [sp, #0]
 8042e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8042e42:	e894 0006 	ldmia.w	r4, {r1, r2}
 8042e46:	a804      	add	r0, sp, #16
 8042e48:	f7ff ff7f 	bl	8042d4a <SysTimeSub>

    return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8042e4c:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8042e50:	9a04      	ldr	r2, [sp, #16]
 8042e52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8042e56:	fb00 3002 	mla	r0, r0, r2, r3
 8042e5a:	b00a      	add	sp, #40	; 0x28
 8042e5c:	bd10      	pop	{r4, pc}
	...

08042e60 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8042e60:	b510      	push	{r4, lr}
 8042e62:	b088      	sub	sp, #32
 8042e64:	4604      	mov	r4, r0
    uint32_t seconds = timeMs / 1000;
 8042e66:	4b10      	ldr	r3, [pc, #64]	; (8042ea8 <SysTimeFromMs+0x48>)
 8042e68:	fba3 2301 	umull	r2, r3, r3, r1
 8042e6c:	099b      	lsrs	r3, r3, #6
 8042e6e:	9307      	str	r3, [sp, #28]
    uint32_t subSeconds = timeMs - seconds * 1000;
 8042e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8042e74:	fb02 1113 	mls	r1, r2, r3, r1
 8042e78:	9106      	str	r1, [sp, #24]
    SysTime_t sysTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };
 8042e7a:	9304      	str	r3, [sp, #16]
 8042e7c:	f8ad 1014 	strh.w	r1, [sp, #20]

    RtcBkupRead( &seconds, &subSeconds );
 8042e80:	a906      	add	r1, sp, #24
 8042e82:	a807      	add	r0, sp, #28
 8042e84:	f7ff fb54 	bl	8042530 <RtcBkupRead>

    SysTime_t deltaTime = { .Seconds = seconds, .SubSeconds = ( int16_t )subSeconds };
 8042e88:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8042e8c:	f8ad 300c 	strh.w	r3, [sp, #12]

    return SysTimeAdd( sysTime, deltaTime );
 8042e90:	9b03      	ldr	r3, [sp, #12]
 8042e92:	9300      	str	r3, [sp, #0]
 8042e94:	9b07      	ldr	r3, [sp, #28]
 8042e96:	9a05      	ldr	r2, [sp, #20]
 8042e98:	9904      	ldr	r1, [sp, #16]
 8042e9a:	4620      	mov	r0, r4
 8042e9c:	f7ff ff38 	bl	8042d10 <SysTimeAdd>
}
 8042ea0:	4620      	mov	r0, r4
 8042ea2:	b008      	add	sp, #32
 8042ea4:	bd10      	pop	{r4, pc}
 8042ea6:	bf00      	nop
 8042ea8:	10624dd3 	.word	0x10624dd3

08042eac <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8042eac:	b500      	push	{lr}
 8042eae:	b08d      	sub	sp, #52	; 0x34
  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8042eb0:	2300      	movs	r3, #0
 8042eb2:	9300      	str	r3, [sp, #0]
 8042eb4:	9301      	str	r3, [sp, #4]
 8042eb6:	9302      	str	r3, [sp, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8042eb8:	4815      	ldr	r0, [pc, #84]	; (8042f10 <MX_TIM1_Init+0x64>)
 8042eba:	4a16      	ldr	r2, [pc, #88]	; (8042f14 <MX_TIM1_Init+0x68>)
 8042ebc:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 8042ebe:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8042ec0:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 65535;
 8042ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8042ec6:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8042ec8:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8042eca:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8042ecc:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8042ece:	2201      	movs	r2, #1
 8042ed0:	9203      	str	r2, [sp, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8042ed2:	9304      	str	r3, [sp, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8042ed4:	9205      	str	r2, [sp, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8042ed6:	9306      	str	r3, [sp, #24]
  sConfig.IC1Filter = 0;
 8042ed8:	9307      	str	r3, [sp, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8042eda:	9308      	str	r3, [sp, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8042edc:	9209      	str	r2, [sp, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8042ede:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8042ee0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8042ee2:	a903      	add	r1, sp, #12
 8042ee4:	f007 fe84 	bl	804abf0 <HAL_TIM_Encoder_Init>
 8042ee8:	b958      	cbnz	r0, 8042f02 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8042eea:	2300      	movs	r3, #0
 8042eec:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8042eee:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8042ef0:	9302      	str	r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8042ef2:	4669      	mov	r1, sp
 8042ef4:	4806      	ldr	r0, [pc, #24]	; (8042f10 <MX_TIM1_Init+0x64>)
 8042ef6:	f007 fedd 	bl	804acb4 <HAL_TIMEx_MasterConfigSynchronization>
 8042efa:	b928      	cbnz	r0, 8042f08 <MX_TIM1_Init+0x5c>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8042efc:	b00d      	add	sp, #52	; 0x34
 8042efe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8042f02:	f7ff f815 	bl	8041f30 <Error_Handler>
 8042f06:	e7f0      	b.n	8042eea <MX_TIM1_Init+0x3e>
    Error_Handler();
 8042f08:	f7ff f812 	bl	8041f30 <Error_Handler>
}
 8042f0c:	e7f6      	b.n	8042efc <MX_TIM1_Init+0x50>
 8042f0e:	bf00      	nop
 8042f10:	2001a500 	.word	0x2001a500
 8042f14:	40012c00 	.word	0x40012c00

08042f18 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8042f18:	b510      	push	{r4, lr}
 8042f1a:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8042f1c:	2300      	movs	r3, #0
 8042f1e:	9303      	str	r3, [sp, #12]
 8042f20:	9304      	str	r3, [sp, #16]
 8042f22:	9305      	str	r3, [sp, #20]
 8042f24:	9306      	str	r3, [sp, #24]
 8042f26:	9307      	str	r3, [sp, #28]
  if(tim_encoderHandle->Instance==TIM1)
 8042f28:	6802      	ldr	r2, [r0, #0]
 8042f2a:	4b24      	ldr	r3, [pc, #144]	; (8042fbc <HAL_TIM_Encoder_MspInit+0xa4>)
 8042f2c:	429a      	cmp	r2, r3
 8042f2e:	d001      	beq.n	8042f34 <HAL_TIM_Encoder_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8042f30:	b008      	add	sp, #32
 8042f32:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8042f34:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8042f38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8042f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8042f3e:	661a      	str	r2, [r3, #96]	; 0x60
 8042f40:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8042f42:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8042f46:	9201      	str	r2, [sp, #4]
 8042f48:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8042f4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8042f4c:	f042 0210 	orr.w	r2, r2, #16
 8042f50:	64da      	str	r2, [r3, #76]	; 0x4c
 8042f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042f54:	f003 0310 	and.w	r3, r3, #16
 8042f58:	9302      	str	r3, [sp, #8]
 8042f5a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ENCODER_P_Pin|ENCODER_N_Pin;
 8042f5c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8042f60:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8042f62:	2302      	movs	r3, #2
 8042f64:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8042f66:	2400      	movs	r4, #0
 8042f68:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8042f6a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8042f6c:	2301      	movs	r3, #1
 8042f6e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8042f70:	a903      	add	r1, sp, #12
 8042f72:	4813      	ldr	r0, [pc, #76]	; (8042fc0 <HAL_TIM_Encoder_MspInit+0xa8>)
 8042f74:	f004 fc2c 	bl	80477d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8042f78:	4622      	mov	r2, r4
 8042f7a:	4621      	mov	r1, r4
 8042f7c:	2029      	movs	r0, #41	; 0x29
 8042f7e:	f004 f9b3 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8042f82:	2029      	movs	r0, #41	; 0x29
 8042f84:	f004 f9e4 	bl	8047350 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8042f88:	4622      	mov	r2, r4
 8042f8a:	4621      	mov	r1, r4
 8042f8c:	202a      	movs	r0, #42	; 0x2a
 8042f8e:	f004 f9ab 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8042f92:	202a      	movs	r0, #42	; 0x2a
 8042f94:	f004 f9dc 	bl	8047350 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8042f98:	4622      	mov	r2, r4
 8042f9a:	4621      	mov	r1, r4
 8042f9c:	202b      	movs	r0, #43	; 0x2b
 8042f9e:	f004 f9a3 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8042fa2:	202b      	movs	r0, #43	; 0x2b
 8042fa4:	f004 f9d4 	bl	8047350 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8042fa8:	4622      	mov	r2, r4
 8042faa:	4621      	mov	r1, r4
 8042fac:	202c      	movs	r0, #44	; 0x2c
 8042fae:	f004 f99b 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8042fb2:	202c      	movs	r0, #44	; 0x2c
 8042fb4:	f004 f9cc 	bl	8047350 <HAL_NVIC_EnableIRQ>
}
 8042fb8:	e7ba      	b.n	8042f30 <HAL_TIM_Encoder_MspInit+0x18>
 8042fba:	bf00      	nop
 8042fbc:	40012c00 	.word	0x40012c00
 8042fc0:	42021000 	.word	0x42021000

08042fc4 <TimerInsertTimer>:
    CRITICAL_SECTION_END( );
}

static void TimerInsertTimer( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8042fc4:	4b0d      	ldr	r3, [pc, #52]	; (8042ffc <TimerInsertTimer+0x38>)
 8042fc6:	681a      	ldr	r2, [r3, #0]
    TimerEvent_t* next = TimerListHead->Next;
 8042fc8:	6953      	ldr	r3, [r2, #20]

    while( cur->Next != NULL )
 8042fca:	6951      	ldr	r1, [r2, #20]
 8042fcc:	b191      	cbz	r1, 8042ff4 <TimerInsertTimer+0x30>
{
 8042fce:	b410      	push	{r4}
    {
        if( obj->Timestamp > next->Timestamp )
 8042fd0:	6804      	ldr	r4, [r0, #0]
 8042fd2:	6819      	ldr	r1, [r3, #0]
 8042fd4:	428c      	cmp	r4, r1
 8042fd6:	d908      	bls.n	8042fea <TimerInsertTimer+0x26>
        {
            cur = next;
 8042fd8:	461a      	mov	r2, r3
            next = next->Next;
 8042fda:	695b      	ldr	r3, [r3, #20]
    while( cur->Next != NULL )
 8042fdc:	6951      	ldr	r1, [r2, #20]
 8042fde:	2900      	cmp	r1, #0
 8042fe0:	d1f6      	bne.n	8042fd0 <TimerInsertTimer+0xc>
            cur->Next = obj;
            obj->Next = next;
            return;
        }
    }
    cur->Next = obj;
 8042fe2:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 8042fe4:	2300      	movs	r3, #0
 8042fe6:	6143      	str	r3, [r0, #20]
 8042fe8:	e001      	b.n	8042fee <TimerInsertTimer+0x2a>
            cur->Next = obj;
 8042fea:	6150      	str	r0, [r2, #20]
            obj->Next = next;
 8042fec:	6143      	str	r3, [r0, #20]
}
 8042fee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8042ff2:	4770      	bx	lr
    cur->Next = obj;
 8042ff4:	6150      	str	r0, [r2, #20]
    obj->Next = NULL;
 8042ff6:	2300      	movs	r3, #0
 8042ff8:	6143      	str	r3, [r0, #20]
 8042ffa:	4770      	bx	lr
 8042ffc:	200188c4 	.word	0x200188c4

08043000 <TimerExists>:
    CRITICAL_SECTION_END( );
}

static bool TimerExists( TimerEvent_t *obj )
{
    TimerEvent_t* cur = TimerListHead;
 8043000:	4b05      	ldr	r3, [pc, #20]	; (8043018 <TimerExists+0x18>)
 8043002:	681b      	ldr	r3, [r3, #0]

    while( cur != NULL )
 8043004:	b11b      	cbz	r3, 804300e <TimerExists+0xe>
    {
        if( cur == obj )
 8043006:	4283      	cmp	r3, r0
 8043008:	d003      	beq.n	8043012 <TimerExists+0x12>
        {
            return true;
        }
        cur = cur->Next;
 804300a:	695b      	ldr	r3, [r3, #20]
 804300c:	e7fa      	b.n	8043004 <TimerExists+0x4>
    }
    return false;
 804300e:	2000      	movs	r0, #0
 8043010:	4770      	bx	lr
            return true;
 8043012:	2001      	movs	r0, #1
}
 8043014:	4770      	bx	lr
 8043016:	bf00      	nop
 8043018:	200188c4 	.word	0x200188c4

0804301c <TimerSetTimeout>:
    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
}

static void TimerSetTimeout( TimerEvent_t *obj )
{
 804301c:	b570      	push	{r4, r5, r6, lr}
 804301e:	4604      	mov	r4, r0
    int32_t minTicks= RtcGetMinimumTimeout( );
 8043020:	f7ff f95a 	bl	80422d8 <RtcGetMinimumTimeout>
 8043024:	4605      	mov	r5, r0
    obj->IsNext2Expire = true;
 8043026:	2301      	movs	r3, #1
 8043028:	7263      	strb	r3, [r4, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 804302a:	6826      	ldr	r6, [r4, #0]
 804302c:	f7ff fa24 	bl	8042478 <RtcGetTimerElapsedTime>
 8043030:	4428      	add	r0, r5
 8043032:	4286      	cmp	r6, r0
 8043034:	d303      	bcc.n	804303e <TimerSetTimeout+0x22>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
    }
    RtcSetAlarm( obj->Timestamp );
 8043036:	6820      	ldr	r0, [r4, #0]
 8043038:	f7ff fa2c 	bl	8042494 <RtcSetAlarm>
}
 804303c:	bd70      	pop	{r4, r5, r6, pc}
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 804303e:	f7ff fa1b 	bl	8042478 <RtcGetTimerElapsedTime>
 8043042:	4405      	add	r5, r0
 8043044:	6025      	str	r5, [r4, #0]
 8043046:	e7f6      	b.n	8043036 <TimerSetTimeout+0x1a>

08043048 <TimerInsertNewHeadTimer>:
{
 8043048:	b508      	push	{r3, lr}
    TimerEvent_t* cur = TimerListHead;
 804304a:	4b05      	ldr	r3, [pc, #20]	; (8043060 <TimerInsertNewHeadTimer+0x18>)
 804304c:	681b      	ldr	r3, [r3, #0]
    if( cur != NULL )
 804304e:	b10b      	cbz	r3, 8043054 <TimerInsertNewHeadTimer+0xc>
        cur->IsNext2Expire = false;
 8043050:	2200      	movs	r2, #0
 8043052:	725a      	strb	r2, [r3, #9]
    obj->Next = cur;
 8043054:	6143      	str	r3, [r0, #20]
    TimerListHead = obj;
 8043056:	4b02      	ldr	r3, [pc, #8]	; (8043060 <TimerInsertNewHeadTimer+0x18>)
 8043058:	6018      	str	r0, [r3, #0]
    TimerSetTimeout( TimerListHead );
 804305a:	f7ff ffdf 	bl	804301c <TimerSetTimeout>
}
 804305e:	bd08      	pop	{r3, pc}
 8043060:	200188c4 	.word	0x200188c4

08043064 <TimerInit>:
    obj->Timestamp = 0;
 8043064:	2300      	movs	r3, #0
 8043066:	6003      	str	r3, [r0, #0]
    obj->ReloadValue = 0;
 8043068:	6043      	str	r3, [r0, #4]
    obj->IsStarted = false;
 804306a:	7203      	strb	r3, [r0, #8]
    obj->IsNext2Expire = false;
 804306c:	7243      	strb	r3, [r0, #9]
    obj->Callback = callback;
 804306e:	60c1      	str	r1, [r0, #12]
    obj->Context = NULL;
 8043070:	6103      	str	r3, [r0, #16]
    obj->Next = NULL;
 8043072:	6143      	str	r3, [r0, #20]
}
 8043074:	4770      	bx	lr
	...

08043078 <TimerStart>:
{
 8043078:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804307a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804307e:	b672      	cpsid	i
    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8043080:	b1e0      	cbz	r0, 80430bc <TimerStart+0x44>
 8043082:	4604      	mov	r4, r0
 8043084:	f7ff ffbc 	bl	8043000 <TimerExists>
 8043088:	b9c0      	cbnz	r0, 80430bc <TimerStart+0x44>
    obj->Timestamp = obj->ReloadValue;
 804308a:	6863      	ldr	r3, [r4, #4]
 804308c:	6023      	str	r3, [r4, #0]
    obj->IsStarted = true;
 804308e:	2301      	movs	r3, #1
 8043090:	7223      	strb	r3, [r4, #8]
    obj->IsNext2Expire = false;
 8043092:	2300      	movs	r3, #0
 8043094:	7263      	strb	r3, [r4, #9]
    if( TimerListHead == NULL )
 8043096:	4b10      	ldr	r3, [pc, #64]	; (80430d8 <TimerStart+0x60>)
 8043098:	681b      	ldr	r3, [r3, #0]
 804309a:	b193      	cbz	r3, 80430c2 <TimerStart+0x4a>
        elapsedTime = RtcGetTimerElapsedTime( );
 804309c:	f7ff f9ec 	bl	8042478 <RtcGetTimerElapsedTime>
        obj->Timestamp += elapsedTime;
 80430a0:	6823      	ldr	r3, [r4, #0]
 80430a2:	4418      	add	r0, r3
 80430a4:	6020      	str	r0, [r4, #0]
        if( obj->Timestamp < TimerListHead->Timestamp )
 80430a6:	4b0c      	ldr	r3, [pc, #48]	; (80430d8 <TimerStart+0x60>)
 80430a8:	681b      	ldr	r3, [r3, #0]
 80430aa:	681b      	ldr	r3, [r3, #0]
 80430ac:	4298      	cmp	r0, r3
 80430ae:	d20e      	bcs.n	80430ce <TimerStart+0x56>
            TimerInsertNewHeadTimer( obj );
 80430b0:	4620      	mov	r0, r4
 80430b2:	f7ff ffc9 	bl	8043048 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80430b6:	f385 8810 	msr	PRIMASK, r5
}
 80430ba:	e001      	b.n	80430c0 <TimerStart+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80430bc:	f385 8810 	msr	PRIMASK, r5
}
 80430c0:	bd38      	pop	{r3, r4, r5, pc}
        RtcSetTimerContext( );
 80430c2:	f7ff f89b 	bl	80421fc <RtcSetTimerContext>
        TimerInsertNewHeadTimer( obj );
 80430c6:	4620      	mov	r0, r4
 80430c8:	f7ff ffbe 	bl	8043048 <TimerInsertNewHeadTimer>
 80430cc:	e7f3      	b.n	80430b6 <TimerStart+0x3e>
            TimerInsertTimer( obj );
 80430ce:	4620      	mov	r0, r4
 80430d0:	f7ff ff78 	bl	8042fc4 <TimerInsertTimer>
 80430d4:	e7ef      	b.n	80430b6 <TimerStart+0x3e>
 80430d6:	bf00      	nop
 80430d8:	200188c4 	.word	0x200188c4

080430dc <TimerIrqHandler>:
{
 80430dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t old =  RtcGetTimerContext( );
 80430de:	f7ff f8f5 	bl	80422cc <RtcGetTimerContext>
 80430e2:	4604      	mov	r4, r0
    uint32_t now =  RtcSetTimerContext( );
 80430e4:	f7ff f88a 	bl	80421fc <RtcSetTimerContext>
    uint32_t deltaContext = now - old; // intentional wrap around
 80430e8:	1b07      	subs	r7, r0, r4
    if( TimerListHead != NULL )
 80430ea:	4b1c      	ldr	r3, [pc, #112]	; (804315c <TimerIrqHandler+0x80>)
 80430ec:	681b      	ldr	r3, [r3, #0]
 80430ee:	b16b      	cbz	r3, 804310c <TimerIrqHandler+0x30>
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 80430f0:	4619      	mov	r1, r3
 80430f2:	e002      	b.n	80430fa <TimerIrqHandler+0x1e>
                next->Timestamp = 0;
 80430f4:	2500      	movs	r5, #0
 80430f6:	6015      	str	r5, [r2, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 80430f8:	6949      	ldr	r1, [r1, #20]
 80430fa:	694a      	ldr	r2, [r1, #20]
 80430fc:	b132      	cbz	r2, 804310c <TimerIrqHandler+0x30>
            if( next->Timestamp > deltaContext )
 80430fe:	6815      	ldr	r5, [r2, #0]
 8043100:	42bd      	cmp	r5, r7
 8043102:	d9f7      	bls.n	80430f4 <TimerIrqHandler+0x18>
                next->Timestamp -= deltaContext;
 8043104:	1a26      	subs	r6, r4, r0
 8043106:	4435      	add	r5, r6
 8043108:	6015      	str	r5, [r2, #0]
 804310a:	e7f5      	b.n	80430f8 <TimerIrqHandler+0x1c>
    if ( TimerListHead != NULL )
 804310c:	b143      	cbz	r3, 8043120 <TimerIrqHandler+0x44>
        TimerListHead = TimerListHead->Next;
 804310e:	6959      	ldr	r1, [r3, #20]
 8043110:	4a12      	ldr	r2, [pc, #72]	; (804315c <TimerIrqHandler+0x80>)
 8043112:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 8043114:	2200      	movs	r2, #0
 8043116:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8043118:	68da      	ldr	r2, [r3, #12]
 804311a:	b1a2      	cbz	r2, 8043146 <TimerIrqHandler+0x6a>
 804311c:	6918      	ldr	r0, [r3, #16]
 804311e:	4790      	blx	r2
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8043120:	4b0e      	ldr	r3, [pc, #56]	; (804315c <TimerIrqHandler+0x80>)
 8043122:	681b      	ldr	r3, [r3, #0]
 8043124:	b18b      	cbz	r3, 804314a <TimerIrqHandler+0x6e>
 8043126:	681c      	ldr	r4, [r3, #0]
 8043128:	f7ff f9a6 	bl	8042478 <RtcGetTimerElapsedTime>
 804312c:	4284      	cmp	r4, r0
 804312e:	d20c      	bcs.n	804314a <TimerIrqHandler+0x6e>
        cur = TimerListHead;
 8043130:	4a0a      	ldr	r2, [pc, #40]	; (804315c <TimerIrqHandler+0x80>)
 8043132:	6813      	ldr	r3, [r2, #0]
        TimerListHead = TimerListHead->Next;
 8043134:	6959      	ldr	r1, [r3, #20]
 8043136:	6011      	str	r1, [r2, #0]
        cur->IsStarted = false;
 8043138:	2200      	movs	r2, #0
 804313a:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 804313c:	68da      	ldr	r2, [r3, #12]
 804313e:	b11a      	cbz	r2, 8043148 <TimerIrqHandler+0x6c>
 8043140:	6918      	ldr	r0, [r3, #16]
 8043142:	4790      	blx	r2
 8043144:	e7ec      	b.n	8043120 <TimerIrqHandler+0x44>
        ExecuteCallBack( cur->Callback, cur->Context );
 8043146:	e7fe      	b.n	8043146 <TimerIrqHandler+0x6a>
        ExecuteCallBack( cur->Callback, cur->Context );
 8043148:	e7fe      	b.n	8043148 <TimerIrqHandler+0x6c>
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 804314a:	4b04      	ldr	r3, [pc, #16]	; (804315c <TimerIrqHandler+0x80>)
 804314c:	6818      	ldr	r0, [r3, #0]
 804314e:	b108      	cbz	r0, 8043154 <TimerIrqHandler+0x78>
 8043150:	7a43      	ldrb	r3, [r0, #9]
 8043152:	b103      	cbz	r3, 8043156 <TimerIrqHandler+0x7a>
}
 8043154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TimerSetTimeout( TimerListHead );
 8043156:	f7ff ff61 	bl	804301c <TimerSetTimeout>
}
 804315a:	e7fb      	b.n	8043154 <TimerIrqHandler+0x78>
 804315c:	200188c4 	.word	0x200188c4

08043160 <TimerStop>:
{
 8043160:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8043162:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8043166:	b672      	cpsid	i
    TimerEvent_t* prev = TimerListHead;
 8043168:	4b1a      	ldr	r3, [pc, #104]	; (80431d4 <TimerStop+0x74>)
 804316a:	681a      	ldr	r2, [r3, #0]
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 804316c:	b15a      	cbz	r2, 8043186 <TimerStop+0x26>
 804316e:	b150      	cbz	r0, 8043186 <TimerStop+0x26>
    obj->IsStarted = false;
 8043170:	2300      	movs	r3, #0
 8043172:	7203      	strb	r3, [r0, #8]
    if( TimerListHead == obj ) // Stop the Head
 8043174:	4282      	cmp	r2, r0
 8043176:	d009      	beq.n	804318c <TimerStop+0x2c>
    TimerEvent_t* cur = TimerListHead;
 8043178:	4613      	mov	r3, r2
        while( cur != NULL )
 804317a:	b323      	cbz	r3, 80431c6 <TimerStop+0x66>
            if( cur == obj )
 804317c:	4283      	cmp	r3, r0
 804317e:	d01f      	beq.n	80431c0 <TimerStop+0x60>
                prev = cur;
 8043180:	461a      	mov	r2, r3
                cur = cur->Next;
 8043182:	695b      	ldr	r3, [r3, #20]
 8043184:	e7f9      	b.n	804317a <TimerStop+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8043186:	f384 8810 	msr	PRIMASK, r4
        return;
 804318a:	e01e      	b.n	80431ca <TimerStop+0x6a>
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 804318c:	7a53      	ldrb	r3, [r2, #9]
 804318e:	b173      	cbz	r3, 80431ae <TimerStop+0x4e>
            TimerListHead->IsNext2Expire = false;
 8043190:	2300      	movs	r3, #0
 8043192:	7253      	strb	r3, [r2, #9]
            if( TimerListHead->Next != NULL )
 8043194:	6950      	ldr	r0, [r2, #20]
 8043196:	b120      	cbz	r0, 80431a2 <TimerStop+0x42>
                TimerListHead = TimerListHead->Next;
 8043198:	4b0e      	ldr	r3, [pc, #56]	; (80431d4 <TimerStop+0x74>)
 804319a:	6018      	str	r0, [r3, #0]
                TimerSetTimeout( TimerListHead );
 804319c:	f7ff ff3e 	bl	804301c <TimerSetTimeout>
 80431a0:	e011      	b.n	80431c6 <TimerStop+0x66>
                RtcStopAlarm( );
 80431a2:	f7ff f8af 	bl	8042304 <RtcStopAlarm>
                TimerListHead = NULL;
 80431a6:	4b0b      	ldr	r3, [pc, #44]	; (80431d4 <TimerStop+0x74>)
 80431a8:	2200      	movs	r2, #0
 80431aa:	601a      	str	r2, [r3, #0]
 80431ac:	e00b      	b.n	80431c6 <TimerStop+0x66>
            if( TimerListHead->Next != NULL )
 80431ae:	6953      	ldr	r3, [r2, #20]
 80431b0:	b113      	cbz	r3, 80431b8 <TimerStop+0x58>
                TimerListHead = TimerListHead->Next;
 80431b2:	4a08      	ldr	r2, [pc, #32]	; (80431d4 <TimerStop+0x74>)
 80431b4:	6013      	str	r3, [r2, #0]
 80431b6:	e006      	b.n	80431c6 <TimerStop+0x66>
                TimerListHead = NULL;
 80431b8:	4b06      	ldr	r3, [pc, #24]	; (80431d4 <TimerStop+0x74>)
 80431ba:	2200      	movs	r2, #0
 80431bc:	601a      	str	r2, [r3, #0]
 80431be:	e002      	b.n	80431c6 <TimerStop+0x66>
                if( cur->Next != NULL )
 80431c0:	695b      	ldr	r3, [r3, #20]
 80431c2:	b11b      	cbz	r3, 80431cc <TimerStop+0x6c>
                    prev->Next = cur;
 80431c4:	6153      	str	r3, [r2, #20]
 80431c6:	f384 8810 	msr	PRIMASK, r4
}
 80431ca:	bd10      	pop	{r4, pc}
                    prev->Next = cur;
 80431cc:	2300      	movs	r3, #0
 80431ce:	6153      	str	r3, [r2, #20]
 80431d0:	e7f9      	b.n	80431c6 <TimerStop+0x66>
 80431d2:	bf00      	nop
 80431d4:	200188c4 	.word	0x200188c4

080431d8 <TimerSetValue>:
{
 80431d8:	b538      	push	{r3, r4, r5, lr}
 80431da:	4604      	mov	r4, r0
    uint32_t ticks = RtcMs2Tick( value );
 80431dc:	4608      	mov	r0, r1
 80431de:	f7ff f87d 	bl	80422dc <RtcMs2Tick>
 80431e2:	4605      	mov	r5, r0
    TimerStop( obj );
 80431e4:	4620      	mov	r0, r4
 80431e6:	f7ff ffbb 	bl	8043160 <TimerStop>
    minValue = RtcGetMinimumTimeout( );
 80431ea:	f7ff f875 	bl	80422d8 <RtcGetMinimumTimeout>
    if( ticks < minValue )
 80431ee:	4285      	cmp	r5, r0
 80431f0:	d300      	bcc.n	80431f4 <TimerSetValue+0x1c>
    uint32_t ticks = RtcMs2Tick( value );
 80431f2:	4628      	mov	r0, r5
    obj->Timestamp = ticks;
 80431f4:	6020      	str	r0, [r4, #0]
    obj->ReloadValue = ticks;
 80431f6:	6060      	str	r0, [r4, #4]
}
 80431f8:	bd38      	pop	{r3, r4, r5, pc}

080431fa <TimerGetCurrentTime>:
{
 80431fa:	b508      	push	{r3, lr}
    uint32_t now = RtcGetTimerValue( );
 80431fc:	f7ff f932 	bl	8042464 <RtcGetTimerValue>
    return  RtcTick2Ms( now );
 8043200:	f7ff f875 	bl	80422ee <RtcTick2Ms>
}
 8043204:	bd08      	pop	{r3, pc}

08043206 <TimerGetElapsedTime>:
{
 8043206:	b538      	push	{r3, r4, r5, lr}
    if ( past == 0 )
 8043208:	4604      	mov	r4, r0
 804320a:	b908      	cbnz	r0, 8043210 <TimerGetElapsedTime+0xa>
}
 804320c:	4620      	mov	r0, r4
 804320e:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t nowInTicks = RtcGetTimerValue( );
 8043210:	f7ff f928 	bl	8042464 <RtcGetTimerValue>
 8043214:	4605      	mov	r5, r0
    uint32_t pastInTicks = RtcMs2Tick( past );
 8043216:	4620      	mov	r0, r4
 8043218:	f7ff f860 	bl	80422dc <RtcMs2Tick>
    return RtcTick2Ms( nowInTicks - pastInTicks );
 804321c:	1a28      	subs	r0, r5, r0
 804321e:	f7ff f866 	bl	80422ee <RtcTick2Ms>
 8043222:	4604      	mov	r4, r0
 8043224:	e7f2      	b.n	804320c <TimerGetElapsedTime+0x6>
	...

08043228 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8043228:	b508      	push	{r3, lr}

  /* USER CODE BEGIN LPUART1_Init 0 */
	FifoInit(&fifo_dgb_tx, DBG_TX, DBG_LEN);
 804322a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 804322e:	491e      	ldr	r1, [pc, #120]	; (80432a8 <MX_LPUART1_UART_Init+0x80>)
 8043230:	481e      	ldr	r0, [pc, #120]	; (80432ac <MX_LPUART1_UART_Init+0x84>)
 8043232:	f7fe f8a1 	bl	8041378 <FifoInit>
	FifoInit(&fifo_dgb_rx, DBG_RX, DBG_LEN);
 8043236:	f44f 6280 	mov.w	r2, #1024	; 0x400
 804323a:	491d      	ldr	r1, [pc, #116]	; (80432b0 <MX_LPUART1_UART_Init+0x88>)
 804323c:	481d      	ldr	r0, [pc, #116]	; (80432b4 <MX_LPUART1_UART_Init+0x8c>)
 804323e:	f7fe f89b 	bl	8041378 <FifoInit>
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8043242:	481d      	ldr	r0, [pc, #116]	; (80432b8 <MX_LPUART1_UART_Init+0x90>)
 8043244:	4b1d      	ldr	r3, [pc, #116]	; (80432bc <MX_LPUART1_UART_Init+0x94>)
 8043246:	6003      	str	r3, [r0, #0]
  hlpuart1.Init.BaudRate = 209700;
 8043248:	4b1d      	ldr	r3, [pc, #116]	; (80432c0 <MX_LPUART1_UART_Init+0x98>)
 804324a:	6043      	str	r3, [r0, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 804324c:	2300      	movs	r3, #0
 804324e:	6083      	str	r3, [r0, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8043250:	60c3      	str	r3, [r0, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8043252:	6103      	str	r3, [r0, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8043254:	220c      	movs	r2, #12
 8043256:	6142      	str	r2, [r0, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8043258:	6183      	str	r3, [r0, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 804325a:	6203      	str	r3, [r0, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 804325c:	6243      	str	r3, [r0, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 804325e:	6283      	str	r3, [r0, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8043260:	6643      	str	r3, [r0, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8043262:	f008 fac5 	bl	804b7f0 <HAL_UART_Init>
 8043266:	b998      	cbnz	r0, 8043290 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8043268:	2100      	movs	r1, #0
 804326a:	4813      	ldr	r0, [pc, #76]	; (80432b8 <MX_LPUART1_UART_Init+0x90>)
 804326c:	f008 fbae 	bl	804b9cc <HAL_UARTEx_SetTxFifoThreshold>
 8043270:	b988      	cbnz	r0, 8043296 <MX_LPUART1_UART_Init+0x6e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8043272:	2100      	movs	r1, #0
 8043274:	4810      	ldr	r0, [pc, #64]	; (80432b8 <MX_LPUART1_UART_Init+0x90>)
 8043276:	f008 fbce 	bl	804ba16 <HAL_UARTEx_SetRxFifoThreshold>
 804327a:	b978      	cbnz	r0, 804329c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 804327c:	480e      	ldr	r0, [pc, #56]	; (80432b8 <MX_LPUART1_UART_Init+0x90>)
 804327e:	f008 fb86 	bl	804b98e <HAL_UARTEx_DisableFifoMode>
 8043282:	b970      	cbnz	r0, 80432a2 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  HAL_UART_Receive_DMA(&hlpuart1, &dbg_buf_RX, 1);
 8043284:	2201      	movs	r2, #1
 8043286:	490f      	ldr	r1, [pc, #60]	; (80432c4 <MX_LPUART1_UART_Init+0x9c>)
 8043288:	480b      	ldr	r0, [pc, #44]	; (80432b8 <MX_LPUART1_UART_Init+0x90>)
 804328a:	f008 fb29 	bl	804b8e0 <HAL_UART_Receive_DMA>
  /* USER CODE END LPUART1_Init 2 */

}
 804328e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8043290:	f7fe fe4e 	bl	8041f30 <Error_Handler>
 8043294:	e7e8      	b.n	8043268 <MX_LPUART1_UART_Init+0x40>
    Error_Handler();
 8043296:	f7fe fe4b 	bl	8041f30 <Error_Handler>
 804329a:	e7ea      	b.n	8043272 <MX_LPUART1_UART_Init+0x4a>
    Error_Handler();
 804329c:	f7fe fe48 	bl	8041f30 <Error_Handler>
 80432a0:	e7ec      	b.n	804327c <MX_LPUART1_UART_Init+0x54>
    Error_Handler();
 80432a2:	f7fe fe45 	bl	8041f30 <Error_Handler>
 80432a6:	e7ed      	b.n	8043284 <MX_LPUART1_UART_Init+0x5c>
 80432a8:	2001aac0 	.word	0x2001aac0
 80432ac:	2001afc8 	.word	0x2001afc8
 80432b0:	2001a6c0 	.word	0x2001a6c0
 80432b4:	2001b0a8 	.word	0x2001b0a8
 80432b8:	2001af2c 	.word	0x2001af2c
 80432bc:	40008000 	.word	0x40008000
 80432c0:	00033324 	.word	0x00033324
 80432c4:	2001aec0 	.word	0x2001aec0

080432c8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80432c8:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80432ca:	481a      	ldr	r0, [pc, #104]	; (8043334 <MX_USART3_UART_Init+0x6c>)
 80432cc:	4b1a      	ldr	r3, [pc, #104]	; (8043338 <MX_USART3_UART_Init+0x70>)
 80432ce:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 80432d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80432d4:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80432d6:	2300      	movs	r3, #0
 80432d8:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80432da:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80432dc:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80432de:	220c      	movs	r2, #12
 80432e0:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80432e2:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80432e4:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80432e6:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80432e8:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80432ea:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80432ec:	f008 fa80 	bl	804b7f0 <HAL_UART_Init>
 80432f0:	b998      	cbnz	r0, 804331a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80432f2:	2100      	movs	r1, #0
 80432f4:	480f      	ldr	r0, [pc, #60]	; (8043334 <MX_USART3_UART_Init+0x6c>)
 80432f6:	f008 fb69 	bl	804b9cc <HAL_UARTEx_SetTxFifoThreshold>
 80432fa:	b988      	cbnz	r0, 8043320 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80432fc:	2100      	movs	r1, #0
 80432fe:	480d      	ldr	r0, [pc, #52]	; (8043334 <MX_USART3_UART_Init+0x6c>)
 8043300:	f008 fb89 	bl	804ba16 <HAL_UARTEx_SetRxFifoThreshold>
 8043304:	b978      	cbnz	r0, 8043326 <MX_USART3_UART_Init+0x5e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8043306:	480b      	ldr	r0, [pc, #44]	; (8043334 <MX_USART3_UART_Init+0x6c>)
 8043308:	f008 fb41 	bl	804b98e <HAL_UARTEx_DisableFifoMode>
 804330c:	b970      	cbnz	r0, 804332c <MX_USART3_UART_Init+0x64>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */
  HAL_UART_Receive_DMA(&huart3, &data_buf_RX, 1);
 804330e:	2201      	movs	r2, #1
 8043310:	490a      	ldr	r1, [pc, #40]	; (804333c <MX_USART3_UART_Init+0x74>)
 8043312:	4808      	ldr	r0, [pc, #32]	; (8043334 <MX_USART3_UART_Init+0x6c>)
 8043314:	f008 fae4 	bl	804b8e0 <HAL_UART_Receive_DMA>
  /* USER CODE END USART3_Init 2 */

}
 8043318:	bd08      	pop	{r3, pc}
    Error_Handler();
 804331a:	f7fe fe09 	bl	8041f30 <Error_Handler>
 804331e:	e7e8      	b.n	80432f2 <MX_USART3_UART_Init+0x2a>
    Error_Handler();
 8043320:	f7fe fe06 	bl	8041f30 <Error_Handler>
 8043324:	e7ea      	b.n	80432fc <MX_USART3_UART_Init+0x34>
    Error_Handler();
 8043326:	f7fe fe03 	bl	8041f30 <Error_Handler>
 804332a:	e7ec      	b.n	8043306 <MX_USART3_UART_Init+0x3e>
    Error_Handler();
 804332c:	f7fe fe00 	bl	8041f30 <Error_Handler>
 8043330:	e7ed      	b.n	804330e <MX_USART3_UART_Init+0x46>
 8043332:	bf00      	nop
 8043334:	2001a630 	.word	0x2001a630
 8043338:	40004800 	.word	0x40004800
 804333c:	2001b0a4 	.word	0x2001b0a4

08043340 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8043340:	b530      	push	{r4, r5, lr}
 8043342:	b0af      	sub	sp, #188	; 0xbc
 8043344:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8043346:	2100      	movs	r1, #0
 8043348:	9129      	str	r1, [sp, #164]	; 0xa4
 804334a:	912a      	str	r1, [sp, #168]	; 0xa8
 804334c:	912b      	str	r1, [sp, #172]	; 0xac
 804334e:	912c      	str	r1, [sp, #176]	; 0xb0
 8043350:	912d      	str	r1, [sp, #180]	; 0xb4
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8043352:	2294      	movs	r2, #148	; 0x94
 8043354:	a804      	add	r0, sp, #16
 8043356:	f011 fe20 	bl	8054f9a <memset>
  if(uartHandle->Instance==LPUART1)
 804335a:	6823      	ldr	r3, [r4, #0]
 804335c:	4a78      	ldr	r2, [pc, #480]	; (8043540 <HAL_UART_MspInit+0x200>)
 804335e:	4293      	cmp	r3, r2
 8043360:	d004      	beq.n	804336c <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART3)
 8043362:	4a78      	ldr	r2, [pc, #480]	; (8043544 <HAL_UART_MspInit+0x204>)
 8043364:	4293      	cmp	r3, r2
 8043366:	d076      	beq.n	8043456 <HAL_UART_MspInit+0x116>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8043368:	b02f      	add	sp, #188	; 0xbc
 804336a:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 804336c:	2320      	movs	r3, #32
 804336e:	9304      	str	r3, [sp, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8043370:	2300      	movs	r3, #0
 8043372:	9316      	str	r3, [sp, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8043374:	a804      	add	r0, sp, #16
 8043376:	f005 fdf1 	bl	8048f5c <HAL_RCCEx_PeriphCLKConfig>
 804337a:	2800      	cmp	r0, #0
 804337c:	d15c      	bne.n	8043438 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_LPUART1_CLK_ENABLE();
 804337e:	4b72      	ldr	r3, [pc, #456]	; (8043548 <HAL_UART_MspInit+0x208>)
 8043380:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8043382:	f042 0201 	orr.w	r2, r2, #1
 8043386:	65da      	str	r2, [r3, #92]	; 0x5c
 8043388:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 804338a:	f002 0201 	and.w	r2, r2, #1
 804338e:	9200      	str	r2, [sp, #0]
 8043390:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8043392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8043394:	f042 0202 	orr.w	r2, r2, #2
 8043398:	64da      	str	r2, [r3, #76]	; 0x4c
 804339a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804339c:	f003 0302 	and.w	r3, r3, #2
 80433a0:	9301      	str	r3, [sp, #4]
 80433a2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = DBG_RX_Pin|DBG_TX_Pin;
 80433a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80433a8:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80433aa:	2302      	movs	r3, #2
 80433ac:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80433ae:	2500      	movs	r5, #0
 80433b0:	952b      	str	r5, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80433b2:	952c      	str	r5, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80433b4:	2308      	movs	r3, #8
 80433b6:	932d      	str	r3, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80433b8:	a929      	add	r1, sp, #164	; 0xa4
 80433ba:	4864      	ldr	r0, [pc, #400]	; (804354c <HAL_UART_MspInit+0x20c>)
 80433bc:	f004 fa08 	bl	80477d0 <HAL_GPIO_Init>
    hdma_lpuart1_rx.Instance = DMA1_Channel5;
 80433c0:	4863      	ldr	r0, [pc, #396]	; (8043550 <HAL_UART_MspInit+0x210>)
 80433c2:	4b64      	ldr	r3, [pc, #400]	; (8043554 <HAL_UART_MspInit+0x214>)
 80433c4:	6003      	str	r3, [r0, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 80433c6:	2323      	movs	r3, #35	; 0x23
 80433c8:	6043      	str	r3, [r0, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80433ca:	6085      	str	r5, [r0, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80433cc:	60c5      	str	r5, [r0, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80433ce:	2380      	movs	r3, #128	; 0x80
 80433d0:	6103      	str	r3, [r0, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80433d2:	6145      	str	r5, [r0, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80433d4:	6185      	str	r5, [r0, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 80433d6:	61c5      	str	r5, [r0, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80433d8:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 80433da:	f004 f837 	bl	804744c <HAL_DMA_Init>
 80433de:	2800      	cmp	r0, #0
 80433e0:	d12d      	bne.n	804343e <HAL_UART_MspInit+0xfe>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80433e2:	2110      	movs	r1, #16
 80433e4:	485a      	ldr	r0, [pc, #360]	; (8043550 <HAL_UART_MspInit+0x210>)
 80433e6:	f004 f9e0 	bl	80477aa <HAL_DMA_ConfigChannelAttributes>
 80433ea:	bb58      	cbnz	r0, 8043444 <HAL_UART_MspInit+0x104>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 80433ec:	4b58      	ldr	r3, [pc, #352]	; (8043550 <HAL_UART_MspInit+0x210>)
 80433ee:	67e3      	str	r3, [r4, #124]	; 0x7c
 80433f0:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_lpuart1_tx.Instance = DMA1_Channel6;
 80433f2:	4859      	ldr	r0, [pc, #356]	; (8043558 <HAL_UART_MspInit+0x218>)
 80433f4:	4b59      	ldr	r3, [pc, #356]	; (804355c <HAL_UART_MspInit+0x21c>)
 80433f6:	6003      	str	r3, [r0, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80433f8:	2324      	movs	r3, #36	; 0x24
 80433fa:	6043      	str	r3, [r0, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80433fc:	2310      	movs	r3, #16
 80433fe:	6083      	str	r3, [r0, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8043400:	2300      	movs	r3, #0
 8043402:	60c3      	str	r3, [r0, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8043404:	2280      	movs	r2, #128	; 0x80
 8043406:	6102      	str	r2, [r0, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8043408:	6143      	str	r3, [r0, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 804340a:	6183      	str	r3, [r0, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 804340c:	61c3      	str	r3, [r0, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 804340e:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8043410:	f004 f81c 	bl	804744c <HAL_DMA_Init>
 8043414:	b9c8      	cbnz	r0, 804344a <HAL_UART_MspInit+0x10a>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8043416:	2110      	movs	r1, #16
 8043418:	484f      	ldr	r0, [pc, #316]	; (8043558 <HAL_UART_MspInit+0x218>)
 804341a:	f004 f9c6 	bl	80477aa <HAL_DMA_ConfigChannelAttributes>
 804341e:	b9b8      	cbnz	r0, 8043450 <HAL_UART_MspInit+0x110>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8043420:	4b4d      	ldr	r3, [pc, #308]	; (8043558 <HAL_UART_MspInit+0x218>)
 8043422:	67a3      	str	r3, [r4, #120]	; 0x78
 8043424:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8043426:	2200      	movs	r2, #0
 8043428:	4611      	mov	r1, r2
 804342a:	2042      	movs	r0, #66	; 0x42
 804342c:	f003 ff5c 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8043430:	2042      	movs	r0, #66	; 0x42
 8043432:	f003 ff8d 	bl	8047350 <HAL_NVIC_EnableIRQ>
 8043436:	e797      	b.n	8043368 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8043438:	f7fe fd7a 	bl	8041f30 <Error_Handler>
 804343c:	e79f      	b.n	804337e <HAL_UART_MspInit+0x3e>
      Error_Handler();
 804343e:	f7fe fd77 	bl	8041f30 <Error_Handler>
 8043442:	e7ce      	b.n	80433e2 <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8043444:	f7fe fd74 	bl	8041f30 <Error_Handler>
 8043448:	e7d0      	b.n	80433ec <HAL_UART_MspInit+0xac>
      Error_Handler();
 804344a:	f7fe fd71 	bl	8041f30 <Error_Handler>
 804344e:	e7e2      	b.n	8043416 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8043450:	f7fe fd6e 	bl	8041f30 <Error_Handler>
 8043454:	e7e4      	b.n	8043420 <HAL_UART_MspInit+0xe0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8043456:	2304      	movs	r3, #4
 8043458:	9304      	str	r3, [sp, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 804345a:	2300      	movs	r3, #0
 804345c:	9313      	str	r3, [sp, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 804345e:	a804      	add	r0, sp, #16
 8043460:	f005 fd7c 	bl	8048f5c <HAL_RCCEx_PeriphCLKConfig>
 8043464:	2800      	cmp	r0, #0
 8043466:	d15b      	bne.n	8043520 <HAL_UART_MspInit+0x1e0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8043468:	4b37      	ldr	r3, [pc, #220]	; (8043548 <HAL_UART_MspInit+0x208>)
 804346a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 804346c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8043470:	659a      	str	r2, [r3, #88]	; 0x58
 8043472:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8043474:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8043478:	9202      	str	r2, [sp, #8]
 804347a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 804347c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 804347e:	f042 0204 	orr.w	r2, r2, #4
 8043482:	64da      	str	r2, [r3, #76]	; 0x4c
 8043484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8043486:	f003 0304 	and.w	r3, r3, #4
 804348a:	9303      	str	r3, [sp, #12]
 804348c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = EXT_TX_Pin|EXT_RX_Pin;
 804348e:	2330      	movs	r3, #48	; 0x30
 8043490:	9329      	str	r3, [sp, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043492:	2302      	movs	r3, #2
 8043494:	932a      	str	r3, [sp, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043496:	2500      	movs	r5, #0
 8043498:	952b      	str	r5, [sp, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804349a:	952c      	str	r5, [sp, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 804349c:	2307      	movs	r3, #7
 804349e:	932d      	str	r3, [sp, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80434a0:	a929      	add	r1, sp, #164	; 0xa4
 80434a2:	482f      	ldr	r0, [pc, #188]	; (8043560 <HAL_UART_MspInit+0x220>)
 80434a4:	f004 f994 	bl	80477d0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Channel2;
 80434a8:	482e      	ldr	r0, [pc, #184]	; (8043564 <HAL_UART_MspInit+0x224>)
 80434aa:	4b2f      	ldr	r3, [pc, #188]	; (8043568 <HAL_UART_MspInit+0x228>)
 80434ac:	6003      	str	r3, [r0, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80434ae:	231d      	movs	r3, #29
 80434b0:	6043      	str	r3, [r0, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80434b2:	6085      	str	r5, [r0, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80434b4:	60c5      	str	r5, [r0, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80434b6:	2380      	movs	r3, #128	; 0x80
 80434b8:	6103      	str	r3, [r0, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80434ba:	6145      	str	r5, [r0, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80434bc:	6185      	str	r5, [r0, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80434be:	61c5      	str	r5, [r0, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80434c0:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80434c2:	f003 ffc3 	bl	804744c <HAL_DMA_Init>
 80434c6:	2800      	cmp	r0, #0
 80434c8:	d12d      	bne.n	8043526 <HAL_UART_MspInit+0x1e6>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80434ca:	2110      	movs	r1, #16
 80434cc:	4825      	ldr	r0, [pc, #148]	; (8043564 <HAL_UART_MspInit+0x224>)
 80434ce:	f004 f96c 	bl	80477aa <HAL_DMA_ConfigChannelAttributes>
 80434d2:	bb58      	cbnz	r0, 804352c <HAL_UART_MspInit+0x1ec>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80434d4:	4b23      	ldr	r3, [pc, #140]	; (8043564 <HAL_UART_MspInit+0x224>)
 80434d6:	67e3      	str	r3, [r4, #124]	; 0x7c
 80434d8:	629c      	str	r4, [r3, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA2_Channel3;
 80434da:	4824      	ldr	r0, [pc, #144]	; (804356c <HAL_UART_MspInit+0x22c>)
 80434dc:	4b24      	ldr	r3, [pc, #144]	; (8043570 <HAL_UART_MspInit+0x230>)
 80434de:	6003      	str	r3, [r0, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80434e0:	231e      	movs	r3, #30
 80434e2:	6043      	str	r3, [r0, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80434e4:	2310      	movs	r3, #16
 80434e6:	6083      	str	r3, [r0, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80434e8:	2300      	movs	r3, #0
 80434ea:	60c3      	str	r3, [r0, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80434ec:	2280      	movs	r2, #128	; 0x80
 80434ee:	6102      	str	r2, [r0, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80434f0:	6143      	str	r3, [r0, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80434f2:	6183      	str	r3, [r0, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80434f4:	61c3      	str	r3, [r0, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80434f6:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80434f8:	f003 ffa8 	bl	804744c <HAL_DMA_Init>
 80434fc:	b9c8      	cbnz	r0, 8043532 <HAL_UART_MspInit+0x1f2>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart3_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80434fe:	2110      	movs	r1, #16
 8043500:	481a      	ldr	r0, [pc, #104]	; (804356c <HAL_UART_MspInit+0x22c>)
 8043502:	f004 f952 	bl	80477aa <HAL_DMA_ConfigChannelAttributes>
 8043506:	b9b8      	cbnz	r0, 8043538 <HAL_UART_MspInit+0x1f8>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8043508:	4b18      	ldr	r3, [pc, #96]	; (804356c <HAL_UART_MspInit+0x22c>)
 804350a:	67a3      	str	r3, [r4, #120]	; 0x78
 804350c:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 804350e:	2200      	movs	r2, #0
 8043510:	4611      	mov	r1, r2
 8043512:	203f      	movs	r0, #63	; 0x3f
 8043514:	f003 fee8 	bl	80472e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8043518:	203f      	movs	r0, #63	; 0x3f
 804351a:	f003 ff19 	bl	8047350 <HAL_NVIC_EnableIRQ>
}
 804351e:	e723      	b.n	8043368 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8043520:	f7fe fd06 	bl	8041f30 <Error_Handler>
 8043524:	e7a0      	b.n	8043468 <HAL_UART_MspInit+0x128>
      Error_Handler();
 8043526:	f7fe fd03 	bl	8041f30 <Error_Handler>
 804352a:	e7ce      	b.n	80434ca <HAL_UART_MspInit+0x18a>
      Error_Handler();
 804352c:	f7fe fd00 	bl	8041f30 <Error_Handler>
 8043530:	e7d0      	b.n	80434d4 <HAL_UART_MspInit+0x194>
      Error_Handler();
 8043532:	f7fe fcfd 	bl	8041f30 <Error_Handler>
 8043536:	e7e2      	b.n	80434fe <HAL_UART_MspInit+0x1be>
      Error_Handler();
 8043538:	f7fe fcfa 	bl	8041f30 <Error_Handler>
 804353c:	e7e4      	b.n	8043508 <HAL_UART_MspInit+0x1c8>
 804353e:	bf00      	nop
 8043540:	40008000 	.word	0x40008000
 8043544:	40004800 	.word	0x40004800
 8043548:	40021000 	.word	0x40021000
 804354c:	42020400 	.word	0x42020400
 8043550:	2001b03c 	.word	0x2001b03c
 8043554:	40020058 	.word	0x40020058
 8043558:	2001afd4 	.word	0x2001afd4
 804355c:	4002006c 	.word	0x4002006c
 8043560:	42020800 	.word	0x42020800
 8043564:	2001a5c8 	.word	0x2001a5c8
 8043568:	4002041c 	.word	0x4002041c
 804356c:	2001aec4 	.word	0x2001aec4
 8043570:	40020430 	.word	0x40020430

08043574 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8043574:	b508      	push	{r3, lr}
	if (huart->Instance == LPUART1) {
 8043576:	6803      	ldr	r3, [r0, #0]
 8043578:	4a09      	ldr	r2, [pc, #36]	; (80435a0 <HAL_UART_RxCpltCallback+0x2c>)
 804357a:	4293      	cmp	r3, r2
 804357c:	d003      	beq.n	8043586 <HAL_UART_RxCpltCallback+0x12>
		FifoPush(&fifo_dgb_rx, dbg_buf_RX);
	} else if (huart->Instance == USART3) {
 804357e:	4a09      	ldr	r2, [pc, #36]	; (80435a4 <HAL_UART_RxCpltCallback+0x30>)
 8043580:	4293      	cmp	r3, r2
 8043582:	d006      	beq.n	8043592 <HAL_UART_RxCpltCallback+0x1e>
		FifoPush(&fifo_rx, data_buf_RX);
	}
}
 8043584:	bd08      	pop	{r3, pc}
		FifoPush(&fifo_dgb_rx, dbg_buf_RX);
 8043586:	4b08      	ldr	r3, [pc, #32]	; (80435a8 <HAL_UART_RxCpltCallback+0x34>)
 8043588:	7819      	ldrb	r1, [r3, #0]
 804358a:	4808      	ldr	r0, [pc, #32]	; (80435ac <HAL_UART_RxCpltCallback+0x38>)
 804358c:	f7fd fefa 	bl	8041384 <FifoPush>
 8043590:	e7f8      	b.n	8043584 <HAL_UART_RxCpltCallback+0x10>
		FifoPush(&fifo_rx, data_buf_RX);
 8043592:	4b07      	ldr	r3, [pc, #28]	; (80435b0 <HAL_UART_RxCpltCallback+0x3c>)
 8043594:	7819      	ldrb	r1, [r3, #0]
 8043596:	4807      	ldr	r0, [pc, #28]	; (80435b4 <HAL_UART_RxCpltCallback+0x40>)
 8043598:	f7fd fef4 	bl	8041384 <FifoPush>
}
 804359c:	e7f2      	b.n	8043584 <HAL_UART_RxCpltCallback+0x10>
 804359e:	bf00      	nop
 80435a0:	40008000 	.word	0x40008000
 80435a4:	40004800 	.word	0x40004800
 80435a8:	2001aec0 	.word	0x2001aec0
 80435ac:	2001b0a8 	.word	0x2001b0a8
 80435b0:	2001b0a4 	.word	0x2001b0a4
 80435b4:	2001afbc 	.word	0x2001afbc

080435b8 <UartGetChar>:

uint8_t UartGetChar( UART_HandleTypeDef *obj, uint8_t *data )
{
 80435b8:	b538      	push	{r3, r4, r5, lr}
 80435ba:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80435bc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80435c0:	b672      	cpsid	i
//	    }
//	    else
//	    {
	        CRITICAL_SECTION_BEGIN( );

	        if( IsFifoEmpty( &fifo_dgb_rx ) == false )
 80435c2:	4808      	ldr	r0, [pc, #32]	; (80435e4 <UartGetChar+0x2c>)
 80435c4:	f7fd fef2 	bl	80413ac <IsFifoEmpty>
 80435c8:	b118      	cbz	r0, 80435d2 <UartGetChar+0x1a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80435ca:	f385 8810 	msr	PRIMASK, r5
	            *data = FifoPop( &fifo_dgb_rx );
	            CRITICAL_SECTION_END( );
	            return 0;
	        }
	        CRITICAL_SECTION_END( );
	        return 1;
 80435ce:	2001      	movs	r0, #1
//	    }
//	return HAL_UART_Receive(obj, data, 1, 100);
}
 80435d0:	bd38      	pop	{r3, r4, r5, pc}
	            *data = FifoPop( &fifo_dgb_rx );
 80435d2:	4804      	ldr	r0, [pc, #16]	; (80435e4 <UartGetChar+0x2c>)
 80435d4:	f7fd fee0 	bl	8041398 <FifoPop>
 80435d8:	7020      	strb	r0, [r4, #0]
 80435da:	f385 8810 	msr	PRIMASK, r5
	            return 0;
 80435de:	2000      	movs	r0, #0
 80435e0:	e7f6      	b.n	80435d0 <UartGetChar+0x18>
 80435e2:	bf00      	nop
 80435e4:	2001b0a8 	.word	0x2001b0a8

080435e8 <HAL_UART_TxCpltCallback>:
{
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80435e8:	b508      	push	{r3, lr}
  /* buffer transmission complete*/
  TxCpltCallback();
 80435ea:	4b02      	ldr	r3, [pc, #8]	; (80435f4 <HAL_UART_TxCpltCallback+0xc>)
 80435ec:	681b      	ldr	r3, [r3, #0]
 80435ee:	4798      	blx	r3
}
 80435f0:	bd08      	pop	{r3, pc}
 80435f2:	bf00      	nop
 80435f4:	200188c8 	.word	0x200188c8

080435f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80435f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8043630 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80435fc:	f7ff fb7e 	bl	8042cfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8043600:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8043602:	e003      	b.n	804360c <LoopCopyDataInit>

08043604 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8043604:	4b0b      	ldr	r3, [pc, #44]	; (8043634 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8043606:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8043608:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 804360a:	3104      	adds	r1, #4

0804360c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 804360c:	480a      	ldr	r0, [pc, #40]	; (8043638 <LoopForever+0xa>)
	ldr	r3, =_edata
 804360e:	4b0b      	ldr	r3, [pc, #44]	; (804363c <LoopForever+0xe>)
	adds	r2, r0, r1
 8043610:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8043612:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8043614:	d3f6      	bcc.n	8043604 <CopyDataInit>
	ldr	r2, =_sbss
 8043616:	4a0a      	ldr	r2, [pc, #40]	; (8043640 <LoopForever+0x12>)
	b	LoopFillZerobss
 8043618:	e002      	b.n	8043620 <LoopFillZerobss>

0804361a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 804361a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 804361c:	f842 3b04 	str.w	r3, [r2], #4

08043620 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8043620:	4b08      	ldr	r3, [pc, #32]	; (8043644 <LoopForever+0x16>)
	cmp	r2, r3
 8043622:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8043624:	d3f9      	bcc.n	804361a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8043626:	f011 fc87 	bl	8054f38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 804362a:	f7fe fb91 	bl	8041d50 <main>

0804362e <LoopForever>:

LoopForever:
    b LoopForever
 804362e:	e7fe      	b.n	804362e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8043630:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8043634:	0805b07c 	.word	0x0805b07c
	ldr	r0, =_sdata
 8043638:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 804363c:	20018484 	.word	0x20018484
	ldr	r2, =_sbss
 8043640:	20018484 	.word	0x20018484
	ldr	r3, = _ebss
 8043644:	2001b530 	.word	0x2001b530

08043648 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8043648:	e7fe      	b.n	8043648 <BusFault_Handler>

0804364a <ICG20330_DeInit>:
  * @param  None
  * @retval None
  */
void ICG20330_DeInit(void)
{
}
 804364a:	4770      	bx	lr

0804364c <ICG20330_Init>:
{  
 804364c:	b510      	push	{r4, lr}
 804364e:	b082      	sub	sp, #8
 8043650:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
 8043652:	2300      	movs	r3, #0
 8043654:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Init();
 8043658:	f001 ff26 	bl	80454a8 <GYRO_IO_Init>
  switch (init->Power_Mode) {
 804365c:	7823      	ldrb	r3, [r4, #0]
 804365e:	2b03      	cmp	r3, #3
 8043660:	d806      	bhi.n	8043670 <ICG20330_Init+0x24>
 8043662:	e8df f003 	tbb	[pc, r3]
 8043666:	1902      	.short	0x1902
 8043668:	211d      	.short	0x211d
		ctrl = 0xFF;
 804366a:	23ff      	movs	r3, #255	; 0xff
 804366c:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&ctrl, ICG20330_PWR_MGMT_1_ADDR, 1);
 8043670:	2201      	movs	r2, #1
 8043672:	216b      	movs	r1, #107	; 0x6b
 8043674:	f10d 0007 	add.w	r0, sp, #7
 8043678:	f001 ff0e 	bl	8045498 <GYRO_IO_Write>
  ctrl &=~ (ICG20330_STBY_XG_DISABLE | ICG20330_STBY_YG_DISABLE | ICG20330_STBY_ZG_DISABLE);
 804367c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8043680:	f023 0307 	bic.w	r3, r3, #7
 8043684:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&ctrl, ICG20330_PWR_MGMT_2_ADDR, 1);
 8043688:	2201      	movs	r2, #1
 804368a:	216c      	movs	r1, #108	; 0x6c
 804368c:	f10d 0007 	add.w	r0, sp, #7
 8043690:	f001 ff02 	bl	8045498 <GYRO_IO_Write>
}
 8043694:	b002      	add	sp, #8
 8043696:	bd10      	pop	{r4, pc}
		ctrl = 0x10;
 8043698:	2310      	movs	r3, #16
 804369a:	f88d 3007 	strb.w	r3, [sp, #7]
		break;
 804369e:	e7e7      	b.n	8043670 <ICG20330_Init+0x24>
		ctrl = 0x40;
 80436a0:	2340      	movs	r3, #64	; 0x40
 80436a2:	f88d 3007 	strb.w	r3, [sp, #7]
		break;
 80436a6:	e7e3      	b.n	8043670 <ICG20330_Init+0x24>
		ctrl = 0x01;
 80436a8:	2301      	movs	r3, #1
 80436aa:	f88d 3007 	strb.w	r3, [sp, #7]
		break;
 80436ae:	e7df      	b.n	8043670 <ICG20330_Init+0x24>

080436b0 <ICG20330_LowPower>:
  * @brief Set ICG20330 in low-power mode
  * @param 
  * @retval  None
  */
void ICG20330_LowPower(uint16_t InitStruct)
{  
 80436b0:	b500      	push	{lr}
 80436b2:	b083      	sub	sp, #12
  uint8_t ctrl = 0x00;

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80436b4:	f88d 0007 	strb.w	r0, [sp, #7]
  GYRO_IO_Write(&ctrl, ICG20330_PWR_MGMT_1_ADDR, 1);
 80436b8:	2201      	movs	r2, #1
 80436ba:	216b      	movs	r1, #107	; 0x6b
 80436bc:	f10d 0007 	add.w	r0, sp, #7
 80436c0:	f001 feea 	bl	8045498 <GYRO_IO_Write>
}
 80436c4:	b003      	add	sp, #12
 80436c6:	f85d fb04 	ldr.w	pc, [sp], #4

080436ca <ICG20330_ReadID>:
{
 80436ca:	b500      	push	{lr}
 80436cc:	b083      	sub	sp, #12
  GYRO_IO_Init();
 80436ce:	f001 feeb 	bl	80454a8 <GYRO_IO_Init>
  GYRO_IO_Read(&tmp, ICG20330_WHO_AM_I_ADDR, 1);
 80436d2:	2201      	movs	r2, #1
 80436d4:	2175      	movs	r1, #117	; 0x75
 80436d6:	f10d 0007 	add.w	r0, sp, #7
 80436da:	f001 ff03 	bl	80454e4 <GYRO_IO_Read>
}
 80436de:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80436e2:	b003      	add	sp, #12
 80436e4:	f85d fb04 	ldr.w	pc, [sp], #4

080436e8 <ICG20330_RebootCmd>:
{
 80436e8:	b500      	push	{lr}
 80436ea:	b083      	sub	sp, #12
  GYRO_IO_Read(&tmpreg, ICG20330_PWR_MGMT_1_ADDR, 1);
 80436ec:	2201      	movs	r2, #1
 80436ee:	216b      	movs	r1, #107	; 0x6b
 80436f0:	f10d 0007 	add.w	r0, sp, #7
 80436f4:	f001 fef6 	bl	80454e4 <GYRO_IO_Read>
  tmpreg |= ICG20330_DEV_RESET;
 80436f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80436fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8043700:	f88d 3007 	strb.w	r3, [sp, #7]
  GYRO_IO_Write(&tmpreg, ICG20330_PWR_MGMT_1_ADDR, 1);
 8043704:	2201      	movs	r2, #1
 8043706:	216b      	movs	r1, #107	; 0x6b
 8043708:	f10d 0007 	add.w	r0, sp, #7
 804370c:	f001 fec4 	bl	8045498 <GYRO_IO_Write>
}
 8043710:	b003      	add	sp, #12
 8043712:	f85d fb04 	ldr.w	pc, [sp], #4

08043716 <ICG20330_INT1InterruptConfig>:
  * @brief  Set ICG20330 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the ICG20330 Interrupt.
  * @retval None
  */
void ICG20330_INT1InterruptConfig(uint16_t Int1Config)
{
 8043716:	b510      	push	{r4, lr}
 8043718:	b082      	sub	sp, #8
 804371a:	4604      	mov	r4, r0
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 804371c:	2300      	movs	r3, #0
 804371e:	f88d 3007 	strb.w	r3, [sp, #7]
 8043722:	f88d 3006 	strb.w	r3, [sp, #6]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, ICG20330_INT_PIN_CFG_ADDR, 1);
 8043726:	2201      	movs	r2, #1
 8043728:	2137      	movs	r1, #55	; 0x37
 804372a:	f10d 0007 	add.w	r0, sp, #7
 804372e:	f001 fed9 	bl	80454e4 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, ICG20330_INT_ENABLE_ADDR, 1);
 8043732:	2201      	movs	r2, #1
 8043734:	2138      	movs	r1, #56	; 0x38
 8043736:	f10d 0006 	add.w	r0, sp, #6
 804373a:	f001 fed3 	bl	80454e4 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 804373e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8043742:	b2e4      	uxtb	r4, r4
 8043744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043748:	f88d 3007 	strb.w	r3, [sp, #7]
  
  ctrl3 &= 0xDF;
 804374c:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8043750:	f000 00df 	and.w	r0, r0, #223	; 0xdf
  ctrl3 |= ((uint8_t) Int1Config);   
 8043754:	4304      	orrs	r4, r0
 8043756:	f88d 4006 	strb.w	r4, [sp, #6]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, ICG20330_INT_PIN_CFG_ADDR, 1);
 804375a:	2201      	movs	r2, #1
 804375c:	2137      	movs	r1, #55	; 0x37
 804375e:	f10d 0007 	add.w	r0, sp, #7
 8043762:	f001 fe99 	bl	8045498 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, ICG20330_INT_ENABLE_ADDR, 1);
 8043766:	2201      	movs	r2, #1
 8043768:	2138      	movs	r1, #56	; 0x38
 804376a:	f10d 0006 	add.w	r0, sp, #6
 804376e:	f001 fe93 	bl	8045498 <GYRO_IO_Write>
}
 8043772:	b002      	add	sp, #8
 8043774:	bd10      	pop	{r4, pc}

08043776 <ICG20330_EnableIT>:
  *        @arg ICG20330_INT1
  *        @arg ICG20330_INT2
  * @retval None
  */
void ICG20330_EnableIT(uint8_t IntSel)
{  
 8043776:	b500      	push	{lr}
 8043778:	b085      	sub	sp, #20
 804377a:	f88d 0007 	strb.w	r0, [sp, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, ICG20330_INT_ENABLE_ADDR, 1);
 804377e:	2201      	movs	r2, #1
 8043780:	2138      	movs	r1, #56	; 0x38
 8043782:	f10d 000f 	add.w	r0, sp, #15
 8043786:	f001 fead 	bl	80454e4 <GYRO_IO_Read>
//    tmpreg &= 0xF7;
//    tmpreg |= ICG20330_INT2INTERRUPT_ENABLE;
//  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&IntSel, ICG20330_INT_ENABLE_ADDR, 1);
 804378a:	2201      	movs	r2, #1
 804378c:	2138      	movs	r1, #56	; 0x38
 804378e:	f10d 0007 	add.w	r0, sp, #7
 8043792:	f001 fe81 	bl	8045498 <GYRO_IO_Write>
}
 8043796:	b005      	add	sp, #20
 8043798:	f85d fb04 	ldr.w	pc, [sp], #4

0804379c <ICG20330_DisableIT>:
  *        @arg ICG20330_INT1
  *        @arg ICG20330_INT2
  * @retval None
  */
void ICG20330_DisableIT(uint8_t IntSel)
{  
 804379c:	b510      	push	{r4, lr}
 804379e:	b082      	sub	sp, #8
 80437a0:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, ICG20330_INT_ENABLE_ADDR, 1);
 80437a2:	2201      	movs	r2, #1
 80437a4:	2138      	movs	r1, #56	; 0x38
 80437a6:	f10d 0007 	add.w	r0, sp, #7
 80437aa:	f001 fe9b 	bl	80454e4 <GYRO_IO_Read>
//  else if(IntSel == ICG20330_INT2)
//  {
//    tmpreg &= 0xF7;
//    tmpreg |= ICG20330_INT2INTERRUPT_DISABLE;
//  }
  tmpreg &=~ IntSel;
 80437ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80437b2:	ea23 0004 	bic.w	r0, r3, r4
 80437b6:	f88d 0007 	strb.w	r0, [sp, #7]
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, ICG20330_INT_ENABLE_ADDR, 1);
 80437ba:	2201      	movs	r2, #1
 80437bc:	2138      	movs	r1, #56	; 0x38
 80437be:	f10d 0007 	add.w	r0, sp, #7
 80437c2:	f001 fe69 	bl	8045498 <GYRO_IO_Write>
}
 80437c6:	b002      	add	sp, #8
 80437c8:	bd10      	pop	{r4, pc}

080437ca <ICG20330_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the ICG20330.
  * @retval None
  */
void ICG20330_FilterConfig(uint8_t FilterStruct)
{
 80437ca:	b500      	push	{lr}
 80437cc:	b085      	sub	sp, #20
 80437ce:	f88d 0007 	strb.w	r0, [sp, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, ICG20330_CONFIG_ADDR, 1);
 80437d2:	2201      	movs	r2, #1
 80437d4:	211a      	movs	r1, #26
 80437d6:	f10d 000f 	add.w	r0, sp, #15
 80437da:	f001 fe83 	bl	80454e4 <GYRO_IO_Read>
//
//  /* Configure MEMS: mode and cutoff frequency */
//  tmpreg |= FilterStruct;
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&FilterStruct, ICG20330_CONFIG_ADDR, 1);
 80437de:	2201      	movs	r2, #1
 80437e0:	211a      	movs	r1, #26
 80437e2:	f10d 0007 	add.w	r0, sp, #7
 80437e6:	f001 fe57 	bl	8045498 <GYRO_IO_Write>
}
 80437ea:	b005      	add	sp, #20
 80437ec:	f85d fb04 	ldr.w	pc, [sp], #4

080437f0 <ICG20330_FilterCmd>:
  *         @arg: ICG20330_HIGHPASSFILTER_DISABLE
  *         @arg: ICG20330_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void ICG20330_FilterCmd(uint8_t HighPassFilterState)
{
 80437f0:	b500      	push	{lr}
 80437f2:	b085      	sub	sp, #20
 80437f4:	f88d 0007 	strb.w	r0, [sp, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, ICG20330_GYRO_CONFIG_ADDR, 1);
 80437f8:	2201      	movs	r2, #1
 80437fa:	211b      	movs	r1, #27
 80437fc:	f10d 000f 	add.w	r0, sp, #15
 8043800:	f001 fe70 	bl	80454e4 <GYRO_IO_Read>
//  tmpreg &= 0xEF;
//
//  tmpreg |= HighPassFilterState;
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&HighPassFilterState, ICG20330_GYRO_CONFIG_ADDR, 1);
 8043804:	2201      	movs	r2, #1
 8043806:	211b      	movs	r1, #27
 8043808:	f10d 0007 	add.w	r0, sp, #7
 804380c:	f001 fe44 	bl	8045498 <GYRO_IO_Write>
}
 8043810:	b005      	add	sp, #20
 8043812:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08043818 <ICG20330_ReadXYZAngRate>:
* @brief  Calculate the ICG20330 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void ICG20330_ReadXYZAngRate(float *pfData)
{
 8043818:	b530      	push	{r4, r5, lr}
 804381a:	b087      	sub	sp, #28
 804381c:	4605      	mov	r5, r0
  uint8_t tmpbuffer[6] ={0};
 804381e:	2400      	movs	r4, #0
 8043820:	9404      	str	r4, [sp, #16]
 8043822:	f8ad 4014 	strh.w	r4, [sp, #20]
  int16_t RawData[3] = {0};
 8043826:	9402      	str	r4, [sp, #8]
 8043828:	f8ad 400c 	strh.w	r4, [sp, #12]
  uint8_t tmpreg = 0;
 804382c:	f88d 4007 	strb.w	r4, [sp, #7]
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,ICG20330_GYRO_CONFIG_ADDR,1);
 8043830:	2201      	movs	r2, #1
 8043832:	211b      	movs	r1, #27
 8043834:	f10d 0007 	add.w	r0, sp, #7
 8043838:	f001 fe54 	bl	80454e4 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,ICG20330_GYRO_XOUT_H_ADDR,6);
 804383c:	2206      	movs	r2, #6
 804383e:	2143      	movs	r1, #67	; 0x43
 8043840:	a804      	add	r0, sp, #16
 8043842:	f001 fe4f 	bl	80454e4 <GYRO_IO_Read>
//      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
//    }
//  }
//  else
//  {
    for(i=0; i<3; i++)
 8043846:	4623      	mov	r3, r4
 8043848:	e00f      	b.n	804386a <ICG20330_ReadXYZAngRate+0x52>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 804384a:	005a      	lsls	r2, r3, #1
 804384c:	a906      	add	r1, sp, #24
 804384e:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8043852:	f811 0c08 	ldrb.w	r0, [r1, #-8]
 8043856:	3201      	adds	r2, #1
 8043858:	ac06      	add	r4, sp, #24
 804385a:	4422      	add	r2, r4
 804385c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8043860:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8043864:	f821 2c10 	strh.w	r2, [r1, #-16]
    for(i=0; i<3; i++)
 8043868:	3301      	adds	r3, #1
 804386a:	2b02      	cmp	r3, #2
 804386c:	dded      	ble.n	804384a <ICG20330_ReadXYZAngRate+0x32>
    }
//  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & ICG20330_FS_SEL)
 804386e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8043872:	f003 0318 	and.w	r3, r3, #24
 8043876:	2b18      	cmp	r3, #24
 8043878:	d80e      	bhi.n	8043898 <ICG20330_ReadXYZAngRate+0x80>
 804387a:	e8df f003 	tbb	[pc, r3]
 804387e:	0d1a      	.short	0x0d1a
 8043880:	0d0d0d0d 	.word	0x0d0d0d0d
 8043884:	0d110d0d 	.word	0x0d110d0d
 8043888:	0d0d0d0d 	.word	0x0d0d0d0d
 804388c:	0d140d0d 	.word	0x0d140d0d
 8043890:	0d0d0d0d 	.word	0x0d0d0d0d
 8043894:	0d0d      	.short	0x0d0d
 8043896:	17          	.byte	0x17
 8043897:	00          	.byte	0x00
 8043898:	eddf 6a11 	vldr	s13, [pc, #68]	; 80438e0 <ICG20330_ReadXYZAngRate+0xc8>
  case ICG20330_FULLSCALE_500: //+-250
     sensitivity=ICG20330_SENSITIVITY_131;
     break;
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 804389c:	2300      	movs	r3, #0
 804389e:	e01b      	b.n	80438d8 <ICG20330_ReadXYZAngRate+0xc0>
    sensitivity=ICG20330_SENSITIVITY_524;
 80438a0:	eddf 6a10 	vldr	s13, [pc, #64]	; 80438e4 <ICG20330_ReadXYZAngRate+0xcc>
    break;
 80438a4:	e7fa      	b.n	804389c <ICG20330_ReadXYZAngRate+0x84>
    sensitivity=ICG20330_SENSITIVITY_262;
 80438a6:	eddf 6a10 	vldr	s13, [pc, #64]	; 80438e8 <ICG20330_ReadXYZAngRate+0xd0>
    break;
 80438aa:	e7f7      	b.n	804389c <ICG20330_ReadXYZAngRate+0x84>
     sensitivity=ICG20330_SENSITIVITY_131;
 80438ac:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80438ec <ICG20330_ReadXYZAngRate+0xd4>
     break;
 80438b0:	e7f4      	b.n	804389c <ICG20330_ReadXYZAngRate+0x84>
    sensitivity=ICG20330_SENSITIVITY_1024;
 80438b2:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80438f0 <ICG20330_ReadXYZAngRate+0xd8>
 80438b6:	e7f1      	b.n	804389c <ICG20330_ReadXYZAngRate+0x84>
  {
    pfData[i]=(float)(RawData[i]);
 80438b8:	aa06      	add	r2, sp, #24
 80438ba:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80438be:	f932 2c10 	ldrsh.w	r2, [r2, #-16]
 80438c2:	ee07 2a90 	vmov	s15, r2
 80438c6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 80438ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pfData[i]/=(float)(sensitivity);
 80438ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80438d2:	ed82 7a00 	vstr	s14, [r2]
  for(i=0; i<3; i++)
 80438d6:	3301      	adds	r3, #1
 80438d8:	2b02      	cmp	r3, #2
 80438da:	dded      	ble.n	80438b8 <ICG20330_ReadXYZAngRate+0xa0>
  }
}
 80438dc:	b007      	add	sp, #28
 80438de:	bd30      	pop	{r4, r5, pc}
 80438e0:	00000000 	.word	0x00000000
 80438e4:	44030000 	.word	0x44030000
 80438e8:	43830000 	.word	0x43830000
 80438ec:	43030000 	.word	0x43030000
 80438f0:	44800000 	.word	0x44800000

080438f4 <LR1110SeHalGetUniqueId>:
#include "radio.h"

#include "lr1110-se-hal.h"

void LR1110SeHalGetUniqueId( uint8_t *id )
{
 80438f4:	b508      	push	{r3, lr}
    BoardGetUniqueId( id );
 80438f6:	f001 fa63 	bl	8044dc0 <BoardGetUniqueId>
}
 80438fa:	bd08      	pop	{r3, pc}

080438fc <convert_key_id_from_se_to_lr1110>:

static lr1110_crypto_keys_idx_t convert_key_id_from_se_to_lr1110( KeyIdentifier_t key_id )
{
    lr1110_crypto_keys_idx_t id = LR1110_CRYPTO_KEYS_IDX_GP0;

    switch( key_id )
 80438fc:	288c      	cmp	r0, #140	; 0x8c
 80438fe:	d874      	bhi.n	80439ea <convert_key_id_from_se_to_lr1110+0xee>
 8043900:	e8df f000 	tbb	[pc, r0]
 8043904:	4b497547 	.word	0x4b497547
 8043908:	53514f4d 	.word	0x53514f4d
 804390c:	73737355 	.word	0x73737355
 8043910:	73737373 	.word	0x73737373
 8043914:	73737373 	.word	0x73737373
 8043918:	73737373 	.word	0x73737373
 804391c:	73737373 	.word	0x73737373
 8043920:	73737373 	.word	0x73737373
 8043924:	73737373 	.word	0x73737373
 8043928:	73737373 	.word	0x73737373
 804392c:	73737373 	.word	0x73737373
 8043930:	73737373 	.word	0x73737373
 8043934:	73737373 	.word	0x73737373
 8043938:	73737373 	.word	0x73737373
 804393c:	73737373 	.word	0x73737373
 8043940:	73737373 	.word	0x73737373
 8043944:	73737373 	.word	0x73737373
 8043948:	73737373 	.word	0x73737373
 804394c:	73737373 	.word	0x73737373
 8043950:	73737373 	.word	0x73737373
 8043954:	73737373 	.word	0x73737373
 8043958:	73737373 	.word	0x73737373
 804395c:	73737373 	.word	0x73737373
 8043960:	73737373 	.word	0x73737373
 8043964:	73737373 	.word	0x73737373
 8043968:	73737373 	.word	0x73737373
 804396c:	73737373 	.word	0x73737373
 8043970:	73737373 	.word	0x73737373
 8043974:	73737373 	.word	0x73737373
 8043978:	73737373 	.word	0x73737373
 804397c:	73737373 	.word	0x73737373
 8043980:	57737373 	.word	0x57737373
 8043984:	5f5d5b59 	.word	0x5f5d5b59
 8043988:	67656361 	.word	0x67656361
 804398c:	6f6d6b69 	.word	0x6f6d6b69
 8043990:	71          	.byte	0x71
 8043991:	00          	.byte	0x00
            break;
        case MC_NWK_S_KEY_3:
            id = LR1110_CRYPTO_KEYS_IDX_MC_NWK_S_KEY_3;
            break;
        case SLOT_RAND_ZERO_KEY:
            id = LR1110_CRYPTO_KEYS_IDX_GP0;
 8043992:	2003      	movs	r0, #3
 8043994:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_J_S_INT_KEY;
 8043996:	2005      	movs	r0, #5
            break;
 8043998:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_J_S_ENC_KEY;
 804399a:	2004      	movs	r0, #4
            break;
 804399c:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_F_NWK_S_INT_KEY;
 804399e:	200d      	movs	r0, #13
            break;
 80439a0:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_S_NWK_S_INT_KEY;
 80439a2:	200e      	movs	r0, #14
            break;
 80439a4:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_NWK_S_ENC_KEY;
 80439a6:	200f      	movs	r0, #15
            break;
 80439a8:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_APP_S_KEY;
 80439aa:	200c      	movs	r0, #12
            break;
 80439ac:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_GP_KE_KEY_5;
 80439ae:	200b      	movs	r0, #11
            break;
 80439b0:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_GP_KE_KEY_4;
 80439b2:	200a      	movs	r0, #10
            break;
 80439b4:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_GP_KE_KEY_0;
 80439b6:	2006      	movs	r0, #6
            break;
 80439b8:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_MC_APP_S_KEY_0;
 80439ba:	2012      	movs	r0, #18
            break;
 80439bc:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_MC_NWK_S_KEY_0;
 80439be:	2016      	movs	r0, #22
            break;
 80439c0:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_GP_KE_KEY_1;
 80439c2:	2007      	movs	r0, #7
            break;
 80439c4:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_MC_APP_S_KEY_1;
 80439c6:	2013      	movs	r0, #19
            break;
 80439c8:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_MC_NWK_S_KEY_1;
 80439ca:	2017      	movs	r0, #23
            break;
 80439cc:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_GP_KE_KEY_2;
 80439ce:	2008      	movs	r0, #8
            break;
 80439d0:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_MC_APP_S_KEY_2;
 80439d2:	2014      	movs	r0, #20
            break;
 80439d4:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_MC_NWK_S_KEY_2;
 80439d6:	2018      	movs	r0, #24
            break;
 80439d8:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_GP_KE_KEY_3;
 80439da:	2009      	movs	r0, #9
            break;
 80439dc:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_MC_APP_S_KEY_3;
 80439de:	2015      	movs	r0, #21
            break;
 80439e0:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_MC_NWK_S_KEY_3;
 80439e2:	2019      	movs	r0, #25
            break;
 80439e4:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_GP0;
 80439e6:	201a      	movs	r0, #26
            break;
 80439e8:	4770      	bx	lr
        default:
            id = LR1110_CRYPTO_KEYS_IDX_GP1;
 80439ea:	201b      	movs	r0, #27
            break;
 80439ec:	4770      	bx	lr
            id = LR1110_CRYPTO_KEYS_IDX_NWK_KEY;
 80439ee:	2002      	movs	r0, #2
    }
    return id;
}
 80439f0:	4770      	bx	lr
	...

080439f4 <SecureElementInit>:
{
 80439f4:	b510      	push	{r4, lr}
 80439f6:	b088      	sub	sp, #32
    lr1110_crypto_status_t status = LR1110_CRYPTO_STATUS_ERROR;
 80439f8:	2306      	movs	r3, #6
 80439fa:	f88d 301f 	strb.w	r3, [sp, #31]
    SecureElementNvmData_t seNvmInit =
 80439fe:	2300      	movs	r3, #0
 8043a00:	9301      	str	r3, [sp, #4]
 8043a02:	9302      	str	r3, [sp, #8]
 8043a04:	9303      	str	r3, [sp, #12]
 8043a06:	9304      	str	r3, [sp, #16]
 8043a08:	9305      	str	r3, [sp, #20]
 8043a0a:	9306      	str	r3, [sp, #24]
    SeNvm = nvm;
 8043a0c:	4c08      	ldr	r4, [pc, #32]	; (8043a30 <SecureElementInit+0x3c>)
 8043a0e:	6020      	str	r0, [r4, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8043a10:	2218      	movs	r2, #24
 8043a12:	a901      	add	r1, sp, #4
 8043a14:	f011 fa4b 	bl	8054eae <memcpy1>
    lr1110_crypto_restore_from_flash( &LR1110, &status );
 8043a18:	f10d 011f 	add.w	r1, sp, #31
 8043a1c:	4805      	ldr	r0, [pc, #20]	; (8043a34 <SecureElementInit+0x40>)
 8043a1e:	f001 ff03 	bl	8045828 <lr1110_crypto_restore_from_flash>
    LR1110SeHalGetUniqueId( SeNvm->DevEui );
 8043a22:	6820      	ldr	r0, [r4, #0]
 8043a24:	f7ff ff66 	bl	80438f4 <LR1110SeHalGetUniqueId>
}
 8043a28:	f89d 001f 	ldrb.w	r0, [sp, #31]
 8043a2c:	b008      	add	sp, #32
 8043a2e:	bd10      	pop	{r4, pc}
 8043a30:	200188cc 	.word	0x200188cc
 8043a34:	2001b0b8 	.word	0x2001b0b8

08043a38 <SecureElementSetKey>:
    if( key == NULL )
 8043a38:	2900      	cmp	r1, #0
 8043a3a:	d03f      	beq.n	8043abc <SecureElementSetKey+0x84>
{
 8043a3c:	b570      	push	{r4, r5, r6, lr}
 8043a3e:	b084      	sub	sp, #16
 8043a40:	4604      	mov	r4, r0
 8043a42:	460e      	mov	r6, r1
    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;
 8043a44:	2306      	movs	r3, #6
 8043a46:	f88d 300f 	strb.w	r3, [sp, #15]
    if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
 8043a4a:	2880      	cmp	r0, #128	; 0x80
 8043a4c:	d005      	beq.n	8043a5a <SecureElementSetKey+0x22>
 8043a4e:	2883      	cmp	r0, #131	; 0x83
 8043a50:	d003      	beq.n	8043a5a <SecureElementSetKey+0x22>
 8043a52:	2886      	cmp	r0, #134	; 0x86
 8043a54:	d001      	beq.n	8043a5a <SecureElementSetKey+0x22>
 8043a56:	2889      	cmp	r0, #137	; 0x89
 8043a58:	d11b      	bne.n	8043a92 <SecureElementSetKey+0x5a>
                                            convert_key_id_from_se_to_lr1110( MC_KE_KEY ),
 8043a5a:	207f      	movs	r0, #127	; 0x7f
 8043a5c:	f7ff ff4e 	bl	80438fc <convert_key_id_from_se_to_lr1110>
 8043a60:	4605      	mov	r5, r0
                                            convert_key_id_from_se_to_lr1110( keyID ), key );
 8043a62:	4620      	mov	r0, r4
 8043a64:	f7ff ff4a 	bl	80438fc <convert_key_id_from_se_to_lr1110>
 8043a68:	4603      	mov	r3, r0
    	lr1110_crypto_derive_key( &LR1110, ( lr1110_crypto_status_t* ) &status,
 8043a6a:	9600      	str	r6, [sp, #0]
 8043a6c:	462a      	mov	r2, r5
 8043a6e:	f10d 010f 	add.w	r1, sp, #15
 8043a72:	4813      	ldr	r0, [pc, #76]	; (8043ac0 <SecureElementSetKey+0x88>)
 8043a74:	f001 fd7b 	bl	804556e <lr1110_crypto_derive_key>
        if( status == SECURE_ELEMENT_SUCCESS )
 8043a78:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8043a7c:	b11b      	cbz	r3, 8043a86 <SecureElementSetKey+0x4e>
        return status;
 8043a7e:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
 8043a82:	b004      	add	sp, #16
 8043a84:	bd70      	pop	{r4, r5, r6, pc}
            lr1110_crypto_store_to_flash( &LR1110, ( lr1110_crypto_status_t* ) &status );
 8043a86:	f10d 010f 	add.w	r1, sp, #15
 8043a8a:	480d      	ldr	r0, [pc, #52]	; (8043ac0 <SecureElementSetKey+0x88>)
 8043a8c:	f001 feb4 	bl	80457f8 <lr1110_crypto_store_to_flash>
 8043a90:	e7f5      	b.n	8043a7e <SecureElementSetKey+0x46>
        lr1110_crypto_set_key( &LR1110, ( lr1110_crypto_status_t* ) &status, convert_key_id_from_se_to_lr1110( keyID ),
 8043a92:	f7ff ff33 	bl	80438fc <convert_key_id_from_se_to_lr1110>
 8043a96:	4602      	mov	r2, r0
 8043a98:	4633      	mov	r3, r6
 8043a9a:	f10d 010f 	add.w	r1, sp, #15
 8043a9e:	4808      	ldr	r0, [pc, #32]	; (8043ac0 <SecureElementSetKey+0x88>)
 8043aa0:	f001 fd39 	bl	8045516 <lr1110_crypto_set_key>
        if( status == SECURE_ELEMENT_SUCCESS )
 8043aa4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8043aa8:	b113      	cbz	r3, 8043ab0 <SecureElementSetKey+0x78>
        return status;
 8043aaa:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8043aae:	e7e8      	b.n	8043a82 <SecureElementSetKey+0x4a>
            lr1110_crypto_store_to_flash( &LR1110, ( lr1110_crypto_status_t* ) &status );
 8043ab0:	f10d 010f 	add.w	r1, sp, #15
 8043ab4:	4802      	ldr	r0, [pc, #8]	; (8043ac0 <SecureElementSetKey+0x88>)
 8043ab6:	f001 fe9f 	bl	80457f8 <lr1110_crypto_store_to_flash>
 8043aba:	e7f6      	b.n	8043aaa <SecureElementSetKey+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 8043abc:	2002      	movs	r0, #2
}
 8043abe:	4770      	bx	lr
 8043ac0:	2001b0b8 	.word	0x2001b0b8

08043ac4 <SecureElementComputeAesCmac>:
{
 8043ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8043ac6:	b0c9      	sub	sp, #292	; 0x124
 8043ac8:	460d      	mov	r5, r1
 8043aca:	4614      	mov	r4, r2
 8043acc:	461e      	mov	r6, r3
    SecureElementStatus_t status      = SECURE_ELEMENT_ERROR;
 8043ace:	2306      	movs	r3, #6
 8043ad0:	f88d 311f 	strb.w	r3, [sp, #287]	; 0x11f
    if( micBxBuffer != NULL )
 8043ad4:	b198      	cbz	r0, 8043afe <SecureElementComputeAesCmac+0x3a>
 8043ad6:	4607      	mov	r7, r0
        memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8043ad8:	f44f 7288 	mov.w	r2, #272	; 0x110
 8043adc:	2100      	movs	r1, #0
 8043ade:	a803      	add	r0, sp, #12
 8043ae0:	f011 f9fb 	bl	8054eda <memset1>
        memcpy1( micBuff, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8043ae4:	2210      	movs	r2, #16
 8043ae6:	4639      	mov	r1, r7
 8043ae8:	a803      	add	r0, sp, #12
 8043aea:	f011 f9e0 	bl	8054eae <memcpy1>
        memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), buffer, size );
 8043aee:	4622      	mov	r2, r4
 8043af0:	4629      	mov	r1, r5
 8043af2:	a807      	add	r0, sp, #28
 8043af4:	f011 f9db 	bl	8054eae <memcpy1>
        localSize += MIC_BLOCK_BX_SIZE;
 8043af8:	3410      	adds	r4, #16
 8043afa:	b2a4      	uxth	r4, r4
        localbuffer = micBuff;
 8043afc:	ad03      	add	r5, sp, #12
                                    convert_key_id_from_se_to_lr1110( keyID ), localbuffer, localSize,
 8043afe:	4630      	mov	r0, r6
 8043b00:	f7ff fefc 	bl	80438fc <convert_key_id_from_se_to_lr1110>
 8043b04:	4602      	mov	r2, r0
    lr1110_crypto_compute_aes_cmac( &LR1110, ( lr1110_crypto_status_t* ) &status,
 8043b06:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8043b08:	9301      	str	r3, [sp, #4]
 8043b0a:	9400      	str	r4, [sp, #0]
 8043b0c:	462b      	mov	r3, r5
 8043b0e:	f20d 111f 	addw	r1, sp, #287	; 0x11f
 8043b12:	4803      	ldr	r0, [pc, #12]	; (8043b20 <SecureElementComputeAesCmac+0x5c>)
 8043b14:	f001 fdbd 	bl	8045692 <lr1110_crypto_compute_aes_cmac>
}
 8043b18:	f89d 011f 	ldrb.w	r0, [sp, #287]	; 0x11f
 8043b1c:	b049      	add	sp, #292	; 0x124
 8043b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8043b20:	2001b0b8 	.word	0x2001b0b8

08043b24 <SecureElementVerifyAesCmac>:
{
 8043b24:	b530      	push	{r4, r5, lr}
 8043b26:	b087      	sub	sp, #28
 8043b28:	9203      	str	r2, [sp, #12]
    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;
 8043b2a:	2206      	movs	r2, #6
 8043b2c:	f88d 2017 	strb.w	r2, [sp, #23]
    if( buffer == NULL )
 8043b30:	b190      	cbz	r0, 8043b58 <SecureElementVerifyAesCmac+0x34>
 8043b32:	460c      	mov	r4, r1
 8043b34:	4605      	mov	r5, r0
                                   convert_key_id_from_se_to_lr1110( keyID ), buffer, size,
 8043b36:	4618      	mov	r0, r3
 8043b38:	f7ff fee0 	bl	80438fc <convert_key_id_from_se_to_lr1110>
 8043b3c:	4602      	mov	r2, r0
    lr1110_crypto_verify_aes_cmac( &LR1110, ( lr1110_crypto_status_t* ) &status,
 8043b3e:	ab03      	add	r3, sp, #12
 8043b40:	9301      	str	r3, [sp, #4]
 8043b42:	9400      	str	r4, [sp, #0]
 8043b44:	462b      	mov	r3, r5
 8043b46:	f10d 0117 	add.w	r1, sp, #23
 8043b4a:	4804      	ldr	r0, [pc, #16]	; (8043b5c <SecureElementVerifyAesCmac+0x38>)
 8043b4c:	f001 fdd7 	bl	80456fe <lr1110_crypto_verify_aes_cmac>
    return status;
 8043b50:	f89d 0017 	ldrb.w	r0, [sp, #23]
}
 8043b54:	b007      	add	sp, #28
 8043b56:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8043b58:	2002      	movs	r0, #2
 8043b5a:	e7fb      	b.n	8043b54 <SecureElementVerifyAesCmac+0x30>
 8043b5c:	2001b0b8 	.word	0x2001b0b8

08043b60 <SecureElementAesEncrypt>:
{
 8043b60:	b570      	push	{r4, r5, r6, lr}
 8043b62:	b084      	sub	sp, #16
 8043b64:	461c      	mov	r4, r3
    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;
 8043b66:	2306      	movs	r3, #6
 8043b68:	f88d 300f 	strb.w	r3, [sp, #15]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8043b6c:	b190      	cbz	r0, 8043b94 <SecureElementAesEncrypt+0x34>
 8043b6e:	460d      	mov	r5, r1
 8043b70:	4606      	mov	r6, r0
 8043b72:	b18c      	cbz	r4, 8043b98 <SecureElementAesEncrypt+0x38>
                                  convert_key_id_from_se_to_lr1110( keyID ), buffer, size, encBuffer );
 8043b74:	4610      	mov	r0, r2
 8043b76:	f7ff fec1 	bl	80438fc <convert_key_id_from_se_to_lr1110>
 8043b7a:	4602      	mov	r2, r0
    lr1110_crypto_aes_encrypt_01( &LR1110, ( lr1110_crypto_status_t* ) &status,
 8043b7c:	9401      	str	r4, [sp, #4]
 8043b7e:	9500      	str	r5, [sp, #0]
 8043b80:	4633      	mov	r3, r6
 8043b82:	f10d 010f 	add.w	r1, sp, #15
 8043b86:	4805      	ldr	r0, [pc, #20]	; (8043b9c <SecureElementAesEncrypt+0x3c>)
 8043b88:	f001 fdfc 	bl	8045784 <lr1110_crypto_aes_encrypt_01>
    return status;
 8043b8c:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
 8043b90:	b004      	add	sp, #16
 8043b92:	bd70      	pop	{r4, r5, r6, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8043b94:	2002      	movs	r0, #2
 8043b96:	e7fb      	b.n	8043b90 <SecureElementAesEncrypt+0x30>
 8043b98:	2002      	movs	r0, #2
 8043b9a:	e7f9      	b.n	8043b90 <SecureElementAesEncrypt+0x30>
 8043b9c:	2001b0b8 	.word	0x2001b0b8

08043ba0 <SecureElementDeriveAndStoreKey>:
{
 8043ba0:	b570      	push	{r4, r5, r6, lr}
 8043ba2:	b084      	sub	sp, #16
    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;
 8043ba4:	2306      	movs	r3, #6
 8043ba6:	f88d 300f 	strb.w	r3, [sp, #15]
    if( input == NULL )
 8043baa:	b1d0      	cbz	r0, 8043be2 <SecureElementDeriveAndStoreKey+0x42>
 8043bac:	4614      	mov	r4, r2
 8043bae:	4606      	mov	r6, r0
                                        convert_key_id_from_se_to_lr1110( rootKeyID ),
 8043bb0:	4608      	mov	r0, r1
 8043bb2:	f7ff fea3 	bl	80438fc <convert_key_id_from_se_to_lr1110>
 8043bb6:	4605      	mov	r5, r0
                                        convert_key_id_from_se_to_lr1110( targetKeyID ), input );
 8043bb8:	4620      	mov	r0, r4
 8043bba:	f7ff fe9f 	bl	80438fc <convert_key_id_from_se_to_lr1110>
 8043bbe:	4603      	mov	r3, r0
    lr1110_crypto_derive_key( &LR1110, ( lr1110_crypto_status_t* ) &status,
 8043bc0:	4c09      	ldr	r4, [pc, #36]	; (8043be8 <SecureElementDeriveAndStoreKey+0x48>)
 8043bc2:	9600      	str	r6, [sp, #0]
 8043bc4:	462a      	mov	r2, r5
 8043bc6:	f10d 010f 	add.w	r1, sp, #15
 8043bca:	4620      	mov	r0, r4
 8043bcc:	f001 fccf 	bl	804556e <lr1110_crypto_derive_key>
    lr1110_crypto_store_to_flash( &LR1110, ( lr1110_crypto_status_t* ) &status );
 8043bd0:	f10d 010f 	add.w	r1, sp, #15
 8043bd4:	4620      	mov	r0, r4
 8043bd6:	f001 fe0f 	bl	80457f8 <lr1110_crypto_store_to_flash>
    return status;
 8043bda:	f89d 000f 	ldrb.w	r0, [sp, #15]
}
 8043bde:	b004      	add	sp, #16
 8043be0:	bd70      	pop	{r4, r5, r6, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8043be2:	2002      	movs	r0, #2
 8043be4:	e7fb      	b.n	8043bde <SecureElementDeriveAndStoreKey+0x3e>
 8043be6:	bf00      	nop
 8043be8:	2001b0b8 	.word	0x2001b0b8

08043bec <SecureElementProcessJoinAccept>:
{
 8043bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8043bf0:	b08b      	sub	sp, #44	; 0x2c
 8043bf2:	4615      	mov	r5, r2
 8043bf4:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8043bf8:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
    SecureElementStatus_t status = SECURE_ELEMENT_ERROR;
 8043bfc:	2206      	movs	r2, #6
 8043bfe:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8043c02:	2b00      	cmp	r3, #0
 8043c04:	d06c      	beq.n	8043ce0 <SecureElementProcessJoinAccept+0xf4>
 8043c06:	4606      	mov	r6, r0
 8043c08:	460f      	mov	r7, r1
 8043c0a:	4698      	mov	r8, r3
 8043c0c:	f1b9 0f00 	cmp.w	r9, #0
 8043c10:	d068      	beq.n	8043ce4 <SecureElementProcessJoinAccept+0xf8>
 8043c12:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8043c14:	2b00      	cmp	r3, #0
 8043c16:	d067      	beq.n	8043ce8 <SecureElementProcessJoinAccept+0xfc>
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8043c18:	2c21      	cmp	r4, #33	; 0x21
 8043c1a:	d867      	bhi.n	8043cec <SecureElementProcessJoinAccept+0x100>
    if( joinReqType != JOIN_REQ )
 8043c1c:	28ff      	cmp	r0, #255	; 0xff
 8043c1e:	d05d      	beq.n	8043cdc <SecureElementProcessJoinAccept+0xf0>
        encKeyID = J_S_ENC_KEY;
 8043c20:	2003      	movs	r0, #3
    uint8_t micHeader10[1] = { 0x20 };
 8043c22:	2320      	movs	r3, #32
 8043c24:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        &LR1110, ( lr1110_crypto_status_t* ) &status, convert_key_id_from_se_to_lr1110( encKeyID ),
 8043c28:	f7ff fe68 	bl	80438fc <convert_key_id_from_se_to_lr1110>
 8043c2c:	4682      	mov	sl, r0
        convert_key_id_from_se_to_lr1110( NWK_KEY ), ( lr1110_crypto_lorawan_version_t ) 0, micHeader10,
 8043c2e:	2001      	movs	r0, #1
 8043c30:	f7ff fe64 	bl	80438fc <convert_key_id_from_se_to_lr1110>
 8043c34:	4603      	mov	r3, r0
        encJoinAccept + 1, encJoinAcceptSize - 1, decJoinAccept + 1 );
 8043c36:	f108 0801 	add.w	r8, r8, #1
    lr1110_crypto_process_join_accept(
 8043c3a:	3c01      	subs	r4, #1
 8043c3c:	b2e4      	uxtb	r4, r4
 8043c3e:	f109 0b01 	add.w	fp, r9, #1
 8043c42:	f8cd b010 	str.w	fp, [sp, #16]
 8043c46:	9403      	str	r4, [sp, #12]
 8043c48:	f8cd 8008 	str.w	r8, [sp, #8]
 8043c4c:	aa09      	add	r2, sp, #36	; 0x24
 8043c4e:	9201      	str	r2, [sp, #4]
 8043c50:	2200      	movs	r2, #0
 8043c52:	9200      	str	r2, [sp, #0]
 8043c54:	4652      	mov	r2, sl
 8043c56:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8043c5a:	4825      	ldr	r0, [pc, #148]	; (8043cf0 <SecureElementProcessJoinAccept+0x104>)
 8043c5c:	f001 fcb4 	bl	80455c8 <lr1110_crypto_process_join_accept>
    if( status == SECURE_ELEMENT_SUCCESS )
 8043c60:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8043c64:	b92b      	cbnz	r3, 8043c72 <SecureElementProcessJoinAccept+0x86>
        *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8043c66:	f899 000b 	ldrb.w	r0, [r9, #11]
 8043c6a:	09c0      	lsrs	r0, r0, #7
 8043c6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8043c6e:	7018      	strb	r0, [r3, #0]
        if( *versionMinor == 0 )
 8043c70:	b388      	cbz	r0, 8043cd6 <SecureElementProcessJoinAccept+0xea>
    uint8_t  micHeader11[JOIN_ACCEPT_MIC_COMPUTATION_OFFSET] = { 0 };
 8043c72:	2300      	movs	r3, #0
 8043c74:	9306      	str	r3, [sp, #24]
 8043c76:	9307      	str	r3, [sp, #28]
 8043c78:	9308      	str	r3, [sp, #32]
    micHeader11[bufItr++] = ( uint8_t ) joinReqType;
 8043c7a:	f88d 6018 	strb.w	r6, [sp, #24]
    memcpyr( micHeader11 + bufItr, joinEui, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8043c7e:	2208      	movs	r2, #8
 8043c80:	4639      	mov	r1, r7
 8043c82:	f10d 0019 	add.w	r0, sp, #25
 8043c86:	f011 f91c 	bl	8054ec2 <memcpyr>
    micHeader11[bufItr++] = devNonce & 0xFF;
 8043c8a:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
    micHeader11[bufItr++] = ( devNonce >> 8 ) & 0xFF;
 8043c8e:	0a2d      	lsrs	r5, r5, #8
 8043c90:	f88d 5022 	strb.w	r5, [sp, #34]	; 0x22
    micHeader11[bufItr++] = 0x20;
 8043c94:	2320      	movs	r3, #32
 8043c96:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
        convert_key_id_from_se_to_lr1110( J_S_INT_KEY ), ( lr1110_crypto_lorawan_version_t ) 1, micHeader11,
 8043c9a:	2002      	movs	r0, #2
 8043c9c:	f7ff fe2e 	bl	80438fc <convert_key_id_from_se_to_lr1110>
 8043ca0:	4603      	mov	r3, r0
    lr1110_crypto_process_join_accept(
 8043ca2:	f8cd b010 	str.w	fp, [sp, #16]
 8043ca6:	9403      	str	r4, [sp, #12]
 8043ca8:	f8cd 8008 	str.w	r8, [sp, #8]
 8043cac:	aa06      	add	r2, sp, #24
 8043cae:	9201      	str	r2, [sp, #4]
 8043cb0:	2201      	movs	r2, #1
 8043cb2:	9200      	str	r2, [sp, #0]
 8043cb4:	4652      	mov	r2, sl
 8043cb6:	f10d 0127 	add.w	r1, sp, #39	; 0x27
 8043cba:	480d      	ldr	r0, [pc, #52]	; (8043cf0 <SecureElementProcessJoinAccept+0x104>)
 8043cbc:	f001 fc84 	bl	80455c8 <lr1110_crypto_process_join_accept>
    if( status == SECURE_ELEMENT_SUCCESS )
 8043cc0:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
 8043cc4:	b928      	cbnz	r0, 8043cd2 <SecureElementProcessJoinAccept+0xe6>
        *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8043cc6:	f899 300b 	ldrb.w	r3, [r9, #11]
 8043cca:	09db      	lsrs	r3, r3, #7
 8043ccc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8043cce:	7013      	strb	r3, [r2, #0]
        if( *versionMinor == 1 )
 8043cd0:	b90b      	cbnz	r3, 8043cd6 <SecureElementProcessJoinAccept+0xea>
    return status;
 8043cd2:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
}
 8043cd6:	b00b      	add	sp, #44	; 0x2c
 8043cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    KeyIdentifier_t encKeyID = NWK_KEY;
 8043cdc:	2001      	movs	r0, #1
 8043cde:	e7a0      	b.n	8043c22 <SecureElementProcessJoinAccept+0x36>
        return SECURE_ELEMENT_ERROR_NPE;
 8043ce0:	2002      	movs	r0, #2
 8043ce2:	e7f8      	b.n	8043cd6 <SecureElementProcessJoinAccept+0xea>
 8043ce4:	2002      	movs	r0, #2
 8043ce6:	e7f6      	b.n	8043cd6 <SecureElementProcessJoinAccept+0xea>
 8043ce8:	2002      	movs	r0, #2
 8043cea:	e7f4      	b.n	8043cd6 <SecureElementProcessJoinAccept+0xea>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8043cec:	2005      	movs	r0, #5
 8043cee:	e7f2      	b.n	8043cd6 <SecureElementProcessJoinAccept+0xea>
 8043cf0:	2001b0b8 	.word	0x2001b0b8

08043cf4 <SecureElementSetDevEui>:
    if( devEui == NULL )
 8043cf4:	b140      	cbz	r0, 8043d08 <SecureElementSetDevEui+0x14>
{
 8043cf6:	b508      	push	{r3, lr}
 8043cf8:	4601      	mov	r1, r0
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8043cfa:	2208      	movs	r2, #8
 8043cfc:	4b03      	ldr	r3, [pc, #12]	; (8043d0c <SecureElementSetDevEui+0x18>)
 8043cfe:	6818      	ldr	r0, [r3, #0]
 8043d00:	f011 f8d5 	bl	8054eae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8043d04:	2000      	movs	r0, #0
}
 8043d06:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8043d08:	2002      	movs	r0, #2
}
 8043d0a:	4770      	bx	lr
 8043d0c:	200188cc 	.word	0x200188cc

08043d10 <SecureElementGetDevEui>:
}
 8043d10:	4b01      	ldr	r3, [pc, #4]	; (8043d18 <SecureElementGetDevEui+0x8>)
 8043d12:	6818      	ldr	r0, [r3, #0]
 8043d14:	4770      	bx	lr
 8043d16:	bf00      	nop
 8043d18:	200188cc 	.word	0x200188cc

08043d1c <SecureElementSetJoinEui>:
    if( joinEui == NULL )
 8043d1c:	b148      	cbz	r0, 8043d32 <SecureElementSetJoinEui+0x16>
{
 8043d1e:	b508      	push	{r3, lr}
 8043d20:	4601      	mov	r1, r0
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 8043d22:	4b05      	ldr	r3, [pc, #20]	; (8043d38 <SecureElementSetJoinEui+0x1c>)
 8043d24:	6818      	ldr	r0, [r3, #0]
 8043d26:	2208      	movs	r2, #8
 8043d28:	4410      	add	r0, r2
 8043d2a:	f011 f8c0 	bl	8054eae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8043d2e:	2000      	movs	r0, #0
}
 8043d30:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8043d32:	2002      	movs	r0, #2
}
 8043d34:	4770      	bx	lr
 8043d36:	bf00      	nop
 8043d38:	200188cc 	.word	0x200188cc

08043d3c <SecureElementGetJoinEui>:
    return SeNvm->JoinEui;
 8043d3c:	4b01      	ldr	r3, [pc, #4]	; (8043d44 <SecureElementGetJoinEui+0x8>)
 8043d3e:	6818      	ldr	r0, [r3, #0]
}
 8043d40:	3008      	adds	r0, #8
 8043d42:	4770      	bx	lr
 8043d44:	200188cc 	.word	0x200188cc

08043d48 <SecureElementSetPin>:
    if( pin == NULL )
 8043d48:	b148      	cbz	r0, 8043d5e <SecureElementSetPin+0x16>
{
 8043d4a:	b508      	push	{r3, lr}
 8043d4c:	4601      	mov	r1, r0
    memcpy1( SeNvm->Pin, pin, SE_PIN_SIZE );
 8043d4e:	4b05      	ldr	r3, [pc, #20]	; (8043d64 <SecureElementSetPin+0x1c>)
 8043d50:	6818      	ldr	r0, [r3, #0]
 8043d52:	2204      	movs	r2, #4
 8043d54:	3010      	adds	r0, #16
 8043d56:	f011 f8aa 	bl	8054eae <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8043d5a:	2000      	movs	r0, #0
}
 8043d5c:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8043d5e:	2002      	movs	r0, #2
}
 8043d60:	4770      	bx	lr
 8043d62:	bf00      	nop
 8043d64:	200188cc 	.word	0x200188cc

08043d68 <SecureElementGetPin>:
    return SeNvm->Pin;
 8043d68:	4b01      	ldr	r3, [pc, #4]	; (8043d70 <SecureElementGetPin+0x8>)
 8043d6a:	6818      	ldr	r0, [r3, #0]
}
 8043d6c:	3010      	adds	r0, #16
 8043d6e:	4770      	bx	lr
 8043d70:	200188cc 	.word	0x200188cc

08043d74 <lr1110_hal_wait_on_busy>:
    // Wait on busy pin for 100 ms
    return lr1110_hal_wait_on_busy( context );
}

static lr1110_hal_status_t lr1110_hal_wait_on_busy( const void* context )
{
 8043d74:	b510      	push	{r4, lr}
 8043d76:	4604      	mov	r4, r0
    while( GpioRead( &( ( lr1110_t* ) context )->busy ) == 1 )
 8043d78:	f104 0014 	add.w	r0, r4, #20
 8043d7c:	f7fd fd40 	bl	8041800 <GpioRead>
 8043d80:	2801      	cmp	r0, #1
 8043d82:	d0f9      	beq.n	8043d78 <lr1110_hal_wait_on_busy+0x4>
    {
        ;
    }
    return LR1110_HAL_STATUS_OK;
}
 8043d84:	2000      	movs	r0, #0
 8043d86:	bd10      	pop	{r4, pc}

08043d88 <lr1110_board_init_io>:
{
 8043d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8043d8a:	b085      	sub	sp, #20
 8043d8c:	4605      	mov	r5, r0
    GpioInit( &( ( lr1110_t* ) context )->reset, LR_NRST_GPIO_Port, LR_NRST_Pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8043d8e:	4f16      	ldr	r7, [pc, #88]	; (8043de8 <lr1110_board_init_io+0x60>)
 8043d90:	2601      	movs	r6, #1
 8043d92:	9602      	str	r6, [sp, #8]
 8043d94:	2400      	movs	r4, #0
 8043d96:	9401      	str	r4, [sp, #4]
 8043d98:	9400      	str	r4, [sp, #0]
 8043d9a:	4633      	mov	r3, r6
 8043d9c:	2204      	movs	r2, #4
 8043d9e:	4639      	mov	r1, r7
 8043da0:	f7fd fc92 	bl	80416c8 <GpioInit>
    GpioInit( &( ( lr1110_t* ) context )->spi.Nss, LR_NSS_GPIO_Port, LR_NSS_Pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 8043da4:	9602      	str	r6, [sp, #8]
 8043da6:	9401      	str	r4, [sp, #4]
 8043da8:	9400      	str	r4, [sp, #0]
 8043daa:	4633      	mov	r3, r6
 8043dac:	4632      	mov	r2, r6
 8043dae:	4639      	mov	r1, r7
 8043db0:	f105 007c 	add.w	r0, r5, #124	; 0x7c
 8043db4:	f7fd fc88 	bl	80416c8 <GpioInit>
    GpioInit( &( ( lr1110_t* ) context )->dio_1, LR_IRQ_GPIO_Port, LR_IRQ_Pin, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8043db8:	9402      	str	r4, [sp, #8]
 8043dba:	9401      	str	r4, [sp, #4]
 8043dbc:	9400      	str	r4, [sp, #0]
 8043dbe:	4623      	mov	r3, r4
 8043dc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8043dc4:	4639      	mov	r1, r7
 8043dc6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8043dca:	f7fd fc7d 	bl	80416c8 <GpioInit>
    GpioInit( &( ( lr1110_t* ) context )->busy, LR_BUSY_GPIO_Port, LR_BUSY_Pin, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8043dce:	9402      	str	r4, [sp, #8]
 8043dd0:	9401      	str	r4, [sp, #4]
 8043dd2:	9400      	str	r4, [sp, #0]
 8043dd4:	4623      	mov	r3, r4
 8043dd6:	2202      	movs	r2, #2
 8043dd8:	4639      	mov	r1, r7
 8043dda:	f105 0014 	add.w	r0, r5, #20
 8043dde:	f7fd fc73 	bl	80416c8 <GpioInit>
}
 8043de2:	b005      	add	sp, #20
 8043de4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8043de6:	bf00      	nop
 8043de8:	42020c00 	.word	0x42020c00

08043dec <lr1110_board_set_rf_tx_power>:
{
 8043dec:	b508      	push	{r3, lr}
    if( power > 0 )
 8043dee:	2900      	cmp	r1, #0
 8043df0:	dd05      	ble.n	8043dfe <lr1110_board_set_rf_tx_power+0x12>
        if( power > 22 )
 8043df2:	2916      	cmp	r1, #22
 8043df4:	dc09      	bgt.n	8043e0a <lr1110_board_set_rf_tx_power+0x1e>
    lr1110_radio_set_tx_params( context, power, LR1110_RADIO_RAMP_40_US );
 8043df6:	2202      	movs	r2, #2
 8043df8:	f001 ff09 	bl	8045c0e <lr1110_radio_set_tx_params>
}
 8043dfc:	bd08      	pop	{r3, pc}
        if( power < -9 )
 8043dfe:	f111 0f09 	cmn.w	r1, #9
 8043e02:	daf8      	bge.n	8043df6 <lr1110_board_set_rf_tx_power+0xa>
            power = -9;
 8043e04:	f06f 0108 	mvn.w	r1, #8
 8043e08:	e7f5      	b.n	8043df6 <lr1110_board_set_rf_tx_power+0xa>
            power = 22;
 8043e0a:	2116      	movs	r1, #22
 8043e0c:	e7f3      	b.n	8043df6 <lr1110_board_set_rf_tx_power+0xa>

08043e0e <lr1110_board_get_tcxo_wakeup_time>:
}
 8043e0e:	2005      	movs	r0, #5
 8043e10:	4770      	bx	lr

08043e12 <lr1110_get_dio_1_pin_state>:
{
 8043e12:	b508      	push	{r3, lr}
    return GpioRead( &( ( lr1110_t* ) context )->dio_1 );
 8043e14:	3028      	adds	r0, #40	; 0x28
 8043e16:	f7fd fcf3 	bl	8041800 <GpioRead>
}
 8043e1a:	bd08      	pop	{r3, pc}

08043e1c <lr1110_hal_reset>:
{
 8043e1c:	b510      	push	{r4, lr}
 8043e1e:	4604      	mov	r4, r0
    GpioWrite( &( ( lr1110_t* ) context )->reset, 0 );
 8043e20:	2100      	movs	r1, #0
 8043e22:	f7fd fc45 	bl	80416b0 <GpioWrite>
    DelayMs( 1 );
 8043e26:	2001      	movs	r0, #1
 8043e28:	f7fd fa4e 	bl	80412c8 <DelayMs>
    GpioWrite( &( ( lr1110_t* ) context )->reset, 1 );
 8043e2c:	2101      	movs	r1, #1
 8043e2e:	4620      	mov	r0, r4
 8043e30:	f7fd fc3e 	bl	80416b0 <GpioWrite>
}
 8043e34:	2000      	movs	r0, #0
 8043e36:	bd10      	pop	{r4, pc}

08043e38 <lr1110_hal_get_operating_mode>:

lr1110_hal_operating_mode_t lr1110_hal_get_operating_mode( const void* context )
{
    return ( ( lr1110_t* ) context )->op_mode;
}
 8043e38:	f890 0090 	ldrb.w	r0, [r0, #144]	; 0x90
 8043e3c:	4770      	bx	lr

08043e3e <lr1110_hal_wakeup>:
{
 8043e3e:	b538      	push	{r3, r4, r5, lr}
 8043e40:	4604      	mov	r4, r0
    if( ( lr1110_hal_get_operating_mode( context ) == LR1110_HAL_OP_MODE_SLEEP ) ||
 8043e42:	f7ff fff9 	bl	8043e38 <lr1110_hal_get_operating_mode>
 8043e46:	b108      	cbz	r0, 8043e4c <lr1110_hal_wakeup+0xe>
 8043e48:	2807      	cmp	r0, #7
 8043e4a:	d10c      	bne.n	8043e66 <lr1110_hal_wakeup+0x28>
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 8043e4c:	f104 057c 	add.w	r5, r4, #124	; 0x7c
 8043e50:	2100      	movs	r1, #0
 8043e52:	4628      	mov	r0, r5
 8043e54:	f7fd fc2c 	bl	80416b0 <GpioWrite>
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 8043e58:	2101      	movs	r1, #1
 8043e5a:	4628      	mov	r0, r5
 8043e5c:	f7fd fc28 	bl	80416b0 <GpioWrite>
        ( ( lr1110_t* ) context )->op_mode = LR1110_HAL_OP_MODE_STDBY_RC;
 8043e60:	2301      	movs	r3, #1
 8043e62:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    return lr1110_hal_wait_on_busy( context );
 8043e66:	4620      	mov	r0, r4
 8043e68:	f7ff ff84 	bl	8043d74 <lr1110_hal_wait_on_busy>
}
 8043e6c:	bd38      	pop	{r3, r4, r5, pc}

08043e6e <lr1110_hal_write>:
{
 8043e6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8043e72:	4605      	mov	r5, r0
 8043e74:	460e      	mov	r6, r1
 8043e76:	4693      	mov	fp, r2
 8043e78:	461f      	mov	r7, r3
 8043e7a:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
    if( lr1110_hal_wakeup( context ) == LR1110_HAL_STATUS_OK )
 8043e7e:	f7ff ffde 	bl	8043e3e <lr1110_hal_wakeup>
 8043e82:	b120      	cbz	r0, 8043e8e <lr1110_hal_write+0x20>
    return LR1110_HAL_STATUS_ERROR;
 8043e84:	f04f 0903 	mov.w	r9, #3
}
 8043e88:	4648      	mov	r0, r9
 8043e8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8043e8e:	4681      	mov	r9, r0
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 8043e90:	f105 0a7c 	add.w	sl, r5, #124	; 0x7c
 8043e94:	2100      	movs	r1, #0
 8043e96:	4650      	mov	r0, sl
 8043e98:	f7fd fc0a 	bl	80416b0 <GpioWrite>
        for( uint16_t i = 0; i < command_length; i++ )
 8043e9c:	2400      	movs	r4, #0
 8043e9e:	e006      	b.n	8043eae <lr1110_hal_write+0x40>
            SpiInOut( &( ( lr1110_t* ) context )->spi, command[i] );
 8043ea0:	5d31      	ldrb	r1, [r6, r4]
 8043ea2:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8043ea6:	f7fe fd99 	bl	80429dc <SpiInOut>
        for( uint16_t i = 0; i < command_length; i++ )
 8043eaa:	3401      	adds	r4, #1
 8043eac:	b2a4      	uxth	r4, r4
 8043eae:	455c      	cmp	r4, fp
 8043eb0:	d3f6      	bcc.n	8043ea0 <lr1110_hal_write+0x32>
        for( uint16_t i = 0; i < data_length; i++ )
 8043eb2:	2400      	movs	r4, #0
 8043eb4:	e006      	b.n	8043ec4 <lr1110_hal_write+0x56>
            SpiInOut( &( ( lr1110_t* ) context )->spi, data[i] );
 8043eb6:	5d39      	ldrb	r1, [r7, r4]
 8043eb8:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8043ebc:	f7fe fd8e 	bl	80429dc <SpiInOut>
        for( uint16_t i = 0; i < data_length; i++ )
 8043ec0:	3401      	adds	r4, #1
 8043ec2:	b2a4      	uxth	r4, r4
 8043ec4:	4544      	cmp	r4, r8
 8043ec6:	d3f6      	bcc.n	8043eb6 <lr1110_hal_write+0x48>
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 8043ec8:	2101      	movs	r1, #1
 8043eca:	4650      	mov	r0, sl
 8043ecc:	f7fd fbf0 	bl	80416b0 <GpioWrite>
        if( ( ( command[0] << 8 ) | command[1] ) != 0x011B )
 8043ed0:	7832      	ldrb	r2, [r6, #0]
 8043ed2:	7873      	ldrb	r3, [r6, #1]
 8043ed4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8043ed8:	f240 121b 	movw	r2, #283	; 0x11b
 8043edc:	4293      	cmp	r3, r2
 8043ede:	d0d3      	beq.n	8043e88 <lr1110_hal_write+0x1a>
            return lr1110_hal_wait_on_busy( context );
 8043ee0:	4628      	mov	r0, r5
 8043ee2:	f7ff ff47 	bl	8043d74 <lr1110_hal_wait_on_busy>
 8043ee6:	4681      	mov	r9, r0
 8043ee8:	e7ce      	b.n	8043e88 <lr1110_hal_write+0x1a>

08043eea <lr1110_hal_read>:
{
 8043eea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8043eee:	4605      	mov	r5, r0
 8043ef0:	468a      	mov	sl, r1
 8043ef2:	4691      	mov	r9, r2
 8043ef4:	461e      	mov	r6, r3
 8043ef6:	f8bd 7020 	ldrh.w	r7, [sp, #32]
    if( lr1110_hal_wakeup( context ) == LR1110_HAL_STATUS_OK )
 8043efa:	f7ff ffa0 	bl	8043e3e <lr1110_hal_wakeup>
 8043efe:	b110      	cbz	r0, 8043f06 <lr1110_hal_read+0x1c>
    return LR1110_HAL_STATUS_ERROR;
 8043f00:	2003      	movs	r0, #3
}
 8043f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 8043f06:	f105 087c 	add.w	r8, r5, #124	; 0x7c
 8043f0a:	2100      	movs	r1, #0
 8043f0c:	4640      	mov	r0, r8
 8043f0e:	f7fd fbcf 	bl	80416b0 <GpioWrite>
        for( uint16_t i = 0; i < command_length; i++ )
 8043f12:	2400      	movs	r4, #0
 8043f14:	454c      	cmp	r4, r9
 8043f16:	d208      	bcs.n	8043f2a <lr1110_hal_read+0x40>
            SpiInOut( &( ( lr1110_t* ) context )->spi, command[i] );
 8043f18:	f81a 1004 	ldrb.w	r1, [sl, r4]
 8043f1c:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8043f20:	f7fe fd5c 	bl	80429dc <SpiInOut>
        for( uint16_t i = 0; i < command_length; i++ )
 8043f24:	3401      	adds	r4, #1
 8043f26:	b2a4      	uxth	r4, r4
 8043f28:	e7f4      	b.n	8043f14 <lr1110_hal_read+0x2a>
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 8043f2a:	2101      	movs	r1, #1
 8043f2c:	4640      	mov	r0, r8
 8043f2e:	f7fd fbbf 	bl	80416b0 <GpioWrite>
        lr1110_hal_wait_on_busy( context );
 8043f32:	4628      	mov	r0, r5
 8043f34:	f7ff ff1e 	bl	8043d74 <lr1110_hal_wait_on_busy>
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 8043f38:	2100      	movs	r1, #0
 8043f3a:	4640      	mov	r0, r8
 8043f3c:	f7fd fbb8 	bl	80416b0 <GpioWrite>
        SpiInOut( &( ( lr1110_t* ) context )->spi, 0 );
 8043f40:	f105 093c 	add.w	r9, r5, #60	; 0x3c
 8043f44:	2100      	movs	r1, #0
 8043f46:	4648      	mov	r0, r9
 8043f48:	f7fe fd48 	bl	80429dc <SpiInOut>
        for( uint16_t i = 0; i < data_length; i++ )
 8043f4c:	2400      	movs	r4, #0
 8043f4e:	e006      	b.n	8043f5e <lr1110_hal_read+0x74>
            data[i] = SpiInOut( &( ( lr1110_t* ) context )->spi, 0 );
 8043f50:	2100      	movs	r1, #0
 8043f52:	4648      	mov	r0, r9
 8043f54:	f7fe fd42 	bl	80429dc <SpiInOut>
 8043f58:	5530      	strb	r0, [r6, r4]
        for( uint16_t i = 0; i < data_length; i++ )
 8043f5a:	3401      	adds	r4, #1
 8043f5c:	b2a4      	uxth	r4, r4
 8043f5e:	42bc      	cmp	r4, r7
 8043f60:	d3f6      	bcc.n	8043f50 <lr1110_hal_read+0x66>
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 8043f62:	2101      	movs	r1, #1
 8043f64:	4640      	mov	r0, r8
 8043f66:	f7fd fba3 	bl	80416b0 <GpioWrite>
        return lr1110_hal_wait_on_busy( context );
 8043f6a:	4628      	mov	r0, r5
 8043f6c:	f7ff ff02 	bl	8043d74 <lr1110_hal_wait_on_busy>
 8043f70:	e7c7      	b.n	8043f02 <lr1110_hal_read+0x18>

08043f72 <lr1110_hal_write_read>:
{
 8043f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8043f76:	4606      	mov	r6, r0
 8043f78:	460d      	mov	r5, r1
 8043f7a:	4690      	mov	r8, r2
 8043f7c:	461f      	mov	r7, r3
    if( lr1110_hal_wakeup( context ) == LR1110_HAL_STATUS_OK )
 8043f7e:	f7ff ff5e 	bl	8043e3e <lr1110_hal_wakeup>
 8043f82:	b120      	cbz	r0, 8043f8e <lr1110_hal_write_read+0x1c>
    return LR1110_HAL_STATUS_ERROR;
 8043f84:	f04f 0903 	mov.w	r9, #3
}
 8043f88:	4648      	mov	r0, r9
 8043f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8043f8e:	4681      	mov	r9, r0
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 8043f90:	f106 0a7c 	add.w	sl, r6, #124	; 0x7c
 8043f94:	2100      	movs	r1, #0
 8043f96:	4650      	mov	r0, sl
 8043f98:	f7fd fb8a 	bl	80416b0 <GpioWrite>
        for( uint16_t i = 0; i < data_length; i++ )
 8043f9c:	2400      	movs	r4, #0
 8043f9e:	e008      	b.n	8043fb2 <lr1110_hal_write_read+0x40>
            data[i] = SpiInOut( &( ( lr1110_t* ) context )->spi, command[i] );
 8043fa0:	5d29      	ldrb	r1, [r5, r4]
 8043fa2:	f106 003c 	add.w	r0, r6, #60	; 0x3c
 8043fa6:	f7fe fd19 	bl	80429dc <SpiInOut>
 8043faa:	f808 0004 	strb.w	r0, [r8, r4]
        for( uint16_t i = 0; i < data_length; i++ )
 8043fae:	3401      	adds	r4, #1
 8043fb0:	b2a4      	uxth	r4, r4
 8043fb2:	42bc      	cmp	r4, r7
 8043fb4:	d3f4      	bcc.n	8043fa0 <lr1110_hal_write_read+0x2e>
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 8043fb6:	2101      	movs	r1, #1
 8043fb8:	4650      	mov	r0, sl
 8043fba:	f7fd fb79 	bl	80416b0 <GpioWrite>
        if( ( ( command[0] << 8 ) | command[1] ) != 0x011B )
 8043fbe:	782a      	ldrb	r2, [r5, #0]
 8043fc0:	786b      	ldrb	r3, [r5, #1]
 8043fc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8043fc6:	f240 121b 	movw	r2, #283	; 0x11b
 8043fca:	4293      	cmp	r3, r2
 8043fcc:	d0dc      	beq.n	8043f88 <lr1110_hal_write_read+0x16>
            return lr1110_hal_wait_on_busy( context );
 8043fce:	4630      	mov	r0, r6
 8043fd0:	f7ff fed0 	bl	8043d74 <lr1110_hal_wait_on_busy>
 8043fd4:	4681      	mov	r9, r0
 8043fd6:	e7d7      	b.n	8043f88 <lr1110_hal_write_read+0x16>

08043fd8 <lr1110_hal_set_operating_mode>:

void lr1110_hal_set_operating_mode( const void* context, lr1110_hal_operating_mode_t op_mode )
{
    ( ( lr1110_t* ) context )->op_mode = op_mode;
 8043fd8:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
        GpioWrite( &DbgPinTx, 0 );
        GpioWrite( &DbgPinRx, 0 );
        break;
    }
#endif
}
 8043fdc:	4770      	bx	lr
	...

08043fe0 <lr1110_board_init>:
{
 8043fe0:	b530      	push	{r4, r5, lr}
 8043fe2:	b089      	sub	sp, #36	; 0x24
 8043fe4:	4604      	mov	r4, r0
 8043fe6:	460d      	mov	r5, r1
    lr1110_system_reset( context );
 8043fe8:	f001 ff64 	bl	8045eb4 <lr1110_system_reset>
    lr1110_hal_set_operating_mode( context, LR1110_HAL_OP_MODE_STDBY_RC );
 8043fec:	2101      	movs	r1, #1
 8043fee:	4620      	mov	r0, r4
 8043ff0:	f7ff fff2 	bl	8043fd8 <lr1110_hal_set_operating_mode>
    GpioSetInterrupt( &( ( lr1110_t* ) context )->dio_1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, dio_irq );
 8043ff4:	462b      	mov	r3, r5
 8043ff6:	2203      	movs	r2, #3
 8043ff8:	2101      	movs	r1, #1
 8043ffa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8043ffe:	f7fd fa95 	bl	804152c <GpioSetInterrupt>
    uint32_t              irq = 0;
 8044002:	2500      	movs	r5, #0
 8044004:	9505      	str	r5, [sp, #20]
    lr1110_system_get_status( context, &stat1, &stat2, &irq );
 8044006:	ab05      	add	r3, sp, #20
 8044008:	aa06      	add	r2, sp, #24
 804400a:	a907      	add	r1, sp, #28
 804400c:	4620      	mov	r0, r4
 804400e:	f001 ff55 	bl	8045ebc <lr1110_system_get_status>
    lr1110_system_get_version( context, &version );
 8044012:	a904      	add	r1, sp, #16
 8044014:	4620      	mov	r0, r4
 8044016:	f001 ff84 	bl	8045f22 <lr1110_system_get_version>
    lr1110_system_errors_t errors = { 0 };
 804401a:	f8ad 500e 	strh.w	r5, [sp, #14]
    lr1110_system_get_errors( context, &errors );
 804401e:	f10d 010e 	add.w	r1, sp, #14
 8044022:	4620      	mov	r0, r4
 8044024:	f001 ff9e 	bl	8045f64 <lr1110_system_get_errors>
    lr1110_system_clear_errors( context );
 8044028:	4620      	mov	r0, r4
 804402a:	f001 ffb6 	bl	8045f9a <lr1110_system_clear_errors>
    rf_switch_configuration.enable  = LR1110_SYSTEM_RFSW0_HIGH | LR1110_SYSTEM_RFSW1_HIGH |
 804402e:	230f      	movs	r3, #15
 8044030:	f88d 3004 	strb.w	r3, [sp, #4]
    rf_switch_configuration.standby = 0;
 8044034:	f88d 5005 	strb.w	r5, [sp, #5]
    rf_switch_configuration.rx      = LR1110_SYSTEM_RFSW0_HIGH;
 8044038:	2301      	movs	r3, #1
 804403a:	f88d 3006 	strb.w	r3, [sp, #6]
    rf_switch_configuration.tx      = LR1110_SYSTEM_RFSW0_HIGH | LR1110_SYSTEM_RFSW1_HIGH;
 804403e:	2303      	movs	r3, #3
 8044040:	f88d 3007 	strb.w	r3, [sp, #7]
    rf_switch_configuration.tx_hp   = LR1110_SYSTEM_RFSW1_HIGH;
 8044044:	2502      	movs	r5, #2
 8044046:	f88d 5008 	strb.w	r5, [sp, #8]
    rf_switch_configuration.tx_hf   = LR1110_SYSTEM_RFSW1_HIGH;
 804404a:	f88d 5009 	strb.w	r5, [sp, #9]
    rf_switch_configuration.wifi    = LR1110_SYSTEM_RFSW3_HIGH;
 804404e:	2308      	movs	r3, #8
 8044050:	f88d 300b 	strb.w	r3, [sp, #11]
    rf_switch_configuration.gnss    = LR1110_SYSTEM_RFSW2_HIGH;
 8044054:	2304      	movs	r3, #4
 8044056:	f88d 300a 	strb.w	r3, [sp, #10]
    lr1110_system_set_dio_as_rf_switch( context, &rf_switch_configuration );
 804405a:	eb0d 0103 	add.w	r1, sp, r3
 804405e:	4620      	mov	r0, r4
 8044060:	f001 ffbf 	bl	8045fe2 <lr1110_system_set_dio_as_rf_switch>
    lr1110_radio_pa_cfg_t paConfig = {
 8044064:	4b06      	ldr	r3, [pc, #24]	; (8044080 <lr1110_board_init+0xa0>)
 8044066:	681b      	ldr	r3, [r3, #0]
 8044068:	9300      	str	r3, [sp, #0]
    lr1110_radio_set_pa_cfg( context, &paConfig );
 804406a:	4669      	mov	r1, sp
 804406c:	4620      	mov	r0, r4
 804406e:	f001 fe09 	bl	8045c84 <lr1110_radio_set_pa_cfg>
    lr1110_radio_set_pkt_type( context, packet_type );
 8044072:	4629      	mov	r1, r5
 8044074:	4620      	mov	r0, r4
 8044076:	f001 fd16 	bl	8045aa6 <lr1110_radio_set_pkt_type>
}
 804407a:	b009      	add	sp, #36	; 0x24
 804407c:	bd30      	pop	{r4, r5, pc}
 804407e:	bf00      	nop
 8044080:	08059b50 	.word	0x08059b50

08044084 <RadioGetFskBandwidthRegValue>:
 */
static uint8_t RadioGetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8044084:	4602      	mov	r2, r0
 8044086:	b1b0      	cbz	r0, 80440b6 <RadioGetFskBandwidthRegValue+0x32>
    {
        return ( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8044088:	2300      	movs	r3, #0
 804408a:	e001      	b.n	8044090 <RadioGetFskBandwidthRegValue+0xc>
 804408c:	3301      	adds	r3, #1
 804408e:	b2db      	uxtb	r3, r3
 8044090:	2b14      	cmp	r3, #20
 8044092:	d80f      	bhi.n	80440b4 <RadioGetFskBandwidthRegValue+0x30>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8044094:	4909      	ldr	r1, [pc, #36]	; (80440bc <RadioGetFskBandwidthRegValue+0x38>)
 8044096:	f851 1033 	ldr.w	r1, [r1, r3, lsl #3]
 804409a:	4291      	cmp	r1, r2
 804409c:	d8f6      	bhi.n	804408c <RadioGetFskBandwidthRegValue+0x8>
 804409e:	1c59      	adds	r1, r3, #1
 80440a0:	4806      	ldr	r0, [pc, #24]	; (80440bc <RadioGetFskBandwidthRegValue+0x38>)
 80440a2:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
 80440a6:	4290      	cmp	r0, r2
 80440a8:	d9f0      	bls.n	804408c <RadioGetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i + 1].RegValue;
 80440aa:	4b04      	ldr	r3, [pc, #16]	; (80440bc <RadioGetFskBandwidthRegValue+0x38>)
 80440ac:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80440b0:	7918      	ldrb	r0, [r3, #4]
 80440b2:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 )
 80440b4:	e7fe      	b.n	80440b4 <RadioGetFskBandwidthRegValue+0x30>
        return ( 0x1F );
 80440b6:	201f      	movs	r0, #31
        ;
}
 80440b8:	4770      	bx	lr
 80440ba:	bf00      	nop
 80440bc:	08059c7c 	.word	0x08059c7c

080440c0 <RadioCheckRfFrequency>:
}

bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 80440c0:	2001      	movs	r0, #1
 80440c2:	4770      	bx	lr

080440c4 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( lr1110_radio_lora_bw_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 80440c4:	3801      	subs	r0, #1
 80440c6:	2809      	cmp	r0, #9
 80440c8:	d806      	bhi.n	80440d8 <RadioGetLoRaBandwidthInHz+0x14>
 80440ca:	e8df f000 	tbb	[pc, r0]
 80440ce:	0d07      	.short	0x0d07
 80440d0:	1a181613 	.word	0x1a181613
 80440d4:	100a1c05 	.word	0x100a1c05
        break;
    case LR1110_RADIO_LORA_BW_125:
        bandwidthInHz = 125000UL;
        break;
    case LR1110_RADIO_LORA_BW_250:
        bandwidthInHz = 250000UL;
 80440d8:	2000      	movs	r0, #0
 80440da:	4770      	bx	lr
        bandwidthInHz = 15625UL;
 80440dc:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 80440e0:	4770      	bx	lr
        bandwidthInHz = 20833UL;
 80440e2:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 80440e6:	4770      	bx	lr
        bandwidthInHz = 31250UL;
 80440e8:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 80440ec:	4770      	bx	lr
        bandwidthInHz = 41667UL;
 80440ee:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 80440f2:	4770      	bx	lr
        bandwidthInHz = 62500UL;
 80440f4:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 80440f8:	4770      	bx	lr
        bandwidthInHz = 125000UL;
 80440fa:	4804      	ldr	r0, [pc, #16]	; (804410c <RadioGetLoRaBandwidthInHz+0x48>)
        break;
 80440fc:	4770      	bx	lr
        bandwidthInHz = 250000UL;
 80440fe:	4804      	ldr	r0, [pc, #16]	; (8044110 <RadioGetLoRaBandwidthInHz+0x4c>)
        break;
 8044100:	4770      	bx	lr
    case LR1110_RADIO_LORA_BW_500:
        bandwidthInHz = 500000UL;
 8044102:	4804      	ldr	r0, [pc, #16]	; (8044114 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8044104:	4770      	bx	lr
        bandwidthInHz = 10417UL;
 8044106:	f642 00b1 	movw	r0, #10417	; 0x28b1
    }

    return bandwidthInHz;
}
 804410a:	4770      	bx	lr
 804410c:	0001e848 	.word	0x0001e848
 8044110:	0003d090 	.word	0x0003d090
 8044114:	0007a120 	.word	0x0007a120

08044118 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8044118:	f89d 1004 	ldrb.w	r1, [sp, #4]
    const uint8_t syncWordLength = 3;

    return ( preambleLen << 3 ) +
 804411c:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 804411e:	b953      	cbnz	r3, 8044136 <RadioGetGfskTimeOnAirNumerator+0x1e>
 8044120:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 8044122:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) +
 8044124:	3218      	adds	r2, #24
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) +
               ( ( crcOn == true ) ? 2 : 0 ) 
 8044126:	b141      	cbz	r1, 804413a <RadioGetGfskTimeOnAirNumerator+0x22>
 8044128:	2302      	movs	r3, #2
               ( 0 ) +
 804412a:	f89d 0000 	ldrb.w	r0, [sp]
 804412e:	4418      	add	r0, r3
               ) << 3 
             );
}
 8044130:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8044134:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) +
 8044136:	2000      	movs	r0, #0
 8044138:	e7f3      	b.n	8044122 <RadioGetGfskTimeOnAirNumerator+0xa>
               ( ( crcOn == true ) ? 2 : 0 ) 
 804413a:	2300      	movs	r3, #0
 804413c:	e7f5      	b.n	804412a <RadioGetGfskTimeOnAirNumerator+0x12>

0804413e <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 804413e:	b4f0      	push	{r4, r5, r6, r7}
 8044140:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8044144:	f89d 4018 	ldrb.w	r4, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8044148:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 804414a:	1f4d      	subs	r5, r1, #5
 804414c:	2d01      	cmp	r5, #1
 804414e:	d92d      	bls.n	80441ac <RadioGetLoRaTimeOnAirNumerator+0x6e>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8044150:	b918      	cbnz	r0, 804415a <RadioGetLoRaTimeOnAirNumerator+0x1c>
 8044152:	f1a1 050b 	sub.w	r5, r1, #11
 8044156:	2d01      	cmp	r5, #1
 8044158:	d930      	bls.n	80441bc <RadioGetLoRaTimeOnAirNumerator+0x7e>
 804415a:	2801      	cmp	r0, #1
 804415c:	d02a      	beq.n	80441b4 <RadioGetLoRaTimeOnAirNumerator+0x76>
    bool    lowDatareOptimize = false;
 804415e:	2700      	movs	r7, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8044160:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8044164:	00ed      	lsls	r5, r5, #3
                            ( crcOn ? 16 : 0 ) -
 8044166:	b36c      	cbz	r4, 80441c4 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8044168:	2410      	movs	r4, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 804416a:	4425      	add	r5, r4
                            ( 4 * datarate ) +
 804416c:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 804416e:	eba5 0581 	sub.w	r5, r5, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8044172:	b34e      	cbz	r6, 80441c8 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8044174:	2400      	movs	r4, #0
                            ( 4 * datarate ) +
 8044176:	442c      	add	r4, r5

    if( datarate <= 6 )
 8044178:	2906      	cmp	r1, #6
 804417a:	d903      	bls.n	8044184 <RadioGetLoRaTimeOnAirNumerator+0x46>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 804417c:	3408      	adds	r4, #8

        if( lowDatareOptimize == true )
 804417e:	b10f      	cbz	r7, 8044184 <RadioGetLoRaTimeOnAirNumerator+0x46>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8044180:	1e88      	subs	r0, r1, #2
 8044182:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8044184:	2c00      	cmp	r4, #0
 8044186:	db21      	blt.n	80441cc <RadioGetLoRaTimeOnAirNumerator+0x8e>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8044188:	4404      	add	r4, r0
 804418a:	3c01      	subs	r4, #1
 804418c:	fb94 f4f0 	sdiv	r4, r4, r0
 8044190:	fb02 3304 	mla	r3, r2, r4, r3
    int32_t intermediate =
 8044194:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8044198:	2906      	cmp	r1, #6
 804419a:	d801      	bhi.n	80441a0 <RadioGetLoRaTimeOnAirNumerator+0x62>
    {
        intermediate += 2;
 804419c:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80441a0:	0080      	lsls	r0, r0, #2
 80441a2:	3001      	adds	r0, #1
 80441a4:	3902      	subs	r1, #2
}
 80441a6:	4088      	lsls	r0, r1
 80441a8:	bcf0      	pop	{r4, r5, r6, r7}
 80441aa:	4770      	bx	lr
        if( preambleLen < 12 )
 80441ac:	2b0b      	cmp	r3, #11
 80441ae:	d8cf      	bhi.n	8044150 <RadioGetLoRaTimeOnAirNumerator+0x12>
            preambleLen = 12;
 80441b0:	230c      	movs	r3, #12
 80441b2:	e7cd      	b.n	8044150 <RadioGetLoRaTimeOnAirNumerator+0x12>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80441b4:	290c      	cmp	r1, #12
 80441b6:	d003      	beq.n	80441c0 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 80441b8:	2700      	movs	r7, #0
 80441ba:	e7d1      	b.n	8044160 <RadioGetLoRaTimeOnAirNumerator+0x22>
        lowDatareOptimize = true;
 80441bc:	2701      	movs	r7, #1
 80441be:	e7cf      	b.n	8044160 <RadioGetLoRaTimeOnAirNumerator+0x22>
 80441c0:	2701      	movs	r7, #1
 80441c2:	e7cd      	b.n	8044160 <RadioGetLoRaTimeOnAirNumerator+0x22>
                            ( crcOn ? 16 : 0 ) -
 80441c4:	2400      	movs	r4, #0
 80441c6:	e7d0      	b.n	804416a <RadioGetLoRaTimeOnAirNumerator+0x2c>
                            ( fixLen ? 0 : 20 );
 80441c8:	2414      	movs	r4, #20
 80441ca:	e7d4      	b.n	8044176 <RadioGetLoRaTimeOnAirNumerator+0x38>
        ceilNumerator = 0;
 80441cc:	2400      	movs	r4, #0
 80441ce:	e7db      	b.n	8044188 <RadioGetLoRaTimeOnAirNumerator+0x4a>

080441d0 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 80441d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80441d2:	b085      	sub	sp, #20
 80441d4:	460e      	mov	r6, r1
 80441d6:	4615      	mov	r5, r2
 80441d8:	4619      	mov	r1, r3
 80441da:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80441de:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80441e2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80441e6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 80441ea:	b148      	cbz	r0, 8044200 <RadioTimeOnAir+0x30>
 80441ec:	2801      	cmp	r0, #1
 80441ee:	d012      	beq.n	8044216 <RadioTimeOnAir+0x46>
 80441f0:	2501      	movs	r5, #1
 80441f2:	2400      	movs	r4, #0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 80441f4:	1960      	adds	r0, r4, r5
 80441f6:	3801      	subs	r0, #1
}
 80441f8:	fbb0 f0f5 	udiv	r0, r0, r5
 80441fc:	b005      	add	sp, #20
 80441fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8044200:	f8cd c004 	str.w	ip, [sp, #4]
 8044204:	9700      	str	r7, [sp, #0]
 8044206:	4628      	mov	r0, r5
 8044208:	f7ff ff86 	bl	8044118 <RadioGetGfskTimeOnAirNumerator>
 804420c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8044210:	fb04 f400 	mul.w	r4, r4, r0
        break;
 8044214:	e7ee      	b.n	80441f4 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8044216:	f8cd c008 	str.w	ip, [sp, #8]
 804421a:	9701      	str	r7, [sp, #4]
 804421c:	9300      	str	r3, [sp, #0]
 804421e:	4613      	mov	r3, r2
 8044220:	460a      	mov	r2, r1
 8044222:	4629      	mov	r1, r5
 8044224:	4630      	mov	r0, r6
 8044226:	f7ff ff8a 	bl	804413e <RadioGetLoRaTimeOnAirNumerator>
 804422a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 804422e:	fb04 f400 	mul.w	r4, r4, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8044232:	4b03      	ldr	r3, [pc, #12]	; (8044240 <RadioTimeOnAir+0x70>)
 8044234:	5d98      	ldrb	r0, [r3, r6]
 8044236:	f7ff ff45 	bl	80440c4 <RadioGetLoRaBandwidthInHz>
 804423a:	4605      	mov	r5, r0
        break;
 804423c:	e7da      	b.n	80441f4 <RadioTimeOnAir+0x24>
 804423e:	bf00      	nop
 8044240:	08059c78 	.word	0x08059c78

08044244 <RadioOnTxTimeoutIrq>:
{
    return lr1110_board_get_tcxo_wakeup_time( &LR1110 ) + 3;
}

void RadioOnTxTimeoutIrq( void* context )
{
 8044244:	b508      	push	{r3, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8044246:	4b03      	ldr	r3, [pc, #12]	; (8044254 <RadioOnTxTimeoutIrq+0x10>)
 8044248:	681b      	ldr	r3, [r3, #0]
 804424a:	b113      	cbz	r3, 8044252 <RadioOnTxTimeoutIrq+0xe>
 804424c:	685b      	ldr	r3, [r3, #4]
 804424e:	b103      	cbz	r3, 8044252 <RadioOnTxTimeoutIrq+0xe>
    {
        RadioEvents->TxTimeout( );
 8044250:	4798      	blx	r3
    }
}
 8044252:	bd08      	pop	{r3, pc}
 8044254:	200188d4 	.word	0x200188d4

08044258 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
 8044258:	b508      	push	{r3, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 804425a:	4b03      	ldr	r3, [pc, #12]	; (8044268 <RadioOnRxTimeoutIrq+0x10>)
 804425c:	681b      	ldr	r3, [r3, #0]
 804425e:	b113      	cbz	r3, 8044266 <RadioOnRxTimeoutIrq+0xe>
 8044260:	68db      	ldr	r3, [r3, #12]
 8044262:	b103      	cbz	r3, 8044266 <RadioOnRxTimeoutIrq+0xe>
    {
        RadioEvents->RxTimeout( );
 8044264:	4798      	blx	r3
    }
}
 8044266:	bd08      	pop	{r3, pc}
 8044268:	200188d4 	.word	0x200188d4

0804426c <RadioOnDioIrq>:

void RadioOnDioIrq( void* context )
{
    IrqFired = true;
 804426c:	4b01      	ldr	r3, [pc, #4]	; (8044274 <RadioOnDioIrq+0x8>)
 804426e:	2201      	movs	r2, #1
 8044270:	701a      	strb	r2, [r3, #0]
}
 8044272:	4770      	bx	lr
 8044274:	200188d0 	.word	0x200188d0

08044278 <RadioStandby>:
{
 8044278:	b510      	push	{r4, lr}
    lr1110_system_set_standby( &LR1110, LR1110_SYSTEM_STANDBY_CFG_RC );
 804427a:	4c05      	ldr	r4, [pc, #20]	; (8044290 <RadioStandby+0x18>)
 804427c:	2100      	movs	r1, #0
 804427e:	4620      	mov	r0, r4
 8044280:	f001 ff49 	bl	8046116 <lr1110_system_set_standby>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_STDBY_RC );
 8044284:	2101      	movs	r1, #1
 8044286:	4620      	mov	r0, r4
 8044288:	f7ff fea6 	bl	8043fd8 <lr1110_hal_set_operating_mode>
}
 804428c:	bd10      	pop	{r4, pc}
 804428e:	bf00      	nop
 8044290:	2001b0b8 	.word	0x2001b0b8

08044294 <RadioInit>:
{
 8044294:	b510      	push	{r4, lr}
    RadioEvents = events;
 8044296:	4b14      	ldr	r3, [pc, #80]	; (80442e8 <RadioInit+0x54>)
 8044298:	6018      	str	r0, [r3, #0]
    lr1110_board_init( &LR1110, RadioOnDioIrq );
 804429a:	4c14      	ldr	r4, [pc, #80]	; (80442ec <RadioInit+0x58>)
 804429c:	4914      	ldr	r1, [pc, #80]	; (80442f0 <RadioInit+0x5c>)
 804429e:	4620      	mov	r0, r4
 80442a0:	f7ff fe9e 	bl	8043fe0 <lr1110_board_init>
    lr1110_system_set_standby( &LR1110, LR1110_SYSTEM_STANDBY_CFG_RC );
 80442a4:	2100      	movs	r1, #0
 80442a6:	4620      	mov	r0, r4
 80442a8:	f001 ff35 	bl	8046116 <lr1110_system_set_standby>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_STDBY_RC );
 80442ac:	2101      	movs	r1, #1
 80442ae:	4620      	mov	r0, r4
 80442b0:	f7ff fe92 	bl	8043fd8 <lr1110_hal_set_operating_mode>
    lr1110_system_set_reg_mode( &LR1110, LR1110_SYSTEM_REG_MODE_LDO );
 80442b4:	2100      	movs	r1, #0
 80442b6:	4620      	mov	r0, r4
 80442b8:	f001 fe80 	bl	8045fbc <lr1110_system_set_reg_mode>
    lr1110_radio_set_tx_params( &LR1110, 0, LR1110_RADIO_RAMP_200_US );
 80442bc:	2204      	movs	r2, #4
 80442be:	2100      	movs	r1, #0
 80442c0:	4620      	mov	r0, r4
 80442c2:	f001 fca4 	bl	8045c0e <lr1110_radio_set_tx_params>
    lr1110_system_set_dio_irq_params( &LR1110, LR1110_SYSTEM_IRQ_ALL_MASK, LR1110_SYSTEM_IRQ_NONE );
 80442c6:	2200      	movs	r2, #0
 80442c8:	490a      	ldr	r1, [pc, #40]	; (80442f4 <RadioInit+0x60>)
 80442ca:	4620      	mov	r0, r4
 80442cc:	f001 feb2 	bl	8046034 <lr1110_system_set_dio_irq_params>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 80442d0:	4909      	ldr	r1, [pc, #36]	; (80442f8 <RadioInit+0x64>)
 80442d2:	480a      	ldr	r0, [pc, #40]	; (80442fc <RadioInit+0x68>)
 80442d4:	f7fe fec6 	bl	8043064 <TimerInit>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80442d8:	4909      	ldr	r1, [pc, #36]	; (8044300 <RadioInit+0x6c>)
 80442da:	480a      	ldr	r0, [pc, #40]	; (8044304 <RadioInit+0x70>)
 80442dc:	f7fe fec2 	bl	8043064 <TimerInit>
    IrqFired = false;
 80442e0:	4b09      	ldr	r3, [pc, #36]	; (8044308 <RadioInit+0x74>)
 80442e2:	2200      	movs	r2, #0
 80442e4:	701a      	strb	r2, [r3, #0]
}
 80442e6:	bd10      	pop	{r4, pc}
 80442e8:	200188d4 	.word	0x200188d4
 80442ec:	2001b0b8 	.word	0x2001b0b8
 80442f0:	0804426d 	.word	0x0804426d
 80442f4:	03f807fc 	.word	0x03f807fc
 80442f8:	08044245 	.word	0x08044245
 80442fc:	2001b174 	.word	0x2001b174
 8044300:	08044259 	.word	0x08044259
 8044304:	2001b298 	.word	0x2001b298
 8044308:	200188d0 	.word	0x200188d0

0804430c <RadioGetStatus>:
{
 804430c:	b508      	push	{r3, lr}
    switch( lr1110_hal_get_operating_mode( &LR1110 ) )
 804430e:	480a      	ldr	r0, [pc, #40]	; (8044338 <RadioGetStatus+0x2c>)
 8044310:	f7ff fd92 	bl	8043e38 <lr1110_hal_get_operating_mode>
 8044314:	2807      	cmp	r0, #7
 8044316:	d805      	bhi.n	8044324 <RadioGetStatus+0x18>
 8044318:	2805      	cmp	r0, #5
 804431a:	d207      	bcs.n	804432c <RadioGetStatus+0x20>
 804431c:	2804      	cmp	r0, #4
 804431e:	d107      	bne.n	8044330 <RadioGetStatus+0x24>
 8044320:	2002      	movs	r0, #2
}
 8044322:	bd08      	pop	{r3, pc}
    switch( lr1110_hal_get_operating_mode( &LR1110 ) )
 8044324:	2808      	cmp	r0, #8
 8044326:	d105      	bne.n	8044334 <RadioGetStatus+0x28>
        return RF_CAD;
 8044328:	2003      	movs	r0, #3
 804432a:	e7fa      	b.n	8044322 <RadioGetStatus+0x16>
        return RF_RX_RUNNING;
 804432c:	2001      	movs	r0, #1
 804432e:	e7f8      	b.n	8044322 <RadioGetStatus+0x16>
        return RF_IDLE;
 8044330:	2000      	movs	r0, #0
 8044332:	e7f6      	b.n	8044322 <RadioGetStatus+0x16>
 8044334:	2000      	movs	r0, #0
 8044336:	e7f4      	b.n	8044322 <RadioGetStatus+0x16>
 8044338:	2001b0b8 	.word	0x2001b0b8

0804433c <RadioSetChannel>:
{
 804433c:	b508      	push	{r3, lr}
 804433e:	4601      	mov	r1, r0
    lr1110_radio_set_rf_freq( &LR1110, freq );
 8044340:	4801      	ldr	r0, [pc, #4]	; (8044348 <RadioSetChannel+0xc>)
 8044342:	f001 fb92 	bl	8045a6a <lr1110_radio_set_rf_freq>
}
 8044346:	bd08      	pop	{r3, pc}
 8044348:	2001b0b8 	.word	0x2001b0b8

0804434c <RadioRandom>:
{
 804434c:	b500      	push	{lr}
 804434e:	b083      	sub	sp, #12
    uint32_t rnd  = 0;
 8044350:	2300      	movs	r3, #0
 8044352:	9301      	str	r3, [sp, #4]
    RadioStandby( );
 8044354:	f7ff ff90 	bl	8044278 <RadioStandby>
    lr1110_system_get_random_number( &LR1110, &rnd );
 8044358:	a901      	add	r1, sp, #4
 804435a:	4803      	ldr	r0, [pc, #12]	; (8044368 <RadioRandom+0x1c>)
 804435c:	f001 feee 	bl	804613c <lr1110_system_get_random_number>
}
 8044360:	9801      	ldr	r0, [sp, #4]
 8044362:	b003      	add	sp, #12
 8044364:	f85d fb04 	ldr.w	pc, [sp], #4
 8044368:	2001b0b8 	.word	0x2001b0b8

0804436c <RadioSetMaxPayloadLength>:
{
 804436c:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 804436e:	2801      	cmp	r0, #1
 8044370:	d005      	beq.n	804437e <RadioSetMaxPayloadLength+0x12>
        if( LR1110.packet_params.packet.gfsk.header_type == LR1110_RADIO_GFSK_PKT_VAR_LEN )
 8044372:	4b0d      	ldr	r3, [pc, #52]	; (80443a8 <RadioSetMaxPayloadLength+0x3c>)
 8044374:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8044378:	2b01      	cmp	r3, #1
 804437a:	d00a      	beq.n	8044392 <RadioSetMaxPayloadLength+0x26>
}
 804437c:	bd08      	pop	{r3, pc}
        LR1110.packet_params.packet.lora.pld_len_in_bytes = MaxPayloadLength = max;
 804437e:	4b0b      	ldr	r3, [pc, #44]	; (80443ac <RadioSetMaxPayloadLength+0x40>)
 8044380:	7019      	strb	r1, [r3, #0]
 8044382:	4809      	ldr	r0, [pc, #36]	; (80443a8 <RadioSetMaxPayloadLength+0x3c>)
 8044384:	f880 10b7 	strb.w	r1, [r0, #183]	; 0xb7
        lr1110_radio_set_lora_pkt_params( &LR1110, &LR1110.packet_params.packet.lora );
 8044388:	f100 01b4 	add.w	r1, r0, #180	; 0xb4
 804438c:	f001 fc1b 	bl	8045bc6 <lr1110_radio_set_lora_pkt_params>
 8044390:	e7f4      	b.n	804437c <RadioSetMaxPayloadLength+0x10>
            LR1110.packet_params.packet.gfsk.pld_len_in_bytes = MaxPayloadLength = max;
 8044392:	4b06      	ldr	r3, [pc, #24]	; (80443ac <RadioSetMaxPayloadLength+0x40>)
 8044394:	7019      	strb	r1, [r3, #0]
 8044396:	4804      	ldr	r0, [pc, #16]	; (80443a8 <RadioSetMaxPayloadLength+0x3c>)
 8044398:	f880 10b0 	strb.w	r1, [r0, #176]	; 0xb0
            lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
 804439c:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80443a0:	f001 fbe5 	bl	8045b6e <lr1110_radio_set_gfsk_pkt_params>
}
 80443a4:	e7ea      	b.n	804437c <RadioSetMaxPayloadLength+0x10>
 80443a6:	bf00      	nop
 80443a8:	2001b0b8 	.word	0x2001b0b8
 80443ac:	20018098 	.word	0x20018098

080443b0 <RadioWriteBuffer>:
{
 80443b0:	b508      	push	{r3, lr}
    lr1110_regmem_write_buffer8( &LR1110, buffer, size );
 80443b2:	4802      	ldr	r0, [pc, #8]	; (80443bc <RadioWriteBuffer+0xc>)
 80443b4:	f001 fd59 	bl	8045e6a <lr1110_regmem_write_buffer8>
}
 80443b8:	bd08      	pop	{r3, pc}
 80443ba:	bf00      	nop
 80443bc:	2001b0b8 	.word	0x2001b0b8

080443c0 <RadioSend>:
{
 80443c0:	b570      	push	{r4, r5, r6, lr}
 80443c2:	b082      	sub	sp, #8
 80443c4:	4606      	mov	r6, r0
 80443c6:	460c      	mov	r4, r1
    lr1110_system_set_dio_irq_params( &LR1110, LR1110_SYSTEM_IRQ_TX_DONE | LR1110_SYSTEM_IRQ_TIMEOUT,
 80443c8:	4d1b      	ldr	r5, [pc, #108]	; (8044438 <RadioSend+0x78>)
 80443ca:	2200      	movs	r2, #0
 80443cc:	f240 4104 	movw	r1, #1028	; 0x404
 80443d0:	4628      	mov	r0, r5
 80443d2:	f001 fe2f 	bl	8046034 <lr1110_system_set_dio_irq_params>
    lr1110_radio_get_pkt_type( &LR1110, &packet_type );
 80443d6:	f10d 0107 	add.w	r1, sp, #7
 80443da:	4628      	mov	r0, r5
 80443dc:	f001 fa3c 	bl	8045858 <lr1110_radio_get_pkt_type>
    if( packet_type == LR1110_RADIO_PKT_TYPE_LORA )
 80443e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80443e4:	2b02      	cmp	r3, #2
 80443e6:	d01f      	beq.n	8044428 <RadioSend+0x68>
        LR1110.packet_params.packet.gfsk.pld_len_in_bytes = size;
 80443e8:	4813      	ldr	r0, [pc, #76]	; (8044438 <RadioSend+0x78>)
 80443ea:	f880 40b0 	strb.w	r4, [r0, #176]	; 0xb0
        lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
 80443ee:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
 80443f2:	f001 fbbc 	bl	8045b6e <lr1110_radio_set_gfsk_pkt_params>
    lr1110_regmem_write_buffer8( &LR1110, buffer, size );
 80443f6:	4d10      	ldr	r5, [pc, #64]	; (8044438 <RadioSend+0x78>)
 80443f8:	4622      	mov	r2, r4
 80443fa:	4631      	mov	r1, r6
 80443fc:	4628      	mov	r0, r5
 80443fe:	f001 fd34 	bl	8045e6a <lr1110_regmem_write_buffer8>
    lr1110_radio_set_tx( &LR1110, 0 );
 8044402:	2100      	movs	r1, #0
 8044404:	4628      	mov	r0, r5
 8044406:	f001 fb15 	bl	8045a34 <lr1110_radio_set_tx>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_TX );
 804440a:	2104      	movs	r1, #4
 804440c:	4628      	mov	r0, r5
 804440e:	f7ff fde3 	bl	8043fd8 <lr1110_hal_set_operating_mode>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 8044412:	4c0a      	ldr	r4, [pc, #40]	; (804443c <RadioSend+0x7c>)
 8044414:	4b0a      	ldr	r3, [pc, #40]	; (8044440 <RadioSend+0x80>)
 8044416:	6819      	ldr	r1, [r3, #0]
 8044418:	4620      	mov	r0, r4
 804441a:	f7fe fedd 	bl	80431d8 <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 804441e:	4620      	mov	r0, r4
 8044420:	f7fe fe2a 	bl	8043078 <TimerStart>
}
 8044424:	b002      	add	sp, #8
 8044426:	bd70      	pop	{r4, r5, r6, pc}
        LR1110.packet_params.packet.lora.pld_len_in_bytes = size;
 8044428:	4628      	mov	r0, r5
 804442a:	f885 40b7 	strb.w	r4, [r5, #183]	; 0xb7
        lr1110_radio_set_lora_pkt_params( &LR1110, &LR1110.packet_params.packet.lora );
 804442e:	f105 01b4 	add.w	r1, r5, #180	; 0xb4
 8044432:	f001 fbc8 	bl	8045bc6 <lr1110_radio_set_lora_pkt_params>
 8044436:	e7de      	b.n	80443f6 <RadioSend+0x36>
 8044438:	2001b0b8 	.word	0x2001b0b8
 804443c:	2001b174 	.word	0x2001b174
 8044440:	200188e0 	.word	0x200188e0

08044444 <RadioSleep>:
{
 8044444:	b530      	push	{r4, r5, lr}
 8044446:	b083      	sub	sp, #12
    sleep_config.is_warm_start  = 1;
 8044448:	2301      	movs	r3, #1
 804444a:	f88d 3004 	strb.w	r3, [sp, #4]
    sleep_config.is_rtc_timeout = 0;
 804444e:	2400      	movs	r4, #0
 8044450:	f88d 4005 	strb.w	r4, [sp, #5]
    lr1110_system_set_sleep( &LR1110, sleep_config, 0 );
 8044454:	4d07      	ldr	r5, [pc, #28]	; (8044474 <RadioSleep+0x30>)
 8044456:	4622      	mov	r2, r4
 8044458:	9901      	ldr	r1, [sp, #4]
 804445a:	4628      	mov	r0, r5
 804445c:	f001 fe33 	bl	80460c6 <lr1110_system_set_sleep>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_SLEEP );
 8044460:	4621      	mov	r1, r4
 8044462:	4628      	mov	r0, r5
 8044464:	f7ff fdb8 	bl	8043fd8 <lr1110_hal_set_operating_mode>
    DelayMs( 2 );
 8044468:	2002      	movs	r0, #2
 804446a:	f7fc ff2d 	bl	80412c8 <DelayMs>
}
 804446e:	b003      	add	sp, #12
 8044470:	bd30      	pop	{r4, r5, pc}
 8044472:	bf00      	nop
 8044474:	2001b0b8 	.word	0x2001b0b8

08044478 <RadioRx>:
{
 8044478:	b538      	push	{r3, r4, r5, lr}
 804447a:	4604      	mov	r4, r0
    lr1110_system_set_dio_irq_params(
 804447c:	4d16      	ldr	r5, [pc, #88]	; (80444d8 <RadioRx+0x60>)
 804447e:	2200      	movs	r2, #0
 8044480:	4916      	ldr	r1, [pc, #88]	; (80444dc <RadioRx+0x64>)
 8044482:	4628      	mov	r0, r5
 8044484:	f001 fdd6 	bl	8046034 <lr1110_system_set_dio_irq_params>
    lr1110_radio_cfg_rx_boosted( &LR1110, false );
 8044488:	2100      	movs	r1, #0
 804448a:	4628      	mov	r0, r5
 804448c:	f001 fc9e 	bl	8045dcc <lr1110_radio_cfg_rx_boosted>
    if( timeout != 0 )
 8044490:	b96c      	cbnz	r4, 80444ae <RadioRx+0x36>
    if( RxContinuous == true )
 8044492:	4b13      	ldr	r3, [pc, #76]	; (80444e0 <RadioRx+0x68>)
 8044494:	781b      	ldrb	r3, [r3, #0]
 8044496:	b19b      	cbz	r3, 80444c0 <RadioRx+0x48>
        lr1110_radio_set_rx( &LR1110, 0xFFFFFF );  // Rx Continuous
 8044498:	4c0f      	ldr	r4, [pc, #60]	; (80444d8 <RadioRx+0x60>)
 804449a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 804449e:	4620      	mov	r0, r4
 80444a0:	f001 faad 	bl	80459fe <lr1110_radio_set_rx>
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX_C );
 80444a4:	2106      	movs	r1, #6
 80444a6:	4620      	mov	r0, r4
 80444a8:	f7ff fd96 	bl	8043fd8 <lr1110_hal_set_operating_mode>
}
 80444ac:	bd38      	pop	{r3, r4, r5, pc}
        TimerSetValue( &RxTimeoutTimer, timeout );
 80444ae:	4d0d      	ldr	r5, [pc, #52]	; (80444e4 <RadioRx+0x6c>)
 80444b0:	4621      	mov	r1, r4
 80444b2:	4628      	mov	r0, r5
 80444b4:	f7fe fe90 	bl	80431d8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80444b8:	4628      	mov	r0, r5
 80444ba:	f7fe fddd 	bl	8043078 <TimerStart>
 80444be:	e7e8      	b.n	8044492 <RadioRx+0x1a>
        lr1110_radio_set_rx( &LR1110, ( RxTimeout * 32768 ) );
 80444c0:	4b09      	ldr	r3, [pc, #36]	; (80444e8 <RadioRx+0x70>)
 80444c2:	6819      	ldr	r1, [r3, #0]
 80444c4:	4c04      	ldr	r4, [pc, #16]	; (80444d8 <RadioRx+0x60>)
 80444c6:	03c9      	lsls	r1, r1, #15
 80444c8:	4620      	mov	r0, r4
 80444ca:	f001 fa98 	bl	80459fe <lr1110_radio_set_rx>
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX );
 80444ce:	2105      	movs	r1, #5
 80444d0:	4620      	mov	r0, r4
 80444d2:	f7ff fd81 	bl	8043fd8 <lr1110_hal_set_operating_mode>
}
 80444d6:	e7e9      	b.n	80444ac <RadioRx+0x34>
 80444d8:	2001b0b8 	.word	0x2001b0b8
 80444dc:	03f807fc 	.word	0x03f807fc
 80444e0:	200188da 	.word	0x200188da
 80444e4:	2001b298 	.word	0x2001b298
 80444e8:	200188dc 	.word	0x200188dc

080444ec <RadioRxBoosted>:
{
 80444ec:	b538      	push	{r3, r4, r5, lr}
 80444ee:	4604      	mov	r4, r0
    lr1110_system_set_dio_irq_params(
 80444f0:	2200      	movs	r2, #0
 80444f2:	4916      	ldr	r1, [pc, #88]	; (804454c <RadioRxBoosted+0x60>)
 80444f4:	4816      	ldr	r0, [pc, #88]	; (8044550 <RadioRxBoosted+0x64>)
 80444f6:	f001 fd9d 	bl	8046034 <lr1110_system_set_dio_irq_params>
    if( timeout != 0 )
 80444fa:	b98c      	cbnz	r4, 8044520 <RadioRxBoosted+0x34>
    lr1110_radio_cfg_rx_boosted( &LR1110, true );
 80444fc:	2101      	movs	r1, #1
 80444fe:	4814      	ldr	r0, [pc, #80]	; (8044550 <RadioRxBoosted+0x64>)
 8044500:	f001 fc64 	bl	8045dcc <lr1110_radio_cfg_rx_boosted>
    if( RxContinuous == true )
 8044504:	4b13      	ldr	r3, [pc, #76]	; (8044554 <RadioRxBoosted+0x68>)
 8044506:	781b      	ldrb	r3, [r3, #0]
 8044508:	b19b      	cbz	r3, 8044532 <RadioRxBoosted+0x46>
        lr1110_radio_set_rx( &LR1110, 0xFFFFFF );  // Rx Continuous
 804450a:	4c11      	ldr	r4, [pc, #68]	; (8044550 <RadioRxBoosted+0x64>)
 804450c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8044510:	4620      	mov	r0, r4
 8044512:	f001 fa74 	bl	80459fe <lr1110_radio_set_rx>
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX_C );
 8044516:	2106      	movs	r1, #6
 8044518:	4620      	mov	r0, r4
 804451a:	f7ff fd5d 	bl	8043fd8 <lr1110_hal_set_operating_mode>
}
 804451e:	bd38      	pop	{r3, r4, r5, pc}
        TimerSetValue( &RxTimeoutTimer, timeout );
 8044520:	4d0d      	ldr	r5, [pc, #52]	; (8044558 <RadioRxBoosted+0x6c>)
 8044522:	4621      	mov	r1, r4
 8044524:	4628      	mov	r0, r5
 8044526:	f7fe fe57 	bl	80431d8 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 804452a:	4628      	mov	r0, r5
 804452c:	f7fe fda4 	bl	8043078 <TimerStart>
 8044530:	e7e4      	b.n	80444fc <RadioRxBoosted+0x10>
        lr1110_radio_set_rx( &LR1110, ( RxTimeout * 32768 ) );
 8044532:	4b0a      	ldr	r3, [pc, #40]	; (804455c <RadioRxBoosted+0x70>)
 8044534:	6819      	ldr	r1, [r3, #0]
 8044536:	4c06      	ldr	r4, [pc, #24]	; (8044550 <RadioRxBoosted+0x64>)
 8044538:	03c9      	lsls	r1, r1, #15
 804453a:	4620      	mov	r0, r4
 804453c:	f001 fa5f 	bl	80459fe <lr1110_radio_set_rx>
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX );
 8044540:	2105      	movs	r1, #5
 8044542:	4620      	mov	r0, r4
 8044544:	f7ff fd48 	bl	8043fd8 <lr1110_hal_set_operating_mode>
}
 8044548:	e7e9      	b.n	804451e <RadioRxBoosted+0x32>
 804454a:	bf00      	nop
 804454c:	03f807fc 	.word	0x03f807fc
 8044550:	2001b0b8 	.word	0x2001b0b8
 8044554:	200188da 	.word	0x200188da
 8044558:	2001b298 	.word	0x2001b298
 804455c:	200188dc 	.word	0x200188dc

08044560 <RadioSetRxDutyCycle>:
{
 8044560:	b510      	push	{r4, lr}
 8044562:	460a      	mov	r2, r1
    lr1110_radio_set_rx_duty_cycle( &LR1110, rxTime, sleepTime, 0 );
 8044564:	4c05      	ldr	r4, [pc, #20]	; (804457c <RadioSetRxDutyCycle+0x1c>)
 8044566:	2300      	movs	r3, #0
 8044568:	4601      	mov	r1, r0
 804456a:	4620      	mov	r0, r4
 804456c:	f001 fb64 	bl	8045c38 <lr1110_radio_set_rx_duty_cycle>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX_DC );
 8044570:	2107      	movs	r1, #7
 8044572:	4620      	mov	r0, r4
 8044574:	f7ff fd30 	bl	8043fd8 <lr1110_hal_set_operating_mode>
}
 8044578:	bd10      	pop	{r4, pc}
 804457a:	bf00      	nop
 804457c:	2001b0b8 	.word	0x2001b0b8

08044580 <RadioStartCad>:
{
 8044580:	b510      	push	{r4, lr}
    lr1110_radio_set_cad( &LR1110 );
 8044582:	4c04      	ldr	r4, [pc, #16]	; (8044594 <RadioStartCad+0x14>)
 8044584:	4620      	mov	r0, r4
 8044586:	f001 fbad 	bl	8045ce4 <lr1110_radio_set_cad>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_CAD );
 804458a:	2108      	movs	r1, #8
 804458c:	4620      	mov	r0, r4
 804458e:	f7ff fd23 	bl	8043fd8 <lr1110_hal_set_operating_mode>
}
 8044592:	bd10      	pop	{r4, pc}
 8044594:	2001b0b8 	.word	0x2001b0b8

08044598 <RadioSetTxContinuousWave>:
{
 8044598:	b570      	push	{r4, r5, r6, lr}
 804459a:	460e      	mov	r6, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 804459c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80445a0:	fb05 f502 	mul.w	r5, r5, r2
    lr1110_radio_set_rf_freq( &LR1110, freq );
 80445a4:	4c0c      	ldr	r4, [pc, #48]	; (80445d8 <RadioSetTxContinuousWave+0x40>)
 80445a6:	4601      	mov	r1, r0
 80445a8:	4620      	mov	r0, r4
 80445aa:	f001 fa5e 	bl	8045a6a <lr1110_radio_set_rf_freq>
    lr1110_board_set_rf_tx_power( &LR1110, power );
 80445ae:	4631      	mov	r1, r6
 80445b0:	4620      	mov	r0, r4
 80445b2:	f7ff fc1b 	bl	8043dec <lr1110_board_set_rf_tx_power>
    lr1110_radio_set_tx_cw( &LR1110 );
 80445b6:	4620      	mov	r0, r4
 80445b8:	f001 fba4 	bl	8045d04 <lr1110_radio_set_tx_cw>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_TX );
 80445bc:	2104      	movs	r1, #4
 80445be:	4620      	mov	r0, r4
 80445c0:	f7ff fd0a 	bl	8043fd8 <lr1110_hal_set_operating_mode>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80445c4:	4c05      	ldr	r4, [pc, #20]	; (80445dc <RadioSetTxContinuousWave+0x44>)
 80445c6:	4629      	mov	r1, r5
 80445c8:	4620      	mov	r0, r4
 80445ca:	f7fe fe05 	bl	80431d8 <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 80445ce:	4620      	mov	r0, r4
 80445d0:	f7fe fd52 	bl	8043078 <TimerStart>
}
 80445d4:	bd70      	pop	{r4, r5, r6, pc}
 80445d6:	bf00      	nop
 80445d8:	2001b0b8 	.word	0x2001b0b8
 80445dc:	2001b174 	.word	0x2001b174

080445e0 <RadioRssi>:
{
 80445e0:	b500      	push	{lr}
 80445e2:	b083      	sub	sp, #12
    int8_t rssi = 0;
 80445e4:	2300      	movs	r3, #0
 80445e6:	f88d 3007 	strb.w	r3, [sp, #7]
    lr1110_radio_get_rssi_inst( &LR1110, &rssi );
 80445ea:	f10d 0107 	add.w	r1, sp, #7
 80445ee:	4804      	ldr	r0, [pc, #16]	; (8044600 <RadioRssi+0x20>)
 80445f0:	f001 f9ba 	bl	8045968 <lr1110_radio_get_rssi_inst>
}
 80445f4:	f99d 0007 	ldrsb.w	r0, [sp, #7]
 80445f8:	b003      	add	sp, #12
 80445fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80445fe:	bf00      	nop
 8044600:	2001b0b8 	.word	0x2001b0b8

08044604 <RadioWrite>:
{
 8044604:	b500      	push	{lr}
 8044606:	b083      	sub	sp, #12
 8044608:	f88d 1007 	strb.w	r1, [sp, #7]
    lr1110_regmem_write_mem8( &LR1110, addr, &data, 1 );
 804460c:	2301      	movs	r3, #1
 804460e:	f10d 0207 	add.w	r2, sp, #7
 8044612:	4601      	mov	r1, r0
 8044614:	4802      	ldr	r0, [pc, #8]	; (8044620 <RadioWrite+0x1c>)
 8044616:	f001 fc00 	bl	8045e1a <lr1110_regmem_write_mem8>
}
 804461a:	b003      	add	sp, #12
 804461c:	f85d fb04 	ldr.w	pc, [sp], #4
 8044620:	2001b0b8 	.word	0x2001b0b8

08044624 <RadioRead>:
{
 8044624:	b500      	push	{lr}
 8044626:	b083      	sub	sp, #12
 8044628:	4601      	mov	r1, r0
    uint8_t data = 0;
 804462a:	2300      	movs	r3, #0
 804462c:	f88d 3007 	strb.w	r3, [sp, #7]
    lr1110_regmem_read_mem8( &LR1110, addr, &data, 1 );
 8044630:	2301      	movs	r3, #1
 8044632:	f10d 0207 	add.w	r2, sp, #7
 8044636:	4804      	ldr	r0, [pc, #16]	; (8044648 <RadioRead+0x24>)
 8044638:	f001 fc03 	bl	8045e42 <lr1110_regmem_read_mem8>
}
 804463c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8044640:	b003      	add	sp, #12
 8044642:	f85d fb04 	ldr.w	pc, [sp], #4
 8044646:	bf00      	nop
 8044648:	2001b0b8 	.word	0x2001b0b8

0804464c <RadioReadBuffer>:
{
 804464c:	b508      	push	{r3, lr}
 804464e:	4613      	mov	r3, r2
    lr1110_regmem_read_buffer8( &LR1110, buffer, addr, size );
 8044650:	b2c2      	uxtb	r2, r0
 8044652:	4802      	ldr	r0, [pc, #8]	; (804465c <RadioReadBuffer+0x10>)
 8044654:	f001 fc1a 	bl	8045e8c <lr1110_regmem_read_buffer8>
}
 8044658:	bd08      	pop	{r3, pc}
 804465a:	bf00      	nop
 804465c:	2001b0b8 	.word	0x2001b0b8

08044660 <RadioSetPublicNetwork>:
{
 8044660:	b510      	push	{r4, lr}
 8044662:	4604      	mov	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8044664:	4b08      	ldr	r3, [pc, #32]	; (8044688 <RadioSetPublicNetwork+0x28>)
 8044666:	7018      	strb	r0, [r3, #0]
 8044668:	7058      	strb	r0, [r3, #1]
    RadioSetModem( MODEM_LORA );
 804466a:	2001      	movs	r0, #1
 804466c:	f000 f810 	bl	8044690 <RadioSetModem>
    if( enable == true )
 8044670:	b124      	cbz	r4, 804467c <RadioSetPublicNetwork+0x1c>
        lr1110_radio_set_lora_sync_word( &LR1110, LR1110_RADIO_LORA_NETWORK_PUBLIC );
 8044672:	2101      	movs	r1, #1
 8044674:	4805      	ldr	r0, [pc, #20]	; (804468c <RadioSetPublicNetwork+0x2c>)
 8044676:	f001 f9af 	bl	80459d8 <lr1110_radio_set_lora_sync_word>
}
 804467a:	bd10      	pop	{r4, pc}
        lr1110_radio_set_lora_sync_word( &LR1110, LR1110_RADIO_LORA_NETWORK_PRIVATE );
 804467c:	2100      	movs	r1, #0
 804467e:	4803      	ldr	r0, [pc, #12]	; (804468c <RadioSetPublicNetwork+0x2c>)
 8044680:	f001 f9aa 	bl	80459d8 <lr1110_radio_set_lora_sync_word>
}
 8044684:	e7f9      	b.n	804467a <RadioSetPublicNetwork+0x1a>
 8044686:	bf00      	nop
 8044688:	200188d8 	.word	0x200188d8
 804468c:	2001b0b8 	.word	0x2001b0b8

08044690 <RadioSetModem>:
{
 8044690:	b508      	push	{r3, lr}
    switch( modem )
 8044692:	2801      	cmp	r0, #1
 8044694:	d007      	beq.n	80446a6 <RadioSetModem+0x16>
    	lr1110_radio_set_pkt_type( &LR1110, LR1110_RADIO_PKT_TYPE_GFSK );
 8044696:	2101      	movs	r1, #1
 8044698:	4809      	ldr	r0, [pc, #36]	; (80446c0 <RadioSetModem+0x30>)
 804469a:	f001 fa04 	bl	8045aa6 <lr1110_radio_set_pkt_type>
        RadioPublicNetwork.Current = false;
 804469e:	4b09      	ldr	r3, [pc, #36]	; (80446c4 <RadioSetModem+0x34>)
 80446a0:	2200      	movs	r2, #0
 80446a2:	705a      	strb	r2, [r3, #1]
}
 80446a4:	bd08      	pop	{r3, pc}
        lr1110_radio_set_pkt_type( &LR1110, LR1110_RADIO_PKT_TYPE_LORA );
 80446a6:	2102      	movs	r1, #2
 80446a8:	4805      	ldr	r0, [pc, #20]	; (80446c0 <RadioSetModem+0x30>)
 80446aa:	f001 f9fc 	bl	8045aa6 <lr1110_radio_set_pkt_type>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 80446ae:	4b05      	ldr	r3, [pc, #20]	; (80446c4 <RadioSetModem+0x34>)
 80446b0:	785a      	ldrb	r2, [r3, #1]
 80446b2:	7818      	ldrb	r0, [r3, #0]
 80446b4:	4282      	cmp	r2, r0
 80446b6:	d0f5      	beq.n	80446a4 <RadioSetModem+0x14>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 80446b8:	7058      	strb	r0, [r3, #1]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 80446ba:	f7ff ffd1 	bl	8044660 <RadioSetPublicNetwork>
}
 80446be:	e7f1      	b.n	80446a4 <RadioSetModem+0x14>
 80446c0:	2001b0b8 	.word	0x2001b0b8
 80446c4:	200188d8 	.word	0x200188d8

080446c8 <RadioSetRxConfig>:
{
 80446c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80446cc:	b083      	sub	sp, #12
 80446ce:	460d      	mov	r5, r1
 80446d0:	4616      	mov	r6, r2
 80446d2:	461c      	mov	r4, r3
 80446d4:	f8bd 8034 	ldrh.w	r8, [sp, #52]	; 0x34
 80446d8:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
 80446dc:	f89d 703c 	ldrb.w	r7, [sp, #60]	; 0x3c
 80446e0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
 80446e4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
    RxContinuous = rxContinuous;
 80446e8:	4a6f      	ldr	r2, [pc, #444]	; (80448a8 <RadioSetRxConfig+0x1e0>)
 80446ea:	7013      	strb	r3, [r2, #0]
    if( rxContinuous == true )
 80446ec:	b10b      	cbz	r3, 80446f2 <RadioSetRxConfig+0x2a>
        symbTimeout = 0;
 80446ee:	f04f 0900 	mov.w	r9, #0
    if( fixLen == true )
 80446f2:	b14f      	cbz	r7, 8044708 <RadioSetRxConfig+0x40>
        MaxPayloadLength = payloadLen;
 80446f4:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80446f8:	4b6c      	ldr	r3, [pc, #432]	; (80448ac <RadioSetRxConfig+0x1e4>)
 80446fa:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80446fc:	b140      	cbz	r0, 8044710 <RadioSetRxConfig+0x48>
 80446fe:	2801      	cmp	r0, #1
 8044700:	d072      	beq.n	80447e8 <RadioSetRxConfig+0x120>
}
 8044702:	b003      	add	sp, #12
 8044704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8044708:	4b68      	ldr	r3, [pc, #416]	; (80448ac <RadioSetRxConfig+0x1e4>)
 804470a:	22ff      	movs	r2, #255	; 0xff
 804470c:	701a      	strb	r2, [r3, #0]
 804470e:	e7f5      	b.n	80446fc <RadioSetRxConfig+0x34>
        lr1110_radio_stop_timeout_on_preamble( &LR1110, false );
 8044710:	4c67      	ldr	r4, [pc, #412]	; (80448b0 <RadioSetRxConfig+0x1e8>)
 8044712:	2100      	movs	r1, #0
 8044714:	4620      	mov	r0, r4
 8044716:	f001 fad2 	bl	8045cbe <lr1110_radio_stop_timeout_on_preamble>
        LR1110.modulation_params.packet_type = LR1110_RADIO_PKT_TYPE_GFSK;
 804471a:	f04f 0b01 	mov.w	fp, #1
 804471e:	f884 b094 	strb.w	fp, [r4, #148]	; 0x94
        LR1110.modulation_params.modulation.gfsk.br_in_bps     = datarate;
 8044722:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
        LR1110.modulation_params.modulation.gfsk.pulse_shape = LR1110_RADIO_GFSK_PULSE_SHAPE_BT_1;
 8044726:	230b      	movs	r3, #11
 8044728:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
            ( lr1110_radio_gfsk_bw_t ) RadioGetFskBandwidthRegValue( bandwidth << 1 ); // LR1110 badwidth is double sided
 804472c:	fa05 f00b 	lsl.w	r0, r5, fp
 8044730:	f7ff fca8 	bl	8044084 <RadioGetFskBandwidthRegValue>
        LR1110.modulation_params.modulation.gfsk.bw_dsb_param =
 8044734:	f884 009d 	strb.w	r0, [r4, #157]	; 0x9d
        LR1110.packet_params.packet_type                     = LR1110_RADIO_PKT_TYPE_GFSK;
 8044738:	f884 b0a8 	strb.w	fp, [r4, #168]	; 0xa8
        LR1110.packet_params.packet.gfsk.preamble_len_in_bits = ( preambleLen << 3 );  // convert byte into bit
 804473c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8044740:	f8a4 80aa 	strh.w	r8, [r4, #170]	; 0xaa
        LR1110.packet_params.packet.gfsk.preamble_detector    = LR1110_RADIO_GFSK_PREAMBLE_DETECTOR_MIN_8BITS;
 8044744:	2304      	movs	r3, #4
 8044746:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
        LR1110.packet_params.packet.gfsk.sync_word_len_in_bits = 3 << 3;  // convert byte into bit
 804474a:	2318      	movs	r3, #24
 804474c:	f884 30ad 	strb.w	r3, [r4, #173]	; 0xad
        LR1110.packet_params.packet.gfsk.address_filtering         = LR1110_RADIO_GFSK_ADDRESS_FILTERING_DISABLE;
 8044750:	2300      	movs	r3, #0
 8044752:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
            ( fixLen == true ) ? LR1110_RADIO_GFSK_PKT_FIX_LEN : LR1110_RADIO_GFSK_PKT_VAR_LEN;
 8044756:	ea87 070b 	eor.w	r7, r7, fp
        LR1110.packet_params.packet.gfsk.header_type =
 804475a:	f884 70af 	strb.w	r7, [r4, #175]	; 0xaf
        LR1110.packet_params.packet.gfsk.pld_len_in_bytes = MaxPayloadLength;
 804475e:	4b53      	ldr	r3, [pc, #332]	; (80448ac <RadioSetRxConfig+0x1e4>)
 8044760:	781b      	ldrb	r3, [r3, #0]
 8044762:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
        if( crcOn == true )
 8044766:	f1ba 0f00 	cmp.w	sl, #0
 804476a:	d038      	beq.n	80447de <RadioSetRxConfig+0x116>
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_2_BYTES_INV;
 804476c:	2206      	movs	r2, #6
 804476e:	f884 20b1 	strb.w	r2, [r4, #177]	; 0xb1
        LR1110.packet_params.packet.gfsk.dc_free = LR1110_RADIO_GFSK_DC_FREE_WHITENING;
 8044772:	4c4f      	ldr	r4, [pc, #316]	; (80448b0 <RadioSetRxConfig+0x1e8>)
 8044774:	2301      	movs	r3, #1
 8044776:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
        RadioStandby( );
 804477a:	f7ff fd7d 	bl	8044278 <RadioStandby>
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PKT_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 804477e:	f894 0094 	ldrb.w	r0, [r4, #148]	; 0x94
 8044782:	3801      	subs	r0, #1
 8044784:	bf18      	it	ne
 8044786:	2001      	movne	r0, #1
 8044788:	f7ff ff82 	bl	8044690 <RadioSetModem>
        lr1110_radio_set_gfsk_mod_params( &LR1110, &LR1110.modulation_params.modulation.gfsk );
 804478c:	f104 0198 	add.w	r1, r4, #152	; 0x98
 8044790:	4620      	mov	r0, r4
 8044792:	f001 f99b 	bl	8045acc <lr1110_radio_set_gfsk_mod_params>
        lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
 8044796:	f104 01aa 	add.w	r1, r4, #170	; 0xaa
 804479a:	4620      	mov	r0, r4
 804479c:	f001 f9e7 	bl	8045b6e <lr1110_radio_set_gfsk_pkt_params>
        lr1110_radio_set_gfsk_sync_word( &LR1110, ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80447a0:	4a44      	ldr	r2, [pc, #272]	; (80448b4 <RadioSetRxConfig+0x1ec>)
 80447a2:	466b      	mov	r3, sp
 80447a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80447a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80447ac:	4619      	mov	r1, r3
 80447ae:	4620      	mov	r0, r4
 80447b0:	f001 f8f5 	bl	804599e <lr1110_radio_set_gfsk_sync_word>
        lr1110_radio_set_gfsk_crc_params( &LR1110, 0x1D0F, 0x1021 );
 80447b4:	f241 0221 	movw	r2, #4129	; 0x1021
 80447b8:	f641 510f 	movw	r1, #7439	; 0x1d0f
 80447bc:	4620      	mov	r0, r4
 80447be:	f001 fac4 	bl	8045d4a <lr1110_radio_set_gfsk_crc_params>
        lr1110_radio_set_gfsk_whitening_seed( &LR1110, 0x01FF );
 80447c2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80447c6:	4620      	mov	r0, r4
 80447c8:	f001 faea 	bl	8045da0 <lr1110_radio_set_gfsk_whitening_seed>
        RxTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 80447cc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80447d0:	fb02 f909 	mul.w	r9, r2, r9
 80447d4:	fbb9 f6f6 	udiv	r6, r9, r6
 80447d8:	4b37      	ldr	r3, [pc, #220]	; (80448b8 <RadioSetRxConfig+0x1f0>)
 80447da:	601e      	str	r6, [r3, #0]
        break;
 80447dc:	e791      	b.n	8044702 <RadioSetRxConfig+0x3a>
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_OFF;
 80447de:	4b34      	ldr	r3, [pc, #208]	; (80448b0 <RadioSetRxConfig+0x1e8>)
 80447e0:	2201      	movs	r2, #1
 80447e2:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 80447e6:	e7c4      	b.n	8044772 <RadioSetRxConfig+0xaa>
        lr1110_radio_stop_timeout_on_preamble( &LR1110, false );
 80447e8:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 80448b0 <RadioSetRxConfig+0x1e8>
 80447ec:	2100      	movs	r1, #0
 80447ee:	4658      	mov	r0, fp
 80447f0:	f001 fa65 	bl	8045cbe <lr1110_radio_stop_timeout_on_preamble>
        lr1110_radio_set_lora_sync_timeout( &LR1110, symbTimeout );
 80447f4:	fa5f f189 	uxtb.w	r1, r9
 80447f8:	4658      	mov	r0, fp
 80447fa:	f001 fa93 	bl	8045d24 <lr1110_radio_set_lora_sync_timeout>
        LR1110.modulation_params.packet_type            = LR1110_RADIO_PKT_TYPE_LORA;
 80447fe:	2302      	movs	r3, #2
 8044800:	f88b 3094 	strb.w	r3, [fp, #148]	; 0x94
        LR1110.modulation_params.modulation.lora.sf = ( lr1110_radio_lora_sf_t ) datarate;
 8044804:	b2f3      	uxtb	r3, r6
 8044806:	f88b 30a4 	strb.w	r3, [fp, #164]	; 0xa4
        LR1110.modulation_params.modulation.lora.bw = Bandwidths[bandwidth];
 804480a:	4a2c      	ldr	r2, [pc, #176]	; (80448bc <RadioSetRxConfig+0x1f4>)
 804480c:	5d52      	ldrb	r2, [r2, r5]
 804480e:	f88b 20a5 	strb.w	r2, [fp, #165]	; 0xa5
        LR1110.modulation_params.modulation.lora.cr = ( lr1110_radio_lora_cr_t ) coderate;
 8044812:	f88b 40a6 	strb.w	r4, [fp, #166]	; 0xa6
        if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8044816:	b91d      	cbnz	r5, 8044820 <RadioSetRxConfig+0x158>
 8044818:	f1a6 020b 	sub.w	r2, r6, #11
 804481c:	2a01      	cmp	r2, #1
 804481e:	d931      	bls.n	8044884 <RadioSetRxConfig+0x1bc>
 8044820:	2d01      	cmp	r5, #1
 8044822:	d02d      	beq.n	8044880 <RadioSetRxConfig+0x1b8>
            LR1110.modulation_params.modulation.lora.ldro = 0x00;
 8044824:	4a22      	ldr	r2, [pc, #136]	; (80448b0 <RadioSetRxConfig+0x1e8>)
 8044826:	2100      	movs	r1, #0
 8044828:	f882 10a7 	strb.w	r1, [r2, #167]	; 0xa7
        LR1110.packet_params.packet_type = LR1110_RADIO_PKT_TYPE_LORA;
 804482c:	4a20      	ldr	r2, [pc, #128]	; (80448b0 <RadioSetRxConfig+0x1e8>)
 804482e:	2102      	movs	r1, #2
 8044830:	f882 10a8 	strb.w	r1, [r2, #168]	; 0xa8
        if( ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF5 ) ||
 8044834:	3b05      	subs	r3, #5
 8044836:	b2db      	uxtb	r3, r3
 8044838:	2b01      	cmp	r3, #1
 804483a:	d928      	bls.n	804488e <RadioSetRxConfig+0x1c6>
            LR1110.packet_params.packet.lora.preamble_len_in_symb = preambleLen;
 804483c:	4b1c      	ldr	r3, [pc, #112]	; (80448b0 <RadioSetRxConfig+0x1e8>)
 804483e:	f8a3 80b4 	strh.w	r8, [r3, #180]	; 0xb4
        LR1110.packet_params.packet.lora.header_type = ( lr1110_radio_lora_pkt_len_modes_t ) fixLen;
 8044842:	4c1b      	ldr	r4, [pc, #108]	; (80448b0 <RadioSetRxConfig+0x1e8>)
 8044844:	f884 70b6 	strb.w	r7, [r4, #182]	; 0xb6
        LR1110.packet_params.packet.lora.pld_len_in_bytes = MaxPayloadLength;
 8044848:	4b18      	ldr	r3, [pc, #96]	; (80448ac <RadioSetRxConfig+0x1e4>)
 804484a:	781b      	ldrb	r3, [r3, #0]
 804484c:	f884 30b7 	strb.w	r3, [r4, #183]	; 0xb7
        LR1110.packet_params.packet.lora.crc                    = ( lr1110_radio_lora_crc_t ) crcOn;
 8044850:	f884 a0b8 	strb.w	sl, [r4, #184]	; 0xb8
        LR1110.packet_params.packet.lora.iq                     = ( lr1110_radio_lora_iq_t ) iqInverted;
 8044854:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8044858:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PKT_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 804485c:	2001      	movs	r0, #1
 804485e:	f7ff ff17 	bl	8044690 <RadioSetModem>
        lr1110_radio_set_lora_mod_params( &LR1110, &LR1110.modulation_params.modulation.lora );
 8044862:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8044866:	4620      	mov	r0, r4
 8044868:	f001 f964 	bl	8045b34 <lr1110_radio_set_lora_mod_params>
        lr1110_radio_set_lora_pkt_params( &LR1110, &LR1110.packet_params.packet.lora );
 804486c:	f104 01b4 	add.w	r1, r4, #180	; 0xb4
 8044870:	4620      	mov	r0, r4
 8044872:	f001 f9a8 	bl	8045bc6 <lr1110_radio_set_lora_pkt_params>
        RxTimeout = 0xFFFF;
 8044876:	4b10      	ldr	r3, [pc, #64]	; (80448b8 <RadioSetRxConfig+0x1f0>)
 8044878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804487c:	601a      	str	r2, [r3, #0]
}
 804487e:	e740      	b.n	8044702 <RadioSetRxConfig+0x3a>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8044880:	2e0c      	cmp	r6, #12
 8044882:	d1cf      	bne.n	8044824 <RadioSetRxConfig+0x15c>
            LR1110.modulation_params.modulation.lora.ldro = 0x01;
 8044884:	4a0a      	ldr	r2, [pc, #40]	; (80448b0 <RadioSetRxConfig+0x1e8>)
 8044886:	2101      	movs	r1, #1
 8044888:	f882 10a7 	strb.w	r1, [r2, #167]	; 0xa7
 804488c:	e7ce      	b.n	804482c <RadioSetRxConfig+0x164>
            if( preambleLen < 12 )
 804488e:	f1b8 0f0b 	cmp.w	r8, #11
 8044892:	d804      	bhi.n	804489e <RadioSetRxConfig+0x1d6>
                LR1110.packet_params.packet.lora.preamble_len_in_symb = 12;
 8044894:	4613      	mov	r3, r2
 8044896:	220c      	movs	r2, #12
 8044898:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 804489c:	e7d1      	b.n	8044842 <RadioSetRxConfig+0x17a>
                LR1110.packet_params.packet.lora.preamble_len_in_symb = preambleLen;
 804489e:	4b04      	ldr	r3, [pc, #16]	; (80448b0 <RadioSetRxConfig+0x1e8>)
 80448a0:	f8a3 80b4 	strh.w	r8, [r3, #180]	; 0xb4
 80448a4:	e7cd      	b.n	8044842 <RadioSetRxConfig+0x17a>
 80448a6:	bf00      	nop
 80448a8:	200188da 	.word	0x200188da
 80448ac:	20018098 	.word	0x20018098
 80448b0:	2001b0b8 	.word	0x2001b0b8
 80448b4:	08059b54 	.word	0x08059b54
 80448b8:	200188dc 	.word	0x200188dc
 80448bc:	08059c78 	.word	0x08059c78

080448c0 <RadioIsChannelFree>:
{
 80448c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80448c4:	b08a      	sub	sp, #40	; 0x28
 80448c6:	4604      	mov	r4, r0
 80448c8:	460f      	mov	r7, r1
 80448ca:	4616      	mov	r6, r2
 80448cc:	461d      	mov	r5, r3
    RadioSetModem( MODEM_FSK );
 80448ce:	2000      	movs	r0, #0
 80448d0:	f7ff fede 	bl	8044690 <RadioSetModem>
    RadioSetChannel( freq );
 80448d4:	4620      	mov	r0, r4
 80448d6:	f7ff fd31 	bl	804433c <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80448da:	f04f 0801 	mov.w	r8, #1
 80448de:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80448e2:	2400      	movs	r4, #0
 80448e4:	9408      	str	r4, [sp, #32]
 80448e6:	9407      	str	r4, [sp, #28]
 80448e8:	9406      	str	r4, [sp, #24]
 80448ea:	9405      	str	r4, [sp, #20]
 80448ec:	9404      	str	r4, [sp, #16]
 80448ee:	9403      	str	r4, [sp, #12]
 80448f0:	9402      	str	r4, [sp, #8]
 80448f2:	2303      	movs	r3, #3
 80448f4:	9301      	str	r3, [sp, #4]
 80448f6:	9700      	str	r7, [sp, #0]
 80448f8:	4623      	mov	r3, r4
 80448fa:	f44f 7216 	mov.w	r2, #600	; 0x258
 80448fe:	4639      	mov	r1, r7
 8044900:	4620      	mov	r0, r4
 8044902:	f7ff fee1 	bl	80446c8 <RadioSetRxConfig>
    RadioRx( 0 );
 8044906:	4620      	mov	r0, r4
 8044908:	f7ff fdb6 	bl	8044478 <RadioRx>
    DelayMs( 1 );
 804490c:	4640      	mov	r0, r8
 804490e:	f7fc fcdb 	bl	80412c8 <DelayMs>
    carrierSenseTime = TimerGetCurrentTime( );
 8044912:	f7fe fc72 	bl	80431fa <TimerGetCurrentTime>
 8044916:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8044918:	4620      	mov	r0, r4
 804491a:	f7fe fc74 	bl	8043206 <TimerGetElapsedTime>
 804491e:	42a8      	cmp	r0, r5
 8044920:	d206      	bcs.n	8044930 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8044922:	2000      	movs	r0, #0
 8044924:	f7ff fe5c 	bl	80445e0 <RadioRssi>
        if( rssi > rssiThresh )
 8044928:	42b0      	cmp	r0, r6
 804492a:	ddf5      	ble.n	8044918 <RadioIsChannelFree+0x58>
            status = false;
 804492c:	2400      	movs	r4, #0
 804492e:	e000      	b.n	8044932 <RadioIsChannelFree+0x72>
    bool     status           = true;
 8044930:	2401      	movs	r4, #1
    RadioSleep( );
 8044932:	f7ff fd87 	bl	8044444 <RadioSleep>
}
 8044936:	4620      	mov	r0, r4
 8044938:	b00a      	add	sp, #40	; 0x28
 804493a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08044940 <RadioSetTxConfig>:
{
 8044940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8044944:	b082      	sub	sp, #8
 8044946:	460c      	mov	r4, r1
 8044948:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
 804494c:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 8044950:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    switch( modem )
 8044954:	b158      	cbz	r0, 804496e <RadioSetTxConfig+0x2e>
 8044956:	2801      	cmp	r0, #1
 8044958:	d069      	beq.n	8044a2e <RadioSetTxConfig+0xee>
    lr1110_board_set_rf_tx_power( &LR1110, power );
 804495a:	4621      	mov	r1, r4
 804495c:	4861      	ldr	r0, [pc, #388]	; (8044ae4 <RadioSetTxConfig+0x1a4>)
 804495e:	f7ff fa45 	bl	8043dec <lr1110_board_set_rf_tx_power>
    TxTimeout = timeout;
 8044962:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8044964:	4b60      	ldr	r3, [pc, #384]	; (8044ae8 <RadioSetTxConfig+0x1a8>)
 8044966:	601a      	str	r2, [r3, #0]
}
 8044968:	b002      	add	sp, #8
 804496a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804496e:	4616      	mov	r6, r2
        LR1110.modulation_params.packet_type   = LR1110_RADIO_PKT_TYPE_GFSK;
 8044970:	4d5c      	ldr	r5, [pc, #368]	; (8044ae4 <RadioSetTxConfig+0x1a4>)
 8044972:	f04f 0a01 	mov.w	sl, #1
 8044976:	f885 a094 	strb.w	sl, [r5, #148]	; 0x94
        LR1110.modulation_params.modulation.gfsk.br_in_bps = datarate;
 804497a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 804497c:	f8c5 2098 	str.w	r2, [r5, #152]	; 0x98
        LR1110.modulation_params.modulation.gfsk.pulse_shape = LR1110_RADIO_GFSK_PULSE_SHAPE_BT_1;
 8044980:	220b      	movs	r2, #11
 8044982:	f885 209c 	strb.w	r2, [r5, #156]	; 0x9c
            ( lr1110_radio_gfsk_bw_t ) RadioGetFskBandwidthRegValue( bandwidth << 1 ); // LR1110 badwidth is double sided
 8044986:	fa03 f00a 	lsl.w	r0, r3, sl
 804498a:	f7ff fb7b 	bl	8044084 <RadioGetFskBandwidthRegValue>
        LR1110.modulation_params.modulation.gfsk.bw_dsb_param =
 804498e:	f885 009d 	strb.w	r0, [r5, #157]	; 0x9d
        LR1110.modulation_params.modulation.gfsk.fdev_in_hz = fdev;
 8044992:	f8c5 60a0 	str.w	r6, [r5, #160]	; 0xa0
        LR1110.packet_params.packet_type                     = LR1110_RADIO_PKT_TYPE_GFSK;
 8044996:	f885 a0a8 	strb.w	sl, [r5, #168]	; 0xa8
        LR1110.packet_params.packet.gfsk.preamble_len_in_bits = ( preambleLen << 3 );  // convert byte into bit
 804499a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 804499e:	f8a5 90aa 	strh.w	r9, [r5, #170]	; 0xaa
        LR1110.packet_params.packet.gfsk.preamble_detector           = LR1110_RADIO_GFSK_PREAMBLE_DETECTOR_MIN_8BITS;
 80449a2:	2304      	movs	r3, #4
 80449a4:	f885 30ac 	strb.w	r3, [r5, #172]	; 0xac
        LR1110.packet_params.packet.gfsk.sync_word_len_in_bits = 3 << 3;  // convert byte into bit
 80449a8:	2318      	movs	r3, #24
 80449aa:	f885 30ad 	strb.w	r3, [r5, #173]	; 0xad
        LR1110.packet_params.packet.gfsk.address_filtering         = LR1110_RADIO_GFSK_ADDRESS_FILTERING_DISABLE;
 80449ae:	2300      	movs	r3, #0
 80449b0:	f885 30ae 	strb.w	r3, [r5, #174]	; 0xae
            ( fixLen == true ) ? LR1110_RADIO_GFSK_PKT_FIX_LEN : LR1110_RADIO_GFSK_PKT_VAR_LEN;
 80449b4:	ea87 070a 	eor.w	r7, r7, sl
        LR1110.packet_params.packet.gfsk.header_type =
 80449b8:	f885 70af 	strb.w	r7, [r5, #175]	; 0xaf
        if( crcOn == true )
 80449bc:	f1b8 0f00 	cmp.w	r8, #0
 80449c0:	d030      	beq.n	8044a24 <RadioSetTxConfig+0xe4>
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_2_BYTES_INV;
 80449c2:	2206      	movs	r2, #6
 80449c4:	f885 20b1 	strb.w	r2, [r5, #177]	; 0xb1
        LR1110.packet_params.packet.gfsk.dc_free = LR1110_RADIO_GFSK_DC_FREE_WHITENING;
 80449c8:	4d46      	ldr	r5, [pc, #280]	; (8044ae4 <RadioSetTxConfig+0x1a4>)
 80449ca:	2301      	movs	r3, #1
 80449cc:	f885 30b2 	strb.w	r3, [r5, #178]	; 0xb2
        RadioStandby( );
 80449d0:	f7ff fc52 	bl	8044278 <RadioStandby>
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PKT_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA );
 80449d4:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
 80449d8:	3801      	subs	r0, #1
 80449da:	bf18      	it	ne
 80449dc:	2001      	movne	r0, #1
 80449de:	f7ff fe57 	bl	8044690 <RadioSetModem>
        lr1110_radio_set_gfsk_mod_params( &LR1110, &LR1110.modulation_params.modulation.gfsk );
 80449e2:	f105 0198 	add.w	r1, r5, #152	; 0x98
 80449e6:	4628      	mov	r0, r5
 80449e8:	f001 f870 	bl	8045acc <lr1110_radio_set_gfsk_mod_params>
        lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
 80449ec:	f105 01aa 	add.w	r1, r5, #170	; 0xaa
 80449f0:	4628      	mov	r0, r5
 80449f2:	f001 f8bc 	bl	8045b6e <lr1110_radio_set_gfsk_pkt_params>
        lr1110_radio_set_gfsk_sync_word( &LR1110, ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80449f6:	4a3d      	ldr	r2, [pc, #244]	; (8044aec <RadioSetTxConfig+0x1ac>)
 80449f8:	466b      	mov	r3, sp
 80449fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80449fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8044a02:	4619      	mov	r1, r3
 8044a04:	4628      	mov	r0, r5
 8044a06:	f000 ffca 	bl	804599e <lr1110_radio_set_gfsk_sync_word>
        lr1110_radio_set_gfsk_crc_params( &LR1110, 0x1D0F, 0x1021 );
 8044a0a:	f241 0221 	movw	r2, #4129	; 0x1021
 8044a0e:	f641 510f 	movw	r1, #7439	; 0x1d0f
 8044a12:	4628      	mov	r0, r5
 8044a14:	f001 f999 	bl	8045d4a <lr1110_radio_set_gfsk_crc_params>
        lr1110_radio_set_gfsk_whitening_seed( &LR1110, 0x01FF );
 8044a18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8044a1c:	4628      	mov	r0, r5
 8044a1e:	f001 f9bf 	bl	8045da0 <lr1110_radio_set_gfsk_whitening_seed>
        break;
 8044a22:	e79a      	b.n	804495a <RadioSetTxConfig+0x1a>
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_OFF;
 8044a24:	4b2f      	ldr	r3, [pc, #188]	; (8044ae4 <RadioSetTxConfig+0x1a4>)
 8044a26:	2201      	movs	r2, #1
 8044a28:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8044a2c:	e7cc      	b.n	80449c8 <RadioSetTxConfig+0x88>
        LR1110.modulation_params.packet_type            = LR1110_RADIO_PKT_TYPE_LORA;
 8044a2e:	492d      	ldr	r1, [pc, #180]	; (8044ae4 <RadioSetTxConfig+0x1a4>)
 8044a30:	2202      	movs	r2, #2
 8044a32:	f881 2094 	strb.w	r2, [r1, #148]	; 0x94
        LR1110.modulation_params.modulation.lora.sf = ( lr1110_radio_lora_sf_t ) datarate;
 8044a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8044a38:	b2d2      	uxtb	r2, r2
 8044a3a:	f881 20a4 	strb.w	r2, [r1, #164]	; 0xa4
        LR1110.modulation_params.modulation.lora.bw        = Bandwidths[bandwidth];
 8044a3e:	482c      	ldr	r0, [pc, #176]	; (8044af0 <RadioSetTxConfig+0x1b0>)
 8044a40:	5cc0      	ldrb	r0, [r0, r3]
 8044a42:	f881 00a5 	strb.w	r0, [r1, #165]	; 0xa5
        LR1110.modulation_params.modulation.lora.cr      = ( lr1110_radio_lora_cr_t ) coderate;
 8044a46:	f89d 002c 	ldrb.w	r0, [sp, #44]	; 0x2c
 8044a4a:	f881 00a6 	strb.w	r0, [r1, #166]	; 0xa6
        if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8044a4e:	b91b      	cbnz	r3, 8044a58 <RadioSetTxConfig+0x118>
 8044a50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8044a52:	390b      	subs	r1, #11
 8044a54:	2901      	cmp	r1, #1
 8044a56:	d934      	bls.n	8044ac2 <RadioSetTxConfig+0x182>
 8044a58:	2b01      	cmp	r3, #1
 8044a5a:	d02f      	beq.n	8044abc <RadioSetTxConfig+0x17c>
            LR1110.modulation_params.modulation.lora.ldro = 0x00;
 8044a5c:	4b21      	ldr	r3, [pc, #132]	; (8044ae4 <RadioSetTxConfig+0x1a4>)
 8044a5e:	2100      	movs	r1, #0
 8044a60:	f883 10a7 	strb.w	r1, [r3, #167]	; 0xa7
        LR1110.packet_params.packet_type = LR1110_RADIO_PKT_TYPE_LORA;
 8044a64:	4b1f      	ldr	r3, [pc, #124]	; (8044ae4 <RadioSetTxConfig+0x1a4>)
 8044a66:	2102      	movs	r1, #2
 8044a68:	f883 10a8 	strb.w	r1, [r3, #168]	; 0xa8
        if( ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF5 ) ||
 8044a6c:	3a05      	subs	r2, #5
 8044a6e:	b2d2      	uxtb	r2, r2
 8044a70:	2a01      	cmp	r2, #1
 8044a72:	d92b      	bls.n	8044acc <RadioSetTxConfig+0x18c>
            LR1110.packet_params.packet.lora.preamble_len_in_symb = preambleLen;
 8044a74:	4b1b      	ldr	r3, [pc, #108]	; (8044ae4 <RadioSetTxConfig+0x1a4>)
 8044a76:	f8a3 90b4 	strh.w	r9, [r3, #180]	; 0xb4
        LR1110.packet_params.packet.lora.header_type            = ( lr1110_radio_lora_pkt_len_modes_t ) fixLen;
 8044a7a:	4d1a      	ldr	r5, [pc, #104]	; (8044ae4 <RadioSetTxConfig+0x1a4>)
 8044a7c:	f885 70b6 	strb.w	r7, [r5, #182]	; 0xb6
        LR1110.packet_params.packet.lora.pld_len_in_bytes = MaxPayloadLength;
 8044a80:	4b1c      	ldr	r3, [pc, #112]	; (8044af4 <RadioSetTxConfig+0x1b4>)
 8044a82:	781b      	ldrb	r3, [r3, #0]
 8044a84:	f885 30b7 	strb.w	r3, [r5, #183]	; 0xb7
        LR1110.packet_params.packet.lora.crc                    = ( lr1110_radio_lora_crc_t ) crcOn;
 8044a88:	f885 80b8 	strb.w	r8, [r5, #184]	; 0xb8
        LR1110.packet_params.packet.lora.iq                     = ( lr1110_radio_lora_iq_t ) iqInverted;
 8044a8c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8044a90:	f885 30b9 	strb.w	r3, [r5, #185]	; 0xb9
        RadioStandby( );
 8044a94:	f7ff fbf0 	bl	8044278 <RadioStandby>
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PKT_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8044a98:	f895 0094 	ldrb.w	r0, [r5, #148]	; 0x94
 8044a9c:	3801      	subs	r0, #1
 8044a9e:	bf18      	it	ne
 8044aa0:	2001      	movne	r0, #1
 8044aa2:	f7ff fdf5 	bl	8044690 <RadioSetModem>
        lr1110_radio_set_lora_mod_params( &LR1110, &LR1110.modulation_params.modulation.lora );
 8044aa6:	f105 01a4 	add.w	r1, r5, #164	; 0xa4
 8044aaa:	4628      	mov	r0, r5
 8044aac:	f001 f842 	bl	8045b34 <lr1110_radio_set_lora_mod_params>
        lr1110_radio_set_lora_pkt_params( &LR1110, &LR1110.packet_params.packet.lora );
 8044ab0:	f105 01b4 	add.w	r1, r5, #180	; 0xb4
 8044ab4:	4628      	mov	r0, r5
 8044ab6:	f001 f886 	bl	8045bc6 <lr1110_radio_set_lora_pkt_params>
        break;
 8044aba:	e74e      	b.n	804495a <RadioSetTxConfig+0x1a>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8044abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8044abe:	2b0c      	cmp	r3, #12
 8044ac0:	d1cc      	bne.n	8044a5c <RadioSetTxConfig+0x11c>
            LR1110.modulation_params.modulation.lora.ldro = 0x01;
 8044ac2:	4b08      	ldr	r3, [pc, #32]	; (8044ae4 <RadioSetTxConfig+0x1a4>)
 8044ac4:	2101      	movs	r1, #1
 8044ac6:	f883 10a7 	strb.w	r1, [r3, #167]	; 0xa7
 8044aca:	e7cb      	b.n	8044a64 <RadioSetTxConfig+0x124>
            if( preambleLen < 12 )
 8044acc:	f1b9 0f0b 	cmp.w	r9, #11
 8044ad0:	d803      	bhi.n	8044ada <RadioSetTxConfig+0x19a>
                LR1110.packet_params.packet.lora.preamble_len_in_symb = 12;
 8044ad2:	220c      	movs	r2, #12
 8044ad4:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8044ad8:	e7cf      	b.n	8044a7a <RadioSetTxConfig+0x13a>
                LR1110.packet_params.packet.lora.preamble_len_in_symb = preambleLen;
 8044ada:	4b02      	ldr	r3, [pc, #8]	; (8044ae4 <RadioSetTxConfig+0x1a4>)
 8044adc:	f8a3 90b4 	strh.w	r9, [r3, #180]	; 0xb4
 8044ae0:	e7cb      	b.n	8044a7a <RadioSetTxConfig+0x13a>
 8044ae2:	bf00      	nop
 8044ae4:	2001b0b8 	.word	0x2001b0b8
 8044ae8:	200188e0 	.word	0x200188e0
 8044aec:	08059b54 	.word	0x08059b54
 8044af0:	08059c78 	.word	0x08059c78
 8044af4:	20018098 	.word	0x20018098

08044af8 <RadioGetWakeupTime>:
{
 8044af8:	b508      	push	{r3, lr}
    return lr1110_board_get_tcxo_wakeup_time( &LR1110 ) + 3;
 8044afa:	4802      	ldr	r0, [pc, #8]	; (8044b04 <RadioGetWakeupTime+0xc>)
 8044afc:	f7ff f987 	bl	8043e0e <lr1110_board_get_tcxo_wakeup_time>
}
 8044b00:	3003      	adds	r0, #3
 8044b02:	bd08      	pop	{r3, pc}
 8044b04:	2001b0b8 	.word	0x2001b0b8

08044b08 <lr1110_system_irq_process>:
 * \param [out] irq  Pointer to the interrupt field returned to the caller
 *
 * \see lr1110_system_get_status, lr1110_system_clear_irq
 */
static void lr1110_system_irq_process( const void* radio, uint32_t* irq )
{
 8044b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8044b0a:	b083      	sub	sp, #12
 8044b0c:	4605      	mov	r5, r0
 8044b0e:	460c      	mov	r4, r1
    lr1110_system_stat1_t stat1;
    lr1110_system_stat2_t stat2;

    lr1110_hal_operating_mode_t op_mode = lr1110_hal_get_operating_mode( radio );
 8044b10:	f7ff f992 	bl	8043e38 <lr1110_hal_get_operating_mode>
 8044b14:	4607      	mov	r7, r0

    lr1110_system_get_status( radio, &stat1, &stat2, irq );
 8044b16:	4623      	mov	r3, r4
 8044b18:	466a      	mov	r2, sp
 8044b1a:	a901      	add	r1, sp, #4
 8044b1c:	4628      	mov	r0, r5
 8044b1e:	f001 f9cd 	bl	8045ebc <lr1110_system_get_status>
    lr1110_system_clear_irq_status( radio, *irq );
 8044b22:	6821      	ldr	r1, [r4, #0]
 8044b24:	4628      	mov	r0, r5
 8044b26:	f001 fab0 	bl	804608a <lr1110_system_clear_irq_status>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8044b2a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8044b2e:	b672      	cpsid	i

    // Check if DIO1 pin is High. If it is the case revert IrqFired to true
	CRITICAL_SECTION_BEGIN( );
	if( lr1110_get_dio_1_pin_state( radio ) == 1 )
 8044b30:	4628      	mov	r0, r5
 8044b32:	f7ff f96e 	bl	8043e12 <lr1110_get_dio_1_pin_state>
 8044b36:	2801      	cmp	r0, #1
 8044b38:	d00e      	beq.n	8044b58 <lr1110_system_irq_process+0x50>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8044b3a:	f386 8810 	msr	PRIMASK, r6
	{
		IrqFired = true;
	}
	CRITICAL_SECTION_END( );

    if( ( ( *irq & LR1110_SYSTEM_IRQ_TX_DONE ) != 0 ) || ( ( *irq & LR1110_SYSTEM_IRQ_CAD_DONE ) != 0 ) ||
 8044b3e:	6823      	ldr	r3, [r4, #0]
 8044b40:	f240 5204 	movw	r2, #1284	; 0x504
 8044b44:	421a      	tst	r2, r3
 8044b46:	d10b      	bne.n	8044b60 <lr1110_system_irq_process+0x58>
        ( ( *irq & LR1110_SYSTEM_IRQ_TIMEOUT ) != 0 ) )
    {
        lr1110_hal_set_operating_mode( radio, LR1110_HAL_OP_MODE_STDBY_RC );
    }

    if( ( ( *irq & LR1110_SYSTEM_IRQ_HEADER_ERROR ) != 0 ) || ( ( *irq & LR1110_SYSTEM_IRQ_RX_DONE ) != 0 ) ||
 8044b48:	6823      	ldr	r3, [r4, #0]
 8044b4a:	f013 0fc8 	tst.w	r3, #200	; 0xc8
 8044b4e:	d001      	beq.n	8044b54 <lr1110_system_irq_process+0x4c>
        ( ( *irq & LR1110_SYSTEM_IRQ_CRC_ERROR ) != 0 ) )
    {
        if( op_mode != LR1110_HAL_OP_MODE_RX_C )
 8044b50:	2f06      	cmp	r7, #6
 8044b52:	d10a      	bne.n	8044b6a <lr1110_system_irq_process+0x62>
        {
            lr1110_hal_set_operating_mode( radio, LR1110_HAL_OP_MODE_STDBY_RC );
        }
    }
}
 8044b54:	b003      	add	sp, #12
 8044b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		IrqFired = true;
 8044b58:	4b06      	ldr	r3, [pc, #24]	; (8044b74 <lr1110_system_irq_process+0x6c>)
 8044b5a:	2201      	movs	r2, #1
 8044b5c:	701a      	strb	r2, [r3, #0]
 8044b5e:	e7ec      	b.n	8044b3a <lr1110_system_irq_process+0x32>
        lr1110_hal_set_operating_mode( radio, LR1110_HAL_OP_MODE_STDBY_RC );
 8044b60:	2101      	movs	r1, #1
 8044b62:	4628      	mov	r0, r5
 8044b64:	f7ff fa38 	bl	8043fd8 <lr1110_hal_set_operating_mode>
 8044b68:	e7ee      	b.n	8044b48 <lr1110_system_irq_process+0x40>
            lr1110_hal_set_operating_mode( radio, LR1110_HAL_OP_MODE_STDBY_RC );
 8044b6a:	2101      	movs	r1, #1
 8044b6c:	4628      	mov	r0, r5
 8044b6e:	f7ff fa33 	bl	8043fd8 <lr1110_hal_set_operating_mode>
}
 8044b72:	e7ef      	b.n	8044b54 <lr1110_system_irq_process+0x4c>
 8044b74:	200188d0 	.word	0x200188d0

08044b78 <RadioIrqProcess>:

void RadioIrqProcess( void )
{
    if( IrqFired == true )
 8044b78:	4b59      	ldr	r3, [pc, #356]	; (8044ce0 <RadioIrqProcess+0x168>)
 8044b7a:	781b      	ldrb	r3, [r3, #0]
 8044b7c:	b903      	cbnz	r3, 8044b80 <RadioIrqProcess+0x8>
 8044b7e:	4770      	bx	lr
{
 8044b80:	b510      	push	{r4, lr}
 8044b82:	b084      	sub	sp, #16
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8044b84:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8044b88:	b672      	cpsid	i
    {
        CRITICAL_SECTION_BEGIN( );
        // Clear IRQ flag
        IrqFired = false;
 8044b8a:	4a55      	ldr	r2, [pc, #340]	; (8044ce0 <RadioIrqProcess+0x168>)
 8044b8c:	2100      	movs	r1, #0
 8044b8e:	7011      	strb	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8044b90:	f383 8810 	msr	PRIMASK, r3
        CRITICAL_SECTION_END( );

        uint32_t irqRegs;
        // Get Status
        lr1110_system_irq_process( &LR1110, &irqRegs );
 8044b94:	a903      	add	r1, sp, #12
 8044b96:	4853      	ldr	r0, [pc, #332]	; (8044ce4 <RadioIrqProcess+0x16c>)
 8044b98:	f7ff ffb6 	bl	8044b08 <lr1110_system_irq_process>

        if( ( irqRegs & LR1110_SYSTEM_IRQ_TX_DONE ) == LR1110_SYSTEM_IRQ_TX_DONE )
 8044b9c:	9b03      	ldr	r3, [sp, #12]
 8044b9e:	f013 0f04 	tst.w	r3, #4
 8044ba2:	d137      	bne.n	8044c14 <RadioIrqProcess+0x9c>
            {
                RadioEvents->TxDone( );
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_RX_DONE ) == LR1110_SYSTEM_IRQ_RX_DONE )
 8044ba4:	9b03      	ldr	r3, [sp, #12]
 8044ba6:	f013 0f08 	tst.w	r3, #8
 8044baa:	d13f      	bne.n	8044c2c <RadioIrqProcess+0xb4>
                                         gfsk_packet_status.rssi_avg_in_dbm, 0 );
                }
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_CRC_ERROR ) == LR1110_SYSTEM_IRQ_CRC_ERROR )
 8044bac:	9b03      	ldr	r3, [sp, #12]
 8044bae:	f013 0f80 	tst.w	r3, #128	; 0x80
 8044bb2:	d005      	beq.n	8044bc0 <RadioIrqProcess+0x48>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8044bb4:	4b4c      	ldr	r3, [pc, #304]	; (8044ce8 <RadioIrqProcess+0x170>)
 8044bb6:	681b      	ldr	r3, [r3, #0]
 8044bb8:	b113      	cbz	r3, 8044bc0 <RadioIrqProcess+0x48>
 8044bba:	691b      	ldr	r3, [r3, #16]
 8044bbc:	b103      	cbz	r3, 8044bc0 <RadioIrqProcess+0x48>
            {
                RadioEvents->RxError( );
 8044bbe:	4798      	blx	r3
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_CAD_DONE) == LR1110_SYSTEM_IRQ_CAD_DONE )
 8044bc0:	9803      	ldr	r0, [sp, #12]
 8044bc2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8044bc6:	d007      	beq.n	8044bd8 <RadioIrqProcess+0x60>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8044bc8:	4b47      	ldr	r3, [pc, #284]	; (8044ce8 <RadioIrqProcess+0x170>)
 8044bca:	681b      	ldr	r3, [r3, #0]
 8044bcc:	b123      	cbz	r3, 8044bd8 <RadioIrqProcess+0x60>
 8044bce:	699b      	ldr	r3, [r3, #24]
 8044bd0:	b113      	cbz	r3, 8044bd8 <RadioIrqProcess+0x60>
            {
                RadioEvents->CadDone(
 8044bd2:	f3c0 2040 	ubfx	r0, r0, #9, #1
 8044bd6:	4798      	blx	r3
                    ( ( irqRegs & LR1110_SYSTEM_IRQ_CAD_DETECTED) == LR1110_SYSTEM_IRQ_CAD_DETECTED ) );
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_TIMEOUT ) == LR1110_SYSTEM_IRQ_TIMEOUT )
 8044bd8:	9b03      	ldr	r3, [sp, #12]
 8044bda:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8044bde:	d167      	bne.n	8044cb0 <RadioIrqProcess+0x138>
        if( ( irqRegs & LR1110_SYSTEM_IRQ_SYNC_WORD_HEADER_VALID ) == LR1110_SYSTEM_IRQ_SYNC_WORD_HEADER_VALID )
        {
            //__NOP( );
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_HEADER_ERROR) == LR1110_SYSTEM_IRQ_HEADER_ERROR )
 8044be0:	9b03      	ldr	r3, [sp, #12]
 8044be2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8044be6:	d16f      	bne.n	8044cc8 <RadioIrqProcess+0x150>
            {
                RadioEvents->RxTimeout( );
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_GNSS_SCAN_DONE) == LR1110_SYSTEM_IRQ_GNSS_SCAN_DONE )
 8044be8:	9b03      	ldr	r3, [sp, #12]
 8044bea:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8044bee:	d005      	beq.n	8044bfc <RadioIrqProcess+0x84>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->GnssDone != NULL ) )
 8044bf0:	4b3d      	ldr	r3, [pc, #244]	; (8044ce8 <RadioIrqProcess+0x170>)
 8044bf2:	681b      	ldr	r3, [r3, #0]
 8044bf4:	b113      	cbz	r3, 8044bfc <RadioIrqProcess+0x84>
 8044bf6:	69db      	ldr	r3, [r3, #28]
 8044bf8:	b103      	cbz	r3, 8044bfc <RadioIrqProcess+0x84>
            {
                RadioEvents->GnssDone( );
 8044bfa:	4798      	blx	r3
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_WIFI_SCAN_DONE ) == LR1110_SYSTEM_IRQ_WIFI_SCAN_DONE )
 8044bfc:	9b03      	ldr	r3, [sp, #12]
 8044bfe:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8044c02:	d005      	beq.n	8044c10 <RadioIrqProcess+0x98>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->WifiDone != NULL ) )
 8044c04:	4b38      	ldr	r3, [pc, #224]	; (8044ce8 <RadioIrqProcess+0x170>)
 8044c06:	681b      	ldr	r3, [r3, #0]
 8044c08:	b113      	cbz	r3, 8044c10 <RadioIrqProcess+0x98>
 8044c0a:	6a1b      	ldr	r3, [r3, #32]
 8044c0c:	b103      	cbz	r3, 8044c10 <RadioIrqProcess+0x98>
            {
                RadioEvents->WifiDone( );
 8044c0e:	4798      	blx	r3
            }
        }
    }
}
 8044c10:	b004      	add	sp, #16
 8044c12:	bd10      	pop	{r4, pc}
            TimerStop( &TxTimeoutTimer );
 8044c14:	4835      	ldr	r0, [pc, #212]	; (8044cec <RadioIrqProcess+0x174>)
 8044c16:	f7fe faa3 	bl	8043160 <TimerStop>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8044c1a:	4b33      	ldr	r3, [pc, #204]	; (8044ce8 <RadioIrqProcess+0x170>)
 8044c1c:	681b      	ldr	r3, [r3, #0]
 8044c1e:	2b00      	cmp	r3, #0
 8044c20:	d0c0      	beq.n	8044ba4 <RadioIrqProcess+0x2c>
 8044c22:	681b      	ldr	r3, [r3, #0]
 8044c24:	2b00      	cmp	r3, #0
 8044c26:	d0bd      	beq.n	8044ba4 <RadioIrqProcess+0x2c>
                RadioEvents->TxDone( );
 8044c28:	4798      	blx	r3
 8044c2a:	e7bb      	b.n	8044ba4 <RadioIrqProcess+0x2c>
            TimerStop( &RxTimeoutTimer );
 8044c2c:	4830      	ldr	r0, [pc, #192]	; (8044cf0 <RadioIrqProcess+0x178>)
 8044c2e:	f7fe fa97 	bl	8043160 <TimerStop>
            lr1110_radio_get_rx_buffer_status( &LR1110, &rxbuffer_status );
 8044c32:	4c2c      	ldr	r4, [pc, #176]	; (8044ce4 <RadioIrqProcess+0x16c>)
 8044c34:	a902      	add	r1, sp, #8
 8044c36:	4620      	mov	r0, r4
 8044c38:	f000 fe1e 	bl	8045878 <lr1110_radio_get_rx_buffer_status>
            lr1110_regmem_read_buffer8( &LR1110, RadioRxPayload, rxbuffer_status.buffer_start_pointer,
 8044c3c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8044c40:	f89d 2009 	ldrb.w	r2, [sp, #9]
 8044c44:	492b      	ldr	r1, [pc, #172]	; (8044cf4 <RadioIrqProcess+0x17c>)
 8044c46:	4620      	mov	r0, r4
 8044c48:	f001 f920 	bl	8045e8c <lr1110_regmem_read_buffer8>
            lr1110_radio_get_pkt_type( &LR1110, &packet_type );
 8044c4c:	f10d 0107 	add.w	r1, sp, #7
 8044c50:	4620      	mov	r0, r4
 8044c52:	f000 fe01 	bl	8045858 <lr1110_radio_get_pkt_type>
            if( packet_type == LR1110_RADIO_PKT_TYPE_LORA )
 8044c56:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8044c5a:	2b02      	cmp	r3, #2
 8044c5c:	d013      	beq.n	8044c86 <RadioIrqProcess+0x10e>
                lr1110_radio_get_gfsk_pkt_status( &LR1110, &gfsk_packet_status );
 8044c5e:	4926      	ldr	r1, [pc, #152]	; (8044cf8 <RadioIrqProcess+0x180>)
 8044c60:	4820      	ldr	r0, [pc, #128]	; (8044ce4 <RadioIrqProcess+0x16c>)
 8044c62:	f000 fe23 	bl	80458ac <lr1110_radio_get_gfsk_pkt_status>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8044c66:	4b20      	ldr	r3, [pc, #128]	; (8044ce8 <RadioIrqProcess+0x170>)
 8044c68:	681b      	ldr	r3, [r3, #0]
 8044c6a:	2b00      	cmp	r3, #0
 8044c6c:	d09e      	beq.n	8044bac <RadioIrqProcess+0x34>
 8044c6e:	689c      	ldr	r4, [r3, #8]
 8044c70:	2c00      	cmp	r4, #0
 8044c72:	d09b      	beq.n	8044bac <RadioIrqProcess+0x34>
                    RadioEvents->RxDone( RadioRxPayload, rxbuffer_status.pld_len_in_bytes,
 8044c74:	2300      	movs	r3, #0
 8044c76:	4a20      	ldr	r2, [pc, #128]	; (8044cf8 <RadioIrqProcess+0x180>)
 8044c78:	f992 2001 	ldrsb.w	r2, [r2, #1]
 8044c7c:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8044c80:	481c      	ldr	r0, [pc, #112]	; (8044cf4 <RadioIrqProcess+0x17c>)
 8044c82:	47a0      	blx	r4
 8044c84:	e792      	b.n	8044bac <RadioIrqProcess+0x34>
                lr1110_radio_get_lora_pkt_status( &LR1110, &lora_packet_status );
 8044c86:	491d      	ldr	r1, [pc, #116]	; (8044cfc <RadioIrqProcess+0x184>)
 8044c88:	4620      	mov	r0, r4
 8044c8a:	f000 fe43 	bl	8045914 <lr1110_radio_get_lora_pkt_status>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8044c8e:	4b16      	ldr	r3, [pc, #88]	; (8044ce8 <RadioIrqProcess+0x170>)
 8044c90:	681b      	ldr	r3, [r3, #0]
 8044c92:	2b00      	cmp	r3, #0
 8044c94:	d08a      	beq.n	8044bac <RadioIrqProcess+0x34>
 8044c96:	689c      	ldr	r4, [r3, #8]
 8044c98:	2c00      	cmp	r4, #0
 8044c9a:	d087      	beq.n	8044bac <RadioIrqProcess+0x34>
                                         lora_packet_status.rssi_packet_in_dbm, lora_packet_status.snr_packet_in_db);
 8044c9c:	4a17      	ldr	r2, [pc, #92]	; (8044cfc <RadioIrqProcess+0x184>)
                    RadioEvents->RxDone( RadioRxPayload, rxbuffer_status.pld_len_in_bytes,
 8044c9e:	f992 3001 	ldrsb.w	r3, [r2, #1]
 8044ca2:	f992 2000 	ldrsb.w	r2, [r2]
 8044ca6:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8044caa:	4812      	ldr	r0, [pc, #72]	; (8044cf4 <RadioIrqProcess+0x17c>)
 8044cac:	47a0      	blx	r4
 8044cae:	e77d      	b.n	8044bac <RadioIrqProcess+0x34>
            TimerStop( &RxTimeoutTimer );
 8044cb0:	480f      	ldr	r0, [pc, #60]	; (8044cf0 <RadioIrqProcess+0x178>)
 8044cb2:	f7fe fa55 	bl	8043160 <TimerStop>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8044cb6:	4b0c      	ldr	r3, [pc, #48]	; (8044ce8 <RadioIrqProcess+0x170>)
 8044cb8:	681b      	ldr	r3, [r3, #0]
 8044cba:	2b00      	cmp	r3, #0
 8044cbc:	d090      	beq.n	8044be0 <RadioIrqProcess+0x68>
 8044cbe:	68db      	ldr	r3, [r3, #12]
 8044cc0:	2b00      	cmp	r3, #0
 8044cc2:	d08d      	beq.n	8044be0 <RadioIrqProcess+0x68>
                RadioEvents->RxTimeout( );
 8044cc4:	4798      	blx	r3
 8044cc6:	e78b      	b.n	8044be0 <RadioIrqProcess+0x68>
            TimerStop( &RxTimeoutTimer );
 8044cc8:	4809      	ldr	r0, [pc, #36]	; (8044cf0 <RadioIrqProcess+0x178>)
 8044cca:	f7fe fa49 	bl	8043160 <TimerStop>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8044cce:	4b06      	ldr	r3, [pc, #24]	; (8044ce8 <RadioIrqProcess+0x170>)
 8044cd0:	681b      	ldr	r3, [r3, #0]
 8044cd2:	2b00      	cmp	r3, #0
 8044cd4:	d088      	beq.n	8044be8 <RadioIrqProcess+0x70>
 8044cd6:	68db      	ldr	r3, [r3, #12]
 8044cd8:	2b00      	cmp	r3, #0
 8044cda:	d085      	beq.n	8044be8 <RadioIrqProcess+0x70>
                RadioEvents->RxTimeout( );
 8044cdc:	4798      	blx	r3
 8044cde:	e783      	b.n	8044be8 <RadioIrqProcess+0x70>
 8044ce0:	200188d0 	.word	0x200188d0
 8044ce4:	2001b0b8 	.word	0x2001b0b8
 8044ce8:	200188d4 	.word	0x200188d4
 8044cec:	2001b174 	.word	0x2001b174
 8044cf0:	2001b298 	.word	0x2001b298
 8044cf4:	2001b198 	.word	0x2001b198
 8044cf8:	2001b18c 	.word	0x2001b18c
 8044cfc:	2001b0b4 	.word	0x2001b0b4

08044d00 <__io_putchar>:
#if defined(__ARMCC_VERSION) || defined(__ICCARM__)
int fputc(int ch, __attribute__((unused))FILE *f)
#elif __GNUC__
int __io_putchar(int ch)
#endif
{
 8044d00:	b510      	push	{r4, lr}
 8044d02:	b082      	sub	sp, #8
 8044d04:	9001      	str	r0, [sp, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8044d06:	4b08      	ldr	r3, [pc, #32]	; (8044d28 <__io_putchar+0x28>)
 8044d08:	781b      	ldrb	r3, [r3, #0]
 8044d0a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8044d0e:	0118      	lsls	r0, r3, #4
 8044d10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8044d14:	2201      	movs	r2, #1
 8044d16:	a901      	add	r1, sp, #4
 8044d18:	4c04      	ldr	r4, [pc, #16]	; (8044d2c <__io_putchar+0x2c>)
 8044d1a:	4420      	add	r0, r4
 8044d1c:	f006 fcbf 	bl	804b69e <HAL_UART_Transmit>
  return ch;
}
 8044d20:	9801      	ldr	r0, [sp, #4]
 8044d22:	b002      	add	sp, #8
 8044d24:	bd10      	pop	{r4, pc}
 8044d26:	bf00      	nop
 8044d28:	200188e4 	.word	0x200188e4
 8044d2c:	2001b2b0 	.word	0x2001b2b0

08044d30 <BoardBatteryMeasureVolage>:
#define BATTERY_SHUTDOWN_LEVEL                      2300 // mV

static uint16_t BatteryVoltage = BATTERY_MAX_LEVEL;
static uint16_t vref = 0;
uint16_t BoardBatteryMeasureVolage( void )
{
 8044d30:	b508      	push	{r3, lr}

    uint32_t batteryVoltage = 0;

    // Read the current Voltage
    vref = BSP_IDD_StartMeasurement(2);
 8044d32:	2002      	movs	r0, #2
 8044d34:	f000 fb0e 	bl	8045354 <BSP_IDD_StartMeasurement>
 8044d38:	b283      	uxth	r3, r0
//    vref = AdcReadChannel( &Adc , ADC_CHANNEL_17 );

    // We don't use the VREF from calibValues here.
    // calculate the Voltage in millivolt
    batteryVoltage = ( uint32_t )ADC_VREF_BANDGAP * ( uint32_t )ADC_MAX_VALUE;
    batteryVoltage = batteryVoltage / ( uint32_t )vref;
 8044d3a:	4802      	ldr	r0, [pc, #8]	; (8044d44 <BoardBatteryMeasureVolage+0x14>)
 8044d3c:	fbb0 f0f3 	udiv	r0, r0, r3

    return batteryVoltage;
}
 8044d40:	b280      	uxth	r0, r0
 8044d42:	bd08      	pop	{r3, pc}
 8044d44:	004c7b38 	.word	0x004c7b38

08044d48 <GetBoardPowerSource>:
//    }
//    else
//    {
//        return USB_POWER;
//    }
}
 8044d48:	2001      	movs	r0, #1
 8044d4a:	4770      	bx	lr

08044d4c <BoardGetBatteryLevel>:
{
 8044d4c:	b510      	push	{r4, lr}
    BatteryVoltage = BoardBatteryMeasureVolage( );
 8044d4e:	f7ff ffef 	bl	8044d30 <BoardBatteryMeasureVolage>
 8044d52:	4604      	mov	r4, r0
 8044d54:	4b15      	ldr	r3, [pc, #84]	; (8044dac <BoardGetBatteryLevel+0x60>)
 8044d56:	8018      	strh	r0, [r3, #0]
    if( GetBoardPowerSource( ) == USB_POWER )
 8044d58:	f7ff fff6 	bl	8044d48 <GetBoardPowerSource>
 8044d5c:	b310      	cbz	r0, 8044da4 <BoardGetBatteryLevel+0x58>
        if( BatteryVoltage >= BATTERY_MAX_LEVEL )
 8044d5e:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8044d62:	429c      	cmp	r4, r3
 8044d64:	d81d      	bhi.n	8044da2 <BoardGetBatteryLevel+0x56>
        else if( ( BatteryVoltage > BATTERY_MIN_LEVEL ) && ( BatteryVoltage < BATTERY_MAX_LEVEL ) )
 8044d66:	f6a4 1361 	subw	r3, r4, #2401	; 0x961
 8044d6a:	b29b      	uxth	r3, r3
 8044d6c:	f240 2256 	movw	r2, #598	; 0x256
 8044d70:	4293      	cmp	r3, r2
 8044d72:	d80f      	bhi.n	8044d94 <BoardGetBatteryLevel+0x48>
            batteryLevel = ( ( 253 * ( BatteryVoltage - BATTERY_MIN_LEVEL ) ) / ( BATTERY_MAX_LEVEL - BATTERY_MIN_LEVEL ) ) + 1;
 8044d74:	f5a4 6416 	sub.w	r4, r4, #2400	; 0x960
 8044d78:	ebc4 1384 	rsb	r3, r4, r4, lsl #6
 8044d7c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8044d80:	480b      	ldr	r0, [pc, #44]	; (8044db0 <BoardGetBatteryLevel+0x64>)
 8044d82:	fb80 3004 	smull	r3, r0, r0, r4
 8044d86:	17e4      	asrs	r4, r4, #31
 8044d88:	ebc4 10a0 	rsb	r0, r4, r0, asr #6
 8044d8c:	b2c0      	uxtb	r0, r0
 8044d8e:	3001      	adds	r0, #1
 8044d90:	b2c0      	uxtb	r0, r0
 8044d92:	e007      	b.n	8044da4 <BoardGetBatteryLevel+0x58>
        else if( ( BatteryVoltage > BATTERY_SHUTDOWN_LEVEL ) && ( BatteryVoltage <= BATTERY_MIN_LEVEL ) )
 8044d94:	f6a4 04fd 	subw	r4, r4, #2301	; 0x8fd
 8044d98:	b2a4      	uxth	r4, r4
 8044d9a:	2c63      	cmp	r4, #99	; 0x63
 8044d9c:	d803      	bhi.n	8044da6 <BoardGetBatteryLevel+0x5a>
            batteryLevel = 1;
 8044d9e:	2001      	movs	r0, #1
 8044da0:	e000      	b.n	8044da4 <BoardGetBatteryLevel+0x58>
            batteryLevel = 254;
 8044da2:	20fe      	movs	r0, #254	; 0xfe
}
 8044da4:	bd10      	pop	{r4, pc}
            batteryLevel = 255;
 8044da6:	20ff      	movs	r0, #255	; 0xff
 8044da8:	e7fc      	b.n	8044da4 <BoardGetBatteryLevel+0x58>
 8044daa:	bf00      	nop
 8044dac:	2001809a 	.word	0x2001809a
 8044db0:	1b4e81b5 	.word	0x1b4e81b5

08044db4 <BoardGetRandomSeed>:

uint32_t BoardGetRandomSeed( void )
{
    return ( ( *( uint32_t* )ID1 ) ^ ( *( uint32_t* )ID2 ) ^ ( *( uint32_t* )ID3 ) );
}
 8044db4:	4b01      	ldr	r3, [pc, #4]	; (8044dbc <BoardGetRandomSeed+0x8>)
 8044db6:	6818      	ldr	r0, [r3, #0]
 8044db8:	4770      	bx	lr
 8044dba:	bf00      	nop
 8044dbc:	0bfa0590 	.word	0x0bfa0590

08044dc0 <BoardGetUniqueId>:

void BoardGetUniqueId( uint8_t *id )
{
 8044dc0:	b410      	push	{r4}
    id[7] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 24;
 8044dc2:	4910      	ldr	r1, [pc, #64]	; (8044e04 <BoardGetUniqueId+0x44>)
 8044dc4:	680a      	ldr	r2, [r1, #0]
 8044dc6:	4b10      	ldr	r3, [pc, #64]	; (8044e08 <BoardGetUniqueId+0x48>)
 8044dc8:	681c      	ldr	r4, [r3, #0]
 8044dca:	4422      	add	r2, r4
 8044dcc:	0e12      	lsrs	r2, r2, #24
 8044dce:	71c2      	strb	r2, [r0, #7]
    id[6] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 16;
 8044dd0:	680a      	ldr	r2, [r1, #0]
 8044dd2:	681c      	ldr	r4, [r3, #0]
 8044dd4:	4422      	add	r2, r4
 8044dd6:	0c12      	lsrs	r2, r2, #16
 8044dd8:	7182      	strb	r2, [r0, #6]
    id[5] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) ) >> 8;
 8044dda:	680a      	ldr	r2, [r1, #0]
 8044ddc:	681c      	ldr	r4, [r3, #0]
 8044dde:	4422      	add	r2, r4
 8044de0:	0a12      	lsrs	r2, r2, #8
 8044de2:	7142      	strb	r2, [r0, #5]
    id[4] = ( ( *( uint32_t* )ID1 )+ ( *( uint32_t* )ID3 ) );
 8044de4:	680a      	ldr	r2, [r1, #0]
 8044de6:	6819      	ldr	r1, [r3, #0]
 8044de8:	440a      	add	r2, r1
 8044dea:	7102      	strb	r2, [r0, #4]
    id[3] = ( ( *( uint32_t* )ID2 ) ) >> 24;
 8044dec:	78da      	ldrb	r2, [r3, #3]
 8044dee:	70c2      	strb	r2, [r0, #3]
    id[2] = ( ( *( uint32_t* )ID2 ) ) >> 16;
 8044df0:	885a      	ldrh	r2, [r3, #2]
 8044df2:	7082      	strb	r2, [r0, #2]
    id[1] = ( ( *( uint32_t* )ID2 ) ) >> 8;
 8044df4:	681a      	ldr	r2, [r3, #0]
 8044df6:	0a12      	lsrs	r2, r2, #8
 8044df8:	7042      	strb	r2, [r0, #1]
    id[0] = ( ( *( uint32_t* )ID2 ) );
 8044dfa:	681b      	ldr	r3, [r3, #0]
 8044dfc:	7003      	strb	r3, [r0, #0]
}
 8044dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8044e02:	4770      	bx	lr
 8044e04:	0bfa0590 	.word	0x0bfa0590
 8044e08:	0bfa0594 	.word	0x0bfa0594

08044e0c <BoardLowPowerHandler>:
bool EepromMcuIsErasingOnGoing( void );
/*!
 * \brief Manages the entry into ARM cortex deep-sleep mode
 */
void BoardLowPowerHandler( void )
{
 8044e0c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8044e0e:	b672      	cpsid	i
	    /*!
	     * If an interrupt has occurred after __disable_irq( ), it is kept pending
	     * and cortex will not enter low power anyway
	     */

	    LpmEnterLowPower( );
 8044e10:	f7fc fe28 	bl	8041a64 <LpmEnterLowPower>
  __ASM volatile ("cpsie i" : : : "memory");
 8044e14:	b662      	cpsie	i

	    __enable_irq( );
}
 8044e16:	bd08      	pop	{r3, pc}

08044e18 <BoardResetMcu>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8044e18:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8044e1c:	b672      	cpsid	i
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8044e1e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8044e22:	4905      	ldr	r1, [pc, #20]	; (8044e38 <BoardResetMcu+0x20>)
 8044e24:	68ca      	ldr	r2, [r1, #12]
 8044e26:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8044e2a:	4b04      	ldr	r3, [pc, #16]	; (8044e3c <BoardResetMcu+0x24>)
 8044e2c:	4313      	orrs	r3, r2
 8044e2e:	60cb      	str	r3, [r1, #12]
 8044e30:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8044e34:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8044e36:	e7fd      	b.n	8044e34 <BoardResetMcu+0x1c>
 8044e38:	e000ed00 	.word	0xe000ed00
 8044e3c:	05fa0004 	.word	0x05fa0004

08044e40 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8044e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8044e44:	4a30      	ldr	r2, [pc, #192]	; (8044f08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc8>)
 8044e46:	eb02 0250 	add.w	r2, r2, r0, lsr #1
 8044e4a:	fbb2 f0f0 	udiv	r0, r2, r0
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8044e4e:	4b2f      	ldr	r3, [pc, #188]	; (8044f0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xcc>)
 8044e50:	222c      	movs	r2, #44	; 0x2c
 8044e52:	fb02 3301 	mla	r3, r2, r1, r3
 8044e56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8044e58:	68d9      	ldr	r1, [r3, #12]
 8044e5a:	440a      	add	r2, r1
 8044e5c:	3a32      	subs	r2, #50	; 0x32
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8044e5e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8044e60:	1ccd      	adds	r5, r1, #3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8044e62:	fb00 2515 	mls	r5, r0, r5, r2

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8044e66:	691a      	ldr	r2, [r3, #16]
 8044e68:	6a1c      	ldr	r4, [r3, #32]
 8044e6a:	1b12      	subs	r2, r2, r4
 8044e6c:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8044e70:	3104      	adds	r1, #4
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8044e72:	fb01 2710 	mls	r7, r1, r0, r2


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8044e76:	695b      	ldr	r3, [r3, #20]
 8044e78:	eb04 0e03 	add.w	lr, r4, r3

  if (tsdadel_min <= 0)
 8044e7c:	2d00      	cmp	r5, #0
 8044e7e:	dd05      	ble.n	8044e8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x4c>
  {
    tsdadel_min = 0;
  }

  if (tsdadel_max <= 0)
 8044e80:	2f00      	cmp	r7, #0
 8044e82:	dd05      	ble.n	8044e90 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x50>
  {
    tsdadel_max = 0;
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8044e84:	2600      	movs	r6, #0
  uint32_t prev_presc = I2C_PRESC_MAX;
 8044e86:	f04f 0810 	mov.w	r8, #16
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8044e8a:	e036      	b.n	8044efa <I2C_Compute_PRESC_SCLDEL_SDADEL+0xba>
    tsdadel_min = 0;
 8044e8c:	2500      	movs	r5, #0
 8044e8e:	e7f7      	b.n	8044e80 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x40>
    tsdadel_max = 0;
 8044e90:	2700      	movs	r7, #0
 8044e92:	e7f7      	b.n	8044e84 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x44>
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;

      if (tscldel >= (uint32_t)tscldel_min)
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8044e94:	3201      	adds	r2, #1
 8044e96:	2a0f      	cmp	r2, #15
 8044e98:	d820      	bhi.n	8044edc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x9c>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8044e9a:	fb02 f301 	mul.w	r3, r2, r1
 8044e9e:	fb00 f303 	mul.w	r3, r0, r3

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8044ea2:	429d      	cmp	r5, r3
 8044ea4:	d8f6      	bhi.n	8044e94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x54>
 8044ea6:	429f      	cmp	r7, r3
 8044ea8:	d3f4      	bcc.n	8044e94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x54>
          {
            if(presc != prev_presc)
 8044eaa:	45b0      	cmp	r8, r6
 8044eac:	d0f2      	beq.n	8044e94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x54>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8044eae:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8044f10 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd0>
 8044eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8044eb6:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8044f14 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xd4>
 8044eba:	eb03 0b83 	add.w	fp, r3, r3, lsl #2
 8044ebe:	eb0a 098b 	add.w	r9, sl, fp, lsl #2
 8044ec2:	f84a 602b 	str.w	r6, [sl, fp, lsl #2]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8044ec6:	f8c9 4004 	str.w	r4, [r9, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8044eca:	f8c9 2008 	str.w	r2, [r9, #8]
              prev_presc = presc;
              I2c_valid_timing_nbr ++;
 8044ece:	3301      	adds	r3, #1
 8044ed0:	f8c8 3000 	str.w	r3, [r8]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8044ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8044ed6:	d814      	bhi.n	8044f02 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc2>
              prev_presc = presc;
 8044ed8:	46b0      	mov	r8, r6
 8044eda:	e7db      	b.n	8044e94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x54>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8044edc:	4664      	mov	r4, ip
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8044ede:	2c0f      	cmp	r4, #15
 8044ee0:	d80a      	bhi.n	8044ef8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xb8>
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8044ee2:	f104 0c01 	add.w	ip, r4, #1
 8044ee6:	1c71      	adds	r1, r6, #1
 8044ee8:	fb04 1301 	mla	r3, r4, r1, r1
 8044eec:	fb00 f303 	mul.w	r3, r0, r3
      if (tscldel >= (uint32_t)tscldel_min)
 8044ef0:	459e      	cmp	lr, r3
 8044ef2:	d8f3      	bhi.n	8044edc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x9c>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8044ef4:	2200      	movs	r2, #0
 8044ef6:	e7ce      	b.n	8044e96 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x56>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8044ef8:	3601      	adds	r6, #1
 8044efa:	2e0f      	cmp	r6, #15
 8044efc:	d801      	bhi.n	8044f02 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xc2>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8044efe:	2400      	movs	r4, #0
 8044f00:	e7ed      	b.n	8044ede <I2C_Compute_PRESC_SCLDEL_SDADEL+0x9e>
          }
        }
      }
    }
  }
}
 8044f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8044f06:	bf00      	nop
 8044f08:	3b9aca00 	.word	0x3b9aca00
 8044f0c:	08059d98 	.word	0x08059d98
 8044f10:	200192f0 	.word	0x200192f0
 8044f14:	200188f0 	.word	0x200188f0

08044f18 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8044f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8044f1c:	b089      	sub	sp, #36	; 0x24
 8044f1e:	468c      	mov	ip, r1
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8044f20:	4b45      	ldr	r3, [pc, #276]	; (8045038 <I2C_Compute_SCLL_SCLH+0x120>)
 8044f22:	eb03 0150 	add.w	r1, r3, r0, lsr #1
 8044f26:	fbb1 faf0 	udiv	sl, r1, r0
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8044f2a:	4844      	ldr	r0, [pc, #272]	; (804503c <I2C_Compute_SCLL_SCLH+0x124>)
 8044f2c:	222c      	movs	r2, #44	; 0x2c
 8044f2e:	fb02 f20c 	mul.w	r2, r2, ip
 8044f32:	1881      	adds	r1, r0, r2
 8044f34:	5882      	ldr	r2, [r0, r2]
 8044f36:	eb03 0052 	add.w	r0, r3, r2, lsr #1
 8044f3a:	fbb0 f0f2 	udiv	r0, r0, r2
 8044f3e:	9005      	str	r0, [sp, #20]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8044f40:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8044f42:	fb0a f202 	mul.w	r2, sl, r2
 8044f46:	9204      	str	r2, [sp, #16]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8044f48:	684a      	ldr	r2, [r1, #4]
 8044f4a:	fbb3 fbf2 	udiv	fp, r3, r2
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8044f4e:	688a      	ldr	r2, [r1, #8]
 8044f50:	fbb3 f9f2 	udiv	r9, r3, r2

  prev_error = ti2cspeed;
 8044f54:	9003      	str	r0, [sp, #12]

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8044f56:	2300      	movs	r3, #0
 8044f58:	9306      	str	r3, [sp, #24]
  uint32_t ret = 0xFFFFFFFFU;
 8044f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8044f5e:	9307      	str	r3, [sp, #28]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8044f60:	e055      	b.n	804500e <I2C_Compute_SCLL_SCLH+0xf6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;

            if (error < 0)
            {
              error = -error;
 8044f62:	1aca      	subs	r2, r1, r3
 8044f64:	e020      	b.n	8044fa8 <I2C_Compute_SCLL_SCLH+0x90>
            if ((uint32_t)error < prev_error)
            {
              prev_error = (uint32_t)error;
              I2c_valid_timing[count].scll = scll;
              I2c_valid_timing[count].sclh = sclh;
              ret = count;
 8044f66:	4628      	mov	r0, r5
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8044f68:	28ff      	cmp	r0, #255	; 0xff
 8044f6a:	d82c      	bhi.n	8044fc6 <I2C_Compute_SCLL_SCLH+0xae>
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8044f6c:	1c45      	adds	r5, r0, #1
 8044f6e:	fb00 4204 	mla	r2, r0, r4, r4
 8044f72:	4442      	add	r2, r8
 8044f74:	4472      	add	r2, lr
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8044f76:	18bb      	adds	r3, r7, r2
 8044f78:	4930      	ldr	r1, [pc, #192]	; (804503c <I2C_Compute_SCLL_SCLH+0x124>)
 8044f7a:	262c      	movs	r6, #44	; 0x2c
 8044f7c:	fb06 110c 	mla	r1, r6, ip, r1
 8044f80:	6a0e      	ldr	r6, [r1, #32]
 8044f82:	4433      	add	r3, r6
 8044f84:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 8044f86:	4433      	add	r3, r6
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8044f88:	4599      	cmp	r9, r3
 8044f8a:	d8ec      	bhi.n	8044f66 <I2C_Compute_SCLL_SCLH+0x4e>
 8044f8c:	459b      	cmp	fp, r3
 8044f8e:	d3ea      	bcc.n	8044f66 <I2C_Compute_SCLL_SCLH+0x4e>
 8044f90:	4e2a      	ldr	r6, [pc, #168]	; (804503c <I2C_Compute_SCLL_SCLH+0x124>)
 8044f92:	212c      	movs	r1, #44	; 0x2c
 8044f94:	fb01 610c 	mla	r1, r1, ip, r6
 8044f98:	69c9      	ldr	r1, [r1, #28]
 8044f9a:	4291      	cmp	r1, r2
 8044f9c:	d8e3      	bhi.n	8044f66 <I2C_Compute_SCLL_SCLH+0x4e>
 8044f9e:	4592      	cmp	sl, r2
 8044fa0:	d2e1      	bcs.n	8044f66 <I2C_Compute_SCLL_SCLH+0x4e>
            if (error < 0)
 8044fa2:	9905      	ldr	r1, [sp, #20]
 8044fa4:	1a5a      	subs	r2, r3, r1
 8044fa6:	d4dc      	bmi.n	8044f62 <I2C_Compute_SCLL_SCLH+0x4a>
            if ((uint32_t)error < prev_error)
 8044fa8:	9b03      	ldr	r3, [sp, #12]
 8044faa:	429a      	cmp	r2, r3
 8044fac:	d2db      	bcs.n	8044f66 <I2C_Compute_SCLL_SCLH+0x4e>
              I2c_valid_timing[count].scll = scll;
 8044fae:	9e06      	ldr	r6, [sp, #24]
 8044fb0:	eb06 0186 	add.w	r1, r6, r6, lsl #2
 8044fb4:	4b22      	ldr	r3, [pc, #136]	; (8045040 <I2C_Compute_SCLL_SCLH+0x128>)
 8044fb6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8044fba:	9901      	ldr	r1, [sp, #4]
 8044fbc:	6119      	str	r1, [r3, #16]
              I2c_valid_timing[count].sclh = sclh;
 8044fbe:	60d8      	str	r0, [r3, #12]
              prev_error = (uint32_t)error;
 8044fc0:	9203      	str	r2, [sp, #12]
              ret = count;
 8044fc2:	9607      	str	r6, [sp, #28]
 8044fc4:	e7cf      	b.n	8044f66 <I2C_Compute_SCLL_SCLH+0x4e>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8044fc6:	9b02      	ldr	r3, [sp, #8]
 8044fc8:	9301      	str	r3, [sp, #4]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8044fca:	9b01      	ldr	r3, [sp, #4]
 8044fcc:	2bff      	cmp	r3, #255	; 0xff
 8044fce:	d81b      	bhi.n	8045008 <I2C_Compute_SCLL_SCLH+0xf0>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8044fd0:	9904      	ldr	r1, [sp, #16]
 8044fd2:	f101 0e32 	add.w	lr, r1, #50	; 0x32
 8044fd6:	9b01      	ldr	r3, [sp, #4]
 8044fd8:	1c5a      	adds	r2, r3, #1
 8044fda:	9202      	str	r2, [sp, #8]
 8044fdc:	fb03 4704 	mla	r7, r3, r4, r4
 8044fe0:	ea4f 084a 	mov.w	r8, sl, lsl #1
 8044fe4:	eb07 074a 	add.w	r7, r7, sl, lsl #1
 8044fe8:	4477      	add	r7, lr
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8044fea:	4a14      	ldr	r2, [pc, #80]	; (804503c <I2C_Compute_SCLL_SCLH+0x124>)
 8044fec:	232c      	movs	r3, #44	; 0x2c
 8044fee:	fb03 230c 	mla	r3, r3, ip, r2
 8044ff2:	699b      	ldr	r3, [r3, #24]
 8044ff4:	42bb      	cmp	r3, r7
 8044ff6:	d2e6      	bcs.n	8044fc6 <I2C_Compute_SCLL_SCLH+0xae>
 8044ff8:	f1a7 0332 	sub.w	r3, r7, #50	; 0x32
 8044ffc:	1a5b      	subs	r3, r3, r1
 8044ffe:	ebba 0f93 	cmp.w	sl, r3, lsr #2
 8045002:	d2e0      	bcs.n	8044fc6 <I2C_Compute_SCLL_SCLH+0xae>
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8045004:	2000      	movs	r0, #0
 8045006:	e7af      	b.n	8044f68 <I2C_Compute_SCLL_SCLH+0x50>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8045008:	9b06      	ldr	r3, [sp, #24]
 804500a:	3301      	adds	r3, #1
 804500c:	9306      	str	r3, [sp, #24]
 804500e:	4b0d      	ldr	r3, [pc, #52]	; (8045044 <I2C_Compute_SCLL_SCLH+0x12c>)
 8045010:	681b      	ldr	r3, [r3, #0]
 8045012:	9a06      	ldr	r2, [sp, #24]
 8045014:	4293      	cmp	r3, r2
 8045016:	d90a      	bls.n	804502e <I2C_Compute_SCLL_SCLH+0x116>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8045018:	9b06      	ldr	r3, [sp, #24]
 804501a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 804501e:	4a08      	ldr	r2, [pc, #32]	; (8045040 <I2C_Compute_SCLL_SCLH+0x128>)
 8045020:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8045024:	fb04 a40a 	mla	r4, r4, sl, sl
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8045028:	2300      	movs	r3, #0
 804502a:	9301      	str	r3, [sp, #4]
 804502c:	e7cd      	b.n	8044fca <I2C_Compute_SCLL_SCLH+0xb2>
      }
    }
  }

  return ret;
}
 804502e:	9807      	ldr	r0, [sp, #28]
 8045030:	b009      	add	sp, #36	; 0x24
 8045032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8045036:	bf00      	nop
 8045038:	3b9aca00 	.word	0x3b9aca00
 804503c:	08059d98 	.word	0x08059d98
 8045040:	200188f0 	.word	0x200188f0
 8045044:	200192f0 	.word	0x200192f0

08045048 <I2C_GetTiming>:
{
 8045048:	b538      	push	{r3, r4, r5, lr}
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 804504a:	4605      	mov	r5, r0
 804504c:	b108      	cbz	r0, 8045052 <I2C_GetTiming+0xa>
 804504e:	bba9      	cbnz	r1, 80450bc <I2C_GetTiming+0x74>
  uint32_t ret = 0;
 8045050:	460d      	mov	r5, r1
}
 8045052:	4628      	mov	r0, r5
 8045054:	bd38      	pop	{r3, r4, r5, pc}
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8045056:	3401      	adds	r4, #1
 8045058:	2c02      	cmp	r4, #2
 804505a:	d831      	bhi.n	80450c0 <I2C_GetTiming+0x78>
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 804505c:	4a1a      	ldr	r2, [pc, #104]	; (80450c8 <I2C_GetTiming+0x80>)
 804505e:	232c      	movs	r3, #44	; 0x2c
 8045060:	fb03 2304 	mla	r3, r3, r4, r2
 8045064:	685b      	ldr	r3, [r3, #4]
 8045066:	428b      	cmp	r3, r1
 8045068:	d8f5      	bhi.n	8045056 <I2C_GetTiming+0xe>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 804506a:	232c      	movs	r3, #44	; 0x2c
 804506c:	fb03 2304 	mla	r3, r3, r4, r2
 8045070:	689b      	ldr	r3, [r3, #8]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8045072:	428b      	cmp	r3, r1
 8045074:	d3ef      	bcc.n	8045056 <I2C_GetTiming+0xe>
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8045076:	4621      	mov	r1, r4
 8045078:	4628      	mov	r0, r5
 804507a:	f7ff fee1 	bl	8044e40 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 804507e:	4621      	mov	r1, r4
 8045080:	4628      	mov	r0, r5
 8045082:	f7ff ff49 	bl	8044f18 <I2C_Compute_SCLL_SCLH>
        if (idx < I2C_VALID_TIMING_NBR)
 8045086:	287f      	cmp	r0, #127	; 0x7f
 8045088:	d81c      	bhi.n	80450c4 <I2C_GetTiming+0x7c>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 804508a:	4a10      	ldr	r2, [pc, #64]	; (80450cc <I2C_GetTiming+0x84>)
 804508c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8045090:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8045094:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8045098:	684b      	ldr	r3, [r1, #4]
 804509a:	051d      	lsls	r5, r3, #20
 804509c:	f405 0570 	and.w	r5, r5, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80450a0:	ea45 7504 	orr.w	r5, r5, r4, lsl #28
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80450a4:	688b      	ldr	r3, [r1, #8]
 80450a6:	041b      	lsls	r3, r3, #16
 80450a8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80450ac:	431d      	orrs	r5, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80450ae:	68cb      	ldr	r3, [r1, #12]
 80450b0:	021b      	lsls	r3, r3, #8
 80450b2:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80450b4:	431d      	orrs	r5, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80450b6:	7c0b      	ldrb	r3, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80450b8:	431d      	orrs	r5, r3
 80450ba:	e7ca      	b.n	8045052 <I2C_GetTiming+0xa>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80450bc:	2400      	movs	r4, #0
 80450be:	e7cb      	b.n	8045058 <I2C_GetTiming+0x10>
  uint32_t ret = 0;
 80450c0:	2500      	movs	r5, #0
 80450c2:	e7c6      	b.n	8045052 <I2C_GetTiming+0xa>
 80450c4:	2500      	movs	r5, #0
 80450c6:	e7c4      	b.n	8045052 <I2C_GetTiming+0xa>
 80450c8:	08059d98 	.word	0x08059d98
 80450cc:	200188f0 	.word	0x200188f0

080450d0 <I2C1_WriteReg>:
{
 80450d0:	b510      	push	{r4, lr}
 80450d2:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C1_TIMEOUT) != HAL_OK)
 80450d4:	f242 7410 	movw	r4, #10000	; 0x2710
 80450d8:	9402      	str	r4, [sp, #8]
 80450da:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 80450de:	9401      	str	r4, [sp, #4]
 80450e0:	9300      	str	r3, [sp, #0]
 80450e2:	4613      	mov	r3, r2
 80450e4:	460a      	mov	r2, r1
 80450e6:	4601      	mov	r1, r0
 80450e8:	4812      	ldr	r0, [pc, #72]	; (8045134 <I2C1_WriteReg+0x64>)
 80450ea:	f003 fa89 	bl	8048600 <HAL_I2C_Mem_Write>
 80450ee:	b910      	cbnz	r0, 80450f6 <I2C1_WriteReg+0x26>
  int32_t  status = BSP_ERROR_NONE;
 80450f0:	2000      	movs	r0, #0
}
 80450f2:	b004      	add	sp, #16
 80450f4:	bd10      	pop	{r4, pc}
    hal_error = HAL_I2C_GetError(&hbus_i2c1);
 80450f6:	480f      	ldr	r0, [pc, #60]	; (8045134 <I2C1_WriteReg+0x64>)
 80450f8:	f003 fc6e 	bl	80489d8 <HAL_I2C_GetError>
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 80450fc:	f010 0f01 	tst.w	r0, #1
 8045100:	d10b      	bne.n	804511a <I2C1_WriteReg+0x4a>
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8045102:	f010 0f02 	tst.w	r0, #2
 8045106:	d10b      	bne.n	8045120 <I2C1_WriteReg+0x50>
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 8045108:	f010 0f04 	tst.w	r0, #4
 804510c:	d10b      	bne.n	8045126 <I2C1_WriteReg+0x56>
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 804510e:	f010 0f60 	tst.w	r0, #96	; 0x60
 8045112:	d00b      	beq.n	804512c <I2C1_WriteReg+0x5c>
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 8045114:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8045118:	e7eb      	b.n	80450f2 <I2C1_WriteReg+0x22>
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 804511a:	f06f 0066 	mvn.w	r0, #102	; 0x66
 804511e:	e7e8      	b.n	80450f2 <I2C1_WriteReg+0x22>
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 8045120:	f06f 0064 	mvn.w	r0, #100	; 0x64
 8045124:	e7e5      	b.n	80450f2 <I2C1_WriteReg+0x22>
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8045126:	f06f 0065 	mvn.w	r0, #101	; 0x65
 804512a:	e7e2      	b.n	80450f2 <I2C1_WriteReg+0x22>
      status = BSP_ERROR_PERIPH_FAILURE;
 804512c:	f06f 0003 	mvn.w	r0, #3
  return status;
 8045130:	e7df      	b.n	80450f2 <I2C1_WriteReg+0x22>
 8045132:	bf00      	nop
 8045134:	200192f4 	.word	0x200192f4

08045138 <I2C1_ReadReg>:
{
 8045138:	b510      	push	{r4, lr}
 804513a:	b084      	sub	sp, #16
  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C1_TIMEOUT) != HAL_OK)
 804513c:	f242 7410 	movw	r4, #10000	; 0x2710
 8045140:	9402      	str	r4, [sp, #8]
 8045142:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 8045146:	9401      	str	r4, [sp, #4]
 8045148:	9300      	str	r3, [sp, #0]
 804514a:	4613      	mov	r3, r2
 804514c:	460a      	mov	r2, r1
 804514e:	4601      	mov	r1, r0
 8045150:	4812      	ldr	r0, [pc, #72]	; (804519c <I2C1_ReadReg+0x64>)
 8045152:	f003 fb29 	bl	80487a8 <HAL_I2C_Mem_Read>
 8045156:	b910      	cbnz	r0, 804515e <I2C1_ReadReg+0x26>
  int32_t  status = BSP_ERROR_NONE;
 8045158:	2000      	movs	r0, #0
}
 804515a:	b004      	add	sp, #16
 804515c:	bd10      	pop	{r4, pc}
    hal_error = HAL_I2C_GetError(&hbus_i2c1);
 804515e:	480f      	ldr	r0, [pc, #60]	; (804519c <I2C1_ReadReg+0x64>)
 8045160:	f003 fc3a 	bl	80489d8 <HAL_I2C_GetError>
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 8045164:	f010 0f01 	tst.w	r0, #1
 8045168:	d10b      	bne.n	8045182 <I2C1_ReadReg+0x4a>
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 804516a:	f010 0f02 	tst.w	r0, #2
 804516e:	d10b      	bne.n	8045188 <I2C1_ReadReg+0x50>
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 8045170:	f010 0f04 	tst.w	r0, #4
 8045174:	d10b      	bne.n	804518e <I2C1_ReadReg+0x56>
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8045176:	f010 0f60 	tst.w	r0, #96	; 0x60
 804517a:	d00b      	beq.n	8045194 <I2C1_ReadReg+0x5c>
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 804517c:	f06f 0063 	mvn.w	r0, #99	; 0x63
 8045180:	e7eb      	b.n	804515a <I2C1_ReadReg+0x22>
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 8045182:	f06f 0066 	mvn.w	r0, #102	; 0x66
 8045186:	e7e8      	b.n	804515a <I2C1_ReadReg+0x22>
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 8045188:	f06f 0064 	mvn.w	r0, #100	; 0x64
 804518c:	e7e5      	b.n	804515a <I2C1_ReadReg+0x22>
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 804518e:	f06f 0065 	mvn.w	r0, #101	; 0x65
 8045192:	e7e2      	b.n	804515a <I2C1_ReadReg+0x22>
      status = BSP_ERROR_PERIPH_FAILURE;
 8045194:	f06f 0003 	mvn.w	r0, #3
  return status;
 8045198:	e7df      	b.n	804515a <I2C1_ReadReg+0x22>
 804519a:	bf00      	nop
 804519c:	200192f4 	.word	0x200192f4

080451a0 <I2C1_MspDeInit>:
{
 80451a0:	b510      	push	{r4, lr}
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin);
 80451a2:	4c08      	ldr	r4, [pc, #32]	; (80451c4 <I2C1_MspDeInit+0x24>)
 80451a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80451a8:	4620      	mov	r0, r4
 80451aa:	f002 fbdd 	bl	8047968 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80451ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80451b2:	4620      	mov	r0, r4
 80451b4:	f002 fbd8 	bl	8047968 <HAL_GPIO_DeInit>
  BUS_I2C1_CLK_DISABLE();
 80451b8:	4a03      	ldr	r2, [pc, #12]	; (80451c8 <I2C1_MspDeInit+0x28>)
 80451ba:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80451bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80451c0:	6593      	str	r3, [r2, #88]	; 0x58
}
 80451c2:	bd10      	pop	{r4, pc}
 80451c4:	42020400 	.word	0x42020400
 80451c8:	40021000 	.word	0x40021000

080451cc <I2C1_MspInit>:
{
 80451cc:	b570      	push	{r4, r5, r6, lr}
 80451ce:	b088      	sub	sp, #32
  __HAL_RCC_PWR_CLK_ENABLE();
 80451d0:	4c1f      	ldr	r4, [pc, #124]	; (8045250 <I2C1_MspInit+0x84>)
 80451d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80451d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80451d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80451da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80451dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80451e0:	9300      	str	r3, [sp, #0]
 80451e2:	9b00      	ldr	r3, [sp, #0]
  HAL_PWREx_EnableVddIO2();
 80451e4:	f003 fc86 	bl	8048af4 <HAL_PWREx_EnableVddIO2>
  BUS_I2C1_GPIO_CLK_ENABLE();
 80451e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80451ea:	f043 0302 	orr.w	r3, r3, #2
 80451ee:	64e3      	str	r3, [r4, #76]	; 0x4c
 80451f0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80451f2:	f003 0302 	and.w	r3, r3, #2
 80451f6:	9301      	str	r3, [sp, #4]
 80451f8:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pin       = BUS_I2C1_SCL_GPIO_PIN;
 80451fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80451fe:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8045200:	2312      	movs	r3, #18
 8045202:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8045204:	2300      	movs	r3, #0
 8045206:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8045208:	2302      	movs	r3, #2
 804520a:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_GPIO_AF;
 804520c:	2604      	movs	r6, #4
 804520e:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 8045210:	4d10      	ldr	r5, [pc, #64]	; (8045254 <I2C1_MspInit+0x88>)
 8045212:	a903      	add	r1, sp, #12
 8045214:	4628      	mov	r0, r5
 8045216:	f002 fadb 	bl	80477d0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C1_SDA_GPIO_PIN;
 804521a:	f44f 7300 	mov.w	r3, #512	; 0x200
 804521e:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8045220:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8045222:	a903      	add	r1, sp, #12
 8045224:	4628      	mov	r0, r5
 8045226:	f002 fad3 	bl	80477d0 <HAL_GPIO_Init>
  BUS_I2C1_CLK_ENABLE();
 804522a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804522c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8045230:	65a3      	str	r3, [r4, #88]	; 0x58
 8045232:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8045234:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8045238:	9302      	str	r3, [sp, #8]
 804523a:	9b02      	ldr	r3, [sp, #8]
  BUS_I2C1_FORCE_RESET();
 804523c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804523e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8045242:	63a3      	str	r3, [r4, #56]	; 0x38
  BUS_I2C1_RELEASE_RESET();
 8045244:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8045246:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 804524a:	63a3      	str	r3, [r4, #56]	; 0x38
}
 804524c:	b008      	add	sp, #32
 804524e:	bd70      	pop	{r4, r5, r6, pc}
 8045250:	40021000 	.word	0x40021000
 8045254:	42020400 	.word	0x42020400

08045258 <BSP_I2C1_WriteReg>:
{
 8045258:	b500      	push	{lr}
 804525a:	b083      	sub	sp, #12
  return I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 804525c:	9300      	str	r3, [sp, #0]
 804525e:	4613      	mov	r3, r2
 8045260:	2201      	movs	r2, #1
 8045262:	f7ff ff35 	bl	80450d0 <I2C1_WriteReg>
}
 8045266:	b003      	add	sp, #12
 8045268:	f85d fb04 	ldr.w	pc, [sp], #4

0804526c <BSP_I2C1_ReadReg>:
{
 804526c:	b500      	push	{lr}
 804526e:	b083      	sub	sp, #12
  return I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 8045270:	9300      	str	r3, [sp, #0]
 8045272:	4613      	mov	r3, r2
 8045274:	2201      	movs	r2, #1
 8045276:	f7ff ff5f 	bl	8045138 <I2C1_ReadReg>
}
 804527a:	b003      	add	sp, #12
 804527c:	f85d fb04 	ldr.w	pc, [sp], #4

08045280 <BSP_I2C1_RegisterDefaultMspCallbacks>:
{
 8045280:	b508      	push	{r3, lr}
  __HAL_I2C_RESET_HANDLE_STATE(&hbus_i2c1);
 8045282:	480d      	ldr	r0, [pc, #52]	; (80452b8 <BSP_I2C1_RegisterDefaultMspCallbacks+0x38>)
 8045284:	2300      	movs	r3, #0
 8045286:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 804528a:	6743      	str	r3, [r0, #116]	; 0x74
 804528c:	6783      	str	r3, [r0, #120]	; 0x78
  if (HAL_I2C_RegisterCallback(&hbus_i2c1, HAL_I2C_MSPINIT_CB_ID, I2C1_MspInit) != HAL_OK)
 804528e:	4a0b      	ldr	r2, [pc, #44]	; (80452bc <BSP_I2C1_RegisterDefaultMspCallbacks+0x3c>)
 8045290:	2109      	movs	r1, #9
 8045292:	f003 f94d 	bl	8048530 <HAL_I2C_RegisterCallback>
 8045296:	b948      	cbnz	r0, 80452ac <BSP_I2C1_RegisterDefaultMspCallbacks+0x2c>
  else if (HAL_I2C_RegisterCallback(&hbus_i2c1, HAL_I2C_MSPDEINIT_CB_ID, I2C1_MspDeInit) != HAL_OK)
 8045298:	4a09      	ldr	r2, [pc, #36]	; (80452c0 <BSP_I2C1_RegisterDefaultMspCallbacks+0x40>)
 804529a:	210a      	movs	r1, #10
 804529c:	4806      	ldr	r0, [pc, #24]	; (80452b8 <BSP_I2C1_RegisterDefaultMspCallbacks+0x38>)
 804529e:	f003 f947 	bl	8048530 <HAL_I2C_RegisterCallback>
 80452a2:	b930      	cbnz	r0, 80452b2 <BSP_I2C1_RegisterDefaultMspCallbacks+0x32>
    Bus_IsI2c1MspCbValid = 1U;
 80452a4:	4b07      	ldr	r3, [pc, #28]	; (80452c4 <BSP_I2C1_RegisterDefaultMspCallbacks+0x44>)
 80452a6:	2201      	movs	r2, #1
 80452a8:	601a      	str	r2, [r3, #0]
}
 80452aa:	bd08      	pop	{r3, pc}
    ret = BSP_ERROR_PERIPH_FAILURE;
 80452ac:	f06f 0003 	mvn.w	r0, #3
 80452b0:	e7fb      	b.n	80452aa <BSP_I2C1_RegisterDefaultMspCallbacks+0x2a>
    ret = BSP_ERROR_PERIPH_FAILURE;
 80452b2:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80452b6:	e7f8      	b.n	80452aa <BSP_I2C1_RegisterDefaultMspCallbacks+0x2a>
 80452b8:	200192f4 	.word	0x200192f4
 80452bc:	080451cd 	.word	0x080451cd
 80452c0:	080451a1 	.word	0x080451a1
 80452c4:	200188e8 	.word	0x200188e8

080452c8 <BSP_I2C1_Init>:
{
 80452c8:	b508      	push	{r3, lr}
	 hbus_i2c1 = hi2c1;
 80452ca:	227c      	movs	r2, #124	; 0x7c
 80452cc:	4916      	ldr	r1, [pc, #88]	; (8045328 <BSP_I2C1_Init+0x60>)
 80452ce:	4817      	ldr	r0, [pc, #92]	; (804532c <BSP_I2C1_Init+0x64>)
 80452d0:	f00f fe56 	bl	8054f80 <memcpy>
  if (I2c1InitCounter == 0U)
 80452d4:	4b16      	ldr	r3, [pc, #88]	; (8045330 <BSP_I2C1_Init+0x68>)
 80452d6:	681b      	ldr	r3, [r3, #0]
 80452d8:	b14b      	cbz	r3, 80452ee <BSP_I2C1_Init+0x26>
  int32_t status = BSP_ERROR_NONE;
 80452da:	2000      	movs	r0, #0
  if (I2c1InitCounter < 0xFFFFFFFFU)
 80452dc:	4b14      	ldr	r3, [pc, #80]	; (8045330 <BSP_I2C1_Init+0x68>)
 80452de:	681b      	ldr	r3, [r3, #0]
 80452e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80452e4:	d002      	beq.n	80452ec <BSP_I2C1_Init+0x24>
    I2c1InitCounter++;
 80452e6:	3301      	adds	r3, #1
 80452e8:	4a11      	ldr	r2, [pc, #68]	; (8045330 <BSP_I2C1_Init+0x68>)
 80452ea:	6013      	str	r3, [r2, #0]
}
 80452ec:	bd08      	pop	{r3, pc}
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
 80452ee:	480f      	ldr	r0, [pc, #60]	; (804532c <BSP_I2C1_Init+0x64>)
 80452f0:	f003 fb6f 	bl	80489d2 <HAL_I2C_GetState>
 80452f4:	b998      	cbnz	r0, 804531e <BSP_I2C1_Init+0x56>
      if (Bus_IsI2c1MspCbValid == 0U)
 80452f6:	4b0f      	ldr	r3, [pc, #60]	; (8045334 <BSP_I2C1_Init+0x6c>)
 80452f8:	681b      	ldr	r3, [r3, #0]
 80452fa:	b913      	cbnz	r3, 8045302 <BSP_I2C1_Init+0x3a>
        if (BSP_I2C1_RegisterDefaultMspCallbacks() != BSP_ERROR_NONE)
 80452fc:	f7ff ffc0 	bl	8045280 <BSP_I2C1_RegisterDefaultMspCallbacks>
 8045300:	b978      	cbnz	r0, 8045322 <BSP_I2C1_Init+0x5a>
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(SystemCoreClock, BUS_I2C1_FREQUENCY)) != HAL_OK)
 8045302:	490d      	ldr	r1, [pc, #52]	; (8045338 <BSP_I2C1_Init+0x70>)
 8045304:	4b0d      	ldr	r3, [pc, #52]	; (804533c <BSP_I2C1_Init+0x74>)
 8045306:	6818      	ldr	r0, [r3, #0]
 8045308:	f7ff fe9e 	bl	8045048 <I2C_GetTiming>
 804530c:	4601      	mov	r1, r0
 804530e:	4807      	ldr	r0, [pc, #28]	; (804532c <BSP_I2C1_Init+0x64>)
 8045310:	f7fc fadc 	bl	80418cc <MX_I2C1_Init>
 8045314:	2800      	cmp	r0, #0
 8045316:	d0e1      	beq.n	80452dc <BSP_I2C1_Init+0x14>
          status = BSP_ERROR_BUS_FAILURE;
 8045318:	f06f 0007 	mvn.w	r0, #7
 804531c:	e7de      	b.n	80452dc <BSP_I2C1_Init+0x14>
  int32_t status = BSP_ERROR_NONE;
 804531e:	2000      	movs	r0, #0
 8045320:	e7dc      	b.n	80452dc <BSP_I2C1_Init+0x14>
          status = BSP_ERROR_MSP_FAILURE;
 8045322:	f06f 0009 	mvn.w	r0, #9
 8045326:	e7d9      	b.n	80452dc <BSP_I2C1_Init+0x14>
 8045328:	2001a218 	.word	0x2001a218
 804532c:	200192f4 	.word	0x200192f4
 8045330:	200188ec 	.word	0x200188ec
 8045334:	200188e8 	.word	0x200188e8
 8045338:	000186a0 	.word	0x000186a0
 804533c:	20018060 	.word	0x20018060

08045340 <BSP_IDD_Init>:
#include "spi.h"

static int32_t vref;

int32_t   BSP_IDD_Init(uint32_t Instance)
{
 8045340:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(CHARGE_CE_GPIO_Port, CHARGE_CE_Pin, GPIO_PIN_RESET);
 8045342:	2200      	movs	r2, #0
 8045344:	2110      	movs	r1, #16
 8045346:	4802      	ldr	r0, [pc, #8]	; (8045350 <BSP_IDD_Init+0x10>)
 8045348:	f002 fbaf 	bl	8047aaa <HAL_GPIO_WritePin>
	int32_t status = BSP_ERROR_NONE;
	return status;
}
 804534c:	2000      	movs	r0, #0
 804534e:	bd08      	pop	{r3, pc}
 8045350:	42020400 	.word	0x42020400

08045354 <BSP_IDD_StartMeasurement>:
{
	int32_t status = BSP_ERROR_NONE;
	return status;
}
int32_t   BSP_IDD_StartMeasurement(uint32_t Instance)
{
 8045354:	b508      	push	{r3, lr}
	int32_t status = BSP_ERROR_NONE;
	if(Instance == 0)
 8045356:	b140      	cbz	r0, 804536a <BSP_IDD_StartMeasurement+0x16>
		HAL_ADC_Start(&hadc2);
		while ((HAL_ADC_GetState(&hadc2) & HAL_ADC_STATE_REG_EOC) == 0)
			HAL_ADC_PollForConversion(&hadc2, 1000);
		HAL_ADC_Stop(&hadc2);
	}
	else if (Instance == 1)
 8045358:	2801      	cmp	r0, #1
 804535a:	d019      	beq.n	8045390 <BSP_IDD_StartMeasurement+0x3c>
			HAL_ADC_PollForConversion(&hadc1, 1000);
		HAL_ADC_Stop(&hadc1);
	}
	else
	{
		HAL_ADC_Start_DMA(&hadc1, vref, 2);
 804535c:	2202      	movs	r2, #2
 804535e:	2100      	movs	r1, #0
 8045360:	4815      	ldr	r0, [pc, #84]	; (80453b8 <BSP_IDD_StartMeasurement+0x64>)
 8045362:	f001 fe39 	bl	8046fd8 <HAL_ADC_Start_DMA>
	}
	return status;
}
 8045366:	2000      	movs	r0, #0
 8045368:	bd08      	pop	{r3, pc}
		HAL_ADC_Start(&hadc2);
 804536a:	4814      	ldr	r0, [pc, #80]	; (80453bc <BSP_IDD_StartMeasurement+0x68>)
 804536c:	f001 fdba 	bl	8046ee4 <HAL_ADC_Start>
		while ((HAL_ADC_GetState(&hadc2) & HAL_ADC_STATE_REG_EOC) == 0)
 8045370:	4812      	ldr	r0, [pc, #72]	; (80453bc <BSP_IDD_StartMeasurement+0x68>)
 8045372:	f001 fcf1 	bl	8046d58 <HAL_ADC_GetState>
 8045376:	f410 7f00 	tst.w	r0, #512	; 0x200
 804537a:	d105      	bne.n	8045388 <BSP_IDD_StartMeasurement+0x34>
			HAL_ADC_PollForConversion(&hadc2, 1000);
 804537c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8045380:	480e      	ldr	r0, [pc, #56]	; (80453bc <BSP_IDD_StartMeasurement+0x68>)
 8045382:	f001 f8b9 	bl	80464f8 <HAL_ADC_PollForConversion>
 8045386:	e7f3      	b.n	8045370 <BSP_IDD_StartMeasurement+0x1c>
		HAL_ADC_Stop(&hadc2);
 8045388:	480c      	ldr	r0, [pc, #48]	; (80453bc <BSP_IDD_StartMeasurement+0x68>)
 804538a:	f001 feec 	bl	8047166 <HAL_ADC_Stop>
 804538e:	e7ea      	b.n	8045366 <BSP_IDD_StartMeasurement+0x12>
		HAL_ADC_Start(&hadc1);
 8045390:	4809      	ldr	r0, [pc, #36]	; (80453b8 <BSP_IDD_StartMeasurement+0x64>)
 8045392:	f001 fda7 	bl	8046ee4 <HAL_ADC_Start>
		while ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_REG_EOC) == 0)
 8045396:	4808      	ldr	r0, [pc, #32]	; (80453b8 <BSP_IDD_StartMeasurement+0x64>)
 8045398:	f001 fcde 	bl	8046d58 <HAL_ADC_GetState>
 804539c:	f410 7f00 	tst.w	r0, #512	; 0x200
 80453a0:	d105      	bne.n	80453ae <BSP_IDD_StartMeasurement+0x5a>
			HAL_ADC_PollForConversion(&hadc1, 1000);
 80453a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80453a6:	4804      	ldr	r0, [pc, #16]	; (80453b8 <BSP_IDD_StartMeasurement+0x64>)
 80453a8:	f001 f8a6 	bl	80464f8 <HAL_ADC_PollForConversion>
 80453ac:	e7f3      	b.n	8045396 <BSP_IDD_StartMeasurement+0x42>
		HAL_ADC_Stop(&hadc1);
 80453ae:	4802      	ldr	r0, [pc, #8]	; (80453b8 <BSP_IDD_StartMeasurement+0x64>)
 80453b0:	f001 fed9 	bl	8047166 <HAL_ADC_Stop>
 80453b4:	e7d7      	b.n	8045366 <BSP_IDD_StartMeasurement+0x12>
 80453b6:	bf00      	nop
 80453b8:	2001a11c 	.word	0x2001a11c
 80453bc:	2001a088 	.word	0x2001a088

080453c0 <BSP_IDD_GetValue>:
	int32_t status = BSP_ERROR_NONE;

	return status;
}
int32_t   BSP_IDD_GetValue(uint32_t Instance, uint32_t *IddValue)
{
 80453c0:	b530      	push	{r4, r5, lr}
 80453c2:	b083      	sub	sp, #12
 80453c4:	460c      	mov	r4, r1
	int32_t status = BSP_ERROR_NONE;
	if(Instance == 0)
 80453c6:	b130      	cbz	r0, 80453d6 <BSP_IDD_GetValue+0x16>
	{
		*IddValue = HAL_ADC_GetValue(&hadc2);
	}
	else if(Instance == 1)
 80453c8:	2801      	cmp	r0, #1
 80453ca:	d009      	beq.n	80453e0 <BSP_IDD_GetValue+0x20>
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, GPIO_PIN_SET);
		*IddValue = (tmp[1] << 8) | tmp[0];
	}
	else
	{
		*IddValue = vref;
 80453cc:	2300      	movs	r3, #0
 80453ce:	600b      	str	r3, [r1, #0]
	}
	return status;
}
 80453d0:	2000      	movs	r0, #0
 80453d2:	b003      	add	sp, #12
 80453d4:	bd30      	pop	{r4, r5, pc}
		*IddValue = HAL_ADC_GetValue(&hadc2);
 80453d6:	4810      	ldr	r0, [pc, #64]	; (8045418 <BSP_IDD_GetValue+0x58>)
 80453d8:	f001 f912 	bl	8046600 <HAL_ADC_GetValue>
 80453dc:	6020      	str	r0, [r4, #0]
 80453de:	e7f7      	b.n	80453d0 <BSP_IDD_GetValue+0x10>
		uint8_t tmp[2] = {0};
 80453e0:	2200      	movs	r2, #0
 80453e2:	f8ad 2004 	strh.w	r2, [sp, #4]
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, GPIO_PIN_RESET);
 80453e6:	4d0d      	ldr	r5, [pc, #52]	; (804541c <BSP_IDD_GetValue+0x5c>)
 80453e8:	2110      	movs	r1, #16
 80453ea:	4628      	mov	r0, r5
 80453ec:	f002 fb5d 	bl	8047aaa <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1, tmp, 2, 1000);
 80453f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80453f4:	2202      	movs	r2, #2
 80453f6:	a901      	add	r1, sp, #4
 80453f8:	4809      	ldr	r0, [pc, #36]	; (8045420 <BSP_IDD_GetValue+0x60>)
 80453fa:	f005 f884 	bl	804a506 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, GPIO_PIN_SET);
 80453fe:	2201      	movs	r2, #1
 8045400:	2110      	movs	r1, #16
 8045402:	4628      	mov	r0, r5
 8045404:	f002 fb51 	bl	8047aaa <HAL_GPIO_WritePin>
		*IddValue = (tmp[1] << 8) | tmp[0];
 8045408:	f89d 2005 	ldrb.w	r2, [sp, #5]
 804540c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8045410:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8045414:	6023      	str	r3, [r4, #0]
 8045416:	e7db      	b.n	80453d0 <BSP_IDD_GetValue+0x10>
 8045418:	2001a088 	.word	0x2001a088
 804541c:	42020000 	.word	0x42020000
 8045420:	2001a3b8 	.word	0x2001a3b8

08045424 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 8045424:	b530      	push	{r4, r5, lr}
 8045426:	b083      	sub	sp, #12
  uint8_t ret = GYRO_ERROR;
//  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef ICG20330_InitStructure;
//  GYRO_FilterConfigTypeDef ICG20330_FilterStructure = {0, 0};

  if (icg20330Drv.ReadID() == I_AM_ICG20330)
 8045428:	4b14      	ldr	r3, [pc, #80]	; (804547c <BSP_GYRO_Init+0x58>)
 804542a:	689b      	ldr	r3, [r3, #8]
 804542c:	4798      	blx	r3
 804542e:	2892      	cmp	r0, #146	; 0x92
 8045430:	d002      	beq.n	8045438 <BSP_GYRO_Init+0x14>

    ret = GYRO_OK;
  }
  else
  {
    ret = GYRO_ERROR;
 8045432:	2001      	movs	r0, #1
  }

  return ret;
}
 8045434:	b003      	add	sp, #12
 8045436:	bd30      	pop	{r4, r5, pc}
    GyroscopeDrv = &icg20330Drv;
 8045438:	4d11      	ldr	r5, [pc, #68]	; (8045480 <BSP_GYRO_Init+0x5c>)
 804543a:	4b10      	ldr	r3, [pc, #64]	; (804547c <BSP_GYRO_Init+0x58>)
 804543c:	602b      	str	r3, [r5, #0]
    ICG20330_InitStructure.Power_Mode = ICG20330_MODE_ACTIVE;
 804543e:	2203      	movs	r2, #3
 8045440:	f88d 2000 	strb.w	r2, [sp]
    ICG20330_InitStructure.Output_DataRate = ICG20330_OUTPUT_DATARATE_1;
 8045444:	2400      	movs	r4, #0
 8045446:	f88d 4001 	strb.w	r4, [sp, #1]
    ICG20330_InitStructure.Axes_Enable = ICG20330_AXES_ENABLE;
 804544a:	f88d 2002 	strb.w	r2, [sp, #2]
    ICG20330_InitStructure.Band_Width = ICG20330_BANDWIDTH_250;
 804544e:	2202      	movs	r2, #2
 8045450:	f88d 2003 	strb.w	r2, [sp, #3]
    ICG20330_InitStructure.BlockData_Update = ICG20330_BlockDataUpdate_Continous;
 8045454:	f88d 4004 	strb.w	r4, [sp, #4]
    ICG20330_InitStructure.Endianness = ICG20330_BLE_LSB;
 8045458:	f88d 4005 	strb.w	r4, [sp, #5]
    ICG20330_InitStructure.Full_Scale = ICG20330_FULLSCALE_500;
 804545c:	2218      	movs	r2, #24
 804545e:	f88d 2006 	strb.w	r2, [sp, #6]
    GyroscopeDrv->Init(&ICG20330_InitStructure);
 8045462:	681b      	ldr	r3, [r3, #0]
 8045464:	4668      	mov	r0, sp
 8045466:	4798      	blx	r3
      GyroscopeDrv->FilterConfig(0x00) ;
 8045468:	682b      	ldr	r3, [r5, #0]
 804546a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804546c:	4620      	mov	r0, r4
 804546e:	4798      	blx	r3
    GyroscopeDrv->FilterCmd(0x1B);
 8045470:	682b      	ldr	r3, [r5, #0]
 8045472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045474:	201b      	movs	r0, #27
 8045476:	4798      	blx	r3
    ret = GYRO_OK;
 8045478:	4620      	mov	r0, r4
 804547a:	e7db      	b.n	8045434 <BSP_GYRO_Init+0x10>
 804547c:	20018064 	.word	0x20018064
 8045480:	20019370 	.word	0x20019370

08045484 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8045484:	b508      	push	{r3, lr}
  if (GyroscopeDrv->GetXYZ != NULL)
 8045486:	4b03      	ldr	r3, [pc, #12]	; (8045494 <BSP_GYRO_GetXYZ+0x10>)
 8045488:	681b      	ldr	r3, [r3, #0]
 804548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804548c:	b103      	cbz	r3, 8045490 <BSP_GYRO_GetXYZ+0xc>
  {
    GyroscopeDrv->GetXYZ(pfData);
 804548e:	4798      	blx	r3
  }
}
 8045490:	bd08      	pop	{r3, pc}
 8045492:	bf00      	nop
 8045494:	20019370 	.word	0x20019370

08045498 <GYRO_IO_Write>:
void    GYRO_IO_DeInit(void)
{
	BSP_I2C1_DeInit();
}
void    GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8045498:	b508      	push	{r3, lr}
 804549a:	4613      	mov	r3, r2
	uint16_t DevAddress = (ICG20330_ADDR << 1) | 0x00;
	BSP_I2C1_WriteReg(DevAddress, WriteAddr, pBuffer, NumByteToWrite);
 804549c:	4602      	mov	r2, r0
 804549e:	20d2      	movs	r0, #210	; 0xd2
 80454a0:	f7ff feda 	bl	8045258 <BSP_I2C1_WriteReg>

}
 80454a4:	bd08      	pop	{r3, pc}
	...

080454a8 <GYRO_IO_Init>:
{
 80454a8:	b500      	push	{lr}
 80454aa:	b083      	sub	sp, #12
	uint8_t data = 0x81;
 80454ac:	2381      	movs	r3, #129	; 0x81
 80454ae:	f88d 3007 	strb.w	r3, [sp, #7]
	BSP_I2C1_Init();
 80454b2:	f7ff ff09 	bl	80452c8 <BSP_I2C1_Init>
	HAL_GPIO_WritePin(GYO_DEN_GPIO_Port, GYO_DEN_Pin, GPIO_PIN_RESET);
 80454b6:	2200      	movs	r2, #0
 80454b8:	2102      	movs	r1, #2
 80454ba:	4809      	ldr	r0, [pc, #36]	; (80454e0 <GYRO_IO_Init+0x38>)
 80454bc:	f002 faf5 	bl	8047aaa <HAL_GPIO_WritePin>
	DelayMs(50);
 80454c0:	2032      	movs	r0, #50	; 0x32
 80454c2:	f7fb ff01 	bl	80412c8 <DelayMs>
	GYRO_IO_Write(&data, ICG20330_PWR_MGMT_1_ADDR, 1);
 80454c6:	2201      	movs	r2, #1
 80454c8:	216b      	movs	r1, #107	; 0x6b
 80454ca:	f10d 0007 	add.w	r0, sp, #7
 80454ce:	f7ff ffe3 	bl	8045498 <GYRO_IO_Write>
	DelayMs(100);
 80454d2:	2064      	movs	r0, #100	; 0x64
 80454d4:	f7fb fef8 	bl	80412c8 <DelayMs>
}
 80454d8:	b003      	add	sp, #12
 80454da:	f85d fb04 	ldr.w	pc, [sp], #4
 80454de:	bf00      	nop
 80454e0:	42021000 	.word	0x42021000

080454e4 <GYRO_IO_Read>:
void    GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80454e4:	b508      	push	{r3, lr}
 80454e6:	4613      	mov	r3, r2
	uint16_t DevAddress = (ICG20330_ADDR << 1) | 0x01;
	BSP_I2C1_ReadReg(DevAddress, ReadAddr, pBuffer, NumByteToRead);
 80454e8:	4602      	mov	r2, r0
 80454ea:	20d3      	movs	r0, #211	; 0xd3
 80454ec:	f7ff febe 	bl	804526c <BSP_I2C1_ReadReg>
}
 80454f0:	bd08      	pop	{r3, pc}

080454f2 <lr1110_crypto_fill_cbuffer_opcode_key_data>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

static void lr1110_crypto_fill_cbuffer_opcode_key_data( uint8_t* cbuffer, uint16_t opcode, uint8_t key_id,
                                                        const uint8_t* data, uint16_t length )
{
 80454f2:	b430      	push	{r4, r5}
 80454f4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    cbuffer[0] = ( uint8_t )( opcode >> 8 );
 80454f8:	0a0c      	lsrs	r4, r1, #8
 80454fa:	7004      	strb	r4, [r0, #0]
    cbuffer[1] = ( uint8_t )( opcode >> 0 );
 80454fc:	7041      	strb	r1, [r0, #1]

    cbuffer[2] = key_id;
 80454fe:	7082      	strb	r2, [r0, #2]

    for( uint16_t index = 0; index < length; index++ )
 8045500:	2200      	movs	r2, #0
 8045502:	42aa      	cmp	r2, r5
 8045504:	d205      	bcs.n	8045512 <lr1110_crypto_fill_cbuffer_opcode_key_data+0x20>
    {
        cbuffer[3 + index] = data[index];
 8045506:	1cd1      	adds	r1, r2, #3
 8045508:	5c9c      	ldrb	r4, [r3, r2]
 804550a:	5444      	strb	r4, [r0, r1]
    for( uint16_t index = 0; index < length; index++ )
 804550c:	3201      	adds	r2, #1
 804550e:	b292      	uxth	r2, r2
 8045510:	e7f7      	b.n	8045502 <lr1110_crypto_fill_cbuffer_opcode_key_data+0x10>
    }
}
 8045512:	bc30      	pop	{r4, r5}
 8045514:	4770      	bx	lr

08045516 <lr1110_crypto_set_key>:
{
 8045516:	b570      	push	{r4, r5, r6, lr}
 8045518:	b088      	sub	sp, #32
 804551a:	460e      	mov	r6, r1
    uint8_t cbuffer[LR1110_CRYPTO_SET_KEY_CMD_LENGTH] = { 0x00 };
 804551c:	2400      	movs	r4, #0
 804551e:	9403      	str	r4, [sp, #12]
 8045520:	9404      	str	r4, [sp, #16]
 8045522:	9405      	str	r4, [sp, #20]
 8045524:	9406      	str	r4, [sp, #24]
 8045526:	f8cd 401b 	str.w	r4, [sp, #27]
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]      = { 0x00 };
 804552a:	f88d 4008 	strb.w	r4, [sp, #8]
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_SET_KEY_OC >> 8 );
 804552e:	2105      	movs	r1, #5
 8045530:	f88d 100c 	strb.w	r1, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_SET_KEY_OC >> 0 );
 8045534:	2102      	movs	r1, #2
 8045536:	f88d 100d 	strb.w	r1, [sp, #13]
    cbuffer[2] = key_id;
 804553a:	f88d 200e 	strb.w	r2, [sp, #14]
    for( uint8_t index = 0; index < sizeof( lr1110_crypto_key_t ); index++ )
 804553e:	4622      	mov	r2, r4
 8045540:	2a0f      	cmp	r2, #15
 8045542:	d808      	bhi.n	8045556 <lr1110_crypto_set_key+0x40>
        cbuffer[3 + index] = key[index];
 8045544:	1cd4      	adds	r4, r2, #3
 8045546:	5c9d      	ldrb	r5, [r3, r2]
 8045548:	a908      	add	r1, sp, #32
 804554a:	440c      	add	r4, r1
 804554c:	f804 5c14 	strb.w	r5, [r4, #-20]
    for( uint8_t index = 0; index < sizeof( lr1110_crypto_key_t ); index++ )
 8045550:	3201      	adds	r2, #1
 8045552:	b2d2      	uxtb	r2, r2
 8045554:	e7f4      	b.n	8045540 <lr1110_crypto_set_key+0x2a>
    lr1110_hal_read( context, cbuffer, LR1110_CRYPTO_SET_KEY_CMD_LENGTH, rbuffer, LR1110_CRYPTO_STATUS_LENGTH );
 8045556:	2301      	movs	r3, #1
 8045558:	9300      	str	r3, [sp, #0]
 804555a:	ab02      	add	r3, sp, #8
 804555c:	2213      	movs	r2, #19
 804555e:	a903      	add	r1, sp, #12
 8045560:	f7fe fcc3 	bl	8043eea <lr1110_hal_read>
    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 8045564:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8045568:	7033      	strb	r3, [r6, #0]
}
 804556a:	b008      	add	sp, #32
 804556c:	bd70      	pop	{r4, r5, r6, pc}

0804556e <lr1110_crypto_derive_key>:
{
 804556e:	b570      	push	{r4, r5, r6, lr}
 8045570:	b088      	sub	sp, #32
 8045572:	460e      	mov	r6, r1
 8045574:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    uint8_t cbuffer[LR1110_CRYPTO_DERIVE_KEY_CMD_LENGTH] = { 0x00 };
 8045576:	2400      	movs	r4, #0
 8045578:	9404      	str	r4, [sp, #16]
 804557a:	9405      	str	r4, [sp, #20]
 804557c:	9406      	str	r4, [sp, #24]
 804557e:	9407      	str	r4, [sp, #28]
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]         = { 0x00 };
 8045580:	f88d 4008 	strb.w	r4, [sp, #8]
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_DERIVE_KEY_OC >> 8 );
 8045584:	2105      	movs	r1, #5
 8045586:	f88d 100c 	strb.w	r1, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_DERIVE_KEY_OC >> 0 );
 804558a:	2103      	movs	r1, #3
 804558c:	f88d 100d 	strb.w	r1, [sp, #13]
    cbuffer[2] = src_key_id;
 8045590:	f88d 200e 	strb.w	r2, [sp, #14]
    cbuffer[3] = dest_key_id;
 8045594:	f88d 300f 	strb.w	r3, [sp, #15]
    for( uint8_t index = 0; index < LR1110_CRYPTO_NONCE_LENGTH; index++ )
 8045598:	4623      	mov	r3, r4
 804559a:	2b0f      	cmp	r3, #15
 804559c:	d808      	bhi.n	80455b0 <lr1110_crypto_derive_key+0x42>
        cbuffer[4 + index] = nonce[index];
 804559e:	1d1a      	adds	r2, r3, #4
 80455a0:	5cec      	ldrb	r4, [r5, r3]
 80455a2:	a908      	add	r1, sp, #32
 80455a4:	440a      	add	r2, r1
 80455a6:	f802 4c14 	strb.w	r4, [r2, #-20]
    for( uint8_t index = 0; index < LR1110_CRYPTO_NONCE_LENGTH; index++ )
 80455aa:	3301      	adds	r3, #1
 80455ac:	b2db      	uxtb	r3, r3
 80455ae:	e7f4      	b.n	804559a <lr1110_crypto_derive_key+0x2c>
    lr1110_hal_read( context, cbuffer, LR1110_CRYPTO_DERIVE_KEY_CMD_LENGTH, rbuffer, LR1110_CRYPTO_STATUS_LENGTH );
 80455b0:	2301      	movs	r3, #1
 80455b2:	9300      	str	r3, [sp, #0]
 80455b4:	ab02      	add	r3, sp, #8
 80455b6:	2214      	movs	r2, #20
 80455b8:	a903      	add	r1, sp, #12
 80455ba:	f7fe fc96 	bl	8043eea <lr1110_hal_read>
    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 80455be:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80455c2:	7033      	strb	r3, [r6, #0]
}
 80455c4:	b008      	add	sp, #32
 80455c6:	bd70      	pop	{r4, r5, r6, pc}

080455c8 <lr1110_crypto_process_join_accept>:
{
 80455c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80455cc:	b09b      	sub	sp, #108	; 0x6c
 80455ce:	9002      	str	r0, [sp, #8]
 80455d0:	4688      	mov	r8, r1
 80455d2:	4691      	mov	r9, r2
 80455d4:	9303      	str	r3, [sp, #12]
 80455d6:	f89d b090 	ldrb.w	fp, [sp, #144]	; 0x90
 80455da:	9f25      	ldr	r7, [sp, #148]	; 0x94
 80455dc:	9e26      	ldr	r6, [sp, #152]	; 0x98
 80455de:	f89d 409c 	ldrb.w	r4, [sp, #156]	; 0x9c
 80455e2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    uint8_t cbuffer[LR1110_CRYPTO_PROCESS_JOIN_ACCEPT_CMD_LENGTH] = { 0x00 };
 80455e4:	f04f 0a00 	mov.w	sl, #0
 80455e8:	222d      	movs	r2, #45	; 0x2d
 80455ea:	4651      	mov	r1, sl
 80455ec:	a80e      	add	r0, sp, #56	; 0x38
 80455ee:	f00f fcd4 	bl	8054f9a <memset>
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH + 32]             = { 0x00 };
 80455f2:	f8cd a010 	str.w	sl, [sp, #16]
 80455f6:	221d      	movs	r2, #29
 80455f8:	4651      	mov	r1, sl
 80455fa:	a805      	add	r0, sp, #20
 80455fc:	f00f fccd 	bl	8054f9a <memset>
    uint8_t header_length                                         = ( lorawan_version == 0 ) ? 1 : 12;
 8045600:	f1bb 0f00 	cmp.w	fp, #0
 8045604:	d11a      	bne.n	804563c <lr1110_crypto_process_join_accept+0x74>
 8045606:	2101      	movs	r1, #1
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_PROCESS_JOIN_ACCEPT_OC >> 8 );
 8045608:	2305      	movs	r3, #5
 804560a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_PROCESS_JOIN_ACCEPT_OC >> 0 );
 804560e:	2304      	movs	r3, #4
 8045610:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
    cbuffer[2] = dec_key_id;
 8045614:	f88d 9036 	strb.w	r9, [sp, #54]	; 0x36
    cbuffer[3] = ver_key_id;
 8045618:	9b03      	ldr	r3, [sp, #12]
 804561a:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    cbuffer[4] = ( uint8_t ) lorawan_version;
 804561e:	f88d b038 	strb.w	fp, [sp, #56]	; 0x38
    for( uint8_t index = 0; index < header_length; index++ )
 8045622:	2300      	movs	r3, #0
 8045624:	428b      	cmp	r3, r1
 8045626:	d20b      	bcs.n	8045640 <lr1110_crypto_process_join_accept+0x78>
        cbuffer[5 + index] = header[index];
 8045628:	1d5a      	adds	r2, r3, #5
 804562a:	5cf8      	ldrb	r0, [r7, r3]
 804562c:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8045630:	4462      	add	r2, ip
 8045632:	f802 0c34 	strb.w	r0, [r2, #-52]
    for( uint8_t index = 0; index < header_length; index++ )
 8045636:	3301      	adds	r3, #1
 8045638:	b2db      	uxtb	r3, r3
 804563a:	e7f3      	b.n	8045624 <lr1110_crypto_process_join_accept+0x5c>
    uint8_t header_length                                         = ( lorawan_version == 0 ) ? 1 : 12;
 804563c:	210c      	movs	r1, #12
 804563e:	e7e3      	b.n	8045608 <lr1110_crypto_process_join_accept+0x40>
    for( uint8_t index = 0; index < length; index++ )
 8045640:	2300      	movs	r3, #0
 8045642:	42a3      	cmp	r3, r4
 8045644:	d209      	bcs.n	804565a <lr1110_crypto_process_join_accept+0x92>
        cbuffer[5 + header_length + index] = data_in[index];
 8045646:	1d4a      	adds	r2, r1, #5
 8045648:	441a      	add	r2, r3
 804564a:	5cf0      	ldrb	r0, [r6, r3]
 804564c:	af1a      	add	r7, sp, #104	; 0x68
 804564e:	443a      	add	r2, r7
 8045650:	f802 0c34 	strb.w	r0, [r2, #-52]
    for( uint8_t index = 0; index < length; index++ )
 8045654:	3301      	adds	r3, #1
 8045656:	b2db      	uxtb	r3, r3
 8045658:	e7f3      	b.n	8045642 <lr1110_crypto_process_join_accept+0x7a>
    lr1110_hal_read( context, cbuffer, 2 + 3 + header_length + length, rbuffer, 1 + length );
 804565a:	1862      	adds	r2, r4, r1
 804565c:	3205      	adds	r2, #5
 804565e:	1c63      	adds	r3, r4, #1
 8045660:	9300      	str	r3, [sp, #0]
 8045662:	ab04      	add	r3, sp, #16
 8045664:	b292      	uxth	r2, r2
 8045666:	a90d      	add	r1, sp, #52	; 0x34
 8045668:	9802      	ldr	r0, [sp, #8]
 804566a:	f7fe fc3e 	bl	8043eea <lr1110_hal_read>
    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 804566e:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8045672:	f888 3000 	strb.w	r3, [r8]
    for( uint8_t index = 0; index < length; index++ )
 8045676:	2300      	movs	r3, #0
 8045678:	e006      	b.n	8045688 <lr1110_crypto_process_join_accept+0xc0>
        data_out[index] = rbuffer[1 + index];
 804567a:	1c5a      	adds	r2, r3, #1
 804567c:	a91a      	add	r1, sp, #104	; 0x68
 804567e:	4411      	add	r1, r2
 8045680:	f811 1c58 	ldrb.w	r1, [r1, #-88]
 8045684:	54e9      	strb	r1, [r5, r3]
    for( uint8_t index = 0; index < length; index++ )
 8045686:	b2d3      	uxtb	r3, r2
 8045688:	42a3      	cmp	r3, r4
 804568a:	d3f6      	bcc.n	804567a <lr1110_crypto_process_join_accept+0xb2>
}
 804568c:	b01b      	add	sp, #108	; 0x6c
 804568e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08045692 <lr1110_crypto_compute_aes_cmac>:
{
 8045692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8045696:	b0c6      	sub	sp, #280	; 0x118
 8045698:	4607      	mov	r7, r0
 804569a:	460e      	mov	r6, r1
 804569c:	4691      	mov	r9, r2
 804569e:	469a      	mov	sl, r3
 80456a0:	f8bd 4138 	ldrh.w	r4, [sp, #312]	; 0x138
 80456a4:	f8dd 813c 	ldr.w	r8, [sp, #316]	; 0x13c
    uint8_t cbuffer[LR1110_CRYPTO_COMPUTE_AES_CMAC_CMD_LENGTH]              = { 0x00 };
 80456a8:	2500      	movs	r5, #0
 80456aa:	9505      	str	r5, [sp, #20]
 80456ac:	22ff      	movs	r2, #255	; 0xff
 80456ae:	4629      	mov	r1, r5
 80456b0:	a806      	add	r0, sp, #24
 80456b2:	f00f fc72 	bl	8054f9a <memset>
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH + LR1110_CRYPTO_MIC_LENGTH] = { 0x00 };
 80456b6:	9503      	str	r5, [sp, #12]
 80456b8:	f88d 5010 	strb.w	r5, [sp, #16]
    lr1110_crypto_fill_cbuffer_opcode_key_data( cbuffer, LR1110_CRYPTO_COMPUTE_AES_CMAC_OC, key_id, data, length );
 80456bc:	9400      	str	r4, [sp, #0]
 80456be:	4653      	mov	r3, sl
 80456c0:	464a      	mov	r2, r9
 80456c2:	f240 5105 	movw	r1, #1285	; 0x505
 80456c6:	a805      	add	r0, sp, #20
 80456c8:	f7ff ff13 	bl	80454f2 <lr1110_crypto_fill_cbuffer_opcode_key_data>
    lr1110_hal_read( context, cbuffer, 3 + length, rbuffer, LR1110_CRYPTO_STATUS_LENGTH + LR1110_CRYPTO_MIC_LENGTH );
 80456cc:	1ce2      	adds	r2, r4, #3
 80456ce:	2305      	movs	r3, #5
 80456d0:	9300      	str	r3, [sp, #0]
 80456d2:	ab03      	add	r3, sp, #12
 80456d4:	b292      	uxth	r2, r2
 80456d6:	a905      	add	r1, sp, #20
 80456d8:	4638      	mov	r0, r7
 80456da:	f7fe fc06 	bl	8043eea <lr1110_hal_read>
    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 80456de:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80456e2:	7033      	strb	r3, [r6, #0]
    if( *status == LR1110_CRYPTO_STATUS_SUCCESS )
 80456e4:	b133      	cbz	r3, 80456f4 <lr1110_crypto_compute_aes_cmac+0x62>
 80456e6:	e007      	b.n	80456f8 <lr1110_crypto_compute_aes_cmac+0x66>
            mic[index] = rbuffer[1 + index];
 80456e8:	1c5a      	adds	r2, r3, #1
 80456ea:	a903      	add	r1, sp, #12
 80456ec:	5c89      	ldrb	r1, [r1, r2]
 80456ee:	f808 1003 	strb.w	r1, [r8, r3]
        for( uint8_t index = 0; index < LR1110_CRYPTO_MIC_LENGTH; index++ )
 80456f2:	b2d3      	uxtb	r3, r2
 80456f4:	2b03      	cmp	r3, #3
 80456f6:	d9f7      	bls.n	80456e8 <lr1110_crypto_compute_aes_cmac+0x56>
}
 80456f8:	b046      	add	sp, #280	; 0x118
 80456fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080456fe <lr1110_crypto_verify_aes_cmac>:
{
 80456fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8045702:	b0c6      	sub	sp, #280	; 0x118
 8045704:	4607      	mov	r7, r0
 8045706:	460e      	mov	r6, r1
 8045708:	4692      	mov	sl, r2
 804570a:	461d      	mov	r5, r3
 804570c:	f8bd 4138 	ldrh.w	r4, [sp, #312]	; 0x138
 8045710:	f8dd 913c 	ldr.w	r9, [sp, #316]	; 0x13c
    uint8_t cbuffer[LR1110_CRYPTO_VERIFY_AES_CMAC_CMD_LENGTH] = { 0x00 };
 8045714:	f04f 0800 	mov.w	r8, #0
 8045718:	f8cd 8010 	str.w	r8, [sp, #16]
 804571c:	f240 1203 	movw	r2, #259	; 0x103
 8045720:	4641      	mov	r1, r8
 8045722:	a805      	add	r0, sp, #20
 8045724:	f00f fc39 	bl	8054f9a <memset>
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]              = { 0x00 };
 8045728:	f88d 800c 	strb.w	r8, [sp, #12]
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_VERIFY_AES_CMAC_OC >> 8 );
 804572c:	2305      	movs	r3, #5
 804572e:	f88d 3010 	strb.w	r3, [sp, #16]
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_VERIFY_AES_CMAC_OC >> 0 );
 8045732:	2306      	movs	r3, #6
 8045734:	f88d 3011 	strb.w	r3, [sp, #17]
    cbuffer[2] = key_id;
 8045738:	f88d a012 	strb.w	sl, [sp, #18]
    for( uint8_t index = 0; index < LR1110_CRYPTO_MIC_LENGTH; index++ )
 804573c:	4642      	mov	r2, r8
 804573e:	e006      	b.n	804574e <lr1110_crypto_verify_aes_cmac+0x50>
        cbuffer[3 + index] = mic[index];
 8045740:	1cd3      	adds	r3, r2, #3
 8045742:	f819 0002 	ldrb.w	r0, [r9, r2]
 8045746:	a904      	add	r1, sp, #16
 8045748:	54c8      	strb	r0, [r1, r3]
    for( uint8_t index = 0; index < LR1110_CRYPTO_MIC_LENGTH; index++ )
 804574a:	3201      	adds	r2, #1
 804574c:	b2d2      	uxtb	r2, r2
 804574e:	2a03      	cmp	r2, #3
 8045750:	d9f6      	bls.n	8045740 <lr1110_crypto_verify_aes_cmac+0x42>
    for( uint16_t index = 0; index < length; index++ )
 8045752:	2200      	movs	r2, #0
 8045754:	e005      	b.n	8045762 <lr1110_crypto_verify_aes_cmac+0x64>
        cbuffer[3 + LR1110_CRYPTO_MIC_LENGTH + index] = data[index];
 8045756:	1dd3      	adds	r3, r2, #7
 8045758:	5ca8      	ldrb	r0, [r5, r2]
 804575a:	a904      	add	r1, sp, #16
 804575c:	54c8      	strb	r0, [r1, r3]
    for( uint16_t index = 0; index < length; index++ )
 804575e:	3201      	adds	r2, #1
 8045760:	b292      	uxth	r2, r2
 8045762:	42a2      	cmp	r2, r4
 8045764:	d3f7      	bcc.n	8045756 <lr1110_crypto_verify_aes_cmac+0x58>
    lr1110_hal_read( context, cbuffer, 3 + LR1110_CRYPTO_MIC_LENGTH + length, rbuffer, LR1110_CRYPTO_STATUS_LENGTH );
 8045766:	1de2      	adds	r2, r4, #7
 8045768:	2301      	movs	r3, #1
 804576a:	9300      	str	r3, [sp, #0]
 804576c:	ab03      	add	r3, sp, #12
 804576e:	b292      	uxth	r2, r2
 8045770:	a904      	add	r1, sp, #16
 8045772:	4638      	mov	r0, r7
 8045774:	f7fe fbb9 	bl	8043eea <lr1110_hal_read>
    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 8045778:	f89d 300c 	ldrb.w	r3, [sp, #12]
 804577c:	7033      	strb	r3, [r6, #0]
}
 804577e:	b046      	add	sp, #280	; 0x118
 8045780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08045784 <lr1110_crypto_aes_encrypt_01>:
{
 8045784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8045788:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 804578c:	4680      	mov	r8, r0
 804578e:	460f      	mov	r7, r1
 8045790:	4691      	mov	r9, r2
 8045792:	469a      	mov	sl, r3
 8045794:	f8bd 5230 	ldrh.w	r5, [sp, #560]	; 0x230
 8045798:	9e8d      	ldr	r6, [sp, #564]	; 0x234
    uint8_t cbuffer[LR1110_CRYPTO_AES_ENCRYPT_CMD_LENGTH]                        = { 0x00 };
 804579a:	2400      	movs	r4, #0
 804579c:	9443      	str	r4, [sp, #268]	; 0x10c
 804579e:	22ff      	movs	r2, #255	; 0xff
 80457a0:	4621      	mov	r1, r4
 80457a2:	a844      	add	r0, sp, #272	; 0x110
 80457a4:	f00f fbf9 	bl	8054f9a <memset>
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH + LR1110_CRYPTO_DATA_MAX_LENGTH] = { 0x00 };
 80457a8:	9402      	str	r4, [sp, #8]
 80457aa:	22fd      	movs	r2, #253	; 0xfd
 80457ac:	4621      	mov	r1, r4
 80457ae:	a803      	add	r0, sp, #12
 80457b0:	f00f fbf3 	bl	8054f9a <memset>
    lr1110_crypto_fill_cbuffer_opcode_key_data( cbuffer, LR1110_CRYPTO_ENCRYPT_AES_01_OC, key_id, data, length );
 80457b4:	9500      	str	r5, [sp, #0]
 80457b6:	4653      	mov	r3, sl
 80457b8:	464a      	mov	r2, r9
 80457ba:	f240 5107 	movw	r1, #1287	; 0x507
 80457be:	a843      	add	r0, sp, #268	; 0x10c
 80457c0:	f7ff fe97 	bl	80454f2 <lr1110_crypto_fill_cbuffer_opcode_key_data>
    lr1110_hal_read( context, cbuffer, 3 + length, rbuffer, LR1110_CRYPTO_STATUS_LENGTH + length );
 80457c4:	1cea      	adds	r2, r5, #3
 80457c6:	1c6b      	adds	r3, r5, #1
 80457c8:	b29b      	uxth	r3, r3
 80457ca:	9300      	str	r3, [sp, #0]
 80457cc:	ab02      	add	r3, sp, #8
 80457ce:	b292      	uxth	r2, r2
 80457d0:	a943      	add	r1, sp, #268	; 0x10c
 80457d2:	4640      	mov	r0, r8
 80457d4:	f7fe fb89 	bl	8043eea <lr1110_hal_read>
    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 80457d8:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80457dc:	703b      	strb	r3, [r7, #0]
    for( uint16_t index = 0; index < length; index++ )
 80457de:	4621      	mov	r1, r4
 80457e0:	42a9      	cmp	r1, r5
 80457e2:	d205      	bcs.n	80457f0 <lr1110_crypto_aes_encrypt_01+0x6c>
        result[index] = rbuffer[1 + index];
 80457e4:	1c4b      	adds	r3, r1, #1
 80457e6:	aa02      	add	r2, sp, #8
 80457e8:	5cd2      	ldrb	r2, [r2, r3]
 80457ea:	5472      	strb	r2, [r6, r1]
    for( uint16_t index = 0; index < length; index++ )
 80457ec:	b299      	uxth	r1, r3
 80457ee:	e7f7      	b.n	80457e0 <lr1110_crypto_aes_encrypt_01+0x5c>
}
 80457f0:	f50d 7d04 	add.w	sp, sp, #528	; 0x210
 80457f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080457f8 <lr1110_crypto_store_to_flash>:
{
 80457f8:	b510      	push	{r4, lr}
 80457fa:	b084      	sub	sp, #16
 80457fc:	460c      	mov	r4, r1
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]             = { 0x00 };
 80457fe:	2300      	movs	r3, #0
 8045800:	f88d 3008 	strb.w	r3, [sp, #8]
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_STORE_TO_FLASH_OC >> 8 );
 8045804:	2305      	movs	r3, #5
 8045806:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_STORE_TO_FLASH_OC >> 0 );
 804580a:	230a      	movs	r3, #10
 804580c:	f88d 300d 	strb.w	r3, [sp, #13]
    lr1110_hal_read( context, cbuffer, LR1110_CRYPTO_STORE_TO_FLASH_CMD_LENGTH, rbuffer, LR1110_CRYPTO_STATUS_LENGTH );
 8045810:	2301      	movs	r3, #1
 8045812:	9300      	str	r3, [sp, #0]
 8045814:	ab02      	add	r3, sp, #8
 8045816:	2202      	movs	r2, #2
 8045818:	a903      	add	r1, sp, #12
 804581a:	f7fe fb66 	bl	8043eea <lr1110_hal_read>
    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 804581e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8045822:	7023      	strb	r3, [r4, #0]
}
 8045824:	b004      	add	sp, #16
 8045826:	bd10      	pop	{r4, pc}

08045828 <lr1110_crypto_restore_from_flash>:
{
 8045828:	b510      	push	{r4, lr}
 804582a:	b084      	sub	sp, #16
 804582c:	460c      	mov	r4, r1
    uint8_t rbuffer[LR1110_CRYPTO_STATUS_LENGTH]                 = { 0x00 };
 804582e:	2300      	movs	r3, #0
 8045830:	f88d 3008 	strb.w	r3, [sp, #8]
    cbuffer[0] = ( uint8_t )( LR1110_CRYPTO_RESTORE_FROM_FLASH_OC >> 8 );
 8045834:	2305      	movs	r3, #5
 8045836:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_CRYPTO_RESTORE_FROM_FLASH_OC >> 0 );
 804583a:	230b      	movs	r3, #11
 804583c:	f88d 300d 	strb.w	r3, [sp, #13]
    lr1110_hal_read( context, cbuffer, LR1110_CRYPTO_RESTORE_FROM_FLASH_CMD_LENGTH, rbuffer,
 8045840:	2301      	movs	r3, #1
 8045842:	9300      	str	r3, [sp, #0]
 8045844:	ab02      	add	r3, sp, #8
 8045846:	2202      	movs	r2, #2
 8045848:	a903      	add	r1, sp, #12
 804584a:	f7fe fb4e 	bl	8043eea <lr1110_hal_read>
    *status = ( lr1110_crypto_status_t ) rbuffer[0];
 804584e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8045852:	7023      	strb	r3, [r4, #0]
}
 8045854:	b004      	add	sp, #16
 8045856:	bd10      	pop	{r4, pc}

08045858 <lr1110_radio_get_pkt_type>:

    return status;
}

lr1110_status_t lr1110_radio_get_pkt_type( const void* context, lr1110_radio_pkt_type_t* pkt_type )
{
 8045858:	b500      	push	{lr}
 804585a:	b085      	sub	sp, #20
 804585c:	460b      	mov	r3, r1
    uint8_t cbuffer[LR1110_RADIO_GET_PACKET_TYPE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PACKETTYPE_OC >> 8 );
 804585e:	2202      	movs	r2, #2
 8045860:	f88d 200c 	strb.w	r2, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_PACKETTYPE_OC >> 0 );
 8045864:	f88d 200d 	strb.w	r2, [sp, #13]

    return ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_PACKET_TYPE_CMD_LENGTH,
 8045868:	2101      	movs	r1, #1
 804586a:	9100      	str	r1, [sp, #0]
 804586c:	a903      	add	r1, sp, #12
 804586e:	f7fe fb3c 	bl	8043eea <lr1110_hal_read>
                                                ( uint8_t* ) pkt_type, sizeof( uint8_t ) );
}
 8045872:	b005      	add	sp, #20
 8045874:	f85d fb04 	ldr.w	pc, [sp], #4

08045878 <lr1110_radio_get_rx_buffer_status>:

lr1110_status_t lr1110_radio_get_rx_buffer_status( const void*                      context,
                                                   lr1110_radio_rx_buffer_status_t* rx_buffer_status )
{
 8045878:	b510      	push	{r4, lr}
 804587a:	b084      	sub	sp, #16
 804587c:	460c      	mov	r4, r1
    uint8_t         cbuffer[LR1110_RADIO_GET_RXBUFFER_STATUS_CMD_LENGTH];
    uint8_t         rbuffer[sizeof( *rx_buffer_status )] = { 0x00 };
 804587e:	2300      	movs	r3, #0
 8045880:	f8ad 3008 	strh.w	r3, [sp, #8]
    lr1110_status_t status                               = LR1110_STATUS_ERROR;

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_RXBUFFER_STATUS_OC >> 8 );
 8045884:	2202      	movs	r2, #2
 8045886:	f88d 200c 	strb.w	r2, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_RXBUFFER_STATUS_OC >> 0 );
 804588a:	2303      	movs	r3, #3
 804588c:	f88d 300d 	strb.w	r3, [sp, #13]

    status = ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_RXBUFFER_STATUS_CMD_LENGTH,
 8045890:	9200      	str	r2, [sp, #0]
 8045892:	ab02      	add	r3, sp, #8
 8045894:	a903      	add	r1, sp, #12
 8045896:	f7fe fb28 	bl	8043eea <lr1110_hal_read>
                                                  rbuffer, sizeof( *rx_buffer_status ) );

    if( status == LR1110_STATUS_OK )
 804589a:	b928      	cbnz	r0, 80458a8 <lr1110_radio_get_rx_buffer_status+0x30>
    {
        rx_buffer_status->pld_len_in_bytes     = rbuffer[0];
 804589c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80458a0:	7023      	strb	r3, [r4, #0]
        rx_buffer_status->buffer_start_pointer = rbuffer[1];
 80458a2:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80458a6:	7063      	strb	r3, [r4, #1]
    }

    return status;
}
 80458a8:	b004      	add	sp, #16
 80458aa:	bd10      	pop	{r4, pc}

080458ac <lr1110_radio_get_gfsk_pkt_status>:

lr1110_status_t lr1110_radio_get_gfsk_pkt_status( const void* context, lr1110_radio_pkt_status_gfsk_t* pkt_status )
{
 80458ac:	b510      	push	{r4, lr}
 80458ae:	b084      	sub	sp, #16
 80458b0:	460c      	mov	r4, r1
    uint8_t         cbuffer[LR1110_RADIO_GET_PACKET_STATUS_CMD_LENGTH];
    uint8_t         rbuffer[4] = { 0x00 };
 80458b2:	2300      	movs	r3, #0
 80458b4:	9302      	str	r3, [sp, #8]
    lr1110_status_t status     = LR1110_STATUS_ERROR;

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PACKET_STATUS_OC >> 8 );
 80458b6:	2202      	movs	r2, #2
 80458b8:	f88d 200c 	strb.w	r2, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_PACKET_STATUS_OC >> 0 );
 80458bc:	2304      	movs	r3, #4
 80458be:	f88d 300d 	strb.w	r3, [sp, #13]

    status =
        ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_PACKET_STATUS_CMD_LENGTH, rbuffer, 4 );
 80458c2:	9300      	str	r3, [sp, #0]
 80458c4:	ab02      	add	r3, sp, #8
 80458c6:	a903      	add	r1, sp, #12
 80458c8:	f7fe fb0f 	bl	8043eea <lr1110_hal_read>

    if( status == LR1110_STATUS_OK )
 80458cc:	bb00      	cbnz	r0, 8045910 <lr1110_radio_get_gfsk_pkt_status+0x64>
    {
        pkt_status->rssi_sync_in_dbm = -( int8_t )( rbuffer[0] >> 1 );
 80458ce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80458d2:	085b      	lsrs	r3, r3, #1
 80458d4:	425b      	negs	r3, r3
 80458d6:	7023      	strb	r3, [r4, #0]
        pkt_status->rssi_avg_in_dbm  = -( int8_t )( rbuffer[1] >> 1 );
 80458d8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80458dc:	085b      	lsrs	r3, r3, #1
 80458de:	425b      	negs	r3, r3
 80458e0:	7063      	strb	r3, [r4, #1]
        pkt_status->rx_len_in_bytes  = rbuffer[2];
 80458e2:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80458e6:	70a3      	strb	r3, [r4, #2]
        pkt_status->is_addr_err      = ( ( rbuffer[3] & 0x20 ) != 0 ) ? true : false;
 80458e8:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80458ec:	f3c3 1240 	ubfx	r2, r3, #5, #1
 80458f0:	70e2      	strb	r2, [r4, #3]
        pkt_status->is_crc_err       = ( ( rbuffer[3] & 0x10 ) != 0 ) ? true : false;
 80458f2:	f3c3 1200 	ubfx	r2, r3, #4, #1
 80458f6:	7122      	strb	r2, [r4, #4]
        pkt_status->is_len_err       = ( ( rbuffer[3] & 0x08 ) != 0 ) ? true : false;
 80458f8:	f3c3 02c0 	ubfx	r2, r3, #3, #1
 80458fc:	7162      	strb	r2, [r4, #5]
        pkt_status->is_abort_err     = ( ( rbuffer[3] & 0x04 ) != 0 ) ? true : false;
 80458fe:	f3c3 0280 	ubfx	r2, r3, #2, #1
 8045902:	71a2      	strb	r2, [r4, #6]
        pkt_status->is_received      = ( ( rbuffer[3] & 0x02 ) != 0 ) ? true : false;
 8045904:	f3c3 0240 	ubfx	r2, r3, #1, #1
 8045908:	71e2      	strb	r2, [r4, #7]
        pkt_status->is_sent          = ( ( rbuffer[3] & 0x01 ) != 0 ) ? true : false;
 804590a:	f003 0301 	and.w	r3, r3, #1
 804590e:	7223      	strb	r3, [r4, #8]
    }

    return status;
}
 8045910:	b004      	add	sp, #16
 8045912:	bd10      	pop	{r4, pc}

08045914 <lr1110_radio_get_lora_pkt_status>:

lr1110_status_t lr1110_radio_get_lora_pkt_status( const void* context, lr1110_radio_pkt_status_lora_t* pkt_status )
{
 8045914:	b510      	push	{r4, lr}
 8045916:	b084      	sub	sp, #16
 8045918:	460c      	mov	r4, r1
    uint8_t         cbuffer[LR1110_RADIO_GET_PACKET_STATUS_CMD_LENGTH];
    uint8_t         rbuffer[3] = { 0x00 };
 804591a:	4b12      	ldr	r3, [pc, #72]	; (8045964 <lr1110_radio_get_lora_pkt_status+0x50>)
 804591c:	881b      	ldrh	r3, [r3, #0]
 804591e:	f8ad 3008 	strh.w	r3, [sp, #8]
 8045922:	2300      	movs	r3, #0
 8045924:	f88d 300a 	strb.w	r3, [sp, #10]
    lr1110_status_t status     = LR1110_STATUS_ERROR;

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PACKET_STATUS_OC >> 8 );
 8045928:	2202      	movs	r2, #2
 804592a:	f88d 200c 	strb.w	r2, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_PACKET_STATUS_OC >> 0 );
 804592e:	2304      	movs	r3, #4
 8045930:	f88d 300d 	strb.w	r3, [sp, #13]

    status =
        ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_PACKET_STATUS_CMD_LENGTH, rbuffer, 3 );
 8045934:	2303      	movs	r3, #3
 8045936:	9300      	str	r3, [sp, #0]
 8045938:	ab02      	add	r3, sp, #8
 804593a:	a903      	add	r1, sp, #12
 804593c:	f7fe fad5 	bl	8043eea <lr1110_hal_read>

    if( status == LR1110_STATUS_OK )
 8045940:	b970      	cbnz	r0, 8045960 <lr1110_radio_get_lora_pkt_status+0x4c>
    {
        pkt_status->rssi_packet_in_dbm        = -( int8_t )( rbuffer[0] >> 1 );
 8045942:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8045946:	085b      	lsrs	r3, r3, #1
 8045948:	425b      	negs	r3, r3
 804594a:	7023      	strb	r3, [r4, #0]
        pkt_status->snr_packet_in_db          = ( ( ( int8_t ) rbuffer[1] ) + 2 ) >> 2;
 804594c:	f99d 3009 	ldrsb.w	r3, [sp, #9]
 8045950:	3302      	adds	r3, #2
 8045952:	109b      	asrs	r3, r3, #2
 8045954:	7063      	strb	r3, [r4, #1]
        pkt_status->signal_rssi_packet_in_dbm = -( int8_t )( rbuffer[2] >> 1 );
 8045956:	f89d 300a 	ldrb.w	r3, [sp, #10]
 804595a:	085b      	lsrs	r3, r3, #1
 804595c:	425b      	negs	r3, r3
 804595e:	70a3      	strb	r3, [r4, #2]
    }

    return status;
}
 8045960:	b004      	add	sp, #16
 8045962:	bd10      	pop	{r4, pc}
 8045964:	08059b5c 	.word	0x08059b5c

08045968 <lr1110_radio_get_rssi_inst>:

lr1110_status_t lr1110_radio_get_rssi_inst( const void* context, int8_t* rssi_in_dbm )
{
 8045968:	b510      	push	{r4, lr}
 804596a:	b084      	sub	sp, #16
 804596c:	460c      	mov	r4, r1
    uint8_t         cbuffer[LR1110_RADIO_GET_RSSI_INST_CMD_LENGTH];
    uint8_t         rssi   = 0;
 804596e:	2300      	movs	r3, #0
 8045970:	f88d 300b 	strb.w	r3, [sp, #11]
    lr1110_status_t status = LR1110_STATUS_ERROR;

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_RSSI_INST_OC >> 8 );
 8045974:	2202      	movs	r2, #2
 8045976:	f88d 200c 	strb.w	r2, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_RSSI_INST_OC >> 0 );
 804597a:	2305      	movs	r3, #5
 804597c:	f88d 300d 	strb.w	r3, [sp, #13]

    status = ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_RSSI_INST_CMD_LENGTH, &rssi,
 8045980:	2301      	movs	r3, #1
 8045982:	9300      	str	r3, [sp, #0]
 8045984:	f10d 030b 	add.w	r3, sp, #11
 8045988:	a903      	add	r1, sp, #12
 804598a:	f7fe faae 	bl	8043eea <lr1110_hal_read>
                                                  sizeof( rssi ) );

    if( status == LR1110_STATUS_OK )
 804598e:	b920      	cbnz	r0, 804599a <lr1110_radio_get_rssi_inst+0x32>
    {
        *rssi_in_dbm = -( int8_t )( rssi >> 1 );
 8045990:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8045994:	085b      	lsrs	r3, r3, #1
 8045996:	425b      	negs	r3, r3
 8045998:	7023      	strb	r3, [r4, #0]
    }

    return status;
}
 804599a:	b004      	add	sp, #16
 804599c:	bd10      	pop	{r4, pc}

0804599e <lr1110_radio_set_gfsk_sync_word>:

lr1110_status_t lr1110_radio_set_gfsk_sync_word( const void* context, const uint8_t* gfsk_sync_word )
{
 804599e:	b510      	push	{r4, lr}
 80459a0:	b086      	sub	sp, #24
    uint8_t cbuffer[LR1110_RADIO_SET_GFSK_SYNC_WORD_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_SYNC_WORD_OC >> 8 );
 80459a2:	2302      	movs	r3, #2
 80459a4:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_GFSK_SYNC_WORD_OC >> 0 );
 80459a8:	2306      	movs	r3, #6
 80459aa:	f88d 300d 	strb.w	r3, [sp, #13]

    for( uint8_t index = 0; index < 8; index++ )
 80459ae:	2300      	movs	r3, #0
 80459b0:	e008      	b.n	80459c4 <lr1110_radio_set_gfsk_sync_word+0x26>
    {
        cbuffer[2 + index] = gfsk_sync_word[index];
 80459b2:	1c9a      	adds	r2, r3, #2
 80459b4:	5ccc      	ldrb	r4, [r1, r3]
 80459b6:	f10d 0c18 	add.w	ip, sp, #24
 80459ba:	4462      	add	r2, ip
 80459bc:	f802 4c0c 	strb.w	r4, [r2, #-12]
    for( uint8_t index = 0; index < 8; index++ )
 80459c0:	3301      	adds	r3, #1
 80459c2:	b2db      	uxtb	r3, r3
 80459c4:	2b07      	cmp	r3, #7
 80459c6:	d9f4      	bls.n	80459b2 <lr1110_radio_set_gfsk_sync_word+0x14>
    }

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_GFSK_SYNC_WORD_CMD_LENGTH, 0, 0 );
 80459c8:	2300      	movs	r3, #0
 80459ca:	9300      	str	r3, [sp, #0]
 80459cc:	220a      	movs	r2, #10
 80459ce:	a903      	add	r1, sp, #12
 80459d0:	f7fe fa4d 	bl	8043e6e <lr1110_hal_write>
}
 80459d4:	b006      	add	sp, #24
 80459d6:	bd10      	pop	{r4, pc}

080459d8 <lr1110_radio_set_lora_sync_word>:

lr1110_status_t lr1110_radio_set_lora_sync_word( const void*                            context,
                                                 const lr1110_radio_lora_network_type_t network_type )
{
 80459d8:	b500      	push	{lr}
 80459da:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_WORD_OC >> 8 );
 80459dc:	2302      	movs	r3, #2
 80459de:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_WORD_OC >> 0 );
 80459e2:	2308      	movs	r3, #8
 80459e4:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = ( uint8_t ) network_type;
 80459e8:	f88d 100e 	strb.w	r1, [sp, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH, 0, 0 );
 80459ec:	2300      	movs	r3, #0
 80459ee:	9300      	str	r3, [sp, #0]
 80459f0:	2203      	movs	r2, #3
 80459f2:	a903      	add	r1, sp, #12
 80459f4:	f7fe fa3b 	bl	8043e6e <lr1110_hal_write>
}
 80459f8:	b005      	add	sp, #20
 80459fa:	f85d fb04 	ldr.w	pc, [sp], #4

080459fe <lr1110_radio_set_rx>:

lr1110_status_t lr1110_radio_set_rx( const void* context, const uint32_t timeout )
{
 80459fe:	b500      	push	{lr}
 8045a00:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_RX_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_OC >> 8 );
 8045a02:	2302      	movs	r3, #2
 8045a04:	f88d 3008 	strb.w	r3, [sp, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_RX_OC >> 0 );
 8045a08:	2309      	movs	r3, #9
 8045a0a:	f88d 3009 	strb.w	r3, [sp, #9]

    cbuffer[2] = ( uint8_t )( timeout >> 16 );
 8045a0e:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8045a12:	f88d 300a 	strb.w	r3, [sp, #10]
    cbuffer[3] = ( uint8_t )( timeout >> 8 );
 8045a16:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8045a1a:	f88d 300b 	strb.w	r3, [sp, #11]
    cbuffer[4] = ( uint8_t )( timeout >> 0 );
 8045a1e:	f88d 100c 	strb.w	r1, [sp, #12]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_RX_CMD_LENGTH, 0, 0 );
 8045a22:	2300      	movs	r3, #0
 8045a24:	9300      	str	r3, [sp, #0]
 8045a26:	2205      	movs	r2, #5
 8045a28:	a902      	add	r1, sp, #8
 8045a2a:	f7fe fa20 	bl	8043e6e <lr1110_hal_write>
}
 8045a2e:	b005      	add	sp, #20
 8045a30:	f85d fb04 	ldr.w	pc, [sp], #4

08045a34 <lr1110_radio_set_tx>:

lr1110_status_t lr1110_radio_set_tx( const void* context, const uint32_t timeout )
{
 8045a34:	b500      	push	{lr}
 8045a36:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_TX_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_OC >> 8 );
 8045a38:	2302      	movs	r3, #2
 8045a3a:	f88d 3008 	strb.w	r3, [sp, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_TX_OC >> 0 );
 8045a3e:	230a      	movs	r3, #10
 8045a40:	f88d 3009 	strb.w	r3, [sp, #9]

    cbuffer[2] = ( uint8_t )( timeout >> 16 );
 8045a44:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8045a48:	f88d 300a 	strb.w	r3, [sp, #10]
    cbuffer[3] = ( uint8_t )( timeout >> 8 );
 8045a4c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8045a50:	f88d 300b 	strb.w	r3, [sp, #11]
    cbuffer[4] = ( uint8_t )( timeout >> 0 );
 8045a54:	f88d 100c 	strb.w	r1, [sp, #12]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_TX_CMD_LENGTH, 0, 0 );
 8045a58:	2300      	movs	r3, #0
 8045a5a:	9300      	str	r3, [sp, #0]
 8045a5c:	2205      	movs	r2, #5
 8045a5e:	a902      	add	r1, sp, #8
 8045a60:	f7fe fa05 	bl	8043e6e <lr1110_hal_write>
}
 8045a64:	b005      	add	sp, #20
 8045a66:	f85d fb04 	ldr.w	pc, [sp], #4

08045a6a <lr1110_radio_set_rf_freq>:

lr1110_status_t lr1110_radio_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8045a6a:	b500      	push	{lr}
 8045a6c:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_RF_FREQUENCY_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RF_FREQUENCY_OC >> 8 );
 8045a6e:	2302      	movs	r3, #2
 8045a70:	f88d 3008 	strb.w	r3, [sp, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_RF_FREQUENCY_OC >> 0 );
 8045a74:	230b      	movs	r3, #11
 8045a76:	f88d 3009 	strb.w	r3, [sp, #9]

    cbuffer[2] = ( uint8_t )( freq_in_hz >> 24 );
 8045a7a:	0e0b      	lsrs	r3, r1, #24
 8045a7c:	f88d 300a 	strb.w	r3, [sp, #10]
    cbuffer[3] = ( uint8_t )( freq_in_hz >> 16 );
 8045a80:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8045a84:	f88d 300b 	strb.w	r3, [sp, #11]
    cbuffer[4] = ( uint8_t )( freq_in_hz >> 8 );
 8045a88:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8045a8c:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[5] = ( uint8_t )( freq_in_hz >> 0 );
 8045a90:	f88d 100d 	strb.w	r1, [sp, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_RF_FREQUENCY_CMD_LENGTH, 0, 0 );
 8045a94:	2300      	movs	r3, #0
 8045a96:	9300      	str	r3, [sp, #0]
 8045a98:	2206      	movs	r2, #6
 8045a9a:	a902      	add	r1, sp, #8
 8045a9c:	f7fe f9e7 	bl	8043e6e <lr1110_hal_write>
}
 8045aa0:	b005      	add	sp, #20
 8045aa2:	f85d fb04 	ldr.w	pc, [sp], #4

08045aa6 <lr1110_radio_set_pkt_type>:

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_CAD_PARAMS_CMD_LENGTH, 0, 0 );
}

lr1110_status_t lr1110_radio_set_pkt_type( const void* context, const lr1110_radio_pkt_type_t pkt_type )
{
 8045aa6:	b500      	push	{lr}
 8045aa8:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_PACKET_TYPE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACKET_TYPE_OC >> 8 );
 8045aaa:	2302      	movs	r3, #2
 8045aac:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PACKET_TYPE_OC >> 0 );
 8045ab0:	230e      	movs	r3, #14
 8045ab2:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = ( uint8_t ) pkt_type;
 8045ab6:	f88d 100e 	strb.w	r1, [sp, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_PACKET_TYPE_CMD_LENGTH, 0, 0 );
 8045aba:	2300      	movs	r3, #0
 8045abc:	9300      	str	r3, [sp, #0]
 8045abe:	2203      	movs	r2, #3
 8045ac0:	a903      	add	r1, sp, #12
 8045ac2:	f7fe f9d4 	bl	8043e6e <lr1110_hal_write>
}
 8045ac6:	b005      	add	sp, #20
 8045ac8:	f85d fb04 	ldr.w	pc, [sp], #4

08045acc <lr1110_radio_set_gfsk_mod_params>:

lr1110_status_t lr1110_radio_set_gfsk_mod_params( const void*                           context,
                                                  const lr1110_radio_mod_params_gfsk_t* mod_params )
{
 8045acc:	b500      	push	{lr}
 8045ace:	b087      	sub	sp, #28
    uint8_t cbuffer[LR1110_RADIO_SET_MODULATION_PARAMS_GFSK_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 8 );
 8045ad0:	2302      	movs	r3, #2
 8045ad2:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 0 );
 8045ad6:	230f      	movs	r3, #15
 8045ad8:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = ( uint8_t )( mod_params->br_in_bps >> 24 );
 8045adc:	680b      	ldr	r3, [r1, #0]
 8045ade:	0e1a      	lsrs	r2, r3, #24
 8045ae0:	f88d 200e 	strb.w	r2, [sp, #14]
    cbuffer[3] = ( uint8_t )( mod_params->br_in_bps >> 16 );
 8045ae4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8045ae8:	f88d 200f 	strb.w	r2, [sp, #15]
    cbuffer[4] = ( uint8_t )( mod_params->br_in_bps >> 8 );
 8045aec:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8045af0:	f88d 2010 	strb.w	r2, [sp, #16]
    cbuffer[5] = ( uint8_t )( mod_params->br_in_bps >> 0 );
 8045af4:	f88d 3011 	strb.w	r3, [sp, #17]

    cbuffer[6] = ( uint8_t ) mod_params->pulse_shape;
 8045af8:	790b      	ldrb	r3, [r1, #4]
 8045afa:	f88d 3012 	strb.w	r3, [sp, #18]
    cbuffer[7] = ( uint8_t ) mod_params->bw_dsb_param;
 8045afe:	794b      	ldrb	r3, [r1, #5]
 8045b00:	f88d 3013 	strb.w	r3, [sp, #19]

    cbuffer[8]  = ( uint8_t )( mod_params->fdev_in_hz >> 24 );
 8045b04:	688b      	ldr	r3, [r1, #8]
 8045b06:	0e1a      	lsrs	r2, r3, #24
 8045b08:	f88d 2014 	strb.w	r2, [sp, #20]
    cbuffer[9]  = ( uint8_t )( mod_params->fdev_in_hz >> 16 );
 8045b0c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8045b10:	f88d 2015 	strb.w	r2, [sp, #21]
    cbuffer[10] = ( uint8_t )( mod_params->fdev_in_hz >> 8 );
 8045b14:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8045b18:	f88d 2016 	strb.w	r2, [sp, #22]
    cbuffer[11] = ( uint8_t )( mod_params->fdev_in_hz >> 0 );
 8045b1c:	f88d 3017 	strb.w	r3, [sp, #23]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_GFSK_CMD_LENGTH,
 8045b20:	2300      	movs	r3, #0
 8045b22:	9300      	str	r3, [sp, #0]
 8045b24:	220c      	movs	r2, #12
 8045b26:	eb0d 0102 	add.w	r1, sp, r2
 8045b2a:	f7fe f9a0 	bl	8043e6e <lr1110_hal_write>
                                                 0, 0 );
}
 8045b2e:	b007      	add	sp, #28
 8045b30:	f85d fb04 	ldr.w	pc, [sp], #4

08045b34 <lr1110_radio_set_lora_mod_params>:

lr1110_status_t lr1110_radio_set_lora_mod_params( const void*                           context,
                                                  const lr1110_radio_mod_params_lora_t* mod_params )
{
 8045b34:	b500      	push	{lr}
 8045b36:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 8 );
 8045b38:	2302      	movs	r3, #2
 8045b3a:	f88d 3008 	strb.w	r3, [sp, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 0 );
 8045b3e:	230f      	movs	r3, #15
 8045b40:	f88d 3009 	strb.w	r3, [sp, #9]

    cbuffer[2] = ( uint8_t ) mod_params->sf;
 8045b44:	780b      	ldrb	r3, [r1, #0]
 8045b46:	f88d 300a 	strb.w	r3, [sp, #10]
    cbuffer[3] = ( uint8_t ) mod_params->bw;
 8045b4a:	784b      	ldrb	r3, [r1, #1]
 8045b4c:	f88d 300b 	strb.w	r3, [sp, #11]
    cbuffer[4] = ( uint8_t ) mod_params->cr;
 8045b50:	788b      	ldrb	r3, [r1, #2]
 8045b52:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[5] = ( uint8_t ) mod_params->ldro;
 8045b56:	78cb      	ldrb	r3, [r1, #3]
 8045b58:	f88d 300d 	strb.w	r3, [sp, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH,
 8045b5c:	2300      	movs	r3, #0
 8045b5e:	9300      	str	r3, [sp, #0]
 8045b60:	2206      	movs	r2, #6
 8045b62:	a902      	add	r1, sp, #8
 8045b64:	f7fe f983 	bl	8043e6e <lr1110_hal_write>
                                                 0, 0 );
}
 8045b68:	b005      	add	sp, #20
 8045b6a:	f85d fb04 	ldr.w	pc, [sp], #4

08045b6e <lr1110_radio_set_gfsk_pkt_params>:

lr1110_status_t lr1110_radio_set_gfsk_pkt_params( const void*                           context,
                                                  const lr1110_radio_pkt_params_gfsk_t* pkt_params )
{
 8045b6e:	b500      	push	{lr}
 8045b70:	b087      	sub	sp, #28
    uint8_t cbuffer[LR1110_RADIO_SET_PACKET_PARAM_GFSK_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACKET_PARAM_OC >> 8 );
 8045b72:	2302      	movs	r3, #2
 8045b74:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PACKET_PARAM_OC >> 0 );
 8045b78:	2310      	movs	r3, #16
 8045b7a:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = ( uint8_t )( pkt_params->preamble_len_in_bits >> 8 );
 8045b7e:	880b      	ldrh	r3, [r1, #0]
 8045b80:	0a1a      	lsrs	r2, r3, #8
 8045b82:	f88d 200e 	strb.w	r2, [sp, #14]
    cbuffer[3] = ( uint8_t )( pkt_params->preamble_len_in_bits >> 0 );
 8045b86:	f88d 300f 	strb.w	r3, [sp, #15]

    cbuffer[4] = ( uint8_t )( pkt_params->preamble_detector );
 8045b8a:	788b      	ldrb	r3, [r1, #2]
 8045b8c:	f88d 3010 	strb.w	r3, [sp, #16]

    cbuffer[5] = pkt_params->sync_word_len_in_bits;
 8045b90:	78cb      	ldrb	r3, [r1, #3]
 8045b92:	f88d 3011 	strb.w	r3, [sp, #17]

    cbuffer[6] = ( uint8_t )( pkt_params->address_filtering );
 8045b96:	790b      	ldrb	r3, [r1, #4]
 8045b98:	f88d 3012 	strb.w	r3, [sp, #18]

    cbuffer[7] = ( uint8_t )( pkt_params->header_type );
 8045b9c:	794b      	ldrb	r3, [r1, #5]
 8045b9e:	f88d 3013 	strb.w	r3, [sp, #19]

    cbuffer[8] = pkt_params->pld_len_in_bytes;
 8045ba2:	798b      	ldrb	r3, [r1, #6]
 8045ba4:	f88d 3014 	strb.w	r3, [sp, #20]

    cbuffer[9] = ( uint8_t )( pkt_params->crc_type );
 8045ba8:	79cb      	ldrb	r3, [r1, #7]
 8045baa:	f88d 3015 	strb.w	r3, [sp, #21]

    cbuffer[10] = ( uint8_t )( pkt_params->dc_free );
 8045bae:	7a0b      	ldrb	r3, [r1, #8]
 8045bb0:	f88d 3016 	strb.w	r3, [sp, #22]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_PACKET_PARAM_GFSK_CMD_LENGTH, 0,
 8045bb4:	2300      	movs	r3, #0
 8045bb6:	9300      	str	r3, [sp, #0]
 8045bb8:	220b      	movs	r2, #11
 8045bba:	a903      	add	r1, sp, #12
 8045bbc:	f7fe f957 	bl	8043e6e <lr1110_hal_write>
                                                 0 );
}
 8045bc0:	b007      	add	sp, #28
 8045bc2:	f85d fb04 	ldr.w	pc, [sp], #4

08045bc6 <lr1110_radio_set_lora_pkt_params>:

lr1110_status_t lr1110_radio_set_lora_pkt_params( const void*                           context,
                                                  const lr1110_radio_pkt_params_lora_t* pkt_params )
{
 8045bc6:	b500      	push	{lr}
 8045bc8:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_PACKET_PARAM_LORA_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACKET_PARAM_OC >> 8 );
 8045bca:	2302      	movs	r3, #2
 8045bcc:	f88d 3008 	strb.w	r3, [sp, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PACKET_PARAM_OC >> 0 );
 8045bd0:	2310      	movs	r3, #16
 8045bd2:	f88d 3009 	strb.w	r3, [sp, #9]

    cbuffer[2] = ( uint8_t )( pkt_params->preamble_len_in_symb >> 8 );
 8045bd6:	880b      	ldrh	r3, [r1, #0]
 8045bd8:	0a1a      	lsrs	r2, r3, #8
 8045bda:	f88d 200a 	strb.w	r2, [sp, #10]
    cbuffer[3] = ( uint8_t )( pkt_params->preamble_len_in_symb >> 0 );
 8045bde:	f88d 300b 	strb.w	r3, [sp, #11]

    cbuffer[4] = ( uint8_t )( pkt_params->header_type );
 8045be2:	788b      	ldrb	r3, [r1, #2]
 8045be4:	f88d 300c 	strb.w	r3, [sp, #12]

    cbuffer[5] = pkt_params->pld_len_in_bytes;
 8045be8:	78cb      	ldrb	r3, [r1, #3]
 8045bea:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[6] = ( uint8_t )( pkt_params->crc );
 8045bee:	790b      	ldrb	r3, [r1, #4]
 8045bf0:	f88d 300e 	strb.w	r3, [sp, #14]

    cbuffer[7] = ( uint8_t )( pkt_params->iq );
 8045bf4:	794b      	ldrb	r3, [r1, #5]
 8045bf6:	f88d 300f 	strb.w	r3, [sp, #15]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_PACKET_PARAM_LORA_CMD_LENGTH, 0,
 8045bfa:	2300      	movs	r3, #0
 8045bfc:	9300      	str	r3, [sp, #0]
 8045bfe:	2208      	movs	r2, #8
 8045c00:	eb0d 0102 	add.w	r1, sp, r2
 8045c04:	f7fe f933 	bl	8043e6e <lr1110_hal_write>
                                                 0 );
}
 8045c08:	b005      	add	sp, #20
 8045c0a:	f85d fb04 	ldr.w	pc, [sp], #4

08045c0e <lr1110_radio_set_tx_params>:

lr1110_status_t lr1110_radio_set_tx_params( const void* context, const int8_t pwr_in_dbm,
                                            const lr1110_radio_ramp_time_t ramp_time )
{
 8045c0e:	b500      	push	{lr}
 8045c10:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_TX_PARAMS_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_PARAMS_OC >> 8 );
 8045c12:	2302      	movs	r3, #2
 8045c14:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_TX_PARAMS_OC >> 0 );
 8045c18:	2311      	movs	r3, #17
 8045c1a:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = ( uint8_t ) pwr_in_dbm;
 8045c1e:	f88d 100e 	strb.w	r1, [sp, #14]
    cbuffer[3] = ( uint8_t ) ramp_time;
 8045c22:	f88d 200f 	strb.w	r2, [sp, #15]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_TX_PARAMS_CMD_LENGTH, 0, 0 );
 8045c26:	2300      	movs	r3, #0
 8045c28:	9300      	str	r3, [sp, #0]
 8045c2a:	2204      	movs	r2, #4
 8045c2c:	a903      	add	r1, sp, #12
 8045c2e:	f7fe f91e 	bl	8043e6e <lr1110_hal_write>
}
 8045c32:	b005      	add	sp, #20
 8045c34:	f85d fb04 	ldr.w	pc, [sp], #4

08045c38 <lr1110_radio_set_rx_duty_cycle>:
}

lr1110_status_t lr1110_radio_set_rx_duty_cycle( const void* context, const uint32_t rx_period,
                                                const uint32_t                          sleep_period,
                                                const lr1110_radio_rx_duty_cycle_mode_t mode )
{
 8045c38:	b510      	push	{r4, lr}
 8045c3a:	b086      	sub	sp, #24
    uint8_t cbuffer[LR1110_RADIO_SET_RX_DUTYCYCLE_MODE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_DUTYCYCLE_OC >> 8 );
 8045c3c:	2402      	movs	r4, #2
 8045c3e:	f88d 400c 	strb.w	r4, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_RX_DUTYCYCLE_OC >> 0 );
 8045c42:	2414      	movs	r4, #20
 8045c44:	f88d 400d 	strb.w	r4, [sp, #13]

    cbuffer[2] = ( uint8_t )( rx_period >> 16 );
 8045c48:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8045c4c:	f88d 400e 	strb.w	r4, [sp, #14]
    cbuffer[3] = ( uint8_t )( rx_period >> 8 );
 8045c50:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8045c54:	f88d 400f 	strb.w	r4, [sp, #15]
    cbuffer[4] = ( uint8_t )( rx_period >> 0 );
 8045c58:	f88d 1010 	strb.w	r1, [sp, #16]

    cbuffer[5] = ( uint8_t )( sleep_period >> 16 );
 8045c5c:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8045c60:	f88d 1011 	strb.w	r1, [sp, #17]
    cbuffer[6] = ( uint8_t )( sleep_period >> 8 );
 8045c64:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8045c68:	f88d 1012 	strb.w	r1, [sp, #18]
    cbuffer[7] = ( uint8_t )( sleep_period >> 0 );
 8045c6c:	f88d 2013 	strb.w	r2, [sp, #19]

    cbuffer[8] = mode;
 8045c70:	f88d 3014 	strb.w	r3, [sp, #20]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_RX_DUTYCYCLE_MODE_CMD_LENGTH, 0,
 8045c74:	2300      	movs	r3, #0
 8045c76:	9300      	str	r3, [sp, #0]
 8045c78:	2209      	movs	r2, #9
 8045c7a:	a903      	add	r1, sp, #12
 8045c7c:	f7fe f8f7 	bl	8043e6e <lr1110_hal_write>
                                                 0 );
}
 8045c80:	b006      	add	sp, #24
 8045c82:	bd10      	pop	{r4, pc}

08045c84 <lr1110_radio_set_pa_cfg>:

lr1110_status_t lr1110_radio_set_pa_cfg( const void* context, const lr1110_radio_pa_cfg_t* pa_cfg )
{
 8045c84:	b500      	push	{lr}
 8045c86:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_PA_CONFIG_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PACONFIG_OC >> 8 );
 8045c88:	2302      	movs	r3, #2
 8045c8a:	f88d 3008 	strb.w	r3, [sp, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PACONFIG_OC >> 0 );
 8045c8e:	2315      	movs	r3, #21
 8045c90:	f88d 3009 	strb.w	r3, [sp, #9]

    cbuffer[2] = ( uint8_t ) pa_cfg->pa_sel;
 8045c94:	780b      	ldrb	r3, [r1, #0]
 8045c96:	f88d 300a 	strb.w	r3, [sp, #10]
    cbuffer[3] = ( uint8_t ) pa_cfg->pa_reg_supply;
 8045c9a:	784b      	ldrb	r3, [r1, #1]
 8045c9c:	f88d 300b 	strb.w	r3, [sp, #11]

    cbuffer[4] = pa_cfg->pa_duty_cycle;
 8045ca0:	788b      	ldrb	r3, [r1, #2]
 8045ca2:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[5] = pa_cfg->pa_hp_sel;
 8045ca6:	78cb      	ldrb	r3, [r1, #3]
 8045ca8:	f88d 300d 	strb.w	r3, [sp, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_PA_CONFIG_CMD_LENGTH, 0, 0 );
 8045cac:	2300      	movs	r3, #0
 8045cae:	9300      	str	r3, [sp, #0]
 8045cb0:	2206      	movs	r2, #6
 8045cb2:	a902      	add	r1, sp, #8
 8045cb4:	f7fe f8db 	bl	8043e6e <lr1110_hal_write>
}
 8045cb8:	b005      	add	sp, #20
 8045cba:	f85d fb04 	ldr.w	pc, [sp], #4

08045cbe <lr1110_radio_stop_timeout_on_preamble>:

lr1110_status_t lr1110_radio_stop_timeout_on_preamble( const void* context, const bool stop_timeout_on_preamble )
{
 8045cbe:	b500      	push	{lr}
 8045cc0:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_OC >> 8 );
 8045cc2:	2302      	movs	r3, #2
 8045cc4:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_OC >> 0 );
 8045cc8:	2317      	movs	r3, #23
 8045cca:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = ( uint8_t ) stop_timeout_on_preamble;
 8045cce:	f88d 100e 	strb.w	r1, [sp, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_CMD_LENGTH, 0,
 8045cd2:	2300      	movs	r3, #0
 8045cd4:	9300      	str	r3, [sp, #0]
 8045cd6:	2203      	movs	r2, #3
 8045cd8:	a903      	add	r1, sp, #12
 8045cda:	f7fe f8c8 	bl	8043e6e <lr1110_hal_write>
                                                 0 );
}
 8045cde:	b005      	add	sp, #20
 8045ce0:	f85d fb04 	ldr.w	pc, [sp], #4

08045ce4 <lr1110_radio_set_cad>:

lr1110_status_t lr1110_radio_set_cad( const void* context )
{
 8045ce4:	b500      	push	{lr}
 8045ce6:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_CAD_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_CAD_OC >> 8 );
 8045ce8:	2202      	movs	r2, #2
 8045cea:	f88d 200c 	strb.w	r2, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_CAD_OC >> 0 );
 8045cee:	2318      	movs	r3, #24
 8045cf0:	f88d 300d 	strb.w	r3, [sp, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_CAD_CMD_LENGTH, 0, 0 );
 8045cf4:	2300      	movs	r3, #0
 8045cf6:	9300      	str	r3, [sp, #0]
 8045cf8:	a903      	add	r1, sp, #12
 8045cfa:	f7fe f8b8 	bl	8043e6e <lr1110_hal_write>
}
 8045cfe:	b005      	add	sp, #20
 8045d00:	f85d fb04 	ldr.w	pc, [sp], #4

08045d04 <lr1110_radio_set_tx_cw>:

lr1110_status_t lr1110_radio_set_tx_cw( const void* context )
{
 8045d04:	b500      	push	{lr}
 8045d06:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_TX_CW_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_CW_OC >> 8 );
 8045d08:	2202      	movs	r2, #2
 8045d0a:	f88d 200c 	strb.w	r2, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_TX_CW_OC >> 0 );
 8045d0e:	2319      	movs	r3, #25
 8045d10:	f88d 300d 	strb.w	r3, [sp, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_TX_CW_CMD_LENGTH, 0, 0 );
 8045d14:	2300      	movs	r3, #0
 8045d16:	9300      	str	r3, [sp, #0]
 8045d18:	a903      	add	r1, sp, #12
 8045d1a:	f7fe f8a8 	bl	8043e6e <lr1110_hal_write>
}
 8045d1e:	b005      	add	sp, #20
 8045d20:	f85d fb04 	ldr.w	pc, [sp], #4

08045d24 <lr1110_radio_set_lora_sync_timeout>:
    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_TX_INFINITE_PREAMBLE_CMD_LENGTH, 0,
                                                 0 );
}

lr1110_status_t lr1110_radio_set_lora_sync_timeout( const void* context, const uint8_t nb_symbol )
{
 8045d24:	b500      	push	{lr}
 8045d26:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_OC >> 8 );
 8045d28:	2302      	movs	r3, #2
 8045d2a:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_OC >> 0 );
 8045d2e:	231b      	movs	r3, #27
 8045d30:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = nb_symbol;
 8045d34:	f88d 100e 	strb.w	r1, [sp, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_CMD_LENGTH, 0,
 8045d38:	2300      	movs	r3, #0
 8045d3a:	9300      	str	r3, [sp, #0]
 8045d3c:	2203      	movs	r2, #3
 8045d3e:	a903      	add	r1, sp, #12
 8045d40:	f7fe f895 	bl	8043e6e <lr1110_hal_write>
                                                 0 );
}
 8045d44:	b005      	add	sp, #20
 8045d46:	f85d fb04 	ldr.w	pc, [sp], #4

08045d4a <lr1110_radio_set_gfsk_crc_params>:

lr1110_status_t lr1110_radio_set_gfsk_crc_params( const void* context, const uint32_t seed, const uint32_t polynomial )
{
 8045d4a:	b500      	push	{lr}
 8045d4c:	b087      	sub	sp, #28
    uint8_t cbuffer[LR1110_RADIO_SET_GFSK_CRC_PARAMS_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_CRC_PARAMS_OC >> 8 );
 8045d4e:	2302      	movs	r3, #2
 8045d50:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_GFSK_CRC_PARAMS_OC >> 0 );
 8045d54:	2324      	movs	r3, #36	; 0x24
 8045d56:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = ( uint8_t )( seed >> 24 );
 8045d5a:	0e0b      	lsrs	r3, r1, #24
 8045d5c:	f88d 300e 	strb.w	r3, [sp, #14]
    cbuffer[3] = ( uint8_t )( seed >> 16 );
 8045d60:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8045d64:	f88d 300f 	strb.w	r3, [sp, #15]
    cbuffer[4] = ( uint8_t )( seed >> 8 );
 8045d68:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8045d6c:	f88d 3010 	strb.w	r3, [sp, #16]
    cbuffer[5] = ( uint8_t )( seed >> 0 );
 8045d70:	f88d 1011 	strb.w	r1, [sp, #17]

    cbuffer[6] = ( uint8_t )( polynomial >> 24 );
 8045d74:	0e13      	lsrs	r3, r2, #24
 8045d76:	f88d 3012 	strb.w	r3, [sp, #18]
    cbuffer[7] = ( uint8_t )( polynomial >> 16 );
 8045d7a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8045d7e:	f88d 3013 	strb.w	r3, [sp, #19]
    cbuffer[8] = ( uint8_t )( polynomial >> 8 );
 8045d82:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8045d86:	f88d 3014 	strb.w	r3, [sp, #20]
    cbuffer[9] = ( uint8_t )( polynomial >> 0 );
 8045d8a:	f88d 2015 	strb.w	r2, [sp, #21]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_GFSK_CRC_PARAMS_CMD_LENGTH, 0, 0 );
 8045d8e:	2300      	movs	r3, #0
 8045d90:	9300      	str	r3, [sp, #0]
 8045d92:	220a      	movs	r2, #10
 8045d94:	a903      	add	r1, sp, #12
 8045d96:	f7fe f86a 	bl	8043e6e <lr1110_hal_write>
}
 8045d9a:	b007      	add	sp, #28
 8045d9c:	f85d fb04 	ldr.w	pc, [sp], #4

08045da0 <lr1110_radio_set_gfsk_whitening_seed>:

lr1110_status_t lr1110_radio_set_gfsk_whitening_seed( const void* context, const uint16_t seed )
{
 8045da0:	b500      	push	{lr}
 8045da2:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_GFSK_WHITENING_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_WHITENING_PARAMS_OC >> 8 );
 8045da4:	2302      	movs	r3, #2
 8045da6:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_GFSK_WHITENING_PARAMS_OC >> 0 );
 8045daa:	2325      	movs	r3, #37	; 0x25
 8045dac:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = ( uint8_t )( seed >> 8 );
 8045db0:	0a0b      	lsrs	r3, r1, #8
 8045db2:	f88d 300e 	strb.w	r3, [sp, #14]
    cbuffer[3] = ( uint8_t )( seed >> 0 );
 8045db6:	f88d 100f 	strb.w	r1, [sp, #15]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_GFSK_WHITENING_CMD_LENGTH, 0, 0 );
 8045dba:	2300      	movs	r3, #0
 8045dbc:	9300      	str	r3, [sp, #0]
 8045dbe:	2204      	movs	r2, #4
 8045dc0:	a903      	add	r1, sp, #12
 8045dc2:	f7fe f854 	bl	8043e6e <lr1110_hal_write>
}
 8045dc6:	b005      	add	sp, #20
 8045dc8:	f85d fb04 	ldr.w	pc, [sp], #4

08045dcc <lr1110_radio_cfg_rx_boosted>:

lr1110_status_t lr1110_radio_cfg_rx_boosted( const void* context, const bool enable_boost_mode )
{
 8045dcc:	b500      	push	{lr}
 8045dce:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_RADIO_SET_RX_BOOSTED_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_BOOSTED_OC >> 8 );
 8045dd0:	2302      	movs	r3, #2
 8045dd2:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_RX_BOOSTED_OC >> 0 );
 8045dd6:	2327      	movs	r3, #39	; 0x27
 8045dd8:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = ( enable_boost_mode == true ) ? 0x01 : 0x00;
 8045ddc:	f88d 100e 	strb.w	r1, [sp, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_RX_BOOSTED_LENGTH, 0, 0 );
 8045de0:	2300      	movs	r3, #0
 8045de2:	9300      	str	r3, [sp, #0]
 8045de4:	2203      	movs	r2, #3
 8045de6:	a903      	add	r1, sp, #12
 8045de8:	f7fe f841 	bl	8043e6e <lr1110_hal_write>
}
 8045dec:	b005      	add	sp, #20
 8045dee:	f85d fb04 	ldr.w	pc, [sp], #4

08045df2 <lr1110_regmem_fill_cbuffer_opcode_address>:
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

void lr1110_regmem_fill_cbuffer_opcode_address( uint8_t* cbuffer, uint16_t opcode, uint32_t address )
{
    cbuffer[0] = ( uint8_t )( opcode >> 8 );
 8045df2:	0a0b      	lsrs	r3, r1, #8
 8045df4:	7003      	strb	r3, [r0, #0]
    cbuffer[1] = ( uint8_t )( opcode >> 0 );
 8045df6:	7041      	strb	r1, [r0, #1]

    cbuffer[2] = ( uint8_t )( address >> 24 );
 8045df8:	0e13      	lsrs	r3, r2, #24
 8045dfa:	7083      	strb	r3, [r0, #2]
    cbuffer[3] = ( uint8_t )( address >> 16 );
 8045dfc:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8045e00:	70c3      	strb	r3, [r0, #3]
    cbuffer[4] = ( uint8_t )( address >> 8 );
 8045e02:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8045e06:	7103      	strb	r3, [r0, #4]
    cbuffer[5] = ( uint8_t )( address >> 0 );
 8045e08:	7142      	strb	r2, [r0, #5]
}
 8045e0a:	4770      	bx	lr

08045e0c <lr1110_regmem_fill_cbuffer_opcode_address_length>:

void lr1110_regmem_fill_cbuffer_opcode_address_length( uint8_t* cbuffer, uint16_t opcode, uint32_t address,
                                                       uint8_t length )
{
 8045e0c:	b538      	push	{r3, r4, r5, lr}
 8045e0e:	4604      	mov	r4, r0
 8045e10:	461d      	mov	r5, r3
    lr1110_regmem_fill_cbuffer_opcode_address( cbuffer, opcode, address );
 8045e12:	f7ff ffee 	bl	8045df2 <lr1110_regmem_fill_cbuffer_opcode_address>
    cbuffer[6] = length;
 8045e16:	71a5      	strb	r5, [r4, #6]
}
 8045e18:	bd38      	pop	{r3, r4, r5, pc}

08045e1a <lr1110_regmem_write_mem8>:
{
 8045e1a:	b570      	push	{r4, r5, r6, lr}
 8045e1c:	b084      	sub	sp, #16
 8045e1e:	4604      	mov	r4, r0
 8045e20:	4615      	mov	r5, r2
 8045e22:	461e      	mov	r6, r3
    lr1110_regmem_fill_cbuffer_opcode_address( cbuffer, LR1110_REGMEM_WRITE_MEM8_OC, address );
 8045e24:	460a      	mov	r2, r1
 8045e26:	f240 1107 	movw	r1, #263	; 0x107
 8045e2a:	a802      	add	r0, sp, #8
 8045e2c:	f7ff ffe1 	bl	8045df2 <lr1110_regmem_fill_cbuffer_opcode_address>
    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_REGMEM_WRITE_MEM8_CMD_LENGTH, buffer,
 8045e30:	9600      	str	r6, [sp, #0]
 8045e32:	462b      	mov	r3, r5
 8045e34:	2206      	movs	r2, #6
 8045e36:	a902      	add	r1, sp, #8
 8045e38:	4620      	mov	r0, r4
 8045e3a:	f7fe f818 	bl	8043e6e <lr1110_hal_write>
}
 8045e3e:	b004      	add	sp, #16
 8045e40:	bd70      	pop	{r4, r5, r6, pc}

08045e42 <lr1110_regmem_read_mem8>:
{
 8045e42:	b570      	push	{r4, r5, r6, lr}
 8045e44:	b084      	sub	sp, #16
 8045e46:	4604      	mov	r4, r0
 8045e48:	4615      	mov	r5, r2
 8045e4a:	461e      	mov	r6, r3
    lr1110_regmem_fill_cbuffer_opcode_address_length( cbuffer, LR1110_REGMEM_READ_MEM8_OC, address, length );
 8045e4c:	460a      	mov	r2, r1
 8045e4e:	f44f 7184 	mov.w	r1, #264	; 0x108
 8045e52:	a802      	add	r0, sp, #8
 8045e54:	f7ff ffda 	bl	8045e0c <lr1110_regmem_fill_cbuffer_opcode_address_length>
    return ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_REGMEM_READ_MEM8_CMD_LENGTH, buffer, length );
 8045e58:	9600      	str	r6, [sp, #0]
 8045e5a:	462b      	mov	r3, r5
 8045e5c:	2207      	movs	r2, #7
 8045e5e:	a902      	add	r1, sp, #8
 8045e60:	4620      	mov	r0, r4
 8045e62:	f7fe f842 	bl	8043eea <lr1110_hal_read>
}
 8045e66:	b004      	add	sp, #16
 8045e68:	bd70      	pop	{r4, r5, r6, pc}

08045e6a <lr1110_regmem_write_buffer8>:
{
 8045e6a:	b500      	push	{lr}
 8045e6c:	b085      	sub	sp, #20
 8045e6e:	460b      	mov	r3, r1
    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_WRITE_BUFFER8_OC >> 8 );
 8045e70:	2101      	movs	r1, #1
 8045e72:	f88d 100c 	strb.w	r1, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_REGMEM_WRITE_BUFFER8_OC >> 0 );
 8045e76:	2109      	movs	r1, #9
 8045e78:	f88d 100d 	strb.w	r1, [sp, #13]
    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_REGMEM_WRITE_BUFFER8_CMD_LENGTH, buffer,
 8045e7c:	9200      	str	r2, [sp, #0]
 8045e7e:	2202      	movs	r2, #2
 8045e80:	a903      	add	r1, sp, #12
 8045e82:	f7fd fff4 	bl	8043e6e <lr1110_hal_write>
}
 8045e86:	b005      	add	sp, #20
 8045e88:	f85d fb04 	ldr.w	pc, [sp], #4

08045e8c <lr1110_regmem_read_buffer8>:
{
 8045e8c:	b510      	push	{r4, lr}
 8045e8e:	b084      	sub	sp, #16
    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_READ_BUFFER8_OC >> 8 );
 8045e90:	2401      	movs	r4, #1
 8045e92:	f88d 400c 	strb.w	r4, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_REGMEM_READ_BUFFER8_OC >> 0 );
 8045e96:	240a      	movs	r4, #10
 8045e98:	f88d 400d 	strb.w	r4, [sp, #13]
    cbuffer[2] = offset;
 8045e9c:	f88d 200e 	strb.w	r2, [sp, #14]
    cbuffer[3] = length;
 8045ea0:	f88d 300f 	strb.w	r3, [sp, #15]
    return ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_REGMEM_READ_BUFFER8_CMD_LENGTH, buffer,
 8045ea4:	9300      	str	r3, [sp, #0]
 8045ea6:	460b      	mov	r3, r1
 8045ea8:	2204      	movs	r2, #4
 8045eaa:	a903      	add	r1, sp, #12
 8045eac:	f7fe f81d 	bl	8043eea <lr1110_hal_read>
}
 8045eb0:	b004      	add	sp, #16
 8045eb2:	bd10      	pop	{r4, pc}

08045eb4 <lr1110_system_reset>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

lr1110_status_t lr1110_system_reset( const void* context )
{
 8045eb4:	b508      	push	{r3, lr}
    return ( lr1110_status_t ) lr1110_hal_reset( context );
 8045eb6:	f7fd ffb1 	bl	8043e1c <lr1110_hal_reset>
}
 8045eba:	bd08      	pop	{r3, pc}

08045ebc <lr1110_system_get_status>:

lr1110_status_t lr1110_system_get_status( const void* context, lr1110_system_stat1_t* stat1,
                                          lr1110_system_stat2_t* stat2, lr1110_system_irq_mask_t* irq_status )
{
 8045ebc:	b570      	push	{r4, r5, r6, lr}
 8045ebe:	b082      	sub	sp, #8
 8045ec0:	460d      	mov	r5, r1
 8045ec2:	4614      	mov	r4, r2
 8045ec4:	461e      	mov	r6, r3
    uint8_t         cbuffer[LR1110_SYSTEM_GET_STATUS_CMD_LENGTH] = { 0x00 };
 8045ec6:	2300      	movs	r3, #0
 8045ec8:	9300      	str	r3, [sp, #0]
 8045eca:	f8ad 3004 	strh.w	r3, [sp, #4]
    lr1110_status_t status                                       = LR1110_STATUS_ERROR;

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_STATUS_OC >> 8 );
 8045ece:	2201      	movs	r2, #1
 8045ed0:	f88d 2000 	strb.w	r2, [sp]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_STATUS_OC >> 0 );
 8045ed4:	f88d 3001 	strb.w	r3, [sp, #1]

    status =
        ( lr1110_status_t ) lr1110_hal_write_read( context, cbuffer, cbuffer, LR1110_SYSTEM_GET_STATUS_CMD_LENGTH );
 8045ed8:	2306      	movs	r3, #6
 8045eda:	466a      	mov	r2, sp
 8045edc:	4669      	mov	r1, sp
 8045ede:	f7fe f848 	bl	8043f72 <lr1110_hal_write_read>

    if( status == LR1110_STATUS_OK )
 8045ee2:	b9e0      	cbnz	r0, 8045f1e <lr1110_system_get_status+0x62>
    {
        stat1->is_interrupt_active = ( ( cbuffer[0] & 0x01 ) != 0 ) ? true : false;
 8045ee4:	f89d 3000 	ldrb.w	r3, [sp]
 8045ee8:	f003 0201 	and.w	r2, r3, #1
 8045eec:	706a      	strb	r2, [r5, #1]
        stat1->command_status      = ( lr1110_system_command_status_t )( cbuffer[0] >> 1 );
 8045eee:	085b      	lsrs	r3, r3, #1
 8045ef0:	702b      	strb	r3, [r5, #0]

        stat2->is_running_from_flash = ( ( cbuffer[1] & 0x01 ) != 0 ) ? true : false;
 8045ef2:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8045ef6:	f003 0201 	and.w	r2, r3, #1
 8045efa:	7062      	strb	r2, [r4, #1]
        stat2->chip_mode             = ( lr1110_system_chip_modes_t )( cbuffer[1] >> 1 );
 8045efc:	085b      	lsrs	r3, r3, #1
 8045efe:	7023      	strb	r3, [r4, #0]

        *irq_status =
            ( ( lr1110_system_irq_mask_t ) cbuffer[2] << 24 ) + ( ( lr1110_system_irq_mask_t ) cbuffer[3] << 16 ) +
 8045f00:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8045f04:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8045f08:	0412      	lsls	r2, r2, #16
 8045f0a:	eb02 6203 	add.w	r2, r2, r3, lsl #24
            ( ( lr1110_system_irq_mask_t ) cbuffer[4] << 8 ) + ( ( lr1110_system_irq_mask_t ) cbuffer[5] << 0 );
 8045f0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
            ( ( lr1110_system_irq_mask_t ) cbuffer[2] << 24 ) + ( ( lr1110_system_irq_mask_t ) cbuffer[3] << 16 ) +
 8045f12:	eb02 2203 	add.w	r2, r2, r3, lsl #8
            ( ( lr1110_system_irq_mask_t ) cbuffer[4] << 8 ) + ( ( lr1110_system_irq_mask_t ) cbuffer[5] << 0 );
 8045f16:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8045f1a:	441a      	add	r2, r3
        *irq_status =
 8045f1c:	6032      	str	r2, [r6, #0]
    }

    return status;
}
 8045f1e:	b002      	add	sp, #8
 8045f20:	bd70      	pop	{r4, r5, r6, pc}

08045f22 <lr1110_system_get_version>:

    return status;
}

lr1110_status_t lr1110_system_get_version( const void* context, lr1110_system_version_t* version )
{
 8045f22:	b510      	push	{r4, lr}
 8045f24:	b084      	sub	sp, #16
 8045f26:	460c      	mov	r4, r1
    uint8_t         cbuffer[LR1110_SYSTEM_GET_VERSION_CMD_LENGTH];
    uint8_t         rbuffer[LR1110_SYSTEM_VERSION_LENGTH] = { 0x00 };
 8045f28:	2300      	movs	r3, #0
 8045f2a:	9302      	str	r3, [sp, #8]
    lr1110_status_t status                                = LR1110_STATUS_ERROR;

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_VERSION_OC >> 8 );
 8045f2c:	2301      	movs	r3, #1
 8045f2e:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_VERSION_OC >> 0 );
 8045f32:	f88d 300d 	strb.w	r3, [sp, #13]

    status = ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_SYSTEM_GET_VERSION_CMD_LENGTH, rbuffer,
 8045f36:	2304      	movs	r3, #4
 8045f38:	9300      	str	r3, [sp, #0]
 8045f3a:	ab02      	add	r3, sp, #8
 8045f3c:	2202      	movs	r2, #2
 8045f3e:	a903      	add	r1, sp, #12
 8045f40:	f7fd ffd3 	bl	8043eea <lr1110_hal_read>
                                                  LR1110_SYSTEM_VERSION_LENGTH );

    if( status == LR1110_STATUS_OK )
 8045f44:	b960      	cbnz	r0, 8045f60 <lr1110_system_get_version+0x3e>
    {
        version->hw   = rbuffer[0];
 8045f46:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8045f4a:	7023      	strb	r3, [r4, #0]
        version->type = rbuffer[1];
 8045f4c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8045f50:	7063      	strb	r3, [r4, #1]
        version->fw   = ( ( uint16_t ) rbuffer[2] << 8 ) + ( uint16_t ) rbuffer[3];
 8045f52:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8045f56:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8045f5a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8045f5e:	8063      	strh	r3, [r4, #2]
    }

    return status;
}
 8045f60:	b004      	add	sp, #16
 8045f62:	bd10      	pop	{r4, pc}

08045f64 <lr1110_system_get_errors>:

lr1110_status_t lr1110_system_get_errors( const void* context, lr1110_system_errors_t* errors )
{
 8045f64:	b510      	push	{r4, lr}
 8045f66:	b084      	sub	sp, #16
 8045f68:	460c      	mov	r4, r1
    uint8_t         cbuffer[LR1110_SYSTEM_GET_ERRORS_CMD_LENGTH];
    uint8_t         rbuffer[sizeof( errors )] = { 0x00 };
 8045f6a:	2300      	movs	r3, #0
 8045f6c:	9302      	str	r3, [sp, #8]
    lr1110_status_t status                    = LR1110_STATUS_ERROR;

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_ERRORS_OC >> 8 );
 8045f6e:	2301      	movs	r3, #1
 8045f70:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_ERRORS_OC >> 0 );
 8045f74:	230d      	movs	r3, #13
 8045f76:	f88d 300d 	strb.w	r3, [sp, #13]

    status = ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_SYSTEM_GET_ERRORS_CMD_LENGTH, rbuffer,
 8045f7a:	2202      	movs	r2, #2
 8045f7c:	9200      	str	r2, [sp, #0]
 8045f7e:	ab02      	add	r3, sp, #8
 8045f80:	a903      	add	r1, sp, #12
 8045f82:	f7fd ffb2 	bl	8043eea <lr1110_hal_read>
                                                  sizeof( *errors ) );

    if( status == LR1110_STATUS_OK )
 8045f86:	b930      	cbnz	r0, 8045f96 <lr1110_system_get_errors+0x32>
    {
        *errors = ( ( uint16_t ) rbuffer[0] << 8 ) + ( uint16_t ) rbuffer[1];
 8045f88:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8045f8c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8045f90:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8045f94:	8023      	strh	r3, [r4, #0]
    }

    return status;
}
 8045f96:	b004      	add	sp, #16
 8045f98:	bd10      	pop	{r4, pc}

08045f9a <lr1110_system_clear_errors>:

lr1110_status_t lr1110_system_clear_errors( const void* context )
{
 8045f9a:	b500      	push	{lr}
 8045f9c:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_SYSTEM_CLEAR_ERRORS_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CLEAR_ERRORS_OC >> 8 );
 8045f9e:	2301      	movs	r3, #1
 8045fa0:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_CLEAR_ERRORS_OC >> 0 );
 8045fa4:	230e      	movs	r3, #14
 8045fa6:	f88d 300d 	strb.w	r3, [sp, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_CLEAR_ERRORS_CMD_LENGTH, 0, 0 );
 8045faa:	2300      	movs	r3, #0
 8045fac:	9300      	str	r3, [sp, #0]
 8045fae:	2202      	movs	r2, #2
 8045fb0:	a903      	add	r1, sp, #12
 8045fb2:	f7fd ff5c 	bl	8043e6e <lr1110_hal_write>
}
 8045fb6:	b005      	add	sp, #20
 8045fb8:	f85d fb04 	ldr.w	pc, [sp], #4

08045fbc <lr1110_system_set_reg_mode>:

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_CALIBRATE_CMD_LENGTH, 0, 0 );
}

lr1110_status_t lr1110_system_set_reg_mode( const void* context, const lr1110_system_reg_mode_t reg_mode )
{
 8045fbc:	b500      	push	{lr}
 8045fbe:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_SYSTEM_SET_REGMODE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_REGMODE_OC >> 8 );
 8045fc0:	2301      	movs	r3, #1
 8045fc2:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_REGMODE_OC >> 0 );
 8045fc6:	2310      	movs	r3, #16
 8045fc8:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = ( uint8_t ) reg_mode;
 8045fcc:	f88d 100e 	strb.w	r1, [sp, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_REGMODE_CMD_LENGTH, 0, 0 );
 8045fd0:	2300      	movs	r3, #0
 8045fd2:	9300      	str	r3, [sp, #0]
 8045fd4:	2203      	movs	r2, #3
 8045fd6:	a903      	add	r1, sp, #12
 8045fd8:	f7fd ff49 	bl	8043e6e <lr1110_hal_write>
}
 8045fdc:	b005      	add	sp, #20
 8045fde:	f85d fb04 	ldr.w	pc, [sp], #4

08045fe2 <lr1110_system_set_dio_as_rf_switch>:
    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_CALIBRATE_IMAGE_CMD_LENGTH, 0, 0 );
}

lr1110_status_t lr1110_system_set_dio_as_rf_switch( const void*                         context,
                                                    const lr1110_system_rfswitch_cfg_t* rf_switch_cfg )
{
 8045fe2:	b500      	push	{lr}
 8045fe4:	b087      	sub	sp, #28
    uint8_t cbuffer[LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_OC >> 8 );
 8045fe6:	2301      	movs	r3, #1
 8045fe8:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_OC >> 0 );
 8045fec:	2312      	movs	r3, #18
 8045fee:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = rf_switch_cfg->enable;
 8045ff2:	780b      	ldrb	r3, [r1, #0]
 8045ff4:	f88d 300e 	strb.w	r3, [sp, #14]
    cbuffer[3] = rf_switch_cfg->standby;
 8045ff8:	784b      	ldrb	r3, [r1, #1]
 8045ffa:	f88d 300f 	strb.w	r3, [sp, #15]
    cbuffer[4] = rf_switch_cfg->rx;
 8045ffe:	788b      	ldrb	r3, [r1, #2]
 8046000:	f88d 3010 	strb.w	r3, [sp, #16]
    cbuffer[5] = rf_switch_cfg->tx;
 8046004:	78cb      	ldrb	r3, [r1, #3]
 8046006:	f88d 3011 	strb.w	r3, [sp, #17]
    cbuffer[6] = rf_switch_cfg->tx_hp;
 804600a:	790b      	ldrb	r3, [r1, #4]
 804600c:	f88d 3012 	strb.w	r3, [sp, #18]
    cbuffer[7] = rf_switch_cfg->tx_hf;
 8046010:	794b      	ldrb	r3, [r1, #5]
 8046012:	f88d 3013 	strb.w	r3, [sp, #19]
    cbuffer[8] = rf_switch_cfg->gnss;
 8046016:	798b      	ldrb	r3, [r1, #6]
 8046018:	f88d 3014 	strb.w	r3, [sp, #20]
    cbuffer[9] = rf_switch_cfg->wifi;
 804601c:	79cb      	ldrb	r3, [r1, #7]
 804601e:	f88d 3015 	strb.w	r3, [sp, #21]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH, 0,
 8046022:	2300      	movs	r3, #0
 8046024:	9300      	str	r3, [sp, #0]
 8046026:	220a      	movs	r2, #10
 8046028:	a903      	add	r1, sp, #12
 804602a:	f7fd ff20 	bl	8043e6e <lr1110_hal_write>
                                                 0 );
}
 804602e:	b007      	add	sp, #28
 8046030:	f85d fb04 	ldr.w	pc, [sp], #4

08046034 <lr1110_system_set_dio_irq_params>:

lr1110_status_t lr1110_system_set_dio_irq_params( const void* context, const uint32_t irqs_to_enable_dio1,
                                                  const uint32_t irqs_to_enable_dio2 )
{
 8046034:	b500      	push	{lr}
 8046036:	b087      	sub	sp, #28
    uint8_t cbuffer[LR1110_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_DIOIRQPARAMS_OC >> 8 );
 8046038:	2301      	movs	r3, #1
 804603a:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_DIOIRQPARAMS_OC >> 0 );
 804603e:	2313      	movs	r3, #19
 8046040:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = ( uint8_t )( irqs_to_enable_dio1 >> 24 );
 8046044:	0e0b      	lsrs	r3, r1, #24
 8046046:	f88d 300e 	strb.w	r3, [sp, #14]
    cbuffer[3] = ( uint8_t )( irqs_to_enable_dio1 >> 16 );
 804604a:	f3c1 4307 	ubfx	r3, r1, #16, #8
 804604e:	f88d 300f 	strb.w	r3, [sp, #15]
    cbuffer[4] = ( uint8_t )( irqs_to_enable_dio1 >> 8 );
 8046052:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8046056:	f88d 3010 	strb.w	r3, [sp, #16]
    cbuffer[5] = ( uint8_t )( irqs_to_enable_dio1 >> 0 );
 804605a:	f88d 1011 	strb.w	r1, [sp, #17]

    cbuffer[6] = ( uint8_t )( irqs_to_enable_dio2 >> 24 );
 804605e:	0e13      	lsrs	r3, r2, #24
 8046060:	f88d 3012 	strb.w	r3, [sp, #18]
    cbuffer[7] = ( uint8_t )( irqs_to_enable_dio2 >> 16 );
 8046064:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8046068:	f88d 3013 	strb.w	r3, [sp, #19]
    cbuffer[8] = ( uint8_t )( irqs_to_enable_dio2 >> 8 );
 804606c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8046070:	f88d 3014 	strb.w	r3, [sp, #20]
    cbuffer[9] = ( uint8_t )( irqs_to_enable_dio2 >> 0 );
 8046074:	f88d 2015 	strb.w	r2, [sp, #21]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH, 0, 0 );
 8046078:	2300      	movs	r3, #0
 804607a:	9300      	str	r3, [sp, #0]
 804607c:	220a      	movs	r2, #10
 804607e:	a903      	add	r1, sp, #12
 8046080:	f7fd fef5 	bl	8043e6e <lr1110_hal_write>
}
 8046084:	b007      	add	sp, #28
 8046086:	f85d fb04 	ldr.w	pc, [sp], #4

0804608a <lr1110_system_clear_irq_status>:

lr1110_status_t lr1110_system_clear_irq_status( const void* context, const lr1110_system_irq_mask_t irqs_to_clear )
{
 804608a:	b500      	push	{lr}
 804608c:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_SYSTEM_CLEAR_IRQ_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CLEAR_IRQ_OC >> 8 );
 804608e:	2301      	movs	r3, #1
 8046090:	f88d 3008 	strb.w	r3, [sp, #8]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_CLEAR_IRQ_OC >> 0 );
 8046094:	2314      	movs	r3, #20
 8046096:	f88d 3009 	strb.w	r3, [sp, #9]

    cbuffer[2] = ( uint8_t )( irqs_to_clear >> 24 );
 804609a:	0e0b      	lsrs	r3, r1, #24
 804609c:	f88d 300a 	strb.w	r3, [sp, #10]
    cbuffer[3] = ( uint8_t )( irqs_to_clear >> 16 );
 80460a0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80460a4:	f88d 300b 	strb.w	r3, [sp, #11]
    cbuffer[4] = ( uint8_t )( irqs_to_clear >> 8 );
 80460a8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80460ac:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[5] = ( uint8_t )( irqs_to_clear >> 0 );
 80460b0:	f88d 100d 	strb.w	r1, [sp, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_CLEAR_IRQ_CMD_LENGTH, 0, 0 );
 80460b4:	2300      	movs	r3, #0
 80460b6:	9300      	str	r3, [sp, #0]
 80460b8:	2206      	movs	r2, #6
 80460ba:	a902      	add	r1, sp, #8
 80460bc:	f7fd fed7 	bl	8043e6e <lr1110_hal_write>
}
 80460c0:	b005      	add	sp, #20
 80460c2:	f85d fb04 	ldr.w	pc, [sp], #4

080460c6 <lr1110_system_set_sleep>:
    return status;
}

lr1110_status_t lr1110_system_set_sleep( const void* context, const lr1110_system_sleep_cfg_t sleep_cfg,
                                         const uint32_t sleep_time )
{
 80460c6:	b500      	push	{lr}
 80460c8:	b087      	sub	sp, #28
 80460ca:	f8ad 100c 	strh.w	r1, [sp, #12]
    uint8_t cbuffer[LR1110_SYSTEM_SET_SLEEP_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_SLEEP_OC >> 8 );
 80460ce:	2301      	movs	r3, #1
 80460d0:	f88d 3010 	strb.w	r3, [sp, #16]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_SLEEP_OC >> 0 );
 80460d4:	231b      	movs	r3, #27
 80460d6:	f88d 3011 	strb.w	r3, [sp, #17]

    cbuffer[2] = ( sleep_cfg.is_rtc_timeout << 1 ) + sleep_cfg.is_warm_start;
 80460da:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80460de:	005b      	lsls	r3, r3, #1
 80460e0:	b2db      	uxtb	r3, r3
 80460e2:	fa53 f181 	uxtab	r1, r3, r1
 80460e6:	f88d 1012 	strb.w	r1, [sp, #18]

    cbuffer[3] = ( uint8_t )( sleep_time >> 24 );
 80460ea:	0e13      	lsrs	r3, r2, #24
 80460ec:	f88d 3013 	strb.w	r3, [sp, #19]
    cbuffer[4] = ( uint8_t )( sleep_time >> 16 );
 80460f0:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80460f4:	f88d 3014 	strb.w	r3, [sp, #20]
    cbuffer[5] = ( uint8_t )( sleep_time >> 8 );
 80460f8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80460fc:	f88d 3015 	strb.w	r3, [sp, #21]
    cbuffer[6] = ( uint8_t )( sleep_time >> 0 );
 8046100:	f88d 2016 	strb.w	r2, [sp, #22]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_SLEEP_CMD_LENGTH, 0, 0 );
 8046104:	2300      	movs	r3, #0
 8046106:	9300      	str	r3, [sp, #0]
 8046108:	2207      	movs	r2, #7
 804610a:	a904      	add	r1, sp, #16
 804610c:	f7fd feaf 	bl	8043e6e <lr1110_hal_write>
}
 8046110:	b007      	add	sp, #28
 8046112:	f85d fb04 	ldr.w	pc, [sp], #4

08046116 <lr1110_system_set_standby>:

lr1110_status_t lr1110_system_set_standby( const void* context, const lr1110_system_standby_cfg_t standby_cfg )
{
 8046116:	b500      	push	{lr}
 8046118:	b085      	sub	sp, #20
    uint8_t cbuffer[LR1110_SYSTEM_SET_STANDBY_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_STANDBY_OC >> 8 );
 804611a:	2301      	movs	r3, #1
 804611c:	f88d 300c 	strb.w	r3, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_STANDBY_OC >> 0 );
 8046120:	231c      	movs	r3, #28
 8046122:	f88d 300d 	strb.w	r3, [sp, #13]

    cbuffer[2] = ( uint8_t ) standby_cfg;
 8046126:	f88d 100e 	strb.w	r1, [sp, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_STANDBY_CMD_LENGTH, 0, 0 );
 804612a:	2300      	movs	r3, #0
 804612c:	9300      	str	r3, [sp, #0]
 804612e:	2203      	movs	r2, #3
 8046130:	a903      	add	r1, sp, #12
 8046132:	f7fd fe9c 	bl	8043e6e <lr1110_hal_write>
}
 8046136:	b005      	add	sp, #20
 8046138:	f85d fb04 	ldr.w	pc, [sp], #4

0804613c <lr1110_system_get_random_number>:
    return ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_SYSTEM_READ_PIN_CMD_LENGTH, pin,
                                                LR1110_SYSTEM_PIN_LENGTH );
}

lr1110_status_t lr1110_system_get_random_number( const void* context, uint32_t* random_number )
{
 804613c:	b500      	push	{lr}
 804613e:	b085      	sub	sp, #20
 8046140:	460b      	mov	r3, r1
    uint8_t cbuffer[LR1110_SYSTEM_GET_RANDOM_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_RANDOM_OC >> 8 );
 8046142:	2201      	movs	r2, #1
 8046144:	f88d 200c 	strb.w	r2, [sp, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_RANDOM_OC >> 0 );
 8046148:	2220      	movs	r2, #32
 804614a:	f88d 200d 	strb.w	r2, [sp, #13]

    return ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_SYSTEM_GET_RANDOM_CMD_LENGTH,
 804614e:	2204      	movs	r2, #4
 8046150:	9200      	str	r2, [sp, #0]
 8046152:	2202      	movs	r2, #2
 8046154:	a903      	add	r1, sp, #12
 8046156:	f7fd fec8 	bl	8043eea <lr1110_hal_read>
                                                ( uint8_t* ) random_number, sizeof( uint32_t ) );
}
 804615a:	b005      	add	sp, #20
 804615c:	f85d fb04 	ldr.w	pc, [sp], #4

08046160 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8046160:	b510      	push	{r4, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8046162:	2004      	movs	r0, #4
 8046164:	f001 f8ae 	bl	80472c4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8046168:	f7fc fdca 	bl	8042d00 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 804616c:	2000      	movs	r0, #0
 804616e:	f7fc fc81 	bl	8042a74 <HAL_InitTick>
 8046172:	b110      	cbz	r0, 804617a <HAL_Init+0x1a>
  {
    status = HAL_ERROR;
 8046174:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8046176:	4620      	mov	r0, r4
 8046178:	bd10      	pop	{r4, pc}
 804617a:	4604      	mov	r4, r0
    HAL_MspInit();
 804617c:	f7fc fc58 	bl	8042a30 <HAL_MspInit>
 8046180:	e7f9      	b.n	8046176 <HAL_Init+0x16>
	...

08046184 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8046184:	4b03      	ldr	r3, [pc, #12]	; (8046194 <HAL_IncTick+0x10>)
 8046186:	781b      	ldrb	r3, [r3, #0]
 8046188:	4a03      	ldr	r2, [pc, #12]	; (8046198 <HAL_IncTick+0x14>)
 804618a:	6811      	ldr	r1, [r2, #0]
 804618c:	440b      	add	r3, r1
 804618e:	6013      	str	r3, [r2, #0]
}
 8046190:	4770      	bx	lr
 8046192:	bf00      	nop
 8046194:	2001809c 	.word	0x2001809c
 8046198:	2001b3d0 	.word	0x2001b3d0

0804619c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 804619c:	4b01      	ldr	r3, [pc, #4]	; (80461a4 <HAL_GetTick+0x8>)
 804619e:	6818      	ldr	r0, [r3, #0]
}
 80461a0:	4770      	bx	lr
 80461a2:	bf00      	nop
 80461a4:	2001b3d0 	.word	0x2001b3d0

080461a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80461a8:	b538      	push	{r3, r4, r5, lr}
 80461aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80461ac:	f7ff fff6 	bl	804619c <HAL_GetTick>
 80461b0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80461b2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80461b6:	d002      	beq.n	80461be <HAL_Delay+0x16>
  {
    wait += (uint32_t)uwTickFreq;
 80461b8:	4b04      	ldr	r3, [pc, #16]	; (80461cc <HAL_Delay+0x24>)
 80461ba:	781b      	ldrb	r3, [r3, #0]
 80461bc:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80461be:	f7ff ffed 	bl	804619c <HAL_GetTick>
 80461c2:	1b40      	subs	r0, r0, r5
 80461c4:	42a0      	cmp	r0, r4
 80461c6:	d3fa      	bcc.n	80461be <HAL_Delay+0x16>
  {
  }
}
 80461c8:	bd38      	pop	{r3, r4, r5, pc}
 80461ca:	bf00      	nop
 80461cc:	2001809c 	.word	0x2001809c

080461d0 <HAL_DBGMCU_EnableDBGStopMode>:
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80461d0:	4a02      	ldr	r2, [pc, #8]	; (80461dc <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 80461d2:	6853      	ldr	r3, [r2, #4]
 80461d4:	f043 0302 	orr.w	r3, r3, #2
 80461d8:	6053      	str	r3, [r2, #4]
}
 80461da:	4770      	bx	lr
 80461dc:	e0044000 	.word	0xe0044000

080461e0 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80461e0:	4a02      	ldr	r2, [pc, #8]	; (80461ec <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 80461e2:	6853      	ldr	r3, [r2, #4]
 80461e4:	f043 0304 	orr.w	r3, r3, #4
 80461e8:	6053      	str	r3, [r2, #4]
}
 80461ea:	4770      	bx	lr
 80461ec:	e0044000 	.word	0xe0044000

080461f0 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80461f0:	4770      	bx	lr

080461f2 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80461f2:	4770      	bx	lr

080461f4 <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80461f4:	4770      	bx	lr

080461f6 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80461f6:	4770      	bx	lr

080461f8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80461f8:	b508      	push	{r3, lr}
 80461fa:	4603      	mov	r3, r0
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80461fc:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80461fe:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8046200:	f012 0f50 	tst.w	r2, #80	; 0x50
 8046204:	d130      	bne.n	8046268 <ADC_DMAConvCplt+0x70>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8046206:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8046208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 804620c:	6583      	str	r3, [r0, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 804620e:	6803      	ldr	r3, [r0, #0]
 8046210:	681a      	ldr	r2, [r3, #0]
 8046212:	f012 0f08 	tst.w	r2, #8
 8046216:	d014      	beq.n	8046242 <ADC_DMAConvCplt+0x4a>
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8046218:	68da      	ldr	r2, [r3, #12]
 804621a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 804621e:	d120      	bne.n	8046262 <ADC_DMAConvCplt+0x6a>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8046220:	68db      	ldr	r3, [r3, #12]
 8046222:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8046226:	d11c      	bne.n	8046262 <ADC_DMAConvCplt+0x6a>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8046228:	6d83      	ldr	r3, [r0, #88]	; 0x58
 804622a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 804622e:	6583      	str	r3, [r0, #88]	; 0x58
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8046230:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8046232:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8046236:	d114      	bne.n	8046262 <ADC_DMAConvCplt+0x6a>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8046238:	6d83      	ldr	r3, [r0, #88]	; 0x58
 804623a:	f043 0301 	orr.w	r3, r3, #1
 804623e:	6583      	str	r3, [r0, #88]	; 0x58
 8046240:	e00f      	b.n	8046262 <ADC_DMAConvCplt+0x6a>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8046242:	68db      	ldr	r3, [r3, #12]
 8046244:	f013 0f02 	tst.w	r3, #2
 8046248:	d10b      	bne.n	8046262 <ADC_DMAConvCplt+0x6a>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 804624a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 804624c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8046250:	6583      	str	r3, [r0, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8046252:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8046254:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8046258:	d103      	bne.n	8046262 <ADC_DMAConvCplt+0x6a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 804625a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 804625c:	f043 0301 	orr.w	r3, r3, #1
 8046260:	6583      	str	r3, [r0, #88]	; 0x58
      }
    }

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8046262:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8046264:	4798      	blx	r3
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8046266:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8046268:	6d82      	ldr	r2, [r0, #88]	; 0x58
 804626a:	f012 0f10 	tst.w	r2, #16
 804626e:	d002      	beq.n	8046276 <ADC_DMAConvCplt+0x7e>
      hadc->ErrorCallback(hadc);
 8046270:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8046272:	4798      	blx	r3
 8046274:	e7f7      	b.n	8046266 <ADC_DMAConvCplt+0x6e>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8046276:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8046278:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 804627a:	4618      	mov	r0, r3
 804627c:	4790      	blx	r2
}
 804627e:	e7f2      	b.n	8046266 <ADC_DMAConvCplt+0x6e>

08046280 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8046280:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8046282:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
 8046284:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8046286:	4798      	blx	r3
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8046288:	bd08      	pop	{r3, pc}

0804628a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 804628a:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 804628c:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 804628e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8046290:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8046294:	6583      	str	r3, [r0, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8046296:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8046298:	f043 0304 	orr.w	r3, r3, #4
 804629c:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 804629e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80462a0:	4798      	blx	r3
#else
  HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80462a2:	bd08      	pop	{r3, pc}

080462a4 <HAL_ADC_Init>:
{
 80462a4:	b530      	push	{r4, r5, lr}
 80462a6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 80462a8:	2300      	movs	r3, #0
 80462aa:	9301      	str	r3, [sp, #4]
  if (hadc == NULL)
 80462ac:	2800      	cmp	r0, #0
 80462ae:	f000 8100 	beq.w	80464b2 <HAL_ADC_Init+0x20e>
 80462b2:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 80462b4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80462b6:	b9fb      	cbnz	r3, 80462f8 <HAL_ADC_Init+0x54>
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 80462b8:	4b7f      	ldr	r3, [pc, #508]	; (80464b8 <HAL_ADC_Init+0x214>)
 80462ba:	6683      	str	r3, [r0, #104]	; 0x68
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 80462bc:	4b7f      	ldr	r3, [pc, #508]	; (80464bc <HAL_ADC_Init+0x218>)
 80462be:	66c3      	str	r3, [r0, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 80462c0:	4b7f      	ldr	r3, [pc, #508]	; (80464c0 <HAL_ADC_Init+0x21c>)
 80462c2:	6703      	str	r3, [r0, #112]	; 0x70
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 80462c4:	4b7f      	ldr	r3, [pc, #508]	; (80464c4 <HAL_ADC_Init+0x220>)
 80462c6:	6743      	str	r3, [r0, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 80462c8:	4b7f      	ldr	r3, [pc, #508]	; (80464c8 <HAL_ADC_Init+0x224>)
 80462ca:	6783      	str	r3, [r0, #120]	; 0x78
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 80462cc:	4b7f      	ldr	r3, [pc, #508]	; (80464cc <HAL_ADC_Init+0x228>)
 80462ce:	67c3      	str	r3, [r0, #124]	; 0x7c
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 80462d0:	4b7f      	ldr	r3, [pc, #508]	; (80464d0 <HAL_ADC_Init+0x22c>)
 80462d2:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 80462d6:	4b7f      	ldr	r3, [pc, #508]	; (80464d4 <HAL_ADC_Init+0x230>)
 80462d8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 80462dc:	4b7e      	ldr	r3, [pc, #504]	; (80464d8 <HAL_ADC_Init+0x234>)
 80462de:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    if (hadc->MspInitCallback == NULL)
 80462e2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80462e6:	b343      	cbz	r3, 804633a <HAL_ADC_Init+0x96>
    hadc->MspInitCallback(hadc);
 80462e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80462ec:	4620      	mov	r0, r4
 80462ee:	4798      	blx	r3
    ADC_CLEAR_ERRORCODE(hadc);
 80462f0:	2300      	movs	r3, #0
 80462f2:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80462f4:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80462f8:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80462fa:	689a      	ldr	r2, [r3, #8]
 80462fc:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8046300:	d005      	beq.n	804630e <HAL_ADC_Init+0x6a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8046302:	689a      	ldr	r2, [r3, #8]
 8046304:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8046308:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 804630c:	609a      	str	r2, [r3, #8]
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 804630e:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8046310:	6893      	ldr	r3, [r2, #8]
 8046312:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8046316:	d11a      	bne.n	804634e <HAL_ADC_Init+0xaa>
  MODIFY_REG(ADCx->CR,
 8046318:	6893      	ldr	r3, [r2, #8]
 804631a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 804631e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8046322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8046326:	6093      	str	r3, [r2, #8]
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8046328:	4b6c      	ldr	r3, [pc, #432]	; (80464dc <HAL_ADC_Init+0x238>)
 804632a:	681b      	ldr	r3, [r3, #0]
 804632c:	099b      	lsrs	r3, r3, #6
 804632e:	4a6c      	ldr	r2, [pc, #432]	; (80464e0 <HAL_ADC_Init+0x23c>)
 8046330:	fba2 2303 	umull	r2, r3, r2, r3
 8046334:	099b      	lsrs	r3, r3, #6
 8046336:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8046338:	e006      	b.n	8046348 <HAL_ADC_Init+0xa4>
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 804633a:	4b6a      	ldr	r3, [pc, #424]	; (80464e4 <HAL_ADC_Init+0x240>)
 804633c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
 8046340:	e7d2      	b.n	80462e8 <HAL_ADC_Init+0x44>
      wait_loop_index--;
 8046342:	9b01      	ldr	r3, [sp, #4]
 8046344:	3b01      	subs	r3, #1
 8046346:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8046348:	9b01      	ldr	r3, [sp, #4]
 804634a:	2b00      	cmp	r3, #0
 804634c:	d1f9      	bne.n	8046342 <HAL_ADC_Init+0x9e>
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 804634e:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8046350:	6893      	ldr	r3, [r2, #8]
 8046352:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8046356:	d109      	bne.n	804636c <HAL_ADC_Init+0xc8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8046358:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804635a:	f043 0310 	orr.w	r3, r3, #16
 804635e:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8046360:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8046362:	f043 0301 	orr.w	r3, r3, #1
 8046366:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8046368:	2001      	movs	r0, #1
 804636a:	e000      	b.n	804636e <HAL_ADC_Init+0xca>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 804636c:	2000      	movs	r0, #0
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 804636e:	6893      	ldr	r3, [r2, #8]
 8046370:	f013 0304 	ands.w	r3, r3, #4
 8046374:	d000      	beq.n	8046378 <HAL_ADC_Init+0xd4>
 8046376:	2301      	movs	r3, #1
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8046378:	6da1      	ldr	r1, [r4, #88]	; 0x58
 804637a:	f011 0f10 	tst.w	r1, #16
 804637e:	f040 8091 	bne.w	80464a4 <HAL_ADC_Init+0x200>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8046382:	2b00      	cmp	r3, #0
 8046384:	f040 808e 	bne.w	80464a4 <HAL_ADC_Init+0x200>
    ADC_STATE_CLR_SET(hadc->State,
 8046388:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804638a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 804638e:	f043 0302 	orr.w	r3, r3, #2
 8046392:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8046394:	6893      	ldr	r3, [r2, #8]
 8046396:	f013 0f01 	tst.w	r3, #1
 804639a:	d114      	bne.n	80463c6 <HAL_ADC_Init+0x122>
 804639c:	4b52      	ldr	r3, [pc, #328]	; (80464e8 <HAL_ADC_Init+0x244>)
 804639e:	689b      	ldr	r3, [r3, #8]
 80463a0:	f013 0301 	ands.w	r3, r3, #1
 80463a4:	d000      	beq.n	80463a8 <HAL_ADC_Init+0x104>
 80463a6:	2301      	movs	r3, #1
 80463a8:	4a50      	ldr	r2, [pc, #320]	; (80464ec <HAL_ADC_Init+0x248>)
 80463aa:	6892      	ldr	r2, [r2, #8]
 80463ac:	f012 0201 	ands.w	r2, r2, #1
 80463b0:	d000      	beq.n	80463b4 <HAL_ADC_Init+0x110>
 80463b2:	2201      	movs	r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80463b4:	4313      	orrs	r3, r2
 80463b6:	d106      	bne.n	80463c6 <HAL_ADC_Init+0x122>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80463b8:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80463ba:	494d      	ldr	r1, [pc, #308]	; (80464f0 <HAL_ADC_Init+0x24c>)
 80463bc:	688a      	ldr	r2, [r1, #8]
 80463be:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80463c2:	4313      	orrs	r3, r2
 80463c4:	608b      	str	r3, [r1, #8]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80463c6:	7e62      	ldrb	r2, [r4, #25]
                hadc->Init.Overrun                                                     |
 80463c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80463ca:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 80463ce:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 80463d0:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 80463d2:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 80463d4:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80463d6:	f894 2020 	ldrb.w	r2, [r4, #32]
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80463da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80463de:	2a01      	cmp	r2, #1
 80463e0:	d040      	beq.n	8046464 <HAL_ADC_Init+0x1c0>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80463e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80463e4:	b122      	cbz	r2, 80463f0 <HAL_ADC_Init+0x14c>
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80463e6:	f402 7270 	and.w	r2, r2, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80463ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80463ec:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80463ee:	4313      	orrs	r3, r2
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80463f0:	6821      	ldr	r1, [r4, #0]
 80463f2:	68cd      	ldr	r5, [r1, #12]
 80463f4:	4a3f      	ldr	r2, [pc, #252]	; (80464f4 <HAL_ADC_Init+0x250>)
 80463f6:	402a      	ands	r2, r5
 80463f8:	4313      	orrs	r3, r2
 80463fa:	60cb      	str	r3, [r1, #12]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80463fc:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80463fe:	688b      	ldr	r3, [r1, #8]
 8046400:	f013 0304 	ands.w	r3, r3, #4
 8046404:	d000      	beq.n	8046408 <HAL_ADC_Init+0x164>
 8046406:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8046408:	688a      	ldr	r2, [r1, #8]
 804640a:	f012 0208 	ands.w	r2, r2, #8
 804640e:	d000      	beq.n	8046412 <HAL_ADC_Init+0x16e>
 8046410:	2201      	movs	r2, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8046412:	b9c3      	cbnz	r3, 8046446 <HAL_ADC_Init+0x1a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8046414:	b9ba      	cbnz	r2, 8046446 <HAL_ADC_Init+0x1a2>
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8046416:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8046418:	7e22      	ldrb	r2, [r4, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 804641a:	ea43 3382 	orr.w	r3, r3, r2, lsl #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 804641e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8046422:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8046426:	68cb      	ldr	r3, [r1, #12]
 8046428:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 804642c:	f023 0306 	bic.w	r3, r3, #6
 8046430:	4313      	orrs	r3, r2
 8046432:	60cb      	str	r3, [r1, #12]
      if (hadc->Init.OversamplingMode == ENABLE)
 8046434:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8046438:	2b01      	cmp	r3, #1
 804643a:	d018      	beq.n	804646e <HAL_ADC_Init+0x1ca>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 804643c:	6822      	ldr	r2, [r4, #0]
 804643e:	6913      	ldr	r3, [r2, #16]
 8046440:	f023 0301 	bic.w	r3, r3, #1
 8046444:	6113      	str	r3, [r2, #16]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8046446:	6923      	ldr	r3, [r4, #16]
 8046448:	2b01      	cmp	r3, #1
 804644a:	d022      	beq.n	8046492 <HAL_ADC_Init+0x1ee>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 804644c:	6822      	ldr	r2, [r4, #0]
 804644e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8046450:	f023 030f 	bic.w	r3, r3, #15
 8046454:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8046456:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8046458:	f023 0303 	bic.w	r3, r3, #3
 804645c:	f043 0301 	orr.w	r3, r3, #1
 8046460:	65a3      	str	r3, [r4, #88]	; 0x58
 8046462:	e024      	b.n	80464ae <HAL_ADC_Init+0x20a>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8046464:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8046466:	3a01      	subs	r2, #1
 8046468:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 804646c:	e7b9      	b.n	80463e2 <HAL_ADC_Init+0x13e>
        MODIFY_REG(hadc->Instance->CFGR2,
 804646e:	6821      	ldr	r1, [r4, #0]
 8046470:	690b      	ldr	r3, [r1, #16]
 8046472:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8046476:	f023 0304 	bic.w	r3, r3, #4
 804647a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 804647c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 804647e:	432a      	orrs	r2, r5
 8046480:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8046482:	432a      	orrs	r2, r5
 8046484:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8046486:	432a      	orrs	r2, r5
 8046488:	4313      	orrs	r3, r2
 804648a:	f043 0301 	orr.w	r3, r3, #1
 804648e:	610b      	str	r3, [r1, #16]
 8046490:	e7d9      	b.n	8046446 <HAL_ADC_Init+0x1a2>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8046492:	6821      	ldr	r1, [r4, #0]
 8046494:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8046496:	f023 030f 	bic.w	r3, r3, #15
 804649a:	69e2      	ldr	r2, [r4, #28]
 804649c:	3a01      	subs	r2, #1
 804649e:	4313      	orrs	r3, r2
 80464a0:	630b      	str	r3, [r1, #48]	; 0x30
 80464a2:	e7d8      	b.n	8046456 <HAL_ADC_Init+0x1b2>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80464a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80464a6:	f043 0310 	orr.w	r3, r3, #16
 80464aa:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80464ac:	2001      	movs	r0, #1
}
 80464ae:	b003      	add	sp, #12
 80464b0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80464b2:	2001      	movs	r0, #1
 80464b4:	e7fb      	b.n	80464ae <HAL_ADC_Init+0x20a>
 80464b6:	bf00      	nop
 80464b8:	080461f1 	.word	0x080461f1
 80464bc:	080461f3 	.word	0x080461f3
 80464c0:	080461f5 	.word	0x080461f5
 80464c4:	080461f7 	.word	0x080461f7
 80464c8:	080471a9 	.word	0x080471a9
 80464cc:	080471ab 	.word	0x080471ab
 80464d0:	080471ad 	.word	0x080471ad
 80464d4:	080471af 	.word	0x080471af
 80464d8:	080471b1 	.word	0x080471b1
 80464dc:	20018060 	.word	0x20018060
 80464e0:	053e2d63 	.word	0x053e2d63
 80464e4:	080410fd 	.word	0x080410fd
 80464e8:	42028000 	.word	0x42028000
 80464ec:	42028100 	.word	0x42028100
 80464f0:	42028300 	.word	0x42028300
 80464f4:	fff0c007 	.word	0xfff0c007

080464f8 <HAL_ADC_PollForConversion>:
{
 80464f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80464fc:	4604      	mov	r4, r0
 80464fe:	460d      	mov	r5, r1
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8046500:	4b3d      	ldr	r3, [pc, #244]	; (80465f8 <HAL_ADC_PollForConversion+0x100>)
 8046502:	689f      	ldr	r7, [r3, #8]
 8046504:	f007 071f 	and.w	r7, r7, #31
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8046508:	6946      	ldr	r6, [r0, #20]
 804650a:	2e08      	cmp	r6, #8
 804650c:	d011      	beq.n	8046532 <HAL_ADC_PollForConversion+0x3a>
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 804650e:	b157      	cbz	r7, 8046526 <HAL_ADC_PollForConversion+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8046510:	2f05      	cmp	r7, #5
 8046512:	d008      	beq.n	8046526 <HAL_ADC_PollForConversion+0x2e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8046514:	2f09      	cmp	r7, #9
 8046516:	d006      	beq.n	8046526 <HAL_ADC_PollForConversion+0x2e>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8046518:	4b37      	ldr	r3, [pc, #220]	; (80465f8 <HAL_ADC_PollForConversion+0x100>)
 804651a:	689b      	ldr	r3, [r3, #8]
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 804651c:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 8046520:	d128      	bne.n	8046574 <HAL_ADC_PollForConversion+0x7c>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8046522:	2604      	movs	r6, #4
 8046524:	e005      	b.n	8046532 <HAL_ADC_PollForConversion+0x3a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8046526:	6823      	ldr	r3, [r4, #0]
 8046528:	68db      	ldr	r3, [r3, #12]
 804652a:	f013 0f01 	tst.w	r3, #1
 804652e:	d11b      	bne.n	8046568 <HAL_ADC_PollForConversion+0x70>
        tmp_Flag_End = (ADC_FLAG_EOC);
 8046530:	2604      	movs	r6, #4
  tickstart = HAL_GetTick();
 8046532:	f7ff fe33 	bl	804619c <HAL_GetTick>
 8046536:	4680      	mov	r8, r0
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8046538:	6823      	ldr	r3, [r4, #0]
 804653a:	681a      	ldr	r2, [r3, #0]
 804653c:	4232      	tst	r2, r6
 804653e:	d11f      	bne.n	8046580 <HAL_ADC_PollForConversion+0x88>
    if (Timeout != HAL_MAX_DELAY)
 8046540:	f1b5 3fff 	cmp.w	r5, #4294967295
 8046544:	d0f8      	beq.n	8046538 <HAL_ADC_PollForConversion+0x40>
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8046546:	f7ff fe29 	bl	804619c <HAL_GetTick>
 804654a:	eba0 0008 	sub.w	r0, r0, r8
 804654e:	42a8      	cmp	r0, r5
 8046550:	d801      	bhi.n	8046556 <HAL_ADC_PollForConversion+0x5e>
 8046552:	2d00      	cmp	r5, #0
 8046554:	d1f0      	bne.n	8046538 <HAL_ADC_PollForConversion+0x40>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8046556:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8046558:	f043 0304 	orr.w	r3, r3, #4
 804655c:	65a3      	str	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hadc);
 804655e:	2300      	movs	r3, #0
 8046560:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8046564:	2003      	movs	r0, #3
 8046566:	e042      	b.n	80465ee <HAL_ADC_PollForConversion+0xf6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8046568:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804656a:	f043 0320 	orr.w	r3, r3, #32
 804656e:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8046570:	2001      	movs	r0, #1
 8046572:	e03c      	b.n	80465ee <HAL_ADC_PollForConversion+0xf6>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8046574:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8046576:	f043 0320 	orr.w	r3, r3, #32
 804657a:	6583      	str	r3, [r0, #88]	; 0x58
        return HAL_ERROR;
 804657c:	2001      	movs	r0, #1
 804657e:	e036      	b.n	80465ee <HAL_ADC_PollForConversion+0xf6>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8046580:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8046582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8046586:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8046588:	68da      	ldr	r2, [r3, #12]
 804658a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 804658e:	d111      	bne.n	80465b4 <HAL_ADC_PollForConversion+0xbc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8046590:	7e62      	ldrb	r2, [r4, #25]
 8046592:	b97a      	cbnz	r2, 80465b4 <HAL_ADC_PollForConversion+0xbc>
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8046594:	681a      	ldr	r2, [r3, #0]
 8046596:	f012 0f08 	tst.w	r2, #8
 804659a:	d00b      	beq.n	80465b4 <HAL_ADC_PollForConversion+0xbc>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 804659c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 804659e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80465a2:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80465a4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80465a6:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 80465aa:	d103      	bne.n	80465b4 <HAL_ADC_PollForConversion+0xbc>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80465ac:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80465ae:	f042 0201 	orr.w	r2, r2, #1
 80465b2:	65a2      	str	r2, [r4, #88]	; 0x58
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80465b4:	4a11      	ldr	r2, [pc, #68]	; (80465fc <HAL_ADC_PollForConversion+0x104>)
 80465b6:	4293      	cmp	r3, r2
 80465b8:	d009      	beq.n	80465ce <HAL_ADC_PollForConversion+0xd6>
 80465ba:	461a      	mov	r2, r3
 80465bc:	4293      	cmp	r3, r2
 80465be:	d009      	beq.n	80465d4 <HAL_ADC_PollForConversion+0xdc>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80465c0:	b147      	cbz	r7, 80465d4 <HAL_ADC_PollForConversion+0xdc>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80465c2:	2f05      	cmp	r7, #5
 80465c4:	d006      	beq.n	80465d4 <HAL_ADC_PollForConversion+0xdc>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80465c6:	2f09      	cmp	r7, #9
 80465c8:	d004      	beq.n	80465d4 <HAL_ADC_PollForConversion+0xdc>
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80465ca:	68d2      	ldr	r2, [r2, #12]
 80465cc:	e003      	b.n	80465d6 <HAL_ADC_PollForConversion+0xde>
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80465ce:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80465d2:	e7f3      	b.n	80465bc <HAL_ADC_PollForConversion+0xc4>
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80465d4:	68da      	ldr	r2, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80465d6:	2e08      	cmp	r6, #8
 80465d8:	d006      	beq.n	80465e8 <HAL_ADC_PollForConversion+0xf0>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80465da:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80465de:	d108      	bne.n	80465f2 <HAL_ADC_PollForConversion+0xfa>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80465e0:	220c      	movs	r2, #12
 80465e2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80465e4:	2000      	movs	r0, #0
 80465e6:	e002      	b.n	80465ee <HAL_ADC_PollForConversion+0xf6>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80465e8:	2208      	movs	r2, #8
 80465ea:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80465ec:	2000      	movs	r0, #0
}
 80465ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return HAL_OK;
 80465f2:	2000      	movs	r0, #0
 80465f4:	e7fb      	b.n	80465ee <HAL_ADC_PollForConversion+0xf6>
 80465f6:	bf00      	nop
 80465f8:	42028300 	.word	0x42028300
 80465fc:	42028100 	.word	0x42028100

08046600 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8046600:	6803      	ldr	r3, [r0, #0]
 8046602:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8046604:	4770      	bx	lr
	...

08046608 <HAL_ADC_IRQHandler>:
{
 8046608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804660a:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 804660c:	6803      	ldr	r3, [r0, #0]
 804660e:	681f      	ldr	r7, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8046610:	685d      	ldr	r5, [r3, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8046612:	4b9f      	ldr	r3, [pc, #636]	; (8046890 <HAL_ADC_IRQHandler+0x288>)
 8046614:	689e      	ldr	r6, [r3, #8]
 8046616:	f006 061f 	and.w	r6, r6, #31
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 804661a:	f017 0f02 	tst.w	r7, #2
 804661e:	d011      	beq.n	8046644 <HAL_ADC_IRQHandler+0x3c>
 8046620:	f015 0f02 	tst.w	r5, #2
 8046624:	d00e      	beq.n	8046644 <HAL_ADC_IRQHandler+0x3c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8046626:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8046628:	f013 0f10 	tst.w	r3, #16
 804662c:	d103      	bne.n	8046636 <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 804662e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8046630:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8046634:	6583      	str	r3, [r0, #88]	; 0x58
    hadc->EndOfSamplingCallback(hadc);
 8046636:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
 804663a:	4620      	mov	r0, r4
 804663c:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 804663e:	6823      	ldr	r3, [r4, #0]
 8046640:	2202      	movs	r2, #2
 8046642:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8046644:	f017 0f04 	tst.w	r7, #4
 8046648:	d002      	beq.n	8046650 <HAL_ADC_IRQHandler+0x48>
 804664a:	f015 0f04 	tst.w	r5, #4
 804664e:	d105      	bne.n	804665c <HAL_ADC_IRQHandler+0x54>
 8046650:	f017 0f08 	tst.w	r7, #8
 8046654:	d04a      	beq.n	80466ec <HAL_ADC_IRQHandler+0xe4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8046656:	f015 0f08 	tst.w	r5, #8
 804665a:	d047      	beq.n	80466ec <HAL_ADC_IRQHandler+0xe4>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 804665c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804665e:	f013 0f10 	tst.w	r3, #16
 8046662:	d103      	bne.n	804666c <HAL_ADC_IRQHandler+0x64>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8046664:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8046666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 804666a:	65a3      	str	r3, [r4, #88]	; 0x58
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 804666c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 804666e:	68da      	ldr	r2, [r3, #12]
 8046670:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8046674:	d134      	bne.n	80466e0 <HAL_ADC_IRQHandler+0xd8>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8046676:	4a87      	ldr	r2, [pc, #540]	; (8046894 <HAL_ADC_IRQHandler+0x28c>)
 8046678:	4293      	cmp	r3, r2
 804667a:	d009      	beq.n	8046690 <HAL_ADC_IRQHandler+0x88>
 804667c:	461a      	mov	r2, r3
 804667e:	4293      	cmp	r3, r2
 8046680:	d009      	beq.n	8046696 <HAL_ADC_IRQHandler+0x8e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8046682:	b146      	cbz	r6, 8046696 <HAL_ADC_IRQHandler+0x8e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8046684:	2e05      	cmp	r6, #5
 8046686:	d006      	beq.n	8046696 <HAL_ADC_IRQHandler+0x8e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8046688:	2e09      	cmp	r6, #9
 804668a:	d004      	beq.n	8046696 <HAL_ADC_IRQHandler+0x8e>
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 804668c:	68d2      	ldr	r2, [r2, #12]
 804668e:	e003      	b.n	8046698 <HAL_ADC_IRQHandler+0x90>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8046690:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8046694:	e7f3      	b.n	804667e <HAL_ADC_IRQHandler+0x76>
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8046696:	68da      	ldr	r2, [r3, #12]
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8046698:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 804669c:	d120      	bne.n	80466e0 <HAL_ADC_IRQHandler+0xd8>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 804669e:	681a      	ldr	r2, [r3, #0]
 80466a0:	f012 0f08 	tst.w	r2, #8
 80466a4:	d01c      	beq.n	80466e0 <HAL_ADC_IRQHandler+0xd8>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80466a6:	689a      	ldr	r2, [r3, #8]
 80466a8:	f012 0f04 	tst.w	r2, #4
 80466ac:	d110      	bne.n	80466d0 <HAL_ADC_IRQHandler+0xc8>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80466ae:	685a      	ldr	r2, [r3, #4]
 80466b0:	f022 020c 	bic.w	r2, r2, #12
 80466b4:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80466b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80466b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80466bc:	65a3      	str	r3, [r4, #88]	; 0x58
            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80466be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80466c0:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80466c4:	d10c      	bne.n	80466e0 <HAL_ADC_IRQHandler+0xd8>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80466c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80466c8:	f043 0301 	orr.w	r3, r3, #1
 80466cc:	65a3      	str	r3, [r4, #88]	; 0x58
 80466ce:	e007      	b.n	80466e0 <HAL_ADC_IRQHandler+0xd8>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80466d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80466d2:	f043 0310 	orr.w	r3, r3, #16
 80466d6:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80466d8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80466da:	f043 0301 	orr.w	r3, r3, #1
 80466de:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->ConvCpltCallback(hadc);
 80466e0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80466e2:	4620      	mov	r0, r4
 80466e4:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80466e6:	6823      	ldr	r3, [r4, #0]
 80466e8:	220c      	movs	r2, #12
 80466ea:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80466ec:	f017 0f20 	tst.w	r7, #32
 80466f0:	d002      	beq.n	80466f8 <HAL_ADC_IRQHandler+0xf0>
 80466f2:	f015 0f20 	tst.w	r5, #32
 80466f6:	d105      	bne.n	8046704 <HAL_ADC_IRQHandler+0xfc>
 80466f8:	f017 0f40 	tst.w	r7, #64	; 0x40
 80466fc:	d05c      	beq.n	80467b8 <HAL_ADC_IRQHandler+0x1b0>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80466fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8046702:	d059      	beq.n	80467b8 <HAL_ADC_IRQHandler+0x1b0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8046704:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8046706:	f013 0f10 	tst.w	r3, #16
 804670a:	d103      	bne.n	8046714 <HAL_ADC_IRQHandler+0x10c>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 804670c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804670e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8046712:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8046714:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8046716:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8046718:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 804671c:	d112      	bne.n	8046744 <HAL_ADC_IRQHandler+0x13c>
 804671e:	2101      	movs	r1, #1
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8046720:	68da      	ldr	r2, [r3, #12]
 8046722:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8046726:	d10f      	bne.n	8046748 <HAL_ADC_IRQHandler+0x140>
 8046728:	2001      	movs	r0, #1
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 804672a:	4a5a      	ldr	r2, [pc, #360]	; (8046894 <HAL_ADC_IRQHandler+0x28c>)
 804672c:	4293      	cmp	r3, r2
 804672e:	d00d      	beq.n	804674c <HAL_ADC_IRQHandler+0x144>
 8046730:	461a      	mov	r2, r3
 8046732:	4293      	cmp	r3, r2
 8046734:	d00d      	beq.n	8046752 <HAL_ADC_IRQHandler+0x14a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8046736:	b166      	cbz	r6, 8046752 <HAL_ADC_IRQHandler+0x14a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8046738:	2e06      	cmp	r6, #6
 804673a:	d00a      	beq.n	8046752 <HAL_ADC_IRQHandler+0x14a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 804673c:	2e07      	cmp	r6, #7
 804673e:	d008      	beq.n	8046752 <HAL_ADC_IRQHandler+0x14a>
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8046740:	68d2      	ldr	r2, [r2, #12]
 8046742:	e007      	b.n	8046754 <HAL_ADC_IRQHandler+0x14c>
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8046744:	2100      	movs	r1, #0
 8046746:	e7eb      	b.n	8046720 <HAL_ADC_IRQHandler+0x118>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8046748:	2000      	movs	r0, #0
 804674a:	e7ee      	b.n	804672a <HAL_ADC_IRQHandler+0x122>
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 804674c:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8046750:	e7ef      	b.n	8046732 <HAL_ADC_IRQHandler+0x12a>
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8046752:	68da      	ldr	r2, [r3, #12]
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8046754:	b931      	cbnz	r1, 8046764 <HAL_ADC_IRQHandler+0x15c>
 8046756:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 804675a:	d127      	bne.n	80467ac <HAL_ADC_IRQHandler+0x1a4>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 804675c:	b330      	cbz	r0, 80467ac <HAL_ADC_IRQHandler+0x1a4>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 804675e:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8046762:	d123      	bne.n	80467ac <HAL_ADC_IRQHandler+0x1a4>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8046764:	6819      	ldr	r1, [r3, #0]
 8046766:	f011 0f40 	tst.w	r1, #64	; 0x40
 804676a:	d01f      	beq.n	80467ac <HAL_ADC_IRQHandler+0x1a4>
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 804676c:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 8046770:	d11c      	bne.n	80467ac <HAL_ADC_IRQHandler+0x1a4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8046772:	689a      	ldr	r2, [r3, #8]
 8046774:	f012 0f08 	tst.w	r2, #8
 8046778:	d110      	bne.n	804679c <HAL_ADC_IRQHandler+0x194>
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 804677a:	685a      	ldr	r2, [r3, #4]
 804677c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8046780:	605a      	str	r2, [r3, #4]
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8046782:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8046784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8046788:	65a3      	str	r3, [r4, #88]	; 0x58
            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 804678a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804678c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8046790:	d10c      	bne.n	80467ac <HAL_ADC_IRQHandler+0x1a4>
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8046792:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8046794:	f043 0301 	orr.w	r3, r3, #1
 8046798:	65a3      	str	r3, [r4, #88]	; 0x58
 804679a:	e007      	b.n	80467ac <HAL_ADC_IRQHandler+0x1a4>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 804679c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804679e:	f043 0310 	orr.w	r3, r3, #16
 80467a2:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80467a4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80467a6:	f043 0301 	orr.w	r3, r3, #1
 80467aa:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->InjectedConvCpltCallback(hadc);
 80467ac:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80467ae:	4620      	mov	r0, r4
 80467b0:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80467b2:	6823      	ldr	r3, [r4, #0]
 80467b4:	2260      	movs	r2, #96	; 0x60
 80467b6:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80467b8:	f017 0f80 	tst.w	r7, #128	; 0x80
 80467bc:	d00c      	beq.n	80467d8 <HAL_ADC_IRQHandler+0x1d0>
 80467be:	f015 0f80 	tst.w	r5, #128	; 0x80
 80467c2:	d009      	beq.n	80467d8 <HAL_ADC_IRQHandler+0x1d0>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80467c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80467c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80467ca:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->LevelOutOfWindowCallback(hadc);
 80467cc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80467ce:	4620      	mov	r0, r4
 80467d0:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80467d2:	6823      	ldr	r3, [r4, #0]
 80467d4:	2280      	movs	r2, #128	; 0x80
 80467d6:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80467d8:	f417 7f80 	tst.w	r7, #256	; 0x100
 80467dc:	d00e      	beq.n	80467fc <HAL_ADC_IRQHandler+0x1f4>
 80467de:	f415 7f80 	tst.w	r5, #256	; 0x100
 80467e2:	d00b      	beq.n	80467fc <HAL_ADC_IRQHandler+0x1f4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80467e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80467e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80467ea:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->LevelOutOfWindow2Callback(hadc);
 80467ec:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80467f0:	4620      	mov	r0, r4
 80467f2:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80467f4:	6823      	ldr	r3, [r4, #0]
 80467f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80467fa:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80467fc:	f417 7f00 	tst.w	r7, #512	; 0x200
 8046800:	d00e      	beq.n	8046820 <HAL_ADC_IRQHandler+0x218>
 8046802:	f415 7f00 	tst.w	r5, #512	; 0x200
 8046806:	d00b      	beq.n	8046820 <HAL_ADC_IRQHandler+0x218>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8046808:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804680a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804680e:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->LevelOutOfWindow3Callback(hadc);
 8046810:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8046814:	4620      	mov	r0, r4
 8046816:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8046818:	6823      	ldr	r3, [r4, #0]
 804681a:	f44f 7200 	mov.w	r2, #512	; 0x200
 804681e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8046820:	f017 0f10 	tst.w	r7, #16
 8046824:	d018      	beq.n	8046858 <HAL_ADC_IRQHandler+0x250>
 8046826:	f015 0f10 	tst.w	r5, #16
 804682a:	d015      	beq.n	8046858 <HAL_ADC_IRQHandler+0x250>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 804682c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804682e:	b12b      	cbz	r3, 804683c <HAL_ADC_IRQHandler+0x234>
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8046830:	b346      	cbz	r6, 8046884 <HAL_ADC_IRQHandler+0x27c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8046832:	4b17      	ldr	r3, [pc, #92]	; (8046890 <HAL_ADC_IRQHandler+0x288>)
 8046834:	689b      	ldr	r3, [r3, #8]
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8046836:	f413 4f60 	tst.w	r3, #57344	; 0xe000
 804683a:	d00a      	beq.n	8046852 <HAL_ADC_IRQHandler+0x24a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 804683c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804683e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8046842:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8046844:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8046846:	f043 0302 	orr.w	r3, r3, #2
 804684a:	65e3      	str	r3, [r4, #92]	; 0x5c
      hadc->ErrorCallback(hadc);
 804684c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 804684e:	4620      	mov	r0, r4
 8046850:	4798      	blx	r3
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8046852:	6823      	ldr	r3, [r4, #0]
 8046854:	2210      	movs	r2, #16
 8046856:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8046858:	f417 6f80 	tst.w	r7, #1024	; 0x400
 804685c:	d011      	beq.n	8046882 <HAL_ADC_IRQHandler+0x27a>
 804685e:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8046862:	d00e      	beq.n	8046882 <HAL_ADC_IRQHandler+0x27a>
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8046864:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8046866:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804686a:	65a3      	str	r3, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 804686c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 804686e:	f043 0308 	orr.w	r3, r3, #8
 8046872:	65e3      	str	r3, [r4, #92]	; 0x5c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8046874:	6823      	ldr	r3, [r4, #0]
 8046876:	f44f 6280 	mov.w	r2, #1024	; 0x400
 804687a:	601a      	str	r2, [r3, #0]
    hadc->InjectedQueueOverflowCallback(hadc);
 804687c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 804687e:	4620      	mov	r0, r4
 8046880:	4798      	blx	r3
}
 8046882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8046884:	6823      	ldr	r3, [r4, #0]
 8046886:	68db      	ldr	r3, [r3, #12]
 8046888:	f013 0f01 	tst.w	r3, #1
 804688c:	d0e1      	beq.n	8046852 <HAL_ADC_IRQHandler+0x24a>
 804688e:	e7d5      	b.n	804683c <HAL_ADC_IRQHandler+0x234>
 8046890:	42028300 	.word	0x42028300
 8046894:	42028100 	.word	0x42028100

08046898 <HAL_ADC_ConfigChannel>:
{
 8046898:	b4f0      	push	{r4, r5, r6, r7}
 804689a:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 804689c:	2200      	movs	r2, #0
 804689e:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80468a0:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80468a4:	2a01      	cmp	r2, #1
 80468a6:	f000 824d 	beq.w	8046d44 <HAL_ADC_ConfigChannel+0x4ac>
 80468aa:	4603      	mov	r3, r0
 80468ac:	2201      	movs	r2, #1
 80468ae:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80468b2:	6806      	ldr	r6, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80468b4:	68b0      	ldr	r0, [r6, #8]
 80468b6:	f010 0f04 	tst.w	r0, #4
 80468ba:	d00a      	beq.n	80468d2 <HAL_ADC_ConfigChannel+0x3a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80468bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80468be:	f042 0220 	orr.w	r2, r2, #32
 80468c2:	659a      	str	r2, [r3, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80468c4:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80468c6:	2200      	movs	r2, #0
 80468c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 80468cc:	b002      	add	sp, #8
 80468ce:	bcf0      	pop	{r4, r5, r6, r7}
 80468d0:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80468d2:	684d      	ldr	r5, [r1, #4]
 80468d4:	680c      	ldr	r4, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80468d6:	3630      	adds	r6, #48	; 0x30
 80468d8:	0a2a      	lsrs	r2, r5, #8
 80468da:	0092      	lsls	r2, r2, #2
 80468dc:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 80468e0:	58b0      	ldr	r0, [r6, r2]
 80468e2:	f005 051f 	and.w	r5, r5, #31
 80468e6:	271f      	movs	r7, #31
 80468e8:	40af      	lsls	r7, r5
 80468ea:	ea20 0007 	bic.w	r0, r0, r7
 80468ee:	f3c4 6484 	ubfx	r4, r4, #26, #5
 80468f2:	40ac      	lsls	r4, r5
 80468f4:	4320      	orrs	r0, r4
 80468f6:	50b0      	str	r0, [r6, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80468f8:	681c      	ldr	r4, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80468fa:	68a2      	ldr	r2, [r4, #8]
 80468fc:	f012 0204 	ands.w	r2, r2, #4
 8046900:	d000      	beq.n	8046904 <HAL_ADC_ConfigChannel+0x6c>
 8046902:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8046904:	68a0      	ldr	r0, [r4, #8]
 8046906:	f010 0008 	ands.w	r0, r0, #8
 804690a:	d000      	beq.n	804690e <HAL_ADC_ConfigChannel+0x76>
 804690c:	2001      	movs	r0, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 804690e:	2a00      	cmp	r2, #0
 8046910:	d133      	bne.n	804697a <HAL_ADC_ConfigChannel+0xe2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8046912:	2800      	cmp	r0, #0
 8046914:	d131      	bne.n	804697a <HAL_ADC_ConfigChannel+0xe2>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8046916:	6888      	ldr	r0, [r1, #8]
 8046918:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 804691c:	d071      	beq.n	8046a02 <HAL_ADC_ConfigChannel+0x16a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 804691e:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8046920:	3414      	adds	r4, #20
 8046922:	0e72      	lsrs	r2, r6, #25
 8046924:	0092      	lsls	r2, r2, #2
 8046926:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 804692a:	58a5      	ldr	r5, [r4, r2]
 804692c:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8046930:	2707      	movs	r7, #7
 8046932:	40b7      	lsls	r7, r6
 8046934:	ea25 0507 	bic.w	r5, r5, r7
 8046938:	40b0      	lsls	r0, r6
 804693a:	4328      	orrs	r0, r5
 804693c:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 804693e:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8046940:	6942      	ldr	r2, [r0, #20]
 8046942:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8046946:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8046948:	694c      	ldr	r4, [r1, #20]
 804694a:	6818      	ldr	r0, [r3, #0]
 804694c:	68c2      	ldr	r2, [r0, #12]
 804694e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8046952:	0052      	lsls	r2, r2, #1
 8046954:	fa04 f202 	lsl.w	r2, r4, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8046958:	690d      	ldr	r5, [r1, #16]
 804695a:	2d04      	cmp	r5, #4
 804695c:	d066      	beq.n	8046a2c <HAL_ADC_ConfigChannel+0x194>
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 804695e:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8046960:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 8046962:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8046966:	4cb2      	ldr	r4, [pc, #712]	; (8046c30 <HAL_ADC_ConfigChannel+0x398>)
 8046968:	403c      	ands	r4, r7
 804696a:	f006 46f8 	and.w	r6, r6, #2080374784	; 0x7c000000
 804696e:	4332      	orrs	r2, r6
 8046970:	4314      	orrs	r4, r2
 8046972:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8046976:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 804697a:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 804697c:	6882      	ldr	r2, [r0, #8]
 804697e:	f012 0f01 	tst.w	r2, #1
 8046982:	f040 81d9 	bne.w	8046d38 <HAL_ADC_ConfigChannel+0x4a0>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8046986:	680a      	ldr	r2, [r1, #0]
 8046988:	68cd      	ldr	r5, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 804698a:	f8d0 40b0 	ldr.w	r4, [r0, #176]	; 0xb0
 804698e:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8046992:	ea24 0406 	bic.w	r4, r4, r6
 8046996:	f005 0618 	and.w	r6, r5, #24
 804699a:	4da6      	ldr	r5, [pc, #664]	; (8046c34 <HAL_ADC_ConfigChannel+0x39c>)
 804699c:	40f5      	lsrs	r5, r6
 804699e:	402a      	ands	r2, r5
 80469a0:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80469a4:	4322      	orrs	r2, r4
 80469a6:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80469aa:	68c8      	ldr	r0, [r1, #12]
 80469ac:	4aa2      	ldr	r2, [pc, #648]	; (8046c38 <HAL_ADC_ConfigChannel+0x3a0>)
 80469ae:	4290      	cmp	r0, r2
 80469b0:	f000 80a4 	beq.w	8046afc <HAL_ADC_ConfigChannel+0x264>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80469b4:	6808      	ldr	r0, [r1, #0]
 80469b6:	4aa1      	ldr	r2, [pc, #644]	; (8046c3c <HAL_ADC_ConfigChannel+0x3a4>)
 80469b8:	4210      	tst	r0, r2
 80469ba:	f000 81bf 	beq.w	8046d3c <HAL_ADC_ConfigChannel+0x4a4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80469be:	4aa0      	ldr	r2, [pc, #640]	; (8046c40 <HAL_ADC_ConfigChannel+0x3a8>)
 80469c0:	6894      	ldr	r4, [r2, #8]
 80469c2:	f004 75e0 	and.w	r5, r4, #29360128	; 0x1c00000
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80469c6:	f5a2 7240 	sub.w	r2, r2, #768	; 0x300
 80469ca:	6892      	ldr	r2, [r2, #8]
 80469cc:	f012 0201 	ands.w	r2, r2, #1
 80469d0:	d000      	beq.n	80469d4 <HAL_ADC_ConfigChannel+0x13c>
 80469d2:	2201      	movs	r2, #1
 80469d4:	499b      	ldr	r1, [pc, #620]	; (8046c44 <HAL_ADC_ConfigChannel+0x3ac>)
 80469d6:	6889      	ldr	r1, [r1, #8]
 80469d8:	f011 0101 	ands.w	r1, r1, #1
 80469dc:	d000      	beq.n	80469e0 <HAL_ADC_ConfigChannel+0x148>
 80469de:	2101      	movs	r1, #1
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80469e0:	430a      	orrs	r2, r1
 80469e2:	f040 81a3 	bne.w	8046d2c <HAL_ADC_ConfigChannel+0x494>
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80469e6:	4a98      	ldr	r2, [pc, #608]	; (8046c48 <HAL_ADC_ConfigChannel+0x3b0>)
 80469e8:	4290      	cmp	r0, r2
 80469ea:	f000 8152 	beq.w	8046c92 <HAL_ADC_ConfigChannel+0x3fa>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80469ee:	4a97      	ldr	r2, [pc, #604]	; (8046c4c <HAL_ADC_ConfigChannel+0x3b4>)
 80469f0:	4290      	cmp	r0, r2
 80469f2:	f000 8174 	beq.w	8046cde <HAL_ADC_ConfigChannel+0x446>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80469f6:	4a96      	ldr	r2, [pc, #600]	; (8046c50 <HAL_ADC_ConfigChannel+0x3b8>)
 80469f8:	4290      	cmp	r0, r2
 80469fa:	f000 8184 	beq.w	8046d06 <HAL_ADC_ConfigChannel+0x46e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80469fe:	2000      	movs	r0, #0
 8046a00:	e761      	b.n	80468c6 <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8046a02:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8046a04:	3414      	adds	r4, #20
 8046a06:	0e42      	lsrs	r2, r0, #25
 8046a08:	0092      	lsls	r2, r2, #2
 8046a0a:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8046a0e:	58a5      	ldr	r5, [r4, r2]
 8046a10:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8046a14:	2607      	movs	r6, #7
 8046a16:	fa06 f000 	lsl.w	r0, r6, r0
 8046a1a:	ea25 0000 	bic.w	r0, r5, r0
 8046a1e:	50a0      	str	r0, [r4, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8046a20:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8046a22:	6942      	ldr	r2, [r0, #20]
 8046a24:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8046a28:	6142      	str	r2, [r0, #20]
}
 8046a2a:	e78d      	b.n	8046948 <HAL_ADC_ConfigChannel+0xb0>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8046a2c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8046a2e:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8046a30:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8046a34:	680a      	ldr	r2, [r1, #0]
 8046a36:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8046a3a:	bb85      	cbnz	r5, 8046a9e <HAL_ADC_ConfigChannel+0x206>
 8046a3c:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8046a40:	4294      	cmp	r4, r2
 8046a42:	d034      	beq.n	8046aae <HAL_ADC_ConfigChannel+0x216>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8046a44:	681c      	ldr	r4, [r3, #0]
 8046a46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8046a48:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8046a4a:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8046a4e:	680a      	ldr	r2, [r1, #0]
 8046a50:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8046a54:	bb85      	cbnz	r5, 8046ab8 <HAL_ADC_ConfigChannel+0x220>
 8046a56:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8046a5a:	4290      	cmp	r0, r2
 8046a5c:	d034      	beq.n	8046ac8 <HAL_ADC_ConfigChannel+0x230>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8046a5e:	681c      	ldr	r4, [r3, #0]
 8046a60:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8046a62:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8046a64:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8046a68:	680a      	ldr	r2, [r1, #0]
 8046a6a:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8046a6e:	bb85      	cbnz	r5, 8046ad2 <HAL_ADC_ConfigChannel+0x23a>
 8046a70:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8046a74:	4290      	cmp	r0, r2
 8046a76:	d034      	beq.n	8046ae2 <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8046a78:	681c      	ldr	r4, [r3, #0]
 8046a7a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8046a7c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8046a7e:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8046a82:	680a      	ldr	r2, [r1, #0]
 8046a84:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8046a88:	bb85      	cbnz	r5, 8046aec <HAL_ADC_ConfigChannel+0x254>
 8046a8a:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8046a8e:	4290      	cmp	r0, r2
 8046a90:	f47f af73 	bne.w	804697a <HAL_ADC_ConfigChannel+0xe2>
  MODIFY_REG(*preg,
 8046a94:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8046a96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8046a9a:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8046a9c:	e76d      	b.n	804697a <HAL_ADC_ConfigChannel+0xe2>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8046a9e:	fa92 f2a2 	rbit	r2, r2
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8046aa2:	b112      	cbz	r2, 8046aaa <HAL_ADC_ConfigChannel+0x212>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8046aa4:	fab2 f282 	clz	r2, r2
 8046aa8:	e7ca      	b.n	8046a40 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8046aaa:	2220      	movs	r2, #32
 8046aac:	e7c8      	b.n	8046a40 <HAL_ADC_ConfigChannel+0x1a8>
  MODIFY_REG(*preg,
 8046aae:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8046ab0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8046ab4:	6602      	str	r2, [r0, #96]	; 0x60
}
 8046ab6:	e7c5      	b.n	8046a44 <HAL_ADC_ConfigChannel+0x1ac>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8046ab8:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8046abc:	b112      	cbz	r2, 8046ac4 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8046abe:	fab2 f282 	clz	r2, r2
 8046ac2:	e7ca      	b.n	8046a5a <HAL_ADC_ConfigChannel+0x1c2>
    return 32U;
 8046ac4:	2220      	movs	r2, #32
 8046ac6:	e7c8      	b.n	8046a5a <HAL_ADC_ConfigChannel+0x1c2>
  MODIFY_REG(*preg,
 8046ac8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8046aca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8046ace:	6662      	str	r2, [r4, #100]	; 0x64
}
 8046ad0:	e7c5      	b.n	8046a5e <HAL_ADC_ConfigChannel+0x1c6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8046ad2:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8046ad6:	b112      	cbz	r2, 8046ade <HAL_ADC_ConfigChannel+0x246>
  return __builtin_clz(value);
 8046ad8:	fab2 f282 	clz	r2, r2
 8046adc:	e7ca      	b.n	8046a74 <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 8046ade:	2220      	movs	r2, #32
 8046ae0:	e7c8      	b.n	8046a74 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 8046ae2:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8046ae4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8046ae8:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8046aea:	e7c5      	b.n	8046a78 <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8046aec:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8046af0:	b112      	cbz	r2, 8046af8 <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 8046af2:	fab2 f282 	clz	r2, r2
 8046af6:	e7ca      	b.n	8046a8e <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 8046af8:	2220      	movs	r2, #32
 8046afa:	e7c8      	b.n	8046a8e <HAL_ADC_ConfigChannel+0x1f6>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8046afc:	681d      	ldr	r5, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8046afe:	680a      	ldr	r2, [r1, #0]
 8046b00:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8046b04:	2e00      	cmp	r6, #0
 8046b06:	d135      	bne.n	8046b74 <HAL_ADC_ConfigChannel+0x2dc>
 8046b08:	0e90      	lsrs	r0, r2, #26
 8046b0a:	3001      	adds	r0, #1
 8046b0c:	f000 001f 	and.w	r0, r0, #31
 8046b10:	2809      	cmp	r0, #9
 8046b12:	bf8c      	ite	hi
 8046b14:	2000      	movhi	r0, #0
 8046b16:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8046b18:	2800      	cmp	r0, #0
 8046b1a:	d062      	beq.n	8046be2 <HAL_ADC_ConfigChannel+0x34a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8046b1c:	2e00      	cmp	r6, #0
 8046b1e:	d138      	bne.n	8046b92 <HAL_ADC_ConfigChannel+0x2fa>
 8046b20:	0e94      	lsrs	r4, r2, #26
 8046b22:	3401      	adds	r4, #1
 8046b24:	06a4      	lsls	r4, r4, #26
 8046b26:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8046b2a:	2e00      	cmp	r6, #0
 8046b2c:	d13d      	bne.n	8046baa <HAL_ADC_ConfigChannel+0x312>
 8046b2e:	0e90      	lsrs	r0, r2, #26
 8046b30:	3001      	adds	r0, #1
 8046b32:	f000 071f 	and.w	r7, r0, #31
 8046b36:	2001      	movs	r0, #1
 8046b38:	40b8      	lsls	r0, r7
 8046b3a:	4304      	orrs	r4, r0
 8046b3c:	2e00      	cmp	r6, #0
 8046b3e:	d142      	bne.n	8046bc6 <HAL_ADC_ConfigChannel+0x32e>
 8046b40:	0e92      	lsrs	r2, r2, #26
 8046b42:	3201      	adds	r2, #1
 8046b44:	f002 021f 	and.w	r2, r2, #31
 8046b48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8046b4c:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8046b4e:	4322      	orrs	r2, r4
 8046b50:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8046b52:	3514      	adds	r5, #20
 8046b54:	0e50      	lsrs	r0, r2, #25
 8046b56:	0080      	lsls	r0, r0, #2
 8046b58:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8046b5c:	582e      	ldr	r6, [r5, r0]
 8046b5e:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8046b62:	2707      	movs	r7, #7
 8046b64:	4097      	lsls	r7, r2
 8046b66:	ea26 0607 	bic.w	r6, r6, r7
 8046b6a:	fa04 f202 	lsl.w	r2, r4, r2
 8046b6e:	4332      	orrs	r2, r6
 8046b70:	502a      	str	r2, [r5, r0]
}
 8046b72:	e71f      	b.n	80469b4 <HAL_ADC_ConfigChannel+0x11c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8046b74:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8046b78:	b148      	cbz	r0, 8046b8e <HAL_ADC_ConfigChannel+0x2f6>
  return __builtin_clz(value);
 8046b7a:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8046b7e:	3001      	adds	r0, #1
 8046b80:	f000 001f 	and.w	r0, r0, #31
 8046b84:	2809      	cmp	r0, #9
 8046b86:	bf8c      	ite	hi
 8046b88:	2000      	movhi	r0, #0
 8046b8a:	2001      	movls	r0, #1
 8046b8c:	e7c4      	b.n	8046b18 <HAL_ADC_ConfigChannel+0x280>
    return 32U;
 8046b8e:	2020      	movs	r0, #32
 8046b90:	e7f5      	b.n	8046b7e <HAL_ADC_ConfigChannel+0x2e6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8046b92:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8046b96:	b134      	cbz	r4, 8046ba6 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8046b98:	fab4 f484 	clz	r4, r4
 8046b9c:	3401      	adds	r4, #1
 8046b9e:	06a4      	lsls	r4, r4, #26
 8046ba0:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8046ba4:	e7c1      	b.n	8046b2a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8046ba6:	2420      	movs	r4, #32
 8046ba8:	e7f8      	b.n	8046b9c <HAL_ADC_ConfigChannel+0x304>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8046baa:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8046bae:	b140      	cbz	r0, 8046bc2 <HAL_ADC_ConfigChannel+0x32a>
  return __builtin_clz(value);
 8046bb0:	fab0 f080 	clz	r0, r0
 8046bb4:	3001      	adds	r0, #1
 8046bb6:	f000 001f 	and.w	r0, r0, #31
 8046bba:	2701      	movs	r7, #1
 8046bbc:	fa07 f000 	lsl.w	r0, r7, r0
 8046bc0:	e7bb      	b.n	8046b3a <HAL_ADC_ConfigChannel+0x2a2>
    return 32U;
 8046bc2:	2020      	movs	r0, #32
 8046bc4:	e7f6      	b.n	8046bb4 <HAL_ADC_ConfigChannel+0x31c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8046bc6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8046bca:	b142      	cbz	r2, 8046bde <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8046bcc:	fab2 f282 	clz	r2, r2
 8046bd0:	3201      	adds	r2, #1
 8046bd2:	f002 021f 	and.w	r2, r2, #31
 8046bd6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8046bda:	0512      	lsls	r2, r2, #20
 8046bdc:	e7b7      	b.n	8046b4e <HAL_ADC_ConfigChannel+0x2b6>
    return 32U;
 8046bde:	2220      	movs	r2, #32
 8046be0:	e7f6      	b.n	8046bd0 <HAL_ADC_ConfigChannel+0x338>
 8046be2:	b9ce      	cbnz	r6, 8046c18 <HAL_ADC_ConfigChannel+0x380>
 8046be4:	0e94      	lsrs	r4, r2, #26
 8046be6:	3401      	adds	r4, #1
 8046be8:	06a4      	lsls	r4, r4, #26
 8046bea:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8046bee:	bb8e      	cbnz	r6, 8046c54 <HAL_ADC_ConfigChannel+0x3bc>
 8046bf0:	0e90      	lsrs	r0, r2, #26
 8046bf2:	3001      	adds	r0, #1
 8046bf4:	f000 071f 	and.w	r7, r0, #31
 8046bf8:	2001      	movs	r0, #1
 8046bfa:	40b8      	lsls	r0, r7
 8046bfc:	4304      	orrs	r4, r0
 8046bfe:	bbbe      	cbnz	r6, 8046c70 <HAL_ADC_ConfigChannel+0x3d8>
 8046c00:	0e90      	lsrs	r0, r2, #26
 8046c02:	3001      	adds	r0, #1
 8046c04:	f000 001f 	and.w	r0, r0, #31
 8046c08:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8046c0c:	3a1e      	subs	r2, #30
 8046c0e:	0512      	lsls	r2, r2, #20
 8046c10:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8046c14:	4322      	orrs	r2, r4
 8046c16:	e79b      	b.n	8046b50 <HAL_ADC_ConfigChannel+0x2b8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8046c18:	fa92 f4a2 	rbit	r4, r2
  if (value == 0U)
 8046c1c:	b134      	cbz	r4, 8046c2c <HAL_ADC_ConfigChannel+0x394>
  return __builtin_clz(value);
 8046c1e:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8046c22:	3401      	adds	r4, #1
 8046c24:	06a4      	lsls	r4, r4, #26
 8046c26:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8046c2a:	e7e0      	b.n	8046bee <HAL_ADC_ConfigChannel+0x356>
    return 32U;
 8046c2c:	2420      	movs	r4, #32
 8046c2e:	e7f8      	b.n	8046c22 <HAL_ADC_ConfigChannel+0x38a>
 8046c30:	03fff000 	.word	0x03fff000
 8046c34:	0007ffff 	.word	0x0007ffff
 8046c38:	407f0000 	.word	0x407f0000
 8046c3c:	80080000 	.word	0x80080000
 8046c40:	42028300 	.word	0x42028300
 8046c44:	42028100 	.word	0x42028100
 8046c48:	c7520000 	.word	0xc7520000
 8046c4c:	cb840000 	.word	0xcb840000
 8046c50:	80000001 	.word	0x80000001
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8046c54:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8046c58:	b140      	cbz	r0, 8046c6c <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 8046c5a:	fab0 f080 	clz	r0, r0
 8046c5e:	3001      	adds	r0, #1
 8046c60:	f000 001f 	and.w	r0, r0, #31
 8046c64:	2701      	movs	r7, #1
 8046c66:	fa07 f000 	lsl.w	r0, r7, r0
 8046c6a:	e7c7      	b.n	8046bfc <HAL_ADC_ConfigChannel+0x364>
    return 32U;
 8046c6c:	2020      	movs	r0, #32
 8046c6e:	e7f6      	b.n	8046c5e <HAL_ADC_ConfigChannel+0x3c6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8046c70:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8046c74:	b15a      	cbz	r2, 8046c8e <HAL_ADC_ConfigChannel+0x3f6>
  return __builtin_clz(value);
 8046c76:	fab2 f082 	clz	r0, r2
 8046c7a:	3001      	adds	r0, #1
 8046c7c:	f000 001f 	and.w	r0, r0, #31
 8046c80:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8046c84:	3a1e      	subs	r2, #30
 8046c86:	0512      	lsls	r2, r2, #20
 8046c88:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8046c8c:	e7c2      	b.n	8046c14 <HAL_ADC_ConfigChannel+0x37c>
    return 32U;
 8046c8e:	2020      	movs	r0, #32
 8046c90:	e7f3      	b.n	8046c7a <HAL_ADC_ConfigChannel+0x3e2>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8046c92:	f414 0f00 	tst.w	r4, #8388608	; 0x800000
 8046c96:	f47f aeaa 	bne.w	80469ee <HAL_ADC_ConfigChannel+0x156>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8046c9a:	6819      	ldr	r1, [r3, #0]
 8046c9c:	4a2a      	ldr	r2, [pc, #168]	; (8046d48 <HAL_ADC_ConfigChannel+0x4b0>)
 8046c9e:	4291      	cmp	r1, r2
 8046ca0:	d001      	beq.n	8046ca6 <HAL_ADC_ConfigChannel+0x40e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8046ca2:	2000      	movs	r0, #0
 8046ca4:	e60f      	b.n	80468c6 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8046ca6:	f445 0200 	orr.w	r2, r5, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8046caa:	4828      	ldr	r0, [pc, #160]	; (8046d4c <HAL_ADC_ConfigChannel+0x4b4>)
 8046cac:	6881      	ldr	r1, [r0, #8]
 8046cae:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8046cb2:	430a      	orrs	r2, r1
 8046cb4:	6082      	str	r2, [r0, #8]
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8046cb6:	4a26      	ldr	r2, [pc, #152]	; (8046d50 <HAL_ADC_ConfigChannel+0x4b8>)
 8046cb8:	6812      	ldr	r2, [r2, #0]
 8046cba:	0992      	lsrs	r2, r2, #6
 8046cbc:	4925      	ldr	r1, [pc, #148]	; (8046d54 <HAL_ADC_ConfigChannel+0x4bc>)
 8046cbe:	fba1 1202 	umull	r1, r2, r1, r2
 8046cc2:	0992      	lsrs	r2, r2, #6
 8046cc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8046cc8:	0092      	lsls	r2, r2, #2
 8046cca:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8046ccc:	e002      	b.n	8046cd4 <HAL_ADC_ConfigChannel+0x43c>
                wait_loop_index--;
 8046cce:	9a01      	ldr	r2, [sp, #4]
 8046cd0:	3a01      	subs	r2, #1
 8046cd2:	9201      	str	r2, [sp, #4]
              while(wait_loop_index != 0UL)
 8046cd4:	9a01      	ldr	r2, [sp, #4]
 8046cd6:	2a00      	cmp	r2, #0
 8046cd8:	d1f9      	bne.n	8046cce <HAL_ADC_ConfigChannel+0x436>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8046cda:	2000      	movs	r0, #0
 8046cdc:	e5f3      	b.n	80468c6 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8046cde:	f014 7f80 	tst.w	r4, #16777216	; 0x1000000
 8046ce2:	f47f ae88 	bne.w	80469f6 <HAL_ADC_ConfigChannel+0x15e>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8046ce6:	6819      	ldr	r1, [r3, #0]
 8046ce8:	4a17      	ldr	r2, [pc, #92]	; (8046d48 <HAL_ADC_ConfigChannel+0x4b0>)
 8046cea:	4291      	cmp	r1, r2
 8046cec:	d001      	beq.n	8046cf2 <HAL_ADC_ConfigChannel+0x45a>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8046cee:	2000      	movs	r0, #0
 8046cf0:	e5e9      	b.n	80468c6 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8046cf2:	f045 7280 	orr.w	r2, r5, #16777216	; 0x1000000
 8046cf6:	4815      	ldr	r0, [pc, #84]	; (8046d4c <HAL_ADC_ConfigChannel+0x4b4>)
 8046cf8:	6881      	ldr	r1, [r0, #8]
 8046cfa:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8046cfe:	430a      	orrs	r2, r1
 8046d00:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8046d02:	2000      	movs	r0, #0
}
 8046d04:	e5df      	b.n	80468c6 <HAL_ADC_ConfigChannel+0x2e>
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8046d06:	f414 0f80 	tst.w	r4, #4194304	; 0x400000
 8046d0a:	d119      	bne.n	8046d40 <HAL_ADC_ConfigChannel+0x4a8>
            if (ADC_VREFINT_INSTANCE(hadc))
 8046d0c:	6819      	ldr	r1, [r3, #0]
 8046d0e:	4a0e      	ldr	r2, [pc, #56]	; (8046d48 <HAL_ADC_ConfigChannel+0x4b0>)
 8046d10:	4291      	cmp	r1, r2
 8046d12:	d001      	beq.n	8046d18 <HAL_ADC_ConfigChannel+0x480>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8046d14:	2000      	movs	r0, #0
 8046d16:	e5d6      	b.n	80468c6 <HAL_ADC_ConfigChannel+0x2e>
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8046d18:	f445 0280 	orr.w	r2, r5, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8046d1c:	480b      	ldr	r0, [pc, #44]	; (8046d4c <HAL_ADC_ConfigChannel+0x4b4>)
 8046d1e:	6881      	ldr	r1, [r0, #8]
 8046d20:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8046d24:	430a      	orrs	r2, r1
 8046d26:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8046d28:	2000      	movs	r0, #0
}
 8046d2a:	e5cc      	b.n	80468c6 <HAL_ADC_ConfigChannel+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8046d2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8046d2e:	f042 0220 	orr.w	r2, r2, #32
 8046d32:	659a      	str	r2, [r3, #88]	; 0x58
          tmp_hal_status = HAL_ERROR;
 8046d34:	2001      	movs	r0, #1
 8046d36:	e5c6      	b.n	80468c6 <HAL_ADC_ConfigChannel+0x2e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8046d38:	2000      	movs	r0, #0
 8046d3a:	e5c4      	b.n	80468c6 <HAL_ADC_ConfigChannel+0x2e>
 8046d3c:	2000      	movs	r0, #0
 8046d3e:	e5c2      	b.n	80468c6 <HAL_ADC_ConfigChannel+0x2e>
 8046d40:	2000      	movs	r0, #0
 8046d42:	e5c0      	b.n	80468c6 <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 8046d44:	2002      	movs	r0, #2
 8046d46:	e5c1      	b.n	80468cc <HAL_ADC_ConfigChannel+0x34>
 8046d48:	42028000 	.word	0x42028000
 8046d4c:	42028300 	.word	0x42028300
 8046d50:	20018060 	.word	0x20018060
 8046d54:	053e2d63 	.word	0x053e2d63

08046d58 <HAL_ADC_GetState>:
  return hadc->State;
 8046d58:	6d80      	ldr	r0, [r0, #88]	; 0x58
}
 8046d5a:	4770      	bx	lr

08046d5c <ADC_ConversionStop>:
{
 8046d5c:	b570      	push	{r4, r5, r6, lr}
 8046d5e:	4604      	mov	r4, r0
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8046d60:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8046d62:	689a      	ldr	r2, [r3, #8]
 8046d64:	f012 0204 	ands.w	r2, r2, #4
 8046d68:	d000      	beq.n	8046d6c <ADC_ConversionStop+0x10>
 8046d6a:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8046d6c:	6898      	ldr	r0, [r3, #8]
 8046d6e:	f010 0008 	ands.w	r0, r0, #8
 8046d72:	d000      	beq.n	8046d76 <ADC_ConversionStop+0x1a>
 8046d74:	2001      	movs	r0, #1
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8046d76:	b90a      	cbnz	r2, 8046d7c <ADC_ConversionStop+0x20>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8046d78:	2800      	cmp	r0, #0
 8046d7a:	d067      	beq.n	8046e4c <ADC_ConversionStop+0xf0>
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8046d7c:	68da      	ldr	r2, [r3, #12]
 8046d7e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8046d82:	d004      	beq.n	8046d8e <ADC_ConversionStop+0x32>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8046d84:	8b20      	ldrh	r0, [r4, #24]
 8046d86:	f240 1201 	movw	r2, #257	; 0x101
 8046d8a:	4290      	cmp	r0, r2
 8046d8c:	d04a      	beq.n	8046e24 <ADC_ConversionStop+0xc8>
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8046d8e:	2902      	cmp	r1, #2
 8046d90:	d010      	beq.n	8046db4 <ADC_ConversionStop+0x58>
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8046d92:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8046d94:	689a      	ldr	r2, [r3, #8]
 8046d96:	f012 0f04 	tst.w	r2, #4
 8046d9a:	d00b      	beq.n	8046db4 <ADC_ConversionStop+0x58>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8046d9c:	689a      	ldr	r2, [r3, #8]
 8046d9e:	f012 0f02 	tst.w	r2, #2
 8046da2:	d107      	bne.n	8046db4 <ADC_ConversionStop+0x58>
  MODIFY_REG(ADCx->CR,
 8046da4:	689a      	ldr	r2, [r3, #8]
 8046da6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8046daa:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8046dae:	f042 0210 	orr.w	r2, r2, #16
 8046db2:	609a      	str	r2, [r3, #8]
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8046db4:	2901      	cmp	r1, #1
 8046db6:	d010      	beq.n	8046dda <ADC_ConversionStop+0x7e>
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8046db8:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8046dba:	689a      	ldr	r2, [r3, #8]
 8046dbc:	f012 0f08 	tst.w	r2, #8
 8046dc0:	d00b      	beq.n	8046dda <ADC_ConversionStop+0x7e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8046dc2:	689a      	ldr	r2, [r3, #8]
 8046dc4:	f012 0f02 	tst.w	r2, #2
 8046dc8:	d107      	bne.n	8046dda <ADC_ConversionStop+0x7e>
  MODIFY_REG(ADCx->CR,
 8046dca:	689a      	ldr	r2, [r3, #8]
 8046dcc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8046dd0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8046dd4:	f042 0220 	orr.w	r2, r2, #32
 8046dd8:	609a      	str	r2, [r3, #8]
    switch (conversion_group_reassigned)
 8046dda:	2902      	cmp	r1, #2
 8046ddc:	d030      	beq.n	8046e40 <ADC_ConversionStop+0xe4>
 8046dde:	2903      	cmp	r1, #3
 8046de0:	d130      	bne.n	8046e44 <ADC_ConversionStop+0xe8>
 8046de2:	260c      	movs	r6, #12
    tickstart = HAL_GetTick();
 8046de4:	f7ff f9da 	bl	804619c <HAL_GetTick>
 8046de8:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8046dea:	6823      	ldr	r3, [r4, #0]
 8046dec:	689b      	ldr	r3, [r3, #8]
 8046dee:	4233      	tst	r3, r6
 8046df0:	d02a      	beq.n	8046e48 <ADC_ConversionStop+0xec>
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8046df2:	f7ff f9d3 	bl	804619c <HAL_GetTick>
 8046df6:	1b43      	subs	r3, r0, r5
 8046df8:	2b05      	cmp	r3, #5
 8046dfa:	d9f6      	bls.n	8046dea <ADC_ConversionStop+0x8e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8046dfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8046dfe:	f043 0310 	orr.w	r3, r3, #16
 8046e02:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8046e04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8046e06:	f043 0301 	orr.w	r3, r3, #1
 8046e0a:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 8046e0c:	2001      	movs	r0, #1
 8046e0e:	e01c      	b.n	8046e4a <ADC_ConversionStop+0xee>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8046e10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8046e12:	f043 0310 	orr.w	r3, r3, #16
 8046e16:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8046e18:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8046e1a:	f043 0301 	orr.w	r3, r3, #1
 8046e1e:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8046e20:	2001      	movs	r0, #1
 8046e22:	e012      	b.n	8046e4a <ADC_ConversionStop+0xee>
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8046e24:	2200      	movs	r2, #0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8046e26:	6819      	ldr	r1, [r3, #0]
 8046e28:	f011 0f40 	tst.w	r1, #64	; 0x40
 8046e2c:	d104      	bne.n	8046e38 <ADC_ConversionStop+0xdc>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8046e2e:	4908      	ldr	r1, [pc, #32]	; (8046e50 <ADC_ConversionStop+0xf4>)
 8046e30:	428a      	cmp	r2, r1
 8046e32:	d8ed      	bhi.n	8046e10 <ADC_ConversionStop+0xb4>
        Conversion_Timeout_CPU_cycles ++;
 8046e34:	3201      	adds	r2, #1
 8046e36:	e7f6      	b.n	8046e26 <ADC_ConversionStop+0xca>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8046e38:	2240      	movs	r2, #64	; 0x40
 8046e3a:	601a      	str	r2, [r3, #0]
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8046e3c:	2101      	movs	r1, #1
 8046e3e:	e7a8      	b.n	8046d92 <ADC_ConversionStop+0x36>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8046e40:	2608      	movs	r6, #8
 8046e42:	e7cf      	b.n	8046de4 <ADC_ConversionStop+0x88>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8046e44:	2604      	movs	r6, #4
 8046e46:	e7cd      	b.n	8046de4 <ADC_ConversionStop+0x88>
  return HAL_OK;
 8046e48:	2000      	movs	r0, #0
}
 8046e4a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8046e4c:	2000      	movs	r0, #0
 8046e4e:	e7fc      	b.n	8046e4a <ADC_ConversionStop+0xee>
 8046e50:	a33fffff 	.word	0xa33fffff

08046e54 <ADC_Enable>:
{
 8046e54:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8046e56:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8046e58:	689a      	ldr	r2, [r3, #8]
 8046e5a:	f012 0f01 	tst.w	r2, #1
 8046e5e:	d13d      	bne.n	8046edc <ADC_Enable+0x88>
 8046e60:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8046e62:	6899      	ldr	r1, [r3, #8]
 8046e64:	4a1e      	ldr	r2, [pc, #120]	; (8046ee0 <ADC_Enable+0x8c>)
 8046e66:	4211      	tst	r1, r2
 8046e68:	d009      	beq.n	8046e7e <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8046e6a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8046e6c:	f043 0310 	orr.w	r3, r3, #16
 8046e70:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8046e72:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8046e74:	f043 0301 	orr.w	r3, r3, #1
 8046e78:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 8046e7a:	2001      	movs	r0, #1
 8046e7c:	e02f      	b.n	8046ede <ADC_Enable+0x8a>
  MODIFY_REG(ADCx->CR,
 8046e7e:	689a      	ldr	r2, [r3, #8]
 8046e80:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8046e84:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8046e88:	f042 0201 	orr.w	r2, r2, #1
 8046e8c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8046e8e:	f7ff f985 	bl	804619c <HAL_GetTick>
 8046e92:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8046e94:	e004      	b.n	8046ea0 <ADC_Enable+0x4c>
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8046e96:	f7ff f981 	bl	804619c <HAL_GetTick>
 8046e9a:	1b43      	subs	r3, r0, r5
 8046e9c:	2b02      	cmp	r3, #2
 8046e9e:	d811      	bhi.n	8046ec4 <ADC_Enable+0x70>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8046ea0:	6823      	ldr	r3, [r4, #0]
 8046ea2:	681a      	ldr	r2, [r3, #0]
 8046ea4:	f012 0f01 	tst.w	r2, #1
 8046ea8:	d116      	bne.n	8046ed8 <ADC_Enable+0x84>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8046eaa:	689a      	ldr	r2, [r3, #8]
 8046eac:	f012 0f01 	tst.w	r2, #1
 8046eb0:	d1f1      	bne.n	8046e96 <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8046eb2:	689a      	ldr	r2, [r3, #8]
 8046eb4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8046eb8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8046ebc:	f042 0201 	orr.w	r2, r2, #1
 8046ec0:	609a      	str	r2, [r3, #8]
}
 8046ec2:	e7e8      	b.n	8046e96 <ADC_Enable+0x42>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8046ec4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8046ec6:	f043 0310 	orr.w	r3, r3, #16
 8046eca:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8046ecc:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8046ece:	f043 0301 	orr.w	r3, r3, #1
 8046ed2:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 8046ed4:	2001      	movs	r0, #1
 8046ed6:	e002      	b.n	8046ede <ADC_Enable+0x8a>
  return HAL_OK;
 8046ed8:	2000      	movs	r0, #0
 8046eda:	e000      	b.n	8046ede <ADC_Enable+0x8a>
 8046edc:	2000      	movs	r0, #0
}
 8046ede:	bd38      	pop	{r3, r4, r5, pc}
 8046ee0:	8000003f 	.word	0x8000003f

08046ee4 <HAL_ADC_Start>:
{
 8046ee4:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8046ee6:	4b3a      	ldr	r3, [pc, #232]	; (8046fd0 <HAL_ADC_Start+0xec>)
 8046ee8:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8046eea:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8046eec:	689b      	ldr	r3, [r3, #8]
 8046eee:	f013 0f04 	tst.w	r3, #4
 8046ef2:	d169      	bne.n	8046fc8 <HAL_ADC_Start+0xe4>
 8046ef4:	4604      	mov	r4, r0
 8046ef6:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8046efa:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8046efe:	2b01      	cmp	r3, #1
 8046f00:	d064      	beq.n	8046fcc <HAL_ADC_Start+0xe8>
 8046f02:	2301      	movs	r3, #1
 8046f04:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8046f08:	f7ff ffa4 	bl	8046e54 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8046f0c:	2800      	cmp	r0, #0
 8046f0e:	d157      	bne.n	8046fc0 <HAL_ADC_Start+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 8046f10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8046f12:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8046f16:	f023 0301 	bic.w	r3, r3, #1
 8046f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8046f1e:	65a3      	str	r3, [r4, #88]	; 0x58
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8046f20:	6823      	ldr	r3, [r4, #0]
 8046f22:	4a2c      	ldr	r2, [pc, #176]	; (8046fd4 <HAL_ADC_Start+0xf0>)
 8046f24:	4293      	cmp	r3, r2
 8046f26:	d02f      	beq.n	8046f88 <HAL_ADC_Start+0xa4>
 8046f28:	461a      	mov	r2, r3
 8046f2a:	4293      	cmp	r3, r2
 8046f2c:	d000      	beq.n	8046f30 <HAL_ADC_Start+0x4c>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8046f2e:	b91d      	cbnz	r5, 8046f38 <HAL_ADC_Start+0x54>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8046f30:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8046f32:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8046f36:	65a2      	str	r2, [r4, #88]	; 0x58
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8046f38:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8046f3a:	f412 5f80 	tst.w	r2, #4096	; 0x1000
 8046f3e:	d026      	beq.n	8046f8e <HAL_ADC_Start+0xaa>
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8046f40:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8046f42:	f022 0206 	bic.w	r2, r2, #6
 8046f46:	65e2      	str	r2, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8046f48:	221c      	movs	r2, #28
 8046f4a:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hadc);
 8046f4c:	2300      	movs	r3, #0
 8046f4e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8046f52:	6822      	ldr	r2, [r4, #0]
 8046f54:	4b1f      	ldr	r3, [pc, #124]	; (8046fd4 <HAL_ADC_Start+0xf0>)
 8046f56:	429a      	cmp	r2, r3
 8046f58:	d01c      	beq.n	8046f94 <HAL_ADC_Start+0xb0>
 8046f5a:	4613      	mov	r3, r2
 8046f5c:	429a      	cmp	r2, r3
 8046f5e:	d01c      	beq.n	8046f9a <HAL_ADC_Start+0xb6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8046f60:	b1dd      	cbz	r5, 8046f9a <HAL_ADC_Start+0xb6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8046f62:	2d05      	cmp	r5, #5
 8046f64:	d019      	beq.n	8046f9a <HAL_ADC_Start+0xb6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8046f66:	2d09      	cmp	r5, #9
 8046f68:	d017      	beq.n	8046f9a <HAL_ADC_Start+0xb6>
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8046f6a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8046f6c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8046f70:	65a2      	str	r2, [r4, #88]	; 0x58
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8046f72:	68db      	ldr	r3, [r3, #12]
 8046f74:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8046f78:	d027      	beq.n	8046fca <HAL_ADC_Start+0xe6>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8046f7a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8046f7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8046f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8046f84:	65a3      	str	r3, [r4, #88]	; 0x58
 8046f86:	e020      	b.n	8046fca <HAL_ADC_Start+0xe6>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8046f88:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8046f8c:	e7cd      	b.n	8046f2a <HAL_ADC_Start+0x46>
        ADC_CLEAR_ERRORCODE(hadc);
 8046f8e:	2200      	movs	r2, #0
 8046f90:	65e2      	str	r2, [r4, #92]	; 0x5c
 8046f92:	e7d9      	b.n	8046f48 <HAL_ADC_Start+0x64>
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8046f94:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8046f98:	e7e0      	b.n	8046f5c <HAL_ADC_Start+0x78>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8046f9a:	68d3      	ldr	r3, [r2, #12]
 8046f9c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8046fa0:	d005      	beq.n	8046fae <HAL_ADC_Start+0xca>
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8046fa2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8046fa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8046fa8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8046fac:	65a3      	str	r3, [r4, #88]	; 0x58
  MODIFY_REG(ADCx->CR,
 8046fae:	6893      	ldr	r3, [r2, #8]
 8046fb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8046fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8046fb8:	f043 0304 	orr.w	r3, r3, #4
 8046fbc:	6093      	str	r3, [r2, #8]
}
 8046fbe:	e004      	b.n	8046fca <HAL_ADC_Start+0xe6>
      __HAL_UNLOCK(hadc);
 8046fc0:	2300      	movs	r3, #0
 8046fc2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8046fc6:	e000      	b.n	8046fca <HAL_ADC_Start+0xe6>
    tmp_hal_status = HAL_BUSY;
 8046fc8:	2002      	movs	r0, #2
}
 8046fca:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_LOCK(hadc);
 8046fcc:	2002      	movs	r0, #2
 8046fce:	e7fc      	b.n	8046fca <HAL_ADC_Start+0xe6>
 8046fd0:	42028300 	.word	0x42028300
 8046fd4:	42028100 	.word	0x42028100

08046fd8 <HAL_ADC_Start_DMA>:
{
 8046fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8046fda:	4b3b      	ldr	r3, [pc, #236]	; (80470c8 <HAL_ADC_Start_DMA+0xf0>)
 8046fdc:	689d      	ldr	r5, [r3, #8]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8046fde:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8046fe0:	689b      	ldr	r3, [r3, #8]
 8046fe2:	f013 0f04 	tst.w	r3, #4
 8046fe6:	d16a      	bne.n	80470be <HAL_ADC_Start_DMA+0xe6>
 8046fe8:	4604      	mov	r4, r0
 8046fea:	460e      	mov	r6, r1
 8046fec:	4617      	mov	r7, r2
 8046fee:	f005 051f 	and.w	r5, r5, #31
    __HAL_LOCK(hadc);
 8046ff2:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8046ff6:	2b01      	cmp	r3, #1
 8046ff8:	d063      	beq.n	80470c2 <HAL_ADC_Start_DMA+0xea>
 8046ffa:	2301      	movs	r3, #1
 8046ffc:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8047000:	b145      	cbz	r5, 8047014 <HAL_ADC_Start_DMA+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8047002:	2d05      	cmp	r5, #5
 8047004:	d006      	beq.n	8047014 <HAL_ADC_Start_DMA+0x3c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8047006:	2d09      	cmp	r5, #9
 8047008:	d004      	beq.n	8047014 <HAL_ADC_Start_DMA+0x3c>
      __HAL_UNLOCK(hadc);
 804700a:	2300      	movs	r3, #0
 804700c:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
      tmp_hal_status = HAL_ERROR;
 8047010:	2001      	movs	r0, #1
 8047012:	e055      	b.n	80470c0 <HAL_ADC_Start_DMA+0xe8>
      tmp_hal_status = ADC_Enable(hadc);
 8047014:	4620      	mov	r0, r4
 8047016:	f7ff ff1d 	bl	8046e54 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 804701a:	2800      	cmp	r0, #0
 804701c:	d14b      	bne.n	80470b6 <HAL_ADC_Start_DMA+0xde>
        ADC_STATE_CLR_SET(hadc->State,
 804701e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8047020:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8047024:	f023 0301 	bic.w	r3, r3, #1
 8047028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804702c:	65a3      	str	r3, [r4, #88]	; 0x58
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 804702e:	6823      	ldr	r3, [r4, #0]
 8047030:	4a26      	ldr	r2, [pc, #152]	; (80470cc <HAL_ADC_Start_DMA+0xf4>)
 8047032:	4293      	cmp	r3, r2
 8047034:	d039      	beq.n	80470aa <HAL_ADC_Start_DMA+0xd2>
 8047036:	461a      	mov	r2, r3
 8047038:	4293      	cmp	r3, r2
 804703a:	d000      	beq.n	804703e <HAL_ADC_Start_DMA+0x66>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 804703c:	b91d      	cbnz	r5, 8047046 <HAL_ADC_Start_DMA+0x6e>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 804703e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8047040:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8047044:	65a3      	str	r3, [r4, #88]	; 0x58
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8047046:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8047048:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 804704c:	d030      	beq.n	80470b0 <HAL_ADC_Start_DMA+0xd8>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 804704e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8047050:	f023 0306 	bic.w	r3, r3, #6
 8047054:	65e3      	str	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8047056:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8047058:	4a1d      	ldr	r2, [pc, #116]	; (80470d0 <HAL_ADC_Start_DMA+0xf8>)
 804705a:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 804705c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 804705e:	4a1d      	ldr	r2, [pc, #116]	; (80470d4 <HAL_ADC_Start_DMA+0xfc>)
 8047060:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8047062:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8047064:	4a1c      	ldr	r2, [pc, #112]	; (80470d8 <HAL_ADC_Start_DMA+0x100>)
 8047066:	63da      	str	r2, [r3, #60]	; 0x3c
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8047068:	6823      	ldr	r3, [r4, #0]
 804706a:	221c      	movs	r2, #28
 804706c:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 804706e:	2300      	movs	r3, #0
 8047070:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8047074:	6822      	ldr	r2, [r4, #0]
 8047076:	6853      	ldr	r3, [r2, #4]
 8047078:	f043 0310 	orr.w	r3, r3, #16
 804707c:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 804707e:	6822      	ldr	r2, [r4, #0]
 8047080:	68d3      	ldr	r3, [r2, #12]
 8047082:	f043 0301 	orr.w	r3, r3, #1
 8047086:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8047088:	6821      	ldr	r1, [r4, #0]
 804708a:	463b      	mov	r3, r7
 804708c:	4632      	mov	r2, r6
 804708e:	3140      	adds	r1, #64	; 0x40
 8047090:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8047092:	f000 fa47 	bl	8047524 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8047096:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8047098:	6893      	ldr	r3, [r2, #8]
 804709a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804709e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80470a2:	f043 0304 	orr.w	r3, r3, #4
 80470a6:	6093      	str	r3, [r2, #8]
}
 80470a8:	e00a      	b.n	80470c0 <HAL_ADC_Start_DMA+0xe8>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80470aa:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80470ae:	e7c3      	b.n	8047038 <HAL_ADC_Start_DMA+0x60>
          ADC_CLEAR_ERRORCODE(hadc);
 80470b0:	2300      	movs	r3, #0
 80470b2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80470b4:	e7cf      	b.n	8047056 <HAL_ADC_Start_DMA+0x7e>
        __HAL_UNLOCK(hadc);
 80470b6:	2300      	movs	r3, #0
 80470b8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80470bc:	e000      	b.n	80470c0 <HAL_ADC_Start_DMA+0xe8>
    tmp_hal_status = HAL_BUSY;
 80470be:	2002      	movs	r0, #2
}
 80470c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_LOCK(hadc);
 80470c2:	2002      	movs	r0, #2
 80470c4:	e7fc      	b.n	80470c0 <HAL_ADC_Start_DMA+0xe8>
 80470c6:	bf00      	nop
 80470c8:	42028300 	.word	0x42028300
 80470cc:	42028100 	.word	0x42028100
 80470d0:	080461f9 	.word	0x080461f9
 80470d4:	08046281 	.word	0x08046281
 80470d8:	0804628b 	.word	0x0804628b

080470dc <ADC_Disable>:
{
 80470dc:	b538      	push	{r3, r4, r5, lr}
 80470de:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80470e0:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80470e2:	6893      	ldr	r3, [r2, #8]
 80470e4:	f013 0302 	ands.w	r3, r3, #2
 80470e8:	d000      	beq.n	80470ec <ADC_Disable+0x10>
 80470ea:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80470ec:	6891      	ldr	r1, [r2, #8]
 80470ee:	f011 0f01 	tst.w	r1, #1
 80470f2:	d034      	beq.n	804715e <ADC_Disable+0x82>
      && (tmp_adc_is_disable_on_going == 0UL)
 80470f4:	2b00      	cmp	r3, #0
 80470f6:	d134      	bne.n	8047162 <ADC_Disable+0x86>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80470f8:	6893      	ldr	r3, [r2, #8]
 80470fa:	f003 030d 	and.w	r3, r3, #13
 80470fe:	2b01      	cmp	r3, #1
 8047100:	d009      	beq.n	8047116 <ADC_Disable+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8047102:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8047104:	f043 0310 	orr.w	r3, r3, #16
 8047108:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 804710a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 804710c:	f043 0301 	orr.w	r3, r3, #1
 8047110:	65e3      	str	r3, [r4, #92]	; 0x5c
      return HAL_ERROR;
 8047112:	2001      	movs	r0, #1
 8047114:	e024      	b.n	8047160 <ADC_Disable+0x84>
  MODIFY_REG(ADCx->CR,
 8047116:	6893      	ldr	r3, [r2, #8]
 8047118:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 804711c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8047120:	f043 0302 	orr.w	r3, r3, #2
 8047124:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8047126:	6823      	ldr	r3, [r4, #0]
 8047128:	2203      	movs	r2, #3
 804712a:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 804712c:	f7ff f836 	bl	804619c <HAL_GetTick>
 8047130:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8047132:	6823      	ldr	r3, [r4, #0]
 8047134:	689b      	ldr	r3, [r3, #8]
 8047136:	f013 0f01 	tst.w	r3, #1
 804713a:	d00e      	beq.n	804715a <ADC_Disable+0x7e>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 804713c:	f7ff f82e 	bl	804619c <HAL_GetTick>
 8047140:	1b40      	subs	r0, r0, r5
 8047142:	2802      	cmp	r0, #2
 8047144:	d9f5      	bls.n	8047132 <ADC_Disable+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8047146:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8047148:	f043 0310 	orr.w	r3, r3, #16
 804714c:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 804714e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8047150:	f043 0301 	orr.w	r3, r3, #1
 8047154:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 8047156:	2001      	movs	r0, #1
 8047158:	e002      	b.n	8047160 <ADC_Disable+0x84>
  return HAL_OK;
 804715a:	2000      	movs	r0, #0
 804715c:	e000      	b.n	8047160 <ADC_Disable+0x84>
 804715e:	2000      	movs	r0, #0
}
 8047160:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8047162:	2000      	movs	r0, #0
 8047164:	e7fc      	b.n	8047160 <ADC_Disable+0x84>

08047166 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8047166:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 804716a:	2b01      	cmp	r3, #1
 804716c:	d01a      	beq.n	80471a4 <HAL_ADC_Stop+0x3e>
{
 804716e:	b510      	push	{r4, lr}
 8047170:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8047172:	2301      	movs	r3, #1
 8047174:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8047178:	2103      	movs	r1, #3
 804717a:	f7ff fdef 	bl	8046d5c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 804717e:	b118      	cbz	r0, 8047188 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 8047180:	2300      	movs	r3, #0
 8047182:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8047186:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8047188:	4620      	mov	r0, r4
 804718a:	f7ff ffa7 	bl	80470dc <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 804718e:	2800      	cmp	r0, #0
 8047190:	d1f6      	bne.n	8047180 <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 8047192:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8047194:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8047198:	f023 0301 	bic.w	r3, r3, #1
 804719c:	f043 0301 	orr.w	r3, r3, #1
 80471a0:	65a3      	str	r3, [r4, #88]	; 0x58
 80471a2:	e7ed      	b.n	8047180 <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 80471a4:	2002      	movs	r0, #2
}
 80471a6:	4770      	bx	lr

080471a8 <HAL_ADCEx_InjectedConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80471a8:	4770      	bx	lr

080471aa <HAL_ADCEx_InjectedQueueOverflowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80471aa:	4770      	bx	lr

080471ac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80471ac:	4770      	bx	lr

080471ae <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80471ae:	4770      	bx	lr

080471b0 <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80471b0:	4770      	bx	lr
	...

080471b4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80471b4:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80471b8:	2a01      	cmp	r2, #1
 80471ba:	d07a      	beq.n	80472b2 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
{
 80471bc:	b430      	push	{r4, r5}
 80471be:	b0a6      	sub	sp, #152	; 0x98
 80471c0:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80471c2:	2201      	movs	r2, #1
 80471c4:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80471c8:	6800      	ldr	r0, [r0, #0]
 80471ca:	4a3b      	ldr	r2, [pc, #236]	; (80472b8 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 80471cc:	4290      	cmp	r0, r2
 80471ce:	d038      	beq.n	8047242 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 80471d0:	2200      	movs	r2, #0
 80471d2:	9201      	str	r2, [sp, #4]

  if (tmphadcSlave.Instance == NULL)
 80471d4:	9a01      	ldr	r2, [sp, #4]
 80471d6:	2a00      	cmp	r2, #0
 80471d8:	d037      	beq.n	804724a <HAL_ADCEx_MultiModeConfigChannel+0x96>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80471da:	6892      	ldr	r2, [r2, #8]
 80471dc:	f012 0204 	ands.w	r2, r2, #4
 80471e0:	d000      	beq.n	80471e4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
 80471e2:	2201      	movs	r2, #1
 80471e4:	6880      	ldr	r0, [r0, #8]
 80471e6:	f010 0f04 	tst.w	r0, #4
 80471ea:	d153      	bne.n	8047294 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
      && (tmphadcSlave_conversion_on_going == 0UL))
 80471ec:	2a00      	cmp	r2, #0
 80471ee:	d151      	bne.n	8047294 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80471f0:	680a      	ldr	r2, [r1, #0]
 80471f2:	2a00      	cmp	r2, #0
 80471f4:	d032      	beq.n	804725c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80471f6:	4c31      	ldr	r4, [pc, #196]	; (80472bc <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 80471f8:	68a2      	ldr	r2, [r4, #8]
 80471fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80471fe:	6848      	ldr	r0, [r1, #4]
 8047200:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 8047204:	ea40 3045 	orr.w	r0, r0, r5, lsl #13
 8047208:	4302      	orrs	r2, r0
 804720a:	60a2      	str	r2, [r4, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 804720c:	4a2a      	ldr	r2, [pc, #168]	; (80472b8 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 804720e:	6892      	ldr	r2, [r2, #8]
 8047210:	f012 0201 	ands.w	r2, r2, #1
 8047214:	d000      	beq.n	8047218 <HAL_ADCEx_MultiModeConfigChannel+0x64>
 8047216:	2201      	movs	r2, #1
 8047218:	4829      	ldr	r0, [pc, #164]	; (80472c0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 804721a:	6880      	ldr	r0, [r0, #8]
 804721c:	f010 0001 	ands.w	r0, r0, #1
 8047220:	d000      	beq.n	8047224 <HAL_ADCEx_MultiModeConfigChannel+0x70>
 8047222:	2001      	movs	r0, #1
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8047224:	4302      	orrs	r2, r0
 8047226:	d140      	bne.n	80472aa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8047228:	4c24      	ldr	r4, [pc, #144]	; (80472bc <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 804722a:	68a2      	ldr	r2, [r4, #8]
 804722c:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8047230:	f022 020f 	bic.w	r2, r2, #15
 8047234:	6808      	ldr	r0, [r1, #0]
 8047236:	6889      	ldr	r1, [r1, #8]
 8047238:	4301      	orrs	r1, r0
 804723a:	430a      	orrs	r2, r1
 804723c:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 804723e:	2000      	movs	r0, #0
 8047240:	e02d      	b.n	804729e <HAL_ADCEx_MultiModeConfigChannel+0xea>
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8047242:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8047246:	9201      	str	r2, [sp, #4]
 8047248:	e7c4      	b.n	80471d4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 804724a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 804724c:	f042 0220 	orr.w	r2, r2, #32
 8047250:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hadc);
 8047252:	2200      	movs	r2, #0
 8047254:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8047258:	2001      	movs	r0, #1
 804725a:	e023      	b.n	80472a4 <HAL_ADCEx_MultiModeConfigChannel+0xf0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 804725c:	4917      	ldr	r1, [pc, #92]	; (80472bc <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 804725e:	688a      	ldr	r2, [r1, #8]
 8047260:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8047264:	608a      	str	r2, [r1, #8]
 8047266:	4a14      	ldr	r2, [pc, #80]	; (80472b8 <HAL_ADCEx_MultiModeConfigChannel+0x104>)
 8047268:	6892      	ldr	r2, [r2, #8]
 804726a:	f012 0201 	ands.w	r2, r2, #1
 804726e:	d000      	beq.n	8047272 <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8047270:	2201      	movs	r2, #1
 8047272:	4913      	ldr	r1, [pc, #76]	; (80472c0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>)
 8047274:	6889      	ldr	r1, [r1, #8]
 8047276:	f011 0101 	ands.w	r1, r1, #1
 804727a:	d000      	beq.n	804727e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 804727c:	2101      	movs	r1, #1

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 804727e:	430a      	orrs	r2, r1
 8047280:	d115      	bne.n	80472ae <HAL_ADCEx_MultiModeConfigChannel+0xfa>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8047282:	490e      	ldr	r1, [pc, #56]	; (80472bc <HAL_ADCEx_MultiModeConfigChannel+0x108>)
 8047284:	688a      	ldr	r2, [r1, #8]
 8047286:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 804728a:	f022 020f 	bic.w	r2, r2, #15
 804728e:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8047290:	2000      	movs	r0, #0
 8047292:	e004      	b.n	804729e <HAL_ADCEx_MultiModeConfigChannel+0xea>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8047294:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8047296:	f042 0220 	orr.w	r2, r2, #32
 804729a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 804729c:	2001      	movs	r0, #1
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 804729e:	2200      	movs	r2, #0
 80472a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
}
 80472a4:	b026      	add	sp, #152	; 0x98
 80472a6:	bc30      	pop	{r4, r5}
 80472a8:	4770      	bx	lr
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80472aa:	2000      	movs	r0, #0
 80472ac:	e7f7      	b.n	804729e <HAL_ADCEx_MultiModeConfigChannel+0xea>
 80472ae:	2000      	movs	r0, #0
 80472b0:	e7f5      	b.n	804729e <HAL_ADCEx_MultiModeConfigChannel+0xea>
  __HAL_LOCK(hadc);
 80472b2:	2002      	movs	r0, #2
}
 80472b4:	4770      	bx	lr
 80472b6:	bf00      	nop
 80472b8:	42028000 	.word	0x42028000
 80472bc:	42028300 	.word	0x42028300
 80472c0:	42028100 	.word	0x42028100

080472c4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80472c4:	4a07      	ldr	r2, [pc, #28]	; (80472e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80472c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80472c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80472cc:	041b      	lsls	r3, r3, #16
 80472ce:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80472d0:	0200      	lsls	r0, r0, #8
 80472d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80472d6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80472d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80472dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80472e0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80472e2:	4770      	bx	lr
 80472e4:	e000ed00 	.word	0xe000ed00

080472e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80472e8:	b430      	push	{r4, r5}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80472ea:	4b17      	ldr	r3, [pc, #92]	; (8047348 <HAL_NVIC_SetPriority+0x60>)
 80472ec:	68db      	ldr	r3, [r3, #12]
 80472ee:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80472f2:	f1c3 0407 	rsb	r4, r3, #7
 80472f6:	2c03      	cmp	r4, #3
 80472f8:	bf28      	it	cs
 80472fa:	2403      	movcs	r4, #3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80472fc:	1cdd      	adds	r5, r3, #3
 80472fe:	2d06      	cmp	r5, #6
 8047300:	d918      	bls.n	8047334 <HAL_NVIC_SetPriority+0x4c>
 8047302:	3b04      	subs	r3, #4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8047304:	f04f 35ff 	mov.w	r5, #4294967295
 8047308:	fa05 f404 	lsl.w	r4, r5, r4
 804730c:	ea21 0104 	bic.w	r1, r1, r4
 8047310:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8047312:	fa05 f303 	lsl.w	r3, r5, r3
 8047316:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804731a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 804731c:	2800      	cmp	r0, #0
 804731e:	db0b      	blt.n	8047338 <HAL_NVIC_SetPriority+0x50>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8047320:	0149      	lsls	r1, r1, #5
 8047322:	b2c9      	uxtb	r1, r1
 8047324:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8047328:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 804732c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8047330:	bc30      	pop	{r4, r5}
 8047332:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8047334:	2300      	movs	r3, #0
 8047336:	e7e5      	b.n	8047304 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8047338:	f000 000f 	and.w	r0, r0, #15
 804733c:	0149      	lsls	r1, r1, #5
 804733e:	b2c9      	uxtb	r1, r1
 8047340:	4b02      	ldr	r3, [pc, #8]	; (804734c <HAL_NVIC_SetPriority+0x64>)
 8047342:	5419      	strb	r1, [r3, r0]
 8047344:	e7f4      	b.n	8047330 <HAL_NVIC_SetPriority+0x48>
 8047346:	bf00      	nop
 8047348:	e000ed00 	.word	0xe000ed00
 804734c:	e000ed14 	.word	0xe000ed14

08047350 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8047350:	2800      	cmp	r0, #0
 8047352:	db07      	blt.n	8047364 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8047354:	f000 021f 	and.w	r2, r0, #31
 8047358:	0940      	lsrs	r0, r0, #5
 804735a:	2301      	movs	r3, #1
 804735c:	4093      	lsls	r3, r2
 804735e:	4a02      	ldr	r2, [pc, #8]	; (8047368 <HAL_NVIC_EnableIRQ+0x18>)
 8047360:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8047364:	4770      	bx	lr
 8047366:	bf00      	nop
 8047368:	e000e100 	.word	0xe000e100

0804736c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 804736c:	2800      	cmp	r0, #0
 804736e:	db0c      	blt.n	804738a <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8047370:	f000 021f 	and.w	r2, r0, #31
 8047374:	0940      	lsrs	r0, r0, #5
 8047376:	2301      	movs	r3, #1
 8047378:	4093      	lsls	r3, r2
 804737a:	3020      	adds	r0, #32
 804737c:	4a03      	ldr	r2, [pc, #12]	; (804738c <HAL_NVIC_DisableIRQ+0x20>)
 804737e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8047382:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8047386:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 804738a:	4770      	bx	lr
 804738c:	e000e100 	.word	0xe000e100

08047390 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8047390:	b470      	push	{r4, r5, r6}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8047392:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8047394:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8047396:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8047398:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 804739a:	b114      	cbz	r4, 80473a2 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 804739c:	6e04      	ldr	r4, [r0, #96]	; 0x60
 804739e:	6e45      	ldr	r5, [r0, #100]	; 0x64
 80473a0:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80473a2:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80473a4:	f004 051c 	and.w	r5, r4, #28
 80473a8:	6c86      	ldr	r6, [r0, #72]	; 0x48
 80473aa:	2401      	movs	r4, #1
 80473ac:	40ac      	lsls	r4, r5
 80473ae:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80473b0:	6804      	ldr	r4, [r0, #0]
 80473b2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80473b4:	6883      	ldr	r3, [r0, #8]
 80473b6:	2b10      	cmp	r3, #16
 80473b8:	d005      	beq.n	80473c6 <DMA_SetConfig+0x36>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80473ba:	6803      	ldr	r3, [r0, #0]
 80473bc:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
 80473be:	6803      	ldr	r3, [r0, #0]
 80473c0:	60da      	str	r2, [r3, #12]
  }
}
 80473c2:	bc70      	pop	{r4, r5, r6}
 80473c4:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80473c6:	6803      	ldr	r3, [r0, #0]
 80473c8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = SrcAddress;
 80473ca:	6803      	ldr	r3, [r0, #0]
 80473cc:	60d9      	str	r1, [r3, #12]
 80473ce:	e7f8      	b.n	80473c2 <DMA_SetConfig+0x32>

080473d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80473d0:	6803      	ldr	r3, [r0, #0]
 80473d2:	4a10      	ldr	r2, [pc, #64]	; (8047414 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 80473d4:	4293      	cmp	r3, r2
 80473d6:	d815      	bhi.n	8047404 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80473d8:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80473da:	f022 0203 	bic.w	r2, r2, #3
 80473de:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80473e2:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 80473e6:	6502      	str	r2, [r0, #80]	; 0x50
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80473e8:	b2db      	uxtb	r3, r3
 80473ea:	3b08      	subs	r3, #8
 80473ec:	4a0a      	ldr	r2, [pc, #40]	; (8047418 <DMA_CalcDMAMUXChannelBaseAndMask+0x48>)
 80473ee:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80473f2:	4a0a      	ldr	r2, [pc, #40]	; (804741c <DMA_CalcDMAMUXChannelBaseAndMask+0x4c>)
 80473f4:	6542      	str	r2, [r0, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80473f6:	f3c3 1304 	ubfx	r3, r3, #4, #5
 80473fa:	2201      	movs	r2, #1
 80473fc:	fa02 f303 	lsl.w	r3, r2, r3
 8047400:	6583      	str	r3, [r0, #88]	; 0x58
}
 8047402:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8047404:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8047406:	f022 0103 	bic.w	r1, r2, #3
 804740a:	4a05      	ldr	r2, [pc, #20]	; (8047420 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 804740c:	440a      	add	r2, r1
 804740e:	6502      	str	r2, [r0, #80]	; 0x50
 8047410:	e7ea      	b.n	80473e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x18>
 8047412:	bf00      	nop
 8047414:	40020407 	.word	0x40020407
 8047418:	cccccccd 	.word	0xcccccccd
 804741c:	40020880 	.word	0x40020880
 8047420:	40020820 	.word	0x40020820

08047424 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8047424:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8047426:	4a07      	ldr	r2, [pc, #28]	; (8047444 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 8047428:	441a      	add	r2, r3
 804742a:	0092      	lsls	r2, r2, #2
 804742c:	65c2      	str	r2, [r0, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 804742e:	4a06      	ldr	r2, [pc, #24]	; (8047448 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8047430:	6602      	str	r2, [r0, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8047432:	3b01      	subs	r3, #1
 8047434:	f003 0303 	and.w	r3, r3, #3
 8047438:	2201      	movs	r2, #1
 804743a:	fa02 f303 	lsl.w	r3, r2, r3
 804743e:	6643      	str	r3, [r0, #100]	; 0x64
}
 8047440:	4770      	bx	lr
 8047442:	bf00      	nop
 8047444:	1000823f 	.word	0x1000823f
 8047448:	40020940 	.word	0x40020940

0804744c <HAL_DMA_Init>:
  if(hdma == NULL)
 804744c:	2800      	cmp	r0, #0
 804744e:	d05b      	beq.n	8047508 <HAL_DMA_Init+0xbc>
{
 8047450:	b510      	push	{r4, lr}
 8047452:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8047454:	6801      	ldr	r1, [r0, #0]
 8047456:	4b2d      	ldr	r3, [pc, #180]	; (804750c <HAL_DMA_Init+0xc0>)
 8047458:	4299      	cmp	r1, r3
 804745a:	d83d      	bhi.n	80474d8 <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 804745c:	4b2c      	ldr	r3, [pc, #176]	; (8047510 <HAL_DMA_Init+0xc4>)
 804745e:	440b      	add	r3, r1
 8047460:	4a2c      	ldr	r2, [pc, #176]	; (8047514 <HAL_DMA_Init+0xc8>)
 8047462:	fba2 2303 	umull	r2, r3, r2, r3
 8047466:	091b      	lsrs	r3, r3, #4
 8047468:	009b      	lsls	r3, r3, #2
 804746a:	64c3      	str	r3, [r0, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 804746c:	4b2a      	ldr	r3, [pc, #168]	; (8047518 <HAL_DMA_Init+0xcc>)
 804746e:	6483      	str	r3, [r0, #72]	; 0x48
  hdma->State = HAL_DMA_STATE_BUSY;
 8047470:	2302      	movs	r3, #2
 8047472:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 8047476:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8047478:	f422 32ff 	bic.w	r2, r2, #130560	; 0x1fe00
 804747c:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
  tmp |=  hdma->Init.Direction        |
 8047480:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8047482:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 8047484:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8047486:	6920      	ldr	r0, [r4, #16]
 8047488:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 804748a:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 804748c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 804748e:	69a0      	ldr	r0, [r4, #24]
 8047490:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8047492:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8047494:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8047496:	6a20      	ldr	r0, [r4, #32]
 8047498:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 804749a:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 804749c:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 804749e:	4620      	mov	r0, r4
 80474a0:	f7ff ff96 	bl	80473d0 <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80474a4:	68a3      	ldr	r3, [r4, #8]
 80474a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80474aa:	d020      	beq.n	80474ee <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80474ac:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80474ae:	7922      	ldrb	r2, [r4, #4]
 80474b0:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80474b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80474b4:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80474b6:	605a      	str	r2, [r3, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80474b8:	6863      	ldr	r3, [r4, #4]
 80474ba:	3b01      	subs	r3, #1
 80474bc:	2b03      	cmp	r3, #3
 80474be:	d919      	bls.n	80474f4 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 80474c0:	2300      	movs	r3, #0
 80474c2:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80474c4:	6623      	str	r3, [r4, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80474c6:	6663      	str	r3, [r4, #100]	; 0x64
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80474c8:	2000      	movs	r0, #0
 80474ca:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_READY;
 80474cc:	2301      	movs	r3, #1
 80474ce:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 80474d2:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80474d6:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80474d8:	4b10      	ldr	r3, [pc, #64]	; (804751c <HAL_DMA_Init+0xd0>)
 80474da:	440b      	add	r3, r1
 80474dc:	4a0d      	ldr	r2, [pc, #52]	; (8047514 <HAL_DMA_Init+0xc8>)
 80474de:	fba2 2303 	umull	r2, r3, r2, r3
 80474e2:	091b      	lsrs	r3, r3, #4
 80474e4:	009b      	lsls	r3, r3, #2
 80474e6:	64c3      	str	r3, [r0, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 80474e8:	4b0d      	ldr	r3, [pc, #52]	; (8047520 <HAL_DMA_Init+0xd4>)
 80474ea:	6483      	str	r3, [r0, #72]	; 0x48
 80474ec:	e7c0      	b.n	8047470 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80474ee:	2300      	movs	r3, #0
 80474f0:	6063      	str	r3, [r4, #4]
 80474f2:	e7db      	b.n	80474ac <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80474f4:	4620      	mov	r0, r4
 80474f6:	f7ff ff95 	bl	8047424 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80474fa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80474fc:	2200      	movs	r2, #0
 80474fe:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8047500:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8047502:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8047504:	605a      	str	r2, [r3, #4]
 8047506:	e7df      	b.n	80474c8 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8047508:	2001      	movs	r0, #1
}
 804750a:	4770      	bx	lr
 804750c:	40020407 	.word	0x40020407
 8047510:	bffdfff8 	.word	0xbffdfff8
 8047514:	cccccccd 	.word	0xcccccccd
 8047518:	40020000 	.word	0x40020000
 804751c:	bffdfbf8 	.word	0xbffdfbf8
 8047520:	40020400 	.word	0x40020400

08047524 <HAL_DMA_Start_IT>:
{
 8047524:	b538      	push	{r3, r4, r5, lr}
 8047526:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8047528:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 804752c:	2801      	cmp	r0, #1
 804752e:	d041      	beq.n	80475b4 <HAL_DMA_Start_IT+0x90>
 8047530:	2001      	movs	r0, #1
 8047532:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8047536:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 804753a:	b2c0      	uxtb	r0, r0
 804753c:	2801      	cmp	r0, #1
 804753e:	d004      	beq.n	804754a <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8047540:	2300      	movs	r3, #0
 8047542:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8047546:	2002      	movs	r0, #2
}
 8047548:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 804754a:	2002      	movs	r0, #2
 804754c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8047550:	2000      	movs	r0, #0
 8047552:	6460      	str	r0, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8047554:	6825      	ldr	r5, [r4, #0]
 8047556:	6828      	ldr	r0, [r5, #0]
 8047558:	f020 0001 	bic.w	r0, r0, #1
 804755c:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 804755e:	4620      	mov	r0, r4
 8047560:	f7ff ff16 	bl	8047390 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8047564:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8047566:	b1d3      	cbz	r3, 804759e <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8047568:	6822      	ldr	r2, [r4, #0]
 804756a:	6813      	ldr	r3, [r2, #0]
 804756c:	f043 030e 	orr.w	r3, r3, #14
 8047570:	6013      	str	r3, [r2, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8047572:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8047574:	681a      	ldr	r2, [r3, #0]
 8047576:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 804757a:	d003      	beq.n	8047584 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 804757c:	681a      	ldr	r2, [r3, #0]
 804757e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8047582:	601a      	str	r2, [r3, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8047584:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8047586:	b11b      	cbz	r3, 8047590 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8047588:	681a      	ldr	r2, [r3, #0]
 804758a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 804758e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8047590:	6822      	ldr	r2, [r4, #0]
 8047592:	6813      	ldr	r3, [r2, #0]
 8047594:	f043 0301 	orr.w	r3, r3, #1
 8047598:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 804759a:	2000      	movs	r0, #0
 804759c:	e7d4      	b.n	8047548 <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 804759e:	6822      	ldr	r2, [r4, #0]
 80475a0:	6813      	ldr	r3, [r2, #0]
 80475a2:	f023 0304 	bic.w	r3, r3, #4
 80475a6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80475a8:	6822      	ldr	r2, [r4, #0]
 80475aa:	6813      	ldr	r3, [r2, #0]
 80475ac:	f043 030a 	orr.w	r3, r3, #10
 80475b0:	6013      	str	r3, [r2, #0]
 80475b2:	e7de      	b.n	8047572 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 80475b4:	2002      	movs	r0, #2
 80475b6:	e7c7      	b.n	8047548 <HAL_DMA_Start_IT+0x24>

080475b8 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80475b8:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80475bc:	b2db      	uxtb	r3, r3
 80475be:	2b02      	cmp	r3, #2
 80475c0:	d006      	beq.n	80475d0 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80475c2:	2304      	movs	r3, #4
 80475c4:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(hdma);
 80475c6:	2300      	movs	r3, #0
 80475c8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 80475cc:	2001      	movs	r0, #1
 80475ce:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80475d0:	6802      	ldr	r2, [r0, #0]
 80475d2:	6813      	ldr	r3, [r2, #0]
 80475d4:	f023 030e 	bic.w	r3, r3, #14
 80475d8:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80475da:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80475dc:	6813      	ldr	r3, [r2, #0]
 80475de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80475e2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80475e4:	6802      	ldr	r2, [r0, #0]
 80475e6:	6813      	ldr	r3, [r2, #0]
 80475e8:	f023 0301 	bic.w	r3, r3, #1
 80475ec:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80475ee:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80475f0:	f003 021c 	and.w	r2, r3, #28
 80475f4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80475f6:	2301      	movs	r3, #1
 80475f8:	4093      	lsls	r3, r2
 80475fa:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80475fc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80475fe:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8047600:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8047602:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8047604:	b133      	cbz	r3, 8047614 <HAL_DMA_Abort+0x5c>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8047606:	681a      	ldr	r2, [r3, #0]
 8047608:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 804760c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 804760e:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8047610:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8047612:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8047614:	2301      	movs	r3, #1
 8047616:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 804761a:	2300      	movs	r3, #0
 804761c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    return status;
 8047620:	4618      	mov	r0, r3
}
 8047622:	4770      	bx	lr

08047624 <HAL_DMA_Abort_IT>:
{
 8047624:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8047626:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 804762a:	b2db      	uxtb	r3, r3
 804762c:	2b02      	cmp	r3, #2
 804762e:	d003      	beq.n	8047638 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8047630:	2304      	movs	r3, #4
 8047632:	6443      	str	r3, [r0, #68]	; 0x44
    status = HAL_ERROR;
 8047634:	2001      	movs	r0, #1
}
 8047636:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8047638:	6802      	ldr	r2, [r0, #0]
 804763a:	6813      	ldr	r3, [r2, #0]
 804763c:	f023 030e 	bic.w	r3, r3, #14
 8047640:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8047642:	6802      	ldr	r2, [r0, #0]
 8047644:	6813      	ldr	r3, [r2, #0]
 8047646:	f023 0301 	bic.w	r3, r3, #1
 804764a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 804764c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 804764e:	6813      	ldr	r3, [r2, #0]
 8047650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8047654:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8047656:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8047658:	f003 021c 	and.w	r2, r3, #28
 804765c:	6c81      	ldr	r1, [r0, #72]	; 0x48
 804765e:	2301      	movs	r3, #1
 8047660:	4093      	lsls	r3, r2
 8047662:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8047664:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8047666:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8047668:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 804766a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 804766c:	b133      	cbz	r3, 804767c <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 804766e:	681a      	ldr	r2, [r3, #0]
 8047670:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8047674:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8047676:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8047678:	6e42      	ldr	r2, [r0, #100]	; 0x64
 804767a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 804767c:	2301      	movs	r3, #1
 804767e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8047682:	2300      	movs	r3, #0
 8047684:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8047688:	6c03      	ldr	r3, [r0, #64]	; 0x40
 804768a:	b113      	cbz	r3, 8047692 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 804768c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 804768e:	2000      	movs	r0, #0
 8047690:	e7d1      	b.n	8047636 <HAL_DMA_Abort_IT+0x12>
 8047692:	2000      	movs	r0, #0
 8047694:	e7cf      	b.n	8047636 <HAL_DMA_Abort_IT+0x12>

08047696 <HAL_DMA_IRQHandler>:
{
 8047696:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8047698:	6c86      	ldr	r6, [r0, #72]	; 0x48
 804769a:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 804769c:	6804      	ldr	r4, [r0, #0]
 804769e:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80476a0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80476a2:	f003 031c 	and.w	r3, r3, #28
 80476a6:	2204      	movs	r2, #4
 80476a8:	409a      	lsls	r2, r3
 80476aa:	420a      	tst	r2, r1
 80476ac:	d02a      	beq.n	8047704 <HAL_DMA_IRQHandler+0x6e>
 80476ae:	f015 0f04 	tst.w	r5, #4
 80476b2:	d027      	beq.n	8047704 <HAL_DMA_IRQHandler+0x6e>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80476b4:	6823      	ldr	r3, [r4, #0]
 80476b6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 80476ba:	d00f      	beq.n	80476dc <HAL_DMA_IRQHandler+0x46>
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80476bc:	6072      	str	r2, [r6, #4]
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80476be:	6803      	ldr	r3, [r0, #0]
 80476c0:	681b      	ldr	r3, [r3, #0]
 80476c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80476c6:	d104      	bne.n	80476d2 <HAL_DMA_IRQHandler+0x3c>
        if(hdma->XferHalfCpltCallback != NULL)
 80476c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80476ca:	2b00      	cmp	r3, #0
 80476cc:	d069      	beq.n	80477a2 <HAL_DMA_IRQHandler+0x10c>
          hdma->XferHalfCpltCallback(hdma);
 80476ce:	4798      	blx	r3
 80476d0:	e067      	b.n	80477a2 <HAL_DMA_IRQHandler+0x10c>
        if(hdma->XferM1HalfCpltCallback != NULL)
 80476d2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80476d4:	2b00      	cmp	r3, #0
 80476d6:	d064      	beq.n	80477a2 <HAL_DMA_IRQHandler+0x10c>
          hdma->XferM1HalfCpltCallback(hdma);
 80476d8:	4798      	blx	r3
 80476da:	e062      	b.n	80477a2 <HAL_DMA_IRQHandler+0x10c>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80476dc:	6823      	ldr	r3, [r4, #0]
 80476de:	f013 0f20 	tst.w	r3, #32
 80476e2:	d103      	bne.n	80476ec <HAL_DMA_IRQHandler+0x56>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80476e4:	6823      	ldr	r3, [r4, #0]
 80476e6:	f023 0304 	bic.w	r3, r3, #4
 80476ea:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80476ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80476ee:	f003 021c 	and.w	r2, r3, #28
 80476f2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80476f4:	2304      	movs	r3, #4
 80476f6:	4093      	lsls	r3, r2
 80476f8:	604b      	str	r3, [r1, #4]
      if(hdma->XferHalfCpltCallback != NULL)
 80476fa:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80476fc:	2b00      	cmp	r3, #0
 80476fe:	d050      	beq.n	80477a2 <HAL_DMA_IRQHandler+0x10c>
        hdma->XferHalfCpltCallback(hdma);
 8047700:	4798      	blx	r3
 8047702:	e04e      	b.n	80477a2 <HAL_DMA_IRQHandler+0x10c>
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8047704:	2202      	movs	r2, #2
 8047706:	409a      	lsls	r2, r3
 8047708:	420a      	tst	r2, r1
 804770a:	d02d      	beq.n	8047768 <HAL_DMA_IRQHandler+0xd2>
 804770c:	f015 0f02 	tst.w	r5, #2
 8047710:	d02a      	beq.n	8047768 <HAL_DMA_IRQHandler+0xd2>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8047712:	6823      	ldr	r3, [r4, #0]
 8047714:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8047718:	d00d      	beq.n	8047736 <HAL_DMA_IRQHandler+0xa0>
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 804771a:	6823      	ldr	r3, [r4, #0]
 804771c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8047720:	d104      	bne.n	804772c <HAL_DMA_IRQHandler+0x96>
        if(hdma->XferM1CpltCallback != NULL)
 8047722:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8047724:	2b00      	cmp	r3, #0
 8047726:	d03c      	beq.n	80477a2 <HAL_DMA_IRQHandler+0x10c>
          hdma->XferM1CpltCallback(hdma);
 8047728:	4798      	blx	r3
 804772a:	e03a      	b.n	80477a2 <HAL_DMA_IRQHandler+0x10c>
        if(hdma->XferCpltCallback != NULL)
 804772c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 804772e:	2b00      	cmp	r3, #0
 8047730:	d037      	beq.n	80477a2 <HAL_DMA_IRQHandler+0x10c>
          hdma->XferCpltCallback(hdma);
 8047732:	4798      	blx	r3
 8047734:	e035      	b.n	80477a2 <HAL_DMA_IRQHandler+0x10c>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8047736:	6823      	ldr	r3, [r4, #0]
 8047738:	f013 0f20 	tst.w	r3, #32
 804773c:	d106      	bne.n	804774c <HAL_DMA_IRQHandler+0xb6>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 804773e:	6823      	ldr	r3, [r4, #0]
 8047740:	f023 030a 	bic.w	r3, r3, #10
 8047744:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8047746:	2301      	movs	r3, #1
 8047748:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 804774c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 804774e:	f003 021c 	and.w	r2, r3, #28
 8047752:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8047754:	2302      	movs	r3, #2
 8047756:	4093      	lsls	r3, r2
 8047758:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 804775a:	2300      	movs	r3, #0
 804775c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if(hdma->XferCpltCallback != NULL)
 8047760:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8047762:	b1f3      	cbz	r3, 80477a2 <HAL_DMA_IRQHandler+0x10c>
        hdma->XferCpltCallback(hdma);
 8047764:	4798      	blx	r3
 8047766:	e01c      	b.n	80477a2 <HAL_DMA_IRQHandler+0x10c>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8047768:	2208      	movs	r2, #8
 804776a:	fa02 f303 	lsl.w	r3, r2, r3
 804776e:	420b      	tst	r3, r1
 8047770:	d017      	beq.n	80477a2 <HAL_DMA_IRQHandler+0x10c>
 8047772:	f015 0f08 	tst.w	r5, #8
 8047776:	d014      	beq.n	80477a2 <HAL_DMA_IRQHandler+0x10c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8047778:	6823      	ldr	r3, [r4, #0]
 804777a:	f023 030e 	bic.w	r3, r3, #14
 804777e:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8047780:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8047782:	f003 031c 	and.w	r3, r3, #28
 8047786:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8047788:	2201      	movs	r2, #1
 804778a:	fa02 f303 	lsl.w	r3, r2, r3
 804778e:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8047790:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->State = HAL_DMA_STATE_READY;
 8047792:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8047796:	2300      	movs	r3, #0
 8047798:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 804779c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 804779e:	b103      	cbz	r3, 80477a2 <HAL_DMA_IRQHandler+0x10c>
      hdma->XferErrorCallback(hdma);
 80477a0:	4798      	blx	r3
}
 80477a2:	bd70      	pop	{r4, r5, r6, pc}

080477a4 <HAL_DMA_GetState>:
  return hdma->State;
 80477a4:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 80477a8:	4770      	bx	lr

080477aa <HAL_DMA_ConfigChannelAttributes>:
  if(hdma == NULL)
 80477aa:	b178      	cbz	r0, 80477cc <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 80477ac:	6803      	ldr	r3, [r0, #0]
 80477ae:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80477b0:	f011 0f10 	tst.w	r1, #16
 80477b4:	d004      	beq.n	80477c0 <HAL_DMA_ConfigChannelAttributes+0x16>
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80477b6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80477ba:	d004      	beq.n	80477c6 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 80477bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 80477c0:	601a      	str	r2, [r3, #0]
  return status;
 80477c2:	2000      	movs	r0, #0
 80477c4:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80477c6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80477ca:	e7f9      	b.n	80477c0 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 80477cc:	2001      	movs	r0, #1
}
 80477ce:	4770      	bx	lr

080477d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80477d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0U;
 80477d2:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80477d4:	e039      	b.n	804784a <HAL_GPIO_Init+0x7a>
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        temp = EXTI->EXTICR[position >> 2U];
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80477d6:	2406      	movs	r4, #6
 80477d8:	e000      	b.n	80477dc <HAL_GPIO_Init+0xc>
 80477da:	2400      	movs	r4, #0
 80477dc:	40b4      	lsls	r4, r6
 80477de:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = temp;
 80477e0:	4e5f      	ldr	r6, [pc, #380]	; (8047960 <HAL_GPIO_Init+0x190>)
 80477e2:	3518      	adds	r5, #24
 80477e4:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80477e8:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
        temp &= ~(iocurrent);
 80477ec:	43d4      	mvns	r4, r2
 80477ee:	ea25 0602 	bic.w	r6, r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80477f2:	684f      	ldr	r7, [r1, #4]
 80477f4:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 80477f8:	d001      	beq.n	80477fe <HAL_GPIO_Init+0x2e>
        {
          temp |= iocurrent;
 80477fa:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR1 = temp;
 80477fe:	4d58      	ldr	r5, [pc, #352]	; (8047960 <HAL_GPIO_Init+0x190>)
 8047800:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80

        temp = EXTI->EMR1;
 8047804:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
        temp &= ~(iocurrent);
 8047808:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 804780c:	684f      	ldr	r7, [r1, #4]
 804780e:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8047812:	d001      	beq.n	8047818 <HAL_GPIO_Init+0x48>
        {
          temp |= iocurrent;
 8047814:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8047818:	4d51      	ldr	r5, [pc, #324]	; (8047960 <HAL_GPIO_Init+0x190>)
 804781a:	f8c5 6084 	str.w	r6, [r5, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 804781e:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8047820:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8047824:	684f      	ldr	r7, [r1, #4]
 8047826:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 804782a:	d001      	beq.n	8047830 <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 804782c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8047830:	4d4b      	ldr	r5, [pc, #300]	; (8047960 <HAL_GPIO_Init+0x190>)
 8047832:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8047834:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8047836:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8047838:	684e      	ldr	r6, [r1, #4]
 804783a:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 804783e:	d001      	beq.n	8047844 <HAL_GPIO_Init+0x74>
        {
          temp |= iocurrent;
 8047840:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8047844:	4a46      	ldr	r2, [pc, #280]	; (8047960 <HAL_GPIO_Init+0x190>)
 8047846:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8047848:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 804784a:	680a      	ldr	r2, [r1, #0]
 804784c:	fa32 f403 	lsrs.w	r4, r2, r3
 8047850:	f000 8085 	beq.w	804795e <HAL_GPIO_Init+0x18e>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8047854:	2401      	movs	r4, #1
 8047856:	409c      	lsls	r4, r3
    if(iocurrent != 0U)
 8047858:	4022      	ands	r2, r4
 804785a:	d0f5      	beq.n	8047848 <HAL_GPIO_Init+0x78>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 804785c:	684d      	ldr	r5, [r1, #4]
 804785e:	1e6e      	subs	r6, r5, #1
 8047860:	2e01      	cmp	r6, #1
 8047862:	d903      	bls.n	804786c <HAL_GPIO_Init+0x9c>
 8047864:	2d11      	cmp	r5, #17
 8047866:	d001      	beq.n	804786c <HAL_GPIO_Init+0x9c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8047868:	2d12      	cmp	r5, #18
 804786a:	d112      	bne.n	8047892 <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR;
 804786c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 804786e:	005f      	lsls	r7, r3, #1
 8047870:	2503      	movs	r5, #3
 8047872:	40bd      	lsls	r5, r7
 8047874:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8047878:	68cd      	ldr	r5, [r1, #12]
 804787a:	40bd      	lsls	r5, r7
 804787c:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 804787e:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8047880:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8047882:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8047886:	684d      	ldr	r5, [r1, #4]
 8047888:	f3c5 1400 	ubfx	r4, r5, #4, #1
 804788c:	409c      	lsls	r4, r3
 804788e:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8047890:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8047892:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8047894:	005e      	lsls	r6, r3, #1
 8047896:	2503      	movs	r5, #3
 8047898:	40b5      	lsls	r5, r6
 804789a:	43ec      	mvns	r4, r5
 804789c:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80478a0:	688d      	ldr	r5, [r1, #8]
 80478a2:	40b5      	lsls	r5, r6
 80478a4:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80478a6:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80478a8:	684d      	ldr	r5, [r1, #4]
 80478aa:	2d02      	cmp	r5, #2
 80478ac:	d001      	beq.n	80478b2 <HAL_GPIO_Init+0xe2>
 80478ae:	2d12      	cmp	r5, #18
 80478b0:	d113      	bne.n	80478da <HAL_GPIO_Init+0x10a>
        temp = GPIOx->AFR[position >> 3U];
 80478b2:	08df      	lsrs	r7, r3, #3
 80478b4:	3708      	adds	r7, #8
 80478b6:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80478ba:	f003 0507 	and.w	r5, r3, #7
 80478be:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 80478c2:	250f      	movs	r5, #15
 80478c4:	fa05 f50c 	lsl.w	r5, r5, ip
 80478c8:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80478cc:	690d      	ldr	r5, [r1, #16]
 80478ce:	fa05 f50c 	lsl.w	r5, r5, ip
 80478d2:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80478d6:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 80478da:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80478dc:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80478de:	684c      	ldr	r4, [r1, #4]
 80478e0:	f004 0403 	and.w	r4, r4, #3
 80478e4:	40b4      	lsls	r4, r6
 80478e6:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 80478e8:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80478ea:	684c      	ldr	r4, [r1, #4]
 80478ec:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 80478f0:	d0aa      	beq.n	8047848 <HAL_GPIO_Init+0x78>
        temp = EXTI->EXTICR[position >> 2U];
 80478f2:	089d      	lsrs	r5, r3, #2
 80478f4:	f105 0618 	add.w	r6, r5, #24
 80478f8:	4c19      	ldr	r4, [pc, #100]	; (8047960 <HAL_GPIO_Init+0x190>)
 80478fa:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80478fe:	f003 0403 	and.w	r4, r3, #3
 8047902:	00e6      	lsls	r6, r4, #3
 8047904:	240f      	movs	r4, #15
 8047906:	40b4      	lsls	r4, r6
 8047908:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 804790c:	4c15      	ldr	r4, [pc, #84]	; (8047964 <HAL_GPIO_Init+0x194>)
 804790e:	42a0      	cmp	r0, r4
 8047910:	f43f af63 	beq.w	80477da <HAL_GPIO_Init+0xa>
 8047914:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8047918:	42a0      	cmp	r0, r4
 804791a:	d016      	beq.n	804794a <HAL_GPIO_Init+0x17a>
 804791c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8047920:	42a0      	cmp	r0, r4
 8047922:	d014      	beq.n	804794e <HAL_GPIO_Init+0x17e>
 8047924:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8047928:	42a0      	cmp	r0, r4
 804792a:	d012      	beq.n	8047952 <HAL_GPIO_Init+0x182>
 804792c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8047930:	42a0      	cmp	r0, r4
 8047932:	d010      	beq.n	8047956 <HAL_GPIO_Init+0x186>
 8047934:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8047938:	42a0      	cmp	r0, r4
 804793a:	d00e      	beq.n	804795a <HAL_GPIO_Init+0x18a>
 804793c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8047940:	42a0      	cmp	r0, r4
 8047942:	f43f af48 	beq.w	80477d6 <HAL_GPIO_Init+0x6>
 8047946:	2407      	movs	r4, #7
 8047948:	e748      	b.n	80477dc <HAL_GPIO_Init+0xc>
 804794a:	2401      	movs	r4, #1
 804794c:	e746      	b.n	80477dc <HAL_GPIO_Init+0xc>
 804794e:	2402      	movs	r4, #2
 8047950:	e744      	b.n	80477dc <HAL_GPIO_Init+0xc>
 8047952:	2403      	movs	r4, #3
 8047954:	e742      	b.n	80477dc <HAL_GPIO_Init+0xc>
 8047956:	2404      	movs	r4, #4
 8047958:	e740      	b.n	80477dc <HAL_GPIO_Init+0xc>
 804795a:	2405      	movs	r4, #5
 804795c:	e73e      	b.n	80477dc <HAL_GPIO_Init+0xc>
  }
}
 804795e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8047960:	4002f400 	.word	0x4002f400
 8047964:	42020000 	.word	0x42020000

08047968 <HAL_GPIO_DeInit>:
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0U;
 8047968:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 804796a:	e087      	b.n	8047a7c <HAL_GPIO_DeInit+0x114>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      temp = EXTI->EXTICR[position >> 2U];
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 804796c:	2606      	movs	r6, #6
 804796e:	e000      	b.n	8047972 <HAL_GPIO_DeInit+0xa>
 8047970:	2600      	movs	r6, #0
 8047972:	fa06 f404 	lsl.w	r4, r6, r4
 8047976:	42ac      	cmp	r4, r5
 8047978:	d060      	beq.n	8047a3c <HAL_GPIO_DeInit+0xd4>
        EXTI->EXTICR[position >> 2U] &= ~temp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 804797a:	6805      	ldr	r5, [r0, #0]
 804797c:	005c      	lsls	r4, r3, #1
 804797e:	2603      	movs	r6, #3
 8047980:	fa06 f404 	lsl.w	r4, r6, r4
 8047984:	4325      	orrs	r5, r4
 8047986:	6005      	str	r5, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8047988:	fa23 f506 	lsr.w	r5, r3, r6
 804798c:	3508      	adds	r5, #8
 804798e:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8047992:	f003 0707 	and.w	r7, r3, #7
 8047996:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 804799a:	270f      	movs	r7, #15
 804799c:	fa07 f70c 	lsl.w	r7, r7, ip
 80479a0:	ea26 0607 	bic.w	r6, r6, r7
 80479a4:	f840 6025 	str.w	r6, [r0, r5, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80479a8:	6885      	ldr	r5, [r0, #8]
 80479aa:	ea25 0504 	bic.w	r5, r5, r4
 80479ae:	6085      	str	r5, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80479b0:	6845      	ldr	r5, [r0, #4]
 80479b2:	ea25 0202 	bic.w	r2, r5, r2
 80479b6:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80479b8:	68c2      	ldr	r2, [r0, #12]
 80479ba:	ea22 0404 	bic.w	r4, r2, r4
 80479be:	60c4      	str	r4, [r0, #12]
    }

    position++;
 80479c0:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 80479c2:	fa31 f203 	lsrs.w	r2, r1, r3
 80479c6:	d057      	beq.n	8047a78 <HAL_GPIO_DeInit+0x110>
    iocurrent = (GPIO_Pin) & (1UL << position);
 80479c8:	2201      	movs	r2, #1
 80479ca:	409a      	lsls	r2, r3
    if (iocurrent != 0U)
 80479cc:	ea12 0c01 	ands.w	ip, r2, r1
 80479d0:	d0f6      	beq.n	80479c0 <HAL_GPIO_DeInit+0x58>
      temp = EXTI->EXTICR[position >> 2U];
 80479d2:	089f      	lsrs	r7, r3, #2
 80479d4:	f107 0518 	add.w	r5, r7, #24
 80479d8:	4c2e      	ldr	r4, [pc, #184]	; (8047a94 <HAL_GPIO_DeInit+0x12c>)
 80479da:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 80479de:	f003 0403 	and.w	r4, r3, #3
 80479e2:	00e4      	lsls	r4, r4, #3
 80479e4:	260f      	movs	r6, #15
 80479e6:	fa06 fe04 	lsl.w	lr, r6, r4
 80479ea:	ea0e 0505 	and.w	r5, lr, r5
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 80479ee:	4e2a      	ldr	r6, [pc, #168]	; (8047a98 <HAL_GPIO_DeInit+0x130>)
 80479f0:	42b0      	cmp	r0, r6
 80479f2:	d0bd      	beq.n	8047970 <HAL_GPIO_DeInit+0x8>
 80479f4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80479f8:	42b0      	cmp	r0, r6
 80479fa:	d015      	beq.n	8047a28 <HAL_GPIO_DeInit+0xc0>
 80479fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8047a00:	42b0      	cmp	r0, r6
 8047a02:	d013      	beq.n	8047a2c <HAL_GPIO_DeInit+0xc4>
 8047a04:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8047a08:	42b0      	cmp	r0, r6
 8047a0a:	d011      	beq.n	8047a30 <HAL_GPIO_DeInit+0xc8>
 8047a0c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8047a10:	42b0      	cmp	r0, r6
 8047a12:	d00f      	beq.n	8047a34 <HAL_GPIO_DeInit+0xcc>
 8047a14:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8047a18:	42b0      	cmp	r0, r6
 8047a1a:	d00d      	beq.n	8047a38 <HAL_GPIO_DeInit+0xd0>
 8047a1c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8047a20:	42b0      	cmp	r0, r6
 8047a22:	d0a3      	beq.n	804796c <HAL_GPIO_DeInit+0x4>
 8047a24:	2607      	movs	r6, #7
 8047a26:	e7a4      	b.n	8047972 <HAL_GPIO_DeInit+0xa>
 8047a28:	2601      	movs	r6, #1
 8047a2a:	e7a2      	b.n	8047972 <HAL_GPIO_DeInit+0xa>
 8047a2c:	2602      	movs	r6, #2
 8047a2e:	e7a0      	b.n	8047972 <HAL_GPIO_DeInit+0xa>
 8047a30:	2603      	movs	r6, #3
 8047a32:	e79e      	b.n	8047972 <HAL_GPIO_DeInit+0xa>
 8047a34:	2604      	movs	r6, #4
 8047a36:	e79c      	b.n	8047972 <HAL_GPIO_DeInit+0xa>
 8047a38:	2605      	movs	r6, #5
 8047a3a:	e79a      	b.n	8047972 <HAL_GPIO_DeInit+0xa>
        EXTI->IMR1 &= ~(iocurrent);
 8047a3c:	4d15      	ldr	r5, [pc, #84]	; (8047a94 <HAL_GPIO_DeInit+0x12c>)
 8047a3e:	f8d5 4080 	ldr.w	r4, [r5, #128]	; 0x80
 8047a42:	ea24 040c 	bic.w	r4, r4, ip
 8047a46:	f8c5 4080 	str.w	r4, [r5, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8047a4a:	f8d5 4084 	ldr.w	r4, [r5, #132]	; 0x84
 8047a4e:	ea24 040c 	bic.w	r4, r4, ip
 8047a52:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8047a56:	682c      	ldr	r4, [r5, #0]
 8047a58:	ea24 040c 	bic.w	r4, r4, ip
 8047a5c:	602c      	str	r4, [r5, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8047a5e:	686c      	ldr	r4, [r5, #4]
 8047a60:	ea24 040c 	bic.w	r4, r4, ip
 8047a64:	606c      	str	r4, [r5, #4]
        EXTI->EXTICR[position >> 2U] &= ~temp;
 8047a66:	f107 0418 	add.w	r4, r7, #24
 8047a6a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 8047a6e:	ea26 060e 	bic.w	r6, r6, lr
 8047a72:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
 8047a76:	e780      	b.n	804797a <HAL_GPIO_DeInit+0x12>
  }
}
 8047a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
    position++;
 8047a7a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 8047a7c:	fa31 f203 	lsrs.w	r2, r1, r3
 8047a80:	d006      	beq.n	8047a90 <HAL_GPIO_DeInit+0x128>
    iocurrent = (GPIO_Pin) & (1UL << position);
 8047a82:	2201      	movs	r2, #1
 8047a84:	409a      	lsls	r2, r3
    if (iocurrent != 0U)
 8047a86:	ea12 0c01 	ands.w	ip, r2, r1
 8047a8a:	d0f6      	beq.n	8047a7a <HAL_GPIO_DeInit+0x112>
{
 8047a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8047a8e:	e7a0      	b.n	80479d2 <HAL_GPIO_DeInit+0x6a>
 8047a90:	4770      	bx	lr
 8047a92:	bf00      	nop
 8047a94:	4002f400 	.word	0x4002f400
 8047a98:	42020000 	.word	0x42020000

08047a9c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != 0U)
 8047a9c:	6903      	ldr	r3, [r0, #16]
 8047a9e:	4219      	tst	r1, r3
 8047aa0:	d001      	beq.n	8047aa6 <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 8047aa2:	2001      	movs	r0, #1
 8047aa4:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8047aa6:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 8047aa8:	4770      	bx	lr

08047aaa <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8047aaa:	b10a      	cbz	r2, 8047ab0 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8047aac:	6181      	str	r1, [r0, #24]
 8047aae:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8047ab0:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8047ab2:	4770      	bx	lr

08047ab4 <HAL_GPIO_EXTI_Rising_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8047ab4:	4770      	bx	lr

08047ab6 <HAL_GPIO_EXTI_Falling_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8047ab6:	4770      	bx	lr

08047ab8 <HAL_GPIO_EXTI_IRQHandler>:
{
 8047ab8:	b510      	push	{r4, lr}
 8047aba:	4604      	mov	r4, r0
  if(__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8047abc:	4b09      	ldr	r3, [pc, #36]	; (8047ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8047abe:	68db      	ldr	r3, [r3, #12]
 8047ac0:	4203      	tst	r3, r0
 8047ac2:	d104      	bne.n	8047ace <HAL_GPIO_EXTI_IRQHandler+0x16>
  if(__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8047ac4:	4b07      	ldr	r3, [pc, #28]	; (8047ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8047ac6:	691b      	ldr	r3, [r3, #16]
 8047ac8:	421c      	tst	r4, r3
 8047aca:	d105      	bne.n	8047ad8 <HAL_GPIO_EXTI_IRQHandler+0x20>
}
 8047acc:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8047ace:	4b05      	ldr	r3, [pc, #20]	; (8047ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8047ad0:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8047ad2:	f7ff ffef 	bl	8047ab4 <HAL_GPIO_EXTI_Rising_Callback>
 8047ad6:	e7f5      	b.n	8047ac4 <HAL_GPIO_EXTI_IRQHandler+0xc>
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8047ad8:	4b02      	ldr	r3, [pc, #8]	; (8047ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8047ada:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8047adc:	4620      	mov	r0, r4
 8047ade:	f7ff ffea 	bl	8047ab6 <HAL_GPIO_EXTI_Falling_Callback>
}
 8047ae2:	e7f3      	b.n	8047acc <HAL_GPIO_EXTI_IRQHandler+0x14>
 8047ae4:	4002f400 	.word	0x4002f400

08047ae8 <HAL_I2C_MasterTxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8047ae8:	4770      	bx	lr

08047aea <HAL_I2C_MasterRxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8047aea:	4770      	bx	lr

08047aec <HAL_I2C_SlaveTxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8047aec:	4770      	bx	lr

08047aee <HAL_I2C_SlaveRxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8047aee:	4770      	bx	lr

08047af0 <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8047af0:	4770      	bx	lr

08047af2 <HAL_I2C_ListenCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8047af2:	4770      	bx	lr

08047af4 <HAL_I2C_MemTxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8047af4:	4770      	bx	lr

08047af6 <HAL_I2C_MemRxCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8047af6:	4770      	bx	lr

08047af8 <HAL_I2C_ErrorCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8047af8:	4770      	bx	lr

08047afa <HAL_I2C_AbortCpltCallback>:
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8047afa:	4770      	bx	lr

08047afc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8047afc:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8047afe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8047b02:	b2db      	uxtb	r3, r3
 8047b04:	2b60      	cmp	r3, #96	; 0x60
 8047b06:	d006      	beq.n	8047b16 <I2C_TreatErrorCallback+0x1a>
    HAL_I2C_AbortCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    hi2c->PreviousState = I2C_STATE_NONE;
 8047b08:	2300      	movs	r3, #0
 8047b0a:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8047b0c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
 8047b10:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8047b12:	4798      	blx	r3
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8047b14:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8047b16:	2320      	movs	r3, #32
 8047b18:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8047b1c:	2300      	movs	r3, #0
 8047b1e:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8047b20:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->AbortCpltCallback(hi2c);
 8047b24:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8047b26:	4798      	blx	r3
 8047b28:	e7f4      	b.n	8047b14 <I2C_TreatErrorCallback+0x18>

08047b2a <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8047b2a:	6803      	ldr	r3, [r0, #0]
 8047b2c:	699a      	ldr	r2, [r3, #24]
 8047b2e:	f012 0f02 	tst.w	r2, #2
 8047b32:	d001      	beq.n	8047b38 <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8047b34:	2200      	movs	r2, #0
 8047b36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8047b38:	6803      	ldr	r3, [r0, #0]
 8047b3a:	699a      	ldr	r2, [r3, #24]
 8047b3c:	f012 0f01 	tst.w	r2, #1
 8047b40:	d103      	bne.n	8047b4a <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8047b42:	699a      	ldr	r2, [r3, #24]
 8047b44:	f042 0201 	orr.w	r2, r2, #1
 8047b48:	619a      	str	r2, [r3, #24]
  }
}
 8047b4a:	4770      	bx	lr

08047b4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8047b4c:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8047b4e:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8047b50:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8047b52:	b10b      	cbz	r3, 8047b58 <I2C_DMAAbort+0xc>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8047b54:	2200      	movs	r2, #0
 8047b56:	641a      	str	r2, [r3, #64]	; 0x40
  }
  if (hi2c->hdmarx != NULL)
 8047b58:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8047b5a:	b10b      	cbz	r3, 8047b60 <I2C_DMAAbort+0x14>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8047b5c:	2200      	movs	r2, #0
 8047b5e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  I2C_TreatErrorCallback(hi2c);
 8047b60:	f7ff ffcc 	bl	8047afc <I2C_TreatErrorCallback>
}
 8047b64:	bd08      	pop	{r3, pc}

08047b66 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8047b66:	b470      	push	{r4, r5, r6}
 8047b68:	9e03      	ldr	r6, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8047b6a:	6805      	ldr	r5, [r0, #0]
 8047b6c:	6868      	ldr	r0, [r5, #4]
 8047b6e:	0d74      	lsrs	r4, r6, #21
 8047b70:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8047b74:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8047b78:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8047b7c:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8047b80:	f044 0403 	orr.w	r4, r4, #3
 8047b84:	ea20 0004 	bic.w	r0, r0, r4
 8047b88:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8047b8c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8047b90:	4319      	orrs	r1, r3
 8047b92:	4331      	orrs	r1, r6
 8047b94:	4301      	orrs	r1, r0
 8047b96:	6069      	str	r1, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8047b98:	bc70      	pop	{r4, r5, r6}
 8047b9a:	4770      	bx	lr

08047b9c <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8047b9c:	f011 0f01 	tst.w	r1, #1
 8047ba0:	d009      	beq.n	8047bb6 <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8047ba2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8047ba6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8047baa:	2b28      	cmp	r3, #40	; 0x28
 8047bac:	d001      	beq.n	8047bb2 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8047bae:	23f2      	movs	r3, #242	; 0xf2
 8047bb0:	e002      	b.n	8047bb8 <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8047bb2:	2342      	movs	r3, #66	; 0x42
 8047bb4:	e000      	b.n	8047bb8 <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8047bb6:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8047bb8:	f011 0f02 	tst.w	r1, #2
 8047bbc:	d029      	beq.n	8047c12 <I2C_Disable_IRQ+0x76>
{
 8047bbe:	b410      	push	{r4}
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8047bc0:	f043 0444 	orr.w	r4, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8047bc4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8047bc8:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8047bcc:	2a28      	cmp	r2, #40	; 0x28
 8047bce:	d012      	beq.n	8047bf6 <I2C_Disable_IRQ+0x5a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8047bd0:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8047bd4:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8047bd8:	d10f      	bne.n	8047bfa <I2C_Disable_IRQ+0x5e>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8047bda:	2910      	cmp	r1, #16
 8047bdc:	d010      	beq.n	8047c00 <I2C_Disable_IRQ+0x64>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8047bde:	2920      	cmp	r1, #32
 8047be0:	d011      	beq.n	8047c06 <I2C_Disable_IRQ+0x6a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8047be2:	2940      	cmp	r1, #64	; 0x40
 8047be4:	d012      	beq.n	8047c0c <I2C_Disable_IRQ+0x70>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8047be6:	6801      	ldr	r1, [r0, #0]
 8047be8:	680a      	ldr	r2, [r1, #0]
 8047bea:	ea22 0303 	bic.w	r3, r2, r3
 8047bee:	600b      	str	r3, [r1, #0]
}
 8047bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8047bf4:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8047bf6:	4623      	mov	r3, r4
 8047bf8:	e7ec      	b.n	8047bd4 <I2C_Disable_IRQ+0x38>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8047bfa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8047bfe:	e7ec      	b.n	8047bda <I2C_Disable_IRQ+0x3e>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8047c00:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8047c04:	e7eb      	b.n	8047bde <I2C_Disable_IRQ+0x42>
    tmpisr |= I2C_IT_STOPI;
 8047c06:	f043 0320 	orr.w	r3, r3, #32
 8047c0a:	e7ea      	b.n	8047be2 <I2C_Disable_IRQ+0x46>
    tmpisr |= I2C_IT_TCI;
 8047c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8047c10:	e7e9      	b.n	8047be6 <I2C_Disable_IRQ+0x4a>
  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8047c12:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8047c16:	d10b      	bne.n	8047c30 <I2C_Disable_IRQ+0x94>
  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8047c18:	2910      	cmp	r1, #16
 8047c1a:	d00c      	beq.n	8047c36 <I2C_Disable_IRQ+0x9a>
  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8047c1c:	2920      	cmp	r1, #32
 8047c1e:	d00d      	beq.n	8047c3c <I2C_Disable_IRQ+0xa0>
  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8047c20:	2940      	cmp	r1, #64	; 0x40
 8047c22:	d00e      	beq.n	8047c42 <I2C_Disable_IRQ+0xa6>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8047c24:	6801      	ldr	r1, [r0, #0]
 8047c26:	680a      	ldr	r2, [r1, #0]
 8047c28:	ea22 0303 	bic.w	r3, r2, r3
 8047c2c:	600b      	str	r3, [r1, #0]
 8047c2e:	4770      	bx	lr
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8047c30:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8047c34:	e7f0      	b.n	8047c18 <I2C_Disable_IRQ+0x7c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8047c36:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8047c3a:	e7ef      	b.n	8047c1c <I2C_Disable_IRQ+0x80>
    tmpisr |= I2C_IT_STOPI;
 8047c3c:	f043 0320 	orr.w	r3, r3, #32
 8047c40:	e7ee      	b.n	8047c20 <I2C_Disable_IRQ+0x84>
    tmpisr |= I2C_IT_TCI;
 8047c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8047c46:	e7ed      	b.n	8047c24 <I2C_Disable_IRQ+0x88>

08047c48 <I2C_ITListenCplt>:
{
 8047c48:	b510      	push	{r4, lr}
 8047c4a:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8047c4c:	4b17      	ldr	r3, [pc, #92]	; (8047cac <I2C_ITListenCplt+0x64>)
 8047c4e:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8047c50:	2300      	movs	r3, #0
 8047c52:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8047c54:	2220      	movs	r2, #32
 8047c56:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8047c5a:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8047c5e:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8047c60:	f011 0f04 	tst.w	r1, #4
 8047c64:	d013      	beq.n	8047c8e <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8047c66:	6803      	ldr	r3, [r0, #0]
 8047c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8047c6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8047c6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8047c6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8047c70:	3301      	adds	r3, #1
 8047c72:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8047c74:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8047c76:	b153      	cbz	r3, 8047c8e <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8047c78:	3b01      	subs	r3, #1
 8047c7a:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8047c7c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8047c7e:	b29b      	uxth	r3, r3
 8047c80:	3b01      	subs	r3, #1
 8047c82:	b29b      	uxth	r3, r3
 8047c84:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8047c86:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8047c88:	f043 0304 	orr.w	r3, r3, #4
 8047c8c:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8047c8e:	f248 0103 	movw	r1, #32771	; 0x8003
 8047c92:	4620      	mov	r0, r4
 8047c94:	f7ff ff82 	bl	8047b9c <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8047c98:	6823      	ldr	r3, [r4, #0]
 8047c9a:	2210      	movs	r2, #16
 8047c9c:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8047c9e:	2300      	movs	r3, #0
 8047ca0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->ListenCpltCallback(hi2c);
 8047ca4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8047ca6:	4620      	mov	r0, r4
 8047ca8:	4798      	blx	r3
}
 8047caa:	bd10      	pop	{r4, pc}
 8047cac:	ffff0000 	.word	0xffff0000

08047cb0 <I2C_ITAddrCplt>:
{
 8047cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8047cb2:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8047cb4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8047cb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8047cbc:	2b28      	cmp	r3, #40	; 0x28
 8047cbe:	d006      	beq.n	8047cce <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8047cc0:	6803      	ldr	r3, [r0, #0]
 8047cc2:	2208      	movs	r2, #8
 8047cc4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8047cc6:	2300      	movs	r3, #0
 8047cc8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8047ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8047cce:	6803      	ldr	r3, [r0, #0]
 8047cd0:	699e      	ldr	r6, [r3, #24]
 8047cd2:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8047cd6:	699a      	ldr	r2, [r3, #24]
 8047cd8:	0c12      	lsrs	r2, r2, #16
 8047cda:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8047cde:	689a      	ldr	r2, [r3, #8]
 8047ce0:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8047ce4:	68df      	ldr	r7, [r3, #12]
 8047ce6:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8047cea:	68c1      	ldr	r1, [r0, #12]
 8047cec:	2902      	cmp	r1, #2
 8047cee:	d122      	bne.n	8047d36 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8047cf0:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8047cf4:	f015 0f06 	tst.w	r5, #6
 8047cf8:	d110      	bne.n	8047d1c <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8047cfa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8047cfc:	3101      	adds	r1, #1
 8047cfe:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8047d00:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8047d02:	2902      	cmp	r1, #2
 8047d04:	d1e2      	bne.n	8047ccc <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8047d06:	2100      	movs	r1, #0
 8047d08:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8047d0a:	2008      	movs	r0, #8
 8047d0c:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8047d0e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8047d12:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8047d14:	4631      	mov	r1, r6
 8047d16:	4620      	mov	r0, r4
 8047d18:	4798      	blx	r3
 8047d1a:	e7d7      	b.n	8047ccc <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8047d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8047d20:	f7ff ff3c 	bl	8047b9c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8047d24:	2300      	movs	r3, #0
 8047d26:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8047d2a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8047d2c:	463a      	mov	r2, r7
 8047d2e:	4631      	mov	r1, r6
 8047d30:	4620      	mov	r0, r4
 8047d32:	4798      	blx	r3
 8047d34:	e7ca      	b.n	8047ccc <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8047d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8047d3a:	f7ff ff2f 	bl	8047b9c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8047d3e:	2300      	movs	r3, #0
 8047d40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8047d44:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8047d46:	462a      	mov	r2, r5
 8047d48:	4631      	mov	r1, r6
 8047d4a:	4620      	mov	r0, r4
 8047d4c:	4798      	blx	r3
 8047d4e:	e7bd      	b.n	8047ccc <I2C_ITAddrCplt+0x1c>

08047d50 <I2C_ITSlaveSeqCplt>:
{
 8047d50:	b510      	push	{r4, lr}
 8047d52:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8047d54:	6803      	ldr	r3, [r0, #0]
 8047d56:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8047d58:	2100      	movs	r1, #0
 8047d5a:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8047d5e:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8047d62:	d00e      	beq.n	8047d82 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8047d64:	681a      	ldr	r2, [r3, #0]
 8047d66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8047d6a:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8047d6c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8047d70:	b2db      	uxtb	r3, r3
 8047d72:	2b29      	cmp	r3, #41	; 0x29
 8047d74:	d00d      	beq.n	8047d92 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8047d76:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8047d7a:	b2db      	uxtb	r3, r3
 8047d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8047d7e:	d018      	beq.n	8047db2 <I2C_ITSlaveSeqCplt+0x62>
}
 8047d80:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8047d82:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8047d86:	d0f1      	beq.n	8047d6c <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8047d88:	681a      	ldr	r2, [r3, #0]
 8047d8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8047d8e:	601a      	str	r2, [r3, #0]
 8047d90:	e7ec      	b.n	8047d6c <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8047d92:	2328      	movs	r3, #40	; 0x28
 8047d94:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8047d98:	2321      	movs	r3, #33	; 0x21
 8047d9a:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8047d9c:	2101      	movs	r1, #1
 8047d9e:	4620      	mov	r0, r4
 8047da0:	f7ff fefc 	bl	8047b9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8047da4:	2300      	movs	r3, #0
 8047da6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 8047daa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8047dac:	4620      	mov	r0, r4
 8047dae:	4798      	blx	r3
 8047db0:	e7e6      	b.n	8047d80 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8047db2:	2328      	movs	r3, #40	; 0x28
 8047db4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8047db8:	2322      	movs	r3, #34	; 0x22
 8047dba:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8047dbc:	2102      	movs	r1, #2
 8047dbe:	4620      	mov	r0, r4
 8047dc0:	f7ff feec 	bl	8047b9c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8047dc4:	2300      	movs	r3, #0
 8047dc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8047dca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8047dcc:	4620      	mov	r0, r4
 8047dce:	4798      	blx	r3
}
 8047dd0:	e7d6      	b.n	8047d80 <I2C_ITSlaveSeqCplt+0x30>

08047dd2 <I2C_IsAcknowledgeFailed>:
{
 8047dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8047dd4:	4605      	mov	r5, r0
 8047dd6:	460e      	mov	r6, r1
 8047dd8:	4617      	mov	r7, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8047dda:	6803      	ldr	r3, [r0, #0]
 8047ddc:	699b      	ldr	r3, [r3, #24]
 8047dde:	f013 0f10 	tst.w	r3, #16
 8047de2:	d101      	bne.n	8047de8 <I2C_IsAcknowledgeFailed+0x16>
  return HAL_OK;
 8047de4:	2000      	movs	r0, #0
}
 8047de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8047de8:	682b      	ldr	r3, [r5, #0]
 8047dea:	699c      	ldr	r4, [r3, #24]
 8047dec:	f014 0f20 	tst.w	r4, #32
 8047df0:	d117      	bne.n	8047e22 <I2C_IsAcknowledgeFailed+0x50>
      if (Timeout != HAL_MAX_DELAY)
 8047df2:	f1b6 3fff 	cmp.w	r6, #4294967295
 8047df6:	d0f7      	beq.n	8047de8 <I2C_IsAcknowledgeFailed+0x16>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8047df8:	f7fe f9d0 	bl	804619c <HAL_GetTick>
 8047dfc:	1bc0      	subs	r0, r0, r7
 8047dfe:	42b0      	cmp	r0, r6
 8047e00:	d801      	bhi.n	8047e06 <I2C_IsAcknowledgeFailed+0x34>
 8047e02:	2e00      	cmp	r6, #0
 8047e04:	d1f0      	bne.n	8047de8 <I2C_IsAcknowledgeFailed+0x16>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8047e06:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8047e08:	f043 0320 	orr.w	r3, r3, #32
 8047e0c:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8047e0e:	2320      	movs	r3, #32
 8047e10:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8047e14:	2300      	movs	r3, #0
 8047e16:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8047e1a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
          return HAL_ERROR;
 8047e1e:	2001      	movs	r0, #1
 8047e20:	e7e1      	b.n	8047de6 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8047e22:	2210      	movs	r2, #16
 8047e24:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8047e26:	682b      	ldr	r3, [r5, #0]
 8047e28:	2420      	movs	r4, #32
 8047e2a:	61dc      	str	r4, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8047e2c:	4628      	mov	r0, r5
 8047e2e:	f7ff fe7c 	bl	8047b2a <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8047e32:	682a      	ldr	r2, [r5, #0]
 8047e34:	6853      	ldr	r3, [r2, #4]
 8047e36:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8047e3a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8047e3e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8047e42:	f023 0301 	bic.w	r3, r3, #1
 8047e46:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8047e48:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8047e4a:	f043 0304 	orr.w	r3, r3, #4
 8047e4e:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8047e50:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8047e54:	2300      	movs	r3, #0
 8047e56:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8047e5a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    return HAL_ERROR;
 8047e5e:	2001      	movs	r0, #1
 8047e60:	e7c1      	b.n	8047de6 <I2C_IsAcknowledgeFailed+0x14>

08047e62 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8047e62:	b570      	push	{r4, r5, r6, lr}
 8047e64:	4604      	mov	r4, r0
 8047e66:	460d      	mov	r5, r1
 8047e68:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8047e6a:	6823      	ldr	r3, [r4, #0]
 8047e6c:	699b      	ldr	r3, [r3, #24]
 8047e6e:	f013 0f02 	tst.w	r3, #2
 8047e72:	d11d      	bne.n	8047eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8047e74:	4632      	mov	r2, r6
 8047e76:	4629      	mov	r1, r5
 8047e78:	4620      	mov	r0, r4
 8047e7a:	f7ff ffaa 	bl	8047dd2 <I2C_IsAcknowledgeFailed>
 8047e7e:	b9c8      	cbnz	r0, 8047eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8047e80:	f1b5 3fff 	cmp.w	r5, #4294967295
 8047e84:	d0f1      	beq.n	8047e6a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8047e86:	f7fe f989 	bl	804619c <HAL_GetTick>
 8047e8a:	1b80      	subs	r0, r0, r6
 8047e8c:	42a8      	cmp	r0, r5
 8047e8e:	d801      	bhi.n	8047e94 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8047e90:	2d00      	cmp	r5, #0
 8047e92:	d1ea      	bne.n	8047e6a <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8047e94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8047e96:	f043 0320 	orr.w	r3, r3, #32
 8047e9a:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8047e9c:	2320      	movs	r3, #32
 8047e9e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8047ea2:	2300      	movs	r3, #0
 8047ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8047ea8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8047eac:	2001      	movs	r0, #1
 8047eae:	e000      	b.n	8047eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 8047eb0:	2000      	movs	r0, #0
}
 8047eb2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8047eb4:	2001      	movs	r0, #1
 8047eb6:	e7fc      	b.n	8047eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x50>

08047eb8 <I2C_WaitOnFlagUntilTimeout>:
{
 8047eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8047ebc:	4606      	mov	r6, r0
 8047ebe:	4688      	mov	r8, r1
 8047ec0:	4617      	mov	r7, r2
 8047ec2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8047ec4:	6834      	ldr	r4, [r6, #0]
 8047ec6:	69a4      	ldr	r4, [r4, #24]
 8047ec8:	ea38 0304 	bics.w	r3, r8, r4
 8047ecc:	bf0c      	ite	eq
 8047ece:	2401      	moveq	r4, #1
 8047ed0:	2400      	movne	r4, #0
 8047ed2:	42bc      	cmp	r4, r7
 8047ed4:	d118      	bne.n	8047f08 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8047ed6:	f1b5 3fff 	cmp.w	r5, #4294967295
 8047eda:	d0f3      	beq.n	8047ec4 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8047edc:	f7fe f95e 	bl	804619c <HAL_GetTick>
 8047ee0:	9b06      	ldr	r3, [sp, #24]
 8047ee2:	1ac0      	subs	r0, r0, r3
 8047ee4:	42a8      	cmp	r0, r5
 8047ee6:	d801      	bhi.n	8047eec <I2C_WaitOnFlagUntilTimeout+0x34>
 8047ee8:	2d00      	cmp	r5, #0
 8047eea:	d1eb      	bne.n	8047ec4 <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8047eec:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8047eee:	f043 0320 	orr.w	r3, r3, #32
 8047ef2:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8047ef4:	2320      	movs	r3, #32
 8047ef6:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8047efa:	2300      	movs	r3, #0
 8047efc:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8047f00:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 8047f04:	2001      	movs	r0, #1
 8047f06:	e000      	b.n	8047f0a <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8047f08:	2000      	movs	r0, #0
}
 8047f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08047f10 <I2C_RequestMemoryWrite>:
{
 8047f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8047f14:	b082      	sub	sp, #8
 8047f16:	4604      	mov	r4, r0
 8047f18:	4690      	mov	r8, r2
 8047f1a:	461d      	mov	r5, r3
 8047f1c:	9e08      	ldr	r6, [sp, #32]
 8047f1e:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8047f20:	4b19      	ldr	r3, [pc, #100]	; (8047f88 <I2C_RequestMemoryWrite+0x78>)
 8047f22:	9300      	str	r3, [sp, #0]
 8047f24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8047f28:	b2ea      	uxtb	r2, r5
 8047f2a:	f7ff fe1c 	bl	8047b66 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8047f2e:	463a      	mov	r2, r7
 8047f30:	4631      	mov	r1, r6
 8047f32:	4620      	mov	r0, r4
 8047f34:	f7ff ff95 	bl	8047e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8047f38:	b9f8      	cbnz	r0, 8047f7a <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8047f3a:	2d01      	cmp	r5, #1
 8047f3c:	d10e      	bne.n	8047f5c <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8047f3e:	6823      	ldr	r3, [r4, #0]
 8047f40:	fa5f f288 	uxtb.w	r2, r8
 8047f44:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8047f46:	9700      	str	r7, [sp, #0]
 8047f48:	4633      	mov	r3, r6
 8047f4a:	2200      	movs	r2, #0
 8047f4c:	2180      	movs	r1, #128	; 0x80
 8047f4e:	4620      	mov	r0, r4
 8047f50:	f7ff ffb2 	bl	8047eb8 <I2C_WaitOnFlagUntilTimeout>
 8047f54:	b9a8      	cbnz	r0, 8047f82 <I2C_RequestMemoryWrite+0x72>
}
 8047f56:	b002      	add	sp, #8
 8047f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8047f5c:	6823      	ldr	r3, [r4, #0]
 8047f5e:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8047f62:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8047f64:	463a      	mov	r2, r7
 8047f66:	4631      	mov	r1, r6
 8047f68:	4620      	mov	r0, r4
 8047f6a:	f7ff ff7a 	bl	8047e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8047f6e:	b930      	cbnz	r0, 8047f7e <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8047f70:	6823      	ldr	r3, [r4, #0]
 8047f72:	fa5f f288 	uxtb.w	r2, r8
 8047f76:	629a      	str	r2, [r3, #40]	; 0x28
 8047f78:	e7e5      	b.n	8047f46 <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8047f7a:	2001      	movs	r0, #1
 8047f7c:	e7eb      	b.n	8047f56 <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8047f7e:	2001      	movs	r0, #1
 8047f80:	e7e9      	b.n	8047f56 <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 8047f82:	2001      	movs	r0, #1
 8047f84:	e7e7      	b.n	8047f56 <I2C_RequestMemoryWrite+0x46>
 8047f86:	bf00      	nop
 8047f88:	80002000 	.word	0x80002000

08047f8c <I2C_RequestMemoryRead>:
{
 8047f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8047f90:	b082      	sub	sp, #8
 8047f92:	4604      	mov	r4, r0
 8047f94:	4690      	mov	r8, r2
 8047f96:	461d      	mov	r5, r3
 8047f98:	9e08      	ldr	r6, [sp, #32]
 8047f9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8047f9c:	4b18      	ldr	r3, [pc, #96]	; (8048000 <I2C_RequestMemoryRead+0x74>)
 8047f9e:	9300      	str	r3, [sp, #0]
 8047fa0:	2300      	movs	r3, #0
 8047fa2:	b2ea      	uxtb	r2, r5
 8047fa4:	f7ff fddf 	bl	8047b66 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8047fa8:	463a      	mov	r2, r7
 8047faa:	4631      	mov	r1, r6
 8047fac:	4620      	mov	r0, r4
 8047fae:	f7ff ff58 	bl	8047e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8047fb2:	b9f8      	cbnz	r0, 8047ff4 <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8047fb4:	2d01      	cmp	r5, #1
 8047fb6:	d10e      	bne.n	8047fd6 <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8047fb8:	6823      	ldr	r3, [r4, #0]
 8047fba:	fa5f f288 	uxtb.w	r2, r8
 8047fbe:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8047fc0:	9700      	str	r7, [sp, #0]
 8047fc2:	4633      	mov	r3, r6
 8047fc4:	2200      	movs	r2, #0
 8047fc6:	2140      	movs	r1, #64	; 0x40
 8047fc8:	4620      	mov	r0, r4
 8047fca:	f7ff ff75 	bl	8047eb8 <I2C_WaitOnFlagUntilTimeout>
 8047fce:	b9a8      	cbnz	r0, 8047ffc <I2C_RequestMemoryRead+0x70>
}
 8047fd0:	b002      	add	sp, #8
 8047fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8047fd6:	6823      	ldr	r3, [r4, #0]
 8047fd8:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8047fdc:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8047fde:	463a      	mov	r2, r7
 8047fe0:	4631      	mov	r1, r6
 8047fe2:	4620      	mov	r0, r4
 8047fe4:	f7ff ff3d 	bl	8047e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8047fe8:	b930      	cbnz	r0, 8047ff8 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8047fea:	6823      	ldr	r3, [r4, #0]
 8047fec:	fa5f f288 	uxtb.w	r2, r8
 8047ff0:	629a      	str	r2, [r3, #40]	; 0x28
 8047ff2:	e7e5      	b.n	8047fc0 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 8047ff4:	2001      	movs	r0, #1
 8047ff6:	e7eb      	b.n	8047fd0 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 8047ff8:	2001      	movs	r0, #1
 8047ffa:	e7e9      	b.n	8047fd0 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 8047ffc:	2001      	movs	r0, #1
 8047ffe:	e7e7      	b.n	8047fd0 <I2C_RequestMemoryRead+0x44>
 8048000:	80002000 	.word	0x80002000

08048004 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8048004:	b570      	push	{r4, r5, r6, lr}
 8048006:	4605      	mov	r5, r0
 8048008:	460c      	mov	r4, r1
 804800a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 804800c:	682b      	ldr	r3, [r5, #0]
 804800e:	699b      	ldr	r3, [r3, #24]
 8048010:	f013 0f20 	tst.w	r3, #32
 8048014:	d11a      	bne.n	804804c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8048016:	4632      	mov	r2, r6
 8048018:	4621      	mov	r1, r4
 804801a:	4628      	mov	r0, r5
 804801c:	f7ff fed9 	bl	8047dd2 <I2C_IsAcknowledgeFailed>
 8048020:	b9b0      	cbnz	r0, 8048050 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8048022:	f7fe f8bb 	bl	804619c <HAL_GetTick>
 8048026:	1b80      	subs	r0, r0, r6
 8048028:	42a0      	cmp	r0, r4
 804802a:	d801      	bhi.n	8048030 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 804802c:	2c00      	cmp	r4, #0
 804802e:	d1ed      	bne.n	804800c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8048030:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8048032:	f043 0320 	orr.w	r3, r3, #32
 8048036:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8048038:	2320      	movs	r3, #32
 804803a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 804803e:	2300      	movs	r3, #0
 8048040:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8048044:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8048048:	2001      	movs	r0, #1
}
 804804a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 804804c:	2000      	movs	r0, #0
 804804e:	e7fc      	b.n	804804a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8048050:	2001      	movs	r0, #1
 8048052:	e7fa      	b.n	804804a <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

08048054 <I2C_ITError>:
{
 8048054:	b510      	push	{r4, lr}
 8048056:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8048058:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 804805c:	2000      	movs	r0, #0
 804805e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8048062:	4a3b      	ldr	r2, [pc, #236]	; (8048150 <I2C_ITError+0xfc>)
 8048064:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8048066:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8048068:	6c62      	ldr	r2, [r4, #68]	; 0x44
 804806a:	430a      	orrs	r2, r1
 804806c:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 804806e:	3b28      	subs	r3, #40	; 0x28
 8048070:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8048072:	2b02      	cmp	r3, #2
 8048074:	d819      	bhi.n	80480aa <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8048076:	2103      	movs	r1, #3
 8048078:	4620      	mov	r0, r4
 804807a:	f7ff fd8f 	bl	8047b9c <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 804807e:	2328      	movs	r3, #40	; 0x28
 8048080:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8048084:	4b33      	ldr	r3, [pc, #204]	; (8048154 <I2C_ITError+0x100>)
 8048086:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8048088:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 804808a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 804808c:	b11a      	cbz	r2, 8048096 <I2C_ITError+0x42>
 804808e:	2b11      	cmp	r3, #17
 8048090:	d01b      	beq.n	80480ca <I2C_ITError+0x76>
 8048092:	2b21      	cmp	r3, #33	; 0x21
 8048094:	d019      	beq.n	80480ca <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8048096:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8048098:	b11a      	cbz	r2, 80480a2 <I2C_ITError+0x4e>
 804809a:	2b12      	cmp	r3, #18
 804809c:	d036      	beq.n	804810c <I2C_ITError+0xb8>
 804809e:	2b22      	cmp	r3, #34	; 0x22
 80480a0:	d034      	beq.n	804810c <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 80480a2:	4620      	mov	r0, r4
 80480a4:	f7ff fd2a 	bl	8047afc <I2C_TreatErrorCallback>
}
 80480a8:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80480aa:	f248 0103 	movw	r1, #32771	; 0x8003
 80480ae:	4620      	mov	r0, r4
 80480b0:	f7ff fd74 	bl	8047b9c <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80480b4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80480b8:	b2db      	uxtb	r3, r3
 80480ba:	2b60      	cmp	r3, #96	; 0x60
 80480bc:	d002      	beq.n	80480c4 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 80480be:	2320      	movs	r3, #32
 80480c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 80480c4:	2300      	movs	r3, #0
 80480c6:	6363      	str	r3, [r4, #52]	; 0x34
 80480c8:	e7de      	b.n	8048088 <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80480ca:	6823      	ldr	r3, [r4, #0]
 80480cc:	681a      	ldr	r2, [r3, #0]
 80480ce:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 80480d2:	d003      	beq.n	80480dc <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80480d4:	681a      	ldr	r2, [r3, #0]
 80480d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80480da:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80480dc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80480de:	f7ff fb61 	bl	80477a4 <HAL_DMA_GetState>
 80480e2:	2801      	cmp	r0, #1
 80480e4:	d00e      	beq.n	8048104 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80480e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80480e8:	4a1b      	ldr	r2, [pc, #108]	; (8048158 <I2C_ITError+0x104>)
 80480ea:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80480ec:	2300      	movs	r3, #0
 80480ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80480f2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80480f4:	f7ff fa96 	bl	8047624 <HAL_DMA_Abort_IT>
 80480f8:	2800      	cmp	r0, #0
 80480fa:	d0d5      	beq.n	80480a8 <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80480fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80480fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8048100:	4798      	blx	r3
 8048102:	e7d1      	b.n	80480a8 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8048104:	4620      	mov	r0, r4
 8048106:	f7ff fcf9 	bl	8047afc <I2C_TreatErrorCallback>
 804810a:	e7cd      	b.n	80480a8 <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 804810c:	6823      	ldr	r3, [r4, #0]
 804810e:	681a      	ldr	r2, [r3, #0]
 8048110:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8048114:	d003      	beq.n	804811e <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8048116:	681a      	ldr	r2, [r3, #0]
 8048118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 804811c:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 804811e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8048120:	f7ff fb40 	bl	80477a4 <HAL_DMA_GetState>
 8048124:	2801      	cmp	r0, #1
 8048126:	d00e      	beq.n	8048146 <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8048128:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 804812a:	4a0b      	ldr	r2, [pc, #44]	; (8048158 <I2C_ITError+0x104>)
 804812c:	641a      	str	r2, [r3, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 804812e:	2300      	movs	r3, #0
 8048130:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8048134:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8048136:	f7ff fa75 	bl	8047624 <HAL_DMA_Abort_IT>
 804813a:	2800      	cmp	r0, #0
 804813c:	d0b4      	beq.n	80480a8 <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 804813e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8048140:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8048142:	4798      	blx	r3
 8048144:	e7b0      	b.n	80480a8 <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8048146:	4620      	mov	r0, r4
 8048148:	f7ff fcd8 	bl	8047afc <I2C_TreatErrorCallback>
 804814c:	e7ac      	b.n	80480a8 <I2C_ITError+0x54>
 804814e:	bf00      	nop
 8048150:	ffff0000 	.word	0xffff0000
 8048154:	080482c5 	.word	0x080482c5
 8048158:	08047b4d 	.word	0x08047b4d

0804815c <I2C_ITSlaveCplt>:
{
 804815c:	b570      	push	{r4, r5, r6, lr}
 804815e:	4604      	mov	r4, r0
 8048160:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8048162:	6802      	ldr	r2, [r0, #0]
 8048164:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8048166:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 804816a:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 804816c:	2120      	movs	r1, #32
 804816e:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8048170:	2b21      	cmp	r3, #33	; 0x21
 8048172:	d00d      	beq.n	8048190 <I2C_ITSlaveCplt+0x34>
 8048174:	2b29      	cmp	r3, #41	; 0x29
 8048176:	d00b      	beq.n	8048190 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8048178:	2b22      	cmp	r3, #34	; 0x22
 804817a:	d001      	beq.n	8048180 <I2C_ITSlaveCplt+0x24>
 804817c:	2b2a      	cmp	r3, #42	; 0x2a
 804817e:	d10e      	bne.n	804819e <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8048180:	f248 0102 	movw	r1, #32770	; 0x8002
 8048184:	4620      	mov	r0, r4
 8048186:	f7ff fd09 	bl	8047b9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 804818a:	2322      	movs	r3, #34	; 0x22
 804818c:	6323      	str	r3, [r4, #48]	; 0x30
 804818e:	e006      	b.n	804819e <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8048190:	f248 0101 	movw	r1, #32769	; 0x8001
 8048194:	4620      	mov	r0, r4
 8048196:	f7ff fd01 	bl	8047b9c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 804819a:	2321      	movs	r3, #33	; 0x21
 804819c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 804819e:	6822      	ldr	r2, [r4, #0]
 80481a0:	6853      	ldr	r3, [r2, #4]
 80481a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80481a6:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 80481a8:	6822      	ldr	r2, [r4, #0]
 80481aa:	6853      	ldr	r3, [r2, #4]
 80481ac:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80481b0:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80481b4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80481b8:	f023 0301 	bic.w	r3, r3, #1
 80481bc:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 80481be:	4620      	mov	r0, r4
 80481c0:	f7ff fcb3 	bl	8047b2a <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80481c4:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 80481c8:	d040      	beq.n	804824c <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80481ca:	6822      	ldr	r2, [r4, #0]
 80481cc:	6813      	ldr	r3, [r2, #0]
 80481ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80481d2:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 80481d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80481d6:	b11b      	cbz	r3, 80481e0 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80481d8:	681b      	ldr	r3, [r3, #0]
 80481da:	685b      	ldr	r3, [r3, #4]
 80481dc:	b29b      	uxth	r3, r3
 80481de:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80481e0:	f015 0f04 	tst.w	r5, #4
 80481e4:	d011      	beq.n	804820a <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80481e6:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80481ea:	6823      	ldr	r3, [r4, #0]
 80481ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80481ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80481f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80481f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80481f4:	3301      	adds	r3, #1
 80481f6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 80481f8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80481fa:	b133      	cbz	r3, 804820a <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 80481fc:	3b01      	subs	r3, #1
 80481fe:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8048200:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8048202:	b29b      	uxth	r3, r3
 8048204:	3b01      	subs	r3, #1
 8048206:	b29b      	uxth	r3, r3
 8048208:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 804820a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 804820c:	b29b      	uxth	r3, r3
 804820e:	b11b      	cbz	r3, 8048218 <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8048210:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8048212:	f043 0304 	orr.w	r3, r3, #4
 8048216:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8048218:	2300      	movs	r3, #0
 804821a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 804821e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8048220:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8048222:	bb1b      	cbnz	r3, 804826c <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8048224:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8048226:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 804822a:	d12d      	bne.n	8048288 <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 804822c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8048230:	b2db      	uxtb	r3, r3
 8048232:	2b22      	cmp	r3, #34	; 0x22
 8048234:	d038      	beq.n	80482a8 <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8048236:	2320      	movs	r3, #32
 8048238:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 804823c:	2300      	movs	r3, #0
 804823e:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8048240:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 8048244:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8048246:	4620      	mov	r0, r4
 8048248:	4798      	blx	r3
}
 804824a:	e02c      	b.n	80482a6 <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 804824c:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8048250:	d0c6      	beq.n	80481e0 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8048252:	6822      	ldr	r2, [r4, #0]
 8048254:	6813      	ldr	r3, [r2, #0]
 8048256:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804825a:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 804825c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 804825e:	2b00      	cmp	r3, #0
 8048260:	d0be      	beq.n	80481e0 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8048262:	681b      	ldr	r3, [r3, #0]
 8048264:	685b      	ldr	r3, [r3, #4]
 8048266:	b29b      	uxth	r3, r3
 8048268:	8563      	strh	r3, [r4, #42]	; 0x2a
 804826a:	e7b9      	b.n	80481e0 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 804826c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 804826e:	4620      	mov	r0, r4
 8048270:	f7ff fef0 	bl	8048054 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8048274:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8048278:	b2db      	uxtb	r3, r3
 804827a:	2b28      	cmp	r3, #40	; 0x28
 804827c:	d113      	bne.n	80482a6 <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 804827e:	4629      	mov	r1, r5
 8048280:	4620      	mov	r0, r4
 8048282:	f7ff fce1 	bl	8047c48 <I2C_ITListenCplt>
 8048286:	e00e      	b.n	80482a6 <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 8048288:	4620      	mov	r0, r4
 804828a:	f7ff fd61 	bl	8047d50 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 804828e:	4b0c      	ldr	r3, [pc, #48]	; (80482c0 <I2C_ITSlaveCplt+0x164>)
 8048290:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8048292:	2320      	movs	r3, #32
 8048294:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8048298:	2300      	movs	r3, #0
 804829a:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 804829c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 80482a0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80482a2:	4620      	mov	r0, r4
 80482a4:	4798      	blx	r3
}
 80482a6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 80482a8:	2320      	movs	r3, #32
 80482aa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80482ae:	2300      	movs	r3, #0
 80482b0:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80482b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 80482b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80482b8:	4620      	mov	r0, r4
 80482ba:	4798      	blx	r3
 80482bc:	e7f3      	b.n	80482a6 <I2C_ITSlaveCplt+0x14a>
 80482be:	bf00      	nop
 80482c0:	ffff0000 	.word	0xffff0000

080482c4 <I2C_Slave_ISR_IT>:
{
 80482c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 80482c6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 80482c8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80482cc:	2b01      	cmp	r3, #1
 80482ce:	f000 809e 	beq.w	804840e <I2C_Slave_ISR_IT+0x14a>
 80482d2:	4604      	mov	r4, r0
 80482d4:	460d      	mov	r5, r1
 80482d6:	4616      	mov	r6, r2
 80482d8:	2301      	movs	r3, #1
 80482da:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80482de:	f011 0f20 	tst.w	r1, #32
 80482e2:	d002      	beq.n	80482ea <I2C_Slave_ISR_IT+0x26>
 80482e4:	f012 0f20 	tst.w	r2, #32
 80482e8:	d119      	bne.n	804831e <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80482ea:	f015 0f10 	tst.w	r5, #16
 80482ee:	d03e      	beq.n	804836e <I2C_Slave_ISR_IT+0xaa>
 80482f0:	f016 0f10 	tst.w	r6, #16
 80482f4:	d03b      	beq.n	804836e <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 80482f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80482f8:	b29b      	uxth	r3, r3
 80482fa:	bb43      	cbnz	r3, 804834e <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80482fc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8048300:	b2db      	uxtb	r3, r3
 8048302:	2b28      	cmp	r3, #40	; 0x28
 8048304:	d00e      	beq.n	8048324 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8048306:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 804830a:	b2db      	uxtb	r3, r3
 804830c:	2b29      	cmp	r3, #41	; 0x29
 804830e:	d011      	beq.n	8048334 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8048310:	6823      	ldr	r3, [r4, #0]
 8048312:	2210      	movs	r2, #16
 8048314:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8048316:	2000      	movs	r0, #0
 8048318:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 804831c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 804831e:	f7ff ff1d 	bl	804815c <I2C_ITSlaveCplt>
 8048322:	e7e2      	b.n	80482ea <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8048324:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 8048328:	d1ed      	bne.n	8048306 <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 804832a:	4629      	mov	r1, r5
 804832c:	4620      	mov	r0, r4
 804832e:	f7ff fc8b 	bl	8047c48 <I2C_ITListenCplt>
 8048332:	e7f0      	b.n	8048316 <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8048334:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 8048338:	d0ea      	beq.n	8048310 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 804833a:	6823      	ldr	r3, [r4, #0]
 804833c:	2210      	movs	r2, #16
 804833e:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8048340:	4620      	mov	r0, r4
 8048342:	f7ff fbf2 	bl	8047b2a <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 8048346:	4620      	mov	r0, r4
 8048348:	f7ff fd02 	bl	8047d50 <I2C_ITSlaveSeqCplt>
 804834c:	e7e3      	b.n	8048316 <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 804834e:	6823      	ldr	r3, [r4, #0]
 8048350:	2210      	movs	r2, #16
 8048352:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8048354:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8048356:	f043 0304 	orr.w	r3, r3, #4
 804835a:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 804835c:	b117      	cbz	r7, 8048364 <I2C_Slave_ISR_IT+0xa0>
 804835e:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8048362:	d1d8      	bne.n	8048316 <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8048364:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8048366:	4620      	mov	r0, r4
 8048368:	f7ff fe74 	bl	8048054 <I2C_ITError>
 804836c:	e7d3      	b.n	8048316 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 804836e:	f015 0f04 	tst.w	r5, #4
 8048372:	d01f      	beq.n	80483b4 <I2C_Slave_ISR_IT+0xf0>
 8048374:	f016 0f04 	tst.w	r6, #4
 8048378:	d01c      	beq.n	80483b4 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 804837a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 804837c:	b29b      	uxth	r3, r3
 804837e:	b173      	cbz	r3, 804839e <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8048380:	6823      	ldr	r3, [r4, #0]
 8048382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8048384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8048386:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8048388:	6a63      	ldr	r3, [r4, #36]	; 0x24
 804838a:	3301      	adds	r3, #1
 804838c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 804838e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8048390:	3b01      	subs	r3, #1
 8048392:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8048394:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8048396:	b29b      	uxth	r3, r3
 8048398:	3b01      	subs	r3, #1
 804839a:	b29b      	uxth	r3, r3
 804839c:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 804839e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80483a0:	b29b      	uxth	r3, r3
 80483a2:	2b00      	cmp	r3, #0
 80483a4:	d1b7      	bne.n	8048316 <I2C_Slave_ISR_IT+0x52>
 80483a6:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80483aa:	d0b4      	beq.n	8048316 <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 80483ac:	4620      	mov	r0, r4
 80483ae:	f7ff fccf 	bl	8047d50 <I2C_ITSlaveSeqCplt>
 80483b2:	e7b0      	b.n	8048316 <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80483b4:	f015 0f08 	tst.w	r5, #8
 80483b8:	d002      	beq.n	80483c0 <I2C_Slave_ISR_IT+0xfc>
 80483ba:	f016 0f08 	tst.w	r6, #8
 80483be:	d118      	bne.n	80483f2 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80483c0:	f015 0f02 	tst.w	r5, #2
 80483c4:	d0a7      	beq.n	8048316 <I2C_Slave_ISR_IT+0x52>
 80483c6:	f016 0f02 	tst.w	r6, #2
 80483ca:	d0a4      	beq.n	8048316 <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 80483cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80483ce:	b29b      	uxth	r3, r3
 80483d0:	b1a3      	cbz	r3, 80483fc <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80483d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80483d4:	6823      	ldr	r3, [r4, #0]
 80483d6:	7812      	ldrb	r2, [r2, #0]
 80483d8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80483da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80483dc:	3301      	adds	r3, #1
 80483de:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80483e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80483e2:	b29b      	uxth	r3, r3
 80483e4:	3b01      	subs	r3, #1
 80483e6:	b29b      	uxth	r3, r3
 80483e8:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80483ea:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80483ec:	3b01      	subs	r3, #1
 80483ee:	8523      	strh	r3, [r4, #40]	; 0x28
 80483f0:	e791      	b.n	8048316 <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80483f2:	4629      	mov	r1, r5
 80483f4:	4620      	mov	r0, r4
 80483f6:	f7ff fc5b 	bl	8047cb0 <I2C_ITAddrCplt>
 80483fa:	e78c      	b.n	8048316 <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80483fc:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8048400:	d001      	beq.n	8048406 <I2C_Slave_ISR_IT+0x142>
 8048402:	2f00      	cmp	r7, #0
 8048404:	d187      	bne.n	8048316 <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 8048406:	4620      	mov	r0, r4
 8048408:	f7ff fca2 	bl	8047d50 <I2C_ITSlaveSeqCplt>
 804840c:	e783      	b.n	8048316 <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 804840e:	2002      	movs	r0, #2
 8048410:	e784      	b.n	804831c <I2C_Slave_ISR_IT+0x58>
	...

08048414 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8048414:	2800      	cmp	r0, #0
 8048416:	d072      	beq.n	80484fe <HAL_I2C_Init+0xea>
{
 8048418:	b510      	push	{r4, lr}
 804841a:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 804841c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8048420:	b9db      	cbnz	r3, 804845a <HAL_I2C_Init+0x46>
    hi2c->Lock = HAL_UNLOCKED;
 8048422:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8048426:	4b37      	ldr	r3, [pc, #220]	; (8048504 <HAL_I2C_Init+0xf0>)
 8048428:	64c3      	str	r3, [r0, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 804842a:	4b37      	ldr	r3, [pc, #220]	; (8048508 <HAL_I2C_Init+0xf4>)
 804842c:	6503      	str	r3, [r0, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 804842e:	4b37      	ldr	r3, [pc, #220]	; (804850c <HAL_I2C_Init+0xf8>)
 8048430:	6543      	str	r3, [r0, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8048432:	4b37      	ldr	r3, [pc, #220]	; (8048510 <HAL_I2C_Init+0xfc>)
 8048434:	6583      	str	r3, [r0, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8048436:	4b37      	ldr	r3, [pc, #220]	; (8048514 <HAL_I2C_Init+0x100>)
 8048438:	65c3      	str	r3, [r0, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 804843a:	4b37      	ldr	r3, [pc, #220]	; (8048518 <HAL_I2C_Init+0x104>)
 804843c:	6603      	str	r3, [r0, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 804843e:	4b37      	ldr	r3, [pc, #220]	; (804851c <HAL_I2C_Init+0x108>)
 8048440:	6643      	str	r3, [r0, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8048442:	4b37      	ldr	r3, [pc, #220]	; (8048520 <HAL_I2C_Init+0x10c>)
 8048444:	6683      	str	r3, [r0, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8048446:	4b37      	ldr	r3, [pc, #220]	; (8048524 <HAL_I2C_Init+0x110>)
 8048448:	66c3      	str	r3, [r0, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 804844a:	4b37      	ldr	r3, [pc, #220]	; (8048528 <HAL_I2C_Init+0x114>)
 804844c:	6703      	str	r3, [r0, #112]	; 0x70
    if (hi2c->MspInitCallback == NULL)
 804844e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8048450:	2b00      	cmp	r3, #0
 8048452:	d046      	beq.n	80484e2 <HAL_I2C_Init+0xce>
    hi2c->MspInitCallback(hi2c);
 8048454:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8048456:	4620      	mov	r0, r4
 8048458:	4798      	blx	r3
  hi2c->State = HAL_I2C_STATE_BUSY;
 804845a:	2324      	movs	r3, #36	; 0x24
 804845c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8048460:	6822      	ldr	r2, [r4, #0]
 8048462:	6813      	ldr	r3, [r2, #0]
 8048464:	f023 0301 	bic.w	r3, r3, #1
 8048468:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 804846a:	6863      	ldr	r3, [r4, #4]
 804846c:	6822      	ldr	r2, [r4, #0]
 804846e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8048472:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8048474:	6822      	ldr	r2, [r4, #0]
 8048476:	6893      	ldr	r3, [r2, #8]
 8048478:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804847c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 804847e:	68e3      	ldr	r3, [r4, #12]
 8048480:	2b01      	cmp	r3, #1
 8048482:	d031      	beq.n	80484e8 <HAL_I2C_Init+0xd4>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8048484:	68a3      	ldr	r3, [r4, #8]
 8048486:	6822      	ldr	r2, [r4, #0]
 8048488:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 804848c:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 804848e:	68e3      	ldr	r3, [r4, #12]
 8048490:	2b02      	cmp	r3, #2
 8048492:	d02f      	beq.n	80484f4 <HAL_I2C_Init+0xe0>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8048494:	6822      	ldr	r2, [r4, #0]
 8048496:	6853      	ldr	r3, [r2, #4]
 8048498:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 804849c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80484a0:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80484a2:	6822      	ldr	r2, [r4, #0]
 80484a4:	68d3      	ldr	r3, [r2, #12]
 80484a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80484aa:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80484ac:	6923      	ldr	r3, [r4, #16]
 80484ae:	6962      	ldr	r2, [r4, #20]
 80484b0:	4313      	orrs	r3, r2
 80484b2:	69a1      	ldr	r1, [r4, #24]
 80484b4:	6822      	ldr	r2, [r4, #0]
 80484b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80484ba:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80484bc:	69e3      	ldr	r3, [r4, #28]
 80484be:	6a21      	ldr	r1, [r4, #32]
 80484c0:	6822      	ldr	r2, [r4, #0]
 80484c2:	430b      	orrs	r3, r1
 80484c4:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80484c6:	6822      	ldr	r2, [r4, #0]
 80484c8:	6813      	ldr	r3, [r2, #0]
 80484ca:	f043 0301 	orr.w	r3, r3, #1
 80484ce:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80484d0:	2000      	movs	r0, #0
 80484d2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80484d4:	2320      	movs	r3, #32
 80484d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80484da:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80484dc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80484e0:	bd10      	pop	{r4, pc}
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80484e2:	4b12      	ldr	r3, [pc, #72]	; (804852c <HAL_I2C_Init+0x118>)
 80484e4:	6743      	str	r3, [r0, #116]	; 0x74
 80484e6:	e7b5      	b.n	8048454 <HAL_I2C_Init+0x40>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80484e8:	68a3      	ldr	r3, [r4, #8]
 80484ea:	6822      	ldr	r2, [r4, #0]
 80484ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80484f0:	6093      	str	r3, [r2, #8]
 80484f2:	e7cc      	b.n	804848e <HAL_I2C_Init+0x7a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80484f4:	6823      	ldr	r3, [r4, #0]
 80484f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80484fa:	605a      	str	r2, [r3, #4]
 80484fc:	e7ca      	b.n	8048494 <HAL_I2C_Init+0x80>
    return HAL_ERROR;
 80484fe:	2001      	movs	r0, #1
}
 8048500:	4770      	bx	lr
 8048502:	bf00      	nop
 8048504:	08047ae9 	.word	0x08047ae9
 8048508:	08047aeb 	.word	0x08047aeb
 804850c:	08047aed 	.word	0x08047aed
 8048510:	08047aef 	.word	0x08047aef
 8048514:	08047af3 	.word	0x08047af3
 8048518:	08047af5 	.word	0x08047af5
 804851c:	08047af7 	.word	0x08047af7
 8048520:	08047af9 	.word	0x08047af9
 8048524:	08047afb 	.word	0x08047afb
 8048528:	08047af1 	.word	0x08047af1
 804852c:	08041925 	.word	0x08041925

08048530 <HAL_I2C_RegisterCallback>:
{
 8048530:	4603      	mov	r3, r0
  if (pCallback == NULL)
 8048532:	b1ea      	cbz	r2, 8048570 <HAL_I2C_RegisterCallback+0x40>
{
 8048534:	b410      	push	{r4}
 8048536:	4614      	mov	r4, r2
  __HAL_LOCK(hi2c);
 8048538:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 804853c:	2a01      	cmp	r2, #1
 804853e:	d05d      	beq.n	80485fc <HAL_I2C_RegisterCallback+0xcc>
 8048540:	2201      	movs	r2, #1
 8048542:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if (HAL_I2C_STATE_READY == hi2c->State)
 8048546:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 804854a:	b2d2      	uxtb	r2, r2
 804854c:	2a20      	cmp	r2, #32
 804854e:	d015      	beq.n	804857c <HAL_I2C_RegisterCallback+0x4c>
  else if (HAL_I2C_STATE_RESET == hi2c->State)
 8048550:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8048554:	f002 00ff 	and.w	r0, r2, #255	; 0xff
 8048558:	2a00      	cmp	r2, #0
 804855a:	d144      	bne.n	80485e6 <HAL_I2C_RegisterCallback+0xb6>
    switch (CallbackID)
 804855c:	2909      	cmp	r1, #9
 804855e:	d03e      	beq.n	80485de <HAL_I2C_RegisterCallback+0xae>
 8048560:	290a      	cmp	r1, #10
 8048562:	d03e      	beq.n	80485e2 <HAL_I2C_RegisterCallback+0xb2>
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8048564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8048566:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 804856a:	645a      	str	r2, [r3, #68]	; 0x44
        status =  HAL_ERROR;
 804856c:	2001      	movs	r0, #1
        break;
 804856e:	e03f      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8048570:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8048572:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8048576:	6442      	str	r2, [r0, #68]	; 0x44
    return HAL_ERROR;
 8048578:	2001      	movs	r0, #1
}
 804857a:	4770      	bx	lr
    switch (CallbackID)
 804857c:	290a      	cmp	r1, #10
 804857e:	d828      	bhi.n	80485d2 <HAL_I2C_RegisterCallback+0xa2>
 8048580:	e8df f001 	tbb	[pc, r1]
 8048584:	0f0c0906 	.word	0x0f0c0906
 8048588:	1b181512 	.word	0x1b181512
 804858c:	211e      	.short	0x211e
 804858e:	24          	.byte	0x24
 804858f:	00          	.byte	0x00
        hi2c->MasterTxCpltCallback = pCallback;
 8048590:	64c4      	str	r4, [r0, #76]	; 0x4c
  HAL_StatusTypeDef status = HAL_OK;
 8048592:	4608      	mov	r0, r1
        break;
 8048594:	e02c      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
        hi2c->MasterRxCpltCallback = pCallback;
 8048596:	6504      	str	r4, [r0, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8048598:	2000      	movs	r0, #0
        break;
 804859a:	e029      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
        hi2c->SlaveTxCpltCallback = pCallback;
 804859c:	6544      	str	r4, [r0, #84]	; 0x54
  HAL_StatusTypeDef status = HAL_OK;
 804859e:	2000      	movs	r0, #0
        break;
 80485a0:	e026      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
        hi2c->SlaveRxCpltCallback = pCallback;
 80485a2:	6584      	str	r4, [r0, #88]	; 0x58
  HAL_StatusTypeDef status = HAL_OK;
 80485a4:	2000      	movs	r0, #0
        break;
 80485a6:	e023      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
        hi2c->ListenCpltCallback = pCallback;
 80485a8:	65c4      	str	r4, [r0, #92]	; 0x5c
  HAL_StatusTypeDef status = HAL_OK;
 80485aa:	2000      	movs	r0, #0
        break;
 80485ac:	e020      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
        hi2c->MemTxCpltCallback = pCallback;
 80485ae:	6604      	str	r4, [r0, #96]	; 0x60
  HAL_StatusTypeDef status = HAL_OK;
 80485b0:	2000      	movs	r0, #0
        break;
 80485b2:	e01d      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
        hi2c->MemRxCpltCallback = pCallback;
 80485b4:	6644      	str	r4, [r0, #100]	; 0x64
  HAL_StatusTypeDef status = HAL_OK;
 80485b6:	2000      	movs	r0, #0
        break;
 80485b8:	e01a      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
        hi2c->ErrorCallback = pCallback;
 80485ba:	6684      	str	r4, [r0, #104]	; 0x68
  HAL_StatusTypeDef status = HAL_OK;
 80485bc:	2000      	movs	r0, #0
        break;
 80485be:	e017      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
        hi2c->AbortCpltCallback = pCallback;
 80485c0:	66c4      	str	r4, [r0, #108]	; 0x6c
  HAL_StatusTypeDef status = HAL_OK;
 80485c2:	2000      	movs	r0, #0
        break;
 80485c4:	e014      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
        hi2c->MspInitCallback = pCallback;
 80485c6:	6744      	str	r4, [r0, #116]	; 0x74
  HAL_StatusTypeDef status = HAL_OK;
 80485c8:	2000      	movs	r0, #0
        break;
 80485ca:	e011      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
        hi2c->MspDeInitCallback = pCallback;
 80485cc:	6784      	str	r4, [r0, #120]	; 0x78
  HAL_StatusTypeDef status = HAL_OK;
 80485ce:	2000      	movs	r0, #0
        break;
 80485d0:	e00e      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 80485d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80485d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80485d8:	6442      	str	r2, [r0, #68]	; 0x44
        status =  HAL_ERROR;
 80485da:	2001      	movs	r0, #1
        break;
 80485dc:	e008      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
        hi2c->MspInitCallback = pCallback;
 80485de:	675c      	str	r4, [r3, #116]	; 0x74
        break;
 80485e0:	e006      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
        hi2c->MspDeInitCallback = pCallback;
 80485e2:	679c      	str	r4, [r3, #120]	; 0x78
        break;
 80485e4:	e004      	b.n	80485f0 <HAL_I2C_RegisterCallback+0xc0>
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 80485e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80485e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80485ec:	645a      	str	r2, [r3, #68]	; 0x44
    status =  HAL_ERROR;
 80485ee:	2001      	movs	r0, #1
  __HAL_UNLOCK(hi2c);
 80485f0:	2200      	movs	r2, #0
 80485f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80485f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80485fa:	4770      	bx	lr
  __HAL_LOCK(hi2c);
 80485fc:	2002      	movs	r0, #2
 80485fe:	e7fa      	b.n	80485f6 <HAL_I2C_RegisterCallback+0xc6>

08048600 <HAL_I2C_Mem_Write>:
{
 8048600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8048604:	b083      	sub	sp, #12
 8048606:	460e      	mov	r6, r1
 8048608:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 804860c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 804860e:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 8048612:	b2c9      	uxtb	r1, r1
 8048614:	2920      	cmp	r1, #32
 8048616:	f040 80bb 	bne.w	8048790 <HAL_I2C_Mem_Write+0x190>
 804861a:	4604      	mov	r4, r0
 804861c:	4690      	mov	r8, r2
 804861e:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8048620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8048622:	b1cb      	cbz	r3, 8048658 <HAL_I2C_Mem_Write+0x58>
 8048624:	f1ba 0f00 	cmp.w	sl, #0
 8048628:	d016      	beq.n	8048658 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 804862a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 804862e:	2b01      	cmp	r3, #1
 8048630:	f000 80b2 	beq.w	8048798 <HAL_I2C_Mem_Write+0x198>
 8048634:	f04f 0b01 	mov.w	fp, #1
 8048638:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 804863c:	f7fd fdae 	bl	804619c <HAL_GetTick>
 8048640:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8048642:	9000      	str	r0, [sp, #0]
 8048644:	2319      	movs	r3, #25
 8048646:	465a      	mov	r2, fp
 8048648:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 804864c:	4620      	mov	r0, r4
 804864e:	f7ff fc33 	bl	8047eb8 <I2C_WaitOnFlagUntilTimeout>
 8048652:	b130      	cbz	r0, 8048662 <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 8048654:	2001      	movs	r0, #1
 8048656:	e09c      	b.n	8048792 <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8048658:	f44f 7300 	mov.w	r3, #512	; 0x200
 804865c:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 804865e:	2001      	movs	r0, #1
 8048660:	e097      	b.n	8048792 <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8048662:	2321      	movs	r3, #33	; 0x21
 8048664:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8048668:	2340      	movs	r3, #64	; 0x40
 804866a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 804866e:	2300      	movs	r3, #0
 8048670:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8048672:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8048674:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8048676:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 804867a:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 804867c:	9701      	str	r7, [sp, #4]
 804867e:	9500      	str	r5, [sp, #0]
 8048680:	464b      	mov	r3, r9
 8048682:	4642      	mov	r2, r8
 8048684:	4631      	mov	r1, r6
 8048686:	4620      	mov	r0, r4
 8048688:	f7ff fc42 	bl	8047f10 <I2C_RequestMemoryWrite>
 804868c:	b970      	cbnz	r0, 80486ac <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 804868e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8048690:	b29b      	uxth	r3, r3
 8048692:	2bff      	cmp	r3, #255	; 0xff
 8048694:	d90f      	bls.n	80486b6 <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8048696:	22ff      	movs	r2, #255	; 0xff
 8048698:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 804869a:	2300      	movs	r3, #0
 804869c:	9300      	str	r3, [sp, #0]
 804869e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80486a2:	4631      	mov	r1, r6
 80486a4:	4620      	mov	r0, r4
 80486a6:	f7ff fa5e 	bl	8047b66 <I2C_TransferConfig>
 80486aa:	e021      	b.n	80486f0 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 80486ac:	2300      	movs	r3, #0
 80486ae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80486b2:	4658      	mov	r0, fp
 80486b4:	e06d      	b.n	8048792 <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 80486b6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80486b8:	b292      	uxth	r2, r2
 80486ba:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80486bc:	2300      	movs	r3, #0
 80486be:	9300      	str	r3, [sp, #0]
 80486c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80486c4:	b2d2      	uxtb	r2, r2
 80486c6:	4631      	mov	r1, r6
 80486c8:	4620      	mov	r0, r4
 80486ca:	f7ff fa4c 	bl	8047b66 <I2C_TransferConfig>
 80486ce:	e00f      	b.n	80486f0 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80486d0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80486d2:	b292      	uxth	r2, r2
 80486d4:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80486d6:	2300      	movs	r3, #0
 80486d8:	9300      	str	r3, [sp, #0]
 80486da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80486de:	b2d2      	uxtb	r2, r2
 80486e0:	4631      	mov	r1, r6
 80486e2:	4620      	mov	r0, r4
 80486e4:	f7ff fa3f 	bl	8047b66 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80486e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80486ea:	b29b      	uxth	r3, r3
 80486ec:	2b00      	cmp	r3, #0
 80486ee:	d033      	beq.n	8048758 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80486f0:	463a      	mov	r2, r7
 80486f2:	4629      	mov	r1, r5
 80486f4:	4620      	mov	r0, r4
 80486f6:	f7ff fbb4 	bl	8047e62 <I2C_WaitOnTXISFlagUntilTimeout>
 80486fa:	2800      	cmp	r0, #0
 80486fc:	d14e      	bne.n	804879c <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80486fe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8048700:	6823      	ldr	r3, [r4, #0]
 8048702:	7812      	ldrb	r2, [r2, #0]
 8048704:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 8048706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8048708:	3301      	adds	r3, #1
 804870a:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 804870c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 804870e:	b29b      	uxth	r3, r3
 8048710:	3b01      	subs	r3, #1
 8048712:	b29b      	uxth	r3, r3
 8048714:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8048716:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8048718:	3b01      	subs	r3, #1
 804871a:	b29b      	uxth	r3, r3
 804871c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 804871e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8048720:	b292      	uxth	r2, r2
 8048722:	2a00      	cmp	r2, #0
 8048724:	d0e0      	beq.n	80486e8 <HAL_I2C_Mem_Write+0xe8>
 8048726:	2b00      	cmp	r3, #0
 8048728:	d1de      	bne.n	80486e8 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 804872a:	9700      	str	r7, [sp, #0]
 804872c:	462b      	mov	r3, r5
 804872e:	2200      	movs	r2, #0
 8048730:	2180      	movs	r1, #128	; 0x80
 8048732:	4620      	mov	r0, r4
 8048734:	f7ff fbc0 	bl	8047eb8 <I2C_WaitOnFlagUntilTimeout>
 8048738:	bb90      	cbnz	r0, 80487a0 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 804873a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 804873c:	b29b      	uxth	r3, r3
 804873e:	2bff      	cmp	r3, #255	; 0xff
 8048740:	d9c6      	bls.n	80486d0 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8048742:	22ff      	movs	r2, #255	; 0xff
 8048744:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8048746:	2300      	movs	r3, #0
 8048748:	9300      	str	r3, [sp, #0]
 804874a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 804874e:	4631      	mov	r1, r6
 8048750:	4620      	mov	r0, r4
 8048752:	f7ff fa08 	bl	8047b66 <I2C_TransferConfig>
 8048756:	e7c7      	b.n	80486e8 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8048758:	463a      	mov	r2, r7
 804875a:	4629      	mov	r1, r5
 804875c:	4620      	mov	r0, r4
 804875e:	f7ff fc51 	bl	8048004 <I2C_WaitOnSTOPFlagUntilTimeout>
 8048762:	b9f8      	cbnz	r0, 80487a4 <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8048764:	6823      	ldr	r3, [r4, #0]
 8048766:	2220      	movs	r2, #32
 8048768:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 804876a:	6821      	ldr	r1, [r4, #0]
 804876c:	684b      	ldr	r3, [r1, #4]
 804876e:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8048772:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8048776:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 804877a:	f023 0301 	bic.w	r3, r3, #1
 804877e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8048780:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8048784:	2300      	movs	r3, #0
 8048786:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 804878a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 804878e:	e000      	b.n	8048792 <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8048790:	2002      	movs	r0, #2
}
 8048792:	b003      	add	sp, #12
 8048794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8048798:	2002      	movs	r0, #2
 804879a:	e7fa      	b.n	8048792 <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 804879c:	2001      	movs	r0, #1
 804879e:	e7f8      	b.n	8048792 <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 80487a0:	2001      	movs	r0, #1
 80487a2:	e7f6      	b.n	8048792 <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 80487a4:	2001      	movs	r0, #1
 80487a6:	e7f4      	b.n	8048792 <HAL_I2C_Mem_Write+0x192>

080487a8 <HAL_I2C_Mem_Read>:
{
 80487a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80487ac:	b083      	sub	sp, #12
 80487ae:	460e      	mov	r6, r1
 80487b0:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80487b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80487b6:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80487ba:	b2c9      	uxtb	r1, r1
 80487bc:	2920      	cmp	r1, #32
 80487be:	f040 80bc 	bne.w	804893a <HAL_I2C_Mem_Read+0x192>
 80487c2:	4604      	mov	r4, r0
 80487c4:	4690      	mov	r8, r2
 80487c6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80487c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80487ca:	b1cb      	cbz	r3, 8048800 <HAL_I2C_Mem_Read+0x58>
 80487cc:	f1ba 0f00 	cmp.w	sl, #0
 80487d0:	d016      	beq.n	8048800 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 80487d2:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80487d6:	2b01      	cmp	r3, #1
 80487d8:	f000 80b3 	beq.w	8048942 <HAL_I2C_Mem_Read+0x19a>
 80487dc:	f04f 0b01 	mov.w	fp, #1
 80487e0:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80487e4:	f7fd fcda 	bl	804619c <HAL_GetTick>
 80487e8:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80487ea:	9000      	str	r0, [sp, #0]
 80487ec:	2319      	movs	r3, #25
 80487ee:	465a      	mov	r2, fp
 80487f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80487f4:	4620      	mov	r0, r4
 80487f6:	f7ff fb5f 	bl	8047eb8 <I2C_WaitOnFlagUntilTimeout>
 80487fa:	b130      	cbz	r0, 804880a <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 80487fc:	2001      	movs	r0, #1
 80487fe:	e09d      	b.n	804893c <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8048800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8048804:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8048806:	2001      	movs	r0, #1
 8048808:	e098      	b.n	804893c <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 804880a:	2322      	movs	r3, #34	; 0x22
 804880c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8048810:	2340      	movs	r3, #64	; 0x40
 8048812:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8048816:	2300      	movs	r3, #0
 8048818:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 804881a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 804881c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 804881e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8048822:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8048824:	9701      	str	r7, [sp, #4]
 8048826:	9500      	str	r5, [sp, #0]
 8048828:	464b      	mov	r3, r9
 804882a:	4642      	mov	r2, r8
 804882c:	4631      	mov	r1, r6
 804882e:	4620      	mov	r0, r4
 8048830:	f7ff fbac 	bl	8047f8c <I2C_RequestMemoryRead>
 8048834:	b970      	cbnz	r0, 8048854 <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8048836:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8048838:	b29b      	uxth	r3, r3
 804883a:	2bff      	cmp	r3, #255	; 0xff
 804883c:	d90f      	bls.n	804885e <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 804883e:	22ff      	movs	r2, #255	; 0xff
 8048840:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8048842:	4b44      	ldr	r3, [pc, #272]	; (8048954 <HAL_I2C_Mem_Read+0x1ac>)
 8048844:	9300      	str	r3, [sp, #0]
 8048846:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 804884a:	4631      	mov	r1, r6
 804884c:	4620      	mov	r0, r4
 804884e:	f7ff f98a 	bl	8047b66 <I2C_TransferConfig>
 8048852:	e021      	b.n	8048898 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 8048854:	2300      	movs	r3, #0
 8048856:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 804885a:	4658      	mov	r0, fp
 804885c:	e06e      	b.n	804893c <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 804885e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8048860:	b292      	uxth	r2, r2
 8048862:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8048864:	4b3b      	ldr	r3, [pc, #236]	; (8048954 <HAL_I2C_Mem_Read+0x1ac>)
 8048866:	9300      	str	r3, [sp, #0]
 8048868:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 804886c:	b2d2      	uxtb	r2, r2
 804886e:	4631      	mov	r1, r6
 8048870:	4620      	mov	r0, r4
 8048872:	f7ff f978 	bl	8047b66 <I2C_TransferConfig>
 8048876:	e00f      	b.n	8048898 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8048878:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 804887a:	b292      	uxth	r2, r2
 804887c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 804887e:	2300      	movs	r3, #0
 8048880:	9300      	str	r3, [sp, #0]
 8048882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8048886:	b2d2      	uxtb	r2, r2
 8048888:	4631      	mov	r1, r6
 804888a:	4620      	mov	r0, r4
 804888c:	f7ff f96b 	bl	8047b66 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8048890:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8048892:	b29b      	uxth	r3, r3
 8048894:	2b00      	cmp	r3, #0
 8048896:	d034      	beq.n	8048902 <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8048898:	9700      	str	r7, [sp, #0]
 804889a:	462b      	mov	r3, r5
 804889c:	2200      	movs	r2, #0
 804889e:	2104      	movs	r1, #4
 80488a0:	4620      	mov	r0, r4
 80488a2:	f7ff fb09 	bl	8047eb8 <I2C_WaitOnFlagUntilTimeout>
 80488a6:	2800      	cmp	r0, #0
 80488a8:	d14d      	bne.n	8048946 <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80488aa:	6823      	ldr	r3, [r4, #0]
 80488ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80488ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80488b0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80488b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80488b4:	3301      	adds	r3, #1
 80488b6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80488b8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80488ba:	3a01      	subs	r2, #1
 80488bc:	b292      	uxth	r2, r2
 80488be:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80488c0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80488c2:	b29b      	uxth	r3, r3
 80488c4:	3b01      	subs	r3, #1
 80488c6:	b29b      	uxth	r3, r3
 80488c8:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80488ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80488cc:	b29b      	uxth	r3, r3
 80488ce:	2b00      	cmp	r3, #0
 80488d0:	d0de      	beq.n	8048890 <HAL_I2C_Mem_Read+0xe8>
 80488d2:	2a00      	cmp	r2, #0
 80488d4:	d1dc      	bne.n	8048890 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80488d6:	9700      	str	r7, [sp, #0]
 80488d8:	462b      	mov	r3, r5
 80488da:	2180      	movs	r1, #128	; 0x80
 80488dc:	4620      	mov	r0, r4
 80488de:	f7ff faeb 	bl	8047eb8 <I2C_WaitOnFlagUntilTimeout>
 80488e2:	bb90      	cbnz	r0, 804894a <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80488e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80488e6:	b29b      	uxth	r3, r3
 80488e8:	2bff      	cmp	r3, #255	; 0xff
 80488ea:	d9c5      	bls.n	8048878 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80488ec:	22ff      	movs	r2, #255	; 0xff
 80488ee:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80488f0:	2300      	movs	r3, #0
 80488f2:	9300      	str	r3, [sp, #0]
 80488f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80488f8:	4631      	mov	r1, r6
 80488fa:	4620      	mov	r0, r4
 80488fc:	f7ff f933 	bl	8047b66 <I2C_TransferConfig>
 8048900:	e7c6      	b.n	8048890 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8048902:	463a      	mov	r2, r7
 8048904:	4629      	mov	r1, r5
 8048906:	4620      	mov	r0, r4
 8048908:	f7ff fb7c 	bl	8048004 <I2C_WaitOnSTOPFlagUntilTimeout>
 804890c:	b9f8      	cbnz	r0, 804894e <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 804890e:	6823      	ldr	r3, [r4, #0]
 8048910:	2220      	movs	r2, #32
 8048912:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8048914:	6821      	ldr	r1, [r4, #0]
 8048916:	684b      	ldr	r3, [r1, #4]
 8048918:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 804891c:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8048920:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8048924:	f023 0301 	bic.w	r3, r3, #1
 8048928:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 804892a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 804892e:	2300      	movs	r3, #0
 8048930:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8048934:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8048938:	e000      	b.n	804893c <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 804893a:	2002      	movs	r0, #2
}
 804893c:	b003      	add	sp, #12
 804893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8048942:	2002      	movs	r0, #2
 8048944:	e7fa      	b.n	804893c <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 8048946:	2001      	movs	r0, #1
 8048948:	e7f8      	b.n	804893c <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 804894a:	2001      	movs	r0, #1
 804894c:	e7f6      	b.n	804893c <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 804894e:	2001      	movs	r0, #1
 8048950:	e7f4      	b.n	804893c <HAL_I2C_Mem_Read+0x194>
 8048952:	bf00      	nop
 8048954:	80002400 	.word	0x80002400

08048958 <HAL_I2C_EV_IRQHandler>:
{
 8048958:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 804895a:	6803      	ldr	r3, [r0, #0]
 804895c:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 804895e:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8048960:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8048962:	b103      	cbz	r3, 8048966 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8048964:	4798      	blx	r3
}
 8048966:	bd08      	pop	{r3, pc}

08048968 <HAL_I2C_ER_IRQHandler>:
{
 8048968:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 804896a:	6802      	ldr	r2, [r0, #0]
 804896c:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 804896e:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8048970:	f413 7f80 	tst.w	r3, #256	; 0x100
 8048974:	d009      	beq.n	804898a <HAL_I2C_ER_IRQHandler+0x22>
 8048976:	f011 0f80 	tst.w	r1, #128	; 0x80
 804897a:	d006      	beq.n	804898a <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 804897c:	6c44      	ldr	r4, [r0, #68]	; 0x44
 804897e:	f044 0401 	orr.w	r4, r4, #1
 8048982:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8048984:	f44f 7480 	mov.w	r4, #256	; 0x100
 8048988:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 804898a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 804898e:	d00a      	beq.n	80489a6 <HAL_I2C_ER_IRQHandler+0x3e>
 8048990:	f011 0f80 	tst.w	r1, #128	; 0x80
 8048994:	d007      	beq.n	80489a6 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8048996:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8048998:	f042 0208 	orr.w	r2, r2, #8
 804899c:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 804899e:	6802      	ldr	r2, [r0, #0]
 80489a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80489a4:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80489a6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80489aa:	d00a      	beq.n	80489c2 <HAL_I2C_ER_IRQHandler+0x5a>
 80489ac:	f011 0f80 	tst.w	r1, #128	; 0x80
 80489b0:	d007      	beq.n	80489c2 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80489b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80489b4:	f043 0302 	orr.w	r3, r3, #2
 80489b8:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80489ba:	6803      	ldr	r3, [r0, #0]
 80489bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80489c0:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 80489c2:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80489c4:	f011 0f0b 	tst.w	r1, #11
 80489c8:	d100      	bne.n	80489cc <HAL_I2C_ER_IRQHandler+0x64>
}
 80489ca:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 80489cc:	f7ff fb42 	bl	8048054 <I2C_ITError>
}
 80489d0:	e7fb      	b.n	80489ca <HAL_I2C_ER_IRQHandler+0x62>

080489d2 <HAL_I2C_GetState>:
  return hi2c->State;
 80489d2:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 80489d6:	4770      	bx	lr

080489d8 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 80489d8:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
 80489da:	4770      	bx	lr

080489dc <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80489dc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80489e0:	b2db      	uxtb	r3, r3
 80489e2:	2b20      	cmp	r3, #32
 80489e4:	d124      	bne.n	8048a30 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80489e6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80489ea:	2b01      	cmp	r3, #1
 80489ec:	d022      	beq.n	8048a34 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 80489ee:	2301      	movs	r3, #1
 80489f0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80489f4:	2324      	movs	r3, #36	; 0x24
 80489f6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80489fa:	6802      	ldr	r2, [r0, #0]
 80489fc:	6813      	ldr	r3, [r2, #0]
 80489fe:	f023 0301 	bic.w	r3, r3, #1
 8048a02:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8048a04:	6802      	ldr	r2, [r0, #0]
 8048a06:	6813      	ldr	r3, [r2, #0]
 8048a08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8048a0c:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8048a0e:	6802      	ldr	r2, [r0, #0]
 8048a10:	6813      	ldr	r3, [r2, #0]
 8048a12:	4319      	orrs	r1, r3
 8048a14:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8048a16:	6802      	ldr	r2, [r0, #0]
 8048a18:	6813      	ldr	r3, [r2, #0]
 8048a1a:	f043 0301 	orr.w	r3, r3, #1
 8048a1e:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8048a20:	2320      	movs	r3, #32
 8048a22:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8048a26:	2300      	movs	r3, #0
 8048a28:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8048a2c:	4618      	mov	r0, r3
 8048a2e:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8048a30:	2002      	movs	r0, #2
 8048a32:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8048a34:	2002      	movs	r0, #2
  }
}
 8048a36:	4770      	bx	lr

08048a38 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8048a38:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8048a3c:	b2db      	uxtb	r3, r3
 8048a3e:	2b20      	cmp	r3, #32
 8048a40:	d122      	bne.n	8048a88 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8048a42:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8048a46:	2b01      	cmp	r3, #1
 8048a48:	d020      	beq.n	8048a8c <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8048a4a:	2301      	movs	r3, #1
 8048a4c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8048a50:	2324      	movs	r3, #36	; 0x24
 8048a52:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8048a56:	6802      	ldr	r2, [r0, #0]
 8048a58:	6813      	ldr	r3, [r2, #0]
 8048a5a:	f023 0301 	bic.w	r3, r3, #1
 8048a5e:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8048a60:	6802      	ldr	r2, [r0, #0]
 8048a62:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8048a64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8048a68:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8048a6c:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8048a6e:	6802      	ldr	r2, [r0, #0]
 8048a70:	6813      	ldr	r3, [r2, #0]
 8048a72:	f043 0301 	orr.w	r3, r3, #1
 8048a76:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8048a78:	2320      	movs	r3, #32
 8048a7a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8048a7e:	2300      	movs	r3, #0
 8048a80:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8048a84:	4618      	mov	r0, r3
 8048a86:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8048a88:	2002      	movs	r0, #2
 8048a8a:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8048a8c:	2002      	movs	r0, #2
  }
}
 8048a8e:	4770      	bx	lr

08048a90 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8048a90:	b510      	push	{r4, lr}
 8048a92:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8048a94:	b9a0      	cbnz	r0, 8048ac0 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8048a96:	4b0f      	ldr	r3, [pc, #60]	; (8048ad4 <HAL_PWR_EnterSLEEPMode+0x44>)
 8048a98:	695b      	ldr	r3, [r3, #20]
 8048a9a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8048a9e:	d10a      	bne.n	8048ab6 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8048aa0:	4a0d      	ldr	r2, [pc, #52]	; (8048ad8 <HAL_PWR_EnterSLEEPMode+0x48>)
 8048aa2:	6913      	ldr	r3, [r2, #16]
 8048aa4:	f023 0304 	bic.w	r3, r3, #4
 8048aa8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8048aaa:	2c01      	cmp	r4, #1
 8048aac:	d010      	beq.n	8048ad0 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8048aae:	bf40      	sev
    __WFE();
 8048ab0:	bf20      	wfe
    __WFE();
 8048ab2:	bf20      	wfe
  }

}
 8048ab4:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8048ab6:	f000 f82d 	bl	8048b14 <HAL_PWREx_DisableLowPowerRunMode>
 8048aba:	2800      	cmp	r0, #0
 8048abc:	d0f0      	beq.n	8048aa0 <HAL_PWR_EnterSLEEPMode+0x10>
 8048abe:	e7f9      	b.n	8048ab4 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8048ac0:	4b04      	ldr	r3, [pc, #16]	; (8048ad4 <HAL_PWR_EnterSLEEPMode+0x44>)
 8048ac2:	695b      	ldr	r3, [r3, #20]
 8048ac4:	f413 7f00 	tst.w	r3, #512	; 0x200
 8048ac8:	d1ea      	bne.n	8048aa0 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8048aca:	f000 f81b 	bl	8048b04 <HAL_PWREx_EnableLowPowerRunMode>
 8048ace:	e7e7      	b.n	8048aa0 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8048ad0:	bf30      	wfi
 8048ad2:	e7ef      	b.n	8048ab4 <HAL_PWR_EnterSLEEPMode+0x24>
 8048ad4:	40007000 	.word	0x40007000
 8048ad8:	e000ed00 	.word	0xe000ed00

08048adc <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop 0 or Stop 1 mode with WFI instruction.
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8048adc:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));

  if (Regulator == PWR_LOWPOWERREGULATOR_ON)
 8048ade:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8048ae2:	d003      	beq.n	8048aec <HAL_PWR_EnterSTOPMode+0x10>
  {
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
  }
  else
  {
    HAL_PWREx_EnterSTOP0Mode(STOPEntry);
 8048ae4:	4608      	mov	r0, r1
 8048ae6:	f000 f843 	bl	8048b70 <HAL_PWREx_EnterSTOP0Mode>
  }
}
 8048aea:	bd08      	pop	{r3, pc}
    HAL_PWREx_EnterSTOP1Mode(STOPEntry);
 8048aec:	4608      	mov	r0, r1
 8048aee:	f000 f85b 	bl	8048ba8 <HAL_PWREx_EnterSTOP1Mode>
 8048af2:	e7fa      	b.n	8048aea <HAL_PWR_EnterSTOPMode+0xe>

08048af4 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8048af4:	4a02      	ldr	r2, [pc, #8]	; (8048b00 <HAL_PWREx_EnableVddIO2+0xc>)
 8048af6:	6853      	ldr	r3, [r2, #4]
 8048af8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8048afc:	6053      	str	r3, [r2, #4]
}
 8048afe:	4770      	bx	lr
 8048b00:	40007000 	.word	0x40007000

08048b04 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8048b04:	4a02      	ldr	r2, [pc, #8]	; (8048b10 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8048b06:	6813      	ldr	r3, [r2, #0]
 8048b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8048b0c:	6013      	str	r3, [r2, #0]
}
 8048b0e:	4770      	bx	lr
 8048b10:	40007000 	.word	0x40007000

08048b14 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8048b14:	4a12      	ldr	r2, [pc, #72]	; (8048b60 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 8048b16:	6813      	ldr	r3, [r2, #0]
 8048b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8048b1c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_REGLP_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8048b1e:	4b11      	ldr	r3, [pc, #68]	; (8048b64 <HAL_PWREx_DisableLowPowerRunMode+0x50>)
 8048b20:	681b      	ldr	r3, [r3, #0]
 8048b22:	095b      	lsrs	r3, r3, #5
 8048b24:	4a10      	ldr	r2, [pc, #64]	; (8048b68 <HAL_PWREx_DisableLowPowerRunMode+0x54>)
 8048b26:	fba2 2303 	umull	r2, r3, r2, r3
 8048b2a:	09da      	lsrs	r2, r3, #7
 8048b2c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8048b30:	fb03 f302 	mul.w	r3, r3, r2
 8048b34:	4a0d      	ldr	r2, [pc, #52]	; (8048b6c <HAL_PWREx_DisableLowPowerRunMode+0x58>)
 8048b36:	fba2 2303 	umull	r2, r3, r2, r3
 8048b3a:	08db      	lsrs	r3, r3, #3
 8048b3c:	3301      	adds	r3, #1

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8048b3e:	4a08      	ldr	r2, [pc, #32]	; (8048b60 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 8048b40:	6952      	ldr	r2, [r2, #20]
 8048b42:	f412 7f00 	tst.w	r2, #512	; 0x200
 8048b46:	d002      	beq.n	8048b4e <HAL_PWREx_DisableLowPowerRunMode+0x3a>
 8048b48:	b10b      	cbz	r3, 8048b4e <HAL_PWREx_DisableLowPowerRunMode+0x3a>
  {
    wait_loop_index--;
 8048b4a:	3b01      	subs	r3, #1
 8048b4c:	e7f7      	b.n	8048b3e <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8048b4e:	4b04      	ldr	r3, [pc, #16]	; (8048b60 <HAL_PWREx_DisableLowPowerRunMode+0x4c>)
 8048b50:	695b      	ldr	r3, [r3, #20]
 8048b52:	f413 7f00 	tst.w	r3, #512	; 0x200
 8048b56:	d101      	bne.n	8048b5c <HAL_PWREx_DisableLowPowerRunMode+0x48>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8048b58:	2000      	movs	r0, #0
 8048b5a:	4770      	bx	lr
    return HAL_TIMEOUT;
 8048b5c:	2003      	movs	r0, #3
}
 8048b5e:	4770      	bx	lr
 8048b60:	40007000 	.word	0x40007000
 8048b64:	20018060 	.word	0x20018060
 8048b68:	0a7c5ac5 	.word	0x0a7c5ac5
 8048b6c:	cccccccd 	.word	0xcccccccd

08048b70 <HAL_PWREx_EnterSTOP0Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP0);
 8048b70:	4a0b      	ldr	r2, [pc, #44]	; (8048ba0 <HAL_PWREx_EnterSTOP0Mode+0x30>)
 8048b72:	6813      	ldr	r3, [r2, #0]
 8048b74:	f023 0307 	bic.w	r3, r3, #7
 8048b78:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8048b7a:	4a0a      	ldr	r2, [pc, #40]	; (8048ba4 <HAL_PWREx_EnterSTOP0Mode+0x34>)
 8048b7c:	6913      	ldr	r3, [r2, #16]
 8048b7e:	f043 0304 	orr.w	r3, r3, #4
 8048b82:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8048b84:	2801      	cmp	r0, #1
 8048b86:	d008      	beq.n	8048b9a <HAL_PWREx_EnterSTOP0Mode+0x2a>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8048b88:	bf40      	sev
    __WFE();
 8048b8a:	bf20      	wfe
    __WFE();
 8048b8c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8048b8e:	4a05      	ldr	r2, [pc, #20]	; (8048ba4 <HAL_PWREx_EnterSTOP0Mode+0x34>)
 8048b90:	6913      	ldr	r3, [r2, #16]
 8048b92:	f023 0304 	bic.w	r3, r3, #4
 8048b96:	6113      	str	r3, [r2, #16]
}
 8048b98:	4770      	bx	lr
    __WFI();
 8048b9a:	bf30      	wfi
 8048b9c:	e7f7      	b.n	8048b8e <HAL_PWREx_EnterSTOP0Mode+0x1e>
 8048b9e:	bf00      	nop
 8048ba0:	40007000 	.word	0x40007000
 8048ba4:	e000ed00 	.word	0xe000ed00

08048ba8 <HAL_PWREx_EnterSTOP1Mode>:
{
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 1 mode with Low-Power Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP1);
 8048ba8:	4a0c      	ldr	r2, [pc, #48]	; (8048bdc <HAL_PWREx_EnterSTOP1Mode+0x34>)
 8048baa:	6813      	ldr	r3, [r2, #0]
 8048bac:	f023 0307 	bic.w	r3, r3, #7
 8048bb0:	f043 0301 	orr.w	r3, r3, #1
 8048bb4:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8048bb6:	4a0a      	ldr	r2, [pc, #40]	; (8048be0 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 8048bb8:	6913      	ldr	r3, [r2, #16]
 8048bba:	f043 0304 	orr.w	r3, r3, #4
 8048bbe:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8048bc0:	2801      	cmp	r0, #1
 8048bc2:	d008      	beq.n	8048bd6 <HAL_PWREx_EnterSTOP1Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8048bc4:	bf40      	sev
    __WFE();
 8048bc6:	bf20      	wfe
    __WFE();
 8048bc8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8048bca:	4a05      	ldr	r2, [pc, #20]	; (8048be0 <HAL_PWREx_EnterSTOP1Mode+0x38>)
 8048bcc:	6913      	ldr	r3, [r2, #16]
 8048bce:	f023 0304 	bic.w	r3, r3, #4
 8048bd2:	6113      	str	r3, [r2, #16]
}
 8048bd4:	4770      	bx	lr
    __WFI();
 8048bd6:	bf30      	wfi
 8048bd8:	e7f7      	b.n	8048bca <HAL_PWREx_EnterSTOP1Mode+0x22>
 8048bda:	bf00      	nop
 8048bdc:	40007000 	.word	0x40007000
 8048be0:	e000ed00 	.word	0xe000ed00

08048be4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8048be4:	4a31      	ldr	r2, [pc, #196]	; (8048cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8048be6:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8048be8:	68d2      	ldr	r2, [r2, #12]
 8048bea:	f002 0203 	and.w	r2, r2, #3

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8048bee:	f013 030c 	ands.w	r3, r3, #12
 8048bf2:	d00a      	beq.n	8048c0a <HAL_RCC_GetSysClockFreq+0x26>
 8048bf4:	2b0c      	cmp	r3, #12
 8048bf6:	d006      	beq.n	8048c06 <HAL_RCC_GetSysClockFreq+0x22>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8048bf8:	2b04      	cmp	r3, #4
 8048bfa:	d01f      	beq.n	8048c3c <HAL_RCC_GetSysClockFreq+0x58>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8048bfc:	2b08      	cmp	r3, #8
 8048bfe:	d020      	beq.n	8048c42 <HAL_RCC_GetSysClockFreq+0x5e>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8048c00:	2000      	movs	r0, #0
 8048c02:	4601      	mov	r1, r0
 8048c04:	e010      	b.n	8048c28 <HAL_RCC_GetSysClockFreq+0x44>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8048c06:	2a01      	cmp	r2, #1
 8048c08:	d1f6      	bne.n	8048bf8 <HAL_RCC_GetSysClockFreq+0x14>
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8048c0a:	4a28      	ldr	r2, [pc, #160]	; (8048cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8048c0c:	6812      	ldr	r2, [r2, #0]
 8048c0e:	f012 0f08 	tst.w	r2, #8
 8048c12:	d10c      	bne.n	8048c2e <HAL_RCC_GetSysClockFreq+0x4a>
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8048c14:	4a25      	ldr	r2, [pc, #148]	; (8048cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8048c16:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8048c1a:	f3c2 2203 	ubfx	r2, r2, #8, #4
    msirange = MSIRangeTable[msirange];
 8048c1e:	4924      	ldr	r1, [pc, #144]	; (8048cb0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8048c20:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8048c24:	b143      	cbz	r3, 8048c38 <HAL_RCC_GetSysClockFreq+0x54>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8048c26:	2000      	movs	r0, #0
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8048c28:	2b0c      	cmp	r3, #12
 8048c2a:	d00d      	beq.n	8048c48 <HAL_RCC_GetSysClockFreq+0x64>
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
    sysclockfreq = pllvco / pllr;
  }

  return sysclockfreq;
}
 8048c2c:	4770      	bx	lr
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8048c2e:	4a1f      	ldr	r2, [pc, #124]	; (8048cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8048c30:	6812      	ldr	r2, [r2, #0]
 8048c32:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8048c36:	e7f2      	b.n	8048c1e <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = msirange;
 8048c38:	4608      	mov	r0, r1
 8048c3a:	e7f5      	b.n	8048c28 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSI_VALUE;
 8048c3c:	481d      	ldr	r0, [pc, #116]	; (8048cb4 <HAL_RCC_GetSysClockFreq+0xd0>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8048c3e:	2100      	movs	r1, #0
 8048c40:	e7f2      	b.n	8048c28 <HAL_RCC_GetSysClockFreq+0x44>
    sysclockfreq = HSE_VALUE;
 8048c42:	481d      	ldr	r0, [pc, #116]	; (8048cb8 <HAL_RCC_GetSysClockFreq+0xd4>)
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8048c44:	2100      	movs	r1, #0
 8048c46:	e7ef      	b.n	8048c28 <HAL_RCC_GetSysClockFreq+0x44>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8048c48:	4b18      	ldr	r3, [pc, #96]	; (8048cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8048c4a:	68da      	ldr	r2, [r3, #12]
 8048c4c:	f002 0203 	and.w	r2, r2, #3
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8048c50:	68db      	ldr	r3, [r3, #12]
 8048c52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8048c56:	3301      	adds	r3, #1
    switch (pllsource)
 8048c58:	2a02      	cmp	r2, #2
 8048c5a:	d00a      	beq.n	8048c72 <HAL_RCC_GetSysClockFreq+0x8e>
 8048c5c:	2a03      	cmp	r2, #3
 8048c5e:	d01a      	beq.n	8048c96 <HAL_RCC_GetSysClockFreq+0xb2>
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8048c60:	fbb1 f3f3 	udiv	r3, r1, r3
 8048c64:	4a11      	ldr	r2, [pc, #68]	; (8048cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8048c66:	68d0      	ldr	r0, [r2, #12]
 8048c68:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8048c6c:	fb00 f003 	mul.w	r0, r0, r3
        break;
 8048c70:	e008      	b.n	8048c84 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8048c72:	4810      	ldr	r0, [pc, #64]	; (8048cb4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8048c74:	fbb0 f3f3 	udiv	r3, r0, r3
 8048c78:	4a0c      	ldr	r2, [pc, #48]	; (8048cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8048c7a:	68d0      	ldr	r0, [r2, #12]
 8048c7c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8048c80:	fb00 f003 	mul.w	r0, r0, r3
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8048c84:	4b09      	ldr	r3, [pc, #36]	; (8048cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8048c86:	68db      	ldr	r3, [r3, #12]
 8048c88:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8048c8c:	3301      	adds	r3, #1
 8048c8e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco / pllr;
 8048c90:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8048c94:	e7ca      	b.n	8048c2c <HAL_RCC_GetSysClockFreq+0x48>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8048c96:	4808      	ldr	r0, [pc, #32]	; (8048cb8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8048c98:	fbb0 f3f3 	udiv	r3, r0, r3
 8048c9c:	4a03      	ldr	r2, [pc, #12]	; (8048cac <HAL_RCC_GetSysClockFreq+0xc8>)
 8048c9e:	68d0      	ldr	r0, [r2, #12]
 8048ca0:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8048ca4:	fb00 f003 	mul.w	r0, r0, r3
        break;
 8048ca8:	e7ec      	b.n	8048c84 <HAL_RCC_GetSysClockFreq+0xa0>
 8048caa:	bf00      	nop
 8048cac:	40021000 	.word	0x40021000
 8048cb0:	08059c38 	.word	0x08059c38
 8048cb4:	00f42400 	.word	0x00f42400
 8048cb8:	007a1200 	.word	0x007a1200

08048cbc <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8048cbc:	b508      	push	{r3, lr}
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8048cbe:	f7ff ff91 	bl	8048be4 <HAL_RCC_GetSysClockFreq>
 8048cc2:	4b04      	ldr	r3, [pc, #16]	; (8048cd4 <HAL_RCC_GetHCLKFreq+0x18>)
 8048cc4:	689b      	ldr	r3, [r3, #8]
 8048cc6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8048cca:	4a03      	ldr	r2, [pc, #12]	; (8048cd8 <HAL_RCC_GetHCLKFreq+0x1c>)
 8048ccc:	5cd3      	ldrb	r3, [r2, r3]
}
 8048cce:	40d8      	lsrs	r0, r3
 8048cd0:	bd08      	pop	{r3, pc}
 8048cd2:	bf00      	nop
 8048cd4:	40021000 	.word	0x40021000
 8048cd8:	08059c20 	.word	0x08059c20

08048cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8048cdc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8048cde:	f7ff ffed 	bl	8048cbc <HAL_RCC_GetHCLKFreq>
 8048ce2:	4b04      	ldr	r3, [pc, #16]	; (8048cf4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8048ce4:	689b      	ldr	r3, [r3, #8]
 8048ce6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8048cea:	4a03      	ldr	r2, [pc, #12]	; (8048cf8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8048cec:	5cd3      	ldrb	r3, [r2, r3]
}
 8048cee:	40d8      	lsrs	r0, r3
 8048cf0:	bd08      	pop	{r3, pc}
 8048cf2:	bf00      	nop
 8048cf4:	40021000 	.word	0x40021000
 8048cf8:	08059c30 	.word	0x08059c30

08048cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8048cfc:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8048cfe:	f7ff ffdd 	bl	8048cbc <HAL_RCC_GetHCLKFreq>
 8048d02:	4b04      	ldr	r3, [pc, #16]	; (8048d14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8048d04:	689b      	ldr	r3, [r3, #8]
 8048d06:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8048d0a:	4a03      	ldr	r2, [pc, #12]	; (8048d18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8048d0c:	5cd3      	ldrb	r3, [r2, r3]
}
 8048d0e:	40d8      	lsrs	r0, r3
 8048d10:	bd08      	pop	{r3, pc}
 8048d12:	bf00      	nop
 8048d14:	40021000 	.word	0x40021000
 8048d18:	08059c30 	.word	0x08059c30

08048d1c <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8048d1c:	230f      	movs	r3, #15
 8048d1e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8048d20:	4b0b      	ldr	r3, [pc, #44]	; (8048d50 <HAL_RCC_GetClockConfig+0x34>)
 8048d22:	689a      	ldr	r2, [r3, #8]
 8048d24:	f002 0203 	and.w	r2, r2, #3
 8048d28:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8048d2a:	689a      	ldr	r2, [r3, #8]
 8048d2c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8048d30:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8048d32:	689a      	ldr	r2, [r3, #8]
 8048d34:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8048d38:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8048d3a:	689b      	ldr	r3, [r3, #8]
 8048d3c:	08db      	lsrs	r3, r3, #3
 8048d3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8048d42:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8048d44:	4b03      	ldr	r3, [pc, #12]	; (8048d54 <HAL_RCC_GetClockConfig+0x38>)
 8048d46:	681b      	ldr	r3, [r3, #0]
 8048d48:	f003 030f 	and.w	r3, r3, #15
 8048d4c:	600b      	str	r3, [r1, #0]
}
 8048d4e:	4770      	bx	lr
 8048d50:	40021000 	.word	0x40021000
 8048d54:	40022000 	.word	0x40022000

08048d58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8048d58:	b570      	push	{r4, r5, r6, lr}
 8048d5a:	4604      	mov	r4, r0
 8048d5c:	460e      	mov	r6, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8048d5e:	6803      	ldr	r3, [r0, #0]
 8048d60:	2b02      	cmp	r3, #2
 8048d62:	d01f      	beq.n	8048da4 <RCCEx_PLLSAI2_Config+0x4c>
 8048d64:	2b03      	cmp	r3, #3
 8048d66:	d024      	beq.n	8048db2 <RCCEx_PLLSAI2_Config+0x5a>
 8048d68:	2b01      	cmp	r3, #1
 8048d6a:	d002      	beq.n	8048d72 <RCCEx_PLLSAI2_Config+0x1a>
 8048d6c:	2501      	movs	r5, #1
      }
    }
  }

  return status;
}
 8048d6e:	4628      	mov	r0, r5
 8048d70:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8048d72:	4b2c      	ldr	r3, [pc, #176]	; (8048e24 <RCCEx_PLLSAI2_Config+0xcc>)
 8048d74:	681b      	ldr	r3, [r3, #0]
 8048d76:	f013 0f02 	tst.w	r3, #2
 8048d7a:	d051      	beq.n	8048e20 <RCCEx_PLLSAI2_Config+0xc8>
    __HAL_RCC_PLLSAI2_DISABLE();
 8048d7c:	4a29      	ldr	r2, [pc, #164]	; (8048e24 <RCCEx_PLLSAI2_Config+0xcc>)
 8048d7e:	6813      	ldr	r3, [r2, #0]
 8048d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8048d84:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8048d86:	f7fd fa09 	bl	804619c <HAL_GetTick>
 8048d8a:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8048d8c:	4b25      	ldr	r3, [pc, #148]	; (8048e24 <RCCEx_PLLSAI2_Config+0xcc>)
 8048d8e:	681b      	ldr	r3, [r3, #0]
 8048d90:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8048d94:	d014      	beq.n	8048dc0 <RCCEx_PLLSAI2_Config+0x68>
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8048d96:	f7fd fa01 	bl	804619c <HAL_GetTick>
 8048d9a:	1b43      	subs	r3, r0, r5
 8048d9c:	2b02      	cmp	r3, #2
 8048d9e:	d9f5      	bls.n	8048d8c <RCCEx_PLLSAI2_Config+0x34>
        status = HAL_TIMEOUT;
 8048da0:	2503      	movs	r5, #3
 8048da2:	e00e      	b.n	8048dc2 <RCCEx_PLLSAI2_Config+0x6a>
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8048da4:	4b1f      	ldr	r3, [pc, #124]	; (8048e24 <RCCEx_PLLSAI2_Config+0xcc>)
 8048da6:	681b      	ldr	r3, [r3, #0]
 8048da8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8048dac:	d1e6      	bne.n	8048d7c <RCCEx_PLLSAI2_Config+0x24>
        status = HAL_ERROR;
 8048dae:	2501      	movs	r5, #1
 8048db0:	e7dd      	b.n	8048d6e <RCCEx_PLLSAI2_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8048db2:	4b1c      	ldr	r3, [pc, #112]	; (8048e24 <RCCEx_PLLSAI2_Config+0xcc>)
 8048db4:	681b      	ldr	r3, [r3, #0]
 8048db6:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 8048dba:	d1df      	bne.n	8048d7c <RCCEx_PLLSAI2_Config+0x24>
        status = HAL_ERROR;
 8048dbc:	2501      	movs	r5, #1
 8048dbe:	e7d6      	b.n	8048d6e <RCCEx_PLLSAI2_Config+0x16>
 8048dc0:	2500      	movs	r5, #0
    if (status == HAL_OK)
 8048dc2:	2d00      	cmp	r5, #0
 8048dc4:	d1d3      	bne.n	8048d6e <RCCEx_PLLSAI2_Config+0x16>
      if (Divider == DIVIDER_P_UPDATE)
 8048dc6:	b986      	cbnz	r6, 8048dea <RCCEx_PLLSAI2_Config+0x92>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8048dc8:	4816      	ldr	r0, [pc, #88]	; (8048e24 <RCCEx_PLLSAI2_Config+0xcc>)
 8048dca:	6943      	ldr	r3, [r0, #20]
 8048dcc:	4a16      	ldr	r2, [pc, #88]	; (8048e28 <RCCEx_PLLSAI2_Config+0xd0>)
 8048dce:	401a      	ands	r2, r3
 8048dd0:	68a1      	ldr	r1, [r4, #8]
 8048dd2:	68e3      	ldr	r3, [r4, #12]
 8048dd4:	06db      	lsls	r3, r3, #27
 8048dd6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8048dda:	6861      	ldr	r1, [r4, #4]
 8048ddc:	3901      	subs	r1, #1
 8048dde:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8048de2:	6821      	ldr	r1, [r4, #0]
 8048de4:	430b      	orrs	r3, r1
 8048de6:	4313      	orrs	r3, r2
 8048de8:	6143      	str	r3, [r0, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8048dea:	4a0e      	ldr	r2, [pc, #56]	; (8048e24 <RCCEx_PLLSAI2_Config+0xcc>)
 8048dec:	6813      	ldr	r3, [r2, #0]
 8048dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8048df2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8048df4:	f7fd f9d2 	bl	804619c <HAL_GetTick>
 8048df8:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8048dfa:	4b0a      	ldr	r3, [pc, #40]	; (8048e24 <RCCEx_PLLSAI2_Config+0xcc>)
 8048dfc:	681b      	ldr	r3, [r3, #0]
 8048dfe:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8048e02:	d105      	bne.n	8048e10 <RCCEx_PLLSAI2_Config+0xb8>
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8048e04:	f7fd f9ca 	bl	804619c <HAL_GetTick>
 8048e08:	1b83      	subs	r3, r0, r6
 8048e0a:	2b02      	cmp	r3, #2
 8048e0c:	d9f5      	bls.n	8048dfa <RCCEx_PLLSAI2_Config+0xa2>
          status = HAL_TIMEOUT;
 8048e0e:	2503      	movs	r5, #3
      if (status == HAL_OK)
 8048e10:	2d00      	cmp	r5, #0
 8048e12:	d1ac      	bne.n	8048d6e <RCCEx_PLLSAI2_Config+0x16>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8048e14:	4a03      	ldr	r2, [pc, #12]	; (8048e24 <RCCEx_PLLSAI2_Config+0xcc>)
 8048e16:	6953      	ldr	r3, [r2, #20]
 8048e18:	6921      	ldr	r1, [r4, #16]
 8048e1a:	430b      	orrs	r3, r1
 8048e1c:	6153      	str	r3, [r2, #20]
 8048e1e:	e7a6      	b.n	8048d6e <RCCEx_PLLSAI2_Config+0x16>
        status = HAL_ERROR;
 8048e20:	2501      	movs	r5, #1
 8048e22:	e7a4      	b.n	8048d6e <RCCEx_PLLSAI2_Config+0x16>
 8048e24:	40021000 	.word	0x40021000
 8048e28:	07ff800c 	.word	0x07ff800c

08048e2c <RCCEx_PLLSAI1_Config>:
{
 8048e2c:	b570      	push	{r4, r5, r6, lr}
 8048e2e:	4604      	mov	r4, r0
 8048e30:	460e      	mov	r6, r1
  switch (pPllSai1->PLLSAI1Source)
 8048e32:	6803      	ldr	r3, [r0, #0]
 8048e34:	2b02      	cmp	r3, #2
 8048e36:	d01f      	beq.n	8048e78 <RCCEx_PLLSAI1_Config+0x4c>
 8048e38:	2b03      	cmp	r3, #3
 8048e3a:	d024      	beq.n	8048e86 <RCCEx_PLLSAI1_Config+0x5a>
 8048e3c:	2b01      	cmp	r3, #1
 8048e3e:	d002      	beq.n	8048e46 <RCCEx_PLLSAI1_Config+0x1a>
 8048e40:	2501      	movs	r5, #1
}
 8048e42:	4628      	mov	r0, r5
 8048e44:	bd70      	pop	{r4, r5, r6, pc}
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8048e46:	4b41      	ldr	r3, [pc, #260]	; (8048f4c <RCCEx_PLLSAI1_Config+0x120>)
 8048e48:	681b      	ldr	r3, [r3, #0]
 8048e4a:	f013 0f02 	tst.w	r3, #2
 8048e4e:	d07b      	beq.n	8048f48 <RCCEx_PLLSAI1_Config+0x11c>
    __HAL_RCC_PLLSAI1_DISABLE();
 8048e50:	4a3e      	ldr	r2, [pc, #248]	; (8048f4c <RCCEx_PLLSAI1_Config+0x120>)
 8048e52:	6813      	ldr	r3, [r2, #0]
 8048e54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8048e58:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8048e5a:	f7fd f99f 	bl	804619c <HAL_GetTick>
 8048e5e:	4605      	mov	r5, r0
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8048e60:	4b3a      	ldr	r3, [pc, #232]	; (8048f4c <RCCEx_PLLSAI1_Config+0x120>)
 8048e62:	681b      	ldr	r3, [r3, #0]
 8048e64:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8048e68:	d014      	beq.n	8048e94 <RCCEx_PLLSAI1_Config+0x68>
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8048e6a:	f7fd f997 	bl	804619c <HAL_GetTick>
 8048e6e:	1b43      	subs	r3, r0, r5
 8048e70:	2b02      	cmp	r3, #2
 8048e72:	d9f5      	bls.n	8048e60 <RCCEx_PLLSAI1_Config+0x34>
        status = HAL_TIMEOUT;
 8048e74:	2503      	movs	r5, #3
 8048e76:	e00e      	b.n	8048e96 <RCCEx_PLLSAI1_Config+0x6a>
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8048e78:	4b34      	ldr	r3, [pc, #208]	; (8048f4c <RCCEx_PLLSAI1_Config+0x120>)
 8048e7a:	681b      	ldr	r3, [r3, #0]
 8048e7c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8048e80:	d1e6      	bne.n	8048e50 <RCCEx_PLLSAI1_Config+0x24>
        status = HAL_ERROR;
 8048e82:	2501      	movs	r5, #1
 8048e84:	e7dd      	b.n	8048e42 <RCCEx_PLLSAI1_Config+0x16>
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8048e86:	4b31      	ldr	r3, [pc, #196]	; (8048f4c <RCCEx_PLLSAI1_Config+0x120>)
 8048e88:	681b      	ldr	r3, [r3, #0]
 8048e8a:	f413 2fc0 	tst.w	r3, #393216	; 0x60000
 8048e8e:	d1df      	bne.n	8048e50 <RCCEx_PLLSAI1_Config+0x24>
        status = HAL_ERROR;
 8048e90:	2501      	movs	r5, #1
 8048e92:	e7d6      	b.n	8048e42 <RCCEx_PLLSAI1_Config+0x16>
 8048e94:	2500      	movs	r5, #0
    if (status == HAL_OK)
 8048e96:	2d00      	cmp	r5, #0
 8048e98:	d1d3      	bne.n	8048e42 <RCCEx_PLLSAI1_Config+0x16>
      if (Divider == DIVIDER_P_UPDATE)
 8048e9a:	bb5e      	cbnz	r6, 8048ef4 <RCCEx_PLLSAI1_Config+0xc8>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8048e9c:	482b      	ldr	r0, [pc, #172]	; (8048f4c <RCCEx_PLLSAI1_Config+0x120>)
 8048e9e:	6903      	ldr	r3, [r0, #16]
 8048ea0:	4a2b      	ldr	r2, [pc, #172]	; (8048f50 <RCCEx_PLLSAI1_Config+0x124>)
 8048ea2:	401a      	ands	r2, r3
 8048ea4:	68a1      	ldr	r1, [r4, #8]
 8048ea6:	68e3      	ldr	r3, [r4, #12]
 8048ea8:	06db      	lsls	r3, r3, #27
 8048eaa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8048eae:	6861      	ldr	r1, [r4, #4]
 8048eb0:	3901      	subs	r1, #1
 8048eb2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8048eb6:	6821      	ldr	r1, [r4, #0]
 8048eb8:	430b      	orrs	r3, r1
 8048eba:	4313      	orrs	r3, r2
 8048ebc:	6103      	str	r3, [r0, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8048ebe:	4a23      	ldr	r2, [pc, #140]	; (8048f4c <RCCEx_PLLSAI1_Config+0x120>)
 8048ec0:	6813      	ldr	r3, [r2, #0]
 8048ec2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8048ec6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8048ec8:	f7fd f968 	bl	804619c <HAL_GetTick>
 8048ecc:	4606      	mov	r6, r0
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8048ece:	4b1f      	ldr	r3, [pc, #124]	; (8048f4c <RCCEx_PLLSAI1_Config+0x120>)
 8048ed0:	681b      	ldr	r3, [r3, #0]
 8048ed2:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8048ed6:	d105      	bne.n	8048ee4 <RCCEx_PLLSAI1_Config+0xb8>
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8048ed8:	f7fd f960 	bl	804619c <HAL_GetTick>
 8048edc:	1b83      	subs	r3, r0, r6
 8048ede:	2b02      	cmp	r3, #2
 8048ee0:	d9f5      	bls.n	8048ece <RCCEx_PLLSAI1_Config+0xa2>
          status = HAL_TIMEOUT;
 8048ee2:	2503      	movs	r5, #3
      if (status == HAL_OK)
 8048ee4:	2d00      	cmp	r5, #0
 8048ee6:	d1ac      	bne.n	8048e42 <RCCEx_PLLSAI1_Config+0x16>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8048ee8:	4a18      	ldr	r2, [pc, #96]	; (8048f4c <RCCEx_PLLSAI1_Config+0x120>)
 8048eea:	6913      	ldr	r3, [r2, #16]
 8048eec:	69a1      	ldr	r1, [r4, #24]
 8048eee:	430b      	orrs	r3, r1
 8048ef0:	6113      	str	r3, [r2, #16]
 8048ef2:	e7a6      	b.n	8048e42 <RCCEx_PLLSAI1_Config+0x16>
      else if (Divider == DIVIDER_Q_UPDATE)
 8048ef4:	2e01      	cmp	r6, #1
 8048ef6:	d013      	beq.n	8048f20 <RCCEx_PLLSAI1_Config+0xf4>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8048ef8:	4814      	ldr	r0, [pc, #80]	; (8048f4c <RCCEx_PLLSAI1_Config+0x120>)
 8048efa:	6903      	ldr	r3, [r0, #16]
 8048efc:	4a15      	ldr	r2, [pc, #84]	; (8048f54 <RCCEx_PLLSAI1_Config+0x128>)
 8048efe:	401a      	ands	r2, r3
 8048f00:	68a1      	ldr	r1, [r4, #8]
 8048f02:	6963      	ldr	r3, [r4, #20]
 8048f04:	085b      	lsrs	r3, r3, #1
 8048f06:	3b01      	subs	r3, #1
 8048f08:	065b      	lsls	r3, r3, #25
 8048f0a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8048f0e:	6861      	ldr	r1, [r4, #4]
 8048f10:	3901      	subs	r1, #1
 8048f12:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8048f16:	6821      	ldr	r1, [r4, #0]
 8048f18:	430b      	orrs	r3, r1
 8048f1a:	4313      	orrs	r3, r2
 8048f1c:	6103      	str	r3, [r0, #16]
 8048f1e:	e7ce      	b.n	8048ebe <RCCEx_PLLSAI1_Config+0x92>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8048f20:	480a      	ldr	r0, [pc, #40]	; (8048f4c <RCCEx_PLLSAI1_Config+0x120>)
 8048f22:	6903      	ldr	r3, [r0, #16]
 8048f24:	4a0c      	ldr	r2, [pc, #48]	; (8048f58 <RCCEx_PLLSAI1_Config+0x12c>)
 8048f26:	401a      	ands	r2, r3
 8048f28:	68a1      	ldr	r1, [r4, #8]
 8048f2a:	6923      	ldr	r3, [r4, #16]
 8048f2c:	085b      	lsrs	r3, r3, #1
 8048f2e:	3b01      	subs	r3, #1
 8048f30:	055b      	lsls	r3, r3, #21
 8048f32:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8048f36:	6861      	ldr	r1, [r4, #4]
 8048f38:	3901      	subs	r1, #1
 8048f3a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8048f3e:	6821      	ldr	r1, [r4, #0]
 8048f40:	430b      	orrs	r3, r1
 8048f42:	4313      	orrs	r3, r2
 8048f44:	6103      	str	r3, [r0, #16]
 8048f46:	e7ba      	b.n	8048ebe <RCCEx_PLLSAI1_Config+0x92>
        status = HAL_ERROR;
 8048f48:	2501      	movs	r5, #1
 8048f4a:	e77a      	b.n	8048e42 <RCCEx_PLLSAI1_Config+0x16>
 8048f4c:	40021000 	.word	0x40021000
 8048f50:	07ff800c 	.word	0x07ff800c
 8048f54:	f9ff800c 	.word	0xf9ff800c
 8048f58:	ff9f800c 	.word	0xff9f800c

08048f5c <HAL_RCCEx_PeriphCLKConfig>:
{
 8048f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8048f60:	b082      	sub	sp, #8
 8048f62:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8048f64:	6803      	ldr	r3, [r0, #0]
 8048f66:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8048f6a:	d034      	beq.n	8048fd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8048f6c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8048f6e:	2b40      	cmp	r3, #64	; 0x40
 8048f70:	d01f      	beq.n	8048fb2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8048f72:	d80b      	bhi.n	8048f8c <HAL_RCCEx_PeriphCLKConfig+0x30>
 8048f74:	b323      	cbz	r3, 8048fc0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8048f76:	2b20      	cmp	r3, #32
 8048f78:	d105      	bne.n	8048f86 <HAL_RCCEx_PeriphCLKConfig+0x2a>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8048f7a:	2100      	movs	r1, #0
 8048f7c:	3020      	adds	r0, #32
 8048f7e:	f7ff feeb 	bl	8048d58 <RCCEx_PLLSAI2_Config>
 8048f82:	4606      	mov	r6, r0
        break;
 8048f84:	e021      	b.n	8048fca <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch (PeriphClkInit->Sai1ClockSelection)
 8048f86:	2701      	movs	r7, #1
 8048f88:	463e      	mov	r6, r7
 8048f8a:	e026      	b.n	8048fda <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8048f8c:	2b60      	cmp	r3, #96	; 0x60
 8048f8e:	d020      	beq.n	8048fd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8048f90:	2b80      	cmp	r3, #128	; 0x80
 8048f92:	d10b      	bne.n	8048fac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8048f94:	2600      	movs	r6, #0
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8048f96:	4a65      	ldr	r2, [pc, #404]	; (804912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8048f98:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8048f9c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8048fa0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8048fa2:	430b      	orrs	r3, r1
 8048fa4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8048fa8:	2700      	movs	r7, #0
 8048faa:	e016      	b.n	8048fda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch (PeriphClkInit->Sai1ClockSelection)
 8048fac:	2701      	movs	r7, #1
 8048fae:	463e      	mov	r6, r7
 8048fb0:	e013      	b.n	8048fda <HAL_RCCEx_PeriphCLKConfig+0x7e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8048fb2:	4a5e      	ldr	r2, [pc, #376]	; (804912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8048fb4:	68d3      	ldr	r3, [r2, #12]
 8048fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8048fba:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8048fbc:	2600      	movs	r6, #0
 8048fbe:	e7ea      	b.n	8048f96 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8048fc0:	2100      	movs	r1, #0
 8048fc2:	3004      	adds	r0, #4
 8048fc4:	f7ff ff32 	bl	8048e2c <RCCEx_PLLSAI1_Config>
 8048fc8:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8048fca:	2e00      	cmp	r6, #0
 8048fcc:	d0e3      	beq.n	8048f96 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8048fce:	4637      	mov	r7, r6
 8048fd0:	e003      	b.n	8048fda <HAL_RCCEx_PeriphCLKConfig+0x7e>
    switch (PeriphClkInit->Sai1ClockSelection)
 8048fd2:	2600      	movs	r6, #0
 8048fd4:	e7df      	b.n	8048f96 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8048fd6:	2700      	movs	r7, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8048fd8:	463e      	mov	r6, r7
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8048fda:	6823      	ldr	r3, [r4, #0]
 8048fdc:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8048fe0:	d024      	beq.n	804902c <HAL_RCCEx_PeriphCLKConfig+0xd0>
    switch (PeriphClkInit->Sai2ClockSelection)
 8048fe2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8048fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8048fe8:	d07c      	beq.n	80490e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8048fea:	d80e      	bhi.n	804900a <HAL_RCCEx_PeriphCLKConfig+0xae>
 8048fec:	2b00      	cmp	r3, #0
 8048fee:	d07f      	beq.n	80490f0 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8048ff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8048ff4:	d106      	bne.n	8049004 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8048ff6:	2100      	movs	r1, #0
 8048ff8:	f104 0020 	add.w	r0, r4, #32
 8048ffc:	f7ff feac 	bl	8048d58 <RCCEx_PLLSAI2_Config>
 8049000:	4606      	mov	r6, r0
        break;
 8049002:	e008      	b.n	8049016 <HAL_RCCEx_PeriphCLKConfig+0xba>
    switch (PeriphClkInit->Sai2ClockSelection)
 8049004:	2701      	movs	r7, #1
 8049006:	463e      	mov	r6, r7
 8049008:	e010      	b.n	804902c <HAL_RCCEx_PeriphCLKConfig+0xd0>
 804900a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804900e:	d002      	beq.n	8049016 <HAL_RCCEx_PeriphCLKConfig+0xba>
 8049010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8049014:	d163      	bne.n	80490de <HAL_RCCEx_PeriphCLKConfig+0x182>
    if (ret == HAL_OK)
 8049016:	2e00      	cmp	r6, #0
 8049018:	d170      	bne.n	80490fc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 804901a:	4a44      	ldr	r2, [pc, #272]	; (804912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804901c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8049020:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8049024:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8049026:	430b      	orrs	r3, r1
 8049028:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 804902c:	6823      	ldr	r3, [r4, #0]
 804902e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8049032:	f000 8084 	beq.w	804913e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8049036:	4b3d      	ldr	r3, [pc, #244]	; (804912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8049038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804903a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 804903e:	d15f      	bne.n	8049100 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_PWR_CLK_ENABLE();
 8049040:	4b3a      	ldr	r3, [pc, #232]	; (804912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8049042:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8049044:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8049048:	659a      	str	r2, [r3, #88]	; 0x58
 804904a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804904c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8049050:	9301      	str	r3, [sp, #4]
 8049052:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8049054:	f04f 0801 	mov.w	r8, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8049058:	4a35      	ldr	r2, [pc, #212]	; (8049130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 804905a:	6813      	ldr	r3, [r2, #0]
 804905c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8049060:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8049062:	f7fd f89b 	bl	804619c <HAL_GetTick>
 8049066:	4605      	mov	r5, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8049068:	4b31      	ldr	r3, [pc, #196]	; (8049130 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 804906a:	681b      	ldr	r3, [r3, #0]
 804906c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8049070:	d105      	bne.n	804907e <HAL_RCCEx_PeriphCLKConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8049072:	f7fd f893 	bl	804619c <HAL_GetTick>
 8049076:	1b40      	subs	r0, r0, r5
 8049078:	2802      	cmp	r0, #2
 804907a:	d9f5      	bls.n	8049068 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        ret = HAL_TIMEOUT;
 804907c:	2603      	movs	r6, #3
    if (ret == HAL_OK)
 804907e:	2e00      	cmp	r6, #0
 8049080:	d158      	bne.n	8049134 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8049082:	4b2a      	ldr	r3, [pc, #168]	; (804912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8049084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8049088:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 804908c:	d016      	beq.n	80490bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 804908e:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8049092:	429a      	cmp	r2, r3
 8049094:	d012      	beq.n	80490bc <HAL_RCCEx_PeriphCLKConfig+0x160>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8049096:	4a25      	ldr	r2, [pc, #148]	; (804912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8049098:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 804909c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80490a0:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80490a4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 80490a8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80490ac:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 80490b0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80490b4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80490b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80490bc:	f013 0f01 	tst.w	r3, #1
 80490c0:	d121      	bne.n	8049106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      if (ret == HAL_OK)
 80490c2:	2e00      	cmp	r6, #0
 80490c4:	f040 818c 	bne.w	80493e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80490c8:	4a18      	ldr	r2, [pc, #96]	; (804912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80490ca:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80490ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80490d2:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80490d6:	430b      	orrs	r3, r1
 80490d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80490dc:	e02b      	b.n	8049136 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    switch (PeriphClkInit->Sai2ClockSelection)
 80490de:	2701      	movs	r7, #1
 80490e0:	463e      	mov	r6, r7
 80490e2:	e7a3      	b.n	804902c <HAL_RCCEx_PeriphCLKConfig+0xd0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80490e4:	4a11      	ldr	r2, [pc, #68]	; (804912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80490e6:	68d3      	ldr	r3, [r2, #12]
 80490e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80490ec:	60d3      	str	r3, [r2, #12]
        break;
 80490ee:	e792      	b.n	8049016 <HAL_RCCEx_PeriphCLKConfig+0xba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80490f0:	2100      	movs	r1, #0
 80490f2:	1d20      	adds	r0, r4, #4
 80490f4:	f7ff fe9a 	bl	8048e2c <RCCEx_PLLSAI1_Config>
 80490f8:	4606      	mov	r6, r0
        break;
 80490fa:	e78c      	b.n	8049016 <HAL_RCCEx_PeriphCLKConfig+0xba>
 80490fc:	4637      	mov	r7, r6
 80490fe:	e795      	b.n	804902c <HAL_RCCEx_PeriphCLKConfig+0xd0>
    FlagStatus       pwrclkchanged = RESET;
 8049100:	f04f 0800 	mov.w	r8, #0
 8049104:	e7a8      	b.n	8049058 <HAL_RCCEx_PeriphCLKConfig+0xfc>
        tickstart = HAL_GetTick();
 8049106:	f7fd f849 	bl	804619c <HAL_GetTick>
 804910a:	4605      	mov	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804910c:	4b07      	ldr	r3, [pc, #28]	; (804912c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 804910e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8049112:	f013 0f02 	tst.w	r3, #2
 8049116:	d1d4      	bne.n	80490c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8049118:	f7fd f840 	bl	804619c <HAL_GetTick>
 804911c:	1b40      	subs	r0, r0, r5
 804911e:	f241 3388 	movw	r3, #5000	; 0x1388
 8049122:	4298      	cmp	r0, r3
 8049124:	d9f2      	bls.n	804910c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
            ret = HAL_TIMEOUT;
 8049126:	2603      	movs	r6, #3
 8049128:	e7cb      	b.n	80490c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 804912a:	bf00      	nop
 804912c:	40021000 	.word	0x40021000
 8049130:	40007000 	.word	0x40007000
      status = ret;
 8049134:	4637      	mov	r7, r6
    if (pwrclkchanged == SET)
 8049136:	f1b8 0f00 	cmp.w	r8, #0
 804913a:	f040 8153 	bne.w	80493e4 <HAL_RCCEx_PeriphCLKConfig+0x488>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 804913e:	6823      	ldr	r3, [r4, #0]
 8049140:	f013 0f01 	tst.w	r3, #1
 8049144:	d008      	beq.n	8049158 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8049146:	4ac6      	ldr	r2, [pc, #792]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8049148:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 804914c:	f023 0303 	bic.w	r3, r3, #3
 8049150:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8049152:	430b      	orrs	r3, r1
 8049154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8049158:	6823      	ldr	r3, [r4, #0]
 804915a:	f013 0f02 	tst.w	r3, #2
 804915e:	d008      	beq.n	8049172 <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8049160:	4abf      	ldr	r2, [pc, #764]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8049162:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8049166:	f023 030c 	bic.w	r3, r3, #12
 804916a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 804916c:	430b      	orrs	r3, r1
 804916e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8049172:	6823      	ldr	r3, [r4, #0]
 8049174:	f013 0f04 	tst.w	r3, #4
 8049178:	d008      	beq.n	804918c <HAL_RCCEx_PeriphCLKConfig+0x230>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 804917a:	4ab9      	ldr	r2, [pc, #740]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804917c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8049180:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8049184:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8049186:	430b      	orrs	r3, r1
 8049188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 804918c:	6823      	ldr	r3, [r4, #0]
 804918e:	f013 0f08 	tst.w	r3, #8
 8049192:	d008      	beq.n	80491a6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8049194:	4ab2      	ldr	r2, [pc, #712]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8049196:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 804919a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 804919e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80491a0:	430b      	orrs	r3, r1
 80491a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80491a6:	6823      	ldr	r3, [r4, #0]
 80491a8:	f013 0f10 	tst.w	r3, #16
 80491ac:	d008      	beq.n	80491c0 <HAL_RCCEx_PeriphCLKConfig+0x264>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80491ae:	4aac      	ldr	r2, [pc, #688]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80491b0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80491b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80491b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80491ba:	430b      	orrs	r3, r1
 80491bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80491c0:	6823      	ldr	r3, [r4, #0]
 80491c2:	f013 0f20 	tst.w	r3, #32
 80491c6:	d008      	beq.n	80491da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80491c8:	4aa5      	ldr	r2, [pc, #660]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80491ca:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80491ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80491d2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80491d4:	430b      	orrs	r3, r1
 80491d6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80491da:	6823      	ldr	r3, [r4, #0]
 80491dc:	f413 7f00 	tst.w	r3, #512	; 0x200
 80491e0:	d008      	beq.n	80491f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80491e2:	4a9f      	ldr	r2, [pc, #636]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80491e4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80491e8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80491ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80491ee:	430b      	orrs	r3, r1
 80491f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80491f4:	6823      	ldr	r3, [r4, #0]
 80491f6:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80491fa:	d008      	beq.n	804920e <HAL_RCCEx_PeriphCLKConfig+0x2b2>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80491fc:	4a98      	ldr	r2, [pc, #608]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80491fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8049202:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8049206:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8049208:	430b      	orrs	r3, r1
 804920a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 804920e:	6823      	ldr	r3, [r4, #0]
 8049210:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8049214:	d008      	beq.n	8049228 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8049216:	4a92      	ldr	r2, [pc, #584]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8049218:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 804921c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8049220:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8049222:	430b      	orrs	r3, r1
 8049224:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8049228:	6823      	ldr	r3, [r4, #0]
 804922a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 804922e:	d00c      	beq.n	804924a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->FdcanClockSelection)
 8049230:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8049232:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8049236:	f000 80db 	beq.w	80493f0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 804923a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804923e:	f000 80e7 	beq.w	8049410 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
 8049242:	2b00      	cmp	r3, #0
 8049244:	f000 80d9 	beq.w	80493fa <HAL_RCCEx_PeriphCLKConfig+0x49e>
 8049248:	2701      	movs	r7, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 804924a:	6823      	ldr	r3, [r4, #0]
 804924c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8049250:	d008      	beq.n	8049264 <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8049252:	4a83      	ldr	r2, [pc, #524]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8049254:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8049258:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 804925c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 804925e:	430b      	orrs	r3, r1
 8049260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8049264:	6823      	ldr	r3, [r4, #0]
 8049266:	f013 0f80 	tst.w	r3, #128	; 0x80
 804926a:	d008      	beq.n	804927e <HAL_RCCEx_PeriphCLKConfig+0x322>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 804926c:	4a7c      	ldr	r2, [pc, #496]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804926e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8049272:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8049276:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8049278:	430b      	orrs	r3, r1
 804927a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 804927e:	6823      	ldr	r3, [r4, #0]
 8049280:	f413 7f80 	tst.w	r3, #256	; 0x100
 8049284:	d008      	beq.n	8049298 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8049286:	4a76      	ldr	r2, [pc, #472]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8049288:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 804928c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8049290:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8049292:	430b      	orrs	r3, r1
 8049294:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8049298:	6823      	ldr	r3, [r4, #0]
 804929a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 804929e:	d008      	beq.n	80492b2 <HAL_RCCEx_PeriphCLKConfig+0x356>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80492a0:	4a6f      	ldr	r2, [pc, #444]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80492a2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80492a6:	f023 0303 	bic.w	r3, r3, #3
 80492aa:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80492ac:	430b      	orrs	r3, r1
 80492ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80492b2:	6823      	ldr	r3, [r4, #0]
 80492b4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80492b8:	d011      	beq.n	80492de <HAL_RCCEx_PeriphCLKConfig+0x382>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80492ba:	4a69      	ldr	r2, [pc, #420]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80492bc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80492c0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80492c4:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80492c6:	430b      	orrs	r3, r1
 80492c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80492cc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80492ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80492d2:	f000 80a5 	beq.w	8049420 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80492d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80492da:	f000 80a6 	beq.w	804942a <HAL_RCCEx_PeriphCLKConfig+0x4ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80492de:	6823      	ldr	r3, [r4, #0]
 80492e0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80492e4:	d01f      	beq.n	8049326 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80492e6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80492e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80492ec:	f000 80a6 	beq.w	804943c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80492f0:	4a5b      	ldr	r2, [pc, #364]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80492f2:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
 80492f6:	f021 6140 	bic.w	r1, r1, #201326592	; 0xc000000
 80492fa:	430b      	orrs	r3, r1
 80492fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8049300:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8049304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8049308:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 804930c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 804930e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8049312:	f000 809b 	beq.w	804944c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8049316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804931a:	f000 80a3 	beq.w	8049464 <HAL_RCCEx_PeriphCLKConfig+0x508>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 804931e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8049322:	f000 80a5 	beq.w	8049470 <HAL_RCCEx_PeriphCLKConfig+0x514>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8049326:	6823      	ldr	r3, [r4, #0]
 8049328:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 804932c:	d011      	beq.n	8049352 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 804932e:	4a4c      	ldr	r2, [pc, #304]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8049330:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8049334:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8049338:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 804933a:	430b      	orrs	r3, r1
 804933c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8049340:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8049342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8049346:	f000 8099 	beq.w	804947c <HAL_RCCEx_PeriphCLKConfig+0x520>
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 804934a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 804934e:	f000 809a 	beq.w	8049486 <HAL_RCCEx_PeriphCLKConfig+0x52a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8049352:	6823      	ldr	r3, [r4, #0]
 8049354:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8049358:	d00f      	beq.n	804937a <HAL_RCCEx_PeriphCLKConfig+0x41e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 804935a:	4a41      	ldr	r2, [pc, #260]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804935c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8049360:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8049364:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8049368:	430b      	orrs	r3, r1
 804936a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 804936e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8049372:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8049376:	f000 808f 	beq.w	8049498 <HAL_RCCEx_PeriphCLKConfig+0x53c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 804937a:	6823      	ldr	r3, [r4, #0]
 804937c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8049380:	d009      	beq.n	8049396 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8049382:	4a37      	ldr	r2, [pc, #220]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8049384:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8049388:	f023 0304 	bic.w	r3, r3, #4
 804938c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8049390:	430b      	orrs	r3, r1
 8049392:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8049396:	6823      	ldr	r3, [r4, #0]
 8049398:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 804939c:	d009      	beq.n	80493b2 <HAL_RCCEx_PeriphCLKConfig+0x456>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 804939e:	4a30      	ldr	r2, [pc, #192]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80493a0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80493a4:	f023 0318 	bic.w	r3, r3, #24
 80493a8:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80493ac:	430b      	orrs	r3, r1
 80493ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80493b2:	6823      	ldr	r3, [r4, #0]
 80493b4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80493b8:	d00e      	beq.n	80493d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80493ba:	4a29      	ldr	r2, [pc, #164]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80493bc:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80493c0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80493c4:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80493c8:	430b      	orrs	r3, r1
 80493ca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80493ce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80493d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80493d6:	d068      	beq.n	80494aa <HAL_RCCEx_PeriphCLKConfig+0x54e>
}
 80493d8:	4638      	mov	r0, r7
 80493da:	b002      	add	sp, #8
 80493dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = ret;
 80493e0:	4637      	mov	r7, r6
 80493e2:	e6a8      	b.n	8049136 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      __HAL_RCC_PWR_CLK_DISABLE();
 80493e4:	4a1e      	ldr	r2, [pc, #120]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80493e6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80493e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80493ec:	6593      	str	r3, [r2, #88]	; 0x58
 80493ee:	e6a6      	b.n	804913e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80493f0:	4a1b      	ldr	r2, [pc, #108]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80493f2:	68d3      	ldr	r3, [r2, #12]
 80493f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80493f8:	60d3      	str	r3, [r2, #12]
    if (ret == HAL_OK)
 80493fa:	b97e      	cbnz	r6, 804941c <HAL_RCCEx_PeriphCLKConfig+0x4c0>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80493fc:	4a18      	ldr	r2, [pc, #96]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80493fe:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8049402:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8049406:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8049408:	430b      	orrs	r3, r1
 804940a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 804940e:	e71c      	b.n	804924a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8049410:	2100      	movs	r1, #0
 8049412:	1d20      	adds	r0, r4, #4
 8049414:	f7ff fd0a 	bl	8048e2c <RCCEx_PLLSAI1_Config>
 8049418:	4606      	mov	r6, r0
        break;
 804941a:	e7ee      	b.n	80493fa <HAL_RCCEx_PeriphCLKConfig+0x49e>
 804941c:	4637      	mov	r7, r6
 804941e:	e714      	b.n	804924a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8049420:	68d3      	ldr	r3, [r2, #12]
 8049422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8049426:	60d3      	str	r3, [r2, #12]
 8049428:	e759      	b.n	80492de <HAL_RCCEx_PeriphCLKConfig+0x382>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 804942a:	2101      	movs	r1, #1
 804942c:	1d20      	adds	r0, r4, #4
 804942e:	f7ff fcfd 	bl	8048e2c <RCCEx_PLLSAI1_Config>
        if (ret != HAL_OK)
 8049432:	2800      	cmp	r0, #0
 8049434:	f43f af53 	beq.w	80492de <HAL_RCCEx_PeriphCLKConfig+0x382>
          status = ret;
 8049438:	4607      	mov	r7, r0
 804943a:	e750      	b.n	80492de <HAL_RCCEx_PeriphCLKConfig+0x382>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 804943c:	4a08      	ldr	r2, [pc, #32]	; (8049460 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804943e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8049442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8049446:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 804944a:	e75f      	b.n	804930c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 804944c:	2101      	movs	r1, #1
 804944e:	1d20      	adds	r0, r4, #4
 8049450:	f7ff fcec 	bl	8048e2c <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 8049454:	2800      	cmp	r0, #0
 8049456:	f43f af66 	beq.w	8049326 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        status = ret;
 804945a:	4607      	mov	r7, r0
 804945c:	e763      	b.n	8049326 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
 804945e:	bf00      	nop
 8049460:	40021000 	.word	0x40021000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8049464:	4a13      	ldr	r2, [pc, #76]	; (80494b4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8049466:	68d3      	ldr	r3, [r2, #12]
 8049468:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804946c:	60d3      	str	r3, [r2, #12]
 804946e:	e75a      	b.n	8049326 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8049470:	4a10      	ldr	r2, [pc, #64]	; (80494b4 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8049472:	68d3      	ldr	r3, [r2, #12]
 8049474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8049478:	60d3      	str	r3, [r2, #12]
 804947a:	e754      	b.n	8049326 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804947c:	68d3      	ldr	r3, [r2, #12]
 804947e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8049482:	60d3      	str	r3, [r2, #12]
 8049484:	e765      	b.n	8049352 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8049486:	2101      	movs	r1, #1
 8049488:	1d20      	adds	r0, r4, #4
 804948a:	f7ff fccf 	bl	8048e2c <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 804948e:	2800      	cmp	r0, #0
 8049490:	f43f af5f 	beq.w	8049352 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        status = ret;
 8049494:	4607      	mov	r7, r0
 8049496:	e75c      	b.n	8049352 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8049498:	2102      	movs	r1, #2
 804949a:	1d20      	adds	r0, r4, #4
 804949c:	f7ff fcc6 	bl	8048e2c <RCCEx_PLLSAI1_Config>
      if (ret != HAL_OK)
 80494a0:	2800      	cmp	r0, #0
 80494a2:	f43f af6a 	beq.w	804937a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        status = ret;
 80494a6:	4607      	mov	r7, r0
 80494a8:	e767      	b.n	804937a <HAL_RCCEx_PeriphCLKConfig+0x41e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80494aa:	68d3      	ldr	r3, [r2, #12]
 80494ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80494b0:	60d3      	str	r3, [r2, #12]
 80494b2:	e791      	b.n	80493d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80494b4:	40021000 	.word	0x40021000

080494b8 <HAL_RNG_ReadyDataCallback>:
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80494b8:	4770      	bx	lr

080494ba <HAL_RNG_ErrorCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80494ba:	4770      	bx	lr

080494bc <HAL_RNG_Init>:
  if (hrng == NULL)
 80494bc:	2800      	cmp	r0, #0
 80494be:	d065      	beq.n	804958c <HAL_RNG_Init+0xd0>
{
 80494c0:	b538      	push	{r3, r4, r5, lr}
 80494c2:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_RESET)
 80494c4:	7a43      	ldrb	r3, [r0, #9]
 80494c6:	b953      	cbnz	r3, 80494de <HAL_RNG_Init+0x22>
    hrng->Lock = HAL_UNLOCKED;
 80494c8:	7203      	strb	r3, [r0, #8]
    hrng->ReadyDataCallback  = HAL_RNG_ReadyDataCallback;  /* Legacy weak ReadyDataCallback  */
 80494ca:	4b31      	ldr	r3, [pc, #196]	; (8049590 <HAL_RNG_Init+0xd4>)
 80494cc:	6143      	str	r3, [r0, #20]
    hrng->ErrorCallback      = HAL_RNG_ErrorCallback;      /* Legacy weak ErrorCallback      */
 80494ce:	4b31      	ldr	r3, [pc, #196]	; (8049594 <HAL_RNG_Init+0xd8>)
 80494d0:	6183      	str	r3, [r0, #24]
    if (hrng->MspInitCallback == NULL)
 80494d2:	69c3      	ldr	r3, [r0, #28]
 80494d4:	2b00      	cmp	r3, #0
 80494d6:	d031      	beq.n	804953c <HAL_RNG_Init+0x80>
    hrng->MspInitCallback(hrng);
 80494d8:	69e3      	ldr	r3, [r4, #28]
 80494da:	4620      	mov	r0, r4
 80494dc:	4798      	blx	r3
  hrng->State = HAL_RNG_STATE_BUSY;
 80494de:	2302      	movs	r3, #2
 80494e0:	7263      	strb	r3, [r4, #9]
  __HAL_RNG_DISABLE(hrng);
 80494e2:	6822      	ldr	r2, [r4, #0]
 80494e4:	6813      	ldr	r3, [r2, #0]
 80494e6:	f023 0304 	bic.w	r3, r3, #4
 80494ea:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 80494ec:	6822      	ldr	r2, [r4, #0]
 80494ee:	6813      	ldr	r3, [r2, #0]
 80494f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80494f4:	f023 0320 	bic.w	r3, r3, #32
 80494f8:	6861      	ldr	r1, [r4, #4]
 80494fa:	430b      	orrs	r3, r1
 80494fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8049500:	6013      	str	r3, [r2, #0]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8049502:	6823      	ldr	r3, [r4, #0]
 8049504:	4a24      	ldr	r2, [pc, #144]	; (8049598 <HAL_RNG_Init+0xdc>)
 8049506:	611a      	str	r2, [r3, #16]
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8049508:	6823      	ldr	r3, [r4, #0]
 804950a:	4a24      	ldr	r2, [pc, #144]	; (804959c <HAL_RNG_Init+0xe0>)
 804950c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 804950e:	6822      	ldr	r2, [r4, #0]
 8049510:	6813      	ldr	r3, [r2, #0]
 8049512:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8049516:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8049518:	f7fc fe40 	bl	804619c <HAL_GetTick>
 804951c:	4605      	mov	r5, r0
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 804951e:	6823      	ldr	r3, [r4, #0]
 8049520:	681a      	ldr	r2, [r3, #0]
 8049522:	f012 4f80 	tst.w	r2, #1073741824	; 0x40000000
 8049526:	d00c      	beq.n	8049542 <HAL_RNG_Init+0x86>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8049528:	f7fc fe38 	bl	804619c <HAL_GetTick>
 804952c:	1b40      	subs	r0, r0, r5
 804952e:	2802      	cmp	r0, #2
 8049530:	d9f5      	bls.n	804951e <HAL_RNG_Init+0x62>
      hrng->State = HAL_RNG_STATE_READY;
 8049532:	2001      	movs	r0, #1
 8049534:	7260      	strb	r0, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8049536:	2302      	movs	r3, #2
 8049538:	60e3      	str	r3, [r4, #12]
}
 804953a:	bd38      	pop	{r3, r4, r5, pc}
      hrng->MspInitCallback = HAL_RNG_MspInit; /* Legacy weak MspInit  */
 804953c:	4b18      	ldr	r3, [pc, #96]	; (80495a0 <HAL_RNG_Init+0xe4>)
 804953e:	61c3      	str	r3, [r0, #28]
 8049540:	e7ca      	b.n	80494d8 <HAL_RNG_Init+0x1c>
  __HAL_RNG_ENABLE(hrng);
 8049542:	681a      	ldr	r2, [r3, #0]
 8049544:	f042 0204 	orr.w	r2, r2, #4
 8049548:	601a      	str	r2, [r3, #0]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 804954a:	6823      	ldr	r3, [r4, #0]
 804954c:	685b      	ldr	r3, [r3, #4]
 804954e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8049552:	d003      	beq.n	804955c <HAL_RNG_Init+0xa0>
    hrng->State = HAL_RNG_STATE_ERROR;
 8049554:	2304      	movs	r3, #4
 8049556:	7263      	strb	r3, [r4, #9]
    return HAL_ERROR;
 8049558:	2001      	movs	r0, #1
 804955a:	e7ee      	b.n	804953a <HAL_RNG_Init+0x7e>
  tickstart = HAL_GetTick();
 804955c:	f7fc fe1e 	bl	804619c <HAL_GetTick>
 8049560:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8049562:	6823      	ldr	r3, [r4, #0]
 8049564:	685b      	ldr	r3, [r3, #4]
 8049566:	f013 0f04 	tst.w	r3, #4
 804956a:	d00a      	beq.n	8049582 <HAL_RNG_Init+0xc6>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 804956c:	f7fc fe16 	bl	804619c <HAL_GetTick>
 8049570:	1b40      	subs	r0, r0, r5
 8049572:	2802      	cmp	r0, #2
 8049574:	d9f5      	bls.n	8049562 <HAL_RNG_Init+0xa6>
      hrng->State = HAL_RNG_STATE_ERROR;
 8049576:	2304      	movs	r3, #4
 8049578:	7263      	strb	r3, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 804957a:	2302      	movs	r3, #2
 804957c:	60e3      	str	r3, [r4, #12]
      return HAL_ERROR;
 804957e:	2001      	movs	r0, #1
 8049580:	e7db      	b.n	804953a <HAL_RNG_Init+0x7e>
  hrng->State = HAL_RNG_STATE_READY;
 8049582:	2301      	movs	r3, #1
 8049584:	7263      	strb	r3, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8049586:	2000      	movs	r0, #0
 8049588:	60e0      	str	r0, [r4, #12]
  return HAL_OK;
 804958a:	e7d6      	b.n	804953a <HAL_RNG_Init+0x7e>
    return HAL_ERROR;
 804958c:	2001      	movs	r0, #1
}
 804958e:	4770      	bx	lr
 8049590:	080494b9 	.word	0x080494b9
 8049594:	080494bb 	.word	0x080494bb
 8049598:	17590abc 	.word	0x17590abc
 804959c:	000caa74 	.word	0x000caa74
 80495a0:	08041f75 	.word	0x08041f75

080495a4 <HAL_RNG_IRQHandler>:
{
 80495a4:	b510      	push	{r4, lr}
 80495a6:	4604      	mov	r4, r0
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 80495a8:	6803      	ldr	r3, [r0, #0]
 80495aa:	685a      	ldr	r2, [r3, #4]
 80495ac:	f012 0f20 	tst.w	r2, #32
 80495b0:	d123      	bne.n	80495fa <HAL_RNG_IRQHandler+0x56>
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80495b2:	685a      	ldr	r2, [r3, #4]
 80495b4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80495b8:	d007      	beq.n	80495ca <HAL_RNG_IRQHandler+0x26>
    if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 80495ba:	685a      	ldr	r2, [r3, #4]
 80495bc:	f012 0f04 	tst.w	r2, #4
 80495c0:	d127      	bne.n	8049612 <HAL_RNG_IRQHandler+0x6e>
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80495c2:	685a      	ldr	r2, [r3, #4]
 80495c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80495c8:	605a      	str	r2, [r3, #4]
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 80495ca:	6823      	ldr	r3, [r4, #0]
 80495cc:	685a      	ldr	r2, [r3, #4]
 80495ce:	f012 0f01 	tst.w	r2, #1
 80495d2:	d01d      	beq.n	8049610 <HAL_RNG_IRQHandler+0x6c>
    __HAL_RNG_DISABLE_IT(hrng);
 80495d4:	681a      	ldr	r2, [r3, #0]
 80495d6:	f022 0208 	bic.w	r2, r2, #8
 80495da:	601a      	str	r2, [r3, #0]
    hrng->RandomNumber = hrng->Instance->DR;
 80495dc:	6823      	ldr	r3, [r4, #0]
 80495de:	6899      	ldr	r1, [r3, #8]
 80495e0:	6121      	str	r1, [r4, #16]
    if (hrng->State != HAL_RNG_STATE_ERROR)
 80495e2:	7a63      	ldrb	r3, [r4, #9]
 80495e4:	b2db      	uxtb	r3, r3
 80495e6:	2b04      	cmp	r3, #4
 80495e8:	d012      	beq.n	8049610 <HAL_RNG_IRQHandler+0x6c>
      hrng->State = HAL_RNG_STATE_READY;
 80495ea:	2301      	movs	r3, #1
 80495ec:	7263      	strb	r3, [r4, #9]
      __HAL_UNLOCK(hrng);
 80495ee:	2300      	movs	r3, #0
 80495f0:	7223      	strb	r3, [r4, #8]
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
 80495f2:	6963      	ldr	r3, [r4, #20]
 80495f4:	4620      	mov	r0, r4
 80495f6:	4798      	blx	r3
 80495f8:	e00a      	b.n	8049610 <HAL_RNG_IRQHandler+0x6c>
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80495fa:	2310      	movs	r3, #16
 80495fc:	60c3      	str	r3, [r0, #12]
    hrng->State = HAL_RNG_STATE_ERROR;
 80495fe:	2304      	movs	r3, #4
 8049600:	7263      	strb	r3, [r4, #9]
    hrng->ErrorCallback(hrng);
 8049602:	69a3      	ldr	r3, [r4, #24]
 8049604:	4620      	mov	r0, r4
 8049606:	4798      	blx	r3
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8049608:	6823      	ldr	r3, [r4, #0]
 804960a:	f06f 0260 	mvn.w	r2, #96	; 0x60
 804960e:	605a      	str	r2, [r3, #4]
}
 8049610:	bd10      	pop	{r4, pc}
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8049612:	2208      	movs	r2, #8
 8049614:	60c2      	str	r2, [r0, #12]
      __HAL_RNG_DISABLE_IT(hrng);
 8049616:	681a      	ldr	r2, [r3, #0]
 8049618:	f022 0208 	bic.w	r2, r2, #8
 804961c:	601a      	str	r2, [r3, #0]
  if (rngclockerror == 1U)
 804961e:	e7ee      	b.n	80495fe <HAL_RNG_IRQHandler+0x5a>

08049620 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8049620:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8049624:	2b01      	cmp	r3, #1
 8049626:	d023      	beq.n	8049670 <HAL_RTC_DeactivateAlarm+0x50>
 8049628:	2301      	movs	r3, #1
 804962a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 804962e:	2302      	movs	r3, #2
 8049630:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8049634:	4b0f      	ldr	r3, [pc, #60]	; (8049674 <HAL_RTC_DeactivateAlarm+0x54>)
 8049636:	22ca      	movs	r2, #202	; 0xca
 8049638:	625a      	str	r2, [r3, #36]	; 0x24
 804963a:	2253      	movs	r2, #83	; 0x53
 804963c:	625a      	str	r2, [r3, #36]	; 0x24

  /* In case of interrupt mode is used, the interrupt source must disabled */
  if (Alarm == RTC_ALARM_A)
 804963e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8049642:	d00f      	beq.n	8049664 <HAL_RTC_DeactivateAlarm+0x44>
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
  }
  else
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8049644:	4a0b      	ldr	r2, [pc, #44]	; (8049674 <HAL_RTC_DeactivateAlarm+0x54>)
 8049646:	6993      	ldr	r3, [r2, #24]
 8049648:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 804964c:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804964e:	4b09      	ldr	r3, [pc, #36]	; (8049674 <HAL_RTC_DeactivateAlarm+0x54>)
 8049650:	22ff      	movs	r2, #255	; 0xff
 8049652:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8049654:	2301      	movs	r3, #1
 8049656:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 804965a:	2300      	movs	r3, #0
 804965c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

  return HAL_OK;
 8049660:	4618      	mov	r0, r3
 8049662:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8049664:	461a      	mov	r2, r3
 8049666:	699b      	ldr	r3, [r3, #24]
 8049668:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 804966c:	6193      	str	r3, [r2, #24]
 804966e:	e7ee      	b.n	804964e <HAL_RTC_DeactivateAlarm+0x2e>
  __HAL_LOCK(hrtc);
 8049670:	2002      	movs	r0, #2
}
 8049672:	4770      	bx	lr
 8049674:	40002800 	.word	0x40002800

08049678 <HAL_RTC_AlarmIRQHandler>:
  * @note   Alarm non-secure is available in non-secure driver.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8049678:	b538      	push	{r3, r4, r5, lr}
 804967a:	4604      	mov	r4, r0
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);
 804967c:	4b0a      	ldr	r3, [pc, #40]	; (80496a8 <HAL_RTC_AlarmIRQHandler+0x30>)
 804967e:	6d5d      	ldr	r5, [r3, #84]	; 0x54

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8049680:	f015 0f01 	tst.w	r5, #1
 8049684:	d003      	beq.n	804968e <HAL_RTC_AlarmIRQHandler+0x16>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8049686:	2201      	movs	r2, #1
 8049688:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
 804968a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 804968c:	4798      	blx	r3
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 804968e:	f015 0f02 	tst.w	r5, #2
 8049692:	d005      	beq.n	80496a0 <HAL_RTC_AlarmIRQHandler+0x28>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8049694:	4b04      	ldr	r3, [pc, #16]	; (80496a8 <HAL_RTC_AlarmIRQHandler+0x30>)
 8049696:	2202      	movs	r2, #2
 8049698:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
 804969a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 804969c:	4620      	mov	r0, r4
 804969e:	4798      	blx	r3
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80496a0:	2301      	movs	r3, #1
 80496a2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 80496a6:	bd38      	pop	{r3, r4, r5, pc}
 80496a8:	40002800 	.word	0x40002800

080496ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80496ac:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 80496ae:	4a0b      	ldr	r2, [pc, #44]	; (80496dc <HAL_RTC_WaitForSynchro+0x30>)
 80496b0:	68d3      	ldr	r3, [r2, #12]
 80496b2:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 80496b6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80496b8:	f7fc fd70 	bl	804619c <HAL_GetTick>
 80496bc:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80496be:	4b07      	ldr	r3, [pc, #28]	; (80496dc <HAL_RTC_WaitForSynchro+0x30>)
 80496c0:	68db      	ldr	r3, [r3, #12]
 80496c2:	f013 0f20 	tst.w	r3, #32
 80496c6:	d107      	bne.n	80496d8 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80496c8:	f7fc fd68 	bl	804619c <HAL_GetTick>
 80496cc:	1b00      	subs	r0, r0, r4
 80496ce:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80496d2:	d9f4      	bls.n	80496be <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 80496d4:	2003      	movs	r0, #3
 80496d6:	e000      	b.n	80496da <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80496d8:	2000      	movs	r0, #0
}
 80496da:	bd10      	pop	{r4, pc}
 80496dc:	40002800 	.word	0x40002800

080496e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80496e0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80496e2:	4b11      	ldr	r3, [pc, #68]	; (8049728 <RTC_EnterInitMode+0x48>)
 80496e4:	68db      	ldr	r3, [r3, #12]
 80496e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80496ea:	d002      	beq.n	80496f2 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 80496ec:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 80496ee:	4620      	mov	r0, r4
 80496f0:	bd70      	pop	{r4, r5, r6, pc}
 80496f2:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80496f4:	4a0c      	ldr	r2, [pc, #48]	; (8049728 <RTC_EnterInitMode+0x48>)
 80496f6:	68d3      	ldr	r3, [r2, #12]
 80496f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80496fc:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80496fe:	f7fc fd4d 	bl	804619c <HAL_GetTick>
 8049702:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8049704:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8049706:	4b08      	ldr	r3, [pc, #32]	; (8049728 <RTC_EnterInitMode+0x48>)
 8049708:	68db      	ldr	r3, [r3, #12]
 804970a:	f013 0f40 	tst.w	r3, #64	; 0x40
 804970e:	d1ee      	bne.n	80496ee <RTC_EnterInitMode+0xe>
 8049710:	2c03      	cmp	r4, #3
 8049712:	d0ec      	beq.n	80496ee <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8049714:	f7fc fd42 	bl	804619c <HAL_GetTick>
 8049718:	1b43      	subs	r3, r0, r5
 804971a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804971e:	d9f2      	bls.n	8049706 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8049720:	2403      	movs	r4, #3
 8049722:	f886 4025 	strb.w	r4, [r6, #37]	; 0x25
 8049726:	e7ee      	b.n	8049706 <RTC_EnterInitMode+0x26>
 8049728:	40002800 	.word	0x40002800

0804972c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 804972c:	b510      	push	{r4, lr}
 804972e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8049730:	4b10      	ldr	r3, [pc, #64]	; (8049774 <RTC_ExitInitMode+0x48>)
 8049732:	68da      	ldr	r2, [r3, #12]
 8049734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8049738:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 804973a:	699b      	ldr	r3, [r3, #24]
 804973c:	f013 0f20 	tst.w	r3, #32
 8049740:	d106      	bne.n	8049750 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8049742:	f7ff ffb3 	bl	80496ac <HAL_RTC_WaitForSynchro>
 8049746:	b198      	cbz	r0, 8049770 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8049748:	2003      	movs	r0, #3
 804974a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
      status = HAL_TIMEOUT;
 804974e:	e00f      	b.n	8049770 <RTC_ExitInitMode+0x44>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8049750:	4a08      	ldr	r2, [pc, #32]	; (8049774 <RTC_ExitInitMode+0x48>)
 8049752:	6993      	ldr	r3, [r2, #24]
 8049754:	f023 0320 	bic.w	r3, r3, #32
 8049758:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 804975a:	f7ff ffa7 	bl	80496ac <HAL_RTC_WaitForSynchro>
 804975e:	b110      	cbz	r0, 8049766 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8049760:	2003      	movs	r0, #3
 8049762:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8049766:	4a03      	ldr	r2, [pc, #12]	; (8049774 <RTC_ExitInitMode+0x48>)
 8049768:	6993      	ldr	r3, [r2, #24]
 804976a:	f043 0320 	orr.w	r3, r3, #32
 804976e:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8049770:	bd10      	pop	{r4, pc}
 8049772:	bf00      	nop
 8049774:	40002800 	.word	0x40002800

08049778 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8049778:	2800      	cmp	r0, #0
 804977a:	d06f      	beq.n	804985c <HAL_RTC_Init+0xe4>
{
 804977c:	b538      	push	{r3, r4, r5, lr}
 804977e:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8049780:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8049784:	2b00      	cmp	r3, #0
 8049786:	d12a      	bne.n	80497de <HAL_RTC_Init+0x66>
      hrtc->Lock = HAL_UNLOCKED;
 8049788:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;             /* Legacy weak AlarmAEventCallback      */
 804978c:	4b34      	ldr	r3, [pc, #208]	; (8049860 <HAL_RTC_Init+0xe8>)
 804978e:	6283      	str	r3, [r0, #40]	; 0x28
      hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak AlarmBEventCallback      */
 8049790:	4b34      	ldr	r3, [pc, #208]	; (8049864 <HAL_RTC_Init+0xec>)
 8049792:	62c3      	str	r3, [r0, #44]	; 0x2c
      hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;        /* Legacy weak TimeStampEventCallback   */
 8049794:	4b34      	ldr	r3, [pc, #208]	; (8049868 <HAL_RTC_Init+0xf0>)
 8049796:	6303      	str	r3, [r0, #48]	; 0x30
      hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback;      /* Legacy weak WakeUpTimerEventCallback */
 8049798:	4b34      	ldr	r3, [pc, #208]	; (804986c <HAL_RTC_Init+0xf4>)
 804979a:	6343      	str	r3, [r0, #52]	; 0x34
      hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;          /* Legacy weak Tamper1EventCallback     */
 804979c:	4b34      	ldr	r3, [pc, #208]	; (8049870 <HAL_RTC_Init+0xf8>)
 804979e:	6383      	str	r3, [r0, #56]	; 0x38
      hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;          /* Legacy weak Tamper2EventCallback     */
 80497a0:	4b34      	ldr	r3, [pc, #208]	; (8049874 <HAL_RTC_Init+0xfc>)
 80497a2:	63c3      	str	r3, [r0, #60]	; 0x3c
      hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;          /* Legacy weak Tamper3EventCallback     */
 80497a4:	4b34      	ldr	r3, [pc, #208]	; (8049878 <HAL_RTC_Init+0x100>)
 80497a6:	6403      	str	r3, [r0, #64]	; 0x40
      hrtc->Tamper4EventCallback         =  HAL_RTCEx_Tamper4EventCallback;          /* Legacy weak Tamper4EventCallback     */
 80497a8:	4b34      	ldr	r3, [pc, #208]	; (804987c <HAL_RTC_Init+0x104>)
 80497aa:	6443      	str	r3, [r0, #68]	; 0x44
      hrtc->Tamper5EventCallback         =  HAL_RTCEx_Tamper5EventCallback;          /* Legacy weak Tamper5EventCallback     */
 80497ac:	4b34      	ldr	r3, [pc, #208]	; (8049880 <HAL_RTC_Init+0x108>)
 80497ae:	6483      	str	r3, [r0, #72]	; 0x48
      hrtc->Tamper6EventCallback         =  HAL_RTCEx_Tamper6EventCallback;          /* Legacy weak Tamper6EventCallback     */
 80497b0:	4b34      	ldr	r3, [pc, #208]	; (8049884 <HAL_RTC_Init+0x10c>)
 80497b2:	64c3      	str	r3, [r0, #76]	; 0x4c
      hrtc->Tamper7EventCallback         =  HAL_RTCEx_Tamper7EventCallback;          /* Legacy weak Tamper7EventCallback     */
 80497b4:	4b34      	ldr	r3, [pc, #208]	; (8049888 <HAL_RTC_Init+0x110>)
 80497b6:	6503      	str	r3, [r0, #80]	; 0x50
      hrtc->Tamper8EventCallback         =  HAL_RTCEx_Tamper8EventCallback;          /* Legacy weak Tamper8EventCallback     */
 80497b8:	4b34      	ldr	r3, [pc, #208]	; (804988c <HAL_RTC_Init+0x114>)
 80497ba:	6543      	str	r3, [r0, #84]	; 0x54
      hrtc->InternalTamper1EventCallback =  HAL_RTCEx_InternalTamper1EventCallback;  /* Legacy weak InternalTamper1EventCallback */
 80497bc:	4b34      	ldr	r3, [pc, #208]	; (8049890 <HAL_RTC_Init+0x118>)
 80497be:	6583      	str	r3, [r0, #88]	; 0x58
      hrtc->InternalTamper2EventCallback =  HAL_RTCEx_InternalTamper2EventCallback;  /* Legacy weak InternalTamper2EventCallback */
 80497c0:	4b34      	ldr	r3, [pc, #208]	; (8049894 <HAL_RTC_Init+0x11c>)
 80497c2:	65c3      	str	r3, [r0, #92]	; 0x5c
      hrtc->InternalTamper3EventCallback =  HAL_RTCEx_InternalTamper3EventCallback;  /* Legacy weak InternalTamper3EventCallback */
 80497c4:	4b34      	ldr	r3, [pc, #208]	; (8049898 <HAL_RTC_Init+0x120>)
 80497c6:	6603      	str	r3, [r0, #96]	; 0x60
      hrtc->InternalTamper5EventCallback =  HAL_RTCEx_InternalTamper5EventCallback;  /* Legacy weak InternalTamper5EventCallback */
 80497c8:	4b34      	ldr	r3, [pc, #208]	; (804989c <HAL_RTC_Init+0x124>)
 80497ca:	6643      	str	r3, [r0, #100]	; 0x64
      hrtc->InternalTamper8EventCallback =  HAL_RTCEx_InternalTamper8EventCallback;  /* Legacy weak InternalTamper8EventCallback */
 80497cc:	4b34      	ldr	r3, [pc, #208]	; (80498a0 <HAL_RTC_Init+0x128>)
 80497ce:	6683      	str	r3, [r0, #104]	; 0x68
      if (hrtc->MspInitCallback == NULL)
 80497d0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 80497d2:	b1c3      	cbz	r3, 8049806 <HAL_RTC_Init+0x8e>
      hrtc->MspInitCallback(hrtc);
 80497d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80497d6:	4620      	mov	r0, r4
 80497d8:	4798      	blx	r3
      if (hrtc->MspDeInitCallback == NULL)
 80497da:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80497dc:	b1b3      	cbz	r3, 804980c <HAL_RTC_Init+0x94>
    hrtc->State = HAL_RTC_STATE_BUSY;
 80497de:	2302      	movs	r3, #2
 80497e0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80497e4:	4b2f      	ldr	r3, [pc, #188]	; (80498a4 <HAL_RTC_Init+0x12c>)
 80497e6:	22ca      	movs	r2, #202	; 0xca
 80497e8:	625a      	str	r2, [r3, #36]	; 0x24
 80497ea:	2253      	movs	r2, #83	; 0x53
 80497ec:	625a      	str	r2, [r3, #36]	; 0x24
    status = RTC_EnterInitMode(hrtc);
 80497ee:	4620      	mov	r0, r4
 80497f0:	f7ff ff76 	bl	80496e0 <RTC_EnterInitMode>
    if (status == HAL_OK)
 80497f4:	b168      	cbz	r0, 8049812 <HAL_RTC_Init+0x9a>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80497f6:	4b2b      	ldr	r3, [pc, #172]	; (80498a4 <HAL_RTC_Init+0x12c>)
 80497f8:	22ff      	movs	r2, #255	; 0xff
 80497fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80497fc:	b910      	cbnz	r0, 8049804 <HAL_RTC_Init+0x8c>
      hrtc->State = HAL_RTC_STATE_READY;
 80497fe:	2301      	movs	r3, #1
 8049800:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 8049804:	bd38      	pop	{r3, r4, r5, pc}
        hrtc->MspInitCallback = HAL_RTC_MspInit;
 8049806:	4b28      	ldr	r3, [pc, #160]	; (80498a8 <HAL_RTC_Init+0x130>)
 8049808:	66c3      	str	r3, [r0, #108]	; 0x6c
 804980a:	e7e3      	b.n	80497d4 <HAL_RTC_Init+0x5c>
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 804980c:	4b27      	ldr	r3, [pc, #156]	; (80498ac <HAL_RTC_Init+0x134>)
 804980e:	6723      	str	r3, [r4, #112]	; 0x70
 8049810:	e7e5      	b.n	80497de <HAL_RTC_Init+0x66>
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8049812:	4b24      	ldr	r3, [pc, #144]	; (80498a4 <HAL_RTC_Init+0x12c>)
 8049814:	699a      	ldr	r2, [r3, #24]
 8049816:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 804981a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804981e:	619a      	str	r2, [r3, #24]
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8049820:	6999      	ldr	r1, [r3, #24]
 8049822:	6862      	ldr	r2, [r4, #4]
 8049824:	6920      	ldr	r0, [r4, #16]
 8049826:	4302      	orrs	r2, r0
 8049828:	69a0      	ldr	r0, [r4, #24]
 804982a:	4302      	orrs	r2, r0
 804982c:	430a      	orrs	r2, r1
 804982e:	619a      	str	r2, [r3, #24]
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8049830:	68e2      	ldr	r2, [r4, #12]
 8049832:	68a1      	ldr	r1, [r4, #8]
 8049834:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8049838:	611a      	str	r2, [r3, #16]
      status = RTC_ExitInitMode(hrtc);
 804983a:	4620      	mov	r0, r4
 804983c:	f7ff ff76 	bl	804972c <RTC_ExitInitMode>
      if (status == HAL_OK)
 8049840:	2800      	cmp	r0, #0
 8049842:	d1d8      	bne.n	80497f6 <HAL_RTC_Init+0x7e>
        MODIFY_REG(RTC->CR, \
 8049844:	4917      	ldr	r1, [pc, #92]	; (80498a4 <HAL_RTC_Init+0x12c>)
 8049846:	698b      	ldr	r3, [r1, #24]
 8049848:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 804984c:	6a22      	ldr	r2, [r4, #32]
 804984e:	69e5      	ldr	r5, [r4, #28]
 8049850:	432a      	orrs	r2, r5
 8049852:	6965      	ldr	r5, [r4, #20]
 8049854:	432a      	orrs	r2, r5
 8049856:	4313      	orrs	r3, r2
 8049858:	618b      	str	r3, [r1, #24]
 804985a:	e7cc      	b.n	80497f6 <HAL_RTC_Init+0x7e>
  HAL_StatusTypeDef status = HAL_ERROR;
 804985c:	2001      	movs	r0, #1
}
 804985e:	4770      	bx	lr
 8049860:	08042509 	.word	0x08042509
 8049864:	08049e09 	.word	0x08049e09
 8049868:	08049c7d 	.word	0x08049c7d
 804986c:	08049d75 	.word	0x08049d75
 8049870:	08049e0b 	.word	0x08049e0b
 8049874:	08049e0d 	.word	0x08049e0d
 8049878:	08049e0f 	.word	0x08049e0f
 804987c:	08049e11 	.word	0x08049e11
 8049880:	08049e13 	.word	0x08049e13
 8049884:	08049e15 	.word	0x08049e15
 8049888:	08049e17 	.word	0x08049e17
 804988c:	08049e19 	.word	0x08049e19
 8049890:	08049e1b 	.word	0x08049e1b
 8049894:	08049e1d 	.word	0x08049e1d
 8049898:	08049e1f 	.word	0x08049e1f
 804989c:	08049e21 	.word	0x08049e21
 80498a0:	08049e23 	.word	0x08049e23
 80498a4:	40002800 	.word	0x40002800
 80498a8:	0804215d 	.word	0x0804215d
 80498ac:	080421cd 	.word	0x080421cd

080498b0 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80498b0:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80498b2:	2809      	cmp	r0, #9
 80498b4:	d903      	bls.n	80498be <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
 80498b6:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80498b8:	380a      	subs	r0, #10
 80498ba:	b2c0      	uxtb	r0, r0
 80498bc:	e7f9      	b.n	80498b2 <RTC_ByteToBcd2+0x2>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80498be:	011b      	lsls	r3, r3, #4
 80498c0:	b2db      	uxtb	r3, r3
}
 80498c2:	4318      	orrs	r0, r3
 80498c4:	4770      	bx	lr
	...

080498c8 <HAL_RTC_SetTime>:
  __HAL_LOCK(hrtc);
 80498c8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80498cc:	2b01      	cmp	r3, #1
 80498ce:	d05a      	beq.n	8049986 <HAL_RTC_SetTime+0xbe>
{
 80498d0:	b570      	push	{r4, r5, r6, lr}
 80498d2:	4604      	mov	r4, r0
 80498d4:	460d      	mov	r5, r1
 80498d6:	4616      	mov	r6, r2
  __HAL_LOCK(hrtc);
 80498d8:	2301      	movs	r3, #1
 80498da:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_BUSY;
 80498de:	2302      	movs	r3, #2
 80498e0:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80498e4:	4b29      	ldr	r3, [pc, #164]	; (804998c <HAL_RTC_SetTime+0xc4>)
 80498e6:	22ca      	movs	r2, #202	; 0xca
 80498e8:	625a      	str	r2, [r3, #36]	; 0x24
 80498ea:	2253      	movs	r2, #83	; 0x53
 80498ec:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80498ee:	f7ff fef7 	bl	80496e0 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80498f2:	bb58      	cbnz	r0, 804994c <HAL_RTC_SetTime+0x84>
    if (Format == RTC_FORMAT_BIN)
 80498f4:	2e00      	cmp	r6, #0
 80498f6:	d134      	bne.n	8049962 <HAL_RTC_SetTime+0x9a>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80498f8:	4b24      	ldr	r3, [pc, #144]	; (804998c <HAL_RTC_SetTime+0xc4>)
 80498fa:	699b      	ldr	r3, [r3, #24]
 80498fc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8049900:	d101      	bne.n	8049906 <HAL_RTC_SetTime+0x3e>
        sTime->TimeFormat = 0x00U;
 8049902:	2300      	movs	r3, #0
 8049904:	70eb      	strb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8049906:	7828      	ldrb	r0, [r5, #0]
 8049908:	f7ff ffd2 	bl	80498b0 <RTC_ByteToBcd2>
 804990c:	0406      	lsls	r6, r0, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 804990e:	7868      	ldrb	r0, [r5, #1]
 8049910:	f7ff ffce 	bl	80498b0 <RTC_ByteToBcd2>
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8049914:	ea46 2600 	orr.w	r6, r6, r0, lsl #8
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8049918:	78a8      	ldrb	r0, [r5, #2]
 804991a:	f7ff ffc9 	bl	80498b0 <RTC_ByteToBcd2>
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 804991e:	4330      	orrs	r0, r6
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8049920:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8049922:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8049926:	f000 307f 	and.w	r0, r0, #2139062143	; 0x7f7f7f7f
 804992a:	f020 40fe 	bic.w	r0, r0, #2130706432	; 0x7f000000
 804992e:	4b17      	ldr	r3, [pc, #92]	; (804998c <HAL_RTC_SetTime+0xc4>)
 8049930:	6018      	str	r0, [r3, #0]
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8049932:	699a      	ldr	r2, [r3, #24]
 8049934:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8049938:	619a      	str	r2, [r3, #24]
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 804993a:	699a      	ldr	r2, [r3, #24]
 804993c:	68e9      	ldr	r1, [r5, #12]
 804993e:	6928      	ldr	r0, [r5, #16]
 8049940:	4301      	orrs	r1, r0
 8049942:	430a      	orrs	r2, r1
 8049944:	619a      	str	r2, [r3, #24]
    status = RTC_ExitInitMode(hrtc);
 8049946:	4620      	mov	r0, r4
 8049948:	f7ff fef0 	bl	804972c <RTC_ExitInitMode>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804994c:	4b0f      	ldr	r3, [pc, #60]	; (804998c <HAL_RTC_SetTime+0xc4>)
 804994e:	22ff      	movs	r2, #255	; 0xff
 8049950:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 8049952:	b910      	cbnz	r0, 804995a <HAL_RTC_SetTime+0x92>
    hrtc->State = HAL_RTC_STATE_READY;
 8049954:	2301      	movs	r3, #1
 8049956:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hrtc);
 804995a:	2300      	movs	r3, #0
 804995c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8049960:	bd70      	pop	{r4, r5, r6, pc}
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8049962:	4b0a      	ldr	r3, [pc, #40]	; (804998c <HAL_RTC_SetTime+0xc4>)
 8049964:	699b      	ldr	r3, [r3, #24]
 8049966:	f013 0f40 	tst.w	r3, #64	; 0x40
 804996a:	d101      	bne.n	8049970 <HAL_RTC_SetTime+0xa8>
        sTime->TimeFormat = 0x00U;
 804996c:	2300      	movs	r3, #0
 804996e:	70eb      	strb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8049970:	782b      	ldrb	r3, [r5, #0]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8049972:	7868      	ldrb	r0, [r5, #1]
 8049974:	0200      	lsls	r0, r0, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8049976:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 804997a:	78ab      	ldrb	r3, [r5, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 804997c:	4318      	orrs	r0, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 804997e:	78eb      	ldrb	r3, [r5, #3]
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8049980:	ea40 5083 	orr.w	r0, r0, r3, lsl #22
 8049984:	e7cf      	b.n	8049926 <HAL_RTC_SetTime+0x5e>
  __HAL_LOCK(hrtc);
 8049986:	2002      	movs	r0, #2
}
 8049988:	4770      	bx	lr
 804998a:	bf00      	nop
 804998c:	40002800 	.word	0x40002800

08049990 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8049990:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8049994:	2b01      	cmp	r3, #1
 8049996:	d04b      	beq.n	8049a30 <HAL_RTC_SetDate+0xa0>
{
 8049998:	b570      	push	{r4, r5, r6, lr}
 804999a:	4605      	mov	r5, r0
 804999c:	460e      	mov	r6, r1
  __HAL_LOCK(hrtc);
 804999e:	2301      	movs	r3, #1
 80499a0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_BUSY;
 80499a4:	2302      	movs	r3, #2
 80499a6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80499aa:	b93a      	cbnz	r2, 80499bc <HAL_RTC_SetDate+0x2c>
 80499ac:	784b      	ldrb	r3, [r1, #1]
 80499ae:	f013 0f10 	tst.w	r3, #16
 80499b2:	d003      	beq.n	80499bc <HAL_RTC_SetDate+0x2c>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80499b4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80499b8:	330a      	adds	r3, #10
 80499ba:	704b      	strb	r3, [r1, #1]
  if (Format == RTC_FORMAT_BIN)
 80499bc:	bb1a      	cbnz	r2, 8049a06 <HAL_RTC_SetDate+0x76>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80499be:	78f0      	ldrb	r0, [r6, #3]
 80499c0:	f7ff ff76 	bl	80498b0 <RTC_ByteToBcd2>
 80499c4:	0404      	lsls	r4, r0, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80499c6:	7870      	ldrb	r0, [r6, #1]
 80499c8:	f7ff ff72 	bl	80498b0 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80499cc:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80499d0:	78b0      	ldrb	r0, [r6, #2]
 80499d2:	f7ff ff6d 	bl	80498b0 <RTC_ByteToBcd2>
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80499d6:	4304      	orrs	r4, r0
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80499d8:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80499da:	ea44 3440 	orr.w	r4, r4, r0, lsl #13
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80499de:	4b15      	ldr	r3, [pc, #84]	; (8049a34 <HAL_RTC_SetDate+0xa4>)
 80499e0:	22ca      	movs	r2, #202	; 0xca
 80499e2:	625a      	str	r2, [r3, #36]	; 0x24
 80499e4:	2253      	movs	r2, #83	; 0x53
 80499e6:	625a      	str	r2, [r3, #36]	; 0x24
  status = RTC_EnterInitMode(hrtc);
 80499e8:	4628      	mov	r0, r5
 80499ea:	f7ff fe79 	bl	80496e0 <RTC_EnterInitMode>
  if (status == HAL_OK)
 80499ee:	b1a8      	cbz	r0, 8049a1c <HAL_RTC_SetDate+0x8c>
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80499f0:	4b10      	ldr	r3, [pc, #64]	; (8049a34 <HAL_RTC_SetDate+0xa4>)
 80499f2:	22ff      	movs	r2, #255	; 0xff
 80499f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (status == HAL_OK)
 80499f6:	b910      	cbnz	r0, 80499fe <HAL_RTC_SetDate+0x6e>
    hrtc->State = HAL_RTC_STATE_READY;
 80499f8:	2301      	movs	r3, #1
 80499fa:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  __HAL_UNLOCK(hrtc);
 80499fe:	2300      	movs	r3, #0
 8049a00:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
}
 8049a04:	bd70      	pop	{r4, r5, r6, pc}
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8049a06:	78f3      	ldrb	r3, [r6, #3]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8049a08:	7874      	ldrb	r4, [r6, #1]
 8049a0a:	0224      	lsls	r4, r4, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8049a0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8049a10:	78b0      	ldrb	r0, [r6, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8049a12:	4304      	orrs	r4, r0
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8049a14:	7830      	ldrb	r0, [r6, #0]
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8049a16:	ea44 3440 	orr.w	r4, r4, r0, lsl #13
 8049a1a:	e7e0      	b.n	80499de <HAL_RTC_SetDate+0x4e>
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8049a1c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8049a20:	f024 04c0 	bic.w	r4, r4, #192	; 0xc0
 8049a24:	4b03      	ldr	r3, [pc, #12]	; (8049a34 <HAL_RTC_SetDate+0xa4>)
 8049a26:	605c      	str	r4, [r3, #4]
    status = RTC_ExitInitMode(hrtc);
 8049a28:	4628      	mov	r0, r5
 8049a2a:	f7ff fe7f 	bl	804972c <RTC_ExitInitMode>
 8049a2e:	e7df      	b.n	80499f0 <HAL_RTC_SetDate+0x60>
  __HAL_LOCK(hrtc);
 8049a30:	2002      	movs	r0, #2
}
 8049a32:	4770      	bx	lr
 8049a34:	40002800 	.word	0x40002800

08049a38 <HAL_RTC_SetAlarm_IT>:
{
 8049a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8049a3a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8049a3e:	2b01      	cmp	r3, #1
 8049a40:	d07d      	beq.n	8049b3e <HAL_RTC_SetAlarm_IT+0x106>
 8049a42:	4606      	mov	r6, r0
 8049a44:	460c      	mov	r4, r1
 8049a46:	2301      	movs	r3, #1
 8049a48:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_BUSY;
 8049a4c:	2302      	movs	r3, #2
 8049a4e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  if (Format == RTC_FORMAT_BIN)
 8049a52:	2a00      	cmp	r2, #0
 8049a54:	d14b      	bne.n	8049aee <HAL_RTC_SetAlarm_IT+0xb6>
    if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8049a56:	4b3b      	ldr	r3, [pc, #236]	; (8049b44 <HAL_RTC_SetAlarm_IT+0x10c>)
 8049a58:	699b      	ldr	r3, [r3, #24]
 8049a5a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8049a5e:	d101      	bne.n	8049a64 <HAL_RTC_SetAlarm_IT+0x2c>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8049a60:	2300      	movs	r3, #0
 8049a62:	70cb      	strb	r3, [r1, #3]
    if (sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
 8049a64:	69e5      	ldr	r5, [r4, #28]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8049a66:	7820      	ldrb	r0, [r4, #0]
 8049a68:	f7ff ff22 	bl	80498b0 <RTC_ByteToBcd2>
 8049a6c:	0407      	lsls	r7, r0, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8049a6e:	7860      	ldrb	r0, [r4, #1]
 8049a70:	f7ff ff1e 	bl	80498b0 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8049a74:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8049a78:	78a0      	ldrb	r0, [r4, #2]
 8049a7a:	f7ff ff19 	bl	80498b0 <RTC_ByteToBcd2>
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8049a7e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8049a80:	78e0      	ldrb	r0, [r4, #3]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8049a82:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8049a86:	f894 0020 	ldrb.w	r0, [r4, #32]
 8049a8a:	f7ff ff11 	bl	80498b0 <RTC_ByteToBcd2>
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8049a8e:	ea47 6700 	orr.w	r7, r7, r0, lsl #24
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8049a92:	432f      	orrs	r7, r5
              ((uint32_t)sAlarm->AlarmMask));
 8049a94:	6963      	ldr	r3, [r4, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8049a96:	433b      	orrs	r3, r7
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8049a98:	6861      	ldr	r1, [r4, #4]
 8049a9a:	69a2      	ldr	r2, [r4, #24]
 8049a9c:	ea41 0002 	orr.w	r0, r1, r2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8049aa0:	4a28      	ldr	r2, [pc, #160]	; (8049b44 <HAL_RTC_SetAlarm_IT+0x10c>)
 8049aa2:	21ca      	movs	r1, #202	; 0xca
 8049aa4:	6251      	str	r1, [r2, #36]	; 0x24
 8049aa6:	2153      	movs	r1, #83	; 0x53
 8049aa8:	6251      	str	r1, [r2, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8049aaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8049aac:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8049ab0:	d037      	beq.n	8049b22 <HAL_RTC_SetAlarm_IT+0xea>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8049ab2:	4a24      	ldr	r2, [pc, #144]	; (8049b44 <HAL_RTC_SetAlarm_IT+0x10c>)
 8049ab4:	6991      	ldr	r1, [r2, #24]
 8049ab6:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 8049aba:	6191      	str	r1, [r2, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8049abc:	2102      	movs	r1, #2
 8049abe:	65d1      	str	r1, [r2, #92]	; 0x5c
    WRITE_REG(RTC->ALRMBR, (uint32_t)tmpreg);
 8049ac0:	6493      	str	r3, [r2, #72]	; 0x48
    WRITE_REG(RTC->ALRMBSSR, subsecondtmpreg);
 8049ac2:	64d0      	str	r0, [r2, #76]	; 0x4c
    SET_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8049ac4:	6993      	ldr	r3, [r2, #24]
 8049ac6:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8049aca:	6193      	str	r3, [r2, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8049acc:	4a1e      	ldr	r2, [pc, #120]	; (8049b48 <HAL_RTC_SetAlarm_IT+0x110>)
 8049ace:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8049ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8049ad6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8049ada:	4b1a      	ldr	r3, [pc, #104]	; (8049b44 <HAL_RTC_SetAlarm_IT+0x10c>)
 8049adc:	22ff      	movs	r2, #255	; 0xff
 8049ade:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8049ae0:	2301      	movs	r3, #1
 8049ae2:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
  __HAL_UNLOCK(hrtc);
 8049ae6:	2000      	movs	r0, #0
 8049ae8:	f886 0024 	strb.w	r0, [r6, #36]	; 0x24
}
 8049aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8049aee:	4b15      	ldr	r3, [pc, #84]	; (8049b44 <HAL_RTC_SetAlarm_IT+0x10c>)
 8049af0:	699b      	ldr	r3, [r3, #24]
 8049af2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8049af6:	d101      	bne.n	8049afc <HAL_RTC_SetAlarm_IT+0xc4>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8049af8:	2300      	movs	r3, #0
 8049afa:	70cb      	strb	r3, [r1, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8049afc:	7822      	ldrb	r2, [r4, #0]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8049afe:	7863      	ldrb	r3, [r4, #1]
 8049b00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8049b02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8049b06:	78a2      	ldrb	r2, [r4, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8049b08:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8049b0a:	78e2      	ldrb	r2, [r4, #3]
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8049b0c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8049b10:	f894 2020 	ldrb.w	r2, [r4, #32]
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8049b14:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8049b18:	69e2      	ldr	r2, [r4, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8049b1a:	4313      	orrs	r3, r2
              ((uint32_t)sAlarm->AlarmMask));
 8049b1c:	6960      	ldr	r0, [r4, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8049b1e:	4303      	orrs	r3, r0
 8049b20:	e7ba      	b.n	8049a98 <HAL_RTC_SetAlarm_IT+0x60>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8049b22:	4a08      	ldr	r2, [pc, #32]	; (8049b44 <HAL_RTC_SetAlarm_IT+0x10c>)
 8049b24:	6991      	ldr	r1, [r2, #24]
 8049b26:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8049b2a:	6191      	str	r1, [r2, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8049b2c:	2101      	movs	r1, #1
 8049b2e:	65d1      	str	r1, [r2, #92]	; 0x5c
    WRITE_REG(RTC->ALRMAR, (uint32_t)tmpreg);
 8049b30:	6413      	str	r3, [r2, #64]	; 0x40
    WRITE_REG(RTC->ALRMASSR, subsecondtmpreg);
 8049b32:	6450      	str	r0, [r2, #68]	; 0x44
    SET_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8049b34:	6993      	ldr	r3, [r2, #24]
 8049b36:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8049b3a:	6193      	str	r3, [r2, #24]
 8049b3c:	e7c6      	b.n	8049acc <HAL_RTC_SetAlarm_IT+0x94>
  __HAL_LOCK(hrtc);
 8049b3e:	2002      	movs	r0, #2
 8049b40:	e7d4      	b.n	8049aec <HAL_RTC_SetAlarm_IT+0xb4>
 8049b42:	bf00      	nop
 8049b44:	40002800 	.word	0x40002800
 8049b48:	4002f400 	.word	0x4002f400

08049b4c <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8049b4c:	0903      	lsrs	r3, r0, #4
 8049b4e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8049b52:	f000 000f 	and.w	r0, r0, #15
 8049b56:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8049b5a:	b2c0      	uxtb	r0, r0
 8049b5c:	4770      	bx	lr
	...

08049b60 <HAL_RTC_GetTime>:
{
 8049b60:	b570      	push	{r4, r5, r6, lr}
 8049b62:	460c      	mov	r4, r1
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8049b64:	4b10      	ldr	r3, [pc, #64]	; (8049ba8 <HAL_RTC_GetTime+0x48>)
 8049b66:	6899      	ldr	r1, [r3, #8]
 8049b68:	6061      	str	r1, [r4, #4]
  sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8049b6a:	6919      	ldr	r1, [r3, #16]
 8049b6c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8049b70:	60a1      	str	r1, [r4, #8]
  tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8049b72:	681b      	ldr	r3, [r3, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8049b74:	f3c3 4005 	ubfx	r0, r3, #16, #6
 8049b78:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8049b7a:	f3c3 2606 	ubfx	r6, r3, #8, #7
 8049b7e:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8049b80:	f003 057f 	and.w	r5, r3, #127	; 0x7f
 8049b84:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8049b86:	f3c3 5380 	ubfx	r3, r3, #22, #1
 8049b8a:	70e3      	strb	r3, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8049b8c:	b952      	cbnz	r2, 8049ba4 <HAL_RTC_GetTime+0x44>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8049b8e:	f7ff ffdd 	bl	8049b4c <RTC_Bcd2ToByte>
 8049b92:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8049b94:	4630      	mov	r0, r6
 8049b96:	f7ff ffd9 	bl	8049b4c <RTC_Bcd2ToByte>
 8049b9a:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8049b9c:	4628      	mov	r0, r5
 8049b9e:	f7ff ffd5 	bl	8049b4c <RTC_Bcd2ToByte>
 8049ba2:	70a0      	strb	r0, [r4, #2]
}
 8049ba4:	2000      	movs	r0, #0
 8049ba6:	bd70      	pop	{r4, r5, r6, pc}
 8049ba8:	40002800 	.word	0x40002800

08049bac <HAL_RTC_GetDate>:
{
 8049bac:	b570      	push	{r4, r5, r6, lr}
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8049bae:	4b0e      	ldr	r3, [pc, #56]	; (8049be8 <HAL_RTC_GetDate+0x3c>)
 8049bb0:	685b      	ldr	r3, [r3, #4]
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8049bb2:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8049bb6:	70c8      	strb	r0, [r1, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8049bb8:	f3c3 2604 	ubfx	r6, r3, #8, #5
 8049bbc:	704e      	strb	r6, [r1, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8049bbe:	f003 053f 	and.w	r5, r3, #63	; 0x3f
 8049bc2:	708d      	strb	r5, [r1, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8049bc4:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8049bc8:	700b      	strb	r3, [r1, #0]
  if (Format == RTC_FORMAT_BIN)
 8049bca:	b95a      	cbnz	r2, 8049be4 <HAL_RTC_GetDate+0x38>
 8049bcc:	460c      	mov	r4, r1
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8049bce:	f7ff ffbd 	bl	8049b4c <RTC_Bcd2ToByte>
 8049bd2:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8049bd4:	4630      	mov	r0, r6
 8049bd6:	f7ff ffb9 	bl	8049b4c <RTC_Bcd2ToByte>
 8049bda:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8049bdc:	4628      	mov	r0, r5
 8049bde:	f7ff ffb5 	bl	8049b4c <RTC_Bcd2ToByte>
 8049be2:	70a0      	strb	r0, [r4, #2]
}
 8049be4:	2000      	movs	r0, #0
 8049be6:	bd70      	pop	{r4, r5, r6, pc}
 8049be8:	40002800 	.word	0x40002800

08049bec <HAL_RTCEx_SetTimeStamp_IT>:
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8049bec:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8049bf0:	2b01      	cmp	r3, #1
 8049bf2:	d02a      	beq.n	8049c4a <HAL_RTCEx_SetTimeStamp_IT+0x5e>
{
 8049bf4:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8049bf6:	2401      	movs	r4, #1
 8049bf8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8049bfc:	2302      	movs	r3, #2
 8049bfe:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  /* RTC timestamp Interrupt Configuration: EXTI configuration */
  __HAL_RTC_TIMESTAMP_EXTI_ENABLE_IT();
 8049c02:	4a13      	ldr	r2, [pc, #76]	; (8049c50 <HAL_RTCEx_SetTimeStamp_IT+0x64>)
 8049c04:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8049c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8049c0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Get the RTC_CR register and clear the bits to be configured */
  CLEAR_BIT(RTC->CR, (RTC_CR_TSEDGE | RTC_CR_TSE));
 8049c10:	4b10      	ldr	r3, [pc, #64]	; (8049c54 <HAL_RTCEx_SetTimeStamp_IT+0x68>)
 8049c12:	699a      	ldr	r2, [r3, #24]
 8049c14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8049c18:	f022 0208 	bic.w	r2, r2, #8
 8049c1c:	619a      	str	r2, [r3, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8049c1e:	22ca      	movs	r2, #202	; 0xca
 8049c20:	625a      	str	r2, [r3, #36]	; 0x24
 8049c22:	2253      	movs	r2, #83	; 0x53
 8049c24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE before Enable bit to avoid unwanted TSF setting. */
  SET_BIT(RTC->CR, (uint32_t)TimeStampEdge);
 8049c26:	699a      	ldr	r2, [r3, #24]
 8049c28:	4311      	orrs	r1, r2
 8049c2a:	6199      	str	r1, [r3, #24]

  /* Enable timestamp and IT */
  SET_BIT(RTC->CR, RTC_CR_TSE | RTC_CR_TSIE);
 8049c2c:	699a      	ldr	r2, [r3, #24]
 8049c2e:	f442 4208 	orr.w	r2, r2, #34816	; 0x8800
 8049c32:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8049c34:	22ff      	movs	r2, #255	; 0xff
 8049c36:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8049c38:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8049c3c:	2300      	movs	r3, #0
 8049c3e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

  return HAL_OK;
 8049c42:	4618      	mov	r0, r3
}
 8049c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8049c48:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8049c4a:	2002      	movs	r0, #2
}
 8049c4c:	4770      	bx	lr
 8049c4e:	bf00      	nop
 8049c50:	4002f400 	.word	0x4002f400
 8049c54:	40002800 	.word	0x40002800

08049c58 <HAL_RTCEx_TimeStampIRQHandler>:
  * @brief  Handle TimeStamp non-secure interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_TimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8049c58:	b510      	push	{r4, lr}
 8049c5a:	4604      	mov	r4, r0
  if (READ_BIT(RTC->MISR, RTC_MISR_TSMF) != 0U)
 8049c5c:	4b06      	ldr	r3, [pc, #24]	; (8049c78 <HAL_RTCEx_TimeStampIRQHandler+0x20>)
 8049c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8049c60:	f013 0f08 	tst.w	r3, #8
 8049c64:	d004      	beq.n	8049c70 <HAL_RTCEx_TimeStampIRQHandler+0x18>
  {
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call TimeStampEvent registered Callback */
    hrtc->TimeStampEventCallback(hrtc);
 8049c66:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8049c68:	4798      	blx	r3
#else
    HAL_RTCEx_TimeStampEventCallback(hrtc);
#endif
    /* Clearing flags after the Callback because the content of RTC_TSTR and RTC_TSDR are cleared when TSF bit is reset.*/
    WRITE_REG(RTC->SCR, RTC_SCR_CITSF | RTC_SCR_CTSF);
 8049c6a:	4b03      	ldr	r3, [pc, #12]	; (8049c78 <HAL_RTCEx_TimeStampIRQHandler+0x20>)
 8049c6c:	2228      	movs	r2, #40	; 0x28
 8049c6e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8049c70:	2301      	movs	r3, #1
 8049c72:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 8049c76:	bd10      	pop	{r4, pc}
 8049c78:	40002800 	.word	0x40002800

08049c7c <HAL_RTCEx_TimeStampEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8049c7c:	4770      	bx	lr
	...

08049c80 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 8049c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8049c84:	461f      	mov	r7, r3
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8049c86:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8049c8a:	2b01      	cmp	r3, #1
 8049c8c:	d059      	beq.n	8049d42 <HAL_RTCEx_SetWakeUpTimer_IT+0xc2>
 8049c8e:	4605      	mov	r5, r0
 8049c90:	460e      	mov	r6, r1
 8049c92:	4690      	mov	r8, r2
 8049c94:	2301      	movs	r3, #1
 8049c96:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8049c9a:	2302      	movs	r3, #2
 8049c9c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8049ca0:	4829      	ldr	r0, [pc, #164]	; (8049d48 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>)
 8049ca2:	23ca      	movs	r3, #202	; 0xca
 8049ca4:	6243      	str	r3, [r0, #36]	; 0x24
 8049ca6:	2353      	movs	r3, #83	; 0x53
 8049ca8:	6243      	str	r3, [r0, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8049caa:	6983      	ldr	r3, [r0, #24]
 8049cac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8049cb0:	6183      	str	r3, [r0, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8049cb2:	2304      	movs	r3, #4
 8049cb4:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8049cb6:	68c3      	ldr	r3, [r0, #12]
 8049cb8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8049cbc:	d020      	beq.n	8049d00 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8049cbe:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 8049cc2:	4b21      	ldr	r3, [pc, #132]	; (8049d48 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>)
 8049cc4:	615e      	str	r6, [r3, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8049cc6:	699a      	ldr	r2, [r3, #24]
 8049cc8:	f022 0207 	bic.w	r2, r2, #7
 8049ccc:	ea42 0208 	orr.w	r2, r2, r8
 8049cd0:	619a      	str	r2, [r3, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 8049cd2:	b377      	cbz	r7, 8049d32 <HAL_RTCEx_SetWakeUpTimer_IT+0xb2>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8049cd4:	4a1d      	ldr	r2, [pc, #116]	; (8049d4c <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>)
 8049cd6:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8049cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8049cde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8049ce2:	4b19      	ldr	r3, [pc, #100]	; (8049d48 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>)
 8049ce4:	699a      	ldr	r2, [r3, #24]
 8049ce6:	f442 4288 	orr.w	r2, r2, #17408	; 0x4400
 8049cea:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8049cec:	22ff      	movs	r2, #255	; 0xff
 8049cee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8049cf0:	2301      	movs	r3, #1
 8049cf2:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8049cf6:	2000      	movs	r0, #0
 8049cf8:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24

  return HAL_OK;
}
 8049cfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    tickstart = HAL_GetTick();
 8049d00:	f7fc fa4c 	bl	804619c <HAL_GetTick>
 8049d04:	4681      	mov	r9, r0
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8049d06:	4b10      	ldr	r3, [pc, #64]	; (8049d48 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>)
 8049d08:	68dc      	ldr	r4, [r3, #12]
 8049d0a:	f014 0f04 	tst.w	r4, #4
 8049d0e:	d1d6      	bne.n	8049cbe <HAL_RTCEx_SetWakeUpTimer_IT+0x3e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8049d10:	f7fc fa44 	bl	804619c <HAL_GetTick>
 8049d14:	eba0 0409 	sub.w	r4, r0, r9
 8049d18:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8049d1c:	d9f3      	bls.n	8049d06 <HAL_RTCEx_SetWakeUpTimer_IT+0x86>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8049d1e:	4b0a      	ldr	r3, [pc, #40]	; (8049d48 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>)
 8049d20:	22ff      	movs	r2, #255	; 0xff
 8049d22:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8049d24:	2003      	movs	r0, #3
 8049d26:	f885 0025 	strb.w	r0, [r5, #37]	; 0x25
        __HAL_UNLOCK(hrtc);
 8049d2a:	2300      	movs	r3, #0
 8049d2c:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
        return HAL_TIMEOUT;
 8049d30:	e7e4      	b.n	8049cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8049d32:	4a06      	ldr	r2, [pc, #24]	; (8049d4c <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>)
 8049d34:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8049d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8049d3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8049d40:	e7cf      	b.n	8049ce2 <HAL_RTCEx_SetWakeUpTimer_IT+0x62>
  __HAL_LOCK(hrtc);
 8049d42:	2002      	movs	r0, #2
 8049d44:	e7da      	b.n	8049cfc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
 8049d46:	bf00      	nop
 8049d48:	40002800 	.word	0x40002800
 8049d4c:	4002f400 	.word	0x4002f400

08049d50 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer non-secure interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8049d50:	b510      	push	{r4, lr}
 8049d52:	4604      	mov	r4, r0
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8049d54:	4b06      	ldr	r3, [pc, #24]	; (8049d70 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>)
 8049d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8049d58:	f013 0f04 	tst.w	r3, #4
 8049d5c:	d004      	beq.n	8049d68 <HAL_RTCEx_WakeUpTimerIRQHandler+0x18>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8049d5e:	4b04      	ldr	r3, [pc, #16]	; (8049d70 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>)
 8049d60:	2204      	movs	r2, #4
 8049d62:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
 8049d64:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8049d66:	4798      	blx	r3
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8049d68:	2301      	movs	r3, #1
 8049d6a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
}
 8049d6e:	bd10      	pop	{r4, pc}
 8049d70:	40002800 	.word	0x40002800

08049d74 <HAL_RTCEx_WakeUpTimerEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8049d74:	4770      	bx	lr
	...

08049d78 <HAL_RTCEx_SetCalibrationOutPut>:
{
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8049d78:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8049d7c:	2b01      	cmp	r3, #1
 8049d7e:	d01f      	beq.n	8049dc0 <HAL_RTCEx_SetCalibrationOutPut+0x48>
{
 8049d80:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 8049d82:	2401      	movs	r4, #1
 8049d84:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8049d88:	2302      	movs	r3, #2
 8049d8a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8049d8e:	4b0d      	ldr	r3, [pc, #52]	; (8049dc4 <HAL_RTCEx_SetCalibrationOutPut+0x4c>)
 8049d90:	22ca      	movs	r2, #202	; 0xca
 8049d92:	625a      	str	r2, [r3, #36]	; 0x24
 8049d94:	2253      	movs	r2, #83	; 0x53
 8049d96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the RTC_CR register */
  MODIFY_REG(RTC->CR, RTC_CR_COSEL, CalibOutput);
 8049d98:	699a      	ldr	r2, [r3, #24]
 8049d9a:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8049d9e:	4311      	orrs	r1, r2
 8049da0:	6199      	str	r1, [r3, #24]

  /* Enable calibration output */
  SET_BIT(RTC->CR, RTC_CR_COE);
 8049da2:	699a      	ldr	r2, [r3, #24]
 8049da4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8049da8:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8049daa:	22ff      	movs	r2, #255	; 0xff
 8049dac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8049dae:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8049db2:	2300      	movs	r3, #0
 8049db4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

  return HAL_OK;
 8049db8:	4618      	mov	r0, r3
}
 8049dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8049dbe:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8049dc0:	2002      	movs	r0, #2
}
 8049dc2:	4770      	bx	lr
 8049dc4:	40002800 	.word	0x40002800

08049dc8 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8049dc8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8049dcc:	2b01      	cmp	r3, #1
 8049dce:	d017      	beq.n	8049e00 <HAL_RTCEx_EnableBypassShadow+0x38>
 8049dd0:	2101      	movs	r1, #1
 8049dd2:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8049dd6:	2302      	movs	r3, #2
 8049dd8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8049ddc:	4b09      	ldr	r3, [pc, #36]	; (8049e04 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 8049dde:	22ca      	movs	r2, #202	; 0xca
 8049de0:	625a      	str	r2, [r3, #36]	; 0x24
 8049de2:	2253      	movs	r2, #83	; 0x53
 8049de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8049de6:	699a      	ldr	r2, [r3, #24]
 8049de8:	f042 0220 	orr.w	r2, r2, #32
 8049dec:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8049dee:	22ff      	movs	r2, #255	; 0xff
 8049df0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8049df2:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8049df6:	2300      	movs	r3, #0
 8049df8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

  return HAL_OK;
 8049dfc:	4618      	mov	r0, r3
 8049dfe:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 8049e00:	2002      	movs	r0, #2
}
 8049e02:	4770      	bx	lr
 8049e04:	40002800 	.word	0x40002800

08049e08 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8049e08:	4770      	bx	lr

08049e0a <HAL_RTCEx_Tamper1EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8049e0a:	4770      	bx	lr

08049e0c <HAL_RTCEx_Tamper2EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8049e0c:	4770      	bx	lr

08049e0e <HAL_RTCEx_Tamper3EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8049e0e:	4770      	bx	lr

08049e10 <HAL_RTCEx_Tamper4EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper4EventCallback could be implemented in the user file
   */
}
 8049e10:	4770      	bx	lr

08049e12 <HAL_RTCEx_Tamper5EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper5EventCallback could be implemented in the user file
   */
}
 8049e12:	4770      	bx	lr

08049e14 <HAL_RTCEx_Tamper6EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper6EventCallback could be implemented in the user file
   */
}
 8049e14:	4770      	bx	lr

08049e16 <HAL_RTCEx_Tamper7EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper7EventCallback could be implemented in the user file
   */
}
 8049e16:	4770      	bx	lr

08049e18 <HAL_RTCEx_Tamper8EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper8EventCallback could be implemented in the user file
   */
}
 8049e18:	4770      	bx	lr

08049e1a <HAL_RTCEx_InternalTamper1EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper1EventCallback could be implemented in the user file
   */
}
 8049e1a:	4770      	bx	lr

08049e1c <HAL_RTCEx_InternalTamper2EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper2EventCallback could be implemented in the user file
   */
}
 8049e1c:	4770      	bx	lr

08049e1e <HAL_RTCEx_InternalTamper3EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper3EventCallback could be implemented in the user file
   */
}
 8049e1e:	4770      	bx	lr

08049e20 <HAL_RTCEx_InternalTamper5EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper5EventCallback could be implemented in the user file
   */
}
 8049e20:	4770      	bx	lr

08049e22 <HAL_RTCEx_InternalTamper8EventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper8EventCallback could be implemented in the user file
   */
}
 8049e22:	4770      	bx	lr

08049e24 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8049e24:	0089      	lsls	r1, r1, #2
 8049e26:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8049e2a:	f501 5154 	add.w	r1, r1, #13568	; 0x3500

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8049e2e:	600a      	str	r2, [r1, #0]
}
 8049e30:	4770      	bx	lr

08049e32 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8049e32:	0089      	lsls	r1, r1, #2
 8049e34:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8049e38:	f501 5154 	add.w	r1, r1, #13568	; 0x3500

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8049e3c:	6808      	ldr	r0, [r1, #0]
}
 8049e3e:	4770      	bx	lr

08049e40 <HAL_SPI_TxCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8049e40:	4770      	bx	lr

08049e42 <HAL_SPI_RxCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8049e42:	4770      	bx	lr

08049e44 <HAL_SPI_TxRxCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8049e44:	4770      	bx	lr

08049e46 <HAL_SPI_TxHalfCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8049e46:	4770      	bx	lr

08049e48 <HAL_SPI_RxHalfCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8049e48:	4770      	bx	lr

08049e4a <HAL_SPI_TxRxHalfCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8049e4a:	4770      	bx	lr

08049e4c <HAL_SPI_ErrorCallback>:
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8049e4c:	4770      	bx	lr

08049e4e <HAL_SPI_AbortCpltCallback>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8049e4e:	4770      	bx	lr

08049e50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8049e50:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8049e52:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8049e54:	2300      	movs	r3, #0
 8049e56:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8049e5a:	87c3      	strh	r3, [r0, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 8049e5c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8049e5e:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8049e60:	bd08      	pop	{r3, pc}
	...

08049e64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8049e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8049e68:	b082      	sub	sp, #8
 8049e6a:	4605      	mov	r5, r0
 8049e6c:	4688      	mov	r8, r1
 8049e6e:	4617      	mov	r7, r2
 8049e70:	461e      	mov	r6, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8049e72:	f7fc f993 	bl	804619c <HAL_GetTick>
 8049e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8049e78:	1a1b      	subs	r3, r3, r0
 8049e7a:	eb03 0906 	add.w	r9, r3, r6
  tmp_tickstart = HAL_GetTick();
 8049e7e:	f7fc f98d 	bl	804619c <HAL_GetTick>
 8049e82:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8049e84:	4b2a      	ldr	r3, [pc, #168]	; (8049f30 <SPI_WaitFlagStateUntilTimeout+0xcc>)
 8049e86:	681b      	ldr	r3, [r3, #0]
 8049e88:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8049e8c:	fb09 f303 	mul.w	r3, r9, r3
 8049e90:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8049e92:	682b      	ldr	r3, [r5, #0]
 8049e94:	689c      	ldr	r4, [r3, #8]
 8049e96:	ea38 0304 	bics.w	r3, r8, r4
 8049e9a:	bf0c      	ite	eq
 8049e9c:	2401      	moveq	r4, #1
 8049e9e:	2400      	movne	r4, #0
 8049ea0:	42bc      	cmp	r4, r7
 8049ea2:	d040      	beq.n	8049f26 <SPI_WaitFlagStateUntilTimeout+0xc2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8049ea4:	f1b6 3fff 	cmp.w	r6, #4294967295
 8049ea8:	d0f3      	beq.n	8049e92 <SPI_WaitFlagStateUntilTimeout+0x2e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8049eaa:	f7fc f977 	bl	804619c <HAL_GetTick>
 8049eae:	eba0 000a 	sub.w	r0, r0, sl
 8049eb2:	4548      	cmp	r0, r9
 8049eb4:	d20a      	bcs.n	8049ecc <SPI_WaitFlagStateUntilTimeout+0x68>
 8049eb6:	f1b9 0f00 	cmp.w	r9, #0
 8049eba:	d007      	beq.n	8049ecc <SPI_WaitFlagStateUntilTimeout+0x68>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8049ebc:	9a01      	ldr	r2, [sp, #4]
 8049ebe:	b102      	cbz	r2, 8049ec2 <SPI_WaitFlagStateUntilTimeout+0x5e>
 8049ec0:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }
      count--;
 8049ec2:	9b01      	ldr	r3, [sp, #4]
 8049ec4:	3b01      	subs	r3, #1
 8049ec6:	9301      	str	r3, [sp, #4]
 8049ec8:	4691      	mov	r9, r2
 8049eca:	e7e2      	b.n	8049e92 <SPI_WaitFlagStateUntilTimeout+0x2e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8049ecc:	682a      	ldr	r2, [r5, #0]
 8049ece:	6853      	ldr	r3, [r2, #4]
 8049ed0:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8049ed4:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8049ed6:	686b      	ldr	r3, [r5, #4]
 8049ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8049edc:	d00b      	beq.n	8049ef6 <SPI_WaitFlagStateUntilTimeout+0x92>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8049ede:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8049ee0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8049ee4:	d014      	beq.n	8049f10 <SPI_WaitFlagStateUntilTimeout+0xac>
        hspi->State = HAL_SPI_STATE_READY;
 8049ee6:	2301      	movs	r3, #1
 8049ee8:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8049eec:	2300      	movs	r3, #0
 8049eee:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
        return HAL_TIMEOUT;
 8049ef2:	2003      	movs	r0, #3
 8049ef4:	e018      	b.n	8049f28 <SPI_WaitFlagStateUntilTimeout+0xc4>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8049ef6:	68ab      	ldr	r3, [r5, #8]
 8049ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8049efc:	d002      	beq.n	8049f04 <SPI_WaitFlagStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8049efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8049f02:	d1ec      	bne.n	8049ede <SPI_WaitFlagStateUntilTimeout+0x7a>
          __HAL_SPI_DISABLE(hspi);
 8049f04:	682a      	ldr	r2, [r5, #0]
 8049f06:	6813      	ldr	r3, [r2, #0]
 8049f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8049f0c:	6013      	str	r3, [r2, #0]
 8049f0e:	e7e6      	b.n	8049ede <SPI_WaitFlagStateUntilTimeout+0x7a>
          SPI_RESET_CRC(hspi);
 8049f10:	682a      	ldr	r2, [r5, #0]
 8049f12:	6813      	ldr	r3, [r2, #0]
 8049f14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8049f18:	6013      	str	r3, [r2, #0]
 8049f1a:	682a      	ldr	r2, [r5, #0]
 8049f1c:	6813      	ldr	r3, [r2, #0]
 8049f1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8049f22:	6013      	str	r3, [r2, #0]
 8049f24:	e7df      	b.n	8049ee6 <SPI_WaitFlagStateUntilTimeout+0x82>
    }
  }

  return HAL_OK;
 8049f26:	2000      	movs	r0, #0
}
 8049f28:	b002      	add	sp, #8
 8049f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8049f2e:	bf00      	nop
 8049f30:	20018060 	.word	0x20018060

08049f34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8049f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8049f38:	b082      	sub	sp, #8
 8049f3a:	4607      	mov	r7, r0
 8049f3c:	460d      	mov	r5, r1
 8049f3e:	4616      	mov	r6, r2
 8049f40:	4698      	mov	r8, r3
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8049f42:	f7fc f92b 	bl	804619c <HAL_GetTick>
 8049f46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8049f48:	1a1b      	subs	r3, r3, r0
 8049f4a:	eb03 0908 	add.w	r9, r3, r8
  tmp_tickstart = HAL_GetTick();
 8049f4e:	f7fc f925 	bl	804619c <HAL_GetTick>
 8049f52:	4682      	mov	sl, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8049f54:	4b2d      	ldr	r3, [pc, #180]	; (804a00c <SPI_WaitFifoStateUntilTimeout+0xd8>)
 8049f56:	681b      	ldr	r3, [r3, #0]
 8049f58:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8049f5c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8049f60:	0d1b      	lsrs	r3, r3, #20
 8049f62:	fb09 f303 	mul.w	r3, r9, r3
 8049f66:	9301      	str	r3, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 8049f68:	e002      	b.n	8049f70 <SPI_WaitFifoStateUntilTimeout+0x3c>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
    }

    if (Timeout != HAL_MAX_DELAY)
 8049f6a:	f1b8 3fff 	cmp.w	r8, #4294967295
 8049f6e:	d10b      	bne.n	8049f88 <SPI_WaitFifoStateUntilTimeout+0x54>
  while ((hspi->Instance->SR & Fifo) != State)
 8049f70:	683b      	ldr	r3, [r7, #0]
 8049f72:	689c      	ldr	r4, [r3, #8]
 8049f74:	402c      	ands	r4, r5
 8049f76:	42b4      	cmp	r4, r6
 8049f78:	d044      	beq.n	804a004 <SPI_WaitFifoStateUntilTimeout+0xd0>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8049f7a:	f5b5 6fc0 	cmp.w	r5, #1536	; 0x600
 8049f7e:	d1f4      	bne.n	8049f6a <SPI_WaitFifoStateUntilTimeout+0x36>
 8049f80:	2e00      	cmp	r6, #0
 8049f82:	d1f2      	bne.n	8049f6a <SPI_WaitFifoStateUntilTimeout+0x36>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8049f84:	7b1b      	ldrb	r3, [r3, #12]
 8049f86:	e7f0      	b.n	8049f6a <SPI_WaitFifoStateUntilTimeout+0x36>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8049f88:	f7fc f908 	bl	804619c <HAL_GetTick>
 8049f8c:	eba0 000a 	sub.w	r0, r0, sl
 8049f90:	4548      	cmp	r0, r9
 8049f92:	d20a      	bcs.n	8049faa <SPI_WaitFifoStateUntilTimeout+0x76>
 8049f94:	f1b9 0f00 	cmp.w	r9, #0
 8049f98:	d007      	beq.n	8049faa <SPI_WaitFifoStateUntilTimeout+0x76>
        __HAL_UNLOCK(hspi);

        return HAL_TIMEOUT;
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8049f9a:	9a01      	ldr	r2, [sp, #4]
 8049f9c:	b102      	cbz	r2, 8049fa0 <SPI_WaitFifoStateUntilTimeout+0x6c>
 8049f9e:	464a      	mov	r2, r9
      {
        tmp_timeout = 0U;
      }      
      count--;
 8049fa0:	9b01      	ldr	r3, [sp, #4]
 8049fa2:	3b01      	subs	r3, #1
 8049fa4:	9301      	str	r3, [sp, #4]
 8049fa6:	4691      	mov	r9, r2
 8049fa8:	e7e2      	b.n	8049f70 <SPI_WaitFifoStateUntilTimeout+0x3c>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8049faa:	683a      	ldr	r2, [r7, #0]
 8049fac:	6853      	ldr	r3, [r2, #4]
 8049fae:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8049fb2:	6053      	str	r3, [r2, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8049fb4:	687b      	ldr	r3, [r7, #4]
 8049fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8049fba:	d00b      	beq.n	8049fd4 <SPI_WaitFifoStateUntilTimeout+0xa0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8049fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8049fc2:	d014      	beq.n	8049fee <SPI_WaitFifoStateUntilTimeout+0xba>
        hspi->State = HAL_SPI_STATE_READY;
 8049fc4:	2301      	movs	r3, #1
 8049fc6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8049fca:	2300      	movs	r3, #0
 8049fcc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
        return HAL_TIMEOUT;
 8049fd0:	2003      	movs	r0, #3
 8049fd2:	e018      	b.n	804a006 <SPI_WaitFifoStateUntilTimeout+0xd2>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8049fd4:	68bb      	ldr	r3, [r7, #8]
 8049fd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8049fda:	d002      	beq.n	8049fe2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8049fdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8049fe0:	d1ec      	bne.n	8049fbc <SPI_WaitFifoStateUntilTimeout+0x88>
          __HAL_SPI_DISABLE(hspi);
 8049fe2:	683a      	ldr	r2, [r7, #0]
 8049fe4:	6813      	ldr	r3, [r2, #0]
 8049fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8049fea:	6013      	str	r3, [r2, #0]
 8049fec:	e7e6      	b.n	8049fbc <SPI_WaitFifoStateUntilTimeout+0x88>
          SPI_RESET_CRC(hspi);
 8049fee:	683a      	ldr	r2, [r7, #0]
 8049ff0:	6813      	ldr	r3, [r2, #0]
 8049ff2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8049ff6:	6013      	str	r3, [r2, #0]
 8049ff8:	683a      	ldr	r2, [r7, #0]
 8049ffa:	6813      	ldr	r3, [r2, #0]
 8049ffc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 804a000:	6013      	str	r3, [r2, #0]
 804a002:	e7df      	b.n	8049fc4 <SPI_WaitFifoStateUntilTimeout+0x90>
    }
  }

  return HAL_OK;
 804a004:	2000      	movs	r0, #0
}
 804a006:	b002      	add	sp, #8
 804a008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804a00c:	20018060 	.word	0x20018060

0804a010 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 804a010:	b570      	push	{r4, r5, r6, lr}
 804a012:	b082      	sub	sp, #8
 804a014:	4604      	mov	r4, r0
 804a016:	460d      	mov	r5, r1
 804a018:	4616      	mov	r6, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 804a01a:	9200      	str	r2, [sp, #0]
 804a01c:	460b      	mov	r3, r1
 804a01e:	2200      	movs	r2, #0
 804a020:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 804a024:	f7ff ff86 	bl	8049f34 <SPI_WaitFifoStateUntilTimeout>
 804a028:	b9b0      	cbnz	r0, 804a058 <SPI_EndRxTxTransaction+0x48>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 804a02a:	9600      	str	r6, [sp, #0]
 804a02c:	462b      	mov	r3, r5
 804a02e:	2200      	movs	r2, #0
 804a030:	2180      	movs	r1, #128	; 0x80
 804a032:	4620      	mov	r0, r4
 804a034:	f7ff ff16 	bl	8049e64 <SPI_WaitFlagStateUntilTimeout>
 804a038:	b9a8      	cbnz	r0, 804a066 <SPI_EndRxTxTransaction+0x56>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 804a03a:	9600      	str	r6, [sp, #0]
 804a03c:	462b      	mov	r3, r5
 804a03e:	2200      	movs	r2, #0
 804a040:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 804a044:	4620      	mov	r0, r4
 804a046:	f7ff ff75 	bl	8049f34 <SPI_WaitFifoStateUntilTimeout>
 804a04a:	b150      	cbz	r0, 804a062 <SPI_EndRxTxTransaction+0x52>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804a04c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 804a04e:	f043 0320 	orr.w	r3, r3, #32
 804a052:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 804a054:	2003      	movs	r0, #3
 804a056:	e004      	b.n	804a062 <SPI_EndRxTxTransaction+0x52>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804a058:	6e23      	ldr	r3, [r4, #96]	; 0x60
 804a05a:	f043 0320 	orr.w	r3, r3, #32
 804a05e:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 804a060:	2003      	movs	r0, #3
  }

  return HAL_OK;
}
 804a062:	b002      	add	sp, #8
 804a064:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804a066:	6e23      	ldr	r3, [r4, #96]	; 0x60
 804a068:	f043 0320 	orr.w	r3, r3, #32
 804a06c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 804a06e:	2003      	movs	r0, #3
 804a070:	e7f7      	b.n	804a062 <SPI_EndRxTxTransaction+0x52>

0804a072 <SPI_EndRxTransaction>:
{
 804a072:	b570      	push	{r4, r5, r6, lr}
 804a074:	b082      	sub	sp, #8
 804a076:	4604      	mov	r4, r0
 804a078:	460d      	mov	r5, r1
 804a07a:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804a07c:	6843      	ldr	r3, [r0, #4]
 804a07e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804a082:	d00d      	beq.n	804a0a0 <SPI_EndRxTransaction+0x2e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 804a084:	9600      	str	r6, [sp, #0]
 804a086:	462b      	mov	r3, r5
 804a088:	2200      	movs	r2, #0
 804a08a:	2180      	movs	r1, #128	; 0x80
 804a08c:	4620      	mov	r0, r4
 804a08e:	f7ff fee9 	bl	8049e64 <SPI_WaitFlagStateUntilTimeout>
 804a092:	b990      	cbnz	r0, 804a0ba <SPI_EndRxTransaction+0x48>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804a094:	6863      	ldr	r3, [r4, #4]
 804a096:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804a09a:	d014      	beq.n	804a0c6 <SPI_EndRxTransaction+0x54>
}
 804a09c:	b002      	add	sp, #8
 804a09e:	bd70      	pop	{r4, r5, r6, pc}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804a0a0:	6883      	ldr	r3, [r0, #8]
 804a0a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804a0a6:	d002      	beq.n	804a0ae <SPI_EndRxTransaction+0x3c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 804a0a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804a0ac:	d1ea      	bne.n	804a084 <SPI_EndRxTransaction+0x12>
    __HAL_SPI_DISABLE(hspi);
 804a0ae:	6822      	ldr	r2, [r4, #0]
 804a0b0:	6813      	ldr	r3, [r2, #0]
 804a0b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804a0b6:	6013      	str	r3, [r2, #0]
 804a0b8:	e7e4      	b.n	804a084 <SPI_EndRxTransaction+0x12>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804a0ba:	6e23      	ldr	r3, [r4, #96]	; 0x60
 804a0bc:	f043 0320 	orr.w	r3, r3, #32
 804a0c0:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 804a0c2:	2003      	movs	r0, #3
 804a0c4:	e7ea      	b.n	804a09c <SPI_EndRxTransaction+0x2a>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804a0c6:	68a3      	ldr	r3, [r4, #8]
 804a0c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804a0cc:	d002      	beq.n	804a0d4 <SPI_EndRxTransaction+0x62>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 804a0ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804a0d2:	d1e3      	bne.n	804a09c <SPI_EndRxTransaction+0x2a>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 804a0d4:	9600      	str	r6, [sp, #0]
 804a0d6:	462b      	mov	r3, r5
 804a0d8:	2200      	movs	r2, #0
 804a0da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 804a0de:	4620      	mov	r0, r4
 804a0e0:	f7ff ff28 	bl	8049f34 <SPI_WaitFifoStateUntilTimeout>
 804a0e4:	2800      	cmp	r0, #0
 804a0e6:	d0d9      	beq.n	804a09c <SPI_EndRxTransaction+0x2a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804a0e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 804a0ea:	f043 0320 	orr.w	r3, r3, #32
 804a0ee:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 804a0f0:	2003      	movs	r0, #3
 804a0f2:	e7d3      	b.n	804a09c <SPI_EndRxTransaction+0x2a>

0804a0f4 <HAL_SPI_Init>:
  if (hspi == NULL)
 804a0f4:	2800      	cmp	r0, #0
 804a0f6:	f000 8083 	beq.w	804a200 <HAL_SPI_Init+0x10c>
{
 804a0fa:	b510      	push	{r4, lr}
 804a0fc:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 804a0fe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 804a100:	b933      	cbnz	r3, 804a110 <HAL_SPI_Init+0x1c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 804a102:	6843      	ldr	r3, [r0, #4]
 804a104:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804a108:	d005      	beq.n	804a116 <HAL_SPI_Init+0x22>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 804a10a:	2300      	movs	r3, #0
 804a10c:	61c3      	str	r3, [r0, #28]
 804a10e:	e002      	b.n	804a116 <HAL_SPI_Init+0x22>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 804a110:	2300      	movs	r3, #0
 804a112:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 804a114:	6143      	str	r3, [r0, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804a116:	2300      	movs	r3, #0
 804a118:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 804a11a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 804a11e:	b9d3      	cbnz	r3, 804a156 <HAL_SPI_Init+0x62>
    hspi->Lock = HAL_UNLOCKED;
 804a120:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 804a124:	4b37      	ldr	r3, [pc, #220]	; (804a204 <HAL_SPI_Init+0x110>)
 804a126:	6663      	str	r3, [r4, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 804a128:	4b37      	ldr	r3, [pc, #220]	; (804a208 <HAL_SPI_Init+0x114>)
 804a12a:	66a3      	str	r3, [r4, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 804a12c:	4b37      	ldr	r3, [pc, #220]	; (804a20c <HAL_SPI_Init+0x118>)
 804a12e:	66e3      	str	r3, [r4, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 804a130:	4b37      	ldr	r3, [pc, #220]	; (804a210 <HAL_SPI_Init+0x11c>)
 804a132:	6723      	str	r3, [r4, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 804a134:	4b37      	ldr	r3, [pc, #220]	; (804a214 <HAL_SPI_Init+0x120>)
 804a136:	6763      	str	r3, [r4, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 804a138:	4b37      	ldr	r3, [pc, #220]	; (804a218 <HAL_SPI_Init+0x124>)
 804a13a:	67a3      	str	r3, [r4, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 804a13c:	4b37      	ldr	r3, [pc, #220]	; (804a21c <HAL_SPI_Init+0x128>)
 804a13e:	67e3      	str	r3, [r4, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 804a140:	4b37      	ldr	r3, [pc, #220]	; (804a220 <HAL_SPI_Init+0x12c>)
 804a142:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (hspi->MspInitCallback == NULL)
 804a146:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 804a14a:	2b00      	cmp	r3, #0
 804a14c:	d051      	beq.n	804a1f2 <HAL_SPI_Init+0xfe>
    hspi->MspInitCallback(hspi);
 804a14e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 804a152:	4620      	mov	r0, r4
 804a154:	4798      	blx	r3
  hspi->State = HAL_SPI_STATE_BUSY;
 804a156:	2302      	movs	r3, #2
 804a158:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 804a15c:	6822      	ldr	r2, [r4, #0]
 804a15e:	6813      	ldr	r3, [r2, #0]
 804a160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804a164:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 804a166:	68e3      	ldr	r3, [r4, #12]
 804a168:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804a16c:	d945      	bls.n	804a1fa <HAL_SPI_Init+0x106>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 804a16e:	2200      	movs	r2, #0
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 804a170:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 804a174:	d004      	beq.n	804a180 <HAL_SPI_Init+0x8c>
 804a176:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804a17a:	d001      	beq.n	804a180 <HAL_SPI_Init+0x8c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804a17c:	2300      	movs	r3, #0
 804a17e:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 804a180:	6863      	ldr	r3, [r4, #4]
 804a182:	f403 7382 	and.w	r3, r3, #260	; 0x104
 804a186:	68a1      	ldr	r1, [r4, #8]
 804a188:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 804a18c:	430b      	orrs	r3, r1
 804a18e:	6921      	ldr	r1, [r4, #16]
 804a190:	f001 0102 	and.w	r1, r1, #2
 804a194:	430b      	orrs	r3, r1
 804a196:	6961      	ldr	r1, [r4, #20]
 804a198:	f001 0101 	and.w	r1, r1, #1
 804a19c:	430b      	orrs	r3, r1
 804a19e:	69a1      	ldr	r1, [r4, #24]
 804a1a0:	f401 7100 	and.w	r1, r1, #512	; 0x200
 804a1a4:	430b      	orrs	r3, r1
 804a1a6:	69e1      	ldr	r1, [r4, #28]
 804a1a8:	f001 0138 	and.w	r1, r1, #56	; 0x38
 804a1ac:	430b      	orrs	r3, r1
 804a1ae:	6a21      	ldr	r1, [r4, #32]
 804a1b0:	f001 0180 	and.w	r1, r1, #128	; 0x80
 804a1b4:	430b      	orrs	r3, r1
 804a1b6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 804a1b8:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 804a1bc:	6820      	ldr	r0, [r4, #0]
 804a1be:	430b      	orrs	r3, r1
 804a1c0:	6003      	str	r3, [r0, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 804a1c2:	8b63      	ldrh	r3, [r4, #26]
 804a1c4:	f003 0304 	and.w	r3, r3, #4
 804a1c8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 804a1ca:	f001 0110 	and.w	r1, r1, #16
 804a1ce:	430b      	orrs	r3, r1
 804a1d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804a1d2:	f001 0108 	and.w	r1, r1, #8
 804a1d6:	430b      	orrs	r3, r1
 804a1d8:	68e1      	ldr	r1, [r4, #12]
 804a1da:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 804a1de:	430b      	orrs	r3, r1
 804a1e0:	6821      	ldr	r1, [r4, #0]
 804a1e2:	4313      	orrs	r3, r2
 804a1e4:	604b      	str	r3, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 804a1e6:	2000      	movs	r0, #0
 804a1e8:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 804a1ea:	2301      	movs	r3, #1
 804a1ec:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 804a1f0:	bd10      	pop	{r4, pc}
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 804a1f2:	4b0c      	ldr	r3, [pc, #48]	; (804a224 <HAL_SPI_Init+0x130>)
 804a1f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 804a1f8:	e7a9      	b.n	804a14e <HAL_SPI_Init+0x5a>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 804a1fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 804a1fe:	e7b7      	b.n	804a170 <HAL_SPI_Init+0x7c>
    return HAL_ERROR;
 804a200:	2001      	movs	r0, #1
}
 804a202:	4770      	bx	lr
 804a204:	08049e41 	.word	0x08049e41
 804a208:	08049e43 	.word	0x08049e43
 804a20c:	08049e45 	.word	0x08049e45
 804a210:	08049e47 	.word	0x08049e47
 804a214:	08049e49 	.word	0x08049e49
 804a218:	08049e4b 	.word	0x08049e4b
 804a21c:	08049e4d 	.word	0x08049e4d
 804a220:	08049e4f 	.word	0x08049e4f
 804a224:	080425f1 	.word	0x080425f1

0804a228 <HAL_SPI_TransmitReceive>:
{
 804a228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804a22c:	461f      	mov	r7, r3
 804a22e:	9d08      	ldr	r5, [sp, #32]
  __HAL_LOCK(hspi);
 804a230:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
 804a234:	2b01      	cmp	r3, #1
 804a236:	f000 8164 	beq.w	804a502 <HAL_SPI_TransmitReceive+0x2da>
 804a23a:	4604      	mov	r4, r0
 804a23c:	4688      	mov	r8, r1
 804a23e:	4691      	mov	r9, r2
 804a240:	2301      	movs	r3, #1
 804a242:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 804a246:	f7fb ffa9 	bl	804619c <HAL_GetTick>
 804a24a:	4606      	mov	r6, r0
  tmp_state           = hspi->State;
 804a24c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 804a250:	b2db      	uxtb	r3, r3
  tmp_mode            = hspi->Init.Mode;
 804a252:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 804a254:	2b01      	cmp	r3, #1
 804a256:	d00a      	beq.n	804a26e <HAL_SPI_TransmitReceive+0x46>
 804a258:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 804a25c:	f040 8138 	bne.w	804a4d0 <HAL_SPI_TransmitReceive+0x2a8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 804a260:	68a2      	ldr	r2, [r4, #8]
 804a262:	2a00      	cmp	r2, #0
 804a264:	f040 813d 	bne.w	804a4e2 <HAL_SPI_TransmitReceive+0x2ba>
 804a268:	2b04      	cmp	r3, #4
 804a26a:	f040 813c 	bne.w	804a4e6 <HAL_SPI_TransmitReceive+0x2be>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 804a26e:	f1b8 0f00 	cmp.w	r8, #0
 804a272:	f000 813a 	beq.w	804a4ea <HAL_SPI_TransmitReceive+0x2c2>
 804a276:	f1b9 0f00 	cmp.w	r9, #0
 804a27a:	f000 8138 	beq.w	804a4ee <HAL_SPI_TransmitReceive+0x2c6>
 804a27e:	2f00      	cmp	r7, #0
 804a280:	f000 8137 	beq.w	804a4f2 <HAL_SPI_TransmitReceive+0x2ca>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 804a284:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 804a288:	b2db      	uxtb	r3, r3
 804a28a:	2b04      	cmp	r3, #4
 804a28c:	d002      	beq.n	804a294 <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 804a28e:	2305      	movs	r3, #5
 804a290:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 804a294:	2300      	movs	r3, #0
 804a296:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 804a298:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 804a29c:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 804a2a0:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 804a2a4:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 804a2a8:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 804a2aa:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 804a2ac:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 804a2ae:	6523      	str	r3, [r4, #80]	; 0x50
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 804a2b0:	68e3      	ldr	r3, [r4, #12]
 804a2b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804a2b6:	d801      	bhi.n	804a2bc <HAL_SPI_TransmitReceive+0x94>
 804a2b8:	2f01      	cmp	r7, #1
 804a2ba:	d923      	bls.n	804a304 <HAL_SPI_TransmitReceive+0xdc>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 804a2bc:	6822      	ldr	r2, [r4, #0]
 804a2be:	6853      	ldr	r3, [r2, #4]
 804a2c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804a2c4:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 804a2c6:	6823      	ldr	r3, [r4, #0]
 804a2c8:	681a      	ldr	r2, [r3, #0]
 804a2ca:	f012 0f40 	tst.w	r2, #64	; 0x40
 804a2ce:	d103      	bne.n	804a2d8 <HAL_SPI_TransmitReceive+0xb0>
    __HAL_SPI_ENABLE(hspi);
 804a2d0:	681a      	ldr	r2, [r3, #0]
 804a2d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804a2d6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 804a2d8:	68e3      	ldr	r3, [r4, #12]
 804a2da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804a2de:	d958      	bls.n	804a392 <HAL_SPI_TransmitReceive+0x16a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 804a2e0:	6863      	ldr	r3, [r4, #4]
 804a2e2:	b10b      	cbz	r3, 804a2e8 <HAL_SPI_TransmitReceive+0xc0>
 804a2e4:	2f01      	cmp	r7, #1
 804a2e6:	d10b      	bne.n	804a300 <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804a2e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 804a2ea:	6823      	ldr	r3, [r4, #0]
 804a2ec:	8812      	ldrh	r2, [r2, #0]
 804a2ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 804a2f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804a2f2:	3302      	adds	r3, #2
 804a2f4:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 804a2f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804a2f8:	b29b      	uxth	r3, r3
 804a2fa:	3b01      	subs	r3, #1
 804a2fc:	b29b      	uxth	r3, r3
 804a2fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 804a300:	2701      	movs	r7, #1
 804a302:	e025      	b.n	804a350 <HAL_SPI_TransmitReceive+0x128>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 804a304:	6822      	ldr	r2, [r4, #0]
 804a306:	6853      	ldr	r3, [r2, #4]
 804a308:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804a30c:	6053      	str	r3, [r2, #4]
 804a30e:	e7da      	b.n	804a2c6 <HAL_SPI_TransmitReceive+0x9e>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 804a310:	6823      	ldr	r3, [r4, #0]
 804a312:	689a      	ldr	r2, [r3, #8]
 804a314:	f012 0f01 	tst.w	r2, #1
 804a318:	d011      	beq.n	804a33e <HAL_SPI_TransmitReceive+0x116>
 804a31a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 804a31e:	b292      	uxth	r2, r2
 804a320:	b16a      	cbz	r2, 804a33e <HAL_SPI_TransmitReceive+0x116>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 804a322:	68da      	ldr	r2, [r3, #12]
 804a324:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804a326:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 804a328:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804a32a:	3302      	adds	r3, #2
 804a32c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 804a32e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 804a332:	b29b      	uxth	r3, r3
 804a334:	3b01      	subs	r3, #1
 804a336:	b29b      	uxth	r3, r3
 804a338:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 804a33c:	2701      	movs	r7, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 804a33e:	f7fb ff2d 	bl	804619c <HAL_GetTick>
 804a342:	1b83      	subs	r3, r0, r6
 804a344:	42ab      	cmp	r3, r5
 804a346:	d303      	bcc.n	804a350 <HAL_SPI_TransmitReceive+0x128>
 804a348:	f1b5 3fff 	cmp.w	r5, #4294967295
 804a34c:	f040 80d3 	bne.w	804a4f6 <HAL_SPI_TransmitReceive+0x2ce>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804a350:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804a352:	b29b      	uxth	r3, r3
 804a354:	b92b      	cbnz	r3, 804a362 <HAL_SPI_TransmitReceive+0x13a>
 804a356:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 804a35a:	b29b      	uxth	r3, r3
 804a35c:	2b00      	cmp	r3, #0
 804a35e:	f000 80ad 	beq.w	804a4bc <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 804a362:	6823      	ldr	r3, [r4, #0]
 804a364:	689a      	ldr	r2, [r3, #8]
 804a366:	f012 0f02 	tst.w	r2, #2
 804a36a:	d0d1      	beq.n	804a310 <HAL_SPI_TransmitReceive+0xe8>
 804a36c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 804a36e:	b292      	uxth	r2, r2
 804a370:	2a00      	cmp	r2, #0
 804a372:	d0cd      	beq.n	804a310 <HAL_SPI_TransmitReceive+0xe8>
 804a374:	2f00      	cmp	r7, #0
 804a376:	d0cb      	beq.n	804a310 <HAL_SPI_TransmitReceive+0xe8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804a378:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 804a37a:	8812      	ldrh	r2, [r2, #0]
 804a37c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 804a37e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804a380:	3302      	adds	r3, #2
 804a382:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 804a384:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804a386:	b29b      	uxth	r3, r3
 804a388:	3b01      	subs	r3, #1
 804a38a:	b29b      	uxth	r3, r3
 804a38c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 804a38e:	2700      	movs	r7, #0
 804a390:	e7be      	b.n	804a310 <HAL_SPI_TransmitReceive+0xe8>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 804a392:	6863      	ldr	r3, [r4, #4]
 804a394:	b10b      	cbz	r3, 804a39a <HAL_SPI_TransmitReceive+0x172>
 804a396:	2f01      	cmp	r7, #1
 804a398:	d10f      	bne.n	804a3ba <HAL_SPI_TransmitReceive+0x192>
      if (hspi->TxXferCount > 1U)
 804a39a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804a39c:	b29b      	uxth	r3, r3
 804a39e:	2b01      	cmp	r3, #1
 804a3a0:	d90d      	bls.n	804a3be <HAL_SPI_TransmitReceive+0x196>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804a3a2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 804a3a4:	6823      	ldr	r3, [r4, #0]
 804a3a6:	8812      	ldrh	r2, [r2, #0]
 804a3a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 804a3aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804a3ac:	3302      	adds	r3, #2
 804a3ae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 804a3b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804a3b2:	b29b      	uxth	r3, r3
 804a3b4:	3b02      	subs	r3, #2
 804a3b6:	b29b      	uxth	r3, r3
 804a3b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 804a3ba:	2701      	movs	r7, #1
 804a3bc:	e049      	b.n	804a452 <HAL_SPI_TransmitReceive+0x22a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 804a3be:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 804a3c0:	6823      	ldr	r3, [r4, #0]
 804a3c2:	7812      	ldrb	r2, [r2, #0]
 804a3c4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 804a3c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804a3c8:	3301      	adds	r3, #1
 804a3ca:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 804a3cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804a3ce:	b29b      	uxth	r3, r3
 804a3d0:	3b01      	subs	r3, #1
 804a3d2:	b29b      	uxth	r3, r3
 804a3d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 804a3d6:	e7f0      	b.n	804a3ba <HAL_SPI_TransmitReceive+0x192>
        if (hspi->TxXferCount > 1U)
 804a3d8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 804a3da:	b292      	uxth	r2, r2
 804a3dc:	2a01      	cmp	r2, #1
 804a3de:	d90c      	bls.n	804a3fa <HAL_SPI_TransmitReceive+0x1d2>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804a3e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 804a3e2:	8812      	ldrh	r2, [r2, #0]
 804a3e4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 804a3e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804a3e8:	3302      	adds	r3, #2
 804a3ea:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 804a3ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804a3ee:	b29b      	uxth	r3, r3
 804a3f0:	3b02      	subs	r3, #2
 804a3f2:	b29b      	uxth	r3, r3
 804a3f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 804a3f6:	2700      	movs	r7, #0
 804a3f8:	e03d      	b.n	804a476 <HAL_SPI_TransmitReceive+0x24e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 804a3fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 804a3fc:	7812      	ldrb	r2, [r2, #0]
 804a3fe:	731a      	strb	r2, [r3, #12]
          hspi->pTxBuffPtr++;
 804a400:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 804a402:	3301      	adds	r3, #1
 804a404:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 804a406:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804a408:	b29b      	uxth	r3, r3
 804a40a:	3b01      	subs	r3, #1
 804a40c:	b29b      	uxth	r3, r3
 804a40e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 804a410:	2700      	movs	r7, #0
 804a412:	e030      	b.n	804a476 <HAL_SPI_TransmitReceive+0x24e>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 804a414:	6822      	ldr	r2, [r4, #0]
 804a416:	6853      	ldr	r3, [r2, #4]
 804a418:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804a41c:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 804a41e:	2701      	movs	r7, #1
 804a420:	e00d      	b.n	804a43e <HAL_SPI_TransmitReceive+0x216>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 804a422:	6c22      	ldr	r2, [r4, #64]	; 0x40
 804a424:	7b1b      	ldrb	r3, [r3, #12]
 804a426:	7013      	strb	r3, [r2, #0]
          hspi->pRxBuffPtr++;
 804a428:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804a42a:	3301      	adds	r3, #1
 804a42c:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 804a42e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 804a432:	b29b      	uxth	r3, r3
 804a434:	3b01      	subs	r3, #1
 804a436:	b29b      	uxth	r3, r3
 804a438:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 804a43c:	2701      	movs	r7, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 804a43e:	f7fb fead 	bl	804619c <HAL_GetTick>
 804a442:	1b80      	subs	r0, r0, r6
 804a444:	42a8      	cmp	r0, r5
 804a446:	d302      	bcc.n	804a44e <HAL_SPI_TransmitReceive+0x226>
 804a448:	f1b5 3fff 	cmp.w	r5, #4294967295
 804a44c:	d155      	bne.n	804a4fa <HAL_SPI_TransmitReceive+0x2d2>
 804a44e:	2d00      	cmp	r5, #0
 804a450:	d055      	beq.n	804a4fe <HAL_SPI_TransmitReceive+0x2d6>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804a452:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 804a454:	b29b      	uxth	r3, r3
 804a456:	b923      	cbnz	r3, 804a462 <HAL_SPI_TransmitReceive+0x23a>
 804a458:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 804a45c:	b29b      	uxth	r3, r3
 804a45e:	2b00      	cmp	r3, #0
 804a460:	d02c      	beq.n	804a4bc <HAL_SPI_TransmitReceive+0x294>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 804a462:	6823      	ldr	r3, [r4, #0]
 804a464:	689a      	ldr	r2, [r3, #8]
 804a466:	f012 0f02 	tst.w	r2, #2
 804a46a:	d004      	beq.n	804a476 <HAL_SPI_TransmitReceive+0x24e>
 804a46c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 804a46e:	b292      	uxth	r2, r2
 804a470:	b10a      	cbz	r2, 804a476 <HAL_SPI_TransmitReceive+0x24e>
 804a472:	2f00      	cmp	r7, #0
 804a474:	d1b0      	bne.n	804a3d8 <HAL_SPI_TransmitReceive+0x1b0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 804a476:	6823      	ldr	r3, [r4, #0]
 804a478:	689a      	ldr	r2, [r3, #8]
 804a47a:	f012 0f01 	tst.w	r2, #1
 804a47e:	d0de      	beq.n	804a43e <HAL_SPI_TransmitReceive+0x216>
 804a480:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 804a484:	b292      	uxth	r2, r2
 804a486:	2a00      	cmp	r2, #0
 804a488:	d0d9      	beq.n	804a43e <HAL_SPI_TransmitReceive+0x216>
        if (hspi->RxXferCount > 1U)
 804a48a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 804a48e:	b292      	uxth	r2, r2
 804a490:	2a01      	cmp	r2, #1
 804a492:	d9c6      	bls.n	804a422 <HAL_SPI_TransmitReceive+0x1fa>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 804a494:	68da      	ldr	r2, [r3, #12]
 804a496:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804a498:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 804a49a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804a49c:	3302      	adds	r3, #2
 804a49e:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 804a4a0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 804a4a4:	b29b      	uxth	r3, r3
 804a4a6:	3b02      	subs	r3, #2
 804a4a8:	b29b      	uxth	r3, r3
 804a4aa:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 804a4ae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 804a4b2:	b29b      	uxth	r3, r3
 804a4b4:	2b01      	cmp	r3, #1
 804a4b6:	d9ad      	bls.n	804a414 <HAL_SPI_TransmitReceive+0x1ec>
        txallowed = 1U;
 804a4b8:	2701      	movs	r7, #1
 804a4ba:	e7c0      	b.n	804a43e <HAL_SPI_TransmitReceive+0x216>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 804a4bc:	4632      	mov	r2, r6
 804a4be:	4629      	mov	r1, r5
 804a4c0:	4620      	mov	r0, r4
 804a4c2:	f7ff fda5 	bl	804a010 <SPI_EndRxTxTransaction>
 804a4c6:	b120      	cbz	r0, 804a4d2 <HAL_SPI_TransmitReceive+0x2aa>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 804a4c8:	2320      	movs	r3, #32
 804a4ca:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 804a4cc:	2001      	movs	r0, #1
 804a4ce:	e000      	b.n	804a4d2 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_BUSY;
 804a4d0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 804a4d2:	2301      	movs	r3, #1
 804a4d4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 804a4d8:	2300      	movs	r3, #0
 804a4da:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 804a4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    errorcode = HAL_BUSY;
 804a4e2:	2002      	movs	r0, #2
 804a4e4:	e7f5      	b.n	804a4d2 <HAL_SPI_TransmitReceive+0x2aa>
 804a4e6:	2002      	movs	r0, #2
 804a4e8:	e7f3      	b.n	804a4d2 <HAL_SPI_TransmitReceive+0x2aa>
    errorcode = HAL_ERROR;
 804a4ea:	2001      	movs	r0, #1
 804a4ec:	e7f1      	b.n	804a4d2 <HAL_SPI_TransmitReceive+0x2aa>
 804a4ee:	2001      	movs	r0, #1
 804a4f0:	e7ef      	b.n	804a4d2 <HAL_SPI_TransmitReceive+0x2aa>
 804a4f2:	2001      	movs	r0, #1
 804a4f4:	e7ed      	b.n	804a4d2 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 804a4f6:	2003      	movs	r0, #3
 804a4f8:	e7eb      	b.n	804a4d2 <HAL_SPI_TransmitReceive+0x2aa>
        errorcode = HAL_TIMEOUT;
 804a4fa:	2003      	movs	r0, #3
 804a4fc:	e7e9      	b.n	804a4d2 <HAL_SPI_TransmitReceive+0x2aa>
 804a4fe:	2003      	movs	r0, #3
 804a500:	e7e7      	b.n	804a4d2 <HAL_SPI_TransmitReceive+0x2aa>
  __HAL_LOCK(hspi);
 804a502:	2002      	movs	r0, #2
 804a504:	e7eb      	b.n	804a4de <HAL_SPI_TransmitReceive+0x2b6>

0804a506 <HAL_SPI_Receive>:
{
 804a506:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804a50a:	b083      	sub	sp, #12
 804a50c:	4604      	mov	r4, r0
 804a50e:	4688      	mov	r8, r1
 804a510:	4691      	mov	r9, r2
 804a512:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 804a514:	6843      	ldr	r3, [r0, #4]
 804a516:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804a51a:	d043      	beq.n	804a5a4 <HAL_SPI_Receive+0x9e>
  __HAL_LOCK(hspi);
 804a51c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 804a520:	2b01      	cmp	r3, #1
 804a522:	f000 80bf 	beq.w	804a6a4 <HAL_SPI_Receive+0x19e>
 804a526:	2301      	movs	r3, #1
 804a528:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 804a52c:	f7fb fe36 	bl	804619c <HAL_GetTick>
 804a530:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 804a532:	f894 605d 	ldrb.w	r6, [r4, #93]	; 0x5d
 804a536:	b2f6      	uxtb	r6, r6
 804a538:	2e01      	cmp	r6, #1
 804a53a:	f040 80a0 	bne.w	804a67e <HAL_SPI_Receive+0x178>
  if ((pData == NULL) || (Size == 0U))
 804a53e:	f1b8 0f00 	cmp.w	r8, #0
 804a542:	f000 809d 	beq.w	804a680 <HAL_SPI_Receive+0x17a>
 804a546:	f1b9 0f00 	cmp.w	r9, #0
 804a54a:	f000 8099 	beq.w	804a680 <HAL_SPI_Receive+0x17a>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 804a54e:	2304      	movs	r3, #4
 804a550:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 804a554:	2300      	movs	r3, #0
 804a556:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 804a558:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  hspi->RxXferSize  = Size;
 804a55c:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->RxXferCount = Size;
 804a560:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 804a564:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 804a566:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 804a568:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 804a56a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 804a56c:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 804a56e:	68e3      	ldr	r3, [r4, #12]
 804a570:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804a574:	d923      	bls.n	804a5be <HAL_SPI_Receive+0xb8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 804a576:	6822      	ldr	r2, [r4, #0]
 804a578:	6853      	ldr	r3, [r2, #4]
 804a57a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804a57e:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804a580:	68a3      	ldr	r3, [r4, #8]
 804a582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804a586:	d020      	beq.n	804a5ca <HAL_SPI_Receive+0xc4>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 804a588:	6823      	ldr	r3, [r4, #0]
 804a58a:	681a      	ldr	r2, [r3, #0]
 804a58c:	f012 0f40 	tst.w	r2, #64	; 0x40
 804a590:	d103      	bne.n	804a59a <HAL_SPI_Receive+0x94>
    __HAL_SPI_ENABLE(hspi);
 804a592:	681a      	ldr	r2, [r3, #0]
 804a594:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804a598:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 804a59a:	68e3      	ldr	r3, [r4, #12]
 804a59c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804a5a0:	d928      	bls.n	804a5f4 <HAL_SPI_Receive+0xee>
 804a5a2:	e049      	b.n	804a638 <HAL_SPI_Receive+0x132>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 804a5a4:	6883      	ldr	r3, [r0, #8]
 804a5a6:	2b00      	cmp	r3, #0
 804a5a8:	d1b8      	bne.n	804a51c <HAL_SPI_Receive+0x16>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 804a5aa:	2304      	movs	r3, #4
 804a5ac:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 804a5b0:	9500      	str	r5, [sp, #0]
 804a5b2:	4613      	mov	r3, r2
 804a5b4:	460a      	mov	r2, r1
 804a5b6:	f7ff fe37 	bl	804a228 <HAL_SPI_TransmitReceive>
 804a5ba:	4606      	mov	r6, r0
 804a5bc:	e066      	b.n	804a68c <HAL_SPI_Receive+0x186>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 804a5be:	6822      	ldr	r2, [r4, #0]
 804a5c0:	6853      	ldr	r3, [r2, #4]
 804a5c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 804a5c6:	6053      	str	r3, [r2, #4]
 804a5c8:	e7da      	b.n	804a580 <HAL_SPI_Receive+0x7a>
    __HAL_SPI_DISABLE(hspi);
 804a5ca:	6822      	ldr	r2, [r4, #0]
 804a5cc:	6813      	ldr	r3, [r2, #0]
 804a5ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804a5d2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 804a5d4:	6822      	ldr	r2, [r4, #0]
 804a5d6:	6813      	ldr	r3, [r2, #0]
 804a5d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 804a5dc:	6013      	str	r3, [r2, #0]
 804a5de:	e7d3      	b.n	804a588 <HAL_SPI_Receive+0x82>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 804a5e0:	f7fb fddc 	bl	804619c <HAL_GetTick>
 804a5e4:	1bc0      	subs	r0, r0, r7
 804a5e6:	42a8      	cmp	r0, r5
 804a5e8:	d302      	bcc.n	804a5f0 <HAL_SPI_Receive+0xea>
 804a5ea:	f1b5 3fff 	cmp.w	r5, #4294967295
 804a5ee:	d151      	bne.n	804a694 <HAL_SPI_Receive+0x18e>
 804a5f0:	2d00      	cmp	r5, #0
 804a5f2:	d051      	beq.n	804a698 <HAL_SPI_Receive+0x192>
    while (hspi->RxXferCount > 0U)
 804a5f4:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 804a5f8:	b29b      	uxth	r3, r3
 804a5fa:	2b00      	cmp	r3, #0
 804a5fc:	d033      	beq.n	804a666 <HAL_SPI_Receive+0x160>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 804a5fe:	6823      	ldr	r3, [r4, #0]
 804a600:	689a      	ldr	r2, [r3, #8]
 804a602:	f012 0f01 	tst.w	r2, #1
 804a606:	d0eb      	beq.n	804a5e0 <HAL_SPI_Receive+0xda>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 804a608:	6c22      	ldr	r2, [r4, #64]	; 0x40
 804a60a:	7b1b      	ldrb	r3, [r3, #12]
 804a60c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 804a60e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804a610:	3301      	adds	r3, #1
 804a612:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 804a614:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 804a618:	b29b      	uxth	r3, r3
 804a61a:	3b01      	subs	r3, #1
 804a61c:	b29b      	uxth	r3, r3
 804a61e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 804a622:	e7e7      	b.n	804a5f4 <HAL_SPI_Receive+0xee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 804a624:	f7fb fdba 	bl	804619c <HAL_GetTick>
 804a628:	1bc0      	subs	r0, r0, r7
 804a62a:	42a8      	cmp	r0, r5
 804a62c:	d302      	bcc.n	804a634 <HAL_SPI_Receive+0x12e>
 804a62e:	f1b5 3fff 	cmp.w	r5, #4294967295
 804a632:	d133      	bne.n	804a69c <HAL_SPI_Receive+0x196>
 804a634:	2d00      	cmp	r5, #0
 804a636:	d033      	beq.n	804a6a0 <HAL_SPI_Receive+0x19a>
    while (hspi->RxXferCount > 0U)
 804a638:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 804a63c:	b29b      	uxth	r3, r3
 804a63e:	b193      	cbz	r3, 804a666 <HAL_SPI_Receive+0x160>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 804a640:	6823      	ldr	r3, [r4, #0]
 804a642:	689a      	ldr	r2, [r3, #8]
 804a644:	f012 0f01 	tst.w	r2, #1
 804a648:	d0ec      	beq.n	804a624 <HAL_SPI_Receive+0x11e>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 804a64a:	68da      	ldr	r2, [r3, #12]
 804a64c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804a64e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 804a650:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804a652:	3302      	adds	r3, #2
 804a654:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 804a656:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 804a65a:	b292      	uxth	r2, r2
 804a65c:	3a01      	subs	r2, #1
 804a65e:	b292      	uxth	r2, r2
 804a660:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 804a664:	e7e8      	b.n	804a638 <HAL_SPI_Receive+0x132>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 804a666:	463a      	mov	r2, r7
 804a668:	4629      	mov	r1, r5
 804a66a:	4620      	mov	r0, r4
 804a66c:	f7ff fd01 	bl	804a072 <SPI_EndRxTransaction>
 804a670:	b108      	cbz	r0, 804a676 <HAL_SPI_Receive+0x170>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 804a672:	2320      	movs	r3, #32
 804a674:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 804a676:	6e23      	ldr	r3, [r4, #96]	; 0x60
 804a678:	b913      	cbnz	r3, 804a680 <HAL_SPI_Receive+0x17a>
  HAL_StatusTypeDef errorcode = HAL_OK;
 804a67a:	2600      	movs	r6, #0
 804a67c:	e000      	b.n	804a680 <HAL_SPI_Receive+0x17a>
    errorcode = HAL_BUSY;
 804a67e:	2602      	movs	r6, #2
  hspi->State = HAL_SPI_STATE_READY;
 804a680:	2301      	movs	r3, #1
 804a682:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 804a686:	2300      	movs	r3, #0
 804a688:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 804a68c:	4630      	mov	r0, r6
 804a68e:	b003      	add	sp, #12
 804a690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          errorcode = HAL_TIMEOUT;
 804a694:	2603      	movs	r6, #3
 804a696:	e7f3      	b.n	804a680 <HAL_SPI_Receive+0x17a>
 804a698:	2603      	movs	r6, #3
 804a69a:	e7f1      	b.n	804a680 <HAL_SPI_Receive+0x17a>
          errorcode = HAL_TIMEOUT;
 804a69c:	2603      	movs	r6, #3
 804a69e:	e7ef      	b.n	804a680 <HAL_SPI_Receive+0x17a>
 804a6a0:	2603      	movs	r6, #3
 804a6a2:	e7ed      	b.n	804a680 <HAL_SPI_Receive+0x17a>
  __HAL_LOCK(hspi);
 804a6a4:	2602      	movs	r6, #2
 804a6a6:	e7f1      	b.n	804a68c <HAL_SPI_Receive+0x186>

0804a6a8 <HAL_SPI_IRQHandler>:
{
 804a6a8:	b530      	push	{r4, r5, lr}
 804a6aa:	b085      	sub	sp, #20
 804a6ac:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 804a6ae:	6802      	ldr	r2, [r0, #0]
 804a6b0:	6851      	ldr	r1, [r2, #4]
  uint32_t itflag   = hspi->Instance->SR;
 804a6b2:	6893      	ldr	r3, [r2, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 804a6b4:	f3c3 1080 	ubfx	r0, r3, #6, #1
 804a6b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 804a6bc:	d105      	bne.n	804a6ca <HAL_SPI_IRQHandler+0x22>
 804a6be:	f013 0f01 	tst.w	r3, #1
 804a6c2:	d002      	beq.n	804a6ca <HAL_SPI_IRQHandler+0x22>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 804a6c4:	f011 0f40 	tst.w	r1, #64	; 0x40
 804a6c8:	d169      	bne.n	804a79e <HAL_SPI_IRQHandler+0xf6>
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 804a6ca:	f013 0f02 	tst.w	r3, #2
 804a6ce:	d002      	beq.n	804a6d6 <HAL_SPI_IRQHandler+0x2e>
 804a6d0:	f011 0f80 	tst.w	r1, #128	; 0x80
 804a6d4:	d167      	bne.n	804a7a6 <HAL_SPI_IRQHandler+0xfe>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 804a6d6:	f3c3 1540 	ubfx	r5, r3, #5, #1
 804a6da:	f013 0f20 	tst.w	r3, #32
 804a6de:	d103      	bne.n	804a6e8 <HAL_SPI_IRQHandler+0x40>
 804a6e0:	b910      	cbnz	r0, 804a6e8 <HAL_SPI_IRQHandler+0x40>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 804a6e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 804a6e6:	d061      	beq.n	804a7ac <HAL_SPI_IRQHandler+0x104>
 804a6e8:	f011 0f20 	tst.w	r1, #32
 804a6ec:	d05e      	beq.n	804a7ac <HAL_SPI_IRQHandler+0x104>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 804a6ee:	b178      	cbz	r0, 804a710 <HAL_SPI_IRQHandler+0x68>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 804a6f0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 804a6f4:	b2c0      	uxtb	r0, r0
 804a6f6:	2803      	cmp	r0, #3
 804a6f8:	d05a      	beq.n	804a7b0 <HAL_SPI_IRQHandler+0x108>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 804a6fa:	6e20      	ldr	r0, [r4, #96]	; 0x60
 804a6fc:	f040 0004 	orr.w	r0, r0, #4
 804a700:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 804a702:	2000      	movs	r0, #0
 804a704:	9000      	str	r0, [sp, #0]
 804a706:	68d0      	ldr	r0, [r2, #12]
 804a708:	9000      	str	r0, [sp, #0]
 804a70a:	6890      	ldr	r0, [r2, #8]
 804a70c:	9000      	str	r0, [sp, #0]
 804a70e:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 804a710:	b165      	cbz	r5, 804a72c <HAL_SPI_IRQHandler+0x84>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 804a712:	6e20      	ldr	r0, [r4, #96]	; 0x60
 804a714:	f040 0001 	orr.w	r0, r0, #1
 804a718:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 804a71a:	2000      	movs	r0, #0
 804a71c:	9002      	str	r0, [sp, #8]
 804a71e:	6890      	ldr	r0, [r2, #8]
 804a720:	9002      	str	r0, [sp, #8]
 804a722:	6810      	ldr	r0, [r2, #0]
 804a724:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 804a728:	6010      	str	r0, [r2, #0]
 804a72a:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 804a72c:	f413 7f80 	tst.w	r3, #256	; 0x100
 804a730:	d009      	beq.n	804a746 <HAL_SPI_IRQHandler+0x9e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 804a732:	6e23      	ldr	r3, [r4, #96]	; 0x60
 804a734:	f043 0308 	orr.w	r3, r3, #8
 804a738:	6623      	str	r3, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 804a73a:	2300      	movs	r3, #0
 804a73c:	9303      	str	r3, [sp, #12]
 804a73e:	6823      	ldr	r3, [r4, #0]
 804a740:	689b      	ldr	r3, [r3, #8]
 804a742:	9303      	str	r3, [sp, #12]
 804a744:	9b03      	ldr	r3, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 804a746:	6e23      	ldr	r3, [r4, #96]	; 0x60
 804a748:	2b00      	cmp	r3, #0
 804a74a:	d02f      	beq.n	804a7ac <HAL_SPI_IRQHandler+0x104>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 804a74c:	6822      	ldr	r2, [r4, #0]
 804a74e:	6853      	ldr	r3, [r2, #4]
 804a750:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 804a754:	6053      	str	r3, [r2, #4]
      hspi->State = HAL_SPI_STATE_READY;
 804a756:	2301      	movs	r3, #1
 804a758:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 804a75c:	f011 0f03 	tst.w	r1, #3
 804a760:	d02e      	beq.n	804a7c0 <HAL_SPI_IRQHandler+0x118>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 804a762:	6822      	ldr	r2, [r4, #0]
 804a764:	6853      	ldr	r3, [r2, #4]
 804a766:	f023 0303 	bic.w	r3, r3, #3
 804a76a:	6053      	str	r3, [r2, #4]
        if (hspi->hdmarx != NULL)
 804a76c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 804a76e:	b14b      	cbz	r3, 804a784 <HAL_SPI_IRQHandler+0xdc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 804a770:	4a15      	ldr	r2, [pc, #84]	; (804a7c8 <HAL_SPI_IRQHandler+0x120>)
 804a772:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 804a774:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804a776:	f7fc ff55 	bl	8047624 <HAL_DMA_Abort_IT>
 804a77a:	b118      	cbz	r0, 804a784 <HAL_SPI_IRQHandler+0xdc>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 804a77c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 804a77e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804a782:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 804a784:	6d63      	ldr	r3, [r4, #84]	; 0x54
 804a786:	b18b      	cbz	r3, 804a7ac <HAL_SPI_IRQHandler+0x104>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 804a788:	4a0f      	ldr	r2, [pc, #60]	; (804a7c8 <HAL_SPI_IRQHandler+0x120>)
 804a78a:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 804a78c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804a78e:	f7fc ff49 	bl	8047624 <HAL_DMA_Abort_IT>
 804a792:	b158      	cbz	r0, 804a7ac <HAL_SPI_IRQHandler+0x104>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 804a794:	6e23      	ldr	r3, [r4, #96]	; 0x60
 804a796:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804a79a:	6623      	str	r3, [r4, #96]	; 0x60
 804a79c:	e006      	b.n	804a7ac <HAL_SPI_IRQHandler+0x104>
    hspi->RxISR(hspi);
 804a79e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 804a7a0:	4620      	mov	r0, r4
 804a7a2:	4798      	blx	r3
    return;
 804a7a4:	e002      	b.n	804a7ac <HAL_SPI_IRQHandler+0x104>
    hspi->TxISR(hspi);
 804a7a6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 804a7a8:	4620      	mov	r0, r4
 804a7aa:	4798      	blx	r3
}
 804a7ac:	b005      	add	sp, #20
 804a7ae:	bd30      	pop	{r4, r5, pc}
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 804a7b0:	2300      	movs	r3, #0
 804a7b2:	9301      	str	r3, [sp, #4]
 804a7b4:	68d3      	ldr	r3, [r2, #12]
 804a7b6:	9301      	str	r3, [sp, #4]
 804a7b8:	6893      	ldr	r3, [r2, #8]
 804a7ba:	9301      	str	r3, [sp, #4]
 804a7bc:	9b01      	ldr	r3, [sp, #4]
        return;
 804a7be:	e7f5      	b.n	804a7ac <HAL_SPI_IRQHandler+0x104>
        hspi->ErrorCallback(hspi);
 804a7c0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 804a7c2:	4620      	mov	r0, r4
 804a7c4:	4798      	blx	r3
    return;
 804a7c6:	e7f1      	b.n	804a7ac <HAL_SPI_IRQHandler+0x104>
 804a7c8:	08049e51 	.word	0x08049e51

0804a7cc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 804a7cc:	4770      	bx	lr

0804a7ce <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 804a7ce:	4770      	bx	lr

0804a7d0 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 804a7d0:	4770      	bx	lr

0804a7d2 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 804a7d2:	4770      	bx	lr

0804a7d4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 804a7d4:	4770      	bx	lr

0804a7d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 804a7d6:	4770      	bx	lr

0804a7d8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 804a7d8:	4770      	bx	lr

0804a7da <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 804a7da:	4770      	bx	lr

0804a7dc <HAL_TIM_TriggerHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 804a7dc:	4770      	bx	lr

0804a7de <HAL_TIM_ErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 804a7de:	4770      	bx	lr

0804a7e0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 804a7e0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 804a7e4:	b2db      	uxtb	r3, r3
 804a7e6:	2b01      	cmp	r3, #1
 804a7e8:	d136      	bne.n	804a858 <HAL_TIM_Base_Start_IT+0x78>
  htim->State = HAL_TIM_STATE_BUSY;
 804a7ea:	2302      	movs	r3, #2
 804a7ec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 804a7f0:	6802      	ldr	r2, [r0, #0]
 804a7f2:	68d3      	ldr	r3, [r2, #12]
 804a7f4:	f043 0301 	orr.w	r3, r3, #1
 804a7f8:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 804a7fa:	6803      	ldr	r3, [r0, #0]
 804a7fc:	4a19      	ldr	r2, [pc, #100]	; (804a864 <HAL_TIM_Base_Start_IT+0x84>)
 804a7fe:	4293      	cmp	r3, r2
 804a800:	d01c      	beq.n	804a83c <HAL_TIM_Base_Start_IT+0x5c>
 804a802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804a806:	d019      	beq.n	804a83c <HAL_TIM_Base_Start_IT+0x5c>
 804a808:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 804a80c:	4293      	cmp	r3, r2
 804a80e:	d015      	beq.n	804a83c <HAL_TIM_Base_Start_IT+0x5c>
 804a810:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804a814:	4293      	cmp	r3, r2
 804a816:	d011      	beq.n	804a83c <HAL_TIM_Base_Start_IT+0x5c>
 804a818:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804a81c:	4293      	cmp	r3, r2
 804a81e:	d00d      	beq.n	804a83c <HAL_TIM_Base_Start_IT+0x5c>
 804a820:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 804a824:	4293      	cmp	r3, r2
 804a826:	d009      	beq.n	804a83c <HAL_TIM_Base_Start_IT+0x5c>
 804a828:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 804a82c:	4293      	cmp	r3, r2
 804a82e:	d005      	beq.n	804a83c <HAL_TIM_Base_Start_IT+0x5c>
    __HAL_TIM_ENABLE(htim);
 804a830:	681a      	ldr	r2, [r3, #0]
 804a832:	f042 0201 	orr.w	r2, r2, #1
 804a836:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 804a838:	2000      	movs	r0, #0
 804a83a:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 804a83c:	6899      	ldr	r1, [r3, #8]
 804a83e:	4a0a      	ldr	r2, [pc, #40]	; (804a868 <HAL_TIM_Base_Start_IT+0x88>)
 804a840:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804a842:	2a06      	cmp	r2, #6
 804a844:	d00a      	beq.n	804a85c <HAL_TIM_Base_Start_IT+0x7c>
 804a846:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 804a84a:	d009      	beq.n	804a860 <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 804a84c:	681a      	ldr	r2, [r3, #0]
 804a84e:	f042 0201 	orr.w	r2, r2, #1
 804a852:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 804a854:	2000      	movs	r0, #0
 804a856:	4770      	bx	lr
    return HAL_ERROR;
 804a858:	2001      	movs	r0, #1
 804a85a:	4770      	bx	lr
  return HAL_OK;
 804a85c:	2000      	movs	r0, #0
 804a85e:	4770      	bx	lr
 804a860:	2000      	movs	r0, #0
}
 804a862:	4770      	bx	lr
 804a864:	40012c00 	.word	0x40012c00
 804a868:	00010007 	.word	0x00010007

0804a86c <HAL_TIM_IRQHandler>:
{
 804a86c:	b510      	push	{r4, lr}
 804a86e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 804a870:	6803      	ldr	r3, [r0, #0]
 804a872:	691a      	ldr	r2, [r3, #16]
 804a874:	f012 0f02 	tst.w	r2, #2
 804a878:	d013      	beq.n	804a8a2 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 804a87a:	68da      	ldr	r2, [r3, #12]
 804a87c:	f012 0f02 	tst.w	r2, #2
 804a880:	d00f      	beq.n	804a8a2 <HAL_TIM_IRQHandler+0x36>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 804a882:	f06f 0202 	mvn.w	r2, #2
 804a886:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 804a888:	2301      	movs	r3, #1
 804a88a:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 804a88c:	6803      	ldr	r3, [r0, #0]
 804a88e:	699b      	ldr	r3, [r3, #24]
 804a890:	f013 0f03 	tst.w	r3, #3
 804a894:	f000 80a3 	beq.w	804a9de <HAL_TIM_IRQHandler+0x172>
          htim->IC_CaptureCallback(htim);
 804a898:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 804a89c:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804a89e:	2300      	movs	r3, #0
 804a8a0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 804a8a2:	6823      	ldr	r3, [r4, #0]
 804a8a4:	691a      	ldr	r2, [r3, #16]
 804a8a6:	f012 0f04 	tst.w	r2, #4
 804a8aa:	d014      	beq.n	804a8d6 <HAL_TIM_IRQHandler+0x6a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 804a8ac:	68da      	ldr	r2, [r3, #12]
 804a8ae:	f012 0f04 	tst.w	r2, #4
 804a8b2:	d010      	beq.n	804a8d6 <HAL_TIM_IRQHandler+0x6a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 804a8b4:	f06f 0204 	mvn.w	r2, #4
 804a8b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 804a8ba:	2302      	movs	r3, #2
 804a8bc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 804a8be:	6823      	ldr	r3, [r4, #0]
 804a8c0:	699b      	ldr	r3, [r3, #24]
 804a8c2:	f413 7f40 	tst.w	r3, #768	; 0x300
 804a8c6:	f000 8092 	beq.w	804a9ee <HAL_TIM_IRQHandler+0x182>
        htim->IC_CaptureCallback(htim);
 804a8ca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 804a8ce:	4620      	mov	r0, r4
 804a8d0:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804a8d2:	2300      	movs	r3, #0
 804a8d4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 804a8d6:	6823      	ldr	r3, [r4, #0]
 804a8d8:	691a      	ldr	r2, [r3, #16]
 804a8da:	f012 0f08 	tst.w	r2, #8
 804a8de:	d014      	beq.n	804a90a <HAL_TIM_IRQHandler+0x9e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 804a8e0:	68da      	ldr	r2, [r3, #12]
 804a8e2:	f012 0f08 	tst.w	r2, #8
 804a8e6:	d010      	beq.n	804a90a <HAL_TIM_IRQHandler+0x9e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 804a8e8:	f06f 0208 	mvn.w	r2, #8
 804a8ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 804a8ee:	2304      	movs	r3, #4
 804a8f0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 804a8f2:	6823      	ldr	r3, [r4, #0]
 804a8f4:	69db      	ldr	r3, [r3, #28]
 804a8f6:	f013 0f03 	tst.w	r3, #3
 804a8fa:	f000 8081 	beq.w	804aa00 <HAL_TIM_IRQHandler+0x194>
        htim->IC_CaptureCallback(htim);
 804a8fe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 804a902:	4620      	mov	r0, r4
 804a904:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804a906:	2300      	movs	r3, #0
 804a908:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 804a90a:	6823      	ldr	r3, [r4, #0]
 804a90c:	691a      	ldr	r2, [r3, #16]
 804a90e:	f012 0f10 	tst.w	r2, #16
 804a912:	d013      	beq.n	804a93c <HAL_TIM_IRQHandler+0xd0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 804a914:	68da      	ldr	r2, [r3, #12]
 804a916:	f012 0f10 	tst.w	r2, #16
 804a91a:	d00f      	beq.n	804a93c <HAL_TIM_IRQHandler+0xd0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 804a91c:	f06f 0210 	mvn.w	r2, #16
 804a920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 804a922:	2308      	movs	r3, #8
 804a924:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 804a926:	6823      	ldr	r3, [r4, #0]
 804a928:	69db      	ldr	r3, [r3, #28]
 804a92a:	f413 7f40 	tst.w	r3, #768	; 0x300
 804a92e:	d070      	beq.n	804aa12 <HAL_TIM_IRQHandler+0x1a6>
        htim->IC_CaptureCallback(htim);
 804a930:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 804a934:	4620      	mov	r0, r4
 804a936:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804a938:	2300      	movs	r3, #0
 804a93a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 804a93c:	6823      	ldr	r3, [r4, #0]
 804a93e:	691a      	ldr	r2, [r3, #16]
 804a940:	f012 0f01 	tst.w	r2, #1
 804a944:	d00a      	beq.n	804a95c <HAL_TIM_IRQHandler+0xf0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 804a946:	68da      	ldr	r2, [r3, #12]
 804a948:	f012 0f01 	tst.w	r2, #1
 804a94c:	d006      	beq.n	804a95c <HAL_TIM_IRQHandler+0xf0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 804a94e:	f06f 0201 	mvn.w	r2, #1
 804a952:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 804a954:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 804a958:	4620      	mov	r0, r4
 804a95a:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 804a95c:	6823      	ldr	r3, [r4, #0]
 804a95e:	691a      	ldr	r2, [r3, #16]
 804a960:	f012 0f80 	tst.w	r2, #128	; 0x80
 804a964:	d00a      	beq.n	804a97c <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 804a966:	68da      	ldr	r2, [r3, #12]
 804a968:	f012 0f80 	tst.w	r2, #128	; 0x80
 804a96c:	d006      	beq.n	804a97c <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 804a96e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 804a972:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 804a974:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 804a978:	4620      	mov	r0, r4
 804a97a:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 804a97c:	6823      	ldr	r3, [r4, #0]
 804a97e:	691a      	ldr	r2, [r3, #16]
 804a980:	f412 7f80 	tst.w	r2, #256	; 0x100
 804a984:	d00a      	beq.n	804a99c <HAL_TIM_IRQHandler+0x130>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 804a986:	68da      	ldr	r2, [r3, #12]
 804a988:	f012 0f80 	tst.w	r2, #128	; 0x80
 804a98c:	d006      	beq.n	804a99c <HAL_TIM_IRQHandler+0x130>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 804a98e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 804a992:	611a      	str	r2, [r3, #16]
      htim->Break2Callback(htim);
 804a994:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
 804a998:	4620      	mov	r0, r4
 804a99a:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 804a99c:	6823      	ldr	r3, [r4, #0]
 804a99e:	691a      	ldr	r2, [r3, #16]
 804a9a0:	f012 0f40 	tst.w	r2, #64	; 0x40
 804a9a4:	d00a      	beq.n	804a9bc <HAL_TIM_IRQHandler+0x150>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 804a9a6:	68da      	ldr	r2, [r3, #12]
 804a9a8:	f012 0f40 	tst.w	r2, #64	; 0x40
 804a9ac:	d006      	beq.n	804a9bc <HAL_TIM_IRQHandler+0x150>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 804a9ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 804a9b2:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 804a9b4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 804a9b8:	4620      	mov	r0, r4
 804a9ba:	4798      	blx	r3
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 804a9bc:	6823      	ldr	r3, [r4, #0]
 804a9be:	691a      	ldr	r2, [r3, #16]
 804a9c0:	f012 0f20 	tst.w	r2, #32
 804a9c4:	d00a      	beq.n	804a9dc <HAL_TIM_IRQHandler+0x170>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 804a9c6:	68da      	ldr	r2, [r3, #12]
 804a9c8:	f012 0f20 	tst.w	r2, #32
 804a9cc:	d006      	beq.n	804a9dc <HAL_TIM_IRQHandler+0x170>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 804a9ce:	f06f 0220 	mvn.w	r2, #32
 804a9d2:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 804a9d4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 804a9d8:	4620      	mov	r0, r4
 804a9da:	4798      	blx	r3
}
 804a9dc:	bd10      	pop	{r4, pc}
          htim->OC_DelayElapsedCallback(htim);
 804a9de:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 804a9e2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 804a9e4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 804a9e8:	4620      	mov	r0, r4
 804a9ea:	4798      	blx	r3
 804a9ec:	e757      	b.n	804a89e <HAL_TIM_IRQHandler+0x32>
        htim->OC_DelayElapsedCallback(htim);
 804a9ee:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 804a9f2:	4620      	mov	r0, r4
 804a9f4:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 804a9f6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 804a9fa:	4620      	mov	r0, r4
 804a9fc:	4798      	blx	r3
 804a9fe:	e768      	b.n	804a8d2 <HAL_TIM_IRQHandler+0x66>
        htim->OC_DelayElapsedCallback(htim);
 804aa00:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 804aa04:	4620      	mov	r0, r4
 804aa06:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 804aa08:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 804aa0c:	4620      	mov	r0, r4
 804aa0e:	4798      	blx	r3
 804aa10:	e779      	b.n	804a906 <HAL_TIM_IRQHandler+0x9a>
        htim->OC_DelayElapsedCallback(htim);
 804aa12:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 804aa16:	4620      	mov	r0, r4
 804aa18:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 804aa1a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 804aa1e:	4620      	mov	r0, r4
 804aa20:	4798      	blx	r3
 804aa22:	e789      	b.n	804a938 <HAL_TIM_IRQHandler+0xcc>

0804aa24 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 804aa24:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 804aa26:	4a30      	ldr	r2, [pc, #192]	; (804aae8 <TIM_Base_SetConfig+0xc4>)
 804aa28:	4290      	cmp	r0, r2
 804aa2a:	d012      	beq.n	804aa52 <TIM_Base_SetConfig+0x2e>
 804aa2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 804aa30:	d00f      	beq.n	804aa52 <TIM_Base_SetConfig+0x2e>
 804aa32:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 804aa36:	4290      	cmp	r0, r2
 804aa38:	d00b      	beq.n	804aa52 <TIM_Base_SetConfig+0x2e>
 804aa3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804aa3e:	4290      	cmp	r0, r2
 804aa40:	d007      	beq.n	804aa52 <TIM_Base_SetConfig+0x2e>
 804aa42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804aa46:	4290      	cmp	r0, r2
 804aa48:	d003      	beq.n	804aa52 <TIM_Base_SetConfig+0x2e>
 804aa4a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 804aa4e:	4290      	cmp	r0, r2
 804aa50:	d103      	bne.n	804aa5a <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 804aa52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 804aa56:	684a      	ldr	r2, [r1, #4]
 804aa58:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 804aa5a:	4a23      	ldr	r2, [pc, #140]	; (804aae8 <TIM_Base_SetConfig+0xc4>)
 804aa5c:	4290      	cmp	r0, r2
 804aa5e:	d01e      	beq.n	804aa9e <TIM_Base_SetConfig+0x7a>
 804aa60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 804aa64:	d01b      	beq.n	804aa9e <TIM_Base_SetConfig+0x7a>
 804aa66:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 804aa6a:	4290      	cmp	r0, r2
 804aa6c:	d017      	beq.n	804aa9e <TIM_Base_SetConfig+0x7a>
 804aa6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804aa72:	4290      	cmp	r0, r2
 804aa74:	d013      	beq.n	804aa9e <TIM_Base_SetConfig+0x7a>
 804aa76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804aa7a:	4290      	cmp	r0, r2
 804aa7c:	d00f      	beq.n	804aa9e <TIM_Base_SetConfig+0x7a>
 804aa7e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 804aa82:	4290      	cmp	r0, r2
 804aa84:	d00b      	beq.n	804aa9e <TIM_Base_SetConfig+0x7a>
 804aa86:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 804aa8a:	4290      	cmp	r0, r2
 804aa8c:	d007      	beq.n	804aa9e <TIM_Base_SetConfig+0x7a>
 804aa8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804aa92:	4290      	cmp	r0, r2
 804aa94:	d003      	beq.n	804aa9e <TIM_Base_SetConfig+0x7a>
 804aa96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804aa9a:	4290      	cmp	r0, r2
 804aa9c:	d103      	bne.n	804aaa6 <TIM_Base_SetConfig+0x82>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 804aa9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 804aaa2:	68ca      	ldr	r2, [r1, #12]
 804aaa4:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 804aaa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804aaaa:	694a      	ldr	r2, [r1, #20]
 804aaac:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 804aaae:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 804aab0:	688b      	ldr	r3, [r1, #8]
 804aab2:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 804aab4:	680b      	ldr	r3, [r1, #0]
 804aab6:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 804aab8:	4b0b      	ldr	r3, [pc, #44]	; (804aae8 <TIM_Base_SetConfig+0xc4>)
 804aaba:	4298      	cmp	r0, r3
 804aabc:	d00f      	beq.n	804aade <TIM_Base_SetConfig+0xba>
 804aabe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 804aac2:	4298      	cmp	r0, r3
 804aac4:	d00b      	beq.n	804aade <TIM_Base_SetConfig+0xba>
 804aac6:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 804aaca:	4298      	cmp	r0, r3
 804aacc:	d007      	beq.n	804aade <TIM_Base_SetConfig+0xba>
 804aace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804aad2:	4298      	cmp	r0, r3
 804aad4:	d003      	beq.n	804aade <TIM_Base_SetConfig+0xba>
 804aad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 804aada:	4298      	cmp	r0, r3
 804aadc:	d101      	bne.n	804aae2 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 804aade:	690b      	ldr	r3, [r1, #16]
 804aae0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 804aae2:	2301      	movs	r3, #1
 804aae4:	6143      	str	r3, [r0, #20]
}
 804aae6:	4770      	bx	lr
 804aae8:	40012c00 	.word	0x40012c00

0804aaec <TIM_ResetCallback>:
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 804aaec:	4b15      	ldr	r3, [pc, #84]	; (804ab44 <TIM_ResetCallback+0x58>)
 804aaee:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 804aaf2:	4b15      	ldr	r3, [pc, #84]	; (804ab48 <TIM_ResetCallback+0x5c>)
 804aaf4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 804aaf8:	4b14      	ldr	r3, [pc, #80]	; (804ab4c <TIM_ResetCallback+0x60>)
 804aafa:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 804aafe:	4b14      	ldr	r3, [pc, #80]	; (804ab50 <TIM_ResetCallback+0x64>)
 804ab00:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 804ab04:	4b13      	ldr	r3, [pc, #76]	; (804ab54 <TIM_ResetCallback+0x68>)
 804ab06:	f8c0 3094 	str.w	r3, [r0, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 804ab0a:	4b13      	ldr	r3, [pc, #76]	; (804ab58 <TIM_ResetCallback+0x6c>)
 804ab0c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 804ab10:	4b12      	ldr	r3, [pc, #72]	; (804ab5c <TIM_ResetCallback+0x70>)
 804ab12:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 804ab16:	4b12      	ldr	r3, [pc, #72]	; (804ab60 <TIM_ResetCallback+0x74>)
 804ab18:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 804ab1c:	4b11      	ldr	r3, [pc, #68]	; (804ab64 <TIM_ResetCallback+0x78>)
 804ab1e:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 804ab22:	4b11      	ldr	r3, [pc, #68]	; (804ab68 <TIM_ResetCallback+0x7c>)
 804ab24:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 804ab28:	4b10      	ldr	r3, [pc, #64]	; (804ab6c <TIM_ResetCallback+0x80>)
 804ab2a:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 804ab2e:	4b10      	ldr	r3, [pc, #64]	; (804ab70 <TIM_ResetCallback+0x84>)
 804ab30:	f8c0 30b0 	str.w	r3, [r0, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 804ab34:	4b0f      	ldr	r3, [pc, #60]	; (804ab74 <TIM_ResetCallback+0x88>)
 804ab36:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 804ab3a:	4b0f      	ldr	r3, [pc, #60]	; (804ab78 <TIM_ResetCallback+0x8c>)
 804ab3c:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
}
 804ab40:	4770      	bx	lr
 804ab42:	bf00      	nop
 804ab44:	08041f19 	.word	0x08041f19
 804ab48:	0804a7cf 	.word	0x0804a7cf
 804ab4c:	0804a7db 	.word	0x0804a7db
 804ab50:	0804a7dd 	.word	0x0804a7dd
 804ab54:	0804a7d3 	.word	0x0804a7d3
 804ab58:	0804a7d5 	.word	0x0804a7d5
 804ab5c:	0804a7d1 	.word	0x0804a7d1
 804ab60:	0804a7d7 	.word	0x0804a7d7
 804ab64:	0804a7d9 	.word	0x0804a7d9
 804ab68:	0804a7df 	.word	0x0804a7df
 804ab6c:	0804ad4d 	.word	0x0804ad4d
 804ab70:	0804ad4f 	.word	0x0804ad4f
 804ab74:	0804ad51 	.word	0x0804ad51
 804ab78:	0804ad53 	.word	0x0804ad53

0804ab7c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 804ab7c:	b3a0      	cbz	r0, 804abe8 <HAL_TIM_Base_Init+0x6c>
{
 804ab7e:	b510      	push	{r4, lr}
 804ab80:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 804ab82:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 804ab86:	b313      	cbz	r3, 804abce <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 804ab88:	2302      	movs	r3, #2
 804ab8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 804ab8e:	4621      	mov	r1, r4
 804ab90:	f851 0b04 	ldr.w	r0, [r1], #4
 804ab94:	f7ff ff46 	bl	804aa24 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 804ab98:	2301      	movs	r3, #1
 804ab9a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804ab9e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 804aba2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 804aba6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 804abaa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 804abae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804abb2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804abb6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 804abba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804abbe:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 804abc2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 804abc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 804abca:	2000      	movs	r0, #0
}
 804abcc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 804abce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    TIM_ResetCallback(htim);
 804abd2:	f7ff ff8b 	bl	804aaec <TIM_ResetCallback>
    if (htim->Base_MspInitCallback == NULL)
 804abd6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 804abd8:	b11b      	cbz	r3, 804abe2 <HAL_TIM_Base_Init+0x66>
    htim->Base_MspInitCallback(htim);
 804abda:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 804abdc:	4620      	mov	r0, r4
 804abde:	4798      	blx	r3
 804abe0:	e7d2      	b.n	804ab88 <HAL_TIM_Base_Init+0xc>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 804abe2:	4b02      	ldr	r3, [pc, #8]	; (804abec <HAL_TIM_Base_Init+0x70>)
 804abe4:	64e3      	str	r3, [r4, #76]	; 0x4c
 804abe6:	e7f8      	b.n	804abda <HAL_TIM_Base_Init+0x5e>
    return HAL_ERROR;
 804abe8:	2001      	movs	r0, #1
}
 804abea:	4770      	bx	lr
 804abec:	0804a7cd 	.word	0x0804a7cd

0804abf0 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 804abf0:	2800      	cmp	r0, #0
 804abf2:	d05b      	beq.n	804acac <HAL_TIM_Encoder_Init+0xbc>
{
 804abf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804abf6:	460d      	mov	r5, r1
 804abf8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 804abfa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 804abfe:	2b00      	cmp	r3, #0
 804ac00:	d047      	beq.n	804ac92 <HAL_TIM_Encoder_Init+0xa2>
  htim->State = HAL_TIM_STATE_BUSY;
 804ac02:	2302      	movs	r3, #2
 804ac04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 804ac08:	6822      	ldr	r2, [r4, #0]
 804ac0a:	6893      	ldr	r3, [r2, #8]
 804ac0c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 804ac10:	f023 0307 	bic.w	r3, r3, #7
 804ac14:	6093      	str	r3, [r2, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 804ac16:	4621      	mov	r1, r4
 804ac18:	f851 0b04 	ldr.w	r0, [r1], #4
 804ac1c:	f7ff ff02 	bl	804aa24 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 804ac20:	6821      	ldr	r1, [r4, #0]
 804ac22:	688a      	ldr	r2, [r1, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 804ac24:	698e      	ldr	r6, [r1, #24]
  tmpccer = htim->Instance->CCER;
 804ac26:	6a0f      	ldr	r7, [r1, #32]
  tmpsmcr |= sConfig->EncoderMode;
 804ac28:	6828      	ldr	r0, [r5, #0]
 804ac2a:	4310      	orrs	r0, r2
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 804ac2c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
 804ac30:	f026 0603 	bic.w	r6, r6, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 804ac34:	68aa      	ldr	r2, [r5, #8]
 804ac36:	69ab      	ldr	r3, [r5, #24]
 804ac38:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 804ac3c:	4333      	orrs	r3, r6
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 804ac3e:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 804ac42:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 804ac46:	68ee      	ldr	r6, [r5, #12]
 804ac48:	69ea      	ldr	r2, [r5, #28]
 804ac4a:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 804ac4e:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 804ac50:	6a2a      	ldr	r2, [r5, #32]
 804ac52:	0313      	lsls	r3, r2, #12
 804ac54:	692a      	ldr	r2, [r5, #16]
 804ac56:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 804ac5a:	4333      	orrs	r3, r6
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 804ac5c:	f027 07aa 	bic.w	r7, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 804ac60:	686a      	ldr	r2, [r5, #4]
 804ac62:	696d      	ldr	r5, [r5, #20]
 804ac64:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 804ac68:	433a      	orrs	r2, r7
  htim->Instance->SMCR = tmpsmcr;
 804ac6a:	6088      	str	r0, [r1, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 804ac6c:	6821      	ldr	r1, [r4, #0]
 804ac6e:	618b      	str	r3, [r1, #24]
  htim->Instance->CCER = tmpccer;
 804ac70:	6823      	ldr	r3, [r4, #0]
 804ac72:	621a      	str	r2, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 804ac74:	2301      	movs	r3, #1
 804ac76:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 804ac7a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 804ac7e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 804ac82:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 804ac86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 804ac8a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 804ac8e:	2000      	movs	r0, #0
}
 804ac90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 804ac92:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    TIM_ResetCallback(htim);
 804ac96:	f7ff ff29 	bl	804aaec <TIM_ResetCallback>
    if (htim->Encoder_MspInitCallback == NULL)
 804ac9a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 804ac9c:	b11b      	cbz	r3, 804aca6 <HAL_TIM_Encoder_Init+0xb6>
    htim->Encoder_MspInitCallback(htim);
 804ac9e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 804aca0:	4620      	mov	r0, r4
 804aca2:	4798      	blx	r3
 804aca4:	e7ad      	b.n	804ac02 <HAL_TIM_Encoder_Init+0x12>
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 804aca6:	4b02      	ldr	r3, [pc, #8]	; (804acb0 <HAL_TIM_Encoder_Init+0xc0>)
 804aca8:	6763      	str	r3, [r4, #116]	; 0x74
 804acaa:	e7f8      	b.n	804ac9e <HAL_TIM_Encoder_Init+0xae>
    return HAL_ERROR;
 804acac:	2001      	movs	r0, #1
}
 804acae:	4770      	bx	lr
 804acb0:	08042f19 	.word	0x08042f19

0804acb4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 804acb4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 804acb8:	2b01      	cmp	r3, #1
 804acba:	d042      	beq.n	804ad42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
{
 804acbc:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 804acbe:	2301      	movs	r3, #1
 804acc0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 804acc4:	2302      	movs	r3, #2
 804acc6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 804acca:	6802      	ldr	r2, [r0, #0]
 804accc:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 804acce:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 804acd0:	4c1d      	ldr	r4, [pc, #116]	; (804ad48 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 804acd2:	42a2      	cmp	r2, r4
 804acd4:	d003      	beq.n	804acde <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 804acd6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 804acda:	42a2      	cmp	r2, r4
 804acdc:	d103      	bne.n	804ace6 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 804acde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 804ace2:	684c      	ldr	r4, [r1, #4]
 804ace4:	4323      	orrs	r3, r4
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 804ace6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 804acea:	680c      	ldr	r4, [r1, #0]
 804acec:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 804acee:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 804acf0:	6803      	ldr	r3, [r0, #0]
 804acf2:	4a15      	ldr	r2, [pc, #84]	; (804ad48 <HAL_TIMEx_MasterConfigSynchronization+0x94>)
 804acf4:	4293      	cmp	r3, r2
 804acf6:	d016      	beq.n	804ad26 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 804acf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804acfc:	d013      	beq.n	804ad26 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 804acfe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 804ad02:	4293      	cmp	r3, r2
 804ad04:	d00f      	beq.n	804ad26 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 804ad06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804ad0a:	4293      	cmp	r3, r2
 804ad0c:	d00b      	beq.n	804ad26 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 804ad0e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 804ad12:	4293      	cmp	r3, r2
 804ad14:	d007      	beq.n	804ad26 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 804ad16:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 804ad1a:	4293      	cmp	r3, r2
 804ad1c:	d003      	beq.n	804ad26 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 804ad1e:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 804ad22:	4293      	cmp	r3, r2
 804ad24:	d104      	bne.n	804ad30 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 804ad26:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 804ad2a:	688a      	ldr	r2, [r1, #8]
 804ad2c:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 804ad2e:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 804ad30:	2301      	movs	r3, #1
 804ad32:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 804ad36:	2300      	movs	r3, #0
 804ad38:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 804ad3c:	4618      	mov	r0, r3
}
 804ad3e:	bc30      	pop	{r4, r5}
 804ad40:	4770      	bx	lr
  __HAL_LOCK(htim);
 804ad42:	2002      	movs	r0, #2
}
 804ad44:	4770      	bx	lr
 804ad46:	bf00      	nop
 804ad48:	40012c00 	.word	0x40012c00

0804ad4c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 804ad4c:	4770      	bx	lr

0804ad4e <HAL_TIMEx_CommutHalfCpltCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 804ad4e:	4770      	bx	lr

0804ad50 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 804ad50:	4770      	bx	lr

0804ad52 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 804ad52:	4770      	bx	lr

0804ad54 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 804ad54:	6802      	ldr	r2, [r0, #0]
 804ad56:	6813      	ldr	r3, [r2, #0]
 804ad58:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 804ad5c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 804ad5e:	6802      	ldr	r2, [r0, #0]
 804ad60:	6893      	ldr	r3, [r2, #8]
 804ad62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 804ad66:	6093      	str	r3, [r2, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 804ad68:	2320      	movs	r3, #32
 804ad6a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
}
 804ad6e:	4770      	bx	lr

0804ad70 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 804ad70:	6802      	ldr	r2, [r0, #0]
 804ad72:	6813      	ldr	r3, [r2, #0]
 804ad74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 804ad78:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 804ad7a:	6802      	ldr	r2, [r0, #0]
 804ad7c:	6893      	ldr	r3, [r2, #8]
 804ad7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804ad82:	f023 0301 	bic.w	r3, r3, #1
 804ad86:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804ad88:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 804ad8a:	2b01      	cmp	r3, #1
 804ad8c:	d006      	beq.n	804ad9c <UART_EndRxTransfer+0x2c>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 804ad8e:	2320      	movs	r3, #32
 804ad90:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804ad94:	2300      	movs	r3, #0
 804ad96:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 804ad98:	6703      	str	r3, [r0, #112]	; 0x70
}
 804ad9a:	4770      	bx	lr
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804ad9c:	6802      	ldr	r2, [r0, #0]
 804ad9e:	6813      	ldr	r3, [r2, #0]
 804ada0:	f023 0310 	bic.w	r3, r3, #16
 804ada4:	6013      	str	r3, [r2, #0]
 804ada6:	e7f2      	b.n	804ad8e <UART_EndRxTransfer+0x1e>

0804ada8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 804ada8:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 804adaa:	6801      	ldr	r1, [r0, #0]
 804adac:	680a      	ldr	r2, [r1, #0]
 804adae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804adb2:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 804adb4:	2220      	movs	r2, #32
 804adb6:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 804adba:	2200      	movs	r2, #0
 804adbc:	6742      	str	r2, [r0, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 804adbe:	f7f8 fc13 	bl	80435e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804adc2:	bd08      	pop	{r3, pc}

0804adc4 <HAL_UART_RxHalfCpltCallback>:
}
 804adc4:	4770      	bx	lr

0804adc6 <HAL_UART_ErrorCallback>:
}
 804adc6:	4770      	bx	lr

0804adc8 <UART_DMAError>:
{
 804adc8:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804adca:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 804adcc:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 804add0:	f8d4 5088 	ldr.w	r5, [r4, #136]	; 0x88
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 804add4:	6823      	ldr	r3, [r4, #0]
 804add6:	689b      	ldr	r3, [r3, #8]
 804add8:	f013 0f80 	tst.w	r3, #128	; 0x80
 804addc:	d001      	beq.n	804ade2 <UART_DMAError+0x1a>
 804adde:	2a21      	cmp	r2, #33	; 0x21
 804ade0:	d010      	beq.n	804ae04 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 804ade2:	6823      	ldr	r3, [r4, #0]
 804ade4:	689b      	ldr	r3, [r3, #8]
 804ade6:	f013 0f40 	tst.w	r3, #64	; 0x40
 804adea:	d001      	beq.n	804adf0 <UART_DMAError+0x28>
 804adec:	2d22      	cmp	r5, #34	; 0x22
 804adee:	d010      	beq.n	804ae12 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 804adf0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 804adf4:	f043 0310 	orr.w	r3, r3, #16
 804adf8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  HAL_UART_ErrorCallback(huart);
 804adfc:	4620      	mov	r0, r4
 804adfe:	f7ff ffe2 	bl	804adc6 <HAL_UART_ErrorCallback>
}
 804ae02:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 804ae04:	2300      	movs	r3, #0
 804ae06:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 804ae0a:	4620      	mov	r0, r4
 804ae0c:	f7ff ffa2 	bl	804ad54 <UART_EndTxTransfer>
 804ae10:	e7e7      	b.n	804ade2 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 804ae12:	2300      	movs	r3, #0
 804ae14:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 804ae18:	4620      	mov	r0, r4
 804ae1a:	f7ff ffa9 	bl	804ad70 <UART_EndRxTransfer>
 804ae1e:	e7e7      	b.n	804adf0 <UART_DMAError+0x28>

0804ae20 <UART_DMAAbortOnError>:
{
 804ae20:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804ae22:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 804ae24:	2300      	movs	r3, #0
 804ae26:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 804ae2a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 804ae2e:	f7ff ffca 	bl	804adc6 <HAL_UART_ErrorCallback>
}
 804ae32:	bd08      	pop	{r3, pc}

0804ae34 <HAL_UARTEx_RxEventCallback>:
}
 804ae34:	4770      	bx	lr
	...

0804ae38 <HAL_UART_IRQHandler>:
{
 804ae38:	b570      	push	{r4, r5, r6, lr}
 804ae3a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 804ae3c:	6801      	ldr	r1, [r0, #0]
 804ae3e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 804ae40:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 804ae42:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 804ae44:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 804ae48:	401a      	ands	r2, r3
 804ae4a:	d108      	bne.n	804ae5e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 804ae4c:	f013 0f20 	tst.w	r3, #32
 804ae50:	d005      	beq.n	804ae5e <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 804ae52:	f010 0f20 	tst.w	r0, #32
 804ae56:	d134      	bne.n	804aec2 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 804ae58:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 804ae5c:	d131      	bne.n	804aec2 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 804ae5e:	b12a      	cbz	r2, 804ae6c <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 804ae60:	4aa8      	ldr	r2, [pc, #672]	; (804b104 <HAL_UART_IRQHandler+0x2cc>)
 804ae62:	402a      	ands	r2, r5
 804ae64:	d133      	bne.n	804aece <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 804ae66:	4ea8      	ldr	r6, [pc, #672]	; (804b108 <HAL_UART_IRQHandler+0x2d0>)
 804ae68:	4230      	tst	r0, r6
 804ae6a:	d130      	bne.n	804aece <HAL_UART_IRQHandler+0x96>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804ae6c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 804ae6e:	2a01      	cmp	r2, #1
 804ae70:	f000 80bb 	beq.w	804afea <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 804ae74:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 804ae78:	d003      	beq.n	804ae82 <HAL_UART_IRQHandler+0x4a>
 804ae7a:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 804ae7e:	f040 8127 	bne.w	804b0d0 <HAL_UART_IRQHandler+0x298>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 804ae82:	f013 0f80 	tst.w	r3, #128	; 0x80
 804ae86:	d007      	beq.n	804ae98 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 804ae88:	f010 0f80 	tst.w	r0, #128	; 0x80
 804ae8c:	f040 8127 	bne.w	804b0de <HAL_UART_IRQHandler+0x2a6>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 804ae90:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 804ae94:	f040 8123 	bne.w	804b0de <HAL_UART_IRQHandler+0x2a6>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 804ae98:	f013 0f40 	tst.w	r3, #64	; 0x40
 804ae9c:	d003      	beq.n	804aea6 <HAL_UART_IRQHandler+0x6e>
 804ae9e:	f010 0f40 	tst.w	r0, #64	; 0x40
 804aea2:	f040 8123 	bne.w	804b0ec <HAL_UART_IRQHandler+0x2b4>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 804aea6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 804aeaa:	d003      	beq.n	804aeb4 <HAL_UART_IRQHandler+0x7c>
 804aeac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 804aeb0:	f040 8120 	bne.w	804b0f4 <HAL_UART_IRQHandler+0x2bc>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 804aeb4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 804aeb8:	d002      	beq.n	804aec0 <HAL_UART_IRQHandler+0x88>
 804aeba:	2800      	cmp	r0, #0
 804aebc:	f2c0 811e 	blt.w	804b0fc <HAL_UART_IRQHandler+0x2c4>
}
 804aec0:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 804aec2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 804aec4:	2b00      	cmp	r3, #0
 804aec6:	d0fb      	beq.n	804aec0 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 804aec8:	4620      	mov	r0, r4
 804aeca:	4798      	blx	r3
      return;
 804aecc:	e7f8      	b.n	804aec0 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 804aece:	f013 0f01 	tst.w	r3, #1
 804aed2:	d009      	beq.n	804aee8 <HAL_UART_IRQHandler+0xb0>
 804aed4:	f410 7f80 	tst.w	r0, #256	; 0x100
 804aed8:	d006      	beq.n	804aee8 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 804aeda:	2601      	movs	r6, #1
 804aedc:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 804aede:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 804aee2:	4331      	orrs	r1, r6
 804aee4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 804aee8:	f013 0f02 	tst.w	r3, #2
 804aeec:	d00b      	beq.n	804af06 <HAL_UART_IRQHandler+0xce>
 804aeee:	f015 0f01 	tst.w	r5, #1
 804aef2:	d008      	beq.n	804af06 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 804aef4:	6821      	ldr	r1, [r4, #0]
 804aef6:	2602      	movs	r6, #2
 804aef8:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 804aefa:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 804aefe:	f041 0104 	orr.w	r1, r1, #4
 804af02:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 804af06:	f013 0f04 	tst.w	r3, #4
 804af0a:	d00b      	beq.n	804af24 <HAL_UART_IRQHandler+0xec>
 804af0c:	f015 0f01 	tst.w	r5, #1
 804af10:	d008      	beq.n	804af24 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 804af12:	6821      	ldr	r1, [r4, #0]
 804af14:	2604      	movs	r6, #4
 804af16:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 804af18:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 804af1c:	f041 0102 	orr.w	r1, r1, #2
 804af20:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_ORE) != 0U)
 804af24:	f013 0f08 	tst.w	r3, #8
 804af28:	d00b      	beq.n	804af42 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 804af2a:	f010 0f20 	tst.w	r0, #32
 804af2e:	d100      	bne.n	804af32 <HAL_UART_IRQHandler+0xfa>
 804af30:	b13a      	cbz	r2, 804af42 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 804af32:	6822      	ldr	r2, [r4, #0]
 804af34:	2108      	movs	r1, #8
 804af36:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 804af38:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 804af3c:	430a      	orrs	r2, r1
 804af3e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 804af42:	f413 6f00 	tst.w	r3, #2048	; 0x800
 804af46:	d00c      	beq.n	804af62 <HAL_UART_IRQHandler+0x12a>
 804af48:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 804af4c:	d009      	beq.n	804af62 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 804af4e:	6822      	ldr	r2, [r4, #0]
 804af50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 804af54:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 804af56:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 804af5a:	f042 0220 	orr.w	r2, r2, #32
 804af5e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 804af62:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 804af66:	2a00      	cmp	r2, #0
 804af68:	d0aa      	beq.n	804aec0 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 804af6a:	f013 0f20 	tst.w	r3, #32
 804af6e:	d009      	beq.n	804af84 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 804af70:	f010 0f20 	tst.w	r0, #32
 804af74:	d102      	bne.n	804af7c <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 804af76:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 804af7a:	d003      	beq.n	804af84 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 804af7c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 804af7e:	b10b      	cbz	r3, 804af84 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 804af80:	4620      	mov	r0, r4
 804af82:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 804af84:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 804af88:	6823      	ldr	r3, [r4, #0]
 804af8a:	689b      	ldr	r3, [r3, #8]
 804af8c:	f013 0f40 	tst.w	r3, #64	; 0x40
 804af90:	d102      	bne.n	804af98 <HAL_UART_IRQHandler+0x160>
 804af92:	f012 0f28 	tst.w	r2, #40	; 0x28
 804af96:	d021      	beq.n	804afdc <HAL_UART_IRQHandler+0x1a4>
        UART_EndRxTransfer(huart);
 804af98:	4620      	mov	r0, r4
 804af9a:	f7ff fee9 	bl	804ad70 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804af9e:	6823      	ldr	r3, [r4, #0]
 804afa0:	689a      	ldr	r2, [r3, #8]
 804afa2:	f012 0f40 	tst.w	r2, #64	; 0x40
 804afa6:	d015      	beq.n	804afd4 <HAL_UART_IRQHandler+0x19c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804afa8:	689a      	ldr	r2, [r3, #8]
 804afaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804afae:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 804afb0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 804afb2:	b15b      	cbz	r3, 804afcc <HAL_UART_IRQHandler+0x194>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 804afb4:	4a55      	ldr	r2, [pc, #340]	; (804b10c <HAL_UART_IRQHandler+0x2d4>)
 804afb6:	641a      	str	r2, [r3, #64]	; 0x40
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 804afb8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 804afba:	f7fc fb33 	bl	8047624 <HAL_DMA_Abort_IT>
 804afbe:	2800      	cmp	r0, #0
 804afc0:	f43f af7e 	beq.w	804aec0 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 804afc4:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 804afc6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 804afc8:	4798      	blx	r3
 804afca:	e779      	b.n	804aec0 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 804afcc:	4620      	mov	r0, r4
 804afce:	f7ff fefa 	bl	804adc6 <HAL_UART_ErrorCallback>
 804afd2:	e775      	b.n	804aec0 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 804afd4:	4620      	mov	r0, r4
 804afd6:	f7ff fef6 	bl	804adc6 <HAL_UART_ErrorCallback>
 804afda:	e771      	b.n	804aec0 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 804afdc:	4620      	mov	r0, r4
 804afde:	f7ff fef2 	bl	804adc6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 804afe2:	2300      	movs	r3, #0
 804afe4:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return;
 804afe8:	e76a      	b.n	804aec0 <HAL_UART_IRQHandler+0x88>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 804afea:	f013 0f10 	tst.w	r3, #16
 804afee:	f43f af41 	beq.w	804ae74 <HAL_UART_IRQHandler+0x3c>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 804aff2:	f010 0f10 	tst.w	r0, #16
 804aff6:	f43f af3d 	beq.w	804ae74 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 804affa:	2310      	movs	r3, #16
 804affc:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804affe:	6822      	ldr	r2, [r4, #0]
 804b000:	6893      	ldr	r3, [r2, #8]
 804b002:	f013 0f40 	tst.w	r3, #64	; 0x40
 804b006:	d039      	beq.n	804b07c <HAL_UART_IRQHandler+0x244>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 804b008:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 804b00a:	680b      	ldr	r3, [r1, #0]
 804b00c:	685b      	ldr	r3, [r3, #4]
 804b00e:	b29b      	uxth	r3, r3
      if (  (nb_remaining_rx_data > 0U)
 804b010:	2b00      	cmp	r3, #0
 804b012:	f43f af55 	beq.w	804aec0 <HAL_UART_IRQHandler+0x88>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 804b016:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
 804b01a:	4298      	cmp	r0, r3
 804b01c:	f67f af50 	bls.w	804aec0 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 804b020:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 804b024:	680b      	ldr	r3, [r1, #0]
 804b026:	681b      	ldr	r3, [r3, #0]
 804b028:	f013 0f20 	tst.w	r3, #32
 804b02c:	d00a      	beq.n	804b044 <HAL_UART_IRQHandler+0x20c>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 804b02e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 804b032:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 804b036:	b29b      	uxth	r3, r3
 804b038:	1ac9      	subs	r1, r1, r3
 804b03a:	b289      	uxth	r1, r1
 804b03c:	4620      	mov	r0, r4
 804b03e:	f7ff fef9 	bl	804ae34 <HAL_UARTEx_RxEventCallback>
      return;
 804b042:	e73d      	b.n	804aec0 <HAL_UART_IRQHandler+0x88>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 804b044:	6813      	ldr	r3, [r2, #0]
 804b046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 804b04a:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804b04c:	6822      	ldr	r2, [r4, #0]
 804b04e:	6893      	ldr	r3, [r2, #8]
 804b050:	f023 0301 	bic.w	r3, r3, #1
 804b054:	6093      	str	r3, [r2, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804b056:	6822      	ldr	r2, [r4, #0]
 804b058:	6893      	ldr	r3, [r2, #8]
 804b05a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804b05e:	6093      	str	r3, [r2, #8]
          huart->RxState = HAL_UART_STATE_READY;
 804b060:	2320      	movs	r3, #32
 804b062:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804b066:	2300      	movs	r3, #0
 804b068:	66e3      	str	r3, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804b06a:	6822      	ldr	r2, [r4, #0]
 804b06c:	6813      	ldr	r3, [r2, #0]
 804b06e:	f023 0310 	bic.w	r3, r3, #16
 804b072:	6013      	str	r3, [r2, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 804b074:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 804b076:	f7fc fa9f 	bl	80475b8 <HAL_DMA_Abort>
 804b07a:	e7d8      	b.n	804b02e <HAL_UART_IRQHandler+0x1f6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 804b07c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 804b080:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 804b084:	b29b      	uxth	r3, r3
 804b086:	1ac9      	subs	r1, r1, r3
 804b088:	b289      	uxth	r1, r1
      if (  (huart->RxXferCount > 0U)
 804b08a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 804b08e:	b29b      	uxth	r3, r3
 804b090:	2b00      	cmp	r3, #0
 804b092:	f43f af15 	beq.w	804aec0 <HAL_UART_IRQHandler+0x88>
          &&(nb_rx_data > 0U) )
 804b096:	2900      	cmp	r1, #0
 804b098:	f43f af12 	beq.w	804aec0 <HAL_UART_IRQHandler+0x88>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 804b09c:	6813      	ldr	r3, [r2, #0]
 804b09e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 804b0a2:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 804b0a4:	6822      	ldr	r2, [r4, #0]
 804b0a6:	6893      	ldr	r3, [r2, #8]
 804b0a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804b0ac:	f023 0301 	bic.w	r3, r3, #1
 804b0b0:	6093      	str	r3, [r2, #8]
        huart->RxState = HAL_UART_STATE_READY;
 804b0b2:	2320      	movs	r3, #32
 804b0b4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804b0b8:	2300      	movs	r3, #0
 804b0ba:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 804b0bc:	6723      	str	r3, [r4, #112]	; 0x70
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804b0be:	6822      	ldr	r2, [r4, #0]
 804b0c0:	6813      	ldr	r3, [r2, #0]
 804b0c2:	f023 0310 	bic.w	r3, r3, #16
 804b0c6:	6013      	str	r3, [r2, #0]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 804b0c8:	4620      	mov	r0, r4
 804b0ca:	f7ff feb3 	bl	804ae34 <HAL_UARTEx_RxEventCallback>
      return;
 804b0ce:	e6f7      	b.n	804aec0 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 804b0d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 804b0d4:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 804b0d6:	4620      	mov	r0, r4
 804b0d8:	f000 fc56 	bl	804b988 <HAL_UARTEx_WakeupCallback>
    return;
 804b0dc:	e6f0      	b.n	804aec0 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 804b0de:	6f63      	ldr	r3, [r4, #116]	; 0x74
 804b0e0:	2b00      	cmp	r3, #0
 804b0e2:	f43f aeed 	beq.w	804aec0 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 804b0e6:	4620      	mov	r0, r4
 804b0e8:	4798      	blx	r3
    return;
 804b0ea:	e6e9      	b.n	804aec0 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 804b0ec:	4620      	mov	r0, r4
 804b0ee:	f7ff fe5b 	bl	804ada8 <UART_EndTransmit_IT>
    return;
 804b0f2:	e6e5      	b.n	804aec0 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 804b0f4:	4620      	mov	r0, r4
 804b0f6:	f000 fc49 	bl	804b98c <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 804b0fa:	e6e1      	b.n	804aec0 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 804b0fc:	4620      	mov	r0, r4
 804b0fe:	f000 fc44 	bl	804b98a <HAL_UARTEx_RxFifoFullCallback>
    return;
 804b102:	e6dd      	b.n	804aec0 <HAL_UART_IRQHandler+0x88>
 804b104:	10000001 	.word	0x10000001
 804b108:	04000120 	.word	0x04000120
 804b10c:	0804ae21 	.word	0x0804ae21

0804b110 <UART_DMARxHalfCplt>:
{
 804b110:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804b112:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804b114:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 804b116:	2b01      	cmp	r3, #1
 804b118:	d002      	beq.n	804b120 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 804b11a:	f7ff fe53 	bl	804adc4 <HAL_UART_RxHalfCpltCallback>
}
 804b11e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 804b120:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 804b124:	0849      	lsrs	r1, r1, #1
 804b126:	f7ff fe85 	bl	804ae34 <HAL_UARTEx_RxEventCallback>
 804b12a:	e7f8      	b.n	804b11e <UART_DMARxHalfCplt+0xe>

0804b12c <UART_DMAReceiveCplt>:
{
 804b12c:	b508      	push	{r3, lr}
 804b12e:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804b130:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 804b132:	681b      	ldr	r3, [r3, #0]
 804b134:	681b      	ldr	r3, [r3, #0]
 804b136:	f013 0f20 	tst.w	r3, #32
 804b13a:	d117      	bne.n	804b16c <UART_DMAReceiveCplt+0x40>
    huart->RxXferCount = 0U;
 804b13c:	2300      	movs	r3, #0
 804b13e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 804b142:	6802      	ldr	r2, [r0, #0]
 804b144:	6813      	ldr	r3, [r2, #0]
 804b146:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 804b14a:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804b14c:	6802      	ldr	r2, [r0, #0]
 804b14e:	6893      	ldr	r3, [r2, #8]
 804b150:	f023 0301 	bic.w	r3, r3, #1
 804b154:	6093      	str	r3, [r2, #8]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804b156:	6802      	ldr	r2, [r0, #0]
 804b158:	6893      	ldr	r3, [r2, #8]
 804b15a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804b15e:	6093      	str	r3, [r2, #8]
    huart->RxState = HAL_UART_STATE_READY;
 804b160:	2320      	movs	r3, #32
 804b162:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804b166:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 804b168:	2b01      	cmp	r3, #1
 804b16a:	d005      	beq.n	804b178 <UART_DMAReceiveCplt+0x4c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804b16c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 804b16e:	2b01      	cmp	r3, #1
 804b170:	d008      	beq.n	804b184 <UART_DMAReceiveCplt+0x58>
    HAL_UART_RxCpltCallback(huart);
 804b172:	f7f8 f9ff 	bl	8043574 <HAL_UART_RxCpltCallback>
}
 804b176:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804b178:	6802      	ldr	r2, [r0, #0]
 804b17a:	6813      	ldr	r3, [r2, #0]
 804b17c:	f023 0310 	bic.w	r3, r3, #16
 804b180:	6013      	str	r3, [r2, #0]
 804b182:	e7f3      	b.n	804b16c <UART_DMAReceiveCplt+0x40>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 804b184:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 804b188:	f7ff fe54 	bl	804ae34 <HAL_UARTEx_RxEventCallback>
 804b18c:	e7f3      	b.n	804b176 <UART_DMAReceiveCplt+0x4a>
	...

0804b190 <UART_SetConfig>:
{
 804b190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804b194:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 804b196:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 804b198:	6883      	ldr	r3, [r0, #8]
 804b19a:	6902      	ldr	r2, [r0, #16]
 804b19c:	4313      	orrs	r3, r2
 804b19e:	6942      	ldr	r2, [r0, #20]
 804b1a0:	4313      	orrs	r3, r2
 804b1a2:	69c2      	ldr	r2, [r0, #28]
 804b1a4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)huart->FifoMode;
 804b1a6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 804b1a8:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 804b1aa:	6808      	ldr	r0, [r1, #0]
 804b1ac:	4a9c      	ldr	r2, [pc, #624]	; (804b420 <UART_SetConfig+0x290>)
 804b1ae:	4002      	ands	r2, r0
 804b1b0:	431a      	orrs	r2, r3
 804b1b2:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 804b1b4:	6822      	ldr	r2, [r4, #0]
 804b1b6:	6853      	ldr	r3, [r2, #4]
 804b1b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 804b1bc:	68e1      	ldr	r1, [r4, #12]
 804b1be:	430b      	orrs	r3, r1
 804b1c0:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 804b1c2:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 804b1c4:	6822      	ldr	r2, [r4, #0]
 804b1c6:	4b97      	ldr	r3, [pc, #604]	; (804b424 <UART_SetConfig+0x294>)
 804b1c8:	429a      	cmp	r2, r3
 804b1ca:	d001      	beq.n	804b1d0 <UART_SetConfig+0x40>
    tmpreg |= huart->Init.OneBitSampling;
 804b1cc:	6a23      	ldr	r3, [r4, #32]
 804b1ce:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 804b1d0:	6893      	ldr	r3, [r2, #8]
 804b1d2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 804b1d6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 804b1da:	430b      	orrs	r3, r1
 804b1dc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 804b1de:	6822      	ldr	r2, [r4, #0]
 804b1e0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 804b1e2:	f023 030f 	bic.w	r3, r3, #15
 804b1e6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 804b1e8:	430b      	orrs	r3, r1
 804b1ea:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 804b1ec:	6822      	ldr	r2, [r4, #0]
 804b1ee:	4b8e      	ldr	r3, [pc, #568]	; (804b428 <UART_SetConfig+0x298>)
 804b1f0:	429a      	cmp	r2, r3
 804b1f2:	d010      	beq.n	804b216 <UART_SetConfig+0x86>
 804b1f4:	4b8d      	ldr	r3, [pc, #564]	; (804b42c <UART_SetConfig+0x29c>)
 804b1f6:	429a      	cmp	r2, r3
 804b1f8:	d021      	beq.n	804b23e <UART_SetConfig+0xae>
 804b1fa:	4b8d      	ldr	r3, [pc, #564]	; (804b430 <UART_SetConfig+0x2a0>)
 804b1fc:	429a      	cmp	r2, r3
 804b1fe:	d037      	beq.n	804b270 <UART_SetConfig+0xe0>
 804b200:	4b8c      	ldr	r3, [pc, #560]	; (804b434 <UART_SetConfig+0x2a4>)
 804b202:	429a      	cmp	r2, r3
 804b204:	d05c      	beq.n	804b2c0 <UART_SetConfig+0x130>
 804b206:	4b8c      	ldr	r3, [pc, #560]	; (804b438 <UART_SetConfig+0x2a8>)
 804b208:	429a      	cmp	r2, r3
 804b20a:	d06b      	beq.n	804b2e4 <UART_SetConfig+0x154>
 804b20c:	4b85      	ldr	r3, [pc, #532]	; (804b424 <UART_SetConfig+0x294>)
 804b20e:	429a      	cmp	r2, r3
 804b210:	d07d      	beq.n	804b30e <UART_SetConfig+0x17e>
 804b212:	2310      	movs	r3, #16
 804b214:	e03a      	b.n	804b28c <UART_SetConfig+0xfc>
 804b216:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 804b21a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b21e:	f003 0303 	and.w	r3, r3, #3
 804b222:	2b03      	cmp	r3, #3
 804b224:	d809      	bhi.n	804b23a <UART_SetConfig+0xaa>
 804b226:	e8df f003 	tbb	[pc, r3]
 804b22a:	0402      	.short	0x0402
 804b22c:	0687      	.short	0x0687
 804b22e:	2301      	movs	r3, #1
 804b230:	e02c      	b.n	804b28c <UART_SetConfig+0xfc>
 804b232:	2304      	movs	r3, #4
 804b234:	e02a      	b.n	804b28c <UART_SetConfig+0xfc>
 804b236:	2308      	movs	r3, #8
 804b238:	e028      	b.n	804b28c <UART_SetConfig+0xfc>
 804b23a:	2310      	movs	r3, #16
 804b23c:	e026      	b.n	804b28c <UART_SetConfig+0xfc>
 804b23e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 804b242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b246:	f003 030c 	and.w	r3, r3, #12
 804b24a:	2b0c      	cmp	r3, #12
 804b24c:	d80e      	bhi.n	804b26c <UART_SetConfig+0xdc>
 804b24e:	e8df f003 	tbb	[pc, r3]
 804b252:	0d07      	.short	0x0d07
 804b254:	0d090d0d 	.word	0x0d090d0d
 804b258:	0d750d0d 	.word	0x0d750d0d
 804b25c:	0d0d      	.short	0x0d0d
 804b25e:	0b          	.byte	0x0b
 804b25f:	00          	.byte	0x00
 804b260:	2300      	movs	r3, #0
 804b262:	e013      	b.n	804b28c <UART_SetConfig+0xfc>
 804b264:	2304      	movs	r3, #4
 804b266:	e011      	b.n	804b28c <UART_SetConfig+0xfc>
 804b268:	2308      	movs	r3, #8
 804b26a:	e00f      	b.n	804b28c <UART_SetConfig+0xfc>
 804b26c:	2310      	movs	r3, #16
 804b26e:	e00d      	b.n	804b28c <UART_SetConfig+0xfc>
 804b270:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 804b274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b278:	f003 0330 	and.w	r3, r3, #48	; 0x30
 804b27c:	2b20      	cmp	r3, #32
 804b27e:	d05f      	beq.n	804b340 <UART_SetConfig+0x1b0>
 804b280:	d81a      	bhi.n	804b2b8 <UART_SetConfig+0x128>
 804b282:	2b00      	cmp	r3, #0
 804b284:	d05e      	beq.n	804b344 <UART_SetConfig+0x1b4>
 804b286:	2b10      	cmp	r3, #16
 804b288:	d15e      	bne.n	804b348 <UART_SetConfig+0x1b8>
 804b28a:	2304      	movs	r3, #4
  if (UART_INSTANCE_LOWPOWER(huart))
 804b28c:	4965      	ldr	r1, [pc, #404]	; (804b424 <UART_SetConfig+0x294>)
 804b28e:	428a      	cmp	r2, r1
 804b290:	d076      	beq.n	804b380 <UART_SetConfig+0x1f0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804b292:	69e0      	ldr	r0, [r4, #28]
 804b294:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 804b298:	f000 80b9 	beq.w	804b40e <UART_SetConfig+0x27e>
    switch (clocksource)
 804b29c:	2b08      	cmp	r3, #8
 804b29e:	f200 8139 	bhi.w	804b514 <UART_SetConfig+0x384>
 804b2a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 804b2a6:	00fb      	.short	0x00fb
 804b2a8:	00f9011e 	.word	0x00f9011e
 804b2ac:	01210137 	.word	0x01210137
 804b2b0:	01370137 	.word	0x01370137
 804b2b4:	01240137 	.word	0x01240137
  UART_GETCLOCKSOURCE(huart, clocksource);
 804b2b8:	2b30      	cmp	r3, #48	; 0x30
 804b2ba:	d147      	bne.n	804b34c <UART_SetConfig+0x1bc>
 804b2bc:	2308      	movs	r3, #8
 804b2be:	e7e5      	b.n	804b28c <UART_SetConfig+0xfc>
 804b2c0:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 804b2c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b2c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 804b2cc:	2b80      	cmp	r3, #128	; 0x80
 804b2ce:	d03f      	beq.n	804b350 <UART_SetConfig+0x1c0>
 804b2d0:	d804      	bhi.n	804b2dc <UART_SetConfig+0x14c>
 804b2d2:	b3fb      	cbz	r3, 804b354 <UART_SetConfig+0x1c4>
 804b2d4:	2b40      	cmp	r3, #64	; 0x40
 804b2d6:	d13f      	bne.n	804b358 <UART_SetConfig+0x1c8>
 804b2d8:	2304      	movs	r3, #4
 804b2da:	e7d7      	b.n	804b28c <UART_SetConfig+0xfc>
 804b2dc:	2bc0      	cmp	r3, #192	; 0xc0
 804b2de:	d13d      	bne.n	804b35c <UART_SetConfig+0x1cc>
 804b2e0:	2308      	movs	r3, #8
 804b2e2:	e7d3      	b.n	804b28c <UART_SetConfig+0xfc>
 804b2e4:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 804b2e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b2ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804b2f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804b2f4:	d034      	beq.n	804b360 <UART_SetConfig+0x1d0>
 804b2f6:	d805      	bhi.n	804b304 <UART_SetConfig+0x174>
 804b2f8:	b3a3      	cbz	r3, 804b364 <UART_SetConfig+0x1d4>
 804b2fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804b2fe:	d133      	bne.n	804b368 <UART_SetConfig+0x1d8>
 804b300:	2304      	movs	r3, #4
 804b302:	e7c3      	b.n	804b28c <UART_SetConfig+0xfc>
 804b304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804b308:	d130      	bne.n	804b36c <UART_SetConfig+0x1dc>
 804b30a:	2308      	movs	r3, #8
 804b30c:	e7be      	b.n	804b28c <UART_SetConfig+0xfc>
 804b30e:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 804b312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b316:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 804b31a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804b31e:	d027      	beq.n	804b370 <UART_SetConfig+0x1e0>
 804b320:	d805      	bhi.n	804b32e <UART_SetConfig+0x19e>
 804b322:	b33b      	cbz	r3, 804b374 <UART_SetConfig+0x1e4>
 804b324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804b328:	d126      	bne.n	804b378 <UART_SetConfig+0x1e8>
 804b32a:	2304      	movs	r3, #4
 804b32c:	e7ae      	b.n	804b28c <UART_SetConfig+0xfc>
 804b32e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 804b332:	d123      	bne.n	804b37c <UART_SetConfig+0x1ec>
 804b334:	2308      	movs	r3, #8
 804b336:	e7a9      	b.n	804b28c <UART_SetConfig+0xfc>
 804b338:	2302      	movs	r3, #2
 804b33a:	e7a7      	b.n	804b28c <UART_SetConfig+0xfc>
 804b33c:	2302      	movs	r3, #2
 804b33e:	e7a5      	b.n	804b28c <UART_SetConfig+0xfc>
 804b340:	2302      	movs	r3, #2
 804b342:	e7a3      	b.n	804b28c <UART_SetConfig+0xfc>
 804b344:	2300      	movs	r3, #0
 804b346:	e7a1      	b.n	804b28c <UART_SetConfig+0xfc>
 804b348:	2310      	movs	r3, #16
 804b34a:	e79f      	b.n	804b28c <UART_SetConfig+0xfc>
 804b34c:	2310      	movs	r3, #16
 804b34e:	e79d      	b.n	804b28c <UART_SetConfig+0xfc>
 804b350:	2302      	movs	r3, #2
 804b352:	e79b      	b.n	804b28c <UART_SetConfig+0xfc>
 804b354:	2300      	movs	r3, #0
 804b356:	e799      	b.n	804b28c <UART_SetConfig+0xfc>
 804b358:	2310      	movs	r3, #16
 804b35a:	e797      	b.n	804b28c <UART_SetConfig+0xfc>
 804b35c:	2310      	movs	r3, #16
 804b35e:	e795      	b.n	804b28c <UART_SetConfig+0xfc>
 804b360:	2302      	movs	r3, #2
 804b362:	e793      	b.n	804b28c <UART_SetConfig+0xfc>
 804b364:	2300      	movs	r3, #0
 804b366:	e791      	b.n	804b28c <UART_SetConfig+0xfc>
 804b368:	2310      	movs	r3, #16
 804b36a:	e78f      	b.n	804b28c <UART_SetConfig+0xfc>
 804b36c:	2310      	movs	r3, #16
 804b36e:	e78d      	b.n	804b28c <UART_SetConfig+0xfc>
 804b370:	2302      	movs	r3, #2
 804b372:	e78b      	b.n	804b28c <UART_SetConfig+0xfc>
 804b374:	2300      	movs	r3, #0
 804b376:	e789      	b.n	804b28c <UART_SetConfig+0xfc>
 804b378:	2310      	movs	r3, #16
 804b37a:	e787      	b.n	804b28c <UART_SetConfig+0xfc>
 804b37c:	2310      	movs	r3, #16
 804b37e:	e785      	b.n	804b28c <UART_SetConfig+0xfc>
    switch (clocksource)
 804b380:	2b08      	cmp	r3, #8
 804b382:	f200 80b7 	bhi.w	804b4f4 <UART_SetConfig+0x364>
 804b386:	e8df f003 	tbb	[pc, r3]
 804b38a:	3a08      	.short	0x3a08
 804b38c:	b53db540 	.word	0xb53db540
 804b390:	b5b5      	.short	0xb5b5
 804b392:	05          	.byte	0x05
 804b393:	00          	.byte	0x00
  if (UART_INSTANCE_LOWPOWER(huart))
 804b394:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 804b398:	e004      	b.n	804b3a4 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetPCLK1Freq();
 804b39a:	f7fd fc9f 	bl	8048cdc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 804b39e:	2800      	cmp	r0, #0
 804b3a0:	f000 80aa 	beq.w	804b4f8 <UART_SetConfig+0x368>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 804b3a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 804b3a6:	4b25      	ldr	r3, [pc, #148]	; (804b43c <UART_SetConfig+0x2ac>)
 804b3a8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 804b3ac:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 804b3b0:	6865      	ldr	r5, [r4, #4]
 804b3b2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 804b3b6:	4299      	cmp	r1, r3
 804b3b8:	f200 80a0 	bhi.w	804b4fc <UART_SetConfig+0x36c>
 804b3bc:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 804b3c0:	f200 809e 	bhi.w	804b500 <UART_SetConfig+0x370>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804b3c4:	f04f 0800 	mov.w	r8, #0
 804b3c8:	b292      	uxth	r2, r2
 804b3ca:	2300      	movs	r3, #0
 804b3cc:	4641      	mov	r1, r8
 804b3ce:	f7f5 fc3f 	bl	8040c50 <__aeabi_uldivmod>
 804b3d2:	020f      	lsls	r7, r1, #8
 804b3d4:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 804b3d8:	0206      	lsls	r6, r0, #8
 804b3da:	0868      	lsrs	r0, r5, #1
 804b3dc:	462a      	mov	r2, r5
 804b3de:	4643      	mov	r3, r8
 804b3e0:	1830      	adds	r0, r6, r0
 804b3e2:	f147 0100 	adc.w	r1, r7, #0
 804b3e6:	f7f5 fc33 	bl	8040c50 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 804b3ea:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 804b3ee:	4b14      	ldr	r3, [pc, #80]	; (804b440 <UART_SetConfig+0x2b0>)
 804b3f0:	429a      	cmp	r2, r3
 804b3f2:	f200 8087 	bhi.w	804b504 <UART_SetConfig+0x374>
          huart->Instance->BRR = usartdiv;
 804b3f6:	6823      	ldr	r3, [r4, #0]
 804b3f8:	60d8      	str	r0, [r3, #12]
 804b3fa:	4640      	mov	r0, r8
 804b3fc:	e067      	b.n	804b4ce <UART_SetConfig+0x33e>
        pclk = HAL_RCC_GetPCLK2Freq();
 804b3fe:	f7fd fc7d 	bl	8048cfc <HAL_RCC_GetPCLK2Freq>
        break;
 804b402:	e7cc      	b.n	804b39e <UART_SetConfig+0x20e>
        pclk = HAL_RCC_GetSysClockFreq();
 804b404:	f7fd fbee 	bl	8048be4 <HAL_RCC_GetSysClockFreq>
        break;
 804b408:	e7c9      	b.n	804b39e <UART_SetConfig+0x20e>
        pclk = (uint32_t) HSI_VALUE;
 804b40a:	480e      	ldr	r0, [pc, #56]	; (804b444 <UART_SetConfig+0x2b4>)
 804b40c:	e7ca      	b.n	804b3a4 <UART_SetConfig+0x214>
    switch (clocksource)
 804b40e:	2b08      	cmp	r3, #8
 804b410:	d87a      	bhi.n	804b508 <UART_SetConfig+0x378>
 804b412:	e8df f003 	tbb	[pc, r3]
 804b416:	3b1b      	.short	0x3b1b
 804b418:	793e7919 	.word	0x793e7919
 804b41c:	7979      	.short	0x7979
 804b41e:	1f          	.byte	0x1f
 804b41f:	00          	.byte	0x00
 804b420:	cfff69f3 	.word	0xcfff69f3
 804b424:	40008000 	.word	0x40008000
 804b428:	40013800 	.word	0x40013800
 804b42c:	40004400 	.word	0x40004400
 804b430:	40004800 	.word	0x40004800
 804b434:	40004c00 	.word	0x40004c00
 804b438:	40005000 	.word	0x40005000
 804b43c:	08059e1c 	.word	0x08059e1c
 804b440:	000ffcff 	.word	0x000ffcff
 804b444:	00f42400 	.word	0x00f42400
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804b448:	4835      	ldr	r0, [pc, #212]	; (804b520 <UART_SetConfig+0x390>)
 804b44a:	e003      	b.n	804b454 <UART_SetConfig+0x2c4>
        pclk = HAL_RCC_GetPCLK1Freq();
 804b44c:	f7fd fc46 	bl	8048cdc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 804b450:	2800      	cmp	r0, #0
 804b452:	d05b      	beq.n	804b50c <UART_SetConfig+0x37c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804b454:	6a62      	ldr	r2, [r4, #36]	; 0x24
 804b456:	4b33      	ldr	r3, [pc, #204]	; (804b524 <UART_SetConfig+0x394>)
 804b458:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 804b45c:	fbb0 f0f3 	udiv	r0, r0, r3
 804b460:	6862      	ldr	r2, [r4, #4]
 804b462:	0853      	lsrs	r3, r2, #1
 804b464:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 804b468:	fbb0 f0f2 	udiv	r0, r0, r2
 804b46c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804b46e:	f1a0 0210 	sub.w	r2, r0, #16
 804b472:	f64f 73ef 	movw	r3, #65519	; 0xffef
 804b476:	429a      	cmp	r2, r3
 804b478:	d84a      	bhi.n	804b510 <UART_SetConfig+0x380>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 804b47a:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 804b47e:	f3c0 0042 	ubfx	r0, r0, #1, #3
 804b482:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 804b484:	6823      	ldr	r3, [r4, #0]
 804b486:	60d8      	str	r0, [r3, #12]
 804b488:	2000      	movs	r0, #0
 804b48a:	e020      	b.n	804b4ce <UART_SetConfig+0x33e>
        pclk = HAL_RCC_GetPCLK2Freq();
 804b48c:	f7fd fc36 	bl	8048cfc <HAL_RCC_GetPCLK2Freq>
        break;
 804b490:	e7de      	b.n	804b450 <UART_SetConfig+0x2c0>
        pclk = HAL_RCC_GetSysClockFreq();
 804b492:	f7fd fba7 	bl	8048be4 <HAL_RCC_GetSysClockFreq>
        break;
 804b496:	e7db      	b.n	804b450 <UART_SetConfig+0x2c0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804b498:	4821      	ldr	r0, [pc, #132]	; (804b520 <UART_SetConfig+0x390>)
 804b49a:	e003      	b.n	804b4a4 <UART_SetConfig+0x314>
        pclk = HAL_RCC_GetPCLK1Freq();
 804b49c:	f7fd fc1e 	bl	8048cdc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 804b4a0:	2800      	cmp	r0, #0
 804b4a2:	d039      	beq.n	804b518 <UART_SetConfig+0x388>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804b4a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 804b4a6:	4b1f      	ldr	r3, [pc, #124]	; (804b524 <UART_SetConfig+0x394>)
 804b4a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 804b4ac:	fbb0 f0f3 	udiv	r0, r0, r3
 804b4b0:	6863      	ldr	r3, [r4, #4]
 804b4b2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 804b4b6:	fbb0 f0f3 	udiv	r0, r0, r3
 804b4ba:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804b4bc:	f1a0 0210 	sub.w	r2, r0, #16
 804b4c0:	f64f 73ef 	movw	r3, #65519	; 0xffef
 804b4c4:	429a      	cmp	r2, r3
 804b4c6:	d829      	bhi.n	804b51c <UART_SetConfig+0x38c>
        huart->Instance->BRR = usartdiv;
 804b4c8:	6823      	ldr	r3, [r4, #0]
 804b4ca:	60d8      	str	r0, [r3, #12]
 804b4cc:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 804b4ce:	2301      	movs	r3, #1
 804b4d0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 804b4d4:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 804b4d8:	2300      	movs	r3, #0
 804b4da:	6723      	str	r3, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 804b4dc:	6763      	str	r3, [r4, #116]	; 0x74
}
 804b4de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 804b4e2:	f7fd fc0b 	bl	8048cfc <HAL_RCC_GetPCLK2Freq>
        break;
 804b4e6:	e7db      	b.n	804b4a0 <UART_SetConfig+0x310>
        pclk = HAL_RCC_GetSysClockFreq();
 804b4e8:	f7fd fb7c 	bl	8048be4 <HAL_RCC_GetSysClockFreq>
        break;
 804b4ec:	e7d8      	b.n	804b4a0 <UART_SetConfig+0x310>
        pclk = (uint32_t) LSE_VALUE;
 804b4ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 804b4f2:	e7d7      	b.n	804b4a4 <UART_SetConfig+0x314>
  if (UART_INSTANCE_LOWPOWER(huart))
 804b4f4:	2001      	movs	r0, #1
 804b4f6:	e7ea      	b.n	804b4ce <UART_SetConfig+0x33e>
 804b4f8:	2000      	movs	r0, #0
 804b4fa:	e7e8      	b.n	804b4ce <UART_SetConfig+0x33e>
        ret = HAL_ERROR;
 804b4fc:	2001      	movs	r0, #1
 804b4fe:	e7e6      	b.n	804b4ce <UART_SetConfig+0x33e>
 804b500:	2001      	movs	r0, #1
 804b502:	e7e4      	b.n	804b4ce <UART_SetConfig+0x33e>
          ret = HAL_ERROR;
 804b504:	2001      	movs	r0, #1
 804b506:	e7e2      	b.n	804b4ce <UART_SetConfig+0x33e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804b508:	2001      	movs	r0, #1
 804b50a:	e7e0      	b.n	804b4ce <UART_SetConfig+0x33e>
 804b50c:	2000      	movs	r0, #0
 804b50e:	e7de      	b.n	804b4ce <UART_SetConfig+0x33e>
        ret = HAL_ERROR;
 804b510:	2001      	movs	r0, #1
 804b512:	e7dc      	b.n	804b4ce <UART_SetConfig+0x33e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804b514:	2001      	movs	r0, #1
 804b516:	e7da      	b.n	804b4ce <UART_SetConfig+0x33e>
 804b518:	2000      	movs	r0, #0
 804b51a:	e7d8      	b.n	804b4ce <UART_SetConfig+0x33e>
        ret = HAL_ERROR;
 804b51c:	2001      	movs	r0, #1
 804b51e:	e7d6      	b.n	804b4ce <UART_SetConfig+0x33e>
 804b520:	00f42400 	.word	0x00f42400
 804b524:	08059e1c 	.word	0x08059e1c

0804b528 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 804b528:	6a83      	ldr	r3, [r0, #40]	; 0x28
 804b52a:	f013 0f01 	tst.w	r3, #1
 804b52e:	d006      	beq.n	804b53e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 804b530:	6802      	ldr	r2, [r0, #0]
 804b532:	6853      	ldr	r3, [r2, #4]
 804b534:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 804b538:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 804b53a:	430b      	orrs	r3, r1
 804b53c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 804b53e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 804b540:	f013 0f02 	tst.w	r3, #2
 804b544:	d006      	beq.n	804b554 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 804b546:	6802      	ldr	r2, [r0, #0]
 804b548:	6853      	ldr	r3, [r2, #4]
 804b54a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804b54e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 804b550:	430b      	orrs	r3, r1
 804b552:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 804b554:	6a83      	ldr	r3, [r0, #40]	; 0x28
 804b556:	f013 0f04 	tst.w	r3, #4
 804b55a:	d006      	beq.n	804b56a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 804b55c:	6802      	ldr	r2, [r0, #0]
 804b55e:	6853      	ldr	r3, [r2, #4]
 804b560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804b564:	6b41      	ldr	r1, [r0, #52]	; 0x34
 804b566:	430b      	orrs	r3, r1
 804b568:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 804b56a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 804b56c:	f013 0f08 	tst.w	r3, #8
 804b570:	d006      	beq.n	804b580 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 804b572:	6802      	ldr	r2, [r0, #0]
 804b574:	6853      	ldr	r3, [r2, #4]
 804b576:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 804b57a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 804b57c:	430b      	orrs	r3, r1
 804b57e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 804b580:	6a83      	ldr	r3, [r0, #40]	; 0x28
 804b582:	f013 0f10 	tst.w	r3, #16
 804b586:	d006      	beq.n	804b596 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 804b588:	6802      	ldr	r2, [r0, #0]
 804b58a:	6893      	ldr	r3, [r2, #8]
 804b58c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804b590:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 804b592:	430b      	orrs	r3, r1
 804b594:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 804b596:	6a83      	ldr	r3, [r0, #40]	; 0x28
 804b598:	f013 0f20 	tst.w	r3, #32
 804b59c:	d006      	beq.n	804b5ac <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 804b59e:	6802      	ldr	r2, [r0, #0]
 804b5a0:	6893      	ldr	r3, [r2, #8]
 804b5a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 804b5a6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 804b5a8:	430b      	orrs	r3, r1
 804b5aa:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 804b5ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 804b5ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 804b5b2:	d00a      	beq.n	804b5ca <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 804b5b4:	6802      	ldr	r2, [r0, #0]
 804b5b6:	6853      	ldr	r3, [r2, #4]
 804b5b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 804b5bc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 804b5be:	430b      	orrs	r3, r1
 804b5c0:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 804b5c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 804b5c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804b5c8:	d00b      	beq.n	804b5e2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804b5ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 804b5cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 804b5d0:	d006      	beq.n	804b5e0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 804b5d2:	6802      	ldr	r2, [r0, #0]
 804b5d4:	6853      	ldr	r3, [r2, #4]
 804b5d6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 804b5da:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 804b5dc:	430b      	orrs	r3, r1
 804b5de:	6053      	str	r3, [r2, #4]
}
 804b5e0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 804b5e2:	6802      	ldr	r2, [r0, #0]
 804b5e4:	6853      	ldr	r3, [r2, #4]
 804b5e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 804b5ea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 804b5ec:	430b      	orrs	r3, r1
 804b5ee:	6053      	str	r3, [r2, #4]
 804b5f0:	e7eb      	b.n	804b5ca <UART_AdvFeatureConfig+0xa2>

0804b5f2 <UART_WaitOnFlagUntilTimeout>:
{
 804b5f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804b5f6:	4605      	mov	r5, r0
 804b5f8:	460f      	mov	r7, r1
 804b5fa:	4616      	mov	r6, r2
 804b5fc:	4699      	mov	r9, r3
 804b5fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804b602:	682c      	ldr	r4, [r5, #0]
 804b604:	69e4      	ldr	r4, [r4, #28]
 804b606:	ea37 0304 	bics.w	r3, r7, r4
 804b60a:	bf0c      	ite	eq
 804b60c:	2401      	moveq	r4, #1
 804b60e:	2400      	movne	r4, #0
 804b610:	42b4      	cmp	r4, r6
 804b612:	d141      	bne.n	804b698 <UART_WaitOnFlagUntilTimeout+0xa6>
    if (Timeout != HAL_MAX_DELAY)
 804b614:	f1b8 3fff 	cmp.w	r8, #4294967295
 804b618:	d0f3      	beq.n	804b602 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804b61a:	f7fa fdbf 	bl	804619c <HAL_GetTick>
 804b61e:	eba0 0009 	sub.w	r0, r0, r9
 804b622:	4540      	cmp	r0, r8
 804b624:	d824      	bhi.n	804b670 <UART_WaitOnFlagUntilTimeout+0x7e>
 804b626:	f1b8 0f00 	cmp.w	r8, #0
 804b62a:	d021      	beq.n	804b670 <UART_WaitOnFlagUntilTimeout+0x7e>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 804b62c:	682b      	ldr	r3, [r5, #0]
 804b62e:	681a      	ldr	r2, [r3, #0]
 804b630:	f012 0f04 	tst.w	r2, #4
 804b634:	d0e5      	beq.n	804b602 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 804b636:	69da      	ldr	r2, [r3, #28]
 804b638:	f412 6f00 	tst.w	r2, #2048	; 0x800
 804b63c:	d0e1      	beq.n	804b602 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 804b63e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804b642:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 804b644:	682a      	ldr	r2, [r5, #0]
 804b646:	6813      	ldr	r3, [r2, #0]
 804b648:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 804b64c:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804b64e:	682a      	ldr	r2, [r5, #0]
 804b650:	6893      	ldr	r3, [r2, #8]
 804b652:	f023 0301 	bic.w	r3, r3, #1
 804b656:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 804b658:	2320      	movs	r3, #32
 804b65a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 804b65e:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 804b662:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          __HAL_UNLOCK(huart);
 804b666:	2300      	movs	r3, #0
 804b668:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
          return HAL_TIMEOUT;
 804b66c:	2003      	movs	r0, #3
 804b66e:	e014      	b.n	804b69a <UART_WaitOnFlagUntilTimeout+0xa8>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 804b670:	682a      	ldr	r2, [r5, #0]
 804b672:	6813      	ldr	r3, [r2, #0]
 804b674:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 804b678:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804b67a:	682a      	ldr	r2, [r5, #0]
 804b67c:	6893      	ldr	r3, [r2, #8]
 804b67e:	f023 0301 	bic.w	r3, r3, #1
 804b682:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 804b684:	2320      	movs	r3, #32
 804b686:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 804b68a:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        __HAL_UNLOCK(huart);
 804b68e:	2300      	movs	r3, #0
 804b690:	f885 3080 	strb.w	r3, [r5, #128]	; 0x80
        return HAL_TIMEOUT;
 804b694:	2003      	movs	r0, #3
 804b696:	e000      	b.n	804b69a <UART_WaitOnFlagUntilTimeout+0xa8>
  return HAL_OK;
 804b698:	2000      	movs	r0, #0
}
 804b69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0804b69e <HAL_UART_Transmit>:
{
 804b69e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804b6a2:	b082      	sub	sp, #8
 804b6a4:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 804b6a6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 804b6aa:	2b20      	cmp	r3, #32
 804b6ac:	d158      	bne.n	804b760 <HAL_UART_Transmit+0xc2>
 804b6ae:	4604      	mov	r4, r0
 804b6b0:	460d      	mov	r5, r1
 804b6b2:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 804b6b4:	2900      	cmp	r1, #0
 804b6b6:	d057      	beq.n	804b768 <HAL_UART_Transmit+0xca>
 804b6b8:	2a00      	cmp	r2, #0
 804b6ba:	d057      	beq.n	804b76c <HAL_UART_Transmit+0xce>
    __HAL_LOCK(huart);
 804b6bc:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 804b6c0:	2b01      	cmp	r3, #1
 804b6c2:	d055      	beq.n	804b770 <HAL_UART_Transmit+0xd2>
 804b6c4:	2301      	movs	r3, #1
 804b6c6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 804b6ca:	2300      	movs	r3, #0
 804b6cc:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804b6d0:	2321      	movs	r3, #33	; 0x21
 804b6d2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    tickstart = HAL_GetTick();
 804b6d6:	f7fa fd61 	bl	804619c <HAL_GetTick>
 804b6da:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 804b6dc:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 804b6e0:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 804b6e4:	68a3      	ldr	r3, [r4, #8]
 804b6e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804b6ea:	d005      	beq.n	804b6f8 <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 804b6ec:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 804b6f0:	2300      	movs	r3, #0
 804b6f2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    while (huart->TxXferCount > 0U)
 804b6f6:	e014      	b.n	804b722 <HAL_UART_Transmit+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 804b6f8:	6923      	ldr	r3, [r4, #16]
 804b6fa:	b113      	cbz	r3, 804b702 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 804b6fc:	f04f 0800 	mov.w	r8, #0
 804b700:	e7f6      	b.n	804b6f0 <HAL_UART_Transmit+0x52>
      pdata16bits = (uint16_t *) pData;
 804b702:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 804b704:	2500      	movs	r5, #0
 804b706:	e7f3      	b.n	804b6f0 <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 804b708:	f838 3b02 	ldrh.w	r3, [r8], #2
 804b70c:	6822      	ldr	r2, [r4, #0]
 804b70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804b712:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 804b714:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 804b718:	b292      	uxth	r2, r2
 804b71a:	3a01      	subs	r2, #1
 804b71c:	b292      	uxth	r2, r2
 804b71e:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 804b722:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 804b726:	b29b      	uxth	r3, r3
 804b728:	b173      	cbz	r3, 804b748 <HAL_UART_Transmit+0xaa>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 804b72a:	9600      	str	r6, [sp, #0]
 804b72c:	463b      	mov	r3, r7
 804b72e:	2200      	movs	r2, #0
 804b730:	2180      	movs	r1, #128	; 0x80
 804b732:	4620      	mov	r0, r4
 804b734:	f7ff ff5d 	bl	804b5f2 <UART_WaitOnFlagUntilTimeout>
 804b738:	b9e0      	cbnz	r0, 804b774 <HAL_UART_Transmit+0xd6>
      if (pdata8bits == NULL)
 804b73a:	2d00      	cmp	r5, #0
 804b73c:	d0e4      	beq.n	804b708 <HAL_UART_Transmit+0x6a>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 804b73e:	f815 2b01 	ldrb.w	r2, [r5], #1
 804b742:	6823      	ldr	r3, [r4, #0]
 804b744:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 804b746:	e7e5      	b.n	804b714 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 804b748:	9600      	str	r6, [sp, #0]
 804b74a:	463b      	mov	r3, r7
 804b74c:	2200      	movs	r2, #0
 804b74e:	2140      	movs	r1, #64	; 0x40
 804b750:	4620      	mov	r0, r4
 804b752:	f7ff ff4e 	bl	804b5f2 <UART_WaitOnFlagUntilTimeout>
 804b756:	b978      	cbnz	r0, 804b778 <HAL_UART_Transmit+0xda>
    huart->gState = HAL_UART_STATE_READY;
 804b758:	2320      	movs	r3, #32
 804b75a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    return HAL_OK;
 804b75e:	e000      	b.n	804b762 <HAL_UART_Transmit+0xc4>
    return HAL_BUSY;
 804b760:	2002      	movs	r0, #2
}
 804b762:	b002      	add	sp, #8
 804b764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 804b768:	2001      	movs	r0, #1
 804b76a:	e7fa      	b.n	804b762 <HAL_UART_Transmit+0xc4>
 804b76c:	2001      	movs	r0, #1
 804b76e:	e7f8      	b.n	804b762 <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 804b770:	2002      	movs	r0, #2
 804b772:	e7f6      	b.n	804b762 <HAL_UART_Transmit+0xc4>
        return HAL_TIMEOUT;
 804b774:	2003      	movs	r0, #3
 804b776:	e7f4      	b.n	804b762 <HAL_UART_Transmit+0xc4>
      return HAL_TIMEOUT;
 804b778:	2003      	movs	r0, #3
 804b77a:	e7f2      	b.n	804b762 <HAL_UART_Transmit+0xc4>

0804b77c <UART_CheckIdleState>:
{
 804b77c:	b530      	push	{r4, r5, lr}
 804b77e:	b083      	sub	sp, #12
 804b780:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804b782:	2300      	movs	r3, #0
 804b784:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  tickstart = HAL_GetTick();
 804b788:	f7fa fd08 	bl	804619c <HAL_GetTick>
 804b78c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 804b78e:	6823      	ldr	r3, [r4, #0]
 804b790:	681b      	ldr	r3, [r3, #0]
 804b792:	f013 0f08 	tst.w	r3, #8
 804b796:	d10f      	bne.n	804b7b8 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 804b798:	6823      	ldr	r3, [r4, #0]
 804b79a:	681b      	ldr	r3, [r3, #0]
 804b79c:	f013 0f04 	tst.w	r3, #4
 804b7a0:	d118      	bne.n	804b7d4 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 804b7a2:	2320      	movs	r3, #32
 804b7a4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 804b7a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804b7ac:	2000      	movs	r0, #0
 804b7ae:	66e0      	str	r0, [r4, #108]	; 0x6c
  __HAL_UNLOCK(huart);
 804b7b0:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 804b7b4:	b003      	add	sp, #12
 804b7b6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 804b7b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 804b7bc:	9300      	str	r3, [sp, #0]
 804b7be:	4603      	mov	r3, r0
 804b7c0:	2200      	movs	r2, #0
 804b7c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 804b7c6:	4620      	mov	r0, r4
 804b7c8:	f7ff ff13 	bl	804b5f2 <UART_WaitOnFlagUntilTimeout>
 804b7cc:	2800      	cmp	r0, #0
 804b7ce:	d0e3      	beq.n	804b798 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 804b7d0:	2003      	movs	r0, #3
 804b7d2:	e7ef      	b.n	804b7b4 <UART_CheckIdleState+0x38>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 804b7d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 804b7d8:	9300      	str	r3, [sp, #0]
 804b7da:	462b      	mov	r3, r5
 804b7dc:	2200      	movs	r2, #0
 804b7de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 804b7e2:	4620      	mov	r0, r4
 804b7e4:	f7ff ff05 	bl	804b5f2 <UART_WaitOnFlagUntilTimeout>
 804b7e8:	2800      	cmp	r0, #0
 804b7ea:	d0da      	beq.n	804b7a2 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 804b7ec:	2003      	movs	r0, #3
 804b7ee:	e7e1      	b.n	804b7b4 <UART_CheckIdleState+0x38>

0804b7f0 <HAL_UART_Init>:
  if (huart == NULL)
 804b7f0:	b378      	cbz	r0, 804b852 <HAL_UART_Init+0x62>
{
 804b7f2:	b510      	push	{r4, lr}
 804b7f4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 804b7f6:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 804b7fa:	b30b      	cbz	r3, 804b840 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 804b7fc:	2324      	movs	r3, #36	; 0x24
 804b7fe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 804b802:	6822      	ldr	r2, [r4, #0]
 804b804:	6813      	ldr	r3, [r2, #0]
 804b806:	f023 0301 	bic.w	r3, r3, #1
 804b80a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 804b80c:	4620      	mov	r0, r4
 804b80e:	f7ff fcbf 	bl	804b190 <UART_SetConfig>
 804b812:	2801      	cmp	r0, #1
 804b814:	d013      	beq.n	804b83e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 804b816:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 804b818:	b9bb      	cbnz	r3, 804b84a <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 804b81a:	6822      	ldr	r2, [r4, #0]
 804b81c:	6853      	ldr	r3, [r2, #4]
 804b81e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 804b822:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 804b824:	6822      	ldr	r2, [r4, #0]
 804b826:	6893      	ldr	r3, [r2, #8]
 804b828:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 804b82c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 804b82e:	6822      	ldr	r2, [r4, #0]
 804b830:	6813      	ldr	r3, [r2, #0]
 804b832:	f043 0301 	orr.w	r3, r3, #1
 804b836:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 804b838:	4620      	mov	r0, r4
 804b83a:	f7ff ff9f 	bl	804b77c <UART_CheckIdleState>
}
 804b83e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 804b840:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 804b844:	f7f7 fd7c 	bl	8043340 <HAL_UART_MspInit>
 804b848:	e7d8      	b.n	804b7fc <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 804b84a:	4620      	mov	r0, r4
 804b84c:	f7ff fe6c 	bl	804b528 <UART_AdvFeatureConfig>
 804b850:	e7e3      	b.n	804b81a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 804b852:	2001      	movs	r0, #1
}
 804b854:	4770      	bx	lr
	...

0804b858 <UART_Start_Receive_DMA>:
{
 804b858:	b510      	push	{r4, lr}
 804b85a:	4604      	mov	r4, r0
 804b85c:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 804b85e:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 804b860:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804b864:	2200      	movs	r2, #0
 804b866:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 804b86a:	2222      	movs	r2, #34	; 0x22
 804b86c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  if (huart->hdmarx != NULL)
 804b870:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 804b872:	b18a      	cbz	r2, 804b898 <UART_Start_Receive_DMA+0x40>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 804b874:	4917      	ldr	r1, [pc, #92]	; (804b8d4 <UART_Start_Receive_DMA+0x7c>)
 804b876:	62d1      	str	r1, [r2, #44]	; 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 804b878:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 804b87a:	4917      	ldr	r1, [pc, #92]	; (804b8d8 <UART_Start_Receive_DMA+0x80>)
 804b87c:	6311      	str	r1, [r2, #48]	; 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 804b87e:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 804b880:	4916      	ldr	r1, [pc, #88]	; (804b8dc <UART_Start_Receive_DMA+0x84>)
 804b882:	63d1      	str	r1, [r2, #60]	; 0x3c
    huart->hdmarx->XferAbortCallback = NULL;
 804b884:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 804b886:	2100      	movs	r1, #0
 804b888:	6411      	str	r1, [r2, #64]	; 0x40
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 804b88a:	6801      	ldr	r1, [r0, #0]
 804b88c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 804b88e:	3124      	adds	r1, #36	; 0x24
 804b890:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 804b892:	f7fb fe47 	bl	8047524 <HAL_DMA_Start_IT>
 804b896:	b990      	cbnz	r0, 804b8be <UART_Start_Receive_DMA+0x66>
  __HAL_UNLOCK(huart);
 804b898:	2000      	movs	r0, #0
 804b89a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 804b89e:	6822      	ldr	r2, [r4, #0]
 804b8a0:	6813      	ldr	r3, [r2, #0]
 804b8a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804b8a6:	6013      	str	r3, [r2, #0]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804b8a8:	6822      	ldr	r2, [r4, #0]
 804b8aa:	6893      	ldr	r3, [r2, #8]
 804b8ac:	f043 0301 	orr.w	r3, r3, #1
 804b8b0:	6093      	str	r3, [r2, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804b8b2:	6822      	ldr	r2, [r4, #0]
 804b8b4:	6893      	ldr	r3, [r2, #8]
 804b8b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804b8ba:	6093      	str	r3, [r2, #8]
}
 804b8bc:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 804b8be:	2310      	movs	r3, #16
 804b8c0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      __HAL_UNLOCK(huart);
 804b8c4:	2300      	movs	r3, #0
 804b8c6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
      huart->gState = HAL_UART_STATE_READY;
 804b8ca:	2320      	movs	r3, #32
 804b8cc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      return HAL_ERROR;
 804b8d0:	2001      	movs	r0, #1
 804b8d2:	e7f3      	b.n	804b8bc <UART_Start_Receive_DMA+0x64>
 804b8d4:	0804b12d 	.word	0x0804b12d
 804b8d8:	0804b111 	.word	0x0804b111
 804b8dc:	0804adc9 	.word	0x0804adc9

0804b8e0 <HAL_UART_Receive_DMA>:
{
 804b8e0:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 804b8e2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 804b8e6:	2b20      	cmp	r3, #32
 804b8e8:	d10d      	bne.n	804b906 <HAL_UART_Receive_DMA+0x26>
    if ((pData == NULL) || (Size == 0U))
 804b8ea:	b171      	cbz	r1, 804b90a <HAL_UART_Receive_DMA+0x2a>
 804b8ec:	b17a      	cbz	r2, 804b90e <HAL_UART_Receive_DMA+0x2e>
    __HAL_LOCK(huart);
 804b8ee:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 804b8f2:	2b01      	cmp	r3, #1
 804b8f4:	d00d      	beq.n	804b912 <HAL_UART_Receive_DMA+0x32>
 804b8f6:	2301      	movs	r3, #1
 804b8f8:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804b8fc:	2300      	movs	r3, #0
 804b8fe:	66c3      	str	r3, [r0, #108]	; 0x6c
    return(UART_Start_Receive_DMA(huart, pData, Size));
 804b900:	f7ff ffaa 	bl	804b858 <UART_Start_Receive_DMA>
 804b904:	e000      	b.n	804b908 <HAL_UART_Receive_DMA+0x28>
    return HAL_BUSY;
 804b906:	2002      	movs	r0, #2
}
 804b908:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 804b90a:	2001      	movs	r0, #1
 804b90c:	e7fc      	b.n	804b908 <HAL_UART_Receive_DMA+0x28>
 804b90e:	2001      	movs	r0, #1
 804b910:	e7fa      	b.n	804b908 <HAL_UART_Receive_DMA+0x28>
    __HAL_LOCK(huart);
 804b912:	2002      	movs	r0, #2
 804b914:	e7f8      	b.n	804b908 <HAL_UART_Receive_DMA+0x28>
	...

0804b918 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 804b918:	b084      	sub	sp, #16
 804b91a:	4603      	mov	r3, r0
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 804b91c:	4a18      	ldr	r2, [pc, #96]	; (804b980 <UARTEx_SetNbDataToProcess+0x68>)
 804b91e:	e892 0003 	ldmia.w	r2, {r0, r1}
 804b922:	aa04      	add	r2, sp, #16
 804b924:	e902 0003 	stmdb	r2, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 804b928:	4916      	ldr	r1, [pc, #88]	; (804b984 <UARTEx_SetNbDataToProcess+0x6c>)
 804b92a:	466a      	mov	r2, sp
 804b92c:	c903      	ldmia	r1, {r0, r1}
 804b92e:	e882 0003 	stmia.w	r2, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 804b932:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 804b934:	b932      	cbnz	r2, 804b944 <UARTEx_SetNbDataToProcess+0x2c>
  {
    huart->NbTxDataToProcess = 1U;
 804b936:	2201      	movs	r2, #1
 804b938:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 804b93c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 804b940:	b004      	add	sp, #16
 804b942:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 804b944:	6819      	ldr	r1, [r3, #0]
 804b946:	688a      	ldr	r2, [r1, #8]
 804b948:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 804b94c:	6888      	ldr	r0, [r1, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 804b94e:	a904      	add	r1, sp, #16
 804b950:	eb01 7050 	add.w	r0, r1, r0, lsr #29
 804b954:	f810 1c08 	ldrb.w	r1, [r0, #-8]
 804b958:	00c9      	lsls	r1, r1, #3
 804b95a:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 804b95e:	fb91 f1f0 	sdiv	r1, r1, r0
 804b962:	f8a3 106a 	strh.w	r1, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 804b966:	a904      	add	r1, sp, #16
 804b968:	440a      	add	r2, r1
 804b96a:	f812 1c08 	ldrb.w	r1, [r2, #-8]
 804b96e:	00c9      	lsls	r1, r1, #3
 804b970:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 804b974:	fb91 f2f2 	sdiv	r2, r1, r2
 804b978:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 804b97c:	e7e0      	b.n	804b940 <UARTEx_SetNbDataToProcess+0x28>
 804b97e:	bf00      	nop
 804b980:	08059b60 	.word	0x08059b60
 804b984:	08059e34 	.word	0x08059e34

0804b988 <HAL_UARTEx_WakeupCallback>:
}
 804b988:	4770      	bx	lr

0804b98a <HAL_UARTEx_RxFifoFullCallback>:
}
 804b98a:	4770      	bx	lr

0804b98c <HAL_UARTEx_TxFifoEmptyCallback>:
}
 804b98c:	4770      	bx	lr

0804b98e <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 804b98e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 804b992:	2b01      	cmp	r3, #1
 804b994:	d018      	beq.n	804b9c8 <HAL_UARTEx_DisableFifoMode+0x3a>
 804b996:	2301      	movs	r3, #1
 804b998:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 804b99c:	2324      	movs	r3, #36	; 0x24
 804b99e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804b9a2:	6803      	ldr	r3, [r0, #0]
 804b9a4:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 804b9a6:	6819      	ldr	r1, [r3, #0]
 804b9a8:	f021 0101 	bic.w	r1, r1, #1
 804b9ac:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 804b9ae:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 804b9b2:	2300      	movs	r3, #0
 804b9b4:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804b9b6:	6801      	ldr	r1, [r0, #0]
 804b9b8:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 804b9ba:	2220      	movs	r2, #32
 804b9bc:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  __HAL_UNLOCK(huart);
 804b9c0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 804b9c4:	4618      	mov	r0, r3
 804b9c6:	4770      	bx	lr
  __HAL_LOCK(huart);
 804b9c8:	2002      	movs	r0, #2
}
 804b9ca:	4770      	bx	lr

0804b9cc <HAL_UARTEx_SetTxFifoThreshold>:
{
 804b9cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 804b9ce:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 804b9d2:	2b01      	cmp	r3, #1
 804b9d4:	d01d      	beq.n	804ba12 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 804b9d6:	4604      	mov	r4, r0
 804b9d8:	2301      	movs	r3, #1
 804b9da:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 804b9de:	2324      	movs	r3, #36	; 0x24
 804b9e0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804b9e4:	6803      	ldr	r3, [r0, #0]
 804b9e6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 804b9e8:	681a      	ldr	r2, [r3, #0]
 804b9ea:	f022 0201 	bic.w	r2, r2, #1
 804b9ee:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 804b9f0:	6802      	ldr	r2, [r0, #0]
 804b9f2:	6893      	ldr	r3, [r2, #8]
 804b9f4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 804b9f8:	4319      	orrs	r1, r3
 804b9fa:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 804b9fc:	f7ff ff8c 	bl	804b918 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804ba00:	6823      	ldr	r3, [r4, #0]
 804ba02:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 804ba04:	2320      	movs	r3, #32
 804ba06:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 804ba0a:	2000      	movs	r0, #0
 804ba0c:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 804ba10:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 804ba12:	2002      	movs	r0, #2
 804ba14:	e7fc      	b.n	804ba10 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0804ba16 <HAL_UARTEx_SetRxFifoThreshold>:
{
 804ba16:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 804ba18:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 804ba1c:	2b01      	cmp	r3, #1
 804ba1e:	d01d      	beq.n	804ba5c <HAL_UARTEx_SetRxFifoThreshold+0x46>
 804ba20:	4604      	mov	r4, r0
 804ba22:	2301      	movs	r3, #1
 804ba24:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 804ba28:	2324      	movs	r3, #36	; 0x24
 804ba2a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804ba2e:	6803      	ldr	r3, [r0, #0]
 804ba30:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 804ba32:	681a      	ldr	r2, [r3, #0]
 804ba34:	f022 0201 	bic.w	r2, r2, #1
 804ba38:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 804ba3a:	6802      	ldr	r2, [r0, #0]
 804ba3c:	6893      	ldr	r3, [r2, #8]
 804ba3e:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 804ba42:	4319      	orrs	r1, r3
 804ba44:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 804ba46:	f7ff ff67 	bl	804b918 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804ba4a:	6823      	ldr	r3, [r4, #0]
 804ba4c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 804ba4e:	2320      	movs	r3, #32
 804ba50:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 804ba54:	2000      	movs	r0, #0
 804ba56:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
}
 804ba5a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 804ba5c:	2002      	movs	r0, #2
 804ba5e:	e7fc      	b.n	804ba5a <HAL_UARTEx_SetRxFifoThreshold+0x44>

0804ba60 <CayenneLppReset>:
    CayenneLppCursor = 0;
}

void CayenneLppReset( void )
{
    CayenneLppCursor = 0;
 804ba60:	4b01      	ldr	r3, [pc, #4]	; (804ba68 <CayenneLppReset+0x8>)
 804ba62:	2200      	movs	r2, #0
 804ba64:	701a      	strb	r2, [r3, #0]
}
 804ba66:	4770      	bx	lr
 804ba68:	20019466 	.word	0x20019466

0804ba6c <CayenneLppGetSize>:

uint8_t CayenneLppGetSize( void )
{
    return CayenneLppCursor;
}
 804ba6c:	4b01      	ldr	r3, [pc, #4]	; (804ba74 <CayenneLppGetSize+0x8>)
 804ba6e:	7818      	ldrb	r0, [r3, #0]
 804ba70:	4770      	bx	lr
 804ba72:	bf00      	nop
 804ba74:	20019466 	.word	0x20019466

0804ba78 <CayenneLppCopy>:
{
    return CayenneLppBuffer;
}

uint8_t CayenneLppCopy( uint8_t* dst )
{
 804ba78:	b510      	push	{r4, lr}
    memcpy1( dst, CayenneLppBuffer, CayenneLppCursor );
 804ba7a:	4c03      	ldr	r4, [pc, #12]	; (804ba88 <CayenneLppCopy+0x10>)
 804ba7c:	7822      	ldrb	r2, [r4, #0]
 804ba7e:	4903      	ldr	r1, [pc, #12]	; (804ba8c <CayenneLppCopy+0x14>)
 804ba80:	f009 fa15 	bl	8054eae <memcpy1>

    return CayenneLppCursor;
}
 804ba84:	7820      	ldrb	r0, [r4, #0]
 804ba86:	bd10      	pop	{r4, pc}
 804ba88:	20019466 	.word	0x20019466
 804ba8c:	20019374 	.word	0x20019374

0804ba90 <CayenneLppAddDigitalInput>:


uint8_t CayenneLppAddDigitalInput( uint8_t channel, uint8_t value )
{
    if( ( CayenneLppCursor + LPP_DIGITAL_INPUT_SIZE ) > CAYENNE_LPP_MAXBUFFER_SIZE )
 804ba90:	4b0b      	ldr	r3, [pc, #44]	; (804bac0 <CayenneLppAddDigitalInput+0x30>)
 804ba92:	781b      	ldrb	r3, [r3, #0]
 804ba94:	2bef      	cmp	r3, #239	; 0xef
 804ba96:	d810      	bhi.n	804baba <CayenneLppAddDigitalInput+0x2a>
{
 804ba98:	b410      	push	{r4}
    {
        return 0;
    }
    CayenneLppBuffer[CayenneLppCursor++] = channel; 
 804ba9a:	1c5a      	adds	r2, r3, #1
 804ba9c:	b2d2      	uxtb	r2, r2
 804ba9e:	4c09      	ldr	r4, [pc, #36]	; (804bac4 <CayenneLppAddDigitalInput+0x34>)
 804baa0:	54e0      	strb	r0, [r4, r3]
    CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_INPUT; 
 804baa2:	1c53      	adds	r3, r2, #1
 804baa4:	b2db      	uxtb	r3, r3
 804baa6:	2000      	movs	r0, #0
 804baa8:	54a0      	strb	r0, [r4, r2]
    CayenneLppBuffer[CayenneLppCursor++] = value; 
 804baaa:	1c58      	adds	r0, r3, #1
 804baac:	b2c0      	uxtb	r0, r0
 804baae:	4a04      	ldr	r2, [pc, #16]	; (804bac0 <CayenneLppAddDigitalInput+0x30>)
 804bab0:	7010      	strb	r0, [r2, #0]
 804bab2:	54e1      	strb	r1, [r4, r3]

    return CayenneLppCursor;
}
 804bab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 804bab8:	4770      	bx	lr
        return 0;
 804baba:	2000      	movs	r0, #0
}
 804babc:	4770      	bx	lr
 804babe:	bf00      	nop
 804bac0:	20019466 	.word	0x20019466
 804bac4:	20019374 	.word	0x20019374

0804bac8 <CayenneLppAddAnalogInput>:
}


uint8_t CayenneLppAddAnalogInput( uint8_t channel, float value )
{
    if( ( CayenneLppCursor + LPP_ANALOG_INPUT_SIZE ) > CAYENNE_LPP_MAXBUFFER_SIZE )
 804bac8:	4b11      	ldr	r3, [pc, #68]	; (804bb10 <CayenneLppAddAnalogInput+0x48>)
 804baca:	781a      	ldrb	r2, [r3, #0]
 804bacc:	2aee      	cmp	r2, #238	; 0xee
 804bace:	d81d      	bhi.n	804bb0c <CayenneLppAddAnalogInput+0x44>
{
 804bad0:	b410      	push	{r4}
    {
        return 0;
    }

    int16_t val = ( int16_t ) ( value * 100 );
 804bad2:	eddf 7a10 	vldr	s15, [pc, #64]	; 804bb14 <CayenneLppAddAnalogInput+0x4c>
 804bad6:	ee20 0a27 	vmul.f32	s0, s0, s15
 804bada:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 804bade:	ee17 3a90 	vmov	r3, s15
    CayenneLppBuffer[CayenneLppCursor++] = channel; 
 804bae2:	1c54      	adds	r4, r2, #1
 804bae4:	b2e4      	uxtb	r4, r4
 804bae6:	490c      	ldr	r1, [pc, #48]	; (804bb18 <CayenneLppAddAnalogInput+0x50>)
 804bae8:	5488      	strb	r0, [r1, r2]
    CayenneLppBuffer[CayenneLppCursor++] = LPP_ANALOG_INPUT; 
 804baea:	1c60      	adds	r0, r4, #1
 804baec:	b2c0      	uxtb	r0, r0
 804baee:	2202      	movs	r2, #2
 804baf0:	550a      	strb	r2, [r1, r4]
    CayenneLppBuffer[CayenneLppCursor++] = val >> 8; 
 804baf2:	1c42      	adds	r2, r0, #1
 804baf4:	b2d2      	uxtb	r2, r2
 804baf6:	f343 2407 	sbfx	r4, r3, #8, #8
 804bafa:	540c      	strb	r4, [r1, r0]
    CayenneLppBuffer[CayenneLppCursor++] = val; 
 804bafc:	1c50      	adds	r0, r2, #1
 804bafe:	b2c0      	uxtb	r0, r0
 804bb00:	4c03      	ldr	r4, [pc, #12]	; (804bb10 <CayenneLppAddAnalogInput+0x48>)
 804bb02:	7020      	strb	r0, [r4, #0]
 804bb04:	548b      	strb	r3, [r1, r2]

    return CayenneLppCursor;
}
 804bb06:	f85d 4b04 	ldr.w	r4, [sp], #4
 804bb0a:	4770      	bx	lr
        return 0;
 804bb0c:	2000      	movs	r0, #0
}
 804bb0e:	4770      	bx	lr
 804bb10:	20019466 	.word	0x20019466
 804bb14:	42c80000 	.word	0x42c80000
 804bb18:	20019374 	.word	0x20019374

0804bb1c <CayenneLppAddGyrometer>:

    return CayenneLppCursor;
}

uint8_t CayenneLppAddGyrometer( uint8_t channel, float x, float y, float z )
{
 804bb1c:	b470      	push	{r4, r5, r6}
    if( ( CayenneLppCursor + LPP_GYROMETER_SIZE ) > CAYENNE_LPP_MAXBUFFER_SIZE )
 804bb1e:	4b1f      	ldr	r3, [pc, #124]	; (804bb9c <CayenneLppAddGyrometer+0x80>)
 804bb20:	781d      	ldrb	r5, [r3, #0]
 804bb22:	2dea      	cmp	r5, #234	; 0xea
 804bb24:	d837      	bhi.n	804bb96 <CayenneLppAddGyrometer+0x7a>
    {
        return 0;
    }
    int16_t vx = ( int16_t ) ( x * 100 );
 804bb26:	eddf 7a1e 	vldr	s15, [pc, #120]	; 804bba0 <CayenneLppAddGyrometer+0x84>
 804bb2a:	ee20 0a27 	vmul.f32	s0, s0, s15
 804bb2e:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 804bb32:	ee17 1a10 	vmov	r1, s14
    int16_t vy = ( int16_t ) ( y * 100 );
 804bb36:	ee60 0aa7 	vmul.f32	s1, s1, s15
 804bb3a:	eebd 7ae0 	vcvt.s32.f32	s14, s1
 804bb3e:	ee17 2a10 	vmov	r2, s14
    int16_t vz = ( int16_t ) ( z * 100 );
 804bb42:	ee21 1a27 	vmul.f32	s2, s2, s15
 804bb46:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 804bb4a:	ee17 3a90 	vmov	r3, s15

    CayenneLppBuffer[CayenneLppCursor++] = channel; 
 804bb4e:	1c6e      	adds	r6, r5, #1
 804bb50:	b2f6      	uxtb	r6, r6
 804bb52:	4c14      	ldr	r4, [pc, #80]	; (804bba4 <CayenneLppAddGyrometer+0x88>)
 804bb54:	5560      	strb	r0, [r4, r5]
    CayenneLppBuffer[CayenneLppCursor++] = LPP_GYROMETER; 
 804bb56:	1c75      	adds	r5, r6, #1
 804bb58:	b2ed      	uxtb	r5, r5
 804bb5a:	2086      	movs	r0, #134	; 0x86
 804bb5c:	55a0      	strb	r0, [r4, r6]
    CayenneLppBuffer[CayenneLppCursor++] = vx >> 8; 
 804bb5e:	1c68      	adds	r0, r5, #1
 804bb60:	b2c0      	uxtb	r0, r0
 804bb62:	f341 2607 	sbfx	r6, r1, #8, #8
 804bb66:	5566      	strb	r6, [r4, r5]
    CayenneLppBuffer[CayenneLppCursor++] = vx; 
 804bb68:	1c45      	adds	r5, r0, #1
 804bb6a:	b2ed      	uxtb	r5, r5
 804bb6c:	5421      	strb	r1, [r4, r0]
    CayenneLppBuffer[CayenneLppCursor++] = vy >> 8; 
 804bb6e:	1c68      	adds	r0, r5, #1
 804bb70:	b2c0      	uxtb	r0, r0
 804bb72:	f342 2107 	sbfx	r1, r2, #8, #8
 804bb76:	5561      	strb	r1, [r4, r5]
    CayenneLppBuffer[CayenneLppCursor++] = vy; 
 804bb78:	1c41      	adds	r1, r0, #1
 804bb7a:	b2c9      	uxtb	r1, r1
 804bb7c:	5422      	strb	r2, [r4, r0]
    CayenneLppBuffer[CayenneLppCursor++] = vz >> 8; 
 804bb7e:	1c4a      	adds	r2, r1, #1
 804bb80:	b2d2      	uxtb	r2, r2
 804bb82:	f343 2007 	sbfx	r0, r3, #8, #8
 804bb86:	5460      	strb	r0, [r4, r1]
    CayenneLppBuffer[CayenneLppCursor++] = vz; 
 804bb88:	1c50      	adds	r0, r2, #1
 804bb8a:	b2c0      	uxtb	r0, r0
 804bb8c:	4903      	ldr	r1, [pc, #12]	; (804bb9c <CayenneLppAddGyrometer+0x80>)
 804bb8e:	7008      	strb	r0, [r1, #0]
 804bb90:	54a3      	strb	r3, [r4, r2]

    return CayenneLppCursor;
}
 804bb92:	bc70      	pop	{r4, r5, r6}
 804bb94:	4770      	bx	lr
        return 0;
 804bb96:	2000      	movs	r0, #0
 804bb98:	e7fb      	b.n	804bb92 <CayenneLppAddGyrometer+0x76>
 804bb9a:	bf00      	nop
 804bb9c:	20019466 	.word	0x20019466
 804bba0:	42c80000 	.word	0x42c80000
 804bba4:	20019374 	.word	0x20019374

0804bba8 <CayenneLppAddGps>:

uint8_t CayenneLppAddGps( uint8_t channel, float latitude, float longitude, float meters )
{
 804bba8:	b470      	push	{r4, r5, r6}
    if( ( CayenneLppCursor + LPP_GPS_SIZE ) > CAYENNE_LPP_MAXBUFFER_SIZE )
 804bbaa:	4b24      	ldr	r3, [pc, #144]	; (804bc3c <CayenneLppAddGps+0x94>)
 804bbac:	781d      	ldrb	r5, [r3, #0]
 804bbae:	2de7      	cmp	r5, #231	; 0xe7
 804bbb0:	d842      	bhi.n	804bc38 <CayenneLppAddGps+0x90>
    {
        return 0;
    }
    int32_t lat = ( int32_t ) ( latitude * 10000 );
 804bbb2:	eddf 7a23 	vldr	s15, [pc, #140]	; 804bc40 <CayenneLppAddGps+0x98>
 804bbb6:	ee20 0a27 	vmul.f32	s0, s0, s15
 804bbba:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 804bbbe:	ee17 4a10 	vmov	r4, s14
    int32_t lon = ( int32_t ) ( longitude * 10000 );
 804bbc2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 804bbc6:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 804bbca:	ee17 1a90 	vmov	r1, s15
    int32_t alt = ( int32_t ) ( meters * 100 );
 804bbce:	eddf 7a1d 	vldr	s15, [pc, #116]	; 804bc44 <CayenneLppAddGps+0x9c>
 804bbd2:	ee21 1a27 	vmul.f32	s2, s2, s15
 804bbd6:	eefd 7ac1 	vcvt.s32.f32	s15, s2
 804bbda:	ee17 2a90 	vmov	r2, s15

    CayenneLppBuffer[CayenneLppCursor++] = channel; 
 804bbde:	1c6e      	adds	r6, r5, #1
 804bbe0:	b2f6      	uxtb	r6, r6
 804bbe2:	4b19      	ldr	r3, [pc, #100]	; (804bc48 <CayenneLppAddGps+0xa0>)
 804bbe4:	5558      	strb	r0, [r3, r5]
    CayenneLppBuffer[CayenneLppCursor++] = LPP_GPS; 
 804bbe6:	1c75      	adds	r5, r6, #1
 804bbe8:	b2ed      	uxtb	r5, r5
 804bbea:	2088      	movs	r0, #136	; 0x88
 804bbec:	5598      	strb	r0, [r3, r6]

    CayenneLppBuffer[CayenneLppCursor++] = lat >> 16; 
 804bbee:	1426      	asrs	r6, r4, #16
 804bbf0:	1c68      	adds	r0, r5, #1
 804bbf2:	b2c0      	uxtb	r0, r0
 804bbf4:	555e      	strb	r6, [r3, r5]
    CayenneLppBuffer[CayenneLppCursor++] = lat >> 8; 
 804bbf6:	1226      	asrs	r6, r4, #8
 804bbf8:	1c45      	adds	r5, r0, #1
 804bbfa:	b2ed      	uxtb	r5, r5
 804bbfc:	541e      	strb	r6, [r3, r0]
    CayenneLppBuffer[CayenneLppCursor++] = lat; 
 804bbfe:	1c68      	adds	r0, r5, #1
 804bc00:	b2c0      	uxtb	r0, r0
 804bc02:	555c      	strb	r4, [r3, r5]
    CayenneLppBuffer[CayenneLppCursor++] = lon >> 16; 
 804bc04:	140d      	asrs	r5, r1, #16
 804bc06:	1c44      	adds	r4, r0, #1
 804bc08:	b2e4      	uxtb	r4, r4
 804bc0a:	541d      	strb	r5, [r3, r0]
    CayenneLppBuffer[CayenneLppCursor++] = lon >> 8; 
 804bc0c:	120d      	asrs	r5, r1, #8
 804bc0e:	1c60      	adds	r0, r4, #1
 804bc10:	b2c0      	uxtb	r0, r0
 804bc12:	551d      	strb	r5, [r3, r4]
    CayenneLppBuffer[CayenneLppCursor++] = lon; 
 804bc14:	1c44      	adds	r4, r0, #1
 804bc16:	b2e4      	uxtb	r4, r4
 804bc18:	5419      	strb	r1, [r3, r0]
    CayenneLppBuffer[CayenneLppCursor++] = alt >> 16; 
 804bc1a:	1411      	asrs	r1, r2, #16
 804bc1c:	1c60      	adds	r0, r4, #1
 804bc1e:	b2c0      	uxtb	r0, r0
 804bc20:	5519      	strb	r1, [r3, r4]
    CayenneLppBuffer[CayenneLppCursor++] = alt >> 8;
 804bc22:	1214      	asrs	r4, r2, #8
 804bc24:	1c41      	adds	r1, r0, #1
 804bc26:	b2c9      	uxtb	r1, r1
 804bc28:	541c      	strb	r4, [r3, r0]
    CayenneLppBuffer[CayenneLppCursor++] = alt;
 804bc2a:	1c48      	adds	r0, r1, #1
 804bc2c:	b2c0      	uxtb	r0, r0
 804bc2e:	4c03      	ldr	r4, [pc, #12]	; (804bc3c <CayenneLppAddGps+0x94>)
 804bc30:	7020      	strb	r0, [r4, #0]
 804bc32:	545a      	strb	r2, [r3, r1]

    return CayenneLppCursor;
}
 804bc34:	bc70      	pop	{r4, r5, r6}
 804bc36:	4770      	bx	lr
        return 0;
 804bc38:	2000      	movs	r0, #0
 804bc3a:	e7fb      	b.n	804bc34 <CayenneLppAddGps+0x8c>
 804bc3c:	20019466 	.word	0x20019466
 804bc40:	461c4000 	.word	0x461c4000
 804bc44:	42c80000 	.word	0x42c80000
 804bc48:	20019374 	.word	0x20019374

0804bc4c <PrintHexBuffer>:
 * 
 * \param buffer Buffer to be printed
 * \param size   Buffer size to be printed
 */
void PrintHexBuffer( uint8_t *buffer, uint8_t size )
{
 804bc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804bc4e:	4607      	mov	r7, r0
 804bc50:	460e      	mov	r6, r1
    uint8_t newline = 0;

    for( uint8_t i = 0; i < size; i++ )
 804bc52:	2400      	movs	r4, #0
    uint8_t newline = 0;
 804bc54:	4625      	mov	r5, r4
    for( uint8_t i = 0; i < size; i++ )
 804bc56:	e006      	b.n	804bc66 <PrintHexBuffer+0x1a>
    {
        if( newline != 0 )
        {
            printf( "\n" );
 804bc58:	200a      	movs	r0, #10
 804bc5a:	f00a f83b 	bl	8055cd4 <putchar>
            newline = 0;
 804bc5e:	2500      	movs	r5, #0
 804bc60:	e005      	b.n	804bc6e <PrintHexBuffer+0x22>
    for( uint8_t i = 0; i < size; i++ )
 804bc62:	3401      	adds	r4, #1
 804bc64:	b2e4      	uxtb	r4, r4
 804bc66:	42b4      	cmp	r4, r6
 804bc68:	d20b      	bcs.n	804bc82 <PrintHexBuffer+0x36>
        if( newline != 0 )
 804bc6a:	2d00      	cmp	r5, #0
 804bc6c:	d1f4      	bne.n	804bc58 <PrintHexBuffer+0xc>
        }

        printf( "%02X ", buffer[i] );
 804bc6e:	5d39      	ldrb	r1, [r7, r4]
 804bc70:	4806      	ldr	r0, [pc, #24]	; (804bc8c <PrintHexBuffer+0x40>)
 804bc72:	f00a f817 	bl	8055ca4 <iprintf>

        if( ( ( i + 1 ) % 16 ) == 0 )
 804bc76:	1c63      	adds	r3, r4, #1
 804bc78:	f013 0f0f 	tst.w	r3, #15
 804bc7c:	d1f1      	bne.n	804bc62 <PrintHexBuffer+0x16>
        {
            newline = 1;
 804bc7e:	2501      	movs	r5, #1
 804bc80:	e7ef      	b.n	804bc62 <PrintHexBuffer+0x16>
        }
    }
    printf( "\n" );
 804bc82:	200a      	movs	r0, #10
 804bc84:	f00a f826 	bl	8055cd4 <putchar>
}
 804bc88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804bc8a:	bf00      	nop
 804bc8c:	0805a144 	.word	0x0805a144

0804bc90 <DisplayNvmDataChange>:

void DisplayNvmDataChange( LmHandlerNvmContextStates_t state, uint16_t size )
{
 804bc90:	b510      	push	{r4, lr}
 804bc92:	460c      	mov	r4, r1
    if( state == LORAMAC_HANDLER_NVM_STORE )
 804bc94:	2801      	cmp	r0, #1
 804bc96:	d007      	beq.n	804bca8 <DisplayNvmDataChange+0x18>
        printf( "\n###### ============ CTXS STORED ============ ######\n" );

    }
    else
    {
        printf( "\n###### =========== CTXS RESTORED =========== ######\n" );
 804bc98:	4805      	ldr	r0, [pc, #20]	; (804bcb0 <DisplayNvmDataChange+0x20>)
 804bc9a:	f00a f89f 	bl	8055ddc <puts>
    }
    printf( "Size        : %i\n\n", size );
 804bc9e:	4621      	mov	r1, r4
 804bca0:	4804      	ldr	r0, [pc, #16]	; (804bcb4 <DisplayNvmDataChange+0x24>)
 804bca2:	f009 ffff 	bl	8055ca4 <iprintf>
}
 804bca6:	bd10      	pop	{r4, pc}
        printf( "\n###### ============ CTXS STORED ============ ######\n" );
 804bca8:	4803      	ldr	r0, [pc, #12]	; (804bcb8 <DisplayNvmDataChange+0x28>)
 804bcaa:	f00a f897 	bl	8055ddc <puts>
 804bcae:	e7f6      	b.n	804bc9e <DisplayNvmDataChange+0xe>
 804bcb0:	0805a184 	.word	0x0805a184
 804bcb4:	0805a1bc 	.word	0x0805a1bc
 804bcb8:	0805a14c 	.word	0x0805a14c

0804bcbc <DisplayNetworkParametersUpdate>:

void DisplayNetworkParametersUpdate( CommissioningParams_t *commissioningParams )
{
 804bcbc:	b538      	push	{r3, r4, r5, lr}
 804bcbe:	4605      	mov	r5, r0
    printf( "DevEui      : %02X", commissioningParams->DevEui[0] );
 804bcc0:	7841      	ldrb	r1, [r0, #1]
 804bcc2:	4819      	ldr	r0, [pc, #100]	; (804bd28 <DisplayNetworkParametersUpdate+0x6c>)
 804bcc4:	f009 ffee 	bl	8055ca4 <iprintf>
    for( int i = 1; i < 8; i++ )
 804bcc8:	2401      	movs	r4, #1
 804bcca:	e005      	b.n	804bcd8 <DisplayNetworkParametersUpdate+0x1c>
    {
        printf( "-%02X", commissioningParams->DevEui[i] );
 804bccc:	192b      	adds	r3, r5, r4
 804bcce:	7859      	ldrb	r1, [r3, #1]
 804bcd0:	4816      	ldr	r0, [pc, #88]	; (804bd2c <DisplayNetworkParametersUpdate+0x70>)
 804bcd2:	f009 ffe7 	bl	8055ca4 <iprintf>
    for( int i = 1; i < 8; i++ )
 804bcd6:	3401      	adds	r4, #1
 804bcd8:	2c07      	cmp	r4, #7
 804bcda:	ddf7      	ble.n	804bccc <DisplayNetworkParametersUpdate+0x10>
    }
    printf( "\n" );
 804bcdc:	200a      	movs	r0, #10
 804bcde:	f009 fff9 	bl	8055cd4 <putchar>
    printf( "JoinEui     : %02X", commissioningParams->JoinEui[0] );
 804bce2:	7a69      	ldrb	r1, [r5, #9]
 804bce4:	4812      	ldr	r0, [pc, #72]	; (804bd30 <DisplayNetworkParametersUpdate+0x74>)
 804bce6:	f009 ffdd 	bl	8055ca4 <iprintf>
    for( int i = 1; i < 8; i++ )
 804bcea:	2401      	movs	r4, #1
 804bcec:	e005      	b.n	804bcfa <DisplayNetworkParametersUpdate+0x3e>
    {
        printf( "-%02X", commissioningParams->JoinEui[i] );
 804bcee:	192b      	adds	r3, r5, r4
 804bcf0:	7a59      	ldrb	r1, [r3, #9]
 804bcf2:	480e      	ldr	r0, [pc, #56]	; (804bd2c <DisplayNetworkParametersUpdate+0x70>)
 804bcf4:	f009 ffd6 	bl	8055ca4 <iprintf>
    for( int i = 1; i < 8; i++ )
 804bcf8:	3401      	adds	r4, #1
 804bcfa:	2c07      	cmp	r4, #7
 804bcfc:	ddf7      	ble.n	804bcee <DisplayNetworkParametersUpdate+0x32>
    }
    printf( "\n" );
 804bcfe:	200a      	movs	r0, #10
 804bd00:	f009 ffe8 	bl	8055cd4 <putchar>
    printf( "Pin         : %02X", commissioningParams->SePin[0] );
 804bd04:	7c69      	ldrb	r1, [r5, #17]
 804bd06:	480b      	ldr	r0, [pc, #44]	; (804bd34 <DisplayNetworkParametersUpdate+0x78>)
 804bd08:	f009 ffcc 	bl	8055ca4 <iprintf>
    for( int i = 1; i < 4; i++ )
 804bd0c:	2401      	movs	r4, #1
 804bd0e:	2c03      	cmp	r4, #3
 804bd10:	dc06      	bgt.n	804bd20 <DisplayNetworkParametersUpdate+0x64>
    {
        printf( "-%02X", commissioningParams->SePin[i] );
 804bd12:	192b      	adds	r3, r5, r4
 804bd14:	7c59      	ldrb	r1, [r3, #17]
 804bd16:	4805      	ldr	r0, [pc, #20]	; (804bd2c <DisplayNetworkParametersUpdate+0x70>)
 804bd18:	f009 ffc4 	bl	8055ca4 <iprintf>
    for( int i = 1; i < 4; i++ )
 804bd1c:	3401      	adds	r4, #1
 804bd1e:	e7f6      	b.n	804bd0e <DisplayNetworkParametersUpdate+0x52>
    }
    printf( "\n\n" );
 804bd20:	4805      	ldr	r0, [pc, #20]	; (804bd38 <DisplayNetworkParametersUpdate+0x7c>)
 804bd22:	f00a f85b 	bl	8055ddc <puts>
}
 804bd26:	bd38      	pop	{r3, r4, r5, pc}
 804bd28:	0805a1d0 	.word	0x0805a1d0
 804bd2c:	0805a1e4 	.word	0x0805a1e4
 804bd30:	0805a1ec 	.word	0x0805a1ec
 804bd34:	0805a200 	.word	0x0805a200
 804bd38:	0805a520 	.word	0x0805a520

0804bd3c <DisplayMacMcpsRequestUpdate>:

void DisplayMacMcpsRequestUpdate( LoRaMacStatus_t status, McpsReq_t *mcpsReq, TimerTime_t nextTxIn )
{
 804bd3c:	b538      	push	{r3, r4, r5, lr}
 804bd3e:	4604      	mov	r4, r0
 804bd40:	4615      	mov	r5, r2
    switch( mcpsReq->Type )
 804bd42:	780b      	ldrb	r3, [r1, #0]
 804bd44:	2b01      	cmp	r3, #1
 804bd46:	d00c      	beq.n	804bd62 <DisplayMacMcpsRequestUpdate+0x26>
 804bd48:	2b03      	cmp	r3, #3
 804bd4a:	d026      	beq.n	804bd9a <DisplayMacMcpsRequestUpdate+0x5e>
 804bd4c:	b1db      	cbz	r3, 804bd86 <DisplayMacMcpsRequestUpdate+0x4a>
            printf( "###### ===================================== ######\n");
            break;
        }
        default:
        {
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
 804bd4e:	481a      	ldr	r0, [pc, #104]	; (804bdb8 <DisplayMacMcpsRequestUpdate+0x7c>)
 804bd50:	f00a f844 	bl	8055ddc <puts>
            printf( "######                MCPS_ERROR             ######\n");
 804bd54:	4819      	ldr	r0, [pc, #100]	; (804bdbc <DisplayMacMcpsRequestUpdate+0x80>)
 804bd56:	f00a f841 	bl	8055ddc <puts>
            printf( "###### ===================================== ######\n");
 804bd5a:	4819      	ldr	r0, [pc, #100]	; (804bdc0 <DisplayMacMcpsRequestUpdate+0x84>)
 804bd5c:	f00a f83e 	bl	8055ddc <puts>
            break;
 804bd60:	e008      	b.n	804bd74 <DisplayMacMcpsRequestUpdate+0x38>
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
 804bd62:	4815      	ldr	r0, [pc, #84]	; (804bdb8 <DisplayMacMcpsRequestUpdate+0x7c>)
 804bd64:	f00a f83a 	bl	8055ddc <puts>
            printf( "######            MCPS_CONFIRMED             ######\n");
 804bd68:	4816      	ldr	r0, [pc, #88]	; (804bdc4 <DisplayMacMcpsRequestUpdate+0x88>)
 804bd6a:	f00a f837 	bl	8055ddc <puts>
            printf( "###### ===================================== ######\n");
 804bd6e:	4814      	ldr	r0, [pc, #80]	; (804bdc0 <DisplayMacMcpsRequestUpdate+0x84>)
 804bd70:	f00a f834 	bl	8055ddc <puts>
        }
    }
    printf( "STATUS      : %s\n", MacStatusStrings[status] );
 804bd74:	4b14      	ldr	r3, [pc, #80]	; (804bdc8 <DisplayMacMcpsRequestUpdate+0x8c>)
 804bd76:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 804bd7a:	4814      	ldr	r0, [pc, #80]	; (804bdcc <DisplayMacMcpsRequestUpdate+0x90>)
 804bd7c:	f009 ff92 	bl	8055ca4 <iprintf>
    if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 804bd80:	2c0b      	cmp	r4, #11
 804bd82:	d014      	beq.n	804bdae <DisplayMacMcpsRequestUpdate+0x72>
    {
        printf( "Next Tx in  : %lu [ms]\n", nextTxIn );
    }
}
 804bd84:	bd38      	pop	{r3, r4, r5, pc}
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
 804bd86:	480c      	ldr	r0, [pc, #48]	; (804bdb8 <DisplayMacMcpsRequestUpdate+0x7c>)
 804bd88:	f00a f828 	bl	8055ddc <puts>
            printf( "######           MCPS_UNCONFIRMED            ######\n");
 804bd8c:	4810      	ldr	r0, [pc, #64]	; (804bdd0 <DisplayMacMcpsRequestUpdate+0x94>)
 804bd8e:	f00a f825 	bl	8055ddc <puts>
            printf( "###### ===================================== ######\n");
 804bd92:	480b      	ldr	r0, [pc, #44]	; (804bdc0 <DisplayMacMcpsRequestUpdate+0x84>)
 804bd94:	f00a f822 	bl	8055ddc <puts>
            break;
 804bd98:	e7ec      	b.n	804bd74 <DisplayMacMcpsRequestUpdate+0x38>
            printf( "\n###### =========== MCPS-Request ============ ######\n" );
 804bd9a:	4807      	ldr	r0, [pc, #28]	; (804bdb8 <DisplayMacMcpsRequestUpdate+0x7c>)
 804bd9c:	f00a f81e 	bl	8055ddc <puts>
            printf( "######           MCPS_PROPRIETARY            ######\n");
 804bda0:	480c      	ldr	r0, [pc, #48]	; (804bdd4 <DisplayMacMcpsRequestUpdate+0x98>)
 804bda2:	f00a f81b 	bl	8055ddc <puts>
            printf( "###### ===================================== ######\n");
 804bda6:	4806      	ldr	r0, [pc, #24]	; (804bdc0 <DisplayMacMcpsRequestUpdate+0x84>)
 804bda8:	f00a f818 	bl	8055ddc <puts>
            break;
 804bdac:	e7e2      	b.n	804bd74 <DisplayMacMcpsRequestUpdate+0x38>
        printf( "Next Tx in  : %lu [ms]\n", nextTxIn );
 804bdae:	4629      	mov	r1, r5
 804bdb0:	4809      	ldr	r0, [pc, #36]	; (804bdd8 <DisplayMacMcpsRequestUpdate+0x9c>)
 804bdb2:	f009 ff77 	bl	8055ca4 <iprintf>
}
 804bdb6:	e7e5      	b.n	804bd84 <DisplayMacMcpsRequestUpdate+0x48>
 804bdb8:	0805a214 	.word	0x0805a214
 804bdbc:	0805a31c 	.word	0x0805a31c
 804bdc0:	0805a280 	.word	0x0805a280
 804bdc4:	0805a24c 	.word	0x0805a24c
 804bdc8:	200180e0 	.word	0x200180e0
 804bdcc:	0805a350 	.word	0x0805a350
 804bdd0:	0805a2b4 	.word	0x0805a2b4
 804bdd4:	0805a2e8 	.word	0x0805a2e8
 804bdd8:	0805a364 	.word	0x0805a364

0804bddc <DisplayMacMlmeRequestUpdate>:

void DisplayMacMlmeRequestUpdate( LoRaMacStatus_t status, MlmeReq_t *mlmeReq, TimerTime_t nextTxIn )
{
 804bddc:	b538      	push	{r3, r4, r5, lr}
 804bdde:	4604      	mov	r4, r0
 804bde0:	4615      	mov	r5, r2
    switch( mlmeReq->Type )
 804bde2:	780b      	ldrb	r3, [r1, #0]
 804bde4:	3b01      	subs	r3, #1
 804bde6:	2b08      	cmp	r3, #8
 804bde8:	d836      	bhi.n	804be58 <DisplayMacMlmeRequestUpdate+0x7c>
 804bdea:	e8df f003 	tbb	[pc, r3]
 804bdee:	3505      	.short	0x3505
 804bdf0:	352b1735 	.word	0x352b1735
 804bdf4:	3535      	.short	0x3535
 804bdf6:	21          	.byte	0x21
 804bdf7:	00          	.byte	0x00
    {
        case MLME_JOIN:
        {
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 804bdf8:	481f      	ldr	r0, [pc, #124]	; (804be78 <DisplayMacMlmeRequestUpdate+0x9c>)
 804bdfa:	f009 ffef 	bl	8055ddc <puts>
            printf( "######               MLME_JOIN               ######\n");
 804bdfe:	481f      	ldr	r0, [pc, #124]	; (804be7c <DisplayMacMlmeRequestUpdate+0xa0>)
 804be00:	f009 ffec 	bl	8055ddc <puts>
            printf( "###### ===================================== ######\n");
 804be04:	481e      	ldr	r0, [pc, #120]	; (804be80 <DisplayMacMlmeRequestUpdate+0xa4>)
 804be06:	f009 ffe9 	bl	8055ddc <puts>
            printf( "######              MLME_UNKNOWN             ######\n");
            printf( "###### ===================================== ######\n");
            break;
        }
    }
    printf( "STATUS      : %s\n", MacStatusStrings[status] );
 804be0a:	4b1e      	ldr	r3, [pc, #120]	; (804be84 <DisplayMacMlmeRequestUpdate+0xa8>)
 804be0c:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
 804be10:	481d      	ldr	r0, [pc, #116]	; (804be88 <DisplayMacMlmeRequestUpdate+0xac>)
 804be12:	f009 ff47 	bl	8055ca4 <iprintf>
    if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 804be16:	2c0b      	cmp	r4, #11
 804be18:	d028      	beq.n	804be6c <DisplayMacMlmeRequestUpdate+0x90>
    {
        printf( "Next Tx in  : %lu [ms]\n", nextTxIn );
    }
}
 804be1a:	bd38      	pop	{r3, r4, r5, pc}
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 804be1c:	4816      	ldr	r0, [pc, #88]	; (804be78 <DisplayMacMlmeRequestUpdate+0x9c>)
 804be1e:	f009 ffdd 	bl	8055ddc <puts>
            printf( "######            MLME_LINK_CHECK            ######\n");
 804be22:	481a      	ldr	r0, [pc, #104]	; (804be8c <DisplayMacMlmeRequestUpdate+0xb0>)
 804be24:	f009 ffda 	bl	8055ddc <puts>
            printf( "###### ===================================== ######\n");
 804be28:	4815      	ldr	r0, [pc, #84]	; (804be80 <DisplayMacMlmeRequestUpdate+0xa4>)
 804be2a:	f009 ffd7 	bl	8055ddc <puts>
            break;
 804be2e:	e7ec      	b.n	804be0a <DisplayMacMlmeRequestUpdate+0x2e>
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 804be30:	4811      	ldr	r0, [pc, #68]	; (804be78 <DisplayMacMlmeRequestUpdate+0x9c>)
 804be32:	f009 ffd3 	bl	8055ddc <puts>
            printf( "######            MLME_DEVICE_TIME           ######\n");
 804be36:	4816      	ldr	r0, [pc, #88]	; (804be90 <DisplayMacMlmeRequestUpdate+0xb4>)
 804be38:	f009 ffd0 	bl	8055ddc <puts>
            printf( "###### ===================================== ######\n");
 804be3c:	4810      	ldr	r0, [pc, #64]	; (804be80 <DisplayMacMlmeRequestUpdate+0xa4>)
 804be3e:	f009 ffcd 	bl	8055ddc <puts>
            break;
 804be42:	e7e2      	b.n	804be0a <DisplayMacMlmeRequestUpdate+0x2e>
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 804be44:	480c      	ldr	r0, [pc, #48]	; (804be78 <DisplayMacMlmeRequestUpdate+0x9c>)
 804be46:	f009 ffc9 	bl	8055ddc <puts>
            printf( "######               MLME_TXCW               ######\n");
 804be4a:	4812      	ldr	r0, [pc, #72]	; (804be94 <DisplayMacMlmeRequestUpdate+0xb8>)
 804be4c:	f009 ffc6 	bl	8055ddc <puts>
            printf( "###### ===================================== ######\n");
 804be50:	480b      	ldr	r0, [pc, #44]	; (804be80 <DisplayMacMlmeRequestUpdate+0xa4>)
 804be52:	f009 ffc3 	bl	8055ddc <puts>
            break;
 804be56:	e7d8      	b.n	804be0a <DisplayMacMlmeRequestUpdate+0x2e>
            printf( "\n###### =========== MLME-Request ============ ######\n" );
 804be58:	4807      	ldr	r0, [pc, #28]	; (804be78 <DisplayMacMlmeRequestUpdate+0x9c>)
 804be5a:	f009 ffbf 	bl	8055ddc <puts>
            printf( "######              MLME_UNKNOWN             ######\n");
 804be5e:	480e      	ldr	r0, [pc, #56]	; (804be98 <DisplayMacMlmeRequestUpdate+0xbc>)
 804be60:	f009 ffbc 	bl	8055ddc <puts>
            printf( "###### ===================================== ######\n");
 804be64:	4806      	ldr	r0, [pc, #24]	; (804be80 <DisplayMacMlmeRequestUpdate+0xa4>)
 804be66:	f009 ffb9 	bl	8055ddc <puts>
            break;
 804be6a:	e7ce      	b.n	804be0a <DisplayMacMlmeRequestUpdate+0x2e>
        printf( "Next Tx in  : %lu [ms]\n", nextTxIn );
 804be6c:	4629      	mov	r1, r5
 804be6e:	480b      	ldr	r0, [pc, #44]	; (804be9c <DisplayMacMlmeRequestUpdate+0xc0>)
 804be70:	f009 ff18 	bl	8055ca4 <iprintf>
}
 804be74:	e7d1      	b.n	804be1a <DisplayMacMlmeRequestUpdate+0x3e>
 804be76:	bf00      	nop
 804be78:	0805a37c 	.word	0x0805a37c
 804be7c:	0805a3b4 	.word	0x0805a3b4
 804be80:	0805a280 	.word	0x0805a280
 804be84:	200180e0 	.word	0x200180e0
 804be88:	0805a350 	.word	0x0805a350
 804be8c:	0805a3e8 	.word	0x0805a3e8
 804be90:	0805a41c 	.word	0x0805a41c
 804be94:	0805a450 	.word	0x0805a450
 804be98:	0805a484 	.word	0x0805a484
 804be9c:	0805a364 	.word	0x0805a364

0804bea0 <DisplayJoinRequestUpdate>:

void DisplayJoinRequestUpdate( LmHandlerJoinParams_t *params )
{
 804bea0:	b510      	push	{r4, lr}
 804bea2:	4604      	mov	r4, r0
    if( params->CommissioningParams->IsOtaaActivation == true )
 804bea4:	6803      	ldr	r3, [r0, #0]
 804bea6:	781b      	ldrb	r3, [r3, #0]
 804bea8:	b1bb      	cbz	r3, 804beda <DisplayJoinRequestUpdate+0x3a>
    {
        if( params->Status == LORAMAC_HANDLER_SUCCESS )
 804beaa:	f990 3005 	ldrsb.w	r3, [r0, #5]
 804beae:	b103      	cbz	r3, 804beb2 <DisplayJoinRequestUpdate+0x12>
        printf( "\nABP\n\n" );
        printf( "DevAddr     : %08lX\n", params->CommissioningParams->DevAddr );
        printf( "\n\n" );
    }
#endif
}
 804beb0:	bd10      	pop	{r4, pc}
            printf( "###### ===========   JOINED     ============ ######\n" );
 804beb2:	4811      	ldr	r0, [pc, #68]	; (804bef8 <DisplayJoinRequestUpdate+0x58>)
 804beb4:	f009 ff92 	bl	8055ddc <puts>
            printf( "\nOTAA\n\n" );
 804beb8:	4810      	ldr	r0, [pc, #64]	; (804befc <DisplayJoinRequestUpdate+0x5c>)
 804beba:	f009 ff8f 	bl	8055ddc <puts>
            printf( "DevAddr     :  %08lX\n", params->CommissioningParams->DevAddr );
 804bebe:	6823      	ldr	r3, [r4, #0]
 804bec0:	69d9      	ldr	r1, [r3, #28]
 804bec2:	480f      	ldr	r0, [pc, #60]	; (804bf00 <DisplayJoinRequestUpdate+0x60>)
 804bec4:	f009 feee 	bl	8055ca4 <iprintf>
            printf( "\n\n" );
 804bec8:	480e      	ldr	r0, [pc, #56]	; (804bf04 <DisplayJoinRequestUpdate+0x64>)
 804beca:	f009 ff87 	bl	8055ddc <puts>
            printf( "DATA RATE   : DR_%d\n\n", params->Datarate );
 804bece:	f994 1004 	ldrsb.w	r1, [r4, #4]
 804bed2:	480d      	ldr	r0, [pc, #52]	; (804bf08 <DisplayJoinRequestUpdate+0x68>)
 804bed4:	f009 fee6 	bl	8055ca4 <iprintf>
 804bed8:	e7ea      	b.n	804beb0 <DisplayJoinRequestUpdate+0x10>
        printf( "###### ===========   JOINED     ============ ######\n" );
 804beda:	4807      	ldr	r0, [pc, #28]	; (804bef8 <DisplayJoinRequestUpdate+0x58>)
 804bedc:	f009 ff7e 	bl	8055ddc <puts>
        printf( "\nABP\n\n" );
 804bee0:	480a      	ldr	r0, [pc, #40]	; (804bf0c <DisplayJoinRequestUpdate+0x6c>)
 804bee2:	f009 ff7b 	bl	8055ddc <puts>
        printf( "DevAddr     : %08lX\n", params->CommissioningParams->DevAddr );
 804bee6:	6823      	ldr	r3, [r4, #0]
 804bee8:	69d9      	ldr	r1, [r3, #28]
 804beea:	4809      	ldr	r0, [pc, #36]	; (804bf10 <DisplayJoinRequestUpdate+0x70>)
 804beec:	f009 feda 	bl	8055ca4 <iprintf>
        printf( "\n\n" );
 804bef0:	4804      	ldr	r0, [pc, #16]	; (804bf04 <DisplayJoinRequestUpdate+0x64>)
 804bef2:	f009 ff73 	bl	8055ddc <puts>
}
 804bef6:	e7db      	b.n	804beb0 <DisplayJoinRequestUpdate+0x10>
 804bef8:	0805a4b8 	.word	0x0805a4b8
 804befc:	0805a4ec 	.word	0x0805a4ec
 804bf00:	0805a4f4 	.word	0x0805a4f4
 804bf04:	0805a520 	.word	0x0805a520
 804bf08:	0805a50c 	.word	0x0805a50c
 804bf0c:	0805a524 	.word	0x0805a524
 804bf10:	0805a52c 	.word	0x0805a52c

0804bf14 <DisplayTxUpdate>:

void DisplayTxUpdate( LmHandlerTxParams_t *params )
{
 804bf14:	b510      	push	{r4, lr}
 804bf16:	b08a      	sub	sp, #40	; 0x28
 804bf18:	4604      	mov	r4, r0
    MibRequestConfirm_t mibGet;

    if( params->IsMcpsConfirm == 0 )
 804bf1a:	7803      	ldrb	r3, [r0, #0]
 804bf1c:	2b00      	cmp	r3, #0
 804bf1e:	d043      	beq.n	804bfa8 <DisplayTxUpdate+0x94>
        printf( "\n###### =========== MLME-Confirm ============ ######\n" );
        printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
        return;
    }

    printf( "\n###### =========== MCPS-Confirm ============ ######\n" );
 804bf20:	484a      	ldr	r0, [pc, #296]	; (804c04c <DisplayTxUpdate+0x138>)
 804bf22:	f009 ff5b 	bl	8055ddc <puts>
    printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
 804bf26:	7862      	ldrb	r2, [r4, #1]
 804bf28:	4b49      	ldr	r3, [pc, #292]	; (804c050 <DisplayTxUpdate+0x13c>)
 804bf2a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804bf2e:	4849      	ldr	r0, [pc, #292]	; (804c054 <DisplayTxUpdate+0x140>)
 804bf30:	f009 feb8 	bl	8055ca4 <iprintf>

    printf( "\n###### =====   UPLINK FRAME %8lu   ===== ######\n", params->UplinkCounter );
 804bf34:	68e1      	ldr	r1, [r4, #12]
 804bf36:	4848      	ldr	r0, [pc, #288]	; (804c058 <DisplayTxUpdate+0x144>)
 804bf38:	f009 feb4 	bl	8055ca4 <iprintf>
    printf( "\n" );
 804bf3c:	200a      	movs	r0, #10
 804bf3e:	f009 fec9 	bl	8055cd4 <putchar>

    printf( "CLASS       : %c\n", "ABC"[LmHandlerGetCurrentClass( )] );
 804bf42:	f000 fd21 	bl	804c988 <LmHandlerGetCurrentClass>
 804bf46:	4b45      	ldr	r3, [pc, #276]	; (804c05c <DisplayTxUpdate+0x148>)
 804bf48:	5c19      	ldrb	r1, [r3, r0]
 804bf4a:	4845      	ldr	r0, [pc, #276]	; (804c060 <DisplayTxUpdate+0x14c>)
 804bf4c:	f009 feaa 	bl	8055ca4 <iprintf>
    printf( "\n" );
 804bf50:	200a      	movs	r0, #10
 804bf52:	f009 febf 	bl	8055cd4 <putchar>
    printf( "TX PORT     : %d\n", params->AppData.Port );
 804bf56:	7c21      	ldrb	r1, [r4, #16]
 804bf58:	4842      	ldr	r0, [pc, #264]	; (804c064 <DisplayTxUpdate+0x150>)
 804bf5a:	f009 fea3 	bl	8055ca4 <iprintf>

    if( params->AppData.BufferSize != 0 )
 804bf5e:	7c63      	ldrb	r3, [r4, #17]
 804bf60:	bb6b      	cbnz	r3, 804bfbe <DisplayTxUpdate+0xaa>
            printf( "UNCONFIRMED\n" );
        }
        PrintHexBuffer( params->AppData.Buffer, params->AppData.BufferSize );
    }

    printf( "\n" );
 804bf62:	200a      	movs	r0, #10
 804bf64:	f009 feb6 	bl	8055cd4 <putchar>
    printf( "DATA RATE   : DR_%d\n", params->Datarate );
 804bf68:	f994 100a 	ldrsb.w	r1, [r4, #10]
 804bf6c:	483e      	ldr	r0, [pc, #248]	; (804c068 <DisplayTxUpdate+0x154>)
 804bf6e:	f009 fe99 	bl	8055ca4 <iprintf>

    mibGet.Type  = MIB_CHANNELS;
 804bf72:	231e      	movs	r3, #30
 804bf74:	f88d 3004 	strb.w	r3, [sp, #4]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 804bf78:	a801      	add	r0, sp, #4
 804bf7a:	f005 f99b 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
 804bf7e:	2800      	cmp	r0, #0
 804bf80:	d034      	beq.n	804bfec <DisplayTxUpdate+0xd8>
    {
        printf( "U/L FREQ    : %lu\n", mibGet.Param.ChannelList[params->Channel].Frequency );
    }

    printf( "TX POWER    : %d\n", params->TxPower );
 804bf82:	f994 1018 	ldrsb.w	r1, [r4, #24]
 804bf86:	4839      	ldr	r0, [pc, #228]	; (804c06c <DisplayTxUpdate+0x158>)
 804bf88:	f009 fe8c 	bl	8055ca4 <iprintf>

    mibGet.Type  = MIB_CHANNELS_MASK;
 804bf8c:	2323      	movs	r3, #35	; 0x23
 804bf8e:	f88d 3004 	strb.w	r3, [sp, #4]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) == LORAMAC_STATUS_OK )
 804bf92:	a801      	add	r0, sp, #4
 804bf94:	f005 f98e 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
 804bf98:	4604      	mov	r4, r0
 804bf9a:	2800      	cmp	r0, #0
 804bf9c:	d030      	beq.n	804c000 <DisplayTxUpdate+0xec>
            }
        }
        printf("\n");
    }

    printf( "\n" );
 804bf9e:	200a      	movs	r0, #10
 804bfa0:	f009 fe98 	bl	8055cd4 <putchar>
}
 804bfa4:	b00a      	add	sp, #40	; 0x28
 804bfa6:	bd10      	pop	{r4, pc}
        printf( "\n###### =========== MLME-Confirm ============ ######\n" );
 804bfa8:	4831      	ldr	r0, [pc, #196]	; (804c070 <DisplayTxUpdate+0x15c>)
 804bfaa:	f009 ff17 	bl	8055ddc <puts>
        printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
 804bfae:	7862      	ldrb	r2, [r4, #1]
 804bfb0:	4b27      	ldr	r3, [pc, #156]	; (804c050 <DisplayTxUpdate+0x13c>)
 804bfb2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804bfb6:	4827      	ldr	r0, [pc, #156]	; (804c054 <DisplayTxUpdate+0x140>)
 804bfb8:	f009 fe74 	bl	8055ca4 <iprintf>
        return;
 804bfbc:	e7f2      	b.n	804bfa4 <DisplayTxUpdate+0x90>
        printf( "TX DATA     : " );
 804bfbe:	482d      	ldr	r0, [pc, #180]	; (804c074 <DisplayTxUpdate+0x160>)
 804bfc0:	f009 fe70 	bl	8055ca4 <iprintf>
        if( params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG )
 804bfc4:	7a23      	ldrb	r3, [r4, #8]
 804bfc6:	2b01      	cmp	r3, #1
 804bfc8:	d10c      	bne.n	804bfe4 <DisplayTxUpdate+0xd0>
            printf( "CONFIRMED - %s\n", ( params->AckReceived != 0 ) ? "ACK" : "NACK" );
 804bfca:	7a63      	ldrb	r3, [r4, #9]
 804bfcc:	b143      	cbz	r3, 804bfe0 <DisplayTxUpdate+0xcc>
 804bfce:	492a      	ldr	r1, [pc, #168]	; (804c078 <DisplayTxUpdate+0x164>)
 804bfd0:	482a      	ldr	r0, [pc, #168]	; (804c07c <DisplayTxUpdate+0x168>)
 804bfd2:	f009 fe67 	bl	8055ca4 <iprintf>
        PrintHexBuffer( params->AppData.Buffer, params->AppData.BufferSize );
 804bfd6:	7c61      	ldrb	r1, [r4, #17]
 804bfd8:	6960      	ldr	r0, [r4, #20]
 804bfda:	f7ff fe37 	bl	804bc4c <PrintHexBuffer>
 804bfde:	e7c0      	b.n	804bf62 <DisplayTxUpdate+0x4e>
            printf( "CONFIRMED - %s\n", ( params->AckReceived != 0 ) ? "ACK" : "NACK" );
 804bfe0:	4927      	ldr	r1, [pc, #156]	; (804c080 <DisplayTxUpdate+0x16c>)
 804bfe2:	e7f5      	b.n	804bfd0 <DisplayTxUpdate+0xbc>
            printf( "UNCONFIRMED\n" );
 804bfe4:	4827      	ldr	r0, [pc, #156]	; (804c084 <DisplayTxUpdate+0x170>)
 804bfe6:	f009 fef9 	bl	8055ddc <puts>
 804bfea:	e7f4      	b.n	804bfd6 <DisplayTxUpdate+0xc2>
        printf( "U/L FREQ    : %lu\n", mibGet.Param.ChannelList[params->Channel].Frequency );
 804bfec:	7e63      	ldrb	r3, [r4, #25]
 804bfee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 804bff2:	9a02      	ldr	r2, [sp, #8]
 804bff4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 804bff8:	4823      	ldr	r0, [pc, #140]	; (804c088 <DisplayTxUpdate+0x174>)
 804bffa:	f009 fe53 	bl	8055ca4 <iprintf>
 804bffe:	e7c0      	b.n	804bf82 <DisplayTxUpdate+0x6e>
        printf("CHANNEL MASK: ");
 804c000:	4822      	ldr	r0, [pc, #136]	; (804c08c <DisplayTxUpdate+0x178>)
 804c002:	f009 fe4f 	bl	8055ca4 <iprintf>
        switch( LmHandlerGetActiveRegion( ) )
 804c006:	f000 fd91 	bl	804cb2c <LmHandlerGetActiveRegion>
 804c00a:	2809      	cmp	r0, #9
 804c00c:	d81a      	bhi.n	804c044 <DisplayTxUpdate+0x130>
 804c00e:	e8df f000 	tbb	[pc, r0]
 804c012:	0e05      	.short	0x0e05
 804c014:	0505050e 	.word	0x0505050e
 804c018:	050e0505 	.word	0x050e0505
                printf( "%04X ", mibGet.Param.ChannelsMask[0] );
 804c01c:	9b02      	ldr	r3, [sp, #8]
 804c01e:	8819      	ldrh	r1, [r3, #0]
 804c020:	481b      	ldr	r0, [pc, #108]	; (804c090 <DisplayTxUpdate+0x17c>)
 804c022:	f009 fe3f 	bl	8055ca4 <iprintf>
        printf("\n");
 804c026:	200a      	movs	r0, #10
 804c028:	f009 fe54 	bl	8055cd4 <putchar>
 804c02c:	e7b7      	b.n	804bf9e <DisplayTxUpdate+0x8a>
                for( uint8_t i = 0; i < 5; i++)
 804c02e:	2c04      	cmp	r4, #4
 804c030:	d8f9      	bhi.n	804c026 <DisplayTxUpdate+0x112>
                    printf( "%04X ", mibGet.Param.ChannelsMask[i] );
 804c032:	9b02      	ldr	r3, [sp, #8]
 804c034:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 804c038:	4815      	ldr	r0, [pc, #84]	; (804c090 <DisplayTxUpdate+0x17c>)
 804c03a:	f009 fe33 	bl	8055ca4 <iprintf>
                for( uint8_t i = 0; i < 5; i++)
 804c03e:	3401      	adds	r4, #1
 804c040:	b2e4      	uxtb	r4, r4
 804c042:	e7f4      	b.n	804c02e <DisplayTxUpdate+0x11a>
                printf( "\n###### ========= Unknown Region ============ ######" );
 804c044:	4813      	ldr	r0, [pc, #76]	; (804c094 <DisplayTxUpdate+0x180>)
 804c046:	f009 fe2d 	bl	8055ca4 <iprintf>
                break;
 804c04a:	e7ec      	b.n	804c026 <DisplayTxUpdate+0x112>
 804c04c:	0805a588 	.word	0x0805a588
 804c050:	200180a0 	.word	0x200180a0
 804c054:	0805a350 	.word	0x0805a350
 804c058:	0805a5c0 	.word	0x0805a5c0
 804c05c:	0805a6d8 	.word	0x0805a6d8
 804c060:	0805a5f4 	.word	0x0805a5f4
 804c064:	0805a608 	.word	0x0805a608
 804c068:	0805a648 	.word	0x0805a648
 804c06c:	0805a674 	.word	0x0805a674
 804c070:	0805a550 	.word	0x0805a550
 804c074:	0805a61c 	.word	0x0805a61c
 804c078:	0805a54c 	.word	0x0805a54c
 804c07c:	0805a62c 	.word	0x0805a62c
 804c080:	0805a544 	.word	0x0805a544
 804c084:	0805a63c 	.word	0x0805a63c
 804c088:	0805a660 	.word	0x0805a660
 804c08c:	0805a688 	.word	0x0805a688
 804c090:	0805a698 	.word	0x0805a698
 804c094:	0805a6a0 	.word	0x0805a6a0

0804c098 <DisplayRxUpdate>:

void DisplayRxUpdate( LmHandlerAppData_t *appData, LmHandlerRxParams_t *params )
{
 804c098:	b5f0      	push	{r4, r5, r6, r7, lr}
 804c09a:	b087      	sub	sp, #28
 804c09c:	4607      	mov	r7, r0
 804c09e:	460e      	mov	r6, r1
    const char *slotStrings[] = { "1", "2", "C", "C Multicast", "B Ping-Slot", "B Multicast Ping-Slot" };
 804c0a0:	466c      	mov	r4, sp
 804c0a2:	4d29      	ldr	r5, [pc, #164]	; (804c148 <DisplayRxUpdate+0xb0>)
 804c0a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 804c0a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 804c0a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 804c0ac:	e884 0003 	stmia.w	r4, {r0, r1}

    if( params->IsMcpsIndication == 0 )
 804c0b0:	7833      	ldrb	r3, [r6, #0]
 804c0b2:	2b00      	cmp	r3, #0
 804c0b4:	d034      	beq.n	804c120 <DisplayRxUpdate+0x88>
        printf( "\n###### ========== MLME-Indication ========== ######\n" );
        printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
        return;
    }

    printf( "\n###### ========== MCPS-Indication ========== ######\n" );
 804c0b6:	4825      	ldr	r0, [pc, #148]	; (804c14c <DisplayRxUpdate+0xb4>)
 804c0b8:	f009 fe90 	bl	8055ddc <puts>
    printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
 804c0bc:	7872      	ldrb	r2, [r6, #1]
 804c0be:	4b24      	ldr	r3, [pc, #144]	; (804c150 <DisplayRxUpdate+0xb8>)
 804c0c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804c0c4:	4823      	ldr	r0, [pc, #140]	; (804c154 <DisplayRxUpdate+0xbc>)
 804c0c6:	f009 fded 	bl	8055ca4 <iprintf>

    printf( "\n###### =====  DOWNLINK FRAME %8lu  ===== ######\n", params->DownlinkCounter );
 804c0ca:	68f1      	ldr	r1, [r6, #12]
 804c0cc:	4822      	ldr	r0, [pc, #136]	; (804c158 <DisplayRxUpdate+0xc0>)
 804c0ce:	f009 fde9 	bl	8055ca4 <iprintf>

    printf( "RX WINDOW   : %s\n", slotStrings[params->RxSlot] );
 804c0d2:	f996 3010 	ldrsb.w	r3, [r6, #16]
 804c0d6:	aa06      	add	r2, sp, #24
 804c0d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 804c0dc:	f853 1c18 	ldr.w	r1, [r3, #-24]
 804c0e0:	481e      	ldr	r0, [pc, #120]	; (804c15c <DisplayRxUpdate+0xc4>)
 804c0e2:	f009 fddf 	bl	8055ca4 <iprintf>
    
    printf( "RX PORT     : %d\n", appData->Port );
 804c0e6:	7839      	ldrb	r1, [r7, #0]
 804c0e8:	481d      	ldr	r0, [pc, #116]	; (804c160 <DisplayRxUpdate+0xc8>)
 804c0ea:	f009 fddb 	bl	8055ca4 <iprintf>

    if( appData->BufferSize != 0 )
 804c0ee:	787b      	ldrb	r3, [r7, #1]
 804c0f0:	bb0b      	cbnz	r3, 804c136 <DisplayRxUpdate+0x9e>
    {
        printf( "RX DATA     : \n" );
        PrintHexBuffer( appData->Buffer, appData->BufferSize );
    }

    printf( "\n" );
 804c0f2:	200a      	movs	r0, #10
 804c0f4:	f009 fdee 	bl	8055cd4 <putchar>
    printf( "DATA RATE   : DR_%d\n", params->Datarate );
 804c0f8:	f996 1008 	ldrsb.w	r1, [r6, #8]
 804c0fc:	4819      	ldr	r0, [pc, #100]	; (804c164 <DisplayRxUpdate+0xcc>)
 804c0fe:	f009 fdd1 	bl	8055ca4 <iprintf>
    printf( "RX RSSI     : %d\n", params->Rssi );
 804c102:	f996 1009 	ldrsb.w	r1, [r6, #9]
 804c106:	4818      	ldr	r0, [pc, #96]	; (804c168 <DisplayRxUpdate+0xd0>)
 804c108:	f009 fdcc 	bl	8055ca4 <iprintf>
    printf( "RX SNR      : %d\n", params->Snr );
 804c10c:	f996 100a 	ldrsb.w	r1, [r6, #10]
 804c110:	4816      	ldr	r0, [pc, #88]	; (804c16c <DisplayRxUpdate+0xd4>)
 804c112:	f009 fdc7 	bl	8055ca4 <iprintf>

    printf( "\n" );
 804c116:	200a      	movs	r0, #10
 804c118:	f009 fddc 	bl	8055cd4 <putchar>
}
 804c11c:	b007      	add	sp, #28
 804c11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        printf( "\n###### ========== MLME-Indication ========== ######\n" );
 804c120:	4813      	ldr	r0, [pc, #76]	; (804c170 <DisplayRxUpdate+0xd8>)
 804c122:	f009 fe5b 	bl	8055ddc <puts>
        printf( "STATUS      : %s\n", EventInfoStatusStrings[params->Status] );
 804c126:	7872      	ldrb	r2, [r6, #1]
 804c128:	4b09      	ldr	r3, [pc, #36]	; (804c150 <DisplayRxUpdate+0xb8>)
 804c12a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 804c12e:	4809      	ldr	r0, [pc, #36]	; (804c154 <DisplayRxUpdate+0xbc>)
 804c130:	f009 fdb8 	bl	8055ca4 <iprintf>
        return;
 804c134:	e7f2      	b.n	804c11c <DisplayRxUpdate+0x84>
        printf( "RX DATA     : \n" );
 804c136:	480f      	ldr	r0, [pc, #60]	; (804c174 <DisplayRxUpdate+0xdc>)
 804c138:	f009 fe50 	bl	8055ddc <puts>
        PrintHexBuffer( appData->Buffer, appData->BufferSize );
 804c13c:	7879      	ldrb	r1, [r7, #1]
 804c13e:	6878      	ldr	r0, [r7, #4]
 804c140:	f7ff fd84 	bl	804bc4c <PrintHexBuffer>
 804c144:	e7d5      	b.n	804c0f2 <DisplayRxUpdate+0x5a>
 804c146:	bf00      	nop
 804c148:	08059b68 	.word	0x08059b68
 804c14c:	0805a714 	.word	0x0805a714
 804c150:	200180a0 	.word	0x200180a0
 804c154:	0805a350 	.word	0x0805a350
 804c158:	0805a74c 	.word	0x0805a74c
 804c15c:	0805a780 	.word	0x0805a780
 804c160:	0805a794 	.word	0x0805a794
 804c164:	0805a648 	.word	0x0805a648
 804c168:	0805a7b8 	.word	0x0805a7b8
 804c16c:	0805a7cc 	.word	0x0805a7cc
 804c170:	0805a6dc 	.word	0x0805a6dc
 804c174:	0805a7a8 	.word	0x0805a7a8

0804c178 <DisplayBeaconUpdate>:

void DisplayBeaconUpdate( LoRaMacHandlerBeaconParams_t *params )
{
 804c178:	b510      	push	{r4, lr}
    switch( params->State )
 804c17a:	7843      	ldrb	r3, [r0, #1]
 804c17c:	2b02      	cmp	r3, #2
 804c17e:	d00b      	beq.n	804c198 <DisplayBeaconUpdate+0x20>
 804c180:	2b03      	cmp	r3, #3
 804c182:	d033      	beq.n	804c1ec <DisplayBeaconUpdate+0x74>
 804c184:	2b01      	cmp	r3, #1
 804c186:	d003      	beq.n	804c190 <DisplayBeaconUpdate+0x18>
    {
        default:
        case LORAMAC_HANDLER_BEACON_ACQUIRING:
        {
            printf( "\n###### ========= BEACON ACQUIRING ========== ######\n" );
 804c188:	481a      	ldr	r0, [pc, #104]	; (804c1f4 <DisplayBeaconUpdate+0x7c>)
 804c18a:	f009 fe27 	bl	8055ddc <puts>
        {
            printf( "\n###### ======== BEACON NOT RECEIVED ======== ######\n" );
            break;
        }
    }
}
 804c18e:	bd10      	pop	{r4, pc}
            printf( "\n###### ============ BEACON LOST ============ ######\n" );
 804c190:	4819      	ldr	r0, [pc, #100]	; (804c1f8 <DisplayBeaconUpdate+0x80>)
 804c192:	f009 fe23 	bl	8055ddc <puts>
            break;
 804c196:	e7fa      	b.n	804c18e <DisplayBeaconUpdate+0x16>
 804c198:	4604      	mov	r4, r0
            printf( "\n###### ===== BEACON %8lu ==== ######\n", params->Info.Time.Seconds );
 804c19a:	6841      	ldr	r1, [r0, #4]
 804c19c:	4817      	ldr	r0, [pc, #92]	; (804c1fc <DisplayBeaconUpdate+0x84>)
 804c19e:	f009 fd81 	bl	8055ca4 <iprintf>
            printf( "GW DESC     : %d\n", params->Info.GwSpecific.InfoDesc );
 804c1a2:	7da1      	ldrb	r1, [r4, #22]
 804c1a4:	4816      	ldr	r0, [pc, #88]	; (804c200 <DisplayBeaconUpdate+0x88>)
 804c1a6:	f009 fd7d 	bl	8055ca4 <iprintf>
            printf( "GW INFO     : " );
 804c1aa:	4816      	ldr	r0, [pc, #88]	; (804c204 <DisplayBeaconUpdate+0x8c>)
 804c1ac:	f009 fd7a 	bl	8055ca4 <iprintf>
            PrintHexBuffer( params->Info.GwSpecific.Info, 6 );
 804c1b0:	2106      	movs	r1, #6
 804c1b2:	f104 0017 	add.w	r0, r4, #23
 804c1b6:	f7ff fd49 	bl	804bc4c <PrintHexBuffer>
            printf( "\n" );
 804c1ba:	200a      	movs	r0, #10
 804c1bc:	f009 fd8a 	bl	8055cd4 <putchar>
            printf( "FREQ        : %lu\n", params->Info.Frequency );
 804c1c0:	68e1      	ldr	r1, [r4, #12]
 804c1c2:	4811      	ldr	r0, [pc, #68]	; (804c208 <DisplayBeaconUpdate+0x90>)
 804c1c4:	f009 fd6e 	bl	8055ca4 <iprintf>
            printf( "DATA RATE   : DR_%d\n", params->Info.Datarate );
 804c1c8:	7c21      	ldrb	r1, [r4, #16]
 804c1ca:	4810      	ldr	r0, [pc, #64]	; (804c20c <DisplayBeaconUpdate+0x94>)
 804c1cc:	f009 fd6a 	bl	8055ca4 <iprintf>
            printf( "RX RSSI     : %d\n", params->Info.Rssi );
 804c1d0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 804c1d4:	480e      	ldr	r0, [pc, #56]	; (804c210 <DisplayBeaconUpdate+0x98>)
 804c1d6:	f009 fd65 	bl	8055ca4 <iprintf>
            printf( "RX SNR      : %d\n", params->Info.Snr );
 804c1da:	f994 1014 	ldrsb.w	r1, [r4, #20]
 804c1de:	480d      	ldr	r0, [pc, #52]	; (804c214 <DisplayBeaconUpdate+0x9c>)
 804c1e0:	f009 fd60 	bl	8055ca4 <iprintf>
            printf( "\n" );
 804c1e4:	200a      	movs	r0, #10
 804c1e6:	f009 fd75 	bl	8055cd4 <putchar>
            break;
 804c1ea:	e7d0      	b.n	804c18e <DisplayBeaconUpdate+0x16>
            printf( "\n###### ======== BEACON NOT RECEIVED ======== ######\n" );
 804c1ec:	480a      	ldr	r0, [pc, #40]	; (804c218 <DisplayBeaconUpdate+0xa0>)
 804c1ee:	f009 fdf5 	bl	8055ddc <puts>
}
 804c1f2:	e7cc      	b.n	804c18e <DisplayBeaconUpdate+0x16>
 804c1f4:	0805a7e0 	.word	0x0805a7e0
 804c1f8:	0805a818 	.word	0x0805a818
 804c1fc:	0805a850 	.word	0x0805a850
 804c200:	0805a878 	.word	0x0805a878
 804c204:	0805a88c 	.word	0x0805a88c
 804c208:	0805a89c 	.word	0x0805a89c
 804c20c:	0805a648 	.word	0x0805a648
 804c210:	0805a7b8 	.word	0x0805a7b8
 804c214:	0805a7cc 	.word	0x0805a7cc
 804c218:	0805a8b0 	.word	0x0805a8b0

0804c21c <DisplayClassUpdate>:

void DisplayClassUpdate( DeviceClass_t deviceClass )
{
 804c21c:	b508      	push	{r3, lr}
    printf( "\n\n###### ===== Switch to Class %c done.  ===== ######\n\n", "ABC"[deviceClass] );
 804c21e:	4b03      	ldr	r3, [pc, #12]	; (804c22c <DisplayClassUpdate+0x10>)
 804c220:	5c19      	ldrb	r1, [r3, r0]
 804c222:	4803      	ldr	r0, [pc, #12]	; (804c230 <DisplayClassUpdate+0x14>)
 804c224:	f009 fd3e 	bl	8055ca4 <iprintf>
}
 804c228:	bd08      	pop	{r3, pc}
 804c22a:	bf00      	nop
 804c22c:	0805a6d8 	.word	0x0805a6d8
 804c230:	0805a8e8 	.word	0x0805a8e8

0804c234 <DisplayAppInfo>:

void DisplayAppInfo( const char* appName, const Version_t* appVersion, const Version_t* gitHubVersion )
{
 804c234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804c236:	4606      	mov	r6, r0
 804c238:	460d      	mov	r5, r1
 804c23a:	4614      	mov	r4, r2
    printf( "\n###### ===================================== ######\n\n" );
 804c23c:	4f0b      	ldr	r7, [pc, #44]	; (804c26c <DisplayAppInfo+0x38>)
 804c23e:	4638      	mov	r0, r7
 804c240:	f009 fdcc 	bl	8055ddc <puts>
    printf( "Application name   : %s\n", appName );
 804c244:	4631      	mov	r1, r6
 804c246:	480a      	ldr	r0, [pc, #40]	; (804c270 <DisplayAppInfo+0x3c>)
 804c248:	f009 fd2c 	bl	8055ca4 <iprintf>
    printf( "Application version: %d.%d.%d\n", appVersion->Fields.Major, appVersion->Fields.Minor, appVersion->Fields.Revision );
 804c24c:	786b      	ldrb	r3, [r5, #1]
 804c24e:	78aa      	ldrb	r2, [r5, #2]
 804c250:	78e9      	ldrb	r1, [r5, #3]
 804c252:	4808      	ldr	r0, [pc, #32]	; (804c274 <DisplayAppInfo+0x40>)
 804c254:	f009 fd26 	bl	8055ca4 <iprintf>
    printf( "GitHub base version: %d.%d.%d\n", gitHubVersion->Fields.Major, gitHubVersion->Fields.Minor, gitHubVersion->Fields.Revision );
 804c258:	7863      	ldrb	r3, [r4, #1]
 804c25a:	78a2      	ldrb	r2, [r4, #2]
 804c25c:	78e1      	ldrb	r1, [r4, #3]
 804c25e:	4806      	ldr	r0, [pc, #24]	; (804c278 <DisplayAppInfo+0x44>)
 804c260:	f009 fd20 	bl	8055ca4 <iprintf>
    printf( "\n###### ===================================== ######\n\n" );
 804c264:	4638      	mov	r0, r7
 804c266:	f009 fdb9 	bl	8055ddc <puts>
}
 804c26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804c26c:	0805a920 	.word	0x0805a920
 804c270:	0805a958 	.word	0x0805a958
 804c274:	0805a974 	.word	0x0805a974
 804c278:	0805a994 	.word	0x0805a994

0804c27c <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
    NvmNotifyFlags = notifyFlags;
}
 804c27c:	4770      	bx	lr

0804c27e <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 804c27e:	2000      	movs	r0, #0
 804c280:	4770      	bx	lr

0804c282 <NvmDataMgmtRestore>:
    {
        return sizeof( LoRaMacNvmData_t );
    }
#endif
    return 0;
}
 804c282:	2000      	movs	r0, #0
 804c284:	4770      	bx	lr

0804c286 <NvmDataMgmtFactoryReset>:
        return false;
    }
    offset += sizeof( LoRaMacClassBNvmData_t );
#endif
    return true;
}
 804c286:	2001      	movs	r0, #1
 804c288:	4770      	bx	lr
	...

0804c28c <CliProcess>:
#include <stdbool.h>
#include "NvmDataMgmt.h"
#include "cli.h"

void CliProcess( UART_HandleTypeDef* uart )
{
 804c28c:	b510      	push	{r4, lr}
 804c28e:	b082      	sub	sp, #8
 804c290:	4604      	mov	r4, r0
    uint8_t data = 0;
 804c292:	2300      	movs	r3, #0
 804c294:	f88d 3007 	strb.w	r3, [sp, #7]

    if( UartGetChar( uart, &data ) == 0 )
 804c298:	f10d 0107 	add.w	r1, sp, #7
 804c29c:	f7f7 f98c 	bl	80435b8 <UartGetChar>
 804c2a0:	b918      	cbnz	r0, 804c2aa <CliProcess+0x1e>
    {
        if( data == '\x1B' )
 804c2a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 804c2a6:	2b1b      	cmp	r3, #27
 804c2a8:	d001      	beq.n	804c2ae <CliProcess+0x22>
                printf( "\n\nPLEASE RESET THE END-DEVICE\n\n" );
                while( 1 );
            }
        }
    }
}
 804c2aa:	b002      	add	sp, #8
 804c2ac:	bd10      	pop	{r4, pc}
            printf( "ESC + " );
 804c2ae:	4812      	ldr	r0, [pc, #72]	; (804c2f8 <CliProcess+0x6c>)
 804c2b0:	f009 fcf8 	bl	8055ca4 <iprintf>
            while( UartGetChar( uart, &data ) != 0 )
 804c2b4:	f10d 0107 	add.w	r1, sp, #7
 804c2b8:	4620      	mov	r0, r4
 804c2ba:	f7f7 f97d 	bl	80435b8 <UartGetChar>
 804c2be:	2800      	cmp	r0, #0
 804c2c0:	d1f8      	bne.n	804c2b4 <CliProcess+0x28>
            printf( "%c\n", data );
 804c2c2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 804c2c6:	480d      	ldr	r0, [pc, #52]	; (804c2fc <CliProcess+0x70>)
 804c2c8:	f009 fcec 	bl	8055ca4 <iprintf>
            if( data == 'N' )
 804c2cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 804c2d0:	2b4e      	cmp	r3, #78	; 0x4e
 804c2d2:	d1ea      	bne.n	804c2aa <CliProcess+0x1e>
                data = 0;
 804c2d4:	2300      	movs	r3, #0
 804c2d6:	f88d 3007 	strb.w	r3, [sp, #7]
                if( NvmDataMgmtFactoryReset( ) == true )
 804c2da:	f7ff ffd4 	bl	804c286 <NvmDataMgmtFactoryReset>
 804c2de:	b130      	cbz	r0, 804c2ee <CliProcess+0x62>
                    printf( "\n\nNVM factory reset succeed\n" );
 804c2e0:	4807      	ldr	r0, [pc, #28]	; (804c300 <CliProcess+0x74>)
 804c2e2:	f009 fd7b 	bl	8055ddc <puts>
                printf( "\n\nPLEASE RESET THE END-DEVICE\n\n" );
 804c2e6:	4807      	ldr	r0, [pc, #28]	; (804c304 <CliProcess+0x78>)
 804c2e8:	f009 fd78 	bl	8055ddc <puts>
                while( 1 );
 804c2ec:	e7fe      	b.n	804c2ec <CliProcess+0x60>
                    printf( "\n\nNVM factory reset failed\n" );
 804c2ee:	4806      	ldr	r0, [pc, #24]	; (804c308 <CliProcess+0x7c>)
 804c2f0:	f009 fd74 	bl	8055ddc <puts>
 804c2f4:	e7f7      	b.n	804c2e6 <CliProcess+0x5a>
 804c2f6:	bf00      	nop
 804c2f8:	0805a9b4 	.word	0x0805a9b4
 804c2fc:	0805a9bc 	.word	0x0805a9bc
 804c300:	0805a9c0 	.word	0x0805a9c0
 804c304:	0805a9f8 	.word	0x0805a9f8
 804c308:	0805a9dc 	.word	0x0805a9dc

0804c30c <LmHandlerPackagesNotify>:
        return false;
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 804c30c:	b570      	push	{r4, r5, r6, lr}
 804c30e:	4605      	mov	r5, r0
 804c310:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 804c312:	2400      	movs	r4, #0
 804c314:	e005      	b.n	804c322 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 804c316:	695b      	ldr	r3, [r3, #20]
 804c318:	b10b      	cbz	r3, 804c31e <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 804c31a:	4630      	mov	r0, r6
 804c31c:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 804c31e:	3401      	adds	r4, #1
 804c320:	b264      	sxtb	r4, r4
 804c322:	2c03      	cmp	r4, #3
 804c324:	dc24      	bgt.n	804c370 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 804c326:	4b13      	ldr	r3, [pc, #76]	; (804c374 <LmHandlerPackagesNotify+0x68>)
 804c328:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 804c32c:	2b00      	cmp	r3, #0
 804c32e:	d0f6      	beq.n	804c31e <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 804c330:	2d03      	cmp	r5, #3
 804c332:	d8f4      	bhi.n	804c31e <LmHandlerPackagesNotify+0x12>
 804c334:	a201      	add	r2, pc, #4	; (adr r2, 804c33c <LmHandlerPackagesNotify+0x30>)
 804c336:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 804c33a:	bf00      	nop
 804c33c:	0804c317 	.word	0x0804c317
 804c340:	0804c34d 	.word	0x0804c34d
 804c344:	0804c359 	.word	0x0804c359
 804c348:	0804c365 	.word	0x0804c365
                    }
                    break;
                }
                case PACKAGE_MCPS_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 804c34c:	699b      	ldr	r3, [r3, #24]
 804c34e:	2b00      	cmp	r3, #0
 804c350:	d0e5      	beq.n	804c31e <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 804c352:	4630      	mov	r0, r6
 804c354:	4798      	blx	r3
 804c356:	e7e2      	b.n	804c31e <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 804c358:	69db      	ldr	r3, [r3, #28]
 804c35a:	2b00      	cmp	r3, #0
 804c35c:	d0df      	beq.n	804c31e <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 804c35e:	4630      	mov	r0, r6
 804c360:	4798      	blx	r3
 804c362:	e7dc      	b.n	804c31e <LmHandlerPackagesNotify+0x12>
                    }
                    break;
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 804c364:	6a1b      	ldr	r3, [r3, #32]
 804c366:	2b00      	cmp	r3, #0
 804c368:	d0d9      	beq.n	804c31e <LmHandlerPackagesNotify+0x12>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 804c36a:	4630      	mov	r0, r6
 804c36c:	4798      	blx	r3
 804c36e:	e7d6      	b.n	804c31e <LmHandlerPackagesNotify+0x12>
                    break;
                }
            }
        }
    }
}
 804c370:	bd70      	pop	{r4, r5, r6, pc}
 804c372:	bf00      	nop
 804c374:	200194b4 	.word	0x200194b4

0804c378 <McpsConfirm>:
{
 804c378:	b510      	push	{r4, lr}
 804c37a:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 804c37c:	480c      	ldr	r0, [pc, #48]	; (804c3b0 <McpsConfirm+0x38>)
 804c37e:	2301      	movs	r3, #1
 804c380:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mcpsConfirm->Status;
 804c382:	7863      	ldrb	r3, [r4, #1]
 804c384:	7043      	strb	r3, [r0, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 804c386:	f994 3002 	ldrsb.w	r3, [r4, #2]
 804c38a:	7283      	strb	r3, [r0, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 804c38c:	68e3      	ldr	r3, [r4, #12]
 804c38e:	60c3      	str	r3, [r0, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 804c390:	f994 3003 	ldrsb.w	r3, [r4, #3]
 804c394:	7603      	strb	r3, [r0, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 804c396:	6923      	ldr	r3, [r4, #16]
 804c398:	7643      	strb	r3, [r0, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 804c39a:	7923      	ldrb	r3, [r4, #4]
 804c39c:	7243      	strb	r3, [r0, #9]
    LmHandlerCallbacks->OnTxData( &TxParams );
 804c39e:	4b05      	ldr	r3, [pc, #20]	; (804c3b4 <McpsConfirm+0x3c>)
 804c3a0:	681b      	ldr	r3, [r3, #0]
 804c3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c3a4:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 804c3a6:	4621      	mov	r1, r4
 804c3a8:	2000      	movs	r0, #0
 804c3aa:	f7ff ffaf 	bl	804c30c <LmHandlerPackagesNotify>
}
 804c3ae:	bd10      	pop	{r4, pc}
 804c3b0:	2001819c 	.word	0x2001819c
 804c3b4:	200194b0 	.word	0x200194b0

0804c3b8 <LmHandlerDeviceTimeReq>:
{
 804c3b8:	b510      	push	{r4, lr}
 804c3ba:	b086      	sub	sp, #24
    mlmeReq.Type = MLME_DEVICE_TIME;
 804c3bc:	2309      	movs	r3, #9
 804c3be:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 804c3c2:	a801      	add	r0, sp, #4
 804c3c4:	f005 fd78 	bl	8051eb8 <LoRaMacMlmeRequest>
 804c3c8:	4604      	mov	r4, r0
    LmHandlerCallbacks->OnMacMlmeRequest( status, &mlmeReq, mlmeReq.ReqReturn.DutyCycleWaitTime );
 804c3ca:	4b08      	ldr	r3, [pc, #32]	; (804c3ec <LmHandlerDeviceTimeReq+0x34>)
 804c3cc:	681b      	ldr	r3, [r3, #0]
 804c3ce:	69db      	ldr	r3, [r3, #28]
 804c3d0:	9a05      	ldr	r2, [sp, #20]
 804c3d2:	a901      	add	r1, sp, #4
 804c3d4:	4798      	blx	r3
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 804c3d6:	9a05      	ldr	r2, [sp, #20]
 804c3d8:	4b05      	ldr	r3, [pc, #20]	; (804c3f0 <LmHandlerDeviceTimeReq+0x38>)
 804c3da:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 804c3dc:	b914      	cbnz	r4, 804c3e4 <LmHandlerDeviceTimeReq+0x2c>
        return LORAMAC_HANDLER_SUCCESS;
 804c3de:	2000      	movs	r0, #0
}
 804c3e0:	b006      	add	sp, #24
 804c3e2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 804c3e4:	f04f 30ff 	mov.w	r0, #4294967295
 804c3e8:	e7fa      	b.n	804c3e0 <LmHandlerDeviceTimeReq+0x28>
 804c3ea:	bf00      	nop
 804c3ec:	200194b0 	.word	0x200194b0
 804c3f0:	200194a8 	.word	0x200194a8

0804c3f4 <MlmeIndication>:
{
 804c3f4:	b570      	push	{r4, r5, r6, lr}
 804c3f6:	b08a      	sub	sp, #40	; 0x28
 804c3f8:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 804c3fa:	4a31      	ldr	r2, [pc, #196]	; (804c4c0 <MlmeIndication+0xcc>)
 804c3fc:	2300      	movs	r3, #0
 804c3fe:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mlmeIndication->Status;
 804c400:	7843      	ldrb	r3, [r0, #1]
 804c402:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 804c404:	2b0d      	cmp	r3, #13
 804c406:	d005      	beq.n	804c414 <MlmeIndication+0x20>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 804c408:	4b2e      	ldr	r3, [pc, #184]	; (804c4c4 <MlmeIndication+0xd0>)
 804c40a:	681b      	ldr	r3, [r3, #0]
 804c40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804c40e:	4611      	mov	r1, r2
 804c410:	2000      	movs	r0, #0
 804c412:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 804c414:	4621      	mov	r1, r4
 804c416:	2003      	movs	r0, #3
 804c418:	f7ff ff78 	bl	804c30c <LmHandlerPackagesNotify>
    switch( mlmeIndication->MlmeIndication )
 804c41c:	7823      	ldrb	r3, [r4, #0]
 804c41e:	2b0a      	cmp	r3, #10
 804c420:	d028      	beq.n	804c474 <MlmeIndication+0x80>
 804c422:	2b0e      	cmp	r3, #14
 804c424:	d007      	beq.n	804c436 <MlmeIndication+0x42>
 804c426:	2b06      	cmp	r3, #6
 804c428:	d001      	beq.n	804c42e <MlmeIndication+0x3a>
}
 804c42a:	b00a      	add	sp, #40	; 0x28
 804c42c:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = true;
 804c42e:	4b26      	ldr	r3, [pc, #152]	; (804c4c8 <MlmeIndication+0xd4>)
 804c430:	2201      	movs	r2, #1
 804c432:	701a      	strb	r2, [r3, #0]
        break;
 804c434:	e7f9      	b.n	804c42a <MlmeIndication+0x36>
            mibReq.Type = MIB_DEVICE_CLASS;
 804c436:	2400      	movs	r4, #0
 804c438:	f88d 4004 	strb.w	r4, [sp, #4]
            mibReq.Param.Class = CLASS_A;
 804c43c:	f88d 4008 	strb.w	r4, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 804c440:	a801      	add	r0, sp, #4
 804c442:	f005 f897 	bl	8051574 <LoRaMacMibSetRequestConfirm>
            BeaconParams.State = LORAMAC_HANDLER_BEACON_LOST;
 804c446:	4d21      	ldr	r5, [pc, #132]	; (804c4cc <MlmeIndication+0xd8>)
 804c448:	2301      	movs	r3, #1
 804c44a:	706b      	strb	r3, [r5, #1]
            BeaconParams.Info.Time.Seconds = 0;
 804c44c:	606c      	str	r4, [r5, #4]
            BeaconParams.Info.GwSpecific.InfoDesc = 0;
 804c44e:	75ac      	strb	r4, [r5, #22]
            memset1( BeaconParams.Info.GwSpecific.Info, 0, 6 );
 804c450:	2206      	movs	r2, #6
 804c452:	4621      	mov	r1, r4
 804c454:	f105 0017 	add.w	r0, r5, #23
 804c458:	f008 fd3f 	bl	8054eda <memset1>
            LmHandlerCallbacks->OnClassChange( CLASS_A );
 804c45c:	4e19      	ldr	r6, [pc, #100]	; (804c4c4 <MlmeIndication+0xd0>)
 804c45e:	6833      	ldr	r3, [r6, #0]
 804c460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804c462:	4620      	mov	r0, r4
 804c464:	4798      	blx	r3
            LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 804c466:	6833      	ldr	r3, [r6, #0]
 804c468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c46a:	4628      	mov	r0, r5
 804c46c:	4798      	blx	r3
            LmHandlerDeviceTimeReq( );
 804c46e:	f7ff ffa3 	bl	804c3b8 <LmHandlerDeviceTimeReq>
        break;
 804c472:	e7da      	b.n	804c42a <MlmeIndication+0x36>
        if( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 804c474:	7863      	ldrb	r3, [r4, #1]
 804c476:	2b0d      	cmp	r3, #13
 804c478:	d010      	beq.n	804c49c <MlmeIndication+0xa8>
            BeaconParams.State = LORAMAC_HANDLER_BEACON_NRX;
 804c47a:	4e14      	ldr	r6, [pc, #80]	; (804c4cc <MlmeIndication+0xd8>)
 804c47c:	2303      	movs	r3, #3
 804c47e:	7073      	strb	r3, [r6, #1]
            BeaconParams.Info = mlmeIndication->BeaconInfo;
 804c480:	1d35      	adds	r5, r6, #4
 804c482:	3404      	adds	r4, #4
 804c484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 804c486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 804c488:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 804c48c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 804c490:	4b0c      	ldr	r3, [pc, #48]	; (804c4c4 <MlmeIndication+0xd0>)
 804c492:	681b      	ldr	r3, [r3, #0]
 804c494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c496:	4630      	mov	r0, r6
 804c498:	4798      	blx	r3
}
 804c49a:	e7c6      	b.n	804c42a <MlmeIndication+0x36>
            BeaconParams.State = LORAMAC_HANDLER_BEACON_RX;
 804c49c:	4e0b      	ldr	r6, [pc, #44]	; (804c4cc <MlmeIndication+0xd8>)
 804c49e:	2302      	movs	r3, #2
 804c4a0:	7073      	strb	r3, [r6, #1]
            BeaconParams.Info = mlmeIndication->BeaconInfo;
 804c4a2:	1d35      	adds	r5, r6, #4
 804c4a4:	3404      	adds	r4, #4
 804c4a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 804c4a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 804c4aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 804c4ae:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            LmHandlerCallbacks->OnBeaconStatusChange( &BeaconParams );
 804c4b2:	4b04      	ldr	r3, [pc, #16]	; (804c4c4 <MlmeIndication+0xd0>)
 804c4b4:	681b      	ldr	r3, [r3, #0]
 804c4b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c4b8:	4630      	mov	r0, r6
 804c4ba:	4798      	blx	r3
 804c4bc:	e7b5      	b.n	804c42a <MlmeIndication+0x36>
 804c4be:	bf00      	nop
 804c4c0:	20018178 	.word	0x20018178
 804c4c4:	200194b0 	.word	0x200194b0
 804c4c8:	200194ad 	.word	0x200194ad
 804c4cc:	20019468 	.word	0x20019468

0804c4d0 <LmHandlerBeaconReq>:
{
 804c4d0:	b510      	push	{r4, lr}
 804c4d2:	b086      	sub	sp, #24
    mlmeReq.Type = MLME_BEACON_ACQUISITION;
 804c4d4:	230b      	movs	r3, #11
 804c4d6:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 804c4da:	a801      	add	r0, sp, #4
 804c4dc:	f005 fcec 	bl	8051eb8 <LoRaMacMlmeRequest>
 804c4e0:	4604      	mov	r4, r0
    LmHandlerCallbacks->OnMacMlmeRequest( status, &mlmeReq, mlmeReq.ReqReturn.DutyCycleWaitTime );
 804c4e2:	4b08      	ldr	r3, [pc, #32]	; (804c504 <LmHandlerBeaconReq+0x34>)
 804c4e4:	681b      	ldr	r3, [r3, #0]
 804c4e6:	69db      	ldr	r3, [r3, #28]
 804c4e8:	9a05      	ldr	r2, [sp, #20]
 804c4ea:	a901      	add	r1, sp, #4
 804c4ec:	4798      	blx	r3
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 804c4ee:	9a05      	ldr	r2, [sp, #20]
 804c4f0:	4b05      	ldr	r3, [pc, #20]	; (804c508 <LmHandlerBeaconReq+0x38>)
 804c4f2:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 804c4f4:	b914      	cbnz	r4, 804c4fc <LmHandlerBeaconReq+0x2c>
        return LORAMAC_HANDLER_SUCCESS;
 804c4f6:	2000      	movs	r0, #0
}
 804c4f8:	b006      	add	sp, #24
 804c4fa:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 804c4fc:	f04f 30ff 	mov.w	r0, #4294967295
 804c500:	e7fa      	b.n	804c4f8 <LmHandlerBeaconReq+0x28>
 804c502:	bf00      	nop
 804c504:	200194b0 	.word	0x200194b0
 804c508:	200194a8 	.word	0x200194a8

0804c50c <LmHandlerJoinRequest>:
{
 804c50c:	b510      	push	{r4, lr}
 804c50e:	b086      	sub	sp, #24
    mlmeReq.Type = MLME_JOIN;
 804c510:	2301      	movs	r3, #1
 804c512:	f88d 3004 	strb.w	r3, [sp, #4]
    mlmeReq.Req.Join.Datarate = LmHandlerParams->TxDatarate;
 804c516:	4b10      	ldr	r3, [pc, #64]	; (804c558 <LmHandlerJoinRequest+0x4c>)
 804c518:	681b      	ldr	r3, [r3, #0]
 804c51a:	78db      	ldrb	r3, [r3, #3]
 804c51c:	f88d 3009 	strb.w	r3, [sp, #9]
    if( isOtaa == true )
 804c520:	b198      	cbz	r0, 804c54a <LmHandlerJoinRequest+0x3e>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 804c522:	2302      	movs	r3, #2
 804c524:	f88d 3008 	strb.w	r3, [sp, #8]
        CommissioningParams.IsOtaaActivation = true;
 804c528:	4b0c      	ldr	r3, [pc, #48]	; (804c55c <LmHandlerJoinRequest+0x50>)
 804c52a:	2201      	movs	r2, #1
 804c52c:	701a      	strb	r2, [r3, #0]
    LmHandlerCallbacks->OnMacMlmeRequest( LoRaMacMlmeRequest( &mlmeReq ), &mlmeReq, mlmeReq.ReqReturn.DutyCycleWaitTime );
 804c52e:	4b0c      	ldr	r3, [pc, #48]	; (804c560 <LmHandlerJoinRequest+0x54>)
 804c530:	681b      	ldr	r3, [r3, #0]
 804c532:	69dc      	ldr	r4, [r3, #28]
 804c534:	a801      	add	r0, sp, #4
 804c536:	f005 fcbf 	bl	8051eb8 <LoRaMacMlmeRequest>
 804c53a:	9a05      	ldr	r2, [sp, #20]
 804c53c:	a901      	add	r1, sp, #4
 804c53e:	47a0      	blx	r4
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 804c540:	9a05      	ldr	r2, [sp, #20]
 804c542:	4b08      	ldr	r3, [pc, #32]	; (804c564 <LmHandlerJoinRequest+0x58>)
 804c544:	601a      	str	r2, [r3, #0]
}
 804c546:	b006      	add	sp, #24
 804c548:	bd10      	pop	{r4, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 804c54a:	2301      	movs	r3, #1
 804c54c:	f88d 3008 	strb.w	r3, [sp, #8]
        CommissioningParams.IsOtaaActivation = false;
 804c550:	4b02      	ldr	r3, [pc, #8]	; (804c55c <LmHandlerJoinRequest+0x50>)
 804c552:	2200      	movs	r2, #0
 804c554:	701a      	strb	r2, [r3, #0]
 804c556:	e7ea      	b.n	804c52e <LmHandlerJoinRequest+0x22>
 804c558:	200194c4 	.word	0x200194c4
 804c55c:	20019488 	.word	0x20019488
 804c560:	200194b0 	.word	0x200194b0
 804c564:	200194a8 	.word	0x200194a8

0804c568 <LmHandlerInit>:
{
 804c568:	b530      	push	{r4, r5, lr}
 804c56a:	b08b      	sub	sp, #44	; 0x2c
 804c56c:	4603      	mov	r3, r0
 804c56e:	460a      	mov	r2, r1
    LmHandlerParams = handlerParams;
 804c570:	4966      	ldr	r1, [pc, #408]	; (804c70c <LmHandlerInit+0x1a4>)
 804c572:	600a      	str	r2, [r1, #0]
    LmHandlerCallbacks = handlerCallbacks;
 804c574:	4966      	ldr	r1, [pc, #408]	; (804c710 <LmHandlerInit+0x1a8>)
 804c576:	6008      	str	r0, [r1, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 804c578:	4866      	ldr	r0, [pc, #408]	; (804c714 <LmHandlerInit+0x1ac>)
 804c57a:	4967      	ldr	r1, [pc, #412]	; (804c718 <LmHandlerInit+0x1b0>)
 804c57c:	6001      	str	r1, [r0, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 804c57e:	4967      	ldr	r1, [pc, #412]	; (804c71c <LmHandlerInit+0x1b4>)
 804c580:	6041      	str	r1, [r0, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 804c582:	4967      	ldr	r1, [pc, #412]	; (804c720 <LmHandlerInit+0x1b8>)
 804c584:	6081      	str	r1, [r0, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 804c586:	4967      	ldr	r1, [pc, #412]	; (804c724 <LmHandlerInit+0x1bc>)
 804c588:	60c1      	str	r1, [r0, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 804c58a:	681c      	ldr	r4, [r3, #0]
 804c58c:	4966      	ldr	r1, [pc, #408]	; (804c728 <LmHandlerInit+0x1c0>)
 804c58e:	600c      	str	r4, [r1, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 804c590:	685c      	ldr	r4, [r3, #4]
 804c592:	604c      	str	r4, [r1, #4]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 804c594:	4c65      	ldr	r4, [pc, #404]	; (804c72c <LmHandlerInit+0x1c4>)
 804c596:	608c      	str	r4, [r1, #8]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 804c598:	68db      	ldr	r3, [r3, #12]
 804c59a:	60cb      	str	r3, [r1, #12]
    IsClassBSwitchPending = false;
 804c59c:	2300      	movs	r3, #0
 804c59e:	4c64      	ldr	r4, [pc, #400]	; (804c730 <LmHandlerInit+0x1c8>)
 804c5a0:	7023      	strb	r3, [r4, #0]
    IsUplinkTxPending = false;
 804c5a2:	4c64      	ldr	r4, [pc, #400]	; (804c734 <LmHandlerInit+0x1cc>)
 804c5a4:	7023      	strb	r3, [r4, #0]
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams->Region ) != LORAMAC_STATUS_OK )
 804c5a6:	7812      	ldrb	r2, [r2, #0]
 804c5a8:	f004 fc3c 	bl	8050e24 <LoRaMacInitialization>
 804c5ac:	2800      	cmp	r0, #0
 804c5ae:	f040 80a5 	bne.w	804c6fc <LmHandlerInit+0x194>
    nbNvmData = NvmDataMgmtRestore( );
 804c5b2:	f7ff fe66 	bl	804c282 <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 804c5b6:	4601      	mov	r1, r0
 804c5b8:	2800      	cmp	r0, #0
 804c5ba:	d05a      	beq.n	804c672 <LmHandlerInit+0x10a>
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE, nbNvmData );
 804c5bc:	4b54      	ldr	r3, [pc, #336]	; (804c710 <LmHandlerInit+0x1a8>)
 804c5be:	681b      	ldr	r3, [r3, #0]
 804c5c0:	691b      	ldr	r3, [r3, #16]
 804c5c2:	2000      	movs	r0, #0
 804c5c4:	4798      	blx	r3
    mibReq.Type = MIB_DEV_EUI;
 804c5c6:	2302      	movs	r3, #2
 804c5c8:	f88d 3004 	strb.w	r3, [sp, #4]
    LoRaMacMibGetRequestConfirm( &mibReq );
 804c5cc:	a801      	add	r0, sp, #4
 804c5ce:	f004 fe71 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 804c5d2:	4c59      	ldr	r4, [pc, #356]	; (804c738 <LmHandlerInit+0x1d0>)
 804c5d4:	2208      	movs	r2, #8
 804c5d6:	9902      	ldr	r1, [sp, #8]
 804c5d8:	1c60      	adds	r0, r4, #1
 804c5da:	f008 fc68 	bl	8054eae <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 804c5de:	2303      	movs	r3, #3
 804c5e0:	f88d 3004 	strb.w	r3, [sp, #4]
    LoRaMacMibGetRequestConfirm( &mibReq );
 804c5e4:	a801      	add	r0, sp, #4
 804c5e6:	f004 fe65 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 804c5ea:	2208      	movs	r2, #8
 804c5ec:	9902      	ldr	r1, [sp, #8]
 804c5ee:	f104 0009 	add.w	r0, r4, #9
 804c5f2:	f008 fc5c 	bl	8054eae <memcpy1>
    mibReq.Type = MIB_SE_PIN;
 804c5f6:	2504      	movs	r5, #4
 804c5f8:	f88d 5004 	strb.w	r5, [sp, #4]
    LoRaMacMibGetRequestConfirm( &mibReq );
 804c5fc:	eb0d 0005 	add.w	r0, sp, r5
 804c600:	f004 fe58 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.SePin, mibReq.Param.SePin, 4 );
 804c604:	462a      	mov	r2, r5
 804c606:	9902      	ldr	r1, [sp, #8]
 804c608:	f104 0011 	add.w	r0, r4, #17
 804c60c:	f008 fc4f 	bl	8054eae <memcpy1>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 804c610:	231d      	movs	r3, #29
 804c612:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.EnablePublicNetwork = LmHandlerParams->PublicNetworkEnable;
 804c616:	4c3d      	ldr	r4, [pc, #244]	; (804c70c <LmHandlerInit+0x1a4>)
 804c618:	6823      	ldr	r3, [r4, #0]
 804c61a:	791b      	ldrb	r3, [r3, #4]
 804c61c:	f88d 3008 	strb.w	r3, [sp, #8]
    LoRaMacMibSetRequestConfirm( &mibReq );
 804c620:	eb0d 0005 	add.w	r0, sp, r5
 804c624:	f004 ffa6 	bl	8051574 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 804c628:	2305      	movs	r3, #5
 804c62a:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.AdrEnable = LmHandlerParams->AdrEnable;
 804c62e:	6823      	ldr	r3, [r4, #0]
 804c630:	785b      	ldrb	r3, [r3, #1]
 804c632:	f88d 3008 	strb.w	r3, [sp, #8]
    LoRaMacMibSetRequestConfirm( &mibReq );
 804c636:	eb0d 0005 	add.w	r0, sp, r5
 804c63a:	f004 ff9b 	bl	8051574 <LoRaMacMibSetRequestConfirm>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams->DutyCycleEnabled );
 804c63e:	6823      	ldr	r3, [r4, #0]
 804c640:	7958      	ldrb	r0, [r3, #5]
 804c642:	f005 fe1f 	bl	8052284 <LoRaMacTestSetDutyCycleOn>
    LoRaMacStart( );
 804c646:	f004 fdc1 	bl	80511cc <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 804c64a:	2301      	movs	r3, #1
 804c64c:	f88d 3004 	strb.w	r3, [sp, #4]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804c650:	eb0d 0005 	add.w	r0, sp, r5
 804c654:	f004 fe2e 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
 804c658:	2800      	cmp	r0, #0
 804c65a:	d152      	bne.n	804c702 <LmHandlerInit+0x19a>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 804c65c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 804c660:	2b00      	cmp	r3, #0
 804c662:	d151      	bne.n	804c708 <LmHandlerInit+0x1a0>
            LmHandlerCallbacks->OnNetworkParametersChange( &CommissioningParams );
 804c664:	4b2a      	ldr	r3, [pc, #168]	; (804c710 <LmHandlerInit+0x1a8>)
 804c666:	681b      	ldr	r3, [r3, #0]
 804c668:	695b      	ldr	r3, [r3, #20]
 804c66a:	4833      	ldr	r0, [pc, #204]	; (804c738 <LmHandlerInit+0x1d0>)
 804c66c:	4798      	blx	r3
    return LORAMAC_HANDLER_SUCCESS;
 804c66e:	2000      	movs	r0, #0
 804c670:	e048      	b.n	804c704 <LmHandlerInit+0x19c>
        mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 804c672:	2335      	movs	r3, #53	; 0x35
 804c674:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 804c678:	4b30      	ldr	r3, [pc, #192]	; (804c73c <LmHandlerInit+0x1d4>)
 804c67a:	9302      	str	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 804c67c:	a801      	add	r0, sp, #4
 804c67e:	f004 ff79 	bl	8051574 <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_NET_ID;
 804c682:	2306      	movs	r3, #6
 804c684:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 804c688:	2400      	movs	r4, #0
 804c68a:	9402      	str	r4, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 804c68c:	a801      	add	r0, sp, #4
 804c68e:	f004 ff71 	bl	8051574 <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_F_NWK_S_INT_KEY;
 804c692:	230c      	movs	r3, #12
 804c694:	f88d 3004 	strb.w	r3, [sp, #4]
		mibReq.Param.FNwkSIntKey = FNwkSIntKey;
 804c698:	4b29      	ldr	r3, [pc, #164]	; (804c740 <LmHandlerInit+0x1d8>)
 804c69a:	9302      	str	r3, [sp, #8]
		LoRaMacMibSetRequestConfirm( &mibReq );
 804c69c:	a801      	add	r0, sp, #4
 804c69e:	f004 ff69 	bl	8051574 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_S_NWK_S_INT_KEY;
 804c6a2:	230d      	movs	r3, #13
 804c6a4:	f88d 3004 	strb.w	r3, [sp, #4]
		mibReq.Param.SNwkSIntKey = SNwkSIntKey;
 804c6a8:	4b26      	ldr	r3, [pc, #152]	; (804c744 <LmHandlerInit+0x1dc>)
 804c6aa:	9302      	str	r3, [sp, #8]
		LoRaMacMibSetRequestConfirm( &mibReq );
 804c6ac:	a801      	add	r0, sp, #4
 804c6ae:	f004 ff61 	bl	8051574 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_NWK_S_ENC_KEY;
 804c6b2:	230e      	movs	r3, #14
 804c6b4:	f88d 3004 	strb.w	r3, [sp, #4]
		mibReq.Param.NwkSEncKey = NwkSEncKey;
 804c6b8:	4b23      	ldr	r3, [pc, #140]	; (804c748 <LmHandlerInit+0x1e0>)
 804c6ba:	9302      	str	r3, [sp, #8]
		LoRaMacMibSetRequestConfirm( &mibReq );
 804c6bc:	a801      	add	r0, sp, #4
 804c6be:	f004 ff59 	bl	8051574 <LoRaMacMibSetRequestConfirm>
		mibReq.Type = MIB_APP_S_KEY;
 804c6c2:	230f      	movs	r3, #15
 804c6c4:	f88d 3004 	strb.w	r3, [sp, #4]
		mibReq.Param.AppSKey = AppSKey;
 804c6c8:	4b20      	ldr	r3, [pc, #128]	; (804c74c <LmHandlerInit+0x1e4>)
 804c6ca:	9302      	str	r3, [sp, #8]
		LoRaMacMibSetRequestConfirm( &mibReq );
 804c6cc:	a801      	add	r0, sp, #4
 804c6ce:	f004 ff51 	bl	8051574 <LoRaMacMibSetRequestConfirm>
        srand1( LmHandlerCallbacks->GetRandomSeed( ) );
 804c6d2:	4b0f      	ldr	r3, [pc, #60]	; (804c710 <LmHandlerInit+0x1a8>)
 804c6d4:	681b      	ldr	r3, [r3, #0]
 804c6d6:	689b      	ldr	r3, [r3, #8]
 804c6d8:	4798      	blx	r3
 804c6da:	f008 fbd5 	bl	8054e88 <srand1>
        CommissioningParams.DevAddr = randr( 0, 0x01FFFFFF );
 804c6de:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 804c6e2:	4620      	mov	r0, r4
 804c6e4:	f008 fbd6 	bl	8054e94 <randr>
 804c6e8:	4b13      	ldr	r3, [pc, #76]	; (804c738 <LmHandlerInit+0x1d0>)
 804c6ea:	61d8      	str	r0, [r3, #28]
        mibReq.Type = MIB_DEV_ADDR;
 804c6ec:	2307      	movs	r3, #7
 804c6ee:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 804c6f2:	9002      	str	r0, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 804c6f4:	a801      	add	r0, sp, #4
 804c6f6:	f004 ff3d 	bl	8051574 <LoRaMacMibSetRequestConfirm>
 804c6fa:	e764      	b.n	804c5c6 <LmHandlerInit+0x5e>
        return LORAMAC_HANDLER_ERROR;
 804c6fc:	f04f 30ff 	mov.w	r0, #4294967295
 804c700:	e000      	b.n	804c704 <LmHandlerInit+0x19c>
    return LORAMAC_HANDLER_SUCCESS;
 804c702:	2000      	movs	r0, #0
}
 804c704:	b00b      	add	sp, #44	; 0x2c
 804c706:	bd30      	pop	{r4, r5, pc}
    return LORAMAC_HANDLER_SUCCESS;
 804c708:	2000      	movs	r0, #0
 804c70a:	e7fb      	b.n	804c704 <LmHandlerInit+0x19c>
 804c70c:	200194c4 	.word	0x200194c4
 804c710:	200194b0 	.word	0x200194b0
 804c714:	200194d8 	.word	0x200194d8
 804c718:	0804c379 	.word	0x0804c379
 804c71c:	0804c9a5 	.word	0x0804c9a5
 804c720:	0804ca51 	.word	0x0804ca51
 804c724:	0804c3f5 	.word	0x0804c3f5
 804c728:	200194c8 	.word	0x200194c8
 804c72c:	0804c27d 	.word	0x0804c27d
 804c730:	200194ac 	.word	0x200194ac
 804c734:	200194ad 	.word	0x200194ad
 804c738:	20019488 	.word	0x20019488
 804c73c:	01000300 	.word	0x01000300
 804c740:	20018150 	.word	0x20018150
 804c744:	2001818c 	.word	0x2001818c
 804c748:	20018168 	.word	0x20018168
 804c74c:	20018140 	.word	0x20018140

0804c750 <LmHandlerGetDutyCycleWaitTime>:
}
 804c750:	4b01      	ldr	r3, [pc, #4]	; (804c758 <LmHandlerGetDutyCycleWaitTime+0x8>)
 804c752:	6818      	ldr	r0, [r3, #0]
 804c754:	4770      	bx	lr
 804c756:	bf00      	nop
 804c758:	200194a8 	.word	0x200194a8

0804c75c <LmHandlerJoin>:
{
 804c75c:	b508      	push	{r3, lr}
    LmHandlerJoinRequest( CommissioningParams.IsOtaaActivation );
 804c75e:	4b02      	ldr	r3, [pc, #8]	; (804c768 <LmHandlerJoin+0xc>)
 804c760:	7818      	ldrb	r0, [r3, #0]
 804c762:	f7ff fed3 	bl	804c50c <LmHandlerJoinRequest>
}
 804c766:	bd08      	pop	{r3, pc}
 804c768:	20019488 	.word	0x20019488

0804c76c <LmHandlerJoinStatus>:
{
 804c76c:	b500      	push	{lr}
 804c76e:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 804c770:	2301      	movs	r3, #1
 804c772:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 804c776:	a801      	add	r0, sp, #4
 804c778:	f004 fd9c 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 804c77c:	b920      	cbnz	r0, 804c788 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 804c77e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 804c782:	b110      	cbz	r0, 804c78a <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 804c784:	2001      	movs	r0, #1
 804c786:	e000      	b.n	804c78a <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 804c788:	2000      	movs	r0, #0
}
 804c78a:	b00b      	add	sp, #44	; 0x2c
 804c78c:	f85d fb04 	ldr.w	pc, [sp], #4

0804c790 <LmHandlerIsBusy>:
{
 804c790:	b538      	push	{r3, r4, r5, lr}
    if( LoRaMacIsBusy( ) == true )
 804c792:	f002 ff99 	bl	804f6c8 <LoRaMacIsBusy>
 804c796:	4605      	mov	r5, r0
 804c798:	b108      	cbz	r0, 804c79e <LmHandlerIsBusy+0xe>
}
 804c79a:	4628      	mov	r0, r5
 804c79c:	bd38      	pop	{r3, r4, r5, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 804c79e:	f7ff ffe5 	bl	804c76c <LmHandlerJoinStatus>
 804c7a2:	2801      	cmp	r0, #1
 804c7a4:	d101      	bne.n	804c7aa <LmHandlerIsBusy+0x1a>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 804c7a6:	2400      	movs	r4, #0
 804c7a8:	e005      	b.n	804c7b6 <LmHandlerIsBusy+0x26>
        LmHandlerJoin( );
 804c7aa:	f7ff ffd7 	bl	804c75c <LmHandlerJoin>
        return true;
 804c7ae:	2501      	movs	r5, #1
 804c7b0:	e7f3      	b.n	804c79a <LmHandlerIsBusy+0xa>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 804c7b2:	3401      	adds	r4, #1
 804c7b4:	b264      	sxtb	r4, r4
 804c7b6:	2c03      	cmp	r4, #3
 804c7b8:	dcef      	bgt.n	804c79a <LmHandlerIsBusy+0xa>
        if( LmHandlerPackages[i] != NULL )
 804c7ba:	4b05      	ldr	r3, [pc, #20]	; (804c7d0 <LmHandlerIsBusy+0x40>)
 804c7bc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 804c7c0:	2b00      	cmp	r3, #0
 804c7c2:	d0f6      	beq.n	804c7b2 <LmHandlerIsBusy+0x22>
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 804c7c4:	68db      	ldr	r3, [r3, #12]
 804c7c6:	4798      	blx	r3
 804c7c8:	2800      	cmp	r0, #0
 804c7ca:	d0f2      	beq.n	804c7b2 <LmHandlerIsBusy+0x22>
                return true;
 804c7cc:	4605      	mov	r5, r0
 804c7ce:	e7e4      	b.n	804c79a <LmHandlerIsBusy+0xa>
 804c7d0:	200194b4 	.word	0x200194b4

0804c7d4 <LmHandlerSend>:
{
 804c7d4:	b530      	push	{r4, r5, lr}
 804c7d6:	b087      	sub	sp, #28
 804c7d8:	4604      	mov	r4, r0
 804c7da:	460d      	mov	r5, r1
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 804c7dc:	f7ff ffc6 	bl	804c76c <LmHandlerJoinStatus>
 804c7e0:	2801      	cmp	r0, #1
 804c7e2:	d136      	bne.n	804c852 <LmHandlerSend+0x7e>
    TxParams.MsgType = isTxConfirmed;
 804c7e4:	4b24      	ldr	r3, [pc, #144]	; (804c878 <LmHandlerSend+0xa4>)
 804c7e6:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 804c7e8:	3d00      	subs	r5, #0
 804c7ea:	bf18      	it	ne
 804c7ec:	2501      	movne	r5, #1
 804c7ee:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams->TxDatarate;
 804c7f2:	4b22      	ldr	r3, [pc, #136]	; (804c87c <LmHandlerSend+0xa8>)
 804c7f4:	681b      	ldr	r3, [r3, #0]
 804c7f6:	f993 3003 	ldrsb.w	r3, [r3, #3]
 804c7fa:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 804c7fe:	4669      	mov	r1, sp
 804c800:	7860      	ldrb	r0, [r4, #1]
 804c802:	f004 fceb 	bl	80511dc <LoRaMacQueryTxPossible>
 804c806:	b358      	cbz	r0, 804c860 <LmHandlerSend+0x8c>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 804c808:	2300      	movs	r3, #0
 804c80a:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 804c80e:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 804c810:	f8ad 3010 	strh.w	r3, [sp, #16]
    TxParams.AppData = *appData;
 804c814:	4b18      	ldr	r3, [pc, #96]	; (804c878 <LmHandlerSend+0xa4>)
 804c816:	f103 0210 	add.w	r2, r3, #16
 804c81a:	e894 0003 	ldmia.w	r4, {r0, r1}
 804c81e:	e882 0003 	stmia.w	r2, {r0, r1}
    TxParams.Datarate = LmHandlerParams->TxDatarate;
 804c822:	4a16      	ldr	r2, [pc, #88]	; (804c87c <LmHandlerSend+0xa8>)
 804c824:	6812      	ldr	r2, [r2, #0]
 804c826:	f992 2003 	ldrsb.w	r2, [r2, #3]
 804c82a:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq );
 804c82c:	a801      	add	r0, sp, #4
 804c82e:	f005 fc4f 	bl	80520d0 <LoRaMacMcpsRequest>
 804c832:	4604      	mov	r4, r0
    LmHandlerCallbacks->OnMacMcpsRequest( status, &mcpsReq, mcpsReq.ReqReturn.DutyCycleWaitTime );
 804c834:	4b12      	ldr	r3, [pc, #72]	; (804c880 <LmHandlerSend+0xac>)
 804c836:	681b      	ldr	r3, [r3, #0]
 804c838:	699b      	ldr	r3, [r3, #24]
 804c83a:	9a05      	ldr	r2, [sp, #20]
 804c83c:	a901      	add	r1, sp, #4
 804c83e:	4798      	blx	r3
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 804c840:	9a05      	ldr	r2, [sp, #20]
 804c842:	4b10      	ldr	r3, [pc, #64]	; (804c884 <LmHandlerSend+0xb0>)
 804c844:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 804c846:	b9a4      	cbnz	r4, 804c872 <LmHandlerSend+0x9e>
        IsUplinkTxPending = false;
 804c848:	2000      	movs	r0, #0
 804c84a:	4b0f      	ldr	r3, [pc, #60]	; (804c888 <LmHandlerSend+0xb4>)
 804c84c:	7018      	strb	r0, [r3, #0]
}
 804c84e:	b007      	add	sp, #28
 804c850:	bd30      	pop	{r4, r5, pc}
        LmHandlerJoinRequest( CommissioningParams.IsOtaaActivation );
 804c852:	4b0e      	ldr	r3, [pc, #56]	; (804c88c <LmHandlerSend+0xb8>)
 804c854:	7818      	ldrb	r0, [r3, #0]
 804c856:	f7ff fe59 	bl	804c50c <LmHandlerJoinRequest>
        return LORAMAC_HANDLER_ERROR;
 804c85a:	f04f 30ff 	mov.w	r0, #4294967295
 804c85e:	e7f6      	b.n	804c84e <LmHandlerSend+0x7a>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 804c860:	7823      	ldrb	r3, [r4, #0]
 804c862:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 804c866:	7863      	ldrb	r3, [r4, #1]
 804c868:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 804c86c:	6863      	ldr	r3, [r4, #4]
 804c86e:	9303      	str	r3, [sp, #12]
 804c870:	e7d0      	b.n	804c814 <LmHandlerSend+0x40>
        return LORAMAC_HANDLER_ERROR;
 804c872:	f04f 30ff 	mov.w	r0, #4294967295
 804c876:	e7ea      	b.n	804c84e <LmHandlerSend+0x7a>
 804c878:	2001819c 	.word	0x2001819c
 804c87c:	200194c4 	.word	0x200194c4
 804c880:	200194b0 	.word	0x200194b0
 804c884:	200194a8 	.word	0x200194a8
 804c888:	200194ad 	.word	0x200194ad
 804c88c:	20019488 	.word	0x20019488

0804c890 <LmHandlerPingSlotReq>:
{
 804c890:	b510      	push	{r4, lr}
 804c892:	b088      	sub	sp, #32
    mlmeReq.Type = MLME_PING_SLOT_INFO;
 804c894:	230c      	movs	r3, #12
 804c896:	f88d 300c 	strb.w	r3, [sp, #12]
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.Periodicity = periodicity;
 804c89a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 804c89e:	f360 0302 	bfi	r3, r0, #0, #3
    mlmeReq.Req.PingSlotInfo.PingSlot.Fields.RFU = 0;
 804c8a2:	f36f 03c7 	bfc	r3, #3, #5
 804c8a6:	f88d 3010 	strb.w	r3, [sp, #16]
    status = LoRaMacMlmeRequest( &mlmeReq );
 804c8aa:	a803      	add	r0, sp, #12
 804c8ac:	f005 fb04 	bl	8051eb8 <LoRaMacMlmeRequest>
 804c8b0:	4604      	mov	r4, r0
    LmHandlerCallbacks->OnMacMlmeRequest( status, &mlmeReq, mlmeReq.ReqReturn.DutyCycleWaitTime );
 804c8b2:	4b0d      	ldr	r3, [pc, #52]	; (804c8e8 <LmHandlerPingSlotReq+0x58>)
 804c8b4:	681b      	ldr	r3, [r3, #0]
 804c8b6:	69db      	ldr	r3, [r3, #28]
 804c8b8:	9a07      	ldr	r2, [sp, #28]
 804c8ba:	a903      	add	r1, sp, #12
 804c8bc:	4798      	blx	r3
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 804c8be:	9a07      	ldr	r2, [sp, #28]
 804c8c0:	4b0a      	ldr	r3, [pc, #40]	; (804c8ec <LmHandlerPingSlotReq+0x5c>)
 804c8c2:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 804c8c4:	b96c      	cbnz	r4, 804c8e2 <LmHandlerPingSlotReq+0x52>
        LmHandlerAppData_t appData =
 804c8c6:	2300      	movs	r3, #0
 804c8c8:	f88d 3004 	strb.w	r3, [sp, #4]
 804c8cc:	f88d 3005 	strb.w	r3, [sp, #5]
 804c8d0:	9302      	str	r3, [sp, #8]
        return LmHandlerSend( &appData, LmHandlerParams->IsTxConfirmed );
 804c8d2:	4b07      	ldr	r3, [pc, #28]	; (804c8f0 <LmHandlerPingSlotReq+0x60>)
 804c8d4:	681b      	ldr	r3, [r3, #0]
 804c8d6:	7899      	ldrb	r1, [r3, #2]
 804c8d8:	a801      	add	r0, sp, #4
 804c8da:	f7ff ff7b 	bl	804c7d4 <LmHandlerSend>
}
 804c8de:	b008      	add	sp, #32
 804c8e0:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 804c8e2:	f04f 30ff 	mov.w	r0, #4294967295
 804c8e6:	e7fa      	b.n	804c8de <LmHandlerPingSlotReq+0x4e>
 804c8e8:	200194b0 	.word	0x200194b0
 804c8ec:	200194a8 	.word	0x200194a8
 804c8f0:	200194c4 	.word	0x200194c4

0804c8f4 <LmHandlerRequestClass>:
{
 804c8f4:	b510      	push	{r4, lr}
 804c8f6:	b08a      	sub	sp, #40	; 0x28
 804c8f8:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 804c8fa:	2300      	movs	r3, #0
 804c8fc:	f88d 3004 	strb.w	r3, [sp, #4]
    LoRaMacMibGetRequestConfirm( &mibReq );
 804c900:	a801      	add	r0, sp, #4
 804c902:	f004 fcd7 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
    currentClass = mibReq.Param.Class;
 804c906:	f89d 3008 	ldrb.w	r3, [sp, #8]
    if( currentClass != newClass )
 804c90a:	42a3      	cmp	r3, r4
 804c90c:	d030      	beq.n	804c970 <LmHandlerRequestClass+0x7c>
        switch( newClass )
 804c90e:	2c01      	cmp	r4, #1
 804c910:	d015      	beq.n	804c93e <LmHandlerRequestClass+0x4a>
 804c912:	2c02      	cmp	r4, #2
 804c914:	d01a      	beq.n	804c94c <LmHandlerRequestClass+0x58>
 804c916:	b11c      	cbz	r4, 804c920 <LmHandlerRequestClass+0x2c>
 804c918:	2400      	movs	r4, #0
}
 804c91a:	4620      	mov	r0, r4
 804c91c:	b00a      	add	sp, #40	; 0x28
 804c91e:	bd10      	pop	{r4, pc}
                if( currentClass != CLASS_A )
 804c920:	b90b      	cbnz	r3, 804c926 <LmHandlerRequestClass+0x32>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 804c922:	2400      	movs	r4, #0
 804c924:	e7f9      	b.n	804c91a <LmHandlerRequestClass+0x26>
                    mibReq.Param.Class = CLASS_A;
 804c926:	2300      	movs	r3, #0
 804c928:	f88d 3008 	strb.w	r3, [sp, #8]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804c92c:	a801      	add	r0, sp, #4
 804c92e:	f004 fe21 	bl	8051574 <LoRaMacMibSetRequestConfirm>
 804c932:	b9f8      	cbnz	r0, 804c974 <LmHandlerRequestClass+0x80>
                        LmHandlerCallbacks->OnClassChange( CLASS_A );
 804c934:	4b12      	ldr	r3, [pc, #72]	; (804c980 <LmHandlerRequestClass+0x8c>)
 804c936:	681b      	ldr	r3, [r3, #0]
 804c938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804c93a:	4798      	blx	r3
 804c93c:	e7ed      	b.n	804c91a <LmHandlerRequestClass+0x26>
                errorStatus = LmHandlerDeviceTimeReq( );
 804c93e:	f7ff fd3b 	bl	804c3b8 <LmHandlerDeviceTimeReq>
 804c942:	4604      	mov	r4, r0
                IsClassBSwitchPending = true;
 804c944:	4b0f      	ldr	r3, [pc, #60]	; (804c984 <LmHandlerRequestClass+0x90>)
 804c946:	2201      	movs	r2, #1
 804c948:	701a      	strb	r2, [r3, #0]
            break;
 804c94a:	e7e6      	b.n	804c91a <LmHandlerRequestClass+0x26>
                if( currentClass != CLASS_A )
 804c94c:	b96b      	cbnz	r3, 804c96a <LmHandlerRequestClass+0x76>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 804c94e:	2400      	movs	r4, #0
                mibReq.Param.Class = CLASS_C;
 804c950:	2302      	movs	r3, #2
 804c952:	f88d 3008 	strb.w	r3, [sp, #8]
                if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 804c956:	a801      	add	r0, sp, #4
 804c958:	f004 fe0c 	bl	8051574 <LoRaMacMibSetRequestConfirm>
 804c95c:	b968      	cbnz	r0, 804c97a <LmHandlerRequestClass+0x86>
                    LmHandlerCallbacks->OnClassChange( CLASS_C );
 804c95e:	4b08      	ldr	r3, [pc, #32]	; (804c980 <LmHandlerRequestClass+0x8c>)
 804c960:	681b      	ldr	r3, [r3, #0]
 804c962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804c964:	2002      	movs	r0, #2
 804c966:	4798      	blx	r3
 804c968:	e7d7      	b.n	804c91a <LmHandlerRequestClass+0x26>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 804c96a:	f04f 34ff 	mov.w	r4, #4294967295
 804c96e:	e7ef      	b.n	804c950 <LmHandlerRequestClass+0x5c>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 804c970:	2400      	movs	r4, #0
 804c972:	e7d2      	b.n	804c91a <LmHandlerRequestClass+0x26>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 804c974:	f04f 34ff 	mov.w	r4, #4294967295
 804c978:	e7cf      	b.n	804c91a <LmHandlerRequestClass+0x26>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 804c97a:	f04f 34ff 	mov.w	r4, #4294967295
 804c97e:	e7cc      	b.n	804c91a <LmHandlerRequestClass+0x26>
 804c980:	200194b0 	.word	0x200194b0
 804c984:	200194ac 	.word	0x200194ac

0804c988 <LmHandlerGetCurrentClass>:
{
 804c988:	b500      	push	{lr}
 804c98a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_DEVICE_CLASS;
 804c98c:	2300      	movs	r3, #0
 804c98e:	f88d 3004 	strb.w	r3, [sp, #4]
    LoRaMacMibGetRequestConfirm( &mibReq );
 804c992:	a801      	add	r0, sp, #4
 804c994:	f004 fc8e 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
}
 804c998:	f89d 0008 	ldrb.w	r0, [sp, #8]
 804c99c:	b00b      	add	sp, #44	; 0x2c
 804c99e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0804c9a4 <McpsIndication>:
    RxParams.IsMcpsIndication = 1;
 804c9a4:	4a20      	ldr	r2, [pc, #128]	; (804ca28 <McpsIndication+0x84>)
 804c9a6:	2301      	movs	r3, #1
 804c9a8:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 804c9aa:	7843      	ldrb	r3, [r0, #1]
 804c9ac:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 804c9ae:	2b00      	cmp	r3, #0
 804c9b0:	d139      	bne.n	804ca26 <McpsIndication+0x82>
{
 804c9b2:	b510      	push	{r4, lr}
 804c9b4:	b082      	sub	sp, #8
 804c9b6:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 804c9b8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 804c9bc:	4611      	mov	r1, r2
 804c9be:	7213      	strb	r3, [r2, #8]
    RxParams.Rssi = mcpsIndication->Rssi;
 804c9c0:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 804c9c4:	7253      	strb	r3, [r2, #9]
    RxParams.Snr = mcpsIndication->Snr;
 804c9c6:	f990 3010 	ldrsb.w	r3, [r0, #16]
 804c9ca:	7293      	strb	r3, [r2, #10]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 804c9cc:	6943      	ldr	r3, [r0, #20]
 804c9ce:	60d3      	str	r3, [r2, #12]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 804c9d0:	f990 3011 	ldrsb.w	r3, [r0, #17]
 804c9d4:	7413      	strb	r3, [r2, #16]
    appData.Port = mcpsIndication->Port;
 804c9d6:	78c3      	ldrb	r3, [r0, #3]
 804c9d8:	f88d 3000 	strb.w	r3, [sp]
    appData.BufferSize = mcpsIndication->BufferSize;
 804c9dc:	7b03      	ldrb	r3, [r0, #12]
 804c9de:	f88d 3001 	strb.w	r3, [sp, #1]
    appData.Buffer = mcpsIndication->Buffer;
 804c9e2:	6883      	ldr	r3, [r0, #8]
 804c9e4:	9301      	str	r3, [sp, #4]
    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 804c9e6:	4b11      	ldr	r3, [pc, #68]	; (804ca2c <McpsIndication+0x88>)
 804c9e8:	681b      	ldr	r3, [r3, #0]
 804c9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804c9ec:	4668      	mov	r0, sp
 804c9ee:	4798      	blx	r3
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 804c9f0:	7f23      	ldrb	r3, [r4, #28]
 804c9f2:	b12b      	cbz	r3, 804ca00 <McpsIndication+0x5c>
        LmHandlerCallbacks->OnSysTimeUpdate( true, 0 );
 804c9f4:	4b0d      	ldr	r3, [pc, #52]	; (804ca2c <McpsIndication+0x88>)
 804c9f6:	681b      	ldr	r3, [r3, #0]
 804c9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804c9fa:	2100      	movs	r1, #0
 804c9fc:	2001      	movs	r0, #1
 804c9fe:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 804ca00:	4621      	mov	r1, r4
 804ca02:	2001      	movs	r0, #1
 804ca04:	f7ff fc82 	bl	804c30c <LmHandlerPackagesNotify>
    if( ( ( mcpsIndication->FramePending == true ) && ( LmHandlerGetCurrentClass( ) == CLASS_A ) ) ||
 804ca08:	7963      	ldrb	r3, [r4, #5]
 804ca0a:	2b01      	cmp	r3, #1
 804ca0c:	d006      	beq.n	804ca1c <McpsIndication+0x78>
        ( mcpsIndication->ResponseTimeout > 0 ) )
 804ca0e:	6a23      	ldr	r3, [r4, #32]
    if( ( ( mcpsIndication->FramePending == true ) && ( LmHandlerGetCurrentClass( ) == CLASS_A ) ) ||
 804ca10:	b113      	cbz	r3, 804ca18 <McpsIndication+0x74>
        IsUplinkTxPending = true;
 804ca12:	4b07      	ldr	r3, [pc, #28]	; (804ca30 <McpsIndication+0x8c>)
 804ca14:	2201      	movs	r2, #1
 804ca16:	701a      	strb	r2, [r3, #0]
}
 804ca18:	b002      	add	sp, #8
 804ca1a:	bd10      	pop	{r4, pc}
    if( ( ( mcpsIndication->FramePending == true ) && ( LmHandlerGetCurrentClass( ) == CLASS_A ) ) ||
 804ca1c:	f7ff ffb4 	bl	804c988 <LmHandlerGetCurrentClass>
 804ca20:	2800      	cmp	r0, #0
 804ca22:	d0f6      	beq.n	804ca12 <McpsIndication+0x6e>
 804ca24:	e7f3      	b.n	804ca0e <McpsIndication+0x6a>
 804ca26:	4770      	bx	lr
 804ca28:	20018178 	.word	0x20018178
 804ca2c:	200194b0 	.word	0x200194b0
 804ca30:	200194ad 	.word	0x200194ad

0804ca34 <LmHandlerGetCurrentDatarate>:
{
 804ca34:	b500      	push	{lr}
 804ca36:	b08b      	sub	sp, #44	; 0x2c
    mibGet.Type = MIB_CHANNELS_DATARATE;
 804ca38:	232d      	movs	r3, #45	; 0x2d
 804ca3a:	f88d 3004 	strb.w	r3, [sp, #4]
    LoRaMacMibGetRequestConfirm( &mibGet );
 804ca3e:	a801      	add	r0, sp, #4
 804ca40:	f004 fc38 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
}
 804ca44:	f99d 0008 	ldrsb.w	r0, [sp, #8]
 804ca48:	b00b      	add	sp, #44	; 0x2c
 804ca4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0804ca50 <MlmeConfirm>:
{
 804ca50:	b530      	push	{r4, r5, lr}
 804ca52:	b08b      	sub	sp, #44	; 0x2c
 804ca54:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 804ca56:	4830      	ldr	r0, [pc, #192]	; (804cb18 <MlmeConfirm+0xc8>)
 804ca58:	2300      	movs	r3, #0
 804ca5a:	7003      	strb	r3, [r0, #0]
    TxParams.Status = mlmeConfirm->Status;
 804ca5c:	7863      	ldrb	r3, [r4, #1]
 804ca5e:	7043      	strb	r3, [r0, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 804ca60:	4b2e      	ldr	r3, [pc, #184]	; (804cb1c <MlmeConfirm+0xcc>)
 804ca62:	681b      	ldr	r3, [r3, #0]
 804ca64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804ca66:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 804ca68:	4621      	mov	r1, r4
 804ca6a:	2002      	movs	r0, #2
 804ca6c:	f7ff fc4e 	bl	804c30c <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 804ca70:	7823      	ldrb	r3, [r4, #0]
 804ca72:	3b01      	subs	r3, #1
 804ca74:	2b0b      	cmp	r3, #11
 804ca76:	d81d      	bhi.n	804cab4 <MlmeConfirm+0x64>
 804ca78:	e8df f003 	tbb	[pc, r3]
 804ca7c:	1c1c1c06 	.word	0x1c1c1c06
 804ca80:	1c1c1c1c 	.word	0x1c1c1c1c
 804ca84:	34291c22 	.word	0x34291c22
            mibReq.Type = MIB_DEV_ADDR;
 804ca88:	2307      	movs	r3, #7
 804ca8a:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibGetRequestConfirm( &mibReq );
 804ca8e:	a801      	add	r0, sp, #4
 804ca90:	f004 fc10 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
            JoinParams.CommissioningParams->DevAddr = mibReq.Param.DevAddr;
 804ca94:	4d22      	ldr	r5, [pc, #136]	; (804cb20 <MlmeConfirm+0xd0>)
 804ca96:	682b      	ldr	r3, [r5, #0]
 804ca98:	9a02      	ldr	r2, [sp, #8]
 804ca9a:	61da      	str	r2, [r3, #28]
            JoinParams.Datarate = LmHandlerGetCurrentDatarate( );
 804ca9c:	f7ff ffca 	bl	804ca34 <LmHandlerGetCurrentDatarate>
 804caa0:	7128      	strb	r0, [r5, #4]
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 804caa2:	7863      	ldrb	r3, [r4, #1]
 804caa4:	b943      	cbnz	r3, 804cab8 <MlmeConfirm+0x68>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 804caa6:	2200      	movs	r2, #0
 804caa8:	716a      	strb	r2, [r5, #5]
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 804caaa:	4b1c      	ldr	r3, [pc, #112]	; (804cb1c <MlmeConfirm+0xcc>)
 804caac:	681b      	ldr	r3, [r3, #0]
 804caae:	6a1b      	ldr	r3, [r3, #32]
 804cab0:	481b      	ldr	r0, [pc, #108]	; (804cb20 <MlmeConfirm+0xd0>)
 804cab2:	4798      	blx	r3
}
 804cab4:	b00b      	add	sp, #44	; 0x2c
 804cab6:	bd30      	pop	{r4, r5, pc}
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 804cab8:	4b19      	ldr	r3, [pc, #100]	; (804cb20 <MlmeConfirm+0xd0>)
 804caba:	22ff      	movs	r2, #255	; 0xff
 804cabc:	715a      	strb	r2, [r3, #5]
 804cabe:	e7f4      	b.n	804caaa <MlmeConfirm+0x5a>
            if( IsClassBSwitchPending == true )
 804cac0:	4b18      	ldr	r3, [pc, #96]	; (804cb24 <MlmeConfirm+0xd4>)
 804cac2:	781b      	ldrb	r3, [r3, #0]
 804cac4:	2b00      	cmp	r3, #0
 804cac6:	d0f5      	beq.n	804cab4 <MlmeConfirm+0x64>
                LmHandlerBeaconReq( );
 804cac8:	f7ff fd02 	bl	804c4d0 <LmHandlerBeaconReq>
 804cacc:	e7f2      	b.n	804cab4 <MlmeConfirm+0x64>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 804cace:	7863      	ldrb	r3, [r4, #1]
 804cad0:	b92b      	cbnz	r3, 804cade <MlmeConfirm+0x8e>
                LmHandlerPingSlotReq( LmHandlerParams->PingSlotPeriodicity );
 804cad2:	4b15      	ldr	r3, [pc, #84]	; (804cb28 <MlmeConfirm+0xd8>)
 804cad4:	681b      	ldr	r3, [r3, #0]
 804cad6:	7b18      	ldrb	r0, [r3, #12]
 804cad8:	f7ff feda 	bl	804c890 <LmHandlerPingSlotReq>
 804cadc:	e7ea      	b.n	804cab4 <MlmeConfirm+0x64>
                LmHandlerDeviceTimeReq( );
 804cade:	f7ff fc6b 	bl	804c3b8 <LmHandlerDeviceTimeReq>
 804cae2:	e7e7      	b.n	804cab4 <MlmeConfirm+0x64>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 804cae4:	7863      	ldrb	r3, [r4, #1]
 804cae6:	b983      	cbnz	r3, 804cb0a <MlmeConfirm+0xba>
                mibReq.Type = MIB_DEVICE_CLASS;
 804cae8:	2400      	movs	r4, #0
 804caea:	f88d 4004 	strb.w	r4, [sp, #4]
                mibReq.Param.Class = CLASS_B;
 804caee:	2501      	movs	r5, #1
 804caf0:	f88d 5008 	strb.w	r5, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 804caf4:	a801      	add	r0, sp, #4
 804caf6:	f004 fd3d 	bl	8051574 <LoRaMacMibSetRequestConfirm>
                LmHandlerCallbacks->OnClassChange( CLASS_B );
 804cafa:	4b08      	ldr	r3, [pc, #32]	; (804cb1c <MlmeConfirm+0xcc>)
 804cafc:	681b      	ldr	r3, [r3, #0]
 804cafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804cb00:	4628      	mov	r0, r5
 804cb02:	4798      	blx	r3
                IsClassBSwitchPending = false;
 804cb04:	4b07      	ldr	r3, [pc, #28]	; (804cb24 <MlmeConfirm+0xd4>)
 804cb06:	701c      	strb	r4, [r3, #0]
 804cb08:	e7d4      	b.n	804cab4 <MlmeConfirm+0x64>
                LmHandlerPingSlotReq( LmHandlerParams->PingSlotPeriodicity );
 804cb0a:	4b07      	ldr	r3, [pc, #28]	; (804cb28 <MlmeConfirm+0xd8>)
 804cb0c:	681b      	ldr	r3, [r3, #0]
 804cb0e:	7b18      	ldrb	r0, [r3, #12]
 804cb10:	f7ff febe 	bl	804c890 <LmHandlerPingSlotReq>
}
 804cb14:	e7ce      	b.n	804cab4 <MlmeConfirm+0x64>
 804cb16:	bf00      	nop
 804cb18:	2001819c 	.word	0x2001819c
 804cb1c:	200194b0 	.word	0x200194b0
 804cb20:	20018160 	.word	0x20018160
 804cb24:	200194ac 	.word	0x200194ac
 804cb28:	200194c4 	.word	0x200194c4

0804cb2c <LmHandlerGetActiveRegion>:
    return LmHandlerParams->Region;
 804cb2c:	4b01      	ldr	r3, [pc, #4]	; (804cb34 <LmHandlerGetActiveRegion+0x8>)
 804cb2e:	681b      	ldr	r3, [r3, #0]
}
 804cb30:	7818      	ldrb	r0, [r3, #0]
 804cb32:	4770      	bx	lr
 804cb34:	200194c4 	.word	0x200194c4

0804cb38 <LmHandlerSetSystemMaxRxError>:
{
 804cb38:	b500      	push	{lr}
 804cb3a:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 804cb3c:	2330      	movs	r3, #48	; 0x30
 804cb3e:	f88d 3004 	strb.w	r3, [sp, #4]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 804cb42:	9002      	str	r0, [sp, #8]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 804cb44:	a801      	add	r0, sp, #4
 804cb46:	f004 fd15 	bl	8051574 <LoRaMacMibSetRequestConfirm>
 804cb4a:	b910      	cbnz	r0, 804cb52 <LmHandlerSetSystemMaxRxError+0x1a>
}
 804cb4c:	b00b      	add	sp, #44	; 0x2c
 804cb4e:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 804cb52:	f04f 30ff 	mov.w	r0, #4294967295
 804cb56:	e7f9      	b.n	804cb4c <LmHandlerSetSystemMaxRxError+0x14>

0804cb58 <LmHandlerPackageRegister>:
{
 804cb58:	b538      	push	{r3, r4, r5, lr}
 804cb5a:	4604      	mov	r4, r0
 804cb5c:	460d      	mov	r5, r1
    switch( id )
 804cb5e:	2803      	cmp	r0, #3
 804cb60:	d827      	bhi.n	804cbb2 <LmHandlerPackageRegister+0x5a>
 804cb62:	e8df f000 	tbb	[pc, r0]
 804cb66:	1d02      	.short	0x1d02
 804cb68:	2320      	.short	0x2320
            package = LmphCompliancePackageFactory( );
 804cb6a:	f001 f8a9 	bl	804dcc0 <LmphCompliancePackageFactory>
    if( package != NULL )
 804cb6e:	b300      	cbz	r0, 804cbb2 <LmHandlerPackageRegister+0x5a>
        LmHandlerPackages[id] = package;
 804cb70:	4b11      	ldr	r3, [pc, #68]	; (804cbb8 <LmHandlerPackageRegister+0x60>)
 804cb72:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
        LmHandlerPackages[id]->OnMacMcpsRequest = LmHandlerCallbacks->OnMacMcpsRequest;
 804cb76:	4b11      	ldr	r3, [pc, #68]	; (804cbbc <LmHandlerPackageRegister+0x64>)
 804cb78:	681b      	ldr	r3, [r3, #0]
 804cb7a:	699a      	ldr	r2, [r3, #24]
 804cb7c:	6242      	str	r2, [r0, #36]	; 0x24
        LmHandlerPackages[id]->OnMacMlmeRequest = LmHandlerCallbacks->OnMacMlmeRequest;
 804cb7e:	69da      	ldr	r2, [r3, #28]
 804cb80:	6282      	str	r2, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoinRequest;
 804cb82:	4a0f      	ldr	r2, [pc, #60]	; (804cbc0 <LmHandlerPackageRegister+0x68>)
 804cb84:	62c2      	str	r2, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 804cb86:	4a0f      	ldr	r2, [pc, #60]	; (804cbc4 <LmHandlerPackageRegister+0x6c>)
 804cb88:	6302      	str	r2, [r0, #48]	; 0x30
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 804cb8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804cb8c:	6343      	str	r3, [r0, #52]	; 0x34
        LmHandlerPackages[id]->Init( params, LmHandlerParams->DataBuffer, LmHandlerParams->DataBufferMaxSize );
 804cb8e:	6844      	ldr	r4, [r0, #4]
 804cb90:	4b0d      	ldr	r3, [pc, #52]	; (804cbc8 <LmHandlerPackageRegister+0x70>)
 804cb92:	681b      	ldr	r3, [r3, #0]
 804cb94:	799a      	ldrb	r2, [r3, #6]
 804cb96:	6899      	ldr	r1, [r3, #8]
 804cb98:	4628      	mov	r0, r5
 804cb9a:	47a0      	blx	r4
        return LORAMAC_HANDLER_SUCCESS;
 804cb9c:	2000      	movs	r0, #0
}
 804cb9e:	bd38      	pop	{r3, r4, r5, pc}
            package = LmphClockSyncPackageFactory( );
 804cba0:	f000 fcb2 	bl	804d508 <LmphClockSyncPackageFactory>
            break;
 804cba4:	e7e3      	b.n	804cb6e <LmHandlerPackageRegister+0x16>
            package = LmhpRemoteMcastSetupPackageFactory( );
 804cba6:	f001 fd71 	bl	804e68c <LmhpRemoteMcastSetupPackageFactory>
            break;
 804cbaa:	e7e0      	b.n	804cb6e <LmHandlerPackageRegister+0x16>
            package = LmhpFragmentationPackageFactory( );
 804cbac:	f001 faca 	bl	804e144 <LmhpFragmentationPackageFactory>
            break;
 804cbb0:	e7dd      	b.n	804cb6e <LmHandlerPackageRegister+0x16>
        return LORAMAC_HANDLER_ERROR;
 804cbb2:	f04f 30ff 	mov.w	r0, #4294967295
 804cbb6:	e7f2      	b.n	804cb9e <LmHandlerPackageRegister+0x46>
 804cbb8:	200194b4 	.word	0x200194b4
 804cbbc:	200194b0 	.word	0x200194b0
 804cbc0:	0804c50d 	.word	0x0804c50d
 804cbc4:	0804c3b9 	.word	0x0804c3b9
 804cbc8:	200194c4 	.word	0x200194c4

0804cbcc <LmHandlerPackageIsInitialized>:
{
 804cbcc:	b508      	push	{r3, lr}
    if( LmHandlerPackages[id]->IsInitialized != NULL )
 804cbce:	4b04      	ldr	r3, [pc, #16]	; (804cbe0 <LmHandlerPackageIsInitialized+0x14>)
 804cbd0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 804cbd4:	689b      	ldr	r3, [r3, #8]
 804cbd6:	b10b      	cbz	r3, 804cbdc <LmHandlerPackageIsInitialized+0x10>
        return LmHandlerPackages[id]->IsInitialized( );
 804cbd8:	4798      	blx	r3
}
 804cbda:	bd08      	pop	{r3, pc}
        return false;
 804cbdc:	2000      	movs	r0, #0
 804cbde:	e7fc      	b.n	804cbda <LmHandlerPackageIsInitialized+0xe>
 804cbe0:	200194b4 	.word	0x200194b4

0804cbe4 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 804cbe4:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 804cbe6:	2400      	movs	r4, #0
 804cbe8:	e001      	b.n	804cbee <LmHandlerPackagesProcess+0xa>
 804cbea:	3401      	adds	r4, #1
 804cbec:	b264      	sxtb	r4, r4
 804cbee:	2c03      	cmp	r4, #3
 804cbf0:	dc12      	bgt.n	804cc18 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 804cbf2:	4b0a      	ldr	r3, [pc, #40]	; (804cc1c <LmHandlerPackagesProcess+0x38>)
 804cbf4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 804cbf8:	2b00      	cmp	r3, #0
 804cbfa:	d0f6      	beq.n	804cbea <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 804cbfc:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 804cbfe:	2b00      	cmp	r3, #0
 804cc00:	d0f3      	beq.n	804cbea <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 804cc02:	b2e0      	uxtb	r0, r4
 804cc04:	f7ff ffe2 	bl	804cbcc <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 804cc08:	2800      	cmp	r0, #0
 804cc0a:	d0ee      	beq.n	804cbea <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 804cc0c:	4b03      	ldr	r3, [pc, #12]	; (804cc1c <LmHandlerPackagesProcess+0x38>)
 804cc0e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 804cc12:	691b      	ldr	r3, [r3, #16]
 804cc14:	4798      	blx	r3
 804cc16:	e7e8      	b.n	804cbea <LmHandlerPackagesProcess+0x6>
        }
    }
}
 804cc18:	bd38      	pop	{r3, r4, r5, pc}
 804cc1a:	bf00      	nop
 804cc1c:	200194b4 	.word	0x200194b4

0804cc20 <LmHandlerProcess>:
{
 804cc20:	b500      	push	{lr}
 804cc22:	b083      	sub	sp, #12
    if( Radio.IrqProcess != NULL )
 804cc24:	4b14      	ldr	r3, [pc, #80]	; (804cc78 <LmHandlerProcess+0x58>)
 804cc26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804cc28:	b103      	cbz	r3, 804cc2c <LmHandlerProcess+0xc>
        Radio.IrqProcess( );
 804cc2a:	4798      	blx	r3
    LoRaMacProcess( );
 804cc2c:	f004 f8c6 	bl	8050dbc <LoRaMacProcess>
    size = NvmDataMgmtStore( );
 804cc30:	f7ff fb25 	bl	804c27e <NvmDataMgmtStore>
    if( size > 0 )
 804cc34:	4601      	mov	r1, r0
 804cc36:	b120      	cbz	r0, 804cc42 <LmHandlerProcess+0x22>
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE, size );
 804cc38:	4b10      	ldr	r3, [pc, #64]	; (804cc7c <LmHandlerProcess+0x5c>)
 804cc3a:	681b      	ldr	r3, [r3, #0]
 804cc3c:	691b      	ldr	r3, [r3, #16]
 804cc3e:	2001      	movs	r0, #1
 804cc40:	4798      	blx	r3
    LmHandlerPackagesProcess( );
 804cc42:	f7ff ffcf 	bl	804cbe4 <LmHandlerPackagesProcess>
    if( IsUplinkTxPending == true )
 804cc46:	4b0e      	ldr	r3, [pc, #56]	; (804cc80 <LmHandlerProcess+0x60>)
 804cc48:	781b      	ldrb	r3, [r3, #0]
 804cc4a:	b913      	cbnz	r3, 804cc52 <LmHandlerProcess+0x32>
}
 804cc4c:	b003      	add	sp, #12
 804cc4e:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 804cc52:	2300      	movs	r3, #0
 804cc54:	f88d 3000 	strb.w	r3, [sp]
 804cc58:	f88d 3001 	strb.w	r3, [sp, #1]
 804cc5c:	9301      	str	r3, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams->IsTxConfirmed ) == LORAMAC_HANDLER_SUCCESS )
 804cc5e:	4b09      	ldr	r3, [pc, #36]	; (804cc84 <LmHandlerProcess+0x64>)
 804cc60:	681b      	ldr	r3, [r3, #0]
 804cc62:	7899      	ldrb	r1, [r3, #2]
 804cc64:	4668      	mov	r0, sp
 804cc66:	f7ff fdb5 	bl	804c7d4 <LmHandlerSend>
 804cc6a:	2800      	cmp	r0, #0
 804cc6c:	d1ee      	bne.n	804cc4c <LmHandlerProcess+0x2c>
            IsUplinkTxPending = false;
 804cc6e:	4b04      	ldr	r3, [pc, #16]	; (804cc80 <LmHandlerProcess+0x60>)
 804cc70:	2200      	movs	r2, #0
 804cc72:	701a      	strb	r2, [r3, #0]
}
 804cc74:	e7ea      	b.n	804cc4c <LmHandlerProcess+0x2c>
 804cc76:	bf00      	nop
 804cc78:	08059d2c 	.word	0x08059d2c
 804cc7c:	200194b0 	.word	0x200194b0
 804cc80:	200194ad 	.word	0x200194ad
 804cc84:	200194c4 	.word	0x200194c4

0804cc88 <SetRow>:
 *=============================================================================
 */

#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
static void SetRow( uint8_t *src, uint16_t row, uint16_t size )
{
 804cc88:	460b      	mov	r3, r1
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderWrite != NULL ) )
 804cc8a:	4906      	ldr	r1, [pc, #24]	; (804cca4 <SetRow+0x1c>)
 804cc8c:	6809      	ldr	r1, [r1, #0]
 804cc8e:	b139      	cbz	r1, 804cca0 <SetRow+0x18>
{
 804cc90:	b510      	push	{r4, lr}
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderWrite != NULL ) )
 804cc92:	680c      	ldr	r4, [r1, #0]
 804cc94:	b11c      	cbz	r4, 804cc9e <SetRow+0x16>
    {
        FragDecoder.Callbacks->FragDecoderWrite( row * size, src, size );
 804cc96:	4601      	mov	r1, r0
 804cc98:	fb02 f003 	mul.w	r0, r2, r3
 804cc9c:	47a0      	blx	r4
    }
}
 804cc9e:	bd10      	pop	{r4, pc}
 804cca0:	4770      	bx	lr
 804cca2:	bf00      	nop
 804cca4:	200194e8 	.word	0x200194e8

0804cca8 <GetRow>:

static void GetRow( uint8_t *dst, uint16_t row, uint16_t size )
{
 804cca8:	460b      	mov	r3, r1
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderRead != NULL ) )
 804ccaa:	4906      	ldr	r1, [pc, #24]	; (804ccc4 <GetRow+0x1c>)
 804ccac:	6809      	ldr	r1, [r1, #0]
 804ccae:	b139      	cbz	r1, 804ccc0 <GetRow+0x18>
{
 804ccb0:	b510      	push	{r4, lr}
    if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderRead != NULL ) )
 804ccb2:	684c      	ldr	r4, [r1, #4]
 804ccb4:	b11c      	cbz	r4, 804ccbe <GetRow+0x16>
    {
        FragDecoder.Callbacks->FragDecoderRead( row * size, dst, size );
 804ccb6:	4601      	mov	r1, r0
 804ccb8:	fb02 f003 	mul.w	r0, r2, r3
 804ccbc:	47a0      	blx	r4
    }
}
 804ccbe:	bd10      	pop	{r4, pc}
 804ccc0:	4770      	bx	lr
 804ccc2:	bf00      	nop
 804ccc4:	200194e8 	.word	0x200194e8

0804ccc8 <GetParity>:
#endif

static uint8_t GetParity( uint16_t index, uint8_t *matrixRow  )
{
    uint8_t parity;
    parity = matrixRow[index >> 3];
 804ccc8:	08c3      	lsrs	r3, r0, #3
 804ccca:	5ccb      	ldrb	r3, [r1, r3]
    parity = ( parity >> ( 7 - ( index % 8 ) ) ) & 0x01;
 804cccc:	43c0      	mvns	r0, r0
 804ccce:	f000 0007 	and.w	r0, r0, #7
 804ccd2:	fa43 f000 	asr.w	r0, r3, r0
    return parity;
}
 804ccd6:	f000 0001 	and.w	r0, r0, #1
 804ccda:	4770      	bx	lr

0804ccdc <SetParity>:

static void SetParity( uint16_t index, uint8_t *matrixRow, uint8_t parity )
{
 804ccdc:	b410      	push	{r4}
    uint8_t mask = 0xFF - ( 1 << ( 7 - ( index % 8 ) ) );
 804ccde:	43c4      	mvns	r4, r0
 804cce0:	f004 0407 	and.w	r4, r4, #7
 804cce4:	2301      	movs	r3, #1
 804cce6:	40a3      	lsls	r3, r4
 804cce8:	b2db      	uxtb	r3, r3
    parity = parity << ( 7 - ( index % 8 ) );
 804ccea:	40a2      	lsls	r2, r4
    matrixRow[index >> 3] = ( matrixRow[index >> 3] & mask ) + parity;
 804ccec:	08c0      	lsrs	r0, r0, #3
 804ccee:	5c0c      	ldrb	r4, [r1, r0]
 804ccf0:	ea24 0303 	bic.w	r3, r4, r3
 804ccf4:	fa53 f282 	uxtab	r2, r3, r2
 804ccf8:	540a      	strb	r2, [r1, r0]
}
 804ccfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 804ccfe:	4770      	bx	lr

0804cd00 <IsPowerOfTwo>:

static bool IsPowerOfTwo( uint32_t x )
{
    uint8_t sumBit = 0;

    for( uint8_t i = 0; i < 32; i++ )
 804cd00:	2200      	movs	r2, #0
    uint8_t sumBit = 0;
 804cd02:	4611      	mov	r1, r2
    for( uint8_t i = 0; i < 32; i++ )
 804cd04:	2a1f      	cmp	r2, #31
 804cd06:	d808      	bhi.n	804cd1a <IsPowerOfTwo+0x1a>
    {
        sumBit += ( x & ( 1 << i ) ) >> i;
 804cd08:	2301      	movs	r3, #1
 804cd0a:	4093      	lsls	r3, r2
 804cd0c:	4003      	ands	r3, r0
 804cd0e:	40d3      	lsrs	r3, r2
 804cd10:	4419      	add	r1, r3
 804cd12:	b2c9      	uxtb	r1, r1
    for( uint8_t i = 0; i < 32; i++ )
 804cd14:	3201      	adds	r2, #1
 804cd16:	b2d2      	uxtb	r2, r2
 804cd18:	e7f4      	b.n	804cd04 <IsPowerOfTwo+0x4>
    }
    if( sumBit == 1 )
 804cd1a:	2901      	cmp	r1, #1
 804cd1c:	d001      	beq.n	804cd22 <IsPowerOfTwo+0x22>
    {
        return true;
    }
    return false;
 804cd1e:	2000      	movs	r0, #0
 804cd20:	4770      	bx	lr
        return true;
 804cd22:	2001      	movs	r0, #1
}
 804cd24:	4770      	bx	lr

0804cd26 <XorDataLine>:

static void XorDataLine( uint8_t *line1, uint8_t *line2, int32_t size )
{
    for( int32_t i = 0; i < size; i++ )
 804cd26:	2300      	movs	r3, #0
 804cd28:	4293      	cmp	r3, r2
 804cd2a:	da09      	bge.n	804cd40 <XorDataLine+0x1a>
{
 804cd2c:	b430      	push	{r4, r5}
    {
        line1[i] = line1[i] ^ line2[i];
 804cd2e:	5cc4      	ldrb	r4, [r0, r3]
 804cd30:	5ccd      	ldrb	r5, [r1, r3]
 804cd32:	406c      	eors	r4, r5
 804cd34:	54c4      	strb	r4, [r0, r3]
    for( int32_t i = 0; i < size; i++ )
 804cd36:	3301      	adds	r3, #1
 804cd38:	4293      	cmp	r3, r2
 804cd3a:	dbf8      	blt.n	804cd2e <XorDataLine+0x8>
    }
}
 804cd3c:	bc30      	pop	{r4, r5}
 804cd3e:	4770      	bx	lr
 804cd40:	4770      	bx	lr

0804cd42 <XorParityLine>:

static void XorParityLine( uint8_t* line1, uint8_t* line2, int32_t size )
{
 804cd42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804cd46:	4607      	mov	r7, r0
 804cd48:	4689      	mov	r9, r1
 804cd4a:	4690      	mov	r8, r2
    for( int32_t i = 0; i < size; i++ )
 804cd4c:	2500      	movs	r5, #0
 804cd4e:	4545      	cmp	r5, r8
 804cd50:	da12      	bge.n	804cd78 <XorParityLine+0x36>
    {
        SetParity( i, line1, ( GetParity( i, line1 ) ^ GetParity( i, line2 ) ) );
 804cd52:	b2ae      	uxth	r6, r5
 804cd54:	4639      	mov	r1, r7
 804cd56:	4630      	mov	r0, r6
 804cd58:	f7ff ffb6 	bl	804ccc8 <GetParity>
 804cd5c:	4604      	mov	r4, r0
 804cd5e:	4649      	mov	r1, r9
 804cd60:	4630      	mov	r0, r6
 804cd62:	f7ff ffb1 	bl	804ccc8 <GetParity>
 804cd66:	ea84 0200 	eor.w	r2, r4, r0
 804cd6a:	b2d2      	uxtb	r2, r2
 804cd6c:	4639      	mov	r1, r7
 804cd6e:	4630      	mov	r0, r6
 804cd70:	f7ff ffb4 	bl	804ccdc <SetParity>
    for( int32_t i = 0; i < size; i++ )
 804cd74:	3501      	adds	r5, #1
 804cd76:	e7ea      	b.n	804cd4e <XorParityLine+0xc>
    }
}
 804cd78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0804cd7c <FragPrbs23>:

static int32_t FragPrbs23( int32_t value )
{
    int32_t b0 = value & 0x01;
    int32_t b1 = ( value & 0x20 ) >> 5;
    return ( value >> 1 ) + ( ( b0 ^ b1 ) << 22 );
 804cd7c:	ea80 1360 	eor.w	r3, r0, r0, asr #5
 804cd80:	059b      	lsls	r3, r3, #22
 804cd82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 804cd86:	eb03 0060 	add.w	r0, r3, r0, asr #1
 804cd8a:	4770      	bx	lr

0804cd8c <FragGetParityMatrixRow>:

static void FragGetParityMatrixRow( int32_t n, int32_t m, uint8_t *matrixRow )
{
 804cd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804cd90:	4607      	mov	r7, r0
 804cd92:	460d      	mov	r5, r1
 804cd94:	4690      	mov	r8, r2
    int32_t mTemp;
    int32_t x;
    int32_t nbCoeff = 0;
    int32_t r;

    if( IsPowerOfTwo( m ) != false )
 804cd96:	4608      	mov	r0, r1
 804cd98:	f7ff ffb2 	bl	804cd00 <IsPowerOfTwo>
 804cd9c:	b138      	cbz	r0, 804cdae <FragGetParityMatrixRow+0x22>
    {
        mTemp = 1;
 804cd9e:	2601      	movs	r6, #1
    else 
    {
        mTemp = 0;
    }

    x = 1 + ( 1001 * n );
 804cda0:	f240 34e9 	movw	r4, #1001	; 0x3e9
 804cda4:	fb04 f407 	mul.w	r4, r4, r7
 804cda8:	3401      	adds	r4, #1
    for( uint8_t i = 0; i < ( ( m >> 3 ) + 1 ); i++ )
 804cdaa:	2300      	movs	r3, #0
 804cdac:	e006      	b.n	804cdbc <FragGetParityMatrixRow+0x30>
        mTemp = 0;
 804cdae:	2600      	movs	r6, #0
 804cdb0:	e7f6      	b.n	804cda0 <FragGetParityMatrixRow+0x14>
    {
        matrixRow[i] = 0;
 804cdb2:	2200      	movs	r2, #0
 804cdb4:	f808 2003 	strb.w	r2, [r8, r3]
    for( uint8_t i = 0; i < ( ( m >> 3 ) + 1 ); i++ )
 804cdb8:	3301      	adds	r3, #1
 804cdba:	b2db      	uxtb	r3, r3
 804cdbc:	ebb3 0fe5 	cmp.w	r3, r5, asr #3
 804cdc0:	ddf7      	ble.n	804cdb2 <FragGetParityMatrixRow+0x26>
    int32_t nbCoeff = 0;
 804cdc2:	2700      	movs	r7, #0
 804cdc4:	e010      	b.n	804cde8 <FragGetParityMatrixRow+0x5c>
    while( nbCoeff < ( m >> 1 ) )
    {
        r = 1 << 16;
        while( r >= m )
        {
            x = FragPrbs23( x );
 804cdc6:	4620      	mov	r0, r4
 804cdc8:	f7ff ffd8 	bl	804cd7c <FragPrbs23>
 804cdcc:	4604      	mov	r4, r0
            r = x % ( m + mTemp );
 804cdce:	1973      	adds	r3, r6, r5
 804cdd0:	fb90 f0f3 	sdiv	r0, r0, r3
 804cdd4:	fb03 4010 	mls	r0, r3, r0, r4
        while( r >= m )
 804cdd8:	42a8      	cmp	r0, r5
 804cdda:	daf4      	bge.n	804cdc6 <FragGetParityMatrixRow+0x3a>
        }
        SetParity( r, matrixRow, 1 );
 804cddc:	2201      	movs	r2, #1
 804cdde:	4641      	mov	r1, r8
 804cde0:	b280      	uxth	r0, r0
 804cde2:	f7ff ff7b 	bl	804ccdc <SetParity>
        nbCoeff += 1;
 804cde6:	3701      	adds	r7, #1
    while( nbCoeff < ( m >> 1 ) )
 804cde8:	ebb7 0f65 	cmp.w	r7, r5, asr #1
 804cdec:	da02      	bge.n	804cdf4 <FragGetParityMatrixRow+0x68>
        r = 1 << 16;
 804cdee:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 804cdf2:	e7f1      	b.n	804cdd8 <FragGetParityMatrixRow+0x4c>
    }
}
 804cdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0804cdf8 <BitArrayFindFirstOne>:

static uint16_t BitArrayFindFirstOne( uint8_t *bitArray, uint16_t size )
{
 804cdf8:	b570      	push	{r4, r5, r6, lr}
 804cdfa:	4606      	mov	r6, r0
 804cdfc:	460d      	mov	r5, r1
    for( uint16_t i = 0; i < size; i++)
 804cdfe:	2400      	movs	r4, #0
 804ce00:	42ac      	cmp	r4, r5
 804ce02:	d208      	bcs.n	804ce16 <BitArrayFindFirstOne+0x1e>
    {
        if ( GetParity( i, bitArray ) == 1 )
 804ce04:	4631      	mov	r1, r6
 804ce06:	4620      	mov	r0, r4
 804ce08:	f7ff ff5e 	bl	804ccc8 <GetParity>
 804ce0c:	2801      	cmp	r0, #1
 804ce0e:	d003      	beq.n	804ce18 <BitArrayFindFirstOne+0x20>
    for( uint16_t i = 0; i < size; i++)
 804ce10:	3401      	adds	r4, #1
 804ce12:	b2a4      	uxth	r4, r4
 804ce14:	e7f4      	b.n	804ce00 <BitArrayFindFirstOne+0x8>
        {
            return i;
        }
    }
    return 0;
 804ce16:	2400      	movs	r4, #0
}
 804ce18:	4620      	mov	r0, r4
 804ce1a:	bd70      	pop	{r4, r5, r6, pc}

0804ce1c <BitArrayIsAllZeros>:

static uint8_t BitArrayIsAllZeros( uint8_t *bitArray, uint16_t  size )
{
 804ce1c:	b570      	push	{r4, r5, r6, lr}
 804ce1e:	4606      	mov	r6, r0
 804ce20:	460d      	mov	r5, r1
    for( uint16_t i = 0; i < size; i++ )
 804ce22:	2400      	movs	r4, #0
 804ce24:	42ac      	cmp	r4, r5
 804ce26:	d208      	bcs.n	804ce3a <BitArrayIsAllZeros+0x1e>
    {
        if( GetParity( i, bitArray ) == 1 )
 804ce28:	4631      	mov	r1, r6
 804ce2a:	4620      	mov	r0, r4
 804ce2c:	f7ff ff4c 	bl	804ccc8 <GetParity>
 804ce30:	2801      	cmp	r0, #1
 804ce32:	d004      	beq.n	804ce3e <BitArrayIsAllZeros+0x22>
    for( uint16_t i = 0; i < size; i++ )
 804ce34:	3401      	adds	r4, #1
 804ce36:	b2a4      	uxth	r4, r4
 804ce38:	e7f4      	b.n	804ce24 <BitArrayIsAllZeros+0x8>
        {
            return 0;
        }
    }
    return 1;
 804ce3a:	2001      	movs	r0, #1
}
 804ce3c:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
 804ce3e:	2000      	movs	r0, #0
 804ce40:	e7fc      	b.n	804ce3c <BitArrayIsAllZeros+0x20>
	...

0804ce44 <FragFindMissingFrags>:
 * \param [OUT] FragDecoder.FragNbMissingIndex[] array is updated in place
 */
static void FragFindMissingFrags( uint16_t counter )
{
    int32_t i;
    for( i = FragDecoder.Status.FragNbLastRx; i < ( counter - 1 ); i++ )
 804ce44:	4b1e      	ldr	r3, [pc, #120]	; (804cec0 <FragFindMissingFrags+0x7c>)
 804ce46:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 804ce4a:	e00f      	b.n	804ce6c <FragFindMissingFrags+0x28>
        {
            FragDecoder.Status.FragNbLost++;
            FragDecoder.FragNbMissingIndex[i] = FragDecoder.Status.FragNbLost;
        }
    }
    if( i < FragDecoder.FragNb )
 804ce4c:	4a1c      	ldr	r2, [pc, #112]	; (804cec0 <FragFindMissingFrags+0x7c>)
 804ce4e:	8892      	ldrh	r2, [r2, #4]
 804ce50:	429a      	cmp	r2, r3
 804ce52:	dd05      	ble.n	804ce60 <FragFindMissingFrags+0x1c>
    {
        FragDecoder.Status.FragNbLastRx = counter;
 804ce54:	4b1a      	ldr	r3, [pc, #104]	; (804cec0 <FragFindMissingFrags+0x7c>)
 804ce56:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
        FragDecoder.Status.FragNbLastRx = FragDecoder.FragNb + 1;
    }
    DBG( "RECEIVED    : %5d / %5d Fragments\n", FragDecoder.Status.FragNbRx, FragDecoder.FragNb );
    DBG( "              %5d / %5d Bytes\n", FragDecoder.Status.FragNbRx * FragDecoder.FragSize, FragDecoder.FragNb * FragDecoder.FragSize );
    DBG( "LOST        :       %7d Fragments\n\n", FragDecoder.Status.FragNbLost );
}
 804ce5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 804ce5e:	4770      	bx	lr
        FragDecoder.Status.FragNbLastRx = FragDecoder.FragNb + 1;
 804ce60:	3201      	adds	r2, #1
 804ce62:	4b17      	ldr	r3, [pc, #92]	; (804cec0 <FragFindMissingFrags+0x7c>)
 804ce64:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 804ce68:	e7f7      	b.n	804ce5a <FragFindMissingFrags+0x16>
    for( i = FragDecoder.Status.FragNbLastRx; i < ( counter - 1 ); i++ )
 804ce6a:	3301      	adds	r3, #1
 804ce6c:	1e42      	subs	r2, r0, #1
 804ce6e:	429a      	cmp	r2, r3
 804ce70:	dd19      	ble.n	804cea6 <FragFindMissingFrags+0x62>
        if( i < FragDecoder.FragNb )
 804ce72:	4a13      	ldr	r2, [pc, #76]	; (804cec0 <FragFindMissingFrags+0x7c>)
 804ce74:	8892      	ldrh	r2, [r2, #4]
 804ce76:	429a      	cmp	r2, r3
 804ce78:	ddf7      	ble.n	804ce6a <FragFindMissingFrags+0x26>
{
 804ce7a:	b410      	push	{r4}
            FragDecoder.Status.FragNbLost++;
 804ce7c:	4910      	ldr	r1, [pc, #64]	; (804cec0 <FragFindMissingFrags+0x7c>)
 804ce7e:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 804ce82:	3201      	adds	r2, #1
 804ce84:	b292      	uxth	r2, r2
 804ce86:	f8a1 2040 	strh.w	r2, [r1, #64]	; 0x40
            FragDecoder.FragNbMissingIndex[i] = FragDecoder.Status.FragNbLost;
 804ce8a:	f103 0408 	add.w	r4, r3, #8
 804ce8e:	eb01 0144 	add.w	r1, r1, r4, lsl #1
 804ce92:	804a      	strh	r2, [r1, #2]
    for( i = FragDecoder.Status.FragNbLastRx; i < ( counter - 1 ); i++ )
 804ce94:	3301      	adds	r3, #1
 804ce96:	1e42      	subs	r2, r0, #1
 804ce98:	429a      	cmp	r2, r3
 804ce9a:	ddd7      	ble.n	804ce4c <FragFindMissingFrags+0x8>
        if( i < FragDecoder.FragNb )
 804ce9c:	4a08      	ldr	r2, [pc, #32]	; (804cec0 <FragFindMissingFrags+0x7c>)
 804ce9e:	8892      	ldrh	r2, [r2, #4]
 804cea0:	429a      	cmp	r2, r3
 804cea2:	ddf7      	ble.n	804ce94 <FragFindMissingFrags+0x50>
 804cea4:	e7ea      	b.n	804ce7c <FragFindMissingFrags+0x38>
    if( i < FragDecoder.FragNb )
 804cea6:	4a06      	ldr	r2, [pc, #24]	; (804cec0 <FragFindMissingFrags+0x7c>)
 804cea8:	8892      	ldrh	r2, [r2, #4]
 804ceaa:	429a      	cmp	r2, r3
 804ceac:	dd03      	ble.n	804ceb6 <FragFindMissingFrags+0x72>
        FragDecoder.Status.FragNbLastRx = counter;
 804ceae:	4b04      	ldr	r3, [pc, #16]	; (804cec0 <FragFindMissingFrags+0x7c>)
 804ceb0:	f8a3 0042 	strh.w	r0, [r3, #66]	; 0x42
 804ceb4:	4770      	bx	lr
        FragDecoder.Status.FragNbLastRx = FragDecoder.FragNb + 1;
 804ceb6:	3201      	adds	r2, #1
 804ceb8:	4b01      	ldr	r3, [pc, #4]	; (804cec0 <FragFindMissingFrags+0x7c>)
 804ceba:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    DBG( "LOST        :       %7d Fragments\n\n", FragDecoder.Status.FragNbLost );
 804cebe:	4770      	bx	lr
 804cec0:	200194e8 	.word	0x200194e8

0804cec4 <FragFindMissingIndex>:
 * \param [IN] x   x th missing frag
 *
 * \retval counter The counter value associated to the x th missing frag
 */
static uint16_t FragFindMissingIndex( uint16_t x )
{
 804cec4:	4601      	mov	r1, r0
    for( uint16_t i = 0; i < FragDecoder.FragNb; i++ )
 804cec6:	2000      	movs	r0, #0
 804cec8:	4b08      	ldr	r3, [pc, #32]	; (804ceec <FragFindMissingIndex+0x28>)
 804ceca:	889b      	ldrh	r3, [r3, #4]
 804cecc:	4283      	cmp	r3, r0
 804cece:	d90b      	bls.n	804cee8 <FragFindMissingIndex+0x24>
    {
        if( FragDecoder.FragNbMissingIndex[i] == ( x + 1 ) )
 804ced0:	f100 0308 	add.w	r3, r0, #8
 804ced4:	4a05      	ldr	r2, [pc, #20]	; (804ceec <FragFindMissingIndex+0x28>)
 804ced6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 804ceda:	885a      	ldrh	r2, [r3, #2]
 804cedc:	1c4b      	adds	r3, r1, #1
 804cede:	429a      	cmp	r2, r3
 804cee0:	d003      	beq.n	804ceea <FragFindMissingIndex+0x26>
    for( uint16_t i = 0; i < FragDecoder.FragNb; i++ )
 804cee2:	3001      	adds	r0, #1
 804cee4:	b280      	uxth	r0, r0
 804cee6:	e7ef      	b.n	804cec8 <FragFindMissingIndex+0x4>
        {
            return i;
        }
    }
    return 0;
 804cee8:	2000      	movs	r0, #0
}
 804ceea:	4770      	bx	lr
 804ceec:	200194e8 	.word	0x200194e8

0804cef0 <FragExtractLineFromBinaryMatrix>:
 * \param [IN] bitArray  Pointer to the bit array
 * \param [IN] rowIndex  Matrix row index
 * \param [IN] bitsInRow Number of bits in one row
 */
static void FragExtractLineFromBinaryMatrix( uint8_t* bitArray, uint16_t rowIndex, uint16_t bitsInRow )
{
 804cef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804cef4:	4606      	mov	r6, r0
 804cef6:	4690      	mov	r8, r2
    uint32_t findByte = 0;
    uint32_t findBitInByte = 0;

    if( rowIndex > 0 )
 804cef8:	460c      	mov	r4, r1
 804cefa:	b1e9      	cbz	r1, 804cf38 <FragExtractLineFromBinaryMatrix+0x48>
    {
        findByte      = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) >> 3;
 804cefc:	fb01 f502 	mul.w	r5, r1, r2
 804cf00:	1e4b      	subs	r3, r1, #1
 804cf02:	fb03 f301 	mul.w	r3, r3, r1
 804cf06:	eba5 0563 	sub.w	r5, r5, r3, asr #1
 804cf0a:	10ef      	asrs	r7, r5, #3
        findBitInByte = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) % 8;
 804cf0c:	426b      	negs	r3, r5
 804cf0e:	f005 0507 	and.w	r5, r5, #7
 804cf12:	f003 0307 	and.w	r3, r3, #7
 804cf16:	bf58      	it	pl
 804cf18:	425d      	negpl	r5, r3
    }
    if( rowIndex > 0 )
 804cf1a:	b194      	cbz	r4, 804cf42 <FragExtractLineFromBinaryMatrix+0x52>
    {
        for( uint16_t i = 0; i < rowIndex; i++ )
 804cf1c:	f04f 0900 	mov.w	r9, #0
 804cf20:	45a1      	cmp	r9, r4
 804cf22:	d20e      	bcs.n	804cf42 <FragExtractLineFromBinaryMatrix+0x52>
        {
            SetParity( i, bitArray, 0 );
 804cf24:	2200      	movs	r2, #0
 804cf26:	4631      	mov	r1, r6
 804cf28:	4648      	mov	r0, r9
 804cf2a:	f7ff fed7 	bl	804ccdc <SetParity>
        for( uint16_t i = 0; i < rowIndex; i++ )
 804cf2e:	f109 0901 	add.w	r9, r9, #1
 804cf32:	fa1f f989 	uxth.w	r9, r9
 804cf36:	e7f3      	b.n	804cf20 <FragExtractLineFromBinaryMatrix+0x30>
    uint32_t findBitInByte = 0;
 804cf38:	2500      	movs	r5, #0
    uint32_t findByte = 0;
 804cf3a:	462f      	mov	r7, r5
 804cf3c:	e7ed      	b.n	804cf1a <FragExtractLineFromBinaryMatrix+0x2a>
        }
    }
    for( uint16_t i = rowIndex; i < bitsInRow; i++ )
 804cf3e:	3401      	adds	r4, #1
 804cf40:	b2a4      	uxth	r4, r4
 804cf42:	4544      	cmp	r4, r8
 804cf44:	d211      	bcs.n	804cf6a <FragExtractLineFromBinaryMatrix+0x7a>
    {
        SetParity( i,
                   bitArray, 
                   ( FragDecoder.MatrixM2B[findByte] >> ( 7 - findBitInByte ) ) & 0x01 );
 804cf46:	4b0a      	ldr	r3, [pc, #40]	; (804cf70 <FragExtractLineFromBinaryMatrix+0x80>)
 804cf48:	443b      	add	r3, r7
 804cf4a:	7b1a      	ldrb	r2, [r3, #12]
 804cf4c:	f1c5 0307 	rsb	r3, r5, #7
 804cf50:	411a      	asrs	r2, r3
        SetParity( i,
 804cf52:	f002 0201 	and.w	r2, r2, #1
 804cf56:	4631      	mov	r1, r6
 804cf58:	4620      	mov	r0, r4
 804cf5a:	f7ff febf 	bl	804ccdc <SetParity>

        findBitInByte++;
 804cf5e:	3501      	adds	r5, #1
        if( findBitInByte == 8 )
 804cf60:	2d08      	cmp	r5, #8
 804cf62:	d1ec      	bne.n	804cf3e <FragExtractLineFromBinaryMatrix+0x4e>
        {
            findBitInByte = 0;
            findByte++;
 804cf64:	3701      	adds	r7, #1
            findBitInByte = 0;
 804cf66:	2500      	movs	r5, #0
 804cf68:	e7e9      	b.n	804cf3e <FragExtractLineFromBinaryMatrix+0x4e>
        }
    }
}
 804cf6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804cf6e:	bf00      	nop
 804cf70:	200194e8 	.word	0x200194e8

0804cf74 <FragPushLineToBinaryMatrix>:
 * \param [IN] bitArray  Pointer to the bit array
 * \param [IN] rowIndex  Matrix row index
 * \param [IN] bitsInRow Number of bits in one row
 */
static void FragPushLineToBinaryMatrix( uint8_t *bitArray, uint16_t rowIndex, uint16_t bitsInRow )
{
 804cf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804cf78:	4607      	mov	r7, r0
 804cf7a:	4616      	mov	r6, r2
    uint32_t findByte = 0;
    uint32_t findBitInByte = 0;

    if ( rowIndex > 0) {
 804cf7c:	460c      	mov	r4, r1
 804cf7e:	b181      	cbz	r1, 804cfa2 <FragPushLineToBinaryMatrix+0x2e>
        findByte      = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) >> 3;
 804cf80:	fb01 f502 	mul.w	r5, r1, r2
 804cf84:	1e4b      	subs	r3, r1, #1
 804cf86:	fb03 f301 	mul.w	r3, r3, r1
 804cf8a:	eba5 0563 	sub.w	r5, r5, r3, asr #1
 804cf8e:	ea4f 08e5 	mov.w	r8, r5, asr #3
        findBitInByte = ( rowIndex * bitsInRow - ( ( rowIndex * ( rowIndex - 1 ) ) >> 1 ) ) % 8;
 804cf92:	426b      	negs	r3, r5
 804cf94:	f005 0507 	and.w	r5, r5, #7
 804cf98:	f003 0307 	and.w	r3, r3, #7
 804cf9c:	bf58      	it	pl
 804cf9e:	425d      	negpl	r5, r3
 804cfa0:	e007      	b.n	804cfb2 <FragPushLineToBinaryMatrix+0x3e>
    uint32_t findBitInByte = 0;
 804cfa2:	2500      	movs	r5, #0
    uint32_t findByte = 0;
 804cfa4:	46a8      	mov	r8, r5
 804cfa6:	e004      	b.n	804cfb2 <FragPushLineToBinaryMatrix+0x3e>
    {
        if( GetParity( i, bitArray ) == 0 )
        {
            FragDecoder.MatrixM2B[findByte] = FragDecoder.MatrixM2B[findByte] & ( 0xFF - ( 1 << ( 7 - findBitInByte ) ) );
        }
        findBitInByte++;
 804cfa8:	3501      	adds	r5, #1
        if( findBitInByte == 8 )
 804cfaa:	2d08      	cmp	r5, #8
 804cfac:	d016      	beq.n	804cfdc <FragPushLineToBinaryMatrix+0x68>
    for( uint16_t i = rowIndex; i < bitsInRow; i++ )
 804cfae:	3401      	adds	r4, #1
 804cfb0:	b2a4      	uxth	r4, r4
 804cfb2:	42b4      	cmp	r4, r6
 804cfb4:	d216      	bcs.n	804cfe4 <FragPushLineToBinaryMatrix+0x70>
        if( GetParity( i, bitArray ) == 0 )
 804cfb6:	4639      	mov	r1, r7
 804cfb8:	4620      	mov	r0, r4
 804cfba:	f7ff fe85 	bl	804ccc8 <GetParity>
 804cfbe:	2800      	cmp	r0, #0
 804cfc0:	d1f2      	bne.n	804cfa8 <FragPushLineToBinaryMatrix+0x34>
            FragDecoder.MatrixM2B[findByte] = FragDecoder.MatrixM2B[findByte] & ( 0xFF - ( 1 << ( 7 - findBitInByte ) ) );
 804cfc2:	4a09      	ldr	r2, [pc, #36]	; (804cfe8 <FragPushLineToBinaryMatrix+0x74>)
 804cfc4:	4442      	add	r2, r8
 804cfc6:	f992 100c 	ldrsb.w	r1, [r2, #12]
 804cfca:	f1c5 0007 	rsb	r0, r5, #7
 804cfce:	2301      	movs	r3, #1
 804cfd0:	4083      	lsls	r3, r0
 804cfd2:	43db      	mvns	r3, r3
 804cfd4:	b25b      	sxtb	r3, r3
 804cfd6:	400b      	ands	r3, r1
 804cfd8:	7313      	strb	r3, [r2, #12]
 804cfda:	e7e5      	b.n	804cfa8 <FragPushLineToBinaryMatrix+0x34>
        {
            findBitInByte = 0;
            findByte++;
 804cfdc:	f108 0801 	add.w	r8, r8, #1
            findBitInByte = 0;
 804cfe0:	2500      	movs	r5, #0
 804cfe2:	e7e4      	b.n	804cfae <FragPushLineToBinaryMatrix+0x3a>
        }
    }
}
 804cfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804cfe8:	200194e8 	.word	0x200194e8

0804cfec <FragDecoderInit>:
{
 804cfec:	b570      	push	{r4, r5, r6, lr}
 804cfee:	b082      	sub	sp, #8
 804cff0:	4605      	mov	r5, r0
 804cff2:	460e      	mov	r6, r1
    FragDecoder.Callbacks = callbacks;
 804cff4:	4923      	ldr	r1, [pc, #140]	; (804d084 <FragDecoderInit+0x98>)
 804cff6:	600a      	str	r2, [r1, #0]
    FragDecoder.FragNb = fragNb;                                // FragNb = FRAG_MAX_SIZE
 804cff8:	8088      	strh	r0, [r1, #4]
    FragDecoder.FragSize = fragSize;                            // number of byte on a row
 804cffa:	718e      	strb	r6, [r1, #6]
    FragDecoder.Status.FragNbLastRx = 0;
 804cffc:	2300      	movs	r3, #0
 804cffe:	f8a1 3042 	strh.w	r3, [r1, #66]	; 0x42
    FragDecoder.Status.FragNbLost = 0;
 804d002:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
    FragDecoder.M2BLine = 0;
 804d006:	608b      	str	r3, [r1, #8]
    for( uint16_t i = 0; i < FRAG_MAX_NB; i++ )
 804d008:	e008      	b.n	804d01c <FragDecoderInit+0x30>
        FragDecoder.FragNbMissingIndex[i] = 1;
 804d00a:	f103 0108 	add.w	r1, r3, #8
 804d00e:	4a1d      	ldr	r2, [pc, #116]	; (804d084 <FragDecoderInit+0x98>)
 804d010:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 804d014:	2401      	movs	r4, #1
 804d016:	8054      	strh	r4, [r2, #2]
    for( uint16_t i = 0; i < FRAG_MAX_NB; i++ )
 804d018:	4423      	add	r3, r4
 804d01a:	b29b      	uxth	r3, r3
 804d01c:	2b14      	cmp	r3, #20
 804d01e:	d9f4      	bls.n	804d00a <FragDecoderInit+0x1e>
    for( uint32_t i = 0; i < ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ); i++ )
 804d020:	2300      	movs	r3, #0
 804d022:	b10b      	cbz	r3, 804d028 <FragDecoderInit+0x3c>
    for( uint32_t i = 0; i < ( ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ) * FRAG_MAX_REDUNDANCY ); i++ )
 804d024:	2300      	movs	r3, #0
 804d026:	e00b      	b.n	804d040 <FragDecoderInit+0x54>
        FragDecoder.S[i] = 0;
 804d028:	4a16      	ldr	r2, [pc, #88]	; (804d084 <FragDecoderInit+0x98>)
 804d02a:	441a      	add	r2, r3
 804d02c:	2100      	movs	r1, #0
 804d02e:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
    for( uint32_t i = 0; i < ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ); i++ )
 804d032:	3301      	adds	r3, #1
 804d034:	e7f5      	b.n	804d022 <FragDecoderInit+0x36>
       FragDecoder.MatrixM2B[i] = 0xFF;
 804d036:	4a13      	ldr	r2, [pc, #76]	; (804d084 <FragDecoderInit+0x98>)
 804d038:	441a      	add	r2, r3
 804d03a:	21ff      	movs	r1, #255	; 0xff
 804d03c:	7311      	strb	r1, [r2, #12]
    for( uint32_t i = 0; i < ( ( ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 ) * FRAG_MAX_REDUNDANCY ); i++ )
 804d03e:	3301      	adds	r3, #1
 804d040:	2b04      	cmp	r3, #4
 804d042:	d9f8      	bls.n	804d036 <FragDecoderInit+0x4a>
    for( uint32_t i = 0; i < ( fragNb * fragSize ); i++ )
 804d044:	2400      	movs	r4, #0
 804d046:	e000      	b.n	804d04a <FragDecoderInit+0x5e>
 804d048:	3401      	adds	r4, #1
 804d04a:	fb06 f305 	mul.w	r3, r6, r5
 804d04e:	42a3      	cmp	r3, r4
 804d050:	d90f      	bls.n	804d072 <FragDecoderInit+0x86>
        if( ( FragDecoder.Callbacks != NULL ) && ( FragDecoder.Callbacks->FragDecoderWrite != NULL ) )
 804d052:	4b0c      	ldr	r3, [pc, #48]	; (804d084 <FragDecoderInit+0x98>)
 804d054:	681b      	ldr	r3, [r3, #0]
 804d056:	2b00      	cmp	r3, #0
 804d058:	d0f6      	beq.n	804d048 <FragDecoderInit+0x5c>
 804d05a:	681a      	ldr	r2, [r3, #0]
 804d05c:	2a00      	cmp	r2, #0
 804d05e:	d0f3      	beq.n	804d048 <FragDecoderInit+0x5c>
            uint8_t buffer[1] = { 0xFF };
 804d060:	22ff      	movs	r2, #255	; 0xff
 804d062:	f88d 2004 	strb.w	r2, [sp, #4]
            FragDecoder.Callbacks->FragDecoderWrite( i, buffer, 1 );
 804d066:	681b      	ldr	r3, [r3, #0]
 804d068:	2201      	movs	r2, #1
 804d06a:	a901      	add	r1, sp, #4
 804d06c:	4620      	mov	r0, r4
 804d06e:	4798      	blx	r3
 804d070:	e7ea      	b.n	804d048 <FragDecoderInit+0x5c>
    FragDecoder.Status.FragNbLost = 0;
 804d072:	4b04      	ldr	r3, [pc, #16]	; (804d084 <FragDecoderInit+0x98>)
 804d074:	2200      	movs	r2, #0
 804d076:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    FragDecoder.Status.FragNbLastRx = 0;
 804d07a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 804d07e:	b002      	add	sp, #8
 804d080:	bd70      	pop	{r4, r5, r6, pc}
 804d082:	bf00      	nop
 804d084:	200194e8 	.word	0x200194e8

0804d088 <FragDecoderGetMaxFileSize>:
}
 804d088:	f240 401a 	movw	r0, #1050	; 0x41a
 804d08c:	4770      	bx	lr
	...

0804d090 <FragDecoderProcess>:
{
 804d090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804d094:	b090      	sub	sp, #64	; 0x40
 804d096:	4604      	mov	r4, r0
 804d098:	4688      	mov	r8, r1
    memset1( matrixRow, 0, ( FRAG_MAX_NB >> 3 ) + 1 );
 804d09a:	2203      	movs	r2, #3
 804d09c:	2100      	movs	r1, #0
 804d09e:	a80f      	add	r0, sp, #60	; 0x3c
 804d0a0:	f007 ff1b 	bl	8054eda <memset1>
    memset1( matrixDataTemp, 0, FRAG_MAX_SIZE );
 804d0a4:	2232      	movs	r2, #50	; 0x32
 804d0a6:	2100      	movs	r1, #0
 804d0a8:	a802      	add	r0, sp, #8
 804d0aa:	f007 ff16 	bl	8054eda <memset1>
    memset1( dataTempVector, 0, ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 );
 804d0ae:	2201      	movs	r2, #1
 804d0b0:	2100      	movs	r1, #0
 804d0b2:	a801      	add	r0, sp, #4
 804d0b4:	f007 ff11 	bl	8054eda <memset1>
    memset1( dataTempVector2, 0, ( FRAG_MAX_REDUNDANCY >> 3 ) + 1 );
 804d0b8:	2201      	movs	r2, #1
 804d0ba:	2100      	movs	r1, #0
 804d0bc:	4668      	mov	r0, sp
 804d0be:	f007 ff0c 	bl	8054eda <memset1>
    FragDecoder.Status.FragNbRx = fragCounter;
 804d0c2:	4b8a      	ldr	r3, [pc, #552]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d0c4:	87dc      	strh	r4, [r3, #62]	; 0x3e
    if( fragCounter < FragDecoder.Status.FragNbLastRx )
 804d0c6:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 804d0ca:	42a3      	cmp	r3, r4
 804d0cc:	f200 8108 	bhi.w	804d2e0 <FragDecoderProcess+0x250>
    if( fragCounter < ( FragDecoder.FragNb + 1 ) )
 804d0d0:	4b86      	ldr	r3, [pc, #536]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d0d2:	889b      	ldrh	r3, [r3, #4]
 804d0d4:	42a3      	cmp	r3, r4
 804d0d6:	d20c      	bcs.n	804d0f2 <FragDecoderProcess+0x62>
        if( FragDecoder.Status.FragNbLost > FRAG_MAX_REDUNDANCY )
 804d0d8:	4b84      	ldr	r3, [pc, #528]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d0da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 804d0de:	2b05      	cmp	r3, #5
 804d0e0:	d919      	bls.n	804d116 <FragDecoderProcess+0x86>
           FragDecoder.Status.MatrixError = 1;
 804d0e2:	4b82      	ldr	r3, [pc, #520]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d0e4:	2201      	movs	r2, #1
 804d0e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
           return FRAG_SESSION_FINISHED;
 804d0ea:	2000      	movs	r0, #0
}
 804d0ec:	b010      	add	sp, #64	; 0x40
 804d0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        SetRow( rawData, fragCounter - 1, FragDecoder.FragSize );
 804d0f2:	4d7e      	ldr	r5, [pc, #504]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d0f4:	1e61      	subs	r1, r4, #1
 804d0f6:	79aa      	ldrb	r2, [r5, #6]
 804d0f8:	b289      	uxth	r1, r1
 804d0fa:	4640      	mov	r0, r8
 804d0fc:	f7ff fdc4 	bl	804cc88 <SetRow>
        FragDecoder.FragNbMissingIndex[fragCounter - 1] = 0;
 804d100:	1de3      	adds	r3, r4, #7
 804d102:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 804d106:	2300      	movs	r3, #0
 804d108:	806b      	strh	r3, [r5, #2]
        FragFindMissingFrags( fragCounter );
 804d10a:	4620      	mov	r0, r4
 804d10c:	f7ff fe9a 	bl	804ce44 <FragFindMissingFrags>
    return FRAG_SESSION_ONGOING;
 804d110:	f04f 30ff 	mov.w	r0, #4294967295
 804d114:	e7ea      	b.n	804d0ec <FragDecoderProcess+0x5c>
        FragFindMissingFrags( fragCounter );
 804d116:	4620      	mov	r0, r4
 804d118:	f7ff fe94 	bl	804ce44 <FragFindMissingFrags>
        if( FragDecoder.Status.FragNbLost == 0 )
 804d11c:	4b73      	ldr	r3, [pc, #460]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d11e:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
 804d122:	2800      	cmp	r0, #0
 804d124:	d0e2      	beq.n	804d0ec <FragDecoderProcess+0x5c>
        FragGetParityMatrixRow( fragCounter - FragDecoder.FragNb, FragDecoder.FragNb, matrixRow );
 804d126:	8899      	ldrh	r1, [r3, #4]
 804d128:	aa0f      	add	r2, sp, #60	; 0x3c
 804d12a:	1a60      	subs	r0, r4, r1
 804d12c:	f7ff fe2e 	bl	804cd8c <FragGetParityMatrixRow>
        for( int32_t i = 0; i < FragDecoder.FragNb; i++ )
 804d130:	2400      	movs	r4, #0
    int32_t first = 0;
 804d132:	4626      	mov	r6, r4
        for( int32_t i = 0; i < FragDecoder.FragNb; i++ )
 804d134:	e008      	b.n	804d148 <FragDecoderProcess+0xb8>
                    SetParity( FragDecoder.FragNbMissingIndex[i] - 1, dataTempVector, 1 );
 804d136:	3801      	subs	r0, #1
 804d138:	2201      	movs	r2, #1
 804d13a:	a901      	add	r1, sp, #4
 804d13c:	b280      	uxth	r0, r0
 804d13e:	f7ff fdcd 	bl	804ccdc <SetParity>
                    if( first == 0 )
 804d142:	b906      	cbnz	r6, 804d146 <FragDecoderProcess+0xb6>
                        first = 1;
 804d144:	2601      	movs	r6, #1
        for( int32_t i = 0; i < FragDecoder.FragNb; i++ )
 804d146:	3401      	adds	r4, #1
 804d148:	4b68      	ldr	r3, [pc, #416]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d14a:	889b      	ldrh	r3, [r3, #4]
 804d14c:	42a3      	cmp	r3, r4
 804d14e:	dd1f      	ble.n	804d190 <FragDecoderProcess+0x100>
            if( GetParity( i , matrixRow ) == 1 )
 804d150:	b2a5      	uxth	r5, r4
 804d152:	a90f      	add	r1, sp, #60	; 0x3c
 804d154:	4628      	mov	r0, r5
 804d156:	f7ff fdb7 	bl	804ccc8 <GetParity>
 804d15a:	2801      	cmp	r0, #1
 804d15c:	d1f3      	bne.n	804d146 <FragDecoderProcess+0xb6>
                if( FragDecoder.FragNbMissingIndex[i] == 0 )
 804d15e:	f104 0308 	add.w	r3, r4, #8
 804d162:	4a62      	ldr	r2, [pc, #392]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d164:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 804d168:	8858      	ldrh	r0, [r3, #2]
 804d16a:	2800      	cmp	r0, #0
 804d16c:	d1e3      	bne.n	804d136 <FragDecoderProcess+0xa6>
                    SetParity( i, matrixRow, 0 );
 804d16e:	2200      	movs	r2, #0
 804d170:	a90f      	add	r1, sp, #60	; 0x3c
 804d172:	4628      	mov	r0, r5
 804d174:	f7ff fdb2 	bl	804ccdc <SetParity>
                    GetRow( matrixDataTemp, i, FragDecoder.FragSize );
 804d178:	4f5c      	ldr	r7, [pc, #368]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d17a:	79ba      	ldrb	r2, [r7, #6]
 804d17c:	4629      	mov	r1, r5
 804d17e:	a802      	add	r0, sp, #8
 804d180:	f7ff fd92 	bl	804cca8 <GetRow>
                    XorDataLine( rawData, matrixDataTemp, FragDecoder.FragSize );
 804d184:	79ba      	ldrb	r2, [r7, #6]
 804d186:	a902      	add	r1, sp, #8
 804d188:	4640      	mov	r0, r8
 804d18a:	f7ff fdcc 	bl	804cd26 <XorDataLine>
 804d18e:	e7da      	b.n	804d146 <FragDecoderProcess+0xb6>
        firstOneInRow = BitArrayFindFirstOne( dataTempVector, FragDecoder.Status.FragNbLost );
 804d190:	4b56      	ldr	r3, [pc, #344]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d192:	f8b3 1040 	ldrh.w	r1, [r3, #64]	; 0x40
 804d196:	a801      	add	r0, sp, #4
 804d198:	f7ff fe2e 	bl	804cdf8 <BitArrayFindFirstOne>
 804d19c:	4604      	mov	r4, r0
        if( first > 0 )
 804d19e:	b366      	cbz	r6, 804d1fa <FragDecoderProcess+0x16a>
            while( GetParity( firstOneInRow, FragDecoder.S ) == 1 )
 804d1a0:	4953      	ldr	r1, [pc, #332]	; (804d2f0 <FragDecoderProcess+0x260>)
 804d1a2:	4620      	mov	r0, r4
 804d1a4:	f7ff fd90 	bl	804ccc8 <GetParity>
 804d1a8:	2801      	cmp	r0, #1
 804d1aa:	d129      	bne.n	804d200 <FragDecoderProcess+0x170>
                FragExtractLineFromBinaryMatrix( dataTempVector2, firstOneInRow, FragDecoder.Status.FragNbLost );
 804d1ac:	4d4f      	ldr	r5, [pc, #316]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d1ae:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 804d1b2:	4621      	mov	r1, r4
 804d1b4:	4668      	mov	r0, sp
 804d1b6:	f7ff fe9b 	bl	804cef0 <FragExtractLineFromBinaryMatrix>
                XorParityLine( dataTempVector, dataTempVector2, FragDecoder.Status.FragNbLost );
 804d1ba:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 804d1be:	4669      	mov	r1, sp
 804d1c0:	a801      	add	r0, sp, #4
 804d1c2:	f7ff fdbe 	bl	804cd42 <XorParityLine>
                li = FragFindMissingIndex( firstOneInRow );
 804d1c6:	4620      	mov	r0, r4
 804d1c8:	f7ff fe7c 	bl	804cec4 <FragFindMissingIndex>
 804d1cc:	4601      	mov	r1, r0
                GetRow( matrixDataTemp, li, FragDecoder.FragSize );
 804d1ce:	79aa      	ldrb	r2, [r5, #6]
 804d1d0:	a802      	add	r0, sp, #8
 804d1d2:	f7ff fd69 	bl	804cca8 <GetRow>
                XorDataLine( rawData, matrixDataTemp, FragDecoder.FragSize );
 804d1d6:	79aa      	ldrb	r2, [r5, #6]
 804d1d8:	a902      	add	r1, sp, #8
 804d1da:	4640      	mov	r0, r8
 804d1dc:	f7ff fda3 	bl	804cd26 <XorDataLine>
                if( BitArrayIsAllZeros( dataTempVector, FragDecoder.Status.FragNbLost ) )
 804d1e0:	f8b5 5040 	ldrh.w	r5, [r5, #64]	; 0x40
 804d1e4:	4629      	mov	r1, r5
 804d1e6:	a801      	add	r0, sp, #4
 804d1e8:	f7ff fe18 	bl	804ce1c <BitArrayIsAllZeros>
 804d1ec:	b9a8      	cbnz	r0, 804d21a <FragDecoderProcess+0x18a>
                firstOneInRow = BitArrayFindFirstOne( dataTempVector, FragDecoder.Status.FragNbLost );
 804d1ee:	4629      	mov	r1, r5
 804d1f0:	a801      	add	r0, sp, #4
 804d1f2:	f7ff fe01 	bl	804cdf8 <BitArrayFindFirstOne>
 804d1f6:	4604      	mov	r4, r0
 804d1f8:	e7d2      	b.n	804d1a0 <FragDecoderProcess+0x110>
    return FRAG_SESSION_ONGOING;
 804d1fa:	f04f 30ff 	mov.w	r0, #4294967295
 804d1fe:	e775      	b.n	804d0ec <FragDecoderProcess+0x5c>
    int32_t noInfo = 0;
 804d200:	2300      	movs	r3, #0
            if( noInfo == 0 )
 804d202:	b163      	cbz	r3, 804d21e <FragDecoderProcess+0x18e>
            if( FragDecoder.M2BLine == FragDecoder.Status.FragNbLost )
 804d204:	4b39      	ldr	r3, [pc, #228]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d206:	689a      	ldr	r2, [r3, #8]
 804d208:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
 804d20c:	4282      	cmp	r2, r0
 804d20e:	d16a      	bne.n	804d2e6 <FragDecoderProcess+0x256>
                if( FragDecoder.Status.FragNbLost > 1 )
 804d210:	2801      	cmp	r0, #1
 804d212:	f67f af6b 	bls.w	804d0ec <FragDecoderProcess+0x5c>
                    for( i = ( FragDecoder.Status.FragNbLost - 2 ); i >= 0 ; i-- )
 804d216:	1e87      	subs	r7, r0, #2
 804d218:	e04c      	b.n	804d2b4 <FragDecoderProcess+0x224>
                    noInfo = 1;
 804d21a:	2301      	movs	r3, #1
 804d21c:	e7f1      	b.n	804d202 <FragDecoderProcess+0x172>
                FragPushLineToBinaryMatrix( dataTempVector, firstOneInRow, FragDecoder.Status.FragNbLost );
 804d21e:	4d33      	ldr	r5, [pc, #204]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d220:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
 804d224:	4621      	mov	r1, r4
 804d226:	a801      	add	r0, sp, #4
 804d228:	f7ff fea4 	bl	804cf74 <FragPushLineToBinaryMatrix>
                li = FragFindMissingIndex( firstOneInRow );
 804d22c:	4620      	mov	r0, r4
 804d22e:	f7ff fe49 	bl	804cec4 <FragFindMissingIndex>
 804d232:	4601      	mov	r1, r0
                SetRow( rawData, li, FragDecoder.FragSize );
 804d234:	79aa      	ldrb	r2, [r5, #6]
 804d236:	4640      	mov	r0, r8
 804d238:	f7ff fd26 	bl	804cc88 <SetRow>
                SetParity( firstOneInRow, FragDecoder.S, 1 );
 804d23c:	2201      	movs	r2, #1
 804d23e:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 804d242:	4620      	mov	r0, r4
 804d244:	f7ff fd4a 	bl	804ccdc <SetParity>
                FragDecoder.M2BLine++;
 804d248:	68ab      	ldr	r3, [r5, #8]
 804d24a:	3301      	adds	r3, #1
 804d24c:	60ab      	str	r3, [r5, #8]
 804d24e:	e7d9      	b.n	804d204 <FragDecoderProcess+0x174>
                                XorParityLine( dataTempVector2, dataTempVector, FragDecoder.Status.FragNbLost );
 804d250:	f8b6 2040 	ldrh.w	r2, [r6, #64]	; 0x40
 804d254:	a901      	add	r1, sp, #4
 804d256:	4668      	mov	r0, sp
 804d258:	f7ff fd73 	bl	804cd42 <XorParityLine>
                                lj = FragFindMissingIndex( j );
 804d25c:	4628      	mov	r0, r5
 804d25e:	f7ff fe31 	bl	804cec4 <FragFindMissingIndex>
 804d262:	4601      	mov	r1, r0
                                GetRow( rawData, lj, FragDecoder.FragSize );
 804d264:	79b2      	ldrb	r2, [r6, #6]
 804d266:	4640      	mov	r0, r8
 804d268:	f7ff fd1e 	bl	804cca8 <GetRow>
                                XorDataLine( matrixDataTemp , rawData , FragDecoder.FragSize );
 804d26c:	79b2      	ldrb	r2, [r6, #6]
 804d26e:	4641      	mov	r1, r8
 804d270:	a802      	add	r0, sp, #8
 804d272:	f7ff fd58 	bl	804cd26 <XorDataLine>
                        for( j = ( FragDecoder.Status.FragNbLost - 1 ); j > i; j--)
 804d276:	3c01      	subs	r4, #1
 804d278:	42a7      	cmp	r7, r4
 804d27a:	da14      	bge.n	804d2a6 <FragDecoderProcess+0x216>
                            FragExtractLineFromBinaryMatrix( dataTempVector2, i, FragDecoder.Status.FragNbLost );
 804d27c:	4e1b      	ldr	r6, [pc, #108]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d27e:	f8b6 2040 	ldrh.w	r2, [r6, #64]	; 0x40
 804d282:	4649      	mov	r1, r9
 804d284:	4668      	mov	r0, sp
 804d286:	f7ff fe33 	bl	804cef0 <FragExtractLineFromBinaryMatrix>
                            FragExtractLineFromBinaryMatrix( dataTempVector, j, FragDecoder.Status.FragNbLost );
 804d28a:	b2a5      	uxth	r5, r4
 804d28c:	f8b6 2040 	ldrh.w	r2, [r6, #64]	; 0x40
 804d290:	4629      	mov	r1, r5
 804d292:	a801      	add	r0, sp, #4
 804d294:	f7ff fe2c 	bl	804cef0 <FragExtractLineFromBinaryMatrix>
                            if( GetParity( j, dataTempVector2 ) == 1 )
 804d298:	4669      	mov	r1, sp
 804d29a:	4628      	mov	r0, r5
 804d29c:	f7ff fd14 	bl	804ccc8 <GetParity>
 804d2a0:	2801      	cmp	r0, #1
 804d2a2:	d1e8      	bne.n	804d276 <FragDecoderProcess+0x1e6>
 804d2a4:	e7d4      	b.n	804d250 <FragDecoderProcess+0x1c0>
                        SetRow( matrixDataTemp, li, FragDecoder.FragSize );
 804d2a6:	4b11      	ldr	r3, [pc, #68]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d2a8:	799a      	ldrb	r2, [r3, #6]
 804d2aa:	4651      	mov	r1, sl
 804d2ac:	a802      	add	r0, sp, #8
 804d2ae:	f7ff fceb 	bl	804cc88 <SetRow>
                    for( i = ( FragDecoder.Status.FragNbLost - 2 ); i >= 0 ; i-- )
 804d2b2:	3f01      	subs	r7, #1
 804d2b4:	2f00      	cmp	r7, #0
 804d2b6:	db0f      	blt.n	804d2d8 <FragDecoderProcess+0x248>
                        li = FragFindMissingIndex( i );
 804d2b8:	fa1f f987 	uxth.w	r9, r7
 804d2bc:	4648      	mov	r0, r9
 804d2be:	f7ff fe01 	bl	804cec4 <FragFindMissingIndex>
 804d2c2:	4682      	mov	sl, r0
                        GetRow( matrixDataTemp, li, FragDecoder.FragSize );
 804d2c4:	4c09      	ldr	r4, [pc, #36]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d2c6:	79a2      	ldrb	r2, [r4, #6]
 804d2c8:	4601      	mov	r1, r0
 804d2ca:	a802      	add	r0, sp, #8
 804d2cc:	f7ff fcec 	bl	804cca8 <GetRow>
                        for( j = ( FragDecoder.Status.FragNbLost - 1 ); j > i; j--)
 804d2d0:	f8b4 4040 	ldrh.w	r4, [r4, #64]	; 0x40
 804d2d4:	3c01      	subs	r4, #1
 804d2d6:	e7cf      	b.n	804d278 <FragDecoderProcess+0x1e8>
                    return FragDecoder.Status.FragNbLost;
 804d2d8:	4b04      	ldr	r3, [pc, #16]	; (804d2ec <FragDecoderProcess+0x25c>)
 804d2da:	f8b3 0040 	ldrh.w	r0, [r3, #64]	; 0x40
 804d2de:	e705      	b.n	804d0ec <FragDecoderProcess+0x5c>
        return FRAG_SESSION_ONGOING;  // Drop frame out of order
 804d2e0:	f04f 30ff 	mov.w	r0, #4294967295
 804d2e4:	e702      	b.n	804d0ec <FragDecoderProcess+0x5c>
    return FRAG_SESSION_ONGOING;
 804d2e6:	f04f 30ff 	mov.w	r0, #4294967295
 804d2ea:	e6ff      	b.n	804d0ec <FragDecoderProcess+0x5c>
 804d2ec:	200194e8 	.word	0x200194e8
 804d2f0:	20019524 	.word	0x20019524

0804d2f4 <FragDecoderGetStatus>:
    return FragDecoder.Status;
 804d2f4:	4a03      	ldr	r2, [pc, #12]	; (804d304 <FragDecoderGetStatus+0x10>)
 804d2f6:	f852 1f3e 	ldr.w	r1, [r2, #62]!
 804d2fa:	6852      	ldr	r2, [r2, #4]
 804d2fc:	6001      	str	r1, [r0, #0]
 804d2fe:	6042      	str	r2, [r0, #4]
}
 804d300:	4770      	bx	lr
 804d302:	bf00      	nop
 804d304:	200194e8 	.word	0x200194e8

0804d308 <LmhpClockSyncInit>:
    return &LmhpClockSyncPackage;
}

static void LmhpClockSyncInit( void * params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( dataBuffer != NULL )
 804d308:	b141      	cbz	r1, 804d31c <LmhpClockSyncInit+0x14>
    {
        LmhpClockSyncState.DataBuffer = dataBuffer;
 804d30a:	4b06      	ldr	r3, [pc, #24]	; (804d324 <LmhpClockSyncInit+0x1c>)
 804d30c:	6059      	str	r1, [r3, #4]
        LmhpClockSyncState.DataBufferMaxSize = dataBufferMaxSize;
 804d30e:	709a      	strb	r2, [r3, #2]
        LmhpClockSyncState.Initialized = true;
 804d310:	2201      	movs	r2, #1
 804d312:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        LmhpClockSyncState.Initialized = false;
    }
    LmhpClockSyncState.IsTxPending = false;
 804d314:	4b03      	ldr	r3, [pc, #12]	; (804d324 <LmhpClockSyncInit+0x1c>)
 804d316:	2200      	movs	r2, #0
 804d318:	705a      	strb	r2, [r3, #1]
}
 804d31a:	4770      	bx	lr
        LmhpClockSyncState.Initialized = false;
 804d31c:	4b01      	ldr	r3, [pc, #4]	; (804d324 <LmhpClockSyncInit+0x1c>)
 804d31e:	2200      	movs	r2, #0
 804d320:	701a      	strb	r2, [r3, #0]
 804d322:	e7f7      	b.n	804d314 <LmhpClockSyncInit+0xc>
 804d324:	20019530 	.word	0x20019530

0804d328 <LmhpClockSyncIsInitialized>:

static bool LmhpClockSyncIsInitialized( void )
{
    return LmhpClockSyncState.Initialized;
}
 804d328:	4b01      	ldr	r3, [pc, #4]	; (804d330 <LmhpClockSyncIsInitialized+0x8>)
 804d32a:	7818      	ldrb	r0, [r3, #0]
 804d32c:	4770      	bx	lr
 804d32e:	bf00      	nop
 804d330:	20019530 	.word	0x20019530

0804d334 <LmhpClockSyncIsTxPending>:

static bool LmhpClockSyncIsTxPending( void )
{
    return LmhpClockSyncState.IsTxPending;
}
 804d334:	4b01      	ldr	r3, [pc, #4]	; (804d33c <LmhpClockSyncIsTxPending+0x8>)
 804d336:	7858      	ldrb	r0, [r3, #1]
 804d338:	4770      	bx	lr
 804d33a:	bf00      	nop
 804d33c:	20019530 	.word	0x20019530

0804d340 <LmhpClockSyncOnMcpsIndication>:
static void LmhpClockSyncOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
    uint8_t cmdIndex = 0;
    uint8_t dataBufferIndex = 0;

    if( mcpsIndication->Port != CLOCK_SYNC_PORT )
 804d340:	78c3      	ldrb	r3, [r0, #3]
 804d342:	2bca      	cmp	r3, #202	; 0xca
 804d344:	f040 80af 	bne.w	804d4a6 <LmhpClockSyncOnMcpsIndication+0x166>
{
 804d348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804d34c:	b082      	sub	sp, #8
 804d34e:	4606      	mov	r6, r0
    uint8_t dataBufferIndex = 0;
 804d350:	2500      	movs	r5, #0
    uint8_t cmdIndex = 0;
 804d352:	462c      	mov	r4, r5
 804d354:	e00d      	b.n	804d372 <LmhpClockSyncOnMcpsIndication+0x32>
    {
        switch( mcpsIndication->Buffer[cmdIndex++] )
        {
            case CLOCK_SYNC_PKG_VERSION_REQ:
            {
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_PKG_VERSION_ANS;
 804d356:	4b54      	ldr	r3, [pc, #336]	; (804d4a8 <LmhpClockSyncOnMcpsIndication+0x168>)
 804d358:	6859      	ldr	r1, [r3, #4]
 804d35a:	1c68      	adds	r0, r5, #1
 804d35c:	b2c0      	uxtb	r0, r0
 804d35e:	2300      	movs	r3, #0
 804d360:	554b      	strb	r3, [r1, r5]
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_ID;
 804d362:	1cab      	adds	r3, r5, #2
 804d364:	b2db      	uxtb	r3, r3
 804d366:	2401      	movs	r4, #1
 804d368:	540c      	strb	r4, [r1, r0]
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_VERSION;
 804d36a:	3503      	adds	r5, #3
 804d36c:	b2ed      	uxtb	r5, r5
 804d36e:	54cc      	strb	r4, [r1, r3]
        switch( mcpsIndication->Buffer[cmdIndex++] )
 804d370:	4614      	mov	r4, r2
    while( cmdIndex < mcpsIndication->BufferSize )
 804d372:	7b33      	ldrb	r3, [r6, #12]
 804d374:	42a3      	cmp	r3, r4
 804d376:	f240 8085 	bls.w	804d484 <LmhpClockSyncOnMcpsIndication+0x144>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 804d37a:	68b0      	ldr	r0, [r6, #8]
 804d37c:	1c63      	adds	r3, r4, #1
 804d37e:	b2da      	uxtb	r2, r3
 804d380:	5d03      	ldrb	r3, [r0, r4]
 804d382:	2b03      	cmp	r3, #3
 804d384:	d87c      	bhi.n	804d480 <LmhpClockSyncOnMcpsIndication+0x140>
 804d386:	a101      	add	r1, pc, #4	; (adr r1, 804d38c <LmhpClockSyncOnMcpsIndication+0x4c>)
 804d388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 804d38c:	0804d357 	.word	0x0804d357
 804d390:	0804d39d 	.word	0x0804d39d
 804d394:	0804d425 	.word	0x0804d425
 804d398:	0804d471 	.word	0x0804d471
                break;
            }
            case CLOCK_SYNC_APP_TIME_ANS:
            {
                LmhpClockSyncState.NbTransmissions = 0;
 804d39c:	4b42      	ldr	r3, [pc, #264]	; (804d4a8 <LmhpClockSyncOnMcpsIndication+0x168>)
 804d39e:	2100      	movs	r1, #0
 804d3a0:	7359      	strb	r1, [r3, #13]

                // Check if a more precise time correction has been received.
                // If yes then don't process and ignore this answer.
                if( mcpsIndication->DeviceTimeAnsReceived == true )
 804d3a2:	7f33      	ldrb	r3, [r6, #28]
 804d3a4:	b113      	cbz	r3, 804d3ac <LmhpClockSyncOnMcpsIndication+0x6c>
                {
                    cmdIndex += 5;
 804d3a6:	3406      	adds	r4, #6
 804d3a8:	b2e4      	uxtb	r4, r4
                    break;
 804d3aa:	e7e2      	b.n	804d372 <LmhpClockSyncOnMcpsIndication+0x32>
                }
                int32_t timeCorrection = 0;
                timeCorrection  = ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 804d3ac:	1ca1      	adds	r1, r4, #2
 804d3ae:	b2c9      	uxtb	r1, r1
 804d3b0:	5c83      	ldrb	r3, [r0, r2]
                timeCorrection += ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 804d3b2:	1ce2      	adds	r2, r4, #3
 804d3b4:	b2d2      	uxtb	r2, r2
 804d3b6:	5c41      	ldrb	r1, [r0, r1]
 804d3b8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
                timeCorrection += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 804d3bc:	1d21      	adds	r1, r4, #4
 804d3be:	b2c9      	uxtb	r1, r1
 804d3c0:	5c82      	ldrb	r2, [r0, r2]
 804d3c2:	eb03 4302 	add.w	r3, r3, r2, lsl #16
                timeCorrection += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 804d3c6:	1d62      	adds	r2, r4, #5
 804d3c8:	b2d2      	uxtb	r2, r2
 804d3ca:	5c47      	ldrb	r7, [r0, r1]
 804d3cc:	eb03 6707 	add.w	r7, r3, r7, lsl #24
                if( ( mcpsIndication->Buffer[cmdIndex++] & 0x0F ) == LmhpClockSyncState.TimeReqParam.Fields.TokenReq )
 804d3d0:	3406      	adds	r4, #6
 804d3d2:	b2e4      	uxtb	r4, r4
 804d3d4:	5c82      	ldrb	r2, [r0, r2]
 804d3d6:	4b34      	ldr	r3, [pc, #208]	; (804d4a8 <LmhpClockSyncOnMcpsIndication+0x168>)
 804d3d8:	7a1b      	ldrb	r3, [r3, #8]
 804d3da:	f003 030f 	and.w	r3, r3, #15
 804d3de:	f002 020f 	and.w	r2, r2, #15
 804d3e2:	429a      	cmp	r2, r3
 804d3e4:	d1c5      	bne.n	804d372 <LmhpClockSyncOnMcpsIndication+0x32>
                {
                    SysTime_t curTime = { .Seconds = 0, .SubSeconds = 0 };
                    curTime = SysTimeGet( );
 804d3e6:	46e8      	mov	r8, sp
 804d3e8:	4640      	mov	r0, r8
 804d3ea:	f7f5 fce7 	bl	8042dbc <SysTimeGet>
                    curTime.Seconds += timeCorrection;
 804d3ee:	9b00      	ldr	r3, [sp, #0]
 804d3f0:	443b      	add	r3, r7
 804d3f2:	9300      	str	r3, [sp, #0]
                    SysTimeSet( curTime );
 804d3f4:	e898 0003 	ldmia.w	r8, {r0, r1}
 804d3f8:	f7f5 fcc4 	bl	8042d84 <SysTimeSet>
                    LmhpClockSyncState.TimeReqParam.Fields.TokenReq = ( LmhpClockSyncState.TimeReqParam.Fields.TokenReq + 1 ) & 0x0F;
 804d3fc:	492a      	ldr	r1, [pc, #168]	; (804d4a8 <LmhpClockSyncOnMcpsIndication+0x168>)
 804d3fe:	7a0b      	ldrb	r3, [r1, #8]
 804d400:	f003 020f 	and.w	r2, r3, #15
 804d404:	3201      	adds	r2, #1
 804d406:	f362 0303 	bfi	r3, r2, #0, #4
 804d40a:	720b      	strb	r3, [r1, #8]
                    if( LmhpClockSyncPackage.OnSysTimeUpdate != NULL )
 804d40c:	4b27      	ldr	r3, [pc, #156]	; (804d4ac <LmhpClockSyncOnMcpsIndication+0x16c>)
 804d40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804d410:	2b00      	cmp	r3, #0
 804d412:	d0ae      	beq.n	804d372 <LmhpClockSyncOnMcpsIndication+0x32>
                    {
#if( LMH_SYS_TIME_UPDATE_NEW_API == 1 )
                        LmhpClockSyncPackage.OnSysTimeUpdate( 
                                        ( timeCorrection >= -1 ) && ( timeCorrection <= 1 ),
 804d414:	1c78      	adds	r0, r7, #1
                        LmhpClockSyncPackage.OnSysTimeUpdate( 
 804d416:	4639      	mov	r1, r7
 804d418:	2802      	cmp	r0, #2
 804d41a:	bf8c      	ite	hi
 804d41c:	2000      	movhi	r0, #0
 804d41e:	2001      	movls	r0, #1
 804d420:	4798      	blx	r3
 804d422:	e7a6      	b.n	804d372 <LmhpClockSyncOnMcpsIndication+0x32>
                break;
            }
            case CLOCK_SYNC_APP_TIME_PERIOD_REQ:
            {
                // Increment index
                cmdIndex++;
 804d424:	3402      	adds	r4, #2
 804d426:	b2e4      	uxtb	r4, r4
                // TODO implement command prosessing and handling
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_APP_TIME_PERIOD_ANS;
 804d428:	f8df 807c 	ldr.w	r8, [pc, #124]	; 804d4a8 <LmhpClockSyncOnMcpsIndication+0x168>
 804d42c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 804d430:	1c6b      	adds	r3, r5, #1
 804d432:	b2db      	uxtb	r3, r3
 804d434:	2102      	movs	r1, #2
 804d436:	5551      	strb	r1, [r2, r5]
                // Answer status not supported.
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = 0x01;
 804d438:	186f      	adds	r7, r5, r1
 804d43a:	b2ff      	uxtb	r7, r7
 804d43c:	2101      	movs	r1, #1
 804d43e:	54d1      	strb	r1, [r2, r3]

                SysTime_t curTime = SysTimeGet( );
 804d440:	4668      	mov	r0, sp
 804d442:	f7f5 fcbb 	bl	8042dbc <SysTimeGet>
                // Substract Unix to Gps epcoh offset. The system time is based on Unix time.
                curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 804d446:	4b1a      	ldr	r3, [pc, #104]	; (804d4b0 <LmhpClockSyncOnMcpsIndication+0x170>)
 804d448:	9a00      	ldr	r2, [sp, #0]
 804d44a:	4413      	add	r3, r2
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 0  ) & 0xFF;
 804d44c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 804d450:	1ce9      	adds	r1, r5, #3
 804d452:	b2c9      	uxtb	r1, r1
 804d454:	55d3      	strb	r3, [r2, r7]
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 8  ) & 0xFF;
 804d456:	0a1f      	lsrs	r7, r3, #8
 804d458:	1d28      	adds	r0, r5, #4
 804d45a:	b2c0      	uxtb	r0, r0
 804d45c:	5457      	strb	r7, [r2, r1]
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 16 ) & 0xFF;
 804d45e:	0c1f      	lsrs	r7, r3, #16
 804d460:	1d69      	adds	r1, r5, #5
 804d462:	b2c9      	uxtb	r1, r1
 804d464:	5417      	strb	r7, [r2, r0]
                LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 24 ) & 0xFF;
 804d466:	0e1b      	lsrs	r3, r3, #24
 804d468:	3506      	adds	r5, #6
 804d46a:	b2ed      	uxtb	r5, r5
 804d46c:	5453      	strb	r3, [r2, r1]
                break;
 804d46e:	e780      	b.n	804d372 <LmhpClockSyncOnMcpsIndication+0x32>
            }
            case CLOCK_SYNC_FORCE_RESYNC_REQ:
            {
                LmhpClockSyncState.NbTransmissions = mcpsIndication->Buffer[cmdIndex++] & 0X07;
 804d470:	3402      	adds	r4, #2
 804d472:	b2e4      	uxtb	r4, r4
 804d474:	5c83      	ldrb	r3, [r0, r2]
 804d476:	f003 0307 	and.w	r3, r3, #7
 804d47a:	4a0b      	ldr	r2, [pc, #44]	; (804d4a8 <LmhpClockSyncOnMcpsIndication+0x168>)
 804d47c:	7353      	strb	r3, [r2, #13]
                break;
 804d47e:	e778      	b.n	804d372 <LmhpClockSyncOnMcpsIndication+0x32>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 804d480:	4614      	mov	r4, r2
 804d482:	e776      	b.n	804d372 <LmhpClockSyncOnMcpsIndication+0x32>
            }
        }
    }

    if( dataBufferIndex != 0 )
 804d484:	b915      	cbnz	r5, 804d48c <LmhpClockSyncOnMcpsIndication+0x14c>
            .BufferSize = dataBufferIndex,
            .Port = CLOCK_SYNC_PORT
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
    }
}
 804d486:	b002      	add	sp, #8
 804d488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        LmHandlerAppData_t appData =
 804d48c:	23ca      	movs	r3, #202	; 0xca
 804d48e:	f88d 3000 	strb.w	r3, [sp]
 804d492:	f88d 5001 	strb.w	r5, [sp, #1]
            .Buffer = LmhpClockSyncState.DataBuffer,
 804d496:	4b04      	ldr	r3, [pc, #16]	; (804d4a8 <LmhpClockSyncOnMcpsIndication+0x168>)
 804d498:	685b      	ldr	r3, [r3, #4]
        LmHandlerAppData_t appData =
 804d49a:	9301      	str	r3, [sp, #4]
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
 804d49c:	2100      	movs	r1, #0
 804d49e:	4668      	mov	r0, sp
 804d4a0:	f7ff f998 	bl	804c7d4 <LmHandlerSend>
 804d4a4:	e7ef      	b.n	804d486 <LmhpClockSyncOnMcpsIndication+0x146>
 804d4a6:	4770      	bx	lr
 804d4a8:	20019530 	.word	0x20019530
 804d4ac:	200181b8 	.word	0x200181b8
 804d4b0:	ed2ac280 	.word	0xed2ac280

0804d4b4 <LmhpClockSyncOnMcpsConfirm>:
    if( LmhpClockSyncState.AppTimeReqPending == true )
 804d4b4:	4b13      	ldr	r3, [pc, #76]	; (804d504 <LmhpClockSyncOnMcpsConfirm+0x50>)
 804d4b6:	7a5b      	ldrb	r3, [r3, #9]
 804d4b8:	b903      	cbnz	r3, 804d4bc <LmhpClockSyncOnMcpsConfirm+0x8>
 804d4ba:	4770      	bx	lr
{
 804d4bc:	b510      	push	{r4, lr}
 804d4be:	b08a      	sub	sp, #40	; 0x28
        mibReq.Type = MIB_ADR;
 804d4c0:	2305      	movs	r3, #5
 804d4c2:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.AdrEnable = LmhpClockSyncState.AdrEnabledPrev;
 804d4c6:	4c0f      	ldr	r4, [pc, #60]	; (804d504 <LmhpClockSyncOnMcpsConfirm+0x50>)
 804d4c8:	7aa3      	ldrb	r3, [r4, #10]
 804d4ca:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 804d4ce:	a801      	add	r0, sp, #4
 804d4d0:	f004 f850 	bl	8051574 <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_CHANNELS_NB_TRANS;
 804d4d4:	2325      	movs	r3, #37	; 0x25
 804d4d6:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.ChannelsNbTrans = LmhpClockSyncState.NbTransPrev;
 804d4da:	7ae3      	ldrb	r3, [r4, #11]
 804d4dc:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 804d4e0:	a801      	add	r0, sp, #4
 804d4e2:	f004 f847 	bl	8051574 <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_CHANNELS_DATARATE;
 804d4e6:	232d      	movs	r3, #45	; 0x2d
 804d4e8:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.ChannelsDatarate = LmhpClockSyncState.DataratePrev;
 804d4ec:	f994 300c 	ldrsb.w	r3, [r4, #12]
 804d4f0:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );        
 804d4f4:	a801      	add	r0, sp, #4
 804d4f6:	f004 f83d 	bl	8051574 <LoRaMacMibSetRequestConfirm>
        LmhpClockSyncState.AppTimeReqPending = false;
 804d4fa:	2300      	movs	r3, #0
 804d4fc:	7263      	strb	r3, [r4, #9]
}
 804d4fe:	b00a      	add	sp, #40	; 0x28
 804d500:	bd10      	pop	{r4, pc}
 804d502:	bf00      	nop
 804d504:	20019530 	.word	0x20019530

0804d508 <LmphClockSyncPackageFactory>:
}
 804d508:	4800      	ldr	r0, [pc, #0]	; (804d50c <LmphClockSyncPackageFactory+0x4>)
 804d50a:	4770      	bx	lr
 804d50c:	200181b8 	.word	0x200181b8

0804d510 <LmhpClockSyncAppTimeReq>:

LmHandlerErrorStatus_t LmhpClockSyncAppTimeReq( void )
{
 804d510:	b510      	push	{r4, lr}
 804d512:	b08e      	sub	sp, #56	; 0x38
    if( LmHandlerIsBusy( ) == true )
 804d514:	f7ff f93c 	bl	804c790 <LmHandlerIsBusy>
 804d518:	2800      	cmp	r0, #0
 804d51a:	d152      	bne.n	804d5c2 <LmhpClockSyncAppTimeReq+0xb2>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    if( LmhpClockSyncState.AppTimeReqPending == false )
 804d51c:	4b2a      	ldr	r3, [pc, #168]	; (804d5c8 <LmhpClockSyncAppTimeReq+0xb8>)
 804d51e:	7a5b      	ldrb	r3, [r3, #9]
 804d520:	b31b      	cbz	r3, 804d56a <LmhpClockSyncAppTimeReq+0x5a>
        // this package will use DeviceTimeAns answer as clock synchronization
        // mechanism.
        LmhpClockSyncPackage.OnDeviceTimeRequest( );
    }

    SysTime_t curTime = SysTimeGet( );
 804d522:	a80c      	add	r0, sp, #48	; 0x30
 804d524:	f7f5 fc4a 	bl	8042dbc <SysTimeGet>
    uint8_t dataBufferIndex = 0;

    // Substract Unix to Gps epcoh offset. The system time is based on Unix time.
    curTime.Seconds -= UNIX_GPS_EPOCH_OFFSET;
 804d528:	4b28      	ldr	r3, [pc, #160]	; (804d5cc <LmhpClockSyncAppTimeReq+0xbc>)
 804d52a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 804d52c:	4413      	add	r3, r2

    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = CLOCK_SYNC_APP_TIME_REQ;
 804d52e:	4926      	ldr	r1, [pc, #152]	; (804d5c8 <LmhpClockSyncAppTimeReq+0xb8>)
 804d530:	684a      	ldr	r2, [r1, #4]
 804d532:	2001      	movs	r0, #1
 804d534:	7010      	strb	r0, [r2, #0]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 0  ) & 0xFF;
 804d536:	7053      	strb	r3, [r2, #1]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 8  ) & 0xFF;
 804d538:	0a1c      	lsrs	r4, r3, #8
 804d53a:	7094      	strb	r4, [r2, #2]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 16 ) & 0xFF;
 804d53c:	0c1c      	lsrs	r4, r3, #16
 804d53e:	70d4      	strb	r4, [r2, #3]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = ( curTime.Seconds >> 24 ) & 0xFF;
 804d540:	0e1b      	lsrs	r3, r3, #24
 804d542:	7113      	strb	r3, [r2, #4]
    LmhpClockSyncState.TimeReqParam.Fields.AnsRequired = 0;
 804d544:	7a0b      	ldrb	r3, [r1, #8]
 804d546:	f36f 1304 	bfc	r3, #4, #1
 804d54a:	720b      	strb	r3, [r1, #8]
    LmhpClockSyncState.DataBuffer[dataBufferIndex++] = LmhpClockSyncState.TimeReqParam.Value;
 804d54c:	7153      	strb	r3, [r2, #5]

    LmHandlerAppData_t appData =
 804d54e:	23ca      	movs	r3, #202	; 0xca
 804d550:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 804d554:	2306      	movs	r3, #6
 804d556:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804d55a:	920b      	str	r2, [sp, #44]	; 0x2c
    {
        .Buffer = LmhpClockSyncState.DataBuffer,
        .BufferSize = dataBufferIndex,
        .Port = CLOCK_SYNC_PORT
    };
    LmhpClockSyncState.AppTimeReqPending = true;
 804d55c:	7248      	strb	r0, [r1, #9]
    return LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
 804d55e:	2100      	movs	r1, #0
 804d560:	a80a      	add	r0, sp, #40	; 0x28
 804d562:	f7ff f937 	bl	804c7d4 <LmHandlerSend>
}
 804d566:	b00e      	add	sp, #56	; 0x38
 804d568:	bd10      	pop	{r4, pc}
        mibReq.Type = MIB_ADR;
 804d56a:	2305      	movs	r3, #5
 804d56c:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibGetRequestConfirm( &mibReq );
 804d570:	a801      	add	r0, sp, #4
 804d572:	f003 fe9f 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
        LmhpClockSyncState.AdrEnabledPrev = mibReq.Param.AdrEnable;
 804d576:	f89d 3008 	ldrb.w	r3, [sp, #8]
 804d57a:	4c13      	ldr	r4, [pc, #76]	; (804d5c8 <LmhpClockSyncAppTimeReq+0xb8>)
 804d57c:	72a3      	strb	r3, [r4, #10]
        mibReq.Param.AdrEnable = false;
 804d57e:	2300      	movs	r3, #0
 804d580:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 804d584:	a801      	add	r0, sp, #4
 804d586:	f003 fff5 	bl	8051574 <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_CHANNELS_NB_TRANS;
 804d58a:	2325      	movs	r3, #37	; 0x25
 804d58c:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibGetRequestConfirm( &mibReq );
 804d590:	a801      	add	r0, sp, #4
 804d592:	f003 fe8f 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
        LmhpClockSyncState.NbTransPrev = mibReq.Param.ChannelsNbTrans;
 804d596:	f89d 3008 	ldrb.w	r3, [sp, #8]
 804d59a:	72e3      	strb	r3, [r4, #11]
        mibReq.Param.ChannelsNbTrans = 1;
 804d59c:	2301      	movs	r3, #1
 804d59e:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 804d5a2:	a801      	add	r0, sp, #4
 804d5a4:	f003 ffe6 	bl	8051574 <LoRaMacMibSetRequestConfirm>
        mibReq.Type = MIB_CHANNELS_DATARATE;
 804d5a8:	232d      	movs	r3, #45	; 0x2d
 804d5aa:	f88d 3004 	strb.w	r3, [sp, #4]
        LoRaMacMibGetRequestConfirm( &mibReq );  
 804d5ae:	a801      	add	r0, sp, #4
 804d5b0:	f003 fe80 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
        LmhpClockSyncState.DataratePrev = mibReq.Param.ChannelsDatarate;
 804d5b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 804d5b8:	7323      	strb	r3, [r4, #12]
        LmhpClockSyncPackage.OnDeviceTimeRequest( );
 804d5ba:	4b05      	ldr	r3, [pc, #20]	; (804d5d0 <LmhpClockSyncAppTimeReq+0xc0>)
 804d5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804d5be:	4798      	blx	r3
 804d5c0:	e7af      	b.n	804d522 <LmhpClockSyncAppTimeReq+0x12>
        return LORAMAC_HANDLER_ERROR;
 804d5c2:	f04f 30ff 	mov.w	r0, #4294967295
 804d5c6:	e7ce      	b.n	804d566 <LmhpClockSyncAppTimeReq+0x56>
 804d5c8:	20019530 	.word	0x20019530
 804d5cc:	ed2ac280 	.word	0xed2ac280
 804d5d0:	200181b8 	.word	0x200181b8

0804d5d4 <LmhpClockSyncProcess>:
{
 804d5d4:	b508      	push	{r3, lr}
    if( LmhpClockSyncState.NbTransmissions > 0 )
 804d5d6:	4b06      	ldr	r3, [pc, #24]	; (804d5f0 <LmhpClockSyncProcess+0x1c>)
 804d5d8:	7b5b      	ldrb	r3, [r3, #13]
 804d5da:	b903      	cbnz	r3, 804d5de <LmhpClockSyncProcess+0xa>
}
 804d5dc:	bd08      	pop	{r3, pc}
        if( LmhpClockSyncAppTimeReq( ) == LORAMAC_HANDLER_SUCCESS )
 804d5de:	f7ff ff97 	bl	804d510 <LmhpClockSyncAppTimeReq>
 804d5e2:	2800      	cmp	r0, #0
 804d5e4:	d1fa      	bne.n	804d5dc <LmhpClockSyncProcess+0x8>
            LmhpClockSyncState.NbTransmissions--;
 804d5e6:	4a02      	ldr	r2, [pc, #8]	; (804d5f0 <LmhpClockSyncProcess+0x1c>)
 804d5e8:	7b53      	ldrb	r3, [r2, #13]
 804d5ea:	3b01      	subs	r3, #1
 804d5ec:	7353      	strb	r3, [r2, #13]
}
 804d5ee:	e7f5      	b.n	804d5dc <LmhpClockSyncProcess+0x8>
 804d5f0:	20019530 	.word	0x20019530

0804d5f4 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 804d5f4:	4b01      	ldr	r3, [pc, #4]	; (804d5fc <LmhpComplianceIsInitialized+0x8>)
 804d5f6:	7818      	ldrb	r0, [r3, #0]
 804d5f8:	4770      	bx	lr
 804d5fa:	bf00      	nop
 804d5fc:	20019544 	.word	0x20019544

0804d600 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 804d600:	4b01      	ldr	r3, [pc, #4]	; (804d608 <LmhpComplianceIsTxPending+0x8>)
 804d602:	7858      	ldrb	r0, [r3, #1]
 804d604:	4770      	bx	lr
 804d606:	bf00      	nop
 804d608:	20019544 	.word	0x20019544

0804d60c <SendBeaconRxStatusInd>:
            break;
    }
}

static void SendBeaconRxStatusInd( void )
{
 804d60c:	b470      	push	{r4, r5, r6}
    uint32_t frequency = ComplianceTestState.ClassBStatus.Info.Frequency / 100;
 804d60e:	4b50      	ldr	r3, [pc, #320]	; (804d750 <SendBeaconRxStatusInd+0x144>)
 804d610:	6a19      	ldr	r1, [r3, #32]
 804d612:	4a50      	ldr	r2, [pc, #320]	; (804d754 <SendBeaconRxStatusInd+0x148>)
 804d614:	fba2 1201 	umull	r1, r2, r2, r1

    ComplianceTestState.DataBufferSize = 0;
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_BEACON_RX_STATUS_IND;
 804d618:	68d9      	ldr	r1, [r3, #12]
 804d61a:	2001      	movs	r0, #1
 804d61c:	7298      	strb	r0, [r3, #10]
 804d61e:	2440      	movs	r4, #64	; 0x40
 804d620:	700c      	strb	r4, [r1, #0]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( ComplianceTestState.ClassBStatus.IsBeaconRxOn == true ) ? 1 : 0;
 804d622:	7d1d      	ldrb	r5, [r3, #20]
 804d624:	68dc      	ldr	r4, [r3, #12]
 804d626:	7a99      	ldrb	r1, [r3, #10]
 804d628:	180e      	adds	r6, r1, r0
 804d62a:	729e      	strb	r6, [r3, #10]
 804d62c:	5465      	strb	r5, [r4, r1]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.BeaconCnt );
 804d62e:	68dc      	ldr	r4, [r3, #12]
 804d630:	7a99      	ldrb	r1, [r3, #10]
 804d632:	180d      	adds	r5, r1, r0
 804d634:	729d      	strb	r5, [r3, #10]
 804d636:	7d9d      	ldrb	r5, [r3, #22]
 804d638:	5465      	strb	r5, [r4, r1]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.BeaconCnt >> 8 );
 804d63a:	8ad9      	ldrh	r1, [r3, #22]
 804d63c:	68dd      	ldr	r5, [r3, #12]
 804d63e:	7a9c      	ldrb	r4, [r3, #10]
 804d640:	1826      	adds	r6, r4, r0
 804d642:	729e      	strb	r6, [r3, #10]
 804d644:	0a09      	lsrs	r1, r1, #8
 804d646:	5529      	strb	r1, [r5, r4]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( frequency );
 804d648:	68dc      	ldr	r4, [r3, #12]
 804d64a:	7a99      	ldrb	r1, [r3, #10]
 804d64c:	180d      	adds	r5, r1, r0
 804d64e:	729d      	strb	r5, [r3, #10]
 804d650:	f3c2 1547 	ubfx	r5, r2, #5, #8
 804d654:	5465      	strb	r5, [r4, r1]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( frequency >> 8 );
 804d656:	68dc      	ldr	r4, [r3, #12]
 804d658:	7a99      	ldrb	r1, [r3, #10]
 804d65a:	180d      	adds	r5, r1, r0
 804d65c:	729d      	strb	r5, [r3, #10]
 804d65e:	f3c2 3547 	ubfx	r5, r2, #13, #8
 804d662:	5465      	strb	r5, [r4, r1]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( frequency >> 16 );
 804d664:	68dc      	ldr	r4, [r3, #12]
 804d666:	7a99      	ldrb	r1, [r3, #10]
 804d668:	180d      	adds	r5, r1, r0
 804d66a:	729d      	strb	r5, [r3, #10]
 804d66c:	f3c2 5247 	ubfx	r2, r2, #21, #8
 804d670:	5462      	strb	r2, [r4, r1]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.ClassBStatus.Info.Datarate;
 804d672:	68d9      	ldr	r1, [r3, #12]
 804d674:	7a9a      	ldrb	r2, [r3, #10]
 804d676:	1814      	adds	r4, r2, r0
 804d678:	729c      	strb	r4, [r3, #10]
 804d67a:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
 804d67e:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.Rssi );
 804d680:	f9b3 4026 	ldrsh.w	r4, [r3, #38]	; 0x26
 804d684:	68d9      	ldr	r1, [r3, #12]
 804d686:	7a9a      	ldrb	r2, [r3, #10]
 804d688:	1815      	adds	r5, r2, r0
 804d68a:	729d      	strb	r5, [r3, #10]
 804d68c:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.Rssi >> 8 );
 804d68e:	68d9      	ldr	r1, [r3, #12]
 804d690:	7a9a      	ldrb	r2, [r3, #10]
 804d692:	1814      	adds	r4, r2, r0
 804d694:	729c      	strb	r4, [r3, #10]
 804d696:	f993 4027 	ldrsb.w	r4, [r3, #39]	; 0x27
 804d69a:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.Snr );
 804d69c:	f993 4028 	ldrsb.w	r4, [r3, #40]	; 0x28
 804d6a0:	68d9      	ldr	r1, [r3, #12]
 804d6a2:	7a9a      	ldrb	r2, [r3, #10]
 804d6a4:	1815      	adds	r5, r2, r0
 804d6a6:	729d      	strb	r5, [r3, #10]
 804d6a8:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.Param );
 804d6aa:	68d9      	ldr	r1, [r3, #12]
 804d6ac:	7a9a      	ldrb	r2, [r3, #10]
 804d6ae:	1814      	adds	r4, r2, r0
 804d6b0:	729c      	strb	r4, [r3, #10]
 804d6b2:	f893 4029 	ldrb.w	r4, [r3, #41]	; 0x29
 804d6b6:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.Time.Seconds );
 804d6b8:	68d9      	ldr	r1, [r3, #12]
 804d6ba:	7a9a      	ldrb	r2, [r3, #10]
 804d6bc:	1814      	adds	r4, r2, r0
 804d6be:	729c      	strb	r4, [r3, #10]
 804d6c0:	7e1c      	ldrb	r4, [r3, #24]
 804d6c2:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.Time.Seconds >> 8 );
 804d6c4:	68d9      	ldr	r1, [r3, #12]
 804d6c6:	7a9a      	ldrb	r2, [r3, #10]
 804d6c8:	1814      	adds	r4, r2, r0
 804d6ca:	729c      	strb	r4, [r3, #10]
 804d6cc:	7e5c      	ldrb	r4, [r3, #25]
 804d6ce:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.Time.Seconds >> 16 );
 804d6d0:	68d9      	ldr	r1, [r3, #12]
 804d6d2:	7a9a      	ldrb	r2, [r3, #10]
 804d6d4:	1814      	adds	r4, r2, r0
 804d6d6:	729c      	strb	r4, [r3, #10]
 804d6d8:	7e9c      	ldrb	r4, [r3, #26]
 804d6da:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.Time.Seconds >> 24 );
 804d6dc:	68d9      	ldr	r1, [r3, #12]
 804d6de:	7a9a      	ldrb	r2, [r3, #10]
 804d6e0:	1814      	adds	r4, r2, r0
 804d6e2:	729c      	strb	r4, [r3, #10]
 804d6e4:	7edc      	ldrb	r4, [r3, #27]
 804d6e6:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.GwSpecific.InfoDesc );
 804d6e8:	68d9      	ldr	r1, [r3, #12]
 804d6ea:	7a9a      	ldrb	r2, [r3, #10]
 804d6ec:	1814      	adds	r4, r2, r0
 804d6ee:	729c      	strb	r4, [r3, #10]
 804d6f0:	f893 402a 	ldrb.w	r4, [r3, #42]	; 0x2a
 804d6f4:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.GwSpecific.Info[0] );
 804d6f6:	68d9      	ldr	r1, [r3, #12]
 804d6f8:	7a9a      	ldrb	r2, [r3, #10]
 804d6fa:	1814      	adds	r4, r2, r0
 804d6fc:	729c      	strb	r4, [r3, #10]
 804d6fe:	f893 402b 	ldrb.w	r4, [r3, #43]	; 0x2b
 804d702:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.GwSpecific.Info[1] );
 804d704:	68d9      	ldr	r1, [r3, #12]
 804d706:	7a9a      	ldrb	r2, [r3, #10]
 804d708:	1814      	adds	r4, r2, r0
 804d70a:	729c      	strb	r4, [r3, #10]
 804d70c:	f893 402c 	ldrb.w	r4, [r3, #44]	; 0x2c
 804d710:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.GwSpecific.Info[2] );
 804d712:	68d9      	ldr	r1, [r3, #12]
 804d714:	7a9a      	ldrb	r2, [r3, #10]
 804d716:	1814      	adds	r4, r2, r0
 804d718:	729c      	strb	r4, [r3, #10]
 804d71a:	f893 402d 	ldrb.w	r4, [r3, #45]	; 0x2d
 804d71e:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.GwSpecific.Info[3] );
 804d720:	68d9      	ldr	r1, [r3, #12]
 804d722:	7a9a      	ldrb	r2, [r3, #10]
 804d724:	1814      	adds	r4, r2, r0
 804d726:	729c      	strb	r4, [r3, #10]
 804d728:	f893 402e 	ldrb.w	r4, [r3, #46]	; 0x2e
 804d72c:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.GwSpecific.Info[4] );
 804d72e:	68d9      	ldr	r1, [r3, #12]
 804d730:	7a9a      	ldrb	r2, [r3, #10]
 804d732:	1814      	adds	r4, r2, r0
 804d734:	729c      	strb	r4, [r3, #10]
 804d736:	f893 402f 	ldrb.w	r4, [r3, #47]	; 0x2f
 804d73a:	548c      	strb	r4, [r1, r2]
    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ( uint8_t )( ComplianceTestState.ClassBStatus.Info.GwSpecific.Info[5] );
 804d73c:	68d9      	ldr	r1, [r3, #12]
 804d73e:	7a9a      	ldrb	r2, [r3, #10]
 804d740:	1814      	adds	r4, r2, r0
 804d742:	729c      	strb	r4, [r3, #10]
 804d744:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
 804d748:	548c      	strb	r4, [r1, r2]

    ComplianceTestState.IsTxPending = true;
 804d74a:	7058      	strb	r0, [r3, #1]
}
 804d74c:	bc70      	pop	{r4, r5, r6}
 804d74e:	4770      	bx	lr
 804d750:	20019544 	.word	0x20019544
 804d754:	51eb851f 	.word	0x51eb851f

0804d758 <LmhpComplianceOnMlmeIndication>:
{
 804d758:	b538      	push	{r3, r4, r5, lr}
    if( ComplianceTestState.Initialized == false )
 804d75a:	4b14      	ldr	r3, [pc, #80]	; (804d7ac <LmhpComplianceOnMlmeIndication+0x54>)
 804d75c:	781b      	ldrb	r3, [r3, #0]
 804d75e:	b15b      	cbz	r3, 804d778 <LmhpComplianceOnMlmeIndication+0x20>
    switch( mlmeIndication->MlmeIndication )
 804d760:	7803      	ldrb	r3, [r0, #0]
 804d762:	2b0a      	cmp	r3, #10
 804d764:	d009      	beq.n	804d77a <LmhpComplianceOnMlmeIndication+0x22>
 804d766:	2b0e      	cmp	r3, #14
 804d768:	d106      	bne.n	804d778 <LmhpComplianceOnMlmeIndication+0x20>
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 804d76a:	2220      	movs	r2, #32
 804d76c:	2100      	movs	r1, #0
 804d76e:	4810      	ldr	r0, [pc, #64]	; (804d7b0 <LmhpComplianceOnMlmeIndication+0x58>)
 804d770:	f007 fbb3 	bl	8054eda <memset1>
            SendBeaconRxStatusInd( );
 804d774:	f7ff ff4a 	bl	804d60c <SendBeaconRxStatusInd>
}
 804d778:	bd38      	pop	{r3, r4, r5, pc}
            if( mlmeIndication->Status == LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 804d77a:	7843      	ldrb	r3, [r0, #1]
 804d77c:	2b0d      	cmp	r3, #13
 804d77e:	d00a      	beq.n	804d796 <LmhpComplianceOnMlmeIndication+0x3e>
            ComplianceTestState.ClassBStatus.Info = mlmeIndication->BeaconInfo;
 804d780:	4d0c      	ldr	r5, [pc, #48]	; (804d7b4 <LmhpComplianceOnMlmeIndication+0x5c>)
 804d782:	1d04      	adds	r4, r0, #4
 804d784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 804d786:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 804d788:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 804d78c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            SendBeaconRxStatusInd( );
 804d790:	f7ff ff3c 	bl	804d60c <SendBeaconRxStatusInd>
            break;
 804d794:	e7f0      	b.n	804d778 <LmhpComplianceOnMlmeIndication+0x20>
                if( ComplianceTestState.ClassBStatus.IsBeaconRxOn == false )
 804d796:	4b05      	ldr	r3, [pc, #20]	; (804d7ac <LmhpComplianceOnMlmeIndication+0x54>)
 804d798:	7d1b      	ldrb	r3, [r3, #20]
 804d79a:	b913      	cbnz	r3, 804d7a2 <LmhpComplianceOnMlmeIndication+0x4a>
                    ComplianceTestState.ClassBStatus.IsBeaconRxOn = true;
 804d79c:	4b03      	ldr	r3, [pc, #12]	; (804d7ac <LmhpComplianceOnMlmeIndication+0x54>)
 804d79e:	2201      	movs	r2, #1
 804d7a0:	751a      	strb	r2, [r3, #20]
                ComplianceTestState.ClassBStatus.BeaconCnt++;
 804d7a2:	4a02      	ldr	r2, [pc, #8]	; (804d7ac <LmhpComplianceOnMlmeIndication+0x54>)
 804d7a4:	8ad3      	ldrh	r3, [r2, #22]
 804d7a6:	3301      	adds	r3, #1
 804d7a8:	82d3      	strh	r3, [r2, #22]
 804d7aa:	e7e9      	b.n	804d780 <LmhpComplianceOnMlmeIndication+0x28>
 804d7ac:	20019544 	.word	0x20019544
 804d7b0:	20019558 	.word	0x20019558
 804d7b4:	2001955c 	.word	0x2001955c

0804d7b8 <LmhpComplianceOnMlmeConfirm>:
    switch( mlmeConfirm->MlmeRequest )
 804d7b8:	7803      	ldrb	r3, [r0, #0]
 804d7ba:	2b0b      	cmp	r3, #11
 804d7bc:	d000      	beq.n	804d7c0 <LmhpComplianceOnMlmeConfirm+0x8>
 804d7be:	4770      	bx	lr
{
 804d7c0:	b510      	push	{r4, lr}
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 804d7c2:	7843      	ldrb	r3, [r0, #1]
 804d7c4:	b12b      	cbz	r3, 804d7d2 <LmhpComplianceOnMlmeConfirm+0x1a>
                ComplianceTestState.ClassBStatus.IsBeaconRxOn = false;
 804d7c6:	4b08      	ldr	r3, [pc, #32]	; (804d7e8 <LmhpComplianceOnMlmeConfirm+0x30>)
 804d7c8:	2200      	movs	r2, #0
 804d7ca:	751a      	strb	r2, [r3, #20]
            SendBeaconRxStatusInd( );
 804d7cc:	f7ff ff1e 	bl	804d60c <SendBeaconRxStatusInd>
}
 804d7d0:	bd10      	pop	{r4, pc}
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 804d7d2:	4c05      	ldr	r4, [pc, #20]	; (804d7e8 <LmhpComplianceOnMlmeConfirm+0x30>)
 804d7d4:	2220      	movs	r2, #32
 804d7d6:	2100      	movs	r1, #0
 804d7d8:	f104 0014 	add.w	r0, r4, #20
 804d7dc:	f007 fb7d 	bl	8054eda <memset1>
                ComplianceTestState.ClassBStatus.IsBeaconRxOn = true;
 804d7e0:	2301      	movs	r3, #1
 804d7e2:	7523      	strb	r3, [r4, #20]
 804d7e4:	e7f2      	b.n	804d7cc <LmhpComplianceOnMlmeConfirm+0x14>
 804d7e6:	bf00      	nop
 804d7e8:	20019544 	.word	0x20019544

0804d7ec <LmhpComplianceInit>:
{
 804d7ec:	b538      	push	{r3, r4, r5, lr}
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 804d7ee:	b148      	cbz	r0, 804d804 <LmhpComplianceInit+0x18>
 804d7f0:	4603      	mov	r3, r0
 804d7f2:	b139      	cbz	r1, 804d804 <LmhpComplianceInit+0x18>
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 804d7f4:	480c      	ldr	r0, [pc, #48]	; (804d828 <LmhpComplianceInit+0x3c>)
 804d7f6:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 804d7f8:	4b0c      	ldr	r3, [pc, #48]	; (804d82c <LmhpComplianceInit+0x40>)
 804d7fa:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 804d7fc:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 804d7fe:	2201      	movs	r2, #1
 804d800:	701a      	strb	r2, [r3, #0]
 804d802:	e004      	b.n	804d80e <LmhpComplianceInit+0x22>
        ComplianceParams                = NULL;
 804d804:	2300      	movs	r3, #0
 804d806:	4a08      	ldr	r2, [pc, #32]	; (804d828 <LmhpComplianceInit+0x3c>)
 804d808:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 804d80a:	4a08      	ldr	r2, [pc, #32]	; (804d82c <LmhpComplianceInit+0x40>)
 804d80c:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 804d80e:	4c07      	ldr	r4, [pc, #28]	; (804d82c <LmhpComplianceInit+0x40>)
 804d810:	2500      	movs	r5, #0
 804d812:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 804d814:	2220      	movs	r2, #32
 804d816:	4629      	mov	r1, r5
 804d818:	f104 0014 	add.w	r0, r4, #20
 804d81c:	f007 fb5d 	bl	8054eda <memset1>
    ComplianceTestState.IsTxPending = false;
 804d820:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsResetCmdPending = false;
 804d822:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
}
 804d826:	bd38      	pop	{r3, r4, r5, pc}
 804d828:	20019540 	.word	0x20019540
 804d82c:	20019544 	.word	0x20019544

0804d830 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 804d830:	4b84      	ldr	r3, [pc, #528]	; (804da44 <LmhpComplianceOnMcpsIndication+0x214>)
 804d832:	781b      	ldrb	r3, [r3, #0]
 804d834:	2b00      	cmp	r3, #0
 804d836:	f000 8204 	beq.w	804dc42 <LmhpComplianceOnMcpsIndication+0x412>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 804d83a:	78c3      	ldrb	r3, [r0, #3]
 804d83c:	b90b      	cbnz	r3, 804d842 <LmhpComplianceOnMcpsIndication+0x12>
 804d83e:	7c83      	ldrb	r3, [r0, #18]
 804d840:	b11b      	cbz	r3, 804d84a <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 804d842:	4a80      	ldr	r2, [pc, #512]	; (804da44 <LmhpComplianceOnMcpsIndication+0x214>)
 804d844:	8a13      	ldrh	r3, [r2, #16]
 804d846:	3301      	adds	r3, #1
 804d848:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 804d84a:	7b43      	ldrb	r3, [r0, #13]
 804d84c:	2b00      	cmp	r3, #0
 804d84e:	f000 81f8 	beq.w	804dc42 <LmhpComplianceOnMcpsIndication+0x412>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 804d852:	78c3      	ldrb	r3, [r0, #3]
 804d854:	2be0      	cmp	r3, #224	; 0xe0
 804d856:	f040 81f4 	bne.w	804dc42 <LmhpComplianceOnMcpsIndication+0x412>
{
 804d85a:	b5f0      	push	{r4, r5, r6, r7, lr}
 804d85c:	b095      	sub	sp, #84	; 0x54
    ComplianceTestState.DataBufferSize = 0;
 804d85e:	4b79      	ldr	r3, [pc, #484]	; (804da44 <LmhpComplianceOnMcpsIndication+0x214>)
 804d860:	2200      	movs	r2, #0
 804d862:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 804d864:	6884      	ldr	r4, [r0, #8]
 804d866:	7823      	ldrb	r3, [r4, #0]
 804d868:	2b7f      	cmp	r3, #127	; 0x7f
 804d86a:	f200 8093 	bhi.w	804d994 <LmhpComplianceOnMcpsIndication+0x164>
 804d86e:	e8df f013 	tbh	[pc, r3, lsl #1]
 804d872:	0080      	.short	0x0080
 804d874:	009e0099 	.word	0x009e0099
 804d878:	00ad00a3 	.word	0x00ad00a3
 804d87c:	00c100ba 	.word	0x00c100ba
 804d880:	00f100da 	.word	0x00f100da
 804d884:	0122010e 	.word	0x0122010e
 804d888:	00910091 	.word	0x00910091
 804d88c:	00910091 	.word	0x00910091
 804d890:	00910091 	.word	0x00910091
 804d894:	00910091 	.word	0x00910091
 804d898:	00910091 	.word	0x00910091
 804d89c:	00910091 	.word	0x00910091
 804d8a0:	00910091 	.word	0x00910091
 804d8a4:	00910091 	.word	0x00910091
 804d8a8:	00910091 	.word	0x00910091
 804d8ac:	00910091 	.word	0x00910091
 804d8b0:	01260091 	.word	0x01260091
 804d8b4:	01360132 	.word	0x01360132
 804d8b8:	00910091 	.word	0x00910091
 804d8bc:	00910091 	.word	0x00910091
 804d8c0:	00910091 	.word	0x00910091
 804d8c4:	00910091 	.word	0x00910091
 804d8c8:	00910091 	.word	0x00910091
 804d8cc:	00910091 	.word	0x00910091
 804d8d0:	00910091 	.word	0x00910091
 804d8d4:	00910091 	.word	0x00910091
 804d8d8:	00910091 	.word	0x00910091
 804d8dc:	00910091 	.word	0x00910091
 804d8e0:	00910091 	.word	0x00910091
 804d8e4:	00910091 	.word	0x00910091
 804d8e8:	00910091 	.word	0x00910091
 804d8ec:	00910091 	.word	0x00910091
 804d8f0:	00910091 	.word	0x00910091
 804d8f4:	0152013e 	.word	0x0152013e
 804d8f8:	00910091 	.word	0x00910091
 804d8fc:	00910091 	.word	0x00910091
 804d900:	00910091 	.word	0x00910091
 804d904:	00910091 	.word	0x00910091
 804d908:	00910091 	.word	0x00910091
 804d90c:	00910091 	.word	0x00910091
 804d910:	00910091 	.word	0x00910091
 804d914:	00910091 	.word	0x00910091
 804d918:	00910091 	.word	0x00910091
 804d91c:	00910091 	.word	0x00910091
 804d920:	00910091 	.word	0x00910091
 804d924:	00910091 	.word	0x00910091
 804d928:	00910091 	.word	0x00910091
 804d92c:	00910091 	.word	0x00910091
 804d930:	00910091 	.word	0x00910091
 804d934:	00910091 	.word	0x00910091
 804d938:	00910091 	.word	0x00910091
 804d93c:	00910091 	.word	0x00910091
 804d940:	00910091 	.word	0x00910091
 804d944:	00910091 	.word	0x00910091
 804d948:	00910091 	.word	0x00910091
 804d94c:	00910091 	.word	0x00910091
 804d950:	00910091 	.word	0x00910091
 804d954:	00910091 	.word	0x00910091
 804d958:	00910091 	.word	0x00910091
 804d95c:	00910091 	.word	0x00910091
 804d960:	00910091 	.word	0x00910091
 804d964:	00910091 	.word	0x00910091
 804d968:	00910091 	.word	0x00910091
 804d96c:	017c0156 	.word	0x017c0156
 804d970:	018a      	.short	0x018a
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 804d972:	4b34      	ldr	r3, [pc, #208]	; (804da44 <LmhpComplianceOnMcpsIndication+0x214>)
 804d974:	68da      	ldr	r2, [r3, #12]
 804d976:	2101      	movs	r1, #1
 804d978:	7299      	strb	r1, [r3, #10]
 804d97a:	2000      	movs	r0, #0
 804d97c:	7010      	strb	r0, [r2, #0]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 804d97e:	68d8      	ldr	r0, [r3, #12]
 804d980:	7a9a      	ldrb	r2, [r3, #10]
 804d982:	1854      	adds	r4, r2, r1
 804d984:	729c      	strb	r4, [r3, #10]
 804d986:	2406      	movs	r4, #6
 804d988:	5484      	strb	r4, [r0, r2]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 804d98a:	68d8      	ldr	r0, [r3, #12]
 804d98c:	7a9a      	ldrb	r2, [r3, #10]
 804d98e:	1854      	adds	r4, r2, r1
 804d990:	729c      	strb	r4, [r3, #10]
 804d992:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 804d994:	4b2b      	ldr	r3, [pc, #172]	; (804da44 <LmhpComplianceOnMcpsIndication+0x214>)
 804d996:	7a9b      	ldrb	r3, [r3, #10]
 804d998:	b113      	cbz	r3, 804d9a0 <LmhpComplianceOnMcpsIndication+0x170>
        ComplianceTestState.IsTxPending = true;
 804d99a:	4b2a      	ldr	r3, [pc, #168]	; (804da44 <LmhpComplianceOnMcpsIndication+0x214>)
 804d99c:	2201      	movs	r2, #1
 804d99e:	705a      	strb	r2, [r3, #1]
}
 804d9a0:	b015      	add	sp, #84	; 0x54
 804d9a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            ComplianceTestState.IsResetCmdPending = true;
 804d9a4:	4b27      	ldr	r3, [pc, #156]	; (804da44 <LmhpComplianceOnMcpsIndication+0x214>)
 804d9a6:	2201      	movs	r2, #1
 804d9a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            break;
 804d9ac:	e7f2      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            CompliancePackage.OnJoinRequest( true );
 804d9ae:	4b26      	ldr	r3, [pc, #152]	; (804da48 <LmhpComplianceOnMcpsIndication+0x218>)
 804d9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804d9b2:	2001      	movs	r0, #1
 804d9b4:	4798      	blx	r3
            break;
 804d9b6:	e7ed      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            mibReq.Type = MIB_DEVICE_CLASS;
 804d9b8:	2300      	movs	r3, #0
 804d9ba:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.Class = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 804d9be:	7863      	ldrb	r3, [r4, #1]
 804d9c0:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 804d9c4:	4668      	mov	r0, sp
 804d9c6:	f003 fdd5 	bl	8051574 <LoRaMacMibSetRequestConfirm>
            break;
 804d9ca:	e7e3      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            mibReq.Type            = MIB_ADR;
 804d9cc:	2305      	movs	r3, #5
 804d9ce:	f88d 3000 	strb.w	r3, [sp]
            mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 804d9d2:	7863      	ldrb	r3, [r4, #1]
 804d9d4:	3b00      	subs	r3, #0
 804d9d6:	bf18      	it	ne
 804d9d8:	2301      	movne	r3, #1
 804d9da:	f88d 3004 	strb.w	r3, [sp, #4]
            LoRaMacMibSetRequestConfirm( &mibReq );
 804d9de:	4668      	mov	r0, sp
 804d9e0:	f003 fdc8 	bl	8051574 <LoRaMacMibSetRequestConfirm>
            break;
 804d9e4:	e7d6      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 804d9e6:	7860      	ldrb	r0, [r4, #1]
 804d9e8:	3800      	subs	r0, #0
 804d9ea:	bf18      	it	ne
 804d9ec:	2001      	movne	r0, #1
 804d9ee:	f004 fc49 	bl	8052284 <LoRaMacTestSetDutyCycleOn>
            break;
 804d9f2:	e7cf      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 804d9f4:	466d      	mov	r5, sp
 804d9f6:	4e15      	ldr	r6, [pc, #84]	; (804da4c <LmhpComplianceOnMcpsIndication+0x21c>)
 804d9f8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 804d9fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 804d9fc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 804d9fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 804da00:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 804da04:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 804da08:	7863      	ldrb	r3, [r4, #1]
            if( index < ( sizeof( periodicity ) / sizeof( uint16_t ) ) )
 804da0a:	2b15      	cmp	r3, #21
 804da0c:	d8c2      	bhi.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
                if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 804da0e:	4a10      	ldr	r2, [pc, #64]	; (804da50 <LmhpComplianceOnMcpsIndication+0x220>)
 804da10:	6812      	ldr	r2, [r2, #0]
 804da12:	6852      	ldr	r2, [r2, #4]
 804da14:	2a00      	cmp	r2, #0
 804da16:	d0bd      	beq.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 804da18:	a914      	add	r1, sp, #80	; 0x50
 804da1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 804da1e:	f853 0c50 	ldr.w	r0, [r3, #-80]
 804da22:	4790      	blx	r2
            break;
 804da24:	e7b6      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 804da26:	7862      	ldrb	r2, [r4, #1]
            if( ( frameType == 1 ) || ( frameType == 2 ) )
 804da28:	1e53      	subs	r3, r2, #1
 804da2a:	b2db      	uxtb	r3, r3
 804da2c:	2b01      	cmp	r3, #1
 804da2e:	d8b1      	bhi.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 804da30:	1e50      	subs	r0, r2, #1
 804da32:	bf18      	it	ne
 804da34:	2001      	movne	r0, #1
 804da36:	4b03      	ldr	r3, [pc, #12]	; (804da44 <LmhpComplianceOnMcpsIndication+0x214>)
 804da38:	7218      	strb	r0, [r3, #8]
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 804da3a:	4b05      	ldr	r3, [pc, #20]	; (804da50 <LmhpComplianceOnMcpsIndication+0x220>)
 804da3c:	681b      	ldr	r3, [r3, #0]
 804da3e:	689b      	ldr	r3, [r3, #8]
 804da40:	4798      	blx	r3
 804da42:	e7a7      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
 804da44:	20019544 	.word	0x20019544
 804da48:	200181f0 	.word	0x200181f0
 804da4c:	08059b80 	.word	0x08059b80
 804da50:	20019540 	.word	0x20019540
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 804da54:	4b7b      	ldr	r3, [pc, #492]	; (804dc44 <LmhpComplianceOnMcpsIndication+0x414>)
 804da56:	68da      	ldr	r2, [r3, #12]
 804da58:	2101      	movs	r1, #1
 804da5a:	7299      	strb	r1, [r3, #10]
 804da5c:	2308      	movs	r3, #8
 804da5e:	7013      	strb	r3, [r2, #0]
            for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 804da60:	460b      	mov	r3, r1
 804da62:	4a78      	ldr	r2, [pc, #480]	; (804dc44 <LmhpComplianceOnMcpsIndication+0x414>)
 804da64:	7a52      	ldrb	r2, [r2, #9]
 804da66:	7b04      	ldrb	r4, [r0, #12]
 804da68:	42a2      	cmp	r2, r4
 804da6a:	bf28      	it	cs
 804da6c:	4622      	movcs	r2, r4
 804da6e:	429a      	cmp	r2, r3
 804da70:	d990      	bls.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 804da72:	6882      	ldr	r2, [r0, #8]
 804da74:	1c4d      	adds	r5, r1, #1
 804da76:	5c52      	ldrb	r2, [r2, r1]
 804da78:	4972      	ldr	r1, [pc, #456]	; (804dc44 <LmhpComplianceOnMcpsIndication+0x414>)
 804da7a:	68ce      	ldr	r6, [r1, #12]
 804da7c:	7a8c      	ldrb	r4, [r1, #10]
 804da7e:	1c67      	adds	r7, r4, #1
 804da80:	728f      	strb	r7, [r1, #10]
 804da82:	3201      	adds	r2, #1
 804da84:	5532      	strb	r2, [r6, r4]
                 i++ )
 804da86:	3301      	adds	r3, #1
 804da88:	b2db      	uxtb	r3, r3
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 804da8a:	b2e9      	uxtb	r1, r5
 804da8c:	e7e9      	b.n	804da62 <LmhpComplianceOnMcpsIndication+0x232>
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 804da8e:	4b6d      	ldr	r3, [pc, #436]	; (804dc44 <LmhpComplianceOnMcpsIndication+0x414>)
 804da90:	68da      	ldr	r2, [r3, #12]
 804da92:	2101      	movs	r1, #1
 804da94:	7299      	strb	r1, [r3, #10]
 804da96:	2109      	movs	r1, #9
 804da98:	7011      	strb	r1, [r2, #0]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 804da9a:	8a18      	ldrh	r0, [r3, #16]
 804da9c:	68d9      	ldr	r1, [r3, #12]
 804da9e:	7a9a      	ldrb	r2, [r3, #10]
 804daa0:	1c54      	adds	r4, r2, #1
 804daa2:	729c      	strb	r4, [r3, #10]
 804daa4:	5488      	strb	r0, [r1, r2]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 804daa6:	8a1a      	ldrh	r2, [r3, #16]
 804daa8:	68d8      	ldr	r0, [r3, #12]
 804daaa:	7a99      	ldrb	r1, [r3, #10]
 804daac:	1c4c      	adds	r4, r1, #1
 804daae:	729c      	strb	r4, [r3, #10]
 804dab0:	0a13      	lsrs	r3, r2, #8
 804dab2:	5443      	strb	r3, [r0, r1]
            break;
 804dab4:	e76e      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.RxAppCnt = 0;
 804dab6:	4b63      	ldr	r3, [pc, #396]	; (804dc44 <LmhpComplianceOnMcpsIndication+0x414>)
 804dab8:	2200      	movs	r2, #0
 804daba:	821a      	strh	r2, [r3, #16]
            break;
 804dabc:	e76a      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            mlmeReq.Type = MLME_LINK_CHECK;
 804dabe:	2304      	movs	r3, #4
 804dac0:	f88d 3000 	strb.w	r3, [sp]
            CompliancePackage.OnMacMlmeRequest( LoRaMacMlmeRequest( &mlmeReq ), &mlmeReq,
 804dac4:	4b60      	ldr	r3, [pc, #384]	; (804dc48 <LmhpComplianceOnMcpsIndication+0x418>)
 804dac6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 804dac8:	4668      	mov	r0, sp
 804daca:	f004 f9f5 	bl	8051eb8 <LoRaMacMlmeRequest>
 804dace:	9a04      	ldr	r2, [sp, #16]
 804dad0:	4669      	mov	r1, sp
 804dad2:	47a0      	blx	r4
            break;
 804dad4:	e75e      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            CompliancePackage.OnDeviceTimeRequest( );
 804dad6:	4b5c      	ldr	r3, [pc, #368]	; (804dc48 <LmhpComplianceOnMcpsIndication+0x418>)
 804dad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804dada:	4798      	blx	r3
            break;
 804dadc:	e75a      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 804dade:	7860      	ldrb	r0, [r4, #1]
 804dae0:	4b58      	ldr	r3, [pc, #352]	; (804dc44 <LmhpComplianceOnMcpsIndication+0x414>)
 804dae2:	7558      	strb	r0, [r3, #21]
            ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 804dae4:	4b59      	ldr	r3, [pc, #356]	; (804dc4c <LmhpComplianceOnMcpsIndication+0x41c>)
 804dae6:	681b      	ldr	r3, [r3, #0]
 804dae8:	68db      	ldr	r3, [r3, #12]
 804daea:	4798      	blx	r3
            break;
 804daec:	e752      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_BEACON_CNT_ANS;
 804daee:	4b55      	ldr	r3, [pc, #340]	; (804dc44 <LmhpComplianceOnMcpsIndication+0x414>)
 804daf0:	68da      	ldr	r2, [r3, #12]
 804daf2:	2101      	movs	r1, #1
 804daf4:	7299      	strb	r1, [r3, #10]
 804daf6:	2141      	movs	r1, #65	; 0x41
 804daf8:	7011      	strb	r1, [r2, #0]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.ClassBStatus.BeaconCnt;
 804dafa:	8ad8      	ldrh	r0, [r3, #22]
 804dafc:	68d9      	ldr	r1, [r3, #12]
 804dafe:	7a9a      	ldrb	r2, [r3, #10]
 804db00:	1c54      	adds	r4, r2, #1
 804db02:	729c      	strb	r4, [r3, #10]
 804db04:	5488      	strb	r0, [r1, r2]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.ClassBStatus.BeaconCnt >> 8;
 804db06:	8ada      	ldrh	r2, [r3, #22]
 804db08:	68d8      	ldr	r0, [r3, #12]
 804db0a:	7a99      	ldrb	r1, [r3, #10]
 804db0c:	1c4c      	adds	r4, r1, #1
 804db0e:	729c      	strb	r4, [r3, #10]
 804db10:	0a13      	lsrs	r3, r2, #8
 804db12:	5443      	strb	r3, [r0, r1]
            break;
 804db14:	e73e      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            ComplianceTestState.ClassBStatus.BeaconCnt = 0;
 804db16:	4b4b      	ldr	r3, [pc, #300]	; (804dc44 <LmhpComplianceOnMcpsIndication+0x414>)
 804db18:	2200      	movs	r2, #0
 804db1a:	82da      	strh	r2, [r3, #22]
            break;
 804db1c:	e73a      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            if( mcpsIndication->BufferSize == 7 )
 804db1e:	7b03      	ldrb	r3, [r0, #12]
 804db20:	2b07      	cmp	r3, #7
 804db22:	f47f af37 	bne.w	804d994 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_TXCW;
 804db26:	2305      	movs	r3, #5
 804db28:	f88d 3000 	strb.w	r3, [sp]
                    ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 804db2c:	7863      	ldrb	r3, [r4, #1]
 804db2e:	78a2      	ldrb	r2, [r4, #2]
 804db30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                mlmeReq.Req.TxCw.Timeout =
 804db34:	f8ad 3004 	strh.w	r3, [sp, #4]
                    ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 804db38:	78e3      	ldrb	r3, [r4, #3]
 804db3a:	7922      	ldrb	r2, [r4, #4]
 804db3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                  ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 804db40:	7962      	ldrb	r2, [r4, #5]
                    ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 804db42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                  ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 804db46:	2264      	movs	r2, #100	; 0x64
 804db48:	fb02 f303 	mul.w	r3, r2, r3
                mlmeReq.Req.TxCw.Frequency =
 804db4c:	9302      	str	r3, [sp, #8]
                mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 804db4e:	6883      	ldr	r3, [r0, #8]
 804db50:	f993 3006 	ldrsb.w	r3, [r3, #6]
 804db54:	f88d 300c 	strb.w	r3, [sp, #12]
                CompliancePackage.OnMacMlmeRequest( LoRaMacMlmeRequest( &mlmeReq ), &mlmeReq,
 804db58:	4b3b      	ldr	r3, [pc, #236]	; (804dc48 <LmhpComplianceOnMcpsIndication+0x418>)
 804db5a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 804db5c:	4668      	mov	r0, sp
 804db5e:	f004 f9ab 	bl	8051eb8 <LoRaMacMlmeRequest>
 804db62:	9a04      	ldr	r2, [sp, #16]
 804db64:	4669      	mov	r1, sp
 804db66:	47a0      	blx	r4
            break;
 804db68:	e714      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            mibReq.Type = MIB_IS_CERT_FPORT_ON;
 804db6a:	2347      	movs	r3, #71	; 0x47
 804db6c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
            mibReq.Param.IsCertPortOn = false;
 804db70:	2300      	movs	r3, #0
 804db72:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            LoRaMacMibSetRequestConfirm( &mibReq );
 804db76:	a80b      	add	r0, sp, #44	; 0x2c
 804db78:	f003 fcfc 	bl	8051574 <LoRaMacMibSetRequestConfirm>
            ComplianceTestState.IsResetCmdPending = true;
 804db7c:	4b31      	ldr	r3, [pc, #196]	; (804dc44 <LmhpComplianceOnMcpsIndication+0x414>)
 804db7e:	2201      	movs	r2, #1
 804db80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
            break;
 804db84:	e706      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
            mibReq.Type = MIB_LORAWAN_VERSION;
 804db86:	2336      	movs	r3, #54	; 0x36
 804db88:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 804db8c:	4668      	mov	r0, sp
 804db8e:	f003 fb91 	bl	80512b4 <LoRaMacMibGetRequestConfirm>
            lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 804db92:	9901      	ldr	r1, [sp, #4]
            lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 804db94:	9a02      	ldr	r2, [sp, #8]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 804db96:	4b2b      	ldr	r3, [pc, #172]	; (804dc44 <LmhpComplianceOnMcpsIndication+0x414>)
 804db98:	68dc      	ldr	r4, [r3, #12]
 804db9a:	7a98      	ldrb	r0, [r3, #10]
 804db9c:	1c45      	adds	r5, r0, #1
 804db9e:	729d      	strb	r5, [r3, #10]
 804dba0:	257f      	movs	r5, #127	; 0x7f
 804dba2:	5425      	strb	r5, [r4, r0]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 804dba4:	4829      	ldr	r0, [pc, #164]	; (804dc4c <LmhpComplianceOnMcpsIndication+0x41c>)
 804dba6:	6800      	ldr	r0, [r0, #0]
 804dba8:	68dd      	ldr	r5, [r3, #12]
 804dbaa:	7a9c      	ldrb	r4, [r3, #10]
 804dbac:	1c66      	adds	r6, r4, #1
 804dbae:	729e      	strb	r6, [r3, #10]
 804dbb0:	78c6      	ldrb	r6, [r0, #3]
 804dbb2:	552e      	strb	r6, [r5, r4]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 804dbb4:	68dd      	ldr	r5, [r3, #12]
 804dbb6:	7a9c      	ldrb	r4, [r3, #10]
 804dbb8:	1c66      	adds	r6, r4, #1
 804dbba:	729e      	strb	r6, [r3, #10]
 804dbbc:	7886      	ldrb	r6, [r0, #2]
 804dbbe:	552e      	strb	r6, [r5, r4]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Rfu;
 804dbc0:	68dd      	ldr	r5, [r3, #12]
 804dbc2:	7a9c      	ldrb	r4, [r3, #10]
 804dbc4:	1c66      	adds	r6, r4, #1
 804dbc6:	729e      	strb	r6, [r3, #10]
 804dbc8:	7806      	ldrb	r6, [r0, #0]
 804dbca:	552e      	strb	r6, [r5, r4]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 804dbcc:	68dd      	ldr	r5, [r3, #12]
 804dbce:	7a9c      	ldrb	r4, [r3, #10]
 804dbd0:	1c66      	adds	r6, r4, #1
 804dbd2:	729e      	strb	r6, [r3, #10]
 804dbd4:	7840      	ldrb	r0, [r0, #1]
 804dbd6:	5528      	strb	r0, [r5, r4]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 804dbd8:	68dc      	ldr	r4, [r3, #12]
 804dbda:	7a98      	ldrb	r0, [r3, #10]
 804dbdc:	1c45      	adds	r5, r0, #1
 804dbde:	729d      	strb	r5, [r3, #10]
 804dbe0:	f3c1 6507 	ubfx	r5, r1, #24, #8
 804dbe4:	5425      	strb	r5, [r4, r0]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 804dbe6:	68dc      	ldr	r4, [r3, #12]
 804dbe8:	7a98      	ldrb	r0, [r3, #10]
 804dbea:	1c45      	adds	r5, r0, #1
 804dbec:	729d      	strb	r5, [r3, #10]
 804dbee:	f3c1 4507 	ubfx	r5, r1, #16, #8
 804dbf2:	5425      	strb	r5, [r4, r0]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Rfu;
 804dbf4:	68dc      	ldr	r4, [r3, #12]
 804dbf6:	7a98      	ldrb	r0, [r3, #10]
 804dbf8:	1c45      	adds	r5, r0, #1
 804dbfa:	729d      	strb	r5, [r3, #10]
 804dbfc:	5421      	strb	r1, [r4, r0]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 804dbfe:	68dc      	ldr	r4, [r3, #12]
 804dc00:	7a98      	ldrb	r0, [r3, #10]
 804dc02:	1c45      	adds	r5, r0, #1
 804dc04:	729d      	strb	r5, [r3, #10]
 804dc06:	f3c1 2107 	ubfx	r1, r1, #8, #8
 804dc0a:	5421      	strb	r1, [r4, r0]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 804dc0c:	68d8      	ldr	r0, [r3, #12]
 804dc0e:	7a99      	ldrb	r1, [r3, #10]
 804dc10:	1c4c      	adds	r4, r1, #1
 804dc12:	729c      	strb	r4, [r3, #10]
 804dc14:	f3c2 6407 	ubfx	r4, r2, #24, #8
 804dc18:	5444      	strb	r4, [r0, r1]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 804dc1a:	68d8      	ldr	r0, [r3, #12]
 804dc1c:	7a99      	ldrb	r1, [r3, #10]
 804dc1e:	1c4c      	adds	r4, r1, #1
 804dc20:	729c      	strb	r4, [r3, #10]
 804dc22:	f3c2 4407 	ubfx	r4, r2, #16, #8
 804dc26:	5444      	strb	r4, [r0, r1]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Rfu;
 804dc28:	68d8      	ldr	r0, [r3, #12]
 804dc2a:	7a99      	ldrb	r1, [r3, #10]
 804dc2c:	1c4c      	adds	r4, r1, #1
 804dc2e:	729c      	strb	r4, [r3, #10]
 804dc30:	5442      	strb	r2, [r0, r1]
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 804dc32:	68d8      	ldr	r0, [r3, #12]
 804dc34:	7a99      	ldrb	r1, [r3, #10]
 804dc36:	1c4c      	adds	r4, r1, #1
 804dc38:	729c      	strb	r4, [r3, #10]
 804dc3a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 804dc3e:	5442      	strb	r2, [r0, r1]
            break;
 804dc40:	e6a8      	b.n	804d994 <LmhpComplianceOnMcpsIndication+0x164>
 804dc42:	4770      	bx	lr
 804dc44:	20019544 	.word	0x20019544
 804dc48:	200181f0 	.word	0x200181f0
 804dc4c:	20019540 	.word	0x20019540

0804dc50 <LmhpComplianceProcess>:
{
 804dc50:	b530      	push	{r4, r5, lr}
 804dc52:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 804dc54:	4b19      	ldr	r3, [pc, #100]	; (804dcbc <LmhpComplianceProcess+0x6c>)
 804dc56:	785b      	ldrb	r3, [r3, #1]
 804dc58:	b92b      	cbnz	r3, 804dc66 <LmhpComplianceProcess+0x16>
    if( ComplianceTestState.IsResetCmdPending == true )
 804dc5a:	4b18      	ldr	r3, [pc, #96]	; (804dcbc <LmhpComplianceProcess+0x6c>)
 804dc5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 804dc60:	bb23      	cbnz	r3, 804dcac <LmhpComplianceProcess+0x5c>
}
 804dc62:	b003      	add	sp, #12
 804dc64:	bd30      	pop	{r4, r5, pc}
        if( TimerGetCurrentTime( ) > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 804dc66:	f7f5 fac8 	bl	80431fa <TimerGetCurrentTime>
 804dc6a:	4605      	mov	r5, r0
 804dc6c:	4b13      	ldr	r3, [pc, #76]	; (804dcbc <LmhpComplianceProcess+0x6c>)
 804dc6e:	685c      	ldr	r4, [r3, #4]
 804dc70:	f7fe fd6e 	bl	804c750 <LmHandlerGetDutyCycleWaitTime>
 804dc74:	4404      	add	r4, r0
 804dc76:	42a5      	cmp	r5, r4
 804dc78:	d9ef      	bls.n	804dc5a <LmhpComplianceProcess+0xa>
            ComplianceTestState.IsTxPending = false;
 804dc7a:	4c10      	ldr	r4, [pc, #64]	; (804dcbc <LmhpComplianceProcess+0x6c>)
 804dc7c:	2300      	movs	r3, #0
 804dc7e:	7063      	strb	r3, [r4, #1]
            ComplianceTestState.TxPendingTimestamp = TimerGetCurrentTime( );
 804dc80:	f7f5 fabb 	bl	80431fa <TimerGetCurrentTime>
 804dc84:	6060      	str	r0, [r4, #4]
            if( ComplianceTestState.DataBufferSize != 0 )
 804dc86:	7aa3      	ldrb	r3, [r4, #10]
 804dc88:	2b00      	cmp	r3, #0
 804dc8a:	d0e6      	beq.n	804dc5a <LmhpComplianceProcess+0xa>
                LmHandlerAppData_t appData = {
 804dc8c:	22e0      	movs	r2, #224	; 0xe0
 804dc8e:	f88d 2000 	strb.w	r2, [sp]
 804dc92:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 804dc96:	68e2      	ldr	r2, [r4, #12]
                LmHandlerAppData_t appData = {
 804dc98:	9201      	str	r2, [sp, #4]
                if( LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed ) != LORAMAC_HANDLER_SUCCESS )
 804dc9a:	7a21      	ldrb	r1, [r4, #8]
 804dc9c:	4668      	mov	r0, sp
 804dc9e:	f7fe fd99 	bl	804c7d4 <LmHandlerSend>
 804dca2:	2800      	cmp	r0, #0
 804dca4:	d0d9      	beq.n	804dc5a <LmhpComplianceProcess+0xa>
                    ComplianceTestState.IsTxPending = true;
 804dca6:	2201      	movs	r2, #1
 804dca8:	7062      	strb	r2, [r4, #1]
 804dcaa:	e7d6      	b.n	804dc5a <LmhpComplianceProcess+0xa>
        ComplianceTestState.IsResetCmdPending = false;
 804dcac:	4b03      	ldr	r3, [pc, #12]	; (804dcbc <LmhpComplianceProcess+0x6c>)
 804dcae:	2200      	movs	r2, #0
 804dcb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        BoardResetMcu( );
 804dcb4:	f7f7 f8b0 	bl	8044e18 <BoardResetMcu>
}
 804dcb8:	e7d3      	b.n	804dc62 <LmhpComplianceProcess+0x12>
 804dcba:	bf00      	nop
 804dcbc:	20019544 	.word	0x20019544

0804dcc0 <LmphCompliancePackageFactory>:
}
 804dcc0:	4800      	ldr	r0, [pc, #0]	; (804dcc4 <LmphCompliancePackageFactory+0x4>)
 804dcc2:	4770      	bx	lr
 804dcc4:	200181f0 	.word	0x200181f0

0804dcc8 <LmhpFragmentationIsInitialized>:
}

static bool LmhpFragmentationIsInitialized( void )
{
    return LmhpFragmentationState.Initialized;
}
 804dcc8:	4b01      	ldr	r3, [pc, #4]	; (804dcd0 <LmhpFragmentationIsInitialized+0x8>)
 804dcca:	7818      	ldrb	r0, [r3, #0]
 804dccc:	4770      	bx	lr
 804dcce:	bf00      	nop
 804dcd0:	20019598 	.word	0x20019598

0804dcd4 <LmhpFragmentationIsTxPending>:

static bool  LmhpFragmentationIsTxPending( void )
{
    return LmhpFragmentationState.IsTxPending;
}
 804dcd4:	4b01      	ldr	r3, [pc, #4]	; (804dcdc <LmhpFragmentationIsTxPending+0x8>)
 804dcd6:	7858      	ldrb	r0, [r3, #1]
 804dcd8:	4770      	bx	lr
 804dcda:	bf00      	nop
 804dcdc:	20019598 	.word	0x20019598

0804dce0 <LmhpFragmentationOnMcpsIndication>:
    // Answer struct for the commands.
    LmHandlerAppData_t cmdReplyAppData;
    // Co-efficient used to calculate delay.
    uint8_t blockAckDelay = 0;

    if( mcpsIndication->Port != FRAGMENTATION_PORT )
 804dce0:	78c3      	ldrb	r3, [r0, #3]
 804dce2:	2bc9      	cmp	r3, #201	; 0xc9
 804dce4:	f000 819a 	beq.w	804e01c <LmhpFragmentationOnMcpsIndication+0x33c>
 804dce8:	4770      	bx	lr
    {
        switch( mcpsIndication->Buffer[cmdIndex++] )
        {
            case FRAGMENTATION_PKG_VERSION_REQ:
            {
                if( mcpsIndication->Multicast == 1 )
 804dcea:	78b3      	ldrb	r3, [r6, #2]
 804dcec:	2b01      	cmp	r3, #1
 804dcee:	f000 8148 	beq.w	804df82 <LmhpFragmentationOnMcpsIndication+0x2a2>
                {
                    // Multicast channel. Don't process command.
                    break;
                }
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_PKG_VERSION_ANS;
 804dcf2:	4bb3      	ldr	r3, [pc, #716]	; (804dfc0 <LmhpFragmentationOnMcpsIndication+0x2e0>)
 804dcf4:	685a      	ldr	r2, [r3, #4]
 804dcf6:	1c79      	adds	r1, r7, #1
 804dcf8:	b2c9      	uxtb	r1, r1
 804dcfa:	2300      	movs	r3, #0
 804dcfc:	55d3      	strb	r3, [r2, r7]
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_ID;
 804dcfe:	1cbb      	adds	r3, r7, #2
 804dd00:	b2db      	uxtb	r3, r3
 804dd02:	2003      	movs	r0, #3
 804dd04:	5450      	strb	r0, [r2, r1]
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_VERSION;
 804dd06:	4407      	add	r7, r0
 804dd08:	b2ff      	uxtb	r7, r7
 804dd0a:	2101      	movs	r1, #1
 804dd0c:	54d1      	strb	r1, [r2, r3]
                break;
 804dd0e:	e138      	b.n	804df82 <LmhpFragmentationOnMcpsIndication+0x2a2>
            }
            case FRAGMENTATION_FRAG_STATUS_REQ:
            {
                uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 804dd10:	3302      	adds	r3, #2
 804dd12:	b2dc      	uxtb	r4, r3
 804dd14:	5d4b      	ldrb	r3, [r1, r5]
                uint8_t participants = fragIndex & 0x01;
 804dd16:	f003 0a01 	and.w	sl, r3, #1

                fragIndex >>= 1;
 804dd1a:	085d      	lsrs	r5, r3, #1
                FragSessionData[fragIndex].FragDecoderStatus = FragDecoderGetStatus( );
 804dd1c:	f003 0bfe 	and.w	fp, r3, #254	; 0xfe
 804dd20:	eb0b 0b53 	add.w	fp, fp, r3, lsr #1
 804dd24:	4ba7      	ldr	r3, [pc, #668]	; (804dfc4 <LmhpFragmentationOnMcpsIndication+0x2e4>)
 804dd26:	eb03 0bcb 	add.w	fp, r3, fp, lsl #3
 804dd2a:	4668      	mov	r0, sp
 804dd2c:	f7ff fae2 	bl	804d2f4 <FragDecoderGetStatus>
 804dd30:	f10b 030c 	add.w	r3, fp, #12
 804dd34:	9800      	ldr	r0, [sp, #0]
 804dd36:	9901      	ldr	r1, [sp, #4]
 804dd38:	c303      	stmia	r3!, {r0, r1}

                if( ( participants == 1 ) ||
 804dd3a:	f1ba 0f00 	cmp.w	sl, #0
 804dd3e:	d10c      	bne.n	804dd5a <LmhpFragmentationOnMcpsIndication+0x7a>
 804dd40:	f1ba 0f00 	cmp.w	sl, #0
 804dd44:	f040 8166 	bne.w	804e014 <LmhpFragmentationOnMcpsIndication+0x334>
                    ( ( participants == 0 ) && ( FragSessionData[fragIndex].FragDecoderStatus.FragNbLost > 0 ) ) )
 804dd48:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 804dd4c:	4a9d      	ldr	r2, [pc, #628]	; (804dfc4 <LmhpFragmentationOnMcpsIndication+0x2e4>)
 804dd4e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 804dd52:	89db      	ldrh	r3, [r3, #14]
 804dd54:	2b00      	cmp	r3, #0
 804dd56:	f000 815f 	beq.w	804e018 <LmhpFragmentationOnMcpsIndication+0x338>
                {
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_STATUS_ANS;
 804dd5a:	4b99      	ldr	r3, [pc, #612]	; (804dfc0 <LmhpFragmentationOnMcpsIndication+0x2e0>)
 804dd5c:	685a      	ldr	r2, [r3, #4]
 804dd5e:	1c79      	adds	r1, r7, #1
 804dd60:	b2c9      	uxtb	r1, r1
 804dd62:	f04f 0901 	mov.w	r9, #1
 804dd66:	f802 9007 	strb.w	r9, [r2, r7]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.FragNbRx & 0xFF;
 804dd6a:	4896      	ldr	r0, [pc, #600]	; (804dfc4 <LmhpFragmentationOnMcpsIndication+0x2e4>)
 804dd6c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 804dd70:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 804dd74:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 804dd78:	f107 0e02 	add.w	lr, r7, #2
 804dd7c:	fa5f fe8e 	uxtb.w	lr, lr
 804dd80:	f802 c001 	strb.w	ip, [r2, r1]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = ( fragIndex << 6 ) |
                                                                           ( ( FragSessionData[fragIndex].FragDecoderStatus.FragNbRx >> 8 ) & 0x3F );
 804dd84:	8999      	ldrh	r1, [r3, #12]
 804dd86:	f3c1 2105 	ubfx	r1, r1, #8, #6
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = ( fragIndex << 6 ) |
 804dd8a:	f107 0c03 	add.w	ip, r7, #3
 804dd8e:	fa5f fc8c 	uxtb.w	ip, ip
 804dd92:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
 804dd96:	f802 100e 	strb.w	r1, [r2, lr]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.FragNbLost;
 804dd9a:	f8b3 e00e 	ldrh.w	lr, [r3, #14]
 804dd9e:	1d39      	adds	r1, r7, #4
 804dda0:	b2c9      	uxtb	r1, r1
 804dda2:	f802 e00c 	strb.w	lr, [r2, ip]
                    LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FragSessionData[fragIndex].FragDecoderStatus.MatrixError & 0x01;
 804dda6:	7c9b      	ldrb	r3, [r3, #18]
 804dda8:	3705      	adds	r7, #5
 804ddaa:	b2ff      	uxtb	r7, r7
 804ddac:	ea03 0309 	and.w	r3, r3, r9
 804ddb0:	5453      	strb	r3, [r2, r1]

                    // Fetch the co-efficient value required to calculate delay of that respective session.
                    blockAckDelay = FragSessionData[fragIndex].FragGroupData.Control.Fields.BlockAckDelay;
 804ddb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 804ddb6:	eb00 05c5 	add.w	r5, r0, r5, lsl #3
 804ddba:	f895 8005 	ldrb.w	r8, [r5, #5]
 804ddbe:	f008 0807 	and.w	r8, r8, #7
                uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 804ddc2:	4625      	mov	r5, r4
 804ddc4:	e0dd      	b.n	804df82 <LmhpFragmentationOnMcpsIndication+0x2a2>
                }
                break;
            }
            case FRAGMENTATION_FRAG_SESSION_SETUP_REQ:
            {
                if( mcpsIndication->Multicast == 1 )
 804ddc6:	78b2      	ldrb	r2, [r6, #2]
 804ddc8:	2a01      	cmp	r2, #1
 804ddca:	f000 80da 	beq.w	804df82 <LmhpFragmentationOnMcpsIndication+0x2a2>
                    break;
                }
                FragSessionData_t fragSessionData;
                uint8_t status = 0x00;

                fragSessionData.FragGroupData.FragSession.Value = mcpsIndication->Buffer[cmdIndex++];
 804ddce:	1c98      	adds	r0, r3, #2
 804ddd0:	b2c0      	uxtb	r0, r0
 804ddd2:	5d4a      	ldrb	r2, [r1, r5]
 804ddd4:	f88d 2009 	strb.w	r2, [sp, #9]
                
                fragSessionData.FragGroupData.FragNb =  ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x00FF;
 804ddd8:	1cda      	adds	r2, r3, #3
 804ddda:	b2d2      	uxtb	r2, r2
 804dddc:	5c0c      	ldrb	r4, [r1, r0]
                fragSessionData.FragGroupData.FragNb |= ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0xFF00;
 804ddde:	1d18      	adds	r0, r3, #4
 804dde0:	b2c0      	uxtb	r0, r0
 804dde2:	5c8a      	ldrb	r2, [r1, r2]
 804dde4:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 804dde8:	f8ad 400a 	strh.w	r4, [sp, #10]

                fragSessionData.FragGroupData.FragSize = mcpsIndication->Buffer[cmdIndex++];
 804ddec:	1d5a      	adds	r2, r3, #5
 804ddee:	b2d2      	uxtb	r2, r2
 804ddf0:	f811 9000 	ldrb.w	r9, [r1, r0]
 804ddf4:	f88d 900c 	strb.w	r9, [sp, #12]

                fragSessionData.FragGroupData.Control.Value = mcpsIndication->Buffer[cmdIndex++];
 804ddf8:	1d98      	adds	r0, r3, #6
 804ddfa:	b2c0      	uxtb	r0, r0
 804ddfc:	f811 a002 	ldrb.w	sl, [r1, r2]
 804de00:	f88d a00d 	strb.w	sl, [sp, #13]

                fragSessionData.FragGroupData.Padding = mcpsIndication->Buffer[cmdIndex++];
 804de04:	1dda      	adds	r2, r3, #7
 804de06:	b2d2      	uxtb	r2, r2
 804de08:	5c08      	ldrb	r0, [r1, r0]
 804de0a:	f88d 000e 	strb.w	r0, [sp, #14]

                fragSessionData.FragGroupData.Descriptor =  ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 804de0e:	f103 0008 	add.w	r0, r3, #8
 804de12:	b2c0      	uxtb	r0, r0
 804de14:	5c8a      	ldrb	r2, [r1, r2]
                fragSessionData.FragGroupData.Descriptor += ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 804de16:	f103 0509 	add.w	r5, r3, #9
 804de1a:	b2ed      	uxtb	r5, r5
 804de1c:	5c08      	ldrb	r0, [r1, r0]
 804de1e:	eb02 2200 	add.w	r2, r2, r0, lsl #8
                fragSessionData.FragGroupData.Descriptor += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 804de22:	f103 000a 	add.w	r0, r3, #10
 804de26:	b2c0      	uxtb	r0, r0
 804de28:	5d4d      	ldrb	r5, [r1, r5]
 804de2a:	eb02 4205 	add.w	r2, r2, r5, lsl #16
                fragSessionData.FragGroupData.Descriptor += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 804de2e:	330b      	adds	r3, #11
 804de30:	b2dd      	uxtb	r5, r3
 804de32:	5c0b      	ldrb	r3, [r1, r0]
 804de34:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 804de38:	9204      	str	r2, [sp, #16]

                if( fragSessionData.FragGroupData.Control.Fields.FragAlgo > 0 )
 804de3a:	f01a 0a38 	ands.w	sl, sl, #56	; 0x38
 804de3e:	d001      	beq.n	804de44 <LmhpFragmentationOnMcpsIndication+0x164>
                {
                    status |= 0x01; // Encoding unsupported
 804de40:	f04f 0a01 	mov.w	sl, #1
                }

#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
                if( ( fragSessionData.FragGroupData.FragNb > FRAG_MAX_NB ) || 
 804de44:	2c15      	cmp	r4, #21
 804de46:	d802      	bhi.n	804de4e <LmhpFragmentationOnMcpsIndication+0x16e>
 804de48:	f1b9 0f32 	cmp.w	r9, #50	; 0x32
 804de4c:	d917      	bls.n	804de7e <LmhpFragmentationOnMcpsIndication+0x19e>
                    ( fragSessionData.FragGroupData.FragSize > FRAG_MAX_SIZE ) ||
                    ( ( fragSessionData.FragGroupData.FragNb * fragSessionData.FragGroupData.FragSize ) > FragDecoderGetMaxFileSize( ) ) )
                {
                    status |= 0x02; // Not enough Memory
 804de4e:	f04a 0a02 	orr.w	sl, sl, #2
                    ( ( fragSessionData.FragGroupData.FragNb * fragSessionData.FragGroupData.FragSize ) > LmhpFragmentationParams->BufferSize ) )
                {
                    status |= 0x02; // Not enough Memory
                }
#endif
                status |= ( fragSessionData.FragGroupData.FragSession.Fields.FragIndex << 6 ) & 0xC0;
 804de52:	f89d 3009 	ldrb.w	r3, [sp, #9]
 804de56:	f3c3 1301 	ubfx	r3, r3, #4, #2
 804de5a:	ea4a 1b83 	orr.w	fp, sl, r3, lsl #6
                if( fragSessionData.FragGroupData.Descriptor != 0x01020304 )
                {
                    //status |= 0x08; // Wrong Descriptor
                }

                if( ( status & 0x0F ) == 0 )
 804de5e:	f01a 0f0f 	tst.w	sl, #15
 804de62:	d013      	beq.n	804de8c <LmhpFragmentationOnMcpsIndication+0x1ac>
                                     fragSessionData.FragGroupData.FragSize,
                                     LmhpFragmentationParams->Buffer,
                                     LmhpFragmentationParams->BufferSize );
#endif
                }
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_SESSION_SETUP_ANS;
 804de64:	4b56      	ldr	r3, [pc, #344]	; (804dfc0 <LmhpFragmentationOnMcpsIndication+0x2e0>)
 804de66:	685a      	ldr	r2, [r3, #4]
 804de68:	1c7b      	adds	r3, r7, #1
 804de6a:	b2db      	uxtb	r3, r3
 804de6c:	2102      	movs	r1, #2
 804de6e:	55d1      	strb	r1, [r2, r7]
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = status;
 804de70:	440f      	add	r7, r1
 804de72:	b2ff      	uxtb	r7, r7
 804de74:	f802 b003 	strb.w	fp, [r2, r3]
                isAnswerDelayed = false;
 804de78:	f04f 0900 	mov.w	r9, #0
                break;
 804de7c:	e081      	b.n	804df82 <LmhpFragmentationOnMcpsIndication+0x2a2>
                    ( ( fragSessionData.FragGroupData.FragNb * fragSessionData.FragGroupData.FragSize ) > FragDecoderGetMaxFileSize( ) ) )
 804de7e:	fb09 fb04 	mul.w	fp, r9, r4
 804de82:	f7ff f901 	bl	804d088 <FragDecoderGetMaxFileSize>
                    ( fragSessionData.FragGroupData.FragSize > FRAG_MAX_SIZE ) ||
 804de86:	4583      	cmp	fp, r0
 804de88:	d9e3      	bls.n	804de52 <LmhpFragmentationOnMcpsIndication+0x172>
 804de8a:	e7e0      	b.n	804de4e <LmhpFragmentationOnMcpsIndication+0x16e>
                    fragSessionData.FragGroupData.IsActive = true;
 804de8c:	2201      	movs	r2, #1
 804de8e:	f88d 2008 	strb.w	r2, [sp, #8]
                    fragSessionData.FragDecoderPorcessStatus = FRAG_SESSION_ONGOING;
 804de92:	f04f 32ff 	mov.w	r2, #4294967295
 804de96:	9207      	str	r2, [sp, #28]
                    FragSessionData[fragSessionData.FragGroupData.FragSession.Fields.FragIndex] = fragSessionData;
 804de98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 804de9c:	4a49      	ldr	r2, [pc, #292]	; (804dfc4 <LmhpFragmentationOnMcpsIndication+0x2e4>)
 804de9e:	eb02 0cc3 	add.w	ip, r2, r3, lsl #3
 804dea2:	f10d 0e08 	add.w	lr, sp, #8
 804dea6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 804deaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 804deae:	e89e 0003 	ldmia.w	lr, {r0, r1}
 804deb2:	e88c 0003 	stmia.w	ip, {r0, r1}
                    FragDecoderInit( fragSessionData.FragGroupData.FragNb,
 804deb6:	4b44      	ldr	r3, [pc, #272]	; (804dfc8 <LmhpFragmentationOnMcpsIndication+0x2e8>)
 804deb8:	681a      	ldr	r2, [r3, #0]
 804deba:	4649      	mov	r1, r9
 804debc:	4620      	mov	r0, r4
 804debe:	f7ff f895 	bl	804cfec <FragDecoderInit>
 804dec2:	e7cf      	b.n	804de64 <LmhpFragmentationOnMcpsIndication+0x184>
            }
            case FRAGMENTATION_FRAG_SESSION_DELETE_REQ:
            {
                if( mcpsIndication->Multicast == 1 )
 804dec4:	78b2      	ldrb	r2, [r6, #2]
 804dec6:	2a01      	cmp	r2, #1
 804dec8:	d05b      	beq.n	804df82 <LmhpFragmentationOnMcpsIndication+0x2a2>
                {
                    // Multicast channel. Don't process command.
                    break;
                }
                uint8_t status = 0x00;
                uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 804deca:	3302      	adds	r3, #2
 804decc:	b2db      	uxtb	r3, r3
 804dece:	5d4a      	ldrb	r2, [r1, r5]
 804ded0:	f002 0203 	and.w	r2, r2, #3

                status |= id;
                if( ( id >= FRAGMENTATION_MAX_SESSIONS ) || ( FragSessionData[id].FragGroupData.IsActive == false ) )
 804ded4:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 804ded8:	493a      	ldr	r1, [pc, #232]	; (804dfc4 <LmhpFragmentationOnMcpsIndication+0x2e4>)
 804deda:	f811 1030 	ldrb.w	r1, [r1, r0, lsl #3]
 804dede:	b971      	cbnz	r1, 804defe <LmhpFragmentationOnMcpsIndication+0x21e>
                {
                    status |= 0x04; // Session does not exist
 804dee0:	f042 0204 	orr.w	r2, r2, #4
                else
                {
                    // Delete session
                    FragSessionData[id].FragGroupData.IsActive = false;
                }
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = FRAGMENTATION_FRAG_SESSION_DELETE_ANS;
 804dee4:	4936      	ldr	r1, [pc, #216]	; (804dfc0 <LmhpFragmentationOnMcpsIndication+0x2e0>)
 804dee6:	6848      	ldr	r0, [r1, #4]
 804dee8:	1c79      	adds	r1, r7, #1
 804deea:	b2c9      	uxtb	r1, r1
 804deec:	2403      	movs	r4, #3
 804deee:	55c4      	strb	r4, [r0, r7]
                LmhpFragmentationState.DataBuffer[dataBufferIndex++] = status;
 804def0:	3702      	adds	r7, #2
 804def2:	b2ff      	uxtb	r7, r7
 804def4:	5442      	strb	r2, [r0, r1]
                uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 804def6:	461d      	mov	r5, r3
                isAnswerDelayed = false;
 804def8:	f04f 0900 	mov.w	r9, #0
                break;
 804defc:	e041      	b.n	804df82 <LmhpFragmentationOnMcpsIndication+0x2a2>
                    FragSessionData[id].FragGroupData.IsActive = false;
 804defe:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 804df02:	00c9      	lsls	r1, r1, #3
 804df04:	482f      	ldr	r0, [pc, #188]	; (804dfc4 <LmhpFragmentationOnMcpsIndication+0x2e4>)
 804df06:	2400      	movs	r4, #0
 804df08:	5444      	strb	r4, [r0, r1]
 804df0a:	e7eb      	b.n	804dee4 <LmhpFragmentationOnMcpsIndication+0x204>
            case FRAGMENTATION_DATA_FRAGMENT:
            {
                uint8_t fragIndex = 0;
                uint16_t fragCounter = 0;

                fragCounter = ( mcpsIndication->Buffer[cmdIndex++] << 0 ) & 0x00FF;
 804df0c:	1c9a      	adds	r2, r3, #2
 804df0e:	b2d2      	uxtb	r2, r2
 804df10:	5d48      	ldrb	r0, [r1, r5]
                fragCounter |= ( mcpsIndication->Buffer[cmdIndex++] << 8 ) & 0xFF00;
 804df12:	1cdd      	adds	r5, r3, #3
 804df14:	b2ed      	uxtb	r5, r5
 804df16:	5c8c      	ldrb	r4, [r1, r2]
 804df18:	ea40 2004 	orr.w	r0, r0, r4, lsl #8

                fragIndex = ( fragCounter >> 14 ) & 0x03;
 804df1c:	09a4      	lsrs	r4, r4, #6
                fragCounter &= 0x3FFF;
 804df1e:	f3c0 000d 	ubfx	r0, r0, #0, #14
                    //    // Ignore message
                    //    break;
                    //}
                }

                if( FragSessionData[fragIndex].FragDecoderPorcessStatus == FRAG_SESSION_ONGOING )
 804df22:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 804df26:	4b27      	ldr	r3, [pc, #156]	; (804dfc4 <LmhpFragmentationOnMcpsIndication+0x2e4>)
 804df28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 804df2c:	695b      	ldr	r3, [r3, #20]
 804df2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 804df32:	d04b      	beq.n	804dfcc <LmhpFragmentationOnMcpsIndication+0x2ec>
                                                             FragSessionData[fragIndex].FragDecoderStatus.FragNbLost );
                    }
                }
                else
                {
                    if( FragSessionData[fragIndex].FragDecoderPorcessStatus >= 0 )
 804df34:	2b00      	cmp	r3, #0
 804df36:	db1c      	blt.n	804df72 <LmhpFragmentationOnMcpsIndication+0x292>
                    {
                        // Fragmentation successfully done
                        FragSessionData[fragIndex].FragDecoderPorcessStatus = FRAG_SESSION_NOT_STARTED;
 804df38:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 804df3c:	4a21      	ldr	r2, [pc, #132]	; (804dfc4 <LmhpFragmentationOnMcpsIndication+0x2e4>)
 804df3e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 804df42:	f06f 0201 	mvn.w	r2, #1
 804df46:	615a      	str	r2, [r3, #20]
                        if( LmhpFragmentationParams->OnDone != NULL )
 804df48:	4b1f      	ldr	r3, [pc, #124]	; (804dfc8 <LmhpFragmentationOnMcpsIndication+0x2e8>)
 804df4a:	681b      	ldr	r3, [r3, #0]
 804df4c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
 804df50:	f1ba 0f00 	cmp.w	sl, #0
 804df54:	d00d      	beq.n	804df72 <LmhpFragmentationOnMcpsIndication+0x292>
                        {
#if( FRAG_DECODER_FILE_HANDLING_NEW_API == 1 )
                            LmhpFragmentationParams->OnDone( FragSessionData[fragIndex].FragDecoderPorcessStatus,
                                                            ( FragSessionData[fragIndex].FragGroupData.FragNb * FragSessionData[fragIndex].FragGroupData.FragSize ) - FragSessionData[fragIndex].FragGroupData.Padding );
 804df56:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 804df5a:	4a1a      	ldr	r2, [pc, #104]	; (804dfc4 <LmhpFragmentationOnMcpsIndication+0x2e4>)
 804df5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 804df60:	8859      	ldrh	r1, [r3, #2]
 804df62:	791a      	ldrb	r2, [r3, #4]
 804df64:	fb02 f201 	mul.w	r2, r2, r1
 804df68:	7999      	ldrb	r1, [r3, #6]
                            LmhpFragmentationParams->OnDone( FragSessionData[fragIndex].FragDecoderPorcessStatus,
 804df6a:	1a51      	subs	r1, r2, r1
 804df6c:	f06f 0001 	mvn.w	r0, #1
 804df70:	47d0      	blx	sl
                                                            ( FragSessionData[fragIndex].FragGroupData.FragNb * FragSessionData[fragIndex].FragGroupData.FragSize ) - FragSessionData[fragIndex].FragGroupData.Padding );
#endif
                        }
                    }
                }
                cmdIndex += FragSessionData[fragIndex].FragGroupData.FragSize;
 804df72:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 804df76:	4b13      	ldr	r3, [pc, #76]	; (804dfc4 <LmhpFragmentationOnMcpsIndication+0x2e4>)
 804df78:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 804df7c:	7923      	ldrb	r3, [r4, #4]
 804df7e:	441d      	add	r5, r3
 804df80:	b2ed      	uxtb	r5, r5
                isAnswerDelayed = false;
 804df82:	462b      	mov	r3, r5
    while( cmdIndex < mcpsIndication->BufferSize )
 804df84:	7b32      	ldrb	r2, [r6, #12]
 804df86:	429a      	cmp	r2, r3
 804df88:	d952      	bls.n	804e030 <LmhpFragmentationOnMcpsIndication+0x350>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 804df8a:	68b1      	ldr	r1, [r6, #8]
 804df8c:	1c5d      	adds	r5, r3, #1
 804df8e:	b2ed      	uxtb	r5, r5
 804df90:	5cca      	ldrb	r2, [r1, r3]
 804df92:	2a08      	cmp	r2, #8
 804df94:	d8f5      	bhi.n	804df82 <LmhpFragmentationOnMcpsIndication+0x2a2>
 804df96:	a001      	add	r0, pc, #4	; (adr r0, 804df9c <LmhpFragmentationOnMcpsIndication+0x2bc>)
 804df98:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 804df9c:	0804dceb 	.word	0x0804dceb
 804dfa0:	0804dd11 	.word	0x0804dd11
 804dfa4:	0804ddc7 	.word	0x0804ddc7
 804dfa8:	0804dec5 	.word	0x0804dec5
 804dfac:	0804df83 	.word	0x0804df83
 804dfb0:	0804df83 	.word	0x0804df83
 804dfb4:	0804df83 	.word	0x0804df83
 804dfb8:	0804df83 	.word	0x0804df83
 804dfbc:	0804df0d 	.word	0x0804df0d
 804dfc0:	20019598 	.word	0x20019598
 804dfc4:	2001b3d4 	.word	0x2001b3d4
 804dfc8:	20019594 	.word	0x20019594
                    FragSessionData[fragIndex].FragDecoderPorcessStatus = FragDecoderProcess( fragCounter, &mcpsIndication->Buffer[cmdIndex] );
 804dfcc:	4429      	add	r1, r5
 804dfce:	f7ff f85f 	bl	804d090 <FragDecoderProcess>
 804dfd2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 804dfd6:	4a2a      	ldr	r2, [pc, #168]	; (804e080 <LmhpFragmentationOnMcpsIndication+0x3a0>)
 804dfd8:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 804dfdc:	f8ca 0014 	str.w	r0, [sl, #20]
                    FragSessionData[fragIndex].FragDecoderStatus = FragDecoderGetStatus( );
 804dfe0:	4668      	mov	r0, sp
 804dfe2:	f7ff f987 	bl	804d2f4 <FragDecoderGetStatus>
 804dfe6:	f10a 030c 	add.w	r3, sl, #12
 804dfea:	9800      	ldr	r0, [sp, #0]
 804dfec:	9901      	ldr	r1, [sp, #4]
 804dfee:	c303      	stmia	r3!, {r0, r1}
                    if( LmhpFragmentationParams->OnProgress != NULL )
 804dff0:	4b24      	ldr	r3, [pc, #144]	; (804e084 <LmhpFragmentationOnMcpsIndication+0x3a4>)
 804dff2:	681b      	ldr	r3, [r3, #0]
 804dff4:	f8d3 a008 	ldr.w	sl, [r3, #8]
 804dff8:	f1ba 0f00 	cmp.w	sl, #0
 804dffc:	d0b9      	beq.n	804df72 <LmhpFragmentationOnMcpsIndication+0x292>
                        LmhpFragmentationParams->OnProgress( FragSessionData[fragIndex].FragDecoderStatus.FragNbRx,
 804dffe:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 804e002:	4b1f      	ldr	r3, [pc, #124]	; (804e080 <LmhpFragmentationOnMcpsIndication+0x3a0>)
 804e004:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 804e008:	89c3      	ldrh	r3, [r0, #14]
 804e00a:	7902      	ldrb	r2, [r0, #4]
 804e00c:	8841      	ldrh	r1, [r0, #2]
 804e00e:	8980      	ldrh	r0, [r0, #12]
 804e010:	47d0      	blx	sl
 804e012:	e7ae      	b.n	804df72 <LmhpFragmentationOnMcpsIndication+0x292>
                uint8_t fragIndex = mcpsIndication->Buffer[cmdIndex++];
 804e014:	4625      	mov	r5, r4
 804e016:	e7b4      	b.n	804df82 <LmhpFragmentationOnMcpsIndication+0x2a2>
 804e018:	4625      	mov	r5, r4
 804e01a:	e7b2      	b.n	804df82 <LmhpFragmentationOnMcpsIndication+0x2a2>
{
 804e01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804e020:	b08b      	sub	sp, #44	; 0x2c
 804e022:	4606      	mov	r6, r0
    uint8_t blockAckDelay = 0;
 804e024:	f04f 0800 	mov.w	r8, #0
    bool isAnswerDelayed = false;
 804e028:	46c1      	mov	r9, r8
    uint8_t dataBufferIndex = 0;
 804e02a:	4647      	mov	r7, r8
    uint8_t cmdIndex = 0;
 804e02c:	4643      	mov	r3, r8
 804e02e:	e7a9      	b.n	804df84 <LmhpFragmentationOnMcpsIndication+0x2a4>

    // After processing the commands, if the end-node has to reply back then a flag is checked if the
    // reply is to be sent immediately or with a delay.
    // In some scenarios it is not desired that multiple end-notes send uplinks at the same time to
    // the same server. (Example: Fragment status during a multicast FUOTA)
    if( dataBufferIndex != 0 )
 804e030:	b1f7      	cbz	r7, 804e070 <LmhpFragmentationOnMcpsIndication+0x390>
    {
        // Prepare Answer that is to be transmitted
        cmdReplyAppData.Buffer = LmhpFragmentationState.DataBuffer;
 804e032:	4b15      	ldr	r3, [pc, #84]	; (804e088 <LmhpFragmentationOnMcpsIndication+0x3a8>)
 804e034:	685b      	ldr	r3, [r3, #4]
 804e036:	9309      	str	r3, [sp, #36]	; 0x24
        cmdReplyAppData.BufferSize = dataBufferIndex;
 804e038:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
        cmdReplyAppData.Port = FRAGMENTATION_PORT;
 804e03c:	23c9      	movs	r3, #201	; 0xc9
 804e03e:	f88d 3020 	strb.w	r3, [sp, #32]

        if( isAnswerDelayed == true )
 804e042:	f1b9 0f00 	cmp.w	r9, #0
 804e046:	d016      	beq.n	804e076 <LmhpFragmentationOnMcpsIndication+0x396>
            // Delay = Pseudo Random Delay * 1000 milli seconds.
            // Eg: blockAckDelay = 7
            //     Pseudo Random Delay = rand(0:1) * 2^11
            //     rand(0:1) seconds = rand(0:1000) milliseconds
            //     Delay = rand(0:1000) * 2048 => 2048000ms = 34 minutes
            TxDelayTime = randr( 0, 1000 ) * ( 1 << ( blockAckDelay + 4 ) );
 804e048:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 804e04c:	2000      	movs	r0, #0
 804e04e:	f006 ff21 	bl	8054e94 <randr>
 804e052:	f108 0804 	add.w	r8, r8, #4
 804e056:	fa00 f008 	lsl.w	r0, r0, r8
 804e05a:	4b0c      	ldr	r3, [pc, #48]	; (804e08c <LmhpFragmentationOnMcpsIndication+0x3ac>)
 804e05c:	6018      	str	r0, [r3, #0]
            DelayedReplyAppData = cmdReplyAppData;
 804e05e:	4b0c      	ldr	r3, [pc, #48]	; (804e090 <LmhpFragmentationOnMcpsIndication+0x3b0>)
 804e060:	aa0a      	add	r2, sp, #40	; 0x28
 804e062:	e912 0003 	ldmdb	r2, {r0, r1}
 804e066:	e883 0003 	stmia.w	r3, {r0, r1}
            LmhpFragmentationState.TxDelayState = FRAGMENTATION_TX_DELAY_STATE_START;
 804e06a:	4b07      	ldr	r3, [pc, #28]	; (804e088 <LmhpFragmentationOnMcpsIndication+0x3a8>)
 804e06c:	2201      	movs	r2, #1
 804e06e:	709a      	strb	r2, [r3, #2]
        {
            // Send the prepared answer
            LmHandlerSend( &cmdReplyAppData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
        }
    }
}
 804e070:	b00b      	add	sp, #44	; 0x2c
 804e072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            LmHandlerSend( &cmdReplyAppData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
 804e076:	2100      	movs	r1, #0
 804e078:	a808      	add	r0, sp, #32
 804e07a:	f7fe fbab 	bl	804c7d4 <LmHandlerSend>
 804e07e:	e7f7      	b.n	804e070 <LmhpFragmentationOnMcpsIndication+0x390>
 804e080:	2001b3d4 	.word	0x2001b3d4
 804e084:	20019594 	.word	0x20019594
 804e088:	20019598 	.word	0x20019598
 804e08c:	200195a4 	.word	0x200195a4
 804e090:	2001b434 	.word	0x2001b434

0804e094 <LmhpFragmentationProcess>:
{
 804e094:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804e096:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804e09a:	b672      	cpsid	i
    delayTimerState = LmhpFragmentationState.TxDelayState;
 804e09c:	4a0c      	ldr	r2, [pc, #48]	; (804e0d0 <LmhpFragmentationProcess+0x3c>)
 804e09e:	7893      	ldrb	r3, [r2, #2]
    LmhpFragmentationState.TxDelayState = FRAGMENTATION_TX_DELAY_STATE_IDLE;
 804e0a0:	2000      	movs	r0, #0
 804e0a2:	7090      	strb	r0, [r2, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804e0a4:	f381 8810 	msr	PRIMASK, r1
    switch( delayTimerState )
 804e0a8:	2b01      	cmp	r3, #1
 804e0aa:	d002      	beq.n	804e0b2 <LmhpFragmentationProcess+0x1e>
 804e0ac:	2b02      	cmp	r3, #2
 804e0ae:	d00a      	beq.n	804e0c6 <LmhpFragmentationProcess+0x32>
}
 804e0b0:	bd10      	pop	{r4, pc}
            TimerSetValue( &FragmentTxDelayTimer, TxDelayTime );
 804e0b2:	4c08      	ldr	r4, [pc, #32]	; (804e0d4 <LmhpFragmentationProcess+0x40>)
 804e0b4:	4b08      	ldr	r3, [pc, #32]	; (804e0d8 <LmhpFragmentationProcess+0x44>)
 804e0b6:	6819      	ldr	r1, [r3, #0]
 804e0b8:	4620      	mov	r0, r4
 804e0ba:	f7f5 f88d 	bl	80431d8 <TimerSetValue>
            TimerStart( &FragmentTxDelayTimer );
 804e0be:	4620      	mov	r0, r4
 804e0c0:	f7f4 ffda 	bl	8043078 <TimerStart>
            break;
 804e0c4:	e7f4      	b.n	804e0b0 <LmhpFragmentationProcess+0x1c>
            LmHandlerSend( &DelayedReplyAppData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
 804e0c6:	2100      	movs	r1, #0
 804e0c8:	4804      	ldr	r0, [pc, #16]	; (804e0dc <LmhpFragmentationProcess+0x48>)
 804e0ca:	f7fe fb83 	bl	804c7d4 <LmHandlerSend>
}
 804e0ce:	e7ef      	b.n	804e0b0 <LmhpFragmentationProcess+0x1c>
 804e0d0:	20019598 	.word	0x20019598
 804e0d4:	2001957c 	.word	0x2001957c
 804e0d8:	200195a4 	.word	0x200195a4
 804e0dc:	2001b434 	.word	0x2001b434

0804e0e0 <LmhpFragmentationInit>:
{
 804e0e0:	b508      	push	{r3, lr}
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 804e0e2:	b180      	cbz	r0, 804e106 <LmhpFragmentationInit+0x26>
 804e0e4:	4603      	mov	r3, r0
 804e0e6:	b171      	cbz	r1, 804e106 <LmhpFragmentationInit+0x26>
        LmhpFragmentationParams = ( LmhpFragmentationParams_t* )params;
 804e0e8:	480b      	ldr	r0, [pc, #44]	; (804e118 <LmhpFragmentationInit+0x38>)
 804e0ea:	6003      	str	r3, [r0, #0]
        LmhpFragmentationState.DataBuffer = dataBuffer;
 804e0ec:	4b0b      	ldr	r3, [pc, #44]	; (804e11c <LmhpFragmentationInit+0x3c>)
 804e0ee:	6059      	str	r1, [r3, #4]
        LmhpFragmentationState.DataBufferMaxSize = dataBufferMaxSize;
 804e0f0:	70da      	strb	r2, [r3, #3]
        LmhpFragmentationState.Initialized = true;
 804e0f2:	2201      	movs	r2, #1
 804e0f4:	701a      	strb	r2, [r3, #0]
        TxDelayTime = 0;
 804e0f6:	4b0a      	ldr	r3, [pc, #40]	; (804e120 <LmhpFragmentationInit+0x40>)
 804e0f8:	2200      	movs	r2, #0
 804e0fa:	601a      	str	r2, [r3, #0]
        TimerInit( &FragmentTxDelayTimer, OnFragmentTxDelay );
 804e0fc:	4909      	ldr	r1, [pc, #36]	; (804e124 <LmhpFragmentationInit+0x44>)
 804e0fe:	480a      	ldr	r0, [pc, #40]	; (804e128 <LmhpFragmentationInit+0x48>)
 804e100:	f7f4 ffb0 	bl	8043064 <TimerInit>
 804e104:	e004      	b.n	804e110 <LmhpFragmentationInit+0x30>
        LmhpFragmentationParams = NULL;
 804e106:	2300      	movs	r3, #0
 804e108:	4a03      	ldr	r2, [pc, #12]	; (804e118 <LmhpFragmentationInit+0x38>)
 804e10a:	6013      	str	r3, [r2, #0]
        LmhpFragmentationState.Initialized = false;
 804e10c:	4a03      	ldr	r2, [pc, #12]	; (804e11c <LmhpFragmentationInit+0x3c>)
 804e10e:	7013      	strb	r3, [r2, #0]
    LmhpFragmentationState.IsTxPending = false;
 804e110:	4b02      	ldr	r3, [pc, #8]	; (804e11c <LmhpFragmentationInit+0x3c>)
 804e112:	2200      	movs	r2, #0
 804e114:	705a      	strb	r2, [r3, #1]
}
 804e116:	bd08      	pop	{r3, pc}
 804e118:	20019594 	.word	0x20019594
 804e11c:	20019598 	.word	0x20019598
 804e120:	200195a4 	.word	0x200195a4
 804e124:	0804e12d 	.word	0x0804e12d
 804e128:	2001957c 	.word	0x2001957c

0804e12c <OnFragmentTxDelay>:
{
 804e12c:	b508      	push	{r3, lr}
    TimerStop( &FragmentTxDelayTimer );
 804e12e:	4803      	ldr	r0, [pc, #12]	; (804e13c <OnFragmentTxDelay+0x10>)
 804e130:	f7f5 f816 	bl	8043160 <TimerStop>
    LmhpFragmentationState.TxDelayState = FRAGMENTATION_TX_DELAY_STATE_STOP;
 804e134:	4b02      	ldr	r3, [pc, #8]	; (804e140 <OnFragmentTxDelay+0x14>)
 804e136:	2202      	movs	r2, #2
 804e138:	709a      	strb	r2, [r3, #2]
}
 804e13a:	bd08      	pop	{r3, pc}
 804e13c:	2001957c 	.word	0x2001957c
 804e140:	20019598 	.word	0x20019598

0804e144 <LmhpFragmentationPackageFactory>:
}
 804e144:	4800      	ldr	r0, [pc, #0]	; (804e148 <LmhpFragmentationPackageFactory+0x4>)
 804e146:	4770      	bx	lr
 804e148:	20018228 	.word	0x20018228

0804e14c <LmhpRemoteMcastSetupIsInitialized>:
}

static bool LmhpRemoteMcastSetupIsInitialized( void )
{
    return LmhpRemoteMcastSetupState.Initialized;
}
 804e14c:	4b01      	ldr	r3, [pc, #4]	; (804e154 <LmhpRemoteMcastSetupIsInitialized+0x8>)
 804e14e:	7818      	ldrb	r0, [r3, #0]
 804e150:	4770      	bx	lr
 804e152:	bf00      	nop
 804e154:	200195a8 	.word	0x200195a8

0804e158 <LmhpRemoteMcastSetupIsTxPending>:

static bool LmhpRemoteMcastSetupIsTxPending( void )
{
    return LmhpRemoteMcastSetupState.IsTxPending;
}
 804e158:	4b01      	ldr	r3, [pc, #4]	; (804e160 <LmhpRemoteMcastSetupIsTxPending+0x8>)
 804e15a:	7858      	ldrb	r0, [r3, #1]
 804e15c:	4770      	bx	lr
 804e15e:	bf00      	nop
 804e160:	200195a8 	.word	0x200195a8

0804e164 <LmhpRemoteMcastSetupOnMcpsIndication>:
static void LmhpRemoteMcastSetupOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
    uint8_t cmdIndex = 0;
    uint8_t dataBufferIndex = 0;

    if( mcpsIndication->Port != REMOTE_MCAST_SETUP_PORT )
 804e164:	78c3      	ldrb	r3, [r0, #3]
 804e166:	2bc8      	cmp	r3, #200	; 0xc8
 804e168:	f040 820f 	bne.w	804e58a <LmhpRemoteMcastSetupOnMcpsIndication+0x426>
{
 804e16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804e170:	b08a      	sub	sp, #40	; 0x28
 804e172:	4604      	mov	r4, r0
    uint8_t dataBufferIndex = 0;
 804e174:	2500      	movs	r5, #0
    uint8_t cmdIndex = 0;
 804e176:	462f      	mov	r7, r5
 804e178:	e00e      	b.n	804e198 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
    {
        switch( mcpsIndication->Buffer[cmdIndex++] )
        {
            case REMOTE_MCAST_SETUP_PKG_VERSION_REQ:
            {
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_PKG_VERSION_ANS;
 804e17a:	4bbf      	ldr	r3, [pc, #764]	; (804e478 <LmhpRemoteMcastSetupOnMcpsIndication+0x314>)
 804e17c:	685a      	ldr	r2, [r3, #4]
 804e17e:	1c69      	adds	r1, r5, #1
 804e180:	b2c9      	uxtb	r1, r1
 804e182:	2300      	movs	r3, #0
 804e184:	5553      	strb	r3, [r2, r5]
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_ID;
 804e186:	1cab      	adds	r3, r5, #2
 804e188:	b2db      	uxtb	r3, r3
 804e18a:	2602      	movs	r6, #2
 804e18c:	5456      	strb	r6, [r2, r1]
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_VERSION;
 804e18e:	3503      	adds	r5, #3
 804e190:	b2ed      	uxtb	r5, r5
 804e192:	2101      	movs	r1, #1
 804e194:	54d1      	strb	r1, [r2, r3]
        switch( mcpsIndication->Buffer[cmdIndex++] )
 804e196:	4607      	mov	r7, r0
    while( cmdIndex < mcpsIndication->BufferSize )
 804e198:	7b23      	ldrb	r3, [r4, #12]
 804e19a:	42bb      	cmp	r3, r7
 804e19c:	f240 81ac 	bls.w	804e4f8 <LmhpRemoteMcastSetupOnMcpsIndication+0x394>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 804e1a0:	68a1      	ldr	r1, [r4, #8]
 804e1a2:	1c7b      	adds	r3, r7, #1
 804e1a4:	b2d8      	uxtb	r0, r3
 804e1a6:	5dcb      	ldrb	r3, [r1, r7]
 804e1a8:	2b04      	cmp	r3, #4
 804e1aa:	f200 81a3 	bhi.w	804e4f4 <LmhpRemoteMcastSetupOnMcpsIndication+0x390>
 804e1ae:	a201      	add	r2, pc, #4	; (adr r2, 804e1b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x50>)
 804e1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804e1b4:	0804e17b 	.word	0x0804e17b
 804e1b8:	0804e4f5 	.word	0x0804e4f5
 804e1bc:	0804e1c9 	.word	0x0804e1c9
 804e1c0:	0804e349 	.word	0x0804e349
 804e1c4:	0804e37d 	.word	0x0804e37d
                // TODO implement command prosessing and handling
                break;
            }
            case REMOTE_MCAST_SETUP_MC_GROUP_SETUP_REQ:
            {
                uint8_t id = mcpsIndication->Buffer[cmdIndex++];
 804e1c8:	1cba      	adds	r2, r7, #2
 804e1ca:	b2d2      	uxtb	r2, r2
 804e1cc:	5c0e      	ldrb	r6, [r1, r0]
                McSessionData[id].McGroupData.IdHeader.Value = id;
 804e1ce:	48ab      	ldr	r0, [pc, #684]	; (804e47c <LmhpRemoteMcastSetupOnMcpsIndication+0x318>)
 804e1d0:	2334      	movs	r3, #52	; 0x34
 804e1d2:	fb03 f306 	mul.w	r3, r3, r6
 804e1d6:	18c1      	adds	r1, r0, r3
 804e1d8:	54c6      	strb	r6, [r0, r3]

                McSessionData[id].McGroupData.McAddr =  ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 804e1da:	68a3      	ldr	r3, [r4, #8]
 804e1dc:	f107 0c03 	add.w	ip, r7, #3
 804e1e0:	fa5f fc8c 	uxtb.w	ip, ip
 804e1e4:	5c9b      	ldrb	r3, [r3, r2]
 804e1e6:	604b      	str	r3, [r1, #4]
                McSessionData[id].McGroupData.McAddr += ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 804e1e8:	68a2      	ldr	r2, [r4, #8]
 804e1ea:	1d38      	adds	r0, r7, #4
 804e1ec:	b2c0      	uxtb	r0, r0
 804e1ee:	f812 200c 	ldrb.w	r2, [r2, ip]
 804e1f2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 804e1f6:	604b      	str	r3, [r1, #4]
                McSessionData[id].McGroupData.McAddr += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 804e1f8:	68a2      	ldr	r2, [r4, #8]
 804e1fa:	f107 0c05 	add.w	ip, r7, #5
 804e1fe:	fa5f fc8c 	uxtb.w	ip, ip
 804e202:	5c12      	ldrb	r2, [r2, r0]
 804e204:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 804e208:	604b      	str	r3, [r1, #4]
                McSessionData[id].McGroupData.McAddr += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 804e20a:	68a0      	ldr	r0, [r4, #8]
 804e20c:	1dba      	adds	r2, r7, #6
 804e20e:	b2d2      	uxtb	r2, r2
 804e210:	f810 000c 	ldrb.w	r0, [r0, ip]
 804e214:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 804e218:	604b      	str	r3, [r1, #4]

                for( int8_t i = 0; i < 16; i++ )
 804e21a:	2300      	movs	r3, #0
 804e21c:	2b0f      	cmp	r3, #15
 804e21e:	dc0c      	bgt.n	804e23a <LmhpRemoteMcastSetupOnMcpsIndication+0xd6>
                {
                    McSessionData[id].McGroupData.McKeyEncrypted[i] = mcpsIndication->Buffer[cmdIndex++];
 804e220:	68a0      	ldr	r0, [r4, #8]
 804e222:	1c51      	adds	r1, r2, #1
 804e224:	5c80      	ldrb	r0, [r0, r2]
 804e226:	4f95      	ldr	r7, [pc, #596]	; (804e47c <LmhpRemoteMcastSetupOnMcpsIndication+0x318>)
 804e228:	2234      	movs	r2, #52	; 0x34
 804e22a:	fb02 7206 	mla	r2, r2, r6, r7
 804e22e:	441a      	add	r2, r3
 804e230:	7210      	strb	r0, [r2, #8]
                for( int8_t i = 0; i < 16; i++ )
 804e232:	3301      	adds	r3, #1
 804e234:	b25b      	sxtb	r3, r3
                    McSessionData[id].McGroupData.McKeyEncrypted[i] = mcpsIndication->Buffer[cmdIndex++];
 804e236:	b2ca      	uxtb	r2, r1
 804e238:	e7f0      	b.n	804e21c <LmhpRemoteMcastSetupOnMcpsIndication+0xb8>
                }

                McSessionData[id].McGroupData.McFCountMin =  ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 804e23a:	68a3      	ldr	r3, [r4, #8]
 804e23c:	f102 0801 	add.w	r8, r2, #1
 804e240:	fa5f f888 	uxtb.w	r8, r8
 804e244:	5c9b      	ldrb	r3, [r3, r2]
 804e246:	f8df e234 	ldr.w	lr, [pc, #564]	; 804e47c <LmhpRemoteMcastSetupOnMcpsIndication+0x318>
 804e24a:	2034      	movs	r0, #52	; 0x34
 804e24c:	fb00 f006 	mul.w	r0, r0, r6
 804e250:	eb0e 0c00 	add.w	ip, lr, r0
 804e254:	f8cc 3018 	str.w	r3, [ip, #24]
                McSessionData[id].McGroupData.McFCountMin += ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 804e258:	68a1      	ldr	r1, [r4, #8]
 804e25a:	1c97      	adds	r7, r2, #2
 804e25c:	b2ff      	uxtb	r7, r7
 804e25e:	f811 1008 	ldrb.w	r1, [r1, r8]
 804e262:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 804e266:	f8cc 3018 	str.w	r3, [ip, #24]
                McSessionData[id].McGroupData.McFCountMin += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 804e26a:	68a1      	ldr	r1, [r4, #8]
 804e26c:	f102 0803 	add.w	r8, r2, #3
 804e270:	fa5f f888 	uxtb.w	r8, r8
 804e274:	5dc9      	ldrb	r1, [r1, r7]
 804e276:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 804e27a:	f8cc 3018 	str.w	r3, [ip, #24]
                McSessionData[id].McGroupData.McFCountMin += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 804e27e:	68a1      	ldr	r1, [r4, #8]
 804e280:	1d17      	adds	r7, r2, #4
 804e282:	b2ff      	uxtb	r7, r7
 804e284:	f811 1008 	ldrb.w	r1, [r1, r8]
 804e288:	eb03 6301 	add.w	r3, r3, r1, lsl #24
 804e28c:	f8cc 3018 	str.w	r3, [ip, #24]

                McSessionData[id].McGroupData.McFCountMax =  ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 804e290:	68a1      	ldr	r1, [r4, #8]
 804e292:	f102 0805 	add.w	r8, r2, #5
 804e296:	fa5f f888 	uxtb.w	r8, r8
 804e29a:	5dcf      	ldrb	r7, [r1, r7]
 804e29c:	f8cc 701c 	str.w	r7, [ip, #28]
                McSessionData[id].McGroupData.McFCountMax += ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 804e2a0:	68a1      	ldr	r1, [r4, #8]
 804e2a2:	f102 0a06 	add.w	sl, r2, #6
 804e2a6:	fa5f fa8a 	uxtb.w	sl, sl
 804e2aa:	f811 8008 	ldrb.w	r8, [r1, r8]
 804e2ae:	eb07 2708 	add.w	r7, r7, r8, lsl #8
 804e2b2:	f8cc 701c 	str.w	r7, [ip, #28]
                McSessionData[id].McGroupData.McFCountMax += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 804e2b6:	68a1      	ldr	r1, [r4, #8]
 804e2b8:	f102 0907 	add.w	r9, r2, #7
 804e2bc:	fa5f f989 	uxtb.w	r9, r9
 804e2c0:	f811 100a 	ldrb.w	r1, [r1, sl]
 804e2c4:	eb07 4801 	add.w	r8, r7, r1, lsl #16
 804e2c8:	f8cc 801c 	str.w	r8, [ip, #28]
                McSessionData[id].McGroupData.McFCountMax += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 804e2cc:	68a1      	ldr	r1, [r4, #8]
 804e2ce:	3208      	adds	r2, #8
 804e2d0:	b2d7      	uxtb	r7, r2
 804e2d2:	f811 1009 	ldrb.w	r1, [r1, r9]
 804e2d6:	eb08 6101 	add.w	r1, r8, r1, lsl #24
 804e2da:	f8cc 101c 	str.w	r1, [ip, #28]

                McChannelParams_t channel = 
 804e2de:	2200      	movs	r2, #0
 804e2e0:	9205      	str	r2, [sp, #20]
 804e2e2:	9208      	str	r2, [sp, #32]
 804e2e4:	9209      	str	r2, [sp, #36]	; 0x24
 804e2e6:	2201      	movs	r2, #1
 804e2e8:	f88d 2008 	strb.w	r2, [sp, #8]
 804e2ec:	f04f 0802 	mov.w	r8, #2
 804e2f0:	f88d 8009 	strb.w	r8, [sp, #9]
 804e2f4:	f88d 200a 	strb.w	r2, [sp, #10]
                {
                    .IsRemotelySetup = true,
                    .Class = CLASS_C, // Field not used for multicast channel setup. Must be initialized to something
                    .IsEnabled = true,
                    .GroupID = ( AddressIdentifier_t )McSessionData[id].McGroupData.IdHeader.Fields.McGroupId,
 804e2f8:	f81e 2000 	ldrb.w	r2, [lr, r0]
 804e2fc:	f3c2 0201 	ubfx	r2, r2, #0, #2
                McChannelParams_t channel = 
 804e300:	f88d 200b 	strb.w	r2, [sp, #11]
                    .Address = McSessionData[id].McGroupData.McAddr,
 804e304:	f8dc 2004 	ldr.w	r2, [ip, #4]
                McChannelParams_t channel = 
 804e308:	9203      	str	r2, [sp, #12]
                    .McKeys.McKeyE = McSessionData[id].McGroupData.McKeyEncrypted,
 804e30a:	3008      	adds	r0, #8
 804e30c:	4470      	add	r0, lr
                McChannelParams_t channel = 
 804e30e:	9004      	str	r0, [sp, #16]
 804e310:	9306      	str	r3, [sp, #24]
 804e312:	9107      	str	r1, [sp, #28]
                        .Frequency = 0,
                        .Datarate = 0
                    }
                };
                uint8_t idError = 0x01; // One bit value
                if( LoRaMacMcChannelSetup( &channel ) == LORAMAC_STATUS_OK )
 804e314:	a802      	add	r0, sp, #8
 804e316:	f003 fcbd 	bl	8051c94 <LoRaMacMcChannelSetup>
 804e31a:	4684      	mov	ip, r0
 804e31c:	b108      	cbz	r0, 804e322 <LmhpRemoteMcastSetupOnMcpsIndication+0x1be>
                uint8_t idError = 0x01; // One bit value
 804e31e:	f04f 0c01 	mov.w	ip, #1
                {
                    idError = 0x00;
                }
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_SETUP_ANS;
 804e322:	4b55      	ldr	r3, [pc, #340]	; (804e478 <LmhpRemoteMcastSetupOnMcpsIndication+0x314>)
 804e324:	6858      	ldr	r0, [r3, #4]
 804e326:	1c6a      	adds	r2, r5, #1
 804e328:	b2d2      	uxtb	r2, r2
 804e32a:	2302      	movs	r3, #2
 804e32c:	5543      	strb	r3, [r0, r5]
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( idError << 2 ) | McSessionData[id].McGroupData.IdHeader.Fields.McGroupId;
 804e32e:	2134      	movs	r1, #52	; 0x34
 804e330:	fb01 f606 	mul.w	r6, r1, r6
 804e334:	4b51      	ldr	r3, [pc, #324]	; (804e47c <LmhpRemoteMcastSetupOnMcpsIndication+0x318>)
 804e336:	5d9b      	ldrb	r3, [r3, r6]
 804e338:	f003 0303 	and.w	r3, r3, #3
 804e33c:	3502      	adds	r5, #2
 804e33e:	b2ed      	uxtb	r5, r5
 804e340:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 804e344:	5483      	strb	r3, [r0, r2]
                break;
 804e346:	e727      	b.n	804e198 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
            }
            case REMOTE_MCAST_SETUP_MC_GROUP_DELETE_REQ:
            {
                uint8_t status = 0x00;
                uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 804e348:	3702      	adds	r7, #2
 804e34a:	b2ff      	uxtb	r7, r7
 804e34c:	5c0e      	ldrb	r6, [r1, r0]
 804e34e:	f006 0603 	and.w	r6, r6, #3

                status = id;

                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_DELETE_ANS;
 804e352:	4b49      	ldr	r3, [pc, #292]	; (804e478 <LmhpRemoteMcastSetupOnMcpsIndication+0x314>)
 804e354:	685b      	ldr	r3, [r3, #4]
 804e356:	f105 0801 	add.w	r8, r5, #1
 804e35a:	fa5f f888 	uxtb.w	r8, r8
 804e35e:	2203      	movs	r2, #3
 804e360:	555a      	strb	r2, [r3, r5]

                if( LoRaMacMcChannelDelete( ( AddressIdentifier_t )id ) != LORAMAC_STATUS_OK )
 804e362:	4630      	mov	r0, r6
 804e364:	f003 fd02 	bl	8051d6c <LoRaMacMcChannelDelete>
 804e368:	b108      	cbz	r0, 804e36e <LmhpRemoteMcastSetupOnMcpsIndication+0x20a>
                {
                    status |= 0x04; // McGroupUndefined bit set
 804e36a:	f046 0604 	orr.w	r6, r6, #4
                }
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 804e36e:	4b42      	ldr	r3, [pc, #264]	; (804e478 <LmhpRemoteMcastSetupOnMcpsIndication+0x314>)
 804e370:	685b      	ldr	r3, [r3, #4]
 804e372:	3502      	adds	r5, #2
 804e374:	b2ed      	uxtb	r5, r5
 804e376:	f803 6008 	strb.w	r6, [r3, r8]
                break;
 804e37a:	e70d      	b.n	804e198 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
            }
            case REMOTE_MCAST_SETUP_MC_GROUP_CLASS_C_SESSION_REQ:
            {
                uint8_t status = 0x00;
 804e37c:	2300      	movs	r3, #0
 804e37e:	f88d 3007 	strb.w	r3, [sp, #7]
                uint8_t id = mcpsIndication->Buffer[cmdIndex++] & 0x03;
 804e382:	1cbb      	adds	r3, r7, #2
 804e384:	b2db      	uxtb	r3, r3
 804e386:	5c0e      	ldrb	r6, [r1, r0]
 804e388:	f006 0603 	and.w	r6, r6, #3

                McSessionData[id].SessionTime =  ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 804e38c:	f107 0803 	add.w	r8, r7, #3
 804e390:	fa5f f888 	uxtb.w	r8, r8
 804e394:	5ccb      	ldrb	r3, [r1, r3]
 804e396:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 804e47c <LmhpRemoteMcastSetupOnMcpsIndication+0x318>
 804e39a:	2034      	movs	r0, #52	; 0x34
 804e39c:	fb00 f006 	mul.w	r0, r0, r6
 804e3a0:	eb0c 0100 	add.w	r1, ip, r0
 804e3a4:	624b      	str	r3, [r1, #36]	; 0x24
                McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 804e3a6:	68a2      	ldr	r2, [r4, #8]
 804e3a8:	f107 0e04 	add.w	lr, r7, #4
 804e3ac:	fa5f fe8e 	uxtb.w	lr, lr
 804e3b0:	f812 2008 	ldrb.w	r2, [r2, r8]
 804e3b4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 804e3b8:	624b      	str	r3, [r1, #36]	; 0x24
                McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 804e3ba:	68a2      	ldr	r2, [r4, #8]
 804e3bc:	f107 0805 	add.w	r8, r7, #5
 804e3c0:	fa5f f888 	uxtb.w	r8, r8
 804e3c4:	f812 200e 	ldrb.w	r2, [r2, lr]
 804e3c8:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 804e3cc:	624b      	str	r3, [r1, #36]	; 0x24
                McSessionData[id].SessionTime += ( mcpsIndication->Buffer[cmdIndex++] << 24 ) & 0xFF000000;
 804e3ce:	68a2      	ldr	r2, [r4, #8]
 804e3d0:	f107 0e06 	add.w	lr, r7, #6
 804e3d4:	fa5f fe8e 	uxtb.w	lr, lr
 804e3d8:	f812 2008 	ldrb.w	r2, [r2, r8]
 804e3dc:	eb03 6302 	add.w	r3, r3, r2, lsl #24

                // Add Unix to Gps epcoh offset. The system time is based on Unix time.
                McSessionData[id].SessionTime += UNIX_GPS_EPOCH_OFFSET;
 804e3e0:	4a27      	ldr	r2, [pc, #156]	; (804e480 <LmhpRemoteMcastSetupOnMcpsIndication+0x31c>)
 804e3e2:	441a      	add	r2, r3
 804e3e4:	624a      	str	r2, [r1, #36]	; 0x24

                McSessionData[id].SessionTimeout =  mcpsIndication->Buffer[cmdIndex++] & 0x0F;
 804e3e6:	68a3      	ldr	r3, [r4, #8]
 804e3e8:	1dfa      	adds	r2, r7, #7
 804e3ea:	b2d2      	uxtb	r2, r2
 804e3ec:	f813 300e 	ldrb.w	r3, [r3, lr]
 804e3f0:	f003 030f 	and.w	r3, r3, #15
 804e3f4:	f881 3028 	strb.w	r3, [r1, #40]	; 0x28

                McSessionData[id].RxParams.ClassC.Frequency =  ( mcpsIndication->Buffer[cmdIndex++] << 0  ) & 0x000000FF;
 804e3f8:	68a3      	ldr	r3, [r4, #8]
 804e3fa:	f107 0e08 	add.w	lr, r7, #8
 804e3fe:	fa5f fe8e 	uxtb.w	lr, lr
 804e402:	5c9a      	ldrb	r2, [r3, r2]
 804e404:	62ca      	str	r2, [r1, #44]	; 0x2c
                McSessionData[id].RxParams.ClassC.Frequency |= ( mcpsIndication->Buffer[cmdIndex++] << 8  ) & 0x0000FF00;
 804e406:	68a3      	ldr	r3, [r4, #8]
 804e408:	f107 0809 	add.w	r8, r7, #9
 804e40c:	fa5f f888 	uxtb.w	r8, r8
 804e410:	f813 300e 	ldrb.w	r3, [r3, lr]
 804e414:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 804e418:	62ca      	str	r2, [r1, #44]	; 0x2c
                McSessionData[id].RxParams.ClassC.Frequency |= ( mcpsIndication->Buffer[cmdIndex++] << 16 ) & 0x00FF0000;
 804e41a:	68a3      	ldr	r3, [r4, #8]
 804e41c:	f107 0e0a 	add.w	lr, r7, #10
 804e420:	fa5f fe8e 	uxtb.w	lr, lr
 804e424:	f813 3008 	ldrb.w	r3, [r3, r8]
 804e428:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
                McSessionData[id].RxParams.ClassC.Frequency *= 100;
 804e42c:	2364      	movs	r3, #100	; 0x64
 804e42e:	fb03 f202 	mul.w	r2, r3, r2
 804e432:	62ca      	str	r2, [r1, #44]	; 0x2c

                McSessionData[id].RxParams.ClassC.Datarate = mcpsIndication->Buffer[cmdIndex++];
 804e434:	68a3      	ldr	r3, [r4, #8]
 804e436:	370b      	adds	r7, #11
 804e438:	b2ff      	uxtb	r7, r7
 804e43a:	f913 300e 	ldrsb.w	r3, [r3, lr]
 804e43e:	f881 3030 	strb.w	r3, [r1, #48]	; 0x30

                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = REMOTE_MCAST_SETUP_MC_GROUP_CLASS_C_SESSION_ANS;
 804e442:	4b0d      	ldr	r3, [pc, #52]	; (804e478 <LmhpRemoteMcastSetupOnMcpsIndication+0x314>)
 804e444:	685b      	ldr	r3, [r3, #4]
 804e446:	f105 0801 	add.w	r8, r5, #1
 804e44a:	fa5f f888 	uxtb.w	r8, r8
 804e44e:	2204      	movs	r2, #4
 804e450:	555a      	strb	r2, [r3, r5]
                if( LoRaMacMcChannelSetupRxParams( ( AddressIdentifier_t )id, &McSessionData[id].RxParams, &status ) == LORAMAC_STATUS_OK )
 804e452:	f100 0128 	add.w	r1, r0, #40	; 0x28
 804e456:	4461      	add	r1, ip
 804e458:	f10d 0207 	add.w	r2, sp, #7
 804e45c:	3104      	adds	r1, #4
 804e45e:	4630      	mov	r0, r6
 804e460:	f003 fcb4 	bl	8051dcc <LoRaMacMcChannelSetupRxParams>
 804e464:	b170      	cbz	r0, 804e484 <LmhpRemoteMcastSetupOnMcpsIndication+0x320>
                    {
                        // Session start time before current device time
                        status |= 0x10;
                    }
                }
                LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 804e466:	4b04      	ldr	r3, [pc, #16]	; (804e478 <LmhpRemoteMcastSetupOnMcpsIndication+0x314>)
 804e468:	685b      	ldr	r3, [r3, #4]
 804e46a:	3502      	adds	r5, #2
 804e46c:	b2ed      	uxtb	r5, r5
 804e46e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 804e472:	f803 2008 	strb.w	r2, [r3, r8]
                break;
 804e476:	e68f      	b.n	804e198 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
 804e478:	200195a8 	.word	0x200195a8
 804e47c:	2001b43c 	.word	0x2001b43c
 804e480:	12d53d80 	.word	0x12d53d80
                    curTime = SysTimeGet( );
 804e484:	a802      	add	r0, sp, #8
 804e486:	f7f4 fc99 	bl	8042dbc <SysTimeGet>
                    int32_t timeToSessionStart = McSessionData[id].SessionTime - curTime.Seconds;
 804e48a:	4b40      	ldr	r3, [pc, #256]	; (804e58c <LmhpRemoteMcastSetupOnMcpsIndication+0x428>)
 804e48c:	2234      	movs	r2, #52	; 0x34
 804e48e:	fb02 3606 	mla	r6, r2, r6, r3
 804e492:	6a76      	ldr	r6, [r6, #36]	; 0x24
 804e494:	9b02      	ldr	r3, [sp, #8]
 804e496:	1af6      	subs	r6, r6, r3
                    if( timeToSessionStart > 0 )
 804e498:	2e00      	cmp	r6, #0
 804e49a:	dc06      	bgt.n	804e4aa <LmhpRemoteMcastSetupOnMcpsIndication+0x346>
                        status |= 0x10;
 804e49c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 804e4a0:	f043 0310 	orr.w	r3, r3, #16
 804e4a4:	f88d 3007 	strb.w	r3, [sp, #7]
 804e4a8:	e7dd      	b.n	804e466 <LmhpRemoteMcastSetupOnMcpsIndication+0x302>
                        TimerSetValue( &SessionStartTimer, timeToSessionStart * 1000 );
 804e4aa:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
 804e4ae:	fb09 f906 	mul.w	r9, r9, r6
 804e4b2:	f8df a10c 	ldr.w	sl, [pc, #268]	; 804e5c0 <LmhpRemoteMcastSetupOnMcpsIndication+0x45c>
 804e4b6:	4649      	mov	r1, r9
 804e4b8:	4650      	mov	r0, sl
 804e4ba:	f7f4 fe8d 	bl	80431d8 <TimerSetValue>
                        TimerStart( &SessionStartTimer );
 804e4be:	4650      	mov	r0, sl
 804e4c0:	f7f4 fdda 	bl	8043078 <TimerStart>
                        DBG( "Time2SessionStart: %ld ms\n", timeToSessionStart * 1000 );
 804e4c4:	4649      	mov	r1, r9
 804e4c6:	4832      	ldr	r0, [pc, #200]	; (804e590 <LmhpRemoteMcastSetupOnMcpsIndication+0x42c>)
 804e4c8:	f007 fbec 	bl	8055ca4 <iprintf>
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = status;
 804e4cc:	4b31      	ldr	r3, [pc, #196]	; (804e594 <LmhpRemoteMcastSetupOnMcpsIndication+0x430>)
 804e4ce:	685b      	ldr	r3, [r3, #4]
 804e4d0:	1caa      	adds	r2, r5, #2
 804e4d2:	b2d2      	uxtb	r2, r2
 804e4d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 804e4d8:	f803 1008 	strb.w	r1, [r3, r8]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 0  ) & 0xFF;
 804e4dc:	1ce9      	adds	r1, r5, #3
 804e4de:	b2c9      	uxtb	r1, r1
 804e4e0:	549e      	strb	r6, [r3, r2]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 8  ) & 0xFF;
 804e4e2:	1230      	asrs	r0, r6, #8
 804e4e4:	1d2a      	adds	r2, r5, #4
 804e4e6:	b2d2      	uxtb	r2, r2
 804e4e8:	5458      	strb	r0, [r3, r1]
                        LmhpRemoteMcastSetupState.DataBuffer[dataBufferIndex++] = ( timeToSessionStart >> 16 ) & 0xFF;
 804e4ea:	1436      	asrs	r6, r6, #16
 804e4ec:	3505      	adds	r5, #5
 804e4ee:	b2ed      	uxtb	r5, r5
 804e4f0:	549e      	strb	r6, [r3, r2]
                        break;
 804e4f2:	e651      	b.n	804e198 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
        switch( mcpsIndication->Buffer[cmdIndex++] )
 804e4f4:	4607      	mov	r7, r0
 804e4f6:	e64f      	b.n	804e198 <LmhpRemoteMcastSetupOnMcpsIndication+0x34>
                break;
            }
        }
    }

    if( dataBufferIndex != 0 )
 804e4f8:	b915      	cbnz	r5, 804e500 <LmhpRemoteMcastSetupOnMcpsIndication+0x39c>
        DBG( "SessionTimeT: %d\n",  McSessionData[0].SessionTimeout );
        DBG( "Rx Freq     : %lu\n", McSessionData[0].RxParams.ClassC.Frequency );
        DBG( "Rx DR       : DR_%d\n", McSessionData[0].RxParams.ClassC.Datarate );

    }
}
 804e4fa:	b00a      	add	sp, #40	; 0x28
 804e4fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        LmHandlerAppData_t appData =
 804e500:	23c8      	movs	r3, #200	; 0xc8
 804e502:	f88d 3008 	strb.w	r3, [sp, #8]
 804e506:	f88d 5009 	strb.w	r5, [sp, #9]
            .Buffer = LmhpRemoteMcastSetupState.DataBuffer,
 804e50a:	4b22      	ldr	r3, [pc, #136]	; (804e594 <LmhpRemoteMcastSetupOnMcpsIndication+0x430>)
 804e50c:	685b      	ldr	r3, [r3, #4]
        LmHandlerAppData_t appData =
 804e50e:	9303      	str	r3, [sp, #12]
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG );
 804e510:	2100      	movs	r1, #0
 804e512:	a802      	add	r0, sp, #8
 804e514:	f7fe f95e 	bl	804c7d4 <LmHandlerSend>
        DBG( "ID          : %d\n", McSessionData[0].McGroupData.IdHeader.Fields.McGroupId );
 804e518:	4c1c      	ldr	r4, [pc, #112]	; (804e58c <LmhpRemoteMcastSetupOnMcpsIndication+0x428>)
 804e51a:	7821      	ldrb	r1, [r4, #0]
 804e51c:	f001 0103 	and.w	r1, r1, #3
 804e520:	481d      	ldr	r0, [pc, #116]	; (804e598 <LmhpRemoteMcastSetupOnMcpsIndication+0x434>)
 804e522:	f007 fbbf 	bl	8055ca4 <iprintf>
        DBG( "McAddr      : %08lX\n", McSessionData[0].McGroupData.McAddr );
 804e526:	6861      	ldr	r1, [r4, #4]
 804e528:	481c      	ldr	r0, [pc, #112]	; (804e59c <LmhpRemoteMcastSetupOnMcpsIndication+0x438>)
 804e52a:	f007 fbbb 	bl	8055ca4 <iprintf>
        DBG( "McKey       : %02X", McSessionData[0].McGroupData.McKeyEncrypted[0] );
 804e52e:	7a21      	ldrb	r1, [r4, #8]
 804e530:	481b      	ldr	r0, [pc, #108]	; (804e5a0 <LmhpRemoteMcastSetupOnMcpsIndication+0x43c>)
 804e532:	f007 fbb7 	bl	8055ca4 <iprintf>
        for( int i = 1; i < 16; i++ )
 804e536:	2401      	movs	r4, #1
 804e538:	e006      	b.n	804e548 <LmhpRemoteMcastSetupOnMcpsIndication+0x3e4>
            DBG( "-%02X",  McSessionData[0].McGroupData.McKeyEncrypted[i] );
 804e53a:	4b14      	ldr	r3, [pc, #80]	; (804e58c <LmhpRemoteMcastSetupOnMcpsIndication+0x428>)
 804e53c:	4423      	add	r3, r4
 804e53e:	7a19      	ldrb	r1, [r3, #8]
 804e540:	4818      	ldr	r0, [pc, #96]	; (804e5a4 <LmhpRemoteMcastSetupOnMcpsIndication+0x440>)
 804e542:	f007 fbaf 	bl	8055ca4 <iprintf>
        for( int i = 1; i < 16; i++ )
 804e546:	3401      	adds	r4, #1
 804e548:	2c0f      	cmp	r4, #15
 804e54a:	ddf6      	ble.n	804e53a <LmhpRemoteMcastSetupOnMcpsIndication+0x3d6>
        DBG( "\n" );
 804e54c:	200a      	movs	r0, #10
 804e54e:	f007 fbc1 	bl	8055cd4 <putchar>
        DBG( "McFCountMin : %lu\n",  McSessionData[0].McGroupData.McFCountMin );
 804e552:	4c0e      	ldr	r4, [pc, #56]	; (804e58c <LmhpRemoteMcastSetupOnMcpsIndication+0x428>)
 804e554:	69a1      	ldr	r1, [r4, #24]
 804e556:	4814      	ldr	r0, [pc, #80]	; (804e5a8 <LmhpRemoteMcastSetupOnMcpsIndication+0x444>)
 804e558:	f007 fba4 	bl	8055ca4 <iprintf>
        DBG( "McFCountMax : %lu\n",  McSessionData[0].McGroupData.McFCountMax );
 804e55c:	69e1      	ldr	r1, [r4, #28]
 804e55e:	4813      	ldr	r0, [pc, #76]	; (804e5ac <LmhpRemoteMcastSetupOnMcpsIndication+0x448>)
 804e560:	f007 fba0 	bl	8055ca4 <iprintf>
        DBG( "SessionTime : %lu\n",  McSessionData[0].SessionTime );
 804e564:	6a61      	ldr	r1, [r4, #36]	; 0x24
 804e566:	4812      	ldr	r0, [pc, #72]	; (804e5b0 <LmhpRemoteMcastSetupOnMcpsIndication+0x44c>)
 804e568:	f007 fb9c 	bl	8055ca4 <iprintf>
        DBG( "SessionTimeT: %d\n",  McSessionData[0].SessionTimeout );
 804e56c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 804e570:	4810      	ldr	r0, [pc, #64]	; (804e5b4 <LmhpRemoteMcastSetupOnMcpsIndication+0x450>)
 804e572:	f007 fb97 	bl	8055ca4 <iprintf>
        DBG( "Rx Freq     : %lu\n", McSessionData[0].RxParams.ClassC.Frequency );
 804e576:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 804e578:	480f      	ldr	r0, [pc, #60]	; (804e5b8 <LmhpRemoteMcastSetupOnMcpsIndication+0x454>)
 804e57a:	f007 fb93 	bl	8055ca4 <iprintf>
        DBG( "Rx DR       : DR_%d\n", McSessionData[0].RxParams.ClassC.Datarate );
 804e57e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
 804e582:	480e      	ldr	r0, [pc, #56]	; (804e5bc <LmhpRemoteMcastSetupOnMcpsIndication+0x458>)
 804e584:	f007 fb8e 	bl	8055ca4 <iprintf>
 804e588:	e7b7      	b.n	804e4fa <LmhpRemoteMcastSetupOnMcpsIndication+0x396>
 804e58a:	4770      	bx	lr
 804e58c:	2001b43c 	.word	0x2001b43c
 804e590:	0805aa18 	.word	0x0805aa18
 804e594:	200195a8 	.word	0x200195a8
 804e598:	0805aa34 	.word	0x0805aa34
 804e59c:	0805aa48 	.word	0x0805aa48
 804e5a0:	0805aa60 	.word	0x0805aa60
 804e5a4:	0805a1e4 	.word	0x0805a1e4
 804e5a8:	0805aa74 	.word	0x0805aa74
 804e5ac:	0805aa88 	.word	0x0805aa88
 804e5b0:	0805aa9c 	.word	0x0805aa9c
 804e5b4:	0805aab0 	.word	0x0805aab0
 804e5b8:	0805aac4 	.word	0x0805aac4
 804e5bc:	0805aad8 	.word	0x0805aad8
 804e5c0:	200195b0 	.word	0x200195b0

0804e5c4 <LmhpRemoteMcastSetupProcess>:
{
 804e5c4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 804e5c6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 804e5ca:	b672      	cpsid	i
    state = LmhpRemoteMcastSetupState.SessionState;
 804e5cc:	4a0f      	ldr	r2, [pc, #60]	; (804e60c <LmhpRemoteMcastSetupProcess+0x48>)
 804e5ce:	7893      	ldrb	r3, [r2, #2]
    LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_IDLE;
 804e5d0:	2000      	movs	r0, #0
 804e5d2:	7090      	strb	r0, [r2, #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 804e5d4:	f381 8810 	msr	PRIMASK, r1
    switch( state )
 804e5d8:	2b01      	cmp	r3, #1
 804e5da:	d002      	beq.n	804e5e2 <LmhpRemoteMcastSetupProcess+0x1e>
 804e5dc:	2b02      	cmp	r3, #2
 804e5de:	d011      	beq.n	804e604 <LmhpRemoteMcastSetupProcess+0x40>
}
 804e5e0:	bd10      	pop	{r4, pc}
            LmHandlerRequestClass( CLASS_C );
 804e5e2:	2002      	movs	r0, #2
 804e5e4:	f7fe f986 	bl	804c8f4 <LmHandlerRequestClass>
            TimerSetValue( &SessionStopTimer, ( 1 << McSessionData[0].SessionTimeout ) * 1000 );
 804e5e8:	4b09      	ldr	r3, [pc, #36]	; (804e610 <LmhpRemoteMcastSetupProcess+0x4c>)
 804e5ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 804e5ee:	4c09      	ldr	r4, [pc, #36]	; (804e614 <LmhpRemoteMcastSetupProcess+0x50>)
 804e5f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 804e5f4:	4099      	lsls	r1, r3
 804e5f6:	4620      	mov	r0, r4
 804e5f8:	f7f4 fdee 	bl	80431d8 <TimerSetValue>
            TimerStart( &SessionStopTimer );
 804e5fc:	4620      	mov	r0, r4
 804e5fe:	f7f4 fd3b 	bl	8043078 <TimerStart>
            break;
 804e602:	e7ed      	b.n	804e5e0 <LmhpRemoteMcastSetupProcess+0x1c>
            LmHandlerRequestClass( CLASS_A );
 804e604:	2000      	movs	r0, #0
 804e606:	f7fe f975 	bl	804c8f4 <LmHandlerRequestClass>
}
 804e60a:	e7e9      	b.n	804e5e0 <LmhpRemoteMcastSetupProcess+0x1c>
 804e60c:	200195a8 	.word	0x200195a8
 804e610:	2001b43c 	.word	0x2001b43c
 804e614:	200195c8 	.word	0x200195c8

0804e618 <LmhpRemoteMcastSetupInit>:
{
 804e618:	b508      	push	{r3, lr}
    if( dataBuffer != NULL )
 804e61a:	b181      	cbz	r1, 804e63e <LmhpRemoteMcastSetupInit+0x26>
        LmhpRemoteMcastSetupState.DataBuffer = dataBuffer;
 804e61c:	4b0a      	ldr	r3, [pc, #40]	; (804e648 <LmhpRemoteMcastSetupInit+0x30>)
 804e61e:	6059      	str	r1, [r3, #4]
        LmhpRemoteMcastSetupState.DataBufferMaxSize = dataBufferMaxSize;
 804e620:	70da      	strb	r2, [r3, #3]
        LmhpRemoteMcastSetupState.Initialized = true;
 804e622:	2201      	movs	r2, #1
 804e624:	701a      	strb	r2, [r3, #0]
        TimerInit( &SessionStartTimer, OnSessionStartTimer );
 804e626:	4909      	ldr	r1, [pc, #36]	; (804e64c <LmhpRemoteMcastSetupInit+0x34>)
 804e628:	4809      	ldr	r0, [pc, #36]	; (804e650 <LmhpRemoteMcastSetupInit+0x38>)
 804e62a:	f7f4 fd1b 	bl	8043064 <TimerInit>
        TimerInit( &SessionStopTimer, OnSessionStopTimer );
 804e62e:	4909      	ldr	r1, [pc, #36]	; (804e654 <LmhpRemoteMcastSetupInit+0x3c>)
 804e630:	4809      	ldr	r0, [pc, #36]	; (804e658 <LmhpRemoteMcastSetupInit+0x40>)
 804e632:	f7f4 fd17 	bl	8043064 <TimerInit>
    LmhpRemoteMcastSetupState.IsTxPending = false;
 804e636:	4b04      	ldr	r3, [pc, #16]	; (804e648 <LmhpRemoteMcastSetupInit+0x30>)
 804e638:	2200      	movs	r2, #0
 804e63a:	705a      	strb	r2, [r3, #1]
}
 804e63c:	bd08      	pop	{r3, pc}
        LmhpRemoteMcastSetupState.Initialized = false;
 804e63e:	4b02      	ldr	r3, [pc, #8]	; (804e648 <LmhpRemoteMcastSetupInit+0x30>)
 804e640:	2200      	movs	r2, #0
 804e642:	701a      	strb	r2, [r3, #0]
 804e644:	e7f7      	b.n	804e636 <LmhpRemoteMcastSetupInit+0x1e>
 804e646:	bf00      	nop
 804e648:	200195a8 	.word	0x200195a8
 804e64c:	0804e675 	.word	0x0804e675
 804e650:	200195b0 	.word	0x200195b0
 804e654:	0804e65d 	.word	0x0804e65d
 804e658:	200195c8 	.word	0x200195c8

0804e65c <OnSessionStopTimer>:

    LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_START;
}

static void OnSessionStopTimer( void *context )
{
 804e65c:	b508      	push	{r3, lr}
    TimerStop( &SessionStopTimer );
 804e65e:	4803      	ldr	r0, [pc, #12]	; (804e66c <OnSessionStopTimer+0x10>)
 804e660:	f7f4 fd7e 	bl	8043160 <TimerStop>

    LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_STOP;
 804e664:	4b02      	ldr	r3, [pc, #8]	; (804e670 <OnSessionStopTimer+0x14>)
 804e666:	2202      	movs	r2, #2
 804e668:	709a      	strb	r2, [r3, #2]
}
 804e66a:	bd08      	pop	{r3, pc}
 804e66c:	200195c8 	.word	0x200195c8
 804e670:	200195a8 	.word	0x200195a8

0804e674 <OnSessionStartTimer>:
{
 804e674:	b508      	push	{r3, lr}
    TimerStop( &SessionStartTimer );
 804e676:	4803      	ldr	r0, [pc, #12]	; (804e684 <OnSessionStartTimer+0x10>)
 804e678:	f7f4 fd72 	bl	8043160 <TimerStop>
    LmhpRemoteMcastSetupState.SessionState = REMOTE_MCAST_SETUP_SESSION_STATE_START;
 804e67c:	4b02      	ldr	r3, [pc, #8]	; (804e688 <OnSessionStartTimer+0x14>)
 804e67e:	2201      	movs	r2, #1
 804e680:	709a      	strb	r2, [r3, #2]
}
 804e682:	bd08      	pop	{r3, pc}
 804e684:	200195b0 	.word	0x200195b0
 804e688:	200195a8 	.word	0x200195a8

0804e68c <LmhpRemoteMcastSetupPackageFactory>:
}
 804e68c:	4800      	ldr	r0, [pc, #0]	; (804e690 <LmhpRemoteMcastSetupPackageFactory+0x4>)
 804e68e:	4770      	bx	lr
 804e690:	20018260 	.word	0x20018260

0804e694 <OnRadioTxTimeout>:
        MacCtx.MacCallbacks->MacProcessNotify( );
    }
}

static void OnRadioTxTimeout( void )
{
 804e694:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 804e696:	4a06      	ldr	r2, [pc, #24]	; (804e6b0 <OnRadioTxTimeout+0x1c>)
 804e698:	7813      	ldrb	r3, [r2, #0]
 804e69a:	f043 0304 	orr.w	r3, r3, #4
 804e69e:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804e6a0:	4b04      	ldr	r3, [pc, #16]	; (804e6b4 <OnRadioTxTimeout+0x20>)
 804e6a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 804e6a6:	b113      	cbz	r3, 804e6ae <OnRadioTxTimeout+0x1a>
 804e6a8:	68db      	ldr	r3, [r3, #12]
 804e6aa:	b103      	cbz	r3, 804e6ae <OnRadioTxTimeout+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 804e6ac:	4798      	blx	r3
    }
}
 804e6ae:	bd08      	pop	{r3, pc}
 804e6b0:	200195e0 	.word	0x200195e0
 804e6b4:	200195e4 	.word	0x200195e4

0804e6b8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 804e6b8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 804e6ba:	4a06      	ldr	r2, [pc, #24]	; (804e6d4 <OnRadioRxError+0x1c>)
 804e6bc:	7813      	ldrb	r3, [r2, #0]
 804e6be:	f043 0302 	orr.w	r3, r3, #2
 804e6c2:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804e6c4:	4b04      	ldr	r3, [pc, #16]	; (804e6d8 <OnRadioRxError+0x20>)
 804e6c6:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 804e6ca:	b113      	cbz	r3, 804e6d2 <OnRadioRxError+0x1a>
 804e6cc:	68db      	ldr	r3, [r3, #12]
 804e6ce:	b103      	cbz	r3, 804e6d2 <OnRadioRxError+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 804e6d0:	4798      	blx	r3
    }
}
 804e6d2:	bd08      	pop	{r3, pc}
 804e6d4:	200195e0 	.word	0x200195e0
 804e6d8:	200195e4 	.word	0x200195e4

0804e6dc <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 804e6dc:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 804e6de:	4a06      	ldr	r2, [pc, #24]	; (804e6f8 <OnRadioRxTimeout+0x1c>)
 804e6e0:	7813      	ldrb	r3, [r2, #0]
 804e6e2:	f043 0301 	orr.w	r3, r3, #1
 804e6e6:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804e6e8:	4b04      	ldr	r3, [pc, #16]	; (804e6fc <OnRadioRxTimeout+0x20>)
 804e6ea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 804e6ee:	b113      	cbz	r3, 804e6f6 <OnRadioRxTimeout+0x1a>
 804e6f0:	68db      	ldr	r3, [r3, #12]
 804e6f2:	b103      	cbz	r3, 804e6f6 <OnRadioRxTimeout+0x1a>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 804e6f4:	4798      	blx	r3
    }
}
 804e6f6:	bd08      	pop	{r3, pc}
 804e6f8:	200195e0 	.word	0x200195e0
 804e6fc:	200195e4 	.word	0x200195e4

0804e700 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 804e700:	4b07      	ldr	r3, [pc, #28]	; (804e720 <UpdateRxSlotIdleState+0x20>)
 804e702:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 804e706:	2b02      	cmp	r3, #2
 804e708:	d004      	beq.n	804e714 <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 804e70a:	4b06      	ldr	r3, [pc, #24]	; (804e724 <UpdateRxSlotIdleState+0x24>)
 804e70c:	2206      	movs	r2, #6
 804e70e:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c
 804e712:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 804e714:	4b03      	ldr	r3, [pc, #12]	; (804e724 <UpdateRxSlotIdleState+0x24>)
 804e716:	2202      	movs	r2, #2
 804e718:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c
    }
}
 804e71c:	4770      	bx	lr
 804e71e:	bf00      	nop
 804e720:	20019b68 	.word	0x20019b68
 804e724:	200195e4 	.word	0x200195e4

0804e728 <LoRaMacEnableRequests>:
}


static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 804e728:	4b01      	ldr	r3, [pc, #4]	; (804e730 <LoRaMacEnableRequests+0x8>)
 804e72a:	f883 048e 	strb.w	r0, [r3, #1166]	; 0x48e
}
 804e72e:	4770      	bx	lr
 804e730:	200195e4 	.word	0x200195e4

0804e734 <LoRaMacHandleIndicationEvents>:
        }
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 804e734:	b530      	push	{r4, r5, lr}
 804e736:	b089      	sub	sp, #36	; 0x24
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 804e738:	4b1f      	ldr	r3, [pc, #124]	; (804e7b8 <LoRaMacHandleIndicationEvents+0x84>)
 804e73a:	f893 348d 	ldrb.w	r3, [r3, #1165]	; 0x48d
 804e73e:	f013 0f08 	tst.w	r3, #8
 804e742:	d00c      	beq.n	804e75e <LoRaMacHandleIndicationEvents+0x2a>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 804e744:	481c      	ldr	r0, [pc, #112]	; (804e7b8 <LoRaMacHandleIndicationEvents+0x84>)
 804e746:	f890 348d 	ldrb.w	r3, [r0, #1165]	; 0x48d
 804e74a:	f36f 03c3 	bfc	r3, #3, #1
 804e74e:	f880 348d 	strb.w	r3, [r0, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 804e752:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 804e756:	68db      	ldr	r3, [r3, #12]
 804e758:	f200 406c 	addw	r0, r0, #1132	; 0x46c
 804e75c:	4798      	blx	r3
    }

    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 804e75e:	4b16      	ldr	r3, [pc, #88]	; (804e7b8 <LoRaMacHandleIndicationEvents+0x84>)
 804e760:	f893 348d 	ldrb.w	r3, [r3, #1165]	; 0x48d
 804e764:	f013 0f10 	tst.w	r3, #16
 804e768:	d011      	beq.n	804e78e <LoRaMacHandleIndicationEvents+0x5a>
    {
        MlmeIndication_t schduleUplinkIndication;
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 804e76a:	2306      	movs	r3, #6
 804e76c:	f88d 3000 	strb.w	r3, [sp]
        schduleUplinkIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804e770:	2500      	movs	r5, #0
 804e772:	f88d 5001 	strb.w	r5, [sp, #1]

        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 804e776:	4c10      	ldr	r4, [pc, #64]	; (804e7b8 <LoRaMacHandleIndicationEvents+0x84>)
 804e778:	f8d4 3344 	ldr.w	r3, [r4, #836]	; 0x344
 804e77c:	68db      	ldr	r3, [r3, #12]
 804e77e:	4668      	mov	r0, sp
 804e780:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 804e782:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 804e786:	f365 1304 	bfi	r3, r5, #4, #1
 804e78a:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 804e78e:	4b0a      	ldr	r3, [pc, #40]	; (804e7b8 <LoRaMacHandleIndicationEvents+0x84>)
 804e790:	f893 348d 	ldrb.w	r3, [r3, #1165]	; 0x48d
 804e794:	f013 0f02 	tst.w	r3, #2
 804e798:	d00c      	beq.n	804e7b4 <LoRaMacHandleIndicationEvents+0x80>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 804e79a:	4807      	ldr	r0, [pc, #28]	; (804e7b8 <LoRaMacHandleIndicationEvents+0x84>)
 804e79c:	f890 348d 	ldrb.w	r3, [r0, #1165]	; 0x48d
 804e7a0:	f36f 0341 	bfc	r3, #1, #1
 804e7a4:	f880 348d 	strb.w	r3, [r0, #1165]	; 0x48d
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 804e7a8:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 804e7ac:	685b      	ldr	r3, [r3, #4]
 804e7ae:	f500 6084 	add.w	r0, r0, #1056	; 0x420
 804e7b2:	4798      	blx	r3
    }
}
 804e7b4:	b009      	add	sp, #36	; 0x24
 804e7b6:	bd30      	pop	{r4, r5, pc}
 804e7b8:	200195e4 	.word	0x200195e4

0804e7bc <CheckForMinimumAbpDatarate>:
    return 0x00;
}

static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 804e7bc:	b110      	cbz	r0, 804e7c4 <CheckForMinimumAbpDatarate+0x8>
 804e7be:	2901      	cmp	r1, #1
 804e7c0:	d001      	beq.n	804e7c6 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 804e7c2:	2000      	movs	r0, #0
}
 804e7c4:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 804e7c6:	2a00      	cmp	r2, #0
 804e7c8:	d0fc      	beq.n	804e7c4 <CheckForMinimumAbpDatarate+0x8>
    return false;
 804e7ca:	2000      	movs	r0, #0
 804e7cc:	4770      	bx	lr
	...

0804e7d0 <LoRaMacCheckForRxAbort>:

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 804e7d0:	4b05      	ldr	r3, [pc, #20]	; (804e7e8 <LoRaMacCheckForRxAbort+0x18>)
 804e7d2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 804e7d6:	f013 0f80 	tst.w	r3, #128	; 0x80
 804e7da:	d004      	beq.n	804e7e6 <LoRaMacCheckForRxAbort+0x16>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 804e7dc:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 804e7e0:	4a01      	ldr	r2, [pc, #4]	; (804e7e8 <LoRaMacCheckForRxAbort+0x18>)
 804e7e2:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 804e7e6:	4770      	bx	lr
 804e7e8:	200195e4 	.word	0x200195e4

0804e7ec <SetMlmeScheduleUplinkIndication>:
    return false;
}

static void SetMlmeScheduleUplinkIndication( void )
{
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 804e7ec:	4a03      	ldr	r2, [pc, #12]	; (804e7fc <SetMlmeScheduleUplinkIndication+0x10>)
 804e7ee:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
 804e7f2:	f043 0310 	orr.w	r3, r3, #16
 804e7f6:	f882 348d 	strb.w	r3, [r2, #1165]	; 0x48d
}
 804e7fa:	4770      	bx	lr
 804e7fc:	200195e4 	.word	0x200195e4

0804e800 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 804e800:	4b06      	ldr	r3, [pc, #24]	; (804e81c <CalculateBackOff+0x1c>)
 804e802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804e804:	b94b      	cbnz	r3, 804e81a <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 804e806:	4905      	ldr	r1, [pc, #20]	; (804e81c <CalculateBackOff+0x1c>)
 804e808:	f8b1 2198 	ldrh.w	r2, [r1, #408]	; 0x198
 804e80c:	4b04      	ldr	r3, [pc, #16]	; (804e820 <CalculateBackOff+0x20>)
 804e80e:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 804e812:	3a01      	subs	r2, #1
 804e814:	fb03 f302 	mul.w	r3, r3, r2
 804e818:	640b      	str	r3, [r1, #64]	; 0x40
    }
}
 804e81a:	4770      	bx	lr
 804e81c:	20019b68 	.word	0x20019b68
 804e820:	200195e4 	.word	0x200195e4

0804e824 <IsReJoin0Required>:
}

static bool IsReJoin0Required( )
{

    if( ( Nvm.MacGroup2.Rejoin0UplinksLimit == Nvm.MacGroup1.Rejoin0UplinksCounter ) &&
 804e824:	4b0b      	ldr	r3, [pc, #44]	; (804e854 <IsReJoin0Required+0x30>)
 804e826:	f8b3 21aa 	ldrh.w	r2, [r3, #426]	; 0x1aa
 804e82a:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 804e82e:	429a      	cmp	r2, r3
 804e830:	d001      	beq.n	804e836 <IsReJoin0Required+0x12>
        ( Nvm.MacGroup2.Rejoin0UplinksLimit != 0 ) )
    {
        Nvm.MacGroup1.Rejoin0UplinksCounter = 0;
        return true;
    }
    return false;
 804e832:	2000      	movs	r0, #0
 804e834:	4770      	bx	lr
        ( Nvm.MacGroup2.Version.Fields.Minor >= 1 ) &&
 804e836:	4b07      	ldr	r3, [pc, #28]	; (804e854 <IsReJoin0Required+0x30>)
 804e838:	f893 31a6 	ldrb.w	r3, [r3, #422]	; 0x1a6
    if( ( Nvm.MacGroup2.Rejoin0UplinksLimit == Nvm.MacGroup1.Rejoin0UplinksCounter ) &&
 804e83c:	b143      	cbz	r3, 804e850 <IsReJoin0Required+0x2c>
        ( Nvm.MacGroup2.Version.Fields.Minor >= 1 ) &&
 804e83e:	b90a      	cbnz	r2, 804e844 <IsReJoin0Required+0x20>
    return false;
 804e840:	2000      	movs	r0, #0
}
 804e842:	4770      	bx	lr
        Nvm.MacGroup1.Rejoin0UplinksCounter = 0;
 804e844:	4b03      	ldr	r3, [pc, #12]	; (804e854 <IsReJoin0Required+0x30>)
 804e846:	2200      	movs	r2, #0
 804e848:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
        return true;
 804e84c:	2001      	movs	r0, #1
 804e84e:	4770      	bx	lr
    return false;
 804e850:	2000      	movs	r0, #0
 804e852:	4770      	bx	lr
 804e854:	20019b68 	.word	0x20019b68

0804e858 <GetNvmData>:
}

LoRaMacNvmData_t* GetNvmData( void )
{
    return &Nvm;
}
 804e858:	4800      	ldr	r0, [pc, #0]	; (804e85c <GetNvmData+0x4>)
 804e85a:	4770      	bx	lr
 804e85c:	20019b68 	.word	0x20019b68

0804e860 <CheckRetrans>:
    return LORAMAC_STATUS_OK;
}

static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 804e860:	4288      	cmp	r0, r1
 804e862:	d201      	bcs.n	804e868 <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 804e864:	2000      	movs	r0, #0
 804e866:	4770      	bx	lr
        return true;
 804e868:	2001      	movs	r0, #1
}
 804e86a:	4770      	bx	lr

0804e86c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 804e86c:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 804e86e:	4b0b      	ldr	r3, [pc, #44]	; (804e89c <CheckRetransUnconfirmedUplink+0x30>)
 804e870:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
 804e874:	4b0a      	ldr	r3, [pc, #40]	; (804e8a0 <CheckRetransUnconfirmedUplink+0x34>)
 804e876:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 804e87a:	f7ff fff1 	bl	804e860 <CheckRetrans>
 804e87e:	b950      	cbnz	r0, 804e896 <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 804e880:	4b07      	ldr	r3, [pc, #28]	; (804e8a0 <CheckRetransUnconfirmedUplink+0x34>)
 804e882:	f893 348d 	ldrb.w	r3, [r3, #1165]	; 0x48d
 804e886:	f013 0f02 	tst.w	r3, #2
 804e88a:	d004      	beq.n	804e896 <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 804e88c:	4b04      	ldr	r3, [pc, #16]	; (804e8a0 <CheckRetransUnconfirmedUplink+0x34>)
 804e88e:	f893 3431 	ldrb.w	r3, [r3, #1073]	; 0x431
 804e892:	2b01      	cmp	r3, #1
 804e894:	d900      	bls.n	804e898 <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 804e896:	bd08      	pop	{r3, pc}
            return true;
 804e898:	2001      	movs	r0, #1
 804e89a:	e7fc      	b.n	804e896 <CheckRetransUnconfirmedUplink+0x2a>
 804e89c:	20019b68 	.word	0x20019b68
 804e8a0:	200195e4 	.word	0x200195e4

0804e8a4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 804e8a4:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 804e8a6:	4b09      	ldr	r3, [pc, #36]	; (804e8cc <CheckRetransConfirmedUplink+0x28>)
 804e8a8:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
 804e8ac:	4b08      	ldr	r3, [pc, #32]	; (804e8d0 <CheckRetransConfirmedUplink+0x2c>)
 804e8ae:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 804e8b2:	f7ff ffd5 	bl	804e860 <CheckRetrans>
 804e8b6:	b940      	cbnz	r0, 804e8ca <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 804e8b8:	4b05      	ldr	r3, [pc, #20]	; (804e8d0 <CheckRetransConfirmedUplink+0x2c>)
 804e8ba:	f893 348d 	ldrb.w	r3, [r3, #1165]	; 0x48d
 804e8be:	f013 0f02 	tst.w	r3, #2
 804e8c2:	d002      	beq.n	804e8ca <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 804e8c4:	4b02      	ldr	r3, [pc, #8]	; (804e8d0 <CheckRetransConfirmedUplink+0x2c>)
 804e8c6:	f893 0448 	ldrb.w	r0, [r3, #1096]	; 0x448
        {
            return true;
        }
    }
    return false;
}
 804e8ca:	bd08      	pop	{r3, pc}
 804e8cc:	20019b68 	.word	0x20019b68
 804e8d0:	200195e4 	.word	0x200195e4

0804e8d4 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 804e8d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 804e8d8:	d000      	beq.n	804e8dc <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 804e8da:	3001      	adds	r0, #1
    }
    return counter;
}
 804e8dc:	4770      	bx	lr
	...

0804e8e0 <CallNvmDataChangeCallback>:

    return true;
}

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 804e8e0:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) &&
 804e8e2:	4b04      	ldr	r3, [pc, #16]	; (804e8f4 <CallNvmDataChangeCallback+0x14>)
 804e8e4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 804e8e8:	b113      	cbz	r3, 804e8f0 <CallNvmDataChangeCallback+0x10>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 804e8ea:	689b      	ldr	r3, [r3, #8]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 804e8ec:	b103      	cbz	r3, 804e8f0 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 804e8ee:	4798      	blx	r3
    }
}
 804e8f0:	bd08      	pop	{r3, pc}
 804e8f2:	bf00      	nop
 804e8f4:	200195e4 	.word	0x200195e4

0804e8f8 <IsRequestPending>:
static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 804e8f8:	4b04      	ldr	r3, [pc, #16]	; (804e90c <IsRequestPending+0x14>)
 804e8fa:	f893 048d 	ldrb.w	r0, [r3, #1165]	; 0x48d
 804e8fe:	f010 0005 	ands.w	r0, r0, #5
 804e902:	d100      	bne.n	804e906 <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 804e904:	4770      	bx	lr
        return 1;
 804e906:	2001      	movs	r0, #1
 804e908:	e7fc      	b.n	804e904 <IsRequestPending+0xc>
 804e90a:	bf00      	nop
 804e90c:	200195e4 	.word	0x200195e4

0804e910 <ConvertRejoinCycleTime>:
}

static bool ConvertRejoinCycleTime( uint32_t rejoinCycleTime, uint32_t* timeInMiliSec )
{
    // Our timer implementation do not allow longer times than 4294967295 ms
    if( rejoinCycleTime > 4294967 )
 804e910:	4b05      	ldr	r3, [pc, #20]	; (804e928 <ConvertRejoinCycleTime+0x18>)
 804e912:	4298      	cmp	r0, r3
 804e914:	d906      	bls.n	804e924 <ConvertRejoinCycleTime+0x14>
    {
        *timeInMiliSec = rejoinCycleTime * 1000;
 804e916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804e91a:	fb03 f000 	mul.w	r0, r3, r0
 804e91e:	6008      	str	r0, [r1, #0]
        return true;
 804e920:	2001      	movs	r0, #1
 804e922:	4770      	bx	lr
    }
    else
    {
        return false;
 804e924:	2000      	movs	r0, #0
    }
}
 804e926:	4770      	bx	lr
 804e928:	00418937 	.word	0x00418937

0804e92c <GetMaxAppPayloadWithoutFOptsLength>:
{
 804e92c:	b500      	push	{lr}
 804e92e:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 804e930:	4b09      	ldr	r3, [pc, #36]	; (804e958 <GetMaxAppPayloadWithoutFOptsLength+0x2c>)
 804e932:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 804e936:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 804e93a:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 804e93e:	220d      	movs	r2, #13
 804e940:	f88d 2008 	strb.w	r2, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 804e944:	a902      	add	r1, sp, #8
 804e946:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 804e94a:	f005 f87e 	bl	8053a4a <RegionGetPhyParam>
}
 804e94e:	b2c0      	uxtb	r0, r0
 804e950:	b005      	add	sp, #20
 804e952:	f85d fb04 	ldr.w	pc, [sp], #4
 804e956:	bf00      	nop
 804e958:	20019b68 	.word	0x20019b68

0804e95c <ValidatePayloadLength>:
{
 804e95c:	b538      	push	{r3, r4, r5, lr}
 804e95e:	4605      	mov	r5, r0
 804e960:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 804e962:	4608      	mov	r0, r1
 804e964:	f7ff ffe2 	bl	804e92c <GetMaxAppPayloadWithoutFOptsLength>
 804e968:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 804e96a:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 804e96c:	4293      	cmp	r3, r2
 804e96e:	d303      	bcc.n	804e978 <ValidatePayloadLength+0x1c>
 804e970:	2aff      	cmp	r2, #255	; 0xff
 804e972:	d903      	bls.n	804e97c <ValidatePayloadLength+0x20>
    return false;
 804e974:	2000      	movs	r0, #0
 804e976:	e000      	b.n	804e97a <ValidatePayloadLength+0x1e>
 804e978:	2000      	movs	r0, #0
}
 804e97a:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 804e97c:	2001      	movs	r0, #1
 804e97e:	e7fc      	b.n	804e97a <ValidatePayloadLength+0x1e>

0804e980 <ProcessRadioTxDone>:
{
 804e980:	b5f0      	push	{r4, r5, r6, r7, lr}
 804e982:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 804e984:	4b35      	ldr	r3, [pc, #212]	; (804ea5c <ProcessRadioTxDone+0xdc>)
 804e986:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 804e98a:	2b02      	cmp	r3, #2
 804e98c:	d002      	beq.n	804e994 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 804e98e:	4b34      	ldr	r3, [pc, #208]	; (804ea60 <ProcessRadioTxDone+0xe0>)
 804e990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804e992:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 804e994:	4c33      	ldr	r4, [pc, #204]	; (804ea64 <ProcessRadioTxDone+0xe4>)
 804e996:	f504 7562 	add.w	r5, r4, #904	; 0x388
 804e99a:	f8d4 13b8 	ldr.w	r1, [r4, #952]	; 0x3b8
 804e99e:	4628      	mov	r0, r5
 804e9a0:	f7f4 fc1a 	bl	80431d8 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer1 );
 804e9a4:	4628      	mov	r0, r5
 804e9a6:	f7f4 fb67 	bl	8043078 <TimerStart>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 804e9aa:	f504 7568 	add.w	r5, r4, #928	; 0x3a0
 804e9ae:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
 804e9b2:	4628      	mov	r0, r5
 804e9b4:	f7f4 fc10 	bl	80431d8 <TimerSetValue>
    TimerStart( &MacCtx.RxWindowTimer2 );
 804e9b8:	4628      	mov	r0, r5
 804e9ba:	f7f4 fb5d 	bl	8043078 <TimerStart>
    if( MacCtx.NodeAckRequested == true )
 804e9be:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 804e9c2:	2b00      	cmp	r3, #0
 804e9c4:	d134      	bne.n	804ea30 <ProcessRadioTxDone+0xb0>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 804e9c6:	4b27      	ldr	r3, [pc, #156]	; (804ea64 <ProcessRadioTxDone+0xe4>)
 804e9c8:	2200      	movs	r2, #0
 804e9ca:	f883 2445 	strb.w	r2, [r3, #1093]	; 0x445
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 804e9ce:	4b26      	ldr	r3, [pc, #152]	; (804ea68 <ProcessRadioTxDone+0xe8>)
 804e9d0:	681b      	ldr	r3, [r3, #0]
 804e9d2:	4c22      	ldr	r4, [pc, #136]	; (804ea5c <ProcessRadioTxDone+0xdc>)
 804e9d4:	63e3      	str	r3, [r4, #60]	; 0x3c
    txDone.Channel = MacCtx.Channel;
 804e9d6:	4f23      	ldr	r7, [pc, #140]	; (804ea64 <ProcessRadioTxDone+0xe4>)
 804e9d8:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
 804e9dc:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 804e9e0:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 804e9e2:	ae0c      	add	r6, sp, #48	; 0x30
 804e9e4:	4630      	mov	r0, r6
 804e9e6:	f7f4 fa09 	bl	8042dfc <SysTimeGetMcuTime>
 804e9ea:	ad02      	add	r5, sp, #8
 804e9ec:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
 804e9f0:	9300      	str	r3, [sp, #0]
 804e9f2:	f8d4 319c 	ldr.w	r3, [r4, #412]	; 0x19c
 804e9f6:	e896 0006 	ldmia.w	r6, {r1, r2}
 804e9fa:	4628      	mov	r0, r5
 804e9fc:	f7f4 f9a5 	bl	8042d4a <SysTimeSub>
 804ea00:	ab07      	add	r3, sp, #28
 804ea02:	e895 0003 	ldmia.w	r5, {r0, r1}
 804ea06:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 804ea0a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 804ea0e:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 804ea10:	2301      	movs	r3, #1
 804ea12:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 804ea16:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
 804ea1a:	b90b      	cbnz	r3, 804ea20 <ProcessRadioTxDone+0xa0>
        txDone.Joined  = false;
 804ea1c:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 804ea20:	a904      	add	r1, sp, #16
 804ea22:	4b0e      	ldr	r3, [pc, #56]	; (804ea5c <ProcessRadioTxDone+0xdc>)
 804ea24:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 804ea28:	f005 f81f 	bl	8053a6a <RegionSetBandTxDone>
}
 804ea2c:	b00f      	add	sp, #60	; 0x3c
 804ea2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 804ea30:	2314      	movs	r3, #20
 804ea32:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 804ea36:	a90a      	add	r1, sp, #40	; 0x28
 804ea38:	4b08      	ldr	r3, [pc, #32]	; (804ea5c <ProcessRadioTxDone+0xdc>)
 804ea3a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 804ea3e:	f005 f804 	bl	8053a4a <RegionGetPhyParam>
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 804ea42:	f8d4 13bc 	ldr.w	r1, [r4, #956]	; 0x3bc
 804ea46:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 804ea4a:	4401      	add	r1, r0
 804ea4c:	4620      	mov	r0, r4
 804ea4e:	f7f4 fbc3 	bl	80431d8 <TimerSetValue>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 804ea52:	4620      	mov	r0, r4
 804ea54:	f7f4 fb10 	bl	8043078 <TimerStart>
 804ea58:	e7b9      	b.n	804e9ce <ProcessRadioTxDone+0x4e>
 804ea5a:	bf00      	nop
 804ea5c:	20019b68 	.word	0x20019b68
 804ea60:	08059d2c 	.word	0x08059d2c
 804ea64:	200195e4 	.word	0x200195e4
 804ea68:	2001b50c 	.word	0x2001b50c

0804ea6c <OnRetransmitTimeoutTimerEvent>:
{
 804ea6c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 804ea6e:	4c09      	ldr	r4, [pc, #36]	; (804ea94 <OnRetransmitTimeoutTimerEvent+0x28>)
 804ea70:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 804ea74:	f7f4 fb74 	bl	8043160 <TimerStop>
    if( MacCtx.NodeAckRequested == true )
 804ea78:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 804ea7c:	b113      	cbz	r3, 804ea84 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 804ea7e:	2201      	movs	r2, #1
 804ea80:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804ea84:	4b03      	ldr	r3, [pc, #12]	; (804ea94 <OnRetransmitTimeoutTimerEvent+0x28>)
 804ea86:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 804ea8a:	b113      	cbz	r3, 804ea92 <OnRetransmitTimeoutTimerEvent+0x26>
 804ea8c:	68db      	ldr	r3, [r3, #12]
 804ea8e:	b103      	cbz	r3, 804ea92 <OnRetransmitTimeoutTimerEvent+0x26>
        MacCtx.MacCallbacks->MacProcessNotify( );
 804ea90:	4798      	blx	r3
}
 804ea92:	bd10      	pop	{r4, pc}
 804ea94:	200195e4 	.word	0x200195e4

0804ea98 <PrepareRxDoneAbort>:
{
 804ea98:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 804ea9a:	4b0c      	ldr	r3, [pc, #48]	; (804eacc <PrepareRxDoneAbort+0x34>)
 804ea9c:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 804eaa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 804eaa4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 804eaa8:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 804eaac:	b94b      	cbnz	r3, 804eac2 <PrepareRxDoneAbort+0x2a>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 804eaae:	4a07      	ldr	r2, [pc, #28]	; (804eacc <PrepareRxDoneAbort+0x34>)
 804eab0:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
    MacCtx.MacFlags.Bits.MacDone = 1;
 804eab4:	f043 0322 	orr.w	r3, r3, #34	; 0x22
 804eab8:	f882 348d 	strb.w	r3, [r2, #1165]	; 0x48d
    UpdateRxSlotIdleState( );
 804eabc:	f7ff fe20 	bl	804e700 <UpdateRxSlotIdleState>
}
 804eac0:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 804eac2:	2000      	movs	r0, #0
 804eac4:	f7ff ffd2 	bl	804ea6c <OnRetransmitTimeoutTimerEvent>
 804eac8:	e7f1      	b.n	804eaae <PrepareRxDoneAbort+0x16>
 804eaca:	bf00      	nop
 804eacc:	200195e4 	.word	0x200195e4

0804ead0 <LoRaMacCheckForBeaconAcquisition>:
{
 804ead0:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 804ead2:	200b      	movs	r0, #11
 804ead4:	f003 ff00 	bl	80528d8 <LoRaMacConfirmQueueIsCmdActive>
 804ead8:	b188      	cbz	r0, 804eafe <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 804eada:	4b0b      	ldr	r3, [pc, #44]	; (804eb08 <LoRaMacCheckForBeaconAcquisition+0x38>)
 804eadc:	f893 048d 	ldrb.w	r0, [r3, #1165]	; 0x48d
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 804eae0:	f010 0f01 	tst.w	r0, #1
 804eae4:	d10d      	bne.n	804eb02 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 804eae6:	f010 0004 	ands.w	r0, r0, #4
 804eaea:	d009      	beq.n	804eb00 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 804eaec:	461a      	mov	r2, r3
 804eaee:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 804eaf2:	f023 0302 	bic.w	r3, r3, #2
 804eaf6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 804eafa:	2001      	movs	r0, #1
 804eafc:	e000      	b.n	804eb00 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 804eafe:	2000      	movs	r0, #0
}
 804eb00:	bd08      	pop	{r3, pc}
    return 0x00;
 804eb02:	2000      	movs	r0, #0
 804eb04:	e7fc      	b.n	804eb00 <LoRaMacCheckForBeaconAcquisition+0x30>
 804eb06:	bf00      	nop
 804eb08:	200195e4 	.word	0x200195e4

0804eb0c <GetFCntDown>:
{
 804eb0c:	b570      	push	{r4, r5, r6, lr}
 804eb0e:	9c04      	ldr	r4, [sp, #16]
 804eb10:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 804eb12:	b352      	cbz	r2, 804eb6a <GetFCntDown+0x5e>
 804eb14:	4616      	mov	r6, r2
 804eb16:	b354      	cbz	r4, 804eb6e <GetFCntDown+0x62>
 804eb18:	b35d      	cbz	r5, 804eb72 <GetFCntDown+0x66>
    switch( addrID )
 804eb1a:	2804      	cmp	r0, #4
 804eb1c:	d82b      	bhi.n	804eb76 <GetFCntDown+0x6a>
 804eb1e:	e8df f000 	tbb	[pc, r0]
 804eb22:	1b13      	.short	0x1b13
 804eb24:	211e      	.short	0x211e
 804eb26:	03          	.byte	0x03
 804eb27:	00          	.byte	0x00
            if( lrWanVersion.Fields.Minor == 1 )
 804eb28:	f3c3 4307 	ubfx	r3, r3, #16, #8
 804eb2c:	2b01      	cmp	r3, #1
 804eb2e:	d002      	beq.n	804eb36 <GetFCntDown+0x2a>
                *fCntID = FCNT_DOWN;
 804eb30:	2303      	movs	r3, #3
 804eb32:	7023      	strb	r3, [r4, #0]
 804eb34:	e00a      	b.n	804eb4c <GetFCntDown+0x40>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 804eb36:	b121      	cbz	r1, 804eb42 <GetFCntDown+0x36>
 804eb38:	2903      	cmp	r1, #3
 804eb3a:	d002      	beq.n	804eb42 <GetFCntDown+0x36>
                    *fCntID = N_FCNT_DOWN;
 804eb3c:	2301      	movs	r3, #1
 804eb3e:	7023      	strb	r3, [r4, #0]
 804eb40:	e004      	b.n	804eb4c <GetFCntDown+0x40>
                    *fCntID = A_FCNT_DOWN;
 804eb42:	2302      	movs	r3, #2
 804eb44:	7023      	strb	r3, [r4, #0]
 804eb46:	e001      	b.n	804eb4c <GetFCntDown+0x40>
            *fCntID = MC_FCNT_DOWN_0;
 804eb48:	2304      	movs	r3, #4
 804eb4a:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 804eb4c:	462a      	mov	r2, r5
 804eb4e:	89f1      	ldrh	r1, [r6, #14]
 804eb50:	7820      	ldrb	r0, [r4, #0]
 804eb52:	f004 fa51 	bl	8052ff8 <LoRaMacCryptoGetFCntDown>
}
 804eb56:	bd70      	pop	{r4, r5, r6, pc}
            *fCntID = MC_FCNT_DOWN_1;
 804eb58:	2305      	movs	r3, #5
 804eb5a:	7023      	strb	r3, [r4, #0]
            break;
 804eb5c:	e7f6      	b.n	804eb4c <GetFCntDown+0x40>
            *fCntID = MC_FCNT_DOWN_2;
 804eb5e:	2306      	movs	r3, #6
 804eb60:	7023      	strb	r3, [r4, #0]
            break;
 804eb62:	e7f3      	b.n	804eb4c <GetFCntDown+0x40>
            *fCntID = MC_FCNT_DOWN_3;
 804eb64:	2307      	movs	r3, #7
 804eb66:	7023      	strb	r3, [r4, #0]
            break;
 804eb68:	e7f0      	b.n	804eb4c <GetFCntDown+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 804eb6a:	2009      	movs	r0, #9
 804eb6c:	e7f3      	b.n	804eb56 <GetFCntDown+0x4a>
 804eb6e:	2009      	movs	r0, #9
 804eb70:	e7f1      	b.n	804eb56 <GetFCntDown+0x4a>
 804eb72:	2009      	movs	r0, #9
 804eb74:	e7ef      	b.n	804eb56 <GetFCntDown+0x4a>
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 804eb76:	2005      	movs	r0, #5
 804eb78:	e7ed      	b.n	804eb56 <GetFCntDown+0x4a>

0804eb7a <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 804eb7a:	2801      	cmp	r0, #1
 804eb7c:	d900      	bls.n	804eb80 <RemoveMacCommands+0x6>
 804eb7e:	4770      	bx	lr
{
 804eb80:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 804eb82:	2a01      	cmp	r2, #1
 804eb84:	d105      	bne.n	804eb92 <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 804eb86:	f011 0f20 	tst.w	r1, #32
 804eb8a:	d004      	beq.n	804eb96 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 804eb8c:	f003 fd3a 	bl	8052604 <LoRaMacCommandsRemoveStickyAnsCmds>
 804eb90:	e001      	b.n	804eb96 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 804eb92:	f003 fd37 	bl	8052604 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 804eb96:	bd08      	pop	{r3, pc}

0804eb98 <StopRetransmission>:
{
 804eb98:	b510      	push	{r4, lr}
 804eb9a:	b082      	sub	sp, #8
    if( Nvm.MacGroup2.Rejoin0UplinksLimit != 0 )
 804eb9c:	4b29      	ldr	r3, [pc, #164]	; (804ec44 <StopRetransmission+0xac>)
 804eb9e:	f8b3 31aa 	ldrh.w	r3, [r3, #426]	; 0x1aa
 804eba2:	b12b      	cbz	r3, 804ebb0 <StopRetransmission+0x18>
        Nvm.MacGroup1.Rejoin0UplinksCounter++;
 804eba4:	4a27      	ldr	r2, [pc, #156]	; (804ec44 <StopRetransmission+0xac>)
 804eba6:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
 804ebaa:	3301      	adds	r3, #1
 804ebac:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
    if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
 804ebb0:	4b24      	ldr	r3, [pc, #144]	; (804ec44 <StopRetransmission+0xac>)
 804ebb2:	f893 31a6 	ldrb.w	r3, [r3, #422]	; 0x1a6
 804ebb6:	bb23      	cbnz	r3, 804ec02 <StopRetransmission+0x6a>
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 804ebb8:	4b23      	ldr	r3, [pc, #140]	; (804ec48 <StopRetransmission+0xb0>)
 804ebba:	f893 348d 	ldrb.w	r3, [r3, #1165]	; 0x48d
 804ebbe:	f013 0f02 	tst.w	r3, #2
 804ebc2:	d004      	beq.n	804ebce <StopRetransmission+0x36>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 804ebc4:	4b20      	ldr	r3, [pc, #128]	; (804ec48 <StopRetransmission+0xb0>)
 804ebc6:	f893 3431 	ldrb.w	r3, [r3, #1073]	; 0x431
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 804ebca:	2b01      	cmp	r3, #1
 804ebcc:	d908      	bls.n	804ebe0 <StopRetransmission+0x48>
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 804ebce:	4b1d      	ldr	r3, [pc, #116]	; (804ec44 <StopRetransmission+0xac>)
 804ebd0:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 804ebd4:	b123      	cbz	r3, 804ebe0 <StopRetransmission+0x48>
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 804ebd6:	4c1b      	ldr	r4, [pc, #108]	; (804ec44 <StopRetransmission+0xac>)
 804ebd8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 804ebda:	f7ff fe7b 	bl	804e8d4 <IncreaseAdrAckCounter>
 804ebde:	63a0      	str	r0, [r4, #56]	; 0x38
    MacCtx.ChannelsNbTransCounter = 0;
 804ebe0:	4b19      	ldr	r3, [pc, #100]	; (804ec48 <StopRetransmission+0xb0>)
 804ebe2:	2200      	movs	r2, #0
 804ebe4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 804ebe8:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.RetransmitTimeoutRetry = false;
 804ebec:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 804ebf0:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 804ebf4:	f022 0202 	bic.w	r2, r2, #2
 804ebf8:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
}
 804ebfc:	2001      	movs	r0, #1
 804ebfe:	b002      	add	sp, #8
 804ec00:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd ) == LORAMAC_COMMANDS_SUCCESS )
 804ec02:	a901      	add	r1, sp, #4
 804ec04:	200b      	movs	r0, #11
 804ec06:	f003 fcd5 	bl	80525b4 <LoRaMacCommandsGetCmd>
 804ec0a:	2800      	cmp	r0, #0
 804ec0c:	d1d4      	bne.n	804ebb8 <StopRetransmission+0x20>
            Nvm.MacGroup1.RekeyIndUplinksCounter++;
 804ec0e:	4a0d      	ldr	r2, [pc, #52]	; (804ec44 <StopRetransmission+0xac>)
 804ec10:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 804ec14:	3301      	adds	r3, #1
 804ec16:	b29b      	uxth	r3, r3
 804ec18:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
            if( Nvm.MacGroup1.RekeyIndUplinksCounter == MacCtx.AdrAckLimit )
 804ec1c:	4a0a      	ldr	r2, [pc, #40]	; (804ec48 <StopRetransmission+0xb0>)
 804ec1e:	f8b2 23fc 	ldrh.w	r2, [r2, #1020]	; 0x3fc
 804ec22:	4293      	cmp	r3, r2
 804ec24:	d1c8      	bne.n	804ebb8 <StopRetransmission+0x20>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 804ec26:	4b07      	ldr	r3, [pc, #28]	; (804ec44 <StopRetransmission+0xac>)
 804ec28:	2200      	movs	r2, #0
 804ec2a:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
                MacCtx.MacFlags.Bits.MlmeInd = 1;
 804ec2e:	4b06      	ldr	r3, [pc, #24]	; (804ec48 <StopRetransmission+0xb0>)
 804ec30:	f893 248d 	ldrb.w	r2, [r3, #1165]	; 0x48d
 804ec34:	f042 0208 	orr.w	r2, r2, #8
 804ec38:	f883 248d 	strb.w	r2, [r3, #1165]	; 0x48d
                MacCtx.MlmeIndication.MlmeIndication = MLME_REVERT_JOIN;
 804ec3c:	220f      	movs	r2, #15
 804ec3e:	f883 246c 	strb.w	r2, [r3, #1132]	; 0x46c
 804ec42:	e7b9      	b.n	804ebb8 <StopRetransmission+0x20>
 804ec44:	20019b68 	.word	0x20019b68
 804ec48:	200195e4 	.word	0x200195e4

0804ec4c <ProcessRadioTxTimeout>:
{
 804ec4c:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 804ec4e:	4b0f      	ldr	r3, [pc, #60]	; (804ec8c <ProcessRadioTxTimeout+0x40>)
 804ec50:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 804ec54:	2b02      	cmp	r3, #2
 804ec56:	d002      	beq.n	804ec5e <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 804ec58:	4b0d      	ldr	r3, [pc, #52]	; (804ec90 <ProcessRadioTxTimeout+0x44>)
 804ec5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804ec5c:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 804ec5e:	f7ff fd4f 	bl	804e700 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 804ec62:	4c0c      	ldr	r4, [pc, #48]	; (804ec94 <ProcessRadioTxTimeout+0x48>)
 804ec64:	2002      	movs	r0, #2
 804ec66:	f884 0445 	strb.w	r0, [r4, #1093]	; 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 804ec6a:	f003 fe17 	bl	805289c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 804ec6e:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 804ec72:	b113      	cbz	r3, 804ec7a <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 804ec74:	2201      	movs	r2, #1
 804ec76:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 804ec7a:	4a06      	ldr	r2, [pc, #24]	; (804ec94 <ProcessRadioTxTimeout+0x48>)
 804ec7c:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
 804ec80:	f043 0320 	orr.w	r3, r3, #32
 804ec84:	f882 348d 	strb.w	r3, [r2, #1165]	; 0x48d
}
 804ec88:	bd10      	pop	{r4, pc}
 804ec8a:	bf00      	nop
 804ec8c:	20019b68 	.word	0x20019b68
 804ec90:	08059d2c 	.word	0x08059d2c
 804ec94:	200195e4 	.word	0x200195e4

0804ec98 <CheckForClassBCollision>:
{
 804ec98:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 804ec9a:	f003 fb89 	bl	80523b0 <LoRaMacClassBIsBeaconExpected>
 804ec9e:	b978      	cbnz	r0, 804ecc0 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 804eca0:	4b09      	ldr	r3, [pc, #36]	; (804ecc8 <CheckForClassBCollision+0x30>)
 804eca2:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 804eca6:	2b01      	cmp	r3, #1
 804eca8:	d001      	beq.n	804ecae <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 804ecaa:	2000      	movs	r0, #0
}
 804ecac:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 804ecae:	f003 fb81 	bl	80523b4 <LoRaMacClassBIsPingExpected>
 804ecb2:	b938      	cbnz	r0, 804ecc4 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 804ecb4:	f003 fb80 	bl	80523b8 <LoRaMacClassBIsMulticastExpected>
 804ecb8:	2800      	cmp	r0, #0
 804ecba:	d0f7      	beq.n	804ecac <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 804ecbc:	200f      	movs	r0, #15
 804ecbe:	e7f5      	b.n	804ecac <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 804ecc0:	200e      	movs	r0, #14
 804ecc2:	e7f3      	b.n	804ecac <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 804ecc4:	200f      	movs	r0, #15
 804ecc6:	e7f1      	b.n	804ecac <CheckForClassBCollision+0x14>
 804ecc8:	20019b68 	.word	0x20019b68

0804eccc <HandleRadioRxErrorTimeout>:
{
 804eccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804ecce:	4605      	mov	r5, r0
 804ecd0:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 804ecd2:	4b34      	ldr	r3, [pc, #208]	; (804eda4 <HandleRadioRxErrorTimeout+0xd8>)
 804ecd4:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 804ecd8:	2b02      	cmp	r3, #2
 804ecda:	d002      	beq.n	804ece2 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 804ecdc:	4b32      	ldr	r3, [pc, #200]	; (804eda8 <HandleRadioRxErrorTimeout+0xdc>)
 804ecde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804ece0:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 804ece2:	f003 fb65 	bl	80523b0 <LoRaMacClassBIsBeaconExpected>
 804ece6:	4606      	mov	r6, r0
 804ece8:	bb50      	cbnz	r0, 804ed40 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 804ecea:	4b2e      	ldr	r3, [pc, #184]	; (804eda4 <HandleRadioRxErrorTimeout+0xd8>)
 804ecec:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 804ecf0:	2b01      	cmp	r3, #1
 804ecf2:	d02c      	beq.n	804ed4e <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 804ecf4:	2e00      	cmp	r6, #0
 804ecf6:	d152      	bne.n	804ed9e <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 804ecf8:	4b2c      	ldr	r3, [pc, #176]	; (804edac <HandleRadioRxErrorTimeout+0xe0>)
 804ecfa:	f893 348c 	ldrb.w	r3, [r3, #1164]	; 0x48c
 804ecfe:	2b00      	cmp	r3, #0
 804ed00:	d13c      	bne.n	804ed7c <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 804ed02:	4b2a      	ldr	r3, [pc, #168]	; (804edac <HandleRadioRxErrorTimeout+0xe0>)
 804ed04:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 804ed08:	b113      	cbz	r3, 804ed10 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 804ed0a:	4b28      	ldr	r3, [pc, #160]	; (804edac <HandleRadioRxErrorTimeout+0xe0>)
 804ed0c:	f883 5445 	strb.w	r5, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 804ed10:	4628      	mov	r0, r5
 804ed12:	f003 fdc3 	bl	805289c <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 804ed16:	4b23      	ldr	r3, [pc, #140]	; (804eda4 <HandleRadioRxErrorTimeout+0xd8>)
 804ed18:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 804ed1a:	f7f4 fa74 	bl	8043206 <TimerGetElapsedTime>
 804ed1e:	4b23      	ldr	r3, [pc, #140]	; (804edac <HandleRadioRxErrorTimeout+0xe0>)
 804ed20:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 804ed24:	4298      	cmp	r0, r3
 804ed26:	d33a      	bcc.n	804ed9e <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 804ed28:	4c20      	ldr	r4, [pc, #128]	; (804edac <HandleRadioRxErrorTimeout+0xe0>)
 804ed2a:	f504 7068 	add.w	r0, r4, #928	; 0x3a0
 804ed2e:	f7f4 fa17 	bl	8043160 <TimerStop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 804ed32:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 804ed36:	f043 0320 	orr.w	r3, r3, #32
 804ed3a:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
 804ed3e:	e02e      	b.n	804ed9e <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 804ed40:	2002      	movs	r0, #2
 804ed42:	f003 fb2b 	bl	805239c <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 804ed46:	2000      	movs	r0, #0
 804ed48:	f003 fb2d 	bl	80523a6 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 804ed4c:	e7cd      	b.n	804ecea <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 804ed4e:	f003 fb31 	bl	80523b4 <LoRaMacClassBIsPingExpected>
 804ed52:	4607      	mov	r7, r0
 804ed54:	b950      	cbnz	r0, 804ed6c <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 804ed56:	f003 fb2f 	bl	80523b8 <LoRaMacClassBIsMulticastExpected>
 804ed5a:	2800      	cmp	r0, #0
 804ed5c:	d0ca      	beq.n	804ecf4 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 804ed5e:	2000      	movs	r0, #0
 804ed60:	f003 fb1e 	bl	80523a0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 804ed64:	2000      	movs	r0, #0
 804ed66:	f003 fb20 	bl	80523aa <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 804ed6a:	e018      	b.n	804ed9e <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 804ed6c:	2000      	movs	r0, #0
 804ed6e:	f003 fb16 	bl	805239e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 804ed72:	2000      	movs	r0, #0
 804ed74:	f003 fb18 	bl	80523a8 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 804ed78:	463e      	mov	r6, r7
 804ed7a:	e7ec      	b.n	804ed56 <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 804ed7c:	4b0b      	ldr	r3, [pc, #44]	; (804edac <HandleRadioRxErrorTimeout+0xe0>)
 804ed7e:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 804ed82:	b113      	cbz	r3, 804ed8a <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 804ed84:	4b09      	ldr	r3, [pc, #36]	; (804edac <HandleRadioRxErrorTimeout+0xe0>)
 804ed86:	f883 4445 	strb.w	r4, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 804ed8a:	4620      	mov	r0, r4
 804ed8c:	f003 fd86 	bl	805289c <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 804ed90:	4a06      	ldr	r2, [pc, #24]	; (804edac <HandleRadioRxErrorTimeout+0xe0>)
 804ed92:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
 804ed96:	f043 0320 	orr.w	r3, r3, #32
 804ed9a:	f882 348d 	strb.w	r3, [r2, #1165]	; 0x48d
    UpdateRxSlotIdleState( );
 804ed9e:	f7ff fcaf 	bl	804e700 <UpdateRxSlotIdleState>
}
 804eda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804eda4:	20019b68 	.word	0x20019b68
 804eda8:	08059d2c 	.word	0x08059d2c
 804edac:	200195e4 	.word	0x200195e4

0804edb0 <ProcessRadioRxError>:
{
 804edb0:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 804edb2:	2106      	movs	r1, #6
 804edb4:	2005      	movs	r0, #5
 804edb6:	f7ff ff89 	bl	804eccc <HandleRadioRxErrorTimeout>
}
 804edba:	bd08      	pop	{r3, pc}

0804edbc <ProcessRadioRxTimeout>:
{
 804edbc:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 804edbe:	2104      	movs	r1, #4
 804edc0:	2003      	movs	r0, #3
 804edc2:	f7ff ff83 	bl	804eccc <HandleRadioRxErrorTimeout>
}
 804edc6:	bd08      	pop	{r3, pc}

0804edc8 <LoRaMacHandleMlmeRequest>:
{
 804edc8:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 804edca:	4b14      	ldr	r3, [pc, #80]	; (804ee1c <LoRaMacHandleMlmeRequest+0x54>)
 804edcc:	f893 348d 	ldrb.w	r3, [r3, #1165]	; 0x48d
 804edd0:	f013 0f04 	tst.w	r3, #4
 804edd4:	d100      	bne.n	804edd8 <LoRaMacHandleMlmeRequest+0x10>
}
 804edd6:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 804edd8:	2001      	movs	r0, #1
 804edda:	f003 fd7d 	bl	80528d8 <LoRaMacConfirmQueueIsCmdActive>
 804edde:	b178      	cbz	r0, 804ee00 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 804ede0:	2001      	movs	r0, #1
 804ede2:	f003 fd43 	bl	805286c <LoRaMacConfirmQueueGetStatus>
 804ede6:	b918      	cbnz	r0, 804edf0 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 804ede8:	4b0c      	ldr	r3, [pc, #48]	; (804ee1c <LoRaMacHandleMlmeRequest+0x54>)
 804edea:	2200      	movs	r2, #0
 804edec:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 804edf0:	4a0a      	ldr	r2, [pc, #40]	; (804ee1c <LoRaMacHandleMlmeRequest+0x54>)
 804edf2:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 804edf6:	f023 0302 	bic.w	r3, r3, #2
 804edfa:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 804edfe:	e7ea      	b.n	804edd6 <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 804ee00:	2005      	movs	r0, #5
 804ee02:	f003 fd69 	bl	80528d8 <LoRaMacConfirmQueueIsCmdActive>
 804ee06:	2800      	cmp	r0, #0
 804ee08:	d0e5      	beq.n	804edd6 <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 804ee0a:	4a04      	ldr	r2, [pc, #16]	; (804ee1c <LoRaMacHandleMlmeRequest+0x54>)
 804ee0c:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 804ee10:	f023 0302 	bic.w	r3, r3, #2
 804ee14:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 804ee18:	e7dd      	b.n	804edd6 <LoRaMacHandleMlmeRequest+0xe>
 804ee1a:	bf00      	nop
 804ee1c:	200195e4 	.word	0x200195e4

0804ee20 <SerializeTxFrame>:
{
 804ee20:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 804ee22:	4b0f      	ldr	r3, [pc, #60]	; (804ee60 <SerializeTxFrame+0x40>)
 804ee24:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 804ee28:	b11b      	cbz	r3, 804ee32 <SerializeTxFrame+0x12>
 804ee2a:	2b04      	cmp	r3, #4
 804ee2c:	d00a      	beq.n	804ee44 <SerializeTxFrame+0x24>
 804ee2e:	2003      	movs	r0, #3
}
 804ee30:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 804ee32:	480c      	ldr	r0, [pc, #48]	; (804ee64 <SerializeTxFrame+0x44>)
 804ee34:	f004 fce9 	bl	805380a <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 804ee38:	b968      	cbnz	r0, 804ee56 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 804ee3a:	4b09      	ldr	r3, [pc, #36]	; (804ee60 <SerializeTxFrame+0x40>)
 804ee3c:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 804ee40:	801a      	strh	r2, [r3, #0]
            break;
 804ee42:	e7f5      	b.n	804ee30 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 804ee44:	4807      	ldr	r0, [pc, #28]	; (804ee64 <SerializeTxFrame+0x44>)
 804ee46:	f004 fd8c 	bl	8053962 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 804ee4a:	b930      	cbnz	r0, 804ee5a <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 804ee4c:	4b04      	ldr	r3, [pc, #16]	; (804ee60 <SerializeTxFrame+0x40>)
 804ee4e:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 804ee52:	801a      	strh	r2, [r3, #0]
            break;
 804ee54:	e7ec      	b.n	804ee30 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 804ee56:	2011      	movs	r0, #17
 804ee58:	e7ea      	b.n	804ee30 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 804ee5a:	2011      	movs	r0, #17
 804ee5c:	e7e8      	b.n	804ee30 <SerializeTxFrame+0x10>
 804ee5e:	bf00      	nop
 804ee60:	200195e4 	.word	0x200195e4
 804ee64:	200196ec 	.word	0x200196ec

0804ee68 <ComputeRxWindowParameters>:
{
 804ee68:	b570      	push	{r4, r5, r6, lr}
 804ee6a:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 804ee6c:	4c1d      	ldr	r4, [pc, #116]	; (804eee4 <ComputeRxWindowParameters+0x7c>)
 804ee6e:	f894 6058 	ldrb.w	r6, [r4, #88]	; 0x58
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 804ee72:	f994 3079 	ldrsb.w	r3, [r4, #121]	; 0x79
 804ee76:	f994 2049 	ldrsb.w	r2, [r4, #73]	; 0x49
 804ee7a:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
 804ee7e:	4630      	mov	r0, r6
 804ee80:	f004 fe80 	bl	8053b84 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 804ee84:	4d18      	ldr	r5, [pc, #96]	; (804eee8 <ComputeRxWindowParameters+0x80>)
 804ee86:	f505 7370 	add.w	r3, r5, #960	; 0x3c0
 804ee8a:	9300      	str	r3, [sp, #0]
 804ee8c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 804ee8e:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 804ee92:	b241      	sxtb	r1, r0
 804ee94:	4630      	mov	r0, r6
 804ee96:	f004 fe0f 	bl	8053ab8 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 804ee9a:	f505 7375 	add.w	r3, r5, #980	; 0x3d4
 804ee9e:	9300      	str	r3, [sp, #0]
 804eea0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 804eea2:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 804eea6:	f994 1080 	ldrsb.w	r1, [r4, #128]	; 0x80
 804eeaa:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 804eeae:	f004 fe03 	bl	8053ab8 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 804eeb2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 804eeb4:	f8d5 13cc 	ldr.w	r1, [r5, #972]	; 0x3cc
 804eeb8:	440b      	add	r3, r1
 804eeba:	f8c5 33b8 	str.w	r3, [r5, #952]	; 0x3b8
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 804eebe:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 804eec0:	f8d5 23e0 	ldr.w	r2, [r5, #992]	; 0x3e0
 804eec4:	4413      	add	r3, r2
 804eec6:	f8c5 33bc 	str.w	r3, [r5, #956]	; 0x3bc
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 804eeca:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
 804eece:	b93b      	cbnz	r3, 804eee0 <ComputeRxWindowParameters+0x78>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 804eed0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 804eed2:	4419      	add	r1, r3
 804eed4:	f8c5 13b8 	str.w	r1, [r5, #952]	; 0x3b8
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 804eed8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 804eeda:	440a      	add	r2, r1
 804eedc:	f8c5 23bc 	str.w	r2, [r5, #956]	; 0x3bc
}
 804eee0:	b002      	add	sp, #8
 804eee2:	bd70      	pop	{r4, r5, r6, pc}
 804eee4:	20019b68 	.word	0x20019b68
 804eee8:	200195e4 	.word	0x200195e4

0804eeec <VerifyTxFrame>:
{
 804eeec:	b510      	push	{r4, lr}
 804eeee:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 804eef0:	2300      	movs	r3, #0
 804eef2:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 804eef4:	4b0d      	ldr	r3, [pc, #52]	; (804ef2c <VerifyTxFrame+0x40>)
 804eef6:	f893 41a8 	ldrb.w	r4, [r3, #424]	; 0x1a8
 804eefa:	b914      	cbnz	r4, 804ef02 <VerifyTxFrame+0x16>
}
 804eefc:	4620      	mov	r0, r4
 804eefe:	b002      	add	sp, #8
 804ef00:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 804ef02:	a801      	add	r0, sp, #4
 804ef04:	f003 fb92 	bl	805262c <LoRaMacCommandsGetSizeSerializedCmds>
 804ef08:	4604      	mov	r4, r0
 804ef0a:	b968      	cbnz	r0, 804ef28 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 804ef0c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 804ef10:	4b06      	ldr	r3, [pc, #24]	; (804ef2c <VerifyTxFrame+0x40>)
 804ef12:	f993 1049 	ldrsb.w	r1, [r3, #73]	; 0x49
 804ef16:	4b06      	ldr	r3, [pc, #24]	; (804ef30 <VerifyTxFrame+0x44>)
 804ef18:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 804ef1c:	f7ff fd1e 	bl	804e95c <ValidatePayloadLength>
 804ef20:	2800      	cmp	r0, #0
 804ef22:	d1eb      	bne.n	804eefc <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 804ef24:	2408      	movs	r4, #8
 804ef26:	e7e9      	b.n	804eefc <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804ef28:	2413      	movs	r4, #19
 804ef2a:	e7e7      	b.n	804eefc <VerifyTxFrame+0x10>
 804ef2c:	20019b68 	.word	0x20019b68
 804ef30:	200195e4 	.word	0x200195e4

0804ef34 <LoRaMacHandleRequestEvents>:
{
 804ef34:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 804ef36:	4b22      	ldr	r3, [pc, #136]	; (804efc0 <LoRaMacHandleRequestEvents+0x8c>)
 804ef38:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 804ef3c:	bb7b      	cbnz	r3, 804ef9e <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 804ef3e:	4b20      	ldr	r3, [pc, #128]	; (804efc0 <LoRaMacHandleRequestEvents+0x8c>)
 804ef40:	f893 448d 	ldrb.w	r4, [r3, #1165]	; 0x48d
 804ef44:	f014 0501 	ands.w	r5, r4, #1
 804ef48:	d005      	beq.n	804ef56 <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 804ef4a:	f893 248d 	ldrb.w	r2, [r3, #1165]	; 0x48d
 804ef4e:	f36f 0200 	bfc	r2, #0, #1
 804ef52:	f883 248d 	strb.w	r2, [r3, #1165]	; 0x48d
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 804ef56:	4b1a      	ldr	r3, [pc, #104]	; (804efc0 <LoRaMacHandleRequestEvents+0x8c>)
 804ef58:	f893 348d 	ldrb.w	r3, [r3, #1165]	; 0x48d
 804ef5c:	f013 0f04 	tst.w	r3, #4
 804ef60:	d006      	beq.n	804ef70 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 804ef62:	4b17      	ldr	r3, [pc, #92]	; (804efc0 <LoRaMacHandleRequestEvents+0x8c>)
 804ef64:	f893 248d 	ldrb.w	r2, [r3, #1165]	; 0x48d
 804ef68:	f36f 0282 	bfc	r2, #2, #1
 804ef6c:	f883 248d 	strb.w	r2, [r3, #1165]	; 0x48d
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 804ef70:	2001      	movs	r0, #1
 804ef72:	f7ff fbd9 	bl	804e728 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 804ef76:	b135      	cbz	r5, 804ef86 <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 804ef78:	4811      	ldr	r0, [pc, #68]	; (804efc0 <LoRaMacHandleRequestEvents+0x8c>)
 804ef7a:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 804ef7e:	681b      	ldr	r3, [r3, #0]
 804ef80:	f200 4044 	addw	r0, r0, #1092	; 0x444
 804ef84:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 804ef86:	f014 0f04 	tst.w	r4, #4
 804ef8a:	d109      	bne.n	804efa0 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 804ef8c:	f003 fa1a 	bl	80523c4 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 804ef90:	4b0b      	ldr	r3, [pc, #44]	; (804efc0 <LoRaMacHandleRequestEvents+0x8c>)
 804ef92:	f893 248d 	ldrb.w	r2, [r3, #1165]	; 0x48d
 804ef96:	f36f 1245 	bfc	r2, #5, #1
 804ef9a:	f883 248d 	strb.w	r2, [r3, #1165]	; 0x48d
}
 804ef9e:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 804efa0:	4808      	ldr	r0, [pc, #32]	; (804efc4 <LoRaMacHandleRequestEvents+0x90>)
 804efa2:	f003 fca5 	bl	80528f0 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 804efa6:	f003 fcd5 	bl	8052954 <LoRaMacConfirmQueueGetCnt>
 804efaa:	2800      	cmp	r0, #0
 804efac:	d0ee      	beq.n	804ef8c <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 804efae:	4a04      	ldr	r2, [pc, #16]	; (804efc0 <LoRaMacHandleRequestEvents+0x8c>)
 804efb0:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
 804efb4:	f043 0304 	orr.w	r3, r3, #4
 804efb8:	f882 348d 	strb.w	r3, [r2, #1165]	; 0x48d
 804efbc:	e7e6      	b.n	804ef8c <LoRaMacHandleRequestEvents+0x58>
 804efbe:	bf00      	nop
 804efc0:	200195e4 	.word	0x200195e4
 804efc4:	20019a3c 	.word	0x20019a3c

0804efc8 <LoRaMacHandleScheduleUplinkEvent>:
    if( MacCtx.MacState == LORAMAC_IDLE )
 804efc8:	4b0a      	ldr	r3, [pc, #40]	; (804eff4 <LoRaMacHandleScheduleUplinkEvent+0x2c>)
 804efca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 804efce:	b103      	cbz	r3, 804efd2 <LoRaMacHandleScheduleUplinkEvent+0xa>
 804efd0:	4770      	bx	lr
{
 804efd2:	b500      	push	{lr}
 804efd4:	b083      	sub	sp, #12
        bool isStickyMacCommandPending = false;
 804efd6:	f88d 3007 	strb.w	r3, [sp, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 804efda:	f10d 0007 	add.w	r0, sp, #7
 804efde:	f003 fb63 	bl	80526a8 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 804efe2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 804efe6:	b913      	cbnz	r3, 804efee <LoRaMacHandleScheduleUplinkEvent+0x26>
}
 804efe8:	b003      	add	sp, #12
 804efea:	f85d fb04 	ldr.w	pc, [sp], #4
            SetMlmeScheduleUplinkIndication( );
 804efee:	f7ff fbfd 	bl	804e7ec <SetMlmeScheduleUplinkIndication>
}
 804eff2:	e7f9      	b.n	804efe8 <LoRaMacHandleScheduleUplinkEvent+0x20>
 804eff4:	200195e4 	.word	0x200195e4

0804eff8 <LoRaMacHandleNvm>:
{
 804eff8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 804effa:	4b30      	ldr	r3, [pc, #192]	; (804f0bc <LoRaMacHandleNvm+0xc4>)
 804effc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 804f000:	b103      	cbz	r3, 804f004 <LoRaMacHandleNvm+0xc>
}
 804f002:	bd38      	pop	{r3, r4, r5, pc}
 804f004:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 804f006:	2134      	movs	r1, #52	; 0x34
 804f008:	f005 ff70 	bl	8054eec <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 804f00c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804f00e:	4283      	cmp	r3, r0
 804f010:	d052      	beq.n	804f0b8 <LoRaMacHandleNvm+0xc0>
        nvmData->Crypto.Crc32 = crc;
 804f012:	6360      	str	r0, [r4, #52]	; 0x34
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 804f014:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 804f016:	211c      	movs	r1, #28
 804f018:	f104 0038 	add.w	r0, r4, #56	; 0x38
 804f01c:	f005 ff66 	bl	8054eec <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 804f020:	6d63      	ldr	r3, [r4, #84]	; 0x54
 804f022:	4283      	cmp	r3, r0
 804f024:	d002      	beq.n	804f02c <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 804f026:	6560      	str	r0, [r4, #84]	; 0x54
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 804f028:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 804f02c:	f44f 71b4 	mov.w	r1, #360	; 0x168
 804f030:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804f034:	f005 ff5a 	bl	8054eec <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 804f038:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 804f03c:	4283      	cmp	r3, r0
 804f03e:	d003      	beq.n	804f048 <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 804f040:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 804f044:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 804f048:	2114      	movs	r1, #20
 804f04a:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
 804f04e:	f005 ff4d 	bl	8054eec <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 804f052:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 804f056:	4283      	cmp	r3, r0
 804f058:	d003      	beq.n	804f062 <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 804f05a:	f8c4 01d8 	str.w	r0, [r4, #472]	; 0x1d8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 804f05e:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 804f062:	2118      	movs	r1, #24
 804f064:	f504 70ee 	add.w	r0, r4, #476	; 0x1dc
 804f068:	f005 ff40 	bl	8054eec <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 804f06c:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 804f070:	4283      	cmp	r3, r0
 804f072:	d003      	beq.n	804f07c <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 804f074:	f8c4 01f4 	str.w	r0, [r4, #500]	; 0x1f4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 804f078:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 804f07c:	21c4      	movs	r1, #196	; 0xc4
 804f07e:	f504 70fc 	add.w	r0, r4, #504	; 0x1f8
 804f082:	f005 ff33 	bl	8054eec <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 804f086:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
 804f08a:	4283      	cmp	r3, r0
 804f08c:	d003      	beq.n	804f096 <LoRaMacHandleNvm+0x9e>
        nvmData->RegionGroup2.Crc32 = crc;
 804f08e:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 804f092:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 804f096:	2114      	movs	r1, #20
 804f098:	f504 7030 	add.w	r0, r4, #704	; 0x2c0
 804f09c:	f005 ff26 	bl	8054eec <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 804f0a0:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 804f0a4:	4283      	cmp	r3, r0
 804f0a6:	d003      	beq.n	804f0b0 <LoRaMacHandleNvm+0xb8>
        nvmData->ClassB.Crc32 = crc;
 804f0a8:	f8c4 02d4 	str.w	r0, [r4, #724]	; 0x2d4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 804f0ac:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 804f0b0:	4628      	mov	r0, r5
 804f0b2:	f7ff fc15 	bl	804e8e0 <CallNvmDataChangeCallback>
 804f0b6:	e7a4      	b.n	804f002 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 804f0b8:	2500      	movs	r5, #0
 804f0ba:	e7ac      	b.n	804f016 <LoRaMacHandleNvm+0x1e>
 804f0bc:	200195e4 	.word	0x200195e4

0804f0c0 <RestoreNvmData>:
    if( nvm == NULL )
 804f0c0:	2800      	cmp	r0, #0
 804f0c2:	d07d      	beq.n	804f1c0 <RestoreNvmData+0x100>
{
 804f0c4:	b570      	push	{r4, r5, r6, lr}
 804f0c6:	4604      	mov	r4, r0
    if( MacCtx.MacState != LORAMAC_STOPPED )
 804f0c8:	4b3e      	ldr	r3, [pc, #248]	; (804f1c4 <RestoreNvmData+0x104>)
 804f0ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 804f0ce:	2b01      	cmp	r3, #1
 804f0d0:	d001      	beq.n	804f0d6 <RestoreNvmData+0x16>
        return LORAMAC_STATUS_BUSY;
 804f0d2:	2001      	movs	r0, #1
}
 804f0d4:	bd70      	pop	{r4, r5, r6, pc}
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 804f0d6:	2134      	movs	r1, #52	; 0x34
 804f0d8:	f005 ff08 	bl	8054eec <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 804f0dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804f0de:	4283      	cmp	r3, r0
 804f0e0:	d033      	beq.n	804f14a <RestoreNvmData+0x8a>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 804f0e2:	f104 0538 	add.w	r5, r4, #56	; 0x38
 804f0e6:	211c      	movs	r1, #28
 804f0e8:	4628      	mov	r0, r5
 804f0ea:	f005 feff 	bl	8054eec <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 804f0ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 804f0f0:	4283      	cmp	r3, r0
 804f0f2:	d030      	beq.n	804f156 <RestoreNvmData+0x96>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 804f0f4:	f104 0558 	add.w	r5, r4, #88	; 0x58
 804f0f8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 804f0fc:	4628      	mov	r0, r5
 804f0fe:	f005 fef5 	bl	8054eec <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 804f102:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
 804f106:	4283      	cmp	r3, r0
 804f108:	d02b      	beq.n	804f162 <RestoreNvmData+0xa2>
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 804f10a:	f504 75e2 	add.w	r5, r4, #452	; 0x1c4
 804f10e:	2114      	movs	r1, #20
 804f110:	4628      	mov	r0, r5
 804f112:	f005 feeb 	bl	8054eec <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 804f116:	f8d4 31d8 	ldr.w	r3, [r4, #472]	; 0x1d8
 804f11a:	4283      	cmp	r3, r0
 804f11c:	d03d      	beq.n	804f19a <RestoreNvmData+0xda>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 804f11e:	f504 75ee 	add.w	r5, r4, #476	; 0x1dc
 804f122:	2118      	movs	r1, #24
 804f124:	4628      	mov	r0, r5
 804f126:	f005 fee1 	bl	8054eec <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 804f12a:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 804f12e:	4283      	cmp	r3, r0
 804f130:	d039      	beq.n	804f1a6 <RestoreNvmData+0xe6>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 804f132:	f504 7530 	add.w	r5, r4, #704	; 0x2c0
 804f136:	2114      	movs	r1, #20
 804f138:	4628      	mov	r0, r5
 804f13a:	f005 fed7 	bl	8054eec <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 804f13e:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 804f142:	4283      	cmp	r3, r0
 804f144:	d035      	beq.n	804f1b2 <RestoreNvmData+0xf2>
    return LORAMAC_STATUS_OK;
 804f146:	2000      	movs	r0, #0
 804f148:	e7c4      	b.n	804f0d4 <RestoreNvmData+0x14>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 804f14a:	2238      	movs	r2, #56	; 0x38
 804f14c:	4621      	mov	r1, r4
 804f14e:	481e      	ldr	r0, [pc, #120]	; (804f1c8 <RestoreNvmData+0x108>)
 804f150:	f005 fead 	bl	8054eae <memcpy1>
 804f154:	e7c5      	b.n	804f0e2 <RestoreNvmData+0x22>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 804f156:	2220      	movs	r2, #32
 804f158:	4629      	mov	r1, r5
 804f15a:	481c      	ldr	r0, [pc, #112]	; (804f1cc <RestoreNvmData+0x10c>)
 804f15c:	f005 fea7 	bl	8054eae <memcpy1>
 804f160:	e7c8      	b.n	804f0f4 <RestoreNvmData+0x34>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 804f162:	4e19      	ldr	r6, [pc, #100]	; (804f1c8 <RestoreNvmData+0x108>)
 804f164:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 804f168:	4629      	mov	r1, r5
 804f16a:	f106 0058 	add.w	r0, r6, #88	; 0x58
 804f16e:	f005 fe9e 	bl	8054eae <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 804f172:	4b14      	ldr	r3, [pc, #80]	; (804f1c4 <RestoreNvmData+0x104>)
 804f174:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 804f178:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 804f17c:	f8d6 2084 	ldr.w	r2, [r6, #132]	; 0x84
 804f180:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 804f184:	f896 208d 	ldrb.w	r2, [r6, #141]	; 0x8d
 804f188:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
        MacCtx.RxWindowCConfig.RxContinuous = true;
 804f18c:	2201      	movs	r2, #1
 804f18e:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 804f192:	2202      	movs	r2, #2
 804f194:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
 804f198:	e7b7      	b.n	804f10a <RestoreNvmData+0x4a>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 804f19a:	2218      	movs	r2, #24
 804f19c:	4629      	mov	r1, r5
 804f19e:	480c      	ldr	r0, [pc, #48]	; (804f1d0 <RestoreNvmData+0x110>)
 804f1a0:	f005 fe85 	bl	8054eae <memcpy1>
 804f1a4:	e7bb      	b.n	804f11e <RestoreNvmData+0x5e>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 804f1a6:	221c      	movs	r2, #28
 804f1a8:	4629      	mov	r1, r5
 804f1aa:	480a      	ldr	r0, [pc, #40]	; (804f1d4 <RestoreNvmData+0x114>)
 804f1ac:	f005 fe7f 	bl	8054eae <memcpy1>
 804f1b0:	e7bf      	b.n	804f132 <RestoreNvmData+0x72>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 804f1b2:	2218      	movs	r2, #24
 804f1b4:	4629      	mov	r1, r5
 804f1b6:	4808      	ldr	r0, [pc, #32]	; (804f1d8 <RestoreNvmData+0x118>)
 804f1b8:	f005 fe79 	bl	8054eae <memcpy1>
    return LORAMAC_STATUS_OK;
 804f1bc:	2000      	movs	r0, #0
 804f1be:	e789      	b.n	804f0d4 <RestoreNvmData+0x14>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 804f1c0:	2003      	movs	r0, #3
}
 804f1c2:	4770      	bx	lr
 804f1c4:	200195e4 	.word	0x200195e4
 804f1c8:	20019b68 	.word	0x20019b68
 804f1cc:	20019ba0 	.word	0x20019ba0
 804f1d0:	20019d2c 	.word	0x20019d2c
 804f1d4:	20019d44 	.word	0x20019d44
 804f1d8:	20019e28 	.word	0x20019e28

0804f1dc <OpenContinuousRxCWindow>:
{
 804f1dc:	b570      	push	{r4, r5, r6, lr}
 804f1de:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 804f1e0:	4c14      	ldr	r4, [pc, #80]	; (804f234 <OpenContinuousRxCWindow+0x58>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 804f1e2:	4d15      	ldr	r5, [pc, #84]	; (804f238 <OpenContinuousRxCWindow+0x5c>)
 804f1e4:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 804f1e8:	9600      	str	r6, [sp, #0]
 804f1ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 804f1ec:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 804f1f0:	f994 1088 	ldrsb.w	r1, [r4, #136]	; 0x88
 804f1f4:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 804f1f8:	f004 fc5e 	bl	8053ab8 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 804f1fc:	2302      	movs	r3, #2
 804f1fe:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 804f202:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
 804f206:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.RxContinuous = true;
 804f20a:	2301      	movs	r3, #1
 804f20c:	f885 33f9 	strb.w	r3, [r5, #1017]	; 0x3f9
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 804f210:	f205 4224 	addw	r2, r5, #1060	; 0x424
 804f214:	4631      	mov	r1, r6
 804f216:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 804f21a:	f004 fc58 	bl	8053ace <RegionRxConfig>
 804f21e:	b138      	cbz	r0, 804f230 <OpenContinuousRxCWindow+0x54>
        Radio.Rx( 0 ); // Continuous mode
 804f220:	4b06      	ldr	r3, [pc, #24]	; (804f23c <OpenContinuousRxCWindow+0x60>)
 804f222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804f224:	2000      	movs	r0, #0
 804f226:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 804f228:	f895 23fa 	ldrb.w	r2, [r5, #1018]	; 0x3fa
 804f22c:	f885 248c 	strb.w	r2, [r5, #1164]	; 0x48c
}
 804f230:	b002      	add	sp, #8
 804f232:	bd70      	pop	{r4, r5, r6, pc}
 804f234:	20019b68 	.word	0x20019b68
 804f238:	200195e4 	.word	0x200195e4
 804f23c:	08059d2c 	.word	0x08059d2c

0804f240 <RxWindowSetup>:
{
 804f240:	b510      	push	{r4, lr}
 804f242:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 804f244:	f7f3 ff8c 	bl	8043160 <TimerStop>
    Radio.Standby( );
 804f248:	4b0a      	ldr	r3, [pc, #40]	; (804f274 <RxWindowSetup+0x34>)
 804f24a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804f24c:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 804f24e:	4a0a      	ldr	r2, [pc, #40]	; (804f278 <RxWindowSetup+0x38>)
 804f250:	4621      	mov	r1, r4
 804f252:	4b0a      	ldr	r3, [pc, #40]	; (804f27c <RxWindowSetup+0x3c>)
 804f254:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 804f258:	f004 fc39 	bl	8053ace <RegionRxConfig>
 804f25c:	b140      	cbz	r0, 804f270 <RxWindowSetup+0x30>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 804f25e:	4b05      	ldr	r3, [pc, #20]	; (804f274 <RxWindowSetup+0x34>)
 804f260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804f262:	4a06      	ldr	r2, [pc, #24]	; (804f27c <RxWindowSetup+0x3c>)
 804f264:	6e50      	ldr	r0, [r2, #100]	; 0x64
 804f266:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 804f268:	7ca2      	ldrb	r2, [r4, #18]
 804f26a:	4b05      	ldr	r3, [pc, #20]	; (804f280 <RxWindowSetup+0x40>)
 804f26c:	f883 248c 	strb.w	r2, [r3, #1164]	; 0x48c
}
 804f270:	bd10      	pop	{r4, pc}
 804f272:	bf00      	nop
 804f274:	08059d2c 	.word	0x08059d2c
 804f278:	20019a08 	.word	0x20019a08
 804f27c:	20019b68 	.word	0x20019b68
 804f280:	200195e4 	.word	0x200195e4

0804f284 <OnRxWindow2TimerEvent>:
{
 804f284:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 804f286:	4b11      	ldr	r3, [pc, #68]	; (804f2cc <OnRxWindow2TimerEvent+0x48>)
 804f288:	f893 348c 	ldrb.w	r3, [r3, #1164]	; 0x48c
 804f28c:	b903      	cbnz	r3, 804f290 <OnRxWindow2TimerEvent+0xc>
}
 804f28e:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 804f290:	480e      	ldr	r0, [pc, #56]	; (804f2cc <OnRxWindow2TimerEvent+0x48>)
 804f292:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 804f296:	f880 33d4 	strb.w	r3, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 804f29a:	4b0d      	ldr	r3, [pc, #52]	; (804f2d0 <OnRxWindow2TimerEvent+0x4c>)
 804f29c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 804f29e:	f8c0 23d8 	str.w	r2, [r0, #984]	; 0x3d8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 804f2a2:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
 804f2a6:	f880 23e4 	strb.w	r2, [r0, #996]	; 0x3e4
    MacCtx.RxWindow2Config.RxContinuous = false;
 804f2aa:	2200      	movs	r2, #0
 804f2ac:	f880 23e5 	strb.w	r2, [r0, #997]	; 0x3e5
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 804f2b0:	2201      	movs	r2, #1
 804f2b2:	f880 23e6 	strb.w	r2, [r0, #998]	; 0x3e6
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 804f2b6:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 804f2ba:	f880 33e7 	strb.w	r3, [r0, #999]	; 0x3e7
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 804f2be:	f500 7175 	add.w	r1, r0, #980	; 0x3d4
 804f2c2:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 804f2c6:	f7ff ffbb 	bl	804f240 <RxWindowSetup>
 804f2ca:	e7e0      	b.n	804f28e <OnRxWindow2TimerEvent+0xa>
 804f2cc:	200195e4 	.word	0x200195e4
 804f2d0:	20019b68 	.word	0x20019b68

0804f2d4 <OnRxWindow1TimerEvent>:
{
 804f2d4:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 804f2d6:	480f      	ldr	r0, [pc, #60]	; (804f314 <OnRxWindow1TimerEvent+0x40>)
 804f2d8:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 804f2dc:	f880 33c0 	strb.w	r3, [r0, #960]	; 0x3c0
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 804f2e0:	4b0d      	ldr	r3, [pc, #52]	; (804f318 <OnRxWindow1TimerEvent+0x44>)
 804f2e2:	f993 2079 	ldrsb.w	r2, [r3, #121]	; 0x79
 804f2e6:	f880 23c3 	strb.w	r2, [r0, #963]	; 0x3c3
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 804f2ea:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
 804f2ee:	f880 23d0 	strb.w	r2, [r0, #976]	; 0x3d0
    MacCtx.RxWindow1Config.RxContinuous = false;
 804f2f2:	2200      	movs	r2, #0
 804f2f4:	f880 23d1 	strb.w	r2, [r0, #977]	; 0x3d1
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 804f2f8:	f880 23d2 	strb.w	r2, [r0, #978]	; 0x3d2
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 804f2fc:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 804f300:	f880 33d3 	strb.w	r3, [r0, #979]	; 0x3d3
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 804f304:	f500 7170 	add.w	r1, r0, #960	; 0x3c0
 804f308:	f500 7062 	add.w	r0, r0, #904	; 0x388
 804f30c:	f7ff ff98 	bl	804f240 <RxWindowSetup>
}
 804f310:	bd08      	pop	{r3, pc}
 804f312:	bf00      	nop
 804f314:	200195e4 	.word	0x200195e4
 804f318:	20019b68 	.word	0x20019b68

0804f31c <SwitchClass>:
{
 804f31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804f31e:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 804f320:	4b46      	ldr	r3, [pc, #280]	; (804f43c <SwitchClass+0x120>)
 804f322:	f893 5190 	ldrb.w	r5, [r3, #400]	; 0x190
 804f326:	2d01      	cmp	r5, #1
 804f328:	d06a      	beq.n	804f400 <SwitchClass+0xe4>
 804f32a:	2d02      	cmp	r5, #2
 804f32c:	d070      	beq.n	804f410 <SwitchClass+0xf4>
 804f32e:	b10d      	cbz	r5, 804f334 <SwitchClass+0x18>
 804f330:	2003      	movs	r0, #3
}
 804f332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 804f334:	b930      	cbnz	r0, 804f344 <SwitchClass+0x28>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 804f336:	f103 0284 	add.w	r2, r3, #132	; 0x84
 804f33a:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 804f33e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 804f340:	e882 0003 	stmia.w	r2, {r0, r1}
            if( deviceClass == CLASS_B )
 804f344:	2c01      	cmp	r4, #1
 804f346:	d01f      	beq.n	804f388 <SwitchClass+0x6c>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 804f348:	2003      	movs	r0, #3
            if( deviceClass == CLASS_C )
 804f34a:	2c02      	cmp	r4, #2
 804f34c:	d1f1      	bne.n	804f332 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 804f34e:	4b3b      	ldr	r3, [pc, #236]	; (804f43c <SwitchClass+0x120>)
 804f350:	f883 4190 	strb.w	r4, [r3, #400]	; 0x190
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 804f354:	4f3a      	ldr	r7, [pc, #232]	; (804f440 <SwitchClass+0x124>)
 804f356:	f507 747a 	add.w	r4, r7, #1000	; 0x3e8
 804f35a:	f507 7675 	add.w	r6, r7, #980	; 0x3d4
 804f35e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 804f360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 804f362:	6833      	ldr	r3, [r6, #0]
 804f364:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 804f366:	2302      	movs	r3, #2
 804f368:	f887 33fa 	strb.w	r3, [r7, #1018]	; 0x3fa
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 804f36c:	2300      	movs	r3, #0
 804f36e:	2b03      	cmp	r3, #3
 804f370:	dc30      	bgt.n	804f3d4 <SwitchClass+0xb8>
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 804f372:	4618      	mov	r0, r3
 804f374:	4931      	ldr	r1, [pc, #196]	; (804f43c <SwitchClass+0x120>)
 804f376:	222c      	movs	r2, #44	; 0x2c
 804f378:	fb02 1203 	mla	r2, r2, r3, r1
 804f37c:	f892 20e2 	ldrb.w	r2, [r2, #226]	; 0xe2
 804f380:	b95a      	cbnz	r2, 804f39a <SwitchClass+0x7e>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 804f382:	3301      	adds	r3, #1
 804f384:	b25b      	sxtb	r3, r3
 804f386:	e7f2      	b.n	804f36e <SwitchClass+0x52>
                status = LoRaMacClassBSwitchClass( deviceClass );
 804f388:	4620      	mov	r0, r4
 804f38a:	f003 f81c 	bl	80523c6 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 804f38e:	2800      	cmp	r0, #0
 804f390:	d1db      	bne.n	804f34a <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 804f392:	4b2a      	ldr	r3, [pc, #168]	; (804f43c <SwitchClass+0x120>)
 804f394:	f883 4190 	strb.w	r4, [r3, #400]	; 0x190
 804f398:	e7d7      	b.n	804f34a <SwitchClass+0x2e>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 804f39a:	460a      	mov	r2, r1
 804f39c:	232c      	movs	r3, #44	; 0x2c
 804f39e:	fb03 1000 	mla	r0, r3, r0, r1
 804f3a2:	f8d0 10f8 	ldr.w	r1, [r0, #248]	; 0xf8
 804f3a6:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 804f3aa:	f890 30fc 	ldrb.w	r3, [r0, #252]	; 0xfc
 804f3ae:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 804f3b2:	4b23      	ldr	r3, [pc, #140]	; (804f440 <SwitchClass+0x124>)
 804f3b4:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 804f3b8:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 804f3bc:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 804f3c0:	f892 208d 	ldrb.w	r2, [r2, #141]	; 0x8d
 804f3c4:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 804f3c8:	2203      	movs	r2, #3
 804f3ca:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 804f3ce:	2201      	movs	r2, #1
 804f3d0:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                MacCtx.NodeAckRequested = false;
 804f3d4:	4b1a      	ldr	r3, [pc, #104]	; (804f440 <SwitchClass+0x124>)
 804f3d6:	2200      	movs	r2, #0
 804f3d8:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                Radio.Sleep( );
 804f3dc:	4b19      	ldr	r3, [pc, #100]	; (804f444 <SwitchClass+0x128>)
 804f3de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804f3e0:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 804f3e2:	f7ff fefb 	bl	804f1dc <OpenContinuousRxCWindow>
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
 804f3e6:	4b15      	ldr	r3, [pc, #84]	; (804f43c <SwitchClass+0x120>)
 804f3e8:	f893 01a6 	ldrb.w	r0, [r3, #422]	; 0x1a6
 804f3ec:	2800      	cmp	r0, #0
 804f3ee:	d0a0      	beq.n	804f332 <SwitchClass+0x16>
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
 804f3f0:	2201      	movs	r2, #1
 804f3f2:	f503 71c8 	add.w	r1, r3, #400	; 0x190
 804f3f6:	2020      	movs	r0, #32
 804f3f8:	f003 f894 	bl	8052524 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_OK;
 804f3fc:	4628      	mov	r0, r5
 804f3fe:	e798      	b.n	804f332 <SwitchClass+0x16>
            status = LoRaMacClassBSwitchClass( deviceClass );
 804f400:	f002 ffe1 	bl	80523c6 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 804f404:	2800      	cmp	r0, #0
 804f406:	d194      	bne.n	804f332 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 804f408:	4b0c      	ldr	r3, [pc, #48]	; (804f43c <SwitchClass+0x120>)
 804f40a:	f883 4190 	strb.w	r4, [r3, #400]	; 0x190
 804f40e:	e790      	b.n	804f332 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 804f410:	b988      	cbnz	r0, 804f436 <SwitchClass+0x11a>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 804f412:	4d0a      	ldr	r5, [pc, #40]	; (804f43c <SwitchClass+0x120>)
 804f414:	f885 0190 	strb.w	r0, [r5, #400]	; 0x190
                Radio.Sleep( );
 804f418:	4b0a      	ldr	r3, [pc, #40]	; (804f444 <SwitchClass+0x128>)
 804f41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804f41c:	4798      	blx	r3
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
 804f41e:	f895 01a6 	ldrb.w	r0, [r5, #422]	; 0x1a6
 804f422:	2800      	cmp	r0, #0
 804f424:	d085      	beq.n	804f332 <SwitchClass+0x16>
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
 804f426:	2201      	movs	r2, #1
 804f428:	f505 71c8 	add.w	r1, r5, #400	; 0x190
 804f42c:	2020      	movs	r0, #32
 804f42e:	f003 f879 	bl	8052524 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_OK;
 804f432:	4620      	mov	r0, r4
 804f434:	e77d      	b.n	804f332 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 804f436:	2003      	movs	r0, #3
 804f438:	e77b      	b.n	804f332 <SwitchClass+0x16>
 804f43a:	bf00      	nop
 804f43c:	20019b68 	.word	0x20019b68
 804f440:	200195e4 	.word	0x200195e4
 804f444:	08059d2c 	.word	0x08059d2c

0804f448 <SecureFrame>:
{
 804f448:	b530      	push	{r4, r5, lr}
 804f44a:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 804f44c:	2300      	movs	r3, #0
 804f44e:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 804f450:	4b25      	ldr	r3, [pc, #148]	; (804f4e8 <SecureFrame+0xa0>)
 804f452:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 804f456:	2b04      	cmp	r3, #4
 804f458:	d83a      	bhi.n	804f4d0 <SecureFrame+0x88>
 804f45a:	e8df f003 	tbb	[pc, r3]
 804f45e:	0e03      	.short	0x0e03
 804f460:	3917      	.short	0x3917
 804f462:	20          	.byte	0x20
 804f463:	00          	.byte	0x00
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 804f464:	4821      	ldr	r0, [pc, #132]	; (804f4ec <SecureFrame+0xa4>)
 804f466:	f003 fe21 	bl	80530ac <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 804f46a:	2800      	cmp	r0, #0
 804f46c:	d132      	bne.n	804f4d4 <SecureFrame+0x8c>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 804f46e:	4b1e      	ldr	r3, [pc, #120]	; (804f4e8 <SecureFrame+0xa0>)
 804f470:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 804f474:	801a      	strh	r2, [r3, #0]
}
 804f476:	b003      	add	sp, #12
 804f478:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType1( &MacCtx.TxMsg.Message.ReJoin1 );
 804f47a:	481c      	ldr	r0, [pc, #112]	; (804f4ec <SecureFrame+0xa4>)
 804f47c:	f003 fe4e 	bl	805311c <LoRaMacCryptoPrepareReJoinType1>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 804f480:	bb50      	cbnz	r0, 804f4d8 <SecureFrame+0x90>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin1.BufSize;
 804f482:	4b19      	ldr	r3, [pc, #100]	; (804f4e8 <SecureFrame+0xa0>)
 804f484:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 804f488:	801a      	strh	r2, [r3, #0]
            break;
 804f48a:	e7f4      	b.n	804f476 <SecureFrame+0x2e>
            macCryptoStatus = LoRaMacCryptoPrepareReJoinType0or2( &MacCtx.TxMsg.Message.ReJoin0or2 );
 804f48c:	4817      	ldr	r0, [pc, #92]	; (804f4ec <SecureFrame+0xa4>)
 804f48e:	f003 fe73 	bl	8053178 <LoRaMacCryptoPrepareReJoinType0or2>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 804f492:	bb18      	cbnz	r0, 804f4dc <SecureFrame+0x94>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
 804f494:	4b14      	ldr	r3, [pc, #80]	; (804f4e8 <SecureFrame+0xa0>)
 804f496:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 804f49a:	801a      	strh	r2, [r3, #0]
            break;
 804f49c:	e7eb      	b.n	804f476 <SecureFrame+0x2e>
 804f49e:	4605      	mov	r5, r0
 804f4a0:	460c      	mov	r4, r1
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 804f4a2:	a801      	add	r0, sp, #4
 804f4a4:	f003 fd9c 	bl	8052fe0 <LoRaMacCryptoGetFCntUp>
 804f4a8:	b9d0      	cbnz	r0, 804f4e0 <SecureFrame+0x98>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 804f4aa:	4b0f      	ldr	r3, [pc, #60]	; (804f4e8 <SecureFrame+0xa0>)
 804f4ac:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 804f4b0:	b113      	cbz	r3, 804f4b8 <SecureFrame+0x70>
                fCntUp -= 1;
 804f4b2:	9b01      	ldr	r3, [sp, #4]
 804f4b4:	3b01      	subs	r3, #1
 804f4b6:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 804f4b8:	4b0c      	ldr	r3, [pc, #48]	; (804f4ec <SecureFrame+0xa4>)
 804f4ba:	4622      	mov	r2, r4
 804f4bc:	4629      	mov	r1, r5
 804f4be:	9801      	ldr	r0, [sp, #4]
 804f4c0:	f003 fe86 	bl	80531d0 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 804f4c4:	b970      	cbnz	r0, 804f4e4 <SecureFrame+0x9c>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 804f4c6:	4b08      	ldr	r3, [pc, #32]	; (804f4e8 <SecureFrame+0xa0>)
 804f4c8:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 804f4cc:	801a      	strh	r2, [r3, #0]
            break;
 804f4ce:	e7d2      	b.n	804f476 <SecureFrame+0x2e>
    switch( MacCtx.TxMsg.Type )
 804f4d0:	2003      	movs	r0, #3
 804f4d2:	e7d0      	b.n	804f476 <SecureFrame+0x2e>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 804f4d4:	2011      	movs	r0, #17
 804f4d6:	e7ce      	b.n	804f476 <SecureFrame+0x2e>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 804f4d8:	2011      	movs	r0, #17
 804f4da:	e7cc      	b.n	804f476 <SecureFrame+0x2e>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 804f4dc:	2011      	movs	r0, #17
 804f4de:	e7ca      	b.n	804f476 <SecureFrame+0x2e>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 804f4e0:	2012      	movs	r0, #18
 804f4e2:	e7c8      	b.n	804f476 <SecureFrame+0x2e>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 804f4e4:	2011      	movs	r0, #17
 804f4e6:	e7c6      	b.n	804f476 <SecureFrame+0x2e>
 804f4e8:	200195e4 	.word	0x200195e4
 804f4ec:	200196ec 	.word	0x200196ec

0804f4f0 <OnRadioRxDone>:
{
 804f4f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804f4f4:	4680      	mov	r8, r0
 804f4f6:	460f      	mov	r7, r1
 804f4f8:	4616      	mov	r6, r2
 804f4fa:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 804f4fc:	f7f3 fe7d 	bl	80431fa <TimerGetCurrentTime>
 804f500:	4c0a      	ldr	r4, [pc, #40]	; (804f52c <OnRadioRxDone+0x3c>)
 804f502:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 804f504:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 804f508:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 804f50a:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 804f50c:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 804f50e:	4a08      	ldr	r2, [pc, #32]	; (804f530 <OnRadioRxDone+0x40>)
 804f510:	7813      	ldrb	r3, [r2, #0]
 804f512:	f043 0308 	orr.w	r3, r3, #8
 804f516:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804f518:	4b06      	ldr	r3, [pc, #24]	; (804f534 <OnRadioRxDone+0x44>)
 804f51a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 804f51e:	b113      	cbz	r3, 804f526 <OnRadioRxDone+0x36>
 804f520:	68db      	ldr	r3, [r3, #12]
 804f522:	b103      	cbz	r3, 804f526 <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 804f524:	4798      	blx	r3
}
 804f526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804f52a:	bf00      	nop
 804f52c:	2001b510 	.word	0x2001b510
 804f530:	200195e0 	.word	0x200195e0
 804f534:	200195e4 	.word	0x200195e4

0804f538 <OnRadioTxDone>:
{
 804f538:	b530      	push	{r4, r5, lr}
 804f53a:	b083      	sub	sp, #12
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 804f53c:	f7f3 fe5d 	bl	80431fa <TimerGetCurrentTime>
 804f540:	4b0c      	ldr	r3, [pc, #48]	; (804f574 <OnRadioTxDone+0x3c>)
 804f542:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 804f544:	4d0c      	ldr	r5, [pc, #48]	; (804f578 <OnRadioTxDone+0x40>)
 804f546:	466c      	mov	r4, sp
 804f548:	4620      	mov	r0, r4
 804f54a:	f7f3 fc37 	bl	8042dbc <SysTimeGet>
 804f54e:	f505 734e 	add.w	r3, r5, #824	; 0x338
 804f552:	e894 0003 	ldmia.w	r4, {r0, r1}
 804f556:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 804f55a:	4a08      	ldr	r2, [pc, #32]	; (804f57c <OnRadioTxDone+0x44>)
 804f55c:	7813      	ldrb	r3, [r2, #0]
 804f55e:	f043 0310 	orr.w	r3, r3, #16
 804f562:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 804f564:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 804f568:	b113      	cbz	r3, 804f570 <OnRadioTxDone+0x38>
 804f56a:	68db      	ldr	r3, [r3, #12]
 804f56c:	b103      	cbz	r3, 804f570 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 804f56e:	4798      	blx	r3
}
 804f570:	b003      	add	sp, #12
 804f572:	bd30      	pop	{r4, r5, pc}
 804f574:	2001b50c 	.word	0x2001b50c
 804f578:	200195e4 	.word	0x200195e4
 804f57c:	200195e0 	.word	0x200195e0

0804f580 <ResetMacParameters>:
{
 804f580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804f584:	b08e      	sub	sp, #56	; 0x38
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 804f586:	4c4e      	ldr	r4, [pc, #312]	; (804f6c0 <ResetMacParameters+0x140>)
 804f588:	2600      	movs	r6, #0
 804f58a:	f884 61a8 	strb.w	r6, [r4, #424]	; 0x1a8
    Nvm.MacGroup1.AdrAckCounter = 0;
 804f58e:	63a6      	str	r6, [r4, #56]	; 0x38
    MacCtx.ChannelsNbTransCounter = 0;
 804f590:	4d4c      	ldr	r5, [pc, #304]	; (804f6c4 <ResetMacParameters+0x144>)
 804f592:	f885 6418 	strb.w	r6, [r5, #1048]	; 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 804f596:	f885 6419 	strb.w	r6, [r5, #1049]	; 0x419
    Nvm.MacGroup2.MaxDCycle = 0;
 804f59a:	f884 6193 	strb.w	r6, [r4, #403]	; 0x193
    Nvm.MacGroup2.AggregatedDCycle = 1;
 804f59e:	f04f 0801 	mov.w	r8, #1
 804f5a2:	f8a4 8198 	strh.w	r8, [r4, #408]	; 0x198
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 804f5a6:	f994 30d4 	ldrsb.w	r3, [r4, #212]	; 0xd4
 804f5aa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 804f5ae:	f994 30d5 	ldrsb.w	r3, [r4, #213]	; 0xd5
 804f5b2:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 804f5b6:	f894 30b5 	ldrb.w	r3, [r4, #181]	; 0xb5
 804f5ba:	f884 3079 	strb.w	r3, [r4, #121]	; 0x79
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 804f5be:	f104 037c 	add.w	r3, r4, #124	; 0x7c
 804f5c2:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 804f5c6:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 804f5ca:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 804f5ce:	f104 0384 	add.w	r3, r4, #132	; 0x84
 804f5d2:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 804f5d6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 804f5da:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 804f5de:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
 804f5e2:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 804f5e6:	f894 30c9 	ldrb.w	r3, [r4, #201]	; 0xc9
 804f5ea:	f884 308d 	strb.w	r3, [r4, #141]	; 0x8d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 804f5ee:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 804f5f2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 804f5f6:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
 804f5fa:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    MacCtx.NodeAckRequested = false;
 804f5fe:	f885 641a 	strb.w	r6, [r5, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 804f602:	f884 604a 	strb.w	r6, [r4, #74]	; 0x4a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 804f606:	f884 6195 	strb.w	r6, [r4, #405]	; 0x195
    Nvm.MacGroup2.DownlinkReceived = false;
 804f60a:	f884 6196 	strb.w	r6, [r4, #406]	; 0x196
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 804f60e:	f88d 8008 	strb.w	r8, [sp, #8]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 804f612:	f504 73ee 	add.w	r3, r4, #476	; 0x1dc
 804f616:	9300      	str	r3, [sp, #0]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 804f618:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 804f61c:	9301      	str	r3, [sp, #4]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 804f61e:	4669      	mov	r1, sp
 804f620:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 804f624:	f004 fa28 	bl	8053a78 <RegionInitDefaults>
    MacCtx.Channel = 0;
 804f628:	f885 641b 	strb.w	r6, [r5, #1051]	; 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 804f62c:	f885 63d4 	strb.w	r6, [r5, #980]	; 0x3d4
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 804f630:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 804f632:	f8c5 33d8 	str.w	r3, [r5, #984]	; 0x3d8
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 804f636:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
 804f63a:	f885 33e4 	strb.w	r3, [r5, #996]	; 0x3e4
    MacCtx.RxWindow2Config.RxContinuous = false;
 804f63e:	f885 63e5 	strb.w	r6, [r5, #997]	; 0x3e5
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 804f642:	f885 83e6 	strb.w	r8, [r5, #998]	; 0x3e6
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 804f646:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
 804f64a:	f885 33e7 	strb.w	r3, [r5, #999]	; 0x3e7
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 804f64e:	f505 747a 	add.w	r4, r5, #1000	; 0x3e8
 804f652:	f505 7775 	add.w	r7, r5, #980	; 0x3d4
 804f656:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 804f658:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 804f65a:	683b      	ldr	r3, [r7, #0]
 804f65c:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 804f65e:	f885 83f9 	strb.w	r8, [r5, #1017]	; 0x3f9
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 804f662:	2302      	movs	r3, #2
 804f664:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    classBCallbacks.GetTemperatureLevel = NULL;
 804f668:	960c      	str	r6, [sp, #48]	; 0x30
    classBCallbacks.MacProcessNotify = NULL;
 804f66a:	960d      	str	r6, [sp, #52]	; 0x34
    if( MacCtx.MacCallbacks != NULL )
 804f66c:	f8d5 3348 	ldr.w	r3, [r5, #840]	; 0x348
 804f670:	b11b      	cbz	r3, 804f67a <ResetMacParameters+0xfa>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 804f672:	685a      	ldr	r2, [r3, #4]
 804f674:	920c      	str	r2, [sp, #48]	; 0x30
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 804f676:	68db      	ldr	r3, [r3, #12]
 804f678:	930d      	str	r3, [sp, #52]	; 0x34
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 804f67a:	4b12      	ldr	r3, [pc, #72]	; (804f6c4 <ResetMacParameters+0x144>)
 804f67c:	f203 426c 	addw	r2, r3, #1132	; 0x46c
 804f680:	9203      	str	r2, [sp, #12]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 804f682:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 804f686:	9204      	str	r2, [sp, #16]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 804f688:	f503 628b 	add.w	r2, r3, #1112	; 0x458
 804f68c:	9205      	str	r2, [sp, #20]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 804f68e:	f203 438d 	addw	r3, r3, #1165	; 0x48d
 804f692:	9306      	str	r3, [sp, #24]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 804f694:	4a0a      	ldr	r2, [pc, #40]	; (804f6c0 <ResetMacParameters+0x140>)
 804f696:	f102 03dc 	add.w	r3, r2, #220	; 0xdc
 804f69a:	9307      	str	r3, [sp, #28]
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 804f69c:	f102 0358 	add.w	r3, r2, #88	; 0x58
 804f6a0:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 804f6a2:	f102 035c 	add.w	r3, r2, #92	; 0x5c
 804f6a6:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 804f6a8:	f102 03e0 	add.w	r3, r2, #224	; 0xe0
 804f6ac:	930a      	str	r3, [sp, #40]	; 0x28
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 804f6ae:	f502 7230 	add.w	r2, r2, #704	; 0x2c0
 804f6b2:	a90c      	add	r1, sp, #48	; 0x30
 804f6b4:	a803      	add	r0, sp, #12
 804f6b6:	f002 fe70 	bl	805239a <LoRaMacClassBInit>
}
 804f6ba:	b00e      	add	sp, #56	; 0x38
 804f6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804f6c0:	20019b68 	.word	0x20019b68
 804f6c4:	200195e4 	.word	0x200195e4

0804f6c8 <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 804f6c8:	4b07      	ldr	r3, [pc, #28]	; (804f6e8 <LoRaMacIsBusy+0x20>)
 804f6ca:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 804f6ce:	b933      	cbnz	r3, 804f6de <LoRaMacIsBusy+0x16>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 804f6d0:	4b05      	ldr	r3, [pc, #20]	; (804f6e8 <LoRaMacIsBusy+0x20>)
 804f6d2:	f893 348e 	ldrb.w	r3, [r3, #1166]	; 0x48e
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 804f6d6:	2b01      	cmp	r3, #1
 804f6d8:	d003      	beq.n	804f6e2 <LoRaMacIsBusy+0x1a>
    return true;
 804f6da:	2001      	movs	r0, #1
 804f6dc:	4770      	bx	lr
 804f6de:	2001      	movs	r0, #1
 804f6e0:	4770      	bx	lr
        return false;
 804f6e2:	2000      	movs	r0, #0
}
 804f6e4:	4770      	bx	lr
 804f6e6:	bf00      	nop
 804f6e8:	200195e4 	.word	0x200195e4

0804f6ec <PrepareFrame>:
{
 804f6ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 804f6f0:	b083      	sub	sp, #12
 804f6f2:	4605      	mov	r5, r0
 804f6f4:	460e      	mov	r6, r1
 804f6f6:	4617      	mov	r7, r2
 804f6f8:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 804f6fc:	4959      	ldr	r1, [pc, #356]	; (804f864 <PrepareFrame+0x178>)
 804f6fe:	2200      	movs	r2, #0
 804f700:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 804f702:	f881 241a 	strb.w	r2, [r1, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 804f706:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 804f708:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 804f70a:	4698      	mov	r8, r3
 804f70c:	b1cb      	cbz	r3, 804f742 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 804f70e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 804f864 <PrepareFrame+0x178>
 804f712:	4622      	mov	r2, r4
 804f714:	4641      	mov	r1, r8
 804f716:	f509 709c 	add.w	r0, r9, #312	; 0x138
 804f71a:	f005 fbc8 	bl	8054eae <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 804f71e:	b2e0      	uxtb	r0, r4
 804f720:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 804f724:	782b      	ldrb	r3, [r5, #0]
 804f726:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 804f72a:	782b      	ldrb	r3, [r5, #0]
 804f72c:	095b      	lsrs	r3, r3, #5
 804f72e:	2b04      	cmp	r3, #4
 804f730:	d009      	beq.n	804f746 <PrepareFrame+0x5a>
 804f732:	2b07      	cmp	r3, #7
 804f734:	d078      	beq.n	804f828 <PrepareFrame+0x13c>
 804f736:	2b02      	cmp	r3, #2
 804f738:	d009      	beq.n	804f74e <PrepareFrame+0x62>
 804f73a:	2002      	movs	r0, #2
}
 804f73c:	b003      	add	sp, #12
 804f73e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 804f742:	4614      	mov	r4, r2
 804f744:	e7e3      	b.n	804f70e <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 804f746:	4b47      	ldr	r3, [pc, #284]	; (804f864 <PrepareFrame+0x178>)
 804f748:	2201      	movs	r2, #1
 804f74a:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 804f74e:	4b45      	ldr	r3, [pc, #276]	; (804f864 <PrepareFrame+0x178>)
 804f750:	2204      	movs	r2, #4
 804f752:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 804f756:	1c9a      	adds	r2, r3, #2
 804f758:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 804f75c:	22ff      	movs	r2, #255	; 0xff
 804f75e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 804f762:	782a      	ldrb	r2, [r5, #0]
 804f764:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 804f768:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 804f76c:	4a3e      	ldr	r2, [pc, #248]	; (804f868 <PrepareFrame+0x17c>)
 804f76e:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 804f772:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 804f776:	7832      	ldrb	r2, [r6, #0]
 804f778:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 804f77c:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 804f780:	f503 729c 	add.w	r2, r3, #312	; 0x138
 804f784:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 804f788:	a801      	add	r0, sp, #4
 804f78a:	f003 fc29 	bl	8052fe0 <LoRaMacCryptoGetFCntUp>
 804f78e:	2800      	cmp	r0, #0
 804f790:	d15b      	bne.n	804f84a <PrepareFrame+0x15e>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 804f792:	9a01      	ldr	r2, [sp, #4]
 804f794:	4b33      	ldr	r3, [pc, #204]	; (804f864 <PrepareFrame+0x178>)
 804f796:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 804f79a:	2100      	movs	r1, #0
 804f79c:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
            MacCtx.McpsConfirm.AckReceived = false;
 804f7a0:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 804f7a4:	f8c3 2450 	str.w	r2, [r3, #1104]	; 0x450
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 804f7a8:	4668      	mov	r0, sp
 804f7aa:	f002 ff3f 	bl	805262c <LoRaMacCommandsGetSizeSerializedCmds>
 804f7ae:	2800      	cmp	r0, #0
 804f7b0:	d14d      	bne.n	804f84e <PrepareFrame+0x162>
            if( macCmdsSize > 0 )
 804f7b2:	9b00      	ldr	r3, [sp, #0]
 804f7b4:	2b00      	cmp	r3, #0
 804f7b6:	d0c1      	beq.n	804f73c <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 804f7b8:	4b2b      	ldr	r3, [pc, #172]	; (804f868 <PrepareFrame+0x17c>)
 804f7ba:	f993 0049 	ldrsb.w	r0, [r3, #73]	; 0x49
 804f7be:	f7ff f8b5 	bl	804e92c <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 804f7c2:	4b28      	ldr	r3, [pc, #160]	; (804f864 <PrepareFrame+0x178>)
 804f7c4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 804f7c8:	b113      	cbz	r3, 804f7d0 <PrepareFrame+0xe4>
 804f7ca:	9a00      	ldr	r2, [sp, #0]
 804f7cc:	2a0f      	cmp	r2, #15
 804f7ce:	d915      	bls.n	804f7fc <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 804f7d0:	b113      	cbz	r3, 804f7d8 <PrepareFrame+0xec>
 804f7d2:	9b00      	ldr	r3, [sp, #0]
 804f7d4:	2b0f      	cmp	r3, #15
 804f7d6:	d820      	bhi.n	804f81a <PrepareFrame+0x12e>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 804f7d8:	4a24      	ldr	r2, [pc, #144]	; (804f86c <PrepareFrame+0x180>)
 804f7da:	4669      	mov	r1, sp
 804f7dc:	f002 ff32 	bl	8052644 <LoRaMacCommandsSerializeCmds>
 804f7e0:	2800      	cmp	r0, #0
 804f7e2:	d13a      	bne.n	804f85a <PrepareFrame+0x16e>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 804f7e4:	4b1f      	ldr	r3, [pc, #124]	; (804f864 <PrepareFrame+0x178>)
 804f7e6:	2200      	movs	r2, #0
 804f7e8:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 804f7ec:	f203 5204 	addw	r2, r3, #1284	; 0x504
 804f7f0:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 804f7f4:	9a00      	ldr	r2, [sp, #0]
 804f7f6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 804f7fa:	e79f      	b.n	804f73c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 804f7fc:	4a1c      	ldr	r2, [pc, #112]	; (804f870 <PrepareFrame+0x184>)
 804f7fe:	4669      	mov	r1, sp
 804f800:	200f      	movs	r0, #15
 804f802:	f002 ff1f 	bl	8052644 <LoRaMacCommandsSerializeCmds>
 804f806:	bb20      	cbnz	r0, 804f852 <PrepareFrame+0x166>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 804f808:	7833      	ldrb	r3, [r6, #0]
 804f80a:	9a00      	ldr	r2, [sp, #0]
 804f80c:	f362 0303 	bfi	r3, r2, #0, #4
 804f810:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 804f812:	4a14      	ldr	r2, [pc, #80]	; (804f864 <PrepareFrame+0x178>)
 804f814:	f882 3114 	strb.w	r3, [r2, #276]	; 0x114
 804f818:	e790      	b.n	804f73c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 804f81a:	4a14      	ldr	r2, [pc, #80]	; (804f86c <PrepareFrame+0x180>)
 804f81c:	4669      	mov	r1, sp
 804f81e:	f002 ff11 	bl	8052644 <LoRaMacCommandsSerializeCmds>
 804f822:	b1c0      	cbz	r0, 804f856 <PrepareFrame+0x16a>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804f824:	2013      	movs	r0, #19
 804f826:	e789      	b.n	804f73c <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 804f828:	f1b8 0f00 	cmp.w	r8, #0
 804f82c:	d017      	beq.n	804f85e <PrepareFrame+0x172>
 804f82e:	2800      	cmp	r0, #0
 804f830:	d084      	beq.n	804f73c <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 804f832:	4c0c      	ldr	r4, [pc, #48]	; (804f864 <PrepareFrame+0x178>)
 804f834:	b282      	uxth	r2, r0
 804f836:	4641      	mov	r1, r8
 804f838:	1ce0      	adds	r0, r4, #3
 804f83a:	f005 fb38 	bl	8054eae <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 804f83e:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 804f842:	3301      	adds	r3, #1
 804f844:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 804f846:	2000      	movs	r0, #0
 804f848:	e778      	b.n	804f73c <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 804f84a:	2012      	movs	r0, #18
 804f84c:	e776      	b.n	804f73c <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804f84e:	2013      	movs	r0, #19
 804f850:	e774      	b.n	804f73c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804f852:	2013      	movs	r0, #19
 804f854:	e772      	b.n	804f73c <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 804f856:	200a      	movs	r0, #10
 804f858:	e770      	b.n	804f73c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804f85a:	2013      	movs	r0, #19
 804f85c:	e76e      	b.n	804f73c <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 804f85e:	2000      	movs	r0, #0
 804f860:	e76c      	b.n	804f73c <PrepareFrame+0x50>
 804f862:	bf00      	nop
 804f864:	200195e4 	.word	0x200195e4
 804f868:	20019b68 	.word	0x20019b68
 804f86c:	20019ae8 	.word	0x20019ae8
 804f870:	200196fc 	.word	0x200196fc

0804f874 <SendFrameOnChannel>:
{
 804f874:	b570      	push	{r4, r5, r6, lr}
 804f876:	b086      	sub	sp, #24
 804f878:	4606      	mov	r6, r0
    int8_t txPower = 0;
 804f87a:	2300      	movs	r3, #0
 804f87c:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 804f880:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 804f884:	4d34      	ldr	r5, [pc, #208]	; (804f958 <SendFrameOnChannel+0xe4>)
 804f886:	f995 3049 	ldrsb.w	r3, [r5, #73]	; 0x49
 804f88a:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 804f88e:	f995 3048 	ldrsb.w	r3, [r5, #72]	; 0x48
 804f892:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 804f896:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 804f89a:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 804f89c:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 804f8a0:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 804f8a2:	4c2e      	ldr	r4, [pc, #184]	; (804f95c <SendFrameOnChannel+0xe8>)
 804f8a4:	8823      	ldrh	r3, [r4, #0]
 804f8a6:	f8ad 3014 	strh.w	r3, [sp, #20]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 804f8aa:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 804f8ae:	f10d 0207 	add.w	r2, sp, #7
 804f8b2:	a902      	add	r1, sp, #8
 804f8b4:	f895 0058 	ldrb.w	r0, [r5, #88]	; 0x58
 804f8b8:	f004 f913 	bl	8053ae2 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 804f8bc:	2301      	movs	r3, #1
 804f8be:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 804f8c2:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
 804f8c6:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 804f8ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 804f8ce:	f884 3447 	strb.w	r3, [r4, #1095]	; 0x447
    MacCtx.McpsConfirm.Channel = channel;
 804f8d2:	f8c4 6454 	str.w	r6, [r4, #1108]	; 0x454
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 804f8d6:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 804f8da:	f8c4 344c 	str.w	r3, [r4, #1100]	; 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 804f8de:	f8c4 345c 	str.w	r3, [r4, #1116]	; 0x45c
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 804f8e2:	f002 fd6b 	bl	80523bc <LoRaMacClassBIsBeaconModeActive>
 804f8e6:	bb60      	cbnz	r0, 804f942 <SendFrameOnChannel+0xce>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 804f8e8:	4b1b      	ldr	r3, [pc, #108]	; (804f958 <SendFrameOnChannel+0xe4>)
 804f8ea:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 804f8ee:	2b01      	cmp	r3, #1
 804f8f0:	d02f      	beq.n	804f952 <SendFrameOnChannel+0xde>
    LoRaMacClassBHaltBeaconing( );
 804f8f2:	f002 fd66 	bl	80523c2 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 804f8f6:	4b18      	ldr	r3, [pc, #96]	; (804f958 <SendFrameOnChannel+0xe4>)
 804f8f8:	f993 0049 	ldrsb.w	r0, [r3, #73]	; 0x49
 804f8fc:	4b17      	ldr	r3, [pc, #92]	; (804f95c <SendFrameOnChannel+0xe8>)
 804f8fe:	f893 141b 	ldrb.w	r1, [r3, #1051]	; 0x41b
 804f902:	b2c0      	uxtb	r0, r0
 804f904:	f7ff fda0 	bl	804f448 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 804f908:	4604      	mov	r4, r0
 804f90a:	b9b8      	cbnz	r0, 804f93c <SendFrameOnChannel+0xc8>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 804f90c:	4813      	ldr	r0, [pc, #76]	; (804f95c <SendFrameOnChannel+0xe8>)
 804f90e:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 804f912:	f043 0302 	orr.w	r3, r3, #2
 804f916:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 804f91a:	f890 3418 	ldrb.w	r3, [r0, #1048]	; 0x418
 804f91e:	3301      	adds	r3, #1
 804f920:	b2db      	uxtb	r3, r3
 804f922:	f880 3418 	strb.w	r3, [r0, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 804f926:	f880 3449 	strb.w	r3, [r0, #1097]	; 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 804f92a:	2300      	movs	r3, #0
 804f92c:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 804f930:	4b0b      	ldr	r3, [pc, #44]	; (804f960 <SendFrameOnChannel+0xec>)
 804f932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804f934:	f830 1b02 	ldrh.w	r1, [r0], #2
 804f938:	b2c9      	uxtb	r1, r1
 804f93a:	4798      	blx	r3
}
 804f93c:	4620      	mov	r0, r4
 804f93e:	b006      	add	sp, #24
 804f940:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 804f942:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 804f946:	f002 fd4b 	bl	80523e0 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 804f94a:	2800      	cmp	r0, #0
 804f94c:	d0cc      	beq.n	804f8e8 <SendFrameOnChannel+0x74>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 804f94e:	2410      	movs	r4, #16
 804f950:	e7f4      	b.n	804f93c <SendFrameOnChannel+0xc8>
        LoRaMacClassBStopRxSlots( );
 804f952:	f002 fd47 	bl	80523e4 <LoRaMacClassBStopRxSlots>
 804f956:	e7cc      	b.n	804f8f2 <SendFrameOnChannel+0x7e>
 804f958:	20019b68 	.word	0x20019b68
 804f95c:	200195e4 	.word	0x200195e4
 804f960:	08059d2c 	.word	0x08059d2c

0804f964 <ScheduleTx>:
{
 804f964:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804f968:	b08c      	sub	sp, #48	; 0x30
 804f96a:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 804f96c:	f7ff f994 	bl	804ec98 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 804f970:	4604      	mov	r4, r0
 804f972:	b118      	cbz	r0, 804f97c <ScheduleTx+0x18>
}
 804f974:	4620      	mov	r0, r4
 804f976:	b00c      	add	sp, #48	; 0x30
 804f978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 804f97c:	f7fe ff40 	bl	804e800 <CalculateBackOff>
    status = SerializeTxFrame( );
 804f980:	f7ff fa4e 	bl	804ee20 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 804f984:	4604      	mov	r4, r0
 804f986:	2800      	cmp	r0, #0
 804f988:	d1f4      	bne.n	804f974 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 804f98a:	4e36      	ldr	r6, [pc, #216]	; (804fa64 <ScheduleTx+0x100>)
 804f98c:	6c33      	ldr	r3, [r6, #64]	; 0x40
 804f98e:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 804f990:	f996 3049 	ldrsb.w	r3, [r6, #73]	; 0x49
 804f994:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 804f998:	f896 3194 	ldrb.w	r3, [r6, #404]	; 0x194
 804f99c:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 804f9a0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 804f9a4:	4640      	mov	r0, r8
 804f9a6:	f7f3 fa29 	bl	8042dfc <SysTimeGetMcuTime>
 804f9aa:	af02      	add	r7, sp, #8
 804f9ac:	f8d6 31a0 	ldr.w	r3, [r6, #416]	; 0x1a0
 804f9b0:	9300      	str	r3, [sp, #0]
 804f9b2:	f8d6 319c 	ldr.w	r3, [r6, #412]	; 0x19c
 804f9b6:	e898 0006 	ldmia.w	r8, {r1, r2}
 804f9ba:	4638      	mov	r0, r7
 804f9bc:	f7f3 f9c5 	bl	8042d4a <SysTimeSub>
 804f9c0:	ab07      	add	r3, sp, #28
 804f9c2:	e897 0003 	ldmia.w	r7, {r0, r1}
 804f9c6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 804f9ca:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 804f9cc:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 804f9ce:	2300      	movs	r3, #0
 804f9d0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 804f9d4:	2301      	movs	r3, #1
 804f9d6:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 804f9da:	4b23      	ldr	r3, [pc, #140]	; (804fa68 <ScheduleTx+0x104>)
 804f9dc:	881b      	ldrh	r3, [r3, #0]
 804f9de:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 804f9e2:	f896 31a8 	ldrb.w	r3, [r6, #424]	; 0x1a8
 804f9e6:	b92b      	cbnz	r3, 804f9f4 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 804f9e8:	2301      	movs	r3, #1
 804f9ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 804f9ee:	2300      	movs	r3, #0
 804f9f0:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 804f9f4:	4a1c      	ldr	r2, [pc, #112]	; (804fa68 <ScheduleTx+0x104>)
 804f9f6:	481b      	ldr	r0, [pc, #108]	; (804fa64 <ScheduleTx+0x100>)
 804f9f8:	f100 0340 	add.w	r3, r0, #64	; 0x40
 804f9fc:	9300      	str	r3, [sp, #0]
 804f9fe:	f202 43fc 	addw	r3, r2, #1276	; 0x4fc
 804fa02:	f202 421b 	addw	r2, r2, #1051	; 0x41b
 804fa06:	a904      	add	r1, sp, #16
 804fa08:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
 804fa0c:	f004 f8ae 	bl	8053b6c <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 804fa10:	b1b0      	cbz	r0, 804fa40 <ScheduleTx+0xdc>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 804fa12:	280b      	cmp	r0, #11
 804fa14:	d122      	bne.n	804fa5c <ScheduleTx+0xf8>
 804fa16:	b31d      	cbz	r5, 804fa60 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 804fa18:	4b13      	ldr	r3, [pc, #76]	; (804fa68 <ScheduleTx+0x104>)
 804fa1a:	f8d3 14fc 	ldr.w	r1, [r3, #1276]	; 0x4fc
 804fa1e:	2900      	cmp	r1, #0
 804fa20:	d0a8      	beq.n	804f974 <ScheduleTx+0x10>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 804fa22:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 804fa26:	f042 0220 	orr.w	r2, r2, #32
 804fa2a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 804fa2e:	f503 755c 	add.w	r5, r3, #880	; 0x370
 804fa32:	4628      	mov	r0, r5
 804fa34:	f7f3 fbd0 	bl	80431d8 <TimerSetValue>
                TimerStart( &MacCtx.TxDelayedTimer );
 804fa38:	4628      	mov	r0, r5
 804fa3a:	f7f3 fb1d 	bl	8043078 <TimerStart>
            return LORAMAC_STATUS_OK;
 804fa3e:	e799      	b.n	804f974 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 804fa40:	f7ff fa12 	bl	804ee68 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 804fa44:	f7ff fa52 	bl	804eeec <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 804fa48:	4604      	mov	r4, r0
 804fa4a:	2800      	cmp	r0, #0
 804fa4c:	d192      	bne.n	804f974 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 804fa4e:	4b06      	ldr	r3, [pc, #24]	; (804fa68 <ScheduleTx+0x104>)
 804fa50:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 804fa54:	f7ff ff0e 	bl	804f874 <SendFrameOnChannel>
 804fa58:	4604      	mov	r4, r0
 804fa5a:	e78b      	b.n	804f974 <ScheduleTx+0x10>
            return status;
 804fa5c:	4604      	mov	r4, r0
 804fa5e:	e789      	b.n	804f974 <ScheduleTx+0x10>
 804fa60:	4604      	mov	r4, r0
 804fa62:	e787      	b.n	804f974 <ScheduleTx+0x10>
 804fa64:	20019b68 	.word	0x20019b68
 804fa68:	200195e4 	.word	0x200195e4

0804fa6c <OnTxDelayedTimerEvent>:
{
 804fa6c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 804fa6e:	4c16      	ldr	r4, [pc, #88]	; (804fac8 <OnTxDelayedTimerEvent+0x5c>)
 804fa70:	f504 705c 	add.w	r0, r4, #880	; 0x370
 804fa74:	f7f3 fb74 	bl	8043160 <TimerStop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 804fa78:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 804fa7c:	f023 0320 	bic.w	r3, r3, #32
 804fa80:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( MacCtx.ResponseTimeoutStartTime != 0 )
 804fa84:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
 804fa88:	b120      	cbz	r0, 804fa94 <OnTxDelayedTimerEvent+0x28>
        TimerTime_t elapsedTime = TimerGetElapsedTime( MacCtx.ResponseTimeoutStartTime );
 804fa8a:	f7f3 fbbc 	bl	8043206 <TimerGetElapsedTime>
        if( elapsedTime > REGION_COMMON_CLASS_B_C_RESP_TIMEOUT )
 804fa8e:	f5b0 5ffa 	cmp.w	r0, #8000	; 0x1f40
 804fa92:	d805      	bhi.n	804faa0 <OnTxDelayedTimerEvent+0x34>
    switch( ScheduleTx( true ) )
 804fa94:	2001      	movs	r0, #1
 804fa96:	f7ff ff65 	bl	804f964 <ScheduleTx>
 804fa9a:	b108      	cbz	r0, 804faa0 <OnTxDelayedTimerEvent+0x34>
 804fa9c:	280b      	cmp	r0, #11
 804fa9e:	d100      	bne.n	804faa2 <OnTxDelayedTimerEvent+0x36>
}
 804faa0:	bd10      	pop	{r4, pc}
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 804faa2:	4b0a      	ldr	r3, [pc, #40]	; (804facc <OnTxDelayedTimerEvent+0x60>)
 804faa4:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 804faa8:	4b07      	ldr	r3, [pc, #28]	; (804fac8 <OnTxDelayedTimerEvent+0x5c>)
 804faaa:	f883 2446 	strb.w	r2, [r3, #1094]	; 0x446
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 804faae:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 804fab2:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 804fab6:	2009      	movs	r0, #9
 804fab8:	f883 0445 	strb.w	r0, [r3, #1093]	; 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 804fabc:	f002 feee 	bl	805289c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 804fac0:	f7ff f86a 	bl	804eb98 <StopRetransmission>
            break;
 804fac4:	e7ec      	b.n	804faa0 <OnTxDelayedTimerEvent+0x34>
 804fac6:	bf00      	nop
 804fac8:	200195e4 	.word	0x200195e4
 804facc:	20019b68 	.word	0x20019b68

0804fad0 <Send>:
{
 804fad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804fad4:	b08a      	sub	sp, #40	; 0x28
 804fad6:	4617      	mov	r7, r2
 804fad8:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 804fada:	4c48      	ldr	r4, [pc, #288]	; (804fbfc <Send+0x12c>)
 804fadc:	f994 a049 	ldrsb.w	sl, [r4, #73]	; 0x49
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 804fae0:	f994 9048 	ldrsb.w	r9, [r4, #72]	; 0x48
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 804fae4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 804fae6:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 804fae8:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
 804faec:	2b00      	cmp	r3, #0
 804faee:	f000 8083 	beq.w	804fbf8 <Send+0x128>
 804faf2:	4605      	mov	r5, r0
 804faf4:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 804faf6:	f894 3193 	ldrb.w	r3, [r4, #403]	; 0x193
 804fafa:	b90b      	cbnz	r3, 804fb00 <Send+0x30>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 804fafc:	2100      	movs	r1, #0
 804fafe:	6421      	str	r1, [r4, #64]	; 0x40
    fCtrl.Value = 0;
 804fb00:	2100      	movs	r1, #0
    fCtrl.Bits.FOptsLen      = 0;
 804fb02:	460b      	mov	r3, r1
 804fb04:	f361 0303 	bfi	r3, r1, #0, #4
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 804fb08:	483c      	ldr	r0, [pc, #240]	; (804fbfc <Send+0x12c>)
 804fb0a:	f890 1192 	ldrb.w	r1, [r0, #402]	; 0x192
 804fb0e:	f361 13c7 	bfi	r3, r1, #7, #1
 804fb12:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 804fb16:	f890 3190 	ldrb.w	r3, [r0, #400]	; 0x190
 804fb1a:	2b01      	cmp	r3, #1
 804fb1c:	d059      	beq.n	804fbd2 <Send+0x102>
        fCtrl.Bits.FPending      = 0;
 804fb1e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 804fb22:	f36f 1304 	bfc	r3, #4, #1
 804fb26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup1.SrvAckRequested == true )
 804fb2a:	4b34      	ldr	r3, [pc, #208]	; (804fbfc <Send+0x12c>)
 804fb2c:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 804fb30:	b12b      	cbz	r3, 804fb3e <Send+0x6e>
        fCtrl.Bits.Ack = 1;
 804fb32:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 804fb36:	f043 0320 	orr.w	r3, r3, #32
 804fb3a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 804fb3e:	2301      	movs	r3, #1
 804fb40:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 804fb44:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 804fb48:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 804fb4a:	4b2d      	ldr	r3, [pc, #180]	; (804fc00 <Send+0x130>)
 804fb4c:	f8b3 23fc 	ldrh.w	r2, [r3, #1020]	; 0x3fc
 804fb50:	f8ad 2014 	strh.w	r2, [sp, #20]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 804fb54:	f8b3 33fe 	ldrh.w	r3, [r3, #1022]	; 0x3fe
 804fb58:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 804fb5c:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 804fb60:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 804fb64:	4925      	ldr	r1, [pc, #148]	; (804fbfc <Send+0x12c>)
 804fb66:	f891 3078 	ldrb.w	r3, [r1, #120]	; 0x78
 804fb6a:	f88d 301a 	strb.w	r3, [sp, #26]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 804fb6e:	f891 308c 	ldrb.w	r3, [r1, #140]	; 0x8c
 804fb72:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 804fb76:	f891 3058 	ldrb.w	r3, [r1, #88]	; 0x58
 804fb7a:	f88d 301c 	strb.w	r3, [sp, #28]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 804fb7e:	ab08      	add	r3, sp, #32
 804fb80:	9300      	str	r3, [sp, #0]
 804fb82:	f101 0378 	add.w	r3, r1, #120	; 0x78
 804fb86:	f101 0248 	add.w	r2, r1, #72	; 0x48
 804fb8a:	3149      	adds	r1, #73	; 0x49
 804fb8c:	a803      	add	r0, sp, #12
 804fb8e:	f002 fb8d 	bl	80522ac <LoRaMacAdrCalcNext>
 804fb92:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 804fb96:	f360 1386 	bfi	r3, r0, #6, #1
 804fb9a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 804fb9e:	f8cd 8000 	str.w	r8, [sp]
 804fba2:	463b      	mov	r3, r7
 804fba4:	4632      	mov	r2, r6
 804fba6:	a909      	add	r1, sp, #36	; 0x24
 804fba8:	4628      	mov	r0, r5
 804fbaa:	f7ff fd9f 	bl	804f6ec <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 804fbae:	4604      	mov	r4, r0
 804fbb0:	b108      	cbz	r0, 804fbb6 <Send+0xe6>
 804fbb2:	280a      	cmp	r0, #10
 804fbb4:	d103      	bne.n	804fbbe <Send+0xee>
        status = ScheduleTx( false );
 804fbb6:	2000      	movs	r0, #0
 804fbb8:	f7ff fed4 	bl	804f964 <ScheduleTx>
 804fbbc:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 804fbbe:	b17c      	cbz	r4, 804fbe0 <Send+0x110>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 804fbc0:	4b0e      	ldr	r3, [pc, #56]	; (804fbfc <Send+0x12c>)
 804fbc2:	f883 a049 	strb.w	sl, [r3, #73]	; 0x49
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 804fbc6:	f883 9048 	strb.w	r9, [r3, #72]	; 0x48
}
 804fbca:	4620      	mov	r0, r4
 804fbcc:	b00a      	add	sp, #40	; 0x28
 804fbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 804fbd2:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 804fbd6:	f043 0310 	orr.w	r3, r3, #16
 804fbda:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 804fbde:	e7a4      	b.n	804fb2a <Send+0x5a>
        Nvm.MacGroup1.SrvAckRequested = false;
 804fbe0:	4b06      	ldr	r3, [pc, #24]	; (804fbfc <Send+0x12c>)
 804fbe2:	2200      	movs	r2, #0
 804fbe4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 804fbe8:	9a08      	ldr	r2, [sp, #32]
 804fbea:	639a      	str	r2, [r3, #56]	; 0x38
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 804fbec:	f002 fcf2 	bl	80525d4 <LoRaMacCommandsRemoveNoneStickyCmds>
 804fbf0:	2800      	cmp	r0, #0
 804fbf2:	d0ea      	beq.n	804fbca <Send+0xfa>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 804fbf4:	2413      	movs	r4, #19
 804fbf6:	e7e8      	b.n	804fbca <Send+0xfa>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 804fbf8:	2407      	movs	r4, #7
 804fbfa:	e7e6      	b.n	804fbca <Send+0xfa>
 804fbfc:	20019b68 	.word	0x20019b68
 804fc00:	200195e4 	.word	0x200195e4

0804fc04 <SendReJoinReq>:
{
 804fc04:	b570      	push	{r4, r5, r6, lr}
    macHdr.Value = 0;
 804fc06:	f04f 0500 	mov.w	r5, #0
    switch( joinReqType )
 804fc0a:	2802      	cmp	r0, #2
 804fc0c:	d05c      	beq.n	804fcc8 <SendReJoinReq+0xc4>
 804fc0e:	d832      	bhi.n	804fc76 <SendReJoinReq+0x72>
 804fc10:	2800      	cmp	r0, #0
 804fc12:	d059      	beq.n	804fcc8 <SendReJoinReq+0xc4>
 804fc14:	2801      	cmp	r0, #1
 804fc16:	d12c      	bne.n	804fc72 <SendReJoinReq+0x6e>
            Nvm.MacGroup2.IsRejoinRequestPending = true;
 804fc18:	2301      	movs	r3, #1
 804fc1a:	4a49      	ldr	r2, [pc, #292]	; (804fd40 <SendReJoinReq+0x13c>)
 804fc1c:	f882 31bc 	strb.w	r3, [r2, #444]	; 0x1bc
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_1;
 804fc20:	4c48      	ldr	r4, [pc, #288]	; (804fd44 <SendReJoinReq+0x140>)
 804fc22:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.ReJoin1.Buffer = MacCtx.PktBuffer;
 804fc26:	1ca2      	adds	r2, r4, #2
 804fc28:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.ReJoin1.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 804fc2c:	22ff      	movs	r2, #255	; 0xff
 804fc2e:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
            macHdr.Bits.MType = FRAME_TYPE_REJOIN;
 804fc32:	2206      	movs	r2, #6
 804fc34:	f362 1547 	bfi	r5, r2, #5, #3
            MacCtx.TxMsg.Message.ReJoin1.MHDR.Value = macHdr.Value;
 804fc38:	f884 510d 	strb.w	r5, [r4, #269]	; 0x10d
            MacCtx.TxMsg.Message.ReJoin1.ReJoinType = 1;
 804fc3c:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 804fc40:	f7f4 f87c 	bl	8043d3c <SecureElementGetJoinEui>
 804fc44:	4601      	mov	r1, r0
 804fc46:	2208      	movs	r2, #8
 804fc48:	f204 100f 	addw	r0, r4, #271	; 0x10f
 804fc4c:	f005 f92f 	bl	8054eae <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.ReJoin1.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 804fc50:	f7f4 f85e 	bl	8043d10 <SecureElementGetDevEui>
 804fc54:	4601      	mov	r1, r0
 804fc56:	2208      	movs	r2, #8
 804fc58:	f204 1017 	addw	r0, r4, #279	; 0x117
 804fc5c:	f005 f927 	bl	8054eae <memcpy1>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetRJcount( RJ_COUNT_1, &MacCtx.TxMsg.Message.ReJoin1.RJcount1 ) )
 804fc60:	f504 7190 	add.w	r1, r4, #288	; 0x120
 804fc64:	2009      	movs	r0, #9
 804fc66:	f003 f9ed 	bl	8053044 <LoRaMacCryptoGetRJcount>
 804fc6a:	2800      	cmp	r0, #0
 804fc6c:	d163      	bne.n	804fd36 <SendReJoinReq+0x132>
    bool allowDelayedTx = true;
 804fc6e:	2001      	movs	r0, #1
 804fc70:	e027      	b.n	804fcc2 <SendReJoinReq+0xbe>
    switch( joinReqType )
 804fc72:	2001      	movs	r0, #1
 804fc74:	e025      	b.n	804fcc2 <SendReJoinReq+0xbe>
 804fc76:	28ff      	cmp	r0, #255	; 0xff
 804fc78:	d122      	bne.n	804fcc0 <SendReJoinReq+0xbc>
            SwitchClass( CLASS_A );
 804fc7a:	2000      	movs	r0, #0
 804fc7c:	f7ff fb4e 	bl	804f31c <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 804fc80:	4e30      	ldr	r6, [pc, #192]	; (804fd44 <SendReJoinReq+0x140>)
 804fc82:	2400      	movs	r4, #0
 804fc84:	f886 4104 	strb.w	r4, [r6, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 804fc88:	1cb3      	adds	r3, r6, #2
 804fc8a:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 804fc8e:	23ff      	movs	r3, #255	; 0xff
 804fc90:	f886 310c 	strb.w	r3, [r6, #268]	; 0x10c
            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 804fc94:	f364 1547 	bfi	r5, r4, #5, #3
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 804fc98:	f886 510d 	strb.w	r5, [r6, #269]	; 0x10d
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 804fc9c:	f7f4 f84e 	bl	8043d3c <SecureElementGetJoinEui>
 804fca0:	4601      	mov	r1, r0
 804fca2:	2208      	movs	r2, #8
 804fca4:	f506 7087 	add.w	r0, r6, #270	; 0x10e
 804fca8:	f005 f901 	bl	8054eae <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 804fcac:	f7f4 f830 	bl	8043d10 <SecureElementGetDevEui>
 804fcb0:	4601      	mov	r1, r0
 804fcb2:	2208      	movs	r2, #8
 804fcb4:	f506 708b 	add.w	r0, r6, #278	; 0x116
 804fcb8:	f005 f8f9 	bl	8054eae <memcpy1>
            allowDelayedTx = false;
 804fcbc:	4620      	mov	r0, r4
            break;
 804fcbe:	e000      	b.n	804fcc2 <SendReJoinReq+0xbe>
    switch( joinReqType )
 804fcc0:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 804fcc2:	f7ff fe4f 	bl	804f964 <ScheduleTx>
}
 804fcc6:	bd70      	pop	{r4, r5, r6, pc}
            if( joinReqType == REJOIN_REQ_0 )
 804fcc8:	bb80      	cbnz	r0, 804fd2c <SendReJoinReq+0x128>
                MacCtx.TxMsg.Message.ReJoin0or2.ReJoinType = 0;
 804fcca:	4b1e      	ldr	r3, [pc, #120]	; (804fd44 <SendReJoinReq+0x140>)
 804fccc:	2200      	movs	r2, #0
 804fcce:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            Nvm.MacGroup2.IsRejoinRequestPending = true;
 804fcd2:	4b1b      	ldr	r3, [pc, #108]	; (804fd40 <SendReJoinReq+0x13c>)
 804fcd4:	2201      	movs	r2, #1
 804fcd6:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_RE_JOIN_0_2;
 804fcda:	4c1a      	ldr	r4, [pc, #104]	; (804fd44 <SendReJoinReq+0x140>)
 804fcdc:	2202      	movs	r2, #2
 804fcde:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
            MacCtx.TxMsg.Message.ReJoin0or2.Buffer = MacCtx.PktBuffer;
 804fce2:	18a2      	adds	r2, r4, r2
 804fce4:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
            MacCtx.TxMsg.Message.ReJoin0or2.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 804fce8:	22ff      	movs	r2, #255	; 0xff
 804fcea:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
            macHdr.Bits.MType = FRAME_TYPE_REJOIN;
 804fcee:	2206      	movs	r2, #6
 804fcf0:	f362 1547 	bfi	r5, r2, #5, #3
            MacCtx.TxMsg.Message.ReJoin0or2.MHDR.Value = macHdr.Value;
 804fcf4:	f884 510d 	strb.w	r5, [r4, #269]	; 0x10d
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[0] = Nvm.MacGroup2.NetID & 0xFF;
 804fcf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 804fcfc:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[1] = ( Nvm.MacGroup2.NetID >> 8 ) & 0xFF;
 804fd00:	0a1a      	lsrs	r2, r3, #8
 804fd02:	f884 2110 	strb.w	r2, [r4, #272]	; 0x110
            MacCtx.TxMsg.Message.ReJoin0or2.NetID[2] = ( Nvm.MacGroup2.NetID >> 16 ) & 0xFF;
 804fd06:	0c1b      	lsrs	r3, r3, #16
 804fd08:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
            memcpy1( MacCtx.TxMsg.Message.ReJoin0or2.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 804fd0c:	f7f4 f800 	bl	8043d10 <SecureElementGetDevEui>
 804fd10:	4601      	mov	r1, r0
 804fd12:	2208      	movs	r2, #8
 804fd14:	f504 7089 	add.w	r0, r4, #274	; 0x112
 804fd18:	f005 f8c9 	bl	8054eae <memcpy1>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetRJcount( RJ_COUNT_0, &MacCtx.TxMsg.Message.ReJoin0or2.RJcount0 ) )
 804fd1c:	f504 718d 	add.w	r1, r4, #282	; 0x11a
 804fd20:	2008      	movs	r0, #8
 804fd22:	f003 f98f 	bl	8053044 <LoRaMacCryptoGetRJcount>
 804fd26:	b940      	cbnz	r0, 804fd3a <SendReJoinReq+0x136>
    bool allowDelayedTx = true;
 804fd28:	2001      	movs	r0, #1
 804fd2a:	e7ca      	b.n	804fcc2 <SendReJoinReq+0xbe>
                MacCtx.TxMsg.Message.ReJoin0or2.ReJoinType = 2;
 804fd2c:	4b05      	ldr	r3, [pc, #20]	; (804fd44 <SendReJoinReq+0x140>)
 804fd2e:	2202      	movs	r2, #2
 804fd30:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 804fd34:	e7cd      	b.n	804fcd2 <SendReJoinReq+0xce>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 804fd36:	2011      	movs	r0, #17
 804fd38:	e7c5      	b.n	804fcc6 <SendReJoinReq+0xc2>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 804fd3a:	2011      	movs	r0, #17
 804fd3c:	e7c3      	b.n	804fcc6 <SendReJoinReq+0xc2>
 804fd3e:	bf00      	nop
 804fd40:	20019b68 	.word	0x20019b68
 804fd44:	200195e4 	.word	0x200195e4

0804fd48 <ProcessMacCommands>:
{
 804fd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804fd4c:	b091      	sub	sp, #68	; 0x44
 804fd4e:	4698      	mov	r8, r3
    uint8_t status = 0;
 804fd50:	2300      	movs	r3, #0
 804fd52:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 804fd56:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 804fd5a:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 804fd5e:	2b01      	cmp	r3, #1
 804fd60:	f200 8398 	bhi.w	8050494 <ProcessMacCommands+0x74c>
 804fd64:	4605      	mov	r5, r0
 804fd66:	460c      	mov	r4, r1
 804fd68:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 804fd6a:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 804fd6e:	42bc      	cmp	r4, r7
 804fd70:	f080 8390 	bcs.w	8050494 <ProcessMacCommands+0x74c>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 804fd74:	5d28      	ldrb	r0, [r5, r4]
 804fd76:	f002 fcad 	bl	80526d4 <LoRaMacCommandsGetCmdSize>
 804fd7a:	4420      	add	r0, r4
 804fd7c:	42b8      	cmp	r0, r7
 804fd7e:	f300 8389 	bgt.w	8050494 <ProcessMacCommands+0x74c>
        switch( payload[macIndex++] )
 804fd82:	1c66      	adds	r6, r4, #1
 804fd84:	b2f6      	uxtb	r6, r6
 804fd86:	5d29      	ldrb	r1, [r5, r4]
 804fd88:	3901      	subs	r1, #1
 804fd8a:	291f      	cmp	r1, #31
 804fd8c:	f200 8382 	bhi.w	8050494 <ProcessMacCommands+0x74c>
 804fd90:	e8df f011 	tbh	[pc, r1, lsl #1]
 804fd94:	00320020 	.word	0x00320020
 804fd98:	00cd0048 	.word	0x00cd0048
 804fd9c:	012600e0 	.word	0x012600e0
 804fda0:	0174013e 	.word	0x0174013e
 804fda4:	01f40192 	.word	0x01f40192
 804fda8:	022301e0 	.word	0x022301e0
 804fdac:	023802a9 	.word	0x023802a9
 804fdb0:	0302026d 	.word	0x0302026d
 804fdb4:	03460319 	.word	0x03460319
 804fdb8:	03800360 	.word	0x03800360
 804fdbc:	03800380 	.word	0x03800380
 804fdc0:	03800380 	.word	0x03800380
 804fdc4:	03800380 	.word	0x03800380
 804fdc8:	03800380 	.word	0x03800380
 804fdcc:	03800380 	.word	0x03800380
 804fdd0:	029c0380 	.word	0x029c0380
                uint8_t serverMinorVersion = payload[macIndex++];
 804fdd4:	3402      	adds	r4, #2
 804fdd6:	b2e4      	uxtb	r4, r4
 804fdd8:	5dab      	ldrb	r3, [r5, r6]
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
 804fdda:	4ab4      	ldr	r2, [pc, #720]	; (80500ac <ProcessMacCommands+0x364>)
 804fddc:	f892 21a6 	ldrb.w	r2, [r2, #422]	; 0x1a6
 804fde0:	429a      	cmp	r2, r3
 804fde2:	d3c4      	bcc.n	804fd6e <ProcessMacCommands+0x26>
                    if( LoRaMacCommandsGetCmd( MOTE_MAC_RESET_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
 804fde4:	a90c      	add	r1, sp, #48	; 0x30
 804fde6:	2001      	movs	r0, #1
 804fde8:	f002 fbe4 	bl	80525b4 <LoRaMacCommandsGetCmd>
 804fdec:	2800      	cmp	r0, #0
 804fdee:	d1be      	bne.n	804fd6e <ProcessMacCommands+0x26>
                        LoRaMacCommandsRemoveCmd( macCmd );
 804fdf0:	980c      	ldr	r0, [sp, #48]	; 0x30
 804fdf2:	f002 fbc1 	bl	8052578 <LoRaMacCommandsRemoveCmd>
 804fdf6:	e7ba      	b.n	804fd6e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 804fdf8:	2004      	movs	r0, #4
 804fdfa:	f002 fd6d 	bl	80528d8 <LoRaMacConfirmQueueIsCmdActive>
 804fdfe:	b908      	cbnz	r0, 804fe04 <ProcessMacCommands+0xbc>
        switch( payload[macIndex++] )
 804fe00:	4634      	mov	r4, r6
 804fe02:	e7b4      	b.n	804fd6e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 804fe04:	2104      	movs	r1, #4
 804fe06:	2000      	movs	r0, #0
 804fe08:	f002 fd1a 	bl	8052840 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 804fe0c:	1ca3      	adds	r3, r4, #2
 804fe0e:	b2db      	uxtb	r3, r3
 804fe10:	5da9      	ldrb	r1, [r5, r6]
 804fe12:	4aa7      	ldr	r2, [pc, #668]	; (80500b0 <ProcessMacCommands+0x368>)
 804fe14:	f882 1460 	strb.w	r1, [r2, #1120]	; 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 804fe18:	3403      	adds	r4, #3
 804fe1a:	b2e4      	uxtb	r4, r4
 804fe1c:	5ceb      	ldrb	r3, [r5, r3]
 804fe1e:	f882 3461 	strb.w	r3, [r2, #1121]	; 0x461
 804fe22:	e7a4      	b.n	804fd6e <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 804fe24:	2300      	movs	r3, #0
 804fe26:	f88d 300e 	strb.w	r3, [sp, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 804fe2a:	f88d 300f 	strb.w	r3, [sp, #15]
                uint8_t linkAdrNbRep = 0;
 804fe2e:	f88d 3010 	strb.w	r3, [sp, #16]
                uint8_t linkAdrNbBytesParsed = 0;
 804fe32:	f88d 3018 	strb.w	r3, [sp, #24]
                if( adrBlockFound == false )
 804fe36:	f1b9 0f00 	cmp.w	r9, #0
 804fe3a:	d036      	beq.n	804feaa <ProcessMacCommands+0x162>
                    macIndex += 4;
 804fe3c:	3405      	adds	r4, #5
 804fe3e:	b2e4      	uxtb	r4, r4
 804fe40:	e795      	b.n	804fd6e <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 804fe42:	2305      	movs	r3, #5
 804fe44:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 804fe48:	e050      	b.n	804feec <ProcessMacCommands+0x1a4>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 804fe4a:	4b98      	ldr	r3, [pc, #608]	; (80500ac <ProcessMacCommands+0x364>)
 804fe4c:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 804fe50:	f99d 200e 	ldrsb.w	r2, [sp, #14]
 804fe54:	4293      	cmp	r3, r2
 804fe56:	da03      	bge.n	804fe60 <ProcessMacCommands+0x118>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 804fe58:	4b94      	ldr	r3, [pc, #592]	; (80500ac <ProcessMacCommands+0x364>)
 804fe5a:	2101      	movs	r1, #1
 804fe5c:	f883 1195 	strb.w	r1, [r3, #405]	; 0x195
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 804fe60:	4b92      	ldr	r3, [pc, #584]	; (80500ac <ProcessMacCommands+0x364>)
 804fe62:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 804fe66:	f89d 200f 	ldrb.w	r2, [sp, #15]
 804fe6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 804fe6e:	f89d 2010 	ldrb.w	r2, [sp, #16]
 804fe72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
 804fe76:	e04d      	b.n	804ff14 <ProcessMacCommands+0x1cc>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 804fe78:	2201      	movs	r2, #1
 804fe7a:	f10d 0137 	add.w	r1, sp, #55	; 0x37
 804fe7e:	2003      	movs	r0, #3
 804fe80:	f002 fb50 	bl	8052524 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 804fe84:	3401      	adds	r4, #1
 804fe86:	b2e4      	uxtb	r4, r4
 804fe88:	f89d 2018 	ldrb.w	r2, [sp, #24]
 804fe8c:	4b89      	ldr	r3, [pc, #548]	; (80500b4 <ProcessMacCommands+0x36c>)
 804fe8e:	fba3 1302 	umull	r1, r3, r3, r2
 804fe92:	ebb4 0f93 	cmp.w	r4, r3, lsr #2
 804fe96:	d3ef      	bcc.n	804fe78 <ProcessMacCommands+0x130>
                        macIndex += linkAdrNbBytesParsed - 1;
 804fe98:	4416      	add	r6, r2
 804fe9a:	b2f6      	uxtb	r6, r6
 804fe9c:	1e74      	subs	r4, r6, #1
 804fe9e:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 804fea0:	42a7      	cmp	r7, r4
 804fea2:	d93a      	bls.n	804ff1a <ProcessMacCommands+0x1d2>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 804fea4:	5d2b      	ldrb	r3, [r5, r4]
 804fea6:	2b03      	cmp	r3, #3
 804fea8:	d136      	bne.n	804ff18 <ProcessMacCommands+0x1d0>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 804feaa:	1e73      	subs	r3, r6, #1
 804feac:	442b      	add	r3, r5
 804feae:	9309      	str	r3, [sp, #36]	; 0x24
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 804feb0:	4b7e      	ldr	r3, [pc, #504]	; (80500ac <ProcessMacCommands+0x364>)
 804feb2:	f893 2192 	ldrb.w	r2, [r3, #402]	; 0x192
 804feb6:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 804feba:	f893 108c 	ldrb.w	r1, [r3, #140]	; 0x8c
 804febe:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 804fec2:	f993 1049 	ldrsb.w	r1, [r3, #73]	; 0x49
 804fec6:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 804feca:	f993 1048 	ldrsb.w	r1, [r3, #72]	; 0x48
 804fece:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 804fed2:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
 804fed6:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 804feda:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 804fede:	9308      	str	r3, [sp, #32]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 804fee0:	2a00      	cmp	r2, #0
 804fee2:	d0ae      	beq.n	804fe42 <ProcessMacCommands+0xfa>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 804fee4:	1bbb      	subs	r3, r7, r6
 804fee6:	3301      	adds	r3, #1
 804fee8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 804feec:	ab06      	add	r3, sp, #24
 804feee:	9301      	str	r3, [sp, #4]
 804fef0:	ab04      	add	r3, sp, #16
 804fef2:	9300      	str	r3, [sp, #0]
 804fef4:	f10d 030f 	add.w	r3, sp, #15
 804fef8:	f10d 020e 	add.w	r2, sp, #14
 804fefc:	a908      	add	r1, sp, #32
 804fefe:	486b      	ldr	r0, [pc, #428]	; (80500ac <ProcessMacCommands+0x364>)
 804ff00:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
 804ff04:	f003 fdf8 	bl	8053af8 <RegionLinkAdrReq>
 804ff08:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
                        if( ( status & 0x07 ) == 0x07 )
 804ff0c:	f000 0007 	and.w	r0, r0, #7
 804ff10:	2807      	cmp	r0, #7
 804ff12:	d09a      	beq.n	804fe4a <ProcessMacCommands+0x102>
{
 804ff14:	2400      	movs	r4, #0
 804ff16:	e7b7      	b.n	804fe88 <ProcessMacCommands+0x140>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 804ff18:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 804ff1a:	42bc      	cmp	r4, r7
 804ff1c:	d204      	bcs.n	804ff28 <ProcessMacCommands+0x1e0>
                        macIndex--;
 804ff1e:	3c01      	subs	r4, #1
 804ff20:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 804ff22:	f04f 0901 	mov.w	r9, #1
 804ff26:	e722      	b.n	804fd6e <ProcessMacCommands+0x26>
 804ff28:	f04f 0901 	mov.w	r9, #1
                break;
 804ff2c:	e71f      	b.n	804fd6e <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 804ff2e:	3402      	adds	r4, #2
 804ff30:	b2e4      	uxtb	r4, r4
 804ff32:	5dab      	ldrb	r3, [r5, r6]
 804ff34:	f003 030f 	and.w	r3, r3, #15
 804ff38:	495c      	ldr	r1, [pc, #368]	; (80500ac <ProcessMacCommands+0x364>)
 804ff3a:	f881 3193 	strb.w	r3, [r1, #403]	; 0x193
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 804ff3e:	2201      	movs	r2, #1
 804ff40:	fa02 f303 	lsl.w	r3, r2, r3
 804ff44:	f8a1 3198 	strh.w	r3, [r1, #408]	; 0x198
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 804ff48:	2200      	movs	r2, #0
 804ff4a:	a90d      	add	r1, sp, #52	; 0x34
 804ff4c:	2004      	movs	r0, #4
 804ff4e:	f002 fae9 	bl	8052524 <LoRaMacCommandsAddCmd>
                break;
 804ff52:	e70c      	b.n	804fd6e <ProcessMacCommands+0x26>
                status = 0x07;
 804ff54:	2307      	movs	r3, #7
 804ff56:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 804ff5a:	5dab      	ldrb	r3, [r5, r6]
 804ff5c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 804ff60:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 804ff64:	57ab      	ldrsb	r3, [r5, r6]
 804ff66:	f003 030f 	and.w	r3, r3, #15
 804ff6a:	f88d 3020 	strb.w	r3, [sp, #32]
                macIndex++;
 804ff6e:	1ca3      	adds	r3, r4, #2
 804ff70:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 804ff72:	1ce1      	adds	r1, r4, #3
 804ff74:	b2c9      	uxtb	r1, r1
 804ff76:	5ceb      	ldrb	r3, [r5, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 804ff78:	1d22      	adds	r2, r4, #4
 804ff7a:	b2d2      	uxtb	r2, r2
 804ff7c:	5c69      	ldrb	r1, [r5, r1]
 804ff7e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 804ff82:	3405      	adds	r4, #5
 804ff84:	b2e4      	uxtb	r4, r4
 804ff86:	5caa      	ldrb	r2, [r5, r2]
 804ff88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                rxParamSetupReq.Frequency *= 100;
 804ff8c:	2264      	movs	r2, #100	; 0x64
 804ff8e:	fb02 f303 	mul.w	r3, r2, r3
 804ff92:	9309      	str	r3, [sp, #36]	; 0x24
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 804ff94:	a908      	add	r1, sp, #32
 804ff96:	4b45      	ldr	r3, [pc, #276]	; (80500ac <ProcessMacCommands+0x364>)
 804ff98:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 804ff9c:	f003 fdbc 	bl	8053b18 <RegionRxParamSetupReq>
 804ffa0:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
                if( ( status & 0x07 ) == 0x07 )
 804ffa4:	f000 0307 	and.w	r3, r0, #7
 804ffa8:	2b07      	cmp	r3, #7
 804ffaa:	d009      	beq.n	804ffc0 <ProcessMacCommands+0x278>
                macCmdPayload[0] = status;
 804ffac:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 804ffb0:	2201      	movs	r2, #1
 804ffb2:	a90d      	add	r1, sp, #52	; 0x34
 804ffb4:	2005      	movs	r0, #5
 804ffb6:	f002 fab5 	bl	8052524 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 804ffba:	f7fe fc17 	bl	804e7ec <SetMlmeScheduleUplinkIndication>
                break;
 804ffbe:	e6d6      	b.n	804fd6e <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 804ffc0:	f89d 2020 	ldrb.w	r2, [sp, #32]
 804ffc4:	4b39      	ldr	r3, [pc, #228]	; (80500ac <ProcessMacCommands+0x364>)
 804ffc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 804ffca:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 804ffce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804ffd0:	67da      	str	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 804ffd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 804ffd6:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
 804ffda:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
 804ffde:	e7e5      	b.n	804ffac <ProcessMacCommands+0x264>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 804ffe0:	4b33      	ldr	r3, [pc, #204]	; (80500b0 <ProcessMacCommands+0x368>)
 804ffe2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 804ffe6:	b17b      	cbz	r3, 8050008 <ProcessMacCommands+0x2c0>
 804ffe8:	681b      	ldr	r3, [r3, #0]
 804ffea:	b17b      	cbz	r3, 805000c <ProcessMacCommands+0x2c4>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 804ffec:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 804ffee:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 804fff2:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 804fff6:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 804fffa:	2202      	movs	r2, #2
 804fffc:	a90d      	add	r1, sp, #52	; 0x34
 804fffe:	2006      	movs	r0, #6
 8050000:	f002 fa90 	bl	8052524 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8050004:	4634      	mov	r4, r6
                break;
 8050006:	e6b2      	b.n	804fd6e <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8050008:	20ff      	movs	r0, #255	; 0xff
 805000a:	e7f0      	b.n	804ffee <ProcessMacCommands+0x2a6>
 805000c:	20ff      	movs	r0, #255	; 0xff
 805000e:	e7ee      	b.n	804ffee <ProcessMacCommands+0x2a6>
                status = 0x03;
 8050010:	2303      	movs	r3, #3
 8050012:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                newChannelReq.ChannelId = payload[macIndex++];
 8050016:	1ca3      	adds	r3, r4, #2
 8050018:	b2db      	uxtb	r3, r3
 805001a:	57aa      	ldrsb	r2, [r5, r6]
 805001c:	f88d 201c 	strb.w	r2, [sp, #28]
                newChannelReq.NewChannel = &chParam;
 8050020:	aa08      	add	r2, sp, #32
 8050022:	9206      	str	r2, [sp, #24]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8050024:	1ce2      	adds	r2, r4, #3
 8050026:	b2d2      	uxtb	r2, r2
 8050028:	5ceb      	ldrb	r3, [r5, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 805002a:	1d21      	adds	r1, r4, #4
 805002c:	b2c9      	uxtb	r1, r1
 805002e:	5caa      	ldrb	r2, [r5, r2]
 8050030:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8050034:	1d62      	adds	r2, r4, #5
 8050036:	b2d2      	uxtb	r2, r2
 8050038:	5c69      	ldrb	r1, [r5, r1]
 805003a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                chParam.Frequency *= 100;
 805003e:	2164      	movs	r1, #100	; 0x64
 8050040:	fb01 f303 	mul.w	r3, r1, r3
 8050044:	9308      	str	r3, [sp, #32]
                chParam.Rx1Frequency = 0;
 8050046:	2300      	movs	r3, #0
 8050048:	9309      	str	r3, [sp, #36]	; 0x24
                chParam.DrRange.Value = payload[macIndex++];
 805004a:	3406      	adds	r4, #6
 805004c:	b2e4      	uxtb	r4, r4
 805004e:	56ab      	ldrsb	r3, [r5, r2]
 8050050:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8050054:	a906      	add	r1, sp, #24
 8050056:	4b15      	ldr	r3, [pc, #84]	; (80500ac <ProcessMacCommands+0x364>)
 8050058:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 805005c:	f003 fd64 	bl	8053b28 <RegionNewChannelReq>
 8050060:	b2c3      	uxtb	r3, r0
 8050062:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                if( ( int8_t )status >= 0 )
 8050066:	2800      	cmp	r0, #0
 8050068:	f6ff ae81 	blt.w	804fd6e <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 805006c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8050070:	2201      	movs	r2, #1
 8050072:	a90d      	add	r1, sp, #52	; 0x34
 8050074:	2007      	movs	r0, #7
 8050076:	f002 fa55 	bl	8052524 <LoRaMacCommandsAddCmd>
                break;
 805007a:	e678      	b.n	804fd6e <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 805007c:	3402      	adds	r4, #2
 805007e:	b2e4      	uxtb	r4, r4
 8050080:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 8050082:	f013 020f 	ands.w	r2, r3, #15
 8050086:	d100      	bne.n	805008a <ProcessMacCommands+0x342>
                    delay++;
 8050088:	3201      	adds	r2, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 805008a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 805008e:	fb03 f302 	mul.w	r3, r3, r2
 8050092:	4a06      	ldr	r2, [pc, #24]	; (80500ac <ProcessMacCommands+0x364>)
 8050094:	6693      	str	r3, [r2, #104]	; 0x68
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8050096:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 805009a:	66d3      	str	r3, [r2, #108]	; 0x6c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 805009c:	2200      	movs	r2, #0
 805009e:	a90d      	add	r1, sp, #52	; 0x34
 80500a0:	2008      	movs	r0, #8
 80500a2:	f002 fa3f 	bl	8052524 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 80500a6:	f7fe fba1 	bl	804e7ec <SetMlmeScheduleUplinkIndication>
                break;
 80500aa:	e660      	b.n	804fd6e <ProcessMacCommands+0x26>
 80500ac:	20019b68 	.word	0x20019b68
 80500b0:	200195e4 	.word	0x200195e4
 80500b4:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 80500b8:	3402      	adds	r4, #2
 80500ba:	b2e4      	uxtb	r4, r4
 80500bc:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 80500be:	2200      	movs	r2, #0
 80500c0:	f88d 2010 	strb.w	r2, [sp, #16]
                txParamSetupReq.DownlinkDwellTime = 0;
 80500c4:	f88d 2011 	strb.w	r2, [sp, #17]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80500c8:	f013 0f20 	tst.w	r3, #32
 80500cc:	d002      	beq.n	80500d4 <ProcessMacCommands+0x38c>
                    txParamSetupReq.DownlinkDwellTime = 1;
 80500ce:	2201      	movs	r2, #1
 80500d0:	f88d 2011 	strb.w	r2, [sp, #17]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80500d4:	f013 0f10 	tst.w	r3, #16
 80500d8:	d002      	beq.n	80500e0 <ProcessMacCommands+0x398>
                    txParamSetupReq.UplinkDwellTime = 1;
 80500da:	2201      	movs	r2, #1
 80500dc:	f88d 2010 	strb.w	r2, [sp, #16]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80500e0:	f003 030f 	and.w	r3, r3, #15
 80500e4:	f88d 3012 	strb.w	r3, [sp, #18]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80500e8:	a904      	add	r1, sp, #16
 80500ea:	4bc7      	ldr	r3, [pc, #796]	; (8050408 <ProcessMacCommands+0x6c0>)
 80500ec:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80500f0:	f003 fd22 	bl	8053b38 <RegionTxParamSetupReq>
 80500f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80500f8:	f43f ae39 	beq.w	804fd6e <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80500fc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8050100:	4ec1      	ldr	r6, [pc, #772]	; (8050408 <ProcessMacCommands+0x6c0>)
 8050102:	f886 308c 	strb.w	r3, [r6, #140]	; 0x8c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8050106:	f89d 2011 	ldrb.w	r2, [sp, #17]
 805010a:	f886 208d 	strb.w	r2, [r6, #141]	; 0x8d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 805010e:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8050112:	49be      	ldr	r1, [pc, #760]	; (805040c <ProcessMacCommands+0x6c4>)
 8050114:	5c8a      	ldrb	r2, [r1, r2]
 8050116:	ee07 2a90 	vmov	s15, r2
 805011a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 805011e:	edc6 7a24 	vstr	s15, [r6, #144]	; 0x90
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8050122:	2202      	movs	r2, #2
 8050124:	f88d 2020 	strb.w	r2, [sp, #32]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8050128:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 805012c:	a908      	add	r1, sp, #32
 805012e:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
 8050132:	f003 fc8a 	bl	8053a4a <RegionGetPhyParam>
 8050136:	9006      	str	r0, [sp, #24]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8050138:	b240      	sxtb	r0, r0
 805013a:	f996 3049 	ldrsb.w	r3, [r6, #73]	; 0x49
 805013e:	4298      	cmp	r0, r3
 8050140:	bfb8      	it	lt
 8050142:	4618      	movlt	r0, r3
 8050144:	f886 0049 	strb.w	r0, [r6, #73]	; 0x49
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8050148:	2200      	movs	r2, #0
 805014a:	a90d      	add	r1, sp, #52	; 0x34
 805014c:	2009      	movs	r0, #9
 805014e:	f002 f9e9 	bl	8052524 <LoRaMacCommandsAddCmd>
                break;
 8050152:	e60c      	b.n	804fd6e <ProcessMacCommands+0x26>
                uint8_t serverMinorVersion = payload[macIndex++];
 8050154:	3402      	adds	r4, #2
 8050156:	b2e4      	uxtb	r4, r4
 8050158:	5dab      	ldrb	r3, [r5, r6]
                if( Nvm.MacGroup2.Version.Fields.Minor >= serverMinorVersion )
 805015a:	4aab      	ldr	r2, [pc, #684]	; (8050408 <ProcessMacCommands+0x6c0>)
 805015c:	f892 21a6 	ldrb.w	r2, [r2, #422]	; 0x1a6
 8050160:	429a      	cmp	r2, r3
 8050162:	f4ff ae04 	bcc.w	804fd6e <ProcessMacCommands+0x26>
                    if( LoRaMacCommandsGetCmd( MOTE_MAC_REKEY_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
 8050166:	a90c      	add	r1, sp, #48	; 0x30
 8050168:	200b      	movs	r0, #11
 805016a:	f002 fa23 	bl	80525b4 <LoRaMacCommandsGetCmd>
 805016e:	2800      	cmp	r0, #0
 8050170:	f47f adfd 	bne.w	804fd6e <ProcessMacCommands+0x26>
                        LoRaMacCommandsRemoveCmd( macCmd );
 8050174:	980c      	ldr	r0, [sp, #48]	; 0x30
 8050176:	f002 f9ff 	bl	8052578 <LoRaMacCommandsRemoveCmd>
 805017a:	e5f8      	b.n	804fd6e <ProcessMacCommands+0x26>
                status = 0x03;
 805017c:	2303      	movs	r3, #3
 805017e:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                dlChannelReq.ChannelId = payload[macIndex++];
 8050182:	1ca3      	adds	r3, r4, #2
 8050184:	b2db      	uxtb	r3, r3
 8050186:	5daa      	ldrb	r2, [r5, r6]
 8050188:	f88d 2020 	strb.w	r2, [sp, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 805018c:	1ce1      	adds	r1, r4, #3
 805018e:	b2c9      	uxtb	r1, r1
 8050190:	5ceb      	ldrb	r3, [r5, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8050192:	1d22      	adds	r2, r4, #4
 8050194:	b2d2      	uxtb	r2, r2
 8050196:	5c69      	ldrb	r1, [r5, r1]
 8050198:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 805019c:	3405      	adds	r4, #5
 805019e:	b2e4      	uxtb	r4, r4
 80501a0:	5caa      	ldrb	r2, [r5, r2]
 80501a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                dlChannelReq.Rx1Frequency *= 100;
 80501a6:	2264      	movs	r2, #100	; 0x64
 80501a8:	fb02 f303 	mul.w	r3, r2, r3
 80501ac:	9309      	str	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 80501ae:	a908      	add	r1, sp, #32
 80501b0:	4b95      	ldr	r3, [pc, #596]	; (8050408 <ProcessMacCommands+0x6c0>)
 80501b2:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80501b6:	f003 fcc7 	bl	8053b48 <RegionDlChannelReq>
 80501ba:	b2c3      	uxtb	r3, r0
 80501bc:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
                if( ( int8_t )status >= 0 )
 80501c0:	2800      	cmp	r0, #0
 80501c2:	f6ff add4 	blt.w	804fd6e <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 80501c6:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80501ca:	2201      	movs	r2, #1
 80501cc:	a90d      	add	r1, sp, #52	; 0x34
 80501ce:	200a      	movs	r0, #10
 80501d0:	f002 f9a8 	bl	8052524 <LoRaMacCommandsAddCmd>
                    SetMlmeScheduleUplinkIndication( );
 80501d4:	f7fe fb0a 	bl	804e7ec <SetMlmeScheduleUplinkIndication>
                break;
 80501d8:	e5c9      	b.n	804fd6e <ProcessMacCommands+0x26>
                uint8_t delayExp = 0x0F & payload[macIndex];
 80501da:	5dab      	ldrb	r3, [r5, r6]
 80501dc:	f003 010f 	and.w	r1, r3, #15
                uint8_t limitExp = 0x0F & ( payload[macIndex] >> 4 );
 80501e0:	091a      	lsrs	r2, r3, #4
                macIndex++;
 80501e2:	3402      	adds	r4, #2
 80501e4:	b2e4      	uxtb	r4, r4
                MacCtx.AdrAckDelay = 0x01 << delayExp;
 80501e6:	2301      	movs	r3, #1
 80501e8:	fa03 f101 	lsl.w	r1, r3, r1
 80501ec:	4888      	ldr	r0, [pc, #544]	; (8050410 <ProcessMacCommands+0x6c8>)
 80501ee:	f8a0 13fe 	strh.w	r1, [r0, #1022]	; 0x3fe
                MacCtx.AdrAckLimit = 0x01 << limitExp;
 80501f2:	4093      	lsls	r3, r2
 80501f4:	f8a0 33fc 	strh.w	r3, [r0, #1020]	; 0x3fc
                LoRaMacCommandsAddCmd( MOTE_MAC_ADR_PARAM_SETUP_ANS, macCmdPayload, 0 );
 80501f8:	2200      	movs	r2, #0
 80501fa:	a90d      	add	r1, sp, #52	; 0x34
 80501fc:	200c      	movs	r0, #12
 80501fe:	f002 f991 	bl	8052524 <LoRaMacCommandsAddCmd>
                break;
 8050202:	e5b4      	b.n	804fd6e <ProcessMacCommands+0x26>
                uint8_t period = ( 0x38 & payload[macIndex] ) >> 3;
 8050204:	5dab      	ldrb	r3, [r5, r6]
 8050206:	f3c3 02c2 	ubfx	r2, r3, #3, #3
                Nvm.MacGroup2.ForceRejoinMaxRetries = 0x07 & payload[macIndex];
 805020a:	f003 0307 	and.w	r3, r3, #7
 805020e:	4e7e      	ldr	r6, [pc, #504]	; (8050408 <ProcessMacCommands+0x6c0>)
 8050210:	f886 31ac 	strb.w	r3, [r6, #428]	; 0x1ac
                macIndex++;
 8050214:	1ca3      	adds	r3, r4, #2
 8050216:	b2db      	uxtb	r3, r3
                Nvm.MacGroup2.ForceRejoinType = ( 0x70 & payload[macIndex] ) >> 4;
 8050218:	5ce9      	ldrb	r1, [r5, r3]
 805021a:	f3c1 1102 	ubfx	r1, r1, #4, #3
 805021e:	f886 11ad 	strb.w	r1, [r6, #429]	; 0x1ad
                Nvm.MacGroup1.ChannelsDatarate = 0x0F & payload[macIndex];
 8050222:	56eb      	ldrsb	r3, [r5, r3]
 8050224:	f003 030f 	and.w	r3, r3, #15
 8050228:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
                macIndex ++;
 805022c:	3403      	adds	r4, #3
 805022e:	b2e4      	uxtb	r4, r4
                uint32_t rejoinCycleInSec = 32 * ( 0x01 << period ) + randr( 0, 32 );
 8050230:	2120      	movs	r1, #32
 8050232:	fa01 fa02 	lsl.w	sl, r1, r2
 8050236:	2000      	movs	r0, #0
 8050238:	f004 fe2c 	bl	8054e94 <randr>
                uint32_t forceRejoinReqCycleTime = 0;
 805023c:	2300      	movs	r3, #0
 805023e:	9308      	str	r3, [sp, #32]
                ConvertRejoinCycleTime( rejoinCycleInSec, &forceRejoinReqCycleTime );
 8050240:	a908      	add	r1, sp, #32
 8050242:	4450      	add	r0, sl
 8050244:	f7fe fb64 	bl	804e910 <ConvertRejoinCycleTime>
                TimerSetValue( &MacCtx.ForceRejoinReqCycleTimer, forceRejoinReqCycleTime );
 8050248:	9908      	ldr	r1, [sp, #32]
 805024a:	4872      	ldr	r0, [pc, #456]	; (8050414 <ProcessMacCommands+0x6cc>)
 805024c:	f7f2 ffc4 	bl	80431d8 <TimerSetValue>
                if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
 8050250:	f896 31ad 	ldrb.w	r3, [r6, #429]	; 0x1ad
 8050254:	2b01      	cmp	r3, #1
 8050256:	d906      	bls.n	8050266 <ProcessMacCommands+0x51e>
                    SendReJoinReq( REJOIN_REQ_2 );
 8050258:	2002      	movs	r0, #2
 805025a:	f7ff fcd3 	bl	804fc04 <SendReJoinReq>
                TimerStart( &MacCtx.ForceRejoinReqCycleTimer );
 805025e:	486d      	ldr	r0, [pc, #436]	; (8050414 <ProcessMacCommands+0x6cc>)
 8050260:	f7f2 ff0a 	bl	8043078 <TimerStart>
                break;
 8050264:	e583      	b.n	804fd6e <ProcessMacCommands+0x26>
                    SendReJoinReq( REJOIN_REQ_0 );
 8050266:	2000      	movs	r0, #0
 8050268:	f7ff fccc 	bl	804fc04 <SendReJoinReq>
 805026c:	e7f7      	b.n	805025e <ProcessMacCommands+0x516>
                uint8_t maxCountN = 0x0F & payload[macIndex];
 805026e:	5dab      	ldrb	r3, [r5, r6]
 8050270:	f003 020f 	and.w	r2, r3, #15
                uint8_t maxTimeN = 0x0F & ( payload[macIndex] >> 4 );
 8050274:	0918      	lsrs	r0, r3, #4
                macIndex ++;
 8050276:	3402      	adds	r4, #2
 8050278:	b2e4      	uxtb	r4, r4
                Nvm.MacGroup2.Rejoin0CycleInSec = 0x01 << ( maxTimeN + 10 );
 805027a:	300a      	adds	r0, #10
 805027c:	2301      	movs	r3, #1
 805027e:	fa03 f000 	lsl.w	r0, r3, r0
 8050282:	4961      	ldr	r1, [pc, #388]	; (8050408 <ProcessMacCommands+0x6c0>)
 8050284:	f8c1 01b0 	str.w	r0, [r1, #432]	; 0x1b0
                Nvm.MacGroup2.Rejoin0UplinksLimit = 0x01 << ( maxCountN + 4 );
 8050288:	3204      	adds	r2, #4
 805028a:	4093      	lsls	r3, r2
 805028c:	f8a1 31aa 	strh.w	r3, [r1, #426]	; 0x1aa
                if( ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime ) == true )
 8050290:	4961      	ldr	r1, [pc, #388]	; (8050418 <ProcessMacCommands+0x6d0>)
 8050292:	f7fe fb3d 	bl	804e910 <ConvertRejoinCycleTime>
 8050296:	b940      	cbnz	r0, 80502aa <ProcessMacCommands+0x562>
                uint8_t timeOK = 0;
 8050298:	2300      	movs	r3, #0
                macCmdPayload[0] = timeOK;
 805029a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                LoRaMacCommandsAddCmd( MOTE_MAC_REJOIN_PARAM_ANS, macCmdPayload, 1 );
 805029e:	2201      	movs	r2, #1
 80502a0:	a90d      	add	r1, sp, #52	; 0x34
 80502a2:	200f      	movs	r0, #15
 80502a4:	f002 f93e 	bl	8052524 <LoRaMacCommandsAddCmd>
                break;
 80502a8:	e561      	b.n	804fd6e <ProcessMacCommands+0x26>
                    TimerStop( &MacCtx.Rejoin0CycleTimer );
 80502aa:	f8df a164 	ldr.w	sl, [pc, #356]	; 8050410 <ProcessMacCommands+0x6c8>
 80502ae:	f50a 6692 	add.w	r6, sl, #1168	; 0x490
 80502b2:	4630      	mov	r0, r6
 80502b4:	f7f2 ff54 	bl	8043160 <TimerStop>
                    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
 80502b8:	f8da 14f0 	ldr.w	r1, [sl, #1264]	; 0x4f0
 80502bc:	4630      	mov	r0, r6
 80502be:	f7f2 ff8b 	bl	80431d8 <TimerSetValue>
                    TimerStart( &MacCtx.Rejoin0CycleTimer );
 80502c2:	4630      	mov	r0, r6
 80502c4:	f7f2 fed8 	bl	8043078 <TimerStart>
                    timeOK = 0x01;
 80502c8:	2301      	movs	r3, #1
 80502ca:	e7e6      	b.n	805029a <ProcessMacCommands+0x552>
                macIndex++;
 80502cc:	3402      	adds	r4, #2
 80502ce:	b2e4      	uxtb	r4, r4
                if( LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_MODE_IND, &macCmd) == LORAMAC_COMMANDS_SUCCESS )
 80502d0:	a90c      	add	r1, sp, #48	; 0x30
 80502d2:	2020      	movs	r0, #32
 80502d4:	f002 f96e 	bl	80525b4 <LoRaMacCommandsGetCmd>
 80502d8:	2800      	cmp	r0, #0
 80502da:	f47f ad48 	bne.w	804fd6e <ProcessMacCommands+0x26>
                    LoRaMacCommandsRemoveCmd( macCmd );
 80502de:	980c      	ldr	r0, [sp, #48]	; 0x30
 80502e0:	f002 f94a 	bl	8052578 <LoRaMacCommandsRemoveCmd>
 80502e4:	e543      	b.n	804fd6e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80502e6:	2009      	movs	r0, #9
 80502e8:	f002 faf6 	bl	80528d8 <LoRaMacConfirmQueueIsCmdActive>
 80502ec:	b928      	cbnz	r0, 80502fa <ProcessMacCommands+0x5b2>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80502ee:	4b48      	ldr	r3, [pc, #288]	; (8050410 <ProcessMacCommands+0x6c8>)
 80502f0:	2200      	movs	r2, #0
 80502f2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
        switch( payload[macIndex++] )
 80502f6:	4634      	mov	r4, r6
 80502f8:	e539      	b.n	804fd6e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80502fa:	2109      	movs	r1, #9
 80502fc:	2000      	movs	r0, #0
 80502fe:	f002 fa9f 	bl	8052840 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 8050302:	2300      	movs	r3, #0
 8050304:	f8ad 3016 	strh.w	r3, [sp, #22]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8050308:	1ca1      	adds	r1, r4, #2
 805030a:	b2c9      	uxtb	r1, r1
 805030c:	5dab      	ldrb	r3, [r5, r6]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 805030e:	1ce2      	adds	r2, r4, #3
 8050310:	b2d2      	uxtb	r2, r2
 8050312:	5c69      	ldrb	r1, [r5, r1]
 8050314:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8050318:	1d21      	adds	r1, r4, #4
 805031a:	b2c9      	uxtb	r1, r1
 805031c:	5caa      	ldrb	r2, [r5, r2]
 805031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8050322:	1d62      	adds	r2, r4, #5
 8050324:	b2d2      	uxtb	r2, r2
 8050326:	5c69      	ldrb	r1, [r5, r1]
 8050328:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 805032c:	9304      	str	r3, [sp, #16]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 805032e:	3406      	adds	r4, #6
 8050330:	b2e4      	uxtb	r4, r4
 8050332:	5ca9      	ldrb	r1, [r5, r2]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8050334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8050338:	fb02 f201 	mul.w	r2, r2, r1
 805033c:	0a12      	lsrs	r2, r2, #8
 805033e:	f8ad 2014 	strh.w	r2, [sp, #20]
                    sysTime = gpsEpochTime;
 8050342:	ae06      	add	r6, sp, #24
 8050344:	9905      	ldr	r1, [sp, #20]
 8050346:	4618      	mov	r0, r3
 8050348:	e886 0003 	stmia.w	r6, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 805034c:	4a33      	ldr	r2, [pc, #204]	; (805041c <ProcessMacCommands+0x6d4>)
 805034e:	441a      	add	r2, r3
 8050350:	9206      	str	r2, [sp, #24]
                    sysTimeCurrent = SysTimeGet( );
 8050352:	f10d 0b20 	add.w	fp, sp, #32
 8050356:	4658      	mov	r0, fp
 8050358:	f7f2 fd30 	bl	8042dbc <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 805035c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 8050410 <ProcessMacCommands+0x6c8>
 8050360:	f8da 333c 	ldr.w	r3, [sl, #828]	; 0x33c
 8050364:	9300      	str	r3, [sp, #0]
 8050366:	f8da 3338 	ldr.w	r3, [sl, #824]	; 0x338
 805036a:	e896 0006 	ldmia.w	r6, {r1, r2}
 805036e:	a80e      	add	r0, sp, #56	; 0x38
 8050370:	f7f2 fceb 	bl	8042d4a <SysTimeSub>
 8050374:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8050376:	9300      	str	r3, [sp, #0]
 8050378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 805037a:	e89b 0006 	ldmia.w	fp, {r1, r2}
 805037e:	4630      	mov	r0, r6
 8050380:	f7f2 fcc6 	bl	8042d10 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8050384:	e896 0003 	ldmia.w	r6, {r0, r1}
 8050388:	f7f2 fcfc 	bl	8042d84 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 805038c:	f002 f825 	bl	80523da <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8050390:	2301      	movs	r3, #1
 8050392:	f88a 343c 	strb.w	r3, [sl, #1084]	; 0x43c
 8050396:	e4ea      	b.n	804fd6e <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8050398:	200c      	movs	r0, #12
 805039a:	f002 fa9d 	bl	80528d8 <LoRaMacConfirmQueueIsCmdActive>
 805039e:	b908      	cbnz	r0, 80503a4 <ProcessMacCommands+0x65c>
        switch( payload[macIndex++] )
 80503a0:	4634      	mov	r4, r6
 80503a2:	e4e4      	b.n	804fd6e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 80503a4:	210c      	movs	r1, #12
 80503a6:	2000      	movs	r0, #0
 80503a8:	f002 fa4a 	bl	8052840 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 80503ac:	4b18      	ldr	r3, [pc, #96]	; (8050410 <ProcessMacCommands+0x6c8>)
 80503ae:	f893 348c 	ldrb.w	r3, [r3, #1164]	; 0x48c
 80503b2:	3b04      	subs	r3, #4
 80503b4:	b2db      	uxtb	r3, r3
 80503b6:	2b01      	cmp	r3, #1
 80503b8:	d801      	bhi.n	80503be <ProcessMacCommands+0x676>
        switch( payload[macIndex++] )
 80503ba:	4634      	mov	r4, r6
 80503bc:	e4d7      	b.n	804fd6e <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 80503be:	f002 f808 	bl	80523d2 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 80503c2:	4634      	mov	r4, r6
 80503c4:	e4d3      	b.n	804fd6e <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 80503c6:	1ca2      	adds	r2, r4, #2
 80503c8:	b2d2      	uxtb	r2, r2
 80503ca:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 80503cc:	1ce1      	adds	r1, r4, #3
 80503ce:	b2c9      	uxtb	r1, r1
 80503d0:	5caa      	ldrb	r2, [r5, r2]
 80503d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 80503d6:	1d22      	adds	r2, r4, #4
 80503d8:	b2d2      	uxtb	r2, r2
 80503da:	5c69      	ldrb	r1, [r5, r1]
 80503dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 80503e0:	3405      	adds	r4, #5
 80503e2:	b2e4      	uxtb	r4, r4
 80503e4:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 80503e6:	2164      	movs	r1, #100	; 0x64
 80503e8:	fb01 f103 	mul.w	r1, r1, r3
 80503ec:	f000 000f 	and.w	r0, r0, #15
 80503f0:	f001 fff0 	bl	80523d4 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 80503f4:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 80503f8:	2201      	movs	r2, #1
 80503fa:	a90d      	add	r1, sp, #52	; 0x34
 80503fc:	2011      	movs	r0, #17
 80503fe:	f002 f891 	bl	8052524 <LoRaMacCommandsAddCmd>
                SetMlmeScheduleUplinkIndication( );
 8050402:	f7fe f9f3 	bl	804e7ec <SetMlmeScheduleUplinkIndication>
                break;
 8050406:	e4b2      	b.n	804fd6e <ProcessMacCommands+0x26>
 8050408:	20019b68 	.word	0x20019b68
 805040c:	0805aaf0 	.word	0x0805aaf0
 8050410:	200195e4 	.word	0x200195e4
 8050414:	20019abc 	.word	0x20019abc
 8050418:	20019ad4 	.word	0x20019ad4
 805041c:	12d53d80 	.word	0x12d53d80
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8050420:	200d      	movs	r0, #13
 8050422:	f002 fa59 	bl	80528d8 <LoRaMacConfirmQueueIsCmdActive>
 8050426:	b908      	cbnz	r0, 805042c <ProcessMacCommands+0x6e4>
        switch( payload[macIndex++] )
 8050428:	4634      	mov	r4, r6
 805042a:	e4a0      	b.n	804fd6e <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 805042c:	210d      	movs	r1, #13
 805042e:	2000      	movs	r0, #0
 8050430:	f002 fa06 	bl	8052840 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8050434:	1ca2      	adds	r2, r4, #2
 8050436:	b2d2      	uxtb	r2, r2
 8050438:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 805043a:	1ce3      	adds	r3, r4, #3
 805043c:	b2db      	uxtb	r3, r3
 805043e:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8050440:	3404      	adds	r4, #4
 8050442:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8050444:	4a15      	ldr	r2, [pc, #84]	; (805049c <ProcessMacCommands+0x754>)
 8050446:	6812      	ldr	r2, [r2, #0]
 8050448:	5ce9      	ldrb	r1, [r5, r3]
 805044a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 805044e:	f001 ffc3 	bl	80523d8 <LoRaMacClassBBeaconTimingAns>
 8050452:	e48c      	b.n	804fd6e <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 8050454:	1ca1      	adds	r1, r4, #2
 8050456:	b2c9      	uxtb	r1, r1
 8050458:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 805045a:	1ce2      	adds	r2, r4, #3
 805045c:	b2d2      	uxtb	r2, r2
 805045e:	5c68      	ldrb	r0, [r5, r1]
 8050460:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8050464:	3404      	adds	r4, #4
 8050466:	b2e4      	uxtb	r4, r4
 8050468:	5ca8      	ldrb	r0, [r5, r2]
 805046a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 805046e:	2064      	movs	r0, #100	; 0x64
 8050470:	fb00 f003 	mul.w	r0, r0, r3
 8050474:	f001 ffb2 	bl	80523dc <LoRaMacClassBBeaconFreqReq>
 8050478:	b140      	cbz	r0, 805048c <ProcessMacCommands+0x744>
                        macCmdPayload[0] = 1;
 805047a:	2301      	movs	r3, #1
 805047c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8050480:	2201      	movs	r2, #1
 8050482:	a90d      	add	r1, sp, #52	; 0x34
 8050484:	2013      	movs	r0, #19
 8050486:	f002 f84d 	bl	8052524 <LoRaMacCommandsAddCmd>
                break;
 805048a:	e470      	b.n	804fd6e <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 805048c:	2300      	movs	r3, #0
 805048e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8050492:	e7f5      	b.n	8050480 <ProcessMacCommands+0x738>
}
 8050494:	b011      	add	sp, #68	; 0x44
 8050496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 805049a:	bf00      	nop
 805049c:	2001b510 	.word	0x2001b510

080504a0 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 80504a0:	4b20      	ldr	r3, [pc, #128]	; (8050524 <LoRaMacHandleMcpsRequest+0x84>)
 80504a2:	f893 348d 	ldrb.w	r3, [r3, #1165]	; 0x48d
 80504a6:	f013 0f01 	tst.w	r3, #1
 80504aa:	d039      	beq.n	8050520 <LoRaMacHandleMcpsRequest+0x80>
{
 80504ac:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 80504ae:	4b1d      	ldr	r3, [pc, #116]	; (8050524 <LoRaMacHandleMcpsRequest+0x84>)
 80504b0:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 80504b4:	b12b      	cbz	r3, 80504c2 <LoRaMacHandleMcpsRequest+0x22>
 80504b6:	2b03      	cmp	r3, #3
 80504b8:	d003      	beq.n	80504c2 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80504ba:	2b01      	cmp	r3, #1
 80504bc:	d006      	beq.n	80504cc <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 80504be:	2000      	movs	r0, #0
 80504c0:	e002      	b.n	80504c8 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 80504c2:	f7fe f9d3 	bl	804e86c <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 80504c6:	b940      	cbnz	r0, 80504da <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 80504c8:	b1f0      	cbz	r0, 8050508 <LoRaMacHandleMcpsRequest+0x68>
}
 80504ca:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 80504cc:	4b15      	ldr	r3, [pc, #84]	; (8050524 <LoRaMacHandleMcpsRequest+0x84>)
 80504ce:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80504d2:	b1bb      	cbz	r3, 8050504 <LoRaMacHandleMcpsRequest+0x64>
                stopRetransmission = CheckRetransConfirmedUplink( );
 80504d4:	f7fe f9e6 	bl	804e8a4 <CheckRetransConfirmedUplink>
 80504d8:	e7f5      	b.n	80504c6 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 80504da:	4c12      	ldr	r4, [pc, #72]	; (8050524 <LoRaMacHandleMcpsRequest+0x84>)
 80504dc:	f504 705c 	add.w	r0, r4, #880	; 0x370
 80504e0:	f7f2 fe3e 	bl	8043160 <TimerStop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 80504e4:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 80504e8:	f023 0320 	bic.w	r3, r3, #32
 80504ec:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 80504f0:	f7fe fb52 	bl	804eb98 <StopRetransmission>
            if( IsReJoin0Required( ) == true )
 80504f4:	f7fe f996 	bl	804e824 <IsReJoin0Required>
 80504f8:	2800      	cmp	r0, #0
 80504fa:	d0e6      	beq.n	80504ca <LoRaMacHandleMcpsRequest+0x2a>
                SendReJoinReq( REJOIN_REQ_0 );
 80504fc:	2000      	movs	r0, #0
 80504fe:	f7ff fb81 	bl	804fc04 <SendReJoinReq>
 8050502:	e7e2      	b.n	80504ca <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 8050504:	2001      	movs	r0, #1
 8050506:	e7df      	b.n	80504c8 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8050508:	4b06      	ldr	r3, [pc, #24]	; (8050524 <LoRaMacHandleMcpsRequest+0x84>)
 805050a:	f893 248d 	ldrb.w	r2, [r3, #1165]	; 0x48d
 805050e:	f36f 1245 	bfc	r2, #5, #1
 8050512:	f883 248d 	strb.w	r2, [r3, #1165]	; 0x48d
            MacCtx.RetransmitTimeoutRetry = false;
 8050516:	f883 0419 	strb.w	r0, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 805051a:	f7ff faa7 	bl	804fa6c <OnTxDelayedTimerEvent>
}
 805051e:	e7d4      	b.n	80504ca <LoRaMacHandleMcpsRequest+0x2a>
 8050520:	4770      	bx	lr
 8050522:	bf00      	nop
 8050524:	200195e4 	.word	0x200195e4

08050528 <OnForceRejoinReqCycleTimerEvent>:
    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
    TimerStart( &MacCtx.Rejoin2CycleTimer );
}

static void OnForceRejoinReqCycleTimerEvent( void* context )
{
 8050528:	b508      	push	{r3, lr}
    if( Nvm.MacGroup1.ForceRejoinRetriesCounter == Nvm.MacGroup2.ForceRejoinMaxRetries )
 805052a:	4b10      	ldr	r3, [pc, #64]	; (805056c <OnForceRejoinReqCycleTimerEvent+0x44>)
 805052c:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 8050530:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 8050534:	429a      	cmp	r2, r3
 8050536:	d00d      	beq.n	8050554 <OnForceRejoinReqCycleTimerEvent+0x2c>
    {
        TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
        Nvm.MacGroup1.ForceRejoinRetriesCounter = 0;
    }

    Nvm.MacGroup1.ForceRejoinRetriesCounter ++;
 8050538:	4b0c      	ldr	r3, [pc, #48]	; (805056c <OnForceRejoinReqCycleTimerEvent+0x44>)
 805053a:	f893 204e 	ldrb.w	r2, [r3, #78]	; 0x4e
 805053e:	3201      	adds	r2, #1
 8050540:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

    if( ( Nvm.MacGroup2.ForceRejoinType == 0 ) || ( Nvm.MacGroup2.ForceRejoinType == 1 ) )
 8050544:	f893 31ad 	ldrb.w	r3, [r3, #429]	; 0x1ad
 8050548:	2b01      	cmp	r3, #1
 805054a:	d90b      	bls.n	8050564 <OnForceRejoinReqCycleTimerEvent+0x3c>
    {
        SendReJoinReq( REJOIN_REQ_0 );
    }
    else
    {
        SendReJoinReq( REJOIN_REQ_2 );
 805054c:	2002      	movs	r0, #2
 805054e:	f7ff fb59 	bl	804fc04 <SendReJoinReq>
    }
}
 8050552:	bd08      	pop	{r3, pc}
        TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
 8050554:	4806      	ldr	r0, [pc, #24]	; (8050570 <OnForceRejoinReqCycleTimerEvent+0x48>)
 8050556:	f7f2 fe03 	bl	8043160 <TimerStop>
        Nvm.MacGroup1.ForceRejoinRetriesCounter = 0;
 805055a:	4b04      	ldr	r3, [pc, #16]	; (805056c <OnForceRejoinReqCycleTimerEvent+0x44>)
 805055c:	2200      	movs	r2, #0
 805055e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8050562:	e7e9      	b.n	8050538 <OnForceRejoinReqCycleTimerEvent+0x10>
        SendReJoinReq( REJOIN_REQ_0 );
 8050564:	2000      	movs	r0, #0
 8050566:	f7ff fb4d 	bl	804fc04 <SendReJoinReq>
 805056a:	e7f2      	b.n	8050552 <OnForceRejoinReqCycleTimerEvent+0x2a>
 805056c:	20019b68 	.word	0x20019b68
 8050570:	20019abc 	.word	0x20019abc

08050574 <OnRejoin2CycleTimerEvent>:
{
 8050574:	b538      	push	{r3, r4, r5, lr}
    TimerStop( &MacCtx.Rejoin2CycleTimer );
 8050576:	4d0c      	ldr	r5, [pc, #48]	; (80505a8 <OnRejoin2CycleTimerEvent+0x34>)
 8050578:	f505 6498 	add.w	r4, r5, #1216	; 0x4c0
 805057c:	4620      	mov	r0, r4
 805057e:	f7f2 fdef 	bl	8043160 <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin2CycleInSec, &MacCtx.Rejoin2CycleTime );
 8050582:	f505 619f 	add.w	r1, r5, #1272	; 0x4f8
 8050586:	4b09      	ldr	r3, [pc, #36]	; (80505ac <OnRejoin2CycleTimerEvent+0x38>)
 8050588:	f8d3 01b8 	ldr.w	r0, [r3, #440]	; 0x1b8
 805058c:	f7fe f9c0 	bl	804e910 <ConvertRejoinCycleTime>
    SendReJoinReq( REJOIN_REQ_2 );
 8050590:	2002      	movs	r0, #2
 8050592:	f7ff fb37 	bl	804fc04 <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin2CycleTimer, MacCtx.Rejoin2CycleTime );
 8050596:	f8d5 14f8 	ldr.w	r1, [r5, #1272]	; 0x4f8
 805059a:	4620      	mov	r0, r4
 805059c:	f7f2 fe1c 	bl	80431d8 <TimerSetValue>
    TimerStart( &MacCtx.Rejoin2CycleTimer );
 80505a0:	4620      	mov	r0, r4
 80505a2:	f7f2 fd69 	bl	8043078 <TimerStart>
}
 80505a6:	bd38      	pop	{r3, r4, r5, pc}
 80505a8:	200195e4 	.word	0x200195e4
 80505ac:	20019b68 	.word	0x20019b68

080505b0 <OnRejoin1CycleTimerEvent>:
{
 80505b0:	b538      	push	{r3, r4, r5, lr}
    TimerStop( &MacCtx.Rejoin1CycleTimer );
 80505b2:	4d0c      	ldr	r5, [pc, #48]	; (80505e4 <OnRejoin1CycleTimerEvent+0x34>)
 80505b4:	f505 6495 	add.w	r4, r5, #1192	; 0x4a8
 80505b8:	4620      	mov	r0, r4
 80505ba:	f7f2 fdd1 	bl	8043160 <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime );
 80505be:	f205 41f4 	addw	r1, r5, #1268	; 0x4f4
 80505c2:	4b09      	ldr	r3, [pc, #36]	; (80505e8 <OnRejoin1CycleTimerEvent+0x38>)
 80505c4:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
 80505c8:	f7fe f9a2 	bl	804e910 <ConvertRejoinCycleTime>
    SendReJoinReq( REJOIN_REQ_1 );
 80505cc:	2001      	movs	r0, #1
 80505ce:	f7ff fb19 	bl	804fc04 <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
 80505d2:	f8d5 14f4 	ldr.w	r1, [r5, #1268]	; 0x4f4
 80505d6:	4620      	mov	r0, r4
 80505d8:	f7f2 fdfe 	bl	80431d8 <TimerSetValue>
    TimerStart( &MacCtx.Rejoin1CycleTimer );
 80505dc:	4620      	mov	r0, r4
 80505de:	f7f2 fd4b 	bl	8043078 <TimerStart>
}
 80505e2:	bd38      	pop	{r3, r4, r5, pc}
 80505e4:	200195e4 	.word	0x200195e4
 80505e8:	20019b68 	.word	0x20019b68

080505ec <OnRejoin0CycleTimerEvent>:
{
 80505ec:	b538      	push	{r3, r4, r5, lr}
    TimerStop( &MacCtx.Rejoin0CycleTimer );
 80505ee:	4d0c      	ldr	r5, [pc, #48]	; (8050620 <OnRejoin0CycleTimerEvent+0x34>)
 80505f0:	f505 6492 	add.w	r4, r5, #1168	; 0x490
 80505f4:	4620      	mov	r0, r4
 80505f6:	f7f2 fdb3 	bl	8043160 <TimerStop>
    ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime );
 80505fa:	f505 619e 	add.w	r1, r5, #1264	; 0x4f0
 80505fe:	4b09      	ldr	r3, [pc, #36]	; (8050624 <OnRejoin0CycleTimerEvent+0x38>)
 8050600:	f8d3 01b0 	ldr.w	r0, [r3, #432]	; 0x1b0
 8050604:	f7fe f984 	bl	804e910 <ConvertRejoinCycleTime>
    SendReJoinReq( REJOIN_REQ_0 );
 8050608:	2000      	movs	r0, #0
 805060a:	f7ff fafb 	bl	804fc04 <SendReJoinReq>
    TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
 805060e:	f8d5 14f0 	ldr.w	r1, [r5, #1264]	; 0x4f0
 8050612:	4620      	mov	r0, r4
 8050614:	f7f2 fde0 	bl	80431d8 <TimerSetValue>
    TimerStart( &MacCtx.Rejoin0CycleTimer );
 8050618:	4620      	mov	r0, r4
 805061a:	f7f2 fd2d 	bl	8043078 <TimerStart>
}
 805061e:	bd38      	pop	{r3, r4, r5, pc}
 8050620:	200195e4 	.word	0x200195e4
 8050624:	20019b68 	.word	0x20019b68

08050628 <SetTxContinuousWave>:
{
 8050628:	b510      	push	{r4, lr}
 805062a:	4604      	mov	r4, r0
 805062c:	4608      	mov	r0, r1
 805062e:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8050630:	4b06      	ldr	r3, [pc, #24]	; (805064c <SetTxContinuousWave+0x24>)
 8050632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8050634:	4622      	mov	r2, r4
 8050636:	b249      	sxtb	r1, r1
 8050638:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 805063a:	4a05      	ldr	r2, [pc, #20]	; (8050650 <SetTxContinuousWave+0x28>)
 805063c:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 8050640:	f043 0302 	orr.w	r3, r3, #2
 8050644:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8050648:	2000      	movs	r0, #0
 805064a:	bd10      	pop	{r4, pc}
 805064c:	08059d2c 	.word	0x08059d2c
 8050650:	200195e4 	.word	0x200195e4

08050654 <DetermineFrameType>:
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8050654:	4602      	mov	r2, r0
 8050656:	b1f8      	cbz	r0, 8050698 <DetermineFrameType+0x44>
 8050658:	b301      	cbz	r1, 805069c <DetermineFrameType+0x48>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 805065a:	7b03      	ldrb	r3, [r0, #12]
 805065c:	f013 030f 	ands.w	r3, r3, #15
 8050660:	d005      	beq.n	805066e <DetermineFrameType+0x1a>
 8050662:	f890 0020 	ldrb.w	r0, [r0, #32]
 8050666:	b110      	cbz	r0, 805066e <DetermineFrameType+0x1a>
        *fType = FRAME_TYPE_A;
 8050668:	2000      	movs	r0, #0
 805066a:	7008      	strb	r0, [r1, #0]
 805066c:	4770      	bx	lr
    else if( macMsg->FRMPayloadSize == 0 )
 805066e:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 8050672:	b910      	cbnz	r0, 805067a <DetermineFrameType+0x26>
        *fType = FRAME_TYPE_B;
 8050674:	2301      	movs	r3, #1
 8050676:	700b      	strb	r3, [r1, #0]
 8050678:	4770      	bx	lr
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 805067a:	b92b      	cbnz	r3, 8050688 <DetermineFrameType+0x34>
 805067c:	f892 0020 	ldrb.w	r0, [r2, #32]
 8050680:	b910      	cbnz	r0, 8050688 <DetermineFrameType+0x34>
        *fType = FRAME_TYPE_C;
 8050682:	2302      	movs	r3, #2
 8050684:	700b      	strb	r3, [r1, #0]
 8050686:	4770      	bx	lr
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8050688:	b953      	cbnz	r3, 80506a0 <DetermineFrameType+0x4c>
 805068a:	f892 2020 	ldrb.w	r2, [r2, #32]
 805068e:	b14a      	cbz	r2, 80506a4 <DetermineFrameType+0x50>
        *fType = FRAME_TYPE_D;
 8050690:	2203      	movs	r2, #3
 8050692:	700a      	strb	r2, [r1, #0]
    return LORAMAC_STATUS_OK;
 8050694:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 8050696:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8050698:	2003      	movs	r0, #3
 805069a:	4770      	bx	lr
 805069c:	2003      	movs	r0, #3
 805069e:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 80506a0:	2017      	movs	r0, #23
 80506a2:	4770      	bx	lr
 80506a4:	2017      	movs	r0, #23
}
 80506a6:	4770      	bx	lr

080506a8 <ProcessRadioRxDone>:
{
 80506a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80506ac:	b0a3      	sub	sp, #140	; 0x8c
    uint8_t *payload = RxDoneParams.Payload;
 80506ae:	4bb9      	ldr	r3, [pc, #740]	; (8050994 <ProcessRadioRxDone+0x2ec>)
 80506b0:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 80506b2:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80506b4:	f9b3 900a 	ldrsh.w	r9, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 80506b8:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 80506bc:	2300      	movs	r3, #0
 80506be:	9305      	str	r3, [sp, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80506c0:	4ab5      	ldr	r2, [pc, #724]	; (8050998 <ProcessRadioRxDone+0x2f0>)
 80506c2:	f8d2 80dc 	ldr.w	r8, [r2, #220]	; 0xdc
    uint8_t macCmdPayload[2] = { 0 };
 80506c6:	f8ad 3010 	strh.w	r3, [sp, #16]
    MacCtx.McpsConfirm.AckReceived = false;
 80506ca:	4cb4      	ldr	r4, [pc, #720]	; (805099c <ProcessRadioRxDone+0x2f4>)
 80506cc:	f884 3448 	strb.w	r3, [r4, #1096]	; 0x448
    MacCtx.McpsIndication.Rssi = rssi;
 80506d0:	f8a4 942e 	strh.w	r9, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.Snr = snr;
 80506d4:	f884 7430 	strb.w	r7, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 80506d8:	f894 248c 	ldrb.w	r2, [r4, #1164]	; 0x48c
 80506dc:	f884 2431 	strb.w	r2, [r4, #1073]	; 0x431
    MacCtx.McpsIndication.Port = 0;
 80506e0:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 80506e4:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.FramePending = 0;
 80506e8:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 80506ec:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 80506f0:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 80506f4:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 80506f8:	f884 3432 	strb.w	r3, [r4, #1074]	; 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 80506fc:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8050700:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8050704:	f8c4 3438 	str.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8050708:	f884 343c 	strb.w	r3, [r4, #1084]	; 0x43c
    MacCtx.McpsIndication.ResponseTimeout = 0;
 805070c:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
    Radio.Sleep( );
 8050710:	4ba3      	ldr	r3, [pc, #652]	; (80509a0 <ProcessRadioRxDone+0x2f8>)
 8050712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8050714:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8050716:	f504 7068 	add.w	r0, r4, #928	; 0x3a0
 805071a:	f7f2 fd21 	bl	8043160 <TimerStop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 805071e:	4629      	mov	r1, r5
 8050720:	4630      	mov	r0, r6
 8050722:	f001 fe43 	bl	80523ac <LoRaMacClassBRxBeacon>
 8050726:	b9b0      	cbnz	r0, 8050756 <ProcessRadioRxDone+0xae>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8050728:	4b9b      	ldr	r3, [pc, #620]	; (8050998 <ProcessRadioRxDone+0x2f0>)
 805072a:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 805072e:	2b01      	cmp	r3, #1
 8050730:	d018      	beq.n	8050764 <ProcessRadioRxDone+0xbc>
    macHdr.Value = payload[pktHeaderLen++];
 8050732:	7834      	ldrb	r4, [r6, #0]
    if( macHdr.Bits.Major != 0 )
 8050734:	f014 0f03 	tst.w	r4, #3
 8050738:	d131      	bne.n	805079e <ProcessRadioRxDone+0xf6>
    switch( macHdr.Bits.MType )
 805073a:	0963      	lsrs	r3, r4, #5
 805073c:	3b01      	subs	r3, #1
 805073e:	2b06      	cmp	r3, #6
 8050740:	f200 82fe 	bhi.w	8050d40 <ProcessRadioRxDone+0x698>
 8050744:	e8df f013 	tbh	[pc, r3, lsl #1]
 8050748:	02fc0032 	.word	0x02fc0032
 805074c:	02fc00d9 	.word	0x02fc00d9
 8050750:	02fc00d5 	.word	0x02fc00d5
 8050754:	02d0      	.short	0x02d0
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8050756:	f8a4 947e 	strh.w	r9, [r4, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 805075a:	f884 7480 	strb.w	r7, [r4, #1152]	; 0x480
}
 805075e:	b023      	add	sp, #140	; 0x8c
 8050760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8050764:	f001 fe26 	bl	80523b4 <LoRaMacClassBIsPingExpected>
 8050768:	b150      	cbz	r0, 8050780 <ProcessRadioRxDone+0xd8>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 805076a:	2000      	movs	r0, #0
 805076c:	f001 fe17 	bl	805239e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8050770:	2000      	movs	r0, #0
 8050772:	f001 fe19 	bl	80523a8 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8050776:	4b89      	ldr	r3, [pc, #548]	; (805099c <ProcessRadioRxDone+0x2f4>)
 8050778:	2204      	movs	r2, #4
 805077a:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 805077e:	e7d8      	b.n	8050732 <ProcessRadioRxDone+0x8a>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8050780:	f001 fe1a 	bl	80523b8 <LoRaMacClassBIsMulticastExpected>
 8050784:	2800      	cmp	r0, #0
 8050786:	d0d4      	beq.n	8050732 <ProcessRadioRxDone+0x8a>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8050788:	2000      	movs	r0, #0
 805078a:	f001 fe09 	bl	80523a0 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 805078e:	2000      	movs	r0, #0
 8050790:	f001 fe0b 	bl	80523aa <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8050794:	4b81      	ldr	r3, [pc, #516]	; (805099c <ProcessRadioRxDone+0x2f4>)
 8050796:	2205      	movs	r2, #5
 8050798:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
 805079c:	e7c9      	b.n	8050732 <ProcessRadioRxDone+0x8a>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 805079e:	4b7f      	ldr	r3, [pc, #508]	; (805099c <ProcessRadioRxDone+0x2f4>)
 80507a0:	2201      	movs	r2, #1
 80507a2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 80507a6:	f7fe f977 	bl	804ea98 <PrepareRxDoneAbort>
        return;
 80507aa:	e7d8      	b.n	805075e <ProcessRadioRxDone+0xb6>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80507ac:	2d10      	cmp	r5, #16
 80507ae:	d972      	bls.n	8050896 <ProcessRadioRxDone+0x1ee>
            macMsgJoinAccept.Buffer = payload;
 80507b0:	9606      	str	r6, [sp, #24]
            macMsgJoinAccept.BufSize = size;
 80507b2:	b2ed      	uxtb	r5, r5
 80507b4:	f88d 501c 	strb.w	r5, [sp, #28]
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinRequestPending == false ) )
 80507b8:	4b77      	ldr	r3, [pc, #476]	; (8050998 <ProcessRadioRxDone+0x2f0>)
 80507ba:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 80507be:	b123      	cbz	r3, 80507ca <ProcessRadioRxDone+0x122>
 80507c0:	4b75      	ldr	r3, [pc, #468]	; (8050998 <ProcessRadioRxDone+0x2f0>)
 80507c2:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 80507c6:	2b00      	cmp	r3, #0
 80507c8:	d06c      	beq.n	80508a4 <ProcessRadioRxDone+0x1fc>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 80507ca:	f7f3 fab7 	bl	8043d3c <SecureElementGetJoinEui>
 80507ce:	4601      	mov	r1, r0
 80507d0:	aa06      	add	r2, sp, #24
 80507d2:	20ff      	movs	r0, #255	; 0xff
 80507d4:	f002 fe5a 	bl	805348c <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 80507d8:	2800      	cmp	r0, #0
 80507da:	d17f      	bne.n	80508dc <ProcessRadioRxDone+0x234>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 80507dc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 80507e0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80507e4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80507e8:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
 80507ec:	4b6a      	ldr	r3, [pc, #424]	; (8050998 <ProcessRadioRxDone+0x2f0>)
 80507ee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80507f2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80507f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80507f8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80507fc:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 8050800:	f3c2 1102 	ubfx	r1, r2, #4, #3
 8050804:	f883 1079 	strb.w	r1, [r3, #121]	; 0x79
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8050808:	f3c2 0203 	ubfx	r2, r2, #0, #4
 805080c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8050810:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8050814:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8050818:	669a      	str	r2, [r3, #104]	; 0x68
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 805081a:	b90a      	cbnz	r2, 8050820 <ProcessRadioRxDone+0x178>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 805081c:	2201      	movs	r2, #1
 805081e:	669a      	str	r2, [r3, #104]	; 0x68
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8050820:	4a5d      	ldr	r2, [pc, #372]	; (8050998 <ProcessRadioRxDone+0x2f0>)
 8050822:	6e91      	ldr	r1, [r2, #104]	; 0x68
 8050824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8050828:	fb03 f301 	mul.w	r3, r3, r1
 805082c:	6693      	str	r3, [r2, #104]	; 0x68
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 805082e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8050832:	66d3      	str	r3, [r2, #108]	; 0x6c
                if( macMsgJoinAccept.DLSettings.Bits.OptNeg == 0 )
 8050834:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
 8050838:	2b00      	cmp	r3, #0
 805083a:	db3a      	blt.n	80508b2 <ProcessRadioRxDone+0x20a>
                    Nvm.MacGroup2.Version.Value = LORAMAC_FALLBACK_VERSION;
 805083c:	4613      	mov	r3, r2
 805083e:	4a59      	ldr	r2, [pc, #356]	; (80509a4 <ProcessRadioRxDone+0x2fc>)
 8050840:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8050844:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 8050848:	9320      	str	r3, [sp, #128]	; 0x80
                applyCFList.Size = size - 17;
 805084a:	3d11      	subs	r5, #17
 805084c:	f88d 5084 	strb.w	r5, [sp, #132]	; 0x84
                applyCFList.JoinChannel = MacCtx.Channel;
 8050850:	4b52      	ldr	r3, [pc, #328]	; (805099c <ProcessRadioRxDone+0x2f4>)
 8050852:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8050856:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 805085a:	4c4f      	ldr	r4, [pc, #316]	; (8050998 <ProcessRadioRxDone+0x2f0>)
 805085c:	a91f      	add	r1, sp, #124	; 0x7c
 805085e:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050862:	f003 f91a 	bl	8053a9a <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8050866:	2302      	movs	r3, #2
 8050868:	f884 31a8 	strb.w	r3, [r4, #424]	; 0x1a8
                if( Nvm.MacGroup2.Version.Fields.Minor >= 1 )
 805086c:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
 8050870:	bb23      	cbnz	r3, 80508bc <ProcessRadioRxDone+0x214>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8050872:	2001      	movs	r0, #1
 8050874:	f002 f830 	bl	80528d8 <LoRaMacConfirmQueueIsCmdActive>
 8050878:	bb58      	cbnz	r0, 80508d2 <ProcessRadioRxDone+0x22a>
                if( Nvm.MacGroup2.IsRejoinRequestPending == true )
 805087a:	4b47      	ldr	r3, [pc, #284]	; (8050998 <ProcessRadioRxDone+0x2f0>)
 805087c:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8050880:	2b00      	cmp	r3, #0
 8050882:	f000 824b 	beq.w	8050d1c <ProcessRadioRxDone+0x674>
                    Nvm.MacGroup2.IsRejoinRequestPending = false;
 8050886:	4b44      	ldr	r3, [pc, #272]	; (8050998 <ProcessRadioRxDone+0x2f0>)
 8050888:	2200      	movs	r2, #0
 805088a:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
                    TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
 805088e:	4846      	ldr	r0, [pc, #280]	; (80509a8 <ProcessRadioRxDone+0x300>)
 8050890:	f7f2 fc66 	bl	8043160 <TimerStop>
 8050894:	e242      	b.n	8050d1c <ProcessRadioRxDone+0x674>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8050896:	4b41      	ldr	r3, [pc, #260]	; (805099c <ProcessRadioRxDone+0x2f4>)
 8050898:	2201      	movs	r2, #1
 805089a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 805089e:	f7fe f8fb 	bl	804ea98 <PrepareRxDoneAbort>
                return;
 80508a2:	e75c      	b.n	805075e <ProcessRadioRxDone+0xb6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80508a4:	4b3d      	ldr	r3, [pc, #244]	; (805099c <ProcessRadioRxDone+0x2f4>)
 80508a6:	2201      	movs	r2, #1
 80508a8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 80508ac:	f7fe f8f4 	bl	804ea98 <PrepareRxDoneAbort>
                return;
 80508b0:	e755      	b.n	805075e <ProcessRadioRxDone+0xb6>
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 80508b2:	4b39      	ldr	r3, [pc, #228]	; (8050998 <ProcessRadioRxDone+0x2f0>)
 80508b4:	4a3d      	ldr	r2, [pc, #244]	; (80509ac <ProcessRadioRxDone+0x304>)
 80508b6:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
 80508ba:	e7c3      	b.n	8050844 <ProcessRadioRxDone+0x19c>
                    Nvm.MacGroup1.RekeyIndUplinksCounter = 0;
 80508bc:	2100      	movs	r1, #0
 80508be:	f8a4 1050 	strh.w	r1, [r4, #80]	; 0x50
                    macCmdPayload[0] = Nvm.MacGroup2.Version.Fields.Minor;
 80508c2:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
 80508c6:	2201      	movs	r2, #1
 80508c8:	a904      	add	r1, sp, #16
 80508ca:	200b      	movs	r0, #11
 80508cc:	f001 fe2a 	bl	8052524 <LoRaMacCommandsAddCmd>
 80508d0:	e7cf      	b.n	8050872 <ProcessRadioRxDone+0x1ca>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 80508d2:	2101      	movs	r1, #1
 80508d4:	2000      	movs	r0, #0
 80508d6:	f001 ffb3 	bl	8052840 <LoRaMacConfirmQueueSetStatus>
 80508da:	e7ce      	b.n	805087a <ProcessRadioRxDone+0x1d2>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80508dc:	2001      	movs	r0, #1
 80508de:	f001 fffb 	bl	80528d8 <LoRaMacConfirmQueueIsCmdActive>
 80508e2:	2800      	cmp	r0, #0
 80508e4:	f000 821a 	beq.w	8050d1c <ProcessRadioRxDone+0x674>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80508e8:	2101      	movs	r1, #1
 80508ea:	2007      	movs	r0, #7
 80508ec:	f001 ffa8 	bl	8052840 <LoRaMacConfirmQueueSetStatus>
 80508f0:	e214      	b.n	8050d1c <ProcessRadioRxDone+0x674>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80508f2:	4b2a      	ldr	r3, [pc, #168]	; (805099c <ProcessRadioRxDone+0x2f4>)
 80508f4:	2201      	movs	r2, #1
 80508f6:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80508fa:	4b27      	ldr	r3, [pc, #156]	; (8050998 <ProcessRadioRxDone+0x2f0>)
 80508fc:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
 8050900:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8050904:	4a25      	ldr	r2, [pc, #148]	; (805099c <ProcessRadioRxDone+0x2f4>)
 8050906:	f992 2424 	ldrsb.w	r2, [r2, #1060]	; 0x424
 805090a:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 805090e:	220d      	movs	r2, #13
 8050910:	f88d 2074 	strb.w	r2, [sp, #116]	; 0x74
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050914:	a91d      	add	r1, sp, #116	; 0x74
 8050916:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 805091a:	f003 f896 	bl	8053a4a <RegionGetPhyParam>
 805091e:	901c      	str	r0, [sp, #112]	; 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8050920:	f1a5 030d 	sub.w	r3, r5, #13
 8050924:	b21b      	sxth	r3, r3
 8050926:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 805092a:	b200      	sxth	r0, r0
 805092c:	4283      	cmp	r3, r0
 805092e:	dc01      	bgt.n	8050934 <ProcessRadioRxDone+0x28c>
 8050930:	2d0b      	cmp	r5, #11
 8050932:	d806      	bhi.n	8050942 <ProcessRadioRxDone+0x29a>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8050934:	4b19      	ldr	r3, [pc, #100]	; (805099c <ProcessRadioRxDone+0x2f4>)
 8050936:	2201      	movs	r2, #1
 8050938:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 805093c:	f7fe f8ac 	bl	804ea98 <PrepareRxDoneAbort>
                return;
 8050940:	e70d      	b.n	805075e <ProcessRadioRxDone+0xb6>
            macMsgData.Buffer = payload;
 8050942:	9610      	str	r6, [sp, #64]	; 0x40
            macMsgData.BufSize = size;
 8050944:	f88d 5044 	strb.w	r5, [sp, #68]	; 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8050948:	4b19      	ldr	r3, [pc, #100]	; (80509b0 <ProcessRadioRxDone+0x308>)
 805094a:	9319      	str	r3, [sp, #100]	; 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 805094c:	23ff      	movs	r3, #255	; 0xff
 805094e:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8050952:	a810      	add	r0, sp, #64	; 0x40
 8050954:	f002 fefa 	bl	805374c <LoRaMacParserData>
 8050958:	b9a0      	cbnz	r0, 8050984 <ProcessRadioRxDone+0x2dc>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 805095a:	4b0f      	ldr	r3, [pc, #60]	; (8050998 <ProcessRadioRxDone+0x2f0>)
 805095c:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8050960:	2b01      	cmp	r3, #1
 8050962:	d027      	beq.n	80509b4 <ProcessRadioRxDone+0x30c>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8050964:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8050966:	4b0d      	ldr	r3, [pc, #52]	; (805099c <ProcessRadioRxDone+0x2f4>)
 8050968:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 805096c:	f10d 010f 	add.w	r1, sp, #15
 8050970:	a810      	add	r0, sp, #64	; 0x40
 8050972:	f7ff fe6f 	bl	8050654 <DetermineFrameType>
 8050976:	4605      	mov	r5, r0
 8050978:	2800      	cmp	r0, #0
 805097a:	d146      	bne.n	8050a0a <ProcessRadioRxDone+0x362>
            downLinkCounter = 0;
 805097c:	2300      	movs	r3, #0
 805097e:	9305      	str	r3, [sp, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8050980:	4603      	mov	r3, r0
 8050982:	e052      	b.n	8050a2a <ProcessRadioRxDone+0x382>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8050984:	4b05      	ldr	r3, [pc, #20]	; (805099c <ProcessRadioRxDone+0x2f4>)
 8050986:	2201      	movs	r2, #1
 8050988:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 805098c:	f7fe f884 	bl	804ea98 <PrepareRxDoneAbort>
                return;
 8050990:	e6e5      	b.n	805075e <ProcessRadioRxDone+0xb6>
 8050992:	bf00      	nop
 8050994:	2001b510 	.word	0x2001b510
 8050998:	20019b68 	.word	0x20019b68
 805099c:	200195e4 	.word	0x200195e4
 80509a0:	08059d2c 	.word	0x08059d2c
 80509a4:	01000400 	.word	0x01000400
 80509a8:	20019abc 	.word	0x20019abc
 80509ac:	01010100 	.word	0x01010100
 80509b0:	2001981c 	.word	0x2001981c
                if( LoRaMacClassBIsPingExpected( ) == true )
 80509b4:	f001 fcfe 	bl	80523b4 <LoRaMacClassBIsPingExpected>
 80509b8:	b188      	cbz	r0, 80509de <ProcessRadioRxDone+0x336>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80509ba:	2000      	movs	r0, #0
 80509bc:	f001 fcef 	bl	805239e <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 80509c0:	2000      	movs	r0, #0
 80509c2:	f001 fcf1 	bl	80523a8 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 80509c6:	4bbd      	ldr	r3, [pc, #756]	; (8050cbc <ProcessRadioRxDone+0x614>)
 80509c8:	2204      	movs	r2, #4
 80509ca:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80509ce:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 80509d2:	f3c1 1100 	ubfx	r1, r1, #4, #1
 80509d6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80509d8:	f001 fd06 	bl	80523e8 <LoRaMacClassBSetFPendingBit>
 80509dc:	e7c2      	b.n	8050964 <ProcessRadioRxDone+0x2bc>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 80509de:	f001 fceb 	bl	80523b8 <LoRaMacClassBIsMulticastExpected>
 80509e2:	2800      	cmp	r0, #0
 80509e4:	d0be      	beq.n	8050964 <ProcessRadioRxDone+0x2bc>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80509e6:	2000      	movs	r0, #0
 80509e8:	f001 fcda 	bl	80523a0 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 80509ec:	2000      	movs	r0, #0
 80509ee:	f001 fcdc 	bl	80523aa <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 80509f2:	4bb2      	ldr	r3, [pc, #712]	; (8050cbc <ProcessRadioRxDone+0x614>)
 80509f4:	2205      	movs	r2, #5
 80509f6:	f883 2431 	strb.w	r2, [r3, #1073]	; 0x431
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 80509fa:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 80509fe:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8050a02:	9812      	ldr	r0, [sp, #72]	; 0x48
 8050a04:	f001 fcf0 	bl	80523e8 <LoRaMacClassBSetFPendingBit>
 8050a08:	e7ac      	b.n	8050964 <ProcessRadioRxDone+0x2bc>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8050a0a:	4bac      	ldr	r3, [pc, #688]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050a0c:	2201      	movs	r2, #1
 8050a0e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8050a12:	f7fe f841 	bl	804ea98 <PrepareRxDoneAbort>
                return;
 8050a16:	e6a2      	b.n	805075e <ProcessRadioRxDone+0xb6>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8050a18:	4ba8      	ldr	r3, [pc, #672]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050a1a:	2103      	movs	r1, #3
 8050a1c:	f883 1431 	strb.w	r1, [r3, #1073]	; 0x431
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8050a20:	4690      	mov	r8, r2
                    multicast = 1;
 8050a22:	2501      	movs	r5, #1
 8050a24:	e027      	b.n	8050a76 <ProcessRadioRxDone+0x3ce>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8050a26:	3301      	adds	r3, #1
 8050a28:	b2db      	uxtb	r3, r3
 8050a2a:	2b03      	cmp	r3, #3
 8050a2c:	d822      	bhi.n	8050a74 <ProcessRadioRxDone+0x3cc>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8050a2e:	4618      	mov	r0, r3
 8050a30:	49a3      	ldr	r1, [pc, #652]	; (8050cc0 <ProcessRadioRxDone+0x618>)
 8050a32:	222c      	movs	r2, #44	; 0x2c
 8050a34:	fb02 1203 	mla	r2, r2, r3, r1
 8050a38:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 8050a3c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8050a3e:	428a      	cmp	r2, r1
 8050a40:	d1f1      	bne.n	8050a26 <ProcessRadioRxDone+0x37e>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8050a42:	4e9f      	ldr	r6, [pc, #636]	; (8050cc0 <ProcessRadioRxDone+0x618>)
 8050a44:	212c      	movs	r1, #44	; 0x2c
 8050a46:	fb01 6103 	mla	r1, r1, r3, r6
 8050a4a:	f891 10e2 	ldrb.w	r1, [r1, #226]	; 0xe2
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8050a4e:	2900      	cmp	r1, #0
 8050a50:	d0e9      	beq.n	8050a26 <ProcessRadioRxDone+0x37e>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8050a52:	4633      	mov	r3, r6
 8050a54:	212c      	movs	r1, #44	; 0x2c
 8050a56:	fb01 6000 	mla	r0, r1, r0, r6
 8050a5a:	f890 60e3 	ldrb.w	r6, [r0, #227]	; 0xe3
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8050a5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8050a62:	6809      	ldr	r1, [r1, #0]
 8050a64:	9105      	str	r1, [sp, #20]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8050a66:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8050a6a:	2b02      	cmp	r3, #2
 8050a6c:	d0d4      	beq.n	8050a18 <ProcessRadioRxDone+0x370>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8050a6e:	4690      	mov	r8, r2
                    multicast = 1;
 8050a70:	2501      	movs	r5, #1
 8050a72:	e000      	b.n	8050a76 <ProcessRadioRxDone+0x3ce>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8050a74:	2604      	movs	r6, #4
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8050a76:	2d01      	cmp	r5, #1
 8050a78:	d108      	bne.n	8050a8c <ProcessRadioRxDone+0x3e4>
 8050a7a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8050a7e:	2b03      	cmp	r3, #3
 8050a80:	d120      	bne.n	8050ac4 <ProcessRadioRxDone+0x41c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8050a82:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8050a86:	f013 0f60 	tst.w	r3, #96	; 0x60
 8050a8a:	d11b      	bne.n	8050ac4 <ProcessRadioRxDone+0x41c>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8050a8c:	ab05      	add	r3, sp, #20
 8050a8e:	9301      	str	r3, [sp, #4]
 8050a90:	f10d 0313 	add.w	r3, sp, #19
 8050a94:	9300      	str	r3, [sp, #0]
 8050a96:	4b8a      	ldr	r3, [pc, #552]	; (8050cc0 <ProcessRadioRxDone+0x618>)
 8050a98:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8050a9c:	aa10      	add	r2, sp, #64	; 0x40
 8050a9e:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8050aa2:	4630      	mov	r0, r6
 8050aa4:	f7fe f832 	bl	804eb0c <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8050aa8:	b1c0      	cbz	r0, 8050adc <ProcessRadioRxDone+0x434>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8050aaa:	2807      	cmp	r0, #7
 8050aac:	d011      	beq.n	8050ad2 <ProcessRadioRxDone+0x42a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8050aae:	4b83      	ldr	r3, [pc, #524]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050ab0:	2201      	movs	r2, #1
 8050ab2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8050ab6:	4b81      	ldr	r3, [pc, #516]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050ab8:	9a05      	ldr	r2, [sp, #20]
 8050aba:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
                PrepareRxDoneAbort( );
 8050abe:	f7fd ffeb 	bl	804ea98 <PrepareRxDoneAbort>
                return;
 8050ac2:	e64c      	b.n	805075e <ProcessRadioRxDone+0xb6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8050ac4:	4b7d      	ldr	r3, [pc, #500]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050ac6:	2201      	movs	r2, #1
 8050ac8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8050acc:	f7fd ffe4 	bl	804ea98 <PrepareRxDoneAbort>
                return;
 8050ad0:	e645      	b.n	805075e <ProcessRadioRxDone+0xb6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8050ad2:	4b7a      	ldr	r3, [pc, #488]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050ad4:	2208      	movs	r2, #8
 8050ad6:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8050ada:	e7ec      	b.n	8050ab6 <ProcessRadioRxDone+0x40e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8050adc:	ab10      	add	r3, sp, #64	; 0x40
 8050ade:	9300      	str	r3, [sp, #0]
 8050ae0:	9b05      	ldr	r3, [sp, #20]
 8050ae2:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8050ae6:	4641      	mov	r1, r8
 8050ae8:	4630      	mov	r0, r6
 8050aea:	f002 fc0d 	bl	8053308 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8050aee:	2800      	cmp	r0, #0
 8050af0:	d13b      	bne.n	8050b6a <ProcessRadioRxDone+0x4c2>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8050af2:	4b72      	ldr	r3, [pc, #456]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050af4:	2100      	movs	r1, #0
 8050af6:	f883 1421 	strb.w	r1, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8050afa:	f883 5422 	strb.w	r5, [r3, #1058]	; 0x422
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 8050afe:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8050b02:	f3c2 1000 	ubfx	r0, r2, #4, #1
 8050b06:	f883 0425 	strb.w	r0, [r3, #1061]	; 0x425
            MacCtx.McpsIndication.Buffer = NULL;
 8050b0a:	f8c3 1428 	str.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8050b0e:	f883 142c 	strb.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8050b12:	9805      	ldr	r0, [sp, #20]
 8050b14:	f8c3 0434 	str.w	r0, [r3, #1076]	; 0x434
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8050b18:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8050b1c:	f883 2432 	strb.w	r2, [r3, #1074]	; 0x432
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8050b20:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8050b24:	f883 2448 	strb.w	r2, [r3, #1096]	; 0x448
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 8050b28:	f893 0431 	ldrb.w	r0, [r3, #1073]	; 0x431
 8050b2c:	2801      	cmp	r0, #1
 8050b2e:	d92a      	bls.n	8050b86 <ProcessRadioRxDone+0x4de>
            if( multicast == 1 )
 8050b30:	2d01      	cmp	r5, #1
 8050b32:	d02e      	beq.n	8050b92 <ProcessRadioRxDone+0x4ea>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8050b34:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 8050b38:	2ca0      	cmp	r4, #160	; 0xa0
 8050b3a:	d02f      	beq.n	8050b9c <ProcessRadioRxDone+0x4f4>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8050b3c:	2300      	movs	r3, #0
 8050b3e:	4a60      	ldr	r2, [pc, #384]	; (8050cc0 <ProcessRadioRxDone+0x618>)
 8050b40:	f882 304a 	strb.w	r3, [r2, #74]	; 0x4a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8050b44:	4a5d      	ldr	r2, [pc, #372]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050b46:	f882 3420 	strb.w	r3, [r2, #1056]	; 0x420
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8050b4a:	4b5c      	ldr	r3, [pc, #368]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050b4c:	f893 2444 	ldrb.w	r2, [r3, #1092]	; 0x444
 8050b50:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
 8050b54:	f7fe f811 	bl	804eb7a <RemoveMacCommands>
            switch( fType )
 8050b58:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8050b5c:	2b03      	cmp	r3, #3
 8050b5e:	f200 8094 	bhi.w	8050c8a <ProcessRadioRxDone+0x5e2>
 8050b62:	e8df f003 	tbb	[pc, r3]
 8050b66:	6034      	.short	0x6034
 8050b68:	8272      	.short	0x8272
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8050b6a:	2802      	cmp	r0, #2
 8050b6c:	d006      	beq.n	8050b7c <ProcessRadioRxDone+0x4d4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8050b6e:	4b53      	ldr	r3, [pc, #332]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050b70:	220b      	movs	r2, #11
 8050b72:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8050b76:	f7fd ff8f 	bl	804ea98 <PrepareRxDoneAbort>
                return;
 8050b7a:	e5f0      	b.n	805075e <ProcessRadioRxDone+0xb6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8050b7c:	4b4f      	ldr	r3, [pc, #316]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050b7e:	220a      	movs	r2, #10
 8050b80:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8050b84:	e7f7      	b.n	8050b76 <ProcessRadioRxDone+0x4ce>
                Nvm.MacGroup1.AdrAckCounter = 0;
 8050b86:	4b4e      	ldr	r3, [pc, #312]	; (8050cc0 <ProcessRadioRxDone+0x618>)
 8050b88:	6399      	str	r1, [r3, #56]	; 0x38
                Nvm.MacGroup2.DownlinkReceived = true;
 8050b8a:	2201      	movs	r2, #1
 8050b8c:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
 8050b90:	e7ce      	b.n	8050b30 <ProcessRadioRxDone+0x488>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8050b92:	4b4a      	ldr	r3, [pc, #296]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050b94:	2202      	movs	r2, #2
 8050b96:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 8050b9a:	e7d6      	b.n	8050b4a <ProcessRadioRxDone+0x4a2>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8050b9c:	4b48      	ldr	r3, [pc, #288]	; (8050cc0 <ProcessRadioRxDone+0x618>)
 8050b9e:	2201      	movs	r2, #1
 8050ba0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8050ba4:	f893 31a6 	ldrb.w	r3, [r3, #422]	; 0x1a6
 8050ba8:	b913      	cbnz	r3, 8050bb0 <ProcessRadioRxDone+0x508>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8050baa:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8050bac:	4b44      	ldr	r3, [pc, #272]	; (8050cc0 <ProcessRadioRxDone+0x618>)
 8050bae:	645a      	str	r2, [r3, #68]	; 0x44
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8050bb0:	4b42      	ldr	r3, [pc, #264]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050bb2:	2201      	movs	r2, #1
 8050bb4:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
                    if( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8050bb8:	4290      	cmp	r0, r2
 8050bba:	d9c6      	bls.n	8050b4a <ProcessRadioRxDone+0x4a2>
                        MacCtx.McpsIndication.ResponseTimeout = REGION_COMMON_CLASS_B_C_RESP_TIMEOUT;
 8050bbc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8050bc0:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 8050bc4:	4a3f      	ldr	r2, [pc, #252]	; (8050cc4 <ProcessRadioRxDone+0x61c>)
 8050bc6:	6812      	ldr	r2, [r2, #0]
 8050bc8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
 8050bcc:	e7bd      	b.n	8050b4a <ProcessRadioRxDone+0x4a2>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8050bce:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8050bd2:	4c3a      	ldr	r4, [pc, #232]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050bd4:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8050bd8:	9300      	str	r3, [sp, #0]
 8050bda:	463b      	mov	r3, r7
 8050bdc:	f002 020f 	and.w	r2, r2, #15
 8050be0:	2100      	movs	r1, #0
 8050be2:	a814      	add	r0, sp, #80	; 0x50
 8050be4:	f7ff f8b0 	bl	804fd48 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8050be8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8050bec:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8050bf0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8050bf2:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8050bf6:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8050bfa:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8050bfe:	2301      	movs	r3, #1
 8050c00:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
            if( Nvm.MacGroup2.IsRejoinRequestPending == true )
 8050c04:	4b2e      	ldr	r3, [pc, #184]	; (8050cc0 <ProcessRadioRxDone+0x618>)
 8050c06:	f893 31bc 	ldrb.w	r3, [r3, #444]	; 0x1bc
 8050c0a:	2b00      	cmp	r3, #0
 8050c0c:	d144      	bne.n	8050c98 <ProcessRadioRxDone+0x5f0>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && (Nvm.MacGroup2.IsCertPortOn == false ) )
 8050c0e:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8050c12:	2be0      	cmp	r3, #224	; 0xe0
 8050c14:	d058      	beq.n	8050cc8 <ProcessRadioRxDone+0x620>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8050c16:	4a29      	ldr	r2, [pc, #164]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050c18:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
 8050c1c:	f043 0302 	orr.w	r3, r3, #2
 8050c20:	f882 348d 	strb.w	r3, [r2, #1165]	; 0x48d
            break;
 8050c24:	e07a      	b.n	8050d1c <ProcessRadioRxDone+0x674>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 8050c26:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8050c2a:	4c24      	ldr	r4, [pc, #144]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050c2c:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8050c30:	9300      	str	r3, [sp, #0]
 8050c32:	463b      	mov	r3, r7
 8050c34:	f002 020f 	and.w	r2, r2, #15
 8050c38:	2100      	movs	r1, #0
 8050c3a:	a814      	add	r0, sp, #80	; 0x50
 8050c3c:	f7ff f884 	bl	804fd48 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8050c40:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8050c44:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 8050c48:	e7dc      	b.n	8050c04 <ProcessRadioRxDone+0x55c>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 8050c4a:	4c1c      	ldr	r4, [pc, #112]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050c4c:	f894 3431 	ldrb.w	r3, [r4, #1073]	; 0x431
 8050c50:	9300      	str	r3, [sp, #0]
 8050c52:	463b      	mov	r3, r7
 8050c54:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8050c58:	2100      	movs	r1, #0
 8050c5a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8050c5c:	f7ff f874 	bl	804fd48 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8050c60:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 8050c64:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 8050c68:	e7cc      	b.n	8050c04 <ProcessRadioRxDone+0x55c>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8050c6a:	f89d 2060 	ldrb.w	r2, [sp, #96]	; 0x60
 8050c6e:	4b13      	ldr	r3, [pc, #76]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050c70:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8050c74:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8050c76:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8050c7a:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 8050c7e:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 8050c82:	2201      	movs	r2, #1
 8050c84:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 8050c88:	e7bc      	b.n	8050c04 <ProcessRadioRxDone+0x55c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8050c8a:	4b0c      	ldr	r3, [pc, #48]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050c8c:	2201      	movs	r2, #1
 8050c8e:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 8050c92:	f7fd ff01 	bl	804ea98 <PrepareRxDoneAbort>
                    break;
 8050c96:	e7b5      	b.n	8050c04 <ProcessRadioRxDone+0x55c>
                Nvm.MacGroup2.IsRejoinRequestPending = false;
 8050c98:	4b09      	ldr	r3, [pc, #36]	; (8050cc0 <ProcessRadioRxDone+0x618>)
 8050c9a:	2200      	movs	r2, #0
 8050c9c:	f883 21bc 	strb.w	r2, [r3, #444]	; 0x1bc
                TimerStop( &MacCtx.ForceRejoinReqCycleTimer );
 8050ca0:	4c06      	ldr	r4, [pc, #24]	; (8050cbc <ProcessRadioRxDone+0x614>)
 8050ca2:	f504 609b 	add.w	r0, r4, #1240	; 0x4d8
 8050ca6:	f7f2 fa5b 	bl	8043160 <TimerStop>
                if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8050caa:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8050cae:	f013 0f04 	tst.w	r3, #4
 8050cb2:	d0ac      	beq.n	8050c0e <ProcessRadioRxDone+0x566>
                    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8050cb4:	2200      	movs	r2, #0
 8050cb6:	f884 2459 	strb.w	r2, [r4, #1113]	; 0x459
 8050cba:	e7a8      	b.n	8050c0e <ProcessRadioRxDone+0x566>
 8050cbc:	200195e4 	.word	0x200195e4
 8050cc0:	20019b68 	.word	0x20019b68
 8050cc4:	2001b510 	.word	0x2001b510
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && (Nvm.MacGroup2.IsCertPortOn == false ) )
 8050cc8:	4a23      	ldr	r2, [pc, #140]	; (8050d58 <ProcessRadioRxDone+0x6b0>)
 8050cca:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8050cce:	2a00      	cmp	r2, #0
 8050cd0:	d1a1      	bne.n	8050c16 <ProcessRadioRxDone+0x56e>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 8050cd2:	4a22      	ldr	r2, [pc, #136]	; (8050d5c <ProcessRadioRxDone+0x6b4>)
 8050cd4:	f882 3423 	strb.w	r3, [r2, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 8050cd8:	2300      	movs	r3, #0
 8050cda:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 8050cde:	f882 342c 	strb.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 8050ce2:	f882 342d 	strb.w	r3, [r2, #1069]	; 0x42d
 8050ce6:	e796      	b.n	8050c16 <ProcessRadioRxDone+0x56e>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 8050ce8:	1e6a      	subs	r2, r5, #1
 8050cea:	4c1c      	ldr	r4, [pc, #112]	; (8050d5c <ProcessRadioRxDone+0x6b4>)
 8050cec:	f504 770e 	add.w	r7, r4, #568	; 0x238
 8050cf0:	b292      	uxth	r2, r2
 8050cf2:	1c71      	adds	r1, r6, #1
 8050cf4:	4638      	mov	r0, r7
 8050cf6:	f004 f8da 	bl	8054eae <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 8050cfa:	2303      	movs	r3, #3
 8050cfc:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8050d00:	2300      	movs	r3, #0
 8050d02:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 8050d06:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 8050d0a:	3d01      	subs	r5, #1
 8050d0c:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8050d10:	f894 348d 	ldrb.w	r3, [r4, #1165]	; 0x48d
 8050d14:	f043 0302 	orr.w	r3, r3, #2
 8050d18:	f884 348d 	strb.w	r3, [r4, #1165]	; 0x48d
    if( MacCtx.NodeAckRequested == true )
 8050d1c:	4b0f      	ldr	r3, [pc, #60]	; (8050d5c <ProcessRadioRxDone+0x6b4>)
 8050d1e:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8050d22:	b11b      	cbz	r3, 8050d2c <ProcessRadioRxDone+0x684>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8050d24:	4b0d      	ldr	r3, [pc, #52]	; (8050d5c <ProcessRadioRxDone+0x6b4>)
 8050d26:	f893 3448 	ldrb.w	r3, [r3, #1096]	; 0x448
 8050d2a:	b983      	cbnz	r3, 8050d4e <ProcessRadioRxDone+0x6a6>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8050d2c:	4a0b      	ldr	r2, [pc, #44]	; (8050d5c <ProcessRadioRxDone+0x6b4>)
 8050d2e:	f892 348d 	ldrb.w	r3, [r2, #1165]	; 0x48d
 8050d32:	f043 0320 	orr.w	r3, r3, #32
 8050d36:	f882 348d 	strb.w	r3, [r2, #1165]	; 0x48d
    UpdateRxSlotIdleState( );
 8050d3a:	f7fd fce1 	bl	804e700 <UpdateRxSlotIdleState>
 8050d3e:	e50e      	b.n	805075e <ProcessRadioRxDone+0xb6>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8050d40:	4b06      	ldr	r3, [pc, #24]	; (8050d5c <ProcessRadioRxDone+0x6b4>)
 8050d42:	2201      	movs	r2, #1
 8050d44:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 8050d48:	f7fd fea6 	bl	804ea98 <PrepareRxDoneAbort>
            break;
 8050d4c:	e7e6      	b.n	8050d1c <ProcessRadioRxDone+0x674>
            OnRetransmitTimeoutTimerEvent( NULL );
 8050d4e:	2000      	movs	r0, #0
 8050d50:	f7fd fe8c 	bl	804ea6c <OnRetransmitTimeoutTimerEvent>
 8050d54:	e7ea      	b.n	8050d2c <ProcessRadioRxDone+0x684>
 8050d56:	bf00      	nop
 8050d58:	20019b68 	.word	0x20019b68
 8050d5c:	200195e4 	.word	0x200195e4

08050d60 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8050d60:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8050d64:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 8050d66:	4a14      	ldr	r2, [pc, #80]	; (8050db8 <LoRaMacHandleIrqEvents+0x58>)
 8050d68:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8050d6a:	2000      	movs	r0, #0
 8050d6c:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8050d6e:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8050d72:	b303      	cbz	r3, 8050db6 <LoRaMacHandleIrqEvents+0x56>
{
 8050d74:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 8050d76:	b2dc      	uxtb	r4, r3
 8050d78:	f013 0f10 	tst.w	r3, #16
 8050d7c:	d10c      	bne.n	8050d98 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 8050d7e:	f014 0f08 	tst.w	r4, #8
 8050d82:	d10c      	bne.n	8050d9e <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 8050d84:	f014 0f04 	tst.w	r4, #4
 8050d88:	d10c      	bne.n	8050da4 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 8050d8a:	f014 0f02 	tst.w	r4, #2
 8050d8e:	d10c      	bne.n	8050daa <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 8050d90:	f014 0f01 	tst.w	r4, #1
 8050d94:	d10c      	bne.n	8050db0 <LoRaMacHandleIrqEvents+0x50>
}
 8050d96:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 8050d98:	f7fd fdf2 	bl	804e980 <ProcessRadioTxDone>
 8050d9c:	e7ef      	b.n	8050d7e <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 8050d9e:	f7ff fc83 	bl	80506a8 <ProcessRadioRxDone>
 8050da2:	e7ef      	b.n	8050d84 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 8050da4:	f7fd ff52 	bl	804ec4c <ProcessRadioTxTimeout>
 8050da8:	e7ef      	b.n	8050d8a <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 8050daa:	f7fe f801 	bl	804edb0 <ProcessRadioRxError>
 8050dae:	e7ef      	b.n	8050d90 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 8050db0:	f7fe f804 	bl	804edbc <ProcessRadioRxTimeout>
}
 8050db4:	e7ef      	b.n	8050d96 <LoRaMacHandleIrqEvents+0x36>
 8050db6:	4770      	bx	lr
 8050db8:	200195e0 	.word	0x200195e0

08050dbc <LoRaMacProcess>:
{
 8050dbc:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 8050dbe:	f7ff ffcf 	bl	8050d60 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8050dc2:	f001 fb12 	bl	80523ea <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8050dc6:	4b15      	ldr	r3, [pc, #84]	; (8050e1c <LoRaMacProcess+0x60>)
 8050dc8:	f893 348d 	ldrb.w	r3, [r3, #1165]	; 0x48d
 8050dcc:	f013 0f20 	tst.w	r3, #32
 8050dd0:	d107      	bne.n	8050de2 <LoRaMacProcess+0x26>
    LoRaMacHandleIndicationEvents( );
 8050dd2:	f7fd fcaf 	bl	804e734 <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8050dd6:	4b11      	ldr	r3, [pc, #68]	; (8050e1c <LoRaMacProcess+0x60>)
 8050dd8:	f893 348c 	ldrb.w	r3, [r3, #1164]	; 0x48c
 8050ddc:	2b02      	cmp	r3, #2
 8050dde:	d01a      	beq.n	8050e16 <LoRaMacProcess+0x5a>
}
 8050de0:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8050de2:	2000      	movs	r0, #0
 8050de4:	f7fd fca0 	bl	804e728 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8050de8:	f7fd fcf2 	bl	804e7d0 <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 8050dec:	f7fd fd84 	bl	804e8f8 <IsRequestPending>
 8050df0:	b110      	cbz	r0, 8050df8 <LoRaMacProcess+0x3c>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8050df2:	f7fd fe6d 	bl	804ead0 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 8050df6:	b918      	cbnz	r0, 8050e00 <LoRaMacProcess+0x44>
            LoRaMacHandleMlmeRequest( );
 8050df8:	f7fd ffe6 	bl	804edc8 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8050dfc:	f7ff fb50 	bl	80504a0 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 8050e00:	f7fe f898 	bl	804ef34 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 8050e04:	f7fe f8e0 	bl	804efc8 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacHandleNvm( &Nvm );
 8050e08:	4805      	ldr	r0, [pc, #20]	; (8050e20 <LoRaMacProcess+0x64>)
 8050e0a:	f7fe f8f5 	bl	804eff8 <LoRaMacHandleNvm>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8050e0e:	2001      	movs	r0, #1
 8050e10:	f7fd fc8a 	bl	804e728 <LoRaMacEnableRequests>
 8050e14:	e7dd      	b.n	8050dd2 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 8050e16:	f7fe f9e1 	bl	804f1dc <OpenContinuousRxCWindow>
}
 8050e1a:	e7e1      	b.n	8050de0 <LoRaMacProcess+0x24>
 8050e1c:	200195e4 	.word	0x200195e4
 8050e20:	20019b68 	.word	0x20019b68

08050e24 <LoRaMacInitialization>:
{
 8050e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8050e28:	b089      	sub	sp, #36	; 0x24
    if( ( primitives == NULL ) ||
 8050e2a:	2800      	cmp	r0, #0
 8050e2c:	f000 8192 	beq.w	8051154 <LoRaMacInitialization+0x330>
 8050e30:	460f      	mov	r7, r1
 8050e32:	4690      	mov	r8, r2
 8050e34:	4606      	mov	r6, r0
 8050e36:	2900      	cmp	r1, #0
 8050e38:	f000 818e 	beq.w	8051158 <LoRaMacInitialization+0x334>
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8050e3c:	6803      	ldr	r3, [r0, #0]
 8050e3e:	2b00      	cmp	r3, #0
 8050e40:	f000 818c 	beq.w	805115c <LoRaMacInitialization+0x338>
        ( primitives->MacMcpsIndication == NULL ) ||
 8050e44:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8050e46:	2b00      	cmp	r3, #0
 8050e48:	f000 818a 	beq.w	8051160 <LoRaMacInitialization+0x33c>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8050e4c:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8050e4e:	2b00      	cmp	r3, #0
 8050e50:	f000 8188 	beq.w	8051164 <LoRaMacInitialization+0x340>
        ( primitives->MacMlmeIndication == NULL ) )
 8050e54:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8050e56:	2b00      	cmp	r3, #0
 8050e58:	f000 8186 	beq.w	8051168 <LoRaMacInitialization+0x344>
    if( RegionIsActive( region ) == false )
 8050e5c:	4610      	mov	r0, r2
 8050e5e:	f002 fdef 	bl	8053a40 <RegionIsActive>
 8050e62:	2800      	cmp	r0, #0
 8050e64:	f000 8182 	beq.w	805116c <LoRaMacInitialization+0x348>
    LoRaMacConfirmQueueInit( primitives );
 8050e68:	4630      	mov	r0, r6
 8050e6a:	f001 fc9b 	bl	80527a4 <LoRaMacConfirmQueueInit>
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8050e6e:	4cc6      	ldr	r4, [pc, #792]	; (8051188 <LoRaMacInitialization+0x364>)
 8050e70:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8050e74:	2100      	movs	r1, #0
 8050e76:	4620      	mov	r0, r4
 8050e78:	f004 f82f 	bl	8054eda <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8050e7c:	4dc3      	ldr	r5, [pc, #780]	; (805118c <LoRaMacInitialization+0x368>)
 8050e7e:	f240 5284 	movw	r2, #1412	; 0x584
 8050e82:	2100      	movs	r1, #0
 8050e84:	4628      	mov	r0, r5
 8050e86:	f004 f828 	bl	8054eda <memset1>
    Nvm.MacGroup2.Region = region;
 8050e8a:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8050e8e:	f04f 0900 	mov.w	r9, #0
 8050e92:	f884 9190 	strb.w	r9, [r4, #400]	; 0x190
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8050e96:	4bbe      	ldr	r3, [pc, #760]	; (8051190 <LoRaMacInitialization+0x36c>)
 8050e98:	f8c4 31a4 	str.w	r3, [r4, #420]	; 0x1a4
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8050e9c:	230e      	movs	r3, #14
 8050e9e:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050ea2:	a906      	add	r1, sp, #24
 8050ea4:	4640      	mov	r0, r8
 8050ea6:	f002 fdd0 	bl	8053a4a <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8050eaa:	ebb0 0009 	subs.w	r0, r0, r9
 8050eae:	bf18      	it	ne
 8050eb0:	2001      	movne	r0, #1
 8050eb2:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8050eb6:	f04f 0b0a 	mov.w	fp, #10
 8050eba:	f88d b018 	strb.w	fp, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050ebe:	a906      	add	r1, sp, #24
 8050ec0:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050ec4:	f002 fdc1 	bl	8053a4a <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8050ec8:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
    getPhy.Attribute = PHY_DEF_TX_DR;
 8050ecc:	f04f 0a06 	mov.w	sl, #6
 8050ed0:	f88d a018 	strb.w	sl, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050ed4:	a906      	add	r1, sp, #24
 8050ed6:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050eda:	f002 fdb6 	bl	8053a4a <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8050ede:	f884 00d5 	strb.w	r0, [r4, #213]	; 0xd5
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8050ee2:	230f      	movs	r3, #15
 8050ee4:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050ee8:	a906      	add	r1, sp, #24
 8050eea:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050eee:	f002 fdac 	bl	8053a4a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8050ef2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8050ef6:	2310      	movs	r3, #16
 8050ef8:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050efc:	a906      	add	r1, sp, #24
 8050efe:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050f02:	f002 fda2 	bl	8053a4a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8050f06:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8050f0a:	2311      	movs	r3, #17
 8050f0c:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050f10:	a906      	add	r1, sp, #24
 8050f12:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050f16:	f002 fd98 	bl	8053a4a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8050f1a:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8050f1e:	2312      	movs	r3, #18
 8050f20:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050f24:	a906      	add	r1, sp, #24
 8050f26:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050f2a:	f002 fd8e 	bl	8053a4a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8050f2e:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8050f32:	2313      	movs	r3, #19
 8050f34:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050f38:	a906      	add	r1, sp, #24
 8050f3a:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050f3e:	f002 fd84 	bl	8053a4a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8050f42:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8050f46:	2315      	movs	r3, #21
 8050f48:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050f4c:	a906      	add	r1, sp, #24
 8050f4e:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050f52:	f002 fd7a 	bl	8053a4a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8050f56:	f884 00b5 	strb.w	r0, [r4, #181]	; 0xb5
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8050f5a:	2316      	movs	r3, #22
 8050f5c:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050f60:	a906      	add	r1, sp, #24
 8050f62:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050f66:	f002 fd70 	bl	8053a4a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8050f6a:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8050f6e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
    getPhy.Attribute = PHY_DEF_RX2_DR;
 8050f72:	2317      	movs	r3, #23
 8050f74:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050f78:	a906      	add	r1, sp, #24
 8050f7a:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050f7e:	f002 fd64 	bl	8053a4a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8050f82:	b2c0      	uxtb	r0, r0
 8050f84:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8050f88:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4
    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8050f8c:	231c      	movs	r3, #28
 8050f8e:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050f92:	a906      	add	r1, sp, #24
 8050f94:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050f98:	f002 fd57 	bl	8053a4a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8050f9c:	f884 00c8 	strb.w	r0, [r4, #200]	; 0xc8
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8050fa0:	231d      	movs	r3, #29
 8050fa2:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050fa6:	a906      	add	r1, sp, #24
 8050fa8:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050fac:	f002 fd4d 	bl	8053a4a <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8050fb0:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8050fb4:	231e      	movs	r3, #30
 8050fb6:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050fba:	a906      	add	r1, sp, #24
 8050fbc:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050fc0:	f002 fd43 	bl	8053a4a <RegionGetPhyParam>
 8050fc4:	9005      	str	r0, [sp, #20]
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8050fc6:	9b05      	ldr	r3, [sp, #20]
 8050fc8:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8050fcc:	231f      	movs	r3, #31
 8050fce:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050fd2:	a906      	add	r1, sp, #24
 8050fd4:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050fd8:	f002 fd37 	bl	8053a4a <RegionGetPhyParam>
 8050fdc:	9005      	str	r0, [sp, #20]
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8050fde:	9b05      	ldr	r3, [sp, #20]
 8050fe0:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8050fe4:	230b      	movs	r3, #11
 8050fe6:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050fea:	a906      	add	r1, sp, #24
 8050fec:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8050ff0:	f002 fd2b 	bl	8053a4a <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 8050ff4:	f8a5 03fc 	strh.w	r0, [r5, #1020]	; 0x3fc
    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8050ff8:	230c      	movs	r3, #12
 8050ffa:	f88d 3018 	strb.w	r3, [sp, #24]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8050ffe:	a906      	add	r1, sp, #24
 8051000:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8051004:	f002 fd21 	bl	8053a4a <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 8051008:	f8a5 03fe 	strh.w	r0, [r5, #1022]	; 0x3fe
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 805100c:	f04f 0801 	mov.w	r8, #1
 8051010:	f884 80b4 	strb.w	r8, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8051014:	f8c4 b098 	str.w	fp, [r4, #152]	; 0x98
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8051018:	f884 a09c 	strb.w	sl, [r4, #156]	; 0x9c
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 805101c:	f8c4 b05c 	str.w	fp, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8051020:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8051024:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 8051028:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 805102a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 805102e:	66a3      	str	r3, [r4, #104]	; 0x68
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8051030:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8051034:	66e3      	str	r3, [r4, #108]	; 0x6c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8051036:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 805103a:	6723      	str	r3, [r4, #112]	; 0x70
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 805103c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8051040:	6763      	str	r3, [r4, #116]	; 0x74
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8051042:	f884 8078 	strb.w	r8, [r4, #120]	; 0x78
    Nvm.MacGroup2.IsCertPortOn = true;
 8051046:	f884 8197 	strb.w	r8, [r4, #407]	; 0x197
    params.Type = INIT_TYPE_DEFAULTS;
 805104a:	f88d 9010 	strb.w	r9, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 805104e:	f504 73ee 	add.w	r3, r4, #476	; 0x1dc
 8051052:	9302      	str	r3, [sp, #8]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8051054:	f504 73fc 	add.w	r3, r4, #504	; 0x1f8
 8051058:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 805105a:	a902      	add	r1, sp, #8
 805105c:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8051060:	f002 fd0a 	bl	8053a78 <RegionInitDefaults>
    ResetMacParameters( );
 8051064:	f7fe fa8c 	bl	804f580 <ResetMacParameters>
    Nvm.MacGroup2.PublicNetwork = true;
 8051068:	f884 8191 	strb.w	r8, [r4, #401]	; 0x191
    MacCtx.MacPrimitives = primitives;
 805106c:	f8c5 6344 	str.w	r6, [r5, #836]	; 0x344
    MacCtx.MacCallbacks = callbacks;
 8051070:	f8c5 7348 	str.w	r7, [r5, #840]	; 0x348
    MacCtx.MacFlags.Value = 0;
 8051074:	f885 948d 	strb.w	r9, [r5, #1165]	; 0x48d
    MacCtx.MacState = LORAMAC_STOPPED;
 8051078:	f8c5 8340 	str.w	r8, [r5, #832]	; 0x340
    Nvm.MacGroup1.LastTxDoneTime = 0;
 805107c:	f8c4 903c 	str.w	r9, [r4, #60]	; 0x3c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8051080:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8051084:	4943      	ldr	r1, [pc, #268]	; (8051194 <LoRaMacInitialization+0x370>)
 8051086:	f505 705c 	add.w	r0, r5, #880	; 0x370
 805108a:	f7f1 ffeb 	bl	8043064 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 805108e:	4942      	ldr	r1, [pc, #264]	; (8051198 <LoRaMacInitialization+0x374>)
 8051090:	f505 7062 	add.w	r0, r5, #904	; 0x388
 8051094:	f7f1 ffe6 	bl	8043064 <TimerInit>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8051098:	4940      	ldr	r1, [pc, #256]	; (805119c <LoRaMacInitialization+0x378>)
 805109a:	f505 7068 	add.w	r0, r5, #928	; 0x3a0
 805109e:	f7f1 ffe1 	bl	8043064 <TimerInit>
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 80510a2:	493f      	ldr	r1, [pc, #252]	; (80511a0 <LoRaMacInitialization+0x37c>)
 80510a4:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 80510a8:	f7f1 ffdc 	bl	8043064 <TimerInit>
    TimerInit( &MacCtx.Rejoin0CycleTimer, OnRejoin0CycleTimerEvent );
 80510ac:	493d      	ldr	r1, [pc, #244]	; (80511a4 <LoRaMacInitialization+0x380>)
 80510ae:	f505 6092 	add.w	r0, r5, #1168	; 0x490
 80510b2:	f7f1 ffd7 	bl	8043064 <TimerInit>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
 80510b6:	493c      	ldr	r1, [pc, #240]	; (80511a8 <LoRaMacInitialization+0x384>)
 80510b8:	f505 6095 	add.w	r0, r5, #1192	; 0x4a8
 80510bc:	f7f1 ffd2 	bl	8043064 <TimerInit>
    TimerInit( &MacCtx.Rejoin2CycleTimer, OnRejoin2CycleTimerEvent );
 80510c0:	493a      	ldr	r1, [pc, #232]	; (80511ac <LoRaMacInitialization+0x388>)
 80510c2:	f505 6098 	add.w	r0, r5, #1216	; 0x4c0
 80510c6:	f7f1 ffcd 	bl	8043064 <TimerInit>
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
 80510ca:	4939      	ldr	r1, [pc, #228]	; (80511b0 <LoRaMacInitialization+0x38c>)
 80510cc:	f505 609b 	add.w	r0, r5, #1240	; 0x4d8
 80510d0:	f7f1 ffc8 	bl	8043064 <TimerInit>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80510d4:	466e      	mov	r6, sp
 80510d6:	4630      	mov	r0, r6
 80510d8:	f7f1 fe90 	bl	8042dfc <SysTimeGetMcuTime>
 80510dc:	f504 73ce 	add.w	r3, r4, #412	; 0x19c
 80510e0:	e896 0003 	ldmia.w	r6, {r0, r1}
 80510e4:	e883 0003 	stmia.w	r3, {r0, r1}
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80510e8:	4b32      	ldr	r3, [pc, #200]	; (80511b4 <LoRaMacInitialization+0x390>)
 80510ea:	f8c5 334c 	str.w	r3, [r5, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80510ee:	4b32      	ldr	r3, [pc, #200]	; (80511b8 <LoRaMacInitialization+0x394>)
 80510f0:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80510f4:	4b31      	ldr	r3, [pc, #196]	; (80511bc <LoRaMacInitialization+0x398>)
 80510f6:	f8c5 335c 	str.w	r3, [r5, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80510fa:	4b31      	ldr	r3, [pc, #196]	; (80511c0 <LoRaMacInitialization+0x39c>)
 80510fc:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8051100:	4b30      	ldr	r3, [pc, #192]	; (80511c4 <LoRaMacInitialization+0x3a0>)
 8051102:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8051106:	4b30      	ldr	r3, [pc, #192]	; (80511c8 <LoRaMacInitialization+0x3a4>)
 8051108:	681b      	ldr	r3, [r3, #0]
 805110a:	f505 7053 	add.w	r0, r5, #844	; 0x34c
 805110e:	4798      	blx	r3
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8051110:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
 8051114:	f7f2 fc6e 	bl	80439f4 <SecureElementInit>
 8051118:	bb68      	cbnz	r0, 8051176 <LoRaMacInitialization+0x352>
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 805111a:	4620      	mov	r0, r4
 805111c:	f001 ff40 	bl	8052fa0 <LoRaMacCryptoInit>
 8051120:	bb58      	cbnz	r0, 805117a <LoRaMacInitialization+0x356>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8051122:	f001 f9ef 	bl	8052504 <LoRaMacCommandsInit>
 8051126:	bb50      	cbnz	r0, 805117e <LoRaMacInitialization+0x35a>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8051128:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
 805112c:	f001 ffa4 	bl	8053078 <LoRaMacCryptoSetMulticastReference>
 8051130:	4604      	mov	r4, r0
 8051132:	bb30      	cbnz	r0, 8051182 <LoRaMacInitialization+0x35e>
    srand1( Radio.Random( ) );
 8051134:	4d24      	ldr	r5, [pc, #144]	; (80511c8 <LoRaMacInitialization+0x3a4>)
 8051136:	696b      	ldr	r3, [r5, #20]
 8051138:	4798      	blx	r3
 805113a:	f003 fea5 	bl	8054e88 <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 805113e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8051140:	4a11      	ldr	r2, [pc, #68]	; (8051188 <LoRaMacInitialization+0x364>)
 8051142:	f892 0191 	ldrb.w	r0, [r2, #401]	; 0x191
 8051146:	4798      	blx	r3
    Radio.Sleep( );
 8051148:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 805114a:	4798      	blx	r3
    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 805114c:	4640      	mov	r0, r8
 805114e:	f7fd faeb 	bl	804e728 <LoRaMacEnableRequests>
    return LORAMAC_STATUS_OK;
 8051152:	e00c      	b.n	805116e <LoRaMacInitialization+0x34a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8051154:	2403      	movs	r4, #3
 8051156:	e00a      	b.n	805116e <LoRaMacInitialization+0x34a>
 8051158:	2403      	movs	r4, #3
 805115a:	e008      	b.n	805116e <LoRaMacInitialization+0x34a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 805115c:	2403      	movs	r4, #3
 805115e:	e006      	b.n	805116e <LoRaMacInitialization+0x34a>
 8051160:	2403      	movs	r4, #3
 8051162:	e004      	b.n	805116e <LoRaMacInitialization+0x34a>
 8051164:	2403      	movs	r4, #3
 8051166:	e002      	b.n	805116e <LoRaMacInitialization+0x34a>
 8051168:	2403      	movs	r4, #3
 805116a:	e000      	b.n	805116e <LoRaMacInitialization+0x34a>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 805116c:	2409      	movs	r4, #9
}
 805116e:	4620      	mov	r0, r4
 8051170:	b009      	add	sp, #36	; 0x24
 8051172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8051176:	2411      	movs	r4, #17
 8051178:	e7f9      	b.n	805116e <LoRaMacInitialization+0x34a>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 805117a:	2411      	movs	r4, #17
 805117c:	e7f7      	b.n	805116e <LoRaMacInitialization+0x34a>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 805117e:	2413      	movs	r4, #19
 8051180:	e7f5      	b.n	805116e <LoRaMacInitialization+0x34a>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8051182:	2411      	movs	r4, #17
 8051184:	e7f3      	b.n	805116e <LoRaMacInitialization+0x34a>
 8051186:	bf00      	nop
 8051188:	20019b68 	.word	0x20019b68
 805118c:	200195e4 	.word	0x200195e4
 8051190:	01010100 	.word	0x01010100
 8051194:	0804fa6d 	.word	0x0804fa6d
 8051198:	0804f2d5 	.word	0x0804f2d5
 805119c:	0804f285 	.word	0x0804f285
 80511a0:	0804ea6d 	.word	0x0804ea6d
 80511a4:	080505ed 	.word	0x080505ed
 80511a8:	080505b1 	.word	0x080505b1
 80511ac:	08050575 	.word	0x08050575
 80511b0:	08050529 	.word	0x08050529
 80511b4:	0804f539 	.word	0x0804f539
 80511b8:	0804f4f1 	.word	0x0804f4f1
 80511bc:	0804e6b9 	.word	0x0804e6b9
 80511c0:	0804e695 	.word	0x0804e695
 80511c4:	0804e6dd 	.word	0x0804e6dd
 80511c8:	08059d2c 	.word	0x08059d2c

080511cc <LoRaMacStart>:
    MacCtx.MacState = LORAMAC_IDLE;
 80511cc:	2000      	movs	r0, #0
 80511ce:	4b02      	ldr	r3, [pc, #8]	; (80511d8 <LoRaMacStart+0xc>)
 80511d0:	f8c3 0340 	str.w	r0, [r3, #832]	; 0x340
}
 80511d4:	4770      	bx	lr
 80511d6:	bf00      	nop
 80511d8:	200195e4 	.word	0x200195e4

080511dc <LoRaMacQueryTxPossible>:
{
 80511dc:	b530      	push	{r4, r5, lr}
 80511de:	b08b      	sub	sp, #44	; 0x2c
 80511e0:	4604      	mov	r4, r0
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80511e2:	4b32      	ldr	r3, [pc, #200]	; (80512ac <LoRaMacQueryTxPossible+0xd0>)
 80511e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80511e6:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80511e8:	f993 20d5 	ldrsb.w	r2, [r3, #213]	; 0xd5
 80511ec:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80511f0:	f993 30d4 	ldrsb.w	r3, [r3, #212]	; 0xd4
 80511f4:	f88d 300e 	strb.w	r3, [sp, #14]
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 80511f8:	4b2d      	ldr	r3, [pc, #180]	; (80512b0 <LoRaMacQueryTxPossible+0xd4>)
 80511fa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80511fe:	f88d 200d 	strb.w	r2, [sp, #13]
    size_t macCmdsSize = 0;
 8051202:	2300      	movs	r3, #0
 8051204:	9302      	str	r3, [sp, #8]
    if( txInfo == NULL )
 8051206:	2900      	cmp	r1, #0
 8051208:	d049      	beq.n	805129e <LoRaMacQueryTxPossible+0xc2>
 805120a:	460d      	mov	r5, r1
    adrNext.UpdateChanMask = false;
 805120c:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8051210:	4b26      	ldr	r3, [pc, #152]	; (80512ac <LoRaMacQueryTxPossible+0xd0>)
 8051212:	f893 1192 	ldrb.w	r1, [r3, #402]	; 0x192
 8051216:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 805121a:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 805121c:	4924      	ldr	r1, [pc, #144]	; (80512b0 <LoRaMacQueryTxPossible+0xd4>)
 805121e:	f8b1 03fc 	ldrh.w	r0, [r1, #1020]	; 0x3fc
 8051222:	f8ad 001c 	strh.w	r0, [sp, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8051226:	f8b1 13fe 	ldrh.w	r1, [r1, #1022]	; 0x3fe
 805122a:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 805122e:	f993 1049 	ldrsb.w	r1, [r3, #73]	; 0x49
 8051232:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8051236:	f993 1048 	ldrsb.w	r1, [r3, #72]	; 0x48
 805123a:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 805123e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8051242:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8051246:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 805124a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 805124e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 8051252:	ab04      	add	r3, sp, #16
 8051254:	9300      	str	r3, [sp, #0]
 8051256:	f10d 030d 	add.w	r3, sp, #13
 805125a:	f10d 020e 	add.w	r2, sp, #14
 805125e:	f10d 010f 	add.w	r1, sp, #15
 8051262:	a805      	add	r0, sp, #20
 8051264:	f001 f822 	bl	80522ac <LoRaMacAdrCalcNext>
    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8051268:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 805126c:	f7fd fb5e 	bl	804e92c <GetMaxAppPayloadWithoutFOptsLength>
 8051270:	7068      	strb	r0, [r5, #1]
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8051272:	a802      	add	r0, sp, #8
 8051274:	f001 f9da 	bl	805262c <LoRaMacCommandsGetSizeSerializedCmds>
 8051278:	b998      	cbnz	r0, 80512a2 <LoRaMacQueryTxPossible+0xc6>
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 805127a:	9b02      	ldr	r3, [sp, #8]
 805127c:	2b0f      	cmp	r3, #15
 805127e:	d80a      	bhi.n	8051296 <LoRaMacQueryTxPossible+0xba>
 8051280:	786a      	ldrb	r2, [r5, #1]
 8051282:	4293      	cmp	r3, r2
 8051284:	d807      	bhi.n	8051296 <LoRaMacQueryTxPossible+0xba>
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8051286:	1ad3      	subs	r3, r2, r3
 8051288:	702b      	strb	r3, [r5, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 805128a:	9b02      	ldr	r3, [sp, #8]
 805128c:	441c      	add	r4, r3
 805128e:	42a2      	cmp	r2, r4
 8051290:	d309      	bcc.n	80512a6 <LoRaMacQueryTxPossible+0xca>
}
 8051292:	b00b      	add	sp, #44	; 0x2c
 8051294:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8051296:	2300      	movs	r3, #0
 8051298:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 805129a:	2008      	movs	r0, #8
 805129c:	e7f9      	b.n	8051292 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 805129e:	2003      	movs	r0, #3
 80512a0:	e7f7      	b.n	8051292 <LoRaMacQueryTxPossible+0xb6>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80512a2:	2013      	movs	r0, #19
 80512a4:	e7f5      	b.n	8051292 <LoRaMacQueryTxPossible+0xb6>
           return LORAMAC_STATUS_LENGTH_ERROR;
 80512a6:	2008      	movs	r0, #8
 80512a8:	e7f3      	b.n	8051292 <LoRaMacQueryTxPossible+0xb6>
 80512aa:	bf00      	nop
 80512ac:	20019b68 	.word	0x20019b68
 80512b0:	200195e4 	.word	0x200195e4

080512b4 <LoRaMacMibGetRequestConfirm>:
    if( mibGet == NULL )
 80512b4:	2800      	cmp	r0, #0
 80512b6:	f000 8150 	beq.w	805155a <LoRaMacMibGetRequestConfirm+0x2a6>
{
 80512ba:	b510      	push	{r4, lr}
 80512bc:	b084      	sub	sp, #16
 80512be:	4604      	mov	r4, r0
    switch( mibGet->Type )
 80512c0:	7800      	ldrb	r0, [r0, #0]
 80512c2:	2847      	cmp	r0, #71	; 0x47
 80512c4:	f200 8145 	bhi.w	8051552 <LoRaMacMibGetRequestConfirm+0x29e>
 80512c8:	e8df f010 	tbh	[pc, r0, lsl #1]
 80512cc:	004e0048 	.word	0x004e0048
 80512d0:	00590054 	.word	0x00590054
 80512d4:	0063005e 	.word	0x0063005e
 80512d8:	006f0069 	.word	0x006f0069
 80512dc:	01430143 	.word	0x01430143
 80512e0:	01430143 	.word	0x01430143
 80512e4:	01430143 	.word	0x01430143
 80512e8:	01430143 	.word	0x01430143
 80512ec:	01430143 	.word	0x01430143
 80512f0:	01430143 	.word	0x01430143
 80512f4:	01430143 	.word	0x01430143
 80512f8:	01430143 	.word	0x01430143
 80512fc:	01430143 	.word	0x01430143
 8051300:	01430143 	.word	0x01430143
 8051304:	00750143 	.word	0x00750143
 8051308:	0087007b 	.word	0x0087007b
 805130c:	0097008f 	.word	0x0097008f
 8051310:	00b3009f 	.word	0x00b3009f
 8051314:	00bf00a7 	.word	0x00bf00a7
 8051318:	00ca00c5 	.word	0x00ca00c5
 805131c:	00d400cf 	.word	0x00d400cf
 8051320:	00de00d9 	.word	0x00de00d9
 8051324:	00f400ee 	.word	0x00f400ee
 8051328:	00fa0100 	.word	0x00fa0100
 805132c:	010b0106 	.word	0x010b0106
 8051330:	011c0111 	.word	0x011c0111
 8051334:	01430117 	.word	0x01430117
 8051338:	01310122 	.word	0x01310122
 805133c:	013d0137 	.word	0x013d0137
 8051340:	01430143 	.word	0x01430143
 8051344:	01430143 	.word	0x01430143
 8051348:	01430143 	.word	0x01430143
 805134c:	01430143 	.word	0x01430143
 8051350:	01430143 	.word	0x01430143
 8051354:	01430143 	.word	0x01430143
 8051358:	012b0143 	.word	0x012b0143
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 805135c:	4b80      	ldr	r3, [pc, #512]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 805135e:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8051362:	7123      	strb	r3, [r4, #4]
}
 8051364:	b004      	add	sp, #16
 8051366:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8051368:	4b7d      	ldr	r3, [pc, #500]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 805136a:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 805136e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051370:	2000      	movs	r0, #0
            break;
 8051372:	e7f7      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8051374:	f7f2 fccc 	bl	8043d10 <SecureElementGetDevEui>
 8051378:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805137a:	2000      	movs	r0, #0
            break;
 805137c:	e7f2      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 805137e:	f7f2 fcdd 	bl	8043d3c <SecureElementGetJoinEui>
 8051382:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051384:	2000      	movs	r0, #0
            break;
 8051386:	e7ed      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.JoinEui = SecureElementGetPin( );
 8051388:	f7f2 fcee 	bl	8043d68 <SecureElementGetPin>
 805138c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805138e:	2000      	movs	r0, #0
            break;
 8051390:	e7e8      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8051392:	4b73      	ldr	r3, [pc, #460]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8051394:	f893 3192 	ldrb.w	r3, [r3, #402]	; 0x192
 8051398:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805139a:	2000      	movs	r0, #0
            break;
 805139c:	e7e2      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 805139e:	4b70      	ldr	r3, [pc, #448]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 80513a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80513a4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80513a6:	2000      	movs	r0, #0
            break;
 80513a8:	e7dc      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 80513aa:	4b6d      	ldr	r3, [pc, #436]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 80513ac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80513b0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80513b2:	2000      	movs	r0, #0
            break;
 80513b4:	e7d6      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80513b6:	4b6a      	ldr	r3, [pc, #424]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 80513b8:	f893 3191 	ldrb.w	r3, [r3, #401]	; 0x191
 80513bc:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80513be:	2000      	movs	r0, #0
            break;
 80513c0:	e7d0      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            getPhy.Attribute = PHY_CHANNELS;
 80513c2:	231b      	movs	r3, #27
 80513c4:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80513c8:	a902      	add	r1, sp, #8
 80513ca:	4b65      	ldr	r3, [pc, #404]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 80513cc:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80513d0:	f002 fb3b 	bl	8053a4a <RegionGetPhyParam>
            mibGet->Param.ChannelList = phyParam.Channels;
 80513d4:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80513d6:	2000      	movs	r0, #0
            break;
 80513d8:	e7c4      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80513da:	3404      	adds	r4, #4
 80513dc:	4b61      	ldr	r3, [pc, #388]	; (8051564 <LoRaMacMibGetRequestConfirm+0x2b0>)
 80513de:	e893 0003 	ldmia.w	r3, {r0, r1}
 80513e2:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80513e6:	2000      	movs	r0, #0
            break;
 80513e8:	e7bc      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80513ea:	3404      	adds	r4, #4
 80513ec:	4b5e      	ldr	r3, [pc, #376]	; (8051568 <LoRaMacMibGetRequestConfirm+0x2b4>)
 80513ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80513f2:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80513f6:	2000      	movs	r0, #0
            break;
 80513f8:	e7b4      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80513fa:	3404      	adds	r4, #4
 80513fc:	4b5b      	ldr	r3, [pc, #364]	; (805156c <LoRaMacMibGetRequestConfirm+0x2b8>)
 80513fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 8051402:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051406:	2000      	movs	r0, #0
            break;
 8051408:	e7ac      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 805140a:	3404      	adds	r4, #4
 805140c:	4b58      	ldr	r3, [pc, #352]	; (8051570 <LoRaMacMibGetRequestConfirm+0x2bc>)
 805140e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8051412:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051416:	2000      	movs	r0, #0
            break;
 8051418:	e7a4      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 805141a:	2319      	movs	r3, #25
 805141c:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8051420:	a902      	add	r1, sp, #8
 8051422:	4b4f      	ldr	r3, [pc, #316]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8051424:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8051428:	f002 fb0f 	bl	8053a4a <RegionGetPhyParam>
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 805142c:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805142e:	2000      	movs	r0, #0
            break;
 8051430:	e798      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8051432:	2318      	movs	r3, #24
 8051434:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8051438:	a902      	add	r1, sp, #8
 805143a:	4b49      	ldr	r3, [pc, #292]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 805143c:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8051440:	f002 fb03 	bl	8053a4a <RegionGetPhyParam>
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8051444:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051446:	2000      	movs	r0, #0
            break;
 8051448:	e78c      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 805144a:	4b45      	ldr	r3, [pc, #276]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 805144c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8051450:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051452:	2000      	movs	r0, #0
            break;
 8051454:	e786      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8051456:	4b42      	ldr	r3, [pc, #264]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8051458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 805145a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805145c:	2000      	movs	r0, #0
            break;
 805145e:	e781      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8051460:	4b3f      	ldr	r3, [pc, #252]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8051462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8051464:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051466:	2000      	movs	r0, #0
            break;
 8051468:	e77c      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 805146a:	4b3d      	ldr	r3, [pc, #244]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 805146c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 805146e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051470:	2000      	movs	r0, #0
            break;
 8051472:	e777      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8051474:	4b3a      	ldr	r3, [pc, #232]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8051476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8051478:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805147a:	2000      	movs	r0, #0
            break;
 805147c:	e772      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 805147e:	4b38      	ldr	r3, [pc, #224]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8051480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8051482:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051484:	2000      	movs	r0, #0
            break;
 8051486:	e76d      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            getPhy.Attribute = PHY_MIN_TX_DR;
 8051488:	2302      	movs	r3, #2
 805148a:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 805148e:	4b34      	ldr	r3, [pc, #208]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8051490:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8051494:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8051498:	a902      	add	r1, sp, #8
 805149a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 805149e:	f002 fad4 	bl	8053a4a <RegionGetPhyParam>
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80514a2:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80514a4:	2000      	movs	r0, #0
            break;
 80514a6:	e75d      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80514a8:	4b2d      	ldr	r3, [pc, #180]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 80514aa:	f993 30d5 	ldrsb.w	r3, [r3, #213]	; 0xd5
 80514ae:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80514b0:	2000      	movs	r0, #0
            break;
 80514b2:	e757      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80514b4:	4b2a      	ldr	r3, [pc, #168]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 80514b6:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 80514ba:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80514bc:	2000      	movs	r0, #0
            break;
 80514be:	e751      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80514c0:	4b27      	ldr	r3, [pc, #156]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 80514c2:	f993 30d4 	ldrsb.w	r3, [r3, #212]	; 0xd4
 80514c6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80514c8:	2000      	movs	r0, #0
            break;
 80514ca:	e74b      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80514cc:	4b24      	ldr	r3, [pc, #144]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 80514ce:	f993 3048 	ldrsb.w	r3, [r3, #72]	; 0x48
 80514d2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80514d4:	2000      	movs	r0, #0
            break;
 80514d6:	e745      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 80514d8:	4b21      	ldr	r3, [pc, #132]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 80514da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80514dc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80514de:	2000      	movs	r0, #0
            break;
 80514e0:	e740      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 80514e2:	4b1f      	ldr	r3, [pc, #124]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 80514e4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80514e8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80514ea:	2000      	movs	r0, #0
            break;
 80514ec:	e73a      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80514ee:	4b1c      	ldr	r3, [pc, #112]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 80514f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80514f4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80514f6:	2000      	movs	r0, #0
            break;
 80514f8:	e734      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.Contexts = GetNvmData( );
 80514fa:	f7fd f9ad 	bl	804e858 <GetNvmData>
 80514fe:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051500:	2000      	movs	r0, #0
            break;
 8051502:	e72f      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8051504:	4b16      	ldr	r3, [pc, #88]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8051506:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 805150a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805150c:	2000      	movs	r0, #0
            break;
 805150e:	e729      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8051510:	4b13      	ldr	r3, [pc, #76]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8051512:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8051516:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8051518:	f002 fb40 	bl	8053b9c <RegionGetVersion>
 805151c:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805151e:	2000      	movs	r0, #0
            break;
 8051520:	e720      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8051522:	4b0f      	ldr	r3, [pc, #60]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8051524:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8051528:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805152a:	2000      	movs	r0, #0
            break;
 805152c:	e71a      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.Rejoin0CycleInSec = Nvm.MacGroup2.Rejoin0CycleInSec;
 805152e:	4b0c      	ldr	r3, [pc, #48]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8051530:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8051534:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051536:	2000      	movs	r0, #0
            break;
 8051538:	e714      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.Rejoin1CycleInSec = Nvm.MacGroup2.Rejoin1CycleInSec;
 805153a:	4b09      	ldr	r3, [pc, #36]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 805153c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8051540:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051542:	2000      	movs	r0, #0
            break;
 8051544:	e70e      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            mibGet->Param.Rejoin2CycleInSec = Nvm.MacGroup2.Rejoin2CycleInSec;
 8051546:	4b06      	ldr	r3, [pc, #24]	; (8051560 <LoRaMacMibGetRequestConfirm+0x2ac>)
 8051548:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 805154c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805154e:	2000      	movs	r0, #0
            break;
 8051550:	e708      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8051552:	4620      	mov	r0, r4
 8051554:	f000 ff39 	bl	80523ca <LoRaMacClassBMibGetRequestConfirm>
            break;
 8051558:	e704      	b.n	8051364 <LoRaMacMibGetRequestConfirm+0xb0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 805155a:	2003      	movs	r0, #3
}
 805155c:	4770      	bx	lr
 805155e:	bf00      	nop
 8051560:	20019b68 	.word	0x20019b68
 8051564:	20019be4 	.word	0x20019be4
 8051568:	20019c20 	.word	0x20019c20
 805156c:	20019bec 	.word	0x20019bec
 8051570:	20019c28 	.word	0x20019c28

08051574 <LoRaMacMibSetRequestConfirm>:
{
 8051574:	b530      	push	{r4, r5, lr}
 8051576:	b085      	sub	sp, #20
    if( mibSet == NULL )
 8051578:	2800      	cmp	r0, #0
 805157a:	f000 833b 	beq.w	8051bf4 <LoRaMacMibSetRequestConfirm+0x680>
 805157e:	4605      	mov	r5, r0
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8051580:	4ba8      	ldr	r3, [pc, #672]	; (8051824 <LoRaMacMibSetRequestConfirm+0x2b0>)
 8051582:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8051586:	f013 0f02 	tst.w	r3, #2
 805158a:	f040 8335 	bne.w	8051bf8 <LoRaMacMibSetRequestConfirm+0x684>
    switch( mibSet->Type )
 805158e:	7804      	ldrb	r4, [r0, #0]
 8051590:	2c47      	cmp	r4, #71	; 0x47
 8051592:	f200 832b 	bhi.w	8051bec <LoRaMacMibSetRequestConfirm+0x678>
 8051596:	e8df f014 	tbh	[pc, r4, lsl #1]
 805159a:	0048      	.short	0x0048
 805159c:	0056004d 	.word	0x0056004d
 80515a0:	0067005f 	.word	0x0067005f
 80515a4:	00760070 	.word	0x00760070
 80515a8:	0082007c 	.word	0x0082007c
 80515ac:	009c008f 	.word	0x009c008f
 80515b0:	00b600a9 	.word	0x00b600a9
 80515b4:	00d000c3 	.word	0x00d000c3
 80515b8:	00ea00dd 	.word	0x00ea00dd
 80515bc:	010300f7 	.word	0x010300f7
 80515c0:	011d0110 	.word	0x011d0110
 80515c4:	0137012a 	.word	0x0137012a
 80515c8:	01560149 	.word	0x01560149
 80515cc:	01700163 	.word	0x01700163
 80515d0:	018a017d 	.word	0x018a017d
 80515d4:	03290197 	.word	0x03290197
 80515d8:	01b901a0 	.word	0x01b901a0
 80515dc:	01ff01d2 	.word	0x01ff01d2
 80515e0:	02180228 	.word	0x02180228
 80515e4:	02430238 	.word	0x02430238
 80515e8:	024d0248 	.word	0x024d0248
 80515ec:	02570252 	.word	0x02570252
 80515f0:	025c0329 	.word	0x025c0329
 80515f4:	029f0271 	.word	0x029f0271
 80515f8:	02b4028a 	.word	0x02b4028a
 80515fc:	02c302bb 	.word	0x02c302bb
 8051600:	02cf02c9 	.word	0x02cf02c9
 8051604:	032902d7 	.word	0x032902d7
 8051608:	031302ee 	.word	0x031302ee
 805160c:	03290329 	.word	0x03290329
 8051610:	03290329 	.word	0x03290329
 8051614:	03290329 	.word	0x03290329
 8051618:	03290329 	.word	0x03290329
 805161c:	03290329 	.word	0x03290329
 8051620:	03290329 	.word	0x03290329
 8051624:	03290329 	.word	0x03290329
 8051628:	02e8      	.short	0x02e8
            status = SwitchClass( mibSet->Param.Class );
 805162a:	7900      	ldrb	r0, [r0, #4]
 805162c:	f7fd fe76 	bl	804f31c <SwitchClass>
 8051630:	4604      	mov	r4, r0
            break;
 8051632:	e2e2      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8051634:	7903      	ldrb	r3, [r0, #4]
 8051636:	2b02      	cmp	r3, #2
 8051638:	f000 82e2 	beq.w	8051c00 <LoRaMacMibSetRequestConfirm+0x68c>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 805163c:	4a7a      	ldr	r2, [pc, #488]	; (8051828 <LoRaMacMibSetRequestConfirm+0x2b4>)
 805163e:	f882 31a8 	strb.w	r3, [r2, #424]	; 0x1a8
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051642:	2400      	movs	r4, #0
 8051644:	e2d9      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8051646:	6840      	ldr	r0, [r0, #4]
 8051648:	f7f2 fb54 	bl	8043cf4 <SecureElementSetDevEui>
 805164c:	4604      	mov	r4, r0
 805164e:	2800      	cmp	r0, #0
 8051650:	f000 82d3 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051654:	2403      	movs	r4, #3
 8051656:	e2d0      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8051658:	6840      	ldr	r0, [r0, #4]
 805165a:	f7f2 fb5f 	bl	8043d1c <SecureElementSetJoinEui>
 805165e:	2800      	cmp	r0, #0
 8051660:	f040 82cb 	bne.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051664:	4604      	mov	r4, r0
 8051666:	e2c8      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( SecureElementSetPin( mibSet->Param.SePin ) != SECURE_ELEMENT_SUCCESS )
 8051668:	6840      	ldr	r0, [r0, #4]
 805166a:	f7f2 fb6d 	bl	8043d48 <SecureElementSetPin>
 805166e:	4604      	mov	r4, r0
 8051670:	2800      	cmp	r0, #0
 8051672:	f000 82c2 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051676:	2403      	movs	r4, #3
 8051678:	e2bf      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 805167a:	7902      	ldrb	r2, [r0, #4]
 805167c:	4b6a      	ldr	r3, [pc, #424]	; (8051828 <LoRaMacMibSetRequestConfirm+0x2b4>)
 805167e:	f883 2192 	strb.w	r2, [r3, #402]	; 0x192
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051682:	2400      	movs	r4, #0
            break;
 8051684:	e2b9      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8051686:	6842      	ldr	r2, [r0, #4]
 8051688:	4b67      	ldr	r3, [pc, #412]	; (8051828 <LoRaMacMibSetRequestConfirm+0x2b4>)
 805168a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805168e:	2400      	movs	r4, #0
            break;
 8051690:	e2b3      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8051692:	6842      	ldr	r2, [r0, #4]
 8051694:	4b64      	ldr	r3, [pc, #400]	; (8051828 <LoRaMacMibSetRequestConfirm+0x2b4>)
 8051696:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805169a:	2400      	movs	r4, #0
            break;
 805169c:	e2ad      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.AppKey != NULL )
 805169e:	6841      	ldr	r1, [r0, #4]
 80516a0:	2900      	cmp	r1, #0
 80516a2:	f000 82af 	beq.w	8051c04 <LoRaMacMibSetRequestConfirm+0x690>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 80516a6:	2000      	movs	r0, #0
 80516a8:	f001 fed4 	bl	8053454 <LoRaMacCryptoSetKey>
 80516ac:	4604      	mov	r4, r0
 80516ae:	2800      	cmp	r0, #0
 80516b0:	f000 82a3 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80516b4:	2411      	movs	r4, #17
 80516b6:	e2a0      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.NwkKey != NULL )
 80516b8:	6841      	ldr	r1, [r0, #4]
 80516ba:	2900      	cmp	r1, #0
 80516bc:	f000 82a4 	beq.w	8051c08 <LoRaMacMibSetRequestConfirm+0x694>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 80516c0:	2001      	movs	r0, #1
 80516c2:	f001 fec7 	bl	8053454 <LoRaMacCryptoSetKey>
 80516c6:	4604      	mov	r4, r0
 80516c8:	2800      	cmp	r0, #0
 80516ca:	f000 8296 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80516ce:	2411      	movs	r4, #17
 80516d0:	e293      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.JSIntKey != NULL )
 80516d2:	6841      	ldr	r1, [r0, #4]
 80516d4:	2900      	cmp	r1, #0
 80516d6:	f000 8299 	beq.w	8051c0c <LoRaMacMibSetRequestConfirm+0x698>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_INT_KEY, mibSet->Param.JSIntKey ) )
 80516da:	2002      	movs	r0, #2
 80516dc:	f001 feba 	bl	8053454 <LoRaMacCryptoSetKey>
 80516e0:	4604      	mov	r4, r0
 80516e2:	2800      	cmp	r0, #0
 80516e4:	f000 8289 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80516e8:	2411      	movs	r4, #17
 80516ea:	e286      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.JSEncKey != NULL )
 80516ec:	6841      	ldr	r1, [r0, #4]
 80516ee:	2900      	cmp	r1, #0
 80516f0:	f000 828e 	beq.w	8051c10 <LoRaMacMibSetRequestConfirm+0x69c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( J_S_ENC_KEY, mibSet->Param.JSEncKey ) )
 80516f4:	2003      	movs	r0, #3
 80516f6:	f001 fead 	bl	8053454 <LoRaMacCryptoSetKey>
 80516fa:	4604      	mov	r4, r0
 80516fc:	2800      	cmp	r0, #0
 80516fe:	f000 827c 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8051702:	2411      	movs	r4, #17
 8051704:	e279      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.FNwkSIntKey != NULL )
 8051706:	6841      	ldr	r1, [r0, #4]
 8051708:	2900      	cmp	r1, #0
 805170a:	f000 8283 	beq.w	8051c14 <LoRaMacMibSetRequestConfirm+0x6a0>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( F_NWK_S_INT_KEY, mibSet->Param.FNwkSIntKey ) )
 805170e:	2004      	movs	r0, #4
 8051710:	f001 fea0 	bl	8053454 <LoRaMacCryptoSetKey>
 8051714:	4604      	mov	r4, r0
 8051716:	2800      	cmp	r0, #0
 8051718:	f000 826f 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 805171c:	2411      	movs	r4, #17
 805171e:	e26c      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.SNwkSIntKey != NULL )
 8051720:	6841      	ldr	r1, [r0, #4]
 8051722:	2900      	cmp	r1, #0
 8051724:	f000 8278 	beq.w	8051c18 <LoRaMacMibSetRequestConfirm+0x6a4>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( S_NWK_S_INT_KEY, mibSet->Param.SNwkSIntKey ) )
 8051728:	2005      	movs	r0, #5
 805172a:	f001 fe93 	bl	8053454 <LoRaMacCryptoSetKey>
 805172e:	4604      	mov	r4, r0
 8051730:	2800      	cmp	r0, #0
 8051732:	f000 8262 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8051736:	2411      	movs	r4, #17
 8051738:	e25f      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.NwkSEncKey != NULL )
 805173a:	6841      	ldr	r1, [r0, #4]
 805173c:	2900      	cmp	r1, #0
 805173e:	f000 826d 	beq.w	8051c1c <LoRaMacMibSetRequestConfirm+0x6a8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_ENC_KEY, mibSet->Param.NwkSEncKey ) )
 8051742:	2006      	movs	r0, #6
 8051744:	f001 fe86 	bl	8053454 <LoRaMacCryptoSetKey>
 8051748:	4604      	mov	r4, r0
 805174a:	2800      	cmp	r0, #0
 805174c:	f000 8255 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8051750:	2411      	movs	r4, #17
 8051752:	e252      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.AppSKey != NULL )
 8051754:	6841      	ldr	r1, [r0, #4]
 8051756:	2900      	cmp	r1, #0
 8051758:	f000 8262 	beq.w	8051c20 <LoRaMacMibSetRequestConfirm+0x6ac>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 805175c:	2007      	movs	r0, #7
 805175e:	f001 fe79 	bl	8053454 <LoRaMacCryptoSetKey>
 8051762:	4604      	mov	r4, r0
 8051764:	2800      	cmp	r0, #0
 8051766:	f000 8248 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 805176a:	2411      	movs	r4, #17
 805176c:	e245      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.McKEKey != NULL )
 805176e:	6841      	ldr	r1, [r0, #4]
 8051770:	2900      	cmp	r1, #0
 8051772:	f000 8257 	beq.w	8051c24 <LoRaMacMibSetRequestConfirm+0x6b0>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8051776:	207f      	movs	r0, #127	; 0x7f
 8051778:	f001 fe6c 	bl	8053454 <LoRaMacCryptoSetKey>
 805177c:	4604      	mov	r4, r0
 805177e:	2800      	cmp	r0, #0
 8051780:	f000 823b 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8051784:	2411      	movs	r4, #17
 8051786:	e238      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.McKey0 != NULL )
 8051788:	6841      	ldr	r1, [r0, #4]
 805178a:	2900      	cmp	r1, #0
 805178c:	f000 824c 	beq.w	8051c28 <LoRaMacMibSetRequestConfirm+0x6b4>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8051790:	2080      	movs	r0, #128	; 0x80
 8051792:	f001 fe5f 	bl	8053454 <LoRaMacCryptoSetKey>
 8051796:	2800      	cmp	r0, #0
 8051798:	f040 822f 	bne.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805179c:	4604      	mov	r4, r0
 805179e:	e22c      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.McAppSKey0 != NULL )
 80517a0:	6841      	ldr	r1, [r0, #4]
 80517a2:	2900      	cmp	r1, #0
 80517a4:	f000 8242 	beq.w	8051c2c <LoRaMacMibSetRequestConfirm+0x6b8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80517a8:	2081      	movs	r0, #129	; 0x81
 80517aa:	f001 fe53 	bl	8053454 <LoRaMacCryptoSetKey>
 80517ae:	4604      	mov	r4, r0
 80517b0:	2800      	cmp	r0, #0
 80517b2:	f000 8222 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80517b6:	2411      	movs	r4, #17
 80517b8:	e21f      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.McNwkSKey0 != NULL )
 80517ba:	6841      	ldr	r1, [r0, #4]
 80517bc:	2900      	cmp	r1, #0
 80517be:	f000 8237 	beq.w	8051c30 <LoRaMacMibSetRequestConfirm+0x6bc>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 80517c2:	2082      	movs	r0, #130	; 0x82
 80517c4:	f001 fe46 	bl	8053454 <LoRaMacCryptoSetKey>
 80517c8:	4604      	mov	r4, r0
 80517ca:	2800      	cmp	r0, #0
 80517cc:	f000 8215 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80517d0:	2411      	movs	r4, #17
 80517d2:	e212      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.McKey1 != NULL )
 80517d4:	6841      	ldr	r1, [r0, #4]
 80517d6:	2900      	cmp	r1, #0
 80517d8:	f000 822c 	beq.w	8051c34 <LoRaMacMibSetRequestConfirm+0x6c0>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_1, mibSet->Param.McKey1 ) )
 80517dc:	2083      	movs	r0, #131	; 0x83
 80517de:	f001 fe39 	bl	8053454 <LoRaMacCryptoSetKey>
 80517e2:	4604      	mov	r4, r0
 80517e4:	2800      	cmp	r0, #0
 80517e6:	f000 8208 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80517ea:	2411      	movs	r4, #17
 80517ec:	e205      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.McAppSKey1 != NULL )
 80517ee:	6841      	ldr	r1, [r0, #4]
 80517f0:	2900      	cmp	r1, #0
 80517f2:	f000 8221 	beq.w	8051c38 <LoRaMacMibSetRequestConfirm+0x6c4>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_1, mibSet->Param.McAppSKey1 ) )
 80517f6:	2084      	movs	r0, #132	; 0x84
 80517f8:	f001 fe2c 	bl	8053454 <LoRaMacCryptoSetKey>
 80517fc:	4604      	mov	r4, r0
 80517fe:	2800      	cmp	r0, #0
 8051800:	f000 81fb 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8051804:	2411      	movs	r4, #17
 8051806:	e1f8      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.McNwkSKey1 != NULL )
 8051808:	6841      	ldr	r1, [r0, #4]
 805180a:	2900      	cmp	r1, #0
 805180c:	f000 8216 	beq.w	8051c3c <LoRaMacMibSetRequestConfirm+0x6c8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_1, mibSet->Param.McNwkSKey1 ) )
 8051810:	2085      	movs	r0, #133	; 0x85
 8051812:	f001 fe1f 	bl	8053454 <LoRaMacCryptoSetKey>
 8051816:	4604      	mov	r4, r0
 8051818:	2800      	cmp	r0, #0
 805181a:	f000 81ee 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 805181e:	2411      	movs	r4, #17
 8051820:	e1eb      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
 8051822:	bf00      	nop
 8051824:	200195e4 	.word	0x200195e4
 8051828:	20019b68 	.word	0x20019b68
            if( mibSet->Param.McKey2 != NULL )
 805182c:	6841      	ldr	r1, [r0, #4]
 805182e:	2900      	cmp	r1, #0
 8051830:	f000 8206 	beq.w	8051c40 <LoRaMacMibSetRequestConfirm+0x6cc>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_2, mibSet->Param.McKey2 ) )
 8051834:	2086      	movs	r0, #134	; 0x86
 8051836:	f001 fe0d 	bl	8053454 <LoRaMacCryptoSetKey>
 805183a:	4604      	mov	r4, r0
 805183c:	2800      	cmp	r0, #0
 805183e:	f000 81dc 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8051842:	2411      	movs	r4, #17
 8051844:	e1d9      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.McAppSKey2 != NULL )
 8051846:	6841      	ldr	r1, [r0, #4]
 8051848:	2900      	cmp	r1, #0
 805184a:	f000 81fb 	beq.w	8051c44 <LoRaMacMibSetRequestConfirm+0x6d0>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_2, mibSet->Param.McAppSKey2 ) )
 805184e:	2087      	movs	r0, #135	; 0x87
 8051850:	f001 fe00 	bl	8053454 <LoRaMacCryptoSetKey>
 8051854:	4604      	mov	r4, r0
 8051856:	2800      	cmp	r0, #0
 8051858:	f000 81cf 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 805185c:	2411      	movs	r4, #17
 805185e:	e1cc      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.McNwkSKey2 != NULL )
 8051860:	6841      	ldr	r1, [r0, #4]
 8051862:	2900      	cmp	r1, #0
 8051864:	f000 81f0 	beq.w	8051c48 <LoRaMacMibSetRequestConfirm+0x6d4>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_2, mibSet->Param.McNwkSKey2 ) )
 8051868:	2088      	movs	r0, #136	; 0x88
 805186a:	f001 fdf3 	bl	8053454 <LoRaMacCryptoSetKey>
 805186e:	4604      	mov	r4, r0
 8051870:	2800      	cmp	r0, #0
 8051872:	f000 81c2 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8051876:	2411      	movs	r4, #17
 8051878:	e1bf      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.McKey3 != NULL )
 805187a:	6841      	ldr	r1, [r0, #4]
 805187c:	2900      	cmp	r1, #0
 805187e:	f000 81e5 	beq.w	8051c4c <LoRaMacMibSetRequestConfirm+0x6d8>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_3, mibSet->Param.McKey3 ) )
 8051882:	2089      	movs	r0, #137	; 0x89
 8051884:	f001 fde6 	bl	8053454 <LoRaMacCryptoSetKey>
 8051888:	4604      	mov	r4, r0
 805188a:	2800      	cmp	r0, #0
 805188c:	f000 81b5 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8051890:	2411      	movs	r4, #17
 8051892:	e1b2      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.McAppSKey3 != NULL )
 8051894:	6841      	ldr	r1, [r0, #4]
 8051896:	2900      	cmp	r1, #0
 8051898:	f000 81da 	beq.w	8051c50 <LoRaMacMibSetRequestConfirm+0x6dc>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_3, mibSet->Param.McAppSKey3 ) )
 805189c:	208a      	movs	r0, #138	; 0x8a
 805189e:	f001 fdd9 	bl	8053454 <LoRaMacCryptoSetKey>
 80518a2:	4604      	mov	r4, r0
 80518a4:	2800      	cmp	r0, #0
 80518a6:	f000 81a8 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80518aa:	2411      	movs	r4, #17
 80518ac:	e1a5      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.McNwkSKey3 != NULL )
 80518ae:	6841      	ldr	r1, [r0, #4]
 80518b0:	2900      	cmp	r1, #0
 80518b2:	f000 81cf 	beq.w	8051c54 <LoRaMacMibSetRequestConfirm+0x6e0>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_3, mibSet->Param.McNwkSKey3 ) )
 80518b6:	208b      	movs	r0, #139	; 0x8b
 80518b8:	f001 fdcc 	bl	8053454 <LoRaMacCryptoSetKey>
 80518bc:	4604      	mov	r4, r0
 80518be:	2800      	cmp	r0, #0
 80518c0:	f000 819b 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80518c4:	2411      	movs	r4, #17
 80518c6:	e198      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 80518c8:	7900      	ldrb	r0, [r0, #4]
 80518ca:	4bb6      	ldr	r3, [pc, #728]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 80518cc:	f883 0191 	strb.w	r0, [r3, #401]	; 0x191
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80518d0:	4bb5      	ldr	r3, [pc, #724]	; (8051ba8 <LoRaMacMibSetRequestConfirm+0x634>)
 80518d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80518d4:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80518d6:	2400      	movs	r4, #0
            break;
 80518d8:	e18f      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 80518da:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80518de:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80518e2:	4bb0      	ldr	r3, [pc, #704]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 80518e4:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
 80518e8:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80518ec:	2207      	movs	r2, #7
 80518ee:	a901      	add	r1, sp, #4
 80518f0:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80518f4:	f002 f8c7 	bl	8053a86 <RegionVerify>
 80518f8:	2800      	cmp	r0, #0
 80518fa:	f000 81ad 	beq.w	8051c58 <LoRaMacMibSetRequestConfirm+0x6e4>
                Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 80518fe:	4bab      	ldr	r3, [pc, #684]	; (8051bac <LoRaMacMibSetRequestConfirm+0x638>)
 8051900:	68a9      	ldr	r1, [r5, #8]
 8051902:	6868      	ldr	r0, [r5, #4]
 8051904:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051908:	2400      	movs	r4, #0
 805190a:	e176      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 805190c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8051910:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8051914:	4ba3      	ldr	r3, [pc, #652]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051916:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
 805191a:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 805191e:	2207      	movs	r2, #7
 8051920:	a901      	add	r1, sp, #4
 8051922:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8051926:	f002 f8ae 	bl	8053a86 <RegionVerify>
 805192a:	2800      	cmp	r0, #0
 805192c:	f000 8196 	beq.w	8051c5c <LoRaMacMibSetRequestConfirm+0x6e8>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8051930:	4b9f      	ldr	r3, [pc, #636]	; (8051bb0 <LoRaMacMibSetRequestConfirm+0x63c>)
 8051932:	68a9      	ldr	r1, [r5, #8]
 8051934:	6868      	ldr	r0, [r5, #4]
 8051936:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 805193a:	2400      	movs	r4, #0
 805193c:	e15d      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 805193e:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8051942:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8051946:	4b97      	ldr	r3, [pc, #604]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051948:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
 805194c:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8051950:	2207      	movs	r2, #7
 8051952:	a901      	add	r1, sp, #4
 8051954:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8051958:	f002 f895 	bl	8053a86 <RegionVerify>
 805195c:	2800      	cmp	r0, #0
 805195e:	f000 817f 	beq.w	8051c60 <LoRaMacMibSetRequestConfirm+0x6ec>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8051962:	4b90      	ldr	r3, [pc, #576]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051964:	f103 0284 	add.w	r2, r3, #132	; 0x84
 8051968:	68a9      	ldr	r1, [r5, #8]
 805196a:	6868      	ldr	r0, [r5, #4]
 805196c:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8051970:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8051974:	2b02      	cmp	r3, #2
 8051976:	d001      	beq.n	805197c <LoRaMacMibSetRequestConfirm+0x408>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051978:	2400      	movs	r4, #0
 805197a:	e13e      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 805197c:	f1a2 0384 	sub.w	r3, r2, #132	; 0x84
 8051980:	f893 41a8 	ldrb.w	r4, [r3, #424]	; 0x1a8
 8051984:	2c00      	cmp	r4, #0
 8051986:	f000 8138 	beq.w	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    Radio.Sleep( );
 805198a:	4b87      	ldr	r3, [pc, #540]	; (8051ba8 <LoRaMacMibSetRequestConfirm+0x634>)
 805198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 805198e:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 8051990:	f7fd fc24 	bl	804f1dc <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051994:	2400      	movs	r4, #0
 8051996:	e130      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8051998:	f990 3008 	ldrsb.w	r3, [r0, #8]
 805199c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80519a0:	4b80      	ldr	r3, [pc, #512]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 80519a2:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
 80519a6:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80519aa:	2207      	movs	r2, #7
 80519ac:	a901      	add	r1, sp, #4
 80519ae:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80519b2:	f002 f868 	bl	8053a86 <RegionVerify>
 80519b6:	2800      	cmp	r0, #0
 80519b8:	f000 8154 	beq.w	8051c64 <LoRaMacMibSetRequestConfirm+0x6f0>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 80519bc:	4b7d      	ldr	r3, [pc, #500]	; (8051bb4 <LoRaMacMibSetRequestConfirm+0x640>)
 80519be:	68a9      	ldr	r1, [r5, #8]
 80519c0:	6868      	ldr	r0, [r5, #4]
 80519c2:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80519c6:	2400      	movs	r4, #0
 80519c8:	e117      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 80519ca:	6843      	ldr	r3, [r0, #4]
 80519cc:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 80519ce:	2301      	movs	r3, #1
 80519d0:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80519d4:	a902      	add	r1, sp, #8
 80519d6:	4b73      	ldr	r3, [pc, #460]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 80519d8:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80519dc:	f002 f864 	bl	8053aa8 <RegionChanMaskSet>
 80519e0:	2800      	cmp	r0, #0
 80519e2:	f000 8141 	beq.w	8051c68 <LoRaMacMibSetRequestConfirm+0x6f4>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80519e6:	2400      	movs	r4, #0
 80519e8:	e107      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 80519ea:	6843      	ldr	r3, [r0, #4]
 80519ec:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 80519ee:	2300      	movs	r3, #0
 80519f0:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 80519f4:	a902      	add	r1, sp, #8
 80519f6:	4b6b      	ldr	r3, [pc, #428]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 80519f8:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 80519fc:	f002 f854 	bl	8053aa8 <RegionChanMaskSet>
 8051a00:	2800      	cmp	r0, #0
 8051a02:	f000 8133 	beq.w	8051c6c <LoRaMacMibSetRequestConfirm+0x6f8>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051a06:	2400      	movs	r4, #0
 8051a08:	e0f7      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8051a0a:	7902      	ldrb	r2, [r0, #4]
 8051a0c:	1e53      	subs	r3, r2, #1
 8051a0e:	b2db      	uxtb	r3, r3
 8051a10:	2b0e      	cmp	r3, #14
 8051a12:	f200 812d 	bhi.w	8051c70 <LoRaMacMibSetRequestConfirm+0x6fc>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8051a16:	4b63      	ldr	r3, [pc, #396]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051a18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051a1c:	2400      	movs	r4, #0
 8051a1e:	e0ec      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8051a20:	6842      	ldr	r2, [r0, #4]
 8051a22:	4b60      	ldr	r3, [pc, #384]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051a24:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051a26:	2400      	movs	r4, #0
            break;
 8051a28:	e0e7      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8051a2a:	6842      	ldr	r2, [r0, #4]
 8051a2c:	4b5d      	ldr	r3, [pc, #372]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051a2e:	669a      	str	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051a30:	2400      	movs	r4, #0
            break;
 8051a32:	e0e2      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8051a34:	6842      	ldr	r2, [r0, #4]
 8051a36:	4b5b      	ldr	r3, [pc, #364]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051a38:	66da      	str	r2, [r3, #108]	; 0x6c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051a3a:	2400      	movs	r4, #0
            break;
 8051a3c:	e0dd      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8051a3e:	6842      	ldr	r2, [r0, #4]
 8051a40:	4b58      	ldr	r3, [pc, #352]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051a42:	671a      	str	r2, [r3, #112]	; 0x70
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051a44:	2400      	movs	r4, #0
            break;
 8051a46:	e0d8      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8051a48:	6842      	ldr	r2, [r0, #4]
 8051a4a:	4b56      	ldr	r3, [pc, #344]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051a4c:	675a      	str	r2, [r3, #116]	; 0x74
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051a4e:	2400      	movs	r4, #0
            break;
 8051a50:	e0d3      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8051a52:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8051a56:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8051a5a:	2206      	movs	r2, #6
 8051a5c:	a901      	add	r1, sp, #4
 8051a5e:	4b51      	ldr	r3, [pc, #324]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051a60:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8051a64:	f002 f80f 	bl	8053a86 <RegionVerify>
 8051a68:	2800      	cmp	r0, #0
 8051a6a:	f000 8103 	beq.w	8051c74 <LoRaMacMibSetRequestConfirm+0x700>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8051a6e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8051a72:	4b4c      	ldr	r3, [pc, #304]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051a74:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051a78:	2400      	movs	r4, #0
 8051a7a:	e0be      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8051a7c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8051a80:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8051a84:	4b47      	ldr	r3, [pc, #284]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051a86:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8051a8a:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8051a8e:	2205      	movs	r2, #5
 8051a90:	a901      	add	r1, sp, #4
 8051a92:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8051a96:	f001 fff6 	bl	8053a86 <RegionVerify>
 8051a9a:	2800      	cmp	r0, #0
 8051a9c:	f000 80ec 	beq.w	8051c78 <LoRaMacMibSetRequestConfirm+0x704>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8051aa0:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8051aa4:	4b3f      	ldr	r3, [pc, #252]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051aa6:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051aaa:	2400      	movs	r4, #0
 8051aac:	e0a5      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8051aae:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8051ab2:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8051ab6:	220a      	movs	r2, #10
 8051ab8:	a901      	add	r1, sp, #4
 8051aba:	4b3a      	ldr	r3, [pc, #232]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051abc:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8051ac0:	f001 ffe1 	bl	8053a86 <RegionVerify>
 8051ac4:	2800      	cmp	r0, #0
 8051ac6:	f000 80d9 	beq.w	8051c7c <LoRaMacMibSetRequestConfirm+0x708>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8051aca:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8051ace:	4b35      	ldr	r3, [pc, #212]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051ad0:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051ad4:	2400      	movs	r4, #0
 8051ad6:	e090      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8051ad8:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8051adc:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8051ae0:	2209      	movs	r2, #9
 8051ae2:	a901      	add	r1, sp, #4
 8051ae4:	4b2f      	ldr	r3, [pc, #188]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051ae6:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8051aea:	f001 ffcc 	bl	8053a86 <RegionVerify>
 8051aee:	2800      	cmp	r0, #0
 8051af0:	f000 80c6 	beq.w	8051c80 <LoRaMacMibSetRequestConfirm+0x70c>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8051af4:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8051af8:	4b2a      	ldr	r3, [pc, #168]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051afa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051afe:	2400      	movs	r4, #0
 8051b00:	e07b      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8051b02:	6842      	ldr	r2, [r0, #4]
 8051b04:	4b27      	ldr	r3, [pc, #156]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051b06:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8051b0a:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051b0c:	2400      	movs	r4, #0
            break;
 8051b0e:	e074      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8051b10:	7902      	ldrb	r2, [r0, #4]
 8051b12:	4b24      	ldr	r3, [pc, #144]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051b14:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8051b18:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051b1c:	2400      	movs	r4, #0
            break;
 8051b1e:	e06c      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8051b20:	6842      	ldr	r2, [r0, #4]
 8051b22:	4b20      	ldr	r3, [pc, #128]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051b24:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051b28:	2400      	movs	r4, #0
            break;
 8051b2a:	e066      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8051b2c:	6842      	ldr	r2, [r0, #4]
 8051b2e:	4b1d      	ldr	r3, [pc, #116]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051b30:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051b34:	2400      	movs	r4, #0
            break;
 8051b36:	e060      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.Contexts != 0 )
 8051b38:	6840      	ldr	r0, [r0, #4]
 8051b3a:	2800      	cmp	r0, #0
 8051b3c:	f000 80a2 	beq.w	8051c84 <LoRaMacMibSetRequestConfirm+0x710>
                status = RestoreNvmData( mibSet->Param.Contexts );
 8051b40:	f7fd fabe 	bl	804f0c0 <RestoreNvmData>
 8051b44:	4604      	mov	r4, r0
 8051b46:	e058      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8051b48:	7983      	ldrb	r3, [r0, #6]
 8051b4a:	2b01      	cmp	r3, #1
 8051b4c:	d901      	bls.n	8051b52 <LoRaMacMibSetRequestConfirm+0x5de>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051b4e:	2403      	movs	r4, #3
 8051b50:	e053      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8051b52:	6842      	ldr	r2, [r0, #4]
 8051b54:	4b13      	ldr	r3, [pc, #76]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051b56:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8051b5a:	6840      	ldr	r0, [r0, #4]
 8051b5c:	f001 fa38 	bl	8052fd0 <LoRaMacCryptoSetLrWanVersion>
 8051b60:	4604      	mov	r4, r0
 8051b62:	2800      	cmp	r0, #0
 8051b64:	d049      	beq.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8051b66:	2411      	movs	r4, #17
 8051b68:	e047      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8051b6a:	7902      	ldrb	r2, [r0, #4]
 8051b6c:	4b0d      	ldr	r3, [pc, #52]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051b6e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051b72:	2400      	movs	r4, #0
            break;
 8051b74:	e041      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            if( ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin0CycleInSec, &MacCtx.Rejoin0CycleTime ) == true )
 8051b76:	4910      	ldr	r1, [pc, #64]	; (8051bb8 <LoRaMacMibSetRequestConfirm+0x644>)
 8051b78:	4b0a      	ldr	r3, [pc, #40]	; (8051ba4 <LoRaMacMibSetRequestConfirm+0x630>)
 8051b7a:	f8d3 01b0 	ldr.w	r0, [r3, #432]	; 0x1b0
 8051b7e:	f7fc fec7 	bl	804e910 <ConvertRejoinCycleTime>
 8051b82:	b908      	cbnz	r0, 8051b88 <LoRaMacMibSetRequestConfirm+0x614>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051b84:	2403      	movs	r4, #3
 8051b86:	e038      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                TimerSetValue( &MacCtx.Rejoin0CycleTimer, MacCtx.Rejoin0CycleTime );
 8051b88:	4b0c      	ldr	r3, [pc, #48]	; (8051bbc <LoRaMacMibSetRequestConfirm+0x648>)
 8051b8a:	f503 6492 	add.w	r4, r3, #1168	; 0x490
 8051b8e:	f8d3 14f0 	ldr.w	r1, [r3, #1264]	; 0x4f0
 8051b92:	4620      	mov	r0, r4
 8051b94:	f7f1 fb20 	bl	80431d8 <TimerSetValue>
                TimerStart( &MacCtx.Rejoin0CycleTimer );
 8051b98:	4620      	mov	r0, r4
 8051b9a:	f7f1 fa6d 	bl	8043078 <TimerStart>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051b9e:	2400      	movs	r4, #0
 8051ba0:	e02b      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
 8051ba2:	bf00      	nop
 8051ba4:	20019b68 	.word	0x20019b68
 8051ba8:	08059d2c 	.word	0x08059d2c
 8051bac:	20019be4 	.word	0x20019be4
 8051bb0:	20019c20 	.word	0x20019c20
 8051bb4:	20019c28 	.word	0x20019c28
 8051bb8:	20019ad4 	.word	0x20019ad4
 8051bbc:	200195e4 	.word	0x200195e4
           if( ConvertRejoinCycleTime( Nvm.MacGroup2.Rejoin1CycleInSec, &MacCtx.Rejoin1CycleTime ) == true )
 8051bc0:	4931      	ldr	r1, [pc, #196]	; (8051c88 <LoRaMacMibSetRequestConfirm+0x714>)
 8051bc2:	4b32      	ldr	r3, [pc, #200]	; (8051c8c <LoRaMacMibSetRequestConfirm+0x718>)
 8051bc4:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
 8051bc8:	f7fc fea2 	bl	804e910 <ConvertRejoinCycleTime>
 8051bcc:	b908      	cbnz	r0, 8051bd2 <LoRaMacMibSetRequestConfirm+0x65e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051bce:	2403      	movs	r4, #3
 8051bd0:	e013      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                TimerSetValue( &MacCtx.Rejoin1CycleTimer, MacCtx.Rejoin1CycleTime );
 8051bd2:	4b2f      	ldr	r3, [pc, #188]	; (8051c90 <LoRaMacMibSetRequestConfirm+0x71c>)
 8051bd4:	f503 6495 	add.w	r4, r3, #1192	; 0x4a8
 8051bd8:	f8d3 14f4 	ldr.w	r1, [r3, #1268]	; 0x4f4
 8051bdc:	4620      	mov	r0, r4
 8051bde:	f7f1 fafb 	bl	80431d8 <TimerSetValue>
                TimerStart( &MacCtx.Rejoin1CycleTimer );
 8051be2:	4620      	mov	r0, r4
 8051be4:	f7f1 fa48 	bl	8043078 <TimerStart>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8051be8:	2400      	movs	r4, #0
 8051bea:	e006      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8051bec:	f000 fbef 	bl	80523ce <LoRaMacMibClassBSetRequestConfirm>
 8051bf0:	4604      	mov	r4, r0
            break;
 8051bf2:	e002      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8051bf4:	2403      	movs	r4, #3
 8051bf6:	e000      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
        return LORAMAC_STATUS_BUSY;
 8051bf8:	2401      	movs	r4, #1
}
 8051bfa:	4620      	mov	r0, r4
 8051bfc:	b005      	add	sp, #20
 8051bfe:	bd30      	pop	{r4, r5, pc}
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c00:	2403      	movs	r4, #3
 8051c02:	e7fa      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c04:	2403      	movs	r4, #3
 8051c06:	e7f8      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c08:	2403      	movs	r4, #3
 8051c0a:	e7f6      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c0c:	2403      	movs	r4, #3
 8051c0e:	e7f4      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c10:	2403      	movs	r4, #3
 8051c12:	e7f2      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c14:	2403      	movs	r4, #3
 8051c16:	e7f0      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c18:	2403      	movs	r4, #3
 8051c1a:	e7ee      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c1c:	2403      	movs	r4, #3
 8051c1e:	e7ec      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c20:	2403      	movs	r4, #3
 8051c22:	e7ea      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c24:	2403      	movs	r4, #3
 8051c26:	e7e8      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c28:	2403      	movs	r4, #3
 8051c2a:	e7e6      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c2c:	2403      	movs	r4, #3
 8051c2e:	e7e4      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c30:	2403      	movs	r4, #3
 8051c32:	e7e2      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c34:	2403      	movs	r4, #3
 8051c36:	e7e0      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c38:	2403      	movs	r4, #3
 8051c3a:	e7de      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c3c:	2403      	movs	r4, #3
 8051c3e:	e7dc      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c40:	2403      	movs	r4, #3
 8051c42:	e7da      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c44:	2403      	movs	r4, #3
 8051c46:	e7d8      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c48:	2403      	movs	r4, #3
 8051c4a:	e7d6      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c4c:	2403      	movs	r4, #3
 8051c4e:	e7d4      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c50:	2403      	movs	r4, #3
 8051c52:	e7d2      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c54:	2403      	movs	r4, #3
 8051c56:	e7d0      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c58:	2403      	movs	r4, #3
 8051c5a:	e7ce      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c5c:	2403      	movs	r4, #3
 8051c5e:	e7cc      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c60:	2403      	movs	r4, #3
 8051c62:	e7ca      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c64:	2403      	movs	r4, #3
 8051c66:	e7c8      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c68:	2403      	movs	r4, #3
 8051c6a:	e7c6      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c6c:	2403      	movs	r4, #3
 8051c6e:	e7c4      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c70:	2403      	movs	r4, #3
 8051c72:	e7c2      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c74:	2403      	movs	r4, #3
 8051c76:	e7c0      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c78:	2403      	movs	r4, #3
 8051c7a:	e7be      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c7c:	2403      	movs	r4, #3
 8051c7e:	e7bc      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c80:	2403      	movs	r4, #3
 8051c82:	e7ba      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8051c84:	2403      	movs	r4, #3
 8051c86:	e7b8      	b.n	8051bfa <LoRaMacMibSetRequestConfirm+0x686>
 8051c88:	20019ad8 	.word	0x20019ad8
 8051c8c:	20019b68 	.word	0x20019b68
 8051c90:	200195e4 	.word	0x200195e4

08051c94 <LoRaMacMcChannelSetup>:
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8051c94:	4b32      	ldr	r3, [pc, #200]	; (8051d60 <LoRaMacMcChannelSetup+0xcc>)
 8051c96:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8051c9a:	f013 0f02 	tst.w	r3, #2
 8051c9e:	d15a      	bne.n	8051d56 <LoRaMacMcChannelSetup+0xc2>
{
 8051ca0:	b570      	push	{r4, r5, r6, lr}
 8051ca2:	b082      	sub	sp, #8
 8051ca4:	4605      	mov	r5, r0
    if( channel->GroupID >= LORAMAC_MAX_MC_CTX )
 8051ca6:	78c4      	ldrb	r4, [r0, #3]
 8051ca8:	2c03      	cmp	r4, #3
 8051caa:	d856      	bhi.n	8051d5a <LoRaMacMcChannelSetup+0xc6>
    Nvm.MacGroup2.MulticastChannelList[channel->GroupID].ChannelParams = *channel;
 8051cac:	4b2d      	ldr	r3, [pc, #180]	; (8051d64 <LoRaMacMcChannelSetup+0xd0>)
 8051cae:	222c      	movs	r2, #44	; 0x2c
 8051cb0:	fb02 3404 	mla	r4, r2, r4, r3
 8051cb4:	34e0      	adds	r4, #224	; 0xe0
 8051cb6:	4606      	mov	r6, r0
 8051cb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8051cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8051cbc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8051cc0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if( channel->IsRemotelySetup == true )
 8051cc4:	782b      	ldrb	r3, [r5, #0]
 8051cc6:	b313      	cbz	r3, 8051d0e <LoRaMacMcChannelSetup+0x7a>
        const KeyIdentifier_t mcKeys[LORAMAC_MAX_MC_CTX] = { MC_KEY_0, MC_KEY_1, MC_KEY_2, MC_KEY_3 };
 8051cc8:	4b27      	ldr	r3, [pc, #156]	; (8051d68 <LoRaMacMcChannelSetup+0xd4>)
 8051cca:	681b      	ldr	r3, [r3, #0]
 8051ccc:	9301      	str	r3, [sp, #4]
        if( LoRaMacCryptoSetKey( mcKeys[channel->GroupID], channel->McKeys.McKeyE ) != LORAMAC_CRYPTO_SUCCESS )
 8051cce:	78eb      	ldrb	r3, [r5, #3]
 8051cd0:	aa02      	add	r2, sp, #8
 8051cd2:	4413      	add	r3, r2
 8051cd4:	68a9      	ldr	r1, [r5, #8]
 8051cd6:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8051cda:	f001 fbbb 	bl	8053454 <LoRaMacCryptoSetKey>
 8051cde:	b9a0      	cbnz	r0, 8051d0a <LoRaMacMcChannelSetup+0x76>
        if( LoRaMacCryptoDeriveMcSessionKeyPair( channel->GroupID, channel->Address ) != LORAMAC_CRYPTO_SUCCESS )
 8051ce0:	6869      	ldr	r1, [r5, #4]
 8051ce2:	78e8      	ldrb	r0, [r5, #3]
 8051ce4:	f001 fca0 	bl	8053628 <LoRaMacCryptoDeriveMcSessionKeyPair>
 8051ce8:	b978      	cbnz	r0, 8051d0a <LoRaMacMcChannelSetup+0x76>
    if( channel->Class == CLASS_B )
 8051cea:	786b      	ldrb	r3, [r5, #1]
 8051cec:	2b01      	cmp	r3, #1
 8051cee:	d028      	beq.n	8051d42 <LoRaMacMcChannelSetup+0xae>
    *Nvm.MacGroup2.MulticastChannelList[channel->GroupID].DownLinkCounter = FCNT_DOWN_INITAL_VALUE;
 8051cf0:	78eb      	ldrb	r3, [r5, #3]
 8051cf2:	4a1c      	ldr	r2, [pc, #112]	; (8051d64 <LoRaMacMcChannelSetup+0xd0>)
 8051cf4:	212c      	movs	r1, #44	; 0x2c
 8051cf6:	fb01 2303 	mla	r3, r1, r3, r2
 8051cfa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8051cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8051d02:	601a      	str	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 8051d04:	2000      	movs	r0, #0
}
 8051d06:	b002      	add	sp, #8
 8051d08:	bd70      	pop	{r4, r5, r6, pc}
            return LORAMAC_STATUS_CRYPTO_ERROR;
 8051d0a:	2011      	movs	r0, #17
 8051d0c:	e7fb      	b.n	8051d06 <LoRaMacMcChannelSetup+0x72>
        const KeyIdentifier_t mcAppSKeys[LORAMAC_MAX_MC_CTX] = { MC_APP_S_KEY_0, MC_APP_S_KEY_1, MC_APP_S_KEY_2, MC_APP_S_KEY_3 };
 8051d0e:	4b16      	ldr	r3, [pc, #88]	; (8051d68 <LoRaMacMcChannelSetup+0xd4>)
 8051d10:	685a      	ldr	r2, [r3, #4]
 8051d12:	9200      	str	r2, [sp, #0]
        const KeyIdentifier_t mcNwkSKeys[LORAMAC_MAX_MC_CTX] = { MC_NWK_S_KEY_0, MC_NWK_S_KEY_1, MC_NWK_S_KEY_2, MC_NWK_S_KEY_3 };
 8051d14:	689b      	ldr	r3, [r3, #8]
 8051d16:	9301      	str	r3, [sp, #4]
        if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( mcAppSKeys[channel->GroupID], channel->McKeys.Session.McAppSKey ) )
 8051d18:	78eb      	ldrb	r3, [r5, #3]
 8051d1a:	aa02      	add	r2, sp, #8
 8051d1c:	4413      	add	r3, r2
 8051d1e:	68a9      	ldr	r1, [r5, #8]
 8051d20:	f813 0c08 	ldrb.w	r0, [r3, #-8]
 8051d24:	f001 fb96 	bl	8053454 <LoRaMacCryptoSetKey>
 8051d28:	b948      	cbnz	r0, 8051d3e <LoRaMacMcChannelSetup+0xaa>
        if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( mcNwkSKeys[channel->GroupID], channel->McKeys.Session.McNwkSKey ) )
 8051d2a:	78eb      	ldrb	r3, [r5, #3]
 8051d2c:	aa02      	add	r2, sp, #8
 8051d2e:	4413      	add	r3, r2
 8051d30:	68e9      	ldr	r1, [r5, #12]
 8051d32:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8051d36:	f001 fb8d 	bl	8053454 <LoRaMacCryptoSetKey>
 8051d3a:	2800      	cmp	r0, #0
 8051d3c:	d0d5      	beq.n	8051cea <LoRaMacMcChannelSetup+0x56>
            return LORAMAC_STATUS_CRYPTO_ERROR;
 8051d3e:	2011      	movs	r0, #17
 8051d40:	e7e1      	b.n	8051d06 <LoRaMacMcChannelSetup+0x72>
        LoRaMacClassBSetMulticastPeriodicity( &Nvm.MacGroup2.MulticastChannelList[channel->GroupID] );
 8051d42:	78e8      	ldrb	r0, [r5, #3]
 8051d44:	232c      	movs	r3, #44	; 0x2c
 8051d46:	fb03 f300 	mul.w	r3, r3, r0
 8051d4a:	33e0      	adds	r3, #224	; 0xe0
 8051d4c:	4805      	ldr	r0, [pc, #20]	; (8051d64 <LoRaMacMcChannelSetup+0xd0>)
 8051d4e:	4418      	add	r0, r3
 8051d50:	f000 fb49 	bl	80523e6 <LoRaMacClassBSetMulticastPeriodicity>
 8051d54:	e7cc      	b.n	8051cf0 <LoRaMacMcChannelSetup+0x5c>
        return LORAMAC_STATUS_BUSY;
 8051d56:	2001      	movs	r0, #1
}
 8051d58:	4770      	bx	lr
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 8051d5a:	2016      	movs	r0, #22
 8051d5c:	e7d3      	b.n	8051d06 <LoRaMacMcChannelSetup+0x72>
 8051d5e:	bf00      	nop
 8051d60:	200195e4 	.word	0x200195e4
 8051d64:	20019b68 	.word	0x20019b68
 8051d68:	08059bac 	.word	0x08059bac

08051d6c <LoRaMacMcChannelDelete>:
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8051d6c:	4b15      	ldr	r3, [pc, #84]	; (8051dc4 <LoRaMacMcChannelDelete+0x58>)
 8051d6e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8051d72:	f013 0f02 	tst.w	r3, #2
 8051d76:	d11f      	bne.n	8051db8 <LoRaMacMcChannelDelete+0x4c>
{
 8051d78:	b530      	push	{r4, r5, lr}
 8051d7a:	b089      	sub	sp, #36	; 0x24
 8051d7c:	4604      	mov	r4, r0
    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 8051d7e:	2803      	cmp	r0, #3
 8051d80:	d81c      	bhi.n	8051dbc <LoRaMacMcChannelDelete+0x50>
        ( Nvm.MacGroup2.MulticastChannelList[groupID].ChannelParams.IsEnabled == false ) )
 8051d82:	4a11      	ldr	r2, [pc, #68]	; (8051dc8 <LoRaMacMcChannelDelete+0x5c>)
 8051d84:	232c      	movs	r3, #44	; 0x2c
 8051d86:	fb03 2300 	mla	r3, r3, r0, r2
 8051d8a:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 8051d8e:	b1bb      	cbz	r3, 8051dc0 <LoRaMacMcChannelDelete+0x54>
    memset1( ( uint8_t* )&channel, 0, sizeof( McChannelParams_t ) );
 8051d90:	2220      	movs	r2, #32
 8051d92:	2100      	movs	r1, #0
 8051d94:	4668      	mov	r0, sp
 8051d96:	f003 f8a0 	bl	8054eda <memset1>
    Nvm.MacGroup2.MulticastChannelList[groupID].ChannelParams = channel;
 8051d9a:	480b      	ldr	r0, [pc, #44]	; (8051dc8 <LoRaMacMcChannelDelete+0x5c>)
 8051d9c:	232c      	movs	r3, #44	; 0x2c
 8051d9e:	fb03 0404 	mla	r4, r3, r4, r0
 8051da2:	34e0      	adds	r4, #224	; 0xe0
 8051da4:	466d      	mov	r5, sp
 8051da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8051da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8051daa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8051dae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return LORAMAC_STATUS_OK;
 8051db2:	2000      	movs	r0, #0
}
 8051db4:	b009      	add	sp, #36	; 0x24
 8051db6:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_STATUS_BUSY;
 8051db8:	2001      	movs	r0, #1
}
 8051dba:	4770      	bx	lr
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 8051dbc:	2016      	movs	r0, #22
 8051dbe:	e7f9      	b.n	8051db4 <LoRaMacMcChannelDelete+0x48>
 8051dc0:	2016      	movs	r0, #22
 8051dc2:	e7f7      	b.n	8051db4 <LoRaMacMcChannelDelete+0x48>
 8051dc4:	200195e4 	.word	0x200195e4
 8051dc8:	20019b68 	.word	0x20019b68

08051dcc <LoRaMacMcChannelSetupRxParams>:
{
 8051dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8051dd0:	b082      	sub	sp, #8
 8051dd2:	4615      	mov	r5, r2
   *status = 0x1C + ( groupID & 0x03 );
 8051dd4:	f000 0703 	and.w	r7, r0, #3
 8051dd8:	f107 031c 	add.w	r3, r7, #28
 8051ddc:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8051dde:	4a34      	ldr	r2, [pc, #208]	; (8051eb0 <LoRaMacMcChannelSetupRxParams+0xe4>)
 8051de0:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 8051de4:	f012 0f02 	tst.w	r2, #2
 8051de8:	d158      	bne.n	8051e9c <LoRaMacMcChannelSetupRxParams+0xd0>
 8051dea:	4604      	mov	r4, r0
 8051dec:	460e      	mov	r6, r1
    DeviceClass_t devClass = Nvm.MacGroup2.MulticastChannelList[groupID].ChannelParams.Class;
 8051dee:	4931      	ldr	r1, [pc, #196]	; (8051eb4 <LoRaMacMcChannelSetupRxParams+0xe8>)
 8051df0:	222c      	movs	r2, #44	; 0x2c
 8051df2:	fb02 1200 	mla	r2, r2, r0, r1
 8051df6:	f892 80e1 	ldrb.w	r8, [r2, #225]	; 0xe1
    if( ( devClass == CLASS_A ) || ( devClass > CLASS_C ) )
 8051dfa:	f108 32ff 	add.w	r2, r8, #4294967295
 8051dfe:	b2d2      	uxtb	r2, r2
 8051e00:	2a01      	cmp	r2, #1
 8051e02:	d84f      	bhi.n	8051ea4 <LoRaMacMcChannelSetupRxParams+0xd8>
    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 8051e04:	2803      	cmp	r0, #3
 8051e06:	d84f      	bhi.n	8051ea8 <LoRaMacMcChannelSetupRxParams+0xdc>
        ( Nvm.MacGroup2.MulticastChannelList[groupID].ChannelParams.IsEnabled == false ) )
 8051e08:	222c      	movs	r2, #44	; 0x2c
 8051e0a:	fb02 1200 	mla	r2, r2, r0, r1
 8051e0e:	f892 20e2 	ldrb.w	r2, [r2, #226]	; 0xe2
    if( ( groupID >= LORAMAC_MAX_MC_CTX ) ||
 8051e12:	2a00      	cmp	r2, #0
 8051e14:	d04a      	beq.n	8051eac <LoRaMacMcChannelSetupRxParams+0xe0>
    *status &= 0x0F; // groupID OK
 8051e16:	f003 030f 	and.w	r3, r3, #15
 8051e1a:	702b      	strb	r3, [r5, #0]
    if( devClass == CLASS_B )
 8051e1c:	f1b8 0f01 	cmp.w	r8, #1
 8051e20:	d029      	beq.n	8051e76 <LoRaMacMcChannelSetupRxParams+0xaa>
        verify.DatarateParams.Datarate = rxParams->ClassC.Datarate;
 8051e22:	f996 3004 	ldrsb.w	r3, [r6, #4]
 8051e26:	f88d 3004 	strb.w	r3, [sp, #4]
    verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8051e2a:	4b22      	ldr	r3, [pc, #136]	; (8051eb4 <LoRaMacMcChannelSetupRxParams+0xe8>)
 8051e2c:	f893 208d 	ldrb.w	r2, [r3, #141]	; 0x8d
 8051e30:	f88d 2005 	strb.w	r2, [sp, #5]
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8051e34:	2207      	movs	r2, #7
 8051e36:	a901      	add	r1, sp, #4
 8051e38:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8051e3c:	f001 fe23 	bl	8053a86 <RegionVerify>
 8051e40:	b118      	cbz	r0, 8051e4a <LoRaMacMcChannelSetupRxParams+0x7e>
        *status &= 0xFB; // datarate OK
 8051e42:	782b      	ldrb	r3, [r5, #0]
 8051e44:	f023 0304 	bic.w	r3, r3, #4
 8051e48:	702b      	strb	r3, [r5, #0]
    if( devClass == CLASS_B )
 8051e4a:	f1b8 0f01 	cmp.w	r8, #1
 8051e4e:	d017      	beq.n	8051e80 <LoRaMacMcChannelSetupRxParams+0xb4>
        verify.Frequency = rxParams->ClassC.Frequency;
 8051e50:	6833      	ldr	r3, [r6, #0]
 8051e52:	9301      	str	r3, [sp, #4]
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) == true )
 8051e54:	2200      	movs	r2, #0
 8051e56:	a901      	add	r1, sp, #4
 8051e58:	4b16      	ldr	r3, [pc, #88]	; (8051eb4 <LoRaMacMcChannelSetupRxParams+0xe8>)
 8051e5a:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8051e5e:	f001 fe12 	bl	8053a86 <RegionVerify>
 8051e62:	b118      	cbz	r0, 8051e6c <LoRaMacMcChannelSetupRxParams+0xa0>
        *status &= 0xF7; // frequency OK
 8051e64:	782b      	ldrb	r3, [r5, #0]
 8051e66:	f023 0308 	bic.w	r3, r3, #8
 8051e6a:	702b      	strb	r3, [r5, #0]
    if( *status == ( groupID & 0x03 ) )
 8051e6c:	782b      	ldrb	r3, [r5, #0]
 8051e6e:	429f      	cmp	r7, r3
 8051e70:	d009      	beq.n	8051e86 <LoRaMacMcChannelSetupRxParams+0xba>
    return LORAMAC_STATUS_OK;
 8051e72:	2000      	movs	r0, #0
 8051e74:	e013      	b.n	8051e9e <LoRaMacMcChannelSetupRxParams+0xd2>
        verify.DatarateParams.Datarate = rxParams->ClassB.Datarate;
 8051e76:	f996 3004 	ldrsb.w	r3, [r6, #4]
 8051e7a:	f88d 3004 	strb.w	r3, [sp, #4]
 8051e7e:	e7d4      	b.n	8051e2a <LoRaMacMcChannelSetupRxParams+0x5e>
        verify.Frequency = rxParams->ClassB.Frequency;
 8051e80:	6833      	ldr	r3, [r6, #0]
 8051e82:	9301      	str	r3, [sp, #4]
 8051e84:	e7e6      	b.n	8051e54 <LoRaMacMcChannelSetupRxParams+0x88>
        Nvm.MacGroup2.MulticastChannelList[groupID].ChannelParams.RxParams = *rxParams;
 8051e86:	480b      	ldr	r0, [pc, #44]	; (8051eb4 <LoRaMacMcChannelSetupRxParams+0xe8>)
 8051e88:	232c      	movs	r3, #44	; 0x2c
 8051e8a:	fb03 0404 	mla	r4, r3, r4, r0
 8051e8e:	34f8      	adds	r4, #248	; 0xf8
 8051e90:	e896 0003 	ldmia.w	r6, {r0, r1}
 8051e94:	e884 0003 	stmia.w	r4, {r0, r1}
    return LORAMAC_STATUS_OK;
 8051e98:	2000      	movs	r0, #0
 8051e9a:	e000      	b.n	8051e9e <LoRaMacMcChannelSetupRxParams+0xd2>
        return LORAMAC_STATUS_BUSY;
 8051e9c:	2001      	movs	r0, #1
}
 8051e9e:	b002      	add	sp, #8
 8051ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8051ea4:	2003      	movs	r0, #3
 8051ea6:	e7fa      	b.n	8051e9e <LoRaMacMcChannelSetupRxParams+0xd2>
        return LORAMAC_STATUS_MC_GROUP_UNDEFINED;
 8051ea8:	2016      	movs	r0, #22
 8051eaa:	e7f8      	b.n	8051e9e <LoRaMacMcChannelSetupRxParams+0xd2>
 8051eac:	2016      	movs	r0, #22
 8051eae:	e7f6      	b.n	8051e9e <LoRaMacMcChannelSetupRxParams+0xd2>
 8051eb0:	200195e4 	.word	0x200195e4
 8051eb4:	20019b68 	.word	0x20019b68

08051eb8 <LoRaMacMlmeRequest>:
{
 8051eb8:	b570      	push	{r4, r5, r6, lr}
 8051eba:	b086      	sub	sp, #24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8051ebc:	2300      	movs	r3, #0
 8051ebe:	f8ad 3010 	strh.w	r3, [sp, #16]
    if( mlmeRequest == NULL )
 8051ec2:	2800      	cmp	r0, #0
 8051ec4:	f000 80fc 	beq.w	80520c0 <LoRaMacMlmeRequest+0x208>
 8051ec8:	4605      	mov	r5, r0
    if( LoRaMacIsBusy( ) == true )
 8051eca:	f7fd fbfd 	bl	804f6c8 <LoRaMacIsBusy>
 8051ece:	b118      	cbz	r0, 8051ed8 <LoRaMacMlmeRequest+0x20>
        return LORAMAC_STATUS_BUSY;
 8051ed0:	2401      	movs	r4, #1
}
 8051ed2:	4620      	mov	r0, r4
 8051ed4:	b006      	add	sp, #24
 8051ed6:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8051ed8:	f000 fd42 	bl	8052960 <LoRaMacConfirmQueueIsFull>
 8051edc:	b108      	cbz	r0, 8051ee2 <LoRaMacMlmeRequest+0x2a>
        return LORAMAC_STATUS_BUSY;
 8051ede:	2401      	movs	r4, #1
 8051ee0:	e7f7      	b.n	8051ed2 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8051ee2:	f000 fd37 	bl	8052954 <LoRaMacConfirmQueueGetCnt>
 8051ee6:	b308      	cbz	r0, 8051f2c <LoRaMacMlmeRequest+0x74>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8051ee8:	4b76      	ldr	r3, [pc, #472]	; (80520c4 <LoRaMacMlmeRequest+0x20c>)
 8051eea:	2101      	movs	r1, #1
 8051eec:	f883 1459 	strb.w	r1, [r3, #1113]	; 0x459
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8051ef0:	f893 248d 	ldrb.w	r2, [r3, #1165]	; 0x48d
 8051ef4:	f042 0204 	orr.w	r2, r2, #4
 8051ef8:	f883 248d 	strb.w	r2, [r3, #1165]	; 0x48d
    queueElement.Request = mlmeRequest->Type;
 8051efc:	782b      	ldrb	r3, [r5, #0]
 8051efe:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8051f02:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 8051f06:	2200      	movs	r2, #0
 8051f08:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 8051f0c:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 8051f10:	461c      	mov	r4, r3
 8051f12:	3b01      	subs	r3, #1
 8051f14:	2b0c      	cmp	r3, #12
 8051f16:	f200 80b9 	bhi.w	805208c <LoRaMacMlmeRequest+0x1d4>
 8051f1a:	e8df f003 	tbb	[pc, r3]
 8051f1e:	5b0d      	.short	0x5b0d
 8051f20:	b7776d64 	.word	0xb7776d64
 8051f24:	b780b7b7 	.word	0xb780b7b7
 8051f28:	89a8      	.short	0x89a8
 8051f2a:	9f          	.byte	0x9f
 8051f2b:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8051f2c:	2214      	movs	r2, #20
 8051f2e:	2100      	movs	r1, #0
 8051f30:	4865      	ldr	r0, [pc, #404]	; (80520c8 <LoRaMacMlmeRequest+0x210>)
 8051f32:	f002 ffd2 	bl	8054eda <memset1>
 8051f36:	e7d7      	b.n	8051ee8 <LoRaMacMlmeRequest+0x30>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8051f38:	4b62      	ldr	r3, [pc, #392]	; (80520c4 <LoRaMacMlmeRequest+0x20c>)
 8051f3a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8051f3e:	f013 0f20 	tst.w	r3, #32
 8051f42:	d1c6      	bne.n	8051ed2 <LoRaMacMlmeRequest+0x1a>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8051f44:	792b      	ldrb	r3, [r5, #4]
 8051f46:	2b02      	cmp	r3, #2
 8051f48:	d003      	beq.n	8051f52 <LoRaMacMlmeRequest+0x9a>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8051f4a:	2b01      	cmp	r3, #1
 8051f4c:	d022      	beq.n	8051f94 <LoRaMacMlmeRequest+0xdc>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8051f4e:	2402      	movs	r4, #2
 8051f50:	e09d      	b.n	805208e <LoRaMacMlmeRequest+0x1d6>
                ResetMacParameters( );
 8051f52:	f7fd fb15 	bl	804f580 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8051f56:	4c5d      	ldr	r4, [pc, #372]	; (80520cc <LoRaMacMlmeRequest+0x214>)
 8051f58:	2200      	movs	r2, #0
 8051f5a:	f995 1005 	ldrsb.w	r1, [r5, #5]
 8051f5e:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 8051f62:	f001 fdf9 	bl	8053b58 <RegionAlternateDr>
 8051f66:	f884 0049 	strb.w	r0, [r4, #73]	; 0x49
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8051f6a:	2307      	movs	r3, #7
 8051f6c:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 8051f70:	20ff      	movs	r0, #255	; 0xff
 8051f72:	f7fd fe47 	bl	804fc04 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 8051f76:	4604      	mov	r4, r0
 8051f78:	2800      	cmp	r0, #0
 8051f7a:	f000 8088 	beq.w	805208e <LoRaMacMlmeRequest+0x1d6>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8051f7e:	4e53      	ldr	r6, [pc, #332]	; (80520cc <LoRaMacMlmeRequest+0x214>)
 8051f80:	2201      	movs	r2, #1
 8051f82:	f995 1005 	ldrsb.w	r1, [r5, #5]
 8051f86:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
 8051f8a:	f001 fde5 	bl	8053b58 <RegionAlternateDr>
 8051f8e:	f886 0049 	strb.w	r0, [r6, #73]	; 0x49
 8051f92:	e07c      	b.n	805208e <LoRaMacMlmeRequest+0x1d6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8051f94:	4e4d      	ldr	r6, [pc, #308]	; (80520cc <LoRaMacMlmeRequest+0x214>)
 8051f96:	2400      	movs	r4, #0
 8051f98:	f886 4195 	strb.w	r4, [r6, #405]	; 0x195
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8051f9c:	2302      	movs	r3, #2
 8051f9e:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8051fa2:	a901      	add	r1, sp, #4
 8051fa4:	f896 0058 	ldrb.w	r0, [r6, #88]	; 0x58
 8051fa8:	f001 fd66 	bl	8053a78 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8051fac:	792b      	ldrb	r3, [r5, #4]
 8051fae:	f886 31a8 	strb.w	r3, [r6, #424]	; 0x1a8
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8051fb2:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 8051fb6:	2301      	movs	r3, #1
 8051fb8:	f88d 3016 	strb.w	r3, [sp, #22]
                MacCtx.MacCallbacks->MacProcessNotify( );
 8051fbc:	4e41      	ldr	r6, [pc, #260]	; (80520c4 <LoRaMacMlmeRequest+0x20c>)
 8051fbe:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 8051fc2:	68db      	ldr	r3, [r3, #12]
 8051fc4:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8051fc6:	f896 348d 	ldrb.w	r3, [r6, #1165]	; 0x48d
 8051fca:	f043 0320 	orr.w	r3, r3, #32
 8051fce:	f886 348d 	strb.w	r3, [r6, #1165]	; 0x48d
                status = LORAMAC_STATUS_OK;
 8051fd2:	e05c      	b.n	805208e <LoRaMacMlmeRequest+0x1d6>
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 8051fd4:	782a      	ldrb	r2, [r5, #0]
 8051fd6:	4b3b      	ldr	r3, [pc, #236]	; (80520c4 <LoRaMacMlmeRequest+0x20c>)
 8051fd8:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
            status = SendReJoinReq( REJOIN_REQ_0 );
 8051fdc:	2000      	movs	r0, #0
 8051fde:	f7fd fe11 	bl	804fc04 <SendReJoinReq>
 8051fe2:	4604      	mov	r4, r0
            break;
 8051fe4:	e053      	b.n	805208e <LoRaMacMlmeRequest+0x1d6>
            MacCtx.MlmeConfirm.MlmeRequest = mlmeRequest->Type;
 8051fe6:	782a      	ldrb	r2, [r5, #0]
 8051fe8:	4b36      	ldr	r3, [pc, #216]	; (80520c4 <LoRaMacMlmeRequest+0x20c>)
 8051fea:	f883 2458 	strb.w	r2, [r3, #1112]	; 0x458
            status = SendReJoinReq( REJOIN_REQ_1 );
 8051fee:	2001      	movs	r0, #1
 8051ff0:	f7fd fe08 	bl	804fc04 <SendReJoinReq>
 8051ff4:	4604      	mov	r4, r0
            break;
 8051ff6:	e04a      	b.n	805208e <LoRaMacMlmeRequest+0x1d6>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8051ff8:	2200      	movs	r2, #0
 8051ffa:	a904      	add	r1, sp, #16
 8051ffc:	2002      	movs	r0, #2
 8051ffe:	f000 fa91 	bl	8052524 <LoRaMacCommandsAddCmd>
 8052002:	4604      	mov	r4, r0
 8052004:	2800      	cmp	r0, #0
 8052006:	d042      	beq.n	805208e <LoRaMacMlmeRequest+0x1d6>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8052008:	2413      	movs	r4, #19
 805200a:	e040      	b.n	805208e <LoRaMacMlmeRequest+0x1d6>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 805200c:	f995 200c 	ldrsb.w	r2, [r5, #12]
 8052010:	b2d2      	uxtb	r2, r2
 8052012:	68a9      	ldr	r1, [r5, #8]
 8052014:	88a8      	ldrh	r0, [r5, #4]
 8052016:	f7fe fb07 	bl	8050628 <SetTxContinuousWave>
 805201a:	4604      	mov	r4, r0
            break;
 805201c:	e037      	b.n	805208e <LoRaMacMlmeRequest+0x1d6>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 805201e:	2200      	movs	r2, #0
 8052020:	a904      	add	r1, sp, #16
 8052022:	200d      	movs	r0, #13
 8052024:	f000 fa7e 	bl	8052524 <LoRaMacCommandsAddCmd>
 8052028:	4604      	mov	r4, r0
 805202a:	b380      	cbz	r0, 805208e <LoRaMacMlmeRequest+0x1d6>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 805202c:	2413      	movs	r4, #19
 805202e:	e02e      	b.n	805208e <LoRaMacMlmeRequest+0x1d6>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8052030:	4b26      	ldr	r3, [pc, #152]	; (80520cc <LoRaMacMlmeRequest+0x214>)
 8052032:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8052036:	b10b      	cbz	r3, 805203c <LoRaMacMlmeRequest+0x184>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8052038:	2402      	movs	r4, #2
 805203a:	e028      	b.n	805208e <LoRaMacMlmeRequest+0x1d6>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 805203c:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 805203e:	f004 0007 	and.w	r0, r4, #7
 8052042:	f000 f9bd 	bl	80523c0 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8052046:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 805204a:	2201      	movs	r2, #1
 805204c:	a904      	add	r1, sp, #16
 805204e:	2010      	movs	r0, #16
 8052050:	f000 fa68 	bl	8052524 <LoRaMacCommandsAddCmd>
 8052054:	4604      	mov	r4, r0
 8052056:	b1d0      	cbz	r0, 805208e <LoRaMacMlmeRequest+0x1d6>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8052058:	2413      	movs	r4, #19
 805205a:	e018      	b.n	805208e <LoRaMacMlmeRequest+0x1d6>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 805205c:	2200      	movs	r2, #0
 805205e:	a904      	add	r1, sp, #16
 8052060:	2012      	movs	r0, #18
 8052062:	f000 fa5f 	bl	8052524 <LoRaMacCommandsAddCmd>
 8052066:	4604      	mov	r4, r0
 8052068:	b188      	cbz	r0, 805208e <LoRaMacMlmeRequest+0x1d6>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 805206a:	2413      	movs	r4, #19
 805206c:	e00f      	b.n	805208e <LoRaMacMlmeRequest+0x1d6>
            queueElement.RestrictCommonReadyToHandle = true;
 805206e:	2301      	movs	r3, #1
 8052070:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8052074:	f000 f995 	bl	80523a2 <LoRaMacClassBIsAcquisitionInProgress>
 8052078:	b108      	cbz	r0, 805207e <LoRaMacMlmeRequest+0x1c6>
                status = LORAMAC_STATUS_BUSY;
 805207a:	2401      	movs	r4, #1
 805207c:	e007      	b.n	805208e <LoRaMacMlmeRequest+0x1d6>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 805207e:	f000 f98d 	bl	805239c <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8052082:	2000      	movs	r0, #0
 8052084:	f000 f98f 	bl	80523a6 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8052088:	2400      	movs	r4, #0
 805208a:	e000      	b.n	805208e <LoRaMacMlmeRequest+0x1d6>
    switch( mlmeRequest->Type )
 805208c:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 805208e:	4b0d      	ldr	r3, [pc, #52]	; (80520c4 <LoRaMacMlmeRequest+0x20c>)
 8052090:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8052094:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 8052096:	b17c      	cbz	r4, 80520b8 <LoRaMacMlmeRequest+0x200>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8052098:	f000 fc5c 	bl	8052954 <LoRaMacConfirmQueueGetCnt>
 805209c:	2800      	cmp	r0, #0
 805209e:	f47f af18 	bne.w	8051ed2 <LoRaMacMlmeRequest+0x1a>
            MacCtx.NodeAckRequested = false;
 80520a2:	4b08      	ldr	r3, [pc, #32]	; (80520c4 <LoRaMacMlmeRequest+0x20c>)
 80520a4:	2100      	movs	r1, #0
 80520a6:	f883 141a 	strb.w	r1, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80520aa:	f893 248d 	ldrb.w	r2, [r3, #1165]	; 0x48d
 80520ae:	f361 0282 	bfi	r2, r1, #2, #1
 80520b2:	f883 248d 	strb.w	r2, [r3, #1165]	; 0x48d
 80520b6:	e70c      	b.n	8051ed2 <LoRaMacMlmeRequest+0x1a>
        LoRaMacConfirmQueueAdd( &queueElement );
 80520b8:	a805      	add	r0, sp, #20
 80520ba:	f000 fb87 	bl	80527cc <LoRaMacConfirmQueueAdd>
 80520be:	e708      	b.n	8051ed2 <LoRaMacMlmeRequest+0x1a>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80520c0:	2403      	movs	r4, #3
 80520c2:	e706      	b.n	8051ed2 <LoRaMacMlmeRequest+0x1a>
 80520c4:	200195e4 	.word	0x200195e4
 80520c8:	20019a3c 	.word	0x20019a3c
 80520cc:	20019b68 	.word	0x20019b68

080520d0 <LoRaMacMcpsRequest>:
    if( mcpsRequest == NULL )
 80520d0:	2800      	cmp	r0, #0
 80520d2:	f000 80ce 	beq.w	8052272 <LoRaMacMcpsRequest+0x1a2>
{
 80520d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80520da:	b08d      	sub	sp, #52	; 0x34
 80520dc:	f04f 0900 	mov.w	r9, #0
 80520e0:	4606      	mov	r6, r0
    if( LoRaMacIsBusy( ) == true )
 80520e2:	f7fd faf1 	bl	804f6c8 <LoRaMacIsBusy>
 80520e6:	4680      	mov	r8, r0
 80520e8:	b118      	cbz	r0, 80520f2 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_BUSY;
 80520ea:	2001      	movs	r0, #1
}
 80520ec:	b00d      	add	sp, #52	; 0x34
 80520ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 80520f2:	ac02      	add	r4, sp, #8
 80520f4:	4635      	mov	r5, r6
 80520f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80520f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    macHdr.Value = 0;
 80520fa:	4649      	mov	r1, r9
 80520fc:	f88d 9020 	strb.w	r9, [sp, #32]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8052100:	4c5e      	ldr	r4, [pc, #376]	; (805227c <LoRaMacMcpsRequest+0x1ac>)
 8052102:	2214      	movs	r2, #20
 8052104:	f204 4044 	addw	r0, r4, #1092	; 0x444
 8052108:	f002 fee7 	bl	8054eda <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 805210c:	2301      	movs	r3, #1
 805210e:	f884 3445 	strb.w	r3, [r4, #1093]	; 0x445
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8052112:	4b5b      	ldr	r3, [pc, #364]	; (8052280 <LoRaMacMcpsRequest+0x1b0>)
 8052114:	f893 31a8 	ldrb.w	r3, [r3, #424]	; 0x1a8
 8052118:	2b02      	cmp	r3, #2
 805211a:	d056      	beq.n	80521ca <LoRaMacMcpsRequest+0xfa>
    switch( request.Type )
 805211c:	f89d 7008 	ldrb.w	r7, [sp, #8]
 8052120:	2f01      	cmp	r7, #1
 8052122:	d077      	beq.n	8052214 <LoRaMacMcpsRequest+0x144>
 8052124:	2f03      	cmp	r7, #3
 8052126:	f000 8088 	beq.w	805223a <LoRaMacMcpsRequest+0x16a>
 805212a:	2f00      	cmp	r7, #0
 805212c:	d05f      	beq.n	80521ee <LoRaMacMcpsRequest+0x11e>
 805212e:	f04f 0b00 	mov.w	fp, #0
 8052132:	f8cd b000 	str.w	fp, [sp]
    getPhy.Attribute = PHY_MIN_TX_DR;
 8052136:	2302      	movs	r3, #2
 8052138:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 805213c:	4c50      	ldr	r4, [pc, #320]	; (8052280 <LoRaMacMcpsRequest+0x1b0>)
 805213e:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 8052142:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8052146:	a90a      	add	r1, sp, #40	; 0x28
 8052148:	f894 0058 	ldrb.w	r0, [r4, #88]	; 0x58
 805214c:	f001 fc7d 	bl	8053a4a <RegionGetPhyParam>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8052150:	b245      	sxtb	r5, r0
 8052152:	45ab      	cmp	fp, r5
 8052154:	bfb8      	it	lt
 8052156:	46ab      	movlt	fp, r5
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8052158:	f894 a192 	ldrb.w	sl, [r4, #402]	; 0x192
 805215c:	f894 2195 	ldrb.w	r2, [r4, #405]	; 0x195
 8052160:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
 8052164:	4650      	mov	r0, sl
 8052166:	f7fc fb29 	bl	804e7bc <CheckForMinimumAbpDatarate>
 805216a:	4603      	mov	r3, r0
 805216c:	b900      	cbnz	r0, 8052170 <LoRaMacMcpsRequest+0xa0>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 805216e:	465d      	mov	r5, fp
    if( readyToSend == true )
 8052170:	f1b8 0f00 	cmp.w	r8, #0
 8052174:	d077      	beq.n	8052266 <LoRaMacMcpsRequest+0x196>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8052176:	f1ba 0f00 	cmp.w	sl, #0
 805217a:	d000      	beq.n	805217e <LoRaMacMcpsRequest+0xae>
 805217c:	b19b      	cbz	r3, 80521a6 <LoRaMacMcpsRequest+0xd6>
            verify.DatarateParams.Datarate = datarate;
 805217e:	f88d 501c 	strb.w	r5, [sp, #28]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8052182:	4b3f      	ldr	r3, [pc, #252]	; (8052280 <LoRaMacMcpsRequest+0x1b0>)
 8052184:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8052188:	f88d 201e 	strb.w	r2, [sp, #30]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 805218c:	2205      	movs	r2, #5
 805218e:	a907      	add	r1, sp, #28
 8052190:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8052194:	f001 fc77 	bl	8053a86 <RegionVerify>
 8052198:	2800      	cmp	r0, #0
 805219a:	d06c      	beq.n	8052276 <LoRaMacMcpsRequest+0x1a6>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 805219c:	f99d 201c 	ldrsb.w	r2, [sp, #28]
 80521a0:	4b37      	ldr	r3, [pc, #220]	; (8052280 <LoRaMacMcpsRequest+0x1b0>)
 80521a2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
        status = Send( &macHdr, fPort, fBuffer, fBufferSize );
 80521a6:	464b      	mov	r3, r9
 80521a8:	9a01      	ldr	r2, [sp, #4]
 80521aa:	9900      	ldr	r1, [sp, #0]
 80521ac:	a808      	add	r0, sp, #32
 80521ae:	f7fd fc8f 	bl	804fad0 <Send>
        if( status == LORAMAC_STATUS_OK )
 80521b2:	2800      	cmp	r0, #0
 80521b4:	d152      	bne.n	805225c <LoRaMacMcpsRequest+0x18c>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80521b6:	4b31      	ldr	r3, [pc, #196]	; (805227c <LoRaMacMcpsRequest+0x1ac>)
 80521b8:	f883 7444 	strb.w	r7, [r3, #1092]	; 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80521bc:	f893 248d 	ldrb.w	r2, [r3, #1165]	; 0x48d
 80521c0:	f042 0201 	orr.w	r2, r2, #1
 80521c4:	f883 248d 	strb.w	r2, [r3, #1165]	; 0x48d
 80521c8:	e04e      	b.n	8052268 <LoRaMacMcpsRequest+0x198>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80521ca:	4b2d      	ldr	r3, [pc, #180]	; (8052280 <LoRaMacMcpsRequest+0x1b0>)
 80521cc:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80521d0:	2b02      	cmp	r3, #2
 80521d2:	d1a3      	bne.n	805211c <LoRaMacMcpsRequest+0x4c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80521d4:	4b2a      	ldr	r3, [pc, #168]	; (8052280 <LoRaMacMcpsRequest+0x1b0>)
 80521d6:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80521da:	2b00      	cmp	r3, #0
 80521dc:	d19e      	bne.n	805211c <LoRaMacMcpsRequest+0x4c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 80521de:	f89d 3008 	ldrb.w	r3, [sp, #8]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80521e2:	2b00      	cmp	r3, #0
 80521e4:	d19a      	bne.n	805211c <LoRaMacMcpsRequest+0x4c>
        request.Type = MCPS_CONFIRMED;
 80521e6:	2301      	movs	r3, #1
 80521e8:	f88d 3008 	strb.w	r3, [sp, #8]
 80521ec:	e796      	b.n	805211c <LoRaMacMcpsRequest+0x4c>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 80521ee:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80521f2:	2202      	movs	r2, #2
 80521f4:	f362 1347 	bfi	r3, r2, #5, #3
 80521f8:	f88d 3020 	strb.w	r3, [sp, #32]
            fPort = request.Req.Unconfirmed.fPort;
 80521fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8052200:	9300      	str	r3, [sp, #0]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8052202:	9b04      	ldr	r3, [sp, #16]
 8052204:	9301      	str	r3, [sp, #4]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8052206:	f8bd 9014 	ldrh.w	r9, [sp, #20]
            datarate = request.Req.Unconfirmed.Datarate;
 805220a:	f99d b016 	ldrsb.w	fp, [sp, #22]
            readyToSend = true;
 805220e:	f04f 0801 	mov.w	r8, #1
            break;
 8052212:	e790      	b.n	8052136 <LoRaMacMcpsRequest+0x66>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8052214:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8052218:	2204      	movs	r2, #4
 805221a:	f362 1347 	bfi	r3, r2, #5, #3
 805221e:	f88d 3020 	strb.w	r3, [sp, #32]
            fPort = request.Req.Confirmed.fPort;
 8052222:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8052226:	9300      	str	r3, [sp, #0]
            fBuffer = request.Req.Confirmed.fBuffer;
 8052228:	9b04      	ldr	r3, [sp, #16]
 805222a:	9301      	str	r3, [sp, #4]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 805222c:	f8bd 9014 	ldrh.w	r9, [sp, #20]
            datarate = request.Req.Confirmed.Datarate;
 8052230:	f99d b016 	ldrsb.w	fp, [sp, #22]
            readyToSend = true;
 8052234:	f04f 0801 	mov.w	r8, #1
            break;
 8052238:	e77d      	b.n	8052136 <LoRaMacMcpsRequest+0x66>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 805223a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 805223e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8052242:	f88d 3020 	strb.w	r3, [sp, #32]
            fBuffer = request.Req.Proprietary.fBuffer;
 8052246:	9b03      	ldr	r3, [sp, #12]
 8052248:	9301      	str	r3, [sp, #4]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 805224a:	f8bd 9010 	ldrh.w	r9, [sp, #16]
            datarate = request.Req.Proprietary.Datarate;
 805224e:	f99d b012 	ldrsb.w	fp, [sp, #18]
            readyToSend = true;
 8052252:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 8052256:	2300      	movs	r3, #0
 8052258:	9300      	str	r3, [sp, #0]
            break;
 805225a:	e76c      	b.n	8052136 <LoRaMacMcpsRequest+0x66>
            MacCtx.NodeAckRequested = false;
 805225c:	4b07      	ldr	r3, [pc, #28]	; (805227c <LoRaMacMcpsRequest+0x1ac>)
 805225e:	2200      	movs	r2, #0
 8052260:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8052264:	e000      	b.n	8052268 <LoRaMacMcpsRequest+0x198>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8052266:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8052268:	4b04      	ldr	r3, [pc, #16]	; (805227c <LoRaMacMcpsRequest+0x1ac>)
 805226a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 805226e:	6133      	str	r3, [r6, #16]
    return status;
 8052270:	e73c      	b.n	80520ec <LoRaMacMcpsRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8052272:	2003      	movs	r0, #3
}
 8052274:	4770      	bx	lr
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8052276:	2003      	movs	r0, #3
 8052278:	e738      	b.n	80520ec <LoRaMacMcpsRequest+0x1c>
 805227a:	bf00      	nop
 805227c:	200195e4 	.word	0x200195e4
 8052280:	20019b68 	.word	0x20019b68

08052284 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8052284:	b510      	push	{r4, lr}
 8052286:	b082      	sub	sp, #8
 8052288:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 805228a:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 805228e:	220e      	movs	r2, #14
 8052290:	a901      	add	r1, sp, #4
 8052292:	4b05      	ldr	r3, [pc, #20]	; (80522a8 <LoRaMacTestSetDutyCycleOn+0x24>)
 8052294:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
 8052298:	f001 fbf5 	bl	8053a86 <RegionVerify>
 805229c:	b110      	cbz	r0, 80522a4 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 805229e:	4b02      	ldr	r3, [pc, #8]	; (80522a8 <LoRaMacTestSetDutyCycleOn+0x24>)
 80522a0:	f883 4194 	strb.w	r4, [r3, #404]	; 0x194
    }
}
 80522a4:	b002      	add	sp, #8
 80522a6:	bd10      	pop	{r4, pc}
 80522a8:	20019b68 	.word	0x20019b68

080522ac <LoRaMacAdrCalcNext>:
#include "region/Region.h"
#include "LoRaMacAdr.h"

bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 80522ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80522b0:	b089      	sub	sp, #36	; 0x24
 80522b2:	460f      	mov	r7, r1
 80522b4:	4616      	mov	r6, r2
 80522b6:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 80522b8:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 80522bc:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 80522c0:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 80522c4:	6842      	ldr	r2, [r0, #4]
 80522c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80522c8:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80522ca:	f890 8001 	ldrb.w	r8, [r0, #1]
 80522ce:	f1b8 0f00 	cmp.w	r8, #0
 80522d2:	d109      	bne.n	80522e8 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 80522d4:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 80522d8:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 80522dc:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 80522e0:	4640      	mov	r0, r8
 80522e2:	b009      	add	sp, #36	; 0x24
 80522e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80522e8:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 80522ea:	2302      	movs	r3, #2
 80522ec:	f88d 3018 	strb.w	r3, [sp, #24]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80522f0:	7bc3      	ldrb	r3, [r0, #15]
 80522f2:	f88d 301a 	strb.w	r3, [sp, #26]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80522f6:	a906      	add	r1, sp, #24
 80522f8:	7c00      	ldrb	r0, [r0, #16]
 80522fa:	f001 fba6 	bl	8053a4a <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 80522fe:	b243      	sxtb	r3, r0
 8052300:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 8052302:	454b      	cmp	r3, r9
 8052304:	bfb8      	it	lt
 8052306:	464b      	movlt	r3, r9
 8052308:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 805230a:	6862      	ldr	r2, [r4, #4]
 805230c:	8923      	ldrh	r3, [r4, #8]
 805230e:	429a      	cmp	r2, r3
 8052310:	d201      	bcs.n	8052316 <LoRaMacAdrCalcNext+0x6a>
    bool adrAckReq = false;
 8052312:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8052316:	8961      	ldrh	r1, [r4, #10]
 8052318:	440b      	add	r3, r1
 805231a:	429a      	cmp	r2, r3
 805231c:	d223      	bcs.n	8052366 <LoRaMacAdrCalcNext+0xba>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 805231e:	6863      	ldr	r3, [r4, #4]
 8052320:	8921      	ldrh	r1, [r4, #8]
 8052322:	8962      	ldrh	r2, [r4, #10]
 8052324:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 8052328:	4283      	cmp	r3, r0
 805232a:	d330      	bcc.n	805238e <LoRaMacAdrCalcNext+0xe2>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 805232c:	1a5b      	subs	r3, r3, r1
 805232e:	fbb3 f1f2 	udiv	r1, r3, r2
 8052332:	fb02 3311 	mls	r3, r2, r1, r3
 8052336:	bb6b      	cbnz	r3, 8052394 <LoRaMacAdrCalcNext+0xe8>
                if( datarate == minTxDatarate )
 8052338:	9b01      	ldr	r3, [sp, #4]
 805233a:	4599      	cmp	r9, r3
 805233c:	dc03      	bgt.n	8052346 <LoRaMacAdrCalcNext+0x9a>
                    if( adrNext->UpdateChanMask == true )
 805233e:	7823      	ldrb	r3, [r4, #0]
 8052340:	b9db      	cbnz	r3, 805237a <LoRaMacAdrCalcNext+0xce>
                    nbTrans = 1;
 8052342:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8052346:	2320      	movs	r3, #32
 8052348:	f88d 3018 	strb.w	r3, [sp, #24]
                getPhy.Datarate = datarate;
 805234c:	9b00      	ldr	r3, [sp, #0]
 805234e:	f88d 3019 	strb.w	r3, [sp, #25]
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8052352:	7be3      	ldrb	r3, [r4, #15]
 8052354:	f88d 301a 	strb.w	r3, [sp, #26]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8052358:	a906      	add	r1, sp, #24
 805235a:	7c20      	ldrb	r0, [r4, #16]
 805235c:	f001 fb75 	bl	8053a4a <RegionGetPhyParam>
                datarate = phyParam.Value;
 8052360:	fa4f f980 	sxtb.w	r9, r0
 8052364:	e7b6      	b.n	80522d4 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 8052366:	230a      	movs	r3, #10
 8052368:	f88d 3018 	strb.w	r3, [sp, #24]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 805236c:	a906      	add	r1, sp, #24
 805236e:	7c20      	ldrb	r0, [r4, #16]
 8052370:	f001 fb6b 	bl	8053a4a <RegionGetPhyParam>
            txPower = phyParam.Value;
 8052374:	fa4f fa80 	sxtb.w	sl, r0
 8052378:	e7d1      	b.n	805231e <LoRaMacAdrCalcNext+0x72>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 805237a:	2302      	movs	r3, #2
 805237c:	f88d 3010 	strb.w	r3, [sp, #16]
                        RegionInitDefaults( adrNext->Region, &params );
 8052380:	a902      	add	r1, sp, #8
 8052382:	7c20      	ldrb	r0, [r4, #16]
 8052384:	f001 fb78 	bl	8053a78 <RegionInitDefaults>
                    nbTrans = 1;
 8052388:	f04f 0b01 	mov.w	fp, #1
 805238c:	e7db      	b.n	8052346 <LoRaMacAdrCalcNext+0x9a>
        datarate = MAX( datarate, minTxDatarate );
 805238e:	f8dd 9000 	ldr.w	r9, [sp]
 8052392:	e79f      	b.n	80522d4 <LoRaMacAdrCalcNext+0x28>
 8052394:	f8dd 9000 	ldr.w	r9, [sp]
 8052398:	e79c      	b.n	80522d4 <LoRaMacAdrCalcNext+0x28>

0805239a <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 805239a:	4770      	bx	lr

0805239c <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 805239c:	4770      	bx	lr

0805239e <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.PingSlotState = pingSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 805239e:	4770      	bx	lr

080523a0 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#ifdef LORAMAC_CLASSB_ENABLED
    Ctx.MulticastSlotState = multicastSlotState;
#endif // LORAMAC_CLASSB_ENABLED
}
 80523a0:	4770      	bx	lr

080523a2 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80523a2:	2000      	movs	r0, #0
 80523a4:	4770      	bx	lr

080523a6 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80523a6:	4770      	bx	lr

080523a8 <LoRaMacClassBPingSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80523a8:	4770      	bx	lr

080523aa <LoRaMacClassBMulticastSlotTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80523aa:	4770      	bx	lr

080523ac <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80523ac:	2000      	movs	r0, #0
 80523ae:	4770      	bx	lr

080523b0 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80523b0:	2000      	movs	r0, #0
 80523b2:	4770      	bx	lr

080523b4 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80523b4:	2000      	movs	r0, #0
 80523b6:	4770      	bx	lr

080523b8 <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80523b8:	2000      	movs	r0, #0
 80523ba:	4770      	bx	lr

080523bc <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80523bc:	2000      	movs	r0, #0
 80523be:	4770      	bx	lr

080523c0 <LoRaMacClassBSetPingSlotInfo>:
{
#ifdef LORAMAC_CLASSB_ENABLED
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif // LORAMAC_CLASSB_ENABLED
}
 80523c0:	4770      	bx	lr

080523c2 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80523c2:	4770      	bx	lr

080523c4 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80523c4:	4770      	bx	lr

080523c6 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 80523c6:	2002      	movs	r0, #2
 80523c8:	4770      	bx	lr

080523ca <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 80523ca:	2002      	movs	r0, #2
 80523cc:	4770      	bx	lr

080523ce <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 80523ce:	2002      	movs	r0, #2
 80523d0:	4770      	bx	lr

080523d2 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80523d2:	4770      	bx	lr

080523d4 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 80523d4:	2000      	movs	r0, #0
 80523d6:	4770      	bx	lr

080523d8 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80523d8:	4770      	bx	lr

080523da <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80523da:	4770      	bx	lr

080523dc <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 80523dc:	2000      	movs	r0, #0
 80523de:	4770      	bx	lr

080523e0 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 80523e0:	2000      	movs	r0, #0
 80523e2:	4770      	bx	lr

080523e4 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif // LORAMAC_CLASSB_ENABLED
}
 80523e4:	4770      	bx	lr

080523e6 <LoRaMacClassBSetMulticastPeriodicity>:
    {
        multicastChannel->PingNb = CalcPingNb( multicastChannel->ChannelParams.RxParams.ClassB.Periodicity );
        multicastChannel->PingPeriod = CalcPingPeriod( multicastChannel->PingNb );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80523e6:	4770      	bx	lr

080523e8 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif
}
 80523e8:	4770      	bx	lr

080523ea <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 80523ea:	4770      	bx	lr

080523ec <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80523ec:	2300      	movs	r3, #0
 80523ee:	2b0f      	cmp	r3, #15
 80523f0:	d804      	bhi.n	80523fc <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 80523f2:	5cc2      	ldrb	r2, [r0, r3]
 80523f4:	b922      	cbnz	r2, 8052400 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80523f6:	3301      	adds	r3, #1
 80523f8:	b29b      	uxth	r3, r3
 80523fa:	e7f8      	b.n	80523ee <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 80523fc:	2001      	movs	r0, #1
 80523fe:	4770      	bx	lr
            return false;
 8052400:	2000      	movs	r0, #0
}
 8052402:	4770      	bx	lr

08052404 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8052404:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 8052406:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8052408:	0125      	lsls	r5, r4, #4
 805240a:	f105 0308 	add.w	r3, r5, #8
 805240e:	4d06      	ldr	r5, [pc, #24]	; (8052428 <MallocNewMacCommandSlot+0x24>)
 8052410:	441d      	add	r5, r3
 8052412:	4628      	mov	r0, r5
 8052414:	f7ff ffea 	bl	80523ec <IsSlotFree>
 8052418:	b920      	cbnz	r0, 8052424 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 805241a:	3401      	adds	r4, #1
 805241c:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 805241e:	2c20      	cmp	r4, #32
 8052420:	d1f2      	bne.n	8052408 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 8052422:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 8052424:	4628      	mov	r0, r5
 8052426:	bd38      	pop	{r3, r4, r5, pc}
 8052428:	20019e40 	.word	0x20019e40

0805242c <LinkedListInit>:
 * \param[IN]     list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 805242c:	b120      	cbz	r0, 8052438 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 805242e:	2200      	movs	r2, #0
 8052430:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 8052432:	6042      	str	r2, [r0, #4]

    return true;
 8052434:	2001      	movs	r0, #1
 8052436:	4770      	bx	lr
        return false;
 8052438:	2000      	movs	r0, #0
}
 805243a:	4770      	bx	lr

0805243c <LinkedListAdd>:
 * \param[IN]     element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 805243c:	4603      	mov	r3, r0
 805243e:	b160      	cbz	r0, 805245a <LinkedListAdd+0x1e>
 8052440:	b169      	cbz	r1, 805245e <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8052442:	6802      	ldr	r2, [r0, #0]
 8052444:	b13a      	cbz	r2, 8052456 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8052446:	685a      	ldr	r2, [r3, #4]
 8052448:	b102      	cbz	r2, 805244c <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 805244a:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 805244c:	2200      	movs	r2, #0
 805244e:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 8052450:	6059      	str	r1, [r3, #4]

    return true;
 8052452:	2001      	movs	r0, #1
 8052454:	4770      	bx	lr
        list->First = element;
 8052456:	6001      	str	r1, [r0, #0]
 8052458:	e7f5      	b.n	8052446 <LinkedListAdd+0xa>
        return false;
 805245a:	2000      	movs	r0, #0
 805245c:	4770      	bx	lr
 805245e:	2000      	movs	r0, #0
}
 8052460:	4770      	bx	lr

08052462 <LinkedListGetPrevious>:
 * \param[IN]     element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 8052462:	b160      	cbz	r0, 805247e <LinkedListGetPrevious+0x1c>
 8052464:	b161      	cbz	r1, 8052480 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8052466:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8052468:	4281      	cmp	r1, r0
 805246a:	d102      	bne.n	8052472 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 805246c:	2000      	movs	r0, #0
    }

    return curElement;
}
 805246e:	4770      	bx	lr
            curElement = curElement->Next;
 8052470:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8052472:	2800      	cmp	r0, #0
 8052474:	d0fb      	beq.n	805246e <LinkedListGetPrevious+0xc>
 8052476:	6803      	ldr	r3, [r0, #0]
 8052478:	428b      	cmp	r3, r1
 805247a:	d1f9      	bne.n	8052470 <LinkedListGetPrevious+0xe>
 805247c:	4770      	bx	lr
 805247e:	4770      	bx	lr
        return NULL;
 8052480:	4608      	mov	r0, r1
 8052482:	4770      	bx	lr

08052484 <LinkedListRemove>:
 * \param[IN]     element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 8052484:	b1b8      	cbz	r0, 80524b6 <LinkedListRemove+0x32>
{
 8052486:	b538      	push	{r3, r4, r5, lr}
 8052488:	460c      	mov	r4, r1
 805248a:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 805248c:	b1a9      	cbz	r1, 80524ba <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 805248e:	f7ff ffe8 	bl	8052462 <LinkedListGetPrevious>

    if( list->First == element )
 8052492:	682b      	ldr	r3, [r5, #0]
 8052494:	42a3      	cmp	r3, r4
 8052496:	d009      	beq.n	80524ac <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 8052498:	686b      	ldr	r3, [r5, #4]
 805249a:	42a3      	cmp	r3, r4
 805249c:	d009      	beq.n	80524b2 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 805249e:	b108      	cbz	r0, 80524a4 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 80524a0:	6823      	ldr	r3, [r4, #0]
 80524a2:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 80524a4:	2300      	movs	r3, #0
 80524a6:	6023      	str	r3, [r4, #0]

    return true;
 80524a8:	2001      	movs	r0, #1
}
 80524aa:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 80524ac:	6823      	ldr	r3, [r4, #0]
 80524ae:	602b      	str	r3, [r5, #0]
 80524b0:	e7f2      	b.n	8052498 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 80524b2:	6068      	str	r0, [r5, #4]
 80524b4:	e7f3      	b.n	805249e <LinkedListRemove+0x1a>
        return false;
 80524b6:	2000      	movs	r0, #0
}
 80524b8:	4770      	bx	lr
        return false;
 80524ba:	2000      	movs	r0, #0
 80524bc:	e7f5      	b.n	80524aa <LinkedListRemove+0x26>

080524be <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 80524be:	3801      	subs	r0, #1
 80524c0:	281f      	cmp	r0, #31
 80524c2:	d813      	bhi.n	80524ec <IsSticky+0x2e>
 80524c4:	e8df f000 	tbb	[pc, r0]
 80524c8:	12121210 	.word	0x12121210
 80524cc:	10121210 	.word	0x10121210
 80524d0:	12101010 	.word	0x12101010
 80524d4:	12121212 	.word	0x12121212
 80524d8:	12121210 	.word	0x12121210
 80524dc:	12121212 	.word	0x12121212
 80524e0:	12121212 	.word	0x12121212
 80524e4:	10121212 	.word	0x10121212
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
            return true;
        default:
            return false;
 80524e8:	2001      	movs	r0, #1
 80524ea:	4770      	bx	lr
 80524ec:	2000      	movs	r0, #0
    }
}
 80524ee:	4770      	bx	lr

080524f0 <FreeMacCommandSlot>:
    if( slot == NULL )
 80524f0:	b130      	cbz	r0, 8052500 <FreeMacCommandSlot+0x10>
{
 80524f2:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 80524f4:	2210      	movs	r2, #16
 80524f6:	2100      	movs	r1, #0
 80524f8:	f002 fcef 	bl	8054eda <memset1>
    return true;
 80524fc:	2001      	movs	r0, #1
}
 80524fe:	bd08      	pop	{r3, pc}
        return false;
 8052500:	2000      	movs	r0, #0
}
 8052502:	4770      	bx	lr

08052504 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8052504:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8052506:	4c06      	ldr	r4, [pc, #24]	; (8052520 <LoRaMacCommandsInit+0x1c>)
 8052508:	f44f 7203 	mov.w	r2, #524	; 0x20c
 805250c:	2100      	movs	r1, #0
 805250e:	4620      	mov	r0, r4
 8052510:	f002 fce3 	bl	8054eda <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8052514:	4620      	mov	r0, r4
 8052516:	f7ff ff89 	bl	805242c <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 805251a:	2000      	movs	r0, #0
 805251c:	bd10      	pop	{r4, pc}
 805251e:	bf00      	nop
 8052520:	20019e40 	.word	0x20019e40

08052524 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 8052524:	b301      	cbz	r1, 8052568 <LoRaMacCommandsAddCmd+0x44>
{
 8052526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8052528:	4605      	mov	r5, r0
 805252a:	4614      	mov	r4, r2
 805252c:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 805252e:	f7ff ff69 	bl	8052404 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 8052532:	4606      	mov	r6, r0
 8052534:	b1d0      	cbz	r0, 805256c <LoRaMacCommandsAddCmd+0x48>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8052536:	4601      	mov	r1, r0
 8052538:	480e      	ldr	r0, [pc, #56]	; (8052574 <LoRaMacCommandsAddCmd+0x50>)
 805253a:	f7ff ff7f 	bl	805243c <LinkedListAdd>
 805253e:	b1b8      	cbz	r0, 8052570 <LoRaMacCommandsAddCmd+0x4c>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 8052540:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 8052542:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8052544:	b2a2      	uxth	r2, r4
 8052546:	4639      	mov	r1, r7
 8052548:	1d70      	adds	r0, r6, #5
 805254a:	f002 fcb0 	bl	8054eae <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 805254e:	4628      	mov	r0, r5
 8052550:	f7ff ffb5 	bl	80524be <IsSticky>
 8052554:	7330      	strb	r0, [r6, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8052556:	4b07      	ldr	r3, [pc, #28]	; (8052574 <LoRaMacCommandsAddCmd+0x50>)
 8052558:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 805255c:	4414      	add	r4, r2
 805255e:	3401      	adds	r4, #1
 8052560:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8052564:	2000      	movs	r0, #0
}
 8052566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 8052568:	2001      	movs	r0, #1
}
 805256a:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 805256c:	2002      	movs	r0, #2
 805256e:	e7fa      	b.n	8052566 <LoRaMacCommandsAddCmd+0x42>
        return LORAMAC_COMMANDS_ERROR;
 8052570:	2005      	movs	r0, #5
 8052572:	e7f8      	b.n	8052566 <LoRaMacCommandsAddCmd+0x42>
 8052574:	20019e40 	.word	0x20019e40

08052578 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 8052578:	b1a0      	cbz	r0, 80525a4 <LoRaMacCommandsRemoveCmd+0x2c>
{
 805257a:	b510      	push	{r4, lr}
 805257c:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 805257e:	4601      	mov	r1, r0
 8052580:	480b      	ldr	r0, [pc, #44]	; (80525b0 <LoRaMacCommandsRemoveCmd+0x38>)
 8052582:	f7ff ff7f 	bl	8052484 <LinkedListRemove>
 8052586:	b178      	cbz	r0, 80525a8 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8052588:	68a1      	ldr	r1, [r4, #8]
 805258a:	4a09      	ldr	r2, [pc, #36]	; (80525b0 <LoRaMacCommandsRemoveCmd+0x38>)
 805258c:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8052590:	1a5b      	subs	r3, r3, r1
 8052592:	3b01      	subs	r3, #1
 8052594:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8052598:	4620      	mov	r0, r4
 805259a:	f7ff ffa9 	bl	80524f0 <FreeMacCommandSlot>
 805259e:	b128      	cbz	r0, 80525ac <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80525a0:	2000      	movs	r0, #0
}
 80525a2:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 80525a4:	2001      	movs	r0, #1
}
 80525a6:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80525a8:	2003      	movs	r0, #3
 80525aa:	e7fa      	b.n	80525a2 <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 80525ac:	2005      	movs	r0, #5
 80525ae:	e7f8      	b.n	80525a2 <LoRaMacCommandsRemoveCmd+0x2a>
 80525b0:	20019e40 	.word	0x20019e40

080525b4 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80525b4:	4b06      	ldr	r3, [pc, #24]	; (80525d0 <LoRaMacCommandsGetCmd+0x1c>)
 80525b6:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 80525b8:	b123      	cbz	r3, 80525c4 <LoRaMacCommandsGetCmd+0x10>
 80525ba:	791a      	ldrb	r2, [r3, #4]
 80525bc:	4282      	cmp	r2, r0
 80525be:	d001      	beq.n	80525c4 <LoRaMacCommandsGetCmd+0x10>
    {
        curElement = curElement->Next;
 80525c0:	681b      	ldr	r3, [r3, #0]
 80525c2:	e7f9      	b.n	80525b8 <LoRaMacCommandsGetCmd+0x4>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 80525c4:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 80525c6:	b10b      	cbz	r3, 80525cc <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 80525c8:	2000      	movs	r0, #0
 80525ca:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 80525cc:	2003      	movs	r0, #3
}
 80525ce:	4770      	bx	lr
 80525d0:	20019e40 	.word	0x20019e40

080525d4 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 80525d4:	4b0a      	ldr	r3, [pc, #40]	; (8052600 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 80525d6:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 80525d8:	b120      	cbz	r0, 80525e4 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 80525da:	7b03      	ldrb	r3, [r0, #12]
 80525dc:	b11b      	cbz	r3, 80525e6 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 80525de:	6800      	ldr	r0, [r0, #0]
 80525e0:	e7fa      	b.n	80525d8 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 80525e2:	bd10      	pop	{r4, pc}
 80525e4:	4770      	bx	lr
{
 80525e6:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 80525e8:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 80525ea:	f7ff ffc5 	bl	8052578 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 80525ee:	4620      	mov	r0, r4
    while( curElement != NULL )
 80525f0:	2800      	cmp	r0, #0
 80525f2:	d0f6      	beq.n	80525e2 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 80525f4:	7b03      	ldrb	r3, [r0, #12]
 80525f6:	2b00      	cmp	r3, #0
 80525f8:	d0f6      	beq.n	80525e8 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 80525fa:	6800      	ldr	r0, [r0, #0]
 80525fc:	e7f8      	b.n	80525f0 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 80525fe:	bf00      	nop
 8052600:	20019e40 	.word	0x20019e40

08052604 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8052604:	b538      	push	{r3, r4, r5, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8052606:	4b08      	ldr	r3, [pc, #32]	; (8052628 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 8052608:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 805260a:	e003      	b.n	8052614 <LoRaMacCommandsRemoveStickyAnsCmds+0x10>
    {
        nexElement = curElement->Next;
        if( IsSticky( curElement->CID ) == true )
        {
            LoRaMacCommandsRemoveCmd( curElement );
 805260c:	4620      	mov	r0, r4
 805260e:	f7ff ffb3 	bl	8052578 <LoRaMacCommandsRemoveCmd>
{
 8052612:	462c      	mov	r4, r5
    while( curElement != NULL )
 8052614:	b134      	cbz	r4, 8052624 <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
        nexElement = curElement->Next;
 8052616:	6825      	ldr	r5, [r4, #0]
        if( IsSticky( curElement->CID ) == true )
 8052618:	7920      	ldrb	r0, [r4, #4]
 805261a:	f7ff ff50 	bl	80524be <IsSticky>
 805261e:	2800      	cmp	r0, #0
 8052620:	d0f7      	beq.n	8052612 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
 8052622:	e7f3      	b.n	805260c <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 8052624:	2000      	movs	r0, #0
 8052626:	bd38      	pop	{r3, r4, r5, pc}
 8052628:	20019e40 	.word	0x20019e40

0805262c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 805262c:	b128      	cbz	r0, 805263a <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 805262e:	4a04      	ldr	r2, [pc, #16]	; (8052640 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 8052630:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 8052634:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8052636:	2000      	movs	r0, #0
 8052638:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 805263a:	2001      	movs	r0, #1
}
 805263c:	4770      	bx	lr
 805263e:	bf00      	nop
 8052640:	20019e40 	.word	0x20019e40

08052644 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8052644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8052648:	4b16      	ldr	r3, [pc, #88]	; (80526a4 <LoRaMacCommandsSerializeCmds+0x60>)
 805264a:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 805264c:	b32a      	cbz	r2, 805269a <LoRaMacCommandsSerializeCmds+0x56>
 805264e:	4607      	mov	r7, r0
 8052650:	4688      	mov	r8, r1
 8052652:	4616      	mov	r6, r2
 8052654:	b319      	cbz	r1, 805269e <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 8052656:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 8052658:	b194      	cbz	r4, 8052680 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 805265a:	1a7a      	subs	r2, r7, r1
 805265c:	68a3      	ldr	r3, [r4, #8]
 805265e:	3301      	adds	r3, #1
 8052660:	429a      	cmp	r2, r3
 8052662:	d30d      	bcc.n	8052680 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 8052664:	1c4d      	adds	r5, r1, #1
 8052666:	b2ed      	uxtb	r5, r5
 8052668:	7923      	ldrb	r3, [r4, #4]
 805266a:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 805266c:	8922      	ldrh	r2, [r4, #8]
 805266e:	1d61      	adds	r1, r4, #5
 8052670:	1970      	adds	r0, r6, r5
 8052672:	f002 fc1c 	bl	8054eae <memcpy1>
            itr += curElement->PayloadSize;
 8052676:	68a3      	ldr	r3, [r4, #8]
 8052678:	441d      	add	r5, r3
 805267a:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 805267c:	6824      	ldr	r4, [r4, #0]
 805267e:	e7eb      	b.n	8052658 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8052680:	b12c      	cbz	r4, 805268e <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8052682:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 8052684:	4620      	mov	r0, r4
 8052686:	f7ff ff77 	bl	8052578 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 805268a:	462c      	mov	r4, r5
 805268c:	e7f8      	b.n	8052680 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 805268e:	4640      	mov	r0, r8
 8052690:	f7ff ffcc 	bl	805262c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8052694:	2000      	movs	r0, #0
}
 8052696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 805269a:	2001      	movs	r0, #1
 805269c:	e7fb      	b.n	8052696 <LoRaMacCommandsSerializeCmds+0x52>
 805269e:	2001      	movs	r0, #1
 80526a0:	e7f9      	b.n	8052696 <LoRaMacCommandsSerializeCmds+0x52>
 80526a2:	bf00      	nop
 80526a4:	20019e40 	.word	0x20019e40

080526a8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
    if( cmdsPending == NULL )
 80526a8:	4601      	mov	r1, r0
 80526aa:	b170      	cbz	r0, 80526ca <LoRaMacCommandsStickyCmdsPending+0x22>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 80526ac:	4b08      	ldr	r3, [pc, #32]	; (80526d0 <LoRaMacCommandsStickyCmdsPending+0x28>)
 80526ae:	681b      	ldr	r3, [r3, #0]

    *cmdsPending = false;
 80526b0:	2200      	movs	r2, #0
 80526b2:	7002      	strb	r2, [r0, #0]

    // Loop through all elements
    while( curElement != NULL )
 80526b4:	b13b      	cbz	r3, 80526c6 <LoRaMacCommandsStickyCmdsPending+0x1e>
    {
        if( curElement->IsSticky == true )
 80526b6:	7b1a      	ldrb	r2, [r3, #12]
 80526b8:	b90a      	cbnz	r2, 80526be <LoRaMacCommandsStickyCmdsPending+0x16>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
            return LORAMAC_COMMANDS_SUCCESS;
        }
        curElement = curElement->Next;
 80526ba:	681b      	ldr	r3, [r3, #0]
 80526bc:	e7fa      	b.n	80526b4 <LoRaMacCommandsStickyCmdsPending+0xc>
            *cmdsPending = true;
 80526be:	2301      	movs	r3, #1
 80526c0:	700b      	strb	r3, [r1, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 80526c2:	2000      	movs	r0, #0
 80526c4:	4770      	bx	lr
    }

    return LORAMAC_COMMANDS_SUCCESS;
 80526c6:	2000      	movs	r0, #0
 80526c8:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 80526ca:	2001      	movs	r0, #1
}
 80526cc:	4770      	bx	lr
 80526ce:	bf00      	nop
 80526d0:	20019e40 	.word	0x20019e40

080526d4 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 80526d4:	1e43      	subs	r3, r0, #1
 80526d6:	2b1f      	cmp	r3, #31
 80526d8:	d811      	bhi.n	80526fe <LoRaMacCommandsGetCmdSize+0x2a>
 80526da:	e8df f003 	tbb	[pc, r3]
 80526de:	1228      	.short	0x1228
 80526e0:	16292814 	.word	0x16292814
 80526e4:	1a282818 	.word	0x1a282818
 80526e8:	1c1e2828 	.word	0x1c1e2828
 80526ec:	24222028 	.word	0x24222028
 80526f0:	10101026 	.word	0x10101026
 80526f4:	10101010 	.word	0x10101010
 80526f8:	10101010 	.word	0x10101010
 80526fc:	2810      	.short	0x2810
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 80526fe:	2000      	movs	r0, #0
 8052700:	4770      	bx	lr
            cidSize = 3;
 8052702:	2003      	movs	r0, #3
            break;
 8052704:	4770      	bx	lr
            cidSize = 5;
 8052706:	2005      	movs	r0, #5
            break;
 8052708:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 805270a:	2001      	movs	r0, #1
            break;
 805270c:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 805270e:	2006      	movs	r0, #6
            break;
 8052710:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8052712:	2005      	movs	r0, #5
            break;
 8052714:	4770      	bx	lr
            break;
        }
        case SRV_MAC_FORCE_REJOIN_REQ:
        {
            // cid + Payload (2)
            cidSize = 3;
 8052716:	2003      	movs	r0, #3
            break;
 8052718:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 805271a:	2006      	movs	r0, #6
            break;
 805271c:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 805271e:	2001      	movs	r0, #1
            break;
 8052720:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8052722:	2005      	movs	r0, #5
            break;
 8052724:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8052726:	2004      	movs	r0, #4
            break;
 8052728:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 805272a:	2004      	movs	r0, #4
            break;
 805272c:	4770      	bx	lr
            cidSize = 2;
 805272e:	2002      	movs	r0, #2
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 8052730:	4770      	bx	lr
	...

08052734 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8052734:	4b03      	ldr	r3, [pc, #12]	; (8052744 <IncreaseBufferPointer+0x10>)
 8052736:	4298      	cmp	r0, r3
 8052738:	d001      	beq.n	805273e <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 805273a:	3004      	adds	r0, #4
 805273c:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 805273e:	4802      	ldr	r0, [pc, #8]	; (8052748 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 8052740:	4770      	bx	lr
 8052742:	bf00      	nop
 8052744:	2001a068 	.word	0x2001a068
 8052748:	2001a058 	.word	0x2001a058

0805274c <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 805274c:	b108      	cbz	r0, 8052752 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 805274e:	2000      	movs	r0, #0
 8052750:	4770      	bx	lr
        return true;
 8052752:	2001      	movs	r0, #1
}
 8052754:	4770      	bx	lr

08052756 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8052756:	2804      	cmp	r0, #4
 8052758:	d801      	bhi.n	805275e <IsListFull+0x8>
    {
        return true;
    }
    return false;
 805275a:	2000      	movs	r0, #0
 805275c:	4770      	bx	lr
        return true;
 805275e:	2001      	movs	r0, #1
}
 8052760:	4770      	bx	lr
	...

08052764 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8052764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8052766:	4606      	mov	r6, r0
 8052768:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 805276a:	4b0d      	ldr	r3, [pc, #52]	; (80527a0 <GetElement+0x3c>)
 805276c:	f893 7020 	ldrb.w	r7, [r3, #32]
 8052770:	4638      	mov	r0, r7
 8052772:	f7ff ffeb 	bl	805274c <IsListEmpty>
 8052776:	b970      	cbnz	r0, 8052796 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8052778:	2500      	movs	r5, #0
 805277a:	42af      	cmp	r7, r5
 805277c:	d909      	bls.n	8052792 <GetElement+0x2e>
    {
        if( element->Request == request )
 805277e:	7823      	ldrb	r3, [r4, #0]
 8052780:	42b3      	cmp	r3, r6
 8052782:	d00a      	beq.n	805279a <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 8052784:	4620      	mov	r0, r4
 8052786:	f7ff ffd5 	bl	8052734 <IncreaseBufferPointer>
 805278a:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 805278c:	3501      	adds	r5, #1
 805278e:	b2ed      	uxtb	r5, r5
 8052790:	e7f3      	b.n	805277a <GetElement+0x16>
    }

    return NULL;
 8052792:	2000      	movs	r0, #0
}
 8052794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 8052796:	2000      	movs	r0, #0
 8052798:	e7fc      	b.n	8052794 <GetElement+0x30>
            return element;
 805279a:	4620      	mov	r0, r4
 805279c:	e7fa      	b.n	8052794 <GetElement+0x30>
 805279e:	bf00      	nop
 80527a0:	2001a04c 	.word	0x2001a04c

080527a4 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80527a4:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 80527a6:	4c08      	ldr	r4, [pc, #32]	; (80527c8 <LoRaMacConfirmQueueInit+0x24>)
 80527a8:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80527aa:	2300      	movs	r3, #0
 80527ac:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80527b0:	f104 000c 	add.w	r0, r4, #12
 80527b4:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80527b6:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80527b8:	2214      	movs	r2, #20
 80527ba:	21ff      	movs	r1, #255	; 0xff
 80527bc:	f002 fb8d 	bl	8054eda <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80527c0:	2301      	movs	r3, #1
 80527c2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 80527c6:	bd10      	pop	{r4, pc}
 80527c8:	2001a04c 	.word	0x2001a04c

080527cc <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80527cc:	b538      	push	{r3, r4, r5, lr}
 80527ce:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80527d0:	4b0f      	ldr	r3, [pc, #60]	; (8052810 <LoRaMacConfirmQueueAdd+0x44>)
 80527d2:	f893 0020 	ldrb.w	r0, [r3, #32]
 80527d6:	f7ff ffbe 	bl	8052756 <IsListFull>
 80527da:	b9b8      	cbnz	r0, 805280c <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80527dc:	4c0c      	ldr	r4, [pc, #48]	; (8052810 <LoRaMacConfirmQueueAdd+0x44>)
 80527de:	68a3      	ldr	r3, [r4, #8]
 80527e0:	782a      	ldrb	r2, [r5, #0]
 80527e2:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80527e4:	68a3      	ldr	r3, [r4, #8]
 80527e6:	786a      	ldrb	r2, [r5, #1]
 80527e8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80527ea:	68a3      	ldr	r3, [r4, #8]
 80527ec:	78ea      	ldrb	r2, [r5, #3]
 80527ee:	70da      	strb	r2, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 80527f0:	68a3      	ldr	r3, [r4, #8]
 80527f2:	78aa      	ldrb	r2, [r5, #2]
 80527f4:	709a      	strb	r2, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80527f6:	f894 3020 	ldrb.w	r3, [r4, #32]
 80527fa:	3301      	adds	r3, #1
 80527fc:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8052800:	68a0      	ldr	r0, [r4, #8]
 8052802:	f7ff ff97 	bl	8052734 <IncreaseBufferPointer>
 8052806:	60a0      	str	r0, [r4, #8]

    return true;
 8052808:	2001      	movs	r0, #1
}
 805280a:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 805280c:	2000      	movs	r0, #0
 805280e:	e7fc      	b.n	805280a <LoRaMacConfirmQueueAdd+0x3e>
 8052810:	2001a04c 	.word	0x2001a04c

08052814 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8052814:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8052816:	4b09      	ldr	r3, [pc, #36]	; (805283c <LoRaMacConfirmQueueRemoveFirst+0x28>)
 8052818:	f893 4020 	ldrb.w	r4, [r3, #32]
 805281c:	4620      	mov	r0, r4
 805281e:	f7ff ff95 	bl	805274c <IsListEmpty>
 8052822:	b948      	cbnz	r0, 8052838 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8052824:	4d05      	ldr	r5, [pc, #20]	; (805283c <LoRaMacConfirmQueueRemoveFirst+0x28>)
 8052826:	3c01      	subs	r4, #1
 8052828:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 805282c:	6868      	ldr	r0, [r5, #4]
 805282e:	f7ff ff81 	bl	8052734 <IncreaseBufferPointer>
 8052832:	6068      	str	r0, [r5, #4]

    return true;
 8052834:	2001      	movs	r0, #1
}
 8052836:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 8052838:	2000      	movs	r0, #0
 805283a:	e7fc      	b.n	8052836 <LoRaMacConfirmQueueRemoveFirst+0x22>
 805283c:	2001a04c 	.word	0x2001a04c

08052840 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8052840:	b538      	push	{r3, r4, r5, lr}
 8052842:	4605      	mov	r5, r0
 8052844:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8052846:	4b08      	ldr	r3, [pc, #32]	; (8052868 <LoRaMacConfirmQueueSetStatus+0x28>)
 8052848:	f893 0020 	ldrb.w	r0, [r3, #32]
 805284c:	f7ff ff7e 	bl	805274c <IsListEmpty>
 8052850:	b948      	cbnz	r0, 8052866 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8052852:	4b05      	ldr	r3, [pc, #20]	; (8052868 <LoRaMacConfirmQueueSetStatus+0x28>)
 8052854:	689a      	ldr	r2, [r3, #8]
 8052856:	6859      	ldr	r1, [r3, #4]
 8052858:	4620      	mov	r0, r4
 805285a:	f7ff ff83 	bl	8052764 <GetElement>
        if( element != NULL )
 805285e:	b110      	cbz	r0, 8052866 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 8052860:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 8052862:	2201      	movs	r2, #1
 8052864:	7082      	strb	r2, [r0, #2]
        }
    }
}
 8052866:	bd38      	pop	{r3, r4, r5, pc}
 8052868:	2001a04c 	.word	0x2001a04c

0805286c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 805286c:	b510      	push	{r4, lr}
 805286e:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8052870:	4b09      	ldr	r3, [pc, #36]	; (8052898 <LoRaMacConfirmQueueGetStatus+0x2c>)
 8052872:	f893 0020 	ldrb.w	r0, [r3, #32]
 8052876:	f7ff ff69 	bl	805274c <IsListEmpty>
 805287a:	b940      	cbnz	r0, 805288e <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 805287c:	4b06      	ldr	r3, [pc, #24]	; (8052898 <LoRaMacConfirmQueueGetStatus+0x2c>)
 805287e:	689a      	ldr	r2, [r3, #8]
 8052880:	6859      	ldr	r1, [r3, #4]
 8052882:	4620      	mov	r0, r4
 8052884:	f7ff ff6e 	bl	8052764 <GetElement>
        if( element != NULL )
 8052888:	b118      	cbz	r0, 8052892 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 805288a:	7840      	ldrb	r0, [r0, #1]
 805288c:	e000      	b.n	8052890 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 805288e:	2001      	movs	r0, #1
}
 8052890:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8052892:	2001      	movs	r0, #1
 8052894:	e7fc      	b.n	8052890 <LoRaMacConfirmQueueGetStatus+0x24>
 8052896:	bf00      	nop
 8052898:	2001a04c 	.word	0x2001a04c

0805289c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 805289c:	b538      	push	{r3, r4, r5, lr}
 805289e:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80528a0:	4b0c      	ldr	r3, [pc, #48]	; (80528d4 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 80528a2:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 80528a4:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80528a8:	f893 0020 	ldrb.w	r0, [r3, #32]
 80528ac:	f7ff ff4e 	bl	805274c <IsListEmpty>
 80528b0:	b150      	cbz	r0, 80528c8 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 80528b2:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 80528b4:	2301      	movs	r3, #1
 80528b6:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 80528b8:	4620      	mov	r0, r4
 80528ba:	f7ff ff3b 	bl	8052734 <IncreaseBufferPointer>
 80528be:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 80528c0:	4b04      	ldr	r3, [pc, #16]	; (80528d4 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 80528c2:	689b      	ldr	r3, [r3, #8]
 80528c4:	4283      	cmp	r3, r0
 80528c6:	d0f4      	beq.n	80528b2 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 80528c8:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 80528ca:	78e3      	ldrb	r3, [r4, #3]
 80528cc:	2b00      	cmp	r3, #0
 80528ce:	d1f3      	bne.n	80528b8 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 80528d0:	e7f0      	b.n	80528b4 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 80528d2:	bf00      	nop
 80528d4:	2001a04c 	.word	0x2001a04c

080528d8 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80528d8:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80528da:	4b04      	ldr	r3, [pc, #16]	; (80528ec <LoRaMacConfirmQueueIsCmdActive+0x14>)
 80528dc:	689a      	ldr	r2, [r3, #8]
 80528de:	6859      	ldr	r1, [r3, #4]
 80528e0:	f7ff ff40 	bl	8052764 <GetElement>
 80528e4:	b100      	cbz	r0, 80528e8 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 80528e6:	2001      	movs	r0, #1
    }
    return false;
}
 80528e8:	bd08      	pop	{r3, pc}
 80528ea:	bf00      	nop
 80528ec:	2001a04c 	.word	0x2001a04c

080528f0 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80528f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80528f2:	b083      	sub	sp, #12
 80528f4:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80528f6:	4b16      	ldr	r3, [pc, #88]	; (8052950 <LoRaMacConfirmQueueHandleCb+0x60>)
 80528f8:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80528fc:	2400      	movs	r4, #0
 80528fe:	e00d      	b.n	805291c <LoRaMacConfirmQueueHandleCb+0x2c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8052900:	781a      	ldrb	r2, [r3, #0]
 8052902:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8052906:	785a      	ldrb	r2, [r3, #1]
 8052908:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 805290c:	78db      	ldrb	r3, [r3, #3]
 805290e:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8052912:	f7ff ff7f 	bl	8052814 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8052916:	b1a5      	cbz	r5, 8052942 <LoRaMacConfirmQueueHandleCb+0x52>
    for( uint8_t i = 0; i < nbElements; i++ )
 8052918:	3401      	adds	r4, #1
 805291a:	b2e4      	uxtb	r4, r4
 805291c:	42bc      	cmp	r4, r7
 805291e:	d214      	bcs.n	805294a <LoRaMacConfirmQueueHandleCb+0x5a>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8052920:	4b0b      	ldr	r3, [pc, #44]	; (8052950 <LoRaMacConfirmQueueHandleCb+0x60>)
 8052922:	685a      	ldr	r2, [r3, #4]
 8052924:	7812      	ldrb	r2, [r2, #0]
 8052926:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8052928:	685a      	ldr	r2, [r3, #4]
 805292a:	7852      	ldrb	r2, [r2, #1]
 805292c:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 805292e:	685b      	ldr	r3, [r3, #4]
 8052930:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 8052932:	2d00      	cmp	r5, #0
 8052934:	d0e4      	beq.n	8052900 <LoRaMacConfirmQueueHandleCb+0x10>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8052936:	4b06      	ldr	r3, [pc, #24]	; (8052950 <LoRaMacConfirmQueueHandleCb+0x60>)
 8052938:	681b      	ldr	r3, [r3, #0]
 805293a:	689b      	ldr	r3, [r3, #8]
 805293c:	4630      	mov	r0, r6
 805293e:	4798      	blx	r3
 8052940:	e7e7      	b.n	8052912 <LoRaMacConfirmQueueHandleCb+0x22>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8052942:	a801      	add	r0, sp, #4
 8052944:	f7ff ff42 	bl	80527cc <LoRaMacConfirmQueueAdd>
 8052948:	e7e6      	b.n	8052918 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 805294a:	b003      	add	sp, #12
 805294c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 805294e:	bf00      	nop
 8052950:	2001a04c 	.word	0x2001a04c

08052954 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 8052954:	4b01      	ldr	r3, [pc, #4]	; (805295c <LoRaMacConfirmQueueGetCnt+0x8>)
 8052956:	f893 0020 	ldrb.w	r0, [r3, #32]
 805295a:	4770      	bx	lr
 805295c:	2001a04c 	.word	0x2001a04c

08052960 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8052960:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8052962:	4b03      	ldr	r3, [pc, #12]	; (8052970 <LoRaMacConfirmQueueIsFull+0x10>)
 8052964:	f893 0020 	ldrb.w	r0, [r3, #32]
 8052968:	f7ff fef5 	bl	8052756 <IsListFull>
    }
    else
    {
        return false;
    }
}
 805296c:	bd08      	pop	{r3, pc}
 805296e:	bf00      	nop
 8052970:	2001a04c 	.word	0x2001a04c

08052974 <PrepareB0>:
 * \param[IN]  fCnt           - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8052974:	b470      	push	{r4, r5, r6}
 8052976:	9d03      	ldr	r5, [sp, #12]
 8052978:	9c04      	ldr	r4, [sp, #16]
 805297a:	9905      	ldr	r1, [sp, #20]
    if( b0 == 0 )
 805297c:	b331      	cbz	r1, 80529cc <PrepareB0+0x58>
 805297e:	4606      	mov	r6, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 8052980:	2049      	movs	r0, #73	; 0x49
 8052982:	7008      	strb	r0, [r1, #0]

    if( ( isAck == true ) && ( dir == DOWNLINK ) )
 8052984:	b10a      	cbz	r2, 805298a <PrepareB0+0x16>
 8052986:	2b01      	cmp	r3, #1
 8052988:	d018      	beq.n	80529bc <PrepareB0+0x48>
        b0[1] = confFCnt & 0xFF;
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
    {
        b0[1] = 0x00;
 805298a:	2200      	movs	r2, #0
 805298c:	704a      	strb	r2, [r1, #1]
        b0[2] = 0x00;
 805298e:	708a      	strb	r2, [r1, #2]
    }

    b0[3] = 0x00;
 8052990:	2000      	movs	r0, #0
 8052992:	70c8      	strb	r0, [r1, #3]
    b0[4] = 0x00;
 8052994:	7108      	strb	r0, [r1, #4]

    b0[5] = dir;
 8052996:	714b      	strb	r3, [r1, #5]

    b0[6] = devAddr & 0xFF;
 8052998:	718d      	strb	r5, [r1, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 805299a:	0a2b      	lsrs	r3, r5, #8
 805299c:	71cb      	strb	r3, [r1, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 805299e:	0c2b      	lsrs	r3, r5, #16
 80529a0:	720b      	strb	r3, [r1, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80529a2:	0e2d      	lsrs	r5, r5, #24
 80529a4:	724d      	strb	r5, [r1, #9]

    b0[10] = fCnt & 0xFF;
 80529a6:	728c      	strb	r4, [r1, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80529a8:	0a23      	lsrs	r3, r4, #8
 80529aa:	72cb      	strb	r3, [r1, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80529ac:	0c23      	lsrs	r3, r4, #16
 80529ae:	730b      	strb	r3, [r1, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80529b0:	0e24      	lsrs	r4, r4, #24
 80529b2:	734c      	strb	r4, [r1, #13]

    b0[14] = 0x00;
 80529b4:	7388      	strb	r0, [r1, #14]

    b0[15] = msgLen & 0xFF;
 80529b6:	73ce      	strb	r6, [r1, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 80529b8:	bc70      	pop	{r4, r5, r6}
 80529ba:	4770      	bx	lr
        confFCnt = ( uint16_t )( CryptoNvm->FCntList.FCntUp % 65536 );
 80529bc:	4a04      	ldr	r2, [pc, #16]	; (80529d0 <PrepareB0+0x5c>)
 80529be:	6812      	ldr	r2, [r2, #0]
 80529c0:	68d2      	ldr	r2, [r2, #12]
        b0[1] = confFCnt & 0xFF;
 80529c2:	704a      	strb	r2, [r1, #1]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
 80529c4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80529c8:	708a      	strb	r2, [r1, #2]
    {
 80529ca:	e7e1      	b.n	8052990 <PrepareB0+0x1c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80529cc:	2009      	movs	r0, #9
 80529ce:	e7f3      	b.n	80529b8 <PrepareB0+0x44>
 80529d0:	2001a070 	.word	0x2001a070

080529d4 <PrepareB1>:
 * \param[IN]  fCntUp         - Frame counter
 * \param[IN/OUT]  b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB1( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t txDr, uint8_t txCh, uint32_t devAddr, uint32_t fCntUp, uint8_t* b1 )
{
 80529d4:	b470      	push	{r4, r5, r6}
 80529d6:	9d04      	ldr	r5, [sp, #16]
 80529d8:	9c05      	ldr	r4, [sp, #20]
 80529da:	9906      	ldr	r1, [sp, #24]
    if( b1 == 0 )
 80529dc:	b331      	cbz	r1, 8052a2c <PrepareB1+0x58>
 80529de:	4606      	mov	r6, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b1[0] = 0x49;
 80529e0:	2049      	movs	r0, #73	; 0x49
 80529e2:	7008      	strb	r0, [r1, #0]

    if( isAck == true )
 80529e4:	b1f2      	cbz	r2, 8052a24 <PrepareB1+0x50>
    {
        // confFCnt contains the frame counter value modulo 2^16 of the "confirmed" uplink frame that is being acknowledged
        uint16_t confFCnt = ( uint16_t )( CryptoNvm->LastDownFCnt % 65536 );
 80529e6:	4a12      	ldr	r2, [pc, #72]	; (8052a30 <PrepareB1+0x5c>)
 80529e8:	6812      	ldr	r2, [r2, #0]
 80529ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
        b1[1] = confFCnt & 0xFF;
 80529ec:	704a      	strb	r2, [r1, #1]
        b1[2] = ( confFCnt >> 8 ) & 0xFF;
 80529ee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80529f2:	708a      	strb	r2, [r1, #2]
    {
        b1[1] = 0x00;
        b1[2] = 0x00;
    }

    b1[3] = txDr;
 80529f4:	70cb      	strb	r3, [r1, #3]
    b1[4] = txCh;
 80529f6:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80529fa:	710b      	strb	r3, [r1, #4]
    b1[5] = UPLINK;  // dir = Uplink
 80529fc:	2000      	movs	r0, #0
 80529fe:	7148      	strb	r0, [r1, #5]

    b1[6] = devAddr & 0xFF;
 8052a00:	718d      	strb	r5, [r1, #6]
    b1[7] = ( devAddr >> 8 ) & 0xFF;
 8052a02:	0a2b      	lsrs	r3, r5, #8
 8052a04:	71cb      	strb	r3, [r1, #7]
    b1[8] = ( devAddr >> 16 ) & 0xFF;
 8052a06:	0c2b      	lsrs	r3, r5, #16
 8052a08:	720b      	strb	r3, [r1, #8]
    b1[9] = ( devAddr >> 24 ) & 0xFF;
 8052a0a:	0e2d      	lsrs	r5, r5, #24
 8052a0c:	724d      	strb	r5, [r1, #9]

    b1[10] = fCntUp & 0xFF;
 8052a0e:	728c      	strb	r4, [r1, #10]
    b1[11] = ( fCntUp >> 8 ) & 0xFF;
 8052a10:	0a23      	lsrs	r3, r4, #8
 8052a12:	72cb      	strb	r3, [r1, #11]
    b1[12] = ( fCntUp >> 16 ) & 0xFF;
 8052a14:	0c23      	lsrs	r3, r4, #16
 8052a16:	730b      	strb	r3, [r1, #12]
    b1[13] = ( fCntUp >> 24 ) & 0xFF;
 8052a18:	0e24      	lsrs	r4, r4, #24
 8052a1a:	734c      	strb	r4, [r1, #13]

    b1[14] = 0x00;
 8052a1c:	7388      	strb	r0, [r1, #14]

    b1[15] = msgLen & 0xFF;
 8052a1e:	73ce      	strb	r6, [r1, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 8052a20:	bc70      	pop	{r4, r5, r6}
 8052a22:	4770      	bx	lr
        b1[1] = 0x00;
 8052a24:	2200      	movs	r2, #0
 8052a26:	704a      	strb	r2, [r1, #1]
        b1[2] = 0x00;
 8052a28:	708a      	strb	r2, [r1, #2]
 8052a2a:	e7e3      	b.n	80529f4 <PrepareB1+0x20>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8052a2c:	2009      	movs	r0, #9
 8052a2e:	e7f7      	b.n	8052a20 <PrepareB1+0x4c>
 8052a30:	2001a070 	.word	0x2001a070

08052a34 <GetKeyAddrItem>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8052a34:	2300      	movs	r3, #0
 8052a36:	2b04      	cmp	r3, #4
 8052a38:	d814      	bhi.n	8052a64 <GetKeyAddrItem+0x30>
{
 8052a3a:	b410      	push	{r4}
    {
        if( KeyAddrList[i].AddrID == addrID )
 8052a3c:	461c      	mov	r4, r3
 8052a3e:	4a0a      	ldr	r2, [pc, #40]	; (8052a68 <GetKeyAddrItem+0x34>)
 8052a40:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8052a44:	4282      	cmp	r2, r0
 8052a46:	d007      	beq.n	8052a58 <GetKeyAddrItem+0x24>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8052a48:	3301      	adds	r3, #1
 8052a4a:	b2db      	uxtb	r3, r3
 8052a4c:	2b04      	cmp	r3, #4
 8052a4e:	d9f5      	bls.n	8052a3c <GetKeyAddrItem+0x8>
        {
            *item = &( KeyAddrList[i] );
            return LORAMAC_CRYPTO_SUCCESS;
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8052a50:	200b      	movs	r0, #11
}
 8052a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8052a56:	4770      	bx	lr
            *item = &( KeyAddrList[i] );
 8052a58:	4b03      	ldr	r3, [pc, #12]	; (8052a68 <GetKeyAddrItem+0x34>)
 8052a5a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8052a5e:	600c      	str	r4, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8052a60:	2000      	movs	r0, #0
 8052a62:	e7f6      	b.n	8052a52 <GetKeyAddrItem+0x1e>
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8052a64:	200b      	movs	r0, #11
}
 8052a66:	4770      	bx	lr
 8052a68:	20018298 	.word	0x20018298

08052a6c <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 8052a6c:	460b      	mov	r3, r1
 8052a6e:	2900      	cmp	r1, #0
 8052a70:	d038      	beq.n	8052ae4 <GetLastFcntDown+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 8052a72:	3801      	subs	r0, #1
 8052a74:	2806      	cmp	r0, #6
 8052a76:	d837      	bhi.n	8052ae8 <GetLastFcntDown+0x7c>
 8052a78:	e8df f000 	tbb	[pc, r0]
 8052a7c:	1c140c04 	.word	0x1c140c04
 8052a80:	2822      	.short	0x2822
 8052a82:	2e          	.byte	0x2e
 8052a83:	00          	.byte	0x00
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8052a84:	4a19      	ldr	r2, [pc, #100]	; (8052aec <GetLastFcntDown+0x80>)
 8052a86:	6812      	ldr	r2, [r2, #0]
 8052a88:	6911      	ldr	r1, [r2, #16]
 8052a8a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8052a8c:	6913      	ldr	r3, [r2, #16]
 8052a8e:	6313      	str	r3, [r2, #48]	; 0x30
            break;
#endif
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8052a90:	2000      	movs	r0, #0
            break;
 8052a92:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8052a94:	4a15      	ldr	r2, [pc, #84]	; (8052aec <GetLastFcntDown+0x80>)
 8052a96:	6812      	ldr	r2, [r2, #0]
 8052a98:	6951      	ldr	r1, [r2, #20]
 8052a9a:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 8052a9c:	6953      	ldr	r3, [r2, #20]
 8052a9e:	6313      	str	r3, [r2, #48]	; 0x30
    return LORAMAC_CRYPTO_SUCCESS;
 8052aa0:	2000      	movs	r0, #0
            break;
 8052aa2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8052aa4:	4a11      	ldr	r2, [pc, #68]	; (8052aec <GetLastFcntDown+0x80>)
 8052aa6:	6812      	ldr	r2, [r2, #0]
 8052aa8:	6991      	ldr	r1, [r2, #24]
 8052aaa:	6019      	str	r1, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8052aac:	6993      	ldr	r3, [r2, #24]
 8052aae:	6313      	str	r3, [r2, #48]	; 0x30
    return LORAMAC_CRYPTO_SUCCESS;
 8052ab0:	2000      	movs	r0, #0
            break;
 8052ab2:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8052ab4:	4a0d      	ldr	r2, [pc, #52]	; (8052aec <GetLastFcntDown+0x80>)
 8052ab6:	6812      	ldr	r2, [r2, #0]
 8052ab8:	69d2      	ldr	r2, [r2, #28]
 8052aba:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8052abc:	2000      	movs	r0, #0
            break;
 8052abe:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[1];
 8052ac0:	4a0a      	ldr	r2, [pc, #40]	; (8052aec <GetLastFcntDown+0x80>)
 8052ac2:	6812      	ldr	r2, [r2, #0]
 8052ac4:	6a12      	ldr	r2, [r2, #32]
 8052ac6:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8052ac8:	2000      	movs	r0, #0
            break;
 8052aca:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[2];
 8052acc:	4a07      	ldr	r2, [pc, #28]	; (8052aec <GetLastFcntDown+0x80>)
 8052ace:	6812      	ldr	r2, [r2, #0]
 8052ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8052ad2:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8052ad4:	2000      	movs	r0, #0
            break;
 8052ad6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
 8052ad8:	4a04      	ldr	r2, [pc, #16]	; (8052aec <GetLastFcntDown+0x80>)
 8052ada:	6812      	ldr	r2, [r2, #0]
 8052adc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8052ade:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8052ae0:	2000      	movs	r0, #0
            break;
 8052ae2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8052ae4:	2009      	movs	r0, #9
 8052ae6:	4770      	bx	lr
    if( lastDown == NULL )
 8052ae8:	2005      	movs	r0, #5
}
 8052aea:	4770      	bx	lr
 8052aec:	2001a070 	.word	0x2001a070

08052af0 <CheckFCntDown>:
 * \param[IN]     currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8052af0:	b510      	push	{r4, lr}
 8052af2:	b082      	sub	sp, #8
 8052af4:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 8052af6:	2300      	movs	r3, #0
 8052af8:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8052afa:	a901      	add	r1, sp, #4
 8052afc:	f7ff ffb6 	bl	8052a6c <GetLastFcntDown>
 8052b00:	b948      	cbnz	r0, 8052b16 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 8052b02:	9b01      	ldr	r3, [sp, #4]
 8052b04:	42a3      	cmp	r3, r4
 8052b06:	d309      	bcc.n	8052b1c <CheckFCntDown+0x2c>
 8052b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8052b0c:	d001      	beq.n	8052b12 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 8052b0e:	2000      	movs	r0, #0
 8052b10:	e002      	b.n	8052b18 <CheckFCntDown+0x28>
        return true;
 8052b12:	2001      	movs	r0, #1
 8052b14:	e000      	b.n	8052b18 <CheckFCntDown+0x28>
        return false;
 8052b16:	2000      	movs	r0, #0
    }
}
 8052b18:	b002      	add	sp, #8
 8052b1a:	bd10      	pop	{r4, pc}
        return true;
 8052b1c:	2001      	movs	r0, #1
 8052b1e:	e7fb      	b.n	8052b18 <CheckFCntDown+0x28>

08052b20 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 8052b20:	3801      	subs	r0, #1
 8052b22:	2806      	cmp	r0, #6
 8052b24:	d820      	bhi.n	8052b68 <UpdateFCntDown+0x48>
 8052b26:	e8df f000 	tbb	[pc, r0]
 8052b2a:	0804      	.short	0x0804
 8052b2c:	1814100c 	.word	0x1814100c
 8052b30:	1c          	.byte	0x1c
 8052b31:	00          	.byte	0x00
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8052b32:	4b0e      	ldr	r3, [pc, #56]	; (8052b6c <UpdateFCntDown+0x4c>)
 8052b34:	681b      	ldr	r3, [r3, #0]
 8052b36:	6119      	str	r1, [r3, #16]
            break;
 8052b38:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8052b3a:	4b0c      	ldr	r3, [pc, #48]	; (8052b6c <UpdateFCntDown+0x4c>)
 8052b3c:	681b      	ldr	r3, [r3, #0]
 8052b3e:	6159      	str	r1, [r3, #20]
            break;
 8052b40:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8052b42:	4b0a      	ldr	r3, [pc, #40]	; (8052b6c <UpdateFCntDown+0x4c>)
 8052b44:	681b      	ldr	r3, [r3, #0]
 8052b46:	6199      	str	r1, [r3, #24]
            break;
 8052b48:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8052b4a:	4b08      	ldr	r3, [pc, #32]	; (8052b6c <UpdateFCntDown+0x4c>)
 8052b4c:	681b      	ldr	r3, [r3, #0]
 8052b4e:	61d9      	str	r1, [r3, #28]
            break;
 8052b50:	4770      	bx	lr
#endif
#if ( LORAMAC_MAX_MC_CTX > 1 )
        case MC_FCNT_DOWN_1:
            CryptoNvm->FCntList.McFCntDown[1] = currentDown;
 8052b52:	4b06      	ldr	r3, [pc, #24]	; (8052b6c <UpdateFCntDown+0x4c>)
 8052b54:	681b      	ldr	r3, [r3, #0]
 8052b56:	6219      	str	r1, [r3, #32]
            break;
 8052b58:	4770      	bx	lr
#endif
#if ( LORAMAC_MAX_MC_CTX > 2 )
        case MC_FCNT_DOWN_2:
            CryptoNvm->FCntList.McFCntDown[2] = currentDown;
 8052b5a:	4b04      	ldr	r3, [pc, #16]	; (8052b6c <UpdateFCntDown+0x4c>)
 8052b5c:	681b      	ldr	r3, [r3, #0]
 8052b5e:	6259      	str	r1, [r3, #36]	; 0x24
            break;
 8052b60:	4770      	bx	lr
#endif
#if ( LORAMAC_MAX_MC_CTX > 3 )
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
 8052b62:	4b02      	ldr	r3, [pc, #8]	; (8052b6c <UpdateFCntDown+0x4c>)
 8052b64:	681b      	ldr	r3, [r3, #0]
 8052b66:	6299      	str	r1, [r3, #40]	; 0x28
            break;
#endif
        default:
            break;
    }
}
 8052b68:	4770      	bx	lr
 8052b6a:	bf00      	nop
 8052b6c:	2001a070 	.word	0x2001a070

08052b70 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 8052b70:	4b0a      	ldr	r3, [pc, #40]	; (8052b9c <ResetFCnts+0x2c>)
 8052b72:	6819      	ldr	r1, [r3, #0]
 8052b74:	2300      	movs	r3, #0
 8052b76:	60cb      	str	r3, [r1, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8052b78:	f04f 32ff 	mov.w	r2, #4294967295
 8052b7c:	610a      	str	r2, [r1, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8052b7e:	614a      	str	r2, [r1, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8052b80:	618a      	str	r2, [r1, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8052b82:	630a      	str	r2, [r1, #48]	; 0x30

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8052b84:	e006      	b.n	8052b94 <ResetFCnts+0x24>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 8052b86:	1d9a      	adds	r2, r3, #6
 8052b88:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8052b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8052b90:	6050      	str	r0, [r2, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8052b92:	3301      	adds	r3, #1
 8052b94:	2b03      	cmp	r3, #3
 8052b96:	ddf6      	ble.n	8052b86 <ResetFCnts+0x16>
    }
}
 8052b98:	4770      	bx	lr
 8052b9a:	bf00      	nop
 8052b9c:	2001a070 	.word	0x2001a070

08052ba0 <ComputeCmacB1>:
{
 8052ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8052ba4:	b088      	sub	sp, #32
 8052ba6:	9e12      	ldr	r6, [sp, #72]	; 0x48
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8052ba8:	b308      	cbz	r0, 8052bee <ComputeCmacB1+0x4e>
 8052baa:	460c      	mov	r4, r1
 8052bac:	4615      	mov	r5, r2
 8052bae:	461a      	mov	r2, r3
 8052bb0:	4680      	mov	r8, r0
 8052bb2:	b1f6      	cbz	r6, 8052bf2 <ComputeCmacB1+0x52>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8052bb4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8052bb8:	d81d      	bhi.n	8052bf6 <ComputeCmacB1+0x56>
    PrepareB1( len, keyID, isAck, txDr, txCh, devAddr, fCntUp, micBuff );
 8052bba:	af04      	add	r7, sp, #16
 8052bbc:	9703      	str	r7, [sp, #12]
 8052bbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8052bc0:	9302      	str	r3, [sp, #8]
 8052bc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8052bc4:	9301      	str	r3, [sp, #4]
 8052bc6:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8052bca:	9300      	str	r3, [sp, #0]
 8052bcc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8052bd0:	4629      	mov	r1, r5
 8052bd2:	4620      	mov	r0, r4
 8052bd4:	f7ff fefe 	bl	80529d4 <PrepareB1>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8052bd8:	9600      	str	r6, [sp, #0]
 8052bda:	462b      	mov	r3, r5
 8052bdc:	4622      	mov	r2, r4
 8052bde:	4641      	mov	r1, r8
 8052be0:	4638      	mov	r0, r7
 8052be2:	f7f0 ff6f 	bl	8043ac4 <SecureElementComputeAesCmac>
 8052be6:	b940      	cbnz	r0, 8052bfa <ComputeCmacB1+0x5a>
}
 8052be8:	b008      	add	sp, #32
 8052bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8052bee:	2009      	movs	r0, #9
 8052bf0:	e7fa      	b.n	8052be8 <ComputeCmacB1+0x48>
 8052bf2:	2009      	movs	r0, #9
 8052bf4:	e7f8      	b.n	8052be8 <ComputeCmacB1+0x48>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8052bf6:	200d      	movs	r0, #13
 8052bf8:	e7f6      	b.n	8052be8 <ComputeCmacB1+0x48>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8052bfa:	200e      	movs	r0, #14
 8052bfc:	e7f4      	b.n	8052be8 <ComputeCmacB1+0x48>

08052bfe <ComputeCmacB0>:
{
 8052bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8052c02:	b088      	sub	sp, #32
 8052c04:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8052c06:	b1f0      	cbz	r0, 8052c46 <ComputeCmacB0+0x48>
 8052c08:	460c      	mov	r4, r1
 8052c0a:	4615      	mov	r5, r2
 8052c0c:	461a      	mov	r2, r3
 8052c0e:	4680      	mov	r8, r0
 8052c10:	b1de      	cbz	r6, 8052c4a <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8052c12:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8052c16:	d81a      	bhi.n	8052c4e <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8052c18:	af04      	add	r7, sp, #16
 8052c1a:	9702      	str	r7, [sp, #8]
 8052c1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8052c1e:	9301      	str	r3, [sp, #4]
 8052c20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8052c22:	9300      	str	r3, [sp, #0]
 8052c24:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8052c28:	4629      	mov	r1, r5
 8052c2a:	4620      	mov	r0, r4
 8052c2c:	f7ff fea2 	bl	8052974 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8052c30:	9600      	str	r6, [sp, #0]
 8052c32:	462b      	mov	r3, r5
 8052c34:	4622      	mov	r2, r4
 8052c36:	4641      	mov	r1, r8
 8052c38:	4638      	mov	r0, r7
 8052c3a:	f7f0 ff43 	bl	8043ac4 <SecureElementComputeAesCmac>
 8052c3e:	b940      	cbnz	r0, 8052c52 <ComputeCmacB0+0x54>
}
 8052c40:	b008      	add	sp, #32
 8052c42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8052c46:	2009      	movs	r0, #9
 8052c48:	e7fa      	b.n	8052c40 <ComputeCmacB0+0x42>
 8052c4a:	2009      	movs	r0, #9
 8052c4c:	e7f8      	b.n	8052c40 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8052c4e:	200d      	movs	r0, #13
 8052c50:	e7f6      	b.n	8052c40 <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8052c52:	200e      	movs	r0, #14
 8052c54:	e7f4      	b.n	8052c40 <ComputeCmacB0+0x42>

08052c56 <DeriveLifeTimeSessionKey>:
    if( devEUI == 0 )
 8052c56:	b319      	cbz	r1, 8052ca0 <DeriveLifeTimeSessionKey+0x4a>
{
 8052c58:	b510      	push	{r4, lr}
 8052c5a:	b084      	sub	sp, #16
 8052c5c:	4604      	mov	r4, r0
 8052c5e:	4608      	mov	r0, r1
    uint8_t compBase[16] = { 0 };
 8052c60:	2300      	movs	r3, #0
 8052c62:	9300      	str	r3, [sp, #0]
 8052c64:	9301      	str	r3, [sp, #4]
 8052c66:	9302      	str	r3, [sp, #8]
 8052c68:	9303      	str	r3, [sp, #12]
    switch( keyID )
 8052c6a:	2c02      	cmp	r4, #2
 8052c6c:	d003      	beq.n	8052c76 <DeriveLifeTimeSessionKey+0x20>
 8052c6e:	2c03      	cmp	r4, #3
 8052c70:	d012      	beq.n	8052c98 <DeriveLifeTimeSessionKey+0x42>
 8052c72:	200a      	movs	r0, #10
 8052c74:	e00e      	b.n	8052c94 <DeriveLifeTimeSessionKey+0x3e>
            compBase[0] = 0x06;
 8052c76:	2306      	movs	r3, #6
 8052c78:	f88d 3000 	strb.w	r3, [sp]
    memcpyr( compBase + 1, devEUI, 8 );
 8052c7c:	2208      	movs	r2, #8
 8052c7e:	4601      	mov	r1, r0
 8052c80:	f10d 0001 	add.w	r0, sp, #1
 8052c84:	f002 f91d 	bl	8054ec2 <memcpyr>
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8052c88:	4622      	mov	r2, r4
 8052c8a:	2101      	movs	r1, #1
 8052c8c:	4668      	mov	r0, sp
 8052c8e:	f7f0 ff87 	bl	8043ba0 <SecureElementDeriveAndStoreKey>
 8052c92:	b938      	cbnz	r0, 8052ca4 <DeriveLifeTimeSessionKey+0x4e>
}
 8052c94:	b004      	add	sp, #16
 8052c96:	bd10      	pop	{r4, pc}
            compBase[0] = 0x05;
 8052c98:	2305      	movs	r3, #5
 8052c9a:	f88d 3000 	strb.w	r3, [sp]
            break;
 8052c9e:	e7ed      	b.n	8052c7c <DeriveLifeTimeSessionKey+0x26>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8052ca0:	2009      	movs	r0, #9
}
 8052ca2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8052ca4:	200e      	movs	r0, #14
 8052ca6:	e7f5      	b.n	8052c94 <DeriveLifeTimeSessionKey+0x3e>

08052ca8 <DeriveSessionKey11x>:
    if( joinEUI == 0 )
 8052ca8:	2a00      	cmp	r2, #0
 8052caa:	d03d      	beq.n	8052d28 <DeriveSessionKey11x+0x80>
{
 8052cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8052cae:	b085      	sub	sp, #20
 8052cb0:	4605      	mov	r5, r0
 8052cb2:	460c      	mov	r4, r1
 8052cb4:	461e      	mov	r6, r3
 8052cb6:	4611      	mov	r1, r2
    uint8_t compBase[16] = { 0 };
 8052cb8:	2200      	movs	r2, #0
 8052cba:	9201      	str	r2, [sp, #4]
 8052cbc:	9202      	str	r2, [sp, #8]
 8052cbe:	9203      	str	r2, [sp, #12]
    switch( keyID )
 8052cc0:	1f02      	subs	r2, r0, #4
 8052cc2:	2a03      	cmp	r2, #3
 8052cc4:	d832      	bhi.n	8052d2c <DeriveSessionKey11x+0x84>
 8052cc6:	e8df f002 	tbb	[pc, r2]
 8052cca:	2002      	.short	0x2002
 8052ccc:	2a25      	.short	0x2a25
            compBase[0] = 0x01;
 8052cce:	2701      	movs	r7, #1
 8052cd0:	f88d 7000 	strb.w	r7, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8052cd4:	f88d 4001 	strb.w	r4, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8052cd8:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8052cdc:	f88d 3002 	strb.w	r3, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8052ce0:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8052ce4:	f88d 4003 	strb.w	r4, [sp, #3]
    memcpyr( compBase + 4, joinEUI, 8 );
 8052ce8:	2208      	movs	r2, #8
 8052cea:	a801      	add	r0, sp, #4
 8052cec:	f002 f8e9 	bl	8054ec2 <memcpyr>
    compBase[12] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8052cf0:	f88d 600c 	strb.w	r6, [sp, #12]
    compBase[13] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8052cf4:	0a33      	lsrs	r3, r6, #8
 8052cf6:	f88d 300d 	strb.w	r3, [sp, #13]
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8052cfa:	462a      	mov	r2, r5
 8052cfc:	4639      	mov	r1, r7
 8052cfe:	4668      	mov	r0, sp
 8052d00:	f7f0 ff4e 	bl	8043ba0 <SecureElementDeriveAndStoreKey>
 8052d04:	b9a0      	cbnz	r0, 8052d30 <DeriveSessionKey11x+0x88>
}
 8052d06:	b005      	add	sp, #20
 8052d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
            compBase[0] = 0x03;
 8052d0a:	2303      	movs	r3, #3
 8052d0c:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = NWK_KEY;
 8052d10:	2701      	movs	r7, #1
            break;
 8052d12:	e7df      	b.n	8052cd4 <DeriveSessionKey11x+0x2c>
            compBase[0] = 0x04;
 8052d14:	2304      	movs	r3, #4
 8052d16:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = NWK_KEY;
 8052d1a:	2701      	movs	r7, #1
            break;
 8052d1c:	e7da      	b.n	8052cd4 <DeriveSessionKey11x+0x2c>
            compBase[0] = 0x02;
 8052d1e:	2302      	movs	r3, #2
 8052d20:	f88d 3000 	strb.w	r3, [sp]
            rootKeyId = APP_KEY;
 8052d24:	2700      	movs	r7, #0
            break;
 8052d26:	e7d5      	b.n	8052cd4 <DeriveSessionKey11x+0x2c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8052d28:	2009      	movs	r0, #9
}
 8052d2a:	4770      	bx	lr
    uint8_t compBase[16] = { 0 };
 8052d2c:	200a      	movs	r0, #10
 8052d2e:	e7ea      	b.n	8052d06 <DeriveSessionKey11x+0x5e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8052d30:	200e      	movs	r0, #14
 8052d32:	e7e8      	b.n	8052d06 <DeriveSessionKey11x+0x5e>

08052d34 <DeriveSessionKey10x>:
{
 8052d34:	b510      	push	{r4, lr}
 8052d36:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 8052d38:	2400      	movs	r4, #0
 8052d3a:	9402      	str	r4, [sp, #8]
 8052d3c:	9403      	str	r4, [sp, #12]
    switch( keyID )
 8052d3e:	2806      	cmp	r0, #6
 8052d40:	d905      	bls.n	8052d4e <DeriveSessionKey10x+0x1a>
 8052d42:	2807      	cmp	r0, #7
 8052d44:	d108      	bne.n	8052d58 <DeriveSessionKey10x+0x24>
            compBase[0] = 0x02;
 8052d46:	2402      	movs	r4, #2
 8052d48:	f88d 4000 	strb.w	r4, [sp]
            break;
 8052d4c:	e009      	b.n	8052d62 <DeriveSessionKey10x+0x2e>
    switch( keyID )
 8052d4e:	2804      	cmp	r0, #4
 8052d50:	d204      	bcs.n	8052d5c <DeriveSessionKey10x+0x28>
 8052d52:	200a      	movs	r0, #10
}
 8052d54:	b004      	add	sp, #16
 8052d56:	bd10      	pop	{r4, pc}
    switch( keyID )
 8052d58:	200a      	movs	r0, #10
 8052d5a:	e7fb      	b.n	8052d54 <DeriveSessionKey10x+0x20>
            compBase[0] = 0x01;
 8052d5c:	2401      	movs	r4, #1
 8052d5e:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8052d62:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8052d66:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8052d6a:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8052d6e:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8052d72:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8052d76:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8052d7a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8052d7e:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8052d82:	f3c2 4207 	ubfx	r2, r2, #16, #8
 8052d86:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8052d8a:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8052d8e:	0a1b      	lsrs	r3, r3, #8
 8052d90:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8052d94:	4602      	mov	r2, r0
 8052d96:	2101      	movs	r1, #1
 8052d98:	4668      	mov	r0, sp
 8052d9a:	f7f0 ff01 	bl	8043ba0 <SecureElementDeriveAndStoreKey>
 8052d9e:	2800      	cmp	r0, #0
 8052da0:	d0d8      	beq.n	8052d54 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8052da2:	200e      	movs	r0, #14
 8052da4:	e7d6      	b.n	8052d54 <DeriveSessionKey10x+0x20>

08052da6 <PayloadEncrypt>:
{
 8052da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8052daa:	b088      	sub	sp, #32
 8052dac:	4690      	mov	r8, r2
 8052dae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 8052db0:	2800      	cmp	r0, #0
 8052db2:	d050      	beq.n	8052e56 <PayloadEncrypt+0xb0>
 8052db4:	460d      	mov	r5, r1
 8052db6:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 8052db8:	2600      	movs	r6, #0
 8052dba:	9604      	str	r6, [sp, #16]
 8052dbc:	9605      	str	r6, [sp, #20]
 8052dbe:	9606      	str	r6, [sp, #24]
 8052dc0:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 8052dc2:	9600      	str	r6, [sp, #0]
 8052dc4:	9601      	str	r6, [sp, #4]
 8052dc6:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 8052dc8:	2701      	movs	r7, #1
 8052dca:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 8052dce:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 8052dd2:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 8052dd6:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8052dda:	0a19      	lsrs	r1, r3, #8
 8052ddc:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8052de0:	0c19      	lsrs	r1, r3, #16
 8052de2:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8052de6:	0e1b      	lsrs	r3, r3, #24
 8052de8:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 8052dec:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8052df0:	0a13      	lsrs	r3, r2, #8
 8052df2:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8052df6:	0c13      	lsrs	r3, r2, #16
 8052df8:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8052dfc:	0e12      	lsrs	r2, r2, #24
 8052dfe:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 8052e02:	e013      	b.n	8052e2c <PayloadEncrypt+0x86>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8052e04:	18f2      	adds	r2, r6, r3
 8052e06:	5ca0      	ldrb	r0, [r4, r2]
 8052e08:	a908      	add	r1, sp, #32
 8052e0a:	4419      	add	r1, r3
 8052e0c:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 8052e10:	4048      	eors	r0, r1
 8052e12:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8052e14:	3301      	adds	r3, #1
 8052e16:	b2db      	uxtb	r3, r3
 8052e18:	462a      	mov	r2, r5
 8052e1a:	2d10      	cmp	r5, #16
 8052e1c:	bfa8      	it	ge
 8052e1e:	2210      	movge	r2, #16
 8052e20:	4293      	cmp	r3, r2
 8052e22:	dbef      	blt.n	8052e04 <PayloadEncrypt+0x5e>
        size -= 16;
 8052e24:	3d10      	subs	r5, #16
 8052e26:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 8052e28:	3610      	adds	r6, #16
 8052e2a:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 8052e2c:	2d00      	cmp	r5, #0
 8052e2e:	dd0e      	ble.n	8052e4e <PayloadEncrypt+0xa8>
        aBlock[15] = ctr & 0xFF;
 8052e30:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 8052e34:	3701      	adds	r7, #1
 8052e36:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8052e38:	ab04      	add	r3, sp, #16
 8052e3a:	4642      	mov	r2, r8
 8052e3c:	2110      	movs	r1, #16
 8052e3e:	4668      	mov	r0, sp
 8052e40:	f7f0 fe8e 	bl	8043b60 <SecureElementAesEncrypt>
 8052e44:	4603      	mov	r3, r0
 8052e46:	2800      	cmp	r0, #0
 8052e48:	d0e6      	beq.n	8052e18 <PayloadEncrypt+0x72>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8052e4a:	200e      	movs	r0, #14
 8052e4c:	e000      	b.n	8052e50 <PayloadEncrypt+0xaa>
    return LORAMAC_CRYPTO_SUCCESS;
 8052e4e:	2000      	movs	r0, #0
}
 8052e50:	b008      	add	sp, #32
 8052e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8052e56:	2009      	movs	r0, #9
 8052e58:	e7fa      	b.n	8052e50 <PayloadEncrypt+0xaa>
	...

08052e5c <FOptsEncrypt>:
{
 8052e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8052e5e:	b089      	sub	sp, #36	; 0x24
 8052e60:	4605      	mov	r5, r0
 8052e62:	980e      	ldr	r0, [sp, #56]	; 0x38
 8052e64:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if( buffer == 0 )
 8052e66:	2e00      	cmp	r6, #0
 8052e68:	d05e      	beq.n	8052f28 <FOptsEncrypt+0xcc>
    uint8_t sBlock[16] = { 0 };
 8052e6a:	2400      	movs	r4, #0
 8052e6c:	9404      	str	r4, [sp, #16]
 8052e6e:	9405      	str	r4, [sp, #20]
 8052e70:	9406      	str	r4, [sp, #24]
 8052e72:	9407      	str	r4, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 8052e74:	9400      	str	r4, [sp, #0]
 8052e76:	9401      	str	r4, [sp, #4]
 8052e78:	9402      	str	r4, [sp, #8]
 8052e7a:	9403      	str	r4, [sp, #12]
    aBlock[0] = 0x01;
 8052e7c:	2401      	movs	r4, #1
 8052e7e:	f88d 4000 	strb.w	r4, [sp]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
 8052e82:	4c2a      	ldr	r4, [pc, #168]	; (8052f2c <FOptsEncrypt+0xd0>)
 8052e84:	6824      	ldr	r4, [r4, #0]
 8052e86:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8052f30 <FOptsEncrypt+0xd4>
 8052e8a:	6827      	ldr	r7, [r4, #0]
 8052e8c:	4567      	cmp	r7, ip
 8052e8e:	d909      	bls.n	8052ea4 <FOptsEncrypt+0x48>
        switch( fCntID )
 8052e90:	2b01      	cmp	r3, #1
 8052e92:	d02a      	beq.n	8052eea <FOptsEncrypt+0x8e>
 8052e94:	2b02      	cmp	r3, #2
 8052e96:	d02c      	beq.n	8052ef2 <FOptsEncrypt+0x96>
 8052e98:	b10b      	cbz	r3, 8052e9e <FOptsEncrypt+0x42>
 8052e9a:	2008      	movs	r0, #8
 8052e9c:	e023      	b.n	8052ee6 <FOptsEncrypt+0x8a>
                aBlock[4] = 0x01;
 8052e9e:	2301      	movs	r3, #1
 8052ea0:	f88d 3004 	strb.w	r3, [sp, #4]
    aBlock[5] = dir;
 8052ea4:	f88d 2005 	strb.w	r2, [sp, #5]
    aBlock[6] = address & 0xFF;
 8052ea8:	f88d 1006 	strb.w	r1, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8052eac:	0a0b      	lsrs	r3, r1, #8
 8052eae:	f88d 3007 	strb.w	r3, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8052eb2:	0c0b      	lsrs	r3, r1, #16
 8052eb4:	f88d 3008 	strb.w	r3, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8052eb8:	0e09      	lsrs	r1, r1, #24
 8052eba:	f88d 1009 	strb.w	r1, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 8052ebe:	f88d 000a 	strb.w	r0, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8052ec2:	0a03      	lsrs	r3, r0, #8
 8052ec4:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8052ec8:	0c03      	lsrs	r3, r0, #16
 8052eca:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8052ece:	0e00      	lsrs	r0, r0, #24
 8052ed0:	f88d 000d 	strb.w	r0, [sp, #13]
    if( CryptoNvm->LrWanVersion.Value > 0x01010000 )
 8052ed4:	6822      	ldr	r2, [r4, #0]
 8052ed6:	4b16      	ldr	r3, [pc, #88]	; (8052f30 <FOptsEncrypt+0xd4>)
 8052ed8:	429a      	cmp	r2, r3
 8052eda:	d902      	bls.n	8052ee2 <FOptsEncrypt+0x86>
        aBlock[15] = 0x01;
 8052edc:	2301      	movs	r3, #1
 8052ede:	f88d 300f 	strb.w	r3, [sp, #15]
    if( size > 0 )
 8052ee2:	b955      	cbnz	r5, 8052efa <FOptsEncrypt+0x9e>
    return LORAMAC_CRYPTO_SUCCESS;
 8052ee4:	2000      	movs	r0, #0
}
 8052ee6:	b009      	add	sp, #36	; 0x24
 8052ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                aBlock[4] = 0x01;
 8052eea:	2301      	movs	r3, #1
 8052eec:	f88d 3004 	strb.w	r3, [sp, #4]
                break;
 8052ef0:	e7d8      	b.n	8052ea4 <FOptsEncrypt+0x48>
                aBlock[4] = 0x02;
 8052ef2:	2302      	movs	r3, #2
 8052ef4:	f88d 3004 	strb.w	r3, [sp, #4]
                break;
 8052ef8:	e7d4      	b.n	8052ea4 <FOptsEncrypt+0x48>
        if( SecureElementAesEncrypt( aBlock, 16, NWK_S_ENC_KEY, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8052efa:	ab04      	add	r3, sp, #16
 8052efc:	2206      	movs	r2, #6
 8052efe:	2110      	movs	r1, #16
 8052f00:	4668      	mov	r0, sp
 8052f02:	f7f0 fe2d 	bl	8043b60 <SecureElementAesEncrypt>
 8052f06:	4603      	mov	r3, r0
 8052f08:	b150      	cbz	r0, 8052f20 <FOptsEncrypt+0xc4>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8052f0a:	200e      	movs	r0, #14
 8052f0c:	e7eb      	b.n	8052ee6 <FOptsEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8052f0e:	5cf2      	ldrb	r2, [r6, r3]
 8052f10:	a908      	add	r1, sp, #32
 8052f12:	4419      	add	r1, r3
 8052f14:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 8052f18:	404a      	eors	r2, r1
 8052f1a:	54f2      	strb	r2, [r6, r3]
        for( uint8_t i = 0; i < size; i++ )
 8052f1c:	3301      	adds	r3, #1
 8052f1e:	b2db      	uxtb	r3, r3
 8052f20:	b29a      	uxth	r2, r3
 8052f22:	42aa      	cmp	r2, r5
 8052f24:	d3f3      	bcc.n	8052f0e <FOptsEncrypt+0xb2>
 8052f26:	e7de      	b.n	8052ee6 <FOptsEncrypt+0x8a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8052f28:	2009      	movs	r0, #9
 8052f2a:	e7dc      	b.n	8052ee6 <FOptsEncrypt+0x8a>
 8052f2c:	2001a070 	.word	0x2001a070
 8052f30:	01010000 	.word	0x01010000

08052f34 <VerifyCmacB0>:
    if( msg == 0 )
 8052f34:	b370      	cbz	r0, 8052f94 <VerifyCmacB0+0x60>
{
 8052f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8052f3a:	b0c8      	sub	sp, #288	; 0x120
 8052f3c:	460c      	mov	r4, r1
 8052f3e:	4615      	mov	r5, r2
 8052f40:	461e      	mov	r6, r3
 8052f42:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8052f44:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8052f48:	d826      	bhi.n	8052f98 <VerifyCmacB0+0x64>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8052f4a:	af04      	add	r7, sp, #16
 8052f4c:	f44f 7288 	mov.w	r2, #272	; 0x110
 8052f50:	2100      	movs	r1, #0
 8052f52:	4638      	mov	r0, r7
 8052f54:	f001 ffc1 	bl	8054eda <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8052f58:	9702      	str	r7, [sp, #8]
 8052f5a:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8052f5c:	9301      	str	r3, [sp, #4]
 8052f5e:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8052f60:	9300      	str	r3, [sp, #0]
 8052f62:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 8052f66:	4632      	mov	r2, r6
 8052f68:	4629      	mov	r1, r5
 8052f6a:	4620      	mov	r0, r4
 8052f6c:	f7ff fd02 	bl	8052974 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8052f70:	4622      	mov	r2, r4
 8052f72:	4641      	mov	r1, r8
 8052f74:	a808      	add	r0, sp, #32
 8052f76:	f001 ff9a 	bl	8054eae <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8052f7a:	f104 0110 	add.w	r1, r4, #16
 8052f7e:	462b      	mov	r3, r5
 8052f80:	9a51      	ldr	r2, [sp, #324]	; 0x144
 8052f82:	b289      	uxth	r1, r1
 8052f84:	4638      	mov	r0, r7
 8052f86:	f7f0 fdcd 	bl	8043b24 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 8052f8a:	b130      	cbz	r0, 8052f9a <VerifyCmacB0+0x66>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8052f8c:	2801      	cmp	r0, #1
 8052f8e:	d004      	beq.n	8052f9a <VerifyCmacB0+0x66>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8052f90:	200e      	movs	r0, #14
 8052f92:	e002      	b.n	8052f9a <VerifyCmacB0+0x66>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8052f94:	2009      	movs	r0, #9
}
 8052f96:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8052f98:	200d      	movs	r0, #13
}
 8052f9a:	b048      	add	sp, #288	; 0x120
 8052f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08052fa0 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 8052fa0:	b188      	cbz	r0, 8052fc6 <LoRaMacCryptoInit+0x26>
{
 8052fa2:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8052fa4:	4c09      	ldr	r4, [pc, #36]	; (8052fcc <LoRaMacCryptoInit+0x2c>)
 8052fa6:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8052fa8:	2238      	movs	r2, #56	; 0x38
 8052faa:	2100      	movs	r1, #0
 8052fac:	f001 ff95 	bl	8054eda <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8052fb0:	6823      	ldr	r3, [r4, #0]
 8052fb2:	2201      	movs	r2, #1
 8052fb4:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8052fb6:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Rfu = 1;
 8052fb8:	701a      	strb	r2, [r3, #0]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8052fba:	2400      	movs	r4, #0
 8052fbc:	705c      	strb	r4, [r3, #1]

    // Reset frame counters
    ResetFCnts( );
 8052fbe:	f7ff fdd7 	bl	8052b70 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8052fc2:	4620      	mov	r0, r4
}
 8052fc4:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8052fc6:	2008      	movs	r0, #8
}
 8052fc8:	4770      	bx	lr
 8052fca:	bf00      	nop
 8052fcc:	2001a070 	.word	0x2001a070

08052fd0 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 8052fd0:	4b02      	ldr	r3, [pc, #8]	; (8052fdc <LoRaMacCryptoSetLrWanVersion+0xc>)
 8052fd2:	681b      	ldr	r3, [r3, #0]
 8052fd4:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 8052fd6:	2000      	movs	r0, #0
 8052fd8:	4770      	bx	lr
 8052fda:	bf00      	nop
 8052fdc:	2001a070 	.word	0x2001a070

08052fe0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 8052fe0:	b130      	cbz	r0, 8052ff0 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8052fe2:	4b04      	ldr	r3, [pc, #16]	; (8052ff4 <LoRaMacCryptoGetFCntUp+0x14>)
 8052fe4:	681b      	ldr	r3, [r3, #0]
 8052fe6:	68db      	ldr	r3, [r3, #12]
 8052fe8:	3301      	adds	r3, #1
 8052fea:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8052fec:	2000      	movs	r0, #0
 8052fee:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8052ff0:	2009      	movs	r0, #9
}
 8052ff2:	4770      	bx	lr
 8052ff4:	2001a070 	.word	0x2001a070

08052ff8 <LoRaMacCryptoGetFCntDown>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8052ff8:	b530      	push	{r4, r5, lr}
 8052ffa:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 8052ffc:	2300      	movs	r3, #0
 8052ffe:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 8053000:	b1f2      	cbz	r2, 8053040 <LoRaMacCryptoGetFCntDown+0x48>
 8053002:	460c      	mov	r4, r1
 8053004:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8053006:	a901      	add	r1, sp, #4
 8053008:	f7ff fd30 	bl	8052a6c <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 805300c:	b948      	cbnz	r0, 8053022 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 805300e:	9b01      	ldr	r3, [sp, #4]
 8053010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8053014:	d007      	beq.n	8053026 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8053016:	b29a      	uxth	r2, r3
 8053018:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 805301a:	2a00      	cmp	r2, #0
 805301c:	dd05      	ble.n	805302a <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 805301e:	4413      	add	r3, r2
 8053020:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8053022:	b003      	add	sp, #12
 8053024:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 8053026:	602c      	str	r4, [r5, #0]
 8053028:	e7fb      	b.n	8053022 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 805302a:	b132      	cbz	r2, 805303a <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 805302c:	0c1b      	lsrs	r3, r3, #16
 805302e:	041b      	lsls	r3, r3, #16
 8053030:	4423      	add	r3, r4
 8053032:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8053036:	602b      	str	r3, [r5, #0]
 8053038:	e7f3      	b.n	8053022 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 805303a:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 805303c:	2007      	movs	r0, #7
 805303e:	e7f0      	b.n	8053022 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8053040:	2009      	movs	r0, #9
 8053042:	e7ee      	b.n	8053022 <LoRaMacCryptoGetFCntDown+0x2a>

08053044 <LoRaMacCryptoGetRJcount>:

#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
LoRaMacCryptoStatus_t LoRaMacCryptoGetRJcount( FCntIdentifier_t fCntID, uint16_t* rJcount )
{
    if( rJcount == 0 )
 8053044:	b191      	cbz	r1, 805306c <LoRaMacCryptoGetRJcount+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 8053046:	2808      	cmp	r0, #8
 8053048:	d003      	beq.n	8053052 <LoRaMacCryptoGetRJcount+0xe>
 805304a:	2809      	cmp	r0, #9
 805304c:	d007      	beq.n	805305e <LoRaMacCryptoGetRJcount+0x1a>
 805304e:	2005      	movs	r0, #5
 8053050:	4770      	bx	lr
    {
        case RJ_COUNT_0:
            *rJcount = RJcount0 + 1;
 8053052:	4a07      	ldr	r2, [pc, #28]	; (8053070 <LoRaMacCryptoGetRJcount+0x2c>)
 8053054:	8812      	ldrh	r2, [r2, #0]
 8053056:	3201      	adds	r2, #1
 8053058:	800a      	strh	r2, [r1, #0]
            *rJcount = CryptoNvm->FCntList.RJcount1 + 1;
            break;
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 805305a:	2000      	movs	r0, #0
            break;
 805305c:	4770      	bx	lr
            *rJcount = CryptoNvm->FCntList.RJcount1 + 1;
 805305e:	4a05      	ldr	r2, [pc, #20]	; (8053074 <LoRaMacCryptoGetRJcount+0x30>)
 8053060:	6812      	ldr	r2, [r2, #0]
 8053062:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8053064:	3201      	adds	r2, #1
 8053066:	800a      	strh	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8053068:	2000      	movs	r0, #0
            break;
 805306a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 805306c:	2009      	movs	r0, #9
}
 805306e:	4770      	bx	lr
 8053070:	2001a074 	.word	0x2001a074
 8053074:	2001a070 	.word	0x2001a070

08053078 <LoRaMacCryptoSetMulticastReference>:
#endif

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 8053078:	b1a0      	cbz	r0, 80530a4 <LoRaMacCryptoSetMulticastReference+0x2c>
{
 805307a:	b410      	push	{r4}
 805307c:	4604      	mov	r4, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 805307e:	2200      	movs	r2, #0
 8053080:	e00a      	b.n	8053098 <LoRaMacCryptoSetMulticastReference+0x20>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8053082:	4b09      	ldr	r3, [pc, #36]	; (80530a8 <LoRaMacCryptoSetMulticastReference+0x30>)
 8053084:	681b      	ldr	r3, [r3, #0]
 8053086:	212c      	movs	r1, #44	; 0x2c
 8053088:	fb01 4102 	mla	r1, r1, r2, r4
 805308c:	1d90      	adds	r0, r2, #6
 805308e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8053092:	3304      	adds	r3, #4
 8053094:	620b      	str	r3, [r1, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8053096:	3201      	adds	r2, #1
 8053098:	2a03      	cmp	r2, #3
 805309a:	ddf2      	ble.n	8053082 <LoRaMacCryptoSetMulticastReference+0xa>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 805309c:	2000      	movs	r0, #0
}
 805309e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80530a2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 80530a4:	2009      	movs	r0, #9
}
 80530a6:	4770      	bx	lr
 80530a8:	2001a070 	.word	0x2001a070

080530ac <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 80530ac:	b340      	cbz	r0, 8053100 <LoRaMacCryptoPrepareJoinRequest+0x54>
{
 80530ae:	b530      	push	{r4, r5, lr}
 80530b0:	b083      	sub	sp, #12
 80530b2:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80530b4:	4b18      	ldr	r3, [pc, #96]	; (8053118 <LoRaMacCryptoPrepareJoinRequest+0x6c>)
 80530b6:	681a      	ldr	r2, [r3, #0]
 80530b8:	8893      	ldrh	r3, [r2, #4]
 80530ba:	3301      	adds	r3, #1
 80530bc:	b29b      	uxth	r3, r3
 80530be:	8093      	strh	r3, [r2, #4]
#endif
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80530c0:	82c3      	strh	r3, [r0, #22]

#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    // Derive lifetime session keys
    if( DeriveLifeTimeSessionKey( J_S_INT_KEY, macMsg->DevEUI ) != LORAMAC_CRYPTO_SUCCESS )
 80530c2:	f100 050e 	add.w	r5, r0, #14
 80530c6:	4629      	mov	r1, r5
 80530c8:	2002      	movs	r0, #2
 80530ca:	f7ff fdc4 	bl	8052c56 <DeriveLifeTimeSessionKey>
 80530ce:	b9c8      	cbnz	r0, 8053104 <LoRaMacCryptoPrepareJoinRequest+0x58>
    {
        return LORAMAC_CRYPTO_ERROR;
    }
    if( DeriveLifeTimeSessionKey( J_S_ENC_KEY, macMsg->DevEUI ) != LORAMAC_CRYPTO_SUCCESS )
 80530d0:	4629      	mov	r1, r5
 80530d2:	2003      	movs	r0, #3
 80530d4:	f7ff fdbf 	bl	8052c56 <DeriveLifeTimeSessionKey>
 80530d8:	b9b8      	cbnz	r0, 805310a <LoRaMacCryptoPrepareJoinRequest+0x5e>
        return LORAMAC_CRYPTO_ERROR;
    }
#endif

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80530da:	4620      	mov	r0, r4
 80530dc:	f000 fb95 	bl	805380a <LoRaMacSerializerJoinRequest>
 80530e0:	b9a8      	cbnz	r0, 805310e <LoRaMacCryptoPrepareJoinRequest+0x62>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80530e2:	4623      	mov	r3, r4
 80530e4:	f853 1b18 	ldr.w	r1, [r3], #24
 80530e8:	9300      	str	r3, [sp, #0]
 80530ea:	2301      	movs	r3, #1
 80530ec:	2213      	movs	r2, #19
 80530ee:	f7f0 fce9 	bl	8043ac4 <SecureElementComputeAesCmac>
 80530f2:	b970      	cbnz	r0, 8053112 <LoRaMacCryptoPrepareJoinRequest+0x66>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80530f4:	4620      	mov	r0, r4
 80530f6:	f000 fb88 	bl	805380a <LoRaMacSerializerJoinRequest>
 80530fa:	b120      	cbz	r0, 8053106 <LoRaMacCryptoPrepareJoinRequest+0x5a>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80530fc:	2010      	movs	r0, #16
 80530fe:	e002      	b.n	8053106 <LoRaMacCryptoPrepareJoinRequest+0x5a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8053100:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8053102:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR;
 8053104:	2012      	movs	r0, #18
}
 8053106:	b003      	add	sp, #12
 8053108:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR;
 805310a:	2012      	movs	r0, #18
 805310c:	e7fb      	b.n	8053106 <LoRaMacCryptoPrepareJoinRequest+0x5a>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 805310e:	2010      	movs	r0, #16
 8053110:	e7f9      	b.n	8053106 <LoRaMacCryptoPrepareJoinRequest+0x5a>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8053112:	200e      	movs	r0, #14
 8053114:	e7f7      	b.n	8053106 <LoRaMacCryptoPrepareJoinRequest+0x5a>
 8053116:	bf00      	nop
 8053118:	2001a070 	.word	0x2001a070

0805311c <LoRaMacCryptoPrepareReJoinType1>:

#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
    if( macMsg == 0 )
 805311c:	b1f8      	cbz	r0, 805315e <LoRaMacCryptoPrepareReJoinType1+0x42>
{
 805311e:	b510      	push	{r4, lr}
 8053120:	b082      	sub	sp, #8
 8053122:	4604      	mov	r4, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    // Check for RJcount1 overflow
    if( CryptoNvm->FCntList.RJcount1 == 65535 )
 8053124:	4b13      	ldr	r3, [pc, #76]	; (8053174 <LoRaMacCryptoPrepareReJoinType1+0x58>)
 8053126:	681b      	ldr	r3, [r3, #0]
 8053128:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 805312a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 805312e:	429a      	cmp	r2, r3
 8053130:	d017      	beq.n	8053162 <LoRaMacCryptoPrepareReJoinType1+0x46>
    {
        return LORAMAC_CRYPTO_ERROR_RJCOUNT1_OVERFLOW;
    }

    // Serialize message
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8053132:	f000 fba0 	bl	8053876 <LoRaMacSerializerReJoinType1>
 8053136:	b9b0      	cbnz	r0, 8053166 <LoRaMacCryptoPrepareReJoinType1+0x4a>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    // cmac = aes128_cmac(JSIntKey, MHDR | RejoinType | JoinEUI| DevEUI | RJcount1)
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_RE_JOIN_1_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), J_S_INT_KEY, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8053138:	4623      	mov	r3, r4
 805313a:	f853 1b1c 	ldr.w	r1, [r3], #28
 805313e:	9300      	str	r3, [sp, #0]
 8053140:	2302      	movs	r3, #2
 8053142:	2214      	movs	r2, #20
 8053144:	f7f0 fcbe 	bl	8043ac4 <SecureElementComputeAesCmac>
 8053148:	b980      	cbnz	r0, 805316c <LoRaMacCryptoPrepareReJoinType1+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerReJoinType1( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 805314a:	4620      	mov	r0, r4
 805314c:	f000 fb93 	bl	8053876 <LoRaMacSerializerReJoinType1>
 8053150:	b970      	cbnz	r0, 8053170 <LoRaMacCryptoPrepareReJoinType1+0x54>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Increment RJcount1
    CryptoNvm->FCntList.RJcount1++;
 8053152:	4b08      	ldr	r3, [pc, #32]	; (8053174 <LoRaMacCryptoPrepareReJoinType1+0x58>)
 8053154:	681a      	ldr	r2, [r3, #0]
 8053156:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8053158:	3301      	adds	r3, #1
 805315a:	8593      	strh	r3, [r2, #44]	; 0x2c

    return LORAMAC_CRYPTO_SUCCESS;
 805315c:	e004      	b.n	8053168 <LoRaMacCryptoPrepareReJoinType1+0x4c>
        return LORAMAC_CRYPTO_ERROR_NPE;
 805315e:	2009      	movs	r0, #9
}
 8053160:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_RJCOUNT1_OVERFLOW;
 8053162:	2011      	movs	r0, #17
 8053164:	e000      	b.n	8053168 <LoRaMacCryptoPrepareReJoinType1+0x4c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8053166:	2010      	movs	r0, #16
}
 8053168:	b002      	add	sp, #8
 805316a:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 805316c:	200e      	movs	r0, #14
 805316e:	e7fb      	b.n	8053168 <LoRaMacCryptoPrepareReJoinType1+0x4c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8053170:	2010      	movs	r0, #16
 8053172:	e7f9      	b.n	8053168 <LoRaMacCryptoPrepareReJoinType1+0x4c>
 8053174:	2001a070 	.word	0x2001a070

08053178 <LoRaMacCryptoPrepareReJoinType0or2>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
    if( macMsg == 0 )
 8053178:	b1e8      	cbz	r0, 80531b6 <LoRaMacCryptoPrepareReJoinType0or2+0x3e>
{
 805317a:	b510      	push	{r4, lr}
 805317c:	b082      	sub	sp, #8
 805317e:	4604      	mov	r4, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    // Check for RJcount0 overflow
    if( RJcount0 == 65535 )
 8053180:	4b12      	ldr	r3, [pc, #72]	; (80531cc <LoRaMacCryptoPrepareReJoinType0or2+0x54>)
 8053182:	881a      	ldrh	r2, [r3, #0]
 8053184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8053188:	429a      	cmp	r2, r3
 805318a:	d016      	beq.n	80531ba <LoRaMacCryptoPrepareReJoinType0or2+0x42>
    {
        return LORAMAC_CRYPTO_FAIL_RJCOUNT0_OVERFLOW;
    }

    // Serialize message
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 805318c:	f000 fbae 	bl	80538ec <LoRaMacSerializerReJoinType0or2>
 8053190:	b9a8      	cbnz	r0, 80531be <LoRaMacCryptoPrepareReJoinType0or2+0x46>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    // cmac = aes128_cmac(SNwkSIntKey, MHDR | Rejoin Type | NetID | DevEUI | RJcount0)
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_RE_JOIN_0_2_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8053192:	4623      	mov	r3, r4
 8053194:	f853 1b14 	ldr.w	r1, [r3], #20
 8053198:	9300      	str	r3, [sp, #0]
 805319a:	2305      	movs	r3, #5
 805319c:	220f      	movs	r2, #15
 805319e:	f7f0 fc91 	bl	8043ac4 <SecureElementComputeAesCmac>
 80531a2:	b978      	cbnz	r0, 80531c4 <LoRaMacCryptoPrepareReJoinType0or2+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerReJoinType0or2( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80531a4:	4620      	mov	r0, r4
 80531a6:	f000 fba1 	bl	80538ec <LoRaMacSerializerReJoinType0or2>
 80531aa:	b968      	cbnz	r0, 80531c8 <LoRaMacCryptoPrepareReJoinType0or2+0x50>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Increment RJcount0
    RJcount0++;
 80531ac:	4a07      	ldr	r2, [pc, #28]	; (80531cc <LoRaMacCryptoPrepareReJoinType0or2+0x54>)
 80531ae:	8813      	ldrh	r3, [r2, #0]
 80531b0:	3301      	adds	r3, #1
 80531b2:	8013      	strh	r3, [r2, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80531b4:	e004      	b.n	80531c0 <LoRaMacCryptoPrepareReJoinType0or2+0x48>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80531b6:	2009      	movs	r0, #9
}
 80531b8:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_RJCOUNT0_OVERFLOW;
 80531ba:	2004      	movs	r0, #4
 80531bc:	e000      	b.n	80531c0 <LoRaMacCryptoPrepareReJoinType0or2+0x48>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80531be:	2010      	movs	r0, #16
}
 80531c0:	b002      	add	sp, #8
 80531c2:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80531c4:	200e      	movs	r0, #14
 80531c6:	e7fb      	b.n	80531c0 <LoRaMacCryptoPrepareReJoinType0or2+0x48>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80531c8:	2010      	movs	r0, #16
 80531ca:	e7f9      	b.n	80531c0 <LoRaMacCryptoPrepareReJoinType0or2+0x48>
 80531cc:	2001a074 	.word	0x2001a074

080531d0 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 80531d0:	2b00      	cmp	r3, #0
 80531d2:	f000 808c 	beq.w	80532ee <LoRaMacCryptoSecureMessage+0x11e>
{
 80531d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80531d8:	b089      	sub	sp, #36	; 0x24
 80531da:	4604      	mov	r4, r0
 80531dc:	460f      	mov	r7, r1
 80531de:	4616      	mov	r6, r2
 80531e0:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 80531e2:	4b48      	ldr	r3, [pc, #288]	; (8053304 <LoRaMacCryptoSecureMessage+0x134>)
 80531e4:	681b      	ldr	r3, [r3, #0]
 80531e6:	68db      	ldr	r3, [r3, #12]
 80531e8:	4283      	cmp	r3, r0
 80531ea:	f200 8083 	bhi.w	80532f4 <LoRaMacCryptoSecureMessage+0x124>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 80531ee:	f895 2020 	ldrb.w	r2, [r5, #32]
 80531f2:	2a00      	cmp	r2, #0
 80531f4:	d039      	beq.n	805326a <LoRaMacCryptoSecureMessage+0x9a>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80531f6:	2207      	movs	r2, #7
    {
        // Use network session key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 80531f8:	42a3      	cmp	r3, r4
 80531fa:	d210      	bcs.n	805321e <LoRaMacCryptoSecureMessage+0x4e>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 80531fc:	9401      	str	r4, [sp, #4]
 80531fe:	2300      	movs	r3, #0
 8053200:	9300      	str	r3, [sp, #0]
 8053202:	68ab      	ldr	r3, [r5, #8]
 8053204:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8053208:	6a68      	ldr	r0, [r5, #36]	; 0x24
 805320a:	f7ff fdcc 	bl	8052da6 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 805320e:	4603      	mov	r3, r0
 8053210:	2800      	cmp	r0, #0
 8053212:	d170      	bne.n	80532f6 <LoRaMacCryptoSecureMessage+0x126>
        {
            return retval;
        }

#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
        if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
 8053214:	4b3b      	ldr	r3, [pc, #236]	; (8053304 <LoRaMacCryptoSecureMessage+0x134>)
 8053216:	681b      	ldr	r3, [r3, #0]
 8053218:	789b      	ldrb	r3, [r3, #2]
 805321a:	2b01      	cmp	r3, #1
 805321c:	d027      	beq.n	805326e <LoRaMacCryptoSecureMessage+0x9e>
        }
#endif
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 805321e:	4628      	mov	r0, r5
 8053220:	f000 fb9f 	bl	8053962 <LoRaMacSerializerData>
 8053224:	2800      	cmp	r0, #0
 8053226:	d169      	bne.n	80532fc <LoRaMacCryptoSecureMessage+0x12c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
 8053228:	4b36      	ldr	r3, [pc, #216]	; (8053304 <LoRaMacCryptoSecureMessage+0x134>)
 805322a:	681b      	ldr	r3, [r3, #0]
 805322c:	789b      	ldrb	r3, [r3, #2]
 805322e:	2b01      	cmp	r3, #1
 8053230:	d02d      	beq.n	805328e <LoRaMacCryptoSecureMessage+0xbe>
    else
#endif
    {
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), NWK_S_ENC_KEY, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8053232:	7929      	ldrb	r1, [r5, #4]
 8053234:	3904      	subs	r1, #4
 8053236:	462b      	mov	r3, r5
 8053238:	f853 0b2c 	ldr.w	r0, [r3], #44
 805323c:	9303      	str	r3, [sp, #12]
 805323e:	9402      	str	r4, [sp, #8]
 8053240:	68ab      	ldr	r3, [r5, #8]
 8053242:	9301      	str	r3, [sp, #4]
 8053244:	2300      	movs	r3, #0
 8053246:	9300      	str	r3, [sp, #0]
 8053248:	2206      	movs	r2, #6
 805324a:	b289      	uxth	r1, r1
 805324c:	f7ff fcd7 	bl	8052bfe <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8053250:	4603      	mov	r3, r0
 8053252:	2800      	cmp	r0, #0
 8053254:	d14f      	bne.n	80532f6 <LoRaMacCryptoSecureMessage+0x126>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8053256:	4628      	mov	r0, r5
 8053258:	f000 fb83 	bl	8053962 <LoRaMacSerializerData>
 805325c:	4603      	mov	r3, r0
 805325e:	2800      	cmp	r0, #0
 8053260:	d14e      	bne.n	8053300 <LoRaMacCryptoSecureMessage+0x130>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8053262:	4a28      	ldr	r2, [pc, #160]	; (8053304 <LoRaMacCryptoSecureMessage+0x134>)
 8053264:	6812      	ldr	r2, [r2, #0]
 8053266:	60d4      	str	r4, [r2, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8053268:	e045      	b.n	80532f6 <LoRaMacCryptoSecureMessage+0x126>
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 805326a:	2206      	movs	r2, #6
 805326c:	e7c4      	b.n	80531f8 <LoRaMacCryptoSecureMessage+0x28>
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, macMsg->FHDR.DevAddr, UPLINK, FCNT_UP, fCntUp, macMsg->FHDR.FOpts );
 805326e:	7b28      	ldrb	r0, [r5, #12]
 8053270:	f105 0310 	add.w	r3, r5, #16
 8053274:	9301      	str	r3, [sp, #4]
 8053276:	9400      	str	r4, [sp, #0]
 8053278:	2300      	movs	r3, #0
 805327a:	461a      	mov	r2, r3
 805327c:	68a9      	ldr	r1, [r5, #8]
 805327e:	f000 000f 	and.w	r0, r0, #15
 8053282:	f7ff fdeb 	bl	8052e5c <FOptsEncrypt>
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 8053286:	4603      	mov	r3, r0
 8053288:	2800      	cmp	r0, #0
 805328a:	d0c8      	beq.n	805321e <LoRaMacCryptoSecureMessage+0x4e>
 805328c:	e033      	b.n	80532f6 <LoRaMacCryptoSecureMessage+0x126>
        uint32_t cmacS = 0;
 805328e:	2300      	movs	r3, #0
 8053290:	9306      	str	r3, [sp, #24]
        uint32_t cmacF = 0;
 8053292:	9307      	str	r3, [sp, #28]
        retval = ComputeCmacB1( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), S_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, txDr, txCh, macMsg->FHDR.DevAddr, fCntUp, &cmacS );
 8053294:	7929      	ldrb	r1, [r5, #4]
 8053296:	7b2b      	ldrb	r3, [r5, #12]
 8053298:	3904      	subs	r1, #4
 805329a:	aa06      	add	r2, sp, #24
 805329c:	9204      	str	r2, [sp, #16]
 805329e:	9403      	str	r4, [sp, #12]
 80532a0:	68aa      	ldr	r2, [r5, #8]
 80532a2:	9202      	str	r2, [sp, #8]
 80532a4:	9601      	str	r6, [sp, #4]
 80532a6:	9700      	str	r7, [sp, #0]
 80532a8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80532ac:	2205      	movs	r2, #5
 80532ae:	b289      	uxth	r1, r1
 80532b0:	6828      	ldr	r0, [r5, #0]
 80532b2:	f7ff fc75 	bl	8052ba0 <ComputeCmacB1>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80532b6:	4603      	mov	r3, r0
 80532b8:	b9e8      	cbnz	r0, 80532f6 <LoRaMacCryptoSecureMessage+0x126>
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), F_NWK_S_INT_KEY, macMsg->FHDR.FCtrl.Bits.Ack, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &cmacF );
 80532ba:	7929      	ldrb	r1, [r5, #4]
 80532bc:	7b2b      	ldrb	r3, [r5, #12]
 80532be:	3904      	subs	r1, #4
 80532c0:	aa07      	add	r2, sp, #28
 80532c2:	9203      	str	r2, [sp, #12]
 80532c4:	9402      	str	r4, [sp, #8]
 80532c6:	68aa      	ldr	r2, [r5, #8]
 80532c8:	9201      	str	r2, [sp, #4]
 80532ca:	2200      	movs	r2, #0
 80532cc:	9200      	str	r2, [sp, #0]
 80532ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80532d2:	2204      	movs	r2, #4
 80532d4:	b289      	uxth	r1, r1
 80532d6:	6828      	ldr	r0, [r5, #0]
 80532d8:	f7ff fc91 	bl	8052bfe <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80532dc:	4603      	mov	r3, r0
 80532de:	b950      	cbnz	r0, 80532f6 <LoRaMacCryptoSecureMessage+0x126>
        macMsg->MIC = ( ( cmacF << 16 ) & 0xFFFF0000 ) | ( cmacS & 0x0000FFFF );
 80532e0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80532e4:	9a07      	ldr	r2, [sp, #28]
 80532e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80532ea:	62eb      	str	r3, [r5, #44]	; 0x2c
 80532ec:	e7b3      	b.n	8053256 <LoRaMacCryptoSecureMessage+0x86>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80532ee:	2309      	movs	r3, #9
}
 80532f0:	4618      	mov	r0, r3
 80532f2:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80532f4:	2306      	movs	r3, #6
}
 80532f6:	4618      	mov	r0, r3
 80532f8:	b009      	add	sp, #36	; 0x24
 80532fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80532fc:	2310      	movs	r3, #16
 80532fe:	e7fa      	b.n	80532f6 <LoRaMacCryptoSecureMessage+0x126>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8053300:	2310      	movs	r3, #16
 8053302:	e7f8      	b.n	80532f6 <LoRaMacCryptoSecureMessage+0x126>
 8053304:	2001a070 	.word	0x2001a070

08053308 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8053308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 805330c:	b086      	sub	sp, #24
 805330e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    if( macMsg == 0 )
 8053310:	2d00      	cmp	r5, #0
 8053312:	d060      	beq.n	80533d6 <LoRaMacCryptoUnsecureMessage+0xce>
 8053314:	4681      	mov	r9, r0
 8053316:	4688      	mov	r8, r1
 8053318:	4617      	mov	r7, r2
 805331a:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 805331c:	4619      	mov	r1, r3
 805331e:	4610      	mov	r0, r2
 8053320:	f7ff fbe6 	bl	8052af0 <CheckFCntDown>
 8053324:	2800      	cmp	r0, #0
 8053326:	d058      	beq.n	80533da <LoRaMacCryptoUnsecureMessage+0xd2>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8053328:	4628      	mov	r0, r5
 805332a:	f000 fa0f 	bl	805374c <LoRaMacParserData>
 805332e:	2800      	cmp	r0, #0
 8053330:	d158      	bne.n	80533e4 <LoRaMacCryptoUnsecureMessage+0xdc>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8053332:	a905      	add	r1, sp, #20
 8053334:	4648      	mov	r0, r9
 8053336:	f7ff fb7d 	bl	8052a34 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 805333a:	4606      	mov	r6, r0
 805333c:	2800      	cmp	r0, #0
 805333e:	d14d      	bne.n	80533dc <LoRaMacCryptoUnsecureMessage+0xd4>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8053340:	9b05      	ldr	r3, [sp, #20]
 8053342:	f893 a001 	ldrb.w	sl, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 8053346:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8053348:	68ab      	ldr	r3, [r5, #8]
 805334a:	4543      	cmp	r3, r8
 805334c:	d14c      	bne.n	80533e8 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 805334e:	7b2b      	ldrb	r3, [r5, #12]
 8053350:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8053354:	4925      	ldr	r1, [pc, #148]	; (80533ec <LoRaMacCryptoUnsecureMessage+0xe4>)
 8053356:	6809      	ldr	r1, [r1, #0]
 8053358:	7889      	ldrb	r1, [r1, #2]
 805335a:	b901      	cbnz	r1, 805335e <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 805335c:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 805335e:	7929      	ldrb	r1, [r5, #4]
 8053360:	3904      	subs	r1, #4
 8053362:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 8053364:	9003      	str	r0, [sp, #12]
 8053366:	9402      	str	r4, [sp, #8]
 8053368:	f8cd 8004 	str.w	r8, [sp, #4]
 805336c:	2001      	movs	r0, #1
 805336e:	9000      	str	r0, [sp, #0]
 8053370:	b289      	uxth	r1, r1
 8053372:	6828      	ldr	r0, [r5, #0]
 8053374:	f7ff fdde 	bl	8052f34 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8053378:	4606      	mov	r6, r0
 805337a:	bb78      	cbnz	r0, 80533dc <LoRaMacCryptoUnsecureMessage+0xd4>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 805337c:	f895 3020 	ldrb.w	r3, [r5, #32]
 8053380:	b90b      	cbnz	r3, 8053386 <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
 8053382:	f04f 0a06 	mov.w	sl, #6
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8053386:	9401      	str	r4, [sp, #4]
 8053388:	2301      	movs	r3, #1
 805338a:	9300      	str	r3, [sp, #0]
 805338c:	4643      	mov	r3, r8
 805338e:	4652      	mov	r2, sl
 8053390:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8053394:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8053396:	f7ff fd06 	bl	8052da6 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 805339a:	4606      	mov	r6, r0
 805339c:	b9f0      	cbnz	r0, 80533dc <LoRaMacCryptoUnsecureMessage+0xd4>
    {
        return retval;
    }

#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    if( CryptoNvm->LrWanVersion.Fields.Minor == 1 )
 805339e:	4b13      	ldr	r3, [pc, #76]	; (80533ec <LoRaMacCryptoUnsecureMessage+0xe4>)
 80533a0:	681b      	ldr	r3, [r3, #0]
 80533a2:	789b      	ldrb	r3, [r3, #2]
 80533a4:	2b01      	cmp	r3, #1
 80533a6:	d102      	bne.n	80533ae <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        if( addrID == UNICAST_DEV_ADDR )
 80533a8:	f1b9 0f04 	cmp.w	r9, #4
 80533ac:	d004      	beq.n	80533b8 <LoRaMacCryptoUnsecureMessage+0xb0>
            }
        } 
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 80533ae:	4621      	mov	r1, r4
 80533b0:	4638      	mov	r0, r7
 80533b2:	f7ff fbb5 	bl	8052b20 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80533b6:	e011      	b.n	80533dc <LoRaMacCryptoUnsecureMessage+0xd4>
            retval = FOptsEncrypt( macMsg->FHDR.FCtrl.Bits.FOptsLen, address, DOWNLINK, fCntID, fCntDown, macMsg->FHDR.FOpts );
 80533b8:	7b28      	ldrb	r0, [r5, #12]
 80533ba:	3510      	adds	r5, #16
 80533bc:	9501      	str	r5, [sp, #4]
 80533be:	9400      	str	r4, [sp, #0]
 80533c0:	463b      	mov	r3, r7
 80533c2:	2201      	movs	r2, #1
 80533c4:	4641      	mov	r1, r8
 80533c6:	f000 000f 	and.w	r0, r0, #15
 80533ca:	f7ff fd47 	bl	8052e5c <FOptsEncrypt>
            if( retval != LORAMAC_CRYPTO_SUCCESS )
 80533ce:	2800      	cmp	r0, #0
 80533d0:	d0ed      	beq.n	80533ae <LoRaMacCryptoUnsecureMessage+0xa6>
                return retval;
 80533d2:	4606      	mov	r6, r0
 80533d4:	e002      	b.n	80533dc <LoRaMacCryptoUnsecureMessage+0xd4>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80533d6:	2609      	movs	r6, #9
 80533d8:	e000      	b.n	80533dc <LoRaMacCryptoUnsecureMessage+0xd4>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80533da:	2606      	movs	r6, #6
}
 80533dc:	4630      	mov	r0, r6
 80533de:	b006      	add	sp, #24
 80533e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80533e4:	260f      	movs	r6, #15
 80533e6:	e7f9      	b.n	80533dc <LoRaMacCryptoUnsecureMessage+0xd4>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 80533e8:	2602      	movs	r6, #2
 80533ea:	e7f7      	b.n	80533dc <LoRaMacCryptoUnsecureMessage+0xd4>
 80533ec:	2001a070 	.word	0x2001a070

080533f0 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 80533f0:	b9a9      	cbnz	r1, 805341e <LoRaMacCryptoDeriveMcRootKey+0x2e>
{
 80533f2:	b510      	push	{r4, lr}
 80533f4:	b084      	sub	sp, #16
 80533f6:	460c      	mov	r4, r1
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 80533f8:	2300      	movs	r3, #0
 80533fa:	9300      	str	r3, [sp, #0]
 80533fc:	9301      	str	r3, [sp, #4]
 80533fe:	9302      	str	r3, [sp, #8]
 8053400:	9303      	str	r3, [sp, #12]

    if( versionMinor == 1 )
 8053402:	2801      	cmp	r0, #1
 8053404:	d007      	beq.n	8053416 <LoRaMacCryptoDeriveMcRootKey+0x26>
    {
        compBase[0] = 0x20;
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8053406:	2208      	movs	r2, #8
 8053408:	4621      	mov	r1, r4
 805340a:	4668      	mov	r0, sp
 805340c:	f7f0 fbc8 	bl	8043ba0 <SecureElementDeriveAndStoreKey>
 8053410:	b938      	cbnz	r0, 8053422 <LoRaMacCryptoDeriveMcRootKey+0x32>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8053412:	b004      	add	sp, #16
 8053414:	bd10      	pop	{r4, pc}
        compBase[0] = 0x20;
 8053416:	2320      	movs	r3, #32
 8053418:	f88d 3000 	strb.w	r3, [sp]
 805341c:	e7f3      	b.n	8053406 <LoRaMacCryptoDeriveMcRootKey+0x16>
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 805341e:	200a      	movs	r0, #10
}
 8053420:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8053422:	200e      	movs	r0, #14
 8053424:	e7f5      	b.n	8053412 <LoRaMacCryptoDeriveMcRootKey+0x22>

08053426 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8053426:	2808      	cmp	r0, #8
 8053428:	d001      	beq.n	805342e <LoRaMacCryptoDeriveMcKEKey+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 805342a:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 805342c:	4770      	bx	lr
{
 805342e:	b500      	push	{lr}
 8053430:	b085      	sub	sp, #20
    uint8_t compBase[16] = { 0 };
 8053432:	2300      	movs	r3, #0
 8053434:	9300      	str	r3, [sp, #0]
 8053436:	9301      	str	r3, [sp, #4]
 8053438:	9302      	str	r3, [sp, #8]
 805343a:	9303      	str	r3, [sp, #12]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 805343c:	227f      	movs	r2, #127	; 0x7f
 805343e:	4601      	mov	r1, r0
 8053440:	4668      	mov	r0, sp
 8053442:	f7f0 fbad 	bl	8043ba0 <SecureElementDeriveAndStoreKey>
 8053446:	b910      	cbnz	r0, 805344e <LoRaMacCryptoDeriveMcKEKey+0x28>
}
 8053448:	b005      	add	sp, #20
 805344a:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 805344e:	200e      	movs	r0, #14
 8053450:	e7fa      	b.n	8053448 <LoRaMacCryptoDeriveMcKEKey+0x22>
	...

08053454 <LoRaMacCryptoSetKey>:
{
 8053454:	b510      	push	{r4, lr}
 8053456:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8053458:	f7f0 faee 	bl	8043a38 <SecureElementSetKey>
 805345c:	b978      	cbnz	r0, 805347e <LoRaMacCryptoSetKey+0x2a>
    if( keyID == APP_KEY )
 805345e:	b104      	cbz	r4, 8053462 <LoRaMacCryptoSetKey+0xe>
}
 8053460:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8053462:	4b09      	ldr	r3, [pc, #36]	; (8053488 <LoRaMacCryptoSetKey+0x34>)
 8053464:	681b      	ldr	r3, [r3, #0]
 8053466:	4621      	mov	r1, r4
 8053468:	7898      	ldrb	r0, [r3, #2]
 805346a:	f7ff ffc1 	bl	80533f0 <LoRaMacCryptoDeriveMcRootKey>
 805346e:	b940      	cbnz	r0, 8053482 <LoRaMacCryptoSetKey+0x2e>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8053470:	2008      	movs	r0, #8
 8053472:	f7ff ffd8 	bl	8053426 <LoRaMacCryptoDeriveMcKEKey>
 8053476:	2800      	cmp	r0, #0
 8053478:	d0f2      	beq.n	8053460 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 805347a:	200e      	movs	r0, #14
 805347c:	e7f0      	b.n	8053460 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 805347e:	200e      	movs	r0, #14
 8053480:	e7ee      	b.n	8053460 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8053482:	200e      	movs	r0, #14
 8053484:	e7ec      	b.n	8053460 <LoRaMacCryptoSetKey+0xc>
 8053486:	bf00      	nop
 8053488:	2001a070 	.word	0x2001a070

0805348c <LoRaMacCryptoHandleJoinAccept>:
{
 805348c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8053490:	b08e      	sub	sp, #56	; 0x38
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8053492:	2a00      	cmp	r2, #0
 8053494:	f000 80b4 	beq.w	8053600 <LoRaMacCryptoHandleJoinAccept+0x174>
 8053498:	4605      	mov	r5, r0
 805349a:	460f      	mov	r7, r1
 805349c:	4614      	mov	r4, r2
 805349e:	2900      	cmp	r1, #0
 80534a0:	f000 80b0 	beq.w	8053604 <LoRaMacCryptoHandleJoinAccept+0x178>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 80534a4:	2600      	movs	r6, #0
 80534a6:	9605      	str	r6, [sp, #20]
 80534a8:	221d      	movs	r2, #29
 80534aa:	4631      	mov	r1, r6
 80534ac:	a806      	add	r0, sp, #24
 80534ae:	f001 fd74 	bl	8054f9a <memset>
    uint8_t versionMinor         = 0;
 80534b2:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 80534b6:	4b5a      	ldr	r3, [pc, #360]	; (8053620 <LoRaMacCryptoHandleJoinAccept+0x194>)
 80534b8:	681b      	ldr	r3, [r3, #0]
 80534ba:	f8b3 8004 	ldrh.w	r8, [r3, #4]
    if( joinReqType == JOIN_REQ )
 80534be:	2dff      	cmp	r5, #255	; 0xff
 80534c0:	d008      	beq.n	80534d4 <LoRaMacCryptoHandleJoinAccept+0x48>
        if( ( joinReqType == REJOIN_REQ_0 ) || ( joinReqType == REJOIN_REQ_2 ) )
 80534c2:	b125      	cbz	r5, 80534ce <LoRaMacCryptoHandleJoinAccept+0x42>
 80534c4:	2d02      	cmp	r5, #2
 80534c6:	d002      	beq.n	80534ce <LoRaMacCryptoHandleJoinAccept+0x42>
            nonce = CryptoNvm->FCntList.RJcount1;
 80534c8:	f8b3 802c 	ldrh.w	r8, [r3, #44]	; 0x2c
 80534cc:	e002      	b.n	80534d4 <LoRaMacCryptoHandleJoinAccept+0x48>
            nonce = RJcount0;
 80534ce:	4b55      	ldr	r3, [pc, #340]	; (8053624 <LoRaMacCryptoHandleJoinAccept+0x198>)
 80534d0:	f8b3 8000 	ldrh.w	r8, [r3]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 80534d4:	f10d 0313 	add.w	r3, sp, #19
 80534d8:	9302      	str	r3, [sp, #8]
 80534da:	ab05      	add	r3, sp, #20
 80534dc:	9301      	str	r3, [sp, #4]
 80534de:	7923      	ldrb	r3, [r4, #4]
 80534e0:	9300      	str	r3, [sp, #0]
 80534e2:	6823      	ldr	r3, [r4, #0]
 80534e4:	4642      	mov	r2, r8
 80534e6:	4639      	mov	r1, r7
 80534e8:	4628      	mov	r0, r5
 80534ea:	f7f0 fb7f 	bl	8043bec <SecureElementProcessJoinAccept>
 80534ee:	2800      	cmp	r0, #0
 80534f0:	f040 808a 	bne.w	8053608 <LoRaMacCryptoHandleJoinAccept+0x17c>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 80534f4:	7922      	ldrb	r2, [r4, #4]
 80534f6:	a905      	add	r1, sp, #20
 80534f8:	6820      	ldr	r0, [r4, #0]
 80534fa:	f001 fcd8 	bl	8054eae <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80534fe:	4620      	mov	r0, r4
 8053500:	f000 f8d4 	bl	80536ac <LoRaMacParserJoinAccept>
 8053504:	2800      	cmp	r0, #0
 8053506:	f040 8084 	bne.w	8053612 <LoRaMacCryptoHandleJoinAccept+0x186>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 805350a:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 805350c:	79e3      	ldrb	r3, [r4, #7]
 805350e:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8053512:	7a23      	ldrb	r3, [r4, #8]
 8053514:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    if( currentJoinNonce > CryptoNvm->JoinNonce )
 8053518:	4b41      	ldr	r3, [pc, #260]	; (8053620 <LoRaMacCryptoHandleJoinAccept+0x194>)
 805351a:	681b      	ldr	r3, [r3, #0]
 805351c:	689a      	ldr	r2, [r3, #8]
 805351e:	42aa      	cmp	r2, r5
 8053520:	d279      	bcs.n	8053616 <LoRaMacCryptoHandleJoinAccept+0x18a>
        CryptoNvm->JoinNonce = currentJoinNonce;
 8053522:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8053524:	2100      	movs	r1, #0
 8053526:	f89d 0013 	ldrb.w	r0, [sp, #19]
 805352a:	f7ff ff61 	bl	80533f0 <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 805352e:	4606      	mov	r6, r0
 8053530:	2800      	cmp	r0, #0
 8053532:	d16a      	bne.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8053534:	2008      	movs	r0, #8
 8053536:	f7ff ff76 	bl	8053426 <LoRaMacCryptoDeriveMcKEKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 805353a:	4606      	mov	r6, r0
 805353c:	2800      	cmp	r0, #0
 805353e:	d164      	bne.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
    if( versionMinor == 1 )
 8053540:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8053544:	2b01      	cmp	r3, #1
 8053546:	d00f      	beq.n	8053568 <LoRaMacCryptoHandleJoinAccept+0xdc>
        netID = ( uint32_t )macMsg->NetID[0];
 8053548:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 805354a:	7aa2      	ldrb	r2, [r4, #10]
 805354c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8053550:	7ae4      	ldrb	r4, [r4, #11]
 8053552:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8053556:	4643      	mov	r3, r8
 8053558:	4622      	mov	r2, r4
 805355a:	4629      	mov	r1, r5
 805355c:	2007      	movs	r0, #7
 805355e:	f7ff fbe9 	bl	8052d34 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8053562:	b328      	cbz	r0, 80535b0 <LoRaMacCryptoHandleJoinAccept+0x124>
            return retval;
 8053564:	4606      	mov	r6, r0
 8053566:	e050      	b.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
        retval = DeriveSessionKey11x( F_NWK_S_INT_KEY, currentJoinNonce, joinEUI, nonce );
 8053568:	4643      	mov	r3, r8
 805356a:	463a      	mov	r2, r7
 805356c:	4629      	mov	r1, r5
 805356e:	2004      	movs	r0, #4
 8053570:	f7ff fb9a 	bl	8052ca8 <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8053574:	b108      	cbz	r0, 805357a <LoRaMacCryptoHandleJoinAccept+0xee>
            return retval;
 8053576:	4606      	mov	r6, r0
 8053578:	e047      	b.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
        retval = DeriveSessionKey11x( S_NWK_S_INT_KEY, currentJoinNonce, joinEUI, nonce );
 805357a:	4643      	mov	r3, r8
 805357c:	463a      	mov	r2, r7
 805357e:	4629      	mov	r1, r5
 8053580:	2005      	movs	r0, #5
 8053582:	f7ff fb91 	bl	8052ca8 <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8053586:	b108      	cbz	r0, 805358c <LoRaMacCryptoHandleJoinAccept+0x100>
            return retval;
 8053588:	4606      	mov	r6, r0
 805358a:	e03e      	b.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
        retval = DeriveSessionKey11x( NWK_S_ENC_KEY, currentJoinNonce, joinEUI, nonce );
 805358c:	4643      	mov	r3, r8
 805358e:	463a      	mov	r2, r7
 8053590:	4629      	mov	r1, r5
 8053592:	2006      	movs	r0, #6
 8053594:	f7ff fb88 	bl	8052ca8 <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8053598:	b108      	cbz	r0, 805359e <LoRaMacCryptoHandleJoinAccept+0x112>
            return retval;
 805359a:	4606      	mov	r6, r0
 805359c:	e035      	b.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
        retval = DeriveSessionKey11x( APP_S_KEY, currentJoinNonce, joinEUI, nonce );
 805359e:	4643      	mov	r3, r8
 80535a0:	463a      	mov	r2, r7
 80535a2:	4629      	mov	r1, r5
 80535a4:	2007      	movs	r0, #7
 80535a6:	f7ff fb7f 	bl	8052ca8 <DeriveSessionKey11x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80535aa:	b1d0      	cbz	r0, 80535e2 <LoRaMacCryptoHandleJoinAccept+0x156>
            return retval;
 80535ac:	4606      	mov	r6, r0
 80535ae:	e02c      	b.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
        retval = DeriveSessionKey10x( NWK_S_ENC_KEY, currentJoinNonce, netID, nonce );
 80535b0:	4643      	mov	r3, r8
 80535b2:	4622      	mov	r2, r4
 80535b4:	4629      	mov	r1, r5
 80535b6:	2006      	movs	r0, #6
 80535b8:	f7ff fbbc 	bl	8052d34 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80535bc:	b108      	cbz	r0, 80535c2 <LoRaMacCryptoHandleJoinAccept+0x136>
            return retval;
 80535be:	4606      	mov	r6, r0
 80535c0:	e023      	b.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
        retval = DeriveSessionKey10x( F_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 80535c2:	4643      	mov	r3, r8
 80535c4:	4622      	mov	r2, r4
 80535c6:	4629      	mov	r1, r5
 80535c8:	2004      	movs	r0, #4
 80535ca:	f7ff fbb3 	bl	8052d34 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80535ce:	b108      	cbz	r0, 80535d4 <LoRaMacCryptoHandleJoinAccept+0x148>
            return retval;
 80535d0:	4606      	mov	r6, r0
 80535d2:	e01a      	b.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
 80535d4:	4643      	mov	r3, r8
 80535d6:	4622      	mov	r2, r4
 80535d8:	4629      	mov	r1, r5
 80535da:	2005      	movs	r0, #5
 80535dc:	f7ff fbaa 	bl	8052d34 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 80535e0:	b9d8      	cbnz	r0, 805361a <LoRaMacCryptoHandleJoinAccept+0x18e>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 80535e2:	4b0f      	ldr	r3, [pc, #60]	; (8053620 <LoRaMacCryptoHandleJoinAccept+0x194>)
 80535e4:	681b      	ldr	r3, [r3, #0]
 80535e6:	f89d 2013 	ldrb.w	r2, [sp, #19]
 80535ea:	709a      	strb	r2, [r3, #2]
    RJcount0 = 0;
 80535ec:	2200      	movs	r2, #0
 80535ee:	490d      	ldr	r1, [pc, #52]	; (8053624 <LoRaMacCryptoHandleJoinAccept+0x198>)
 80535f0:	800a      	strh	r2, [r1, #0]
    CryptoNvm->FCntList.FCntUp = 0;
 80535f2:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 80535f4:	f04f 32ff 	mov.w	r2, #4294967295
 80535f8:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 80535fa:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 80535fc:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 80535fe:	e004      	b.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8053600:	2609      	movs	r6, #9
 8053602:	e002      	b.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
 8053604:	2609      	movs	r6, #9
 8053606:	e000      	b.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8053608:	260e      	movs	r6, #14
}
 805360a:	4630      	mov	r0, r6
 805360c:	b00e      	add	sp, #56	; 0x38
 805360e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8053612:	260f      	movs	r6, #15
 8053614:	e7f9      	b.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8053616:	2603      	movs	r6, #3
 8053618:	e7f7      	b.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
            return retval;
 805361a:	4606      	mov	r6, r0
 805361c:	e7f5      	b.n	805360a <LoRaMacCryptoHandleJoinAccept+0x17e>
 805361e:	bf00      	nop
 8053620:	2001a070 	.word	0x2001a070
 8053624:	2001a074 	.word	0x2001a074

08053628 <LoRaMacCryptoDeriveMcSessionKeyPair>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcSessionKeyPair( AddressIdentifier_t addrID, uint32_t mcAddr )
{
    if( mcAddr == 0 )
 8053628:	2900      	cmp	r1, #0
 805362a:	d03b      	beq.n	80536a4 <LoRaMacCryptoDeriveMcSessionKeyPair+0x7c>
{
 805362c:	b510      	push	{r4, lr}
 805362e:	b08a      	sub	sp, #40	; 0x28
 8053630:	460c      	mov	r4, r1

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;

    // Determine current security context
    KeyAddr_t* curItem;
    retval = GetKeyAddrItem( addrID, &curItem );
 8053632:	a909      	add	r1, sp, #36	; 0x24
 8053634:	f7ff f9fe 	bl	8052a34 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8053638:	b108      	cbz	r0, 805363e <LoRaMacCryptoDeriveMcSessionKeyPair+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 805363a:	b00a      	add	sp, #40	; 0x28
 805363c:	bd10      	pop	{r4, pc}
    uint8_t compBaseAppS[16] = { 0 };
 805363e:	9006      	str	r0, [sp, #24]
 8053640:	9007      	str	r0, [sp, #28]
 8053642:	9008      	str	r0, [sp, #32]
    uint8_t compBaseNwkS[16] = { 0 };
 8053644:	9002      	str	r0, [sp, #8]
 8053646:	9003      	str	r0, [sp, #12]
 8053648:	9004      	str	r0, [sp, #16]
    compBaseAppS[0] = 0x01;
 805364a:	2301      	movs	r3, #1
 805364c:	f88d 3014 	strb.w	r3, [sp, #20]
    compBaseAppS[1] = mcAddr & 0xFF;
 8053650:	b2e1      	uxtb	r1, r4
 8053652:	f88d 1015 	strb.w	r1, [sp, #21]
    compBaseAppS[2] = ( mcAddr >> 8 ) & 0xFF;
 8053656:	f3c4 2207 	ubfx	r2, r4, #8, #8
 805365a:	f88d 2016 	strb.w	r2, [sp, #22]
    compBaseAppS[3] = ( mcAddr >> 16 ) & 0xFF;
 805365e:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8053662:	f88d 3017 	strb.w	r3, [sp, #23]
    compBaseAppS[4] = ( mcAddr >> 24 ) & 0xFF;
 8053666:	0e24      	lsrs	r4, r4, #24
 8053668:	f88d 4018 	strb.w	r4, [sp, #24]
    compBaseNwkS[0] = 0x02;
 805366c:	2002      	movs	r0, #2
 805366e:	f88d 0004 	strb.w	r0, [sp, #4]
    compBaseNwkS[1] = mcAddr & 0xFF;
 8053672:	f88d 1005 	strb.w	r1, [sp, #5]
    compBaseNwkS[2] = ( mcAddr >> 8 ) & 0xFF;
 8053676:	f88d 2006 	strb.w	r2, [sp, #6]
    compBaseNwkS[3] = ( mcAddr >> 16 ) & 0xFF;
 805367a:	f88d 3007 	strb.w	r3, [sp, #7]
    compBaseNwkS[4] = ( mcAddr >> 24 ) & 0xFF;
 805367e:	f88d 4008 	strb.w	r4, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBaseAppS, curItem->RootKey, curItem->AppSkey ) != SECURE_ELEMENT_SUCCESS )
 8053682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8053684:	785a      	ldrb	r2, [r3, #1]
 8053686:	78d9      	ldrb	r1, [r3, #3]
 8053688:	a805      	add	r0, sp, #20
 805368a:	f7f0 fa89 	bl	8043ba0 <SecureElementDeriveAndStoreKey>
 805368e:	b958      	cbnz	r0, 80536a8 <LoRaMacCryptoDeriveMcSessionKeyPair+0x80>
    if( SecureElementDeriveAndStoreKey( compBaseNwkS, curItem->RootKey, curItem->NwkSkey ) != SECURE_ELEMENT_SUCCESS )
 8053690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8053692:	789a      	ldrb	r2, [r3, #2]
 8053694:	78d9      	ldrb	r1, [r3, #3]
 8053696:	a801      	add	r0, sp, #4
 8053698:	f7f0 fa82 	bl	8043ba0 <SecureElementDeriveAndStoreKey>
 805369c:	2800      	cmp	r0, #0
 805369e:	d0cc      	beq.n	805363a <LoRaMacCryptoDeriveMcSessionKeyPair+0x12>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80536a0:	200e      	movs	r0, #14
 80536a2:	e7ca      	b.n	805363a <LoRaMacCryptoDeriveMcSessionKeyPair+0x12>
        return LORAMAC_CRYPTO_ERROR_NPE;
 80536a4:	2009      	movs	r0, #9
}
 80536a6:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80536a8:	200e      	movs	r0, #14
 80536aa:	e7c6      	b.n	805363a <LoRaMacCryptoDeriveMcSessionKeyPair+0x12>

080536ac <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80536ac:	2800      	cmp	r0, #0
 80536ae:	d047      	beq.n	8053740 <LoRaMacParserJoinAccept+0x94>
{
 80536b0:	b538      	push	{r3, r4, r5, lr}
 80536b2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80536b4:	6801      	ldr	r1, [r0, #0]
 80536b6:	2900      	cmp	r1, #0
 80536b8:	d044      	beq.n	8053744 <LoRaMacParserJoinAccept+0x98>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80536ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80536be:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 80536c0:	2203      	movs	r2, #3
 80536c2:	3006      	adds	r0, #6
 80536c4:	f001 fbf3 	bl	8054eae <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 80536c8:	4620      	mov	r0, r4
 80536ca:	f850 1b09 	ldr.w	r1, [r0], #9
 80536ce:	2203      	movs	r2, #3
 80536d0:	3104      	adds	r1, #4
 80536d2:	f001 fbec 	bl	8054eae <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80536d6:	6821      	ldr	r1, [r4, #0]
 80536d8:	79cb      	ldrb	r3, [r1, #7]
 80536da:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80536dc:	7a0a      	ldrb	r2, [r1, #8]
 80536de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80536e2:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80536e4:	7a4a      	ldrb	r2, [r1, #9]
 80536e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80536ea:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80536ec:	7a8a      	ldrb	r2, [r1, #10]
 80536ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80536f2:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80536f4:	7acb      	ldrb	r3, [r1, #11]
 80536f6:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 80536f8:	7b0b      	ldrb	r3, [r1, #12]
 80536fa:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 80536fc:	7923      	ldrb	r3, [r4, #4]
 80536fe:	2b21      	cmp	r3, #33	; 0x21
 8053700:	d016      	beq.n	8053730 <LoRaMacParserJoinAccept+0x84>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8053702:	2b11      	cmp	r3, #17
 8053704:	dc20      	bgt.n	8053748 <LoRaMacParserJoinAccept+0x9c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8053706:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8053708:	6821      	ldr	r1, [r4, #0]
 805370a:	1c55      	adds	r5, r2, #1
 805370c:	5c8b      	ldrb	r3, [r1, r2]
 805370e:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8053710:	1c90      	adds	r0, r2, #2
 8053712:	5d4d      	ldrb	r5, [r1, r5]
 8053714:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8053718:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 805371a:	3203      	adds	r2, #3
 805371c:	5c08      	ldrb	r0, [r1, r0]
 805371e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8053722:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8053724:	5c8a      	ldrb	r2, [r1, r2]
 8053726:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 805372a:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 805372c:	2000      	movs	r0, #0
}
 805372e:	bd38      	pop	{r3, r4, r5, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8053730:	2210      	movs	r2, #16
 8053732:	310d      	adds	r1, #13
 8053734:	f104 0012 	add.w	r0, r4, #18
 8053738:	f001 fbb9 	bl	8054eae <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 805373c:	221d      	movs	r2, #29
 805373e:	e7e3      	b.n	8053708 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 8053740:	2002      	movs	r0, #2
}
 8053742:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 8053744:	2002      	movs	r0, #2
 8053746:	e7f2      	b.n	805372e <LoRaMacParserJoinAccept+0x82>
        return LORAMAC_PARSER_FAIL;
 8053748:	2001      	movs	r0, #1
 805374a:	e7f0      	b.n	805372e <LoRaMacParserJoinAccept+0x82>

0805374c <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 805374c:	2800      	cmp	r0, #0
 805374e:	d058      	beq.n	8053802 <LoRaMacParserData+0xb6>
{
 8053750:	b510      	push	{r4, lr}
 8053752:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8053754:	6801      	ldr	r1, [r0, #0]
 8053756:	2900      	cmp	r1, #0
 8053758:	d055      	beq.n	8053806 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 805375a:	780b      	ldrb	r3, [r1, #0]
 805375c:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 805375e:	784b      	ldrb	r3, [r1, #1]
 8053760:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8053762:	788a      	ldrb	r2, [r1, #2]
 8053764:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8053768:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 805376a:	78ca      	ldrb	r2, [r1, #3]
 805376c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8053770:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8053772:	790a      	ldrb	r2, [r1, #4]
 8053774:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8053778:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 805377a:	794b      	ldrb	r3, [r1, #5]
 805377c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 805377e:	798b      	ldrb	r3, [r1, #6]
 8053780:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8053782:	79ca      	ldrb	r2, [r1, #7]
 8053784:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8053788:	81c3      	strh	r3, [r0, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 805378a:	7b02      	ldrb	r2, [r0, #12]
 805378c:	f002 020f 	and.w	r2, r2, #15
 8053790:	3108      	adds	r1, #8
 8053792:	3010      	adds	r0, #16
 8053794:	f001 fb8b 	bl	8054eae <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8053798:	7b23      	ldrb	r3, [r4, #12]
 805379a:	f003 030f 	and.w	r3, r3, #15
 805379e:	f103 0008 	add.w	r0, r3, #8
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80537a2:	2200      	movs	r2, #0
 80537a4:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 80537a8:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80537ac:	7922      	ldrb	r2, [r4, #4]
 80537ae:	1a11      	subs	r1, r2, r0
 80537b0:	2904      	cmp	r1, #4
 80537b2:	dc16      	bgt.n	80537e2 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 80537b4:	6822      	ldr	r2, [r4, #0]
 80537b6:	7923      	ldrb	r3, [r4, #4]
 80537b8:	441a      	add	r2, r3
 80537ba:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 80537be:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80537c0:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 80537c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80537c8:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80537ca:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80537ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80537d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80537d4:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80537d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80537dc:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80537de:	2000      	movs	r0, #0
}
 80537e0:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80537e2:	6821      	ldr	r1, [r4, #0]
 80537e4:	3309      	adds	r3, #9
 80537e6:	5c08      	ldrb	r0, [r1, r0]
 80537e8:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80537ec:	1ad2      	subs	r2, r2, r3
 80537ee:	b2d2      	uxtb	r2, r2
 80537f0:	3a04      	subs	r2, #4
 80537f2:	b2d2      	uxtb	r2, r2
 80537f4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 80537f8:	4419      	add	r1, r3
 80537fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80537fc:	f001 fb57 	bl	8054eae <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8053800:	e7d8      	b.n	80537b4 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 8053802:	2002      	movs	r0, #2
}
 8053804:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 8053806:	2002      	movs	r0, #2
 8053808:	e7ea      	b.n	80537e0 <LoRaMacParserData+0x94>

0805380a <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 805380a:	b370      	cbz	r0, 805386a <LoRaMacSerializerJoinRequest+0x60>
{
 805380c:	b510      	push	{r4, lr}
 805380e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8053810:	6803      	ldr	r3, [r0, #0]
 8053812:	b363      	cbz	r3, 805386e <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8053814:	7902      	ldrb	r2, [r0, #4]
 8053816:	2a16      	cmp	r2, #22
 8053818:	d92b      	bls.n	8053872 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 805381a:	7942      	ldrb	r2, [r0, #5]
 805381c:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 805381e:	4601      	mov	r1, r0
 8053820:	f851 0b06 	ldr.w	r0, [r1], #6
 8053824:	2208      	movs	r2, #8
 8053826:	3001      	adds	r0, #1
 8053828:	f001 fb4b 	bl	8054ec2 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 805382c:	4621      	mov	r1, r4
 805382e:	f851 0b0e 	ldr.w	r0, [r1], #14
 8053832:	2208      	movs	r2, #8
 8053834:	3009      	adds	r0, #9
 8053836:	f001 fb44 	bl	8054ec2 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 805383a:	8ae2      	ldrh	r2, [r4, #22]
 805383c:	6823      	ldr	r3, [r4, #0]
 805383e:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8053840:	8ae3      	ldrh	r3, [r4, #22]
 8053842:	6822      	ldr	r2, [r4, #0]
 8053844:	0a1b      	lsrs	r3, r3, #8
 8053846:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8053848:	69a2      	ldr	r2, [r4, #24]
 805384a:	6823      	ldr	r3, [r4, #0]
 805384c:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 805384e:	69a3      	ldr	r3, [r4, #24]
 8053850:	0a1b      	lsrs	r3, r3, #8
 8053852:	6822      	ldr	r2, [r4, #0]
 8053854:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8053856:	8b62      	ldrh	r2, [r4, #26]
 8053858:	6823      	ldr	r3, [r4, #0]
 805385a:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 805385c:	7ee2      	ldrb	r2, [r4, #27]
 805385e:	6823      	ldr	r3, [r4, #0]
 8053860:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 8053862:	2317      	movs	r3, #23
 8053864:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8053866:	2000      	movs	r0, #0
}
 8053868:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 805386a:	2001      	movs	r0, #1
}
 805386c:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 805386e:	2001      	movs	r0, #1
 8053870:	e7fa      	b.n	8053868 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8053872:	2002      	movs	r0, #2
 8053874:	e7f8      	b.n	8053868 <LoRaMacSerializerJoinRequest+0x5e>

08053876 <LoRaMacSerializerReJoinType1>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType1( LoRaMacMessageReJoinType1_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8053876:	2800      	cmp	r0, #0
 8053878:	d032      	beq.n	80538e0 <LoRaMacSerializerReJoinType1+0x6a>
{
 805387a:	b510      	push	{r4, lr}
 805387c:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 805387e:	6803      	ldr	r3, [r0, #0]
 8053880:	2b00      	cmp	r3, #0
 8053882:	d02f      	beq.n	80538e4 <LoRaMacSerializerReJoinType1+0x6e>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_1_MSG_SIZE )
 8053884:	7902      	ldrb	r2, [r0, #4]
 8053886:	2a17      	cmp	r2, #23
 8053888:	d92e      	bls.n	80538e8 <LoRaMacSerializerReJoinType1+0x72>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 805388a:	7942      	ldrb	r2, [r0, #5]
 805388c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
 805388e:	6803      	ldr	r3, [r0, #0]
 8053890:	7982      	ldrb	r2, [r0, #6]
 8053892:	705a      	strb	r2, [r3, #1]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8053894:	4601      	mov	r1, r0
 8053896:	f851 0b07 	ldr.w	r0, [r1], #7
 805389a:	2208      	movs	r2, #8
 805389c:	3002      	adds	r0, #2
 805389e:	f001 fb10 	bl	8054ec2 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80538a2:	4621      	mov	r1, r4
 80538a4:	f851 0b0f 	ldr.w	r0, [r1], #15
 80538a8:	2208      	movs	r2, #8
 80538aa:	300a      	adds	r0, #10
 80538ac:	f001 fb09 	bl	8054ec2 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->RJcount1 & 0xFF;
 80538b0:	8b22      	ldrh	r2, [r4, #24]
 80538b2:	6823      	ldr	r3, [r4, #0]
 80538b4:	749a      	strb	r2, [r3, #18]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount1 >> 8 ) & 0xFF;
 80538b6:	8b23      	ldrh	r3, [r4, #24]
 80538b8:	6822      	ldr	r2, [r4, #0]
 80538ba:	0a1b      	lsrs	r3, r3, #8
 80538bc:	74d3      	strb	r3, [r2, #19]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80538be:	69e2      	ldr	r2, [r4, #28]
 80538c0:	6823      	ldr	r3, [r4, #0]
 80538c2:	751a      	strb	r2, [r3, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80538c4:	69e3      	ldr	r3, [r4, #28]
 80538c6:	0a1b      	lsrs	r3, r3, #8
 80538c8:	6822      	ldr	r2, [r4, #0]
 80538ca:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80538cc:	8be2      	ldrh	r2, [r4, #30]
 80538ce:	6823      	ldr	r3, [r4, #0]
 80538d0:	759a      	strb	r2, [r3, #22]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80538d2:	7fe2      	ldrb	r2, [r4, #31]
 80538d4:	6823      	ldr	r3, [r4, #0]
 80538d6:	75da      	strb	r2, [r3, #23]

    macMsg->BufSize = bufItr;
 80538d8:	2318      	movs	r3, #24
 80538da:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80538dc:	2000      	movs	r0, #0
}
 80538de:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80538e0:	2001      	movs	r0, #1
}
 80538e2:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80538e4:	2001      	movs	r0, #1
 80538e6:	e7fa      	b.n	80538de <LoRaMacSerializerReJoinType1+0x68>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80538e8:	2002      	movs	r0, #2
 80538ea:	e7f8      	b.n	80538de <LoRaMacSerializerReJoinType1+0x68>

080538ec <LoRaMacSerializerReJoinType0or2>:

LoRaMacSerializerStatus_t LoRaMacSerializerReJoinType0or2( LoRaMacMessageReJoinType0or2_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80538ec:	2800      	cmp	r0, #0
 80538ee:	d032      	beq.n	8053956 <LoRaMacSerializerReJoinType0or2+0x6a>
{
 80538f0:	b510      	push	{r4, lr}
 80538f2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80538f4:	6803      	ldr	r3, [r0, #0]
 80538f6:	2b00      	cmp	r3, #0
 80538f8:	d02f      	beq.n	805395a <LoRaMacSerializerReJoinType0or2+0x6e>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_RE_JOIN_0_2_MSG_SIZE )
 80538fa:	7902      	ldrb	r2, [r0, #4]
 80538fc:	2a12      	cmp	r2, #18
 80538fe:	d92e      	bls.n	805395e <LoRaMacSerializerReJoinType0or2+0x72>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8053900:	7942      	ldrb	r2, [r0, #5]
 8053902:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = macMsg->ReJoinType;
 8053904:	6803      	ldr	r3, [r0, #0]
 8053906:	7982      	ldrb	r2, [r0, #6]
 8053908:	705a      	strb	r2, [r3, #1]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->NetID, LORAMAC_NET_ID_FIELD_SIZE );
 805390a:	4601      	mov	r1, r0
 805390c:	f851 0b07 	ldr.w	r0, [r1], #7
 8053910:	2203      	movs	r2, #3
 8053912:	3002      	adds	r0, #2
 8053914:	f001 facb 	bl	8054eae <memcpy1>
    bufItr += LORAMAC_NET_ID_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8053918:	4621      	mov	r1, r4
 805391a:	f851 0b0a 	ldr.w	r0, [r1], #10
 805391e:	2208      	movs	r2, #8
 8053920:	3005      	adds	r0, #5
 8053922:	f001 face 	bl	8054ec2 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->RJcount0 & 0xFF;
 8053926:	8a62      	ldrh	r2, [r4, #18]
 8053928:	6823      	ldr	r3, [r4, #0]
 805392a:	735a      	strb	r2, [r3, #13]
    macMsg->Buffer[bufItr++] = ( macMsg->RJcount0 >> 8 ) & 0xFF;
 805392c:	8a63      	ldrh	r3, [r4, #18]
 805392e:	6822      	ldr	r2, [r4, #0]
 8053930:	0a1b      	lsrs	r3, r3, #8
 8053932:	7393      	strb	r3, [r2, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8053934:	6962      	ldr	r2, [r4, #20]
 8053936:	6823      	ldr	r3, [r4, #0]
 8053938:	73da      	strb	r2, [r3, #15]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 805393a:	6963      	ldr	r3, [r4, #20]
 805393c:	0a1b      	lsrs	r3, r3, #8
 805393e:	6822      	ldr	r2, [r4, #0]
 8053940:	7413      	strb	r3, [r2, #16]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8053942:	8ae2      	ldrh	r2, [r4, #22]
 8053944:	6823      	ldr	r3, [r4, #0]
 8053946:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8053948:	7de2      	ldrb	r2, [r4, #23]
 805394a:	6823      	ldr	r3, [r4, #0]
 805394c:	749a      	strb	r2, [r3, #18]

    macMsg->BufSize = bufItr;
 805394e:	2313      	movs	r3, #19
 8053950:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8053952:	2000      	movs	r0, #0
}
 8053954:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8053956:	2001      	movs	r0, #1
}
 8053958:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 805395a:	2001      	movs	r0, #1
 805395c:	e7fa      	b.n	8053954 <LoRaMacSerializerReJoinType0or2+0x68>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 805395e:	2002      	movs	r0, #2
 8053960:	e7f8      	b.n	8053954 <LoRaMacSerializerReJoinType0or2+0x68>

08053962 <LoRaMacSerializerData>:

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8053962:	2800      	cmp	r0, #0
 8053964:	d066      	beq.n	8053a34 <LoRaMacSerializerData+0xd2>
{
 8053966:	b538      	push	{r3, r4, r5, lr}
 8053968:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 805396a:	6801      	ldr	r1, [r0, #0]
 805396c:	2900      	cmp	r1, #0
 805396e:	d063      	beq.n	8053a38 <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8053970:	7b02      	ldrb	r2, [r0, #12]
 8053972:	f002 020f 	and.w	r2, r2, #15
 8053976:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 805397a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 805397e:	b10b      	cbz	r3, 8053984 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8053980:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8053984:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8053986:	3304      	adds	r3, #4
 8053988:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 805398a:	7922      	ldrb	r2, [r4, #4]
 805398c:	429a      	cmp	r2, r3
 805398e:	d355      	bcc.n	8053a3c <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8053990:	7963      	ldrb	r3, [r4, #5]
 8053992:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8053994:	68a2      	ldr	r2, [r4, #8]
 8053996:	6823      	ldr	r3, [r4, #0]
 8053998:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 805399a:	68a3      	ldr	r3, [r4, #8]
 805399c:	0a1b      	lsrs	r3, r3, #8
 805399e:	6822      	ldr	r2, [r4, #0]
 80539a0:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80539a2:	8962      	ldrh	r2, [r4, #10]
 80539a4:	6823      	ldr	r3, [r4, #0]
 80539a6:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80539a8:	7ae2      	ldrb	r2, [r4, #11]
 80539aa:	6823      	ldr	r3, [r4, #0]
 80539ac:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80539ae:	6823      	ldr	r3, [r4, #0]
 80539b0:	7b22      	ldrb	r2, [r4, #12]
 80539b2:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80539b4:	89e2      	ldrh	r2, [r4, #14]
 80539b6:	6823      	ldr	r3, [r4, #0]
 80539b8:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80539ba:	89e3      	ldrh	r3, [r4, #14]
 80539bc:	6822      	ldr	r2, [r4, #0]
 80539be:	0a1b      	lsrs	r3, r3, #8
 80539c0:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80539c2:	4621      	mov	r1, r4
 80539c4:	f851 0b10 	ldr.w	r0, [r1], #16
 80539c8:	7b22      	ldrb	r2, [r4, #12]
 80539ca:	f002 020f 	and.w	r2, r2, #15
 80539ce:	3008      	adds	r0, #8
 80539d0:	f001 fa6d 	bl	8054eae <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80539d4:	7b23      	ldrb	r3, [r4, #12]
 80539d6:	f003 030f 	and.w	r3, r3, #15
 80539da:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 80539de:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80539e2:	b12a      	cbz	r2, 80539f0 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80539e4:	6822      	ldr	r2, [r4, #0]
 80539e6:	f894 1020 	ldrb.w	r1, [r4, #32]
 80539ea:	5551      	strb	r1, [r2, r5]
 80539ec:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 80539f0:	6820      	ldr	r0, [r4, #0]
 80539f2:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80539f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80539f8:	4428      	add	r0, r5
 80539fa:	f001 fa58 	bl	8054eae <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80539fe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8053a02:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8053a04:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8053a06:	6821      	ldr	r1, [r4, #0]
 8053a08:	1c5a      	adds	r2, r3, #1
 8053a0a:	b292      	uxth	r2, r2
 8053a0c:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8053a0e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8053a10:	0a08      	lsrs	r0, r1, #8
 8053a12:	6825      	ldr	r5, [r4, #0]
 8053a14:	1c99      	adds	r1, r3, #2
 8053a16:	b289      	uxth	r1, r1
 8053a18:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8053a1a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8053a1c:	6820      	ldr	r0, [r4, #0]
 8053a1e:	1cda      	adds	r2, r3, #3
 8053a20:	b292      	uxth	r2, r2
 8053a22:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8053a24:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8053a28:	6821      	ldr	r1, [r4, #0]
 8053a2a:	3304      	adds	r3, #4
 8053a2c:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 8053a2e:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 8053a30:	2000      	movs	r0, #0
}
 8053a32:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8053a34:	2001      	movs	r0, #1
}
 8053a36:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8053a38:	2001      	movs	r0, #1
 8053a3a:	e7fa      	b.n	8053a32 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8053a3c:	2002      	movs	r0, #2
 8053a3e:	e7f8      	b.n	8053a32 <LoRaMacSerializerData+0xd0>

08053a40 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 8053a40:	b908      	cbnz	r0, 8053a46 <RegionIsActive+0x6>
    {
        AS923_IS_ACTIVE( );
 8053a42:	2001      	movs	r0, #1
 8053a44:	4770      	bx	lr
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 8053a46:	2000      	movs	r0, #0
        }
    }
}
 8053a48:	4770      	bx	lr

08053a4a <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8053a4a:	b500      	push	{lr}
 8053a4c:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 8053a4e:	2300      	movs	r3, #0
 8053a50:	9300      	str	r3, [sp, #0]
    switch( region )
 8053a52:	b128      	cbz	r0, 8053a60 <RegionGetPhyParam+0x16>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8053a54:	9b00      	ldr	r3, [sp, #0]
 8053a56:	9301      	str	r3, [sp, #4]
        }
    }
}
 8053a58:	9801      	ldr	r0, [sp, #4]
 8053a5a:	b003      	add	sp, #12
 8053a5c:	f85d fb04 	ldr.w	pc, [sp], #4
        AS923_GET_PHY_PARAM( );
 8053a60:	4608      	mov	r0, r1
 8053a62:	f000 f8e5 	bl	8053c30 <RegionAS923GetPhyParam>
 8053a66:	9001      	str	r0, [sp, #4]
 8053a68:	e7f6      	b.n	8053a58 <RegionGetPhyParam+0xe>

08053a6a <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 8053a6a:	b100      	cbz	r0, 8053a6e <RegionSetBandTxDone+0x4>
 8053a6c:	4770      	bx	lr
{
 8053a6e:	b508      	push	{r3, lr}
    {
        AS923_SET_BAND_TX_DONE( );
 8053a70:	4608      	mov	r0, r1
 8053a72:	f000 f9b5 	bl	8053de0 <RegionAS923SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 8053a76:	bd08      	pop	{r3, pc}

08053a78 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 8053a78:	b100      	cbz	r0, 8053a7c <RegionInitDefaults+0x4>
 8053a7a:	4770      	bx	lr
{
 8053a7c:	b508      	push	{r3, lr}
    {
        AS923_INIT_DEFAULTS( );
 8053a7e:	4608      	mov	r0, r1
 8053a80:	f000 f9cc 	bl	8053e1c <RegionAS923InitDefaults>
        default:
        {
            break;
        }
    }
}
 8053a84:	bd08      	pop	{r3, pc}

08053a86 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 8053a86:	b108      	cbz	r0, 8053a8c <RegionVerify+0x6>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8053a88:	2000      	movs	r0, #0
        }
    }
}
 8053a8a:	4770      	bx	lr
{
 8053a8c:	b508      	push	{r3, lr}
 8053a8e:	460b      	mov	r3, r1
        AS923_VERIFY( );
 8053a90:	4611      	mov	r1, r2
 8053a92:	4618      	mov	r0, r3
 8053a94:	f000 fa24 	bl	8053ee0 <RegionAS923Verify>
}
 8053a98:	bd08      	pop	{r3, pc}

08053a9a <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 8053a9a:	b100      	cbz	r0, 8053a9e <RegionApplyCFList+0x4>
 8053a9c:	4770      	bx	lr
{
 8053a9e:	b508      	push	{r3, lr}
    {
        AS923_APPLY_CF_LIST( );
 8053aa0:	4608      	mov	r0, r1
 8053aa2:	f000 fdbb 	bl	805461c <RegionAS923ApplyCFList>
        default:
        {
            break;
        }
    }
}
 8053aa6:	bd08      	pop	{r3, pc}

08053aa8 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 8053aa8:	b108      	cbz	r0, 8053aae <RegionChanMaskSet+0x6>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8053aaa:	2000      	movs	r0, #0
        }
    }
}
 8053aac:	4770      	bx	lr
{
 8053aae:	b508      	push	{r3, lr}
        AS923_CHAN_MASK_SET( );
 8053ab0:	4608      	mov	r0, r1
 8053ab2:	f000 fa67 	bl	8053f84 <RegionAS923ChanMaskSet>
}
 8053ab6:	bd08      	pop	{r3, pc}

08053ab8 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 8053ab8:	b100      	cbz	r0, 8053abc <RegionComputeRxWindowParameters+0x4>
 8053aba:	4770      	bx	lr
{
 8053abc:	b510      	push	{r4, lr}
 8053abe:	460c      	mov	r4, r1
 8053ac0:	4611      	mov	r1, r2
 8053ac2:	461a      	mov	r2, r3
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 8053ac4:	9b02      	ldr	r3, [sp, #8]
 8053ac6:	4620      	mov	r0, r4
 8053ac8:	f000 fa7a 	bl	8053fc0 <RegionAS923ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 8053acc:	bd10      	pop	{r4, pc}

08053ace <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 8053ace:	b108      	cbz	r0, 8053ad4 <RegionRxConfig+0x6>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8053ad0:	2000      	movs	r0, #0
        }
    }
}
 8053ad2:	4770      	bx	lr
{
 8053ad4:	b508      	push	{r3, lr}
 8053ad6:	460b      	mov	r3, r1
        AS923_RX_CONFIG( );
 8053ad8:	4611      	mov	r1, r2
 8053ada:	4618      	mov	r0, r3
 8053adc:	f000 faa6 	bl	805402c <RegionAS923RxConfig>
}
 8053ae0:	bd08      	pop	{r3, pc}

08053ae2 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 8053ae2:	b108      	cbz	r0, 8053ae8 <RegionTxConfig+0x6>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8053ae4:	2000      	movs	r0, #0
        }
    }
}
 8053ae6:	4770      	bx	lr
{
 8053ae8:	b510      	push	{r4, lr}
 8053aea:	460c      	mov	r4, r1
 8053aec:	4611      	mov	r1, r2
        AS923_TX_CONFIG( );
 8053aee:	461a      	mov	r2, r3
 8053af0:	4620      	mov	r0, r4
 8053af2:	f000 fb13 	bl	805411c <RegionAS923TxConfig>
}
 8053af6:	bd10      	pop	{r4, pc}

08053af8 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 8053af8:	b108      	cbz	r0, 8053afe <RegionLinkAdrReq+0x6>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8053afa:	2000      	movs	r0, #0
        }
    }
}
 8053afc:	4770      	bx	lr
{
 8053afe:	b510      	push	{r4, lr}
 8053b00:	b082      	sub	sp, #8
 8053b02:	460c      	mov	r4, r1
 8053b04:	4611      	mov	r1, r2
 8053b06:	461a      	mov	r2, r3
        AS923_LINK_ADR_REQ( );
 8053b08:	9b05      	ldr	r3, [sp, #20]
 8053b0a:	9300      	str	r3, [sp, #0]
 8053b0c:	9b04      	ldr	r3, [sp, #16]
 8053b0e:	4620      	mov	r0, r4
 8053b10:	f000 fb92 	bl	8054238 <RegionAS923LinkAdrReq>
}
 8053b14:	b002      	add	sp, #8
 8053b16:	bd10      	pop	{r4, pc}

08053b18 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 8053b18:	b108      	cbz	r0, 8053b1e <RegionRxParamSetupReq+0x6>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8053b1a:	2000      	movs	r0, #0
        }
    }
}
 8053b1c:	4770      	bx	lr
{
 8053b1e:	b508      	push	{r3, lr}
        AS923_RX_PARAM_SETUP_REQ( );
 8053b20:	4608      	mov	r0, r1
 8053b22:	f000 fc4b 	bl	80543bc <RegionAS923RxParamSetupReq>
}
 8053b26:	bd08      	pop	{r3, pc}

08053b28 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 8053b28:	b108      	cbz	r0, 8053b2e <RegionNewChannelReq+0x6>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8053b2a:	2000      	movs	r0, #0
        }
    }
}
 8053b2c:	4770      	bx	lr
{
 8053b2e:	b508      	push	{r3, lr}
        AS923_NEW_CHANNEL_REQ( );
 8053b30:	4608      	mov	r0, r1
 8053b32:	f000 fdb3 	bl	805469c <RegionAS923NewChannelReq>
}
 8053b36:	bd08      	pop	{r3, pc}

08053b38 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 8053b38:	b108      	cbz	r0, 8053b3e <RegionTxParamSetupReq+0x6>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8053b3a:	2000      	movs	r0, #0
        }
    }
}
 8053b3c:	4770      	bx	lr
{
 8053b3e:	b508      	push	{r3, lr}
        AS923_TX_PARAM_SETUP_REQ( );
 8053b40:	4608      	mov	r0, r1
 8053b42:	f000 fc58 	bl	80543f6 <RegionAS923TxParamSetupReq>
}
 8053b46:	bd08      	pop	{r3, pc}

08053b48 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 8053b48:	b108      	cbz	r0, 8053b4e <RegionDlChannelReq+0x6>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8053b4a:	2000      	movs	r0, #0
        }
    }
}
 8053b4c:	4770      	bx	lr
{
 8053b4e:	b508      	push	{r3, lr}
        AS923_DL_CHANNEL_REQ( );
 8053b50:	4608      	mov	r0, r1
 8053b52:	f000 fc53 	bl	80543fc <RegionAS923DlChannelReq>
}
 8053b56:	bd08      	pop	{r3, pc}

08053b58 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 8053b58:	b108      	cbz	r0, 8053b5e <RegionAlternateDr+0x6>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8053b5a:	2000      	movs	r0, #0
        }
    }
}
 8053b5c:	4770      	bx	lr
{
 8053b5e:	b508      	push	{r3, lr}
 8053b60:	460b      	mov	r3, r1
        AS923_ALTERNATE_DR( );
 8053b62:	4611      	mov	r1, r2
 8053b64:	4618      	mov	r0, r3
 8053b66:	f000 fc69 	bl	805443c <RegionAS923AlternateDr>
}
 8053b6a:	bd08      	pop	{r3, pc}

08053b6c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 8053b6c:	b108      	cbz	r0, 8053b72 <RegionNextChannel+0x6>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8053b6e:	2009      	movs	r0, #9
        }
    }
}
 8053b70:	4770      	bx	lr
{
 8053b72:	b510      	push	{r4, lr}
 8053b74:	460c      	mov	r4, r1
 8053b76:	4611      	mov	r1, r2
 8053b78:	461a      	mov	r2, r3
        AS923_NEXT_CHANNEL( );
 8053b7a:	9b02      	ldr	r3, [sp, #8]
 8053b7c:	4620      	mov	r0, r4
 8053b7e:	f000 fc5f 	bl	8054440 <RegionAS923NextChannel>
}
 8053b82:	bd10      	pop	{r4, pc}

08053b84 <RegionApplyDrOffset>:
        }
    }
}

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8053b84:	b510      	push	{r4, lr}
 8053b86:	460c      	mov	r4, r1
 8053b88:	4611      	mov	r1, r2
    switch( region )
 8053b8a:	b108      	cbz	r0, 8053b90 <RegionApplyDrOffset+0xc>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8053b8c:	b2d0      	uxtb	r0, r2
        }
    }
}
 8053b8e:	bd10      	pop	{r4, pc}
        AS923_APPLY_DR_OFFSET( );
 8053b90:	461a      	mov	r2, r3
 8053b92:	4620      	mov	r0, r4
 8053b94:	f000 fdae 	bl	80546f4 <RegionAS923ApplyDrOffset>
 8053b98:	e7f9      	b.n	8053b8e <RegionApplyDrOffset+0xa>
	...

08053b9c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 8053b9c:	4800      	ldr	r0, [pc, #0]	; (8053ba0 <RegionGetVersion+0x4>)
 8053b9e:	4770      	bx	lr
 8053ba0:	02010001 	.word	0x02010001

08053ba4 <VerifyRfFreq>:
static RegionNvmDataGroup1_t* RegionNvmGroup1;
static RegionNvmDataGroup2_t* RegionNvmGroup2;

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 8053ba4:	b510      	push	{r4, lr}
 8053ba6:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8053ba8:	4b05      	ldr	r3, [pc, #20]	; (8053bc0 <VerifyRfFreq+0x1c>)
 8053baa:	6a1b      	ldr	r3, [r3, #32]
 8053bac:	4798      	blx	r3
 8053bae:	b120      	cbz	r0, 8053bba <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8053bb0:	4b04      	ldr	r3, [pc, #16]	; (8053bc4 <VerifyRfFreq+0x20>)
 8053bb2:	4423      	add	r3, r4
 8053bb4:	4a04      	ldr	r2, [pc, #16]	; (8053bc8 <VerifyRfFreq+0x24>)
 8053bb6:	4293      	cmp	r3, r2
 8053bb8:	d800      	bhi.n	8053bbc <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 8053bba:	bd10      	pop	{r4, pc}
        return false;
 8053bbc:	2000      	movs	r0, #0
 8053bbe:	e7fc      	b.n	8053bba <VerifyRfFreq+0x16>
 8053bc0:	08059d2c 	.word	0x08059d2c
 8053bc4:	c9763540 	.word	0xc9763540
 8053bc8:	00c65d40 	.word	0x00c65d40

08053bcc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8053bcc:	b570      	push	{r4, r5, r6, lr}
 8053bce:	b084      	sub	sp, #16
 8053bd0:	4605      	mov	r5, r0
 8053bd2:	460c      	mov	r4, r1
    int8_t phyDr = DataratesAS923[datarate];
 8053bd4:	4b13      	ldr	r3, [pc, #76]	; (8053c24 <GetTimeOnAir+0x58>)
 8053bd6:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 8053bd8:	4913      	ldr	r1, [pc, #76]	; (8053c28 <GetTimeOnAir+0x5c>)
 8053bda:	f001 f92b 	bl	8054e34 <RegionCommonGetBandwidth>
 8053bde:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 8053be0:	2d07      	cmp	r5, #7
 8053be2:	d00e      	beq.n	8053c02 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8053be4:	4b11      	ldr	r3, [pc, #68]	; (8053c2c <GetTimeOnAir+0x60>)
 8053be6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8053be8:	2001      	movs	r0, #1
 8053bea:	9003      	str	r0, [sp, #12]
 8053bec:	b2e4      	uxtb	r4, r4
 8053bee:	9402      	str	r4, [sp, #8]
 8053bf0:	2300      	movs	r3, #0
 8053bf2:	9301      	str	r3, [sp, #4]
 8053bf4:	2308      	movs	r3, #8
 8053bf6:	9300      	str	r3, [sp, #0]
 8053bf8:	4603      	mov	r3, r0
 8053bfa:	4632      	mov	r2, r6
 8053bfc:	47a8      	blx	r5
    }
    return timeOnAir;
}
 8053bfe:	b004      	add	sp, #16
 8053c00:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8053c02:	4b0a      	ldr	r3, [pc, #40]	; (8053c2c <GetTimeOnAir+0x60>)
 8053c04:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8053c06:	2301      	movs	r3, #1
 8053c08:	9303      	str	r3, [sp, #12]
 8053c0a:	b2e4      	uxtb	r4, r4
 8053c0c:	9402      	str	r4, [sp, #8]
 8053c0e:	2000      	movs	r0, #0
 8053c10:	9001      	str	r0, [sp, #4]
 8053c12:	2305      	movs	r3, #5
 8053c14:	9300      	str	r3, [sp, #0]
 8053c16:	4603      	mov	r3, r0
 8053c18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8053c1c:	fb02 f206 	mul.w	r2, r2, r6
 8053c20:	47a8      	blx	r5
 8053c22:	e7ec      	b.n	8053bfe <GetTimeOnAir+0x32>
 8053c24:	0805ab20 	.word	0x0805ab20
 8053c28:	0805ab00 	.word	0x0805ab00
 8053c2c:	08059d2c 	.word	0x08059d2c

08053c30 <RegionAS923GetPhyParam>:

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8053c30:	b500      	push	{lr}
 8053c32:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 8053c34:	2300      	movs	r3, #0
 8053c36:	9304      	str	r3, [sp, #16]

    switch( getPhy->Attribute )
 8053c38:	7803      	ldrb	r3, [r0, #0]
 8053c3a:	3b01      	subs	r3, #1
 8053c3c:	2b36      	cmp	r3, #54	; 0x36
 8053c3e:	d829      	bhi.n	8053c94 <RegionAS923GetPhyParam+0x64>
 8053c40:	e8df f003 	tbb	[pc, r3]
 8053c44:	2828211c 	.word	0x2828211c
 8053c48:	28282628 	.word	0x28282628
 8053c4c:	49462828 	.word	0x49462828
 8053c50:	5e5a284c 	.word	0x5e5a284c
 8053c54:	6e6a6662 	.word	0x6e6a6662
 8053c58:	7d7a7728 	.word	0x7d7a7728
 8053c5c:	8e8a8782 	.word	0x8e8a8782
 8053c60:	2c949128 	.word	0x2c949128
 8053c64:	28282828 	.word	0x28282828
 8053c68:	28282828 	.word	0x28282828
 8053c6c:	28282828 	.word	0x28282828
 8053c70:	a49a9728 	.word	0xa49a9728
 8053c74:	aaa72828 	.word	0xaaa72828
 8053c78:	ad28      	.short	0xad28
 8053c7a:	b3          	.byte	0xb3
 8053c7b:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 8053c7c:	78c3      	ldrb	r3, [r0, #3]
 8053c7e:	b14b      	cbz	r3, 8053c94 <RegionAS923GetPhyParam+0x64>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8053c80:	2302      	movs	r3, #2
 8053c82:	9304      	str	r3, [sp, #16]
 8053c84:	e006      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            }
            break;
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 8053c86:	7883      	ldrb	r3, [r0, #2]
 8053c88:	b123      	cbz	r3, 8053c94 <RegionAS923GetPhyParam+0x64>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 8053c8a:	2302      	movs	r3, #2
 8053c8c:	9304      	str	r3, [sp, #16]
 8053c8e:	e001      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 8053c90:	2302      	movs	r3, #2
 8053c92:	9304      	str	r3, [sp, #16]
            break;
        }
    }

    return phyParam;
}
 8053c94:	9804      	ldr	r0, [sp, #16]
 8053c96:	b007      	add	sp, #28
 8053c98:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 8053c9c:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8053ca0:	f88d 3004 	strb.w	r3, [sp, #4]
 8053ca4:	2307      	movs	r3, #7
 8053ca6:	f88d 3005 	strb.w	r3, [sp, #5]
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 8053caa:	7883      	ldrb	r3, [r0, #2]
 8053cac:	b103      	cbz	r3, 8053cb0 <RegionAS923GetPhyParam+0x80>
 8053cae:	2302      	movs	r3, #2
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8053cb0:	f88d 3006 	strb.w	r3, [sp, #6]
 8053cb4:	2310      	movs	r3, #16
 8053cb6:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8053cba:	4b3f      	ldr	r3, [pc, #252]	; (8053db8 <RegionAS923GetPhyParam+0x188>)
 8053cbc:	681b      	ldr	r3, [r3, #0]
 8053cbe:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8053cc2:	9202      	str	r2, [sp, #8]
 8053cc4:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8053cc6:	a801      	add	r0, sp, #4
 8053cc8:	f001 f891 	bl	8054dee <RegionCommonGetNextLowerTxDr>
 8053ccc:	9004      	str	r0, [sp, #16]
            break;
 8053cce:	e7e1      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8053cd0:	2340      	movs	r3, #64	; 0x40
 8053cd2:	9304      	str	r3, [sp, #16]
            break;
 8053cd4:	e7de      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8053cd6:	2320      	movs	r3, #32
 8053cd8:	9304      	str	r3, [sp, #16]
            break;
 8053cda:	e7db      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            if( getPhy->UplinkDwellTime == 0 )
 8053cdc:	7883      	ldrb	r3, [r0, #2]
 8053cde:	b92b      	cbnz	r3, 8053cec <RegionAS923GetPhyParam+0xbc>
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 8053ce0:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8053ce4:	4a35      	ldr	r2, [pc, #212]	; (8053dbc <RegionAS923GetPhyParam+0x18c>)
 8053ce6:	5cd3      	ldrb	r3, [r2, r3]
 8053ce8:	9304      	str	r3, [sp, #16]
 8053cea:	e7d3      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 8053cec:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8053cf0:	4a33      	ldr	r2, [pc, #204]	; (8053dc0 <RegionAS923GetPhyParam+0x190>)
 8053cf2:	5cd3      	ldrb	r3, [r2, r3]
 8053cf4:	9304      	str	r3, [sp, #16]
 8053cf6:	e7cd      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = AS923_MAX_RX_WINDOW;
 8053cf8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8053cfc:	9304      	str	r3, [sp, #16]
            break;
 8053cfe:	e7c9      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8053d00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8053d04:	9304      	str	r3, [sp, #16]
            break;
 8053d06:	e7c5      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8053d08:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8053d0c:	9304      	str	r3, [sp, #16]
            break;
 8053d0e:	e7c1      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8053d10:	f241 3388 	movw	r3, #5000	; 0x1388
 8053d14:	9304      	str	r3, [sp, #16]
            break;
 8053d16:	e7bd      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8053d18:	f241 7370 	movw	r3, #6000	; 0x1770
 8053d1c:	9304      	str	r3, [sp, #16]
            break;
 8053d1e:	e7b9      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8053d20:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8053d24:	4827      	ldr	r0, [pc, #156]	; (8053dc4 <RegionAS923GetPhyParam+0x194>)
 8053d26:	f001 f8b5 	bl	8054e94 <randr>
 8053d2a:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 8053d2e:	9004      	str	r0, [sp, #16]
            break;
 8053d30:	e7b0      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8053d32:	4b25      	ldr	r3, [pc, #148]	; (8053dc8 <RegionAS923GetPhyParam+0x198>)
 8053d34:	9304      	str	r3, [sp, #16]
            break;
 8053d36:	e7ad      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = AS923_RX_WND_2_DR;
 8053d38:	2302      	movs	r3, #2
 8053d3a:	9304      	str	r3, [sp, #16]
            break;
 8053d3c:	e7aa      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8053d3e:	4b1e      	ldr	r3, [pc, #120]	; (8053db8 <RegionAS923GetPhyParam+0x188>)
 8053d40:	681b      	ldr	r3, [r3, #0]
 8053d42:	33c0      	adds	r3, #192	; 0xc0
 8053d44:	9304      	str	r3, [sp, #16]
            break;
 8053d46:	e7a5      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8053d48:	4b1b      	ldr	r3, [pc, #108]	; (8053db8 <RegionAS923GetPhyParam+0x188>)
 8053d4a:	681b      	ldr	r3, [r3, #0]
 8053d4c:	33c2      	adds	r3, #194	; 0xc2
 8053d4e:	9304      	str	r3, [sp, #16]
            break;
 8053d50:	e7a0      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 8053d52:	2310      	movs	r3, #16
 8053d54:	9304      	str	r3, [sp, #16]
            break;
 8053d56:	e79d      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Channels = RegionNvmGroup2->Channels;
 8053d58:	4b17      	ldr	r3, [pc, #92]	; (8053db8 <RegionAS923GetPhyParam+0x188>)
 8053d5a:	681b      	ldr	r3, [r3, #0]
 8053d5c:	9304      	str	r3, [sp, #16]
            break;
 8053d5e:	e799      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 8053d60:	2301      	movs	r3, #1
 8053d62:	9304      	str	r3, [sp, #16]
            break;
 8053d64:	e796      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 8053d66:	4b19      	ldr	r3, [pc, #100]	; (8053dcc <RegionAS923GetPhyParam+0x19c>)
 8053d68:	9304      	str	r3, [sp, #16]
            break;
 8053d6a:	e793      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 8053d6c:	4b18      	ldr	r3, [pc, #96]	; (8053dd0 <RegionAS923GetPhyParam+0x1a0>)
 8053d6e:	9304      	str	r3, [sp, #16]
            break;
 8053d70:	e790      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 8053d72:	4b18      	ldr	r3, [pc, #96]	; (8053dd4 <RegionAS923GetPhyParam+0x1a4>)
 8053d74:	9304      	str	r3, [sp, #16]
            break;
 8053d76:	e78d      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 8053d78:	2311      	movs	r3, #17
 8053d7a:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 8053d7e:	2301      	movs	r3, #1
 8053d80:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = AS923_RFU2_SIZE;
 8053d84:	2300      	movs	r3, #0
 8053d86:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 8053d8a:	e783      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 8053d8c:	2303      	movs	r3, #3
 8053d8e:	9304      	str	r3, [sp, #16]
            break;
 8053d90:	e780      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ;
 8053d92:	4b10      	ldr	r3, [pc, #64]	; (8053dd4 <RegionAS923GetPhyParam+0x1a4>)
 8053d94:	9304      	str	r3, [sp, #16]
            break;
 8053d96:	e77d      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 8053d98:	2303      	movs	r3, #3
 8053d9a:	9304      	str	r3, [sp, #16]
            break;
 8053d9c:	e77a      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 8053d9e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8053da2:	4a0d      	ldr	r2, [pc, #52]	; (8053dd8 <RegionAS923GetPhyParam+0x1a8>)
 8053da4:	5cd3      	ldrb	r3, [r2, r3]
 8053da6:	9304      	str	r3, [sp, #16]
            break;
 8053da8:	e774      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 8053daa:	490c      	ldr	r1, [pc, #48]	; (8053ddc <RegionAS923GetPhyParam+0x1ac>)
 8053dac:	f990 0001 	ldrsb.w	r0, [r0, #1]
 8053db0:	f001 f840 	bl	8054e34 <RegionCommonGetBandwidth>
 8053db4:	9004      	str	r0, [sp, #16]
            break;
 8053db6:	e76d      	b.n	8053c94 <RegionAS923GetPhyParam+0x64>
 8053db8:	2001a07c 	.word	0x2001a07c
 8053dbc:	0805aba8 	.word	0x0805aba8
 8053dc0:	0805abb0 	.word	0x0805abb0
 8053dc4:	fffffc18 	.word	0xfffffc18
 8053dc8:	3706ea00 	.word	0x3706ea00
 8053dcc:	41a00000 	.word	0x41a00000
 8053dd0:	bf4ccccd 	.word	0xbf4ccccd
 8053dd4:	3709f740 	.word	0x3709f740
 8053dd8:	0805ab20 	.word	0x0805ab20
 8053ddc:	0805ab00 	.word	0x0805ab00

08053de0 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8053de0:	b530      	push	{r4, r5, lr}
 8053de2:	b083      	sub	sp, #12
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8053de4:	4b0b      	ldr	r3, [pc, #44]	; (8053e14 <RegionAS923SetBandTxDone+0x34>)
 8053de6:	681d      	ldr	r5, [r3, #0]
 8053de8:	4b0b      	ldr	r3, [pc, #44]	; (8053e18 <RegionAS923SetBandTxDone+0x38>)
 8053dea:	681a      	ldr	r2, [r3, #0]
 8053dec:	7803      	ldrb	r3, [r0, #0]
 8053dee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8053df2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8053df6:	7a5b      	ldrb	r3, [r3, #9]
 8053df8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8053dfc:	6903      	ldr	r3, [r0, #16]
 8053dfe:	9300      	str	r3, [sp, #0]
 8053e00:	68c3      	ldr	r3, [r0, #12]
 8053e02:	7842      	ldrb	r2, [r0, #1]
 8053e04:	6881      	ldr	r1, [r0, #8]
 8053e06:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
 8053e0a:	f000 fdcd 	bl	80549a8 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 8053e0e:	b003      	add	sp, #12
 8053e10:	bd30      	pop	{r4, r5, pc}
 8053e12:	bf00      	nop
 8053e14:	2001a078 	.word	0x2001a078
 8053e18:	2001a07c 	.word	0x2001a07c

08053e1c <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 8053e1c:	b530      	push	{r4, r5, lr}
 8053e1e:	b087      	sub	sp, #28
    Band_t bands[AS923_MAX_NB_BANDS] =
 8053e20:	2364      	movs	r3, #100	; 0x64
 8053e22:	f8ad 3000 	strh.w	r3, [sp]
 8053e26:	2300      	movs	r3, #0
 8053e28:	f88d 3002 	strb.w	r3, [sp, #2]
 8053e2c:	9301      	str	r3, [sp, #4]
 8053e2e:	9302      	str	r3, [sp, #8]
 8053e30:	9303      	str	r3, [sp, #12]
 8053e32:	9304      	str	r3, [sp, #16]
 8053e34:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        AS923_BAND0
    };

    switch( params->Type )
 8053e38:	7a03      	ldrb	r3, [r0, #8]
 8053e3a:	2b01      	cmp	r3, #1
 8053e3c:	d032      	beq.n	8053ea4 <RegionAS923InitDefaults+0x88>
 8053e3e:	2b02      	cmp	r3, #2
 8053e40:	d03c      	beq.n	8053ebc <RegionAS923InitDefaults+0xa0>
 8053e42:	b10b      	cbz	r3, 8053e48 <RegionAS923InitDefaults+0x2c>
        default:
        {
            break;
        }
    }
}
 8053e44:	b007      	add	sp, #28
 8053e46:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8053e48:	6803      	ldr	r3, [r0, #0]
 8053e4a:	2b00      	cmp	r3, #0
 8053e4c:	d0fa      	beq.n	8053e44 <RegionAS923InitDefaults+0x28>
 8053e4e:	6842      	ldr	r2, [r0, #4]
 8053e50:	2a00      	cmp	r2, #0
 8053e52:	d0f7      	beq.n	8053e44 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8053e54:	491e      	ldr	r1, [pc, #120]	; (8053ed0 <RegionAS923InitDefaults+0xb4>)
 8053e56:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8053e58:	4c1e      	ldr	r4, [pc, #120]	; (8053ed4 <RegionAS923InitDefaults+0xb8>)
 8053e5a:	6022      	str	r2, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 8053e5c:	2218      	movs	r2, #24
 8053e5e:	4669      	mov	r1, sp
 8053e60:	4618      	mov	r0, r3
 8053e62:	f001 f824 	bl	8054eae <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 8053e66:	6823      	ldr	r3, [r4, #0]
 8053e68:	4c1b      	ldr	r4, [pc, #108]	; (8053ed8 <RegionAS923InitDefaults+0xbc>)
 8053e6a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8053e6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 8053e72:	f103 050c 	add.w	r5, r3, #12
 8053e76:	340c      	adds	r4, #12
 8053e78:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8053e7c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 8053e80:	4a16      	ldr	r2, [pc, #88]	; (8053edc <RegionAS923InitDefaults+0xc0>)
 8053e82:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 8053e84:	f502 3243 	add.w	r2, r2, #199680	; 0x30c00
 8053e88:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8053e8c:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 8053e8e:	2203      	movs	r2, #3
 8053e90:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8053e94:	2201      	movs	r2, #1
 8053e96:	f103 01c2 	add.w	r1, r3, #194	; 0xc2
 8053e9a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8053e9e:	f000 fd71 	bl	8054984 <RegionCommonChanMaskCopy>
            break;
 8053ea2:	e7cf      	b.n	8053e44 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8053ea4:	4b0b      	ldr	r3, [pc, #44]	; (8053ed4 <RegionAS923InitDefaults+0xb8>)
 8053ea6:	6818      	ldr	r0, [r3, #0]
 8053ea8:	2300      	movs	r3, #0
 8053eaa:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8053eac:	6103      	str	r3, [r0, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8053eae:	2201      	movs	r2, #1
 8053eb0:	f100 01c2 	add.w	r1, r0, #194	; 0xc2
 8053eb4:	30c0      	adds	r0, #192	; 0xc0
 8053eb6:	f000 fd65 	bl	8054984 <RegionCommonChanMaskCopy>
            break;
 8053eba:	e7c3      	b.n	8053e44 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8053ebc:	4b05      	ldr	r3, [pc, #20]	; (8053ed4 <RegionAS923InitDefaults+0xb8>)
 8053ebe:	681b      	ldr	r3, [r3, #0]
 8053ec0:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8053ec4:	f8b3 10c0 	ldrh.w	r1, [r3, #192]	; 0xc0
 8053ec8:	430a      	orrs	r2, r1
 8053eca:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
            break;
 8053ece:	e7b9      	b.n	8053e44 <RegionAS923InitDefaults+0x28>
 8053ed0:	2001a078 	.word	0x2001a078
 8053ed4:	2001a07c 	.word	0x2001a07c
 8053ed8:	08059bb8 	.word	0x08059bb8
 8053edc:	3706ea00 	.word	0x3706ea00

08053ee0 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8053ee0:	b508      	push	{r3, lr}
    switch( phyAttribute )
 8053ee2:	290a      	cmp	r1, #10
 8053ee4:	d84b      	bhi.n	8053f7e <RegionAS923Verify+0x9e>
 8053ee6:	e8df f001 	tbb	[pc, r1]
 8053eea:	4a06      	.short	0x4a06
 8053eec:	0a4a4a4a 	.word	0x0a4a4a4a
 8053ef0:	404a2a20 	.word	0x404a2a20
 8053ef4:	40          	.byte	0x40
 8053ef5:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8053ef6:	6800      	ldr	r0, [r0, #0]
 8053ef8:	f7ff fe54 	bl	8053ba4 <VerifyRfFreq>
 8053efc:	e040      	b.n	8053f80 <RegionAS923Verify+0xa0>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8053efe:	7883      	ldrb	r3, [r0, #2]
 8053f00:	b94b      	cbnz	r3, 8053f16 <RegionAS923Verify+0x36>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 8053f02:	2207      	movs	r2, #7
 8053f04:	2100      	movs	r1, #0
 8053f06:	f990 0000 	ldrsb.w	r0, [r0]
 8053f0a:	f000 fcc8 	bl	805489e <RegionCommonValueInRange>
 8053f0e:	3800      	subs	r0, #0
 8053f10:	bf18      	it	ne
 8053f12:	2001      	movne	r0, #1
 8053f14:	e034      	b.n	8053f80 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 8053f16:	2207      	movs	r2, #7
 8053f18:	2102      	movs	r1, #2
 8053f1a:	f990 0000 	ldrsb.w	r0, [r0]
 8053f1e:	f000 fcbe 	bl	805489e <RegionCommonValueInRange>
 8053f22:	3800      	subs	r0, #0
 8053f24:	bf18      	it	ne
 8053f26:	2001      	movne	r0, #1
 8053f28:	e02a      	b.n	8053f80 <RegionAS923Verify+0xa0>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8053f2a:	2205      	movs	r2, #5
 8053f2c:	2100      	movs	r1, #0
 8053f2e:	f990 0000 	ldrsb.w	r0, [r0]
 8053f32:	f000 fcb4 	bl	805489e <RegionCommonValueInRange>
 8053f36:	3800      	subs	r0, #0
 8053f38:	bf18      	it	ne
 8053f3a:	2001      	movne	r0, #1
 8053f3c:	e020      	b.n	8053f80 <RegionAS923Verify+0xa0>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 8053f3e:	7843      	ldrb	r3, [r0, #1]
 8053f40:	b94b      	cbnz	r3, 8053f56 <RegionAS923Verify+0x76>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8053f42:	2207      	movs	r2, #7
 8053f44:	2100      	movs	r1, #0
 8053f46:	f990 0000 	ldrsb.w	r0, [r0]
 8053f4a:	f000 fca8 	bl	805489e <RegionCommonValueInRange>
 8053f4e:	3800      	subs	r0, #0
 8053f50:	bf18      	it	ne
 8053f52:	2001      	movne	r0, #1
 8053f54:	e014      	b.n	8053f80 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 8053f56:	2207      	movs	r2, #7
 8053f58:	2102      	movs	r1, #2
 8053f5a:	f990 0000 	ldrsb.w	r0, [r0]
 8053f5e:	f000 fc9e 	bl	805489e <RegionCommonValueInRange>
 8053f62:	3800      	subs	r0, #0
 8053f64:	bf18      	it	ne
 8053f66:	2001      	movne	r0, #1
 8053f68:	e00a      	b.n	8053f80 <RegionAS923Verify+0xa0>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 8053f6a:	2207      	movs	r2, #7
 8053f6c:	2100      	movs	r1, #0
 8053f6e:	f990 0000 	ldrsb.w	r0, [r0]
 8053f72:	f000 fc94 	bl	805489e <RegionCommonValueInRange>
 8053f76:	3800      	subs	r0, #0
 8053f78:	bf18      	it	ne
 8053f7a:	2001      	movne	r0, #1
 8053f7c:	e000      	b.n	8053f80 <RegionAS923Verify+0xa0>
{
 8053f7e:	2000      	movs	r0, #0
            return AS923_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 8053f80:	bd08      	pop	{r3, pc}
	...

08053f84 <RegionAS923ChanMaskSet>:
        }
    }
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8053f84:	b508      	push	{r3, lr}
    switch( chanMaskSet->ChannelsMaskType )
 8053f86:	7903      	ldrb	r3, [r0, #4]
 8053f88:	b11b      	cbz	r3, 8053f92 <RegionAS923ChanMaskSet+0xe>
 8053f8a:	2b01      	cmp	r3, #1
 8053f8c:	d00b      	beq.n	8053fa6 <RegionAS923ChanMaskSet+0x22>
 8053f8e:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
 8053f90:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 8053f92:	4b0a      	ldr	r3, [pc, #40]	; (8053fbc <RegionAS923ChanMaskSet+0x38>)
 8053f94:	681b      	ldr	r3, [r3, #0]
 8053f96:	2201      	movs	r2, #1
 8053f98:	6801      	ldr	r1, [r0, #0]
 8053f9a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8053f9e:	f000 fcf1 	bl	8054984 <RegionCommonChanMaskCopy>
    return true;
 8053fa2:	2001      	movs	r0, #1
            break;
 8053fa4:	e7f4      	b.n	8053f90 <RegionAS923ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 8053fa6:	4b05      	ldr	r3, [pc, #20]	; (8053fbc <RegionAS923ChanMaskSet+0x38>)
 8053fa8:	681b      	ldr	r3, [r3, #0]
 8053faa:	2201      	movs	r2, #1
 8053fac:	6801      	ldr	r1, [r0, #0]
 8053fae:	f103 00c2 	add.w	r0, r3, #194	; 0xc2
 8053fb2:	f000 fce7 	bl	8054984 <RegionCommonChanMaskCopy>
    return true;
 8053fb6:	2001      	movs	r0, #1
            break;
 8053fb8:	e7ea      	b.n	8053f90 <RegionAS923ChanMaskSet+0xc>
 8053fba:	bf00      	nop
 8053fbc:	2001a07c 	.word	0x2001a07c

08053fc0 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8053fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8053fc2:	b083      	sub	sp, #12
 8053fc4:	460e      	mov	r6, r1
 8053fc6:	4617      	mov	r7, r2
 8053fc8:	461c      	mov	r4, r3
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 8053fca:	2807      	cmp	r0, #7
 8053fcc:	bfa8      	it	ge
 8053fce:	2007      	movge	r0, #7
 8053fd0:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 8053fd2:	4913      	ldr	r1, [pc, #76]	; (8054020 <RegionAS923ComputeRxWindowParameters+0x60>)
 8053fd4:	f000 ff2e 	bl	8054e34 <RegionCommonGetBandwidth>
 8053fd8:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8053fda:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8053fde:	2b07      	cmp	r3, #7
 8053fe0:	d017      	beq.n	8054012 <RegionAS923ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8053fe2:	4a0f      	ldr	r2, [pc, #60]	; (8054020 <RegionAS923ComputeRxWindowParameters+0x60>)
 8053fe4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8053fe8:	4a0e      	ldr	r2, [pc, #56]	; (8054024 <RegionAS923ComputeRxWindowParameters+0x64>)
 8053fea:	5cd0      	ldrb	r0, [r2, r3]
 8053fec:	f000 fdf0 	bl	8054bd0 <RegionCommonComputeSymbolTimeLoRa>
 8053ff0:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8053ff2:	4b0d      	ldr	r3, [pc, #52]	; (8054028 <RegionAS923ComputeRxWindowParameters+0x68>)
 8053ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8053ff6:	4798      	blx	r3
 8053ff8:	4603      	mov	r3, r0
 8053ffa:	f104 020c 	add.w	r2, r4, #12
 8053ffe:	9201      	str	r2, [sp, #4]
 8054000:	3408      	adds	r4, #8
 8054002:	9400      	str	r4, [sp, #0]
 8054004:	463a      	mov	r2, r7
 8054006:	4631      	mov	r1, r6
 8054008:	4628      	mov	r0, r5
 805400a:	f000 fdef 	bl	8054bec <RegionCommonComputeRxWindowParameters>
}
 805400e:	b003      	add	sp, #12
 8054010:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8054012:	4a04      	ldr	r2, [pc, #16]	; (8054024 <RegionAS923ComputeRxWindowParameters+0x64>)
 8054014:	5cd0      	ldrb	r0, [r2, r3]
 8054016:	f000 fde3 	bl	8054be0 <RegionCommonComputeSymbolTimeFsk>
 805401a:	4605      	mov	r5, r0
 805401c:	e7e9      	b.n	8053ff2 <RegionAS923ComputeRxWindowParameters+0x32>
 805401e:	bf00      	nop
 8054020:	0805ab00 	.word	0x0805ab00
 8054024:	0805ab20 	.word	0x0805ab20
 8054028:	08059d2c 	.word	0x08059d2c

0805402c <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 805402c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8054030:	b08b      	sub	sp, #44	; 0x2c
 8054032:	4604      	mov	r4, r0
 8054034:	460e      	mov	r6, r1
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8054036:	f990 7001 	ldrsb.w	r7, [r0, #1]
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 805403a:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 805403e:	4b32      	ldr	r3, [pc, #200]	; (8054108 <RegionAS923RxConfig+0xdc>)
 8054040:	685b      	ldr	r3, [r3, #4]
 8054042:	4798      	blx	r3
 8054044:	2800      	cmp	r0, #0
 8054046:	d15c      	bne.n	8054102 <RegionAS923RxConfig+0xd6>
 8054048:	4605      	mov	r5, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 805404a:	7ca3      	ldrb	r3, [r4, #18]
 805404c:	b983      	cbnz	r3, 8054070 <RegionAS923RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 805404e:	4b2f      	ldr	r3, [pc, #188]	; (805410c <RegionAS923RxConfig+0xe0>)
 8054050:	681a      	ldr	r2, [r3, #0]
 8054052:	7823      	ldrb	r3, [r4, #0]
 8054054:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8054058:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 805405c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8054060:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8054064:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8054068:	f1b8 0f00 	cmp.w	r8, #0
 805406c:	d100      	bne.n	8054070 <RegionAS923RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 805406e:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 8054070:	4b27      	ldr	r3, [pc, #156]	; (8054110 <RegionAS923RxConfig+0xe4>)
 8054072:	f913 9007 	ldrsb.w	r9, [r3, r7]

    Radio.SetChannel( frequency );
 8054076:	4b24      	ldr	r3, [pc, #144]	; (8054108 <RegionAS923RxConfig+0xdc>)
 8054078:	68db      	ldr	r3, [r3, #12]
 805407a:	4640      	mov	r0, r8
 805407c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 805407e:	2f07      	cmp	r7, #7
 8054080:	d023      	beq.n	80540ca <RegionAS923RxConfig+0x9e>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8054082:	4b21      	ldr	r3, [pc, #132]	; (8054108 <RegionAS923RxConfig+0xdc>)
 8054084:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8054088:	7c63      	ldrb	r3, [r4, #17]
 805408a:	9309      	str	r3, [sp, #36]	; 0x24
 805408c:	2501      	movs	r5, #1
 805408e:	9508      	str	r5, [sp, #32]
 8054090:	2300      	movs	r3, #0
 8054092:	9307      	str	r3, [sp, #28]
 8054094:	9306      	str	r3, [sp, #24]
 8054096:	9305      	str	r3, [sp, #20]
 8054098:	9304      	str	r3, [sp, #16]
 805409a:	9303      	str	r3, [sp, #12]
 805409c:	8922      	ldrh	r2, [r4, #8]
 805409e:	9202      	str	r2, [sp, #8]
 80540a0:	2208      	movs	r2, #8
 80540a2:	9201      	str	r2, [sp, #4]
 80540a4:	9300      	str	r3, [sp, #0]
 80540a6:	462b      	mov	r3, r5
 80540a8:	464a      	mov	r2, r9
 80540aa:	78a1      	ldrb	r1, [r4, #2]
 80540ac:	4628      	mov	r0, r5
 80540ae:	47c0      	blx	r8
    }

    Radio.SetMaxPayloadLength( modem, MaxPayloadOfDatarateDwell0AS923[dr] + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80540b0:	4b15      	ldr	r3, [pc, #84]	; (8054108 <RegionAS923RxConfig+0xdc>)
 80540b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80540b4:	4a17      	ldr	r2, [pc, #92]	; (8054114 <RegionAS923RxConfig+0xe8>)
 80540b6:	5dd1      	ldrb	r1, [r2, r7]
 80540b8:	310d      	adds	r1, #13
 80540ba:	b2c9      	uxtb	r1, r1
 80540bc:	4628      	mov	r0, r5
 80540be:	4798      	blx	r3

    *datarate = (uint8_t) dr;
 80540c0:	7037      	strb	r7, [r6, #0]
    return true;
 80540c2:	2001      	movs	r0, #1
}
 80540c4:	b00b      	add	sp, #44	; 0x2c
 80540c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80540ca:	4b0f      	ldr	r3, [pc, #60]	; (8054108 <RegionAS923RxConfig+0xdc>)
 80540cc:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80540d0:	7c63      	ldrb	r3, [r4, #17]
 80540d2:	9309      	str	r3, [sp, #36]	; 0x24
 80540d4:	2000      	movs	r0, #0
 80540d6:	9008      	str	r0, [sp, #32]
 80540d8:	9007      	str	r0, [sp, #28]
 80540da:	9006      	str	r0, [sp, #24]
 80540dc:	2301      	movs	r3, #1
 80540de:	9305      	str	r3, [sp, #20]
 80540e0:	9004      	str	r0, [sp, #16]
 80540e2:	9003      	str	r0, [sp, #12]
 80540e4:	8923      	ldrh	r3, [r4, #8]
 80540e6:	9302      	str	r3, [sp, #8]
 80540e8:	2305      	movs	r3, #5
 80540ea:	9301      	str	r3, [sp, #4]
 80540ec:	4b0a      	ldr	r3, [pc, #40]	; (8054118 <RegionAS923RxConfig+0xec>)
 80540ee:	9300      	str	r3, [sp, #0]
 80540f0:	4603      	mov	r3, r0
 80540f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80540f6:	fb02 f209 	mul.w	r2, r2, r9
 80540fa:	f24c 3150 	movw	r1, #50000	; 0xc350
 80540fe:	47c0      	blx	r8
 8054100:	e7d6      	b.n	80540b0 <RegionAS923RxConfig+0x84>
        return false;
 8054102:	2000      	movs	r0, #0
 8054104:	e7de      	b.n	80540c4 <RegionAS923RxConfig+0x98>
 8054106:	bf00      	nop
 8054108:	08059d2c 	.word	0x08059d2c
 805410c:	2001a07c 	.word	0x2001a07c
 8054110:	0805ab20 	.word	0x0805ab20
 8054114:	0805aba8 	.word	0x0805aba8
 8054118:	00014585 	.word	0x00014585

0805411c <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 805411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8054120:	b08d      	sub	sp, #52	; 0x34
 8054122:	4604      	mov	r4, r0
 8054124:	460f      	mov	r7, r1
 8054126:	4690      	mov	r8, r2
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8054128:	f990 3001 	ldrsb.w	r3, [r0, #1]
 805412c:	4a3d      	ldr	r2, [pc, #244]	; (8054224 <RegionAS923TxConfig+0x108>)
 805412e:	f912 a003 	ldrsb.w	sl, [r2, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8054132:	4b3d      	ldr	r3, [pc, #244]	; (8054228 <RegionAS923TxConfig+0x10c>)
 8054134:	6819      	ldr	r1, [r3, #0]
 8054136:	4d3d      	ldr	r5, [pc, #244]	; (805422c <RegionAS923TxConfig+0x110>)
 8054138:	682b      	ldr	r3, [r5, #0]
 805413a:	7802      	ldrb	r2, [r0, #0]
 805413c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8054140:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8054144:	7a53      	ldrb	r3, [r2, #9]
 8054146:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 805414a:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 805414e:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8054152:	f990 0002 	ldrsb.w	r0, [r0, #2]
 8054156:	f000 fe69 	bl	8054e2c <RegionCommonLimitTxPower>
 805415a:	4606      	mov	r6, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 805415c:	4934      	ldr	r1, [pc, #208]	; (8054230 <RegionAS923TxConfig+0x114>)
 805415e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8054162:	f000 fe67 	bl	8054e34 <RegionCommonGetBandwidth>
 8054166:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8054168:	edd4 0a02 	vldr	s1, [r4, #8]
 805416c:	ed94 0a01 	vldr	s0, [r4, #4]
 8054170:	4630      	mov	r0, r6
 8054172:	f000 fd75 	bl	8054c60 <RegionCommonComputeTxPower>
 8054176:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8054178:	4b2e      	ldr	r3, [pc, #184]	; (8054234 <RegionAS923TxConfig+0x118>)
 805417a:	68da      	ldr	r2, [r3, #12]
 805417c:	6829      	ldr	r1, [r5, #0]
 805417e:	7823      	ldrb	r3, [r4, #0]
 8054180:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8054184:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8054188:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 805418a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 805418e:	2b07      	cmp	r3, #7
 8054190:	d026      	beq.n	80541e0 <RegionAS923TxConfig+0xc4>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8054192:	4b28      	ldr	r3, [pc, #160]	; (8054234 <RegionAS923TxConfig+0x118>)
 8054194:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 8054198:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 805419c:	9308      	str	r3, [sp, #32]
 805419e:	2200      	movs	r2, #0
 80541a0:	9207      	str	r2, [sp, #28]
 80541a2:	9206      	str	r2, [sp, #24]
 80541a4:	9205      	str	r2, [sp, #20]
 80541a6:	2501      	movs	r5, #1
 80541a8:	9504      	str	r5, [sp, #16]
 80541aa:	9203      	str	r2, [sp, #12]
 80541ac:	2308      	movs	r3, #8
 80541ae:	9302      	str	r3, [sp, #8]
 80541b0:	9501      	str	r5, [sp, #4]
 80541b2:	f8cd a000 	str.w	sl, [sp]
 80541b6:	464b      	mov	r3, r9
 80541b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80541ba:	4628      	mov	r0, r5
 80541bc:	47d8      	blx	fp
    }

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80541be:	89a1      	ldrh	r1, [r4, #12]
 80541c0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80541c4:	f7ff fd02 	bl	8053bcc <GetTimeOnAir>
 80541c8:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload lenght of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80541cc:	4b19      	ldr	r3, [pc, #100]	; (8054234 <RegionAS923TxConfig+0x118>)
 80541ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80541d0:	7b21      	ldrb	r1, [r4, #12]
 80541d2:	4628      	mov	r0, r5
 80541d4:	4798      	blx	r3

    *txPower = txPowerLimited;
 80541d6:	703e      	strb	r6, [r7, #0]
    return true;
}
 80541d8:	2001      	movs	r0, #1
 80541da:	b00d      	add	sp, #52	; 0x34
 80541dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80541e0:	4b14      	ldr	r3, [pc, #80]	; (8054234 <RegionAS923TxConfig+0x118>)
 80541e2:	69dd      	ldr	r5, [r3, #28]
 80541e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80541e8:	fb03 f30a 	mul.w	r3, r3, sl
 80541ec:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80541f0:	9208      	str	r2, [sp, #32]
 80541f2:	f04f 0b00 	mov.w	fp, #0
 80541f6:	f8cd b01c 	str.w	fp, [sp, #28]
 80541fa:	f8cd b018 	str.w	fp, [sp, #24]
 80541fe:	f8cd b014 	str.w	fp, [sp, #20]
 8054202:	2201      	movs	r2, #1
 8054204:	9204      	str	r2, [sp, #16]
 8054206:	f8cd b00c 	str.w	fp, [sp, #12]
 805420a:	2205      	movs	r2, #5
 805420c:	9202      	str	r2, [sp, #8]
 805420e:	f8cd b004 	str.w	fp, [sp, #4]
 8054212:	9300      	str	r3, [sp, #0]
 8054214:	464b      	mov	r3, r9
 8054216:	f246 12a8 	movw	r2, #25000	; 0x61a8
 805421a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 805421c:	4658      	mov	r0, fp
 805421e:	47a8      	blx	r5
        modem = MODEM_FSK;
 8054220:	465d      	mov	r5, fp
 8054222:	e7cc      	b.n	80541be <RegionAS923TxConfig+0xa2>
 8054224:	0805ab20 	.word	0x0805ab20
 8054228:	2001a078 	.word	0x2001a078
 805422c:	2001a07c 	.word	0x2001a07c
 8054230:	0805ab00 	.word	0x0805ab00
 8054234:	08059d2c 	.word	0x08059d2c

08054238 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8054238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805423c:	b08f      	sub	sp, #60	; 0x3c
 805423e:	4607      	mov	r7, r0
 8054240:	468b      	mov	fp, r1
 8054242:	4692      	mov	sl, r2
 8054244:	4699      	mov	r9, r3
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8054246:	2500      	movs	r5, #0
 8054248:	950c      	str	r5, [sp, #48]	; 0x30
 805424a:	f8ad 5034 	strh.w	r5, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 805424e:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 8054252:	f04f 0807 	mov.w	r8, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8054256:	e02d      	b.n	80542b4 <RegionAS923LinkAdrReq+0x7c>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8054258:	2400      	movs	r4, #0
        status = 0x07;
 805425a:	f04f 0807 	mov.w	r8, #7
 805425e:	e00f      	b.n	8054280 <RegionAS923LinkAdrReq+0x48>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8054260:	4a55      	ldr	r2, [pc, #340]	; (80543b8 <RegionAS923LinkAdrReq+0x180>)
 8054262:	6812      	ldr	r2, [r2, #0]
 8054264:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8054268:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 805426c:	b132      	cbz	r2, 805427c <RegionAS923LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 805426e:	2201      	movs	r2, #1
 8054270:	40a2      	lsls	r2, r4
 8054272:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8054276:	430a      	orrs	r2, r1
 8054278:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 805427c:	3401      	adds	r4, #1
 805427e:	b2e4      	uxtb	r4, r4
 8054280:	2c0f      	cmp	r4, #15
 8054282:	d817      	bhi.n	80542b4 <RegionAS923LinkAdrReq+0x7c>
                if( linkAdrParams.ChMaskCtrl == 6 )
 8054284:	2b06      	cmp	r3, #6
 8054286:	d0eb      	beq.n	8054260 <RegionAS923LinkAdrReq+0x28>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8054288:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 805428c:	4126      	asrs	r6, r4
 805428e:	f016 0f01 	tst.w	r6, #1
 8054292:	d0f3      	beq.n	805427c <RegionAS923LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8054294:	4a48      	ldr	r2, [pc, #288]	; (80543b8 <RegionAS923LinkAdrReq+0x180>)
 8054296:	6812      	ldr	r2, [r2, #0]
 8054298:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 805429c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80542a0:	2a00      	cmp	r2, #0
 80542a2:	d1eb      	bne.n	805427c <RegionAS923LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80542a4:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
 80542a8:	e7e8      	b.n	805427c <RegionAS923LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 80542aa:	f04f 0806 	mov.w	r8, #6
 80542ae:	e001      	b.n	80542b4 <RegionAS923LinkAdrReq+0x7c>
            status &= 0xFE; // Channel mask KO
 80542b0:	f04f 0806 	mov.w	r8, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80542b4:	7a3b      	ldrb	r3, [r7, #8]
 80542b6:	42ab      	cmp	r3, r5
 80542b8:	d919      	bls.n	80542ee <RegionAS923LinkAdrReq+0xb6>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80542ba:	6878      	ldr	r0, [r7, #4]
 80542bc:	a90c      	add	r1, sp, #48	; 0x30
 80542be:	4428      	add	r0, r5
 80542c0:	f000 fc12 	bl	8054ae8 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 80542c4:	b198      	cbz	r0, 80542ee <RegionAS923LinkAdrReq+0xb6>
        bytesProcessed += nextIndex;
 80542c6:	4405      	add	r5, r0
 80542c8:	b2ed      	uxtb	r5, r5
        chMask = linkAdrParams.ChMask;
 80542ca:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80542ce:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80542d2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80542d6:	b90b      	cbnz	r3, 80542dc <RegionAS923LinkAdrReq+0xa4>
 80542d8:	2a00      	cmp	r2, #0
 80542da:	d0e6      	beq.n	80542aa <RegionAS923LinkAdrReq+0x72>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80542dc:	1e5a      	subs	r2, r3, #1
 80542de:	b2d2      	uxtb	r2, r2
 80542e0:	2a04      	cmp	r2, #4
 80542e2:	d9e5      	bls.n	80542b0 <RegionAS923LinkAdrReq+0x78>
 80542e4:	2b06      	cmp	r3, #6
 80542e6:	d9b7      	bls.n	8054258 <RegionAS923LinkAdrReq+0x20>
            status &= 0xFE; // Channel mask KO
 80542e8:	f04f 0806 	mov.w	r8, #6
 80542ec:	e7e2      	b.n	80542b4 <RegionAS923LinkAdrReq+0x7c>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80542ee:	2302      	movs	r3, #2
 80542f0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80542f4:	7a7b      	ldrb	r3, [r7, #9]
 80542f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionAS923GetPhyParam( &getPhy );
 80542fa:	a80a      	add	r0, sp, #40	; 0x28
 80542fc:	f7ff fc98 	bl	8053c30 <RegionAS923GetPhyParam>

    linkAdrVerifyParams.Status = status;
 8054300:	f88d 8008 	strb.w	r8, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8054304:	7abb      	ldrb	r3, [r7, #10]
 8054306:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 805430a:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 805430e:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8054312:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8054316:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 805431a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 805431e:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8054322:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8054326:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 805432a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 805432e:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8054332:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8054336:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 805433a:	2310      	movs	r3, #16
 805433c:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8054340:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8054344:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8054346:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 805434a:	2307      	movs	r3, #7
 805434c:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8054350:	4a19      	ldr	r2, [pc, #100]	; (80543b8 <RegionAS923LinkAdrReq+0x180>)
 8054352:	6812      	ldr	r2, [r2, #0]
 8054354:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 8054356:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 805435a:	2300      	movs	r3, #0
 805435c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8054360:	683b      	ldr	r3, [r7, #0]
 8054362:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8054364:	ab0c      	add	r3, sp, #48	; 0x30
 8054366:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 805436a:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 805436e:	a801      	add	r0, sp, #4
 8054370:	f000 fbd6 	bl	8054b20 <RegionCommonLinkAdrReqVerifyParams>
 8054374:	4604      	mov	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8054376:	2807      	cmp	r0, #7
 8054378:	d011      	beq.n	805439e <RegionAS923LinkAdrReq+0x166>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 805437a:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 805437e:	f88b 3000 	strb.w	r3, [fp]
    *txPowOut = linkAdrParams.TxPower;
 8054382:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8054386:	f88a 3000 	strb.w	r3, [sl]
    *nbRepOut = linkAdrParams.NbRep;
 805438a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 805438e:	f889 3000 	strb.w	r3, [r9]
    *nbBytesParsed = bytesProcessed;
 8054392:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8054394:	701d      	strb	r5, [r3, #0]

    return status;
}
 8054396:	4620      	mov	r0, r4
 8054398:	b00f      	add	sp, #60	; 0x3c
 805439a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 805439e:	4e06      	ldr	r6, [pc, #24]	; (80543b8 <RegionAS923LinkAdrReq+0x180>)
 80543a0:	6830      	ldr	r0, [r6, #0]
 80543a2:	2202      	movs	r2, #2
 80543a4:	2100      	movs	r1, #0
 80543a6:	30c0      	adds	r0, #192	; 0xc0
 80543a8:	f000 fd97 	bl	8054eda <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 80543ac:	6833      	ldr	r3, [r6, #0]
 80543ae:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 80543b2:	f8a3 20c0 	strh.w	r2, [r3, #192]	; 0xc0
 80543b6:	e7e0      	b.n	805437a <RegionAS923LinkAdrReq+0x142>
 80543b8:	2001a07c 	.word	0x2001a07c

080543bc <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80543bc:	b538      	push	{r3, r4, r5, lr}
 80543be:	4604      	mov	r4, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80543c0:	6840      	ldr	r0, [r0, #4]
 80543c2:	f7ff fbef 	bl	8053ba4 <VerifyRfFreq>
 80543c6:	b1a0      	cbz	r0, 80543f2 <RegionAS923RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 80543c8:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 80543ca:	2207      	movs	r2, #7
 80543cc:	2100      	movs	r1, #0
 80543ce:	f994 0000 	ldrsb.w	r0, [r4]
 80543d2:	f000 fa64 	bl	805489e <RegionCommonValueInRange>
 80543d6:	b908      	cbnz	r0, 80543dc <RegionAS923RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 80543d8:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 80543dc:	2207      	movs	r2, #7
 80543de:	2100      	movs	r1, #0
 80543e0:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80543e4:	f000 fa5b 	bl	805489e <RegionCommonValueInRange>
 80543e8:	b908      	cbnz	r0, 80543ee <RegionAS923RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80543ea:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

    return status;
}
 80543ee:	4628      	mov	r0, r5
 80543f0:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 80543f2:	2506      	movs	r5, #6
 80543f4:	e7e9      	b.n	80543ca <RegionAS923RxParamSetupReq+0xe>

080543f6 <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 80543f6:	2000      	movs	r0, #0
 80543f8:	4770      	bx	lr
	...

080543fc <RegionAS923DlChannelReq>:

int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80543fc:	b510      	push	{r4, lr}
 80543fe:	4604      	mov	r4, r0
    uint8_t status = 0x03;

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8054400:	6840      	ldr	r0, [r0, #4]
 8054402:	f7ff fbcf 	bl	8053ba4 <VerifyRfFreq>
 8054406:	b170      	cbz	r0, 8054426 <RegionAS923DlChannelReq+0x2a>
    uint8_t status = 0x03;
 8054408:	2003      	movs	r0, #3
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 805440a:	4b0b      	ldr	r3, [pc, #44]	; (8054438 <RegionAS923DlChannelReq+0x3c>)
 805440c:	681a      	ldr	r2, [r3, #0]
 805440e:	7823      	ldrb	r3, [r4, #0]
 8054410:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8054414:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8054418:	b909      	cbnz	r1, 805441e <RegionAS923DlChannelReq+0x22>
    {
        status &= 0xFD;
 805441a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 805441e:	2803      	cmp	r0, #3
 8054420:	d003      	beq.n	805442a <RegionAS923DlChannelReq+0x2e>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
}
 8054422:	b240      	sxtb	r0, r0
 8054424:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 8054426:	2002      	movs	r0, #2
 8054428:	e7ef      	b.n	805440a <RegionAS923DlChannelReq+0xe>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 805442a:	6861      	ldr	r1, [r4, #4]
 805442c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8054430:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8054434:	6059      	str	r1, [r3, #4]
 8054436:	e7f4      	b.n	8054422 <RegionAS923DlChannelReq+0x26>
 8054438:	2001a07c 	.word	0x2001a07c

0805443c <RegionAS923AlternateDr>:

int8_t RegionAS923AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
}
 805443c:	2002      	movs	r0, #2
 805443e:	4770      	bx	lr

08054440 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8054440:	b5f0      	push	{r4, r5, r6, r7, lr}
 8054442:	b097      	sub	sp, #92	; 0x5c
 8054444:	4604      	mov	r4, r0
 8054446:	460f      	mov	r7, r1
 8054448:	4616      	mov	r6, r2
 805444a:	461d      	mov	r5, r3
    uint8_t nbEnabledChannels = 0;
 805444c:	2100      	movs	r1, #0
 805444e:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 8054452:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 8054456:	9111      	str	r1, [sp, #68]	; 0x44
 8054458:	9112      	str	r1, [sp, #72]	; 0x48
 805445a:	9113      	str	r1, [sp, #76]	; 0x4c
 805445c:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 805445e:	2303      	movs	r3, #3
 8054460:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8054464:	4b31      	ldr	r3, [pc, #196]	; (805452c <RegionAS923NextChannel+0xec>)
 8054466:	6818      	ldr	r0, [r3, #0]
 8054468:	2201      	movs	r2, #1
 805446a:	30c0      	adds	r0, #192	; 0xc0
 805446c:	f000 fa74 	bl	8054958 <RegionCommonCountChannels>
 8054470:	b938      	cbnz	r0, 8054482 <RegionAS923NextChannel+0x42>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8054472:	4b2e      	ldr	r3, [pc, #184]	; (805452c <RegionAS923NextChannel+0xec>)
 8054474:	681a      	ldr	r2, [r3, #0]
 8054476:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	; 0xc0
 805447a:	f043 0303 	orr.w	r3, r3, #3
 805447e:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8054482:	7a63      	ldrb	r3, [r4, #9]
 8054484:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8054488:	7a23      	ldrb	r3, [r4, #8]
 805448a:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 805448e:	4b27      	ldr	r3, [pc, #156]	; (805452c <RegionAS923NextChannel+0xec>)
 8054490:	681b      	ldr	r3, [r3, #0]
 8054492:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 8054496:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8054498:	9305      	str	r3, [sp, #20]
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 805449a:	4b25      	ldr	r3, [pc, #148]	; (8054530 <RegionAS923NextChannel+0xf0>)
 805449c:	681b      	ldr	r3, [r3, #0]
 805449e:	9306      	str	r3, [sp, #24]
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 80544a0:	2310      	movs	r3, #16
 80544a2:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 80544a6:	f10d 030a 	add.w	r3, sp, #10
 80544aa:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80544ac:	6823      	ldr	r3, [r4, #0]
 80544ae:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80544b0:	6863      	ldr	r3, [r4, #4]
 80544b2:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80544b4:	7aa3      	ldrb	r3, [r4, #10]
 80544b6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 80544ba:	2301      	movs	r3, #1
 80544bc:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80544c0:	ab0c      	add	r3, sp, #48	; 0x30
 80544c2:	6921      	ldr	r1, [r4, #16]
 80544c4:	68e0      	ldr	r0, [r4, #12]
 80544c6:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80544ca:	7d23      	ldrb	r3, [r4, #20]
 80544cc:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80544d0:	8ae1      	ldrh	r1, [r4, #22]
 80544d2:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80544d6:	f7ff fb79 	bl	8053bcc <GetTimeOnAir>
 80544da:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80544dc:	ab03      	add	r3, sp, #12
 80544de:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80544e0:	9601      	str	r6, [sp, #4]
 80544e2:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 80544e6:	9300      	str	r3, [sp, #0]
 80544e8:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 80544ec:	aa11      	add	r2, sp, #68	; 0x44
 80544ee:	4629      	mov	r1, r5
 80544f0:	a809      	add	r0, sp, #36	; 0x24
 80544f2:	f000 fc34 	bl	8054d5e <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80544f6:	4604      	mov	r4, r0
 80544f8:	b120      	cbz	r0, 8054504 <RegionAS923NextChannel+0xc4>
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80544fa:	280c      	cmp	r0, #12
 80544fc:	d00d      	beq.n	805451a <RegionAS923NextChannel+0xda>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
    }
    return status;
}
 80544fe:	4620      	mov	r0, r4
 8054500:	b017      	add	sp, #92	; 0x5c
 8054502:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8054504:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 8054508:	3901      	subs	r1, #1
 805450a:	f000 fcc3 	bl	8054e94 <randr>
 805450e:	ab16      	add	r3, sp, #88	; 0x58
 8054510:	4418      	add	r0, r3
 8054512:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8054516:	703b      	strb	r3, [r7, #0]
 8054518:	e7f1      	b.n	80544fe <RegionAS923NextChannel+0xbe>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 805451a:	4b04      	ldr	r3, [pc, #16]	; (805452c <RegionAS923NextChannel+0xec>)
 805451c:	681a      	ldr	r2, [r3, #0]
 805451e:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	; 0xc0
 8054522:	f043 0303 	orr.w	r3, r3, #3
 8054526:	f8a2 30c0 	strh.w	r3, [r2, #192]	; 0xc0
 805452a:	e7e8      	b.n	80544fe <RegionAS923NextChannel+0xbe>
 805452c:	2001a07c 	.word	0x2001a07c
 8054530:	2001a078 	.word	0x2001a078

08054534 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8054534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8054536:	7905      	ldrb	r5, [r0, #4]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8054538:	2d01      	cmp	r5, #1
 805453a:	d94b      	bls.n	80545d4 <RegionAS923ChannelAdd+0xa0>
 805453c:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 805453e:	2d0f      	cmp	r5, #15
 8054540:	d84a      	bhi.n	80545d8 <RegionAS923ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8054542:	6803      	ldr	r3, [r0, #0]
 8054544:	7a18      	ldrb	r0, [r3, #8]
 8054546:	f340 0003 	sbfx	r0, r0, #0, #4
 805454a:	2207      	movs	r2, #7
 805454c:	2100      	movs	r1, #0
 805454e:	b240      	sxtb	r0, r0
 8054550:	f000 f9a5 	bl	805489e <RegionCommonValueInRange>
 8054554:	2800      	cmp	r0, #0
 8054556:	d039      	beq.n	80545cc <RegionAS923ChannelAdd+0x98>
    bool drInvalid = false;
 8054558:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 805455a:	6823      	ldr	r3, [r4, #0]
 805455c:	7a18      	ldrb	r0, [r3, #8]
 805455e:	f340 1003 	sbfx	r0, r0, #4, #4
 8054562:	2207      	movs	r2, #7
 8054564:	2100      	movs	r1, #0
 8054566:	b240      	sxtb	r0, r0
 8054568:	f000 f999 	bl	805489e <RegionCommonValueInRange>
 805456c:	b900      	cbnz	r0, 8054570 <RegionAS923ChannelAdd+0x3c>
    {
        drInvalid = true;
 805456e:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8054570:	6821      	ldr	r1, [r4, #0]
 8054572:	7a0b      	ldrb	r3, [r1, #8]
 8054574:	f343 0203 	sbfx	r2, r3, #0, #4
 8054578:	b252      	sxtb	r2, r2
 805457a:	f343 1303 	sbfx	r3, r3, #4, #4
 805457e:	b25b      	sxtb	r3, r3
 8054580:	429a      	cmp	r2, r3
 8054582:	dd00      	ble.n	8054586 <RegionAS923ChannelAdd+0x52>
    {
        drInvalid = true;
 8054584:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8054586:	6808      	ldr	r0, [r1, #0]
 8054588:	f7ff fb0c 	bl	8053ba4 <VerifyRfFreq>
 805458c:	b300      	cbz	r0, 80545d0 <RegionAS923ChannelAdd+0x9c>
    bool freqInvalid = false;
 805458e:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8054590:	b106      	cbz	r6, 8054594 <RegionAS923ChannelAdd+0x60>
 8054592:	bb1b      	cbnz	r3, 80545dc <RegionAS923ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 8054594:	bb26      	cbnz	r6, 80545e0 <RegionAS923ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 8054596:	bb2b      	cbnz	r3, 80545e4 <RegionAS923ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8054598:	4f13      	ldr	r7, [pc, #76]	; (80545e8 <RegionAS923ChannelAdd+0xb4>)
 805459a:	683b      	ldr	r3, [r7, #0]
 805459c:	006e      	lsls	r6, r5, #1
 805459e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 80545a2:	220c      	movs	r2, #12
 80545a4:	6821      	ldr	r1, [r4, #0]
 80545a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80545aa:	f000 fc80 	bl	8054eae <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 80545ae:	683a      	ldr	r2, [r7, #0]
 80545b0:	442e      	add	r6, r5
 80545b2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80545b6:	2000      	movs	r0, #0
 80545b8:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 80545ba:	2301      	movs	r3, #1
 80545bc:	fa03 f505 	lsl.w	r5, r3, r5
 80545c0:	f8b2 30c0 	ldrh.w	r3, [r2, #192]	; 0xc0
 80545c4:	431d      	orrs	r5, r3
 80545c6:	f8a2 50c0 	strh.w	r5, [r2, #192]	; 0xc0
    return LORAMAC_STATUS_OK;
 80545ca:	e006      	b.n	80545da <RegionAS923ChannelAdd+0xa6>
        drInvalid = true;
 80545cc:	2601      	movs	r6, #1
 80545ce:	e7c4      	b.n	805455a <RegionAS923ChannelAdd+0x26>
            freqInvalid = true;
 80545d0:	2301      	movs	r3, #1
 80545d2:	e7dd      	b.n	8054590 <RegionAS923ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80545d4:	2006      	movs	r0, #6
 80545d6:	e000      	b.n	80545da <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80545d8:	2003      	movs	r0, #3
}
 80545da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80545dc:	2006      	movs	r0, #6
 80545de:	e7fc      	b.n	80545da <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 80545e0:	2005      	movs	r0, #5
 80545e2:	e7fa      	b.n	80545da <RegionAS923ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80545e4:	2004      	movs	r0, #4
 80545e6:	e7f8      	b.n	80545da <RegionAS923ChannelAdd+0xa6>
 80545e8:	2001a07c 	.word	0x2001a07c

080545ec <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
    uint8_t id = channelRemove->ChannelId;
 80545ec:	7801      	ldrb	r1, [r0, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 80545ee:	2901      	cmp	r1, #1
 80545f0:	d910      	bls.n	8054614 <RegionAS923ChannelsRemove+0x28>
{
 80545f2:	b510      	push	{r4, lr}
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 80545f4:	4b08      	ldr	r3, [pc, #32]	; (8054618 <RegionAS923ChannelsRemove+0x2c>)
 80545f6:	6818      	ldr	r0, [r3, #0]
 80545f8:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 80545fc:	009c      	lsls	r4, r3, #2
 80545fe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8054602:	2200      	movs	r2, #0
 8054604:	5102      	str	r2, [r0, r4]
 8054606:	605a      	str	r2, [r3, #4]
 8054608:	609a      	str	r2, [r3, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 805460a:	2210      	movs	r2, #16
 805460c:	30c0      	adds	r0, #192	; 0xc0
 805460e:	f000 f988 	bl	8054922 <RegionCommonChanDisable>
}
 8054612:	bd10      	pop	{r4, pc}
        return false;
 8054614:	2000      	movs	r0, #0
}
 8054616:	4770      	bx	lr
 8054618:	2001a07c 	.word	0x2001a07c

0805461c <RegionAS923ApplyCFList>:
{
 805461c:	b570      	push	{r4, r5, r6, lr}
 805461e:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8054620:	2350      	movs	r3, #80	; 0x50
 8054622:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8054626:	7a03      	ldrb	r3, [r0, #8]
 8054628:	2b10      	cmp	r3, #16
 805462a:	d135      	bne.n	8054698 <RegionAS923ApplyCFList+0x7c>
 805462c:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 805462e:	6843      	ldr	r3, [r0, #4]
 8054630:	7bdd      	ldrb	r5, [r3, #15]
 8054632:	2d00      	cmp	r5, #0
 8054634:	d130      	bne.n	8054698 <RegionAS923ApplyCFList+0x7c>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8054636:	2402      	movs	r4, #2
 8054638:	e01a      	b.n	8054670 <RegionAS923ApplyCFList+0x54>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 805463a:	6872      	ldr	r2, [r6, #4]
 805463c:	5d53      	ldrb	r3, [r2, r5]
 805463e:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8054640:	442a      	add	r2, r5
 8054642:	7851      	ldrb	r1, [r2, #1]
 8054644:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8054648:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 805464a:	7892      	ldrb	r2, [r2, #2]
 805464c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
            newChannel.Frequency *= 100;
 8054650:	2264      	movs	r2, #100	; 0x64
 8054652:	fb02 f303 	mul.w	r3, r2, r3
 8054656:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 8054658:	2300      	movs	r3, #0
 805465a:	9304      	str	r3, [sp, #16]
 805465c:	e011      	b.n	8054682 <RegionAS923ApplyCFList+0x66>
            channelRemove.ChannelId = chanIdx;
 805465e:	f88d 4000 	strb.w	r4, [sp]
            RegionAS923ChannelsRemove( &channelRemove );
 8054662:	4668      	mov	r0, sp
 8054664:	f7ff ffc2 	bl	80545ec <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8054668:	3503      	adds	r5, #3
 805466a:	b2ed      	uxtb	r5, r5
 805466c:	3401      	adds	r4, #1
 805466e:	b2e4      	uxtb	r4, r4
 8054670:	2c0f      	cmp	r4, #15
 8054672:	d811      	bhi.n	8054698 <RegionAS923ApplyCFList+0x7c>
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 8054674:	2c06      	cmp	r4, #6
 8054676:	d9e0      	bls.n	805463a <RegionAS923ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 8054678:	2300      	movs	r3, #0
 805467a:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 805467c:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8054680:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 8054682:	9b03      	ldr	r3, [sp, #12]
 8054684:	2b00      	cmp	r3, #0
 8054686:	d0ea      	beq.n	805465e <RegionAS923ApplyCFList+0x42>
            channelAdd.NewChannel = &newChannel;
 8054688:	ab03      	add	r3, sp, #12
 805468a:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 805468c:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionAS923ChannelAdd( &channelAdd );
 8054690:	a801      	add	r0, sp, #4
 8054692:	f7ff ff4f 	bl	8054534 <RegionAS923ChannelAdd>
 8054696:	e7e7      	b.n	8054668 <RegionAS923ApplyCFList+0x4c>
}
 8054698:	b006      	add	sp, #24
 805469a:	bd70      	pop	{r4, r5, r6, pc}

0805469c <RegionAS923NewChannelReq>:
{
 805469c:	b500      	push	{lr}
 805469e:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 80546a0:	6803      	ldr	r3, [r0, #0]
 80546a2:	681a      	ldr	r2, [r3, #0]
 80546a4:	b952      	cbnz	r2, 80546bc <RegionAS923NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80546a6:	7903      	ldrb	r3, [r0, #4]
 80546a8:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 80546ac:	a801      	add	r0, sp, #4
 80546ae:	f7ff ff9d 	bl	80545ec <RegionAS923ChannelsRemove>
 80546b2:	b1d0      	cbz	r0, 80546ea <RegionAS923NewChannelReq+0x4e>
    uint8_t status = 0x03;
 80546b4:	2003      	movs	r0, #3
}
 80546b6:	b005      	add	sp, #20
 80546b8:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 80546bc:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 80546be:	7903      	ldrb	r3, [r0, #4]
 80546c0:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 80546c4:	a802      	add	r0, sp, #8
 80546c6:	f7ff ff35 	bl	8054534 <RegionAS923ChannelAdd>
 80546ca:	2806      	cmp	r0, #6
 80546cc:	d80b      	bhi.n	80546e6 <RegionAS923NewChannelReq+0x4a>
 80546ce:	e8df f000 	tbb	[pc, r0]
 80546d2:	0a04      	.short	0x0a04
 80546d4:	060e0a0a 	.word	0x060e0a0a
 80546d8:	08          	.byte	0x08
 80546d9:	00          	.byte	0x00
 80546da:	2003      	movs	r0, #3
 80546dc:	e7eb      	b.n	80546b6 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFD;
 80546de:	2001      	movs	r0, #1
                break;
 80546e0:	e7e9      	b.n	80546b6 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 80546e2:	2000      	movs	r0, #0
                break;
 80546e4:	e7e7      	b.n	80546b6 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 80546e6:	2000      	movs	r0, #0
                break;
 80546e8:	e7e5      	b.n	80546b6 <RegionAS923NewChannelReq+0x1a>
            status &= 0xFC;
 80546ea:	2000      	movs	r0, #0
 80546ec:	e7e3      	b.n	80546b6 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFE;
 80546ee:	2002      	movs	r0, #2
 80546f0:	e7e1      	b.n	80546b6 <RegionAS923NewChannelReq+0x1a>
	...

080546f4 <RegionAS923ApplyDrOffset>:
uint8_t RegionAS923ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 80546f4:	b928      	cbnz	r0, 8054702 <RegionAS923ApplyDrOffset+0xe>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 80546f6:	4b05      	ldr	r3, [pc, #20]	; (805470c <RegionAS923ApplyDrOffset+0x18>)
 80546f8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80546fc:	5688      	ldrsb	r0, [r1, r2]
        // Update the minDR for a downlink dwell time configuration of 1
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
    }

    return minDr;
}
 80546fe:	b2c0      	uxtb	r0, r0
 8054700:	4770      	bx	lr
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 8054702:	4b03      	ldr	r3, [pc, #12]	; (8054710 <RegionAS923ApplyDrOffset+0x1c>)
 8054704:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8054708:	5688      	ldrsb	r0, [r1, r2]
 805470a:	e7f8      	b.n	80546fe <RegionAS923ApplyDrOffset+0xa>
 805470c:	0805ab28 	.word	0x0805ab28
 8054710:	0805ab68 	.word	0x0805ab68

08054714 <GetDutyCycle>:
        ( ( ( N ) + ( D ) - 1 ) / ( D ) ) :                                    \
        ( ( N ) / ( D ) )                                                      \
    )

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8054714:	b082      	sub	sp, #8
 8054716:	f10d 0c08 	add.w	ip, sp, #8
 805471a:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 805471e:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 8054720:	b971      	cbnz	r1, 8054740 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8054722:	9b00      	ldr	r3, [sp, #0]
 8054724:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8054728:	d306      	bcc.n	8054738 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 805472a:	f649 22af 	movw	r2, #39599	; 0x9aaf
 805472e:	4293      	cmp	r3, r2
 8054730:	d80a      	bhi.n	8054748 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8054732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8054736:	e000      	b.n	805473a <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8054738:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 805473a:	4298      	cmp	r0, r3
 805473c:	bf38      	it	cc
 805473e:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8054740:	b900      	cbnz	r0, 8054744 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 8054742:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 8054744:	b002      	add	sp, #8
 8054746:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8054748:	f242 7310 	movw	r3, #10000	; 0x2710
 805474c:	e7f5      	b.n	805473a <GetDutyCycle+0x26>

0805474e <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 805474e:	b410      	push	{r4}
 8054750:	4604      	mov	r4, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 8054752:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 8054754:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 8054756:	e001      	b.n	805475c <CountChannels+0xe>
 8054758:	3301      	adds	r3, #1
 805475a:	b2db      	uxtb	r3, r3
 805475c:	428b      	cmp	r3, r1
 805475e:	d206      	bcs.n	805476e <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8054760:	2201      	movs	r2, #1
 8054762:	409a      	lsls	r2, r3
 8054764:	43a2      	bics	r2, r4
 8054766:	d1f7      	bne.n	8054758 <CountChannels+0xa>
        {
            nbActiveBits++;
 8054768:	3001      	adds	r0, #1
 805476a:	b2c0      	uxtb	r0, r0
 805476c:	e7f4      	b.n	8054758 <CountChannels+0xa>
        }
    }
    return nbActiveBits;
}
 805476e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8054772:	4770      	bx	lr

08054774 <SetMaxTimeCredits>:
{
 8054774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8054778:	b089      	sub	sp, #36	; 0x24
 805477a:	4604      	mov	r4, r0
 805477c:	460e      	mov	r6, r1
 805477e:	ad02      	add	r5, sp, #8
 8054780:	e885 000c 	stmia.w	r5, {r2, r3}
 8054784:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8054788:	f89d 8044 	ldrb.w	r8, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 805478c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8054790:	f7ee fb47 	bl	8042e22 <SysTimeToMs>
 8054794:	4681      	mov	r9, r0
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8054796:	e895 000c 	ldmia.w	r5, {r2, r3}
 805479a:	4631      	mov	r1, r6
 805479c:	4620      	mov	r0, r4
 805479e:	f7ff ffb9 	bl	8054714 <GetDutyCycle>
 80547a2:	4605      	mov	r5, r0
    if( joined == false )
 80547a4:	2e00      	cmp	r6, #0
 80547a6:	d149      	bne.n	805483c <SetMaxTimeCredits+0xc8>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80547a8:	2864      	cmp	r0, #100	; 0x64
 80547aa:	d023      	beq.n	80547f4 <SetMaxTimeCredits+0x80>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80547ac:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80547b0:	d024      	beq.n	80547fc <SetMaxTimeCredits+0x88>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80547b2:	4e25      	ldr	r6, [pc, #148]	; (8054848 <SetMaxTimeCredits+0xd4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80547b4:	68a1      	ldr	r1, [r4, #8]
 80547b6:	a806      	add	r0, sp, #24
 80547b8:	f7ee fb52 	bl	8042e60 <SysTimeFromMs>
 80547bc:	9b07      	ldr	r3, [sp, #28]
 80547be:	9300      	str	r3, [sp, #0]
 80547c0:	9b06      	ldr	r3, [sp, #24]
 80547c2:	9a03      	ldr	r2, [sp, #12]
 80547c4:	9902      	ldr	r1, [sp, #8]
 80547c6:	a804      	add	r0, sp, #16
 80547c8:	f7ee fabf 	bl	8042d4a <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80547cc:	b917      	cbnz	r7, 80547d4 <SetMaxTimeCredits+0x60>
 80547ce:	f1b8 0f00 	cmp.w	r8, #0
 80547d2:	d002      	beq.n	80547da <SetMaxTimeCredits+0x66>
            ( band->MaxTimeCredits != maxCredits ) ||
 80547d4:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 80547d6:	42b3      	cmp	r3, r6
 80547d8:	d014      	beq.n	8054804 <SetMaxTimeCredits+0x90>
            band->TimeCredits = maxCredits;
 80547da:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80547dc:	9b02      	ldr	r3, [sp, #8]
 80547de:	4a1b      	ldr	r2, [pc, #108]	; (805484c <SetMaxTimeCredits+0xd8>)
 80547e0:	4293      	cmp	r3, r2
 80547e2:	d814      	bhi.n	805480e <SetMaxTimeCredits+0x9a>
    if( band->LastBandUpdateTime == 0 )
 80547e4:	6863      	ldr	r3, [r4, #4]
 80547e6:	b903      	cbnz	r3, 80547ea <SetMaxTimeCredits+0x76>
        band->TimeCredits = maxCredits;
 80547e8:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 80547ea:	6126      	str	r6, [r4, #16]
}
 80547ec:	4628      	mov	r0, r5
 80547ee:	b009      	add	sp, #36	; 0x24
 80547f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 80547f4:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80547f8:	4e15      	ldr	r6, [pc, #84]	; (8054850 <SetMaxTimeCredits+0xdc>)
 80547fa:	e7db      	b.n	80547b4 <SetMaxTimeCredits+0x40>
            band->LastMaxCreditAssignTime = elapsedTime;
 80547fc:	f8c4 9008 	str.w	r9, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8054800:	4e14      	ldr	r6, [pc, #80]	; (8054854 <SetMaxTimeCredits+0xe0>)
 8054802:	e7d7      	b.n	80547b4 <SetMaxTimeCredits+0x40>
            ( band->MaxTimeCredits != maxCredits ) ||
 8054804:	9a04      	ldr	r2, [sp, #16]
 8054806:	4b14      	ldr	r3, [pc, #80]	; (8054858 <SetMaxTimeCredits+0xe4>)
 8054808:	429a      	cmp	r2, r3
 805480a:	d9eb      	bls.n	80547e4 <SetMaxTimeCredits+0x70>
 805480c:	e7e5      	b.n	80547da <SetMaxTimeCredits+0x66>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 805480e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8054812:	3b30      	subs	r3, #48	; 0x30
 8054814:	4a11      	ldr	r2, [pc, #68]	; (805485c <SetMaxTimeCredits+0xe8>)
 8054816:	fba2 2303 	umull	r2, r3, r2, r3
 805481a:	0c1b      	lsrs	r3, r3, #16
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 805481c:	4a10      	ldr	r2, [pc, #64]	; (8054860 <SetMaxTimeCredits+0xec>)
 805481e:	fb02 f303 	mul.w	r3, r2, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8054822:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8054826:	3330      	adds	r3, #48	; 0x30
 8054828:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 805482a:	2300      	movs	r3, #0
 805482c:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8054830:	9905      	ldr	r1, [sp, #20]
 8054832:	9804      	ldr	r0, [sp, #16]
 8054834:	f7ee faf5 	bl	8042e22 <SysTimeToMs>
 8054838:	60a0      	str	r0, [r4, #8]
 805483a:	e7d3      	b.n	80547e4 <SetMaxTimeCredits+0x70>
        if( dutyCycleEnabled == false )
 805483c:	b917      	cbnz	r7, 8054844 <SetMaxTimeCredits+0xd0>
            band->TimeCredits = maxCredits;
 805483e:	4e04      	ldr	r6, [pc, #16]	; (8054850 <SetMaxTimeCredits+0xdc>)
 8054840:	60e6      	str	r6, [r4, #12]
 8054842:	e7cf      	b.n	80547e4 <SetMaxTimeCredits+0x70>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8054844:	4e02      	ldr	r6, [pc, #8]	; (8054850 <SetMaxTimeCredits+0xdc>)
 8054846:	e7cd      	b.n	80547e4 <SetMaxTimeCredits+0x70>
 8054848:	02932e00 	.word	0x02932e00
 805484c:	0001ec2f 	.word	0x0001ec2f
 8054850:	001b7740 	.word	0x001b7740
 8054854:	0112a880 	.word	0x0112a880
 8054858:	0001517f 	.word	0x0001517f
 805485c:	c22e4507 	.word	0xc22e4507
 8054860:	00015180 	.word	0x00015180

08054864 <UpdateTimeCredits>:
{
 8054864:	b570      	push	{r4, r5, r6, lr}
 8054866:	b082      	sub	sp, #8
 8054868:	4604      	mov	r4, r0
 805486a:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 805486c:	9301      	str	r3, [sp, #4]
 805486e:	9200      	str	r2, [sp, #0]
 8054870:	ab06      	add	r3, sp, #24
 8054872:	cb0c      	ldmia	r3, {r2, r3}
 8054874:	f7ff ff7e 	bl	8054774 <SetMaxTimeCredits>
 8054878:	4605      	mov	r5, r0
    if( joined == true )
 805487a:	b94e      	cbnz	r6, 8054890 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 805487c:	68e2      	ldr	r2, [r4, #12]
 805487e:	6923      	ldr	r3, [r4, #16]
 8054880:	429a      	cmp	r2, r3
 8054882:	d900      	bls.n	8054886 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 8054884:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 8054886:	9b08      	ldr	r3, [sp, #32]
 8054888:	6063      	str	r3, [r4, #4]
}
 805488a:	4628      	mov	r0, r5
 805488c:	b002      	add	sp, #8
 805488e:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8054890:	6860      	ldr	r0, [r4, #4]
 8054892:	f7ee fcb8 	bl	8043206 <TimerGetElapsedTime>
 8054896:	68e3      	ldr	r3, [r4, #12]
 8054898:	4403      	add	r3, r0
 805489a:	60e3      	str	r3, [r4, #12]
 805489c:	e7ee      	b.n	805487c <UpdateTimeCredits+0x18>

0805489e <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 805489e:	4288      	cmp	r0, r1
 80548a0:	db03      	blt.n	80548aa <RegionCommonValueInRange+0xc>
 80548a2:	4290      	cmp	r0, r2
 80548a4:	dd03      	ble.n	80548ae <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 80548a6:	2000      	movs	r0, #0
 80548a8:	4770      	bx	lr
 80548aa:	2000      	movs	r0, #0
 80548ac:	4770      	bx	lr
        return 1;
 80548ae:	2001      	movs	r0, #1
}
 80548b0:	4770      	bx	lr

080548b2 <RegionCommonChanVerifyDr>:
{
 80548b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80548b6:	4682      	mov	sl, r0
 80548b8:	460e      	mov	r6, r1
 80548ba:	4690      	mov	r8, r2
 80548bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 80548c0:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 80548c4:	4619      	mov	r1, r3
 80548c6:	4640      	mov	r0, r8
 80548c8:	f7ff ffe9 	bl	805489e <RegionCommonValueInRange>
 80548cc:	b338      	cbz	r0, 805491e <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80548ce:	2500      	movs	r5, #0
 80548d0:	462f      	mov	r7, r5
 80548d2:	e01e      	b.n	8054912 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 80548d4:	3401      	adds	r4, #1
 80548d6:	b2e4      	uxtb	r4, r4
 80548d8:	2c0f      	cmp	r4, #15
 80548da:	d816      	bhi.n	805490a <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 80548dc:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 80548e0:	4123      	asrs	r3, r4
 80548e2:	f013 0f01 	tst.w	r3, #1
 80548e6:	d0f5      	beq.n	80548d4 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80548e8:	193b      	adds	r3, r7, r4
 80548ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80548ee:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80548f2:	7a19      	ldrb	r1, [r3, #8]
 80548f4:	090a      	lsrs	r2, r1, #4
 80548f6:	f001 010f 	and.w	r1, r1, #15
 80548fa:	4640      	mov	r0, r8
 80548fc:	f7ff ffcf 	bl	805489e <RegionCommonValueInRange>
 8054900:	2801      	cmp	r0, #1
 8054902:	d1e7      	bne.n	80548d4 <RegionCommonChanVerifyDr+0x22>
                    return true;
 8054904:	2001      	movs	r0, #1
}
 8054906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 805490a:	3710      	adds	r7, #16
 805490c:	b2ff      	uxtb	r7, r7
 805490e:	3501      	adds	r5, #1
 8054910:	b2ed      	uxtb	r5, r5
 8054912:	4557      	cmp	r7, sl
 8054914:	d201      	bcs.n	805491a <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 8054916:	2400      	movs	r4, #0
 8054918:	e7de      	b.n	80548d8 <RegionCommonChanVerifyDr+0x26>
    return false;
 805491a:	2000      	movs	r0, #0
 805491c:	e7f3      	b.n	8054906 <RegionCommonChanVerifyDr+0x54>
        return false;
 805491e:	2000      	movs	r0, #0
 8054920:	e7f1      	b.n	8054906 <RegionCommonChanVerifyDr+0x54>

08054922 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8054922:	0913      	lsrs	r3, r2, #4
 8054924:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 8054928:	d312      	bcc.n	8054950 <RegionCommonChanDisable+0x2e>
{
 805492a:	b410      	push	{r4}
 805492c:	090c      	lsrs	r4, r1, #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 805492e:	4291      	cmp	r1, r2
 8054930:	d210      	bcs.n	8054954 <RegionCommonChanDisable+0x32>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8054932:	f001 010f 	and.w	r1, r1, #15
 8054936:	2301      	movs	r3, #1
 8054938:	fa03 f101 	lsl.w	r1, r3, r1
 805493c:	f830 2014 	ldrh.w	r2, [r0, r4, lsl #1]
 8054940:	ea22 0101 	bic.w	r1, r2, r1
 8054944:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]

    return true;
 8054948:	4618      	mov	r0, r3
}
 805494a:	f85d 4b04 	ldr.w	r4, [sp], #4
 805494e:	4770      	bx	lr
        return false;
 8054950:	2000      	movs	r0, #0
}
 8054952:	4770      	bx	lr
        return false;
 8054954:	2000      	movs	r0, #0
 8054956:	e7f8      	b.n	805494a <RegionCommonChanDisable+0x28>

08054958 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8054958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 805495a:	b188      	cbz	r0, 8054980 <RegionCommonCountChannels+0x28>
 805495c:	460c      	mov	r4, r1
 805495e:	4616      	mov	r6, r2
 8054960:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 8054962:	2500      	movs	r5, #0
 8054964:	e008      	b.n	8054978 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8054966:	2110      	movs	r1, #16
 8054968:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 805496c:	f7ff feef 	bl	805474e <CountChannels>
 8054970:	4405      	add	r5, r0
 8054972:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8054974:	3401      	adds	r4, #1
 8054976:	b2e4      	uxtb	r4, r4
 8054978:	42b4      	cmp	r4, r6
 805497a:	d3f4      	bcc.n	8054966 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 805497c:	4628      	mov	r0, r5
 805497e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8054980:	2500      	movs	r5, #0
 8054982:	e7fb      	b.n	805497c <RegionCommonCountChannels+0x24>

08054984 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8054984:	b178      	cbz	r0, 80549a6 <RegionCommonChanMaskCopy+0x22>
{
 8054986:	b410      	push	{r4}
 8054988:	4604      	mov	r4, r0
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 805498a:	b149      	cbz	r1, 80549a0 <RegionCommonChanMaskCopy+0x1c>
    {
        for( uint8_t i = 0; i < len; i++ )
 805498c:	2300      	movs	r3, #0
 805498e:	4293      	cmp	r3, r2
 8054990:	d206      	bcs.n	80549a0 <RegionCommonChanMaskCopy+0x1c>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8054992:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 8054996:	f824 0013 	strh.w	r0, [r4, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 805499a:	3301      	adds	r3, #1
 805499c:	b2db      	uxtb	r3, r3
 805499e:	e7f6      	b.n	805498e <RegionCommonChanMaskCopy+0xa>
        }
    }
}
 80549a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80549a4:	4770      	bx	lr
 80549a6:	4770      	bx	lr

080549a8 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 80549a8:	b082      	sub	sp, #8
 80549aa:	b538      	push	{r3, r4, r5, lr}
 80549ac:	4605      	mov	r5, r0
 80549ae:	460c      	mov	r4, r1
 80549b0:	4611      	mov	r1, r2
 80549b2:	aa04      	add	r2, sp, #16
 80549b4:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80549b8:	ca0c      	ldmia	r2, {r2, r3}
 80549ba:	f7ff feab 	bl	8054714 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 80549be:	68eb      	ldr	r3, [r5, #12]
 80549c0:	fb04 f100 	mul.w	r1, r4, r0
 80549c4:	428b      	cmp	r3, r1
 80549c6:	d905      	bls.n	80549d4 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 80549c8:	1a59      	subs	r1, r3, r1
 80549ca:	60e9      	str	r1, [r5, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 80549cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80549d0:	b002      	add	sp, #8
 80549d2:	4770      	bx	lr
        band->TimeCredits = 0;
 80549d4:	2300      	movs	r3, #0
 80549d6:	60eb      	str	r3, [r5, #12]
}
 80549d8:	e7f8      	b.n	80549cc <RegionCommonSetBandTxDone+0x24>
	...

080549dc <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 80549dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80549e0:	b089      	sub	sp, #36	; 0x24
 80549e2:	4607      	mov	r7, r0
 80549e4:	468b      	mov	fp, r1
 80549e6:	4691      	mov	r9, r2
 80549e8:	4698      	mov	r8, r3
 80549ea:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80549ee:	f7ee fc04 	bl	80431fa <TimerGetCurrentTime>
 80549f2:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 80549f4:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 80549f6:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80549f8:	f04f 33ff 	mov.w	r3, #4294967295
 80549fc:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 80549fe:	e005      	b.n	8054a0c <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 8054a00:	2301      	movs	r3, #1
 8054a02:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8054a04:	441e      	add	r6, r3
 8054a06:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 8054a08:	3401      	adds	r4, #1
 8054a0a:	b2e4      	uxtb	r4, r4
 8054a0c:	454c      	cmp	r4, r9
 8054a0e:	d25b      	bcs.n	8054ac8 <RegionCommonUpdateBandTimeOff+0xec>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8054a10:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8054a14:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8054a18:	9b04      	ldr	r3, [sp, #16]
 8054a1a:	9302      	str	r3, [sp, #8]
 8054a1c:	9914      	ldr	r1, [sp, #80]	; 0x50
 8054a1e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8054a20:	e88d 0003 	stmia.w	sp, {r0, r1}
 8054a24:	4653      	mov	r3, sl
 8054a26:	4642      	mov	r2, r8
 8054a28:	4639      	mov	r1, r7
 8054a2a:	4628      	mov	r0, r5
 8054a2c:	f7ff ff1a 	bl	8054864 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 8054a30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8054a32:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8054a36:	68ea      	ldr	r2, [r5, #12]
 8054a38:	429a      	cmp	r2, r3
 8054a3a:	d8e1      	bhi.n	8054a00 <RegionCommonUpdateBandTimeOff+0x24>
 8054a3c:	f1b8 0f00 	cmp.w	r8, #0
 8054a40:	d101      	bne.n	8054a46 <RegionCommonUpdateBandTimeOff+0x6a>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8054a42:	2f00      	cmp	r7, #0
 8054a44:	d1dc      	bne.n	8054a00 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8054a46:	2100      	movs	r1, #0
 8054a48:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8054a4a:	6929      	ldr	r1, [r5, #16]
 8054a4c:	4299      	cmp	r1, r3
 8054a4e:	d907      	bls.n	8054a60 <RegionCommonUpdateBandTimeOff+0x84>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8054a50:	1a9b      	subs	r3, r3, r2
 8054a52:	9a05      	ldr	r2, [sp, #20]
 8054a54:	429a      	cmp	r2, r3
 8054a56:	bf28      	it	cs
 8054a58:	461a      	movcs	r2, r3
 8054a5a:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8054a5c:	3601      	adds	r6, #1
 8054a5e:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8054a60:	2f00      	cmp	r7, #0
 8054a62:	d1d1      	bne.n	8054a08 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 8054a64:	2300      	movs	r3, #0
 8054a66:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8054a6a:	2864      	cmp	r0, #100	; 0x64
 8054a6c:	d024      	beq.n	8054ab8 <RegionCommonUpdateBandTimeOff+0xdc>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8054a6e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8054a72:	d025      	beq.n	8054ac0 <RegionCommonUpdateBandTimeOff+0xe4>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8054a74:	4b19      	ldr	r3, [pc, #100]	; (8054adc <RegionCommonUpdateBandTimeOff+0x100>)
 8054a76:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8054a78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8054a7a:	4a18      	ldr	r2, [pc, #96]	; (8054adc <RegionCommonUpdateBandTimeOff+0x100>)
 8054a7c:	4293      	cmp	r3, r2
 8054a7e:	d90c      	bls.n	8054a9a <RegionCommonUpdateBandTimeOff+0xbe>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8054a80:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8054a84:	3b30      	subs	r3, #48	; 0x30
 8054a86:	4a16      	ldr	r2, [pc, #88]	; (8054ae0 <RegionCommonUpdateBandTimeOff+0x104>)
 8054a88:	fba2 2303 	umull	r2, r3, r2, r3
 8054a8c:	0c1b      	lsrs	r3, r3, #16
 8054a8e:	4a15      	ldr	r2, [pc, #84]	; (8054ae4 <RegionCommonUpdateBandTimeOff+0x108>)
 8054a90:	fb03 2202 	mla	r2, r3, r2, r2
 8054a94:	9b06      	ldr	r3, [sp, #24]
 8054a96:	441a      	add	r2, r3
 8054a98:	9206      	str	r2, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8054a9a:	ad06      	add	r5, sp, #24
 8054a9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8054a9e:	9300      	str	r3, [sp, #0]
 8054aa0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8054aa2:	e895 0006 	ldmia.w	r5, {r1, r2}
 8054aa6:	4628      	mov	r0, r5
 8054aa8:	f7ee f94f 	bl	8042d4a <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8054aac:	e895 0003 	ldmia.w	r5, {r0, r1}
 8054ab0:	f7ee f9b7 	bl	8042e22 <SysTimeToMs>
 8054ab4:	9005      	str	r0, [sp, #20]
 8054ab6:	e7a7      	b.n	8054a08 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8054ab8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8054abc:	9306      	str	r3, [sp, #24]
 8054abe:	e7db      	b.n	8054a78 <RegionCommonUpdateBandTimeOff+0x9c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8054ac0:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8054ac4:	9306      	str	r3, [sp, #24]
 8054ac6:	e7d7      	b.n	8054a78 <RegionCommonUpdateBandTimeOff+0x9c>
            }
        }
    }


    if( validBands == 0 )
 8054ac8:	b11e      	cbz	r6, 8054ad2 <RegionCommonUpdateBandTimeOff+0xf6>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 8054aca:	9805      	ldr	r0, [sp, #20]
 8054acc:	b009      	add	sp, #36	; 0x24
 8054ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 8054ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8054ad6:	9305      	str	r3, [sp, #20]
 8054ad8:	e7f7      	b.n	8054aca <RegionCommonUpdateBandTimeOff+0xee>
 8054ada:	bf00      	nop
 8054adc:	0001ec30 	.word	0x0001ec30
 8054ae0:	c22e4507 	.word	0xc22e4507
 8054ae4:	00015180 	.word	0x00015180

08054ae8 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8054ae8:	7803      	ldrb	r3, [r0, #0]
 8054aea:	2b03      	cmp	r3, #3
 8054aec:	d001      	beq.n	8054af2 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 8054aee:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 8054af0:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 8054af2:	7843      	ldrb	r3, [r0, #1]
 8054af4:	f990 2001 	ldrsb.w	r2, [r0, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8054af8:	f002 020f 	and.w	r2, r2, #15
 8054afc:	708a      	strb	r2, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8054afe:	091b      	lsrs	r3, r3, #4
 8054b00:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8054b02:	7883      	ldrb	r3, [r0, #2]
 8054b04:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8054b06:	78c2      	ldrb	r2, [r0, #3]
 8054b08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8054b0c:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 8054b0e:	7903      	ldrb	r3, [r0, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8054b10:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8054b14:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 8054b16:	f003 030f 	and.w	r3, r3, #15
 8054b1a:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 8054b1c:	2005      	movs	r0, #5
 8054b1e:	4770      	bx	lr

08054b20 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8054b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8054b24:	b085      	sub	sp, #20
 8054b26:	4604      	mov	r4, r0
 8054b28:	4688      	mov	r8, r1
 8054b2a:	4617      	mov	r7, r2
 8054b2c:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 8054b2e:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 8054b30:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 8054b34:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 8054b38:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8054b3c:	7943      	ldrb	r3, [r0, #5]
 8054b3e:	b92b      	cbnz	r3, 8054b4c <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8054b40:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 8054b44:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 8054b48:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 8054b4c:	b355      	cbz	r5, 8054ba4 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8054b4e:	f1ba 0f0f 	cmp.w	sl, #15
 8054b52:	d114      	bne.n	8054b7e <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8054b54:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 8054b58:	f1b9 0f0f 	cmp.w	r9, #15
 8054b5c:	d020      	beq.n	8054ba0 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8054b5e:	f994 301d 	ldrsb.w	r3, [r4, #29]
 8054b62:	9303      	str	r3, [sp, #12]
 8054b64:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8054b68:	461c      	mov	r4, r3
 8054b6a:	4619      	mov	r1, r3
 8054b6c:	4648      	mov	r0, r9
 8054b6e:	f7ff fe96 	bl	805489e <RegionCommonValueInRange>
 8054b72:	b9b8      	cbnz	r0, 8054ba4 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8054b74:	454c      	cmp	r4, r9
 8054b76:	dc21      	bgt.n	8054bbc <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8054b78:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 8054b7c:	e012      	b.n	8054ba4 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8054b7e:	69a3      	ldr	r3, [r4, #24]
 8054b80:	9301      	str	r3, [sp, #4]
 8054b82:	f994 3015 	ldrsb.w	r3, [r4, #21]
 8054b86:	9300      	str	r3, [sp, #0]
 8054b88:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8054b8c:	4652      	mov	r2, sl
 8054b8e:	6921      	ldr	r1, [r4, #16]
 8054b90:	7b20      	ldrb	r0, [r4, #12]
 8054b92:	f7ff fe8e 	bl	80548b2 <RegionCommonChanVerifyDr>
 8054b96:	2800      	cmp	r0, #0
 8054b98:	d1de      	bne.n	8054b58 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 8054b9a:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8054b9e:	e7db      	b.n	8054b58 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 8054ba0:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8054ba4:	2d07      	cmp	r5, #7
 8054ba6:	d00c      	beq.n	8054bc2 <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 8054ba8:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 8054bac:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 8054bb0:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 8054bb4:	4628      	mov	r0, r5
 8054bb6:	b005      	add	sp, #20
 8054bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 8054bbc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8054bc0:	e7f0      	b.n	8054ba4 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 8054bc2:	f1bb 0f00 	cmp.w	fp, #0
 8054bc6:	d1ef      	bne.n	8054ba8 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 8054bc8:	f04f 0b01 	mov.w	fp, #1
 8054bcc:	e7ec      	b.n	8054ba8 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

08054bd0 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8054bd0:	4b02      	ldr	r3, [pc, #8]	; (8054bdc <RegionCommonComputeSymbolTimeLoRa+0xc>)
 8054bd2:	fa03 f000 	lsl.w	r0, r3, r0
}
 8054bd6:	fbb0 f0f1 	udiv	r0, r0, r1
 8054bda:	4770      	bx	lr
 8054bdc:	000f4240 	.word	0x000f4240

08054be0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 8054be0:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8054be4:	fbb3 f0f0 	udiv	r0, r3, r0
 8054be8:	4770      	bx	lr
	...

08054bec <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8054bec:	b430      	push	{r4, r5}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8054bee:	1f0c      	subs	r4, r1, #4
 8054bf0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8054bf4:	fb05 f202 	mul.w	r2, r5, r2
 8054bf8:	fb00 2204 	mla	r2, r0, r4, r2
 8054bfc:	0052      	lsls	r2, r2, #1
 8054bfe:	d021      	beq.n	8054c44 <RegionCommonComputeRxWindowParameters+0x58>
 8054c00:	4402      	add	r2, r0
 8054c02:	3a01      	subs	r2, #1
 8054c04:	fbb2 f2f0 	udiv	r2, r2, r0
 8054c08:	428a      	cmp	r2, r1
 8054c0a:	bf38      	it	cc
 8054c0c:	460a      	movcc	r2, r1
 8054c0e:	9902      	ldr	r1, [sp, #8]
 8054c10:	600a      	str	r2, [r1, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8054c12:	0081      	lsls	r1, r0, #2
 8054c14:	fb00 f002 	mul.w	r0, r0, r2
 8054c18:	b1b8      	cbz	r0, 8054c4a <RegionCommonComputeRxWindowParameters+0x5e>
 8054c1a:	3001      	adds	r0, #1
 8054c1c:	0840      	lsrs	r0, r0, #1
 8054c1e:	1a08      	subs	r0, r1, r0
 8054c20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8054c24:	fb02 0313 	mls	r3, r2, r3, r0
 8054c28:	2b00      	cmp	r3, #0
 8054c2a:	dd10      	ble.n	8054c4e <RegionCommonComputeRxWindowParameters+0x62>
 8054c2c:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8054c30:	480a      	ldr	r0, [pc, #40]	; (8054c5c <RegionCommonComputeRxWindowParameters+0x70>)
 8054c32:	fb80 2003 	smull	r2, r0, r0, r3
 8054c36:	17db      	asrs	r3, r3, #31
 8054c38:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8054c3c:	9a03      	ldr	r2, [sp, #12]
 8054c3e:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8054c40:	bc30      	pop	{r4, r5}
 8054c42:	4770      	bx	lr
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8054c44:	fbb2 f2f0 	udiv	r2, r2, r0
 8054c48:	e7de      	b.n	8054c08 <RegionCommonComputeRxWindowParameters+0x1c>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8054c4a:	0840      	lsrs	r0, r0, #1
 8054c4c:	e7e7      	b.n	8054c1e <RegionCommonComputeRxWindowParameters+0x32>
 8054c4e:	4803      	ldr	r0, [pc, #12]	; (8054c5c <RegionCommonComputeRxWindowParameters+0x70>)
 8054c50:	fb80 2003 	smull	r2, r0, r0, r3
 8054c54:	17db      	asrs	r3, r3, #31
 8054c56:	ebc3 13a0 	rsb	r3, r3, r0, asr #6
 8054c5a:	e7ef      	b.n	8054c3c <RegionCommonComputeRxWindowParameters+0x50>
 8054c5c:	10624dd3 	.word	0x10624dd3

08054c60 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8054c60:	b508      	push	{r3, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8054c62:	0040      	lsls	r0, r0, #1
 8054c64:	ee07 0a90 	vmov	s15, r0
 8054c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8054c6c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8054c70:	ee70 7a60 	vsub.f32	s15, s0, s1
 8054c74:	ee17 0a90 	vmov	r0, s15
 8054c78:	f7eb fc4a 	bl	8040510 <__aeabi_f2d>
 8054c7c:	ec41 0b10 	vmov	d0, r0, r1
 8054c80:	f004 feae 	bl	80599e0 <floor>
 8054c84:	ec51 0b10 	vmov	r0, r1, d0
 8054c88:	f7eb ff4a 	bl	8040b20 <__aeabi_d2iz>

    return phyTxPower;
}
 8054c8c:	b240      	sxtb	r0, r0
 8054c8e:	bd08      	pop	{r3, pc}

08054c90 <RegionCommonCountNbOfEnabledChannels>:
    Radio.Rx( rxBeaconSetupParams->RxTime );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8054c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8054c94:	b083      	sub	sp, #12
 8054c96:	4605      	mov	r5, r0
 8054c98:	468b      	mov	fp, r1
 8054c9a:	9200      	str	r2, [sp, #0]
 8054c9c:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8054c9e:	2600      	movs	r6, #0
 8054ca0:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 8054ca2:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 8054ca4:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8054ca6:	e04a      	b.n	8054d3e <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8054ca8:	7a3a      	ldrb	r2, [r7, #8]
 8054caa:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8054cae:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8054cb2:	b252      	sxtb	r2, r2
 8054cb4:	b249      	sxtb	r1, r1
 8054cb6:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8054cba:	f7ff fdf0 	bl	805489e <RegionCommonValueInRange>
 8054cbe:	b178      	cbz	r0, 8054ce0 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8054cc0:	68ea      	ldr	r2, [r5, #12]
 8054cc2:	7a7b      	ldrb	r3, [r7, #9]
 8054cc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8054cc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8054ccc:	7d1b      	ldrb	r3, [r3, #20]
 8054cce:	b35b      	cbz	r3, 8054d28 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 8054cd0:	f109 0301 	add.w	r3, r9, #1
 8054cd4:	eb08 0204 	add.w	r2, r8, r4
 8054cd8:	f80b 2009 	strb.w	r2, [fp, r9]
 8054cdc:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 8054ce0:	3401      	adds	r4, #1
 8054ce2:	b2e4      	uxtb	r4, r4
 8054ce4:	2c0f      	cmp	r4, #15
 8054ce6:	d824      	bhi.n	8054d32 <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8054ce8:	686b      	ldr	r3, [r5, #4]
 8054cea:	0072      	lsls	r2, r6, #1
 8054cec:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8054cf0:	4123      	asrs	r3, r4
 8054cf2:	f013 0f01 	tst.w	r3, #1
 8054cf6:	d0f3      	beq.n	8054ce0 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8054cf8:	68a8      	ldr	r0, [r5, #8]
 8054cfa:	eb08 0304 	add.w	r3, r8, r4
 8054cfe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8054d02:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 8054d06:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8054d0a:	2b00      	cmp	r3, #0
 8054d0c:	d0e8      	beq.n	8054ce0 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8054d0e:	782b      	ldrb	r3, [r5, #0]
 8054d10:	2b00      	cmp	r3, #0
 8054d12:	d1c9      	bne.n	8054ca8 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8054d14:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8054d16:	2b00      	cmp	r3, #0
 8054d18:	d0c6      	beq.n	8054ca8 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8054d1a:	5a9b      	ldrh	r3, [r3, r2]
 8054d1c:	fa43 f104 	asr.w	r1, r3, r4
 8054d20:	f011 0f01 	tst.w	r1, #1
 8054d24:	d1c0      	bne.n	8054ca8 <RegionCommonCountNbOfEnabledChannels+0x18>
 8054d26:	e7db      	b.n	8054ce0 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 8054d28:	f10a 0a01 	add.w	sl, sl, #1
 8054d2c:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 8054d30:	e7d6      	b.n	8054ce0 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8054d32:	f108 0810 	add.w	r8, r8, #16
 8054d36:	fa5f f888 	uxtb.w	r8, r8
 8054d3a:	3601      	adds	r6, #1
 8054d3c:	b2f6      	uxtb	r6, r6
 8054d3e:	fa1f f388 	uxth.w	r3, r8
 8054d42:	8a2a      	ldrh	r2, [r5, #16]
 8054d44:	4293      	cmp	r3, r2
 8054d46:	d201      	bcs.n	8054d4c <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 8054d48:	2400      	movs	r4, #0
 8054d4a:	e7cb      	b.n	8054ce4 <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8054d4c:	9b00      	ldr	r3, [sp, #0]
 8054d4e:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8054d52:	9b01      	ldr	r3, [sp, #4]
 8054d54:	f883 a000 	strb.w	sl, [r3]
}
 8054d58:	b003      	add	sp, #12
 8054d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08054d5e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8054d5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8054d62:	b085      	sub	sp, #20
 8054d64:	4604      	mov	r4, r0
 8054d66:	460f      	mov	r7, r1
 8054d68:	4616      	mov	r6, r2
 8054d6a:	461d      	mov	r5, r3
 8054d6c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8054d70:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8054d74:	6840      	ldr	r0, [r0, #4]
 8054d76:	f7ee fa46 	bl	8043206 <TimerGetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8054d7a:	6823      	ldr	r3, [r4, #0]
 8054d7c:	1a1b      	subs	r3, r3, r0
 8054d7e:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 8054d82:	2301      	movs	r3, #1
 8054d84:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 8054d88:	2300      	movs	r3, #0
 8054d8a:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8054d8c:	6863      	ldr	r3, [r4, #4]
 8054d8e:	b113      	cbz	r3, 8054d96 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8054d90:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8054d92:	4283      	cmp	r3, r0
 8054d94:	d81c      	bhi.n	8054dd0 <RegionCommonIdentifyChannels+0x72>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8054d96:	2300      	movs	r3, #0
 8054d98:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8054d9a:	69e3      	ldr	r3, [r4, #28]
 8054d9c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8054da0:	781f      	ldrb	r7, [r3, #0]
 8054da2:	69a3      	ldr	r3, [r4, #24]
 8054da4:	9303      	str	r3, [sp, #12]
 8054da6:	ab01      	add	r3, sp, #4
 8054da8:	6921      	ldr	r1, [r4, #16]
 8054daa:	68e0      	ldr	r0, [r4, #12]
 8054dac:	e883 0003 	stmia.w	r3, {r0, r1}
 8054db0:	7d23      	ldrb	r3, [r4, #20]
 8054db2:	9300      	str	r3, [sp, #0]
 8054db4:	7a23      	ldrb	r3, [r4, #8]
 8054db6:	7a62      	ldrb	r2, [r4, #9]
 8054db8:	4661      	mov	r1, ip
 8054dba:	4638      	mov	r0, r7
 8054dbc:	f7ff fe0e 	bl	80549dc <RegionCommonUpdateBandTimeOff>
 8054dc0:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8054dc4:	4643      	mov	r3, r8
 8054dc6:	462a      	mov	r2, r5
 8054dc8:	4631      	mov	r1, r6
 8054dca:	69e0      	ldr	r0, [r4, #28]
 8054dcc:	f7ff ff60 	bl	8054c90 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8054dd0:	782b      	ldrb	r3, [r5, #0]
 8054dd2:	b923      	cbnz	r3, 8054dde <RegionCommonIdentifyChannels+0x80>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 8054dd4:	f898 3000 	ldrb.w	r3, [r8]
 8054dd8:	b13b      	cbz	r3, 8054dea <RegionCommonIdentifyChannels+0x8c>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8054dda:	200b      	movs	r0, #11
 8054ddc:	e002      	b.n	8054de4 <RegionCommonIdentifyChannels+0x86>
        *nextTxDelay = 0;
 8054dde:	2000      	movs	r0, #0
 8054de0:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 8054de4:	b005      	add	sp, #20
 8054de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8054dea:	200c      	movs	r0, #12
 8054dec:	e7fa      	b.n	8054de4 <RegionCommonIdentifyChannels+0x86>

08054dee <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8054dee:	b570      	push	{r4, r5, r6, lr}
 8054df0:	b082      	sub	sp, #8
 8054df2:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 8054df4:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 8054df8:	f990 6002 	ldrsb.w	r6, [r0, #2]
 8054dfc:	42a6      	cmp	r6, r4
 8054dfe:	d011      	beq.n	8054e24 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8054e00:	3c01      	subs	r4, #1
 8054e02:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8054e04:	42a6      	cmp	r6, r4
 8054e06:	d00e      	beq.n	8054e26 <RegionCommonGetNextLowerTxDr+0x38>
 8054e08:	68ab      	ldr	r3, [r5, #8]
 8054e0a:	9301      	str	r3, [sp, #4]
 8054e0c:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8054e10:	9300      	str	r3, [sp, #0]
 8054e12:	4633      	mov	r3, r6
 8054e14:	4622      	mov	r2, r4
 8054e16:	6869      	ldr	r1, [r5, #4]
 8054e18:	78e8      	ldrb	r0, [r5, #3]
 8054e1a:	f7ff fd4a 	bl	80548b2 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 8054e1e:	2800      	cmp	r0, #0
 8054e20:	d0ee      	beq.n	8054e00 <RegionCommonGetNextLowerTxDr+0x12>
 8054e22:	e000      	b.n	8054e26 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 8054e24:	4634      	mov	r4, r6

        return drLocal;
    }
}
 8054e26:	4620      	mov	r0, r4
 8054e28:	b002      	add	sp, #8
 8054e2a:	bd70      	pop	{r4, r5, r6, pc}

08054e2c <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 8054e2c:	4288      	cmp	r0, r1
 8054e2e:	bfb8      	it	lt
 8054e30:	4608      	movlt	r0, r1
 8054e32:	4770      	bx	lr

08054e34 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 8054e34:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 8054e38:	4a05      	ldr	r2, [pc, #20]	; (8054e50 <RegionCommonGetBandwidth+0x1c>)
 8054e3a:	4293      	cmp	r3, r2
 8054e3c:	d004      	beq.n	8054e48 <RegionCommonGetBandwidth+0x14>
 8054e3e:	4a05      	ldr	r2, [pc, #20]	; (8054e54 <RegionCommonGetBandwidth+0x20>)
 8054e40:	4293      	cmp	r3, r2
 8054e42:	d103      	bne.n	8054e4c <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 8054e44:	2002      	movs	r0, #2
 8054e46:	4770      	bx	lr
            return 1;
 8054e48:	2001      	movs	r0, #1
 8054e4a:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 8054e4c:	2000      	movs	r0, #0
    }
}
 8054e4e:	4770      	bx	lr
 8054e50:	0003d090 	.word	0x0003d090
 8054e54:	0007a120 	.word	0x0007a120

08054e58 <rand1>:

static uint32_t next = 1;

int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8054e58:	4b09      	ldr	r3, [pc, #36]	; (8054e80 <rand1+0x28>)
 8054e5a:	6818      	ldr	r0, [r3, #0]
 8054e5c:	4909      	ldr	r1, [pc, #36]	; (8054e84 <rand1+0x2c>)
 8054e5e:	f243 0239 	movw	r2, #12345	; 0x3039
 8054e62:	fb01 2000 	mla	r0, r1, r0, r2
 8054e66:	6018      	str	r0, [r3, #0]
 8054e68:	2303      	movs	r3, #3
 8054e6a:	fba3 2300 	umull	r2, r3, r3, r0
 8054e6e:	1ac2      	subs	r2, r0, r3
 8054e70:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8054e74:	0f9b      	lsrs	r3, r3, #30
 8054e76:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8054e7a:	1ac0      	subs	r0, r0, r3
 8054e7c:	4770      	bx	lr
 8054e7e:	bf00      	nop
 8054e80:	200182ac 	.word	0x200182ac
 8054e84:	41c64e6d 	.word	0x41c64e6d

08054e88 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 8054e88:	4b01      	ldr	r3, [pc, #4]	; (8054e90 <srand1+0x8>)
 8054e8a:	6018      	str	r0, [r3, #0]
}
 8054e8c:	4770      	bx	lr
 8054e8e:	bf00      	nop
 8054e90:	200182ac 	.word	0x200182ac

08054e94 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8054e94:	b538      	push	{r3, r4, r5, lr}
 8054e96:	4605      	mov	r5, r0
 8054e98:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8054e9a:	f7ff ffdd 	bl	8054e58 <rand1>
 8054e9e:	1b61      	subs	r1, r4, r5
 8054ea0:	3101      	adds	r1, #1
 8054ea2:	fb90 f3f1 	sdiv	r3, r0, r1
 8054ea6:	fb01 0013 	mls	r0, r1, r3, r0
}
 8054eaa:	4428      	add	r0, r5
 8054eac:	bd38      	pop	{r3, r4, r5, pc}

08054eae <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 8054eae:	1e53      	subs	r3, r2, #1
 8054eb0:	b29b      	uxth	r3, r3
 8054eb2:	b12a      	cbz	r2, 8054ec0 <memcpy1+0x12>
    {
        *dst++ = *src++;
 8054eb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8054eb8:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8054ebc:	461a      	mov	r2, r3
 8054ebe:	e7f6      	b.n	8054eae <memcpy1>
    }
}
 8054ec0:	4770      	bx	lr

08054ec2 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8054ec2:	1e53      	subs	r3, r2, #1
 8054ec4:	4418      	add	r0, r3
    while( size-- )
 8054ec6:	1e53      	subs	r3, r2, #1
 8054ec8:	b29b      	uxth	r3, r3
 8054eca:	b12a      	cbz	r2, 8054ed8 <memcpyr+0x16>
    {
        *dst-- = *src++;
 8054ecc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8054ed0:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 8054ed4:	461a      	mov	r2, r3
 8054ed6:	e7f6      	b.n	8054ec6 <memcpyr+0x4>
    }
}
 8054ed8:	4770      	bx	lr

08054eda <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 8054eda:	1e53      	subs	r3, r2, #1
 8054edc:	b29b      	uxth	r3, r3
 8054ede:	b11a      	cbz	r2, 8054ee8 <memset1+0xe>
    {
        *dst++ = value;
 8054ee0:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8054ee4:	461a      	mov	r2, r3
 8054ee6:	e7f8      	b.n	8054eda <memset1>
    }
}
 8054ee8:	4770      	bx	lr
	...

08054eec <Crc32>:
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 8054eec:	b1d0      	cbz	r0, 8054f24 <Crc32+0x38>
{
 8054eee:	b470      	push	{r4, r5, r6}
 8054ef0:	4606      	mov	r6, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8054ef2:	2500      	movs	r5, #0
    uint32_t crc = 0xFFFFFFFF;
 8054ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8054ef8:	e00b      	b.n	8054f12 <Crc32+0x26>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8054efa:	f340 0400 	sbfx	r4, r0, #0, #1
 8054efe:	4a0a      	ldr	r2, [pc, #40]	; (8054f28 <Crc32+0x3c>)
 8054f00:	4022      	ands	r2, r4
 8054f02:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 8054f06:	3301      	adds	r3, #1
 8054f08:	b29b      	uxth	r3, r3
 8054f0a:	2b07      	cmp	r3, #7
 8054f0c:	d9f5      	bls.n	8054efa <Crc32+0xe>
    for( uint16_t i = 0; i < length; ++i )
 8054f0e:	3501      	adds	r5, #1
 8054f10:	b2ad      	uxth	r5, r5
 8054f12:	428d      	cmp	r5, r1
 8054f14:	d203      	bcs.n	8054f1e <Crc32+0x32>
        crc ^= ( uint32_t )buffer[i];
 8054f16:	5d73      	ldrb	r3, [r6, r5]
 8054f18:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8054f1a:	2300      	movs	r3, #0
 8054f1c:	e7f5      	b.n	8054f0a <Crc32+0x1e>
        }
    }

    return ~crc;
 8054f1e:	43c0      	mvns	r0, r0
}
 8054f20:	bc70      	pop	{r4, r5, r6}
 8054f22:	4770      	bx	lr
        return 0;
 8054f24:	2000      	movs	r0, #0
}
 8054f26:	4770      	bx	lr
 8054f28:	edb88320 	.word	0xedb88320

08054f2c <__errno>:
 8054f2c:	4b01      	ldr	r3, [pc, #4]	; (8054f34 <__errno+0x8>)
 8054f2e:	6818      	ldr	r0, [r3, #0]
 8054f30:	4770      	bx	lr
 8054f32:	bf00      	nop
 8054f34:	200182b0 	.word	0x200182b0

08054f38 <__libc_init_array>:
 8054f38:	b570      	push	{r4, r5, r6, lr}
 8054f3a:	4d0d      	ldr	r5, [pc, #52]	; (8054f70 <__libc_init_array+0x38>)
 8054f3c:	2600      	movs	r6, #0
 8054f3e:	4c0d      	ldr	r4, [pc, #52]	; (8054f74 <__libc_init_array+0x3c>)
 8054f40:	1b64      	subs	r4, r4, r5
 8054f42:	10a4      	asrs	r4, r4, #2
 8054f44:	42a6      	cmp	r6, r4
 8054f46:	d109      	bne.n	8054f5c <__libc_init_array+0x24>
 8054f48:	4d0b      	ldr	r5, [pc, #44]	; (8054f78 <__libc_init_array+0x40>)
 8054f4a:	2600      	movs	r6, #0
 8054f4c:	4c0b      	ldr	r4, [pc, #44]	; (8054f7c <__libc_init_array+0x44>)
 8054f4e:	f004 fdcb 	bl	8059ae8 <_init>
 8054f52:	1b64      	subs	r4, r4, r5
 8054f54:	10a4      	asrs	r4, r4, #2
 8054f56:	42a6      	cmp	r6, r4
 8054f58:	d105      	bne.n	8054f66 <__libc_init_array+0x2e>
 8054f5a:	bd70      	pop	{r4, r5, r6, pc}
 8054f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8054f60:	3601      	adds	r6, #1
 8054f62:	4798      	blx	r3
 8054f64:	e7ee      	b.n	8054f44 <__libc_init_array+0xc>
 8054f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8054f6a:	3601      	adds	r6, #1
 8054f6c:	4798      	blx	r3
 8054f6e:	e7f2      	b.n	8054f56 <__libc_init_array+0x1e>
 8054f70:	0805b074 	.word	0x0805b074
 8054f74:	0805b074 	.word	0x0805b074
 8054f78:	0805b074 	.word	0x0805b074
 8054f7c:	0805b078 	.word	0x0805b078

08054f80 <memcpy>:
 8054f80:	440a      	add	r2, r1
 8054f82:	1e43      	subs	r3, r0, #1
 8054f84:	4291      	cmp	r1, r2
 8054f86:	d100      	bne.n	8054f8a <memcpy+0xa>
 8054f88:	4770      	bx	lr
 8054f8a:	b510      	push	{r4, lr}
 8054f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8054f90:	4291      	cmp	r1, r2
 8054f92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8054f96:	d1f9      	bne.n	8054f8c <memcpy+0xc>
 8054f98:	bd10      	pop	{r4, pc}

08054f9a <memset>:
 8054f9a:	4402      	add	r2, r0
 8054f9c:	4603      	mov	r3, r0
 8054f9e:	4293      	cmp	r3, r2
 8054fa0:	d100      	bne.n	8054fa4 <memset+0xa>
 8054fa2:	4770      	bx	lr
 8054fa4:	f803 1b01 	strb.w	r1, [r3], #1
 8054fa8:	e7f9      	b.n	8054f9e <memset+0x4>

08054faa <__cvt>:
 8054faa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8054fae:	ec55 4b10 	vmov	r4, r5, d0
 8054fb2:	2d00      	cmp	r5, #0
 8054fb4:	460e      	mov	r6, r1
 8054fb6:	4619      	mov	r1, r3
 8054fb8:	462b      	mov	r3, r5
 8054fba:	bfb4      	ite	lt
 8054fbc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8054fc0:	2300      	movge	r3, #0
 8054fc2:	4691      	mov	r9, r2
 8054fc4:	bfbf      	itttt	lt
 8054fc6:	4622      	movlt	r2, r4
 8054fc8:	461d      	movlt	r5, r3
 8054fca:	232d      	movlt	r3, #45	; 0x2d
 8054fcc:	4614      	movlt	r4, r2
 8054fce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8054fd2:	700b      	strb	r3, [r1, #0]
 8054fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8054fd6:	f023 0820 	bic.w	r8, r3, #32
 8054fda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8054fde:	d005      	beq.n	8054fec <__cvt+0x42>
 8054fe0:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8054fe4:	d100      	bne.n	8054fe8 <__cvt+0x3e>
 8054fe6:	3601      	adds	r6, #1
 8054fe8:	2102      	movs	r1, #2
 8054fea:	e000      	b.n	8054fee <__cvt+0x44>
 8054fec:	2103      	movs	r1, #3
 8054fee:	ab03      	add	r3, sp, #12
 8054ff0:	4632      	mov	r2, r6
 8054ff2:	9301      	str	r3, [sp, #4]
 8054ff4:	ab02      	add	r3, sp, #8
 8054ff6:	ec45 4b10 	vmov	d0, r4, r5
 8054ffa:	9300      	str	r3, [sp, #0]
 8054ffc:	4653      	mov	r3, sl
 8054ffe:	f001 ff1f 	bl	8056e40 <_dtoa_r>
 8055002:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8055006:	4607      	mov	r7, r0
 8055008:	d102      	bne.n	8055010 <__cvt+0x66>
 805500a:	f019 0f01 	tst.w	r9, #1
 805500e:	d022      	beq.n	8055056 <__cvt+0xac>
 8055010:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8055014:	eb07 0906 	add.w	r9, r7, r6
 8055018:	d110      	bne.n	805503c <__cvt+0x92>
 805501a:	783b      	ldrb	r3, [r7, #0]
 805501c:	2b30      	cmp	r3, #48	; 0x30
 805501e:	d10a      	bne.n	8055036 <__cvt+0x8c>
 8055020:	2200      	movs	r2, #0
 8055022:	2300      	movs	r3, #0
 8055024:	4620      	mov	r0, r4
 8055026:	4629      	mov	r1, r5
 8055028:	f7eb fd32 	bl	8040a90 <__aeabi_dcmpeq>
 805502c:	b918      	cbnz	r0, 8055036 <__cvt+0x8c>
 805502e:	f1c6 0601 	rsb	r6, r6, #1
 8055032:	f8ca 6000 	str.w	r6, [sl]
 8055036:	f8da 3000 	ldr.w	r3, [sl]
 805503a:	4499      	add	r9, r3
 805503c:	2200      	movs	r2, #0
 805503e:	2300      	movs	r3, #0
 8055040:	4620      	mov	r0, r4
 8055042:	4629      	mov	r1, r5
 8055044:	f7eb fd24 	bl	8040a90 <__aeabi_dcmpeq>
 8055048:	b108      	cbz	r0, 805504e <__cvt+0xa4>
 805504a:	f8cd 900c 	str.w	r9, [sp, #12]
 805504e:	2230      	movs	r2, #48	; 0x30
 8055050:	9b03      	ldr	r3, [sp, #12]
 8055052:	454b      	cmp	r3, r9
 8055054:	d307      	bcc.n	8055066 <__cvt+0xbc>
 8055056:	9b03      	ldr	r3, [sp, #12]
 8055058:	4638      	mov	r0, r7
 805505a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 805505c:	1bdb      	subs	r3, r3, r7
 805505e:	6013      	str	r3, [r2, #0]
 8055060:	b004      	add	sp, #16
 8055062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8055066:	1c59      	adds	r1, r3, #1
 8055068:	9103      	str	r1, [sp, #12]
 805506a:	701a      	strb	r2, [r3, #0]
 805506c:	e7f0      	b.n	8055050 <__cvt+0xa6>

0805506e <__exponent>:
 805506e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8055070:	2900      	cmp	r1, #0
 8055072:	4603      	mov	r3, r0
 8055074:	bfb8      	it	lt
 8055076:	4249      	neglt	r1, r1
 8055078:	f803 2b02 	strb.w	r2, [r3], #2
 805507c:	bfb4      	ite	lt
 805507e:	222d      	movlt	r2, #45	; 0x2d
 8055080:	222b      	movge	r2, #43	; 0x2b
 8055082:	2909      	cmp	r1, #9
 8055084:	7042      	strb	r2, [r0, #1]
 8055086:	dd2a      	ble.n	80550de <__exponent+0x70>
 8055088:	f10d 0407 	add.w	r4, sp, #7
 805508c:	270a      	movs	r7, #10
 805508e:	46a4      	mov	ip, r4
 8055090:	460a      	mov	r2, r1
 8055092:	46a6      	mov	lr, r4
 8055094:	3c01      	subs	r4, #1
 8055096:	2a63      	cmp	r2, #99	; 0x63
 8055098:	fb91 f6f7 	sdiv	r6, r1, r7
 805509c:	fb07 1516 	mls	r5, r7, r6, r1
 80550a0:	4631      	mov	r1, r6
 80550a2:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80550a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80550aa:	dcf1      	bgt.n	8055090 <__exponent+0x22>
 80550ac:	3130      	adds	r1, #48	; 0x30
 80550ae:	f1ae 0502 	sub.w	r5, lr, #2
 80550b2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80550b6:	1c44      	adds	r4, r0, #1
 80550b8:	4629      	mov	r1, r5
 80550ba:	4561      	cmp	r1, ip
 80550bc:	d30a      	bcc.n	80550d4 <__exponent+0x66>
 80550be:	f10d 0209 	add.w	r2, sp, #9
 80550c2:	eba2 020e 	sub.w	r2, r2, lr
 80550c6:	4565      	cmp	r5, ip
 80550c8:	bf88      	it	hi
 80550ca:	2200      	movhi	r2, #0
 80550cc:	4413      	add	r3, r2
 80550ce:	1a18      	subs	r0, r3, r0
 80550d0:	b003      	add	sp, #12
 80550d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80550d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80550d8:	f804 2f01 	strb.w	r2, [r4, #1]!
 80550dc:	e7ed      	b.n	80550ba <__exponent+0x4c>
 80550de:	2330      	movs	r3, #48	; 0x30
 80550e0:	3130      	adds	r1, #48	; 0x30
 80550e2:	7083      	strb	r3, [r0, #2]
 80550e4:	1d03      	adds	r3, r0, #4
 80550e6:	70c1      	strb	r1, [r0, #3]
 80550e8:	e7f1      	b.n	80550ce <__exponent+0x60>
	...

080550ec <_printf_float>:
 80550ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80550f0:	ed2d 8b02 	vpush	{d8}
 80550f4:	b08d      	sub	sp, #52	; 0x34
 80550f6:	460c      	mov	r4, r1
 80550f8:	4616      	mov	r6, r2
 80550fa:	461f      	mov	r7, r3
 80550fc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8055100:	4605      	mov	r5, r0
 8055102:	f003 f9ab 	bl	805845c <_localeconv_r>
 8055106:	f8d0 a000 	ldr.w	sl, [r0]
 805510a:	4650      	mov	r0, sl
 805510c:	f7eb f894 	bl	8040238 <strlen>
 8055110:	2300      	movs	r3, #0
 8055112:	f894 b018 	ldrb.w	fp, [r4, #24]
 8055116:	ee08 0a10 	vmov	s16, r0
 805511a:	930a      	str	r3, [sp, #40]	; 0x28
 805511c:	6823      	ldr	r3, [r4, #0]
 805511e:	9305      	str	r3, [sp, #20]
 8055120:	f8d8 3000 	ldr.w	r3, [r8]
 8055124:	3307      	adds	r3, #7
 8055126:	f023 0307 	bic.w	r3, r3, #7
 805512a:	f103 0208 	add.w	r2, r3, #8
 805512e:	f8c8 2000 	str.w	r2, [r8]
 8055132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8055136:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 805513a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 805513e:	f04f 32ff 	mov.w	r2, #4294967295
 8055142:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8055146:	f8cd 8018 	str.w	r8, [sp, #24]
 805514a:	9307      	str	r3, [sp, #28]
 805514c:	4b9e      	ldr	r3, [pc, #632]	; (80553c8 <_printf_float+0x2dc>)
 805514e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8055152:	f7eb fccf 	bl	8040af4 <__aeabi_dcmpun>
 8055156:	bb88      	cbnz	r0, 80551bc <_printf_float+0xd0>
 8055158:	f04f 32ff 	mov.w	r2, #4294967295
 805515c:	4b9a      	ldr	r3, [pc, #616]	; (80553c8 <_printf_float+0x2dc>)
 805515e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8055162:	f7eb fca9 	bl	8040ab8 <__aeabi_dcmple>
 8055166:	bb48      	cbnz	r0, 80551bc <_printf_float+0xd0>
 8055168:	2200      	movs	r2, #0
 805516a:	2300      	movs	r3, #0
 805516c:	4640      	mov	r0, r8
 805516e:	4649      	mov	r1, r9
 8055170:	f7eb fc98 	bl	8040aa4 <__aeabi_dcmplt>
 8055174:	b110      	cbz	r0, 805517c <_printf_float+0x90>
 8055176:	232d      	movs	r3, #45	; 0x2d
 8055178:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 805517c:	4b93      	ldr	r3, [pc, #588]	; (80553cc <_printf_float+0x2e0>)
 805517e:	4894      	ldr	r0, [pc, #592]	; (80553d0 <_printf_float+0x2e4>)
 8055180:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8055184:	bf94      	ite	ls
 8055186:	4698      	movls	r8, r3
 8055188:	4680      	movhi	r8, r0
 805518a:	2303      	movs	r3, #3
 805518c:	f04f 0900 	mov.w	r9, #0
 8055190:	6123      	str	r3, [r4, #16]
 8055192:	9b05      	ldr	r3, [sp, #20]
 8055194:	f023 0204 	bic.w	r2, r3, #4
 8055198:	6022      	str	r2, [r4, #0]
 805519a:	4633      	mov	r3, r6
 805519c:	aa0b      	add	r2, sp, #44	; 0x2c
 805519e:	4621      	mov	r1, r4
 80551a0:	4628      	mov	r0, r5
 80551a2:	9700      	str	r7, [sp, #0]
 80551a4:	f000 f9d8 	bl	8055558 <_printf_common>
 80551a8:	3001      	adds	r0, #1
 80551aa:	f040 8090 	bne.w	80552ce <_printf_float+0x1e2>
 80551ae:	f04f 30ff 	mov.w	r0, #4294967295
 80551b2:	b00d      	add	sp, #52	; 0x34
 80551b4:	ecbd 8b02 	vpop	{d8}
 80551b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80551bc:	4642      	mov	r2, r8
 80551be:	464b      	mov	r3, r9
 80551c0:	4640      	mov	r0, r8
 80551c2:	4649      	mov	r1, r9
 80551c4:	f7eb fc96 	bl	8040af4 <__aeabi_dcmpun>
 80551c8:	b140      	cbz	r0, 80551dc <_printf_float+0xf0>
 80551ca:	464b      	mov	r3, r9
 80551cc:	4881      	ldr	r0, [pc, #516]	; (80553d4 <_printf_float+0x2e8>)
 80551ce:	2b00      	cmp	r3, #0
 80551d0:	bfbc      	itt	lt
 80551d2:	232d      	movlt	r3, #45	; 0x2d
 80551d4:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80551d8:	4b7f      	ldr	r3, [pc, #508]	; (80553d8 <_printf_float+0x2ec>)
 80551da:	e7d1      	b.n	8055180 <_printf_float+0x94>
 80551dc:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80551e0:	6863      	ldr	r3, [r4, #4]
 80551e2:	9206      	str	r2, [sp, #24]
 80551e4:	1c5a      	adds	r2, r3, #1
 80551e6:	d13f      	bne.n	8055268 <_printf_float+0x17c>
 80551e8:	2306      	movs	r3, #6
 80551ea:	6063      	str	r3, [r4, #4]
 80551ec:	9b05      	ldr	r3, [sp, #20]
 80551ee:	4628      	mov	r0, r5
 80551f0:	6861      	ldr	r1, [r4, #4]
 80551f2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80551f6:	2300      	movs	r3, #0
 80551f8:	9303      	str	r3, [sp, #12]
 80551fa:	ab0a      	add	r3, sp, #40	; 0x28
 80551fc:	6022      	str	r2, [r4, #0]
 80551fe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8055202:	ab09      	add	r3, sp, #36	; 0x24
 8055204:	ec49 8b10 	vmov	d0, r8, r9
 8055208:	9300      	str	r3, [sp, #0]
 805520a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 805520e:	f7ff fecc 	bl	8054faa <__cvt>
 8055212:	9b06      	ldr	r3, [sp, #24]
 8055214:	4680      	mov	r8, r0
 8055216:	9909      	ldr	r1, [sp, #36]	; 0x24
 8055218:	2b47      	cmp	r3, #71	; 0x47
 805521a:	d108      	bne.n	805522e <_printf_float+0x142>
 805521c:	1cc8      	adds	r0, r1, #3
 805521e:	db02      	blt.n	8055226 <_printf_float+0x13a>
 8055220:	6863      	ldr	r3, [r4, #4]
 8055222:	4299      	cmp	r1, r3
 8055224:	dd41      	ble.n	80552aa <_printf_float+0x1be>
 8055226:	f1ab 0b02 	sub.w	fp, fp, #2
 805522a:	fa5f fb8b 	uxtb.w	fp, fp
 805522e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8055232:	d820      	bhi.n	8055276 <_printf_float+0x18a>
 8055234:	3901      	subs	r1, #1
 8055236:	465a      	mov	r2, fp
 8055238:	f104 0050 	add.w	r0, r4, #80	; 0x50
 805523c:	9109      	str	r1, [sp, #36]	; 0x24
 805523e:	f7ff ff16 	bl	805506e <__exponent>
 8055242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8055244:	4681      	mov	r9, r0
 8055246:	1813      	adds	r3, r2, r0
 8055248:	2a01      	cmp	r2, #1
 805524a:	6123      	str	r3, [r4, #16]
 805524c:	dc02      	bgt.n	8055254 <_printf_float+0x168>
 805524e:	6822      	ldr	r2, [r4, #0]
 8055250:	07d2      	lsls	r2, r2, #31
 8055252:	d501      	bpl.n	8055258 <_printf_float+0x16c>
 8055254:	3301      	adds	r3, #1
 8055256:	6123      	str	r3, [r4, #16]
 8055258:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 805525c:	2b00      	cmp	r3, #0
 805525e:	d09c      	beq.n	805519a <_printf_float+0xae>
 8055260:	232d      	movs	r3, #45	; 0x2d
 8055262:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8055266:	e798      	b.n	805519a <_printf_float+0xae>
 8055268:	9a06      	ldr	r2, [sp, #24]
 805526a:	2a47      	cmp	r2, #71	; 0x47
 805526c:	d1be      	bne.n	80551ec <_printf_float+0x100>
 805526e:	2b00      	cmp	r3, #0
 8055270:	d1bc      	bne.n	80551ec <_printf_float+0x100>
 8055272:	2301      	movs	r3, #1
 8055274:	e7b9      	b.n	80551ea <_printf_float+0xfe>
 8055276:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 805527a:	d118      	bne.n	80552ae <_printf_float+0x1c2>
 805527c:	2900      	cmp	r1, #0
 805527e:	6863      	ldr	r3, [r4, #4]
 8055280:	dd0b      	ble.n	805529a <_printf_float+0x1ae>
 8055282:	6121      	str	r1, [r4, #16]
 8055284:	b913      	cbnz	r3, 805528c <_printf_float+0x1a0>
 8055286:	6822      	ldr	r2, [r4, #0]
 8055288:	07d0      	lsls	r0, r2, #31
 805528a:	d502      	bpl.n	8055292 <_printf_float+0x1a6>
 805528c:	3301      	adds	r3, #1
 805528e:	440b      	add	r3, r1
 8055290:	6123      	str	r3, [r4, #16]
 8055292:	f04f 0900 	mov.w	r9, #0
 8055296:	65a1      	str	r1, [r4, #88]	; 0x58
 8055298:	e7de      	b.n	8055258 <_printf_float+0x16c>
 805529a:	b913      	cbnz	r3, 80552a2 <_printf_float+0x1b6>
 805529c:	6822      	ldr	r2, [r4, #0]
 805529e:	07d2      	lsls	r2, r2, #31
 80552a0:	d501      	bpl.n	80552a6 <_printf_float+0x1ba>
 80552a2:	3302      	adds	r3, #2
 80552a4:	e7f4      	b.n	8055290 <_printf_float+0x1a4>
 80552a6:	2301      	movs	r3, #1
 80552a8:	e7f2      	b.n	8055290 <_printf_float+0x1a4>
 80552aa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80552ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80552b0:	4299      	cmp	r1, r3
 80552b2:	db05      	blt.n	80552c0 <_printf_float+0x1d4>
 80552b4:	6823      	ldr	r3, [r4, #0]
 80552b6:	6121      	str	r1, [r4, #16]
 80552b8:	07d8      	lsls	r0, r3, #31
 80552ba:	d5ea      	bpl.n	8055292 <_printf_float+0x1a6>
 80552bc:	1c4b      	adds	r3, r1, #1
 80552be:	e7e7      	b.n	8055290 <_printf_float+0x1a4>
 80552c0:	2900      	cmp	r1, #0
 80552c2:	bfd4      	ite	le
 80552c4:	f1c1 0202 	rsble	r2, r1, #2
 80552c8:	2201      	movgt	r2, #1
 80552ca:	4413      	add	r3, r2
 80552cc:	e7e0      	b.n	8055290 <_printf_float+0x1a4>
 80552ce:	6823      	ldr	r3, [r4, #0]
 80552d0:	055a      	lsls	r2, r3, #21
 80552d2:	d407      	bmi.n	80552e4 <_printf_float+0x1f8>
 80552d4:	6923      	ldr	r3, [r4, #16]
 80552d6:	4642      	mov	r2, r8
 80552d8:	4631      	mov	r1, r6
 80552da:	4628      	mov	r0, r5
 80552dc:	47b8      	blx	r7
 80552de:	3001      	adds	r0, #1
 80552e0:	d12c      	bne.n	805533c <_printf_float+0x250>
 80552e2:	e764      	b.n	80551ae <_printf_float+0xc2>
 80552e4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80552e8:	f240 80e0 	bls.w	80554ac <_printf_float+0x3c0>
 80552ec:	2200      	movs	r2, #0
 80552ee:	2300      	movs	r3, #0
 80552f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80552f4:	f7eb fbcc 	bl	8040a90 <__aeabi_dcmpeq>
 80552f8:	2800      	cmp	r0, #0
 80552fa:	d034      	beq.n	8055366 <_printf_float+0x27a>
 80552fc:	2301      	movs	r3, #1
 80552fe:	4a37      	ldr	r2, [pc, #220]	; (80553dc <_printf_float+0x2f0>)
 8055300:	4631      	mov	r1, r6
 8055302:	4628      	mov	r0, r5
 8055304:	47b8      	blx	r7
 8055306:	3001      	adds	r0, #1
 8055308:	f43f af51 	beq.w	80551ae <_printf_float+0xc2>
 805530c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8055310:	429a      	cmp	r2, r3
 8055312:	db02      	blt.n	805531a <_printf_float+0x22e>
 8055314:	6823      	ldr	r3, [r4, #0]
 8055316:	07d8      	lsls	r0, r3, #31
 8055318:	d510      	bpl.n	805533c <_printf_float+0x250>
 805531a:	ee18 3a10 	vmov	r3, s16
 805531e:	4652      	mov	r2, sl
 8055320:	4631      	mov	r1, r6
 8055322:	4628      	mov	r0, r5
 8055324:	47b8      	blx	r7
 8055326:	3001      	adds	r0, #1
 8055328:	f43f af41 	beq.w	80551ae <_printf_float+0xc2>
 805532c:	f04f 0800 	mov.w	r8, #0
 8055330:	f104 091a 	add.w	r9, r4, #26
 8055334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8055336:	3b01      	subs	r3, #1
 8055338:	4543      	cmp	r3, r8
 805533a:	dc09      	bgt.n	8055350 <_printf_float+0x264>
 805533c:	6823      	ldr	r3, [r4, #0]
 805533e:	079b      	lsls	r3, r3, #30
 8055340:	f100 8105 	bmi.w	805554e <_printf_float+0x462>
 8055344:	68e0      	ldr	r0, [r4, #12]
 8055346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8055348:	4298      	cmp	r0, r3
 805534a:	bfb8      	it	lt
 805534c:	4618      	movlt	r0, r3
 805534e:	e730      	b.n	80551b2 <_printf_float+0xc6>
 8055350:	2301      	movs	r3, #1
 8055352:	464a      	mov	r2, r9
 8055354:	4631      	mov	r1, r6
 8055356:	4628      	mov	r0, r5
 8055358:	47b8      	blx	r7
 805535a:	3001      	adds	r0, #1
 805535c:	f43f af27 	beq.w	80551ae <_printf_float+0xc2>
 8055360:	f108 0801 	add.w	r8, r8, #1
 8055364:	e7e6      	b.n	8055334 <_printf_float+0x248>
 8055366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8055368:	2b00      	cmp	r3, #0
 805536a:	dc39      	bgt.n	80553e0 <_printf_float+0x2f4>
 805536c:	2301      	movs	r3, #1
 805536e:	4a1b      	ldr	r2, [pc, #108]	; (80553dc <_printf_float+0x2f0>)
 8055370:	4631      	mov	r1, r6
 8055372:	4628      	mov	r0, r5
 8055374:	47b8      	blx	r7
 8055376:	3001      	adds	r0, #1
 8055378:	f43f af19 	beq.w	80551ae <_printf_float+0xc2>
 805537c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8055380:	4313      	orrs	r3, r2
 8055382:	d102      	bne.n	805538a <_printf_float+0x29e>
 8055384:	6823      	ldr	r3, [r4, #0]
 8055386:	07d9      	lsls	r1, r3, #31
 8055388:	d5d8      	bpl.n	805533c <_printf_float+0x250>
 805538a:	ee18 3a10 	vmov	r3, s16
 805538e:	4652      	mov	r2, sl
 8055390:	4631      	mov	r1, r6
 8055392:	4628      	mov	r0, r5
 8055394:	47b8      	blx	r7
 8055396:	3001      	adds	r0, #1
 8055398:	f43f af09 	beq.w	80551ae <_printf_float+0xc2>
 805539c:	f04f 0900 	mov.w	r9, #0
 80553a0:	f104 0a1a 	add.w	sl, r4, #26
 80553a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80553a6:	425b      	negs	r3, r3
 80553a8:	454b      	cmp	r3, r9
 80553aa:	dc01      	bgt.n	80553b0 <_printf_float+0x2c4>
 80553ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80553ae:	e792      	b.n	80552d6 <_printf_float+0x1ea>
 80553b0:	2301      	movs	r3, #1
 80553b2:	4652      	mov	r2, sl
 80553b4:	4631      	mov	r1, r6
 80553b6:	4628      	mov	r0, r5
 80553b8:	47b8      	blx	r7
 80553ba:	3001      	adds	r0, #1
 80553bc:	f43f aef7 	beq.w	80551ae <_printf_float+0xc2>
 80553c0:	f109 0901 	add.w	r9, r9, #1
 80553c4:	e7ee      	b.n	80553a4 <_printf_float+0x2b8>
 80553c6:	bf00      	nop
 80553c8:	7fefffff 	.word	0x7fefffff
 80553cc:	0805abbc 	.word	0x0805abbc
 80553d0:	0805abc0 	.word	0x0805abc0
 80553d4:	0805abc8 	.word	0x0805abc8
 80553d8:	0805abc4 	.word	0x0805abc4
 80553dc:	0805abcc 	.word	0x0805abcc
 80553e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80553e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80553e4:	429a      	cmp	r2, r3
 80553e6:	bfa8      	it	ge
 80553e8:	461a      	movge	r2, r3
 80553ea:	2a00      	cmp	r2, #0
 80553ec:	4691      	mov	r9, r2
 80553ee:	dc37      	bgt.n	8055460 <_printf_float+0x374>
 80553f0:	f04f 0b00 	mov.w	fp, #0
 80553f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80553f8:	f104 021a 	add.w	r2, r4, #26
 80553fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80553fe:	9305      	str	r3, [sp, #20]
 8055400:	eba3 0309 	sub.w	r3, r3, r9
 8055404:	455b      	cmp	r3, fp
 8055406:	dc33      	bgt.n	8055470 <_printf_float+0x384>
 8055408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 805540c:	429a      	cmp	r2, r3
 805540e:	db3b      	blt.n	8055488 <_printf_float+0x39c>
 8055410:	6823      	ldr	r3, [r4, #0]
 8055412:	07da      	lsls	r2, r3, #31
 8055414:	d438      	bmi.n	8055488 <_printf_float+0x39c>
 8055416:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8055418:	9b05      	ldr	r3, [sp, #20]
 805541a:	9909      	ldr	r1, [sp, #36]	; 0x24
 805541c:	1ad3      	subs	r3, r2, r3
 805541e:	eba2 0901 	sub.w	r9, r2, r1
 8055422:	4599      	cmp	r9, r3
 8055424:	bfa8      	it	ge
 8055426:	4699      	movge	r9, r3
 8055428:	f1b9 0f00 	cmp.w	r9, #0
 805542c:	dc35      	bgt.n	805549a <_printf_float+0x3ae>
 805542e:	f04f 0800 	mov.w	r8, #0
 8055432:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8055436:	f104 0a1a 	add.w	sl, r4, #26
 805543a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 805543e:	1a9b      	subs	r3, r3, r2
 8055440:	eba3 0309 	sub.w	r3, r3, r9
 8055444:	4543      	cmp	r3, r8
 8055446:	f77f af79 	ble.w	805533c <_printf_float+0x250>
 805544a:	2301      	movs	r3, #1
 805544c:	4652      	mov	r2, sl
 805544e:	4631      	mov	r1, r6
 8055450:	4628      	mov	r0, r5
 8055452:	47b8      	blx	r7
 8055454:	3001      	adds	r0, #1
 8055456:	f43f aeaa 	beq.w	80551ae <_printf_float+0xc2>
 805545a:	f108 0801 	add.w	r8, r8, #1
 805545e:	e7ec      	b.n	805543a <_printf_float+0x34e>
 8055460:	4613      	mov	r3, r2
 8055462:	4631      	mov	r1, r6
 8055464:	4642      	mov	r2, r8
 8055466:	4628      	mov	r0, r5
 8055468:	47b8      	blx	r7
 805546a:	3001      	adds	r0, #1
 805546c:	d1c0      	bne.n	80553f0 <_printf_float+0x304>
 805546e:	e69e      	b.n	80551ae <_printf_float+0xc2>
 8055470:	2301      	movs	r3, #1
 8055472:	4631      	mov	r1, r6
 8055474:	4628      	mov	r0, r5
 8055476:	9205      	str	r2, [sp, #20]
 8055478:	47b8      	blx	r7
 805547a:	3001      	adds	r0, #1
 805547c:	f43f ae97 	beq.w	80551ae <_printf_float+0xc2>
 8055480:	f10b 0b01 	add.w	fp, fp, #1
 8055484:	9a05      	ldr	r2, [sp, #20]
 8055486:	e7b9      	b.n	80553fc <_printf_float+0x310>
 8055488:	ee18 3a10 	vmov	r3, s16
 805548c:	4652      	mov	r2, sl
 805548e:	4631      	mov	r1, r6
 8055490:	4628      	mov	r0, r5
 8055492:	47b8      	blx	r7
 8055494:	3001      	adds	r0, #1
 8055496:	d1be      	bne.n	8055416 <_printf_float+0x32a>
 8055498:	e689      	b.n	80551ae <_printf_float+0xc2>
 805549a:	9a05      	ldr	r2, [sp, #20]
 805549c:	464b      	mov	r3, r9
 805549e:	4631      	mov	r1, r6
 80554a0:	4628      	mov	r0, r5
 80554a2:	4442      	add	r2, r8
 80554a4:	47b8      	blx	r7
 80554a6:	3001      	adds	r0, #1
 80554a8:	d1c1      	bne.n	805542e <_printf_float+0x342>
 80554aa:	e680      	b.n	80551ae <_printf_float+0xc2>
 80554ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80554ae:	2a01      	cmp	r2, #1
 80554b0:	dc01      	bgt.n	80554b6 <_printf_float+0x3ca>
 80554b2:	07db      	lsls	r3, r3, #31
 80554b4:	d538      	bpl.n	8055528 <_printf_float+0x43c>
 80554b6:	2301      	movs	r3, #1
 80554b8:	4642      	mov	r2, r8
 80554ba:	4631      	mov	r1, r6
 80554bc:	4628      	mov	r0, r5
 80554be:	47b8      	blx	r7
 80554c0:	3001      	adds	r0, #1
 80554c2:	f43f ae74 	beq.w	80551ae <_printf_float+0xc2>
 80554c6:	ee18 3a10 	vmov	r3, s16
 80554ca:	4652      	mov	r2, sl
 80554cc:	4631      	mov	r1, r6
 80554ce:	4628      	mov	r0, r5
 80554d0:	47b8      	blx	r7
 80554d2:	3001      	adds	r0, #1
 80554d4:	f43f ae6b 	beq.w	80551ae <_printf_float+0xc2>
 80554d8:	2200      	movs	r2, #0
 80554da:	2300      	movs	r3, #0
 80554dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80554e0:	f7eb fad6 	bl	8040a90 <__aeabi_dcmpeq>
 80554e4:	b9d8      	cbnz	r0, 805551e <_printf_float+0x432>
 80554e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80554e8:	f108 0201 	add.w	r2, r8, #1
 80554ec:	3b01      	subs	r3, #1
 80554ee:	4631      	mov	r1, r6
 80554f0:	4628      	mov	r0, r5
 80554f2:	47b8      	blx	r7
 80554f4:	3001      	adds	r0, #1
 80554f6:	d10e      	bne.n	8055516 <_printf_float+0x42a>
 80554f8:	e659      	b.n	80551ae <_printf_float+0xc2>
 80554fa:	2301      	movs	r3, #1
 80554fc:	4652      	mov	r2, sl
 80554fe:	4631      	mov	r1, r6
 8055500:	4628      	mov	r0, r5
 8055502:	47b8      	blx	r7
 8055504:	3001      	adds	r0, #1
 8055506:	f43f ae52 	beq.w	80551ae <_printf_float+0xc2>
 805550a:	f108 0801 	add.w	r8, r8, #1
 805550e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8055510:	3b01      	subs	r3, #1
 8055512:	4543      	cmp	r3, r8
 8055514:	dcf1      	bgt.n	80554fa <_printf_float+0x40e>
 8055516:	464b      	mov	r3, r9
 8055518:	f104 0250 	add.w	r2, r4, #80	; 0x50
 805551c:	e6dc      	b.n	80552d8 <_printf_float+0x1ec>
 805551e:	f04f 0800 	mov.w	r8, #0
 8055522:	f104 0a1a 	add.w	sl, r4, #26
 8055526:	e7f2      	b.n	805550e <_printf_float+0x422>
 8055528:	2301      	movs	r3, #1
 805552a:	4642      	mov	r2, r8
 805552c:	e7df      	b.n	80554ee <_printf_float+0x402>
 805552e:	2301      	movs	r3, #1
 8055530:	464a      	mov	r2, r9
 8055532:	4631      	mov	r1, r6
 8055534:	4628      	mov	r0, r5
 8055536:	47b8      	blx	r7
 8055538:	3001      	adds	r0, #1
 805553a:	f43f ae38 	beq.w	80551ae <_printf_float+0xc2>
 805553e:	f108 0801 	add.w	r8, r8, #1
 8055542:	68e3      	ldr	r3, [r4, #12]
 8055544:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8055546:	1a5b      	subs	r3, r3, r1
 8055548:	4543      	cmp	r3, r8
 805554a:	dcf0      	bgt.n	805552e <_printf_float+0x442>
 805554c:	e6fa      	b.n	8055344 <_printf_float+0x258>
 805554e:	f04f 0800 	mov.w	r8, #0
 8055552:	f104 0919 	add.w	r9, r4, #25
 8055556:	e7f4      	b.n	8055542 <_printf_float+0x456>

08055558 <_printf_common>:
 8055558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 805555c:	4616      	mov	r6, r2
 805555e:	4699      	mov	r9, r3
 8055560:	688a      	ldr	r2, [r1, #8]
 8055562:	4607      	mov	r7, r0
 8055564:	690b      	ldr	r3, [r1, #16]
 8055566:	460c      	mov	r4, r1
 8055568:	f8dd 8020 	ldr.w	r8, [sp, #32]
 805556c:	4293      	cmp	r3, r2
 805556e:	bfb8      	it	lt
 8055570:	4613      	movlt	r3, r2
 8055572:	6033      	str	r3, [r6, #0]
 8055574:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8055578:	b10a      	cbz	r2, 805557e <_printf_common+0x26>
 805557a:	3301      	adds	r3, #1
 805557c:	6033      	str	r3, [r6, #0]
 805557e:	6823      	ldr	r3, [r4, #0]
 8055580:	0699      	lsls	r1, r3, #26
 8055582:	bf42      	ittt	mi
 8055584:	6833      	ldrmi	r3, [r6, #0]
 8055586:	3302      	addmi	r3, #2
 8055588:	6033      	strmi	r3, [r6, #0]
 805558a:	6825      	ldr	r5, [r4, #0]
 805558c:	f015 0506 	ands.w	r5, r5, #6
 8055590:	d106      	bne.n	80555a0 <_printf_common+0x48>
 8055592:	f104 0a19 	add.w	sl, r4, #25
 8055596:	68e3      	ldr	r3, [r4, #12]
 8055598:	6832      	ldr	r2, [r6, #0]
 805559a:	1a9b      	subs	r3, r3, r2
 805559c:	42ab      	cmp	r3, r5
 805559e:	dc29      	bgt.n	80555f4 <_printf_common+0x9c>
 80555a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80555a4:	1e13      	subs	r3, r2, #0
 80555a6:	6822      	ldr	r2, [r4, #0]
 80555a8:	bf18      	it	ne
 80555aa:	2301      	movne	r3, #1
 80555ac:	0692      	lsls	r2, r2, #26
 80555ae:	d42e      	bmi.n	805560e <_printf_common+0xb6>
 80555b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80555b4:	4649      	mov	r1, r9
 80555b6:	4638      	mov	r0, r7
 80555b8:	47c0      	blx	r8
 80555ba:	3001      	adds	r0, #1
 80555bc:	d021      	beq.n	8055602 <_printf_common+0xaa>
 80555be:	6823      	ldr	r3, [r4, #0]
 80555c0:	341a      	adds	r4, #26
 80555c2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 80555c6:	f003 0306 	and.w	r3, r3, #6
 80555ca:	6832      	ldr	r2, [r6, #0]
 80555cc:	2600      	movs	r6, #0
 80555ce:	2b04      	cmp	r3, #4
 80555d0:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80555d4:	bf08      	it	eq
 80555d6:	1aad      	subeq	r5, r5, r2
 80555d8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80555dc:	bf14      	ite	ne
 80555de:	2500      	movne	r5, #0
 80555e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80555e4:	4293      	cmp	r3, r2
 80555e6:	bfc4      	itt	gt
 80555e8:	1a9b      	subgt	r3, r3, r2
 80555ea:	18ed      	addgt	r5, r5, r3
 80555ec:	42b5      	cmp	r5, r6
 80555ee:	d11a      	bne.n	8055626 <_printf_common+0xce>
 80555f0:	2000      	movs	r0, #0
 80555f2:	e008      	b.n	8055606 <_printf_common+0xae>
 80555f4:	2301      	movs	r3, #1
 80555f6:	4652      	mov	r2, sl
 80555f8:	4649      	mov	r1, r9
 80555fa:	4638      	mov	r0, r7
 80555fc:	47c0      	blx	r8
 80555fe:	3001      	adds	r0, #1
 8055600:	d103      	bne.n	805560a <_printf_common+0xb2>
 8055602:	f04f 30ff 	mov.w	r0, #4294967295
 8055606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 805560a:	3501      	adds	r5, #1
 805560c:	e7c3      	b.n	8055596 <_printf_common+0x3e>
 805560e:	18e1      	adds	r1, r4, r3
 8055610:	1c5a      	adds	r2, r3, #1
 8055612:	2030      	movs	r0, #48	; 0x30
 8055614:	3302      	adds	r3, #2
 8055616:	4422      	add	r2, r4
 8055618:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 805561c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8055620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8055624:	e7c4      	b.n	80555b0 <_printf_common+0x58>
 8055626:	2301      	movs	r3, #1
 8055628:	4622      	mov	r2, r4
 805562a:	4649      	mov	r1, r9
 805562c:	4638      	mov	r0, r7
 805562e:	47c0      	blx	r8
 8055630:	3001      	adds	r0, #1
 8055632:	d0e6      	beq.n	8055602 <_printf_common+0xaa>
 8055634:	3601      	adds	r6, #1
 8055636:	e7d9      	b.n	80555ec <_printf_common+0x94>

08055638 <_printf_i>:
 8055638:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 805563c:	460c      	mov	r4, r1
 805563e:	4691      	mov	r9, r2
 8055640:	4680      	mov	r8, r0
 8055642:	469a      	mov	sl, r3
 8055644:	7e27      	ldrb	r7, [r4, #24]
 8055646:	f104 0243 	add.w	r2, r4, #67	; 0x43
 805564a:	990c      	ldr	r1, [sp, #48]	; 0x30
 805564c:	2f78      	cmp	r7, #120	; 0x78
 805564e:	d807      	bhi.n	8055660 <_printf_i+0x28>
 8055650:	2f62      	cmp	r7, #98	; 0x62
 8055652:	d80a      	bhi.n	805566a <_printf_i+0x32>
 8055654:	2f00      	cmp	r7, #0
 8055656:	f000 80d8 	beq.w	805580a <_printf_i+0x1d2>
 805565a:	2f58      	cmp	r7, #88	; 0x58
 805565c:	f000 80a3 	beq.w	80557a6 <_printf_i+0x16e>
 8055660:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8055664:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8055668:	e03a      	b.n	80556e0 <_printf_i+0xa8>
 805566a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 805566e:	2b15      	cmp	r3, #21
 8055670:	d8f6      	bhi.n	8055660 <_printf_i+0x28>
 8055672:	a001      	add	r0, pc, #4	; (adr r0, 8055678 <_printf_i+0x40>)
 8055674:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8055678:	080556d1 	.word	0x080556d1
 805567c:	080556e5 	.word	0x080556e5
 8055680:	08055661 	.word	0x08055661
 8055684:	08055661 	.word	0x08055661
 8055688:	08055661 	.word	0x08055661
 805568c:	08055661 	.word	0x08055661
 8055690:	080556e5 	.word	0x080556e5
 8055694:	08055661 	.word	0x08055661
 8055698:	08055661 	.word	0x08055661
 805569c:	08055661 	.word	0x08055661
 80556a0:	08055661 	.word	0x08055661
 80556a4:	080557f1 	.word	0x080557f1
 80556a8:	08055715 	.word	0x08055715
 80556ac:	080557d3 	.word	0x080557d3
 80556b0:	08055661 	.word	0x08055661
 80556b4:	08055661 	.word	0x08055661
 80556b8:	08055813 	.word	0x08055813
 80556bc:	08055661 	.word	0x08055661
 80556c0:	08055715 	.word	0x08055715
 80556c4:	08055661 	.word	0x08055661
 80556c8:	08055661 	.word	0x08055661
 80556cc:	080557db 	.word	0x080557db
 80556d0:	680b      	ldr	r3, [r1, #0]
 80556d2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80556d6:	1d1a      	adds	r2, r3, #4
 80556d8:	681b      	ldr	r3, [r3, #0]
 80556da:	600a      	str	r2, [r1, #0]
 80556dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80556e0:	2301      	movs	r3, #1
 80556e2:	e0a3      	b.n	805582c <_printf_i+0x1f4>
 80556e4:	6825      	ldr	r5, [r4, #0]
 80556e6:	6808      	ldr	r0, [r1, #0]
 80556e8:	062e      	lsls	r6, r5, #24
 80556ea:	f100 0304 	add.w	r3, r0, #4
 80556ee:	d50a      	bpl.n	8055706 <_printf_i+0xce>
 80556f0:	6805      	ldr	r5, [r0, #0]
 80556f2:	600b      	str	r3, [r1, #0]
 80556f4:	2d00      	cmp	r5, #0
 80556f6:	da03      	bge.n	8055700 <_printf_i+0xc8>
 80556f8:	232d      	movs	r3, #45	; 0x2d
 80556fa:	426d      	negs	r5, r5
 80556fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8055700:	485e      	ldr	r0, [pc, #376]	; (805587c <_printf_i+0x244>)
 8055702:	230a      	movs	r3, #10
 8055704:	e019      	b.n	805573a <_printf_i+0x102>
 8055706:	f015 0f40 	tst.w	r5, #64	; 0x40
 805570a:	6805      	ldr	r5, [r0, #0]
 805570c:	600b      	str	r3, [r1, #0]
 805570e:	bf18      	it	ne
 8055710:	b22d      	sxthne	r5, r5
 8055712:	e7ef      	b.n	80556f4 <_printf_i+0xbc>
 8055714:	680b      	ldr	r3, [r1, #0]
 8055716:	6825      	ldr	r5, [r4, #0]
 8055718:	1d18      	adds	r0, r3, #4
 805571a:	6008      	str	r0, [r1, #0]
 805571c:	0628      	lsls	r0, r5, #24
 805571e:	d501      	bpl.n	8055724 <_printf_i+0xec>
 8055720:	681d      	ldr	r5, [r3, #0]
 8055722:	e002      	b.n	805572a <_printf_i+0xf2>
 8055724:	0669      	lsls	r1, r5, #25
 8055726:	d5fb      	bpl.n	8055720 <_printf_i+0xe8>
 8055728:	881d      	ldrh	r5, [r3, #0]
 805572a:	2f6f      	cmp	r7, #111	; 0x6f
 805572c:	4853      	ldr	r0, [pc, #332]	; (805587c <_printf_i+0x244>)
 805572e:	bf0c      	ite	eq
 8055730:	2308      	moveq	r3, #8
 8055732:	230a      	movne	r3, #10
 8055734:	2100      	movs	r1, #0
 8055736:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 805573a:	6866      	ldr	r6, [r4, #4]
 805573c:	2e00      	cmp	r6, #0
 805573e:	60a6      	str	r6, [r4, #8]
 8055740:	bfa2      	ittt	ge
 8055742:	6821      	ldrge	r1, [r4, #0]
 8055744:	f021 0104 	bicge.w	r1, r1, #4
 8055748:	6021      	strge	r1, [r4, #0]
 805574a:	b90d      	cbnz	r5, 8055750 <_printf_i+0x118>
 805574c:	2e00      	cmp	r6, #0
 805574e:	d04d      	beq.n	80557ec <_printf_i+0x1b4>
 8055750:	4616      	mov	r6, r2
 8055752:	fbb5 f1f3 	udiv	r1, r5, r3
 8055756:	fb03 5711 	mls	r7, r3, r1, r5
 805575a:	5dc7      	ldrb	r7, [r0, r7]
 805575c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8055760:	462f      	mov	r7, r5
 8055762:	460d      	mov	r5, r1
 8055764:	42bb      	cmp	r3, r7
 8055766:	d9f4      	bls.n	8055752 <_printf_i+0x11a>
 8055768:	2b08      	cmp	r3, #8
 805576a:	d10b      	bne.n	8055784 <_printf_i+0x14c>
 805576c:	6823      	ldr	r3, [r4, #0]
 805576e:	07df      	lsls	r7, r3, #31
 8055770:	d508      	bpl.n	8055784 <_printf_i+0x14c>
 8055772:	6923      	ldr	r3, [r4, #16]
 8055774:	6861      	ldr	r1, [r4, #4]
 8055776:	4299      	cmp	r1, r3
 8055778:	bfde      	ittt	le
 805577a:	2330      	movle	r3, #48	; 0x30
 805577c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8055780:	f106 36ff 	addle.w	r6, r6, #4294967295
 8055784:	1b92      	subs	r2, r2, r6
 8055786:	6122      	str	r2, [r4, #16]
 8055788:	464b      	mov	r3, r9
 805578a:	aa03      	add	r2, sp, #12
 805578c:	4621      	mov	r1, r4
 805578e:	4640      	mov	r0, r8
 8055790:	f8cd a000 	str.w	sl, [sp]
 8055794:	f7ff fee0 	bl	8055558 <_printf_common>
 8055798:	3001      	adds	r0, #1
 805579a:	d14c      	bne.n	8055836 <_printf_i+0x1fe>
 805579c:	f04f 30ff 	mov.w	r0, #4294967295
 80557a0:	b004      	add	sp, #16
 80557a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80557a6:	4835      	ldr	r0, [pc, #212]	; (805587c <_printf_i+0x244>)
 80557a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80557ac:	6823      	ldr	r3, [r4, #0]
 80557ae:	680e      	ldr	r6, [r1, #0]
 80557b0:	061f      	lsls	r7, r3, #24
 80557b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80557b6:	600e      	str	r6, [r1, #0]
 80557b8:	d514      	bpl.n	80557e4 <_printf_i+0x1ac>
 80557ba:	07d9      	lsls	r1, r3, #31
 80557bc:	bf44      	itt	mi
 80557be:	f043 0320 	orrmi.w	r3, r3, #32
 80557c2:	6023      	strmi	r3, [r4, #0]
 80557c4:	b91d      	cbnz	r5, 80557ce <_printf_i+0x196>
 80557c6:	6823      	ldr	r3, [r4, #0]
 80557c8:	f023 0320 	bic.w	r3, r3, #32
 80557cc:	6023      	str	r3, [r4, #0]
 80557ce:	2310      	movs	r3, #16
 80557d0:	e7b0      	b.n	8055734 <_printf_i+0xfc>
 80557d2:	6823      	ldr	r3, [r4, #0]
 80557d4:	f043 0320 	orr.w	r3, r3, #32
 80557d8:	6023      	str	r3, [r4, #0]
 80557da:	2378      	movs	r3, #120	; 0x78
 80557dc:	4828      	ldr	r0, [pc, #160]	; (8055880 <_printf_i+0x248>)
 80557de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80557e2:	e7e3      	b.n	80557ac <_printf_i+0x174>
 80557e4:	065e      	lsls	r6, r3, #25
 80557e6:	bf48      	it	mi
 80557e8:	b2ad      	uxthmi	r5, r5
 80557ea:	e7e6      	b.n	80557ba <_printf_i+0x182>
 80557ec:	4616      	mov	r6, r2
 80557ee:	e7bb      	b.n	8055768 <_printf_i+0x130>
 80557f0:	680b      	ldr	r3, [r1, #0]
 80557f2:	6826      	ldr	r6, [r4, #0]
 80557f4:	1d1d      	adds	r5, r3, #4
 80557f6:	6960      	ldr	r0, [r4, #20]
 80557f8:	600d      	str	r5, [r1, #0]
 80557fa:	0635      	lsls	r5, r6, #24
 80557fc:	681b      	ldr	r3, [r3, #0]
 80557fe:	d501      	bpl.n	8055804 <_printf_i+0x1cc>
 8055800:	6018      	str	r0, [r3, #0]
 8055802:	e002      	b.n	805580a <_printf_i+0x1d2>
 8055804:	0671      	lsls	r1, r6, #25
 8055806:	d5fb      	bpl.n	8055800 <_printf_i+0x1c8>
 8055808:	8018      	strh	r0, [r3, #0]
 805580a:	2300      	movs	r3, #0
 805580c:	4616      	mov	r6, r2
 805580e:	6123      	str	r3, [r4, #16]
 8055810:	e7ba      	b.n	8055788 <_printf_i+0x150>
 8055812:	680b      	ldr	r3, [r1, #0]
 8055814:	1d1a      	adds	r2, r3, #4
 8055816:	600a      	str	r2, [r1, #0]
 8055818:	2100      	movs	r1, #0
 805581a:	681e      	ldr	r6, [r3, #0]
 805581c:	6862      	ldr	r2, [r4, #4]
 805581e:	4630      	mov	r0, r6
 8055820:	f002 fea2 	bl	8058568 <memchr>
 8055824:	b108      	cbz	r0, 805582a <_printf_i+0x1f2>
 8055826:	1b80      	subs	r0, r0, r6
 8055828:	6060      	str	r0, [r4, #4]
 805582a:	6863      	ldr	r3, [r4, #4]
 805582c:	6123      	str	r3, [r4, #16]
 805582e:	2300      	movs	r3, #0
 8055830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8055834:	e7a8      	b.n	8055788 <_printf_i+0x150>
 8055836:	6923      	ldr	r3, [r4, #16]
 8055838:	4632      	mov	r2, r6
 805583a:	4649      	mov	r1, r9
 805583c:	4640      	mov	r0, r8
 805583e:	47d0      	blx	sl
 8055840:	3001      	adds	r0, #1
 8055842:	d0ab      	beq.n	805579c <_printf_i+0x164>
 8055844:	6823      	ldr	r3, [r4, #0]
 8055846:	079b      	lsls	r3, r3, #30
 8055848:	d413      	bmi.n	8055872 <_printf_i+0x23a>
 805584a:	68e0      	ldr	r0, [r4, #12]
 805584c:	9b03      	ldr	r3, [sp, #12]
 805584e:	4298      	cmp	r0, r3
 8055850:	bfb8      	it	lt
 8055852:	4618      	movlt	r0, r3
 8055854:	e7a4      	b.n	80557a0 <_printf_i+0x168>
 8055856:	2301      	movs	r3, #1
 8055858:	4632      	mov	r2, r6
 805585a:	4649      	mov	r1, r9
 805585c:	4640      	mov	r0, r8
 805585e:	47d0      	blx	sl
 8055860:	3001      	adds	r0, #1
 8055862:	d09b      	beq.n	805579c <_printf_i+0x164>
 8055864:	3501      	adds	r5, #1
 8055866:	68e3      	ldr	r3, [r4, #12]
 8055868:	9903      	ldr	r1, [sp, #12]
 805586a:	1a5b      	subs	r3, r3, r1
 805586c:	42ab      	cmp	r3, r5
 805586e:	dcf2      	bgt.n	8055856 <_printf_i+0x21e>
 8055870:	e7eb      	b.n	805584a <_printf_i+0x212>
 8055872:	2500      	movs	r5, #0
 8055874:	f104 0619 	add.w	r6, r4, #25
 8055878:	e7f5      	b.n	8055866 <_printf_i+0x22e>
 805587a:	bf00      	nop
 805587c:	0805abce 	.word	0x0805abce
 8055880:	0805abdf 	.word	0x0805abdf

08055884 <_scanf_float>:
 8055884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8055888:	b087      	sub	sp, #28
 805588a:	4617      	mov	r7, r2
 805588c:	468b      	mov	fp, r1
 805588e:	4680      	mov	r8, r0
 8055890:	9303      	str	r3, [sp, #12]
 8055892:	460c      	mov	r4, r1
 8055894:	688b      	ldr	r3, [r1, #8]
 8055896:	1e5a      	subs	r2, r3, #1
 8055898:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 805589c:	bf8b      	itete	hi
 805589e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80558a2:	2300      	movls	r3, #0
 80558a4:	195b      	addhi	r3, r3, r5
 80558a6:	9302      	strls	r3, [sp, #8]
 80558a8:	f04f 0500 	mov.w	r5, #0
 80558ac:	bf84      	itt	hi
 80558ae:	9302      	strhi	r3, [sp, #8]
 80558b0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80558b4:	46aa      	mov	sl, r5
 80558b6:	46a9      	mov	r9, r5
 80558b8:	bf88      	it	hi
 80558ba:	608b      	strhi	r3, [r1, #8]
 80558bc:	680b      	ldr	r3, [r1, #0]
 80558be:	9501      	str	r5, [sp, #4]
 80558c0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80558c4:	f84b 3b1c 	str.w	r3, [fp], #28
 80558c8:	465e      	mov	r6, fp
 80558ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80558ce:	68a2      	ldr	r2, [r4, #8]
 80558d0:	b152      	cbz	r2, 80558e8 <_scanf_float+0x64>
 80558d2:	683b      	ldr	r3, [r7, #0]
 80558d4:	781b      	ldrb	r3, [r3, #0]
 80558d6:	2b4e      	cmp	r3, #78	; 0x4e
 80558d8:	d864      	bhi.n	80559a4 <_scanf_float+0x120>
 80558da:	2b40      	cmp	r3, #64	; 0x40
 80558dc:	d83c      	bhi.n	8055958 <_scanf_float+0xd4>
 80558de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80558e2:	b2c8      	uxtb	r0, r1
 80558e4:	280e      	cmp	r0, #14
 80558e6:	d93a      	bls.n	805595e <_scanf_float+0xda>
 80558e8:	f1b9 0f00 	cmp.w	r9, #0
 80558ec:	d003      	beq.n	80558f6 <_scanf_float+0x72>
 80558ee:	6823      	ldr	r3, [r4, #0]
 80558f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80558f4:	6023      	str	r3, [r4, #0]
 80558f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80558fa:	f1ba 0f01 	cmp.w	sl, #1
 80558fe:	f200 8113 	bhi.w	8055b28 <_scanf_float+0x2a4>
 8055902:	455e      	cmp	r6, fp
 8055904:	f200 8105 	bhi.w	8055b12 <_scanf_float+0x28e>
 8055908:	2501      	movs	r5, #1
 805590a:	4628      	mov	r0, r5
 805590c:	b007      	add	sp, #28
 805590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8055912:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8055916:	2a0d      	cmp	r2, #13
 8055918:	d8e6      	bhi.n	80558e8 <_scanf_float+0x64>
 805591a:	a101      	add	r1, pc, #4	; (adr r1, 8055920 <_scanf_float+0x9c>)
 805591c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8055920:	08055a5f 	.word	0x08055a5f
 8055924:	080558e9 	.word	0x080558e9
 8055928:	080558e9 	.word	0x080558e9
 805592c:	080558e9 	.word	0x080558e9
 8055930:	08055abf 	.word	0x08055abf
 8055934:	08055a97 	.word	0x08055a97
 8055938:	080558e9 	.word	0x080558e9
 805593c:	080558e9 	.word	0x080558e9
 8055940:	08055a6d 	.word	0x08055a6d
 8055944:	080558e9 	.word	0x080558e9
 8055948:	080558e9 	.word	0x080558e9
 805594c:	080558e9 	.word	0x080558e9
 8055950:	080558e9 	.word	0x080558e9
 8055954:	08055a25 	.word	0x08055a25
 8055958:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 805595c:	e7db      	b.n	8055916 <_scanf_float+0x92>
 805595e:	290e      	cmp	r1, #14
 8055960:	d8c2      	bhi.n	80558e8 <_scanf_float+0x64>
 8055962:	a001      	add	r0, pc, #4	; (adr r0, 8055968 <_scanf_float+0xe4>)
 8055964:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8055968:	08055a17 	.word	0x08055a17
 805596c:	080558e9 	.word	0x080558e9
 8055970:	08055a17 	.word	0x08055a17
 8055974:	08055aab 	.word	0x08055aab
 8055978:	080558e9 	.word	0x080558e9
 805597c:	080559c5 	.word	0x080559c5
 8055980:	08055a01 	.word	0x08055a01
 8055984:	08055a01 	.word	0x08055a01
 8055988:	08055a01 	.word	0x08055a01
 805598c:	08055a01 	.word	0x08055a01
 8055990:	08055a01 	.word	0x08055a01
 8055994:	08055a01 	.word	0x08055a01
 8055998:	08055a01 	.word	0x08055a01
 805599c:	08055a01 	.word	0x08055a01
 80559a0:	08055a01 	.word	0x08055a01
 80559a4:	2b6e      	cmp	r3, #110	; 0x6e
 80559a6:	d809      	bhi.n	80559bc <_scanf_float+0x138>
 80559a8:	2b60      	cmp	r3, #96	; 0x60
 80559aa:	d8b2      	bhi.n	8055912 <_scanf_float+0x8e>
 80559ac:	2b54      	cmp	r3, #84	; 0x54
 80559ae:	d077      	beq.n	8055aa0 <_scanf_float+0x21c>
 80559b0:	2b59      	cmp	r3, #89	; 0x59
 80559b2:	d199      	bne.n	80558e8 <_scanf_float+0x64>
 80559b4:	2d07      	cmp	r5, #7
 80559b6:	d197      	bne.n	80558e8 <_scanf_float+0x64>
 80559b8:	2508      	movs	r5, #8
 80559ba:	e029      	b.n	8055a10 <_scanf_float+0x18c>
 80559bc:	2b74      	cmp	r3, #116	; 0x74
 80559be:	d06f      	beq.n	8055aa0 <_scanf_float+0x21c>
 80559c0:	2b79      	cmp	r3, #121	; 0x79
 80559c2:	e7f6      	b.n	80559b2 <_scanf_float+0x12e>
 80559c4:	6821      	ldr	r1, [r4, #0]
 80559c6:	05c8      	lsls	r0, r1, #23
 80559c8:	d51a      	bpl.n	8055a00 <_scanf_float+0x17c>
 80559ca:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80559ce:	9b02      	ldr	r3, [sp, #8]
 80559d0:	f109 0901 	add.w	r9, r9, #1
 80559d4:	6021      	str	r1, [r4, #0]
 80559d6:	b11b      	cbz	r3, 80559e0 <_scanf_float+0x15c>
 80559d8:	3b01      	subs	r3, #1
 80559da:	3201      	adds	r2, #1
 80559dc:	9302      	str	r3, [sp, #8]
 80559de:	60a2      	str	r2, [r4, #8]
 80559e0:	68a3      	ldr	r3, [r4, #8]
 80559e2:	3b01      	subs	r3, #1
 80559e4:	60a3      	str	r3, [r4, #8]
 80559e6:	6923      	ldr	r3, [r4, #16]
 80559e8:	3301      	adds	r3, #1
 80559ea:	6123      	str	r3, [r4, #16]
 80559ec:	687b      	ldr	r3, [r7, #4]
 80559ee:	3b01      	subs	r3, #1
 80559f0:	2b00      	cmp	r3, #0
 80559f2:	607b      	str	r3, [r7, #4]
 80559f4:	f340 8084 	ble.w	8055b00 <_scanf_float+0x27c>
 80559f8:	683b      	ldr	r3, [r7, #0]
 80559fa:	3301      	adds	r3, #1
 80559fc:	603b      	str	r3, [r7, #0]
 80559fe:	e766      	b.n	80558ce <_scanf_float+0x4a>
 8055a00:	eb1a 0f05 	cmn.w	sl, r5
 8055a04:	f47f af70 	bne.w	80558e8 <_scanf_float+0x64>
 8055a08:	6822      	ldr	r2, [r4, #0]
 8055a0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8055a0e:	6022      	str	r2, [r4, #0]
 8055a10:	f806 3b01 	strb.w	r3, [r6], #1
 8055a14:	e7e4      	b.n	80559e0 <_scanf_float+0x15c>
 8055a16:	6822      	ldr	r2, [r4, #0]
 8055a18:	0610      	lsls	r0, r2, #24
 8055a1a:	f57f af65 	bpl.w	80558e8 <_scanf_float+0x64>
 8055a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8055a22:	e7f4      	b.n	8055a0e <_scanf_float+0x18a>
 8055a24:	f1ba 0f00 	cmp.w	sl, #0
 8055a28:	d10e      	bne.n	8055a48 <_scanf_float+0x1c4>
 8055a2a:	f1b9 0f00 	cmp.w	r9, #0
 8055a2e:	d10e      	bne.n	8055a4e <_scanf_float+0x1ca>
 8055a30:	6822      	ldr	r2, [r4, #0]
 8055a32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8055a36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8055a3a:	d108      	bne.n	8055a4e <_scanf_float+0x1ca>
 8055a3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8055a40:	f04f 0a01 	mov.w	sl, #1
 8055a44:	6022      	str	r2, [r4, #0]
 8055a46:	e7e3      	b.n	8055a10 <_scanf_float+0x18c>
 8055a48:	f1ba 0f02 	cmp.w	sl, #2
 8055a4c:	d055      	beq.n	8055afa <_scanf_float+0x276>
 8055a4e:	2d01      	cmp	r5, #1
 8055a50:	d002      	beq.n	8055a58 <_scanf_float+0x1d4>
 8055a52:	2d04      	cmp	r5, #4
 8055a54:	f47f af48 	bne.w	80558e8 <_scanf_float+0x64>
 8055a58:	3501      	adds	r5, #1
 8055a5a:	b2ed      	uxtb	r5, r5
 8055a5c:	e7d8      	b.n	8055a10 <_scanf_float+0x18c>
 8055a5e:	f1ba 0f01 	cmp.w	sl, #1
 8055a62:	f47f af41 	bne.w	80558e8 <_scanf_float+0x64>
 8055a66:	f04f 0a02 	mov.w	sl, #2
 8055a6a:	e7d1      	b.n	8055a10 <_scanf_float+0x18c>
 8055a6c:	b97d      	cbnz	r5, 8055a8e <_scanf_float+0x20a>
 8055a6e:	f1b9 0f00 	cmp.w	r9, #0
 8055a72:	f47f af3c 	bne.w	80558ee <_scanf_float+0x6a>
 8055a76:	6822      	ldr	r2, [r4, #0]
 8055a78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8055a7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8055a80:	f47f af39 	bne.w	80558f6 <_scanf_float+0x72>
 8055a84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8055a88:	2501      	movs	r5, #1
 8055a8a:	6022      	str	r2, [r4, #0]
 8055a8c:	e7c0      	b.n	8055a10 <_scanf_float+0x18c>
 8055a8e:	2d03      	cmp	r5, #3
 8055a90:	d0e2      	beq.n	8055a58 <_scanf_float+0x1d4>
 8055a92:	2d05      	cmp	r5, #5
 8055a94:	e7de      	b.n	8055a54 <_scanf_float+0x1d0>
 8055a96:	2d02      	cmp	r5, #2
 8055a98:	f47f af26 	bne.w	80558e8 <_scanf_float+0x64>
 8055a9c:	2503      	movs	r5, #3
 8055a9e:	e7b7      	b.n	8055a10 <_scanf_float+0x18c>
 8055aa0:	2d06      	cmp	r5, #6
 8055aa2:	f47f af21 	bne.w	80558e8 <_scanf_float+0x64>
 8055aa6:	2507      	movs	r5, #7
 8055aa8:	e7b2      	b.n	8055a10 <_scanf_float+0x18c>
 8055aaa:	6822      	ldr	r2, [r4, #0]
 8055aac:	0591      	lsls	r1, r2, #22
 8055aae:	f57f af1b 	bpl.w	80558e8 <_scanf_float+0x64>
 8055ab2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8055ab6:	f8cd 9004 	str.w	r9, [sp, #4]
 8055aba:	6022      	str	r2, [r4, #0]
 8055abc:	e7a8      	b.n	8055a10 <_scanf_float+0x18c>
 8055abe:	6822      	ldr	r2, [r4, #0]
 8055ac0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8055ac4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8055ac8:	d006      	beq.n	8055ad8 <_scanf_float+0x254>
 8055aca:	0550      	lsls	r0, r2, #21
 8055acc:	f57f af0c 	bpl.w	80558e8 <_scanf_float+0x64>
 8055ad0:	f1b9 0f00 	cmp.w	r9, #0
 8055ad4:	f43f af0f 	beq.w	80558f6 <_scanf_float+0x72>
 8055ad8:	0591      	lsls	r1, r2, #22
 8055ada:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8055ade:	bf58      	it	pl
 8055ae0:	9901      	ldrpl	r1, [sp, #4]
 8055ae2:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8055ae6:	bf58      	it	pl
 8055ae8:	eba9 0101 	subpl.w	r1, r9, r1
 8055aec:	6022      	str	r2, [r4, #0]
 8055aee:	f04f 0900 	mov.w	r9, #0
 8055af2:	bf58      	it	pl
 8055af4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8055af8:	e78a      	b.n	8055a10 <_scanf_float+0x18c>
 8055afa:	f04f 0a03 	mov.w	sl, #3
 8055afe:	e787      	b.n	8055a10 <_scanf_float+0x18c>
 8055b00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8055b04:	4639      	mov	r1, r7
 8055b06:	4640      	mov	r0, r8
 8055b08:	4798      	blx	r3
 8055b0a:	2800      	cmp	r0, #0
 8055b0c:	f43f aedf 	beq.w	80558ce <_scanf_float+0x4a>
 8055b10:	e6ea      	b.n	80558e8 <_scanf_float+0x64>
 8055b12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8055b16:	463a      	mov	r2, r7
 8055b18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8055b1c:	4640      	mov	r0, r8
 8055b1e:	4798      	blx	r3
 8055b20:	6923      	ldr	r3, [r4, #16]
 8055b22:	3b01      	subs	r3, #1
 8055b24:	6123      	str	r3, [r4, #16]
 8055b26:	e6ec      	b.n	8055902 <_scanf_float+0x7e>
 8055b28:	1e6b      	subs	r3, r5, #1
 8055b2a:	2b06      	cmp	r3, #6
 8055b2c:	d825      	bhi.n	8055b7a <_scanf_float+0x2f6>
 8055b2e:	2d02      	cmp	r5, #2
 8055b30:	d836      	bhi.n	8055ba0 <_scanf_float+0x31c>
 8055b32:	455e      	cmp	r6, fp
 8055b34:	f67f aee8 	bls.w	8055908 <_scanf_float+0x84>
 8055b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8055b3c:	463a      	mov	r2, r7
 8055b3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8055b42:	4640      	mov	r0, r8
 8055b44:	4798      	blx	r3
 8055b46:	6923      	ldr	r3, [r4, #16]
 8055b48:	3b01      	subs	r3, #1
 8055b4a:	6123      	str	r3, [r4, #16]
 8055b4c:	e7f1      	b.n	8055b32 <_scanf_float+0x2ae>
 8055b4e:	9802      	ldr	r0, [sp, #8]
 8055b50:	463a      	mov	r2, r7
 8055b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8055b56:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8055b5a:	9002      	str	r0, [sp, #8]
 8055b5c:	4640      	mov	r0, r8
 8055b5e:	4798      	blx	r3
 8055b60:	6923      	ldr	r3, [r4, #16]
 8055b62:	3b01      	subs	r3, #1
 8055b64:	6123      	str	r3, [r4, #16]
 8055b66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8055b6a:	fa5f fa8a 	uxtb.w	sl, sl
 8055b6e:	f1ba 0f02 	cmp.w	sl, #2
 8055b72:	d1ec      	bne.n	8055b4e <_scanf_float+0x2ca>
 8055b74:	3d03      	subs	r5, #3
 8055b76:	b2ed      	uxtb	r5, r5
 8055b78:	1b76      	subs	r6, r6, r5
 8055b7a:	6823      	ldr	r3, [r4, #0]
 8055b7c:	05da      	lsls	r2, r3, #23
 8055b7e:	d52e      	bpl.n	8055bde <_scanf_float+0x35a>
 8055b80:	055b      	lsls	r3, r3, #21
 8055b82:	d510      	bpl.n	8055ba6 <_scanf_float+0x322>
 8055b84:	455e      	cmp	r6, fp
 8055b86:	f67f aebf 	bls.w	8055908 <_scanf_float+0x84>
 8055b8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8055b8e:	463a      	mov	r2, r7
 8055b90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8055b94:	4640      	mov	r0, r8
 8055b96:	4798      	blx	r3
 8055b98:	6923      	ldr	r3, [r4, #16]
 8055b9a:	3b01      	subs	r3, #1
 8055b9c:	6123      	str	r3, [r4, #16]
 8055b9e:	e7f1      	b.n	8055b84 <_scanf_float+0x300>
 8055ba0:	46aa      	mov	sl, r5
 8055ba2:	9602      	str	r6, [sp, #8]
 8055ba4:	e7df      	b.n	8055b66 <_scanf_float+0x2e2>
 8055ba6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8055baa:	1e75      	subs	r5, r6, #1
 8055bac:	6923      	ldr	r3, [r4, #16]
 8055bae:	2965      	cmp	r1, #101	; 0x65
 8055bb0:	f103 33ff 	add.w	r3, r3, #4294967295
 8055bb4:	6123      	str	r3, [r4, #16]
 8055bb6:	d00c      	beq.n	8055bd2 <_scanf_float+0x34e>
 8055bb8:	2945      	cmp	r1, #69	; 0x45
 8055bba:	d00a      	beq.n	8055bd2 <_scanf_float+0x34e>
 8055bbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8055bc0:	463a      	mov	r2, r7
 8055bc2:	4640      	mov	r0, r8
 8055bc4:	1eb5      	subs	r5, r6, #2
 8055bc6:	4798      	blx	r3
 8055bc8:	6923      	ldr	r3, [r4, #16]
 8055bca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8055bce:	3b01      	subs	r3, #1
 8055bd0:	6123      	str	r3, [r4, #16]
 8055bd2:	462e      	mov	r6, r5
 8055bd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8055bd8:	463a      	mov	r2, r7
 8055bda:	4640      	mov	r0, r8
 8055bdc:	4798      	blx	r3
 8055bde:	6825      	ldr	r5, [r4, #0]
 8055be0:	f015 0510 	ands.w	r5, r5, #16
 8055be4:	d158      	bne.n	8055c98 <_scanf_float+0x414>
 8055be6:	7035      	strb	r5, [r6, #0]
 8055be8:	6823      	ldr	r3, [r4, #0]
 8055bea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8055bee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8055bf2:	d11c      	bne.n	8055c2e <_scanf_float+0x3aa>
 8055bf4:	9b01      	ldr	r3, [sp, #4]
 8055bf6:	454b      	cmp	r3, r9
 8055bf8:	eba3 0209 	sub.w	r2, r3, r9
 8055bfc:	d124      	bne.n	8055c48 <_scanf_float+0x3c4>
 8055bfe:	2200      	movs	r2, #0
 8055c00:	4659      	mov	r1, fp
 8055c02:	4640      	mov	r0, r8
 8055c04:	f000 ff42 	bl	8056a8c <_strtod_r>
 8055c08:	6821      	ldr	r1, [r4, #0]
 8055c0a:	9b03      	ldr	r3, [sp, #12]
 8055c0c:	f011 0f02 	tst.w	r1, #2
 8055c10:	681b      	ldr	r3, [r3, #0]
 8055c12:	ec57 6b10 	vmov	r6, r7, d0
 8055c16:	f103 0204 	add.w	r2, r3, #4
 8055c1a:	d020      	beq.n	8055c5e <_scanf_float+0x3da>
 8055c1c:	9903      	ldr	r1, [sp, #12]
 8055c1e:	600a      	str	r2, [r1, #0]
 8055c20:	681b      	ldr	r3, [r3, #0]
 8055c22:	e9c3 6700 	strd	r6, r7, [r3]
 8055c26:	68e3      	ldr	r3, [r4, #12]
 8055c28:	3301      	adds	r3, #1
 8055c2a:	60e3      	str	r3, [r4, #12]
 8055c2c:	e66d      	b.n	805590a <_scanf_float+0x86>
 8055c2e:	9b04      	ldr	r3, [sp, #16]
 8055c30:	2b00      	cmp	r3, #0
 8055c32:	d0e4      	beq.n	8055bfe <_scanf_float+0x37a>
 8055c34:	9905      	ldr	r1, [sp, #20]
 8055c36:	230a      	movs	r3, #10
 8055c38:	462a      	mov	r2, r5
 8055c3a:	4640      	mov	r0, r8
 8055c3c:	3101      	adds	r1, #1
 8055c3e:	f000 ffad 	bl	8056b9c <_strtol_r>
 8055c42:	9b04      	ldr	r3, [sp, #16]
 8055c44:	9e05      	ldr	r6, [sp, #20]
 8055c46:	1ac2      	subs	r2, r0, r3
 8055c48:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8055c4c:	4913      	ldr	r1, [pc, #76]	; (8055c9c <_scanf_float+0x418>)
 8055c4e:	429e      	cmp	r6, r3
 8055c50:	bf28      	it	cs
 8055c52:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8055c56:	4630      	mov	r0, r6
 8055c58:	f000 f8ce 	bl	8055df8 <siprintf>
 8055c5c:	e7cf      	b.n	8055bfe <_scanf_float+0x37a>
 8055c5e:	f011 0f04 	tst.w	r1, #4
 8055c62:	9903      	ldr	r1, [sp, #12]
 8055c64:	600a      	str	r2, [r1, #0]
 8055c66:	d1db      	bne.n	8055c20 <_scanf_float+0x39c>
 8055c68:	f8d3 8000 	ldr.w	r8, [r3]
 8055c6c:	ee10 2a10 	vmov	r2, s0
 8055c70:	463b      	mov	r3, r7
 8055c72:	ee10 0a10 	vmov	r0, s0
 8055c76:	4639      	mov	r1, r7
 8055c78:	f7ea ff3c 	bl	8040af4 <__aeabi_dcmpun>
 8055c7c:	b128      	cbz	r0, 8055c8a <_scanf_float+0x406>
 8055c7e:	4808      	ldr	r0, [pc, #32]	; (8055ca0 <_scanf_float+0x41c>)
 8055c80:	f000 f8b4 	bl	8055dec <nanf>
 8055c84:	ed88 0a00 	vstr	s0, [r8]
 8055c88:	e7cd      	b.n	8055c26 <_scanf_float+0x3a2>
 8055c8a:	4630      	mov	r0, r6
 8055c8c:	4639      	mov	r1, r7
 8055c8e:	f7ea ff8f 	bl	8040bb0 <__aeabi_d2f>
 8055c92:	f8c8 0000 	str.w	r0, [r8]
 8055c96:	e7c6      	b.n	8055c26 <_scanf_float+0x3a2>
 8055c98:	2500      	movs	r5, #0
 8055c9a:	e636      	b.n	805590a <_scanf_float+0x86>
 8055c9c:	0805abf0 	.word	0x0805abf0
 8055ca0:	0805b068 	.word	0x0805b068

08055ca4 <iprintf>:
 8055ca4:	b40f      	push	{r0, r1, r2, r3}
 8055ca6:	4b0a      	ldr	r3, [pc, #40]	; (8055cd0 <iprintf+0x2c>)
 8055ca8:	b513      	push	{r0, r1, r4, lr}
 8055caa:	681c      	ldr	r4, [r3, #0]
 8055cac:	b124      	cbz	r4, 8055cb8 <iprintf+0x14>
 8055cae:	69a3      	ldr	r3, [r4, #24]
 8055cb0:	b913      	cbnz	r3, 8055cb8 <iprintf+0x14>
 8055cb2:	4620      	mov	r0, r4
 8055cb4:	f001 ffc6 	bl	8057c44 <__sinit>
 8055cb8:	ab05      	add	r3, sp, #20
 8055cba:	9a04      	ldr	r2, [sp, #16]
 8055cbc:	68a1      	ldr	r1, [r4, #8]
 8055cbe:	4620      	mov	r0, r4
 8055cc0:	9301      	str	r3, [sp, #4]
 8055cc2:	f003 fb5f 	bl	8059384 <_vfiprintf_r>
 8055cc6:	b002      	add	sp, #8
 8055cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8055ccc:	b004      	add	sp, #16
 8055cce:	4770      	bx	lr
 8055cd0:	200182b0 	.word	0x200182b0

08055cd4 <putchar>:
 8055cd4:	4b09      	ldr	r3, [pc, #36]	; (8055cfc <putchar+0x28>)
 8055cd6:	b513      	push	{r0, r1, r4, lr}
 8055cd8:	681c      	ldr	r4, [r3, #0]
 8055cda:	4601      	mov	r1, r0
 8055cdc:	b134      	cbz	r4, 8055cec <putchar+0x18>
 8055cde:	69a3      	ldr	r3, [r4, #24]
 8055ce0:	b923      	cbnz	r3, 8055cec <putchar+0x18>
 8055ce2:	9001      	str	r0, [sp, #4]
 8055ce4:	4620      	mov	r0, r4
 8055ce6:	f001 ffad 	bl	8057c44 <__sinit>
 8055cea:	9901      	ldr	r1, [sp, #4]
 8055cec:	68a2      	ldr	r2, [r4, #8]
 8055cee:	4620      	mov	r0, r4
 8055cf0:	b002      	add	sp, #8
 8055cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8055cf6:	f003 bc75 	b.w	80595e4 <_putc_r>
 8055cfa:	bf00      	nop
 8055cfc:	200182b0 	.word	0x200182b0

08055d00 <_puts_r>:
 8055d00:	b570      	push	{r4, r5, r6, lr}
 8055d02:	460e      	mov	r6, r1
 8055d04:	4605      	mov	r5, r0
 8055d06:	b118      	cbz	r0, 8055d10 <_puts_r+0x10>
 8055d08:	6983      	ldr	r3, [r0, #24]
 8055d0a:	b90b      	cbnz	r3, 8055d10 <_puts_r+0x10>
 8055d0c:	f001 ff9a 	bl	8057c44 <__sinit>
 8055d10:	69ab      	ldr	r3, [r5, #24]
 8055d12:	68ac      	ldr	r4, [r5, #8]
 8055d14:	b913      	cbnz	r3, 8055d1c <_puts_r+0x1c>
 8055d16:	4628      	mov	r0, r5
 8055d18:	f001 ff94 	bl	8057c44 <__sinit>
 8055d1c:	4b2c      	ldr	r3, [pc, #176]	; (8055dd0 <_puts_r+0xd0>)
 8055d1e:	429c      	cmp	r4, r3
 8055d20:	d120      	bne.n	8055d64 <_puts_r+0x64>
 8055d22:	686c      	ldr	r4, [r5, #4]
 8055d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8055d26:	07db      	lsls	r3, r3, #31
 8055d28:	d405      	bmi.n	8055d36 <_puts_r+0x36>
 8055d2a:	89a3      	ldrh	r3, [r4, #12]
 8055d2c:	0598      	lsls	r0, r3, #22
 8055d2e:	d402      	bmi.n	8055d36 <_puts_r+0x36>
 8055d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8055d32:	f002 fb98 	bl	8058466 <__retarget_lock_acquire_recursive>
 8055d36:	89a3      	ldrh	r3, [r4, #12]
 8055d38:	0719      	lsls	r1, r3, #28
 8055d3a:	d51d      	bpl.n	8055d78 <_puts_r+0x78>
 8055d3c:	6923      	ldr	r3, [r4, #16]
 8055d3e:	b1db      	cbz	r3, 8055d78 <_puts_r+0x78>
 8055d40:	3e01      	subs	r6, #1
 8055d42:	68a3      	ldr	r3, [r4, #8]
 8055d44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8055d48:	3b01      	subs	r3, #1
 8055d4a:	60a3      	str	r3, [r4, #8]
 8055d4c:	bb39      	cbnz	r1, 8055d9e <_puts_r+0x9e>
 8055d4e:	2b00      	cmp	r3, #0
 8055d50:	da38      	bge.n	8055dc4 <_puts_r+0xc4>
 8055d52:	4622      	mov	r2, r4
 8055d54:	210a      	movs	r1, #10
 8055d56:	4628      	mov	r0, r5
 8055d58:	f000 ff22 	bl	8056ba0 <__swbuf_r>
 8055d5c:	3001      	adds	r0, #1
 8055d5e:	d011      	beq.n	8055d84 <_puts_r+0x84>
 8055d60:	250a      	movs	r5, #10
 8055d62:	e011      	b.n	8055d88 <_puts_r+0x88>
 8055d64:	4b1b      	ldr	r3, [pc, #108]	; (8055dd4 <_puts_r+0xd4>)
 8055d66:	429c      	cmp	r4, r3
 8055d68:	d101      	bne.n	8055d6e <_puts_r+0x6e>
 8055d6a:	68ac      	ldr	r4, [r5, #8]
 8055d6c:	e7da      	b.n	8055d24 <_puts_r+0x24>
 8055d6e:	4b1a      	ldr	r3, [pc, #104]	; (8055dd8 <_puts_r+0xd8>)
 8055d70:	429c      	cmp	r4, r3
 8055d72:	bf08      	it	eq
 8055d74:	68ec      	ldreq	r4, [r5, #12]
 8055d76:	e7d5      	b.n	8055d24 <_puts_r+0x24>
 8055d78:	4621      	mov	r1, r4
 8055d7a:	4628      	mov	r0, r5
 8055d7c:	f000 ff62 	bl	8056c44 <__swsetup_r>
 8055d80:	2800      	cmp	r0, #0
 8055d82:	d0dd      	beq.n	8055d40 <_puts_r+0x40>
 8055d84:	f04f 35ff 	mov.w	r5, #4294967295
 8055d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8055d8a:	07da      	lsls	r2, r3, #31
 8055d8c:	d405      	bmi.n	8055d9a <_puts_r+0x9a>
 8055d8e:	89a3      	ldrh	r3, [r4, #12]
 8055d90:	059b      	lsls	r3, r3, #22
 8055d92:	d402      	bmi.n	8055d9a <_puts_r+0x9a>
 8055d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8055d96:	f002 fb67 	bl	8058468 <__retarget_lock_release_recursive>
 8055d9a:	4628      	mov	r0, r5
 8055d9c:	bd70      	pop	{r4, r5, r6, pc}
 8055d9e:	2b00      	cmp	r3, #0
 8055da0:	da04      	bge.n	8055dac <_puts_r+0xac>
 8055da2:	69a2      	ldr	r2, [r4, #24]
 8055da4:	429a      	cmp	r2, r3
 8055da6:	dc06      	bgt.n	8055db6 <_puts_r+0xb6>
 8055da8:	290a      	cmp	r1, #10
 8055daa:	d004      	beq.n	8055db6 <_puts_r+0xb6>
 8055dac:	6823      	ldr	r3, [r4, #0]
 8055dae:	1c5a      	adds	r2, r3, #1
 8055db0:	6022      	str	r2, [r4, #0]
 8055db2:	7019      	strb	r1, [r3, #0]
 8055db4:	e7c5      	b.n	8055d42 <_puts_r+0x42>
 8055db6:	4622      	mov	r2, r4
 8055db8:	4628      	mov	r0, r5
 8055dba:	f000 fef1 	bl	8056ba0 <__swbuf_r>
 8055dbe:	3001      	adds	r0, #1
 8055dc0:	d1bf      	bne.n	8055d42 <_puts_r+0x42>
 8055dc2:	e7df      	b.n	8055d84 <_puts_r+0x84>
 8055dc4:	6823      	ldr	r3, [r4, #0]
 8055dc6:	250a      	movs	r5, #10
 8055dc8:	1c5a      	adds	r2, r3, #1
 8055dca:	6022      	str	r2, [r4, #0]
 8055dcc:	701d      	strb	r5, [r3, #0]
 8055dce:	e7db      	b.n	8055d88 <_puts_r+0x88>
 8055dd0:	0805ae00 	.word	0x0805ae00
 8055dd4:	0805ae20 	.word	0x0805ae20
 8055dd8:	0805ade0 	.word	0x0805ade0

08055ddc <puts>:
 8055ddc:	4b02      	ldr	r3, [pc, #8]	; (8055de8 <puts+0xc>)
 8055dde:	4601      	mov	r1, r0
 8055de0:	6818      	ldr	r0, [r3, #0]
 8055de2:	f7ff bf8d 	b.w	8055d00 <_puts_r>
 8055de6:	bf00      	nop
 8055de8:	200182b0 	.word	0x200182b0

08055dec <nanf>:
 8055dec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8055df4 <nanf+0x8>
 8055df0:	4770      	bx	lr
 8055df2:	bf00      	nop
 8055df4:	7fc00000 	.word	0x7fc00000

08055df8 <siprintf>:
 8055df8:	b40e      	push	{r1, r2, r3}
 8055dfa:	b500      	push	{lr}
 8055dfc:	b09c      	sub	sp, #112	; 0x70
 8055dfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8055e02:	ab1d      	add	r3, sp, #116	; 0x74
 8055e04:	9002      	str	r0, [sp, #8]
 8055e06:	9006      	str	r0, [sp, #24]
 8055e08:	9107      	str	r1, [sp, #28]
 8055e0a:	9104      	str	r1, [sp, #16]
 8055e0c:	4808      	ldr	r0, [pc, #32]	; (8055e30 <siprintf+0x38>)
 8055e0e:	4909      	ldr	r1, [pc, #36]	; (8055e34 <siprintf+0x3c>)
 8055e10:	f853 2b04 	ldr.w	r2, [r3], #4
 8055e14:	9105      	str	r1, [sp, #20]
 8055e16:	a902      	add	r1, sp, #8
 8055e18:	6800      	ldr	r0, [r0, #0]
 8055e1a:	9301      	str	r3, [sp, #4]
 8055e1c:	f003 f988 	bl	8059130 <_svfiprintf_r>
 8055e20:	9b02      	ldr	r3, [sp, #8]
 8055e22:	2200      	movs	r2, #0
 8055e24:	701a      	strb	r2, [r3, #0]
 8055e26:	b01c      	add	sp, #112	; 0x70
 8055e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8055e2c:	b003      	add	sp, #12
 8055e2e:	4770      	bx	lr
 8055e30:	200182b0 	.word	0x200182b0
 8055e34:	ffff0208 	.word	0xffff0208

08055e38 <sulp>:
 8055e38:	b570      	push	{r4, r5, r6, lr}
 8055e3a:	4604      	mov	r4, r0
 8055e3c:	460d      	mov	r5, r1
 8055e3e:	4616      	mov	r6, r2
 8055e40:	ec45 4b10 	vmov	d0, r4, r5
 8055e44:	f002 ff12 	bl	8058c6c <__ulp>
 8055e48:	ec51 0b10 	vmov	r0, r1, d0
 8055e4c:	b17e      	cbz	r6, 8055e6e <sulp+0x36>
 8055e4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8055e52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8055e56:	2b00      	cmp	r3, #0
 8055e58:	dd09      	ble.n	8055e6e <sulp+0x36>
 8055e5a:	051b      	lsls	r3, r3, #20
 8055e5c:	2400      	movs	r4, #0
 8055e5e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8055e62:	4622      	mov	r2, r4
 8055e64:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8055e68:	462b      	mov	r3, r5
 8055e6a:	f7ea fba9 	bl	80405c0 <__aeabi_dmul>
 8055e6e:	bd70      	pop	{r4, r5, r6, pc}

08055e70 <_strtod_l>:
 8055e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8055e74:	461f      	mov	r7, r3
 8055e76:	b0a3      	sub	sp, #140	; 0x8c
 8055e78:	2300      	movs	r3, #0
 8055e7a:	4604      	mov	r4, r0
 8055e7c:	4688      	mov	r8, r1
 8055e7e:	9219      	str	r2, [sp, #100]	; 0x64
 8055e80:	931e      	str	r3, [sp, #120]	; 0x78
 8055e82:	f04f 0a00 	mov.w	sl, #0
 8055e86:	4ba3      	ldr	r3, [pc, #652]	; (8056114 <_strtod_l+0x2a4>)
 8055e88:	f04f 0b00 	mov.w	fp, #0
 8055e8c:	681b      	ldr	r3, [r3, #0]
 8055e8e:	4618      	mov	r0, r3
 8055e90:	9307      	str	r3, [sp, #28]
 8055e92:	f7ea f9d1 	bl	8040238 <strlen>
 8055e96:	4605      	mov	r5, r0
 8055e98:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8055e9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8055e9e:	781a      	ldrb	r2, [r3, #0]
 8055ea0:	2a2b      	cmp	r2, #43	; 0x2b
 8055ea2:	d04c      	beq.n	8055f3e <_strtod_l+0xce>
 8055ea4:	d839      	bhi.n	8055f1a <_strtod_l+0xaa>
 8055ea6:	2a0d      	cmp	r2, #13
 8055ea8:	d832      	bhi.n	8055f10 <_strtod_l+0xa0>
 8055eaa:	2a08      	cmp	r2, #8
 8055eac:	d832      	bhi.n	8055f14 <_strtod_l+0xa4>
 8055eae:	2a00      	cmp	r2, #0
 8055eb0:	d03c      	beq.n	8055f2c <_strtod_l+0xbc>
 8055eb2:	2300      	movs	r3, #0
 8055eb4:	930e      	str	r3, [sp, #56]	; 0x38
 8055eb6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8055eb8:	7833      	ldrb	r3, [r6, #0]
 8055eba:	2b30      	cmp	r3, #48	; 0x30
 8055ebc:	f040 80b5 	bne.w	805602a <_strtod_l+0x1ba>
 8055ec0:	7873      	ldrb	r3, [r6, #1]
 8055ec2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8055ec6:	2b58      	cmp	r3, #88	; 0x58
 8055ec8:	d16c      	bne.n	8055fa4 <_strtod_l+0x134>
 8055eca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8055ecc:	a91d      	add	r1, sp, #116	; 0x74
 8055ece:	9702      	str	r7, [sp, #8]
 8055ed0:	4620      	mov	r0, r4
 8055ed2:	9301      	str	r3, [sp, #4]
 8055ed4:	ab1e      	add	r3, sp, #120	; 0x78
 8055ed6:	4a90      	ldr	r2, [pc, #576]	; (8056118 <_strtod_l+0x2a8>)
 8055ed8:	9300      	str	r3, [sp, #0]
 8055eda:	ab1f      	add	r3, sp, #124	; 0x7c
 8055edc:	f001 ffb6 	bl	8057e4c <__gethex>
 8055ee0:	f010 0707 	ands.w	r7, r0, #7
 8055ee4:	4605      	mov	r5, r0
 8055ee6:	d005      	beq.n	8055ef4 <_strtod_l+0x84>
 8055ee8:	2f06      	cmp	r7, #6
 8055eea:	d12a      	bne.n	8055f42 <_strtod_l+0xd2>
 8055eec:	3601      	adds	r6, #1
 8055eee:	2300      	movs	r3, #0
 8055ef0:	961d      	str	r6, [sp, #116]	; 0x74
 8055ef2:	930e      	str	r3, [sp, #56]	; 0x38
 8055ef4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8055ef6:	2b00      	cmp	r3, #0
 8055ef8:	f040 859a 	bne.w	8056a30 <_strtod_l+0xbc0>
 8055efc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8055efe:	b1db      	cbz	r3, 8055f38 <_strtod_l+0xc8>
 8055f00:	4652      	mov	r2, sl
 8055f02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8055f06:	ec43 2b10 	vmov	d0, r2, r3
 8055f0a:	b023      	add	sp, #140	; 0x8c
 8055f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8055f10:	2a20      	cmp	r2, #32
 8055f12:	d1ce      	bne.n	8055eb2 <_strtod_l+0x42>
 8055f14:	3301      	adds	r3, #1
 8055f16:	931d      	str	r3, [sp, #116]	; 0x74
 8055f18:	e7c0      	b.n	8055e9c <_strtod_l+0x2c>
 8055f1a:	2a2d      	cmp	r2, #45	; 0x2d
 8055f1c:	d1c9      	bne.n	8055eb2 <_strtod_l+0x42>
 8055f1e:	2201      	movs	r2, #1
 8055f20:	920e      	str	r2, [sp, #56]	; 0x38
 8055f22:	1c5a      	adds	r2, r3, #1
 8055f24:	921d      	str	r2, [sp, #116]	; 0x74
 8055f26:	785b      	ldrb	r3, [r3, #1]
 8055f28:	2b00      	cmp	r3, #0
 8055f2a:	d1c4      	bne.n	8055eb6 <_strtod_l+0x46>
 8055f2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8055f2e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8055f32:	2b00      	cmp	r3, #0
 8055f34:	f040 857a 	bne.w	8056a2c <_strtod_l+0xbbc>
 8055f38:	4652      	mov	r2, sl
 8055f3a:	465b      	mov	r3, fp
 8055f3c:	e7e3      	b.n	8055f06 <_strtod_l+0x96>
 8055f3e:	2200      	movs	r2, #0
 8055f40:	e7ee      	b.n	8055f20 <_strtod_l+0xb0>
 8055f42:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8055f44:	b13a      	cbz	r2, 8055f56 <_strtod_l+0xe6>
 8055f46:	2135      	movs	r1, #53	; 0x35
 8055f48:	a820      	add	r0, sp, #128	; 0x80
 8055f4a:	f002 ff98 	bl	8058e7e <__copybits>
 8055f4e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8055f50:	4620      	mov	r0, r4
 8055f52:	f002 fb57 	bl	8058604 <_Bfree>
 8055f56:	3f01      	subs	r7, #1
 8055f58:	2f05      	cmp	r7, #5
 8055f5a:	d807      	bhi.n	8055f6c <_strtod_l+0xfc>
 8055f5c:	e8df f007 	tbb	[pc, r7]
 8055f60:	1d180b0e 	.word	0x1d180b0e
 8055f64:	030e      	.short	0x030e
 8055f66:	f04f 0b00 	mov.w	fp, #0
 8055f6a:	46da      	mov	sl, fp
 8055f6c:	0728      	lsls	r0, r5, #28
 8055f6e:	d5c1      	bpl.n	8055ef4 <_strtod_l+0x84>
 8055f70:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8055f74:	e7be      	b.n	8055ef4 <_strtod_l+0x84>
 8055f76:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8055f7a:	e7f7      	b.n	8055f6c <_strtod_l+0xfc>
 8055f7c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8055f80:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8055f82:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8055f86:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8055f8a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8055f8e:	e7ed      	b.n	8055f6c <_strtod_l+0xfc>
 8055f90:	f8df b188 	ldr.w	fp, [pc, #392]	; 805611c <_strtod_l+0x2ac>
 8055f94:	f04f 0a00 	mov.w	sl, #0
 8055f98:	e7e8      	b.n	8055f6c <_strtod_l+0xfc>
 8055f9a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8055f9e:	f04f 3aff 	mov.w	sl, #4294967295
 8055fa2:	e7e3      	b.n	8055f6c <_strtod_l+0xfc>
 8055fa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8055fa6:	1c5a      	adds	r2, r3, #1
 8055fa8:	921d      	str	r2, [sp, #116]	; 0x74
 8055faa:	785b      	ldrb	r3, [r3, #1]
 8055fac:	2b30      	cmp	r3, #48	; 0x30
 8055fae:	d0f9      	beq.n	8055fa4 <_strtod_l+0x134>
 8055fb0:	2b00      	cmp	r3, #0
 8055fb2:	d09f      	beq.n	8055ef4 <_strtod_l+0x84>
 8055fb4:	2301      	movs	r3, #1
 8055fb6:	f04f 0900 	mov.w	r9, #0
 8055fba:	9304      	str	r3, [sp, #16]
 8055fbc:	220a      	movs	r2, #10
 8055fbe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8055fc0:	464f      	mov	r7, r9
 8055fc2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8055fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8055fc8:	981d      	ldr	r0, [sp, #116]	; 0x74
 8055fca:	7806      	ldrb	r6, [r0, #0]
 8055fcc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8055fd0:	b2d9      	uxtb	r1, r3
 8055fd2:	2909      	cmp	r1, #9
 8055fd4:	d92b      	bls.n	805602e <_strtod_l+0x1be>
 8055fd6:	462a      	mov	r2, r5
 8055fd8:	9907      	ldr	r1, [sp, #28]
 8055fda:	f003 fba8 	bl	805972e <strncmp>
 8055fde:	2800      	cmp	r0, #0
 8055fe0:	d034      	beq.n	805604c <_strtod_l+0x1dc>
 8055fe2:	2000      	movs	r0, #0
 8055fe4:	4633      	mov	r3, r6
 8055fe6:	463d      	mov	r5, r7
 8055fe8:	4602      	mov	r2, r0
 8055fea:	9007      	str	r0, [sp, #28]
 8055fec:	2b65      	cmp	r3, #101	; 0x65
 8055fee:	d001      	beq.n	8055ff4 <_strtod_l+0x184>
 8055ff0:	2b45      	cmp	r3, #69	; 0x45
 8055ff2:	d118      	bne.n	8056026 <_strtod_l+0x1b6>
 8055ff4:	b91d      	cbnz	r5, 8055ffe <_strtod_l+0x18e>
 8055ff6:	9b04      	ldr	r3, [sp, #16]
 8055ff8:	4303      	orrs	r3, r0
 8055ffa:	d097      	beq.n	8055f2c <_strtod_l+0xbc>
 8055ffc:	2500      	movs	r5, #0
 8055ffe:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8056002:	f108 0301 	add.w	r3, r8, #1
 8056006:	931d      	str	r3, [sp, #116]	; 0x74
 8056008:	f898 3001 	ldrb.w	r3, [r8, #1]
 805600c:	2b2b      	cmp	r3, #43	; 0x2b
 805600e:	d075      	beq.n	80560fc <_strtod_l+0x28c>
 8056010:	2b2d      	cmp	r3, #45	; 0x2d
 8056012:	d07b      	beq.n	805610c <_strtod_l+0x29c>
 8056014:	f04f 0c00 	mov.w	ip, #0
 8056018:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 805601c:	2909      	cmp	r1, #9
 805601e:	f240 8083 	bls.w	8056128 <_strtod_l+0x2b8>
 8056022:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8056026:	2600      	movs	r6, #0
 8056028:	e09e      	b.n	8056168 <_strtod_l+0x2f8>
 805602a:	2300      	movs	r3, #0
 805602c:	e7c3      	b.n	8055fb6 <_strtod_l+0x146>
 805602e:	2f08      	cmp	r7, #8
 8056030:	f100 0001 	add.w	r0, r0, #1
 8056034:	f107 0701 	add.w	r7, r7, #1
 8056038:	bfd4      	ite	le
 805603a:	9909      	ldrle	r1, [sp, #36]	; 0x24
 805603c:	fb02 3909 	mlagt	r9, r2, r9, r3
 8056040:	901d      	str	r0, [sp, #116]	; 0x74
 8056042:	bfdc      	itt	le
 8056044:	fb02 3301 	mlale	r3, r2, r1, r3
 8056048:	9309      	strle	r3, [sp, #36]	; 0x24
 805604a:	e7bd      	b.n	8055fc8 <_strtod_l+0x158>
 805604c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 805604e:	195a      	adds	r2, r3, r5
 8056050:	921d      	str	r2, [sp, #116]	; 0x74
 8056052:	5d5b      	ldrb	r3, [r3, r5]
 8056054:	2f00      	cmp	r7, #0
 8056056:	d036      	beq.n	80560c6 <_strtod_l+0x256>
 8056058:	463d      	mov	r5, r7
 805605a:	9007      	str	r0, [sp, #28]
 805605c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8056060:	2a09      	cmp	r2, #9
 8056062:	d912      	bls.n	805608a <_strtod_l+0x21a>
 8056064:	2201      	movs	r2, #1
 8056066:	e7c1      	b.n	8055fec <_strtod_l+0x17c>
 8056068:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 805606a:	3001      	adds	r0, #1
 805606c:	1c5a      	adds	r2, r3, #1
 805606e:	921d      	str	r2, [sp, #116]	; 0x74
 8056070:	785b      	ldrb	r3, [r3, #1]
 8056072:	2b30      	cmp	r3, #48	; 0x30
 8056074:	d0f8      	beq.n	8056068 <_strtod_l+0x1f8>
 8056076:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 805607a:	2a08      	cmp	r2, #8
 805607c:	f200 84dd 	bhi.w	8056a3a <_strtod_l+0xbca>
 8056080:	9007      	str	r0, [sp, #28]
 8056082:	2000      	movs	r0, #0
 8056084:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8056086:	4605      	mov	r5, r0
 8056088:	920a      	str	r2, [sp, #40]	; 0x28
 805608a:	3b30      	subs	r3, #48	; 0x30
 805608c:	f100 0201 	add.w	r2, r0, #1
 8056090:	d013      	beq.n	80560ba <_strtod_l+0x24a>
 8056092:	9907      	ldr	r1, [sp, #28]
 8056094:	eb00 0e05 	add.w	lr, r0, r5
 8056098:	4411      	add	r1, r2
 805609a:	462a      	mov	r2, r5
 805609c:	9107      	str	r1, [sp, #28]
 805609e:	210a      	movs	r1, #10
 80560a0:	4572      	cmp	r2, lr
 80560a2:	d112      	bne.n	80560ca <_strtod_l+0x25a>
 80560a4:	182a      	adds	r2, r5, r0
 80560a6:	3501      	adds	r5, #1
 80560a8:	2a08      	cmp	r2, #8
 80560aa:	4405      	add	r5, r0
 80560ac:	dc1c      	bgt.n	80560e8 <_strtod_l+0x278>
 80560ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80560b0:	220a      	movs	r2, #10
 80560b2:	fb02 3301 	mla	r3, r2, r1, r3
 80560b6:	9309      	str	r3, [sp, #36]	; 0x24
 80560b8:	2200      	movs	r2, #0
 80560ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80560bc:	4610      	mov	r0, r2
 80560be:	1c59      	adds	r1, r3, #1
 80560c0:	911d      	str	r1, [sp, #116]	; 0x74
 80560c2:	785b      	ldrb	r3, [r3, #1]
 80560c4:	e7ca      	b.n	805605c <_strtod_l+0x1ec>
 80560c6:	4638      	mov	r0, r7
 80560c8:	e7d3      	b.n	8056072 <_strtod_l+0x202>
 80560ca:	2a08      	cmp	r2, #8
 80560cc:	dc04      	bgt.n	80560d8 <_strtod_l+0x268>
 80560ce:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80560d0:	434e      	muls	r6, r1
 80560d2:	9609      	str	r6, [sp, #36]	; 0x24
 80560d4:	3201      	adds	r2, #1
 80560d6:	e7e3      	b.n	80560a0 <_strtod_l+0x230>
 80560d8:	f102 0c01 	add.w	ip, r2, #1
 80560dc:	f1bc 0f10 	cmp.w	ip, #16
 80560e0:	bfd8      	it	le
 80560e2:	fb01 f909 	mulle.w	r9, r1, r9
 80560e6:	e7f5      	b.n	80560d4 <_strtod_l+0x264>
 80560e8:	2d10      	cmp	r5, #16
 80560ea:	bfdc      	itt	le
 80560ec:	220a      	movle	r2, #10
 80560ee:	fb02 3909 	mlale	r9, r2, r9, r3
 80560f2:	e7e1      	b.n	80560b8 <_strtod_l+0x248>
 80560f4:	2300      	movs	r3, #0
 80560f6:	2201      	movs	r2, #1
 80560f8:	9307      	str	r3, [sp, #28]
 80560fa:	e77c      	b.n	8055ff6 <_strtod_l+0x186>
 80560fc:	f04f 0c00 	mov.w	ip, #0
 8056100:	f108 0302 	add.w	r3, r8, #2
 8056104:	931d      	str	r3, [sp, #116]	; 0x74
 8056106:	f898 3002 	ldrb.w	r3, [r8, #2]
 805610a:	e785      	b.n	8056018 <_strtod_l+0x1a8>
 805610c:	f04f 0c01 	mov.w	ip, #1
 8056110:	e7f6      	b.n	8056100 <_strtod_l+0x290>
 8056112:	bf00      	nop
 8056114:	0805aeac 	.word	0x0805aeac
 8056118:	0805abf8 	.word	0x0805abf8
 805611c:	7ff00000 	.word	0x7ff00000
 8056120:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8056122:	1c59      	adds	r1, r3, #1
 8056124:	911d      	str	r1, [sp, #116]	; 0x74
 8056126:	785b      	ldrb	r3, [r3, #1]
 8056128:	2b30      	cmp	r3, #48	; 0x30
 805612a:	d0f9      	beq.n	8056120 <_strtod_l+0x2b0>
 805612c:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8056130:	2908      	cmp	r1, #8
 8056132:	f63f af78 	bhi.w	8056026 <_strtod_l+0x1b6>
 8056136:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 805613a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 805613c:	9308      	str	r3, [sp, #32]
 805613e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8056140:	1c59      	adds	r1, r3, #1
 8056142:	911d      	str	r1, [sp, #116]	; 0x74
 8056144:	785b      	ldrb	r3, [r3, #1]
 8056146:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 805614a:	2e09      	cmp	r6, #9
 805614c:	d937      	bls.n	80561be <_strtod_l+0x34e>
 805614e:	9e08      	ldr	r6, [sp, #32]
 8056150:	1b89      	subs	r1, r1, r6
 8056152:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8056156:	2908      	cmp	r1, #8
 8056158:	dc02      	bgt.n	8056160 <_strtod_l+0x2f0>
 805615a:	4576      	cmp	r6, lr
 805615c:	bfa8      	it	ge
 805615e:	4676      	movge	r6, lr
 8056160:	f1bc 0f00 	cmp.w	ip, #0
 8056164:	d000      	beq.n	8056168 <_strtod_l+0x2f8>
 8056166:	4276      	negs	r6, r6
 8056168:	2d00      	cmp	r5, #0
 805616a:	d14f      	bne.n	805620c <_strtod_l+0x39c>
 805616c:	9904      	ldr	r1, [sp, #16]
 805616e:	4301      	orrs	r1, r0
 8056170:	f47f aec0 	bne.w	8055ef4 <_strtod_l+0x84>
 8056174:	2a00      	cmp	r2, #0
 8056176:	f47f aed9 	bne.w	8055f2c <_strtod_l+0xbc>
 805617a:	2b69      	cmp	r3, #105	; 0x69
 805617c:	d027      	beq.n	80561ce <_strtod_l+0x35e>
 805617e:	dc24      	bgt.n	80561ca <_strtod_l+0x35a>
 8056180:	2b49      	cmp	r3, #73	; 0x49
 8056182:	d024      	beq.n	80561ce <_strtod_l+0x35e>
 8056184:	2b4e      	cmp	r3, #78	; 0x4e
 8056186:	f47f aed1 	bne.w	8055f2c <_strtod_l+0xbc>
 805618a:	499f      	ldr	r1, [pc, #636]	; (8056408 <_strtod_l+0x598>)
 805618c:	a81d      	add	r0, sp, #116	; 0x74
 805618e:	f002 f8b5 	bl	80582fc <__match>
 8056192:	2800      	cmp	r0, #0
 8056194:	f43f aeca 	beq.w	8055f2c <_strtod_l+0xbc>
 8056198:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 805619a:	781b      	ldrb	r3, [r3, #0]
 805619c:	2b28      	cmp	r3, #40	; 0x28
 805619e:	d12d      	bne.n	80561fc <_strtod_l+0x38c>
 80561a0:	aa20      	add	r2, sp, #128	; 0x80
 80561a2:	499a      	ldr	r1, [pc, #616]	; (805640c <_strtod_l+0x59c>)
 80561a4:	a81d      	add	r0, sp, #116	; 0x74
 80561a6:	f002 f8bd 	bl	8058324 <__hexnan>
 80561aa:	2805      	cmp	r0, #5
 80561ac:	d126      	bne.n	80561fc <_strtod_l+0x38c>
 80561ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80561b0:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80561b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80561b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80561bc:	e69a      	b.n	8055ef4 <_strtod_l+0x84>
 80561be:	210a      	movs	r1, #10
 80561c0:	fb01 3e0e 	mla	lr, r1, lr, r3
 80561c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80561c8:	e7b9      	b.n	805613e <_strtod_l+0x2ce>
 80561ca:	2b6e      	cmp	r3, #110	; 0x6e
 80561cc:	e7db      	b.n	8056186 <_strtod_l+0x316>
 80561ce:	4990      	ldr	r1, [pc, #576]	; (8056410 <_strtod_l+0x5a0>)
 80561d0:	a81d      	add	r0, sp, #116	; 0x74
 80561d2:	f002 f893 	bl	80582fc <__match>
 80561d6:	2800      	cmp	r0, #0
 80561d8:	f43f aea8 	beq.w	8055f2c <_strtod_l+0xbc>
 80561dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80561de:	a81d      	add	r0, sp, #116	; 0x74
 80561e0:	498c      	ldr	r1, [pc, #560]	; (8056414 <_strtod_l+0x5a4>)
 80561e2:	3b01      	subs	r3, #1
 80561e4:	931d      	str	r3, [sp, #116]	; 0x74
 80561e6:	f002 f889 	bl	80582fc <__match>
 80561ea:	b910      	cbnz	r0, 80561f2 <_strtod_l+0x382>
 80561ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80561ee:	3301      	adds	r3, #1
 80561f0:	931d      	str	r3, [sp, #116]	; 0x74
 80561f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8056424 <_strtod_l+0x5b4>
 80561f6:	f04f 0a00 	mov.w	sl, #0
 80561fa:	e67b      	b.n	8055ef4 <_strtod_l+0x84>
 80561fc:	4886      	ldr	r0, [pc, #536]	; (8056418 <_strtod_l+0x5a8>)
 80561fe:	f003 fa3b 	bl	8059678 <nan>
 8056202:	ed8d 0b04 	vstr	d0, [sp, #16]
 8056206:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 805620a:	e673      	b.n	8055ef4 <_strtod_l+0x84>
 805620c:	9b07      	ldr	r3, [sp, #28]
 805620e:	2f00      	cmp	r7, #0
 8056210:	bf08      	it	eq
 8056212:	462f      	moveq	r7, r5
 8056214:	2d10      	cmp	r5, #16
 8056216:	9809      	ldr	r0, [sp, #36]	; 0x24
 8056218:	eba6 0303 	sub.w	r3, r6, r3
 805621c:	46a8      	mov	r8, r5
 805621e:	bfa8      	it	ge
 8056220:	f04f 0810 	movge.w	r8, #16
 8056224:	9308      	str	r3, [sp, #32]
 8056226:	f7ea f951 	bl	80404cc <__aeabi_ui2d>
 805622a:	2d09      	cmp	r5, #9
 805622c:	4682      	mov	sl, r0
 805622e:	468b      	mov	fp, r1
 8056230:	dd13      	ble.n	805625a <_strtod_l+0x3ea>
 8056232:	4b7a      	ldr	r3, [pc, #488]	; (805641c <_strtod_l+0x5ac>)
 8056234:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8056238:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 805623c:	f7ea f9c0 	bl	80405c0 <__aeabi_dmul>
 8056240:	4682      	mov	sl, r0
 8056242:	468b      	mov	fp, r1
 8056244:	4648      	mov	r0, r9
 8056246:	f7ea f941 	bl	80404cc <__aeabi_ui2d>
 805624a:	4602      	mov	r2, r0
 805624c:	460b      	mov	r3, r1
 805624e:	4650      	mov	r0, sl
 8056250:	4659      	mov	r1, fp
 8056252:	f7e9 ffff 	bl	8040254 <__adddf3>
 8056256:	4682      	mov	sl, r0
 8056258:	468b      	mov	fp, r1
 805625a:	2d0f      	cmp	r5, #15
 805625c:	dc38      	bgt.n	80562d0 <_strtod_l+0x460>
 805625e:	9b08      	ldr	r3, [sp, #32]
 8056260:	2b00      	cmp	r3, #0
 8056262:	f43f ae47 	beq.w	8055ef4 <_strtod_l+0x84>
 8056266:	dd24      	ble.n	80562b2 <_strtod_l+0x442>
 8056268:	2b16      	cmp	r3, #22
 805626a:	dc0b      	bgt.n	8056284 <_strtod_l+0x414>
 805626c:	4d6b      	ldr	r5, [pc, #428]	; (805641c <_strtod_l+0x5ac>)
 805626e:	4652      	mov	r2, sl
 8056270:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8056274:	465b      	mov	r3, fp
 8056276:	e9d5 0100 	ldrd	r0, r1, [r5]
 805627a:	f7ea f9a1 	bl	80405c0 <__aeabi_dmul>
 805627e:	4682      	mov	sl, r0
 8056280:	468b      	mov	fp, r1
 8056282:	e637      	b.n	8055ef4 <_strtod_l+0x84>
 8056284:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8056288:	9a08      	ldr	r2, [sp, #32]
 805628a:	4293      	cmp	r3, r2
 805628c:	db20      	blt.n	80562d0 <_strtod_l+0x460>
 805628e:	f1c5 050f 	rsb	r5, r5, #15
 8056292:	4c62      	ldr	r4, [pc, #392]	; (805641c <_strtod_l+0x5ac>)
 8056294:	4652      	mov	r2, sl
 8056296:	465b      	mov	r3, fp
 8056298:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 805629c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80562a0:	f7ea f98e 	bl	80405c0 <__aeabi_dmul>
 80562a4:	9b08      	ldr	r3, [sp, #32]
 80562a6:	1b5d      	subs	r5, r3, r5
 80562a8:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80562ac:	e9d4 2300 	ldrd	r2, r3, [r4]
 80562b0:	e7e3      	b.n	805627a <_strtod_l+0x40a>
 80562b2:	9b08      	ldr	r3, [sp, #32]
 80562b4:	3316      	adds	r3, #22
 80562b6:	db0b      	blt.n	80562d0 <_strtod_l+0x460>
 80562b8:	9b07      	ldr	r3, [sp, #28]
 80562ba:	4650      	mov	r0, sl
 80562bc:	4a57      	ldr	r2, [pc, #348]	; (805641c <_strtod_l+0x5ac>)
 80562be:	4659      	mov	r1, fp
 80562c0:	1b9e      	subs	r6, r3, r6
 80562c2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80562c6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80562ca:	f7ea faa3 	bl	8040814 <__aeabi_ddiv>
 80562ce:	e7d6      	b.n	805627e <_strtod_l+0x40e>
 80562d0:	eba5 0808 	sub.w	r8, r5, r8
 80562d4:	9b08      	ldr	r3, [sp, #32]
 80562d6:	4498      	add	r8, r3
 80562d8:	f1b8 0f00 	cmp.w	r8, #0
 80562dc:	dd71      	ble.n	80563c2 <_strtod_l+0x552>
 80562de:	f018 030f 	ands.w	r3, r8, #15
 80562e2:	d00a      	beq.n	80562fa <_strtod_l+0x48a>
 80562e4:	494d      	ldr	r1, [pc, #308]	; (805641c <_strtod_l+0x5ac>)
 80562e6:	4652      	mov	r2, sl
 80562e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80562ec:	465b      	mov	r3, fp
 80562ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80562f2:	f7ea f965 	bl	80405c0 <__aeabi_dmul>
 80562f6:	4682      	mov	sl, r0
 80562f8:	468b      	mov	fp, r1
 80562fa:	f038 080f 	bics.w	r8, r8, #15
 80562fe:	d04d      	beq.n	805639c <_strtod_l+0x52c>
 8056300:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8056304:	dd22      	ble.n	805634c <_strtod_l+0x4dc>
 8056306:	2500      	movs	r5, #0
 8056308:	462e      	mov	r6, r5
 805630a:	9509      	str	r5, [sp, #36]	; 0x24
 805630c:	9507      	str	r5, [sp, #28]
 805630e:	2322      	movs	r3, #34	; 0x22
 8056310:	f8df b110 	ldr.w	fp, [pc, #272]	; 8056424 <_strtod_l+0x5b4>
 8056314:	f04f 0a00 	mov.w	sl, #0
 8056318:	6023      	str	r3, [r4, #0]
 805631a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 805631c:	2b00      	cmp	r3, #0
 805631e:	f43f ade9 	beq.w	8055ef4 <_strtod_l+0x84>
 8056322:	991e      	ldr	r1, [sp, #120]	; 0x78
 8056324:	4620      	mov	r0, r4
 8056326:	f002 f96d 	bl	8058604 <_Bfree>
 805632a:	9907      	ldr	r1, [sp, #28]
 805632c:	4620      	mov	r0, r4
 805632e:	f002 f969 	bl	8058604 <_Bfree>
 8056332:	4631      	mov	r1, r6
 8056334:	4620      	mov	r0, r4
 8056336:	f002 f965 	bl	8058604 <_Bfree>
 805633a:	9909      	ldr	r1, [sp, #36]	; 0x24
 805633c:	4620      	mov	r0, r4
 805633e:	f002 f961 	bl	8058604 <_Bfree>
 8056342:	4629      	mov	r1, r5
 8056344:	4620      	mov	r0, r4
 8056346:	f002 f95d 	bl	8058604 <_Bfree>
 805634a:	e5d3      	b.n	8055ef4 <_strtod_l+0x84>
 805634c:	2300      	movs	r3, #0
 805634e:	ea4f 1828 	mov.w	r8, r8, asr #4
 8056352:	4650      	mov	r0, sl
 8056354:	4659      	mov	r1, fp
 8056356:	4699      	mov	r9, r3
 8056358:	f1b8 0f01 	cmp.w	r8, #1
 805635c:	dc21      	bgt.n	80563a2 <_strtod_l+0x532>
 805635e:	b10b      	cbz	r3, 8056364 <_strtod_l+0x4f4>
 8056360:	4682      	mov	sl, r0
 8056362:	468b      	mov	fp, r1
 8056364:	4b2e      	ldr	r3, [pc, #184]	; (8056420 <_strtod_l+0x5b0>)
 8056366:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 805636a:	4652      	mov	r2, sl
 805636c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8056370:	465b      	mov	r3, fp
 8056372:	e9d9 0100 	ldrd	r0, r1, [r9]
 8056376:	f7ea f923 	bl	80405c0 <__aeabi_dmul>
 805637a:	4b2a      	ldr	r3, [pc, #168]	; (8056424 <_strtod_l+0x5b4>)
 805637c:	460a      	mov	r2, r1
 805637e:	4682      	mov	sl, r0
 8056380:	400b      	ands	r3, r1
 8056382:	4929      	ldr	r1, [pc, #164]	; (8056428 <_strtod_l+0x5b8>)
 8056384:	428b      	cmp	r3, r1
 8056386:	d8be      	bhi.n	8056306 <_strtod_l+0x496>
 8056388:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 805638c:	428b      	cmp	r3, r1
 805638e:	bf86      	itte	hi
 8056390:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 805642c <_strtod_l+0x5bc>
 8056394:	f04f 3aff 	movhi.w	sl, #4294967295
 8056398:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 805639c:	2300      	movs	r3, #0
 805639e:	9304      	str	r3, [sp, #16]
 80563a0:	e082      	b.n	80564a8 <_strtod_l+0x638>
 80563a2:	f018 0f01 	tst.w	r8, #1
 80563a6:	d007      	beq.n	80563b8 <_strtod_l+0x548>
 80563a8:	4b1d      	ldr	r3, [pc, #116]	; (8056420 <_strtod_l+0x5b0>)
 80563aa:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80563ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80563b2:	f7ea f905 	bl	80405c0 <__aeabi_dmul>
 80563b6:	2301      	movs	r3, #1
 80563b8:	f109 0901 	add.w	r9, r9, #1
 80563bc:	ea4f 0868 	mov.w	r8, r8, asr #1
 80563c0:	e7ca      	b.n	8056358 <_strtod_l+0x4e8>
 80563c2:	d0eb      	beq.n	805639c <_strtod_l+0x52c>
 80563c4:	f1c8 0800 	rsb	r8, r8, #0
 80563c8:	f018 020f 	ands.w	r2, r8, #15
 80563cc:	d00a      	beq.n	80563e4 <_strtod_l+0x574>
 80563ce:	4b13      	ldr	r3, [pc, #76]	; (805641c <_strtod_l+0x5ac>)
 80563d0:	4650      	mov	r0, sl
 80563d2:	4659      	mov	r1, fp
 80563d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80563d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80563dc:	f7ea fa1a 	bl	8040814 <__aeabi_ddiv>
 80563e0:	4682      	mov	sl, r0
 80563e2:	468b      	mov	fp, r1
 80563e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80563e8:	d0d8      	beq.n	805639c <_strtod_l+0x52c>
 80563ea:	f1b8 0f1f 	cmp.w	r8, #31
 80563ee:	dd1f      	ble.n	8056430 <_strtod_l+0x5c0>
 80563f0:	2500      	movs	r5, #0
 80563f2:	462e      	mov	r6, r5
 80563f4:	9509      	str	r5, [sp, #36]	; 0x24
 80563f6:	9507      	str	r5, [sp, #28]
 80563f8:	2322      	movs	r3, #34	; 0x22
 80563fa:	f04f 0a00 	mov.w	sl, #0
 80563fe:	f04f 0b00 	mov.w	fp, #0
 8056402:	6023      	str	r3, [r4, #0]
 8056404:	e789      	b.n	805631a <_strtod_l+0x4aa>
 8056406:	bf00      	nop
 8056408:	0805abc9 	.word	0x0805abc9
 805640c:	0805ac0c 	.word	0x0805ac0c
 8056410:	0805abc1 	.word	0x0805abc1
 8056414:	0805ad4c 	.word	0x0805ad4c
 8056418:	0805b068 	.word	0x0805b068
 805641c:	0805af48 	.word	0x0805af48
 8056420:	0805af20 	.word	0x0805af20
 8056424:	7ff00000 	.word	0x7ff00000
 8056428:	7ca00000 	.word	0x7ca00000
 805642c:	7fefffff 	.word	0x7fefffff
 8056430:	f018 0310 	ands.w	r3, r8, #16
 8056434:	4650      	mov	r0, sl
 8056436:	4659      	mov	r1, fp
 8056438:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80567f0 <_strtod_l+0x980>
 805643c:	bf18      	it	ne
 805643e:	236a      	movne	r3, #106	; 0x6a
 8056440:	9304      	str	r3, [sp, #16]
 8056442:	2300      	movs	r3, #0
 8056444:	f018 0f01 	tst.w	r8, #1
 8056448:	d004      	beq.n	8056454 <_strtod_l+0x5e4>
 805644a:	e9d9 2300 	ldrd	r2, r3, [r9]
 805644e:	f7ea f8b7 	bl	80405c0 <__aeabi_dmul>
 8056452:	2301      	movs	r3, #1
 8056454:	ea5f 0868 	movs.w	r8, r8, asr #1
 8056458:	f109 0908 	add.w	r9, r9, #8
 805645c:	d1f2      	bne.n	8056444 <_strtod_l+0x5d4>
 805645e:	b10b      	cbz	r3, 8056464 <_strtod_l+0x5f4>
 8056460:	4682      	mov	sl, r0
 8056462:	468b      	mov	fp, r1
 8056464:	9b04      	ldr	r3, [sp, #16]
 8056466:	b1bb      	cbz	r3, 8056498 <_strtod_l+0x628>
 8056468:	f3cb 530a 	ubfx	r3, fp, #20, #11
 805646c:	4659      	mov	r1, fp
 805646e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8056472:	2b00      	cmp	r3, #0
 8056474:	dd10      	ble.n	8056498 <_strtod_l+0x628>
 8056476:	2b1f      	cmp	r3, #31
 8056478:	f340 8127 	ble.w	80566ca <_strtod_l+0x85a>
 805647c:	2b34      	cmp	r3, #52	; 0x34
 805647e:	f04f 0a00 	mov.w	sl, #0
 8056482:	bfdb      	ittet	le
 8056484:	3b20      	suble	r3, #32
 8056486:	f04f 32ff 	movle.w	r2, #4294967295
 805648a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 805648e:	fa02 f303 	lslle.w	r3, r2, r3
 8056492:	bfd8      	it	le
 8056494:	ea03 0b01 	andle.w	fp, r3, r1
 8056498:	2200      	movs	r2, #0
 805649a:	2300      	movs	r3, #0
 805649c:	4650      	mov	r0, sl
 805649e:	4659      	mov	r1, fp
 80564a0:	f7ea faf6 	bl	8040a90 <__aeabi_dcmpeq>
 80564a4:	2800      	cmp	r0, #0
 80564a6:	d1a3      	bne.n	80563f0 <_strtod_l+0x580>
 80564a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80564aa:	463a      	mov	r2, r7
 80564ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80564ae:	4620      	mov	r0, r4
 80564b0:	9300      	str	r3, [sp, #0]
 80564b2:	462b      	mov	r3, r5
 80564b4:	f002 f912 	bl	80586dc <__s2b>
 80564b8:	9009      	str	r0, [sp, #36]	; 0x24
 80564ba:	2800      	cmp	r0, #0
 80564bc:	f43f af23 	beq.w	8056306 <_strtod_l+0x496>
 80564c0:	9b07      	ldr	r3, [sp, #28]
 80564c2:	2500      	movs	r5, #0
 80564c4:	1b9e      	subs	r6, r3, r6
 80564c6:	9b08      	ldr	r3, [sp, #32]
 80564c8:	2b00      	cmp	r3, #0
 80564ca:	bfb4      	ite	lt
 80564cc:	4633      	movlt	r3, r6
 80564ce:	2300      	movge	r3, #0
 80564d0:	462e      	mov	r6, r5
 80564d2:	9310      	str	r3, [sp, #64]	; 0x40
 80564d4:	9b08      	ldr	r3, [sp, #32]
 80564d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80564da:	9318      	str	r3, [sp, #96]	; 0x60
 80564dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80564de:	4620      	mov	r0, r4
 80564e0:	6859      	ldr	r1, [r3, #4]
 80564e2:	f002 f84f 	bl	8058584 <_Balloc>
 80564e6:	9007      	str	r0, [sp, #28]
 80564e8:	2800      	cmp	r0, #0
 80564ea:	f43f af10 	beq.w	805630e <_strtod_l+0x49e>
 80564ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80564f0:	300c      	adds	r0, #12
 80564f2:	691a      	ldr	r2, [r3, #16]
 80564f4:	f103 010c 	add.w	r1, r3, #12
 80564f8:	3202      	adds	r2, #2
 80564fa:	0092      	lsls	r2, r2, #2
 80564fc:	f7fe fd40 	bl	8054f80 <memcpy>
 8056500:	aa20      	add	r2, sp, #128	; 0x80
 8056502:	a91f      	add	r1, sp, #124	; 0x7c
 8056504:	4620      	mov	r0, r4
 8056506:	ec4b ab10 	vmov	d0, sl, fp
 805650a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 805650e:	f002 fc27 	bl	8058d60 <__d2b>
 8056512:	901e      	str	r0, [sp, #120]	; 0x78
 8056514:	2800      	cmp	r0, #0
 8056516:	f43f aefa 	beq.w	805630e <_strtod_l+0x49e>
 805651a:	2101      	movs	r1, #1
 805651c:	4620      	mov	r0, r4
 805651e:	f002 f977 	bl	8058810 <__i2b>
 8056522:	4606      	mov	r6, r0
 8056524:	2800      	cmp	r0, #0
 8056526:	f43f aef2 	beq.w	805630e <_strtod_l+0x49e>
 805652a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 805652c:	9904      	ldr	r1, [sp, #16]
 805652e:	2b00      	cmp	r3, #0
 8056530:	eba3 0801 	sub.w	r8, r3, r1
 8056534:	bfa9      	itett	ge
 8056536:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8056538:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 805653a:	eb03 0902 	addge.w	r9, r3, r2
 805653e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8056540:	bfb8      	it	lt
 8056542:	1ad7      	sublt	r7, r2, r3
 8056544:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8056546:	4ba5      	ldr	r3, [pc, #660]	; (80567dc <_strtod_l+0x96c>)
 8056548:	4490      	add	r8, r2
 805654a:	bfb8      	it	lt
 805654c:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8056550:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8056554:	f108 38ff 	add.w	r8, r8, #4294967295
 8056558:	4598      	cmp	r8, r3
 805655a:	f280 80ca 	bge.w	80566f2 <_strtod_l+0x882>
 805655e:	eba3 0308 	sub.w	r3, r3, r8
 8056562:	2101      	movs	r1, #1
 8056564:	2b1f      	cmp	r3, #31
 8056566:	eba2 0203 	sub.w	r2, r2, r3
 805656a:	f300 80b5 	bgt.w	80566d8 <_strtod_l+0x868>
 805656e:	fa01 f303 	lsl.w	r3, r1, r3
 8056572:	9311      	str	r3, [sp, #68]	; 0x44
 8056574:	2300      	movs	r3, #0
 8056576:	930c      	str	r3, [sp, #48]	; 0x30
 8056578:	eb09 0802 	add.w	r8, r9, r2
 805657c:	9b04      	ldr	r3, [sp, #16]
 805657e:	4417      	add	r7, r2
 8056580:	45c1      	cmp	r9, r8
 8056582:	441f      	add	r7, r3
 8056584:	464b      	mov	r3, r9
 8056586:	bfa8      	it	ge
 8056588:	4643      	movge	r3, r8
 805658a:	42bb      	cmp	r3, r7
 805658c:	bfa8      	it	ge
 805658e:	463b      	movge	r3, r7
 8056590:	2b00      	cmp	r3, #0
 8056592:	bfc2      	ittt	gt
 8056594:	eba8 0803 	subgt.w	r8, r8, r3
 8056598:	1aff      	subgt	r7, r7, r3
 805659a:	eba9 0903 	subgt.w	r9, r9, r3
 805659e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80565a0:	2b00      	cmp	r3, #0
 80565a2:	dd17      	ble.n	80565d4 <_strtod_l+0x764>
 80565a4:	4631      	mov	r1, r6
 80565a6:	461a      	mov	r2, r3
 80565a8:	4620      	mov	r0, r4
 80565aa:	f002 f9ed 	bl	8058988 <__pow5mult>
 80565ae:	4606      	mov	r6, r0
 80565b0:	2800      	cmp	r0, #0
 80565b2:	f43f aeac 	beq.w	805630e <_strtod_l+0x49e>
 80565b6:	4601      	mov	r1, r0
 80565b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80565ba:	4620      	mov	r0, r4
 80565bc:	f002 f93e 	bl	805883c <__multiply>
 80565c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80565c2:	2800      	cmp	r0, #0
 80565c4:	f43f aea3 	beq.w	805630e <_strtod_l+0x49e>
 80565c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80565ca:	4620      	mov	r0, r4
 80565cc:	f002 f81a 	bl	8058604 <_Bfree>
 80565d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80565d2:	931e      	str	r3, [sp, #120]	; 0x78
 80565d4:	f1b8 0f00 	cmp.w	r8, #0
 80565d8:	f300 8090 	bgt.w	80566fc <_strtod_l+0x88c>
 80565dc:	9b08      	ldr	r3, [sp, #32]
 80565de:	2b00      	cmp	r3, #0
 80565e0:	dd08      	ble.n	80565f4 <_strtod_l+0x784>
 80565e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80565e4:	4620      	mov	r0, r4
 80565e6:	9907      	ldr	r1, [sp, #28]
 80565e8:	f002 f9ce 	bl	8058988 <__pow5mult>
 80565ec:	9007      	str	r0, [sp, #28]
 80565ee:	2800      	cmp	r0, #0
 80565f0:	f43f ae8d 	beq.w	805630e <_strtod_l+0x49e>
 80565f4:	2f00      	cmp	r7, #0
 80565f6:	dd08      	ble.n	805660a <_strtod_l+0x79a>
 80565f8:	463a      	mov	r2, r7
 80565fa:	9907      	ldr	r1, [sp, #28]
 80565fc:	4620      	mov	r0, r4
 80565fe:	f002 fa1d 	bl	8058a3c <__lshift>
 8056602:	9007      	str	r0, [sp, #28]
 8056604:	2800      	cmp	r0, #0
 8056606:	f43f ae82 	beq.w	805630e <_strtod_l+0x49e>
 805660a:	f1b9 0f00 	cmp.w	r9, #0
 805660e:	dd08      	ble.n	8056622 <_strtod_l+0x7b2>
 8056610:	4631      	mov	r1, r6
 8056612:	464a      	mov	r2, r9
 8056614:	4620      	mov	r0, r4
 8056616:	f002 fa11 	bl	8058a3c <__lshift>
 805661a:	4606      	mov	r6, r0
 805661c:	2800      	cmp	r0, #0
 805661e:	f43f ae76 	beq.w	805630e <_strtod_l+0x49e>
 8056622:	9a07      	ldr	r2, [sp, #28]
 8056624:	4620      	mov	r0, r4
 8056626:	991e      	ldr	r1, [sp, #120]	; 0x78
 8056628:	f002 fa90 	bl	8058b4c <__mdiff>
 805662c:	4605      	mov	r5, r0
 805662e:	2800      	cmp	r0, #0
 8056630:	f43f ae6d 	beq.w	805630e <_strtod_l+0x49e>
 8056634:	68c3      	ldr	r3, [r0, #12]
 8056636:	4631      	mov	r1, r6
 8056638:	930f      	str	r3, [sp, #60]	; 0x3c
 805663a:	2300      	movs	r3, #0
 805663c:	60c3      	str	r3, [r0, #12]
 805663e:	f002 fa69 	bl	8058b14 <__mcmp>
 8056642:	2800      	cmp	r0, #0
 8056644:	da64      	bge.n	8056710 <_strtod_l+0x8a0>
 8056646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8056648:	ea53 030a 	orrs.w	r3, r3, sl
 805664c:	f040 8086 	bne.w	805675c <_strtod_l+0x8ec>
 8056650:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8056654:	2b00      	cmp	r3, #0
 8056656:	f040 8081 	bne.w	805675c <_strtod_l+0x8ec>
 805665a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 805665e:	0d1b      	lsrs	r3, r3, #20
 8056660:	051b      	lsls	r3, r3, #20
 8056662:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8056666:	d979      	bls.n	805675c <_strtod_l+0x8ec>
 8056668:	696b      	ldr	r3, [r5, #20]
 805666a:	b913      	cbnz	r3, 8056672 <_strtod_l+0x802>
 805666c:	692b      	ldr	r3, [r5, #16]
 805666e:	2b01      	cmp	r3, #1
 8056670:	dd74      	ble.n	805675c <_strtod_l+0x8ec>
 8056672:	4629      	mov	r1, r5
 8056674:	2201      	movs	r2, #1
 8056676:	4620      	mov	r0, r4
 8056678:	f002 f9e0 	bl	8058a3c <__lshift>
 805667c:	4631      	mov	r1, r6
 805667e:	4605      	mov	r5, r0
 8056680:	f002 fa48 	bl	8058b14 <__mcmp>
 8056684:	2800      	cmp	r0, #0
 8056686:	dd69      	ble.n	805675c <_strtod_l+0x8ec>
 8056688:	9904      	ldr	r1, [sp, #16]
 805668a:	465b      	mov	r3, fp
 805668c:	4a54      	ldr	r2, [pc, #336]	; (80567e0 <_strtod_l+0x970>)
 805668e:	2900      	cmp	r1, #0
 8056690:	f000 8084 	beq.w	805679c <_strtod_l+0x92c>
 8056694:	ea02 010b 	and.w	r1, r2, fp
 8056698:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 805669c:	dc7e      	bgt.n	805679c <_strtod_l+0x92c>
 805669e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80566a2:	f77f aea9 	ble.w	80563f8 <_strtod_l+0x588>
 80566a6:	2300      	movs	r3, #0
 80566a8:	4a4e      	ldr	r2, [pc, #312]	; (80567e4 <_strtod_l+0x974>)
 80566aa:	4650      	mov	r0, sl
 80566ac:	4659      	mov	r1, fp
 80566ae:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80566b2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80566b6:	f7e9 ff83 	bl	80405c0 <__aeabi_dmul>
 80566ba:	460b      	mov	r3, r1
 80566bc:	4682      	mov	sl, r0
 80566be:	468b      	mov	fp, r1
 80566c0:	4303      	orrs	r3, r0
 80566c2:	bf04      	itt	eq
 80566c4:	2322      	moveq	r3, #34	; 0x22
 80566c6:	6023      	streq	r3, [r4, #0]
 80566c8:	e62b      	b.n	8056322 <_strtod_l+0x4b2>
 80566ca:	f04f 32ff 	mov.w	r2, #4294967295
 80566ce:	fa02 f303 	lsl.w	r3, r2, r3
 80566d2:	ea03 0a0a 	and.w	sl, r3, sl
 80566d6:	e6df      	b.n	8056498 <_strtod_l+0x628>
 80566d8:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80566dc:	9111      	str	r1, [sp, #68]	; 0x44
 80566de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80566e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80566e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80566ea:	fa01 f308 	lsl.w	r3, r1, r8
 80566ee:	930c      	str	r3, [sp, #48]	; 0x30
 80566f0:	e742      	b.n	8056578 <_strtod_l+0x708>
 80566f2:	2300      	movs	r3, #0
 80566f4:	930c      	str	r3, [sp, #48]	; 0x30
 80566f6:	2301      	movs	r3, #1
 80566f8:	9311      	str	r3, [sp, #68]	; 0x44
 80566fa:	e73d      	b.n	8056578 <_strtod_l+0x708>
 80566fc:	4642      	mov	r2, r8
 80566fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8056700:	4620      	mov	r0, r4
 8056702:	f002 f99b 	bl	8058a3c <__lshift>
 8056706:	901e      	str	r0, [sp, #120]	; 0x78
 8056708:	2800      	cmp	r0, #0
 805670a:	f47f af67 	bne.w	80565dc <_strtod_l+0x76c>
 805670e:	e5fe      	b.n	805630e <_strtod_l+0x49e>
 8056710:	465f      	mov	r7, fp
 8056712:	d16f      	bne.n	80567f4 <_strtod_l+0x984>
 8056714:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8056716:	f3cb 0313 	ubfx	r3, fp, #0, #20
 805671a:	b342      	cbz	r2, 805676e <_strtod_l+0x8fe>
 805671c:	4a32      	ldr	r2, [pc, #200]	; (80567e8 <_strtod_l+0x978>)
 805671e:	4293      	cmp	r3, r2
 8056720:	d128      	bne.n	8056774 <_strtod_l+0x904>
 8056722:	9b04      	ldr	r3, [sp, #16]
 8056724:	4650      	mov	r0, sl
 8056726:	b1eb      	cbz	r3, 8056764 <_strtod_l+0x8f4>
 8056728:	4a2d      	ldr	r2, [pc, #180]	; (80567e0 <_strtod_l+0x970>)
 805672a:	f04f 31ff 	mov.w	r1, #4294967295
 805672e:	403a      	ands	r2, r7
 8056730:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8056734:	d819      	bhi.n	805676a <_strtod_l+0x8fa>
 8056736:	0d12      	lsrs	r2, r2, #20
 8056738:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 805673c:	fa01 f303 	lsl.w	r3, r1, r3
 8056740:	4298      	cmp	r0, r3
 8056742:	d117      	bne.n	8056774 <_strtod_l+0x904>
 8056744:	4b29      	ldr	r3, [pc, #164]	; (80567ec <_strtod_l+0x97c>)
 8056746:	429f      	cmp	r7, r3
 8056748:	d102      	bne.n	8056750 <_strtod_l+0x8e0>
 805674a:	3001      	adds	r0, #1
 805674c:	f43f addf 	beq.w	805630e <_strtod_l+0x49e>
 8056750:	4b23      	ldr	r3, [pc, #140]	; (80567e0 <_strtod_l+0x970>)
 8056752:	f04f 0a00 	mov.w	sl, #0
 8056756:	403b      	ands	r3, r7
 8056758:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 805675c:	9b04      	ldr	r3, [sp, #16]
 805675e:	2b00      	cmp	r3, #0
 8056760:	d1a1      	bne.n	80566a6 <_strtod_l+0x836>
 8056762:	e5de      	b.n	8056322 <_strtod_l+0x4b2>
 8056764:	f04f 33ff 	mov.w	r3, #4294967295
 8056768:	e7ea      	b.n	8056740 <_strtod_l+0x8d0>
 805676a:	460b      	mov	r3, r1
 805676c:	e7e8      	b.n	8056740 <_strtod_l+0x8d0>
 805676e:	ea53 030a 	orrs.w	r3, r3, sl
 8056772:	d089      	beq.n	8056688 <_strtod_l+0x818>
 8056774:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8056776:	b1db      	cbz	r3, 80567b0 <_strtod_l+0x940>
 8056778:	423b      	tst	r3, r7
 805677a:	d0ef      	beq.n	805675c <_strtod_l+0x8ec>
 805677c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 805677e:	4650      	mov	r0, sl
 8056780:	9a04      	ldr	r2, [sp, #16]
 8056782:	4659      	mov	r1, fp
 8056784:	b1c3      	cbz	r3, 80567b8 <_strtod_l+0x948>
 8056786:	f7ff fb57 	bl	8055e38 <sulp>
 805678a:	4602      	mov	r2, r0
 805678c:	460b      	mov	r3, r1
 805678e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8056792:	f7e9 fd5f 	bl	8040254 <__adddf3>
 8056796:	4682      	mov	sl, r0
 8056798:	468b      	mov	fp, r1
 805679a:	e7df      	b.n	805675c <_strtod_l+0x8ec>
 805679c:	4013      	ands	r3, r2
 805679e:	f04f 3aff 	mov.w	sl, #4294967295
 80567a2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80567a6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80567aa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80567ae:	e7d5      	b.n	805675c <_strtod_l+0x8ec>
 80567b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80567b2:	ea13 0f0a 	tst.w	r3, sl
 80567b6:	e7e0      	b.n	805677a <_strtod_l+0x90a>
 80567b8:	f7ff fb3e 	bl	8055e38 <sulp>
 80567bc:	4602      	mov	r2, r0
 80567be:	460b      	mov	r3, r1
 80567c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80567c4:	f7e9 fd44 	bl	8040250 <__aeabi_dsub>
 80567c8:	2200      	movs	r2, #0
 80567ca:	2300      	movs	r3, #0
 80567cc:	4682      	mov	sl, r0
 80567ce:	468b      	mov	fp, r1
 80567d0:	f7ea f95e 	bl	8040a90 <__aeabi_dcmpeq>
 80567d4:	2800      	cmp	r0, #0
 80567d6:	d0c1      	beq.n	805675c <_strtod_l+0x8ec>
 80567d8:	e60e      	b.n	80563f8 <_strtod_l+0x588>
 80567da:	bf00      	nop
 80567dc:	fffffc02 	.word	0xfffffc02
 80567e0:	7ff00000 	.word	0x7ff00000
 80567e4:	39500000 	.word	0x39500000
 80567e8:	000fffff 	.word	0x000fffff
 80567ec:	7fefffff 	.word	0x7fefffff
 80567f0:	0805ac20 	.word	0x0805ac20
 80567f4:	4631      	mov	r1, r6
 80567f6:	4628      	mov	r0, r5
 80567f8:	f002 fb0e 	bl	8058e18 <__ratio>
 80567fc:	2200      	movs	r2, #0
 80567fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8056802:	ee10 0a10 	vmov	r0, s0
 8056806:	ec59 8b10 	vmov	r8, r9, d0
 805680a:	4649      	mov	r1, r9
 805680c:	f7ea f954 	bl	8040ab8 <__aeabi_dcmple>
 8056810:	2800      	cmp	r0, #0
 8056812:	d07c      	beq.n	805690e <_strtod_l+0xa9e>
 8056814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8056816:	2b00      	cmp	r3, #0
 8056818:	d04c      	beq.n	80568b4 <_strtod_l+0xa44>
 805681a:	2200      	movs	r2, #0
 805681c:	4b94      	ldr	r3, [pc, #592]	; (8056a70 <_strtod_l+0xc00>)
 805681e:	f04f 0800 	mov.w	r8, #0
 8056822:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8056a70 <_strtod_l+0xc00>
 8056826:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 805682a:	4b92      	ldr	r3, [pc, #584]	; (8056a74 <_strtod_l+0xc04>)
 805682c:	403b      	ands	r3, r7
 805682e:	9311      	str	r3, [sp, #68]	; 0x44
 8056830:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8056832:	4b91      	ldr	r3, [pc, #580]	; (8056a78 <_strtod_l+0xc08>)
 8056834:	429a      	cmp	r2, r3
 8056836:	f040 80b2 	bne.w	805699e <_strtod_l+0xb2e>
 805683a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 805683e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8056842:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8056846:	ec4b ab10 	vmov	d0, sl, fp
 805684a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 805684e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8056852:	f002 fa0b 	bl	8058c6c <__ulp>
 8056856:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 805685a:	ec53 2b10 	vmov	r2, r3, d0
 805685e:	f7e9 feaf 	bl	80405c0 <__aeabi_dmul>
 8056862:	4652      	mov	r2, sl
 8056864:	465b      	mov	r3, fp
 8056866:	f7e9 fcf5 	bl	8040254 <__adddf3>
 805686a:	460b      	mov	r3, r1
 805686c:	4981      	ldr	r1, [pc, #516]	; (8056a74 <_strtod_l+0xc04>)
 805686e:	4682      	mov	sl, r0
 8056870:	4a82      	ldr	r2, [pc, #520]	; (8056a7c <_strtod_l+0xc0c>)
 8056872:	4019      	ands	r1, r3
 8056874:	4291      	cmp	r1, r2
 8056876:	d95e      	bls.n	8056936 <_strtod_l+0xac6>
 8056878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 805687a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 805687e:	4293      	cmp	r3, r2
 8056880:	d103      	bne.n	805688a <_strtod_l+0xa1a>
 8056882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8056884:	3301      	adds	r3, #1
 8056886:	f43f ad42 	beq.w	805630e <_strtod_l+0x49e>
 805688a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8056a88 <_strtod_l+0xc18>
 805688e:	f04f 3aff 	mov.w	sl, #4294967295
 8056892:	991e      	ldr	r1, [sp, #120]	; 0x78
 8056894:	4620      	mov	r0, r4
 8056896:	f001 feb5 	bl	8058604 <_Bfree>
 805689a:	9907      	ldr	r1, [sp, #28]
 805689c:	4620      	mov	r0, r4
 805689e:	f001 feb1 	bl	8058604 <_Bfree>
 80568a2:	4631      	mov	r1, r6
 80568a4:	4620      	mov	r0, r4
 80568a6:	f001 fead 	bl	8058604 <_Bfree>
 80568aa:	4629      	mov	r1, r5
 80568ac:	4620      	mov	r0, r4
 80568ae:	f001 fea9 	bl	8058604 <_Bfree>
 80568b2:	e613      	b.n	80564dc <_strtod_l+0x66c>
 80568b4:	f1ba 0f00 	cmp.w	sl, #0
 80568b8:	d11b      	bne.n	80568f2 <_strtod_l+0xa82>
 80568ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80568be:	b9f3      	cbnz	r3, 80568fe <_strtod_l+0xa8e>
 80568c0:	2200      	movs	r2, #0
 80568c2:	4b6b      	ldr	r3, [pc, #428]	; (8056a70 <_strtod_l+0xc00>)
 80568c4:	4640      	mov	r0, r8
 80568c6:	4649      	mov	r1, r9
 80568c8:	f7ea f8ec 	bl	8040aa4 <__aeabi_dcmplt>
 80568cc:	b9d0      	cbnz	r0, 8056904 <_strtod_l+0xa94>
 80568ce:	4640      	mov	r0, r8
 80568d0:	4649      	mov	r1, r9
 80568d2:	2200      	movs	r2, #0
 80568d4:	4b6a      	ldr	r3, [pc, #424]	; (8056a80 <_strtod_l+0xc10>)
 80568d6:	f7e9 fe73 	bl	80405c0 <__aeabi_dmul>
 80568da:	4680      	mov	r8, r0
 80568dc:	4689      	mov	r9, r1
 80568de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80568e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80568e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80568e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80568ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80568f0:	e79b      	b.n	805682a <_strtod_l+0x9ba>
 80568f2:	f1ba 0f01 	cmp.w	sl, #1
 80568f6:	d102      	bne.n	80568fe <_strtod_l+0xa8e>
 80568f8:	2f00      	cmp	r7, #0
 80568fa:	f43f ad7d 	beq.w	80563f8 <_strtod_l+0x588>
 80568fe:	2200      	movs	r2, #0
 8056900:	4b60      	ldr	r3, [pc, #384]	; (8056a84 <_strtod_l+0xc14>)
 8056902:	e78c      	b.n	805681e <_strtod_l+0x9ae>
 8056904:	f04f 0800 	mov.w	r8, #0
 8056908:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8056a80 <_strtod_l+0xc10>
 805690c:	e7e7      	b.n	80568de <_strtod_l+0xa6e>
 805690e:	4b5c      	ldr	r3, [pc, #368]	; (8056a80 <_strtod_l+0xc10>)
 8056910:	4640      	mov	r0, r8
 8056912:	4649      	mov	r1, r9
 8056914:	2200      	movs	r2, #0
 8056916:	f7e9 fe53 	bl	80405c0 <__aeabi_dmul>
 805691a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 805691c:	4680      	mov	r8, r0
 805691e:	4689      	mov	r9, r1
 8056920:	b933      	cbnz	r3, 8056930 <_strtod_l+0xac0>
 8056922:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8056926:	9012      	str	r0, [sp, #72]	; 0x48
 8056928:	9313      	str	r3, [sp, #76]	; 0x4c
 805692a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 805692e:	e7dd      	b.n	80568ec <_strtod_l+0xa7c>
 8056930:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8056934:	e7f9      	b.n	805692a <_strtod_l+0xaba>
 8056936:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 805693a:	9b04      	ldr	r3, [sp, #16]
 805693c:	2b00      	cmp	r3, #0
 805693e:	d1a8      	bne.n	8056892 <_strtod_l+0xa22>
 8056940:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8056944:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8056946:	0d1b      	lsrs	r3, r3, #20
 8056948:	051b      	lsls	r3, r3, #20
 805694a:	429a      	cmp	r2, r3
 805694c:	d1a1      	bne.n	8056892 <_strtod_l+0xa22>
 805694e:	4640      	mov	r0, r8
 8056950:	4649      	mov	r1, r9
 8056952:	f7ea f995 	bl	8040c80 <__aeabi_d2lz>
 8056956:	f7e9 fe05 	bl	8040564 <__aeabi_l2d>
 805695a:	4602      	mov	r2, r0
 805695c:	460b      	mov	r3, r1
 805695e:	4640      	mov	r0, r8
 8056960:	4649      	mov	r1, r9
 8056962:	f7e9 fc75 	bl	8040250 <__aeabi_dsub>
 8056966:	f3cb 0313 	ubfx	r3, fp, #0, #20
 805696a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 805696c:	4680      	mov	r8, r0
 805696e:	ea43 030a 	orr.w	r3, r3, sl
 8056972:	4689      	mov	r9, r1
 8056974:	4313      	orrs	r3, r2
 8056976:	d053      	beq.n	8056a20 <_strtod_l+0xbb0>
 8056978:	a335      	add	r3, pc, #212	; (adr r3, 8056a50 <_strtod_l+0xbe0>)
 805697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 805697e:	f7ea f891 	bl	8040aa4 <__aeabi_dcmplt>
 8056982:	2800      	cmp	r0, #0
 8056984:	f47f accd 	bne.w	8056322 <_strtod_l+0x4b2>
 8056988:	4640      	mov	r0, r8
 805698a:	4649      	mov	r1, r9
 805698c:	a332      	add	r3, pc, #200	; (adr r3, 8056a58 <_strtod_l+0xbe8>)
 805698e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8056992:	f7ea f8a5 	bl	8040ae0 <__aeabi_dcmpgt>
 8056996:	2800      	cmp	r0, #0
 8056998:	f43f af7b 	beq.w	8056892 <_strtod_l+0xa22>
 805699c:	e4c1      	b.n	8056322 <_strtod_l+0x4b2>
 805699e:	9b04      	ldr	r3, [sp, #16]
 80569a0:	b333      	cbz	r3, 80569f0 <_strtod_l+0xb80>
 80569a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80569a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80569a8:	d822      	bhi.n	80569f0 <_strtod_l+0xb80>
 80569aa:	4640      	mov	r0, r8
 80569ac:	4649      	mov	r1, r9
 80569ae:	a32c      	add	r3, pc, #176	; (adr r3, 8056a60 <_strtod_l+0xbf0>)
 80569b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80569b4:	f7ea f880 	bl	8040ab8 <__aeabi_dcmple>
 80569b8:	b1a0      	cbz	r0, 80569e4 <_strtod_l+0xb74>
 80569ba:	4649      	mov	r1, r9
 80569bc:	4640      	mov	r0, r8
 80569be:	f7ea f8d7 	bl	8040b70 <__aeabi_d2uiz>
 80569c2:	2801      	cmp	r0, #1
 80569c4:	bf38      	it	cc
 80569c6:	2001      	movcc	r0, #1
 80569c8:	f7e9 fd80 	bl	80404cc <__aeabi_ui2d>
 80569cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80569ce:	4680      	mov	r8, r0
 80569d0:	4689      	mov	r9, r1
 80569d2:	bb13      	cbnz	r3, 8056a1a <_strtod_l+0xbaa>
 80569d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80569d8:	9014      	str	r0, [sp, #80]	; 0x50
 80569da:	9315      	str	r3, [sp, #84]	; 0x54
 80569dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80569e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80569e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80569e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80569e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80569ec:	1a9b      	subs	r3, r3, r2
 80569ee:	930d      	str	r3, [sp, #52]	; 0x34
 80569f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80569f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80569f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80569fc:	f002 f936 	bl	8058c6c <__ulp>
 8056a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8056a04:	ec53 2b10 	vmov	r2, r3, d0
 8056a08:	f7e9 fdda 	bl	80405c0 <__aeabi_dmul>
 8056a0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8056a10:	f7e9 fc20 	bl	8040254 <__adddf3>
 8056a14:	4682      	mov	sl, r0
 8056a16:	468b      	mov	fp, r1
 8056a18:	e78f      	b.n	805693a <_strtod_l+0xaca>
 8056a1a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8056a1e:	e7dd      	b.n	80569dc <_strtod_l+0xb6c>
 8056a20:	a311      	add	r3, pc, #68	; (adr r3, 8056a68 <_strtod_l+0xbf8>)
 8056a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8056a26:	f7ea f83d 	bl	8040aa4 <__aeabi_dcmplt>
 8056a2a:	e7b4      	b.n	8056996 <_strtod_l+0xb26>
 8056a2c:	2300      	movs	r3, #0
 8056a2e:	930e      	str	r3, [sp, #56]	; 0x38
 8056a30:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8056a32:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8056a34:	6013      	str	r3, [r2, #0]
 8056a36:	f7ff ba61 	b.w	8055efc <_strtod_l+0x8c>
 8056a3a:	2b65      	cmp	r3, #101	; 0x65
 8056a3c:	f43f ab5a 	beq.w	80560f4 <_strtod_l+0x284>
 8056a40:	2b45      	cmp	r3, #69	; 0x45
 8056a42:	f43f ab57 	beq.w	80560f4 <_strtod_l+0x284>
 8056a46:	2201      	movs	r2, #1
 8056a48:	f7ff bb90 	b.w	805616c <_strtod_l+0x2fc>
 8056a4c:	f3af 8000 	nop.w
 8056a50:	94a03595 	.word	0x94a03595
 8056a54:	3fdfffff 	.word	0x3fdfffff
 8056a58:	35afe535 	.word	0x35afe535
 8056a5c:	3fe00000 	.word	0x3fe00000
 8056a60:	ffc00000 	.word	0xffc00000
 8056a64:	41dfffff 	.word	0x41dfffff
 8056a68:	94a03595 	.word	0x94a03595
 8056a6c:	3fcfffff 	.word	0x3fcfffff
 8056a70:	3ff00000 	.word	0x3ff00000
 8056a74:	7ff00000 	.word	0x7ff00000
 8056a78:	7fe00000 	.word	0x7fe00000
 8056a7c:	7c9fffff 	.word	0x7c9fffff
 8056a80:	3fe00000 	.word	0x3fe00000
 8056a84:	bff00000 	.word	0xbff00000
 8056a88:	7fefffff 	.word	0x7fefffff

08056a8c <_strtod_r>:
 8056a8c:	4b01      	ldr	r3, [pc, #4]	; (8056a94 <_strtod_r+0x8>)
 8056a8e:	f7ff b9ef 	b.w	8055e70 <_strtod_l>
 8056a92:	bf00      	nop
 8056a94:	20018318 	.word	0x20018318

08056a98 <_strtol_l.isra.0>:
 8056a98:	2b01      	cmp	r3, #1
 8056a9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8056a9e:	d001      	beq.n	8056aa4 <_strtol_l.isra.0+0xc>
 8056aa0:	2b24      	cmp	r3, #36	; 0x24
 8056aa2:	d906      	bls.n	8056ab2 <_strtol_l.isra.0+0x1a>
 8056aa4:	f7fe fa42 	bl	8054f2c <__errno>
 8056aa8:	2316      	movs	r3, #22
 8056aaa:	6003      	str	r3, [r0, #0]
 8056aac:	2000      	movs	r0, #0
 8056aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8056ab2:	468e      	mov	lr, r1
 8056ab4:	4f38      	ldr	r7, [pc, #224]	; (8056b98 <_strtol_l.isra.0+0x100>)
 8056ab6:	4676      	mov	r6, lr
 8056ab8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8056abc:	5de5      	ldrb	r5, [r4, r7]
 8056abe:	f015 0508 	ands.w	r5, r5, #8
 8056ac2:	d1f8      	bne.n	8056ab6 <_strtol_l.isra.0+0x1e>
 8056ac4:	2c2d      	cmp	r4, #45	; 0x2d
 8056ac6:	d134      	bne.n	8056b32 <_strtol_l.isra.0+0x9a>
 8056ac8:	f89e 4000 	ldrb.w	r4, [lr]
 8056acc:	f04f 0801 	mov.w	r8, #1
 8056ad0:	f106 0e02 	add.w	lr, r6, #2
 8056ad4:	2b00      	cmp	r3, #0
 8056ad6:	d05b      	beq.n	8056b90 <_strtol_l.isra.0+0xf8>
 8056ad8:	2b10      	cmp	r3, #16
 8056ada:	d10c      	bne.n	8056af6 <_strtol_l.isra.0+0x5e>
 8056adc:	2c30      	cmp	r4, #48	; 0x30
 8056ade:	d10a      	bne.n	8056af6 <_strtol_l.isra.0+0x5e>
 8056ae0:	f89e 4000 	ldrb.w	r4, [lr]
 8056ae4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8056ae8:	2c58      	cmp	r4, #88	; 0x58
 8056aea:	d14c      	bne.n	8056b86 <_strtol_l.isra.0+0xee>
 8056aec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8056af0:	2310      	movs	r3, #16
 8056af2:	f10e 0e02 	add.w	lr, lr, #2
 8056af6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8056afa:	2600      	movs	r6, #0
 8056afc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8056b00:	4635      	mov	r5, r6
 8056b02:	fbbc f9f3 	udiv	r9, ip, r3
 8056b06:	fb03 ca19 	mls	sl, r3, r9, ip
 8056b0a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8056b0e:	2f09      	cmp	r7, #9
 8056b10:	d817      	bhi.n	8056b42 <_strtol_l.isra.0+0xaa>
 8056b12:	463c      	mov	r4, r7
 8056b14:	42a3      	cmp	r3, r4
 8056b16:	dd23      	ble.n	8056b60 <_strtol_l.isra.0+0xc8>
 8056b18:	2e00      	cmp	r6, #0
 8056b1a:	db1e      	blt.n	8056b5a <_strtol_l.isra.0+0xc2>
 8056b1c:	45a9      	cmp	r9, r5
 8056b1e:	d31c      	bcc.n	8056b5a <_strtol_l.isra.0+0xc2>
 8056b20:	d101      	bne.n	8056b26 <_strtol_l.isra.0+0x8e>
 8056b22:	45a2      	cmp	sl, r4
 8056b24:	db19      	blt.n	8056b5a <_strtol_l.isra.0+0xc2>
 8056b26:	fb05 4503 	mla	r5, r5, r3, r4
 8056b2a:	2601      	movs	r6, #1
 8056b2c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8056b30:	e7eb      	b.n	8056b0a <_strtol_l.isra.0+0x72>
 8056b32:	2c2b      	cmp	r4, #43	; 0x2b
 8056b34:	46a8      	mov	r8, r5
 8056b36:	bf04      	itt	eq
 8056b38:	f89e 4000 	ldrbeq.w	r4, [lr]
 8056b3c:	f106 0e02 	addeq.w	lr, r6, #2
 8056b40:	e7c8      	b.n	8056ad4 <_strtol_l.isra.0+0x3c>
 8056b42:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8056b46:	2f19      	cmp	r7, #25
 8056b48:	d801      	bhi.n	8056b4e <_strtol_l.isra.0+0xb6>
 8056b4a:	3c37      	subs	r4, #55	; 0x37
 8056b4c:	e7e2      	b.n	8056b14 <_strtol_l.isra.0+0x7c>
 8056b4e:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8056b52:	2f19      	cmp	r7, #25
 8056b54:	d804      	bhi.n	8056b60 <_strtol_l.isra.0+0xc8>
 8056b56:	3c57      	subs	r4, #87	; 0x57
 8056b58:	e7dc      	b.n	8056b14 <_strtol_l.isra.0+0x7c>
 8056b5a:	f04f 36ff 	mov.w	r6, #4294967295
 8056b5e:	e7e5      	b.n	8056b2c <_strtol_l.isra.0+0x94>
 8056b60:	2e00      	cmp	r6, #0
 8056b62:	da05      	bge.n	8056b70 <_strtol_l.isra.0+0xd8>
 8056b64:	2322      	movs	r3, #34	; 0x22
 8056b66:	4665      	mov	r5, ip
 8056b68:	6003      	str	r3, [r0, #0]
 8056b6a:	b942      	cbnz	r2, 8056b7e <_strtol_l.isra.0+0xe6>
 8056b6c:	4628      	mov	r0, r5
 8056b6e:	e79e      	b.n	8056aae <_strtol_l.isra.0+0x16>
 8056b70:	f1b8 0f00 	cmp.w	r8, #0
 8056b74:	d000      	beq.n	8056b78 <_strtol_l.isra.0+0xe0>
 8056b76:	426d      	negs	r5, r5
 8056b78:	2a00      	cmp	r2, #0
 8056b7a:	d0f7      	beq.n	8056b6c <_strtol_l.isra.0+0xd4>
 8056b7c:	b10e      	cbz	r6, 8056b82 <_strtol_l.isra.0+0xea>
 8056b7e:	f10e 31ff 	add.w	r1, lr, #4294967295
 8056b82:	6011      	str	r1, [r2, #0]
 8056b84:	e7f2      	b.n	8056b6c <_strtol_l.isra.0+0xd4>
 8056b86:	2430      	movs	r4, #48	; 0x30
 8056b88:	2b00      	cmp	r3, #0
 8056b8a:	d1b4      	bne.n	8056af6 <_strtol_l.isra.0+0x5e>
 8056b8c:	2308      	movs	r3, #8
 8056b8e:	e7b2      	b.n	8056af6 <_strtol_l.isra.0+0x5e>
 8056b90:	2c30      	cmp	r4, #48	; 0x30
 8056b92:	d0a5      	beq.n	8056ae0 <_strtol_l.isra.0+0x48>
 8056b94:	230a      	movs	r3, #10
 8056b96:	e7ae      	b.n	8056af6 <_strtol_l.isra.0+0x5e>
 8056b98:	0805ac49 	.word	0x0805ac49

08056b9c <_strtol_r>:
 8056b9c:	f7ff bf7c 	b.w	8056a98 <_strtol_l.isra.0>

08056ba0 <__swbuf_r>:
 8056ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8056ba2:	460e      	mov	r6, r1
 8056ba4:	4614      	mov	r4, r2
 8056ba6:	4605      	mov	r5, r0
 8056ba8:	b118      	cbz	r0, 8056bb2 <__swbuf_r+0x12>
 8056baa:	6983      	ldr	r3, [r0, #24]
 8056bac:	b90b      	cbnz	r3, 8056bb2 <__swbuf_r+0x12>
 8056bae:	f001 f849 	bl	8057c44 <__sinit>
 8056bb2:	4b21      	ldr	r3, [pc, #132]	; (8056c38 <__swbuf_r+0x98>)
 8056bb4:	429c      	cmp	r4, r3
 8056bb6:	d12b      	bne.n	8056c10 <__swbuf_r+0x70>
 8056bb8:	686c      	ldr	r4, [r5, #4]
 8056bba:	69a3      	ldr	r3, [r4, #24]
 8056bbc:	60a3      	str	r3, [r4, #8]
 8056bbe:	89a3      	ldrh	r3, [r4, #12]
 8056bc0:	071a      	lsls	r2, r3, #28
 8056bc2:	d52f      	bpl.n	8056c24 <__swbuf_r+0x84>
 8056bc4:	6923      	ldr	r3, [r4, #16]
 8056bc6:	b36b      	cbz	r3, 8056c24 <__swbuf_r+0x84>
 8056bc8:	6923      	ldr	r3, [r4, #16]
 8056bca:	b2f6      	uxtb	r6, r6
 8056bcc:	6820      	ldr	r0, [r4, #0]
 8056bce:	4637      	mov	r7, r6
 8056bd0:	1ac0      	subs	r0, r0, r3
 8056bd2:	6963      	ldr	r3, [r4, #20]
 8056bd4:	4283      	cmp	r3, r0
 8056bd6:	dc04      	bgt.n	8056be2 <__swbuf_r+0x42>
 8056bd8:	4621      	mov	r1, r4
 8056bda:	4628      	mov	r0, r5
 8056bdc:	f000 ff9e 	bl	8057b1c <_fflush_r>
 8056be0:	bb30      	cbnz	r0, 8056c30 <__swbuf_r+0x90>
 8056be2:	68a3      	ldr	r3, [r4, #8]
 8056be4:	3001      	adds	r0, #1
 8056be6:	3b01      	subs	r3, #1
 8056be8:	60a3      	str	r3, [r4, #8]
 8056bea:	6823      	ldr	r3, [r4, #0]
 8056bec:	1c5a      	adds	r2, r3, #1
 8056bee:	6022      	str	r2, [r4, #0]
 8056bf0:	701e      	strb	r6, [r3, #0]
 8056bf2:	6963      	ldr	r3, [r4, #20]
 8056bf4:	4283      	cmp	r3, r0
 8056bf6:	d004      	beq.n	8056c02 <__swbuf_r+0x62>
 8056bf8:	89a3      	ldrh	r3, [r4, #12]
 8056bfa:	07db      	lsls	r3, r3, #31
 8056bfc:	d506      	bpl.n	8056c0c <__swbuf_r+0x6c>
 8056bfe:	2e0a      	cmp	r6, #10
 8056c00:	d104      	bne.n	8056c0c <__swbuf_r+0x6c>
 8056c02:	4621      	mov	r1, r4
 8056c04:	4628      	mov	r0, r5
 8056c06:	f000 ff89 	bl	8057b1c <_fflush_r>
 8056c0a:	b988      	cbnz	r0, 8056c30 <__swbuf_r+0x90>
 8056c0c:	4638      	mov	r0, r7
 8056c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8056c10:	4b0a      	ldr	r3, [pc, #40]	; (8056c3c <__swbuf_r+0x9c>)
 8056c12:	429c      	cmp	r4, r3
 8056c14:	d101      	bne.n	8056c1a <__swbuf_r+0x7a>
 8056c16:	68ac      	ldr	r4, [r5, #8]
 8056c18:	e7cf      	b.n	8056bba <__swbuf_r+0x1a>
 8056c1a:	4b09      	ldr	r3, [pc, #36]	; (8056c40 <__swbuf_r+0xa0>)
 8056c1c:	429c      	cmp	r4, r3
 8056c1e:	bf08      	it	eq
 8056c20:	68ec      	ldreq	r4, [r5, #12]
 8056c22:	e7ca      	b.n	8056bba <__swbuf_r+0x1a>
 8056c24:	4621      	mov	r1, r4
 8056c26:	4628      	mov	r0, r5
 8056c28:	f000 f80c 	bl	8056c44 <__swsetup_r>
 8056c2c:	2800      	cmp	r0, #0
 8056c2e:	d0cb      	beq.n	8056bc8 <__swbuf_r+0x28>
 8056c30:	f04f 37ff 	mov.w	r7, #4294967295
 8056c34:	e7ea      	b.n	8056c0c <__swbuf_r+0x6c>
 8056c36:	bf00      	nop
 8056c38:	0805ae00 	.word	0x0805ae00
 8056c3c:	0805ae20 	.word	0x0805ae20
 8056c40:	0805ade0 	.word	0x0805ade0

08056c44 <__swsetup_r>:
 8056c44:	4b32      	ldr	r3, [pc, #200]	; (8056d10 <__swsetup_r+0xcc>)
 8056c46:	b570      	push	{r4, r5, r6, lr}
 8056c48:	681d      	ldr	r5, [r3, #0]
 8056c4a:	4606      	mov	r6, r0
 8056c4c:	460c      	mov	r4, r1
 8056c4e:	b125      	cbz	r5, 8056c5a <__swsetup_r+0x16>
 8056c50:	69ab      	ldr	r3, [r5, #24]
 8056c52:	b913      	cbnz	r3, 8056c5a <__swsetup_r+0x16>
 8056c54:	4628      	mov	r0, r5
 8056c56:	f000 fff5 	bl	8057c44 <__sinit>
 8056c5a:	4b2e      	ldr	r3, [pc, #184]	; (8056d14 <__swsetup_r+0xd0>)
 8056c5c:	429c      	cmp	r4, r3
 8056c5e:	d10f      	bne.n	8056c80 <__swsetup_r+0x3c>
 8056c60:	686c      	ldr	r4, [r5, #4]
 8056c62:	89a3      	ldrh	r3, [r4, #12]
 8056c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8056c68:	0719      	lsls	r1, r3, #28
 8056c6a:	d42c      	bmi.n	8056cc6 <__swsetup_r+0x82>
 8056c6c:	06dd      	lsls	r5, r3, #27
 8056c6e:	d411      	bmi.n	8056c94 <__swsetup_r+0x50>
 8056c70:	2309      	movs	r3, #9
 8056c72:	6033      	str	r3, [r6, #0]
 8056c74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8056c78:	f04f 30ff 	mov.w	r0, #4294967295
 8056c7c:	81a3      	strh	r3, [r4, #12]
 8056c7e:	e03e      	b.n	8056cfe <__swsetup_r+0xba>
 8056c80:	4b25      	ldr	r3, [pc, #148]	; (8056d18 <__swsetup_r+0xd4>)
 8056c82:	429c      	cmp	r4, r3
 8056c84:	d101      	bne.n	8056c8a <__swsetup_r+0x46>
 8056c86:	68ac      	ldr	r4, [r5, #8]
 8056c88:	e7eb      	b.n	8056c62 <__swsetup_r+0x1e>
 8056c8a:	4b24      	ldr	r3, [pc, #144]	; (8056d1c <__swsetup_r+0xd8>)
 8056c8c:	429c      	cmp	r4, r3
 8056c8e:	bf08      	it	eq
 8056c90:	68ec      	ldreq	r4, [r5, #12]
 8056c92:	e7e6      	b.n	8056c62 <__swsetup_r+0x1e>
 8056c94:	0758      	lsls	r0, r3, #29
 8056c96:	d512      	bpl.n	8056cbe <__swsetup_r+0x7a>
 8056c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8056c9a:	b141      	cbz	r1, 8056cae <__swsetup_r+0x6a>
 8056c9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8056ca0:	4299      	cmp	r1, r3
 8056ca2:	d002      	beq.n	8056caa <__swsetup_r+0x66>
 8056ca4:	4630      	mov	r0, r6
 8056ca6:	f002 f93d 	bl	8058f24 <_free_r>
 8056caa:	2300      	movs	r3, #0
 8056cac:	6363      	str	r3, [r4, #52]	; 0x34
 8056cae:	89a3      	ldrh	r3, [r4, #12]
 8056cb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8056cb4:	81a3      	strh	r3, [r4, #12]
 8056cb6:	2300      	movs	r3, #0
 8056cb8:	6063      	str	r3, [r4, #4]
 8056cba:	6923      	ldr	r3, [r4, #16]
 8056cbc:	6023      	str	r3, [r4, #0]
 8056cbe:	89a3      	ldrh	r3, [r4, #12]
 8056cc0:	f043 0308 	orr.w	r3, r3, #8
 8056cc4:	81a3      	strh	r3, [r4, #12]
 8056cc6:	6923      	ldr	r3, [r4, #16]
 8056cc8:	b94b      	cbnz	r3, 8056cde <__swsetup_r+0x9a>
 8056cca:	89a3      	ldrh	r3, [r4, #12]
 8056ccc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8056cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8056cd4:	d003      	beq.n	8056cde <__swsetup_r+0x9a>
 8056cd6:	4621      	mov	r1, r4
 8056cd8:	4630      	mov	r0, r6
 8056cda:	f001 fbeb 	bl	80584b4 <__smakebuf_r>
 8056cde:	89a0      	ldrh	r0, [r4, #12]
 8056ce0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8056ce4:	f010 0301 	ands.w	r3, r0, #1
 8056ce8:	d00a      	beq.n	8056d00 <__swsetup_r+0xbc>
 8056cea:	2300      	movs	r3, #0
 8056cec:	60a3      	str	r3, [r4, #8]
 8056cee:	6963      	ldr	r3, [r4, #20]
 8056cf0:	425b      	negs	r3, r3
 8056cf2:	61a3      	str	r3, [r4, #24]
 8056cf4:	6923      	ldr	r3, [r4, #16]
 8056cf6:	b943      	cbnz	r3, 8056d0a <__swsetup_r+0xc6>
 8056cf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8056cfc:	d1ba      	bne.n	8056c74 <__swsetup_r+0x30>
 8056cfe:	bd70      	pop	{r4, r5, r6, pc}
 8056d00:	0781      	lsls	r1, r0, #30
 8056d02:	bf58      	it	pl
 8056d04:	6963      	ldrpl	r3, [r4, #20]
 8056d06:	60a3      	str	r3, [r4, #8]
 8056d08:	e7f4      	b.n	8056cf4 <__swsetup_r+0xb0>
 8056d0a:	2000      	movs	r0, #0
 8056d0c:	e7f7      	b.n	8056cfe <__swsetup_r+0xba>
 8056d0e:	bf00      	nop
 8056d10:	200182b0 	.word	0x200182b0
 8056d14:	0805ae00 	.word	0x0805ae00
 8056d18:	0805ae20 	.word	0x0805ae20
 8056d1c:	0805ade0 	.word	0x0805ade0

08056d20 <quorem>:
 8056d20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8056d24:	6903      	ldr	r3, [r0, #16]
 8056d26:	4607      	mov	r7, r0
 8056d28:	690c      	ldr	r4, [r1, #16]
 8056d2a:	42a3      	cmp	r3, r4
 8056d2c:	f2c0 8085 	blt.w	8056e3a <quorem+0x11a>
 8056d30:	3c01      	subs	r4, #1
 8056d32:	f100 0514 	add.w	r5, r0, #20
 8056d36:	f101 0814 	add.w	r8, r1, #20
 8056d3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8056d3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8056d42:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8056d46:	9301      	str	r3, [sp, #4]
 8056d48:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8056d4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8056d50:	3301      	adds	r3, #1
 8056d52:	429a      	cmp	r2, r3
 8056d54:	fbb2 f6f3 	udiv	r6, r2, r3
 8056d58:	d333      	bcc.n	8056dc2 <quorem+0xa2>
 8056d5a:	f04f 0e00 	mov.w	lr, #0
 8056d5e:	4640      	mov	r0, r8
 8056d60:	46ac      	mov	ip, r5
 8056d62:	46f2      	mov	sl, lr
 8056d64:	f850 2b04 	ldr.w	r2, [r0], #4
 8056d68:	b293      	uxth	r3, r2
 8056d6a:	4581      	cmp	r9, r0
 8056d6c:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8056d70:	fb06 e303 	mla	r3, r6, r3, lr
 8056d74:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8056d78:	b29b      	uxth	r3, r3
 8056d7a:	fb06 e202 	mla	r2, r6, r2, lr
 8056d7e:	ebaa 0303 	sub.w	r3, sl, r3
 8056d82:	f8dc a000 	ldr.w	sl, [ip]
 8056d86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8056d8a:	fa1f fa8a 	uxth.w	sl, sl
 8056d8e:	4453      	add	r3, sl
 8056d90:	fa1f fa82 	uxth.w	sl, r2
 8056d94:	f8dc 2000 	ldr.w	r2, [ip]
 8056d98:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8056d9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8056da0:	b29b      	uxth	r3, r3
 8056da2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8056da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8056daa:	f84c 3b04 	str.w	r3, [ip], #4
 8056dae:	d2d9      	bcs.n	8056d64 <quorem+0x44>
 8056db0:	f855 300b 	ldr.w	r3, [r5, fp]
 8056db4:	b92b      	cbnz	r3, 8056dc2 <quorem+0xa2>
 8056db6:	9b01      	ldr	r3, [sp, #4]
 8056db8:	3b04      	subs	r3, #4
 8056dba:	429d      	cmp	r5, r3
 8056dbc:	461a      	mov	r2, r3
 8056dbe:	d330      	bcc.n	8056e22 <quorem+0x102>
 8056dc0:	613c      	str	r4, [r7, #16]
 8056dc2:	4638      	mov	r0, r7
 8056dc4:	f001 fea6 	bl	8058b14 <__mcmp>
 8056dc8:	2800      	cmp	r0, #0
 8056dca:	db26      	blt.n	8056e1a <quorem+0xfa>
 8056dcc:	3601      	adds	r6, #1
 8056dce:	4628      	mov	r0, r5
 8056dd0:	f04f 0c00 	mov.w	ip, #0
 8056dd4:	f858 1b04 	ldr.w	r1, [r8], #4
 8056dd8:	f8d0 e000 	ldr.w	lr, [r0]
 8056ddc:	b28b      	uxth	r3, r1
 8056dde:	45c1      	cmp	r9, r8
 8056de0:	fa1f f28e 	uxth.w	r2, lr
 8056de4:	ebac 0303 	sub.w	r3, ip, r3
 8056de8:	4413      	add	r3, r2
 8056dea:	ea4f 4211 	mov.w	r2, r1, lsr #16
 8056dee:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8056df2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8056df6:	b29b      	uxth	r3, r3
 8056df8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8056dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8056e00:	f840 3b04 	str.w	r3, [r0], #4
 8056e04:	d2e6      	bcs.n	8056dd4 <quorem+0xb4>
 8056e06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8056e0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8056e0e:	b922      	cbnz	r2, 8056e1a <quorem+0xfa>
 8056e10:	3b04      	subs	r3, #4
 8056e12:	429d      	cmp	r5, r3
 8056e14:	461a      	mov	r2, r3
 8056e16:	d30a      	bcc.n	8056e2e <quorem+0x10e>
 8056e18:	613c      	str	r4, [r7, #16]
 8056e1a:	4630      	mov	r0, r6
 8056e1c:	b003      	add	sp, #12
 8056e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8056e22:	6812      	ldr	r2, [r2, #0]
 8056e24:	3b04      	subs	r3, #4
 8056e26:	2a00      	cmp	r2, #0
 8056e28:	d1ca      	bne.n	8056dc0 <quorem+0xa0>
 8056e2a:	3c01      	subs	r4, #1
 8056e2c:	e7c5      	b.n	8056dba <quorem+0x9a>
 8056e2e:	6812      	ldr	r2, [r2, #0]
 8056e30:	3b04      	subs	r3, #4
 8056e32:	2a00      	cmp	r2, #0
 8056e34:	d1f0      	bne.n	8056e18 <quorem+0xf8>
 8056e36:	3c01      	subs	r4, #1
 8056e38:	e7eb      	b.n	8056e12 <quorem+0xf2>
 8056e3a:	2000      	movs	r0, #0
 8056e3c:	e7ee      	b.n	8056e1c <quorem+0xfc>
	...

08056e40 <_dtoa_r>:
 8056e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8056e44:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8056e46:	4604      	mov	r4, r0
 8056e48:	ed2d 8b02 	vpush	{d8}
 8056e4c:	b095      	sub	sp, #84	; 0x54
 8056e4e:	ec57 6b10 	vmov	r6, r7, d0
 8056e52:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8056e56:	9105      	str	r1, [sp, #20]
 8056e58:	9209      	str	r2, [sp, #36]	; 0x24
 8056e5a:	930f      	str	r3, [sp, #60]	; 0x3c
 8056e5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8056e60:	b975      	cbnz	r5, 8056e80 <_dtoa_r+0x40>
 8056e62:	2010      	movs	r0, #16
 8056e64:	f001 fb66 	bl	8058534 <malloc>
 8056e68:	4602      	mov	r2, r0
 8056e6a:	6260      	str	r0, [r4, #36]	; 0x24
 8056e6c:	b920      	cbnz	r0, 8056e78 <_dtoa_r+0x38>
 8056e6e:	4bb2      	ldr	r3, [pc, #712]	; (8057138 <_dtoa_r+0x2f8>)
 8056e70:	21ea      	movs	r1, #234	; 0xea
 8056e72:	48b2      	ldr	r0, [pc, #712]	; (805713c <_dtoa_r+0x2fc>)
 8056e74:	f002 fc8c 	bl	8059790 <__assert_func>
 8056e78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8056e7c:	6005      	str	r5, [r0, #0]
 8056e7e:	60c5      	str	r5, [r0, #12]
 8056e80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8056e82:	6819      	ldr	r1, [r3, #0]
 8056e84:	b151      	cbz	r1, 8056e9c <_dtoa_r+0x5c>
 8056e86:	685a      	ldr	r2, [r3, #4]
 8056e88:	2301      	movs	r3, #1
 8056e8a:	4620      	mov	r0, r4
 8056e8c:	4093      	lsls	r3, r2
 8056e8e:	604a      	str	r2, [r1, #4]
 8056e90:	608b      	str	r3, [r1, #8]
 8056e92:	f001 fbb7 	bl	8058604 <_Bfree>
 8056e96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8056e98:	2200      	movs	r2, #0
 8056e9a:	601a      	str	r2, [r3, #0]
 8056e9c:	1e3b      	subs	r3, r7, #0
 8056e9e:	bfb7      	itett	lt
 8056ea0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8056ea4:	2300      	movge	r3, #0
 8056ea6:	2201      	movlt	r2, #1
 8056ea8:	9303      	strlt	r3, [sp, #12]
 8056eaa:	bfa8      	it	ge
 8056eac:	f8c8 3000 	strge.w	r3, [r8]
 8056eb0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8056eb4:	4ba2      	ldr	r3, [pc, #648]	; (8057140 <_dtoa_r+0x300>)
 8056eb6:	bfb8      	it	lt
 8056eb8:	f8c8 2000 	strlt.w	r2, [r8]
 8056ebc:	ea33 0309 	bics.w	r3, r3, r9
 8056ec0:	d11b      	bne.n	8056efa <_dtoa_r+0xba>
 8056ec2:	f242 730f 	movw	r3, #9999	; 0x270f
 8056ec6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8056ec8:	6013      	str	r3, [r2, #0]
 8056eca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8056ece:	4333      	orrs	r3, r6
 8056ed0:	f000 8577 	beq.w	80579c2 <_dtoa_r+0xb82>
 8056ed4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8056ed6:	b963      	cbnz	r3, 8056ef2 <_dtoa_r+0xb2>
 8056ed8:	4b9a      	ldr	r3, [pc, #616]	; (8057144 <_dtoa_r+0x304>)
 8056eda:	e024      	b.n	8056f26 <_dtoa_r+0xe6>
 8056edc:	4b9a      	ldr	r3, [pc, #616]	; (8057148 <_dtoa_r+0x308>)
 8056ede:	9300      	str	r3, [sp, #0]
 8056ee0:	3308      	adds	r3, #8
 8056ee2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8056ee4:	6013      	str	r3, [r2, #0]
 8056ee6:	9800      	ldr	r0, [sp, #0]
 8056ee8:	b015      	add	sp, #84	; 0x54
 8056eea:	ecbd 8b02 	vpop	{d8}
 8056eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8056ef2:	4b94      	ldr	r3, [pc, #592]	; (8057144 <_dtoa_r+0x304>)
 8056ef4:	9300      	str	r3, [sp, #0]
 8056ef6:	3303      	adds	r3, #3
 8056ef8:	e7f3      	b.n	8056ee2 <_dtoa_r+0xa2>
 8056efa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8056efe:	2200      	movs	r2, #0
 8056f00:	2300      	movs	r3, #0
 8056f02:	ec51 0b17 	vmov	r0, r1, d7
 8056f06:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8056f0a:	f7e9 fdc1 	bl	8040a90 <__aeabi_dcmpeq>
 8056f0e:	4680      	mov	r8, r0
 8056f10:	b158      	cbz	r0, 8056f2a <_dtoa_r+0xea>
 8056f12:	2301      	movs	r3, #1
 8056f14:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8056f16:	6013      	str	r3, [r2, #0]
 8056f18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8056f1a:	2b00      	cmp	r3, #0
 8056f1c:	f000 854e 	beq.w	80579bc <_dtoa_r+0xb7c>
 8056f20:	488a      	ldr	r0, [pc, #552]	; (805714c <_dtoa_r+0x30c>)
 8056f22:	6018      	str	r0, [r3, #0]
 8056f24:	1e43      	subs	r3, r0, #1
 8056f26:	9300      	str	r3, [sp, #0]
 8056f28:	e7dd      	b.n	8056ee6 <_dtoa_r+0xa6>
 8056f2a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8056f2e:	aa12      	add	r2, sp, #72	; 0x48
 8056f30:	a913      	add	r1, sp, #76	; 0x4c
 8056f32:	4620      	mov	r0, r4
 8056f34:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8056f38:	f001 ff12 	bl	8058d60 <__d2b>
 8056f3c:	4683      	mov	fp, r0
 8056f3e:	2d00      	cmp	r5, #0
 8056f40:	d07a      	beq.n	8057038 <_dtoa_r+0x1f8>
 8056f42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8056f44:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8056f48:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8056f4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8056f50:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8056f54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8056f58:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8056f5c:	2200      	movs	r2, #0
 8056f5e:	4b7c      	ldr	r3, [pc, #496]	; (8057150 <_dtoa_r+0x310>)
 8056f60:	4630      	mov	r0, r6
 8056f62:	4639      	mov	r1, r7
 8056f64:	f7e9 f974 	bl	8040250 <__aeabi_dsub>
 8056f68:	a36d      	add	r3, pc, #436	; (adr r3, 8057120 <_dtoa_r+0x2e0>)
 8056f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8056f6e:	f7e9 fb27 	bl	80405c0 <__aeabi_dmul>
 8056f72:	a36d      	add	r3, pc, #436	; (adr r3, 8057128 <_dtoa_r+0x2e8>)
 8056f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8056f78:	f7e9 f96c 	bl	8040254 <__adddf3>
 8056f7c:	4606      	mov	r6, r0
 8056f7e:	460f      	mov	r7, r1
 8056f80:	4628      	mov	r0, r5
 8056f82:	f7e9 fab3 	bl	80404ec <__aeabi_i2d>
 8056f86:	a36a      	add	r3, pc, #424	; (adr r3, 8057130 <_dtoa_r+0x2f0>)
 8056f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8056f8c:	f7e9 fb18 	bl	80405c0 <__aeabi_dmul>
 8056f90:	4602      	mov	r2, r0
 8056f92:	460b      	mov	r3, r1
 8056f94:	4630      	mov	r0, r6
 8056f96:	4639      	mov	r1, r7
 8056f98:	f7e9 f95c 	bl	8040254 <__adddf3>
 8056f9c:	4606      	mov	r6, r0
 8056f9e:	460f      	mov	r7, r1
 8056fa0:	f7e9 fdbe 	bl	8040b20 <__aeabi_d2iz>
 8056fa4:	2200      	movs	r2, #0
 8056fa6:	4682      	mov	sl, r0
 8056fa8:	2300      	movs	r3, #0
 8056faa:	4630      	mov	r0, r6
 8056fac:	4639      	mov	r1, r7
 8056fae:	f7e9 fd79 	bl	8040aa4 <__aeabi_dcmplt>
 8056fb2:	b148      	cbz	r0, 8056fc8 <_dtoa_r+0x188>
 8056fb4:	4650      	mov	r0, sl
 8056fb6:	f7e9 fa99 	bl	80404ec <__aeabi_i2d>
 8056fba:	4632      	mov	r2, r6
 8056fbc:	463b      	mov	r3, r7
 8056fbe:	f7e9 fd67 	bl	8040a90 <__aeabi_dcmpeq>
 8056fc2:	b908      	cbnz	r0, 8056fc8 <_dtoa_r+0x188>
 8056fc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8056fc8:	f1ba 0f16 	cmp.w	sl, #22
 8056fcc:	d853      	bhi.n	8057076 <_dtoa_r+0x236>
 8056fce:	4b61      	ldr	r3, [pc, #388]	; (8057154 <_dtoa_r+0x314>)
 8056fd0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8056fd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8056fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8056fdc:	f7e9 fd62 	bl	8040aa4 <__aeabi_dcmplt>
 8056fe0:	2800      	cmp	r0, #0
 8056fe2:	d04a      	beq.n	805707a <_dtoa_r+0x23a>
 8056fe4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8056fe8:	2300      	movs	r3, #0
 8056fea:	930e      	str	r3, [sp, #56]	; 0x38
 8056fec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8056fee:	1b5d      	subs	r5, r3, r5
 8056ff0:	1e6b      	subs	r3, r5, #1
 8056ff2:	9304      	str	r3, [sp, #16]
 8056ff4:	bf45      	ittet	mi
 8056ff6:	2300      	movmi	r3, #0
 8056ff8:	f1c5 0801 	rsbmi	r8, r5, #1
 8056ffc:	f04f 0800 	movpl.w	r8, #0
 8057000:	9304      	strmi	r3, [sp, #16]
 8057002:	f1ba 0f00 	cmp.w	sl, #0
 8057006:	db3a      	blt.n	805707e <_dtoa_r+0x23e>
 8057008:	9b04      	ldr	r3, [sp, #16]
 805700a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 805700e:	4453      	add	r3, sl
 8057010:	9304      	str	r3, [sp, #16]
 8057012:	2300      	movs	r3, #0
 8057014:	9306      	str	r3, [sp, #24]
 8057016:	9b05      	ldr	r3, [sp, #20]
 8057018:	2b09      	cmp	r3, #9
 805701a:	d868      	bhi.n	80570ee <_dtoa_r+0x2ae>
 805701c:	2b05      	cmp	r3, #5
 805701e:	bfc5      	ittet	gt
 8057020:	3b04      	subgt	r3, #4
 8057022:	2500      	movgt	r5, #0
 8057024:	2501      	movle	r5, #1
 8057026:	9305      	strgt	r3, [sp, #20]
 8057028:	9b05      	ldr	r3, [sp, #20]
 805702a:	3b02      	subs	r3, #2
 805702c:	2b03      	cmp	r3, #3
 805702e:	d86a      	bhi.n	8057106 <_dtoa_r+0x2c6>
 8057030:	e8df f003 	tbb	[pc, r3]
 8057034:	5b4d4f2d 	.word	0x5b4d4f2d
 8057038:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 805703c:	441d      	add	r5, r3
 805703e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8057042:	2b20      	cmp	r3, #32
 8057044:	bfc6      	itte	gt
 8057046:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 805704a:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 805704e:	f1c3 0320 	rsble	r3, r3, #32
 8057052:	f105 35ff 	add.w	r5, r5, #4294967295
 8057056:	bfc5      	ittet	gt
 8057058:	fa09 f303 	lslgt.w	r3, r9, r3
 805705c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8057060:	fa06 f003 	lslle.w	r0, r6, r3
 8057064:	4318      	orrgt	r0, r3
 8057066:	f7e9 fa31 	bl	80404cc <__aeabi_ui2d>
 805706a:	2301      	movs	r3, #1
 805706c:	4606      	mov	r6, r0
 805706e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8057072:	9310      	str	r3, [sp, #64]	; 0x40
 8057074:	e772      	b.n	8056f5c <_dtoa_r+0x11c>
 8057076:	2301      	movs	r3, #1
 8057078:	e7b7      	b.n	8056fea <_dtoa_r+0x1aa>
 805707a:	900e      	str	r0, [sp, #56]	; 0x38
 805707c:	e7b6      	b.n	8056fec <_dtoa_r+0x1ac>
 805707e:	f1ca 0300 	rsb	r3, sl, #0
 8057082:	eba8 080a 	sub.w	r8, r8, sl
 8057086:	9306      	str	r3, [sp, #24]
 8057088:	2300      	movs	r3, #0
 805708a:	930d      	str	r3, [sp, #52]	; 0x34
 805708c:	e7c3      	b.n	8057016 <_dtoa_r+0x1d6>
 805708e:	2300      	movs	r3, #0
 8057090:	9308      	str	r3, [sp, #32]
 8057092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8057094:	2b00      	cmp	r3, #0
 8057096:	dc39      	bgt.n	805710c <_dtoa_r+0x2cc>
 8057098:	f04f 0901 	mov.w	r9, #1
 805709c:	464b      	mov	r3, r9
 805709e:	f8cd 9004 	str.w	r9, [sp, #4]
 80570a2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80570a6:	2200      	movs	r2, #0
 80570a8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80570aa:	6042      	str	r2, [r0, #4]
 80570ac:	2204      	movs	r2, #4
 80570ae:	f102 0614 	add.w	r6, r2, #20
 80570b2:	6841      	ldr	r1, [r0, #4]
 80570b4:	429e      	cmp	r6, r3
 80570b6:	d92f      	bls.n	8057118 <_dtoa_r+0x2d8>
 80570b8:	4620      	mov	r0, r4
 80570ba:	f001 fa63 	bl	8058584 <_Balloc>
 80570be:	9000      	str	r0, [sp, #0]
 80570c0:	2800      	cmp	r0, #0
 80570c2:	d14b      	bne.n	805715c <_dtoa_r+0x31c>
 80570c4:	4b24      	ldr	r3, [pc, #144]	; (8057158 <_dtoa_r+0x318>)
 80570c6:	4602      	mov	r2, r0
 80570c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80570cc:	e6d1      	b.n	8056e72 <_dtoa_r+0x32>
 80570ce:	2301      	movs	r3, #1
 80570d0:	e7de      	b.n	8057090 <_dtoa_r+0x250>
 80570d2:	2300      	movs	r3, #0
 80570d4:	9308      	str	r3, [sp, #32]
 80570d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80570d8:	eb0a 0903 	add.w	r9, sl, r3
 80570dc:	f109 0301 	add.w	r3, r9, #1
 80570e0:	2b01      	cmp	r3, #1
 80570e2:	9301      	str	r3, [sp, #4]
 80570e4:	bfb8      	it	lt
 80570e6:	2301      	movlt	r3, #1
 80570e8:	e7dd      	b.n	80570a6 <_dtoa_r+0x266>
 80570ea:	2301      	movs	r3, #1
 80570ec:	e7f2      	b.n	80570d4 <_dtoa_r+0x294>
 80570ee:	2501      	movs	r5, #1
 80570f0:	2300      	movs	r3, #0
 80570f2:	9508      	str	r5, [sp, #32]
 80570f4:	9305      	str	r3, [sp, #20]
 80570f6:	f04f 39ff 	mov.w	r9, #4294967295
 80570fa:	2200      	movs	r2, #0
 80570fc:	2312      	movs	r3, #18
 80570fe:	f8cd 9004 	str.w	r9, [sp, #4]
 8057102:	9209      	str	r2, [sp, #36]	; 0x24
 8057104:	e7cf      	b.n	80570a6 <_dtoa_r+0x266>
 8057106:	2301      	movs	r3, #1
 8057108:	9308      	str	r3, [sp, #32]
 805710a:	e7f4      	b.n	80570f6 <_dtoa_r+0x2b6>
 805710c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8057110:	464b      	mov	r3, r9
 8057112:	f8cd 9004 	str.w	r9, [sp, #4]
 8057116:	e7c6      	b.n	80570a6 <_dtoa_r+0x266>
 8057118:	3101      	adds	r1, #1
 805711a:	0052      	lsls	r2, r2, #1
 805711c:	6041      	str	r1, [r0, #4]
 805711e:	e7c6      	b.n	80570ae <_dtoa_r+0x26e>
 8057120:	636f4361 	.word	0x636f4361
 8057124:	3fd287a7 	.word	0x3fd287a7
 8057128:	8b60c8b3 	.word	0x8b60c8b3
 805712c:	3fc68a28 	.word	0x3fc68a28
 8057130:	509f79fb 	.word	0x509f79fb
 8057134:	3fd34413 	.word	0x3fd34413
 8057138:	0805ad56 	.word	0x0805ad56
 805713c:	0805ad6d 	.word	0x0805ad6d
 8057140:	7ff00000 	.word	0x7ff00000
 8057144:	0805ad52 	.word	0x0805ad52
 8057148:	0805ad49 	.word	0x0805ad49
 805714c:	0805abcd 	.word	0x0805abcd
 8057150:	3ff80000 	.word	0x3ff80000
 8057154:	0805af48 	.word	0x0805af48
 8057158:	0805adcc 	.word	0x0805adcc
 805715c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 805715e:	9a00      	ldr	r2, [sp, #0]
 8057160:	601a      	str	r2, [r3, #0]
 8057162:	9b01      	ldr	r3, [sp, #4]
 8057164:	2b0e      	cmp	r3, #14
 8057166:	f200 80ad 	bhi.w	80572c4 <_dtoa_r+0x484>
 805716a:	2d00      	cmp	r5, #0
 805716c:	f000 80aa 	beq.w	80572c4 <_dtoa_r+0x484>
 8057170:	f1ba 0f00 	cmp.w	sl, #0
 8057174:	dd36      	ble.n	80571e4 <_dtoa_r+0x3a4>
 8057176:	f00a 030f 	and.w	r3, sl, #15
 805717a:	4ac1      	ldr	r2, [pc, #772]	; (8057480 <_dtoa_r+0x640>)
 805717c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8057180:	ea4f 172a 	mov.w	r7, sl, asr #4
 8057184:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8057188:	ed93 7b00 	vldr	d7, [r3]
 805718c:	eeb0 8a47 	vmov.f32	s16, s14
 8057190:	eef0 8a67 	vmov.f32	s17, s15
 8057194:	d016      	beq.n	80571c4 <_dtoa_r+0x384>
 8057196:	4bbb      	ldr	r3, [pc, #748]	; (8057484 <_dtoa_r+0x644>)
 8057198:	f007 070f 	and.w	r7, r7, #15
 805719c:	2503      	movs	r5, #3
 805719e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80571a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80571a6:	f7e9 fb35 	bl	8040814 <__aeabi_ddiv>
 80571aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80571ae:	4eb5      	ldr	r6, [pc, #724]	; (8057484 <_dtoa_r+0x644>)
 80571b0:	b957      	cbnz	r7, 80571c8 <_dtoa_r+0x388>
 80571b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80571b6:	ec53 2b18 	vmov	r2, r3, d8
 80571ba:	f7e9 fb2b 	bl	8040814 <__aeabi_ddiv>
 80571be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80571c2:	e029      	b.n	8057218 <_dtoa_r+0x3d8>
 80571c4:	2502      	movs	r5, #2
 80571c6:	e7f2      	b.n	80571ae <_dtoa_r+0x36e>
 80571c8:	07f9      	lsls	r1, r7, #31
 80571ca:	d508      	bpl.n	80571de <_dtoa_r+0x39e>
 80571cc:	3501      	adds	r5, #1
 80571ce:	ec51 0b18 	vmov	r0, r1, d8
 80571d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80571d6:	f7e9 f9f3 	bl	80405c0 <__aeabi_dmul>
 80571da:	ec41 0b18 	vmov	d8, r0, r1
 80571de:	107f      	asrs	r7, r7, #1
 80571e0:	3608      	adds	r6, #8
 80571e2:	e7e5      	b.n	80571b0 <_dtoa_r+0x370>
 80571e4:	f000 80a6 	beq.w	8057334 <_dtoa_r+0x4f4>
 80571e8:	f1ca 0600 	rsb	r6, sl, #0
 80571ec:	4ba4      	ldr	r3, [pc, #656]	; (8057480 <_dtoa_r+0x640>)
 80571ee:	4fa5      	ldr	r7, [pc, #660]	; (8057484 <_dtoa_r+0x644>)
 80571f0:	2502      	movs	r5, #2
 80571f2:	f006 020f 	and.w	r2, r6, #15
 80571f6:	1136      	asrs	r6, r6, #4
 80571f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80571fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8057200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8057204:	f7e9 f9dc 	bl	80405c0 <__aeabi_dmul>
 8057208:	2300      	movs	r3, #0
 805720a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 805720e:	2e00      	cmp	r6, #0
 8057210:	f040 8085 	bne.w	805731e <_dtoa_r+0x4de>
 8057214:	2b00      	cmp	r3, #0
 8057216:	d1d2      	bne.n	80571be <_dtoa_r+0x37e>
 8057218:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 805721a:	2b00      	cmp	r3, #0
 805721c:	f000 808c 	beq.w	8057338 <_dtoa_r+0x4f8>
 8057220:	2200      	movs	r2, #0
 8057222:	4b99      	ldr	r3, [pc, #612]	; (8057488 <_dtoa_r+0x648>)
 8057224:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8057228:	4630      	mov	r0, r6
 805722a:	4639      	mov	r1, r7
 805722c:	f7e9 fc3a 	bl	8040aa4 <__aeabi_dcmplt>
 8057230:	2800      	cmp	r0, #0
 8057232:	f000 8081 	beq.w	8057338 <_dtoa_r+0x4f8>
 8057236:	9b01      	ldr	r3, [sp, #4]
 8057238:	2b00      	cmp	r3, #0
 805723a:	d07d      	beq.n	8057338 <_dtoa_r+0x4f8>
 805723c:	f1b9 0f00 	cmp.w	r9, #0
 8057240:	dd3c      	ble.n	80572bc <_dtoa_r+0x47c>
 8057242:	f10a 33ff 	add.w	r3, sl, #4294967295
 8057246:	3501      	adds	r5, #1
 8057248:	2200      	movs	r2, #0
 805724a:	4630      	mov	r0, r6
 805724c:	9307      	str	r3, [sp, #28]
 805724e:	4639      	mov	r1, r7
 8057250:	4b8e      	ldr	r3, [pc, #568]	; (805748c <_dtoa_r+0x64c>)
 8057252:	f7e9 f9b5 	bl	80405c0 <__aeabi_dmul>
 8057256:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 805725a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 805725e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8057262:	4628      	mov	r0, r5
 8057264:	f7e9 f942 	bl	80404ec <__aeabi_i2d>
 8057268:	4632      	mov	r2, r6
 805726a:	463b      	mov	r3, r7
 805726c:	f7e9 f9a8 	bl	80405c0 <__aeabi_dmul>
 8057270:	4b87      	ldr	r3, [pc, #540]	; (8057490 <_dtoa_r+0x650>)
 8057272:	2200      	movs	r2, #0
 8057274:	f7e8 ffee 	bl	8040254 <__adddf3>
 8057278:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 805727c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8057280:	9303      	str	r3, [sp, #12]
 8057282:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8057284:	2b00      	cmp	r3, #0
 8057286:	d15c      	bne.n	8057342 <_dtoa_r+0x502>
 8057288:	2200      	movs	r2, #0
 805728a:	4b82      	ldr	r3, [pc, #520]	; (8057494 <_dtoa_r+0x654>)
 805728c:	4630      	mov	r0, r6
 805728e:	4639      	mov	r1, r7
 8057290:	f7e8 ffde 	bl	8040250 <__aeabi_dsub>
 8057294:	4606      	mov	r6, r0
 8057296:	460f      	mov	r7, r1
 8057298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 805729c:	f7e9 fc20 	bl	8040ae0 <__aeabi_dcmpgt>
 80572a0:	2800      	cmp	r0, #0
 80572a2:	f040 8294 	bne.w	80577ce <_dtoa_r+0x98e>
 80572a6:	4630      	mov	r0, r6
 80572a8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80572ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80572b0:	4639      	mov	r1, r7
 80572b2:	f7e9 fbf7 	bl	8040aa4 <__aeabi_dcmplt>
 80572b6:	2800      	cmp	r0, #0
 80572b8:	f040 8286 	bne.w	80577c8 <_dtoa_r+0x988>
 80572bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80572c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80572c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80572c6:	2b00      	cmp	r3, #0
 80572c8:	f2c0 8156 	blt.w	8057578 <_dtoa_r+0x738>
 80572cc:	f1ba 0f0e 	cmp.w	sl, #14
 80572d0:	f300 8152 	bgt.w	8057578 <_dtoa_r+0x738>
 80572d4:	4b6a      	ldr	r3, [pc, #424]	; (8057480 <_dtoa_r+0x640>)
 80572d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80572da:	e9d3 8900 	ldrd	r8, r9, [r3]
 80572de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80572e0:	2b00      	cmp	r3, #0
 80572e2:	f280 80e1 	bge.w	80574a8 <_dtoa_r+0x668>
 80572e6:	9b01      	ldr	r3, [sp, #4]
 80572e8:	2b00      	cmp	r3, #0
 80572ea:	f300 80dd 	bgt.w	80574a8 <_dtoa_r+0x668>
 80572ee:	f040 826b 	bne.w	80577c8 <_dtoa_r+0x988>
 80572f2:	2200      	movs	r2, #0
 80572f4:	4b67      	ldr	r3, [pc, #412]	; (8057494 <_dtoa_r+0x654>)
 80572f6:	4640      	mov	r0, r8
 80572f8:	4649      	mov	r1, r9
 80572fa:	f7e9 f961 	bl	80405c0 <__aeabi_dmul>
 80572fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8057302:	f7e9 fbe3 	bl	8040acc <__aeabi_dcmpge>
 8057306:	9e01      	ldr	r6, [sp, #4]
 8057308:	4637      	mov	r7, r6
 805730a:	2800      	cmp	r0, #0
 805730c:	f040 8241 	bne.w	8057792 <_dtoa_r+0x952>
 8057310:	9d00      	ldr	r5, [sp, #0]
 8057312:	2331      	movs	r3, #49	; 0x31
 8057314:	f10a 0a01 	add.w	sl, sl, #1
 8057318:	f805 3b01 	strb.w	r3, [r5], #1
 805731c:	e23d      	b.n	805779a <_dtoa_r+0x95a>
 805731e:	07f2      	lsls	r2, r6, #31
 8057320:	d505      	bpl.n	805732e <_dtoa_r+0x4ee>
 8057322:	3501      	adds	r5, #1
 8057324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8057328:	f7e9 f94a 	bl	80405c0 <__aeabi_dmul>
 805732c:	2301      	movs	r3, #1
 805732e:	1076      	asrs	r6, r6, #1
 8057330:	3708      	adds	r7, #8
 8057332:	e76c      	b.n	805720e <_dtoa_r+0x3ce>
 8057334:	2502      	movs	r5, #2
 8057336:	e76f      	b.n	8057218 <_dtoa_r+0x3d8>
 8057338:	9b01      	ldr	r3, [sp, #4]
 805733a:	f8cd a01c 	str.w	sl, [sp, #28]
 805733e:	930c      	str	r3, [sp, #48]	; 0x30
 8057340:	e78d      	b.n	805725e <_dtoa_r+0x41e>
 8057342:	9900      	ldr	r1, [sp, #0]
 8057344:	980c      	ldr	r0, [sp, #48]	; 0x30
 8057346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8057348:	4401      	add	r1, r0
 805734a:	4b4d      	ldr	r3, [pc, #308]	; (8057480 <_dtoa_r+0x640>)
 805734c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8057350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8057354:	9102      	str	r1, [sp, #8]
 8057356:	9908      	ldr	r1, [sp, #32]
 8057358:	eeb0 8a47 	vmov.f32	s16, s14
 805735c:	eef0 8a67 	vmov.f32	s17, s15
 8057360:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8057364:	2900      	cmp	r1, #0
 8057366:	d045      	beq.n	80573f4 <_dtoa_r+0x5b4>
 8057368:	2000      	movs	r0, #0
 805736a:	494b      	ldr	r1, [pc, #300]	; (8057498 <_dtoa_r+0x658>)
 805736c:	f7e9 fa52 	bl	8040814 <__aeabi_ddiv>
 8057370:	ec53 2b18 	vmov	r2, r3, d8
 8057374:	f7e8 ff6c 	bl	8040250 <__aeabi_dsub>
 8057378:	9d00      	ldr	r5, [sp, #0]
 805737a:	ec41 0b18 	vmov	d8, r0, r1
 805737e:	4639      	mov	r1, r7
 8057380:	4630      	mov	r0, r6
 8057382:	f7e9 fbcd 	bl	8040b20 <__aeabi_d2iz>
 8057386:	900c      	str	r0, [sp, #48]	; 0x30
 8057388:	f7e9 f8b0 	bl	80404ec <__aeabi_i2d>
 805738c:	4602      	mov	r2, r0
 805738e:	460b      	mov	r3, r1
 8057390:	4630      	mov	r0, r6
 8057392:	4639      	mov	r1, r7
 8057394:	f7e8 ff5c 	bl	8040250 <__aeabi_dsub>
 8057398:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 805739a:	4606      	mov	r6, r0
 805739c:	460f      	mov	r7, r1
 805739e:	3330      	adds	r3, #48	; 0x30
 80573a0:	f805 3b01 	strb.w	r3, [r5], #1
 80573a4:	ec53 2b18 	vmov	r2, r3, d8
 80573a8:	f7e9 fb7c 	bl	8040aa4 <__aeabi_dcmplt>
 80573ac:	2800      	cmp	r0, #0
 80573ae:	d164      	bne.n	805747a <_dtoa_r+0x63a>
 80573b0:	4632      	mov	r2, r6
 80573b2:	463b      	mov	r3, r7
 80573b4:	2000      	movs	r0, #0
 80573b6:	4934      	ldr	r1, [pc, #208]	; (8057488 <_dtoa_r+0x648>)
 80573b8:	f7e8 ff4a 	bl	8040250 <__aeabi_dsub>
 80573bc:	ec53 2b18 	vmov	r2, r3, d8
 80573c0:	f7e9 fb70 	bl	8040aa4 <__aeabi_dcmplt>
 80573c4:	2800      	cmp	r0, #0
 80573c6:	f040 80b7 	bne.w	8057538 <_dtoa_r+0x6f8>
 80573ca:	9b02      	ldr	r3, [sp, #8]
 80573cc:	429d      	cmp	r5, r3
 80573ce:	f43f af75 	beq.w	80572bc <_dtoa_r+0x47c>
 80573d2:	2200      	movs	r2, #0
 80573d4:	4b2d      	ldr	r3, [pc, #180]	; (805748c <_dtoa_r+0x64c>)
 80573d6:	ec51 0b18 	vmov	r0, r1, d8
 80573da:	f7e9 f8f1 	bl	80405c0 <__aeabi_dmul>
 80573de:	2200      	movs	r2, #0
 80573e0:	4b2a      	ldr	r3, [pc, #168]	; (805748c <_dtoa_r+0x64c>)
 80573e2:	ec41 0b18 	vmov	d8, r0, r1
 80573e6:	4630      	mov	r0, r6
 80573e8:	4639      	mov	r1, r7
 80573ea:	f7e9 f8e9 	bl	80405c0 <__aeabi_dmul>
 80573ee:	4606      	mov	r6, r0
 80573f0:	460f      	mov	r7, r1
 80573f2:	e7c4      	b.n	805737e <_dtoa_r+0x53e>
 80573f4:	ec51 0b17 	vmov	r0, r1, d7
 80573f8:	f7e9 f8e2 	bl	80405c0 <__aeabi_dmul>
 80573fc:	9b02      	ldr	r3, [sp, #8]
 80573fe:	9d00      	ldr	r5, [sp, #0]
 8057400:	930c      	str	r3, [sp, #48]	; 0x30
 8057402:	ec41 0b18 	vmov	d8, r0, r1
 8057406:	4639      	mov	r1, r7
 8057408:	4630      	mov	r0, r6
 805740a:	f7e9 fb89 	bl	8040b20 <__aeabi_d2iz>
 805740e:	9011      	str	r0, [sp, #68]	; 0x44
 8057410:	f7e9 f86c 	bl	80404ec <__aeabi_i2d>
 8057414:	4602      	mov	r2, r0
 8057416:	460b      	mov	r3, r1
 8057418:	4630      	mov	r0, r6
 805741a:	4639      	mov	r1, r7
 805741c:	f7e8 ff18 	bl	8040250 <__aeabi_dsub>
 8057420:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8057422:	4606      	mov	r6, r0
 8057424:	460f      	mov	r7, r1
 8057426:	3330      	adds	r3, #48	; 0x30
 8057428:	2200      	movs	r2, #0
 805742a:	f805 3b01 	strb.w	r3, [r5], #1
 805742e:	9b02      	ldr	r3, [sp, #8]
 8057430:	429d      	cmp	r5, r3
 8057432:	d133      	bne.n	805749c <_dtoa_r+0x65c>
 8057434:	4b18      	ldr	r3, [pc, #96]	; (8057498 <_dtoa_r+0x658>)
 8057436:	ec51 0b18 	vmov	r0, r1, d8
 805743a:	f7e8 ff0b 	bl	8040254 <__adddf3>
 805743e:	4602      	mov	r2, r0
 8057440:	460b      	mov	r3, r1
 8057442:	4630      	mov	r0, r6
 8057444:	4639      	mov	r1, r7
 8057446:	f7e9 fb4b 	bl	8040ae0 <__aeabi_dcmpgt>
 805744a:	2800      	cmp	r0, #0
 805744c:	d174      	bne.n	8057538 <_dtoa_r+0x6f8>
 805744e:	2000      	movs	r0, #0
 8057450:	4911      	ldr	r1, [pc, #68]	; (8057498 <_dtoa_r+0x658>)
 8057452:	ec53 2b18 	vmov	r2, r3, d8
 8057456:	f7e8 fefb 	bl	8040250 <__aeabi_dsub>
 805745a:	4602      	mov	r2, r0
 805745c:	460b      	mov	r3, r1
 805745e:	4630      	mov	r0, r6
 8057460:	4639      	mov	r1, r7
 8057462:	f7e9 fb1f 	bl	8040aa4 <__aeabi_dcmplt>
 8057466:	2800      	cmp	r0, #0
 8057468:	f43f af28 	beq.w	80572bc <_dtoa_r+0x47c>
 805746c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 805746e:	1e6b      	subs	r3, r5, #1
 8057470:	930c      	str	r3, [sp, #48]	; 0x30
 8057472:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8057476:	2b30      	cmp	r3, #48	; 0x30
 8057478:	d0f8      	beq.n	805746c <_dtoa_r+0x62c>
 805747a:	f8dd a01c 	ldr.w	sl, [sp, #28]
 805747e:	e049      	b.n	8057514 <_dtoa_r+0x6d4>
 8057480:	0805af48 	.word	0x0805af48
 8057484:	0805af20 	.word	0x0805af20
 8057488:	3ff00000 	.word	0x3ff00000
 805748c:	40240000 	.word	0x40240000
 8057490:	401c0000 	.word	0x401c0000
 8057494:	40140000 	.word	0x40140000
 8057498:	3fe00000 	.word	0x3fe00000
 805749c:	4baf      	ldr	r3, [pc, #700]	; (805775c <_dtoa_r+0x91c>)
 805749e:	f7e9 f88f 	bl	80405c0 <__aeabi_dmul>
 80574a2:	4606      	mov	r6, r0
 80574a4:	460f      	mov	r7, r1
 80574a6:	e7ae      	b.n	8057406 <_dtoa_r+0x5c6>
 80574a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80574ac:	9d00      	ldr	r5, [sp, #0]
 80574ae:	4642      	mov	r2, r8
 80574b0:	464b      	mov	r3, r9
 80574b2:	4630      	mov	r0, r6
 80574b4:	4639      	mov	r1, r7
 80574b6:	f7e9 f9ad 	bl	8040814 <__aeabi_ddiv>
 80574ba:	f7e9 fb31 	bl	8040b20 <__aeabi_d2iz>
 80574be:	9002      	str	r0, [sp, #8]
 80574c0:	f7e9 f814 	bl	80404ec <__aeabi_i2d>
 80574c4:	4642      	mov	r2, r8
 80574c6:	464b      	mov	r3, r9
 80574c8:	f7e9 f87a 	bl	80405c0 <__aeabi_dmul>
 80574cc:	4602      	mov	r2, r0
 80574ce:	460b      	mov	r3, r1
 80574d0:	4630      	mov	r0, r6
 80574d2:	4639      	mov	r1, r7
 80574d4:	f7e8 febc 	bl	8040250 <__aeabi_dsub>
 80574d8:	9e02      	ldr	r6, [sp, #8]
 80574da:	9f01      	ldr	r7, [sp, #4]
 80574dc:	4602      	mov	r2, r0
 80574de:	3630      	adds	r6, #48	; 0x30
 80574e0:	460b      	mov	r3, r1
 80574e2:	f805 6b01 	strb.w	r6, [r5], #1
 80574e6:	9e00      	ldr	r6, [sp, #0]
 80574e8:	1bae      	subs	r6, r5, r6
 80574ea:	42b7      	cmp	r7, r6
 80574ec:	d137      	bne.n	805755e <_dtoa_r+0x71e>
 80574ee:	f7e8 feb1 	bl	8040254 <__adddf3>
 80574f2:	4642      	mov	r2, r8
 80574f4:	464b      	mov	r3, r9
 80574f6:	4606      	mov	r6, r0
 80574f8:	460f      	mov	r7, r1
 80574fa:	f7e9 faf1 	bl	8040ae0 <__aeabi_dcmpgt>
 80574fe:	b9c8      	cbnz	r0, 8057534 <_dtoa_r+0x6f4>
 8057500:	4642      	mov	r2, r8
 8057502:	464b      	mov	r3, r9
 8057504:	4630      	mov	r0, r6
 8057506:	4639      	mov	r1, r7
 8057508:	f7e9 fac2 	bl	8040a90 <__aeabi_dcmpeq>
 805750c:	b110      	cbz	r0, 8057514 <_dtoa_r+0x6d4>
 805750e:	9b02      	ldr	r3, [sp, #8]
 8057510:	07d9      	lsls	r1, r3, #31
 8057512:	d40f      	bmi.n	8057534 <_dtoa_r+0x6f4>
 8057514:	4620      	mov	r0, r4
 8057516:	4659      	mov	r1, fp
 8057518:	f001 f874 	bl	8058604 <_Bfree>
 805751c:	2300      	movs	r3, #0
 805751e:	f10a 0001 	add.w	r0, sl, #1
 8057522:	702b      	strb	r3, [r5, #0]
 8057524:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8057526:	6018      	str	r0, [r3, #0]
 8057528:	9b21      	ldr	r3, [sp, #132]	; 0x84
 805752a:	2b00      	cmp	r3, #0
 805752c:	f43f acdb 	beq.w	8056ee6 <_dtoa_r+0xa6>
 8057530:	601d      	str	r5, [r3, #0]
 8057532:	e4d8      	b.n	8056ee6 <_dtoa_r+0xa6>
 8057534:	f8cd a01c 	str.w	sl, [sp, #28]
 8057538:	462b      	mov	r3, r5
 805753a:	461d      	mov	r5, r3
 805753c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8057540:	2a39      	cmp	r2, #57	; 0x39
 8057542:	d108      	bne.n	8057556 <_dtoa_r+0x716>
 8057544:	9a00      	ldr	r2, [sp, #0]
 8057546:	429a      	cmp	r2, r3
 8057548:	d1f7      	bne.n	805753a <_dtoa_r+0x6fa>
 805754a:	9a07      	ldr	r2, [sp, #28]
 805754c:	9900      	ldr	r1, [sp, #0]
 805754e:	3201      	adds	r2, #1
 8057550:	9207      	str	r2, [sp, #28]
 8057552:	2230      	movs	r2, #48	; 0x30
 8057554:	700a      	strb	r2, [r1, #0]
 8057556:	781a      	ldrb	r2, [r3, #0]
 8057558:	3201      	adds	r2, #1
 805755a:	701a      	strb	r2, [r3, #0]
 805755c:	e78d      	b.n	805747a <_dtoa_r+0x63a>
 805755e:	2200      	movs	r2, #0
 8057560:	4b7e      	ldr	r3, [pc, #504]	; (805775c <_dtoa_r+0x91c>)
 8057562:	f7e9 f82d 	bl	80405c0 <__aeabi_dmul>
 8057566:	2200      	movs	r2, #0
 8057568:	2300      	movs	r3, #0
 805756a:	4606      	mov	r6, r0
 805756c:	460f      	mov	r7, r1
 805756e:	f7e9 fa8f 	bl	8040a90 <__aeabi_dcmpeq>
 8057572:	2800      	cmp	r0, #0
 8057574:	d09b      	beq.n	80574ae <_dtoa_r+0x66e>
 8057576:	e7cd      	b.n	8057514 <_dtoa_r+0x6d4>
 8057578:	9a08      	ldr	r2, [sp, #32]
 805757a:	2a00      	cmp	r2, #0
 805757c:	f000 80c3 	beq.w	8057706 <_dtoa_r+0x8c6>
 8057580:	9a05      	ldr	r2, [sp, #20]
 8057582:	2a01      	cmp	r2, #1
 8057584:	f300 80a8 	bgt.w	80576d8 <_dtoa_r+0x898>
 8057588:	9a10      	ldr	r2, [sp, #64]	; 0x40
 805758a:	2a00      	cmp	r2, #0
 805758c:	f000 80a0 	beq.w	80576d0 <_dtoa_r+0x890>
 8057590:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8057594:	9e06      	ldr	r6, [sp, #24]
 8057596:	4645      	mov	r5, r8
 8057598:	9a04      	ldr	r2, [sp, #16]
 805759a:	2101      	movs	r1, #1
 805759c:	4620      	mov	r0, r4
 805759e:	4498      	add	r8, r3
 80575a0:	441a      	add	r2, r3
 80575a2:	9204      	str	r2, [sp, #16]
 80575a4:	f001 f934 	bl	8058810 <__i2b>
 80575a8:	4607      	mov	r7, r0
 80575aa:	2d00      	cmp	r5, #0
 80575ac:	dd0b      	ble.n	80575c6 <_dtoa_r+0x786>
 80575ae:	9b04      	ldr	r3, [sp, #16]
 80575b0:	2b00      	cmp	r3, #0
 80575b2:	dd08      	ble.n	80575c6 <_dtoa_r+0x786>
 80575b4:	42ab      	cmp	r3, r5
 80575b6:	9a04      	ldr	r2, [sp, #16]
 80575b8:	bfa8      	it	ge
 80575ba:	462b      	movge	r3, r5
 80575bc:	eba8 0803 	sub.w	r8, r8, r3
 80575c0:	1aed      	subs	r5, r5, r3
 80575c2:	1ad3      	subs	r3, r2, r3
 80575c4:	9304      	str	r3, [sp, #16]
 80575c6:	9b06      	ldr	r3, [sp, #24]
 80575c8:	b1fb      	cbz	r3, 805760a <_dtoa_r+0x7ca>
 80575ca:	9b08      	ldr	r3, [sp, #32]
 80575cc:	2b00      	cmp	r3, #0
 80575ce:	f000 809e 	beq.w	805770e <_dtoa_r+0x8ce>
 80575d2:	2e00      	cmp	r6, #0
 80575d4:	dd11      	ble.n	80575fa <_dtoa_r+0x7ba>
 80575d6:	4639      	mov	r1, r7
 80575d8:	4632      	mov	r2, r6
 80575da:	4620      	mov	r0, r4
 80575dc:	f001 f9d4 	bl	8058988 <__pow5mult>
 80575e0:	465a      	mov	r2, fp
 80575e2:	4601      	mov	r1, r0
 80575e4:	4607      	mov	r7, r0
 80575e6:	4620      	mov	r0, r4
 80575e8:	f001 f928 	bl	805883c <__multiply>
 80575ec:	4659      	mov	r1, fp
 80575ee:	9007      	str	r0, [sp, #28]
 80575f0:	4620      	mov	r0, r4
 80575f2:	f001 f807 	bl	8058604 <_Bfree>
 80575f6:	9b07      	ldr	r3, [sp, #28]
 80575f8:	469b      	mov	fp, r3
 80575fa:	9b06      	ldr	r3, [sp, #24]
 80575fc:	1b9a      	subs	r2, r3, r6
 80575fe:	d004      	beq.n	805760a <_dtoa_r+0x7ca>
 8057600:	4659      	mov	r1, fp
 8057602:	4620      	mov	r0, r4
 8057604:	f001 f9c0 	bl	8058988 <__pow5mult>
 8057608:	4683      	mov	fp, r0
 805760a:	2101      	movs	r1, #1
 805760c:	4620      	mov	r0, r4
 805760e:	f001 f8ff 	bl	8058810 <__i2b>
 8057612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8057614:	4606      	mov	r6, r0
 8057616:	2b00      	cmp	r3, #0
 8057618:	dd7b      	ble.n	8057712 <_dtoa_r+0x8d2>
 805761a:	461a      	mov	r2, r3
 805761c:	4601      	mov	r1, r0
 805761e:	4620      	mov	r0, r4
 8057620:	f001 f9b2 	bl	8058988 <__pow5mult>
 8057624:	9b05      	ldr	r3, [sp, #20]
 8057626:	4606      	mov	r6, r0
 8057628:	2b01      	cmp	r3, #1
 805762a:	dd75      	ble.n	8057718 <_dtoa_r+0x8d8>
 805762c:	2300      	movs	r3, #0
 805762e:	9306      	str	r3, [sp, #24]
 8057630:	6933      	ldr	r3, [r6, #16]
 8057632:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8057636:	6918      	ldr	r0, [r3, #16]
 8057638:	f001 f89a 	bl	8058770 <__hi0bits>
 805763c:	f1c0 0020 	rsb	r0, r0, #32
 8057640:	9b04      	ldr	r3, [sp, #16]
 8057642:	4418      	add	r0, r3
 8057644:	f010 001f 	ands.w	r0, r0, #31
 8057648:	f000 8085 	beq.w	8057756 <_dtoa_r+0x916>
 805764c:	f1c0 0320 	rsb	r3, r0, #32
 8057650:	2b04      	cmp	r3, #4
 8057652:	dd7e      	ble.n	8057752 <_dtoa_r+0x912>
 8057654:	f1c0 001c 	rsb	r0, r0, #28
 8057658:	9b04      	ldr	r3, [sp, #16]
 805765a:	4480      	add	r8, r0
 805765c:	4405      	add	r5, r0
 805765e:	4403      	add	r3, r0
 8057660:	9304      	str	r3, [sp, #16]
 8057662:	f1b8 0f00 	cmp.w	r8, #0
 8057666:	dd05      	ble.n	8057674 <_dtoa_r+0x834>
 8057668:	4659      	mov	r1, fp
 805766a:	4642      	mov	r2, r8
 805766c:	4620      	mov	r0, r4
 805766e:	f001 f9e5 	bl	8058a3c <__lshift>
 8057672:	4683      	mov	fp, r0
 8057674:	9b04      	ldr	r3, [sp, #16]
 8057676:	2b00      	cmp	r3, #0
 8057678:	dd05      	ble.n	8057686 <_dtoa_r+0x846>
 805767a:	4631      	mov	r1, r6
 805767c:	461a      	mov	r2, r3
 805767e:	4620      	mov	r0, r4
 8057680:	f001 f9dc 	bl	8058a3c <__lshift>
 8057684:	4606      	mov	r6, r0
 8057686:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8057688:	2b00      	cmp	r3, #0
 805768a:	d069      	beq.n	8057760 <_dtoa_r+0x920>
 805768c:	4631      	mov	r1, r6
 805768e:	4658      	mov	r0, fp
 8057690:	f001 fa40 	bl	8058b14 <__mcmp>
 8057694:	2800      	cmp	r0, #0
 8057696:	da63      	bge.n	8057760 <_dtoa_r+0x920>
 8057698:	2300      	movs	r3, #0
 805769a:	4659      	mov	r1, fp
 805769c:	220a      	movs	r2, #10
 805769e:	4620      	mov	r0, r4
 80576a0:	f000 ffd2 	bl	8058648 <__multadd>
 80576a4:	9b08      	ldr	r3, [sp, #32]
 80576a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80576aa:	4683      	mov	fp, r0
 80576ac:	2b00      	cmp	r3, #0
 80576ae:	f000 818f 	beq.w	80579d0 <_dtoa_r+0xb90>
 80576b2:	4639      	mov	r1, r7
 80576b4:	2300      	movs	r3, #0
 80576b6:	220a      	movs	r2, #10
 80576b8:	4620      	mov	r0, r4
 80576ba:	f000 ffc5 	bl	8058648 <__multadd>
 80576be:	f1b9 0f00 	cmp.w	r9, #0
 80576c2:	4607      	mov	r7, r0
 80576c4:	f300 808e 	bgt.w	80577e4 <_dtoa_r+0x9a4>
 80576c8:	9b05      	ldr	r3, [sp, #20]
 80576ca:	2b02      	cmp	r3, #2
 80576cc:	dc50      	bgt.n	8057770 <_dtoa_r+0x930>
 80576ce:	e089      	b.n	80577e4 <_dtoa_r+0x9a4>
 80576d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80576d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80576d6:	e75d      	b.n	8057594 <_dtoa_r+0x754>
 80576d8:	9b01      	ldr	r3, [sp, #4]
 80576da:	1e5e      	subs	r6, r3, #1
 80576dc:	9b06      	ldr	r3, [sp, #24]
 80576de:	42b3      	cmp	r3, r6
 80576e0:	bfb7      	itett	lt
 80576e2:	9b06      	ldrlt	r3, [sp, #24]
 80576e4:	1b9e      	subge	r6, r3, r6
 80576e6:	9606      	strlt	r6, [sp, #24]
 80576e8:	1af2      	sublt	r2, r6, r3
 80576ea:	bfbf      	itttt	lt
 80576ec:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80576ee:	2600      	movlt	r6, #0
 80576f0:	189b      	addlt	r3, r3, r2
 80576f2:	930d      	strlt	r3, [sp, #52]	; 0x34
 80576f4:	9b01      	ldr	r3, [sp, #4]
 80576f6:	2b00      	cmp	r3, #0
 80576f8:	bfb5      	itete	lt
 80576fa:	eba8 0503 	sublt.w	r5, r8, r3
 80576fe:	4645      	movge	r5, r8
 8057700:	2300      	movlt	r3, #0
 8057702:	9b01      	ldrge	r3, [sp, #4]
 8057704:	e748      	b.n	8057598 <_dtoa_r+0x758>
 8057706:	9e06      	ldr	r6, [sp, #24]
 8057708:	4645      	mov	r5, r8
 805770a:	9f08      	ldr	r7, [sp, #32]
 805770c:	e74d      	b.n	80575aa <_dtoa_r+0x76a>
 805770e:	9a06      	ldr	r2, [sp, #24]
 8057710:	e776      	b.n	8057600 <_dtoa_r+0x7c0>
 8057712:	9b05      	ldr	r3, [sp, #20]
 8057714:	2b01      	cmp	r3, #1
 8057716:	dc18      	bgt.n	805774a <_dtoa_r+0x90a>
 8057718:	9b02      	ldr	r3, [sp, #8]
 805771a:	b9b3      	cbnz	r3, 805774a <_dtoa_r+0x90a>
 805771c:	9b03      	ldr	r3, [sp, #12]
 805771e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8057722:	b9a3      	cbnz	r3, 805774e <_dtoa_r+0x90e>
 8057724:	9b03      	ldr	r3, [sp, #12]
 8057726:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 805772a:	0d1b      	lsrs	r3, r3, #20
 805772c:	051b      	lsls	r3, r3, #20
 805772e:	b12b      	cbz	r3, 805773c <_dtoa_r+0x8fc>
 8057730:	9b04      	ldr	r3, [sp, #16]
 8057732:	f108 0801 	add.w	r8, r8, #1
 8057736:	3301      	adds	r3, #1
 8057738:	9304      	str	r3, [sp, #16]
 805773a:	2301      	movs	r3, #1
 805773c:	9306      	str	r3, [sp, #24]
 805773e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8057740:	2b00      	cmp	r3, #0
 8057742:	f47f af75 	bne.w	8057630 <_dtoa_r+0x7f0>
 8057746:	2001      	movs	r0, #1
 8057748:	e77a      	b.n	8057640 <_dtoa_r+0x800>
 805774a:	2300      	movs	r3, #0
 805774c:	e7f6      	b.n	805773c <_dtoa_r+0x8fc>
 805774e:	9b02      	ldr	r3, [sp, #8]
 8057750:	e7f4      	b.n	805773c <_dtoa_r+0x8fc>
 8057752:	d086      	beq.n	8057662 <_dtoa_r+0x822>
 8057754:	4618      	mov	r0, r3
 8057756:	301c      	adds	r0, #28
 8057758:	e77e      	b.n	8057658 <_dtoa_r+0x818>
 805775a:	bf00      	nop
 805775c:	40240000 	.word	0x40240000
 8057760:	9b01      	ldr	r3, [sp, #4]
 8057762:	2b00      	cmp	r3, #0
 8057764:	dc38      	bgt.n	80577d8 <_dtoa_r+0x998>
 8057766:	9b05      	ldr	r3, [sp, #20]
 8057768:	2b02      	cmp	r3, #2
 805776a:	dd35      	ble.n	80577d8 <_dtoa_r+0x998>
 805776c:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8057770:	f1b9 0f00 	cmp.w	r9, #0
 8057774:	d10d      	bne.n	8057792 <_dtoa_r+0x952>
 8057776:	4631      	mov	r1, r6
 8057778:	464b      	mov	r3, r9
 805777a:	2205      	movs	r2, #5
 805777c:	4620      	mov	r0, r4
 805777e:	f000 ff63 	bl	8058648 <__multadd>
 8057782:	4601      	mov	r1, r0
 8057784:	4606      	mov	r6, r0
 8057786:	4658      	mov	r0, fp
 8057788:	f001 f9c4 	bl	8058b14 <__mcmp>
 805778c:	2800      	cmp	r0, #0
 805778e:	f73f adbf 	bgt.w	8057310 <_dtoa_r+0x4d0>
 8057792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8057794:	9d00      	ldr	r5, [sp, #0]
 8057796:	ea6f 0a03 	mvn.w	sl, r3
 805779a:	f04f 0800 	mov.w	r8, #0
 805779e:	4631      	mov	r1, r6
 80577a0:	4620      	mov	r0, r4
 80577a2:	f000 ff2f 	bl	8058604 <_Bfree>
 80577a6:	2f00      	cmp	r7, #0
 80577a8:	f43f aeb4 	beq.w	8057514 <_dtoa_r+0x6d4>
 80577ac:	f1b8 0f00 	cmp.w	r8, #0
 80577b0:	d005      	beq.n	80577be <_dtoa_r+0x97e>
 80577b2:	45b8      	cmp	r8, r7
 80577b4:	d003      	beq.n	80577be <_dtoa_r+0x97e>
 80577b6:	4641      	mov	r1, r8
 80577b8:	4620      	mov	r0, r4
 80577ba:	f000 ff23 	bl	8058604 <_Bfree>
 80577be:	4639      	mov	r1, r7
 80577c0:	4620      	mov	r0, r4
 80577c2:	f000 ff1f 	bl	8058604 <_Bfree>
 80577c6:	e6a5      	b.n	8057514 <_dtoa_r+0x6d4>
 80577c8:	2600      	movs	r6, #0
 80577ca:	4637      	mov	r7, r6
 80577cc:	e7e1      	b.n	8057792 <_dtoa_r+0x952>
 80577ce:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80577d0:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80577d4:	4637      	mov	r7, r6
 80577d6:	e59b      	b.n	8057310 <_dtoa_r+0x4d0>
 80577d8:	9b08      	ldr	r3, [sp, #32]
 80577da:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80577de:	2b00      	cmp	r3, #0
 80577e0:	f000 80fd 	beq.w	80579de <_dtoa_r+0xb9e>
 80577e4:	2d00      	cmp	r5, #0
 80577e6:	dd05      	ble.n	80577f4 <_dtoa_r+0x9b4>
 80577e8:	4639      	mov	r1, r7
 80577ea:	462a      	mov	r2, r5
 80577ec:	4620      	mov	r0, r4
 80577ee:	f001 f925 	bl	8058a3c <__lshift>
 80577f2:	4607      	mov	r7, r0
 80577f4:	9b06      	ldr	r3, [sp, #24]
 80577f6:	2b00      	cmp	r3, #0
 80577f8:	d05c      	beq.n	80578b4 <_dtoa_r+0xa74>
 80577fa:	6879      	ldr	r1, [r7, #4]
 80577fc:	4620      	mov	r0, r4
 80577fe:	f000 fec1 	bl	8058584 <_Balloc>
 8057802:	4605      	mov	r5, r0
 8057804:	b928      	cbnz	r0, 8057812 <_dtoa_r+0x9d2>
 8057806:	4b80      	ldr	r3, [pc, #512]	; (8057a08 <_dtoa_r+0xbc8>)
 8057808:	4602      	mov	r2, r0
 805780a:	f240 21ea 	movw	r1, #746	; 0x2ea
 805780e:	f7ff bb30 	b.w	8056e72 <_dtoa_r+0x32>
 8057812:	693a      	ldr	r2, [r7, #16]
 8057814:	f107 010c 	add.w	r1, r7, #12
 8057818:	300c      	adds	r0, #12
 805781a:	3202      	adds	r2, #2
 805781c:	0092      	lsls	r2, r2, #2
 805781e:	f7fd fbaf 	bl	8054f80 <memcpy>
 8057822:	2201      	movs	r2, #1
 8057824:	4629      	mov	r1, r5
 8057826:	4620      	mov	r0, r4
 8057828:	f001 f908 	bl	8058a3c <__lshift>
 805782c:	9b00      	ldr	r3, [sp, #0]
 805782e:	46b8      	mov	r8, r7
 8057830:	4607      	mov	r7, r0
 8057832:	3301      	adds	r3, #1
 8057834:	9301      	str	r3, [sp, #4]
 8057836:	9b00      	ldr	r3, [sp, #0]
 8057838:	444b      	add	r3, r9
 805783a:	9307      	str	r3, [sp, #28]
 805783c:	9b02      	ldr	r3, [sp, #8]
 805783e:	f003 0301 	and.w	r3, r3, #1
 8057842:	9306      	str	r3, [sp, #24]
 8057844:	9b01      	ldr	r3, [sp, #4]
 8057846:	4631      	mov	r1, r6
 8057848:	4658      	mov	r0, fp
 805784a:	3b01      	subs	r3, #1
 805784c:	9302      	str	r3, [sp, #8]
 805784e:	f7ff fa67 	bl	8056d20 <quorem>
 8057852:	4603      	mov	r3, r0
 8057854:	4641      	mov	r1, r8
 8057856:	9004      	str	r0, [sp, #16]
 8057858:	4658      	mov	r0, fp
 805785a:	3330      	adds	r3, #48	; 0x30
 805785c:	9308      	str	r3, [sp, #32]
 805785e:	f001 f959 	bl	8058b14 <__mcmp>
 8057862:	463a      	mov	r2, r7
 8057864:	4681      	mov	r9, r0
 8057866:	4631      	mov	r1, r6
 8057868:	4620      	mov	r0, r4
 805786a:	f001 f96f 	bl	8058b4c <__mdiff>
 805786e:	68c2      	ldr	r2, [r0, #12]
 8057870:	4605      	mov	r5, r0
 8057872:	9b08      	ldr	r3, [sp, #32]
 8057874:	bb02      	cbnz	r2, 80578b8 <_dtoa_r+0xa78>
 8057876:	4601      	mov	r1, r0
 8057878:	4658      	mov	r0, fp
 805787a:	f001 f94b 	bl	8058b14 <__mcmp>
 805787e:	9b08      	ldr	r3, [sp, #32]
 8057880:	4602      	mov	r2, r0
 8057882:	4629      	mov	r1, r5
 8057884:	4620      	mov	r0, r4
 8057886:	e9cd 3208 	strd	r3, r2, [sp, #32]
 805788a:	f000 febb 	bl	8058604 <_Bfree>
 805788e:	9b05      	ldr	r3, [sp, #20]
 8057890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8057892:	9d01      	ldr	r5, [sp, #4]
 8057894:	ea43 0102 	orr.w	r1, r3, r2
 8057898:	9b06      	ldr	r3, [sp, #24]
 805789a:	430b      	orrs	r3, r1
 805789c:	9b08      	ldr	r3, [sp, #32]
 805789e:	d10d      	bne.n	80578bc <_dtoa_r+0xa7c>
 80578a0:	2b39      	cmp	r3, #57	; 0x39
 80578a2:	d029      	beq.n	80578f8 <_dtoa_r+0xab8>
 80578a4:	f1b9 0f00 	cmp.w	r9, #0
 80578a8:	dd01      	ble.n	80578ae <_dtoa_r+0xa6e>
 80578aa:	9b04      	ldr	r3, [sp, #16]
 80578ac:	3331      	adds	r3, #49	; 0x31
 80578ae:	9a02      	ldr	r2, [sp, #8]
 80578b0:	7013      	strb	r3, [r2, #0]
 80578b2:	e774      	b.n	805779e <_dtoa_r+0x95e>
 80578b4:	4638      	mov	r0, r7
 80578b6:	e7b9      	b.n	805782c <_dtoa_r+0x9ec>
 80578b8:	2201      	movs	r2, #1
 80578ba:	e7e2      	b.n	8057882 <_dtoa_r+0xa42>
 80578bc:	f1b9 0f00 	cmp.w	r9, #0
 80578c0:	db06      	blt.n	80578d0 <_dtoa_r+0xa90>
 80578c2:	9905      	ldr	r1, [sp, #20]
 80578c4:	ea41 0909 	orr.w	r9, r1, r9
 80578c8:	9906      	ldr	r1, [sp, #24]
 80578ca:	ea59 0101 	orrs.w	r1, r9, r1
 80578ce:	d120      	bne.n	8057912 <_dtoa_r+0xad2>
 80578d0:	2a00      	cmp	r2, #0
 80578d2:	ddec      	ble.n	80578ae <_dtoa_r+0xa6e>
 80578d4:	4659      	mov	r1, fp
 80578d6:	2201      	movs	r2, #1
 80578d8:	4620      	mov	r0, r4
 80578da:	9301      	str	r3, [sp, #4]
 80578dc:	f001 f8ae 	bl	8058a3c <__lshift>
 80578e0:	4631      	mov	r1, r6
 80578e2:	4683      	mov	fp, r0
 80578e4:	f001 f916 	bl	8058b14 <__mcmp>
 80578e8:	2800      	cmp	r0, #0
 80578ea:	9b01      	ldr	r3, [sp, #4]
 80578ec:	dc02      	bgt.n	80578f4 <_dtoa_r+0xab4>
 80578ee:	d1de      	bne.n	80578ae <_dtoa_r+0xa6e>
 80578f0:	07da      	lsls	r2, r3, #31
 80578f2:	d5dc      	bpl.n	80578ae <_dtoa_r+0xa6e>
 80578f4:	2b39      	cmp	r3, #57	; 0x39
 80578f6:	d1d8      	bne.n	80578aa <_dtoa_r+0xa6a>
 80578f8:	2339      	movs	r3, #57	; 0x39
 80578fa:	9a02      	ldr	r2, [sp, #8]
 80578fc:	7013      	strb	r3, [r2, #0]
 80578fe:	462b      	mov	r3, r5
 8057900:	461d      	mov	r5, r3
 8057902:	3b01      	subs	r3, #1
 8057904:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8057908:	2a39      	cmp	r2, #57	; 0x39
 805790a:	d050      	beq.n	80579ae <_dtoa_r+0xb6e>
 805790c:	3201      	adds	r2, #1
 805790e:	701a      	strb	r2, [r3, #0]
 8057910:	e745      	b.n	805779e <_dtoa_r+0x95e>
 8057912:	2a00      	cmp	r2, #0
 8057914:	dd03      	ble.n	805791e <_dtoa_r+0xade>
 8057916:	2b39      	cmp	r3, #57	; 0x39
 8057918:	d0ee      	beq.n	80578f8 <_dtoa_r+0xab8>
 805791a:	3301      	adds	r3, #1
 805791c:	e7c7      	b.n	80578ae <_dtoa_r+0xa6e>
 805791e:	9a01      	ldr	r2, [sp, #4]
 8057920:	9907      	ldr	r1, [sp, #28]
 8057922:	f802 3c01 	strb.w	r3, [r2, #-1]
 8057926:	428a      	cmp	r2, r1
 8057928:	d02a      	beq.n	8057980 <_dtoa_r+0xb40>
 805792a:	4659      	mov	r1, fp
 805792c:	2300      	movs	r3, #0
 805792e:	220a      	movs	r2, #10
 8057930:	4620      	mov	r0, r4
 8057932:	f000 fe89 	bl	8058648 <__multadd>
 8057936:	45b8      	cmp	r8, r7
 8057938:	4683      	mov	fp, r0
 805793a:	f04f 0300 	mov.w	r3, #0
 805793e:	f04f 020a 	mov.w	r2, #10
 8057942:	4641      	mov	r1, r8
 8057944:	4620      	mov	r0, r4
 8057946:	d107      	bne.n	8057958 <_dtoa_r+0xb18>
 8057948:	f000 fe7e 	bl	8058648 <__multadd>
 805794c:	4680      	mov	r8, r0
 805794e:	4607      	mov	r7, r0
 8057950:	9b01      	ldr	r3, [sp, #4]
 8057952:	3301      	adds	r3, #1
 8057954:	9301      	str	r3, [sp, #4]
 8057956:	e775      	b.n	8057844 <_dtoa_r+0xa04>
 8057958:	f000 fe76 	bl	8058648 <__multadd>
 805795c:	4639      	mov	r1, r7
 805795e:	4680      	mov	r8, r0
 8057960:	2300      	movs	r3, #0
 8057962:	220a      	movs	r2, #10
 8057964:	4620      	mov	r0, r4
 8057966:	f000 fe6f 	bl	8058648 <__multadd>
 805796a:	4607      	mov	r7, r0
 805796c:	e7f0      	b.n	8057950 <_dtoa_r+0xb10>
 805796e:	f1b9 0f00 	cmp.w	r9, #0
 8057972:	9a00      	ldr	r2, [sp, #0]
 8057974:	f04f 0800 	mov.w	r8, #0
 8057978:	bfcc      	ite	gt
 805797a:	464d      	movgt	r5, r9
 805797c:	2501      	movle	r5, #1
 805797e:	4415      	add	r5, r2
 8057980:	4659      	mov	r1, fp
 8057982:	2201      	movs	r2, #1
 8057984:	4620      	mov	r0, r4
 8057986:	9301      	str	r3, [sp, #4]
 8057988:	f001 f858 	bl	8058a3c <__lshift>
 805798c:	4631      	mov	r1, r6
 805798e:	4683      	mov	fp, r0
 8057990:	f001 f8c0 	bl	8058b14 <__mcmp>
 8057994:	2800      	cmp	r0, #0
 8057996:	dcb2      	bgt.n	80578fe <_dtoa_r+0xabe>
 8057998:	d102      	bne.n	80579a0 <_dtoa_r+0xb60>
 805799a:	9b01      	ldr	r3, [sp, #4]
 805799c:	07db      	lsls	r3, r3, #31
 805799e:	d4ae      	bmi.n	80578fe <_dtoa_r+0xabe>
 80579a0:	462b      	mov	r3, r5
 80579a2:	461d      	mov	r5, r3
 80579a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80579a8:	2a30      	cmp	r2, #48	; 0x30
 80579aa:	d0fa      	beq.n	80579a2 <_dtoa_r+0xb62>
 80579ac:	e6f7      	b.n	805779e <_dtoa_r+0x95e>
 80579ae:	9a00      	ldr	r2, [sp, #0]
 80579b0:	429a      	cmp	r2, r3
 80579b2:	d1a5      	bne.n	8057900 <_dtoa_r+0xac0>
 80579b4:	f10a 0a01 	add.w	sl, sl, #1
 80579b8:	2331      	movs	r3, #49	; 0x31
 80579ba:	e779      	b.n	80578b0 <_dtoa_r+0xa70>
 80579bc:	4b13      	ldr	r3, [pc, #76]	; (8057a0c <_dtoa_r+0xbcc>)
 80579be:	f7ff bab2 	b.w	8056f26 <_dtoa_r+0xe6>
 80579c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80579c4:	2b00      	cmp	r3, #0
 80579c6:	f47f aa89 	bne.w	8056edc <_dtoa_r+0x9c>
 80579ca:	4b11      	ldr	r3, [pc, #68]	; (8057a10 <_dtoa_r+0xbd0>)
 80579cc:	f7ff baab 	b.w	8056f26 <_dtoa_r+0xe6>
 80579d0:	f1b9 0f00 	cmp.w	r9, #0
 80579d4:	dc03      	bgt.n	80579de <_dtoa_r+0xb9e>
 80579d6:	9b05      	ldr	r3, [sp, #20]
 80579d8:	2b02      	cmp	r3, #2
 80579da:	f73f aec9 	bgt.w	8057770 <_dtoa_r+0x930>
 80579de:	9d00      	ldr	r5, [sp, #0]
 80579e0:	4631      	mov	r1, r6
 80579e2:	4658      	mov	r0, fp
 80579e4:	f7ff f99c 	bl	8056d20 <quorem>
 80579e8:	9a00      	ldr	r2, [sp, #0]
 80579ea:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80579ee:	f805 3b01 	strb.w	r3, [r5], #1
 80579f2:	1aaa      	subs	r2, r5, r2
 80579f4:	4591      	cmp	r9, r2
 80579f6:	ddba      	ble.n	805796e <_dtoa_r+0xb2e>
 80579f8:	4659      	mov	r1, fp
 80579fa:	2300      	movs	r3, #0
 80579fc:	220a      	movs	r2, #10
 80579fe:	4620      	mov	r0, r4
 8057a00:	f000 fe22 	bl	8058648 <__multadd>
 8057a04:	4683      	mov	fp, r0
 8057a06:	e7eb      	b.n	80579e0 <_dtoa_r+0xba0>
 8057a08:	0805adcc 	.word	0x0805adcc
 8057a0c:	0805abcc 	.word	0x0805abcc
 8057a10:	0805ad49 	.word	0x0805ad49

08057a14 <__sflush_r>:
 8057a14:	898a      	ldrh	r2, [r1, #12]
 8057a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8057a1a:	4605      	mov	r5, r0
 8057a1c:	0710      	lsls	r0, r2, #28
 8057a1e:	460c      	mov	r4, r1
 8057a20:	d458      	bmi.n	8057ad4 <__sflush_r+0xc0>
 8057a22:	684b      	ldr	r3, [r1, #4]
 8057a24:	2b00      	cmp	r3, #0
 8057a26:	dc05      	bgt.n	8057a34 <__sflush_r+0x20>
 8057a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8057a2a:	2b00      	cmp	r3, #0
 8057a2c:	dc02      	bgt.n	8057a34 <__sflush_r+0x20>
 8057a2e:	2000      	movs	r0, #0
 8057a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8057a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8057a36:	2e00      	cmp	r6, #0
 8057a38:	d0f9      	beq.n	8057a2e <__sflush_r+0x1a>
 8057a3a:	2300      	movs	r3, #0
 8057a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8057a40:	682f      	ldr	r7, [r5, #0]
 8057a42:	602b      	str	r3, [r5, #0]
 8057a44:	d032      	beq.n	8057aac <__sflush_r+0x98>
 8057a46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8057a48:	89a3      	ldrh	r3, [r4, #12]
 8057a4a:	075a      	lsls	r2, r3, #29
 8057a4c:	d505      	bpl.n	8057a5a <__sflush_r+0x46>
 8057a4e:	6863      	ldr	r3, [r4, #4]
 8057a50:	1ac0      	subs	r0, r0, r3
 8057a52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8057a54:	b10b      	cbz	r3, 8057a5a <__sflush_r+0x46>
 8057a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8057a58:	1ac0      	subs	r0, r0, r3
 8057a5a:	2300      	movs	r3, #0
 8057a5c:	4602      	mov	r2, r0
 8057a5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8057a60:	4628      	mov	r0, r5
 8057a62:	6a21      	ldr	r1, [r4, #32]
 8057a64:	47b0      	blx	r6
 8057a66:	1c43      	adds	r3, r0, #1
 8057a68:	89a3      	ldrh	r3, [r4, #12]
 8057a6a:	d106      	bne.n	8057a7a <__sflush_r+0x66>
 8057a6c:	6829      	ldr	r1, [r5, #0]
 8057a6e:	291d      	cmp	r1, #29
 8057a70:	d82c      	bhi.n	8057acc <__sflush_r+0xb8>
 8057a72:	4a29      	ldr	r2, [pc, #164]	; (8057b18 <__sflush_r+0x104>)
 8057a74:	40ca      	lsrs	r2, r1
 8057a76:	07d6      	lsls	r6, r2, #31
 8057a78:	d528      	bpl.n	8057acc <__sflush_r+0xb8>
 8057a7a:	2200      	movs	r2, #0
 8057a7c:	04d9      	lsls	r1, r3, #19
 8057a7e:	6062      	str	r2, [r4, #4]
 8057a80:	6922      	ldr	r2, [r4, #16]
 8057a82:	6022      	str	r2, [r4, #0]
 8057a84:	d504      	bpl.n	8057a90 <__sflush_r+0x7c>
 8057a86:	1c42      	adds	r2, r0, #1
 8057a88:	d101      	bne.n	8057a8e <__sflush_r+0x7a>
 8057a8a:	682b      	ldr	r3, [r5, #0]
 8057a8c:	b903      	cbnz	r3, 8057a90 <__sflush_r+0x7c>
 8057a8e:	6560      	str	r0, [r4, #84]	; 0x54
 8057a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8057a92:	602f      	str	r7, [r5, #0]
 8057a94:	2900      	cmp	r1, #0
 8057a96:	d0ca      	beq.n	8057a2e <__sflush_r+0x1a>
 8057a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8057a9c:	4299      	cmp	r1, r3
 8057a9e:	d002      	beq.n	8057aa6 <__sflush_r+0x92>
 8057aa0:	4628      	mov	r0, r5
 8057aa2:	f001 fa3f 	bl	8058f24 <_free_r>
 8057aa6:	2000      	movs	r0, #0
 8057aa8:	6360      	str	r0, [r4, #52]	; 0x34
 8057aaa:	e7c1      	b.n	8057a30 <__sflush_r+0x1c>
 8057aac:	6a21      	ldr	r1, [r4, #32]
 8057aae:	2301      	movs	r3, #1
 8057ab0:	4628      	mov	r0, r5
 8057ab2:	47b0      	blx	r6
 8057ab4:	1c41      	adds	r1, r0, #1
 8057ab6:	d1c7      	bne.n	8057a48 <__sflush_r+0x34>
 8057ab8:	682b      	ldr	r3, [r5, #0]
 8057aba:	2b00      	cmp	r3, #0
 8057abc:	d0c4      	beq.n	8057a48 <__sflush_r+0x34>
 8057abe:	2b1d      	cmp	r3, #29
 8057ac0:	d001      	beq.n	8057ac6 <__sflush_r+0xb2>
 8057ac2:	2b16      	cmp	r3, #22
 8057ac4:	d101      	bne.n	8057aca <__sflush_r+0xb6>
 8057ac6:	602f      	str	r7, [r5, #0]
 8057ac8:	e7b1      	b.n	8057a2e <__sflush_r+0x1a>
 8057aca:	89a3      	ldrh	r3, [r4, #12]
 8057acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8057ad0:	81a3      	strh	r3, [r4, #12]
 8057ad2:	e7ad      	b.n	8057a30 <__sflush_r+0x1c>
 8057ad4:	690f      	ldr	r7, [r1, #16]
 8057ad6:	2f00      	cmp	r7, #0
 8057ad8:	d0a9      	beq.n	8057a2e <__sflush_r+0x1a>
 8057ada:	0793      	lsls	r3, r2, #30
 8057adc:	680e      	ldr	r6, [r1, #0]
 8057ade:	600f      	str	r7, [r1, #0]
 8057ae0:	bf0c      	ite	eq
 8057ae2:	694b      	ldreq	r3, [r1, #20]
 8057ae4:	2300      	movne	r3, #0
 8057ae6:	eba6 0807 	sub.w	r8, r6, r7
 8057aea:	608b      	str	r3, [r1, #8]
 8057aec:	f1b8 0f00 	cmp.w	r8, #0
 8057af0:	dd9d      	ble.n	8057a2e <__sflush_r+0x1a>
 8057af2:	4643      	mov	r3, r8
 8057af4:	463a      	mov	r2, r7
 8057af6:	6a21      	ldr	r1, [r4, #32]
 8057af8:	4628      	mov	r0, r5
 8057afa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8057afc:	47b0      	blx	r6
 8057afe:	2800      	cmp	r0, #0
 8057b00:	dc06      	bgt.n	8057b10 <__sflush_r+0xfc>
 8057b02:	89a3      	ldrh	r3, [r4, #12]
 8057b04:	f04f 30ff 	mov.w	r0, #4294967295
 8057b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8057b0c:	81a3      	strh	r3, [r4, #12]
 8057b0e:	e78f      	b.n	8057a30 <__sflush_r+0x1c>
 8057b10:	4407      	add	r7, r0
 8057b12:	eba8 0800 	sub.w	r8, r8, r0
 8057b16:	e7e9      	b.n	8057aec <__sflush_r+0xd8>
 8057b18:	20400001 	.word	0x20400001

08057b1c <_fflush_r>:
 8057b1c:	b538      	push	{r3, r4, r5, lr}
 8057b1e:	690b      	ldr	r3, [r1, #16]
 8057b20:	4605      	mov	r5, r0
 8057b22:	460c      	mov	r4, r1
 8057b24:	b913      	cbnz	r3, 8057b2c <_fflush_r+0x10>
 8057b26:	2500      	movs	r5, #0
 8057b28:	4628      	mov	r0, r5
 8057b2a:	bd38      	pop	{r3, r4, r5, pc}
 8057b2c:	b118      	cbz	r0, 8057b36 <_fflush_r+0x1a>
 8057b2e:	6983      	ldr	r3, [r0, #24]
 8057b30:	b90b      	cbnz	r3, 8057b36 <_fflush_r+0x1a>
 8057b32:	f000 f887 	bl	8057c44 <__sinit>
 8057b36:	4b14      	ldr	r3, [pc, #80]	; (8057b88 <_fflush_r+0x6c>)
 8057b38:	429c      	cmp	r4, r3
 8057b3a:	d11b      	bne.n	8057b74 <_fflush_r+0x58>
 8057b3c:	686c      	ldr	r4, [r5, #4]
 8057b3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8057b42:	2b00      	cmp	r3, #0
 8057b44:	d0ef      	beq.n	8057b26 <_fflush_r+0xa>
 8057b46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8057b48:	07d0      	lsls	r0, r2, #31
 8057b4a:	d404      	bmi.n	8057b56 <_fflush_r+0x3a>
 8057b4c:	0599      	lsls	r1, r3, #22
 8057b4e:	d402      	bmi.n	8057b56 <_fflush_r+0x3a>
 8057b50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8057b52:	f000 fc88 	bl	8058466 <__retarget_lock_acquire_recursive>
 8057b56:	4628      	mov	r0, r5
 8057b58:	4621      	mov	r1, r4
 8057b5a:	f7ff ff5b 	bl	8057a14 <__sflush_r>
 8057b5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8057b60:	4605      	mov	r5, r0
 8057b62:	07da      	lsls	r2, r3, #31
 8057b64:	d4e0      	bmi.n	8057b28 <_fflush_r+0xc>
 8057b66:	89a3      	ldrh	r3, [r4, #12]
 8057b68:	059b      	lsls	r3, r3, #22
 8057b6a:	d4dd      	bmi.n	8057b28 <_fflush_r+0xc>
 8057b6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8057b6e:	f000 fc7b 	bl	8058468 <__retarget_lock_release_recursive>
 8057b72:	e7d9      	b.n	8057b28 <_fflush_r+0xc>
 8057b74:	4b05      	ldr	r3, [pc, #20]	; (8057b8c <_fflush_r+0x70>)
 8057b76:	429c      	cmp	r4, r3
 8057b78:	d101      	bne.n	8057b7e <_fflush_r+0x62>
 8057b7a:	68ac      	ldr	r4, [r5, #8]
 8057b7c:	e7df      	b.n	8057b3e <_fflush_r+0x22>
 8057b7e:	4b04      	ldr	r3, [pc, #16]	; (8057b90 <_fflush_r+0x74>)
 8057b80:	429c      	cmp	r4, r3
 8057b82:	bf08      	it	eq
 8057b84:	68ec      	ldreq	r4, [r5, #12]
 8057b86:	e7da      	b.n	8057b3e <_fflush_r+0x22>
 8057b88:	0805ae00 	.word	0x0805ae00
 8057b8c:	0805ae20 	.word	0x0805ae20
 8057b90:	0805ade0 	.word	0x0805ade0

08057b94 <std>:
 8057b94:	2300      	movs	r3, #0
 8057b96:	b510      	push	{r4, lr}
 8057b98:	4604      	mov	r4, r0
 8057b9a:	6083      	str	r3, [r0, #8]
 8057b9c:	8181      	strh	r1, [r0, #12]
 8057b9e:	4619      	mov	r1, r3
 8057ba0:	6643      	str	r3, [r0, #100]	; 0x64
 8057ba2:	81c2      	strh	r2, [r0, #14]
 8057ba4:	2208      	movs	r2, #8
 8057ba6:	6183      	str	r3, [r0, #24]
 8057ba8:	e9c0 3300 	strd	r3, r3, [r0]
 8057bac:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8057bb0:	305c      	adds	r0, #92	; 0x5c
 8057bb2:	f7fd f9f2 	bl	8054f9a <memset>
 8057bb6:	4b05      	ldr	r3, [pc, #20]	; (8057bcc <std+0x38>)
 8057bb8:	6224      	str	r4, [r4, #32]
 8057bba:	6263      	str	r3, [r4, #36]	; 0x24
 8057bbc:	4b04      	ldr	r3, [pc, #16]	; (8057bd0 <std+0x3c>)
 8057bbe:	62a3      	str	r3, [r4, #40]	; 0x28
 8057bc0:	4b04      	ldr	r3, [pc, #16]	; (8057bd4 <std+0x40>)
 8057bc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8057bc4:	4b04      	ldr	r3, [pc, #16]	; (8057bd8 <std+0x44>)
 8057bc6:	6323      	str	r3, [r4, #48]	; 0x30
 8057bc8:	bd10      	pop	{r4, pc}
 8057bca:	bf00      	nop
 8057bcc:	080596a9 	.word	0x080596a9
 8057bd0:	080596cb 	.word	0x080596cb
 8057bd4:	08059703 	.word	0x08059703
 8057bd8:	08059727 	.word	0x08059727

08057bdc <_cleanup_r>:
 8057bdc:	4901      	ldr	r1, [pc, #4]	; (8057be4 <_cleanup_r+0x8>)
 8057bde:	f000 b8af 	b.w	8057d40 <_fwalk_reent>
 8057be2:	bf00      	nop
 8057be4:	08057b1d 	.word	0x08057b1d

08057be8 <__sfmoreglue>:
 8057be8:	b570      	push	{r4, r5, r6, lr}
 8057bea:	1e4a      	subs	r2, r1, #1
 8057bec:	2568      	movs	r5, #104	; 0x68
 8057bee:	460e      	mov	r6, r1
 8057bf0:	4355      	muls	r5, r2
 8057bf2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8057bf6:	f001 f9e5 	bl	8058fc4 <_malloc_r>
 8057bfa:	4604      	mov	r4, r0
 8057bfc:	b140      	cbz	r0, 8057c10 <__sfmoreglue+0x28>
 8057bfe:	2100      	movs	r1, #0
 8057c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8057c04:	e9c0 1600 	strd	r1, r6, [r0]
 8057c08:	300c      	adds	r0, #12
 8057c0a:	60a0      	str	r0, [r4, #8]
 8057c0c:	f7fd f9c5 	bl	8054f9a <memset>
 8057c10:	4620      	mov	r0, r4
 8057c12:	bd70      	pop	{r4, r5, r6, pc}

08057c14 <__sfp_lock_acquire>:
 8057c14:	4801      	ldr	r0, [pc, #4]	; (8057c1c <__sfp_lock_acquire+0x8>)
 8057c16:	f000 bc26 	b.w	8058466 <__retarget_lock_acquire_recursive>
 8057c1a:	bf00      	nop
 8057c1c:	2001b528 	.word	0x2001b528

08057c20 <__sfp_lock_release>:
 8057c20:	4801      	ldr	r0, [pc, #4]	; (8057c28 <__sfp_lock_release+0x8>)
 8057c22:	f000 bc21 	b.w	8058468 <__retarget_lock_release_recursive>
 8057c26:	bf00      	nop
 8057c28:	2001b528 	.word	0x2001b528

08057c2c <__sinit_lock_acquire>:
 8057c2c:	4801      	ldr	r0, [pc, #4]	; (8057c34 <__sinit_lock_acquire+0x8>)
 8057c2e:	f000 bc1a 	b.w	8058466 <__retarget_lock_acquire_recursive>
 8057c32:	bf00      	nop
 8057c34:	2001b523 	.word	0x2001b523

08057c38 <__sinit_lock_release>:
 8057c38:	4801      	ldr	r0, [pc, #4]	; (8057c40 <__sinit_lock_release+0x8>)
 8057c3a:	f000 bc15 	b.w	8058468 <__retarget_lock_release_recursive>
 8057c3e:	bf00      	nop
 8057c40:	2001b523 	.word	0x2001b523

08057c44 <__sinit>:
 8057c44:	b510      	push	{r4, lr}
 8057c46:	4604      	mov	r4, r0
 8057c48:	f7ff fff0 	bl	8057c2c <__sinit_lock_acquire>
 8057c4c:	69a3      	ldr	r3, [r4, #24]
 8057c4e:	b11b      	cbz	r3, 8057c58 <__sinit+0x14>
 8057c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8057c54:	f7ff bff0 	b.w	8057c38 <__sinit_lock_release>
 8057c58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8057c5c:	6523      	str	r3, [r4, #80]	; 0x50
 8057c5e:	4620      	mov	r0, r4
 8057c60:	4b12      	ldr	r3, [pc, #72]	; (8057cac <__sinit+0x68>)
 8057c62:	4a13      	ldr	r2, [pc, #76]	; (8057cb0 <__sinit+0x6c>)
 8057c64:	681b      	ldr	r3, [r3, #0]
 8057c66:	62a2      	str	r2, [r4, #40]	; 0x28
 8057c68:	42a3      	cmp	r3, r4
 8057c6a:	bf04      	itt	eq
 8057c6c:	2301      	moveq	r3, #1
 8057c6e:	61a3      	streq	r3, [r4, #24]
 8057c70:	f000 f820 	bl	8057cb4 <__sfp>
 8057c74:	6060      	str	r0, [r4, #4]
 8057c76:	4620      	mov	r0, r4
 8057c78:	f000 f81c 	bl	8057cb4 <__sfp>
 8057c7c:	60a0      	str	r0, [r4, #8]
 8057c7e:	4620      	mov	r0, r4
 8057c80:	f000 f818 	bl	8057cb4 <__sfp>
 8057c84:	2200      	movs	r2, #0
 8057c86:	2104      	movs	r1, #4
 8057c88:	60e0      	str	r0, [r4, #12]
 8057c8a:	6860      	ldr	r0, [r4, #4]
 8057c8c:	f7ff ff82 	bl	8057b94 <std>
 8057c90:	2201      	movs	r2, #1
 8057c92:	2109      	movs	r1, #9
 8057c94:	68a0      	ldr	r0, [r4, #8]
 8057c96:	f7ff ff7d 	bl	8057b94 <std>
 8057c9a:	2202      	movs	r2, #2
 8057c9c:	2112      	movs	r1, #18
 8057c9e:	68e0      	ldr	r0, [r4, #12]
 8057ca0:	f7ff ff78 	bl	8057b94 <std>
 8057ca4:	2301      	movs	r3, #1
 8057ca6:	61a3      	str	r3, [r4, #24]
 8057ca8:	e7d2      	b.n	8057c50 <__sinit+0xc>
 8057caa:	bf00      	nop
 8057cac:	0805abb8 	.word	0x0805abb8
 8057cb0:	08057bdd 	.word	0x08057bdd

08057cb4 <__sfp>:
 8057cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8057cb6:	4607      	mov	r7, r0
 8057cb8:	f7ff ffac 	bl	8057c14 <__sfp_lock_acquire>
 8057cbc:	4b1e      	ldr	r3, [pc, #120]	; (8057d38 <__sfp+0x84>)
 8057cbe:	681e      	ldr	r6, [r3, #0]
 8057cc0:	69b3      	ldr	r3, [r6, #24]
 8057cc2:	b913      	cbnz	r3, 8057cca <__sfp+0x16>
 8057cc4:	4630      	mov	r0, r6
 8057cc6:	f7ff ffbd 	bl	8057c44 <__sinit>
 8057cca:	3648      	adds	r6, #72	; 0x48
 8057ccc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8057cd0:	3b01      	subs	r3, #1
 8057cd2:	d503      	bpl.n	8057cdc <__sfp+0x28>
 8057cd4:	6833      	ldr	r3, [r6, #0]
 8057cd6:	b30b      	cbz	r3, 8057d1c <__sfp+0x68>
 8057cd8:	6836      	ldr	r6, [r6, #0]
 8057cda:	e7f7      	b.n	8057ccc <__sfp+0x18>
 8057cdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8057ce0:	b9d5      	cbnz	r5, 8057d18 <__sfp+0x64>
 8057ce2:	4b16      	ldr	r3, [pc, #88]	; (8057d3c <__sfp+0x88>)
 8057ce4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8057ce8:	6665      	str	r5, [r4, #100]	; 0x64
 8057cea:	60e3      	str	r3, [r4, #12]
 8057cec:	f000 fbba 	bl	8058464 <__retarget_lock_init_recursive>
 8057cf0:	f7ff ff96 	bl	8057c20 <__sfp_lock_release>
 8057cf4:	2208      	movs	r2, #8
 8057cf6:	4629      	mov	r1, r5
 8057cf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8057cfc:	6025      	str	r5, [r4, #0]
 8057cfe:	61a5      	str	r5, [r4, #24]
 8057d00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8057d04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8057d08:	f7fd f947 	bl	8054f9a <memset>
 8057d0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8057d10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8057d14:	4620      	mov	r0, r4
 8057d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8057d18:	3468      	adds	r4, #104	; 0x68
 8057d1a:	e7d9      	b.n	8057cd0 <__sfp+0x1c>
 8057d1c:	2104      	movs	r1, #4
 8057d1e:	4638      	mov	r0, r7
 8057d20:	f7ff ff62 	bl	8057be8 <__sfmoreglue>
 8057d24:	4604      	mov	r4, r0
 8057d26:	6030      	str	r0, [r6, #0]
 8057d28:	2800      	cmp	r0, #0
 8057d2a:	d1d5      	bne.n	8057cd8 <__sfp+0x24>
 8057d2c:	f7ff ff78 	bl	8057c20 <__sfp_lock_release>
 8057d30:	230c      	movs	r3, #12
 8057d32:	603b      	str	r3, [r7, #0]
 8057d34:	e7ee      	b.n	8057d14 <__sfp+0x60>
 8057d36:	bf00      	nop
 8057d38:	0805abb8 	.word	0x0805abb8
 8057d3c:	ffff0001 	.word	0xffff0001

08057d40 <_fwalk_reent>:
 8057d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8057d44:	4606      	mov	r6, r0
 8057d46:	4688      	mov	r8, r1
 8057d48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8057d4c:	2700      	movs	r7, #0
 8057d4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8057d52:	f1b9 0901 	subs.w	r9, r9, #1
 8057d56:	d505      	bpl.n	8057d64 <_fwalk_reent+0x24>
 8057d58:	6824      	ldr	r4, [r4, #0]
 8057d5a:	2c00      	cmp	r4, #0
 8057d5c:	d1f7      	bne.n	8057d4e <_fwalk_reent+0xe>
 8057d5e:	4638      	mov	r0, r7
 8057d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8057d64:	89ab      	ldrh	r3, [r5, #12]
 8057d66:	2b01      	cmp	r3, #1
 8057d68:	d907      	bls.n	8057d7a <_fwalk_reent+0x3a>
 8057d6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8057d6e:	3301      	adds	r3, #1
 8057d70:	d003      	beq.n	8057d7a <_fwalk_reent+0x3a>
 8057d72:	4629      	mov	r1, r5
 8057d74:	4630      	mov	r0, r6
 8057d76:	47c0      	blx	r8
 8057d78:	4307      	orrs	r7, r0
 8057d7a:	3568      	adds	r5, #104	; 0x68
 8057d7c:	e7e9      	b.n	8057d52 <_fwalk_reent+0x12>

08057d7e <rshift>:
 8057d7e:	6903      	ldr	r3, [r0, #16]
 8057d80:	114a      	asrs	r2, r1, #5
 8057d82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8057d86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8057d8a:	f100 0414 	add.w	r4, r0, #20
 8057d8e:	dd45      	ble.n	8057e1c <rshift+0x9e>
 8057d90:	f011 011f 	ands.w	r1, r1, #31
 8057d94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8057d98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8057d9c:	d10c      	bne.n	8057db8 <rshift+0x3a>
 8057d9e:	f100 0710 	add.w	r7, r0, #16
 8057da2:	4629      	mov	r1, r5
 8057da4:	42b1      	cmp	r1, r6
 8057da6:	d334      	bcc.n	8057e12 <rshift+0x94>
 8057da8:	1a9b      	subs	r3, r3, r2
 8057daa:	1eea      	subs	r2, r5, #3
 8057dac:	009b      	lsls	r3, r3, #2
 8057dae:	4296      	cmp	r6, r2
 8057db0:	bf38      	it	cc
 8057db2:	2300      	movcc	r3, #0
 8057db4:	4423      	add	r3, r4
 8057db6:	e015      	b.n	8057de4 <rshift+0x66>
 8057db8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8057dbc:	f1c1 0820 	rsb	r8, r1, #32
 8057dc0:	f105 0e04 	add.w	lr, r5, #4
 8057dc4:	46a1      	mov	r9, r4
 8057dc6:	40cf      	lsrs	r7, r1
 8057dc8:	4576      	cmp	r6, lr
 8057dca:	46f4      	mov	ip, lr
 8057dcc:	d815      	bhi.n	8057dfa <rshift+0x7c>
 8057dce:	1a9b      	subs	r3, r3, r2
 8057dd0:	3501      	adds	r5, #1
 8057dd2:	009a      	lsls	r2, r3, #2
 8057dd4:	3a04      	subs	r2, #4
 8057dd6:	42ae      	cmp	r6, r5
 8057dd8:	bf38      	it	cc
 8057dda:	2200      	movcc	r2, #0
 8057ddc:	18a3      	adds	r3, r4, r2
 8057dde:	50a7      	str	r7, [r4, r2]
 8057de0:	b107      	cbz	r7, 8057de4 <rshift+0x66>
 8057de2:	3304      	adds	r3, #4
 8057de4:	1b1a      	subs	r2, r3, r4
 8057de6:	42a3      	cmp	r3, r4
 8057de8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8057dec:	bf08      	it	eq
 8057dee:	2300      	moveq	r3, #0
 8057df0:	6102      	str	r2, [r0, #16]
 8057df2:	bf08      	it	eq
 8057df4:	6143      	streq	r3, [r0, #20]
 8057df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8057dfa:	f8dc c000 	ldr.w	ip, [ip]
 8057dfe:	fa0c fc08 	lsl.w	ip, ip, r8
 8057e02:	ea4c 0707 	orr.w	r7, ip, r7
 8057e06:	f849 7b04 	str.w	r7, [r9], #4
 8057e0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8057e0e:	40cf      	lsrs	r7, r1
 8057e10:	e7da      	b.n	8057dc8 <rshift+0x4a>
 8057e12:	f851 cb04 	ldr.w	ip, [r1], #4
 8057e16:	f847 cf04 	str.w	ip, [r7, #4]!
 8057e1a:	e7c3      	b.n	8057da4 <rshift+0x26>
 8057e1c:	4623      	mov	r3, r4
 8057e1e:	e7e1      	b.n	8057de4 <rshift+0x66>

08057e20 <__hexdig_fun>:
 8057e20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8057e24:	2b09      	cmp	r3, #9
 8057e26:	d802      	bhi.n	8057e2e <__hexdig_fun+0xe>
 8057e28:	3820      	subs	r0, #32
 8057e2a:	b2c0      	uxtb	r0, r0
 8057e2c:	4770      	bx	lr
 8057e2e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8057e32:	2b05      	cmp	r3, #5
 8057e34:	d801      	bhi.n	8057e3a <__hexdig_fun+0x1a>
 8057e36:	3847      	subs	r0, #71	; 0x47
 8057e38:	e7f7      	b.n	8057e2a <__hexdig_fun+0xa>
 8057e3a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8057e3e:	2b05      	cmp	r3, #5
 8057e40:	d801      	bhi.n	8057e46 <__hexdig_fun+0x26>
 8057e42:	3827      	subs	r0, #39	; 0x27
 8057e44:	e7f1      	b.n	8057e2a <__hexdig_fun+0xa>
 8057e46:	2000      	movs	r0, #0
 8057e48:	4770      	bx	lr
	...

08057e4c <__gethex>:
 8057e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8057e50:	ed2d 8b02 	vpush	{d8}
 8057e54:	b089      	sub	sp, #36	; 0x24
 8057e56:	ee08 0a10 	vmov	s16, r0
 8057e5a:	468b      	mov	fp, r1
 8057e5c:	4690      	mov	r8, r2
 8057e5e:	9304      	str	r3, [sp, #16]
 8057e60:	4bbc      	ldr	r3, [pc, #752]	; (8058154 <__gethex+0x308>)
 8057e62:	681b      	ldr	r3, [r3, #0]
 8057e64:	4618      	mov	r0, r3
 8057e66:	9301      	str	r3, [sp, #4]
 8057e68:	f7e8 f9e6 	bl	8040238 <strlen>
 8057e6c:	9b01      	ldr	r3, [sp, #4]
 8057e6e:	f8db 2000 	ldr.w	r2, [fp]
 8057e72:	4682      	mov	sl, r0
 8057e74:	4403      	add	r3, r0
 8057e76:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8057e7a:	9305      	str	r3, [sp, #20]
 8057e7c:	1c93      	adds	r3, r2, #2
 8057e7e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8057e82:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8057e86:	32fe      	adds	r2, #254	; 0xfe
 8057e88:	18d1      	adds	r1, r2, r3
 8057e8a:	461f      	mov	r7, r3
 8057e8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8057e90:	9100      	str	r1, [sp, #0]
 8057e92:	2830      	cmp	r0, #48	; 0x30
 8057e94:	d0f8      	beq.n	8057e88 <__gethex+0x3c>
 8057e96:	f7ff ffc3 	bl	8057e20 <__hexdig_fun>
 8057e9a:	4604      	mov	r4, r0
 8057e9c:	2800      	cmp	r0, #0
 8057e9e:	d139      	bne.n	8057f14 <__gethex+0xc8>
 8057ea0:	4652      	mov	r2, sl
 8057ea2:	9901      	ldr	r1, [sp, #4]
 8057ea4:	4638      	mov	r0, r7
 8057ea6:	f001 fc42 	bl	805972e <strncmp>
 8057eaa:	4605      	mov	r5, r0
 8057eac:	2800      	cmp	r0, #0
 8057eae:	d167      	bne.n	8057f80 <__gethex+0x134>
 8057eb0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8057eb4:	eb07 060a 	add.w	r6, r7, sl
 8057eb8:	f7ff ffb2 	bl	8057e20 <__hexdig_fun>
 8057ebc:	2800      	cmp	r0, #0
 8057ebe:	d061      	beq.n	8057f84 <__gethex+0x138>
 8057ec0:	4633      	mov	r3, r6
 8057ec2:	7818      	ldrb	r0, [r3, #0]
 8057ec4:	461f      	mov	r7, r3
 8057ec6:	3301      	adds	r3, #1
 8057ec8:	2830      	cmp	r0, #48	; 0x30
 8057eca:	d0fa      	beq.n	8057ec2 <__gethex+0x76>
 8057ecc:	f7ff ffa8 	bl	8057e20 <__hexdig_fun>
 8057ed0:	fab0 f480 	clz	r4, r0
 8057ed4:	2301      	movs	r3, #1
 8057ed6:	4635      	mov	r5, r6
 8057ed8:	0964      	lsrs	r4, r4, #5
 8057eda:	9300      	str	r3, [sp, #0]
 8057edc:	463a      	mov	r2, r7
 8057ede:	4616      	mov	r6, r2
 8057ee0:	3201      	adds	r2, #1
 8057ee2:	7830      	ldrb	r0, [r6, #0]
 8057ee4:	f7ff ff9c 	bl	8057e20 <__hexdig_fun>
 8057ee8:	2800      	cmp	r0, #0
 8057eea:	d1f8      	bne.n	8057ede <__gethex+0x92>
 8057eec:	4652      	mov	r2, sl
 8057eee:	9901      	ldr	r1, [sp, #4]
 8057ef0:	4630      	mov	r0, r6
 8057ef2:	f001 fc1c 	bl	805972e <strncmp>
 8057ef6:	b980      	cbnz	r0, 8057f1a <__gethex+0xce>
 8057ef8:	b94d      	cbnz	r5, 8057f0e <__gethex+0xc2>
 8057efa:	eb06 050a 	add.w	r5, r6, sl
 8057efe:	462a      	mov	r2, r5
 8057f00:	4616      	mov	r6, r2
 8057f02:	3201      	adds	r2, #1
 8057f04:	7830      	ldrb	r0, [r6, #0]
 8057f06:	f7ff ff8b 	bl	8057e20 <__hexdig_fun>
 8057f0a:	2800      	cmp	r0, #0
 8057f0c:	d1f8      	bne.n	8057f00 <__gethex+0xb4>
 8057f0e:	1bad      	subs	r5, r5, r6
 8057f10:	00ad      	lsls	r5, r5, #2
 8057f12:	e004      	b.n	8057f1e <__gethex+0xd2>
 8057f14:	2400      	movs	r4, #0
 8057f16:	4625      	mov	r5, r4
 8057f18:	e7e0      	b.n	8057edc <__gethex+0x90>
 8057f1a:	2d00      	cmp	r5, #0
 8057f1c:	d1f7      	bne.n	8057f0e <__gethex+0xc2>
 8057f1e:	7833      	ldrb	r3, [r6, #0]
 8057f20:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8057f24:	2b50      	cmp	r3, #80	; 0x50
 8057f26:	d13b      	bne.n	8057fa0 <__gethex+0x154>
 8057f28:	7873      	ldrb	r3, [r6, #1]
 8057f2a:	2b2b      	cmp	r3, #43	; 0x2b
 8057f2c:	d02c      	beq.n	8057f88 <__gethex+0x13c>
 8057f2e:	2b2d      	cmp	r3, #45	; 0x2d
 8057f30:	d02e      	beq.n	8057f90 <__gethex+0x144>
 8057f32:	1c71      	adds	r1, r6, #1
 8057f34:	f04f 0900 	mov.w	r9, #0
 8057f38:	7808      	ldrb	r0, [r1, #0]
 8057f3a:	f7ff ff71 	bl	8057e20 <__hexdig_fun>
 8057f3e:	1e43      	subs	r3, r0, #1
 8057f40:	b2db      	uxtb	r3, r3
 8057f42:	2b18      	cmp	r3, #24
 8057f44:	d82c      	bhi.n	8057fa0 <__gethex+0x154>
 8057f46:	f1a0 0210 	sub.w	r2, r0, #16
 8057f4a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8057f4e:	f7ff ff67 	bl	8057e20 <__hexdig_fun>
 8057f52:	1e43      	subs	r3, r0, #1
 8057f54:	b2db      	uxtb	r3, r3
 8057f56:	2b18      	cmp	r3, #24
 8057f58:	d91d      	bls.n	8057f96 <__gethex+0x14a>
 8057f5a:	f1b9 0f00 	cmp.w	r9, #0
 8057f5e:	d000      	beq.n	8057f62 <__gethex+0x116>
 8057f60:	4252      	negs	r2, r2
 8057f62:	4415      	add	r5, r2
 8057f64:	f8cb 1000 	str.w	r1, [fp]
 8057f68:	b1e4      	cbz	r4, 8057fa4 <__gethex+0x158>
 8057f6a:	9b00      	ldr	r3, [sp, #0]
 8057f6c:	2b00      	cmp	r3, #0
 8057f6e:	bf14      	ite	ne
 8057f70:	2700      	movne	r7, #0
 8057f72:	2706      	moveq	r7, #6
 8057f74:	4638      	mov	r0, r7
 8057f76:	b009      	add	sp, #36	; 0x24
 8057f78:	ecbd 8b02 	vpop	{d8}
 8057f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8057f80:	463e      	mov	r6, r7
 8057f82:	4625      	mov	r5, r4
 8057f84:	2401      	movs	r4, #1
 8057f86:	e7ca      	b.n	8057f1e <__gethex+0xd2>
 8057f88:	f04f 0900 	mov.w	r9, #0
 8057f8c:	1cb1      	adds	r1, r6, #2
 8057f8e:	e7d3      	b.n	8057f38 <__gethex+0xec>
 8057f90:	f04f 0901 	mov.w	r9, #1
 8057f94:	e7fa      	b.n	8057f8c <__gethex+0x140>
 8057f96:	230a      	movs	r3, #10
 8057f98:	fb03 0202 	mla	r2, r3, r2, r0
 8057f9c:	3a10      	subs	r2, #16
 8057f9e:	e7d4      	b.n	8057f4a <__gethex+0xfe>
 8057fa0:	4631      	mov	r1, r6
 8057fa2:	e7df      	b.n	8057f64 <__gethex+0x118>
 8057fa4:	1bf3      	subs	r3, r6, r7
 8057fa6:	4621      	mov	r1, r4
 8057fa8:	3b01      	subs	r3, #1
 8057faa:	2b07      	cmp	r3, #7
 8057fac:	dc0b      	bgt.n	8057fc6 <__gethex+0x17a>
 8057fae:	ee18 0a10 	vmov	r0, s16
 8057fb2:	f000 fae7 	bl	8058584 <_Balloc>
 8057fb6:	4604      	mov	r4, r0
 8057fb8:	b940      	cbnz	r0, 8057fcc <__gethex+0x180>
 8057fba:	4b67      	ldr	r3, [pc, #412]	; (8058158 <__gethex+0x30c>)
 8057fbc:	4602      	mov	r2, r0
 8057fbe:	21de      	movs	r1, #222	; 0xde
 8057fc0:	4866      	ldr	r0, [pc, #408]	; (805815c <__gethex+0x310>)
 8057fc2:	f001 fbe5 	bl	8059790 <__assert_func>
 8057fc6:	3101      	adds	r1, #1
 8057fc8:	105b      	asrs	r3, r3, #1
 8057fca:	e7ee      	b.n	8057faa <__gethex+0x15e>
 8057fcc:	f100 0914 	add.w	r9, r0, #20
 8057fd0:	f04f 0b00 	mov.w	fp, #0
 8057fd4:	f1ca 0301 	rsb	r3, sl, #1
 8057fd8:	f8cd 9008 	str.w	r9, [sp, #8]
 8057fdc:	f8cd b000 	str.w	fp, [sp]
 8057fe0:	9306      	str	r3, [sp, #24]
 8057fe2:	42b7      	cmp	r7, r6
 8057fe4:	d340      	bcc.n	8058068 <__gethex+0x21c>
 8057fe6:	9802      	ldr	r0, [sp, #8]
 8057fe8:	9b00      	ldr	r3, [sp, #0]
 8057fea:	f840 3b04 	str.w	r3, [r0], #4
 8057fee:	eba0 0009 	sub.w	r0, r0, r9
 8057ff2:	1080      	asrs	r0, r0, #2
 8057ff4:	0146      	lsls	r6, r0, #5
 8057ff6:	6120      	str	r0, [r4, #16]
 8057ff8:	4618      	mov	r0, r3
 8057ffa:	f000 fbb9 	bl	8058770 <__hi0bits>
 8057ffe:	1a30      	subs	r0, r6, r0
 8058000:	f8d8 6000 	ldr.w	r6, [r8]
 8058004:	42b0      	cmp	r0, r6
 8058006:	dd63      	ble.n	80580d0 <__gethex+0x284>
 8058008:	1b87      	subs	r7, r0, r6
 805800a:	4620      	mov	r0, r4
 805800c:	4639      	mov	r1, r7
 805800e:	f000 ff59 	bl	8058ec4 <__any_on>
 8058012:	4682      	mov	sl, r0
 8058014:	b1a8      	cbz	r0, 8058042 <__gethex+0x1f6>
 8058016:	1e7b      	subs	r3, r7, #1
 8058018:	f04f 0a01 	mov.w	sl, #1
 805801c:	1159      	asrs	r1, r3, #5
 805801e:	f003 021f 	and.w	r2, r3, #31
 8058022:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8058026:	fa0a f202 	lsl.w	r2, sl, r2
 805802a:	420a      	tst	r2, r1
 805802c:	d009      	beq.n	8058042 <__gethex+0x1f6>
 805802e:	4553      	cmp	r3, sl
 8058030:	dd05      	ble.n	805803e <__gethex+0x1f2>
 8058032:	1eb9      	subs	r1, r7, #2
 8058034:	4620      	mov	r0, r4
 8058036:	f000 ff45 	bl	8058ec4 <__any_on>
 805803a:	2800      	cmp	r0, #0
 805803c:	d145      	bne.n	80580ca <__gethex+0x27e>
 805803e:	f04f 0a02 	mov.w	sl, #2
 8058042:	443d      	add	r5, r7
 8058044:	4639      	mov	r1, r7
 8058046:	4620      	mov	r0, r4
 8058048:	f7ff fe99 	bl	8057d7e <rshift>
 805804c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8058050:	42ab      	cmp	r3, r5
 8058052:	da4c      	bge.n	80580ee <__gethex+0x2a2>
 8058054:	4621      	mov	r1, r4
 8058056:	ee18 0a10 	vmov	r0, s16
 805805a:	f000 fad3 	bl	8058604 <_Bfree>
 805805e:	2300      	movs	r3, #0
 8058060:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8058062:	27a3      	movs	r7, #163	; 0xa3
 8058064:	6013      	str	r3, [r2, #0]
 8058066:	e785      	b.n	8057f74 <__gethex+0x128>
 8058068:	1e73      	subs	r3, r6, #1
 805806a:	9a05      	ldr	r2, [sp, #20]
 805806c:	9303      	str	r3, [sp, #12]
 805806e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8058072:	4293      	cmp	r3, r2
 8058074:	d019      	beq.n	80580aa <__gethex+0x25e>
 8058076:	f1bb 0f20 	cmp.w	fp, #32
 805807a:	d107      	bne.n	805808c <__gethex+0x240>
 805807c:	9b02      	ldr	r3, [sp, #8]
 805807e:	9a00      	ldr	r2, [sp, #0]
 8058080:	f843 2b04 	str.w	r2, [r3], #4
 8058084:	9302      	str	r3, [sp, #8]
 8058086:	2300      	movs	r3, #0
 8058088:	469b      	mov	fp, r3
 805808a:	9300      	str	r3, [sp, #0]
 805808c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8058090:	f7ff fec6 	bl	8057e20 <__hexdig_fun>
 8058094:	f000 000f 	and.w	r0, r0, #15
 8058098:	9b00      	ldr	r3, [sp, #0]
 805809a:	fa00 f00b 	lsl.w	r0, r0, fp
 805809e:	f10b 0b04 	add.w	fp, fp, #4
 80580a2:	4303      	orrs	r3, r0
 80580a4:	9300      	str	r3, [sp, #0]
 80580a6:	9b03      	ldr	r3, [sp, #12]
 80580a8:	e00d      	b.n	80580c6 <__gethex+0x27a>
 80580aa:	9b03      	ldr	r3, [sp, #12]
 80580ac:	9a06      	ldr	r2, [sp, #24]
 80580ae:	4413      	add	r3, r2
 80580b0:	42bb      	cmp	r3, r7
 80580b2:	d3e0      	bcc.n	8058076 <__gethex+0x22a>
 80580b4:	4618      	mov	r0, r3
 80580b6:	4652      	mov	r2, sl
 80580b8:	9901      	ldr	r1, [sp, #4]
 80580ba:	9307      	str	r3, [sp, #28]
 80580bc:	f001 fb37 	bl	805972e <strncmp>
 80580c0:	9b07      	ldr	r3, [sp, #28]
 80580c2:	2800      	cmp	r0, #0
 80580c4:	d1d7      	bne.n	8058076 <__gethex+0x22a>
 80580c6:	461e      	mov	r6, r3
 80580c8:	e78b      	b.n	8057fe2 <__gethex+0x196>
 80580ca:	f04f 0a03 	mov.w	sl, #3
 80580ce:	e7b8      	b.n	8058042 <__gethex+0x1f6>
 80580d0:	da0a      	bge.n	80580e8 <__gethex+0x29c>
 80580d2:	1a37      	subs	r7, r6, r0
 80580d4:	4621      	mov	r1, r4
 80580d6:	ee18 0a10 	vmov	r0, s16
 80580da:	463a      	mov	r2, r7
 80580dc:	1bed      	subs	r5, r5, r7
 80580de:	f000 fcad 	bl	8058a3c <__lshift>
 80580e2:	4604      	mov	r4, r0
 80580e4:	f100 0914 	add.w	r9, r0, #20
 80580e8:	f04f 0a00 	mov.w	sl, #0
 80580ec:	e7ae      	b.n	805804c <__gethex+0x200>
 80580ee:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80580f2:	42a8      	cmp	r0, r5
 80580f4:	dd72      	ble.n	80581dc <__gethex+0x390>
 80580f6:	1b45      	subs	r5, r0, r5
 80580f8:	42ae      	cmp	r6, r5
 80580fa:	dc35      	bgt.n	8058168 <__gethex+0x31c>
 80580fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8058100:	2b02      	cmp	r3, #2
 8058102:	d023      	beq.n	805814c <__gethex+0x300>
 8058104:	2b03      	cmp	r3, #3
 8058106:	d02b      	beq.n	8058160 <__gethex+0x314>
 8058108:	2b01      	cmp	r3, #1
 805810a:	d115      	bne.n	8058138 <__gethex+0x2ec>
 805810c:	42ae      	cmp	r6, r5
 805810e:	d113      	bne.n	8058138 <__gethex+0x2ec>
 8058110:	2e01      	cmp	r6, #1
 8058112:	d10b      	bne.n	805812c <__gethex+0x2e0>
 8058114:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8058118:	2762      	movs	r7, #98	; 0x62
 805811a:	9a04      	ldr	r2, [sp, #16]
 805811c:	6013      	str	r3, [r2, #0]
 805811e:	2301      	movs	r3, #1
 8058120:	6123      	str	r3, [r4, #16]
 8058122:	f8c9 3000 	str.w	r3, [r9]
 8058126:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8058128:	601c      	str	r4, [r3, #0]
 805812a:	e723      	b.n	8057f74 <__gethex+0x128>
 805812c:	1e71      	subs	r1, r6, #1
 805812e:	4620      	mov	r0, r4
 8058130:	f000 fec8 	bl	8058ec4 <__any_on>
 8058134:	2800      	cmp	r0, #0
 8058136:	d1ed      	bne.n	8058114 <__gethex+0x2c8>
 8058138:	4621      	mov	r1, r4
 805813a:	ee18 0a10 	vmov	r0, s16
 805813e:	f000 fa61 	bl	8058604 <_Bfree>
 8058142:	2300      	movs	r3, #0
 8058144:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8058146:	2750      	movs	r7, #80	; 0x50
 8058148:	6013      	str	r3, [r2, #0]
 805814a:	e713      	b.n	8057f74 <__gethex+0x128>
 805814c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 805814e:	2b00      	cmp	r3, #0
 8058150:	d1f2      	bne.n	8058138 <__gethex+0x2ec>
 8058152:	e7df      	b.n	8058114 <__gethex+0x2c8>
 8058154:	0805aeac 	.word	0x0805aeac
 8058158:	0805adcc 	.word	0x0805adcc
 805815c:	0805ae40 	.word	0x0805ae40
 8058160:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8058162:	2b00      	cmp	r3, #0
 8058164:	d1d6      	bne.n	8058114 <__gethex+0x2c8>
 8058166:	e7e7      	b.n	8058138 <__gethex+0x2ec>
 8058168:	1e6f      	subs	r7, r5, #1
 805816a:	f1ba 0f00 	cmp.w	sl, #0
 805816e:	d132      	bne.n	80581d6 <__gethex+0x38a>
 8058170:	b127      	cbz	r7, 805817c <__gethex+0x330>
 8058172:	4639      	mov	r1, r7
 8058174:	4620      	mov	r0, r4
 8058176:	f000 fea5 	bl	8058ec4 <__any_on>
 805817a:	4682      	mov	sl, r0
 805817c:	117b      	asrs	r3, r7, #5
 805817e:	2101      	movs	r1, #1
 8058180:	f007 071f 	and.w	r7, r7, #31
 8058184:	4620      	mov	r0, r4
 8058186:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 805818a:	1b76      	subs	r6, r6, r5
 805818c:	fa01 f707 	lsl.w	r7, r1, r7
 8058190:	4629      	mov	r1, r5
 8058192:	421f      	tst	r7, r3
 8058194:	f04f 0702 	mov.w	r7, #2
 8058198:	bf18      	it	ne
 805819a:	f04a 0a02 	orrne.w	sl, sl, #2
 805819e:	f7ff fdee 	bl	8057d7e <rshift>
 80581a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80581a6:	f1ba 0f00 	cmp.w	sl, #0
 80581aa:	d048      	beq.n	805823e <__gethex+0x3f2>
 80581ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80581b0:	2b02      	cmp	r3, #2
 80581b2:	d015      	beq.n	80581e0 <__gethex+0x394>
 80581b4:	2b03      	cmp	r3, #3
 80581b6:	d017      	beq.n	80581e8 <__gethex+0x39c>
 80581b8:	2b01      	cmp	r3, #1
 80581ba:	d109      	bne.n	80581d0 <__gethex+0x384>
 80581bc:	f01a 0f02 	tst.w	sl, #2
 80581c0:	d006      	beq.n	80581d0 <__gethex+0x384>
 80581c2:	f8d9 0000 	ldr.w	r0, [r9]
 80581c6:	ea4a 0a00 	orr.w	sl, sl, r0
 80581ca:	f01a 0f01 	tst.w	sl, #1
 80581ce:	d10e      	bne.n	80581ee <__gethex+0x3a2>
 80581d0:	f047 0710 	orr.w	r7, r7, #16
 80581d4:	e033      	b.n	805823e <__gethex+0x3f2>
 80581d6:	f04f 0a01 	mov.w	sl, #1
 80581da:	e7cf      	b.n	805817c <__gethex+0x330>
 80581dc:	2701      	movs	r7, #1
 80581de:	e7e2      	b.n	80581a6 <__gethex+0x35a>
 80581e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80581e2:	f1c3 0301 	rsb	r3, r3, #1
 80581e6:	9315      	str	r3, [sp, #84]	; 0x54
 80581e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80581ea:	2b00      	cmp	r3, #0
 80581ec:	d0f0      	beq.n	80581d0 <__gethex+0x384>
 80581ee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80581f2:	f104 0314 	add.w	r3, r4, #20
 80581f6:	f04f 0c00 	mov.w	ip, #0
 80581fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80581fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8058202:	4618      	mov	r0, r3
 8058204:	f853 2b04 	ldr.w	r2, [r3], #4
 8058208:	f1b2 3fff 	cmp.w	r2, #4294967295
 805820c:	d01c      	beq.n	8058248 <__gethex+0x3fc>
 805820e:	3201      	adds	r2, #1
 8058210:	6002      	str	r2, [r0, #0]
 8058212:	2f02      	cmp	r7, #2
 8058214:	f104 0314 	add.w	r3, r4, #20
 8058218:	d13f      	bne.n	805829a <__gethex+0x44e>
 805821a:	f8d8 2000 	ldr.w	r2, [r8]
 805821e:	3a01      	subs	r2, #1
 8058220:	42b2      	cmp	r2, r6
 8058222:	d10a      	bne.n	805823a <__gethex+0x3ee>
 8058224:	1171      	asrs	r1, r6, #5
 8058226:	2201      	movs	r2, #1
 8058228:	f006 061f 	and.w	r6, r6, #31
 805822c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8058230:	fa02 f606 	lsl.w	r6, r2, r6
 8058234:	421e      	tst	r6, r3
 8058236:	bf18      	it	ne
 8058238:	4617      	movne	r7, r2
 805823a:	f047 0720 	orr.w	r7, r7, #32
 805823e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8058240:	601c      	str	r4, [r3, #0]
 8058242:	9b04      	ldr	r3, [sp, #16]
 8058244:	601d      	str	r5, [r3, #0]
 8058246:	e695      	b.n	8057f74 <__gethex+0x128>
 8058248:	4299      	cmp	r1, r3
 805824a:	f843 cc04 	str.w	ip, [r3, #-4]
 805824e:	d8d8      	bhi.n	8058202 <__gethex+0x3b6>
 8058250:	68a3      	ldr	r3, [r4, #8]
 8058252:	459b      	cmp	fp, r3
 8058254:	db19      	blt.n	805828a <__gethex+0x43e>
 8058256:	6861      	ldr	r1, [r4, #4]
 8058258:	ee18 0a10 	vmov	r0, s16
 805825c:	3101      	adds	r1, #1
 805825e:	f000 f991 	bl	8058584 <_Balloc>
 8058262:	4681      	mov	r9, r0
 8058264:	b918      	cbnz	r0, 805826e <__gethex+0x422>
 8058266:	4b1b      	ldr	r3, [pc, #108]	; (80582d4 <__gethex+0x488>)
 8058268:	4602      	mov	r2, r0
 805826a:	2184      	movs	r1, #132	; 0x84
 805826c:	e6a8      	b.n	8057fc0 <__gethex+0x174>
 805826e:	6922      	ldr	r2, [r4, #16]
 8058270:	f104 010c 	add.w	r1, r4, #12
 8058274:	300c      	adds	r0, #12
 8058276:	3202      	adds	r2, #2
 8058278:	0092      	lsls	r2, r2, #2
 805827a:	f7fc fe81 	bl	8054f80 <memcpy>
 805827e:	4621      	mov	r1, r4
 8058280:	464c      	mov	r4, r9
 8058282:	ee18 0a10 	vmov	r0, s16
 8058286:	f000 f9bd 	bl	8058604 <_Bfree>
 805828a:	6923      	ldr	r3, [r4, #16]
 805828c:	1c5a      	adds	r2, r3, #1
 805828e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8058292:	6122      	str	r2, [r4, #16]
 8058294:	2201      	movs	r2, #1
 8058296:	615a      	str	r2, [r3, #20]
 8058298:	e7bb      	b.n	8058212 <__gethex+0x3c6>
 805829a:	6922      	ldr	r2, [r4, #16]
 805829c:	455a      	cmp	r2, fp
 805829e:	dd0b      	ble.n	80582b8 <__gethex+0x46c>
 80582a0:	2101      	movs	r1, #1
 80582a2:	4620      	mov	r0, r4
 80582a4:	f7ff fd6b 	bl	8057d7e <rshift>
 80582a8:	3501      	adds	r5, #1
 80582aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80582ae:	42ab      	cmp	r3, r5
 80582b0:	f6ff aed0 	blt.w	8058054 <__gethex+0x208>
 80582b4:	2701      	movs	r7, #1
 80582b6:	e7c0      	b.n	805823a <__gethex+0x3ee>
 80582b8:	f016 061f 	ands.w	r6, r6, #31
 80582bc:	d0fa      	beq.n	80582b4 <__gethex+0x468>
 80582be:	449a      	add	sl, r3
 80582c0:	f1c6 0620 	rsb	r6, r6, #32
 80582c4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80582c8:	f000 fa52 	bl	8058770 <__hi0bits>
 80582cc:	42b0      	cmp	r0, r6
 80582ce:	dbe7      	blt.n	80582a0 <__gethex+0x454>
 80582d0:	e7f0      	b.n	80582b4 <__gethex+0x468>
 80582d2:	bf00      	nop
 80582d4:	0805adcc 	.word	0x0805adcc

080582d8 <L_shift>:
 80582d8:	f1c2 0208 	rsb	r2, r2, #8
 80582dc:	0092      	lsls	r2, r2, #2
 80582de:	b570      	push	{r4, r5, r6, lr}
 80582e0:	f1c2 0620 	rsb	r6, r2, #32
 80582e4:	6843      	ldr	r3, [r0, #4]
 80582e6:	6804      	ldr	r4, [r0, #0]
 80582e8:	fa03 f506 	lsl.w	r5, r3, r6
 80582ec:	40d3      	lsrs	r3, r2
 80582ee:	432c      	orrs	r4, r5
 80582f0:	6004      	str	r4, [r0, #0]
 80582f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80582f6:	4288      	cmp	r0, r1
 80582f8:	d3f4      	bcc.n	80582e4 <L_shift+0xc>
 80582fa:	bd70      	pop	{r4, r5, r6, pc}

080582fc <__match>:
 80582fc:	6803      	ldr	r3, [r0, #0]
 80582fe:	3301      	adds	r3, #1
 8058300:	b530      	push	{r4, r5, lr}
 8058302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8058306:	b914      	cbnz	r4, 805830e <__match+0x12>
 8058308:	6003      	str	r3, [r0, #0]
 805830a:	2001      	movs	r0, #1
 805830c:	bd30      	pop	{r4, r5, pc}
 805830e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8058312:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8058316:	2d19      	cmp	r5, #25
 8058318:	bf98      	it	ls
 805831a:	3220      	addls	r2, #32
 805831c:	42a2      	cmp	r2, r4
 805831e:	d0f0      	beq.n	8058302 <__match+0x6>
 8058320:	2000      	movs	r0, #0
 8058322:	e7f3      	b.n	805830c <__match+0x10>

08058324 <__hexnan>:
 8058324:	680b      	ldr	r3, [r1, #0]
 8058326:	6801      	ldr	r1, [r0, #0]
 8058328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 805832c:	115e      	asrs	r6, r3, #5
 805832e:	f013 031f 	ands.w	r3, r3, #31
 8058332:	f04f 0500 	mov.w	r5, #0
 8058336:	b087      	sub	sp, #28
 8058338:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 805833c:	4682      	mov	sl, r0
 805833e:	4690      	mov	r8, r2
 8058340:	46ab      	mov	fp, r5
 8058342:	bf18      	it	ne
 8058344:	3604      	addne	r6, #4
 8058346:	9301      	str	r3, [sp, #4]
 8058348:	9502      	str	r5, [sp, #8]
 805834a:	1f37      	subs	r7, r6, #4
 805834c:	f846 5c04 	str.w	r5, [r6, #-4]
 8058350:	46b9      	mov	r9, r7
 8058352:	463c      	mov	r4, r7
 8058354:	1c4b      	adds	r3, r1, #1
 8058356:	784a      	ldrb	r2, [r1, #1]
 8058358:	9303      	str	r3, [sp, #12]
 805835a:	b342      	cbz	r2, 80583ae <__hexnan+0x8a>
 805835c:	4610      	mov	r0, r2
 805835e:	9105      	str	r1, [sp, #20]
 8058360:	9204      	str	r2, [sp, #16]
 8058362:	f7ff fd5d 	bl	8057e20 <__hexdig_fun>
 8058366:	2800      	cmp	r0, #0
 8058368:	d14f      	bne.n	805840a <__hexnan+0xe6>
 805836a:	9a04      	ldr	r2, [sp, #16]
 805836c:	9905      	ldr	r1, [sp, #20]
 805836e:	2a20      	cmp	r2, #32
 8058370:	d818      	bhi.n	80583a4 <__hexnan+0x80>
 8058372:	9b02      	ldr	r3, [sp, #8]
 8058374:	459b      	cmp	fp, r3
 8058376:	dd13      	ble.n	80583a0 <__hexnan+0x7c>
 8058378:	454c      	cmp	r4, r9
 805837a:	d206      	bcs.n	805838a <__hexnan+0x66>
 805837c:	2d07      	cmp	r5, #7
 805837e:	dc04      	bgt.n	805838a <__hexnan+0x66>
 8058380:	462a      	mov	r2, r5
 8058382:	4649      	mov	r1, r9
 8058384:	4620      	mov	r0, r4
 8058386:	f7ff ffa7 	bl	80582d8 <L_shift>
 805838a:	4544      	cmp	r4, r8
 805838c:	d94f      	bls.n	805842e <__hexnan+0x10a>
 805838e:	2300      	movs	r3, #0
 8058390:	f1a4 0904 	sub.w	r9, r4, #4
 8058394:	f8cd b008 	str.w	fp, [sp, #8]
 8058398:	f844 3c04 	str.w	r3, [r4, #-4]
 805839c:	461d      	mov	r5, r3
 805839e:	464c      	mov	r4, r9
 80583a0:	9903      	ldr	r1, [sp, #12]
 80583a2:	e7d7      	b.n	8058354 <__hexnan+0x30>
 80583a4:	2a29      	cmp	r2, #41	; 0x29
 80583a6:	d155      	bne.n	8058454 <__hexnan+0x130>
 80583a8:	3102      	adds	r1, #2
 80583aa:	f8ca 1000 	str.w	r1, [sl]
 80583ae:	f1bb 0f00 	cmp.w	fp, #0
 80583b2:	d04f      	beq.n	8058454 <__hexnan+0x130>
 80583b4:	454c      	cmp	r4, r9
 80583b6:	d206      	bcs.n	80583c6 <__hexnan+0xa2>
 80583b8:	2d07      	cmp	r5, #7
 80583ba:	dc04      	bgt.n	80583c6 <__hexnan+0xa2>
 80583bc:	462a      	mov	r2, r5
 80583be:	4649      	mov	r1, r9
 80583c0:	4620      	mov	r0, r4
 80583c2:	f7ff ff89 	bl	80582d8 <L_shift>
 80583c6:	4544      	cmp	r4, r8
 80583c8:	d933      	bls.n	8058432 <__hexnan+0x10e>
 80583ca:	f1a8 0204 	sub.w	r2, r8, #4
 80583ce:	4623      	mov	r3, r4
 80583d0:	f853 1b04 	ldr.w	r1, [r3], #4
 80583d4:	429f      	cmp	r7, r3
 80583d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80583da:	d2f9      	bcs.n	80583d0 <__hexnan+0xac>
 80583dc:	1b3b      	subs	r3, r7, r4
 80583de:	3e03      	subs	r6, #3
 80583e0:	3401      	adds	r4, #1
 80583e2:	2200      	movs	r2, #0
 80583e4:	f023 0303 	bic.w	r3, r3, #3
 80583e8:	3304      	adds	r3, #4
 80583ea:	42b4      	cmp	r4, r6
 80583ec:	bf88      	it	hi
 80583ee:	2304      	movhi	r3, #4
 80583f0:	4443      	add	r3, r8
 80583f2:	f843 2b04 	str.w	r2, [r3], #4
 80583f6:	429f      	cmp	r7, r3
 80583f8:	d2fb      	bcs.n	80583f2 <__hexnan+0xce>
 80583fa:	683b      	ldr	r3, [r7, #0]
 80583fc:	b91b      	cbnz	r3, 8058406 <__hexnan+0xe2>
 80583fe:	4547      	cmp	r7, r8
 8058400:	d126      	bne.n	8058450 <__hexnan+0x12c>
 8058402:	2301      	movs	r3, #1
 8058404:	603b      	str	r3, [r7, #0]
 8058406:	2005      	movs	r0, #5
 8058408:	e025      	b.n	8058456 <__hexnan+0x132>
 805840a:	3501      	adds	r5, #1
 805840c:	f10b 0b01 	add.w	fp, fp, #1
 8058410:	2d08      	cmp	r5, #8
 8058412:	dd05      	ble.n	8058420 <__hexnan+0xfc>
 8058414:	4544      	cmp	r4, r8
 8058416:	d9c3      	bls.n	80583a0 <__hexnan+0x7c>
 8058418:	2300      	movs	r3, #0
 805841a:	3c04      	subs	r4, #4
 805841c:	2501      	movs	r5, #1
 805841e:	6023      	str	r3, [r4, #0]
 8058420:	6822      	ldr	r2, [r4, #0]
 8058422:	f000 000f 	and.w	r0, r0, #15
 8058426:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 805842a:	6022      	str	r2, [r4, #0]
 805842c:	e7b8      	b.n	80583a0 <__hexnan+0x7c>
 805842e:	2508      	movs	r5, #8
 8058430:	e7b6      	b.n	80583a0 <__hexnan+0x7c>
 8058432:	9b01      	ldr	r3, [sp, #4]
 8058434:	2b00      	cmp	r3, #0
 8058436:	d0e0      	beq.n	80583fa <__hexnan+0xd6>
 8058438:	f04f 32ff 	mov.w	r2, #4294967295
 805843c:	f1c3 0320 	rsb	r3, r3, #32
 8058440:	fa22 f303 	lsr.w	r3, r2, r3
 8058444:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8058448:	401a      	ands	r2, r3
 805844a:	f846 2c04 	str.w	r2, [r6, #-4]
 805844e:	e7d4      	b.n	80583fa <__hexnan+0xd6>
 8058450:	3f04      	subs	r7, #4
 8058452:	e7d2      	b.n	80583fa <__hexnan+0xd6>
 8058454:	2004      	movs	r0, #4
 8058456:	b007      	add	sp, #28
 8058458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0805845c <_localeconv_r>:
 805845c:	4800      	ldr	r0, [pc, #0]	; (8058460 <_localeconv_r+0x4>)
 805845e:	4770      	bx	lr
 8058460:	20018408 	.word	0x20018408

08058464 <__retarget_lock_init_recursive>:
 8058464:	4770      	bx	lr

08058466 <__retarget_lock_acquire_recursive>:
 8058466:	4770      	bx	lr

08058468 <__retarget_lock_release_recursive>:
 8058468:	4770      	bx	lr

0805846a <__swhatbuf_r>:
 805846a:	b570      	push	{r4, r5, r6, lr}
 805846c:	460e      	mov	r6, r1
 805846e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8058472:	b096      	sub	sp, #88	; 0x58
 8058474:	4614      	mov	r4, r2
 8058476:	2900      	cmp	r1, #0
 8058478:	461d      	mov	r5, r3
 805847a:	da07      	bge.n	805848c <__swhatbuf_r+0x22>
 805847c:	2300      	movs	r3, #0
 805847e:	602b      	str	r3, [r5, #0]
 8058480:	89b3      	ldrh	r3, [r6, #12]
 8058482:	061a      	lsls	r2, r3, #24
 8058484:	d410      	bmi.n	80584a8 <__swhatbuf_r+0x3e>
 8058486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 805848a:	e00e      	b.n	80584aa <__swhatbuf_r+0x40>
 805848c:	466a      	mov	r2, sp
 805848e:	f001 f9bf 	bl	8059810 <_fstat_r>
 8058492:	2800      	cmp	r0, #0
 8058494:	dbf2      	blt.n	805847c <__swhatbuf_r+0x12>
 8058496:	9a01      	ldr	r2, [sp, #4]
 8058498:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 805849c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80584a0:	425a      	negs	r2, r3
 80584a2:	415a      	adcs	r2, r3
 80584a4:	602a      	str	r2, [r5, #0]
 80584a6:	e7ee      	b.n	8058486 <__swhatbuf_r+0x1c>
 80584a8:	2340      	movs	r3, #64	; 0x40
 80584aa:	2000      	movs	r0, #0
 80584ac:	6023      	str	r3, [r4, #0]
 80584ae:	b016      	add	sp, #88	; 0x58
 80584b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080584b4 <__smakebuf_r>:
 80584b4:	898b      	ldrh	r3, [r1, #12]
 80584b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80584b8:	079d      	lsls	r5, r3, #30
 80584ba:	4606      	mov	r6, r0
 80584bc:	460c      	mov	r4, r1
 80584be:	d507      	bpl.n	80584d0 <__smakebuf_r+0x1c>
 80584c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80584c4:	6023      	str	r3, [r4, #0]
 80584c6:	6123      	str	r3, [r4, #16]
 80584c8:	2301      	movs	r3, #1
 80584ca:	6163      	str	r3, [r4, #20]
 80584cc:	b002      	add	sp, #8
 80584ce:	bd70      	pop	{r4, r5, r6, pc}
 80584d0:	ab01      	add	r3, sp, #4
 80584d2:	466a      	mov	r2, sp
 80584d4:	f7ff ffc9 	bl	805846a <__swhatbuf_r>
 80584d8:	9900      	ldr	r1, [sp, #0]
 80584da:	4605      	mov	r5, r0
 80584dc:	4630      	mov	r0, r6
 80584de:	f000 fd71 	bl	8058fc4 <_malloc_r>
 80584e2:	b948      	cbnz	r0, 80584f8 <__smakebuf_r+0x44>
 80584e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80584e8:	059a      	lsls	r2, r3, #22
 80584ea:	d4ef      	bmi.n	80584cc <__smakebuf_r+0x18>
 80584ec:	f023 0303 	bic.w	r3, r3, #3
 80584f0:	f043 0302 	orr.w	r3, r3, #2
 80584f4:	81a3      	strh	r3, [r4, #12]
 80584f6:	e7e3      	b.n	80584c0 <__smakebuf_r+0xc>
 80584f8:	4b0d      	ldr	r3, [pc, #52]	; (8058530 <__smakebuf_r+0x7c>)
 80584fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80584fc:	89a3      	ldrh	r3, [r4, #12]
 80584fe:	6020      	str	r0, [r4, #0]
 8058500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8058504:	6120      	str	r0, [r4, #16]
 8058506:	81a3      	strh	r3, [r4, #12]
 8058508:	9b00      	ldr	r3, [sp, #0]
 805850a:	6163      	str	r3, [r4, #20]
 805850c:	9b01      	ldr	r3, [sp, #4]
 805850e:	b15b      	cbz	r3, 8058528 <__smakebuf_r+0x74>
 8058510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8058514:	4630      	mov	r0, r6
 8058516:	f001 f98d 	bl	8059834 <_isatty_r>
 805851a:	b128      	cbz	r0, 8058528 <__smakebuf_r+0x74>
 805851c:	89a3      	ldrh	r3, [r4, #12]
 805851e:	f023 0303 	bic.w	r3, r3, #3
 8058522:	f043 0301 	orr.w	r3, r3, #1
 8058526:	81a3      	strh	r3, [r4, #12]
 8058528:	89a0      	ldrh	r0, [r4, #12]
 805852a:	4305      	orrs	r5, r0
 805852c:	81a5      	strh	r5, [r4, #12]
 805852e:	e7cd      	b.n	80584cc <__smakebuf_r+0x18>
 8058530:	08057bdd 	.word	0x08057bdd

08058534 <malloc>:
 8058534:	4b02      	ldr	r3, [pc, #8]	; (8058540 <malloc+0xc>)
 8058536:	4601      	mov	r1, r0
 8058538:	6818      	ldr	r0, [r3, #0]
 805853a:	f000 bd43 	b.w	8058fc4 <_malloc_r>
 805853e:	bf00      	nop
 8058540:	200182b0 	.word	0x200182b0

08058544 <__ascii_mbtowc>:
 8058544:	b082      	sub	sp, #8
 8058546:	b901      	cbnz	r1, 805854a <__ascii_mbtowc+0x6>
 8058548:	a901      	add	r1, sp, #4
 805854a:	b142      	cbz	r2, 805855e <__ascii_mbtowc+0x1a>
 805854c:	b14b      	cbz	r3, 8058562 <__ascii_mbtowc+0x1e>
 805854e:	7813      	ldrb	r3, [r2, #0]
 8058550:	600b      	str	r3, [r1, #0]
 8058552:	7812      	ldrb	r2, [r2, #0]
 8058554:	1e10      	subs	r0, r2, #0
 8058556:	bf18      	it	ne
 8058558:	2001      	movne	r0, #1
 805855a:	b002      	add	sp, #8
 805855c:	4770      	bx	lr
 805855e:	4610      	mov	r0, r2
 8058560:	e7fb      	b.n	805855a <__ascii_mbtowc+0x16>
 8058562:	f06f 0001 	mvn.w	r0, #1
 8058566:	e7f8      	b.n	805855a <__ascii_mbtowc+0x16>

08058568 <memchr>:
 8058568:	b2c9      	uxtb	r1, r1
 805856a:	4402      	add	r2, r0
 805856c:	b510      	push	{r4, lr}
 805856e:	4290      	cmp	r0, r2
 8058570:	4603      	mov	r3, r0
 8058572:	d101      	bne.n	8058578 <memchr+0x10>
 8058574:	2300      	movs	r3, #0
 8058576:	e003      	b.n	8058580 <memchr+0x18>
 8058578:	781c      	ldrb	r4, [r3, #0]
 805857a:	3001      	adds	r0, #1
 805857c:	428c      	cmp	r4, r1
 805857e:	d1f6      	bne.n	805856e <memchr+0x6>
 8058580:	4618      	mov	r0, r3
 8058582:	bd10      	pop	{r4, pc}

08058584 <_Balloc>:
 8058584:	b570      	push	{r4, r5, r6, lr}
 8058586:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8058588:	4604      	mov	r4, r0
 805858a:	460d      	mov	r5, r1
 805858c:	b976      	cbnz	r6, 80585ac <_Balloc+0x28>
 805858e:	2010      	movs	r0, #16
 8058590:	f7ff ffd0 	bl	8058534 <malloc>
 8058594:	4602      	mov	r2, r0
 8058596:	6260      	str	r0, [r4, #36]	; 0x24
 8058598:	b920      	cbnz	r0, 80585a4 <_Balloc+0x20>
 805859a:	4b18      	ldr	r3, [pc, #96]	; (80585fc <_Balloc+0x78>)
 805859c:	2166      	movs	r1, #102	; 0x66
 805859e:	4818      	ldr	r0, [pc, #96]	; (8058600 <_Balloc+0x7c>)
 80585a0:	f001 f8f6 	bl	8059790 <__assert_func>
 80585a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80585a8:	6006      	str	r6, [r0, #0]
 80585aa:	60c6      	str	r6, [r0, #12]
 80585ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80585ae:	68f3      	ldr	r3, [r6, #12]
 80585b0:	b183      	cbz	r3, 80585d4 <_Balloc+0x50>
 80585b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80585b4:	68db      	ldr	r3, [r3, #12]
 80585b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80585ba:	b9b8      	cbnz	r0, 80585ec <_Balloc+0x68>
 80585bc:	2101      	movs	r1, #1
 80585be:	4620      	mov	r0, r4
 80585c0:	fa01 f605 	lsl.w	r6, r1, r5
 80585c4:	1d72      	adds	r2, r6, #5
 80585c6:	0092      	lsls	r2, r2, #2
 80585c8:	f000 fc9d 	bl	8058f06 <_calloc_r>
 80585cc:	b160      	cbz	r0, 80585e8 <_Balloc+0x64>
 80585ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80585d2:	e00e      	b.n	80585f2 <_Balloc+0x6e>
 80585d4:	2221      	movs	r2, #33	; 0x21
 80585d6:	2104      	movs	r1, #4
 80585d8:	4620      	mov	r0, r4
 80585da:	f000 fc94 	bl	8058f06 <_calloc_r>
 80585de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80585e0:	60f0      	str	r0, [r6, #12]
 80585e2:	68db      	ldr	r3, [r3, #12]
 80585e4:	2b00      	cmp	r3, #0
 80585e6:	d1e4      	bne.n	80585b2 <_Balloc+0x2e>
 80585e8:	2000      	movs	r0, #0
 80585ea:	bd70      	pop	{r4, r5, r6, pc}
 80585ec:	6802      	ldr	r2, [r0, #0]
 80585ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80585f2:	2300      	movs	r3, #0
 80585f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80585f8:	e7f7      	b.n	80585ea <_Balloc+0x66>
 80585fa:	bf00      	nop
 80585fc:	0805ad56 	.word	0x0805ad56
 8058600:	0805aec0 	.word	0x0805aec0

08058604 <_Bfree>:
 8058604:	b570      	push	{r4, r5, r6, lr}
 8058606:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8058608:	4605      	mov	r5, r0
 805860a:	460c      	mov	r4, r1
 805860c:	b976      	cbnz	r6, 805862c <_Bfree+0x28>
 805860e:	2010      	movs	r0, #16
 8058610:	f7ff ff90 	bl	8058534 <malloc>
 8058614:	4602      	mov	r2, r0
 8058616:	6268      	str	r0, [r5, #36]	; 0x24
 8058618:	b920      	cbnz	r0, 8058624 <_Bfree+0x20>
 805861a:	4b09      	ldr	r3, [pc, #36]	; (8058640 <_Bfree+0x3c>)
 805861c:	218a      	movs	r1, #138	; 0x8a
 805861e:	4809      	ldr	r0, [pc, #36]	; (8058644 <_Bfree+0x40>)
 8058620:	f001 f8b6 	bl	8059790 <__assert_func>
 8058624:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8058628:	6006      	str	r6, [r0, #0]
 805862a:	60c6      	str	r6, [r0, #12]
 805862c:	b13c      	cbz	r4, 805863e <_Bfree+0x3a>
 805862e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8058630:	6862      	ldr	r2, [r4, #4]
 8058632:	68db      	ldr	r3, [r3, #12]
 8058634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8058638:	6021      	str	r1, [r4, #0]
 805863a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 805863e:	bd70      	pop	{r4, r5, r6, pc}
 8058640:	0805ad56 	.word	0x0805ad56
 8058644:	0805aec0 	.word	0x0805aec0

08058648 <__multadd>:
 8058648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 805864c:	4607      	mov	r7, r0
 805864e:	4698      	mov	r8, r3
 8058650:	460c      	mov	r4, r1
 8058652:	690e      	ldr	r6, [r1, #16]
 8058654:	f101 0014 	add.w	r0, r1, #20
 8058658:	2300      	movs	r3, #0
 805865a:	6805      	ldr	r5, [r0, #0]
 805865c:	3301      	adds	r3, #1
 805865e:	b2a9      	uxth	r1, r5
 8058660:	429e      	cmp	r6, r3
 8058662:	ea4f 4515 	mov.w	r5, r5, lsr #16
 8058666:	fb02 8101 	mla	r1, r2, r1, r8
 805866a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 805866e:	b289      	uxth	r1, r1
 8058670:	fb02 c505 	mla	r5, r2, r5, ip
 8058674:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8058678:	ea4f 4815 	mov.w	r8, r5, lsr #16
 805867c:	f840 1b04 	str.w	r1, [r0], #4
 8058680:	dceb      	bgt.n	805865a <__multadd+0x12>
 8058682:	f1b8 0f00 	cmp.w	r8, #0
 8058686:	d022      	beq.n	80586ce <__multadd+0x86>
 8058688:	68a3      	ldr	r3, [r4, #8]
 805868a:	42b3      	cmp	r3, r6
 805868c:	dc19      	bgt.n	80586c2 <__multadd+0x7a>
 805868e:	6861      	ldr	r1, [r4, #4]
 8058690:	4638      	mov	r0, r7
 8058692:	3101      	adds	r1, #1
 8058694:	f7ff ff76 	bl	8058584 <_Balloc>
 8058698:	4605      	mov	r5, r0
 805869a:	b928      	cbnz	r0, 80586a8 <__multadd+0x60>
 805869c:	4602      	mov	r2, r0
 805869e:	4b0d      	ldr	r3, [pc, #52]	; (80586d4 <__multadd+0x8c>)
 80586a0:	21b5      	movs	r1, #181	; 0xb5
 80586a2:	480d      	ldr	r0, [pc, #52]	; (80586d8 <__multadd+0x90>)
 80586a4:	f001 f874 	bl	8059790 <__assert_func>
 80586a8:	6922      	ldr	r2, [r4, #16]
 80586aa:	f104 010c 	add.w	r1, r4, #12
 80586ae:	300c      	adds	r0, #12
 80586b0:	3202      	adds	r2, #2
 80586b2:	0092      	lsls	r2, r2, #2
 80586b4:	f7fc fc64 	bl	8054f80 <memcpy>
 80586b8:	4621      	mov	r1, r4
 80586ba:	462c      	mov	r4, r5
 80586bc:	4638      	mov	r0, r7
 80586be:	f7ff ffa1 	bl	8058604 <_Bfree>
 80586c2:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80586c6:	3601      	adds	r6, #1
 80586c8:	f8c3 8014 	str.w	r8, [r3, #20]
 80586cc:	6126      	str	r6, [r4, #16]
 80586ce:	4620      	mov	r0, r4
 80586d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80586d4:	0805adcc 	.word	0x0805adcc
 80586d8:	0805aec0 	.word	0x0805aec0

080586dc <__s2b>:
 80586dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80586e0:	4615      	mov	r5, r2
 80586e2:	461f      	mov	r7, r3
 80586e4:	2209      	movs	r2, #9
 80586e6:	3308      	adds	r3, #8
 80586e8:	460c      	mov	r4, r1
 80586ea:	4606      	mov	r6, r0
 80586ec:	2100      	movs	r1, #0
 80586ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80586f2:	2201      	movs	r2, #1
 80586f4:	429a      	cmp	r2, r3
 80586f6:	db09      	blt.n	805870c <__s2b+0x30>
 80586f8:	4630      	mov	r0, r6
 80586fa:	f7ff ff43 	bl	8058584 <_Balloc>
 80586fe:	b940      	cbnz	r0, 8058712 <__s2b+0x36>
 8058700:	4602      	mov	r2, r0
 8058702:	4b19      	ldr	r3, [pc, #100]	; (8058768 <__s2b+0x8c>)
 8058704:	21ce      	movs	r1, #206	; 0xce
 8058706:	4819      	ldr	r0, [pc, #100]	; (805876c <__s2b+0x90>)
 8058708:	f001 f842 	bl	8059790 <__assert_func>
 805870c:	0052      	lsls	r2, r2, #1
 805870e:	3101      	adds	r1, #1
 8058710:	e7f0      	b.n	80586f4 <__s2b+0x18>
 8058712:	9b08      	ldr	r3, [sp, #32]
 8058714:	2d09      	cmp	r5, #9
 8058716:	6143      	str	r3, [r0, #20]
 8058718:	f04f 0301 	mov.w	r3, #1
 805871c:	6103      	str	r3, [r0, #16]
 805871e:	dd16      	ble.n	805874e <__s2b+0x72>
 8058720:	f104 0909 	add.w	r9, r4, #9
 8058724:	442c      	add	r4, r5
 8058726:	46c8      	mov	r8, r9
 8058728:	f818 3b01 	ldrb.w	r3, [r8], #1
 805872c:	4601      	mov	r1, r0
 805872e:	220a      	movs	r2, #10
 8058730:	4630      	mov	r0, r6
 8058732:	3b30      	subs	r3, #48	; 0x30
 8058734:	f7ff ff88 	bl	8058648 <__multadd>
 8058738:	45a0      	cmp	r8, r4
 805873a:	d1f5      	bne.n	8058728 <__s2b+0x4c>
 805873c:	f1a5 0408 	sub.w	r4, r5, #8
 8058740:	444c      	add	r4, r9
 8058742:	1b2d      	subs	r5, r5, r4
 8058744:	1963      	adds	r3, r4, r5
 8058746:	42bb      	cmp	r3, r7
 8058748:	db04      	blt.n	8058754 <__s2b+0x78>
 805874a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 805874e:	340a      	adds	r4, #10
 8058750:	2509      	movs	r5, #9
 8058752:	e7f6      	b.n	8058742 <__s2b+0x66>
 8058754:	f814 3b01 	ldrb.w	r3, [r4], #1
 8058758:	4601      	mov	r1, r0
 805875a:	220a      	movs	r2, #10
 805875c:	4630      	mov	r0, r6
 805875e:	3b30      	subs	r3, #48	; 0x30
 8058760:	f7ff ff72 	bl	8058648 <__multadd>
 8058764:	e7ee      	b.n	8058744 <__s2b+0x68>
 8058766:	bf00      	nop
 8058768:	0805adcc 	.word	0x0805adcc
 805876c:	0805aec0 	.word	0x0805aec0

08058770 <__hi0bits>:
 8058770:	0c03      	lsrs	r3, r0, #16
 8058772:	041b      	lsls	r3, r3, #16
 8058774:	b9d3      	cbnz	r3, 80587ac <__hi0bits+0x3c>
 8058776:	0400      	lsls	r0, r0, #16
 8058778:	2310      	movs	r3, #16
 805877a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 805877e:	bf04      	itt	eq
 8058780:	0200      	lsleq	r0, r0, #8
 8058782:	3308      	addeq	r3, #8
 8058784:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8058788:	bf04      	itt	eq
 805878a:	0100      	lsleq	r0, r0, #4
 805878c:	3304      	addeq	r3, #4
 805878e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8058792:	bf04      	itt	eq
 8058794:	0080      	lsleq	r0, r0, #2
 8058796:	3302      	addeq	r3, #2
 8058798:	2800      	cmp	r0, #0
 805879a:	db05      	blt.n	80587a8 <__hi0bits+0x38>
 805879c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80587a0:	f103 0301 	add.w	r3, r3, #1
 80587a4:	bf08      	it	eq
 80587a6:	2320      	moveq	r3, #32
 80587a8:	4618      	mov	r0, r3
 80587aa:	4770      	bx	lr
 80587ac:	2300      	movs	r3, #0
 80587ae:	e7e4      	b.n	805877a <__hi0bits+0xa>

080587b0 <__lo0bits>:
 80587b0:	6803      	ldr	r3, [r0, #0]
 80587b2:	4601      	mov	r1, r0
 80587b4:	f013 0207 	ands.w	r2, r3, #7
 80587b8:	d00b      	beq.n	80587d2 <__lo0bits+0x22>
 80587ba:	07da      	lsls	r2, r3, #31
 80587bc:	d424      	bmi.n	8058808 <__lo0bits+0x58>
 80587be:	0798      	lsls	r0, r3, #30
 80587c0:	bf47      	ittee	mi
 80587c2:	085b      	lsrmi	r3, r3, #1
 80587c4:	2001      	movmi	r0, #1
 80587c6:	089b      	lsrpl	r3, r3, #2
 80587c8:	2002      	movpl	r0, #2
 80587ca:	bf4c      	ite	mi
 80587cc:	600b      	strmi	r3, [r1, #0]
 80587ce:	600b      	strpl	r3, [r1, #0]
 80587d0:	4770      	bx	lr
 80587d2:	b298      	uxth	r0, r3
 80587d4:	b9b0      	cbnz	r0, 8058804 <__lo0bits+0x54>
 80587d6:	0c1b      	lsrs	r3, r3, #16
 80587d8:	2010      	movs	r0, #16
 80587da:	f013 0fff 	tst.w	r3, #255	; 0xff
 80587de:	bf04      	itt	eq
 80587e0:	0a1b      	lsreq	r3, r3, #8
 80587e2:	3008      	addeq	r0, #8
 80587e4:	071a      	lsls	r2, r3, #28
 80587e6:	bf04      	itt	eq
 80587e8:	091b      	lsreq	r3, r3, #4
 80587ea:	3004      	addeq	r0, #4
 80587ec:	079a      	lsls	r2, r3, #30
 80587ee:	bf04      	itt	eq
 80587f0:	089b      	lsreq	r3, r3, #2
 80587f2:	3002      	addeq	r0, #2
 80587f4:	07da      	lsls	r2, r3, #31
 80587f6:	d403      	bmi.n	8058800 <__lo0bits+0x50>
 80587f8:	085b      	lsrs	r3, r3, #1
 80587fa:	f100 0001 	add.w	r0, r0, #1
 80587fe:	d005      	beq.n	805880c <__lo0bits+0x5c>
 8058800:	600b      	str	r3, [r1, #0]
 8058802:	4770      	bx	lr
 8058804:	4610      	mov	r0, r2
 8058806:	e7e8      	b.n	80587da <__lo0bits+0x2a>
 8058808:	2000      	movs	r0, #0
 805880a:	4770      	bx	lr
 805880c:	2020      	movs	r0, #32
 805880e:	4770      	bx	lr

08058810 <__i2b>:
 8058810:	b510      	push	{r4, lr}
 8058812:	460c      	mov	r4, r1
 8058814:	2101      	movs	r1, #1
 8058816:	f7ff feb5 	bl	8058584 <_Balloc>
 805881a:	4602      	mov	r2, r0
 805881c:	b928      	cbnz	r0, 805882a <__i2b+0x1a>
 805881e:	4b05      	ldr	r3, [pc, #20]	; (8058834 <__i2b+0x24>)
 8058820:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8058824:	4804      	ldr	r0, [pc, #16]	; (8058838 <__i2b+0x28>)
 8058826:	f000 ffb3 	bl	8059790 <__assert_func>
 805882a:	2301      	movs	r3, #1
 805882c:	6144      	str	r4, [r0, #20]
 805882e:	6103      	str	r3, [r0, #16]
 8058830:	bd10      	pop	{r4, pc}
 8058832:	bf00      	nop
 8058834:	0805adcc 	.word	0x0805adcc
 8058838:	0805aec0 	.word	0x0805aec0

0805883c <__multiply>:
 805883c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8058840:	4614      	mov	r4, r2
 8058842:	690a      	ldr	r2, [r1, #16]
 8058844:	460d      	mov	r5, r1
 8058846:	b085      	sub	sp, #20
 8058848:	6923      	ldr	r3, [r4, #16]
 805884a:	429a      	cmp	r2, r3
 805884c:	bfbe      	ittt	lt
 805884e:	460b      	movlt	r3, r1
 8058850:	4625      	movlt	r5, r4
 8058852:	461c      	movlt	r4, r3
 8058854:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8058858:	68ab      	ldr	r3, [r5, #8]
 805885a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 805885e:	6869      	ldr	r1, [r5, #4]
 8058860:	eb0a 0709 	add.w	r7, sl, r9
 8058864:	42bb      	cmp	r3, r7
 8058866:	bfb8      	it	lt
 8058868:	3101      	addlt	r1, #1
 805886a:	f7ff fe8b 	bl	8058584 <_Balloc>
 805886e:	b930      	cbnz	r0, 805887e <__multiply+0x42>
 8058870:	4602      	mov	r2, r0
 8058872:	4b43      	ldr	r3, [pc, #268]	; (8058980 <__multiply+0x144>)
 8058874:	f240 115d 	movw	r1, #349	; 0x15d
 8058878:	4842      	ldr	r0, [pc, #264]	; (8058984 <__multiply+0x148>)
 805887a:	f000 ff89 	bl	8059790 <__assert_func>
 805887e:	f100 0614 	add.w	r6, r0, #20
 8058882:	2200      	movs	r2, #0
 8058884:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8058888:	4633      	mov	r3, r6
 805888a:	4543      	cmp	r3, r8
 805888c:	d31e      	bcc.n	80588cc <__multiply+0x90>
 805888e:	f105 0c14 	add.w	ip, r5, #20
 8058892:	f104 0314 	add.w	r3, r4, #20
 8058896:	f105 0115 	add.w	r1, r5, #21
 805889a:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 805889e:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80588a2:	9202      	str	r2, [sp, #8]
 80588a4:	ebac 0205 	sub.w	r2, ip, r5
 80588a8:	3a15      	subs	r2, #21
 80588aa:	f022 0203 	bic.w	r2, r2, #3
 80588ae:	3204      	adds	r2, #4
 80588b0:	458c      	cmp	ip, r1
 80588b2:	bf38      	it	cc
 80588b4:	2204      	movcc	r2, #4
 80588b6:	9201      	str	r2, [sp, #4]
 80588b8:	9a02      	ldr	r2, [sp, #8]
 80588ba:	9303      	str	r3, [sp, #12]
 80588bc:	429a      	cmp	r2, r3
 80588be:	d808      	bhi.n	80588d2 <__multiply+0x96>
 80588c0:	2f00      	cmp	r7, #0
 80588c2:	dc57      	bgt.n	8058974 <__multiply+0x138>
 80588c4:	6107      	str	r7, [r0, #16]
 80588c6:	b005      	add	sp, #20
 80588c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80588cc:	f843 2b04 	str.w	r2, [r3], #4
 80588d0:	e7db      	b.n	805888a <__multiply+0x4e>
 80588d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80588d6:	f1ba 0f00 	cmp.w	sl, #0
 80588da:	d022      	beq.n	8058922 <__multiply+0xe6>
 80588dc:	f105 0e14 	add.w	lr, r5, #20
 80588e0:	46b1      	mov	r9, r6
 80588e2:	2200      	movs	r2, #0
 80588e4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80588e8:	f8d9 b000 	ldr.w	fp, [r9]
 80588ec:	b2a1      	uxth	r1, r4
 80588ee:	45f4      	cmp	ip, lr
 80588f0:	fa1f fb8b 	uxth.w	fp, fp
 80588f4:	ea4f 4414 	mov.w	r4, r4, lsr #16
 80588f8:	fb0a b101 	mla	r1, sl, r1, fp
 80588fc:	4411      	add	r1, r2
 80588fe:	f8d9 2000 	ldr.w	r2, [r9]
 8058902:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8058906:	fb0a 2404 	mla	r4, sl, r4, r2
 805890a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 805890e:	b289      	uxth	r1, r1
 8058910:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8058914:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8058918:	f849 1b04 	str.w	r1, [r9], #4
 805891c:	d8e2      	bhi.n	80588e4 <__multiply+0xa8>
 805891e:	9901      	ldr	r1, [sp, #4]
 8058920:	5072      	str	r2, [r6, r1]
 8058922:	9a03      	ldr	r2, [sp, #12]
 8058924:	3304      	adds	r3, #4
 8058926:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 805892a:	f1b9 0f00 	cmp.w	r9, #0
 805892e:	d01f      	beq.n	8058970 <__multiply+0x134>
 8058930:	6834      	ldr	r4, [r6, #0]
 8058932:	f105 0114 	add.w	r1, r5, #20
 8058936:	46b6      	mov	lr, r6
 8058938:	f04f 0a00 	mov.w	sl, #0
 805893c:	880a      	ldrh	r2, [r1, #0]
 805893e:	b2a4      	uxth	r4, r4
 8058940:	f8be b002 	ldrh.w	fp, [lr, #2]
 8058944:	fb09 b202 	mla	r2, r9, r2, fp
 8058948:	4492      	add	sl, r2
 805894a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 805894e:	f84e 4b04 	str.w	r4, [lr], #4
 8058952:	f851 4b04 	ldr.w	r4, [r1], #4
 8058956:	f8be 2000 	ldrh.w	r2, [lr]
 805895a:	0c24      	lsrs	r4, r4, #16
 805895c:	458c      	cmp	ip, r1
 805895e:	fb09 2404 	mla	r4, r9, r4, r2
 8058962:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8058966:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 805896a:	d8e7      	bhi.n	805893c <__multiply+0x100>
 805896c:	9a01      	ldr	r2, [sp, #4]
 805896e:	50b4      	str	r4, [r6, r2]
 8058970:	3604      	adds	r6, #4
 8058972:	e7a1      	b.n	80588b8 <__multiply+0x7c>
 8058974:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8058978:	2b00      	cmp	r3, #0
 805897a:	d1a3      	bne.n	80588c4 <__multiply+0x88>
 805897c:	3f01      	subs	r7, #1
 805897e:	e79f      	b.n	80588c0 <__multiply+0x84>
 8058980:	0805adcc 	.word	0x0805adcc
 8058984:	0805aec0 	.word	0x0805aec0

08058988 <__pow5mult>:
 8058988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 805898c:	4615      	mov	r5, r2
 805898e:	f012 0203 	ands.w	r2, r2, #3
 8058992:	4606      	mov	r6, r0
 8058994:	460f      	mov	r7, r1
 8058996:	d007      	beq.n	80589a8 <__pow5mult+0x20>
 8058998:	3a01      	subs	r2, #1
 805899a:	4c25      	ldr	r4, [pc, #148]	; (8058a30 <__pow5mult+0xa8>)
 805899c:	2300      	movs	r3, #0
 805899e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80589a2:	f7ff fe51 	bl	8058648 <__multadd>
 80589a6:	4607      	mov	r7, r0
 80589a8:	10ad      	asrs	r5, r5, #2
 80589aa:	d03d      	beq.n	8058a28 <__pow5mult+0xa0>
 80589ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80589ae:	b97c      	cbnz	r4, 80589d0 <__pow5mult+0x48>
 80589b0:	2010      	movs	r0, #16
 80589b2:	f7ff fdbf 	bl	8058534 <malloc>
 80589b6:	4602      	mov	r2, r0
 80589b8:	6270      	str	r0, [r6, #36]	; 0x24
 80589ba:	b928      	cbnz	r0, 80589c8 <__pow5mult+0x40>
 80589bc:	4b1d      	ldr	r3, [pc, #116]	; (8058a34 <__pow5mult+0xac>)
 80589be:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80589c2:	481d      	ldr	r0, [pc, #116]	; (8058a38 <__pow5mult+0xb0>)
 80589c4:	f000 fee4 	bl	8059790 <__assert_func>
 80589c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80589cc:	6004      	str	r4, [r0, #0]
 80589ce:	60c4      	str	r4, [r0, #12]
 80589d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80589d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80589d8:	b94c      	cbnz	r4, 80589ee <__pow5mult+0x66>
 80589da:	f240 2171 	movw	r1, #625	; 0x271
 80589de:	4630      	mov	r0, r6
 80589e0:	f7ff ff16 	bl	8058810 <__i2b>
 80589e4:	2300      	movs	r3, #0
 80589e6:	4604      	mov	r4, r0
 80589e8:	f8c8 0008 	str.w	r0, [r8, #8]
 80589ec:	6003      	str	r3, [r0, #0]
 80589ee:	f04f 0900 	mov.w	r9, #0
 80589f2:	07eb      	lsls	r3, r5, #31
 80589f4:	d50a      	bpl.n	8058a0c <__pow5mult+0x84>
 80589f6:	4639      	mov	r1, r7
 80589f8:	4622      	mov	r2, r4
 80589fa:	4630      	mov	r0, r6
 80589fc:	f7ff ff1e 	bl	805883c <__multiply>
 8058a00:	4680      	mov	r8, r0
 8058a02:	4639      	mov	r1, r7
 8058a04:	4630      	mov	r0, r6
 8058a06:	4647      	mov	r7, r8
 8058a08:	f7ff fdfc 	bl	8058604 <_Bfree>
 8058a0c:	106d      	asrs	r5, r5, #1
 8058a0e:	d00b      	beq.n	8058a28 <__pow5mult+0xa0>
 8058a10:	6820      	ldr	r0, [r4, #0]
 8058a12:	b938      	cbnz	r0, 8058a24 <__pow5mult+0x9c>
 8058a14:	4622      	mov	r2, r4
 8058a16:	4621      	mov	r1, r4
 8058a18:	4630      	mov	r0, r6
 8058a1a:	f7ff ff0f 	bl	805883c <__multiply>
 8058a1e:	6020      	str	r0, [r4, #0]
 8058a20:	f8c0 9000 	str.w	r9, [r0]
 8058a24:	4604      	mov	r4, r0
 8058a26:	e7e4      	b.n	80589f2 <__pow5mult+0x6a>
 8058a28:	4638      	mov	r0, r7
 8058a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8058a2e:	bf00      	nop
 8058a30:	0805b010 	.word	0x0805b010
 8058a34:	0805ad56 	.word	0x0805ad56
 8058a38:	0805aec0 	.word	0x0805aec0

08058a3c <__lshift>:
 8058a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8058a40:	460c      	mov	r4, r1
 8058a42:	4607      	mov	r7, r0
 8058a44:	4691      	mov	r9, r2
 8058a46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8058a4a:	6923      	ldr	r3, [r4, #16]
 8058a4c:	6849      	ldr	r1, [r1, #4]
 8058a4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8058a52:	68a3      	ldr	r3, [r4, #8]
 8058a54:	f108 0601 	add.w	r6, r8, #1
 8058a58:	42b3      	cmp	r3, r6
 8058a5a:	db0b      	blt.n	8058a74 <__lshift+0x38>
 8058a5c:	4638      	mov	r0, r7
 8058a5e:	f7ff fd91 	bl	8058584 <_Balloc>
 8058a62:	4605      	mov	r5, r0
 8058a64:	b948      	cbnz	r0, 8058a7a <__lshift+0x3e>
 8058a66:	4602      	mov	r2, r0
 8058a68:	4b28      	ldr	r3, [pc, #160]	; (8058b0c <__lshift+0xd0>)
 8058a6a:	f240 11d9 	movw	r1, #473	; 0x1d9
 8058a6e:	4828      	ldr	r0, [pc, #160]	; (8058b10 <__lshift+0xd4>)
 8058a70:	f000 fe8e 	bl	8059790 <__assert_func>
 8058a74:	3101      	adds	r1, #1
 8058a76:	005b      	lsls	r3, r3, #1
 8058a78:	e7ee      	b.n	8058a58 <__lshift+0x1c>
 8058a7a:	2300      	movs	r3, #0
 8058a7c:	f100 0114 	add.w	r1, r0, #20
 8058a80:	f100 0210 	add.w	r2, r0, #16
 8058a84:	4618      	mov	r0, r3
 8058a86:	4553      	cmp	r3, sl
 8058a88:	db33      	blt.n	8058af2 <__lshift+0xb6>
 8058a8a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8058a8e:	f104 0314 	add.w	r3, r4, #20
 8058a92:	6920      	ldr	r0, [r4, #16]
 8058a94:	f019 091f 	ands.w	r9, r9, #31
 8058a98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8058a9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8058aa0:	d02b      	beq.n	8058afa <__lshift+0xbe>
 8058aa2:	f1c9 0e20 	rsb	lr, r9, #32
 8058aa6:	468a      	mov	sl, r1
 8058aa8:	2200      	movs	r2, #0
 8058aaa:	6818      	ldr	r0, [r3, #0]
 8058aac:	fa00 f009 	lsl.w	r0, r0, r9
 8058ab0:	4302      	orrs	r2, r0
 8058ab2:	f84a 2b04 	str.w	r2, [sl], #4
 8058ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8058aba:	459c      	cmp	ip, r3
 8058abc:	fa22 f20e 	lsr.w	r2, r2, lr
 8058ac0:	d8f3      	bhi.n	8058aaa <__lshift+0x6e>
 8058ac2:	ebac 0304 	sub.w	r3, ip, r4
 8058ac6:	f104 0015 	add.w	r0, r4, #21
 8058aca:	3b15      	subs	r3, #21
 8058acc:	f023 0303 	bic.w	r3, r3, #3
 8058ad0:	3304      	adds	r3, #4
 8058ad2:	4584      	cmp	ip, r0
 8058ad4:	bf38      	it	cc
 8058ad6:	2304      	movcc	r3, #4
 8058ad8:	50ca      	str	r2, [r1, r3]
 8058ada:	b10a      	cbz	r2, 8058ae0 <__lshift+0xa4>
 8058adc:	f108 0602 	add.w	r6, r8, #2
 8058ae0:	3e01      	subs	r6, #1
 8058ae2:	4638      	mov	r0, r7
 8058ae4:	4621      	mov	r1, r4
 8058ae6:	612e      	str	r6, [r5, #16]
 8058ae8:	f7ff fd8c 	bl	8058604 <_Bfree>
 8058aec:	4628      	mov	r0, r5
 8058aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8058af2:	3301      	adds	r3, #1
 8058af4:	f842 0f04 	str.w	r0, [r2, #4]!
 8058af8:	e7c5      	b.n	8058a86 <__lshift+0x4a>
 8058afa:	3904      	subs	r1, #4
 8058afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8058b00:	459c      	cmp	ip, r3
 8058b02:	f841 2f04 	str.w	r2, [r1, #4]!
 8058b06:	d8f9      	bhi.n	8058afc <__lshift+0xc0>
 8058b08:	e7ea      	b.n	8058ae0 <__lshift+0xa4>
 8058b0a:	bf00      	nop
 8058b0c:	0805adcc 	.word	0x0805adcc
 8058b10:	0805aec0 	.word	0x0805aec0

08058b14 <__mcmp>:
 8058b14:	6902      	ldr	r2, [r0, #16]
 8058b16:	b530      	push	{r4, r5, lr}
 8058b18:	690c      	ldr	r4, [r1, #16]
 8058b1a:	1b12      	subs	r2, r2, r4
 8058b1c:	d10e      	bne.n	8058b3c <__mcmp+0x28>
 8058b1e:	f100 0314 	add.w	r3, r0, #20
 8058b22:	3114      	adds	r1, #20
 8058b24:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8058b28:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8058b2c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8058b30:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8058b34:	42a5      	cmp	r5, r4
 8058b36:	d003      	beq.n	8058b40 <__mcmp+0x2c>
 8058b38:	d305      	bcc.n	8058b46 <__mcmp+0x32>
 8058b3a:	2201      	movs	r2, #1
 8058b3c:	4610      	mov	r0, r2
 8058b3e:	bd30      	pop	{r4, r5, pc}
 8058b40:	4283      	cmp	r3, r0
 8058b42:	d3f3      	bcc.n	8058b2c <__mcmp+0x18>
 8058b44:	e7fa      	b.n	8058b3c <__mcmp+0x28>
 8058b46:	f04f 32ff 	mov.w	r2, #4294967295
 8058b4a:	e7f7      	b.n	8058b3c <__mcmp+0x28>

08058b4c <__mdiff>:
 8058b4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8058b50:	460c      	mov	r4, r1
 8058b52:	4606      	mov	r6, r0
 8058b54:	4611      	mov	r1, r2
 8058b56:	4692      	mov	sl, r2
 8058b58:	4620      	mov	r0, r4
 8058b5a:	f7ff ffdb 	bl	8058b14 <__mcmp>
 8058b5e:	1e05      	subs	r5, r0, #0
 8058b60:	d110      	bne.n	8058b84 <__mdiff+0x38>
 8058b62:	4629      	mov	r1, r5
 8058b64:	4630      	mov	r0, r6
 8058b66:	f7ff fd0d 	bl	8058584 <_Balloc>
 8058b6a:	b930      	cbnz	r0, 8058b7a <__mdiff+0x2e>
 8058b6c:	4b3d      	ldr	r3, [pc, #244]	; (8058c64 <__mdiff+0x118>)
 8058b6e:	4602      	mov	r2, r0
 8058b70:	f240 2132 	movw	r1, #562	; 0x232
 8058b74:	483c      	ldr	r0, [pc, #240]	; (8058c68 <__mdiff+0x11c>)
 8058b76:	f000 fe0b 	bl	8059790 <__assert_func>
 8058b7a:	2301      	movs	r3, #1
 8058b7c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8058b80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8058b84:	bfa4      	itt	ge
 8058b86:	4653      	movge	r3, sl
 8058b88:	46a2      	movge	sl, r4
 8058b8a:	4630      	mov	r0, r6
 8058b8c:	bfa8      	it	ge
 8058b8e:	2500      	movge	r5, #0
 8058b90:	f8da 1004 	ldr.w	r1, [sl, #4]
 8058b94:	bfac      	ite	ge
 8058b96:	461c      	movge	r4, r3
 8058b98:	2501      	movlt	r5, #1
 8058b9a:	f7ff fcf3 	bl	8058584 <_Balloc>
 8058b9e:	b920      	cbnz	r0, 8058baa <__mdiff+0x5e>
 8058ba0:	4b30      	ldr	r3, [pc, #192]	; (8058c64 <__mdiff+0x118>)
 8058ba2:	4602      	mov	r2, r0
 8058ba4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8058ba8:	e7e4      	b.n	8058b74 <__mdiff+0x28>
 8058baa:	f8da 7010 	ldr.w	r7, [sl, #16]
 8058bae:	f104 0914 	add.w	r9, r4, #20
 8058bb2:	6926      	ldr	r6, [r4, #16]
 8058bb4:	f100 0814 	add.w	r8, r0, #20
 8058bb8:	60c5      	str	r5, [r0, #12]
 8058bba:	f10a 0514 	add.w	r5, sl, #20
 8058bbe:	f10a 0210 	add.w	r2, sl, #16
 8058bc2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8058bc6:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8058bca:	46c2      	mov	sl, r8
 8058bcc:	f04f 0c00 	mov.w	ip, #0
 8058bd0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8058bd4:	f859 3b04 	ldr.w	r3, [r9], #4
 8058bd8:	fa1f f18b 	uxth.w	r1, fp
 8058bdc:	454e      	cmp	r6, r9
 8058bde:	4461      	add	r1, ip
 8058be0:	fa1f fc83 	uxth.w	ip, r3
 8058be4:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8058be8:	eba1 010c 	sub.w	r1, r1, ip
 8058bec:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8058bf0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8058bf4:	b289      	uxth	r1, r1
 8058bf6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8058bfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8058bfe:	f84a 3b04 	str.w	r3, [sl], #4
 8058c02:	d8e5      	bhi.n	8058bd0 <__mdiff+0x84>
 8058c04:	1b33      	subs	r3, r6, r4
 8058c06:	3415      	adds	r4, #21
 8058c08:	3b15      	subs	r3, #21
 8058c0a:	f023 0303 	bic.w	r3, r3, #3
 8058c0e:	3304      	adds	r3, #4
 8058c10:	42a6      	cmp	r6, r4
 8058c12:	bf38      	it	cc
 8058c14:	2304      	movcc	r3, #4
 8058c16:	441d      	add	r5, r3
 8058c18:	4443      	add	r3, r8
 8058c1a:	462c      	mov	r4, r5
 8058c1c:	461e      	mov	r6, r3
 8058c1e:	4574      	cmp	r4, lr
 8058c20:	d30e      	bcc.n	8058c40 <__mdiff+0xf4>
 8058c22:	f10e 0203 	add.w	r2, lr, #3
 8058c26:	1b52      	subs	r2, r2, r5
 8058c28:	3d03      	subs	r5, #3
 8058c2a:	f022 0203 	bic.w	r2, r2, #3
 8058c2e:	45ae      	cmp	lr, r5
 8058c30:	bf38      	it	cc
 8058c32:	2200      	movcc	r2, #0
 8058c34:	441a      	add	r2, r3
 8058c36:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8058c3a:	b18b      	cbz	r3, 8058c60 <__mdiff+0x114>
 8058c3c:	6107      	str	r7, [r0, #16]
 8058c3e:	e79f      	b.n	8058b80 <__mdiff+0x34>
 8058c40:	f854 8b04 	ldr.w	r8, [r4], #4
 8058c44:	fa1f f288 	uxth.w	r2, r8
 8058c48:	4462      	add	r2, ip
 8058c4a:	1411      	asrs	r1, r2, #16
 8058c4c:	b292      	uxth	r2, r2
 8058c4e:	eb01 4118 	add.w	r1, r1, r8, lsr #16
 8058c52:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8058c56:	ea4f 4c21 	mov.w	ip, r1, asr #16
 8058c5a:	f846 2b04 	str.w	r2, [r6], #4
 8058c5e:	e7de      	b.n	8058c1e <__mdiff+0xd2>
 8058c60:	3f01      	subs	r7, #1
 8058c62:	e7e8      	b.n	8058c36 <__mdiff+0xea>
 8058c64:	0805adcc 	.word	0x0805adcc
 8058c68:	0805aec0 	.word	0x0805aec0

08058c6c <__ulp>:
 8058c6c:	b082      	sub	sp, #8
 8058c6e:	4913      	ldr	r1, [pc, #76]	; (8058cbc <__ulp+0x50>)
 8058c70:	ed8d 0b00 	vstr	d0, [sp]
 8058c74:	9b01      	ldr	r3, [sp, #4]
 8058c76:	4019      	ands	r1, r3
 8058c78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8058c7c:	2900      	cmp	r1, #0
 8058c7e:	dd05      	ble.n	8058c8c <__ulp+0x20>
 8058c80:	2200      	movs	r2, #0
 8058c82:	460b      	mov	r3, r1
 8058c84:	ec43 2b10 	vmov	d0, r2, r3
 8058c88:	b002      	add	sp, #8
 8058c8a:	4770      	bx	lr
 8058c8c:	4249      	negs	r1, r1
 8058c8e:	2200      	movs	r2, #0
 8058c90:	2300      	movs	r3, #0
 8058c92:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8058c96:	ea4f 5021 	mov.w	r0, r1, asr #20
 8058c9a:	da04      	bge.n	8058ca6 <__ulp+0x3a>
 8058c9c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8058ca0:	fa41 f300 	asr.w	r3, r1, r0
 8058ca4:	e7ee      	b.n	8058c84 <__ulp+0x18>
 8058ca6:	f1a0 0114 	sub.w	r1, r0, #20
 8058caa:	291e      	cmp	r1, #30
 8058cac:	bfd6      	itet	le
 8058cae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8058cb2:	2101      	movgt	r1, #1
 8058cb4:	fa20 f101 	lsrle.w	r1, r0, r1
 8058cb8:	460a      	mov	r2, r1
 8058cba:	e7e3      	b.n	8058c84 <__ulp+0x18>
 8058cbc:	7ff00000 	.word	0x7ff00000

08058cc0 <__b2d>:
 8058cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8058cc2:	6905      	ldr	r5, [r0, #16]
 8058cc4:	f100 0714 	add.w	r7, r0, #20
 8058cc8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8058ccc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8058cd0:	1f2e      	subs	r6, r5, #4
 8058cd2:	4620      	mov	r0, r4
 8058cd4:	f7ff fd4c 	bl	8058770 <__hi0bits>
 8058cd8:	f1c0 0320 	rsb	r3, r0, #32
 8058cdc:	280a      	cmp	r0, #10
 8058cde:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8058d5c <__b2d+0x9c>
 8058ce2:	600b      	str	r3, [r1, #0]
 8058ce4:	dc15      	bgt.n	8058d12 <__b2d+0x52>
 8058ce6:	f1c0 0e0b 	rsb	lr, r0, #11
 8058cea:	42b7      	cmp	r7, r6
 8058cec:	f100 0015 	add.w	r0, r0, #21
 8058cf0:	fa24 f10e 	lsr.w	r1, r4, lr
 8058cf4:	fa04 f000 	lsl.w	r0, r4, r0
 8058cf8:	ea41 030c 	orr.w	r3, r1, ip
 8058cfc:	bf34      	ite	cc
 8058cfe:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8058d02:	2100      	movcs	r1, #0
 8058d04:	fa21 f10e 	lsr.w	r1, r1, lr
 8058d08:	ea40 0201 	orr.w	r2, r0, r1
 8058d0c:	ec43 2b10 	vmov	d0, r2, r3
 8058d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8058d12:	42b7      	cmp	r7, r6
 8058d14:	bf3a      	itte	cc
 8058d16:	f1a5 0608 	subcc.w	r6, r5, #8
 8058d1a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8058d1e:	2100      	movcs	r1, #0
 8058d20:	380b      	subs	r0, #11
 8058d22:	d017      	beq.n	8058d54 <__b2d+0x94>
 8058d24:	f1c0 0c20 	rsb	ip, r0, #32
 8058d28:	fa04 f500 	lsl.w	r5, r4, r0
 8058d2c:	42be      	cmp	r6, r7
 8058d2e:	fa01 f000 	lsl.w	r0, r1, r0
 8058d32:	fa21 f40c 	lsr.w	r4, r1, ip
 8058d36:	ea45 0504 	orr.w	r5, r5, r4
 8058d3a:	bf8c      	ite	hi
 8058d3c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8058d40:	2400      	movls	r4, #0
 8058d42:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8058d46:	fa24 f40c 	lsr.w	r4, r4, ip
 8058d4a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8058d4e:	ea40 0204 	orr.w	r2, r0, r4
 8058d52:	e7db      	b.n	8058d0c <__b2d+0x4c>
 8058d54:	ea44 030c 	orr.w	r3, r4, ip
 8058d58:	460a      	mov	r2, r1
 8058d5a:	e7d7      	b.n	8058d0c <__b2d+0x4c>
 8058d5c:	3ff00000 	.word	0x3ff00000

08058d60 <__d2b>:
 8058d60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8058d64:	4689      	mov	r9, r1
 8058d66:	2101      	movs	r1, #1
 8058d68:	4690      	mov	r8, r2
 8058d6a:	ec57 6b10 	vmov	r6, r7, d0
 8058d6e:	f7ff fc09 	bl	8058584 <_Balloc>
 8058d72:	4604      	mov	r4, r0
 8058d74:	b930      	cbnz	r0, 8058d84 <__d2b+0x24>
 8058d76:	4602      	mov	r2, r0
 8058d78:	4b25      	ldr	r3, [pc, #148]	; (8058e10 <__d2b+0xb0>)
 8058d7a:	f240 310a 	movw	r1, #778	; 0x30a
 8058d7e:	4825      	ldr	r0, [pc, #148]	; (8058e14 <__d2b+0xb4>)
 8058d80:	f000 fd06 	bl	8059790 <__assert_func>
 8058d84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8058d88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8058d8c:	bb35      	cbnz	r5, 8058ddc <__d2b+0x7c>
 8058d8e:	2e00      	cmp	r6, #0
 8058d90:	9301      	str	r3, [sp, #4]
 8058d92:	d028      	beq.n	8058de6 <__d2b+0x86>
 8058d94:	4668      	mov	r0, sp
 8058d96:	9600      	str	r6, [sp, #0]
 8058d98:	f7ff fd0a 	bl	80587b0 <__lo0bits>
 8058d9c:	9900      	ldr	r1, [sp, #0]
 8058d9e:	b300      	cbz	r0, 8058de2 <__d2b+0x82>
 8058da0:	9a01      	ldr	r2, [sp, #4]
 8058da2:	f1c0 0320 	rsb	r3, r0, #32
 8058da6:	fa02 f303 	lsl.w	r3, r2, r3
 8058daa:	40c2      	lsrs	r2, r0
 8058dac:	430b      	orrs	r3, r1
 8058dae:	9201      	str	r2, [sp, #4]
 8058db0:	6163      	str	r3, [r4, #20]
 8058db2:	9b01      	ldr	r3, [sp, #4]
 8058db4:	2b00      	cmp	r3, #0
 8058db6:	61a3      	str	r3, [r4, #24]
 8058db8:	bf14      	ite	ne
 8058dba:	2202      	movne	r2, #2
 8058dbc:	2201      	moveq	r2, #1
 8058dbe:	6122      	str	r2, [r4, #16]
 8058dc0:	b1d5      	cbz	r5, 8058df8 <__d2b+0x98>
 8058dc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8058dc6:	4405      	add	r5, r0
 8058dc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8058dcc:	f8c9 5000 	str.w	r5, [r9]
 8058dd0:	f8c8 0000 	str.w	r0, [r8]
 8058dd4:	4620      	mov	r0, r4
 8058dd6:	b003      	add	sp, #12
 8058dd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8058ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8058de0:	e7d5      	b.n	8058d8e <__d2b+0x2e>
 8058de2:	6161      	str	r1, [r4, #20]
 8058de4:	e7e5      	b.n	8058db2 <__d2b+0x52>
 8058de6:	a801      	add	r0, sp, #4
 8058de8:	f7ff fce2 	bl	80587b0 <__lo0bits>
 8058dec:	9b01      	ldr	r3, [sp, #4]
 8058dee:	2201      	movs	r2, #1
 8058df0:	3020      	adds	r0, #32
 8058df2:	6163      	str	r3, [r4, #20]
 8058df4:	6122      	str	r2, [r4, #16]
 8058df6:	e7e3      	b.n	8058dc0 <__d2b+0x60>
 8058df8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8058dfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8058e00:	f8c9 0000 	str.w	r0, [r9]
 8058e04:	6918      	ldr	r0, [r3, #16]
 8058e06:	f7ff fcb3 	bl	8058770 <__hi0bits>
 8058e0a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8058e0e:	e7df      	b.n	8058dd0 <__d2b+0x70>
 8058e10:	0805adcc 	.word	0x0805adcc
 8058e14:	0805aec0 	.word	0x0805aec0

08058e18 <__ratio>:
 8058e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8058e1c:	4688      	mov	r8, r1
 8058e1e:	4681      	mov	r9, r0
 8058e20:	4669      	mov	r1, sp
 8058e22:	f7ff ff4d 	bl	8058cc0 <__b2d>
 8058e26:	a901      	add	r1, sp, #4
 8058e28:	4640      	mov	r0, r8
 8058e2a:	ec55 4b10 	vmov	r4, r5, d0
 8058e2e:	f7ff ff47 	bl	8058cc0 <__b2d>
 8058e32:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8058e36:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8058e3a:	462f      	mov	r7, r5
 8058e3c:	eba3 0c02 	sub.w	ip, r3, r2
 8058e40:	e9dd 3200 	ldrd	r3, r2, [sp]
 8058e44:	ec51 0b10 	vmov	r0, r1, d0
 8058e48:	1a9b      	subs	r3, r3, r2
 8058e4a:	468b      	mov	fp, r1
 8058e4c:	4620      	mov	r0, r4
 8058e4e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8058e52:	2b00      	cmp	r3, #0
 8058e54:	bfd5      	itete	le
 8058e56:	460a      	movle	r2, r1
 8058e58:	462a      	movgt	r2, r5
 8058e5a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8058e5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8058e62:	bfd8      	it	le
 8058e64:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8058e68:	ee10 2a10 	vmov	r2, s0
 8058e6c:	4639      	mov	r1, r7
 8058e6e:	465b      	mov	r3, fp
 8058e70:	f7e7 fcd0 	bl	8040814 <__aeabi_ddiv>
 8058e74:	ec41 0b10 	vmov	d0, r0, r1
 8058e78:	b003      	add	sp, #12
 8058e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08058e7e <__copybits>:
 8058e7e:	3901      	subs	r1, #1
 8058e80:	f102 0314 	add.w	r3, r2, #20
 8058e84:	1149      	asrs	r1, r1, #5
 8058e86:	b570      	push	{r4, r5, r6, lr}
 8058e88:	3101      	adds	r1, #1
 8058e8a:	6914      	ldr	r4, [r2, #16]
 8058e8c:	1f05      	subs	r5, r0, #4
 8058e8e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8058e92:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8058e96:	42a3      	cmp	r3, r4
 8058e98:	d30c      	bcc.n	8058eb4 <__copybits+0x36>
 8058e9a:	1aa3      	subs	r3, r4, r2
 8058e9c:	3211      	adds	r2, #17
 8058e9e:	3b11      	subs	r3, #17
 8058ea0:	f023 0303 	bic.w	r3, r3, #3
 8058ea4:	42a2      	cmp	r2, r4
 8058ea6:	bf88      	it	hi
 8058ea8:	2300      	movhi	r3, #0
 8058eaa:	4418      	add	r0, r3
 8058eac:	2300      	movs	r3, #0
 8058eae:	4288      	cmp	r0, r1
 8058eb0:	d305      	bcc.n	8058ebe <__copybits+0x40>
 8058eb2:	bd70      	pop	{r4, r5, r6, pc}
 8058eb4:	f853 6b04 	ldr.w	r6, [r3], #4
 8058eb8:	f845 6f04 	str.w	r6, [r5, #4]!
 8058ebc:	e7eb      	b.n	8058e96 <__copybits+0x18>
 8058ebe:	f840 3b04 	str.w	r3, [r0], #4
 8058ec2:	e7f4      	b.n	8058eae <__copybits+0x30>

08058ec4 <__any_on>:
 8058ec4:	f100 0214 	add.w	r2, r0, #20
 8058ec8:	114b      	asrs	r3, r1, #5
 8058eca:	6900      	ldr	r0, [r0, #16]
 8058ecc:	4298      	cmp	r0, r3
 8058ece:	b510      	push	{r4, lr}
 8058ed0:	db11      	blt.n	8058ef6 <__any_on+0x32>
 8058ed2:	dd0a      	ble.n	8058eea <__any_on+0x26>
 8058ed4:	f011 011f 	ands.w	r1, r1, #31
 8058ed8:	d007      	beq.n	8058eea <__any_on+0x26>
 8058eda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8058ede:	fa24 f001 	lsr.w	r0, r4, r1
 8058ee2:	fa00 f101 	lsl.w	r1, r0, r1
 8058ee6:	428c      	cmp	r4, r1
 8058ee8:	d10b      	bne.n	8058f02 <__any_on+0x3e>
 8058eea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8058eee:	4293      	cmp	r3, r2
 8058ef0:	d803      	bhi.n	8058efa <__any_on+0x36>
 8058ef2:	2000      	movs	r0, #0
 8058ef4:	bd10      	pop	{r4, pc}
 8058ef6:	4603      	mov	r3, r0
 8058ef8:	e7f7      	b.n	8058eea <__any_on+0x26>
 8058efa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8058efe:	2900      	cmp	r1, #0
 8058f00:	d0f5      	beq.n	8058eee <__any_on+0x2a>
 8058f02:	2001      	movs	r0, #1
 8058f04:	e7f6      	b.n	8058ef4 <__any_on+0x30>

08058f06 <_calloc_r>:
 8058f06:	434a      	muls	r2, r1
 8058f08:	b513      	push	{r0, r1, r4, lr}
 8058f0a:	4611      	mov	r1, r2
 8058f0c:	9201      	str	r2, [sp, #4]
 8058f0e:	f000 f859 	bl	8058fc4 <_malloc_r>
 8058f12:	4604      	mov	r4, r0
 8058f14:	b118      	cbz	r0, 8058f1e <_calloc_r+0x18>
 8058f16:	9a01      	ldr	r2, [sp, #4]
 8058f18:	2100      	movs	r1, #0
 8058f1a:	f7fc f83e 	bl	8054f9a <memset>
 8058f1e:	4620      	mov	r0, r4
 8058f20:	b002      	add	sp, #8
 8058f22:	bd10      	pop	{r4, pc}

08058f24 <_free_r>:
 8058f24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8058f26:	2900      	cmp	r1, #0
 8058f28:	d047      	beq.n	8058fba <_free_r+0x96>
 8058f2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8058f2e:	1f0c      	subs	r4, r1, #4
 8058f30:	9001      	str	r0, [sp, #4]
 8058f32:	2b00      	cmp	r3, #0
 8058f34:	bfb8      	it	lt
 8058f36:	18e4      	addlt	r4, r4, r3
 8058f38:	f000 fcb8 	bl	80598ac <__malloc_lock>
 8058f3c:	4a20      	ldr	r2, [pc, #128]	; (8058fc0 <_free_r+0x9c>)
 8058f3e:	9801      	ldr	r0, [sp, #4]
 8058f40:	6813      	ldr	r3, [r2, #0]
 8058f42:	4615      	mov	r5, r2
 8058f44:	b933      	cbnz	r3, 8058f54 <_free_r+0x30>
 8058f46:	6063      	str	r3, [r4, #4]
 8058f48:	6014      	str	r4, [r2, #0]
 8058f4a:	b003      	add	sp, #12
 8058f4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8058f50:	f000 bcb2 	b.w	80598b8 <__malloc_unlock>
 8058f54:	42a3      	cmp	r3, r4
 8058f56:	d90b      	bls.n	8058f70 <_free_r+0x4c>
 8058f58:	6821      	ldr	r1, [r4, #0]
 8058f5a:	1862      	adds	r2, r4, r1
 8058f5c:	4293      	cmp	r3, r2
 8058f5e:	bf02      	ittt	eq
 8058f60:	681a      	ldreq	r2, [r3, #0]
 8058f62:	685b      	ldreq	r3, [r3, #4]
 8058f64:	1852      	addeq	r2, r2, r1
 8058f66:	6063      	str	r3, [r4, #4]
 8058f68:	bf08      	it	eq
 8058f6a:	6022      	streq	r2, [r4, #0]
 8058f6c:	602c      	str	r4, [r5, #0]
 8058f6e:	e7ec      	b.n	8058f4a <_free_r+0x26>
 8058f70:	461a      	mov	r2, r3
 8058f72:	685b      	ldr	r3, [r3, #4]
 8058f74:	b10b      	cbz	r3, 8058f7a <_free_r+0x56>
 8058f76:	42a3      	cmp	r3, r4
 8058f78:	d9fa      	bls.n	8058f70 <_free_r+0x4c>
 8058f7a:	6811      	ldr	r1, [r2, #0]
 8058f7c:	1855      	adds	r5, r2, r1
 8058f7e:	42a5      	cmp	r5, r4
 8058f80:	d10b      	bne.n	8058f9a <_free_r+0x76>
 8058f82:	6824      	ldr	r4, [r4, #0]
 8058f84:	4421      	add	r1, r4
 8058f86:	1854      	adds	r4, r2, r1
 8058f88:	6011      	str	r1, [r2, #0]
 8058f8a:	42a3      	cmp	r3, r4
 8058f8c:	d1dd      	bne.n	8058f4a <_free_r+0x26>
 8058f8e:	681c      	ldr	r4, [r3, #0]
 8058f90:	685b      	ldr	r3, [r3, #4]
 8058f92:	4421      	add	r1, r4
 8058f94:	6053      	str	r3, [r2, #4]
 8058f96:	6011      	str	r1, [r2, #0]
 8058f98:	e7d7      	b.n	8058f4a <_free_r+0x26>
 8058f9a:	d902      	bls.n	8058fa2 <_free_r+0x7e>
 8058f9c:	230c      	movs	r3, #12
 8058f9e:	6003      	str	r3, [r0, #0]
 8058fa0:	e7d3      	b.n	8058f4a <_free_r+0x26>
 8058fa2:	6825      	ldr	r5, [r4, #0]
 8058fa4:	1961      	adds	r1, r4, r5
 8058fa6:	428b      	cmp	r3, r1
 8058fa8:	bf02      	ittt	eq
 8058faa:	6819      	ldreq	r1, [r3, #0]
 8058fac:	685b      	ldreq	r3, [r3, #4]
 8058fae:	1949      	addeq	r1, r1, r5
 8058fb0:	6063      	str	r3, [r4, #4]
 8058fb2:	bf08      	it	eq
 8058fb4:	6021      	streq	r1, [r4, #0]
 8058fb6:	6054      	str	r4, [r2, #4]
 8058fb8:	e7c7      	b.n	8058f4a <_free_r+0x26>
 8058fba:	b003      	add	sp, #12
 8058fbc:	bd30      	pop	{r4, r5, pc}
 8058fbe:	bf00      	nop
 8058fc0:	2001a080 	.word	0x2001a080

08058fc4 <_malloc_r>:
 8058fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8058fc6:	1ccd      	adds	r5, r1, #3
 8058fc8:	4606      	mov	r6, r0
 8058fca:	f025 0503 	bic.w	r5, r5, #3
 8058fce:	3508      	adds	r5, #8
 8058fd0:	2d0c      	cmp	r5, #12
 8058fd2:	bf38      	it	cc
 8058fd4:	250c      	movcc	r5, #12
 8058fd6:	2d00      	cmp	r5, #0
 8058fd8:	db01      	blt.n	8058fde <_malloc_r+0x1a>
 8058fda:	42a9      	cmp	r1, r5
 8058fdc:	d903      	bls.n	8058fe6 <_malloc_r+0x22>
 8058fde:	230c      	movs	r3, #12
 8058fe0:	6033      	str	r3, [r6, #0]
 8058fe2:	2000      	movs	r0, #0
 8058fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8058fe6:	f000 fc61 	bl	80598ac <__malloc_lock>
 8058fea:	4921      	ldr	r1, [pc, #132]	; (8059070 <_malloc_r+0xac>)
 8058fec:	680a      	ldr	r2, [r1, #0]
 8058fee:	4614      	mov	r4, r2
 8058ff0:	b99c      	cbnz	r4, 805901a <_malloc_r+0x56>
 8058ff2:	4f20      	ldr	r7, [pc, #128]	; (8059074 <_malloc_r+0xb0>)
 8058ff4:	683b      	ldr	r3, [r7, #0]
 8058ff6:	b923      	cbnz	r3, 8059002 <_malloc_r+0x3e>
 8058ff8:	4621      	mov	r1, r4
 8058ffa:	4630      	mov	r0, r6
 8058ffc:	f000 fb44 	bl	8059688 <_sbrk_r>
 8059000:	6038      	str	r0, [r7, #0]
 8059002:	4629      	mov	r1, r5
 8059004:	4630      	mov	r0, r6
 8059006:	f000 fb3f 	bl	8059688 <_sbrk_r>
 805900a:	1c43      	adds	r3, r0, #1
 805900c:	d123      	bne.n	8059056 <_malloc_r+0x92>
 805900e:	230c      	movs	r3, #12
 8059010:	4630      	mov	r0, r6
 8059012:	6033      	str	r3, [r6, #0]
 8059014:	f000 fc50 	bl	80598b8 <__malloc_unlock>
 8059018:	e7e3      	b.n	8058fe2 <_malloc_r+0x1e>
 805901a:	6823      	ldr	r3, [r4, #0]
 805901c:	1b5b      	subs	r3, r3, r5
 805901e:	d417      	bmi.n	8059050 <_malloc_r+0x8c>
 8059020:	2b0b      	cmp	r3, #11
 8059022:	d903      	bls.n	805902c <_malloc_r+0x68>
 8059024:	6023      	str	r3, [r4, #0]
 8059026:	441c      	add	r4, r3
 8059028:	6025      	str	r5, [r4, #0]
 805902a:	e004      	b.n	8059036 <_malloc_r+0x72>
 805902c:	6863      	ldr	r3, [r4, #4]
 805902e:	42a2      	cmp	r2, r4
 8059030:	bf0c      	ite	eq
 8059032:	600b      	streq	r3, [r1, #0]
 8059034:	6053      	strne	r3, [r2, #4]
 8059036:	4630      	mov	r0, r6
 8059038:	f000 fc3e 	bl	80598b8 <__malloc_unlock>
 805903c:	f104 000b 	add.w	r0, r4, #11
 8059040:	1d23      	adds	r3, r4, #4
 8059042:	f020 0007 	bic.w	r0, r0, #7
 8059046:	1ac2      	subs	r2, r0, r3
 8059048:	d0cc      	beq.n	8058fe4 <_malloc_r+0x20>
 805904a:	1a1b      	subs	r3, r3, r0
 805904c:	50a3      	str	r3, [r4, r2]
 805904e:	e7c9      	b.n	8058fe4 <_malloc_r+0x20>
 8059050:	4622      	mov	r2, r4
 8059052:	6864      	ldr	r4, [r4, #4]
 8059054:	e7cc      	b.n	8058ff0 <_malloc_r+0x2c>
 8059056:	1cc4      	adds	r4, r0, #3
 8059058:	f024 0403 	bic.w	r4, r4, #3
 805905c:	42a0      	cmp	r0, r4
 805905e:	d0e3      	beq.n	8059028 <_malloc_r+0x64>
 8059060:	1a21      	subs	r1, r4, r0
 8059062:	4630      	mov	r0, r6
 8059064:	f000 fb10 	bl	8059688 <_sbrk_r>
 8059068:	3001      	adds	r0, #1
 805906a:	d1dd      	bne.n	8059028 <_malloc_r+0x64>
 805906c:	e7cf      	b.n	805900e <_malloc_r+0x4a>
 805906e:	bf00      	nop
 8059070:	2001a080 	.word	0x2001a080
 8059074:	2001a084 	.word	0x2001a084

08059078 <__ssputs_r>:
 8059078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 805907c:	688e      	ldr	r6, [r1, #8]
 805907e:	4682      	mov	sl, r0
 8059080:	460c      	mov	r4, r1
 8059082:	4690      	mov	r8, r2
 8059084:	429e      	cmp	r6, r3
 8059086:	461f      	mov	r7, r3
 8059088:	d838      	bhi.n	80590fc <__ssputs_r+0x84>
 805908a:	898a      	ldrh	r2, [r1, #12]
 805908c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8059090:	d032      	beq.n	80590f8 <__ssputs_r+0x80>
 8059092:	6825      	ldr	r5, [r4, #0]
 8059094:	3301      	adds	r3, #1
 8059096:	6909      	ldr	r1, [r1, #16]
 8059098:	eba5 0901 	sub.w	r9, r5, r1
 805909c:	6965      	ldr	r5, [r4, #20]
 805909e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80590a2:	444b      	add	r3, r9
 80590a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80590a8:	106d      	asrs	r5, r5, #1
 80590aa:	429d      	cmp	r5, r3
 80590ac:	bf38      	it	cc
 80590ae:	461d      	movcc	r5, r3
 80590b0:	0553      	lsls	r3, r2, #21
 80590b2:	d531      	bpl.n	8059118 <__ssputs_r+0xa0>
 80590b4:	4629      	mov	r1, r5
 80590b6:	f7ff ff85 	bl	8058fc4 <_malloc_r>
 80590ba:	4606      	mov	r6, r0
 80590bc:	b950      	cbnz	r0, 80590d4 <__ssputs_r+0x5c>
 80590be:	230c      	movs	r3, #12
 80590c0:	f04f 30ff 	mov.w	r0, #4294967295
 80590c4:	f8ca 3000 	str.w	r3, [sl]
 80590c8:	89a3      	ldrh	r3, [r4, #12]
 80590ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80590ce:	81a3      	strh	r3, [r4, #12]
 80590d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80590d4:	464a      	mov	r2, r9
 80590d6:	6921      	ldr	r1, [r4, #16]
 80590d8:	f7fb ff52 	bl	8054f80 <memcpy>
 80590dc:	89a3      	ldrh	r3, [r4, #12]
 80590de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80590e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80590e6:	81a3      	strh	r3, [r4, #12]
 80590e8:	6126      	str	r6, [r4, #16]
 80590ea:	444e      	add	r6, r9
 80590ec:	6165      	str	r5, [r4, #20]
 80590ee:	eba5 0509 	sub.w	r5, r5, r9
 80590f2:	6026      	str	r6, [r4, #0]
 80590f4:	463e      	mov	r6, r7
 80590f6:	60a5      	str	r5, [r4, #8]
 80590f8:	42be      	cmp	r6, r7
 80590fa:	d900      	bls.n	80590fe <__ssputs_r+0x86>
 80590fc:	463e      	mov	r6, r7
 80590fe:	4632      	mov	r2, r6
 8059100:	4641      	mov	r1, r8
 8059102:	6820      	ldr	r0, [r4, #0]
 8059104:	f000 fbb8 	bl	8059878 <memmove>
 8059108:	68a3      	ldr	r3, [r4, #8]
 805910a:	6822      	ldr	r2, [r4, #0]
 805910c:	2000      	movs	r0, #0
 805910e:	1b9b      	subs	r3, r3, r6
 8059110:	4432      	add	r2, r6
 8059112:	60a3      	str	r3, [r4, #8]
 8059114:	6022      	str	r2, [r4, #0]
 8059116:	e7db      	b.n	80590d0 <__ssputs_r+0x58>
 8059118:	462a      	mov	r2, r5
 805911a:	f000 fbd3 	bl	80598c4 <_realloc_r>
 805911e:	4606      	mov	r6, r0
 8059120:	2800      	cmp	r0, #0
 8059122:	d1e1      	bne.n	80590e8 <__ssputs_r+0x70>
 8059124:	6921      	ldr	r1, [r4, #16]
 8059126:	4650      	mov	r0, sl
 8059128:	f7ff fefc 	bl	8058f24 <_free_r>
 805912c:	e7c7      	b.n	80590be <__ssputs_r+0x46>
	...

08059130 <_svfiprintf_r>:
 8059130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8059134:	4698      	mov	r8, r3
 8059136:	898b      	ldrh	r3, [r1, #12]
 8059138:	b09d      	sub	sp, #116	; 0x74
 805913a:	4607      	mov	r7, r0
 805913c:	061b      	lsls	r3, r3, #24
 805913e:	460d      	mov	r5, r1
 8059140:	4614      	mov	r4, r2
 8059142:	d50e      	bpl.n	8059162 <_svfiprintf_r+0x32>
 8059144:	690b      	ldr	r3, [r1, #16]
 8059146:	b963      	cbnz	r3, 8059162 <_svfiprintf_r+0x32>
 8059148:	2140      	movs	r1, #64	; 0x40
 805914a:	f7ff ff3b 	bl	8058fc4 <_malloc_r>
 805914e:	6028      	str	r0, [r5, #0]
 8059150:	6128      	str	r0, [r5, #16]
 8059152:	b920      	cbnz	r0, 805915e <_svfiprintf_r+0x2e>
 8059154:	230c      	movs	r3, #12
 8059156:	603b      	str	r3, [r7, #0]
 8059158:	f04f 30ff 	mov.w	r0, #4294967295
 805915c:	e0d1      	b.n	8059302 <_svfiprintf_r+0x1d2>
 805915e:	2340      	movs	r3, #64	; 0x40
 8059160:	616b      	str	r3, [r5, #20]
 8059162:	2300      	movs	r3, #0
 8059164:	f8cd 800c 	str.w	r8, [sp, #12]
 8059168:	f04f 0901 	mov.w	r9, #1
 805916c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 805931c <_svfiprintf_r+0x1ec>
 8059170:	9309      	str	r3, [sp, #36]	; 0x24
 8059172:	2320      	movs	r3, #32
 8059174:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8059178:	2330      	movs	r3, #48	; 0x30
 805917a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 805917e:	4623      	mov	r3, r4
 8059180:	469a      	mov	sl, r3
 8059182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8059186:	b10a      	cbz	r2, 805918c <_svfiprintf_r+0x5c>
 8059188:	2a25      	cmp	r2, #37	; 0x25
 805918a:	d1f9      	bne.n	8059180 <_svfiprintf_r+0x50>
 805918c:	ebba 0b04 	subs.w	fp, sl, r4
 8059190:	d00b      	beq.n	80591aa <_svfiprintf_r+0x7a>
 8059192:	465b      	mov	r3, fp
 8059194:	4622      	mov	r2, r4
 8059196:	4629      	mov	r1, r5
 8059198:	4638      	mov	r0, r7
 805919a:	f7ff ff6d 	bl	8059078 <__ssputs_r>
 805919e:	3001      	adds	r0, #1
 80591a0:	f000 80aa 	beq.w	80592f8 <_svfiprintf_r+0x1c8>
 80591a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80591a6:	445a      	add	r2, fp
 80591a8:	9209      	str	r2, [sp, #36]	; 0x24
 80591aa:	f89a 3000 	ldrb.w	r3, [sl]
 80591ae:	2b00      	cmp	r3, #0
 80591b0:	f000 80a2 	beq.w	80592f8 <_svfiprintf_r+0x1c8>
 80591b4:	2300      	movs	r3, #0
 80591b6:	f04f 32ff 	mov.w	r2, #4294967295
 80591ba:	f10a 0a01 	add.w	sl, sl, #1
 80591be:	9304      	str	r3, [sp, #16]
 80591c0:	9307      	str	r3, [sp, #28]
 80591c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80591c6:	931a      	str	r3, [sp, #104]	; 0x68
 80591c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80591cc:	4654      	mov	r4, sl
 80591ce:	2205      	movs	r2, #5
 80591d0:	4852      	ldr	r0, [pc, #328]	; (805931c <_svfiprintf_r+0x1ec>)
 80591d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80591d6:	f7ff f9c7 	bl	8058568 <memchr>
 80591da:	9a04      	ldr	r2, [sp, #16]
 80591dc:	b9d8      	cbnz	r0, 8059216 <_svfiprintf_r+0xe6>
 80591de:	06d0      	lsls	r0, r2, #27
 80591e0:	bf44      	itt	mi
 80591e2:	2320      	movmi	r3, #32
 80591e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80591e8:	0711      	lsls	r1, r2, #28
 80591ea:	bf44      	itt	mi
 80591ec:	232b      	movmi	r3, #43	; 0x2b
 80591ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80591f2:	f89a 3000 	ldrb.w	r3, [sl]
 80591f6:	2b2a      	cmp	r3, #42	; 0x2a
 80591f8:	d015      	beq.n	8059226 <_svfiprintf_r+0xf6>
 80591fa:	9a07      	ldr	r2, [sp, #28]
 80591fc:	4654      	mov	r4, sl
 80591fe:	2000      	movs	r0, #0
 8059200:	f04f 0c0a 	mov.w	ip, #10
 8059204:	4621      	mov	r1, r4
 8059206:	f811 3b01 	ldrb.w	r3, [r1], #1
 805920a:	3b30      	subs	r3, #48	; 0x30
 805920c:	2b09      	cmp	r3, #9
 805920e:	d94e      	bls.n	80592ae <_svfiprintf_r+0x17e>
 8059210:	b1b0      	cbz	r0, 8059240 <_svfiprintf_r+0x110>
 8059212:	9207      	str	r2, [sp, #28]
 8059214:	e014      	b.n	8059240 <_svfiprintf_r+0x110>
 8059216:	eba0 0308 	sub.w	r3, r0, r8
 805921a:	46a2      	mov	sl, r4
 805921c:	fa09 f303 	lsl.w	r3, r9, r3
 8059220:	4313      	orrs	r3, r2
 8059222:	9304      	str	r3, [sp, #16]
 8059224:	e7d2      	b.n	80591cc <_svfiprintf_r+0x9c>
 8059226:	9b03      	ldr	r3, [sp, #12]
 8059228:	1d19      	adds	r1, r3, #4
 805922a:	681b      	ldr	r3, [r3, #0]
 805922c:	2b00      	cmp	r3, #0
 805922e:	9103      	str	r1, [sp, #12]
 8059230:	bfbb      	ittet	lt
 8059232:	425b      	neglt	r3, r3
 8059234:	f042 0202 	orrlt.w	r2, r2, #2
 8059238:	9307      	strge	r3, [sp, #28]
 805923a:	9307      	strlt	r3, [sp, #28]
 805923c:	bfb8      	it	lt
 805923e:	9204      	strlt	r2, [sp, #16]
 8059240:	7823      	ldrb	r3, [r4, #0]
 8059242:	2b2e      	cmp	r3, #46	; 0x2e
 8059244:	d10c      	bne.n	8059260 <_svfiprintf_r+0x130>
 8059246:	7863      	ldrb	r3, [r4, #1]
 8059248:	2b2a      	cmp	r3, #42	; 0x2a
 805924a:	d135      	bne.n	80592b8 <_svfiprintf_r+0x188>
 805924c:	9b03      	ldr	r3, [sp, #12]
 805924e:	3402      	adds	r4, #2
 8059250:	1d1a      	adds	r2, r3, #4
 8059252:	681b      	ldr	r3, [r3, #0]
 8059254:	2b00      	cmp	r3, #0
 8059256:	9203      	str	r2, [sp, #12]
 8059258:	bfb8      	it	lt
 805925a:	f04f 33ff 	movlt.w	r3, #4294967295
 805925e:	9305      	str	r3, [sp, #20]
 8059260:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 805932c <_svfiprintf_r+0x1fc>
 8059264:	2203      	movs	r2, #3
 8059266:	7821      	ldrb	r1, [r4, #0]
 8059268:	4650      	mov	r0, sl
 805926a:	f7ff f97d 	bl	8058568 <memchr>
 805926e:	b140      	cbz	r0, 8059282 <_svfiprintf_r+0x152>
 8059270:	2340      	movs	r3, #64	; 0x40
 8059272:	eba0 000a 	sub.w	r0, r0, sl
 8059276:	3401      	adds	r4, #1
 8059278:	fa03 f000 	lsl.w	r0, r3, r0
 805927c:	9b04      	ldr	r3, [sp, #16]
 805927e:	4303      	orrs	r3, r0
 8059280:	9304      	str	r3, [sp, #16]
 8059282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8059286:	2206      	movs	r2, #6
 8059288:	4825      	ldr	r0, [pc, #148]	; (8059320 <_svfiprintf_r+0x1f0>)
 805928a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 805928e:	f7ff f96b 	bl	8058568 <memchr>
 8059292:	2800      	cmp	r0, #0
 8059294:	d038      	beq.n	8059308 <_svfiprintf_r+0x1d8>
 8059296:	4b23      	ldr	r3, [pc, #140]	; (8059324 <_svfiprintf_r+0x1f4>)
 8059298:	bb1b      	cbnz	r3, 80592e2 <_svfiprintf_r+0x1b2>
 805929a:	9b03      	ldr	r3, [sp, #12]
 805929c:	3307      	adds	r3, #7
 805929e:	f023 0307 	bic.w	r3, r3, #7
 80592a2:	3308      	adds	r3, #8
 80592a4:	9303      	str	r3, [sp, #12]
 80592a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80592a8:	4433      	add	r3, r6
 80592aa:	9309      	str	r3, [sp, #36]	; 0x24
 80592ac:	e767      	b.n	805917e <_svfiprintf_r+0x4e>
 80592ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80592b2:	460c      	mov	r4, r1
 80592b4:	2001      	movs	r0, #1
 80592b6:	e7a5      	b.n	8059204 <_svfiprintf_r+0xd4>
 80592b8:	2300      	movs	r3, #0
 80592ba:	3401      	adds	r4, #1
 80592bc:	f04f 0c0a 	mov.w	ip, #10
 80592c0:	4619      	mov	r1, r3
 80592c2:	9305      	str	r3, [sp, #20]
 80592c4:	4620      	mov	r0, r4
 80592c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80592ca:	3a30      	subs	r2, #48	; 0x30
 80592cc:	2a09      	cmp	r2, #9
 80592ce:	d903      	bls.n	80592d8 <_svfiprintf_r+0x1a8>
 80592d0:	2b00      	cmp	r3, #0
 80592d2:	d0c5      	beq.n	8059260 <_svfiprintf_r+0x130>
 80592d4:	9105      	str	r1, [sp, #20]
 80592d6:	e7c3      	b.n	8059260 <_svfiprintf_r+0x130>
 80592d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80592dc:	4604      	mov	r4, r0
 80592de:	2301      	movs	r3, #1
 80592e0:	e7f0      	b.n	80592c4 <_svfiprintf_r+0x194>
 80592e2:	ab03      	add	r3, sp, #12
 80592e4:	462a      	mov	r2, r5
 80592e6:	a904      	add	r1, sp, #16
 80592e8:	4638      	mov	r0, r7
 80592ea:	9300      	str	r3, [sp, #0]
 80592ec:	4b0e      	ldr	r3, [pc, #56]	; (8059328 <_svfiprintf_r+0x1f8>)
 80592ee:	f7fb fefd 	bl	80550ec <_printf_float>
 80592f2:	1c42      	adds	r2, r0, #1
 80592f4:	4606      	mov	r6, r0
 80592f6:	d1d6      	bne.n	80592a6 <_svfiprintf_r+0x176>
 80592f8:	89ab      	ldrh	r3, [r5, #12]
 80592fa:	065b      	lsls	r3, r3, #25
 80592fc:	f53f af2c 	bmi.w	8059158 <_svfiprintf_r+0x28>
 8059300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8059302:	b01d      	add	sp, #116	; 0x74
 8059304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8059308:	ab03      	add	r3, sp, #12
 805930a:	462a      	mov	r2, r5
 805930c:	a904      	add	r1, sp, #16
 805930e:	4638      	mov	r0, r7
 8059310:	9300      	str	r3, [sp, #0]
 8059312:	4b05      	ldr	r3, [pc, #20]	; (8059328 <_svfiprintf_r+0x1f8>)
 8059314:	f7fc f990 	bl	8055638 <_printf_i>
 8059318:	e7eb      	b.n	80592f2 <_svfiprintf_r+0x1c2>
 805931a:	bf00      	nop
 805931c:	0805b01c 	.word	0x0805b01c
 8059320:	0805b026 	.word	0x0805b026
 8059324:	080550ed 	.word	0x080550ed
 8059328:	08059079 	.word	0x08059079
 805932c:	0805b022 	.word	0x0805b022

08059330 <__sfputc_r>:
 8059330:	6893      	ldr	r3, [r2, #8]
 8059332:	3b01      	subs	r3, #1
 8059334:	2b00      	cmp	r3, #0
 8059336:	6093      	str	r3, [r2, #8]
 8059338:	b410      	push	{r4}
 805933a:	da08      	bge.n	805934e <__sfputc_r+0x1e>
 805933c:	6994      	ldr	r4, [r2, #24]
 805933e:	42a3      	cmp	r3, r4
 8059340:	db01      	blt.n	8059346 <__sfputc_r+0x16>
 8059342:	290a      	cmp	r1, #10
 8059344:	d103      	bne.n	805934e <__sfputc_r+0x1e>
 8059346:	f85d 4b04 	ldr.w	r4, [sp], #4
 805934a:	f7fd bc29 	b.w	8056ba0 <__swbuf_r>
 805934e:	6813      	ldr	r3, [r2, #0]
 8059350:	1c58      	adds	r0, r3, #1
 8059352:	6010      	str	r0, [r2, #0]
 8059354:	4608      	mov	r0, r1
 8059356:	7019      	strb	r1, [r3, #0]
 8059358:	f85d 4b04 	ldr.w	r4, [sp], #4
 805935c:	4770      	bx	lr

0805935e <__sfputs_r>:
 805935e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8059360:	4606      	mov	r6, r0
 8059362:	460f      	mov	r7, r1
 8059364:	4614      	mov	r4, r2
 8059366:	18d5      	adds	r5, r2, r3
 8059368:	42ac      	cmp	r4, r5
 805936a:	d101      	bne.n	8059370 <__sfputs_r+0x12>
 805936c:	2000      	movs	r0, #0
 805936e:	e007      	b.n	8059380 <__sfputs_r+0x22>
 8059370:	463a      	mov	r2, r7
 8059372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8059376:	4630      	mov	r0, r6
 8059378:	f7ff ffda 	bl	8059330 <__sfputc_r>
 805937c:	1c43      	adds	r3, r0, #1
 805937e:	d1f3      	bne.n	8059368 <__sfputs_r+0xa>
 8059380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08059384 <_vfiprintf_r>:
 8059384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8059388:	460d      	mov	r5, r1
 805938a:	b09d      	sub	sp, #116	; 0x74
 805938c:	4614      	mov	r4, r2
 805938e:	4698      	mov	r8, r3
 8059390:	4606      	mov	r6, r0
 8059392:	b118      	cbz	r0, 805939c <_vfiprintf_r+0x18>
 8059394:	6983      	ldr	r3, [r0, #24]
 8059396:	b90b      	cbnz	r3, 805939c <_vfiprintf_r+0x18>
 8059398:	f7fe fc54 	bl	8057c44 <__sinit>
 805939c:	4b89      	ldr	r3, [pc, #548]	; (80595c4 <_vfiprintf_r+0x240>)
 805939e:	429d      	cmp	r5, r3
 80593a0:	d11b      	bne.n	80593da <_vfiprintf_r+0x56>
 80593a2:	6875      	ldr	r5, [r6, #4]
 80593a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80593a6:	07d9      	lsls	r1, r3, #31
 80593a8:	d405      	bmi.n	80593b6 <_vfiprintf_r+0x32>
 80593aa:	89ab      	ldrh	r3, [r5, #12]
 80593ac:	059a      	lsls	r2, r3, #22
 80593ae:	d402      	bmi.n	80593b6 <_vfiprintf_r+0x32>
 80593b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80593b2:	f7ff f858 	bl	8058466 <__retarget_lock_acquire_recursive>
 80593b6:	89ab      	ldrh	r3, [r5, #12]
 80593b8:	071b      	lsls	r3, r3, #28
 80593ba:	d501      	bpl.n	80593c0 <_vfiprintf_r+0x3c>
 80593bc:	692b      	ldr	r3, [r5, #16]
 80593be:	b9eb      	cbnz	r3, 80593fc <_vfiprintf_r+0x78>
 80593c0:	4629      	mov	r1, r5
 80593c2:	4630      	mov	r0, r6
 80593c4:	f7fd fc3e 	bl	8056c44 <__swsetup_r>
 80593c8:	b1c0      	cbz	r0, 80593fc <_vfiprintf_r+0x78>
 80593ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80593cc:	07dc      	lsls	r4, r3, #31
 80593ce:	d50e      	bpl.n	80593ee <_vfiprintf_r+0x6a>
 80593d0:	f04f 30ff 	mov.w	r0, #4294967295
 80593d4:	b01d      	add	sp, #116	; 0x74
 80593d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80593da:	4b7b      	ldr	r3, [pc, #492]	; (80595c8 <_vfiprintf_r+0x244>)
 80593dc:	429d      	cmp	r5, r3
 80593de:	d101      	bne.n	80593e4 <_vfiprintf_r+0x60>
 80593e0:	68b5      	ldr	r5, [r6, #8]
 80593e2:	e7df      	b.n	80593a4 <_vfiprintf_r+0x20>
 80593e4:	4b79      	ldr	r3, [pc, #484]	; (80595cc <_vfiprintf_r+0x248>)
 80593e6:	429d      	cmp	r5, r3
 80593e8:	bf08      	it	eq
 80593ea:	68f5      	ldreq	r5, [r6, #12]
 80593ec:	e7da      	b.n	80593a4 <_vfiprintf_r+0x20>
 80593ee:	89ab      	ldrh	r3, [r5, #12]
 80593f0:	0598      	lsls	r0, r3, #22
 80593f2:	d4ed      	bmi.n	80593d0 <_vfiprintf_r+0x4c>
 80593f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80593f6:	f7ff f837 	bl	8058468 <__retarget_lock_release_recursive>
 80593fa:	e7e9      	b.n	80593d0 <_vfiprintf_r+0x4c>
 80593fc:	2300      	movs	r3, #0
 80593fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8059402:	f04f 0901 	mov.w	r9, #1
 8059406:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80595d0 <_vfiprintf_r+0x24c>
 805940a:	9309      	str	r3, [sp, #36]	; 0x24
 805940c:	2320      	movs	r3, #32
 805940e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8059412:	2330      	movs	r3, #48	; 0x30
 8059414:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8059418:	4623      	mov	r3, r4
 805941a:	469a      	mov	sl, r3
 805941c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8059420:	b10a      	cbz	r2, 8059426 <_vfiprintf_r+0xa2>
 8059422:	2a25      	cmp	r2, #37	; 0x25
 8059424:	d1f9      	bne.n	805941a <_vfiprintf_r+0x96>
 8059426:	ebba 0b04 	subs.w	fp, sl, r4
 805942a:	d00b      	beq.n	8059444 <_vfiprintf_r+0xc0>
 805942c:	465b      	mov	r3, fp
 805942e:	4622      	mov	r2, r4
 8059430:	4629      	mov	r1, r5
 8059432:	4630      	mov	r0, r6
 8059434:	f7ff ff93 	bl	805935e <__sfputs_r>
 8059438:	3001      	adds	r0, #1
 805943a:	f000 80aa 	beq.w	8059592 <_vfiprintf_r+0x20e>
 805943e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8059440:	445a      	add	r2, fp
 8059442:	9209      	str	r2, [sp, #36]	; 0x24
 8059444:	f89a 3000 	ldrb.w	r3, [sl]
 8059448:	2b00      	cmp	r3, #0
 805944a:	f000 80a2 	beq.w	8059592 <_vfiprintf_r+0x20e>
 805944e:	2300      	movs	r3, #0
 8059450:	f04f 32ff 	mov.w	r2, #4294967295
 8059454:	f10a 0a01 	add.w	sl, sl, #1
 8059458:	9304      	str	r3, [sp, #16]
 805945a:	9307      	str	r3, [sp, #28]
 805945c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8059460:	931a      	str	r3, [sp, #104]	; 0x68
 8059462:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8059466:	4654      	mov	r4, sl
 8059468:	2205      	movs	r2, #5
 805946a:	4859      	ldr	r0, [pc, #356]	; (80595d0 <_vfiprintf_r+0x24c>)
 805946c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8059470:	f7ff f87a 	bl	8058568 <memchr>
 8059474:	9a04      	ldr	r2, [sp, #16]
 8059476:	b9d8      	cbnz	r0, 80594b0 <_vfiprintf_r+0x12c>
 8059478:	06d1      	lsls	r1, r2, #27
 805947a:	bf44      	itt	mi
 805947c:	2320      	movmi	r3, #32
 805947e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8059482:	0713      	lsls	r3, r2, #28
 8059484:	bf44      	itt	mi
 8059486:	232b      	movmi	r3, #43	; 0x2b
 8059488:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 805948c:	f89a 3000 	ldrb.w	r3, [sl]
 8059490:	2b2a      	cmp	r3, #42	; 0x2a
 8059492:	d015      	beq.n	80594c0 <_vfiprintf_r+0x13c>
 8059494:	9a07      	ldr	r2, [sp, #28]
 8059496:	4654      	mov	r4, sl
 8059498:	2000      	movs	r0, #0
 805949a:	f04f 0c0a 	mov.w	ip, #10
 805949e:	4621      	mov	r1, r4
 80594a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80594a4:	3b30      	subs	r3, #48	; 0x30
 80594a6:	2b09      	cmp	r3, #9
 80594a8:	d94e      	bls.n	8059548 <_vfiprintf_r+0x1c4>
 80594aa:	b1b0      	cbz	r0, 80594da <_vfiprintf_r+0x156>
 80594ac:	9207      	str	r2, [sp, #28]
 80594ae:	e014      	b.n	80594da <_vfiprintf_r+0x156>
 80594b0:	eba0 0308 	sub.w	r3, r0, r8
 80594b4:	46a2      	mov	sl, r4
 80594b6:	fa09 f303 	lsl.w	r3, r9, r3
 80594ba:	4313      	orrs	r3, r2
 80594bc:	9304      	str	r3, [sp, #16]
 80594be:	e7d2      	b.n	8059466 <_vfiprintf_r+0xe2>
 80594c0:	9b03      	ldr	r3, [sp, #12]
 80594c2:	1d19      	adds	r1, r3, #4
 80594c4:	681b      	ldr	r3, [r3, #0]
 80594c6:	2b00      	cmp	r3, #0
 80594c8:	9103      	str	r1, [sp, #12]
 80594ca:	bfbb      	ittet	lt
 80594cc:	425b      	neglt	r3, r3
 80594ce:	f042 0202 	orrlt.w	r2, r2, #2
 80594d2:	9307      	strge	r3, [sp, #28]
 80594d4:	9307      	strlt	r3, [sp, #28]
 80594d6:	bfb8      	it	lt
 80594d8:	9204      	strlt	r2, [sp, #16]
 80594da:	7823      	ldrb	r3, [r4, #0]
 80594dc:	2b2e      	cmp	r3, #46	; 0x2e
 80594de:	d10c      	bne.n	80594fa <_vfiprintf_r+0x176>
 80594e0:	7863      	ldrb	r3, [r4, #1]
 80594e2:	2b2a      	cmp	r3, #42	; 0x2a
 80594e4:	d135      	bne.n	8059552 <_vfiprintf_r+0x1ce>
 80594e6:	9b03      	ldr	r3, [sp, #12]
 80594e8:	3402      	adds	r4, #2
 80594ea:	1d1a      	adds	r2, r3, #4
 80594ec:	681b      	ldr	r3, [r3, #0]
 80594ee:	2b00      	cmp	r3, #0
 80594f0:	9203      	str	r2, [sp, #12]
 80594f2:	bfb8      	it	lt
 80594f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80594f8:	9305      	str	r3, [sp, #20]
 80594fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80595e0 <_vfiprintf_r+0x25c>
 80594fe:	2203      	movs	r2, #3
 8059500:	7821      	ldrb	r1, [r4, #0]
 8059502:	4650      	mov	r0, sl
 8059504:	f7ff f830 	bl	8058568 <memchr>
 8059508:	b140      	cbz	r0, 805951c <_vfiprintf_r+0x198>
 805950a:	2340      	movs	r3, #64	; 0x40
 805950c:	eba0 000a 	sub.w	r0, r0, sl
 8059510:	3401      	adds	r4, #1
 8059512:	fa03 f000 	lsl.w	r0, r3, r0
 8059516:	9b04      	ldr	r3, [sp, #16]
 8059518:	4303      	orrs	r3, r0
 805951a:	9304      	str	r3, [sp, #16]
 805951c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8059520:	2206      	movs	r2, #6
 8059522:	482c      	ldr	r0, [pc, #176]	; (80595d4 <_vfiprintf_r+0x250>)
 8059524:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8059528:	f7ff f81e 	bl	8058568 <memchr>
 805952c:	2800      	cmp	r0, #0
 805952e:	d03f      	beq.n	80595b0 <_vfiprintf_r+0x22c>
 8059530:	4b29      	ldr	r3, [pc, #164]	; (80595d8 <_vfiprintf_r+0x254>)
 8059532:	bb1b      	cbnz	r3, 805957c <_vfiprintf_r+0x1f8>
 8059534:	9b03      	ldr	r3, [sp, #12]
 8059536:	3307      	adds	r3, #7
 8059538:	f023 0307 	bic.w	r3, r3, #7
 805953c:	3308      	adds	r3, #8
 805953e:	9303      	str	r3, [sp, #12]
 8059540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8059542:	443b      	add	r3, r7
 8059544:	9309      	str	r3, [sp, #36]	; 0x24
 8059546:	e767      	b.n	8059418 <_vfiprintf_r+0x94>
 8059548:	fb0c 3202 	mla	r2, ip, r2, r3
 805954c:	460c      	mov	r4, r1
 805954e:	2001      	movs	r0, #1
 8059550:	e7a5      	b.n	805949e <_vfiprintf_r+0x11a>
 8059552:	2300      	movs	r3, #0
 8059554:	3401      	adds	r4, #1
 8059556:	f04f 0c0a 	mov.w	ip, #10
 805955a:	4619      	mov	r1, r3
 805955c:	9305      	str	r3, [sp, #20]
 805955e:	4620      	mov	r0, r4
 8059560:	f810 2b01 	ldrb.w	r2, [r0], #1
 8059564:	3a30      	subs	r2, #48	; 0x30
 8059566:	2a09      	cmp	r2, #9
 8059568:	d903      	bls.n	8059572 <_vfiprintf_r+0x1ee>
 805956a:	2b00      	cmp	r3, #0
 805956c:	d0c5      	beq.n	80594fa <_vfiprintf_r+0x176>
 805956e:	9105      	str	r1, [sp, #20]
 8059570:	e7c3      	b.n	80594fa <_vfiprintf_r+0x176>
 8059572:	fb0c 2101 	mla	r1, ip, r1, r2
 8059576:	4604      	mov	r4, r0
 8059578:	2301      	movs	r3, #1
 805957a:	e7f0      	b.n	805955e <_vfiprintf_r+0x1da>
 805957c:	ab03      	add	r3, sp, #12
 805957e:	462a      	mov	r2, r5
 8059580:	a904      	add	r1, sp, #16
 8059582:	4630      	mov	r0, r6
 8059584:	9300      	str	r3, [sp, #0]
 8059586:	4b15      	ldr	r3, [pc, #84]	; (80595dc <_vfiprintf_r+0x258>)
 8059588:	f7fb fdb0 	bl	80550ec <_printf_float>
 805958c:	4607      	mov	r7, r0
 805958e:	1c78      	adds	r0, r7, #1
 8059590:	d1d6      	bne.n	8059540 <_vfiprintf_r+0x1bc>
 8059592:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8059594:	07d9      	lsls	r1, r3, #31
 8059596:	d405      	bmi.n	80595a4 <_vfiprintf_r+0x220>
 8059598:	89ab      	ldrh	r3, [r5, #12]
 805959a:	059a      	lsls	r2, r3, #22
 805959c:	d402      	bmi.n	80595a4 <_vfiprintf_r+0x220>
 805959e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80595a0:	f7fe ff62 	bl	8058468 <__retarget_lock_release_recursive>
 80595a4:	89ab      	ldrh	r3, [r5, #12]
 80595a6:	065b      	lsls	r3, r3, #25
 80595a8:	f53f af12 	bmi.w	80593d0 <_vfiprintf_r+0x4c>
 80595ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80595ae:	e711      	b.n	80593d4 <_vfiprintf_r+0x50>
 80595b0:	ab03      	add	r3, sp, #12
 80595b2:	462a      	mov	r2, r5
 80595b4:	a904      	add	r1, sp, #16
 80595b6:	4630      	mov	r0, r6
 80595b8:	9300      	str	r3, [sp, #0]
 80595ba:	4b08      	ldr	r3, [pc, #32]	; (80595dc <_vfiprintf_r+0x258>)
 80595bc:	f7fc f83c 	bl	8055638 <_printf_i>
 80595c0:	e7e4      	b.n	805958c <_vfiprintf_r+0x208>
 80595c2:	bf00      	nop
 80595c4:	0805ae00 	.word	0x0805ae00
 80595c8:	0805ae20 	.word	0x0805ae20
 80595cc:	0805ade0 	.word	0x0805ade0
 80595d0:	0805b01c 	.word	0x0805b01c
 80595d4:	0805b026 	.word	0x0805b026
 80595d8:	080550ed 	.word	0x080550ed
 80595dc:	0805935f 	.word	0x0805935f
 80595e0:	0805b022 	.word	0x0805b022

080595e4 <_putc_r>:
 80595e4:	b570      	push	{r4, r5, r6, lr}
 80595e6:	460d      	mov	r5, r1
 80595e8:	4614      	mov	r4, r2
 80595ea:	4606      	mov	r6, r0
 80595ec:	b118      	cbz	r0, 80595f6 <_putc_r+0x12>
 80595ee:	6983      	ldr	r3, [r0, #24]
 80595f0:	b90b      	cbnz	r3, 80595f6 <_putc_r+0x12>
 80595f2:	f7fe fb27 	bl	8057c44 <__sinit>
 80595f6:	4b1c      	ldr	r3, [pc, #112]	; (8059668 <_putc_r+0x84>)
 80595f8:	429c      	cmp	r4, r3
 80595fa:	d124      	bne.n	8059646 <_putc_r+0x62>
 80595fc:	6874      	ldr	r4, [r6, #4]
 80595fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8059600:	07d8      	lsls	r0, r3, #31
 8059602:	d405      	bmi.n	8059610 <_putc_r+0x2c>
 8059604:	89a3      	ldrh	r3, [r4, #12]
 8059606:	0599      	lsls	r1, r3, #22
 8059608:	d402      	bmi.n	8059610 <_putc_r+0x2c>
 805960a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 805960c:	f7fe ff2b 	bl	8058466 <__retarget_lock_acquire_recursive>
 8059610:	68a3      	ldr	r3, [r4, #8]
 8059612:	3b01      	subs	r3, #1
 8059614:	2b00      	cmp	r3, #0
 8059616:	60a3      	str	r3, [r4, #8]
 8059618:	da05      	bge.n	8059626 <_putc_r+0x42>
 805961a:	69a2      	ldr	r2, [r4, #24]
 805961c:	4293      	cmp	r3, r2
 805961e:	db1c      	blt.n	805965a <_putc_r+0x76>
 8059620:	b2eb      	uxtb	r3, r5
 8059622:	2b0a      	cmp	r3, #10
 8059624:	d019      	beq.n	805965a <_putc_r+0x76>
 8059626:	6823      	ldr	r3, [r4, #0]
 8059628:	1c5a      	adds	r2, r3, #1
 805962a:	6022      	str	r2, [r4, #0]
 805962c:	701d      	strb	r5, [r3, #0]
 805962e:	b2ed      	uxtb	r5, r5
 8059630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8059632:	07da      	lsls	r2, r3, #31
 8059634:	d405      	bmi.n	8059642 <_putc_r+0x5e>
 8059636:	89a3      	ldrh	r3, [r4, #12]
 8059638:	059b      	lsls	r3, r3, #22
 805963a:	d402      	bmi.n	8059642 <_putc_r+0x5e>
 805963c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 805963e:	f7fe ff13 	bl	8058468 <__retarget_lock_release_recursive>
 8059642:	4628      	mov	r0, r5
 8059644:	bd70      	pop	{r4, r5, r6, pc}
 8059646:	4b09      	ldr	r3, [pc, #36]	; (805966c <_putc_r+0x88>)
 8059648:	429c      	cmp	r4, r3
 805964a:	d101      	bne.n	8059650 <_putc_r+0x6c>
 805964c:	68b4      	ldr	r4, [r6, #8]
 805964e:	e7d6      	b.n	80595fe <_putc_r+0x1a>
 8059650:	4b07      	ldr	r3, [pc, #28]	; (8059670 <_putc_r+0x8c>)
 8059652:	429c      	cmp	r4, r3
 8059654:	bf08      	it	eq
 8059656:	68f4      	ldreq	r4, [r6, #12]
 8059658:	e7d1      	b.n	80595fe <_putc_r+0x1a>
 805965a:	4629      	mov	r1, r5
 805965c:	4622      	mov	r2, r4
 805965e:	4630      	mov	r0, r6
 8059660:	f7fd fa9e 	bl	8056ba0 <__swbuf_r>
 8059664:	4605      	mov	r5, r0
 8059666:	e7e3      	b.n	8059630 <_putc_r+0x4c>
 8059668:	0805ae00 	.word	0x0805ae00
 805966c:	0805ae20 	.word	0x0805ae20
 8059670:	0805ade0 	.word	0x0805ade0
 8059674:	00000000 	.word	0x00000000

08059678 <nan>:
 8059678:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8059680 <nan+0x8>
 805967c:	4770      	bx	lr
 805967e:	bf00      	nop
 8059680:	00000000 	.word	0x00000000
 8059684:	7ff80000 	.word	0x7ff80000

08059688 <_sbrk_r>:
 8059688:	b538      	push	{r3, r4, r5, lr}
 805968a:	2300      	movs	r3, #0
 805968c:	4d05      	ldr	r5, [pc, #20]	; (80596a4 <_sbrk_r+0x1c>)
 805968e:	4604      	mov	r4, r0
 8059690:	4608      	mov	r0, r1
 8059692:	602b      	str	r3, [r5, #0]
 8059694:	f7e9 fb0e 	bl	8042cb4 <_sbrk>
 8059698:	1c43      	adds	r3, r0, #1
 805969a:	d102      	bne.n	80596a2 <_sbrk_r+0x1a>
 805969c:	682b      	ldr	r3, [r5, #0]
 805969e:	b103      	cbz	r3, 80596a2 <_sbrk_r+0x1a>
 80596a0:	6023      	str	r3, [r4, #0]
 80596a2:	bd38      	pop	{r3, r4, r5, pc}
 80596a4:	2001b52c 	.word	0x2001b52c

080596a8 <__sread>:
 80596a8:	b510      	push	{r4, lr}
 80596aa:	460c      	mov	r4, r1
 80596ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80596b0:	f000 f92e 	bl	8059910 <_read_r>
 80596b4:	2800      	cmp	r0, #0
 80596b6:	bfab      	itete	ge
 80596b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80596ba:	89a3      	ldrhlt	r3, [r4, #12]
 80596bc:	181b      	addge	r3, r3, r0
 80596be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80596c2:	bfac      	ite	ge
 80596c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80596c6:	81a3      	strhlt	r3, [r4, #12]
 80596c8:	bd10      	pop	{r4, pc}

080596ca <__swrite>:
 80596ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80596ce:	461f      	mov	r7, r3
 80596d0:	898b      	ldrh	r3, [r1, #12]
 80596d2:	4605      	mov	r5, r0
 80596d4:	460c      	mov	r4, r1
 80596d6:	05db      	lsls	r3, r3, #23
 80596d8:	4616      	mov	r6, r2
 80596da:	d505      	bpl.n	80596e8 <__swrite+0x1e>
 80596dc:	2302      	movs	r3, #2
 80596de:	2200      	movs	r2, #0
 80596e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80596e4:	f000 f8b6 	bl	8059854 <_lseek_r>
 80596e8:	89a3      	ldrh	r3, [r4, #12]
 80596ea:	4632      	mov	r2, r6
 80596ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80596f0:	4628      	mov	r0, r5
 80596f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80596f6:	81a3      	strh	r3, [r4, #12]
 80596f8:	463b      	mov	r3, r7
 80596fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80596fe:	f000 b835 	b.w	805976c <_write_r>

08059702 <__sseek>:
 8059702:	b510      	push	{r4, lr}
 8059704:	460c      	mov	r4, r1
 8059706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805970a:	f000 f8a3 	bl	8059854 <_lseek_r>
 805970e:	1c43      	adds	r3, r0, #1
 8059710:	89a3      	ldrh	r3, [r4, #12]
 8059712:	bf15      	itete	ne
 8059714:	6560      	strne	r0, [r4, #84]	; 0x54
 8059716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 805971a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 805971e:	81a3      	strheq	r3, [r4, #12]
 8059720:	bf18      	it	ne
 8059722:	81a3      	strhne	r3, [r4, #12]
 8059724:	bd10      	pop	{r4, pc}

08059726 <__sclose>:
 8059726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 805972a:	f000 b84f 	b.w	80597cc <_close_r>

0805972e <strncmp>:
 805972e:	b510      	push	{r4, lr}
 8059730:	b16a      	cbz	r2, 805974e <strncmp+0x20>
 8059732:	3901      	subs	r1, #1
 8059734:	1884      	adds	r4, r0, r2
 8059736:	f810 3b01 	ldrb.w	r3, [r0], #1
 805973a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 805973e:	4293      	cmp	r3, r2
 8059740:	d103      	bne.n	805974a <strncmp+0x1c>
 8059742:	42a0      	cmp	r0, r4
 8059744:	d001      	beq.n	805974a <strncmp+0x1c>
 8059746:	2b00      	cmp	r3, #0
 8059748:	d1f5      	bne.n	8059736 <strncmp+0x8>
 805974a:	1a98      	subs	r0, r3, r2
 805974c:	bd10      	pop	{r4, pc}
 805974e:	4610      	mov	r0, r2
 8059750:	e7fc      	b.n	805974c <strncmp+0x1e>

08059752 <__ascii_wctomb>:
 8059752:	b149      	cbz	r1, 8059768 <__ascii_wctomb+0x16>
 8059754:	2aff      	cmp	r2, #255	; 0xff
 8059756:	bf8d      	iteet	hi
 8059758:	238a      	movhi	r3, #138	; 0x8a
 805975a:	2001      	movls	r0, #1
 805975c:	700a      	strbls	r2, [r1, #0]
 805975e:	6003      	strhi	r3, [r0, #0]
 8059760:	bf88      	it	hi
 8059762:	f04f 30ff 	movhi.w	r0, #4294967295
 8059766:	4770      	bx	lr
 8059768:	4608      	mov	r0, r1
 805976a:	4770      	bx	lr

0805976c <_write_r>:
 805976c:	b538      	push	{r3, r4, r5, lr}
 805976e:	4604      	mov	r4, r0
 8059770:	4d06      	ldr	r5, [pc, #24]	; (805978c <_write_r+0x20>)
 8059772:	4608      	mov	r0, r1
 8059774:	4611      	mov	r1, r2
 8059776:	2200      	movs	r2, #0
 8059778:	602a      	str	r2, [r5, #0]
 805977a:	461a      	mov	r2, r3
 805977c:	f7e9 fa80 	bl	8042c80 <_write>
 8059780:	1c43      	adds	r3, r0, #1
 8059782:	d102      	bne.n	805978a <_write_r+0x1e>
 8059784:	682b      	ldr	r3, [r5, #0]
 8059786:	b103      	cbz	r3, 805978a <_write_r+0x1e>
 8059788:	6023      	str	r3, [r4, #0]
 805978a:	bd38      	pop	{r3, r4, r5, pc}
 805978c:	2001b52c 	.word	0x2001b52c

08059790 <__assert_func>:
 8059790:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8059792:	4614      	mov	r4, r2
 8059794:	461a      	mov	r2, r3
 8059796:	4b09      	ldr	r3, [pc, #36]	; (80597bc <__assert_func+0x2c>)
 8059798:	4605      	mov	r5, r0
 805979a:	681b      	ldr	r3, [r3, #0]
 805979c:	68d8      	ldr	r0, [r3, #12]
 805979e:	b14c      	cbz	r4, 80597b4 <__assert_func+0x24>
 80597a0:	4b07      	ldr	r3, [pc, #28]	; (80597c0 <__assert_func+0x30>)
 80597a2:	9100      	str	r1, [sp, #0]
 80597a4:	4907      	ldr	r1, [pc, #28]	; (80597c4 <__assert_func+0x34>)
 80597a6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80597aa:	462b      	mov	r3, r5
 80597ac:	f000 f81e 	bl	80597ec <fiprintf>
 80597b0:	f000 f8c0 	bl	8059934 <abort>
 80597b4:	4b04      	ldr	r3, [pc, #16]	; (80597c8 <__assert_func+0x38>)
 80597b6:	461c      	mov	r4, r3
 80597b8:	e7f3      	b.n	80597a2 <__assert_func+0x12>
 80597ba:	bf00      	nop
 80597bc:	200182b0 	.word	0x200182b0
 80597c0:	0805b02d 	.word	0x0805b02d
 80597c4:	0805b03a 	.word	0x0805b03a
 80597c8:	0805b068 	.word	0x0805b068

080597cc <_close_r>:
 80597cc:	b538      	push	{r3, r4, r5, lr}
 80597ce:	2300      	movs	r3, #0
 80597d0:	4d05      	ldr	r5, [pc, #20]	; (80597e8 <_close_r+0x1c>)
 80597d2:	4604      	mov	r4, r0
 80597d4:	4608      	mov	r0, r1
 80597d6:	602b      	str	r3, [r5, #0]
 80597d8:	f7e9 fa60 	bl	8042c9c <_close>
 80597dc:	1c43      	adds	r3, r0, #1
 80597de:	d102      	bne.n	80597e6 <_close_r+0x1a>
 80597e0:	682b      	ldr	r3, [r5, #0]
 80597e2:	b103      	cbz	r3, 80597e6 <_close_r+0x1a>
 80597e4:	6023      	str	r3, [r4, #0]
 80597e6:	bd38      	pop	{r3, r4, r5, pc}
 80597e8:	2001b52c 	.word	0x2001b52c

080597ec <fiprintf>:
 80597ec:	b40e      	push	{r1, r2, r3}
 80597ee:	b503      	push	{r0, r1, lr}
 80597f0:	ab03      	add	r3, sp, #12
 80597f2:	4601      	mov	r1, r0
 80597f4:	4805      	ldr	r0, [pc, #20]	; (805980c <fiprintf+0x20>)
 80597f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80597fa:	6800      	ldr	r0, [r0, #0]
 80597fc:	9301      	str	r3, [sp, #4]
 80597fe:	f7ff fdc1 	bl	8059384 <_vfiprintf_r>
 8059802:	b002      	add	sp, #8
 8059804:	f85d eb04 	ldr.w	lr, [sp], #4
 8059808:	b003      	add	sp, #12
 805980a:	4770      	bx	lr
 805980c:	200182b0 	.word	0x200182b0

08059810 <_fstat_r>:
 8059810:	b538      	push	{r3, r4, r5, lr}
 8059812:	2300      	movs	r3, #0
 8059814:	4d06      	ldr	r5, [pc, #24]	; (8059830 <_fstat_r+0x20>)
 8059816:	4604      	mov	r4, r0
 8059818:	4608      	mov	r0, r1
 805981a:	4611      	mov	r1, r2
 805981c:	602b      	str	r3, [r5, #0]
 805981e:	f7e9 fa40 	bl	8042ca2 <_fstat>
 8059822:	1c43      	adds	r3, r0, #1
 8059824:	d102      	bne.n	805982c <_fstat_r+0x1c>
 8059826:	682b      	ldr	r3, [r5, #0]
 8059828:	b103      	cbz	r3, 805982c <_fstat_r+0x1c>
 805982a:	6023      	str	r3, [r4, #0]
 805982c:	bd38      	pop	{r3, r4, r5, pc}
 805982e:	bf00      	nop
 8059830:	2001b52c 	.word	0x2001b52c

08059834 <_isatty_r>:
 8059834:	b538      	push	{r3, r4, r5, lr}
 8059836:	2300      	movs	r3, #0
 8059838:	4d05      	ldr	r5, [pc, #20]	; (8059850 <_isatty_r+0x1c>)
 805983a:	4604      	mov	r4, r0
 805983c:	4608      	mov	r0, r1
 805983e:	602b      	str	r3, [r5, #0]
 8059840:	f7e9 fa34 	bl	8042cac <_isatty>
 8059844:	1c43      	adds	r3, r0, #1
 8059846:	d102      	bne.n	805984e <_isatty_r+0x1a>
 8059848:	682b      	ldr	r3, [r5, #0]
 805984a:	b103      	cbz	r3, 805984e <_isatty_r+0x1a>
 805984c:	6023      	str	r3, [r4, #0]
 805984e:	bd38      	pop	{r3, r4, r5, pc}
 8059850:	2001b52c 	.word	0x2001b52c

08059854 <_lseek_r>:
 8059854:	b538      	push	{r3, r4, r5, lr}
 8059856:	4604      	mov	r4, r0
 8059858:	4d06      	ldr	r5, [pc, #24]	; (8059874 <_lseek_r+0x20>)
 805985a:	4608      	mov	r0, r1
 805985c:	4611      	mov	r1, r2
 805985e:	2200      	movs	r2, #0
 8059860:	602a      	str	r2, [r5, #0]
 8059862:	461a      	mov	r2, r3
 8059864:	f7e9 fa24 	bl	8042cb0 <_lseek>
 8059868:	1c43      	adds	r3, r0, #1
 805986a:	d102      	bne.n	8059872 <_lseek_r+0x1e>
 805986c:	682b      	ldr	r3, [r5, #0]
 805986e:	b103      	cbz	r3, 8059872 <_lseek_r+0x1e>
 8059870:	6023      	str	r3, [r4, #0]
 8059872:	bd38      	pop	{r3, r4, r5, pc}
 8059874:	2001b52c 	.word	0x2001b52c

08059878 <memmove>:
 8059878:	4288      	cmp	r0, r1
 805987a:	b510      	push	{r4, lr}
 805987c:	eb01 0402 	add.w	r4, r1, r2
 8059880:	d902      	bls.n	8059888 <memmove+0x10>
 8059882:	4284      	cmp	r4, r0
 8059884:	4623      	mov	r3, r4
 8059886:	d807      	bhi.n	8059898 <memmove+0x20>
 8059888:	1e43      	subs	r3, r0, #1
 805988a:	42a1      	cmp	r1, r4
 805988c:	d008      	beq.n	80598a0 <memmove+0x28>
 805988e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8059892:	f803 2f01 	strb.w	r2, [r3, #1]!
 8059896:	e7f8      	b.n	805988a <memmove+0x12>
 8059898:	4402      	add	r2, r0
 805989a:	4601      	mov	r1, r0
 805989c:	428a      	cmp	r2, r1
 805989e:	d100      	bne.n	80598a2 <memmove+0x2a>
 80598a0:	bd10      	pop	{r4, pc}
 80598a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80598a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80598aa:	e7f7      	b.n	805989c <memmove+0x24>

080598ac <__malloc_lock>:
 80598ac:	4801      	ldr	r0, [pc, #4]	; (80598b4 <__malloc_lock+0x8>)
 80598ae:	f7fe bdda 	b.w	8058466 <__retarget_lock_acquire_recursive>
 80598b2:	bf00      	nop
 80598b4:	2001b524 	.word	0x2001b524

080598b8 <__malloc_unlock>:
 80598b8:	4801      	ldr	r0, [pc, #4]	; (80598c0 <__malloc_unlock+0x8>)
 80598ba:	f7fe bdd5 	b.w	8058468 <__retarget_lock_release_recursive>
 80598be:	bf00      	nop
 80598c0:	2001b524 	.word	0x2001b524

080598c4 <_realloc_r>:
 80598c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80598c6:	4607      	mov	r7, r0
 80598c8:	4614      	mov	r4, r2
 80598ca:	460e      	mov	r6, r1
 80598cc:	b921      	cbnz	r1, 80598d8 <_realloc_r+0x14>
 80598ce:	4611      	mov	r1, r2
 80598d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80598d4:	f7ff bb76 	b.w	8058fc4 <_malloc_r>
 80598d8:	b922      	cbnz	r2, 80598e4 <_realloc_r+0x20>
 80598da:	4625      	mov	r5, r4
 80598dc:	f7ff fb22 	bl	8058f24 <_free_r>
 80598e0:	4628      	mov	r0, r5
 80598e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80598e4:	f000 f82d 	bl	8059942 <_malloc_usable_size_r>
 80598e8:	42a0      	cmp	r0, r4
 80598ea:	d20f      	bcs.n	805990c <_realloc_r+0x48>
 80598ec:	4621      	mov	r1, r4
 80598ee:	4638      	mov	r0, r7
 80598f0:	f7ff fb68 	bl	8058fc4 <_malloc_r>
 80598f4:	4605      	mov	r5, r0
 80598f6:	2800      	cmp	r0, #0
 80598f8:	d0f2      	beq.n	80598e0 <_realloc_r+0x1c>
 80598fa:	4631      	mov	r1, r6
 80598fc:	4622      	mov	r2, r4
 80598fe:	f7fb fb3f 	bl	8054f80 <memcpy>
 8059902:	4631      	mov	r1, r6
 8059904:	4638      	mov	r0, r7
 8059906:	f7ff fb0d 	bl	8058f24 <_free_r>
 805990a:	e7e9      	b.n	80598e0 <_realloc_r+0x1c>
 805990c:	4635      	mov	r5, r6
 805990e:	e7e7      	b.n	80598e0 <_realloc_r+0x1c>

08059910 <_read_r>:
 8059910:	b538      	push	{r3, r4, r5, lr}
 8059912:	4604      	mov	r4, r0
 8059914:	4d06      	ldr	r5, [pc, #24]	; (8059930 <_read_r+0x20>)
 8059916:	4608      	mov	r0, r1
 8059918:	4611      	mov	r1, r2
 805991a:	2200      	movs	r2, #0
 805991c:	602a      	str	r2, [r5, #0]
 805991e:	461a      	mov	r2, r3
 8059920:	f7e9 f99e 	bl	8042c60 <_read>
 8059924:	1c43      	adds	r3, r0, #1
 8059926:	d102      	bne.n	805992e <_read_r+0x1e>
 8059928:	682b      	ldr	r3, [r5, #0]
 805992a:	b103      	cbz	r3, 805992e <_read_r+0x1e>
 805992c:	6023      	str	r3, [r4, #0]
 805992e:	bd38      	pop	{r3, r4, r5, pc}
 8059930:	2001b52c 	.word	0x2001b52c

08059934 <abort>:
 8059934:	2006      	movs	r0, #6
 8059936:	b508      	push	{r3, lr}
 8059938:	f000 f834 	bl	80599a4 <raise>
 805993c:	2001      	movs	r0, #1
 805993e:	f7e9 f989 	bl	8042c54 <_exit>

08059942 <_malloc_usable_size_r>:
 8059942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8059946:	1f18      	subs	r0, r3, #4
 8059948:	2b00      	cmp	r3, #0
 805994a:	bfbc      	itt	lt
 805994c:	580b      	ldrlt	r3, [r1, r0]
 805994e:	18c0      	addlt	r0, r0, r3
 8059950:	4770      	bx	lr

08059952 <_raise_r>:
 8059952:	291f      	cmp	r1, #31
 8059954:	b538      	push	{r3, r4, r5, lr}
 8059956:	4604      	mov	r4, r0
 8059958:	460d      	mov	r5, r1
 805995a:	d904      	bls.n	8059966 <_raise_r+0x14>
 805995c:	2316      	movs	r3, #22
 805995e:	6003      	str	r3, [r0, #0]
 8059960:	f04f 30ff 	mov.w	r0, #4294967295
 8059964:	bd38      	pop	{r3, r4, r5, pc}
 8059966:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8059968:	b112      	cbz	r2, 8059970 <_raise_r+0x1e>
 805996a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 805996e:	b94b      	cbnz	r3, 8059984 <_raise_r+0x32>
 8059970:	4620      	mov	r0, r4
 8059972:	f000 f831 	bl	80599d8 <_getpid_r>
 8059976:	462a      	mov	r2, r5
 8059978:	4601      	mov	r1, r0
 805997a:	4620      	mov	r0, r4
 805997c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8059980:	f000 b818 	b.w	80599b4 <_kill_r>
 8059984:	2b01      	cmp	r3, #1
 8059986:	d00a      	beq.n	805999e <_raise_r+0x4c>
 8059988:	1c59      	adds	r1, r3, #1
 805998a:	d103      	bne.n	8059994 <_raise_r+0x42>
 805998c:	2316      	movs	r3, #22
 805998e:	6003      	str	r3, [r0, #0]
 8059990:	2001      	movs	r0, #1
 8059992:	e7e7      	b.n	8059964 <_raise_r+0x12>
 8059994:	2400      	movs	r4, #0
 8059996:	4628      	mov	r0, r5
 8059998:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 805999c:	4798      	blx	r3
 805999e:	2000      	movs	r0, #0
 80599a0:	e7e0      	b.n	8059964 <_raise_r+0x12>
	...

080599a4 <raise>:
 80599a4:	4b02      	ldr	r3, [pc, #8]	; (80599b0 <raise+0xc>)
 80599a6:	4601      	mov	r1, r0
 80599a8:	6818      	ldr	r0, [r3, #0]
 80599aa:	f7ff bfd2 	b.w	8059952 <_raise_r>
 80599ae:	bf00      	nop
 80599b0:	200182b0 	.word	0x200182b0

080599b4 <_kill_r>:
 80599b4:	b538      	push	{r3, r4, r5, lr}
 80599b6:	2300      	movs	r3, #0
 80599b8:	4d06      	ldr	r5, [pc, #24]	; (80599d4 <_kill_r+0x20>)
 80599ba:	4604      	mov	r4, r0
 80599bc:	4608      	mov	r0, r1
 80599be:	4611      	mov	r1, r2
 80599c0:	602b      	str	r3, [r5, #0]
 80599c2:	f7e9 f93f 	bl	8042c44 <_kill>
 80599c6:	1c43      	adds	r3, r0, #1
 80599c8:	d102      	bne.n	80599d0 <_kill_r+0x1c>
 80599ca:	682b      	ldr	r3, [r5, #0]
 80599cc:	b103      	cbz	r3, 80599d0 <_kill_r+0x1c>
 80599ce:	6023      	str	r3, [r4, #0]
 80599d0:	bd38      	pop	{r3, r4, r5, pc}
 80599d2:	bf00      	nop
 80599d4:	2001b52c 	.word	0x2001b52c

080599d8 <_getpid_r>:
 80599d8:	f7e9 b932 	b.w	8042c40 <_getpid>
 80599dc:	0000      	movs	r0, r0
	...

080599e0 <floor>:
 80599e0:	ec51 0b10 	vmov	r0, r1, d0
 80599e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80599e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80599ec:	460c      	mov	r4, r1
 80599ee:	ee10 5a10 	vmov	r5, s0
 80599f2:	ee10 8a10 	vmov	r8, s0
 80599f6:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80599fa:	2e13      	cmp	r6, #19
 80599fc:	dc33      	bgt.n	8059a66 <floor+0x86>
 80599fe:	2e00      	cmp	r6, #0
 8059a00:	da14      	bge.n	8059a2c <floor+0x4c>
 8059a02:	a335      	add	r3, pc, #212	; (adr r3, 8059ad8 <floor+0xf8>)
 8059a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8059a08:	f7e6 fc24 	bl	8040254 <__adddf3>
 8059a0c:	2200      	movs	r2, #0
 8059a0e:	2300      	movs	r3, #0
 8059a10:	f7e7 f866 	bl	8040ae0 <__aeabi_dcmpgt>
 8059a14:	b138      	cbz	r0, 8059a26 <floor+0x46>
 8059a16:	2c00      	cmp	r4, #0
 8059a18:	da58      	bge.n	8059acc <floor+0xec>
 8059a1a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8059a1e:	431d      	orrs	r5, r3
 8059a20:	d001      	beq.n	8059a26 <floor+0x46>
 8059a22:	2500      	movs	r5, #0
 8059a24:	4c2e      	ldr	r4, [pc, #184]	; (8059ae0 <floor+0x100>)
 8059a26:	4621      	mov	r1, r4
 8059a28:	4628      	mov	r0, r5
 8059a2a:	e026      	b.n	8059a7a <floor+0x9a>
 8059a2c:	4f2d      	ldr	r7, [pc, #180]	; (8059ae4 <floor+0x104>)
 8059a2e:	4137      	asrs	r7, r6
 8059a30:	ea01 0307 	and.w	r3, r1, r7
 8059a34:	4303      	orrs	r3, r0
 8059a36:	d020      	beq.n	8059a7a <floor+0x9a>
 8059a38:	a327      	add	r3, pc, #156	; (adr r3, 8059ad8 <floor+0xf8>)
 8059a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8059a3e:	f7e6 fc09 	bl	8040254 <__adddf3>
 8059a42:	2200      	movs	r2, #0
 8059a44:	2300      	movs	r3, #0
 8059a46:	f7e7 f84b 	bl	8040ae0 <__aeabi_dcmpgt>
 8059a4a:	2800      	cmp	r0, #0
 8059a4c:	d0eb      	beq.n	8059a26 <floor+0x46>
 8059a4e:	2c00      	cmp	r4, #0
 8059a50:	f04f 0500 	mov.w	r5, #0
 8059a54:	bfbe      	ittt	lt
 8059a56:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8059a5a:	fa43 f606 	asrlt.w	r6, r3, r6
 8059a5e:	19a4      	addlt	r4, r4, r6
 8059a60:	ea24 0407 	bic.w	r4, r4, r7
 8059a64:	e7df      	b.n	8059a26 <floor+0x46>
 8059a66:	2e33      	cmp	r6, #51	; 0x33
 8059a68:	dd0b      	ble.n	8059a82 <floor+0xa2>
 8059a6a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8059a6e:	d104      	bne.n	8059a7a <floor+0x9a>
 8059a70:	ee10 2a10 	vmov	r2, s0
 8059a74:	460b      	mov	r3, r1
 8059a76:	f7e6 fbed 	bl	8040254 <__adddf3>
 8059a7a:	ec41 0b10 	vmov	d0, r0, r1
 8059a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8059a82:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8059a86:	f04f 33ff 	mov.w	r3, #4294967295
 8059a8a:	fa23 f707 	lsr.w	r7, r3, r7
 8059a8e:	4207      	tst	r7, r0
 8059a90:	d0f3      	beq.n	8059a7a <floor+0x9a>
 8059a92:	a311      	add	r3, pc, #68	; (adr r3, 8059ad8 <floor+0xf8>)
 8059a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8059a98:	f7e6 fbdc 	bl	8040254 <__adddf3>
 8059a9c:	2200      	movs	r2, #0
 8059a9e:	2300      	movs	r3, #0
 8059aa0:	f7e7 f81e 	bl	8040ae0 <__aeabi_dcmpgt>
 8059aa4:	2800      	cmp	r0, #0
 8059aa6:	d0be      	beq.n	8059a26 <floor+0x46>
 8059aa8:	2c00      	cmp	r4, #0
 8059aaa:	da02      	bge.n	8059ab2 <floor+0xd2>
 8059aac:	2e14      	cmp	r6, #20
 8059aae:	d103      	bne.n	8059ab8 <floor+0xd8>
 8059ab0:	3401      	adds	r4, #1
 8059ab2:	ea25 0507 	bic.w	r5, r5, r7
 8059ab6:	e7b6      	b.n	8059a26 <floor+0x46>
 8059ab8:	2301      	movs	r3, #1
 8059aba:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8059abe:	fa03 f606 	lsl.w	r6, r3, r6
 8059ac2:	4435      	add	r5, r6
 8059ac4:	4545      	cmp	r5, r8
 8059ac6:	bf38      	it	cc
 8059ac8:	18e4      	addcc	r4, r4, r3
 8059aca:	e7f2      	b.n	8059ab2 <floor+0xd2>
 8059acc:	2500      	movs	r5, #0
 8059ace:	462c      	mov	r4, r5
 8059ad0:	e7a9      	b.n	8059a26 <floor+0x46>
 8059ad2:	bf00      	nop
 8059ad4:	f3af 8000 	nop.w
 8059ad8:	8800759c 	.word	0x8800759c
 8059adc:	7e37e43c 	.word	0x7e37e43c
 8059ae0:	bff00000 	.word	0xbff00000
 8059ae4:	000fffff 	.word	0x000fffff

08059ae8 <_init>:
 8059ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8059aea:	bf00      	nop
 8059aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8059aee:	bc08      	pop	{r3}
 8059af0:	469e      	mov	lr, r3
 8059af2:	4770      	bx	lr

08059af4 <_fini>:
 8059af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8059af6:	bf00      	nop
 8059af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8059afa:	bc08      	pop	{r3}
 8059afc:	469e      	mov	lr, r3
 8059afe:	4770      	bx	lr

08059b00 <__SECURE_SystemCoreClockUpdate_veneer>:
 8059b00:	b401      	push	{r0}
 8059b02:	4802      	ldr	r0, [pc, #8]	; (8059b0c <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 8059b04:	4684      	mov	ip, r0
 8059b06:	bc01      	pop	{r0}
 8059b08:	4760      	bx	ip
 8059b0a:	bf00      	nop
 8059b0c:	0c03e011 	.word	0x0c03e011

08059b10 <__SECURE_LEDToggle_RED_veneer>:
 8059b10:	b401      	push	{r0}
 8059b12:	4802      	ldr	r0, [pc, #8]	; (8059b1c <__SECURE_LEDToggle_RED_veneer+0xc>)
 8059b14:	4684      	mov	ip, r0
 8059b16:	bc01      	pop	{r0}
 8059b18:	4760      	bx	ip
 8059b1a:	bf00      	nop
 8059b1c:	0c03e001 	.word	0x0c03e001

08059b20 <__SECURE_LED_RED_veneer>:
 8059b20:	b401      	push	{r0}
 8059b22:	4802      	ldr	r0, [pc, #8]	; (8059b2c <__SECURE_LED_RED_veneer+0xc>)
 8059b24:	4684      	mov	ip, r0
 8059b26:	bc01      	pop	{r0}
 8059b28:	4760      	bx	ip
 8059b2a:	bf00      	nop
 8059b2c:	0c03e009 	.word	0x0c03e009

08059b30 <__SECURE_RegisterCallback_veneer>:
 8059b30:	b401      	push	{r0}
 8059b32:	4802      	ldr	r0, [pc, #8]	; (8059b3c <__SECURE_RegisterCallback_veneer+0xc>)
 8059b34:	4684      	mov	ip, r0
 8059b36:	bc01      	pop	{r0}
 8059b38:	4760      	bx	ip
 8059b3a:	bf00      	nop
 8059b3c:	0c03e019 	.word	0x0c03e019

08059b40 <__SECURE_LED_YELLOW_veneer>:
 8059b40:	b401      	push	{r0}
 8059b42:	4802      	ldr	r0, [pc, #8]	; (8059b4c <__SECURE_LED_YELLOW_veneer+0xc>)
 8059b44:	4684      	mov	ip, r0
 8059b46:	bc01      	pop	{r0}
 8059b48:	4760      	bx	ip
 8059b4a:	bf00      	nop
 8059b4c:	0c03e021 	.word	0x0c03e021
