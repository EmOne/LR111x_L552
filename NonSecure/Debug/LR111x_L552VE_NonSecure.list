
LR111x_L552VE_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc88  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  0804fe80  0804fe80  0001fe80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08050210  08050210  000280c4  2**0
                  CONTENTS
  4 .ARM          00000008  08050210  08050210  00020210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08050218  08050218  000280c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08050218  08050218  00020218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805021c  0805021c  0002021c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20018000  08050220  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018b4  200180c4  080502e4  000280c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20019978  080502e4  00029978  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  000280c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000427a2  00000000  00000000  000280fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007025  00000000  00000000  0006a89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002ab8  00000000  00000000  000718c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002800  00000000  00000000  00074380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003513b  00000000  00000000  00076b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033d90  00000000  00000000  000abcbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00140613  00000000  00000000  000dfa4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0022005e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bb44  00000000  00000000  002200b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	200180c4 	.word	0x200180c4
 8040214:	00000000 	.word	0x00000000
 8040218:	0804fe24 	.word	0x0804fe24

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	200180c8 	.word	0x200180c8
 8040234:	0804fe24 	.word	0x0804fe24

08040238 <__aeabi_uldivmod>:
 8040238:	b953      	cbnz	r3, 8040250 <__aeabi_uldivmod+0x18>
 804023a:	b94a      	cbnz	r2, 8040250 <__aeabi_uldivmod+0x18>
 804023c:	2900      	cmp	r1, #0
 804023e:	bf08      	it	eq
 8040240:	2800      	cmpeq	r0, #0
 8040242:	bf1c      	itt	ne
 8040244:	f04f 31ff 	movne.w	r1, #4294967295
 8040248:	f04f 30ff 	movne.w	r0, #4294967295
 804024c:	f000 b980 	b.w	8040550 <__aeabi_idiv0>
 8040250:	f1ad 0c08 	sub.w	ip, sp, #8
 8040254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040258:	f000 f806 	bl	8040268 <__udivmoddi4>
 804025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040264:	b004      	add	sp, #16
 8040266:	4770      	bx	lr

08040268 <__udivmoddi4>:
 8040268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804026c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 804026e:	4604      	mov	r4, r0
 8040270:	4688      	mov	r8, r1
 8040272:	2b00      	cmp	r3, #0
 8040274:	f040 8084 	bne.w	8040380 <__udivmoddi4+0x118>
 8040278:	428a      	cmp	r2, r1
 804027a:	4617      	mov	r7, r2
 804027c:	d943      	bls.n	8040306 <__udivmoddi4+0x9e>
 804027e:	fab2 f282 	clz	r2, r2
 8040282:	b142      	cbz	r2, 8040296 <__udivmoddi4+0x2e>
 8040284:	f1c2 0020 	rsb	r0, r2, #32
 8040288:	4091      	lsls	r1, r2
 804028a:	4097      	lsls	r7, r2
 804028c:	fa24 f000 	lsr.w	r0, r4, r0
 8040290:	4094      	lsls	r4, r2
 8040292:	ea40 0801 	orr.w	r8, r0, r1
 8040296:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 804029a:	0c23      	lsrs	r3, r4, #16
 804029c:	fa1f fe87 	uxth.w	lr, r7
 80402a0:	fbb8 f6fc 	udiv	r6, r8, ip
 80402a4:	fb0c 8116 	mls	r1, ip, r6, r8
 80402a8:	fb06 f00e 	mul.w	r0, r6, lr
 80402ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80402b0:	4298      	cmp	r0, r3
 80402b2:	d907      	bls.n	80402c4 <__udivmoddi4+0x5c>
 80402b4:	18fb      	adds	r3, r7, r3
 80402b6:	f106 31ff 	add.w	r1, r6, #4294967295
 80402ba:	d202      	bcs.n	80402c2 <__udivmoddi4+0x5a>
 80402bc:	4298      	cmp	r0, r3
 80402be:	f200 8131 	bhi.w	8040524 <__udivmoddi4+0x2bc>
 80402c2:	460e      	mov	r6, r1
 80402c4:	1a19      	subs	r1, r3, r0
 80402c6:	b2a3      	uxth	r3, r4
 80402c8:	fbb1 f0fc 	udiv	r0, r1, ip
 80402cc:	fb0c 1110 	mls	r1, ip, r0, r1
 80402d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80402d4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80402d8:	45a6      	cmp	lr, r4
 80402da:	d907      	bls.n	80402ec <__udivmoddi4+0x84>
 80402dc:	193c      	adds	r4, r7, r4
 80402de:	f100 33ff 	add.w	r3, r0, #4294967295
 80402e2:	d202      	bcs.n	80402ea <__udivmoddi4+0x82>
 80402e4:	45a6      	cmp	lr, r4
 80402e6:	f200 811a 	bhi.w	804051e <__udivmoddi4+0x2b6>
 80402ea:	4618      	mov	r0, r3
 80402ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80402f0:	eba4 040e 	sub.w	r4, r4, lr
 80402f4:	2600      	movs	r6, #0
 80402f6:	b11d      	cbz	r5, 8040300 <__udivmoddi4+0x98>
 80402f8:	40d4      	lsrs	r4, r2
 80402fa:	2300      	movs	r3, #0
 80402fc:	e9c5 4300 	strd	r4, r3, [r5]
 8040300:	4631      	mov	r1, r6
 8040302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040306:	b902      	cbnz	r2, 804030a <__udivmoddi4+0xa2>
 8040308:	deff      	udf	#255	; 0xff
 804030a:	fab2 f282 	clz	r2, r2
 804030e:	2a00      	cmp	r2, #0
 8040310:	d152      	bne.n	80403b8 <__udivmoddi4+0x150>
 8040312:	1bcb      	subs	r3, r1, r7
 8040314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040318:	fa1f f887 	uxth.w	r8, r7
 804031c:	2601      	movs	r6, #1
 804031e:	0c21      	lsrs	r1, r4, #16
 8040320:	fbb3 fcfe 	udiv	ip, r3, lr
 8040324:	fb0e 301c 	mls	r0, lr, ip, r3
 8040328:	fb08 f90c 	mul.w	r9, r8, ip
 804032c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8040330:	4589      	cmp	r9, r1
 8040332:	d90b      	bls.n	804034c <__udivmoddi4+0xe4>
 8040334:	1879      	adds	r1, r7, r1
 8040336:	f10c 33ff 	add.w	r3, ip, #4294967295
 804033a:	bf2c      	ite	cs
 804033c:	2001      	movcs	r0, #1
 804033e:	2000      	movcc	r0, #0
 8040340:	4589      	cmp	r9, r1
 8040342:	d902      	bls.n	804034a <__udivmoddi4+0xe2>
 8040344:	2800      	cmp	r0, #0
 8040346:	f000 80f0 	beq.w	804052a <__udivmoddi4+0x2c2>
 804034a:	469c      	mov	ip, r3
 804034c:	eba1 0109 	sub.w	r1, r1, r9
 8040350:	b2a3      	uxth	r3, r4
 8040352:	fbb1 f0fe 	udiv	r0, r1, lr
 8040356:	fb0e 1110 	mls	r1, lr, r0, r1
 804035a:	fb08 f800 	mul.w	r8, r8, r0
 804035e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040362:	45a0      	cmp	r8, r4
 8040364:	d907      	bls.n	8040376 <__udivmoddi4+0x10e>
 8040366:	193c      	adds	r4, r7, r4
 8040368:	f100 33ff 	add.w	r3, r0, #4294967295
 804036c:	d202      	bcs.n	8040374 <__udivmoddi4+0x10c>
 804036e:	45a0      	cmp	r8, r4
 8040370:	f200 80d2 	bhi.w	8040518 <__udivmoddi4+0x2b0>
 8040374:	4618      	mov	r0, r3
 8040376:	eba4 0408 	sub.w	r4, r4, r8
 804037a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 804037e:	e7ba      	b.n	80402f6 <__udivmoddi4+0x8e>
 8040380:	428b      	cmp	r3, r1
 8040382:	d909      	bls.n	8040398 <__udivmoddi4+0x130>
 8040384:	2d00      	cmp	r5, #0
 8040386:	f000 80be 	beq.w	8040506 <__udivmoddi4+0x29e>
 804038a:	2600      	movs	r6, #0
 804038c:	e9c5 0100 	strd	r0, r1, [r5]
 8040390:	4630      	mov	r0, r6
 8040392:	4631      	mov	r1, r6
 8040394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040398:	fab3 f683 	clz	r6, r3
 804039c:	2e00      	cmp	r6, #0
 804039e:	d14d      	bne.n	804043c <__udivmoddi4+0x1d4>
 80403a0:	428b      	cmp	r3, r1
 80403a2:	f0c0 80b3 	bcc.w	804050c <__udivmoddi4+0x2a4>
 80403a6:	4282      	cmp	r2, r0
 80403a8:	f240 80b0 	bls.w	804050c <__udivmoddi4+0x2a4>
 80403ac:	4630      	mov	r0, r6
 80403ae:	2d00      	cmp	r5, #0
 80403b0:	d0a6      	beq.n	8040300 <__udivmoddi4+0x98>
 80403b2:	e9c5 4800 	strd	r4, r8, [r5]
 80403b6:	e7a3      	b.n	8040300 <__udivmoddi4+0x98>
 80403b8:	4097      	lsls	r7, r2
 80403ba:	f1c2 0320 	rsb	r3, r2, #32
 80403be:	fa01 f002 	lsl.w	r0, r1, r2
 80403c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80403c6:	40d9      	lsrs	r1, r3
 80403c8:	fa24 f303 	lsr.w	r3, r4, r3
 80403cc:	fa1f f887 	uxth.w	r8, r7
 80403d0:	4094      	lsls	r4, r2
 80403d2:	4303      	orrs	r3, r0
 80403d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80403d8:	0c1e      	lsrs	r6, r3, #16
 80403da:	fb0e 1110 	mls	r1, lr, r0, r1
 80403de:	fb00 fc08 	mul.w	ip, r0, r8
 80403e2:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80403e6:	458c      	cmp	ip, r1
 80403e8:	d90e      	bls.n	8040408 <__udivmoddi4+0x1a0>
 80403ea:	1879      	adds	r1, r7, r1
 80403ec:	f100 36ff 	add.w	r6, r0, #4294967295
 80403f0:	bf2c      	ite	cs
 80403f2:	f04f 0901 	movcs.w	r9, #1
 80403f6:	f04f 0900 	movcc.w	r9, #0
 80403fa:	458c      	cmp	ip, r1
 80403fc:	d903      	bls.n	8040406 <__udivmoddi4+0x19e>
 80403fe:	f1b9 0f00 	cmp.w	r9, #0
 8040402:	f000 8096 	beq.w	8040532 <__udivmoddi4+0x2ca>
 8040406:	4630      	mov	r0, r6
 8040408:	eba1 010c 	sub.w	r1, r1, ip
 804040c:	b29b      	uxth	r3, r3
 804040e:	fbb1 f6fe 	udiv	r6, r1, lr
 8040412:	fb0e 1116 	mls	r1, lr, r6, r1
 8040416:	fb06 fc08 	mul.w	ip, r6, r8
 804041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 804041e:	458c      	cmp	ip, r1
 8040420:	d907      	bls.n	8040432 <__udivmoddi4+0x1ca>
 8040422:	1879      	adds	r1, r7, r1
 8040424:	f106 33ff 	add.w	r3, r6, #4294967295
 8040428:	d202      	bcs.n	8040430 <__udivmoddi4+0x1c8>
 804042a:	458c      	cmp	ip, r1
 804042c:	f200 8088 	bhi.w	8040540 <__udivmoddi4+0x2d8>
 8040430:	461e      	mov	r6, r3
 8040432:	eba1 030c 	sub.w	r3, r1, ip
 8040436:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 804043a:	e770      	b.n	804031e <__udivmoddi4+0xb6>
 804043c:	f1c6 0720 	rsb	r7, r6, #32
 8040440:	fa03 f406 	lsl.w	r4, r3, r6
 8040444:	fa02 fc06 	lsl.w	ip, r2, r6
 8040448:	fa01 fe06 	lsl.w	lr, r1, r6
 804044c:	40fa      	lsrs	r2, r7
 804044e:	fa20 f807 	lsr.w	r8, r0, r7
 8040452:	40f9      	lsrs	r1, r7
 8040454:	fa00 f306 	lsl.w	r3, r0, r6
 8040458:	4322      	orrs	r2, r4
 804045a:	ea48 040e 	orr.w	r4, r8, lr
 804045e:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8040462:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8040466:	fa1f f982 	uxth.w	r9, r2
 804046a:	fbb1 faf8 	udiv	sl, r1, r8
 804046e:	fb08 111a 	mls	r1, r8, sl, r1
 8040472:	fb0a f009 	mul.w	r0, sl, r9
 8040476:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 804047a:	4570      	cmp	r0, lr
 804047c:	d90e      	bls.n	804049c <__udivmoddi4+0x234>
 804047e:	eb12 0e0e 	adds.w	lr, r2, lr
 8040482:	f10a 31ff 	add.w	r1, sl, #4294967295
 8040486:	bf2c      	ite	cs
 8040488:	f04f 0b01 	movcs.w	fp, #1
 804048c:	f04f 0b00 	movcc.w	fp, #0
 8040490:	4570      	cmp	r0, lr
 8040492:	d902      	bls.n	804049a <__udivmoddi4+0x232>
 8040494:	f1bb 0f00 	cmp.w	fp, #0
 8040498:	d04e      	beq.n	8040538 <__udivmoddi4+0x2d0>
 804049a:	468a      	mov	sl, r1
 804049c:	ebae 0e00 	sub.w	lr, lr, r0
 80404a0:	b2a4      	uxth	r4, r4
 80404a2:	fbbe f0f8 	udiv	r0, lr, r8
 80404a6:	fb08 ee10 	mls	lr, r8, r0, lr
 80404aa:	fb00 f909 	mul.w	r9, r0, r9
 80404ae:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80404b2:	45f1      	cmp	r9, lr
 80404b4:	d907      	bls.n	80404c6 <__udivmoddi4+0x25e>
 80404b6:	eb12 0e0e 	adds.w	lr, r2, lr
 80404ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80404be:	d201      	bcs.n	80404c4 <__udivmoddi4+0x25c>
 80404c0:	45f1      	cmp	r9, lr
 80404c2:	d840      	bhi.n	8040546 <__udivmoddi4+0x2de>
 80404c4:	4608      	mov	r0, r1
 80404c6:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80404ca:	ebae 0e09 	sub.w	lr, lr, r9
 80404ce:	fba0 890c 	umull	r8, r9, r0, ip
 80404d2:	45ce      	cmp	lr, r9
 80404d4:	4641      	mov	r1, r8
 80404d6:	464c      	mov	r4, r9
 80404d8:	d302      	bcc.n	80404e0 <__udivmoddi4+0x278>
 80404da:	d106      	bne.n	80404ea <__udivmoddi4+0x282>
 80404dc:	4543      	cmp	r3, r8
 80404de:	d204      	bcs.n	80404ea <__udivmoddi4+0x282>
 80404e0:	3801      	subs	r0, #1
 80404e2:	ebb8 010c 	subs.w	r1, r8, ip
 80404e6:	eb69 0402 	sbc.w	r4, r9, r2
 80404ea:	b37d      	cbz	r5, 804054c <__udivmoddi4+0x2e4>
 80404ec:	1a5a      	subs	r2, r3, r1
 80404ee:	eb6e 0e04 	sbc.w	lr, lr, r4
 80404f2:	40f2      	lsrs	r2, r6
 80404f4:	fa0e f707 	lsl.w	r7, lr, r7
 80404f8:	fa2e f306 	lsr.w	r3, lr, r6
 80404fc:	2600      	movs	r6, #0
 80404fe:	4317      	orrs	r7, r2
 8040500:	e9c5 7300 	strd	r7, r3, [r5]
 8040504:	e6fc      	b.n	8040300 <__udivmoddi4+0x98>
 8040506:	462e      	mov	r6, r5
 8040508:	4628      	mov	r0, r5
 804050a:	e6f9      	b.n	8040300 <__udivmoddi4+0x98>
 804050c:	1a84      	subs	r4, r0, r2
 804050e:	eb61 0103 	sbc.w	r1, r1, r3
 8040512:	2001      	movs	r0, #1
 8040514:	4688      	mov	r8, r1
 8040516:	e74a      	b.n	80403ae <__udivmoddi4+0x146>
 8040518:	3802      	subs	r0, #2
 804051a:	443c      	add	r4, r7
 804051c:	e72b      	b.n	8040376 <__udivmoddi4+0x10e>
 804051e:	3802      	subs	r0, #2
 8040520:	443c      	add	r4, r7
 8040522:	e6e3      	b.n	80402ec <__udivmoddi4+0x84>
 8040524:	3e02      	subs	r6, #2
 8040526:	443b      	add	r3, r7
 8040528:	e6cc      	b.n	80402c4 <__udivmoddi4+0x5c>
 804052a:	f1ac 0c02 	sub.w	ip, ip, #2
 804052e:	4439      	add	r1, r7
 8040530:	e70c      	b.n	804034c <__udivmoddi4+0xe4>
 8040532:	3802      	subs	r0, #2
 8040534:	4439      	add	r1, r7
 8040536:	e767      	b.n	8040408 <__udivmoddi4+0x1a0>
 8040538:	f1aa 0a02 	sub.w	sl, sl, #2
 804053c:	4496      	add	lr, r2
 804053e:	e7ad      	b.n	804049c <__udivmoddi4+0x234>
 8040540:	3e02      	subs	r6, #2
 8040542:	4439      	add	r1, r7
 8040544:	e775      	b.n	8040432 <__udivmoddi4+0x1ca>
 8040546:	3802      	subs	r0, #2
 8040548:	4496      	add	lr, r2
 804054a:	e7bc      	b.n	80404c6 <__udivmoddi4+0x25e>
 804054c:	462e      	mov	r6, r5
 804054e:	e6d7      	b.n	8040300 <__udivmoddi4+0x98>

08040550 <__aeabi_idiv0>:
 8040550:	4770      	bx	lr
 8040552:	bf00      	nop

08040554 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8040554:	b580      	push	{r7, lr}
 8040556:	b08a      	sub	sp, #40	; 0x28
 8040558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 804055a:	f107 031c 	add.w	r3, r7, #28
 804055e:	2200      	movs	r2, #0
 8040560:	601a      	str	r2, [r3, #0]
 8040562:	605a      	str	r2, [r3, #4]
 8040564:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8040566:	1d3b      	adds	r3, r7, #4
 8040568:	2200      	movs	r2, #0
 804056a:	601a      	str	r2, [r3, #0]
 804056c:	605a      	str	r2, [r3, #4]
 804056e:	609a      	str	r2, [r3, #8]
 8040570:	60da      	str	r2, [r3, #12]
 8040572:	611a      	str	r2, [r3, #16]
 8040574:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8040576:	4b2f      	ldr	r3, [pc, #188]	; (8040634 <MX_ADC1_Init+0xe0>)
 8040578:	4a2f      	ldr	r2, [pc, #188]	; (8040638 <MX_ADC1_Init+0xe4>)
 804057a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 804057c:	4b2d      	ldr	r3, [pc, #180]	; (8040634 <MX_ADC1_Init+0xe0>)
 804057e:	2200      	movs	r2, #0
 8040580:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8040582:	4b2c      	ldr	r3, [pc, #176]	; (8040634 <MX_ADC1_Init+0xe0>)
 8040584:	2200      	movs	r2, #0
 8040586:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8040588:	4b2a      	ldr	r3, [pc, #168]	; (8040634 <MX_ADC1_Init+0xe0>)
 804058a:	2200      	movs	r2, #0
 804058c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 804058e:	4b29      	ldr	r3, [pc, #164]	; (8040634 <MX_ADC1_Init+0xe0>)
 8040590:	2200      	movs	r2, #0
 8040592:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8040594:	4b27      	ldr	r3, [pc, #156]	; (8040634 <MX_ADC1_Init+0xe0>)
 8040596:	2204      	movs	r2, #4
 8040598:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 804059a:	4b26      	ldr	r3, [pc, #152]	; (8040634 <MX_ADC1_Init+0xe0>)
 804059c:	2200      	movs	r2, #0
 804059e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80405a0:	4b24      	ldr	r3, [pc, #144]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405a2:	2200      	movs	r2, #0
 80405a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80405a6:	4b23      	ldr	r3, [pc, #140]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405a8:	2201      	movs	r2, #1
 80405aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80405ac:	4b21      	ldr	r3, [pc, #132]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405ae:	2200      	movs	r2, #0
 80405b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80405b4:	4b1f      	ldr	r3, [pc, #124]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405b6:	2200      	movs	r2, #0
 80405b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80405ba:	4b1e      	ldr	r3, [pc, #120]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405bc:	2200      	movs	r2, #0
 80405be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80405c0:	4b1c      	ldr	r3, [pc, #112]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405c2:	2200      	movs	r2, #0
 80405c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80405c8:	4b1a      	ldr	r3, [pc, #104]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405ca:	2200      	movs	r2, #0
 80405cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80405ce:	4b19      	ldr	r3, [pc, #100]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405d0:	2200      	movs	r2, #0
 80405d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80405d6:	4817      	ldr	r0, [pc, #92]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405d8:	f006 fb3e 	bl	8046c58 <HAL_ADC_Init>
 80405dc:	4603      	mov	r3, r0
 80405de:	2b00      	cmp	r3, #0
 80405e0:	d001      	beq.n	80405e6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80405e2:	f001 f855 	bl	8041690 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80405e6:	2300      	movs	r3, #0
 80405e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80405ea:	f107 031c 	add.w	r3, r7, #28
 80405ee:	4619      	mov	r1, r3
 80405f0:	4810      	ldr	r0, [pc, #64]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405f2:	f007 fe89 	bl	8048308 <HAL_ADCEx_MultiModeConfigChannel>
 80405f6:	4603      	mov	r3, r0
 80405f8:	2b00      	cmp	r3, #0
 80405fa:	d001      	beq.n	8040600 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80405fc:	f001 f848 	bl	8041690 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8040600:	4b0e      	ldr	r3, [pc, #56]	; (804063c <MX_ADC1_Init+0xe8>)
 8040602:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8040604:	2306      	movs	r3, #6
 8040606:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8040608:	2300      	movs	r3, #0
 804060a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 804060c:	237f      	movs	r3, #127	; 0x7f
 804060e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8040610:	2304      	movs	r3, #4
 8040612:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8040614:	2300      	movs	r3, #0
 8040616:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8040618:	1d3b      	adds	r3, r7, #4
 804061a:	4619      	mov	r1, r3
 804061c:	4805      	ldr	r0, [pc, #20]	; (8040634 <MX_ADC1_Init+0xe0>)
 804061e:	f007 f8c1 	bl	80477a4 <HAL_ADC_ConfigChannel>
 8040622:	4603      	mov	r3, r0
 8040624:	2b00      	cmp	r3, #0
 8040626:	d001      	beq.n	804062c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8040628:	f001 f832 	bl	8041690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 804062c:	bf00      	nop
 804062e:	3728      	adds	r7, #40	; 0x28
 8040630:	46bd      	mov	sp, r7
 8040632:	bd80      	pop	{r7, pc}
 8040634:	20018ee8 	.word	0x20018ee8
 8040638:	42028000 	.word	0x42028000
 804063c:	cb840000 	.word	0xcb840000

08040640 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8040640:	b580      	push	{r7, lr}
 8040642:	b086      	sub	sp, #24
 8040644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8040646:	463b      	mov	r3, r7
 8040648:	2200      	movs	r2, #0
 804064a:	601a      	str	r2, [r3, #0]
 804064c:	605a      	str	r2, [r3, #4]
 804064e:	609a      	str	r2, [r3, #8]
 8040650:	60da      	str	r2, [r3, #12]
 8040652:	611a      	str	r2, [r3, #16]
 8040654:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8040656:	4b29      	ldr	r3, [pc, #164]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040658:	4a29      	ldr	r2, [pc, #164]	; (8040700 <MX_ADC2_Init+0xc0>)
 804065a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 804065c:	4b27      	ldr	r3, [pc, #156]	; (80406fc <MX_ADC2_Init+0xbc>)
 804065e:	2200      	movs	r2, #0
 8040660:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8040662:	4b26      	ldr	r3, [pc, #152]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040664:	2200      	movs	r2, #0
 8040666:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8040668:	4b24      	ldr	r3, [pc, #144]	; (80406fc <MX_ADC2_Init+0xbc>)
 804066a:	2200      	movs	r2, #0
 804066c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 804066e:	4b23      	ldr	r3, [pc, #140]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040670:	2200      	movs	r2, #0
 8040672:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8040674:	4b21      	ldr	r3, [pc, #132]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040676:	2204      	movs	r2, #4
 8040678:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 804067a:	4b20      	ldr	r3, [pc, #128]	; (80406fc <MX_ADC2_Init+0xbc>)
 804067c:	2200      	movs	r2, #0
 804067e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8040680:	4b1e      	ldr	r3, [pc, #120]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040682:	2200      	movs	r2, #0
 8040684:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8040686:	4b1d      	ldr	r3, [pc, #116]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040688:	2201      	movs	r2, #1
 804068a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 804068c:	4b1b      	ldr	r3, [pc, #108]	; (80406fc <MX_ADC2_Init+0xbc>)
 804068e:	2200      	movs	r2, #0
 8040690:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8040694:	4b19      	ldr	r3, [pc, #100]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040696:	2200      	movs	r2, #0
 8040698:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 804069a:	4b18      	ldr	r3, [pc, #96]	; (80406fc <MX_ADC2_Init+0xbc>)
 804069c:	2200      	movs	r2, #0
 804069e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80406a0:	4b16      	ldr	r3, [pc, #88]	; (80406fc <MX_ADC2_Init+0xbc>)
 80406a2:	2200      	movs	r2, #0
 80406a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80406a8:	4b14      	ldr	r3, [pc, #80]	; (80406fc <MX_ADC2_Init+0xbc>)
 80406aa:	2200      	movs	r2, #0
 80406ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80406ae:	4b13      	ldr	r3, [pc, #76]	; (80406fc <MX_ADC2_Init+0xbc>)
 80406b0:	2200      	movs	r2, #0
 80406b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80406b6:	4811      	ldr	r0, [pc, #68]	; (80406fc <MX_ADC2_Init+0xbc>)
 80406b8:	f006 face 	bl	8046c58 <HAL_ADC_Init>
 80406bc:	4603      	mov	r3, r0
 80406be:	2b00      	cmp	r3, #0
 80406c0:	d001      	beq.n	80406c6 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80406c2:	f000 ffe5 	bl	8041690 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80406c6:	4b0f      	ldr	r3, [pc, #60]	; (8040704 <MX_ADC2_Init+0xc4>)
 80406c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80406ca:	2306      	movs	r3, #6
 80406cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80406ce:	2300      	movs	r3, #0
 80406d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80406d2:	237f      	movs	r3, #127	; 0x7f
 80406d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80406d6:	2304      	movs	r3, #4
 80406d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80406da:	2300      	movs	r3, #0
 80406dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80406de:	463b      	mov	r3, r7
 80406e0:	4619      	mov	r1, r3
 80406e2:	4806      	ldr	r0, [pc, #24]	; (80406fc <MX_ADC2_Init+0xbc>)
 80406e4:	f007 f85e 	bl	80477a4 <HAL_ADC_ConfigChannel>
 80406e8:	4603      	mov	r3, r0
 80406ea:	2b00      	cmp	r3, #0
 80406ec:	d001      	beq.n	80406f2 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80406ee:	f000 ffcf 	bl	8041690 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80406f2:	bf00      	nop
 80406f4:	3718      	adds	r7, #24
 80406f6:	46bd      	mov	sp, r7
 80406f8:	bd80      	pop	{r7, pc}
 80406fa:	bf00      	nop
 80406fc:	20018e54 	.word	0x20018e54
 8040700:	42028100 	.word	0x42028100
 8040704:	32601000 	.word	0x32601000

08040708 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8040708:	b580      	push	{r7, lr}
 804070a:	b0b0      	sub	sp, #192	; 0xc0
 804070c:	af00      	add	r7, sp, #0
 804070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040710:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8040714:	2200      	movs	r2, #0
 8040716:	601a      	str	r2, [r3, #0]
 8040718:	605a      	str	r2, [r3, #4]
 804071a:	609a      	str	r2, [r3, #8]
 804071c:	60da      	str	r2, [r3, #12]
 804071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040720:	f107 0318 	add.w	r3, r7, #24
 8040724:	2294      	movs	r2, #148	; 0x94
 8040726:	2100      	movs	r1, #0
 8040728:	4618      	mov	r0, r3
 804072a:	f00e fb98 	bl	804ee5e <memset>
  if(adcHandle->Instance==ADC1)
 804072e:	687b      	ldr	r3, [r7, #4]
 8040730:	681b      	ldr	r3, [r3, #0]
 8040732:	4a69      	ldr	r2, [pc, #420]	; (80408d8 <HAL_ADC_MspInit+0x1d0>)
 8040734:	4293      	cmp	r3, r2
 8040736:	d17d      	bne.n	8040834 <HAL_ADC_MspInit+0x12c>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8040738:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 804073c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 804073e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8040742:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040746:	f107 0318 	add.w	r3, r7, #24
 804074a:	4618      	mov	r0, r3
 804074c:	f00a faa4 	bl	804ac98 <HAL_RCCEx_PeriphCLKConfig>
 8040750:	4603      	mov	r3, r0
 8040752:	2b00      	cmp	r3, #0
 8040754:	d001      	beq.n	804075a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8040756:	f000 ff9b 	bl	8041690 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 804075a:	4b60      	ldr	r3, [pc, #384]	; (80408dc <HAL_ADC_MspInit+0x1d4>)
 804075c:	681b      	ldr	r3, [r3, #0]
 804075e:	3301      	adds	r3, #1
 8040760:	4a5e      	ldr	r2, [pc, #376]	; (80408dc <HAL_ADC_MspInit+0x1d4>)
 8040762:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8040764:	4b5d      	ldr	r3, [pc, #372]	; (80408dc <HAL_ADC_MspInit+0x1d4>)
 8040766:	681b      	ldr	r3, [r3, #0]
 8040768:	2b01      	cmp	r3, #1
 804076a:	d10b      	bne.n	8040784 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC_CLK_ENABLE();
 804076c:	4b5c      	ldr	r3, [pc, #368]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 804076e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040770:	4a5b      	ldr	r2, [pc, #364]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040772:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8040776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040778:	4b59      	ldr	r3, [pc, #356]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 804077a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804077c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8040780:	617b      	str	r3, [r7, #20]
 8040782:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8040784:	4b56      	ldr	r3, [pc, #344]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040788:	4a55      	ldr	r2, [pc, #340]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 804078a:	f043 0302 	orr.w	r3, r3, #2
 804078e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040790:	4b53      	ldr	r3, [pc, #332]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040794:	f003 0302 	and.w	r3, r3, #2
 8040798:	613b      	str	r3, [r7, #16]
 804079a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = EXT_AN_Pin;
 804079c:	2302      	movs	r3, #2
 804079e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80407a2:	2303      	movs	r3, #3
 80407a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407a8:	2300      	movs	r3, #0
 80407aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(EXT_AN_GPIO_Port, &GPIO_InitStruct);
 80407ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80407b2:	4619      	mov	r1, r3
 80407b4:	484b      	ldr	r0, [pc, #300]	; (80408e4 <HAL_ADC_MspInit+0x1dc>)
 80407b6:	f008 fa67 	bl	8048c88 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel6;
 80407ba:	4b4b      	ldr	r3, [pc, #300]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407bc:	4a4b      	ldr	r2, [pc, #300]	; (80408ec <HAL_ADC_MspInit+0x1e4>)
 80407be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80407c0:	4b49      	ldr	r3, [pc, #292]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407c2:	2205      	movs	r2, #5
 80407c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80407c6:	4b48      	ldr	r3, [pc, #288]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407c8:	2200      	movs	r2, #0
 80407ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80407cc:	4b46      	ldr	r3, [pc, #280]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407ce:	2200      	movs	r2, #0
 80407d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80407d2:	4b45      	ldr	r3, [pc, #276]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407d4:	2280      	movs	r2, #128	; 0x80
 80407d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80407d8:	4b43      	ldr	r3, [pc, #268]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80407de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80407e0:	4b41      	ldr	r3, [pc, #260]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80407e6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80407e8:	4b3f      	ldr	r3, [pc, #252]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407ea:	2200      	movs	r2, #0
 80407ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80407ee:	4b3e      	ldr	r3, [pc, #248]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407f0:	2200      	movs	r2, #0
 80407f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80407f4:	483c      	ldr	r0, [pc, #240]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407f6:	f007 ff43 	bl	8048680 <HAL_DMA_Init>
 80407fa:	4603      	mov	r3, r0
 80407fc:	2b00      	cmp	r3, #0
 80407fe:	d001      	beq.n	8040804 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8040800:	f000 ff46 	bl	8041690 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8040804:	2110      	movs	r1, #16
 8040806:	4838      	ldr	r0, [pc, #224]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 8040808:	f008 f9ab 	bl	8048b62 <HAL_DMA_ConfigChannelAttributes>
 804080c:	4603      	mov	r3, r0
 804080e:	2b00      	cmp	r3, #0
 8040810:	d001      	beq.n	8040816 <HAL_ADC_MspInit+0x10e>
    {
      Error_Handler();
 8040812:	f000 ff3d 	bl	8041690 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8040816:	687b      	ldr	r3, [r7, #4]
 8040818:	4a33      	ldr	r2, [pc, #204]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 804081a:	651a      	str	r2, [r3, #80]	; 0x50
 804081c:	4a32      	ldr	r2, [pc, #200]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 804081e:	687b      	ldr	r3, [r7, #4]
 8040820:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8040822:	2200      	movs	r2, #0
 8040824:	2100      	movs	r1, #0
 8040826:	2025      	movs	r0, #37	; 0x25
 8040828:	f007 fef4 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 804082c:	2025      	movs	r0, #37	; 0x25
 804082e:	f007 ff0b 	bl	8048648 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8040832:	e04d      	b.n	80408d0 <HAL_ADC_MspInit+0x1c8>
  else if(adcHandle->Instance==ADC2)
 8040834:	687b      	ldr	r3, [r7, #4]
 8040836:	681b      	ldr	r3, [r3, #0]
 8040838:	4a2d      	ldr	r2, [pc, #180]	; (80408f0 <HAL_ADC_MspInit+0x1e8>)
 804083a:	4293      	cmp	r3, r2
 804083c:	d148      	bne.n	80408d0 <HAL_ADC_MspInit+0x1c8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 804083e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8040842:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8040844:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8040848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 804084c:	f107 0318 	add.w	r3, r7, #24
 8040850:	4618      	mov	r0, r3
 8040852:	f00a fa21 	bl	804ac98 <HAL_RCCEx_PeriphCLKConfig>
 8040856:	4603      	mov	r3, r0
 8040858:	2b00      	cmp	r3, #0
 804085a:	d001      	beq.n	8040860 <HAL_ADC_MspInit+0x158>
      Error_Handler();
 804085c:	f000 ff18 	bl	8041690 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8040860:	4b1e      	ldr	r3, [pc, #120]	; (80408dc <HAL_ADC_MspInit+0x1d4>)
 8040862:	681b      	ldr	r3, [r3, #0]
 8040864:	3301      	adds	r3, #1
 8040866:	4a1d      	ldr	r2, [pc, #116]	; (80408dc <HAL_ADC_MspInit+0x1d4>)
 8040868:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 804086a:	4b1c      	ldr	r3, [pc, #112]	; (80408dc <HAL_ADC_MspInit+0x1d4>)
 804086c:	681b      	ldr	r3, [r3, #0]
 804086e:	2b01      	cmp	r3, #1
 8040870:	d10b      	bne.n	804088a <HAL_ADC_MspInit+0x182>
      __HAL_RCC_ADC_CLK_ENABLE();
 8040872:	4b1b      	ldr	r3, [pc, #108]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040876:	4a1a      	ldr	r2, [pc, #104]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040878:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 804087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 804087e:	4b18      	ldr	r3, [pc, #96]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8040886:	60fb      	str	r3, [r7, #12]
 8040888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804088a:	4b15      	ldr	r3, [pc, #84]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 804088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804088e:	4a14      	ldr	r2, [pc, #80]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040890:	f043 0301 	orr.w	r3, r3, #1
 8040894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040896:	4b12      	ldr	r3, [pc, #72]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804089a:	f003 0301 	and.w	r3, r3, #1
 804089e:	60bb      	str	r3, [r7, #8]
 80408a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CURRENT_AN_Pin;
 80408a2:	2380      	movs	r3, #128	; 0x80
 80408a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80408a8:	2303      	movs	r3, #3
 80408aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80408ae:	2300      	movs	r3, #0
 80408b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(CURRENT_AN_GPIO_Port, &GPIO_InitStruct);
 80408b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80408b8:	4619      	mov	r1, r3
 80408ba:	480e      	ldr	r0, [pc, #56]	; (80408f4 <HAL_ADC_MspInit+0x1ec>)
 80408bc:	f008 f9e4 	bl	8048c88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80408c0:	2200      	movs	r2, #0
 80408c2:	2100      	movs	r1, #0
 80408c4:	2025      	movs	r0, #37	; 0x25
 80408c6:	f007 fea5 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80408ca:	2025      	movs	r0, #37	; 0x25
 80408cc:	f007 febc 	bl	8048648 <HAL_NVIC_EnableIRQ>
}
 80408d0:	bf00      	nop
 80408d2:	37c0      	adds	r7, #192	; 0xc0
 80408d4:	46bd      	mov	sp, r7
 80408d6:	bd80      	pop	{r7, pc}
 80408d8:	42028000 	.word	0x42028000
 80408dc:	200180e0 	.word	0x200180e0
 80408e0:	40021000 	.word	0x40021000
 80408e4:	42020400 	.word	0x42020400
 80408e8:	20018f7c 	.word	0x20018f7c
 80408ec:	4002046c 	.word	0x4002046c
 80408f0:	42028100 	.word	0x42028100
 80408f4:	42020000 	.word	0x42020000

080408f8 <LL_CRC_SetPolynomialSize>:
  *         @arg @ref LL_CRC_POLYLENGTH_8B
  *         @arg @ref LL_CRC_POLYLENGTH_7B
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialSize(CRC_TypeDef *CRCx, uint32_t PolySize)
{
 80408f8:	b480      	push	{r7}
 80408fa:	b083      	sub	sp, #12
 80408fc:	af00      	add	r7, sp, #0
 80408fe:	6078      	str	r0, [r7, #4]
 8040900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_POLYSIZE, PolySize);
 8040902:	687b      	ldr	r3, [r7, #4]
 8040904:	689b      	ldr	r3, [r3, #8]
 8040906:	f023 0218 	bic.w	r2, r3, #24
 804090a:	683b      	ldr	r3, [r7, #0]
 804090c:	431a      	orrs	r2, r3
 804090e:	687b      	ldr	r3, [r7, #4]
 8040910:	609a      	str	r2, [r3, #8]
}
 8040912:	bf00      	nop
 8040914:	370c      	adds	r7, #12
 8040916:	46bd      	mov	sp, r7
 8040918:	f85d 7b04 	ldr.w	r7, [sp], #4
 804091c:	4770      	bx	lr

0804091e <LL_CRC_SetInputDataReverseMode>:
  *         @arg @ref LL_CRC_INDATA_REVERSE_HALFWORD
  *         @arg @ref LL_CRC_INDATA_REVERSE_WORD
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 804091e:	b480      	push	{r7}
 8040920:	b083      	sub	sp, #12
 8040922:	af00      	add	r7, sp, #0
 8040924:	6078      	str	r0, [r7, #4]
 8040926:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_IN, ReverseMode);
 8040928:	687b      	ldr	r3, [r7, #4]
 804092a:	689b      	ldr	r3, [r3, #8]
 804092c:	f023 0260 	bic.w	r2, r3, #96	; 0x60
 8040930:	683b      	ldr	r3, [r7, #0]
 8040932:	431a      	orrs	r2, r3
 8040934:	687b      	ldr	r3, [r7, #4]
 8040936:	609a      	str	r2, [r3, #8]
}
 8040938:	bf00      	nop
 804093a:	370c      	adds	r7, #12
 804093c:	46bd      	mov	sp, r7
 804093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040942:	4770      	bx	lr

08040944 <LL_CRC_SetOutputDataReverseMode>:
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_NONE
  *         @arg @ref LL_CRC_OUTDATA_REVERSE_BIT
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetOutputDataReverseMode(CRC_TypeDef *CRCx, uint32_t ReverseMode)
{
 8040944:	b480      	push	{r7}
 8040946:	b083      	sub	sp, #12
 8040948:	af00      	add	r7, sp, #0
 804094a:	6078      	str	r0, [r7, #4]
 804094c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(CRCx->CR, CRC_CR_REV_OUT, ReverseMode);
 804094e:	687b      	ldr	r3, [r7, #4]
 8040950:	689b      	ldr	r3, [r3, #8]
 8040952:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8040956:	683b      	ldr	r3, [r7, #0]
 8040958:	431a      	orrs	r2, r3
 804095a:	687b      	ldr	r3, [r7, #4]
 804095c:	609a      	str	r2, [r3, #8]
}
 804095e:	bf00      	nop
 8040960:	370c      	adds	r7, #12
 8040962:	46bd      	mov	sp, r7
 8040964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040968:	4770      	bx	lr

0804096a <LL_CRC_SetInitialData>:
  * @param  CRCx CRC Instance
  * @param  InitCrc Value to be programmed in Programmable initial CRC value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetInitialData(CRC_TypeDef *CRCx, uint32_t InitCrc)
{
 804096a:	b480      	push	{r7}
 804096c:	b083      	sub	sp, #12
 804096e:	af00      	add	r7, sp, #0
 8040970:	6078      	str	r0, [r7, #4]
 8040972:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->INIT, InitCrc);
 8040974:	687b      	ldr	r3, [r7, #4]
 8040976:	683a      	ldr	r2, [r7, #0]
 8040978:	611a      	str	r2, [r3, #16]
}
 804097a:	bf00      	nop
 804097c:	370c      	adds	r7, #12
 804097e:	46bd      	mov	sp, r7
 8040980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040984:	4770      	bx	lr

08040986 <LL_CRC_SetPolynomialCoef>:
  * @param  CRCx CRC Instance
  * @param  PolynomCoef Value to be programmed in Programmable Polynomial value register
  * @retval None
  */
__STATIC_INLINE void LL_CRC_SetPolynomialCoef(CRC_TypeDef *CRCx, uint32_t PolynomCoef)
{
 8040986:	b480      	push	{r7}
 8040988:	b083      	sub	sp, #12
 804098a:	af00      	add	r7, sp, #0
 804098c:	6078      	str	r0, [r7, #4]
 804098e:	6039      	str	r1, [r7, #0]
  WRITE_REG(CRCx->POL, PolynomCoef);
 8040990:	687b      	ldr	r3, [r7, #4]
 8040992:	683a      	ldr	r2, [r7, #0]
 8040994:	615a      	str	r2, [r3, #20]
}
 8040996:	bf00      	nop
 8040998:	370c      	adds	r7, #12
 804099a:	46bd      	mov	sp, r7
 804099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409a0:	4770      	bx	lr
	...

080409a4 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_GTZC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80409a4:	b480      	push	{r7}
 80409a6:	b085      	sub	sp, #20
 80409a8:	af00      	add	r7, sp, #0
 80409aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80409ac:	4b08      	ldr	r3, [pc, #32]	; (80409d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80409ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80409b0:	4907      	ldr	r1, [pc, #28]	; (80409d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80409b2:	687b      	ldr	r3, [r7, #4]
 80409b4:	4313      	orrs	r3, r2
 80409b6:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80409b8:	4b05      	ldr	r3, [pc, #20]	; (80409d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80409ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80409bc:	687b      	ldr	r3, [r7, #4]
 80409be:	4013      	ands	r3, r2
 80409c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80409c2:	68fb      	ldr	r3, [r7, #12]
}
 80409c4:	bf00      	nop
 80409c6:	3714      	adds	r7, #20
 80409c8:	46bd      	mov	sp, r7
 80409ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409ce:	4770      	bx	lr
 80409d0:	40021000 	.word	0x40021000

080409d4 <MX_CRC_Init>:

/* USER CODE END 0 */

/* CRC init function */
void MX_CRC_Init(void)
{
 80409d4:	b580      	push	{r7, lr}
 80409d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CRC_Init 0 */

  /* USER CODE END CRC_Init 0 */

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 80409d8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80409dc:	f7ff ffe2 	bl	80409a4 <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  LL_CRC_SetInputDataReverseMode(CRC, LL_CRC_INDATA_REVERSE_NONE);
 80409e0:	2100      	movs	r1, #0
 80409e2:	480b      	ldr	r0, [pc, #44]	; (8040a10 <MX_CRC_Init+0x3c>)
 80409e4:	f7ff ff9b 	bl	804091e <LL_CRC_SetInputDataReverseMode>
  LL_CRC_SetOutputDataReverseMode(CRC, LL_CRC_OUTDATA_REVERSE_NONE);
 80409e8:	2100      	movs	r1, #0
 80409ea:	4809      	ldr	r0, [pc, #36]	; (8040a10 <MX_CRC_Init+0x3c>)
 80409ec:	f7ff ffaa 	bl	8040944 <LL_CRC_SetOutputDataReverseMode>
  LL_CRC_SetPolynomialCoef(CRC, LL_CRC_DEFAULT_CRC32_POLY);
 80409f0:	4908      	ldr	r1, [pc, #32]	; (8040a14 <MX_CRC_Init+0x40>)
 80409f2:	4807      	ldr	r0, [pc, #28]	; (8040a10 <MX_CRC_Init+0x3c>)
 80409f4:	f7ff ffc7 	bl	8040986 <LL_CRC_SetPolynomialCoef>
  LL_CRC_SetPolynomialSize(CRC, LL_CRC_POLYLENGTH_32B);
 80409f8:	2100      	movs	r1, #0
 80409fa:	4805      	ldr	r0, [pc, #20]	; (8040a10 <MX_CRC_Init+0x3c>)
 80409fc:	f7ff ff7c 	bl	80408f8 <LL_CRC_SetPolynomialSize>
  LL_CRC_SetInitialData(CRC, LL_CRC_DEFAULT_CRC_INITVALUE);
 8040a00:	f04f 31ff 	mov.w	r1, #4294967295
 8040a04:	4802      	ldr	r0, [pc, #8]	; (8040a10 <MX_CRC_Init+0x3c>)
 8040a06:	f7ff ffb0 	bl	804096a <LL_CRC_SetInitialData>
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8040a0a:	bf00      	nop
 8040a0c:	bd80      	pop	{r7, pc}
 8040a0e:	bf00      	nop
 8040a10:	40023000 	.word	0x40023000
 8040a14:	04c11db7 	.word	0x04c11db7

08040a18 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 8040a18:	b580      	push	{r7, lr}
 8040a1a:	b082      	sub	sp, #8
 8040a1c:	af00      	add	r7, sp, #0
 8040a1e:	6078      	str	r0, [r7, #4]
    HAL_Delay( ms );
 8040a20:	6878      	ldr	r0, [r7, #4]
 8040a22:	f005 fe7d 	bl	8046720 <HAL_Delay>
}
 8040a26:	bf00      	nop
 8040a28:	3708      	adds	r7, #8
 8040a2a:	46bd      	mov	sp, r7
 8040a2c:	bd80      	pop	{r7, pc}
	...

08040a30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8040a30:	b580      	push	{r7, lr}
 8040a32:	b084      	sub	sp, #16
 8040a34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8040a36:	4b28      	ldr	r3, [pc, #160]	; (8040ad8 <MX_DMA_Init+0xa8>)
 8040a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8040a3a:	4a27      	ldr	r2, [pc, #156]	; (8040ad8 <MX_DMA_Init+0xa8>)
 8040a3c:	f043 0304 	orr.w	r3, r3, #4
 8040a40:	6493      	str	r3, [r2, #72]	; 0x48
 8040a42:	4b25      	ldr	r3, [pc, #148]	; (8040ad8 <MX_DMA_Init+0xa8>)
 8040a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8040a46:	f003 0304 	and.w	r3, r3, #4
 8040a4a:	60fb      	str	r3, [r7, #12]
 8040a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8040a4e:	4b22      	ldr	r3, [pc, #136]	; (8040ad8 <MX_DMA_Init+0xa8>)
 8040a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8040a52:	4a21      	ldr	r2, [pc, #132]	; (8040ad8 <MX_DMA_Init+0xa8>)
 8040a54:	f043 0301 	orr.w	r3, r3, #1
 8040a58:	6493      	str	r3, [r2, #72]	; 0x48
 8040a5a:	4b1f      	ldr	r3, [pc, #124]	; (8040ad8 <MX_DMA_Init+0xa8>)
 8040a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8040a5e:	f003 0301 	and.w	r3, r3, #1
 8040a62:	60bb      	str	r3, [r7, #8]
 8040a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8040a66:	4b1c      	ldr	r3, [pc, #112]	; (8040ad8 <MX_DMA_Init+0xa8>)
 8040a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8040a6a:	4a1b      	ldr	r2, [pc, #108]	; (8040ad8 <MX_DMA_Init+0xa8>)
 8040a6c:	f043 0302 	orr.w	r3, r3, #2
 8040a70:	6493      	str	r3, [r2, #72]	; 0x48
 8040a72:	4b19      	ldr	r3, [pc, #100]	; (8040ad8 <MX_DMA_Init+0xa8>)
 8040a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8040a76:	f003 0302 	and.w	r3, r3, #2
 8040a7a:	607b      	str	r3, [r7, #4]
 8040a7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8040a7e:	2200      	movs	r2, #0
 8040a80:	2100      	movs	r1, #0
 8040a82:	2021      	movs	r0, #33	; 0x21
 8040a84:	f007 fdc6 	bl	8048614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8040a88:	2021      	movs	r0, #33	; 0x21
 8040a8a:	f007 fddd 	bl	8048648 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8040a8e:	2200      	movs	r2, #0
 8040a90:	2100      	movs	r1, #0
 8040a92:	2022      	movs	r0, #34	; 0x22
 8040a94:	f007 fdbe 	bl	8048614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8040a98:	2022      	movs	r0, #34	; 0x22
 8040a9a:	f007 fdd5 	bl	8048648 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8040a9e:	2200      	movs	r2, #0
 8040aa0:	2100      	movs	r1, #0
 8040aa2:	2051      	movs	r0, #81	; 0x51
 8040aa4:	f007 fdb6 	bl	8048614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8040aa8:	2051      	movs	r0, #81	; 0x51
 8040aaa:	f007 fdcd 	bl	8048648 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8040aae:	2200      	movs	r2, #0
 8040ab0:	2100      	movs	r1, #0
 8040ab2:	2052      	movs	r0, #82	; 0x52
 8040ab4:	f007 fdae 	bl	8048614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8040ab8:	2052      	movs	r0, #82	; 0x52
 8040aba:	f007 fdc5 	bl	8048648 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8040abe:	2200      	movs	r2, #0
 8040ac0:	2100      	movs	r1, #0
 8040ac2:	2055      	movs	r0, #85	; 0x55
 8040ac4:	f007 fda6 	bl	8048614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8040ac8:	2055      	movs	r0, #85	; 0x55
 8040aca:	f007 fdbd 	bl	8048648 <HAL_NVIC_EnableIRQ>

}
 8040ace:	bf00      	nop
 8040ad0:	3710      	adds	r7, #16
 8040ad2:	46bd      	mov	sp, r7
 8040ad4:	bd80      	pop	{r7, pc}
 8040ad6:	bf00      	nop
 8040ad8:	40021000 	.word	0x40021000

08040adc <MX_GPIO_Init>:
     PB15   ------> UCPD1_CC2
     PA15 (JTDI)   ------> UCPD1_CC1
     PB5   ------> UCPD1_DBCC1
*/
void MX_GPIO_Init(void)
{
 8040adc:	b580      	push	{r7, lr}
 8040ade:	b08a      	sub	sp, #40	; 0x28
 8040ae0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040ae2:	f107 0314 	add.w	r3, r7, #20
 8040ae6:	2200      	movs	r2, #0
 8040ae8:	601a      	str	r2, [r3, #0]
 8040aea:	605a      	str	r2, [r3, #4]
 8040aec:	609a      	str	r2, [r3, #8]
 8040aee:	60da      	str	r2, [r3, #12]
 8040af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8040af2:	4b5c      	ldr	r3, [pc, #368]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040af6:	4a5b      	ldr	r2, [pc, #364]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040af8:	f043 0310 	orr.w	r3, r3, #16
 8040afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040afe:	4b59      	ldr	r3, [pc, #356]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040b02:	f003 0310 	and.w	r3, r3, #16
 8040b06:	613b      	str	r3, [r7, #16]
 8040b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040b0a:	4b56      	ldr	r3, [pc, #344]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040b0e:	4a55      	ldr	r2, [pc, #340]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040b10:	f043 0301 	orr.w	r3, r3, #1
 8040b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040b16:	4b53      	ldr	r3, [pc, #332]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040b1a:	f003 0301 	and.w	r3, r3, #1
 8040b1e:	60fb      	str	r3, [r7, #12]
 8040b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040b22:	4b50      	ldr	r3, [pc, #320]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040b26:	4a4f      	ldr	r2, [pc, #316]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040b28:	f043 0304 	orr.w	r3, r3, #4
 8040b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040b2e:	4b4d      	ldr	r3, [pc, #308]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040b32:	f003 0304 	and.w	r3, r3, #4
 8040b36:	60bb      	str	r3, [r7, #8]
 8040b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040b3a:	4b4a      	ldr	r3, [pc, #296]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040b3e:	4a49      	ldr	r2, [pc, #292]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040b40:	f043 0302 	orr.w	r3, r3, #2
 8040b44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040b46:	4b47      	ldr	r3, [pc, #284]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040b4a:	f003 0302 	and.w	r3, r3, #2
 8040b4e:	607b      	str	r3, [r7, #4]
 8040b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040b52:	4b44      	ldr	r3, [pc, #272]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040b56:	4a43      	ldr	r2, [pc, #268]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040b58:	f043 0308 	orr.w	r3, r3, #8
 8040b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040b5e:	4b41      	ldr	r3, [pc, #260]	; (8040c64 <MX_GPIO_Init+0x188>)
 8040b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040b62:	f003 0308 	and.w	r3, r3, #8
 8040b66:	603b      	str	r3, [r7, #0]
 8040b68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, GPIO_PIN_SET);
 8040b6a:	2201      	movs	r2, #1
 8040b6c:	2110      	movs	r1, #16
 8040b6e:	483e      	ldr	r0, [pc, #248]	; (8040c68 <MX_GPIO_Init+0x18c>)
 8040b70:	f008 fb10 	bl	8049194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LR_NSS_Pin|LR_NRST_Pin, GPIO_PIN_SET);
 8040b74:	2201      	movs	r2, #1
 8040b76:	2105      	movs	r1, #5
 8040b78:	483c      	ldr	r0, [pc, #240]	; (8040c6c <MX_GPIO_Init+0x190>)
 8040b7a:	f008 fb0b 	bl	8049194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYO_DEN_GPIO_Port, GYO_DEN_Pin, GPIO_PIN_RESET);
 8040b7e:	2200      	movs	r2, #0
 8040b80:	2102      	movs	r1, #2
 8040b82:	483b      	ldr	r0, [pc, #236]	; (8040c70 <MX_GPIO_Init+0x194>)
 8040b84:	f008 fb06 	bl	8049194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYO_INT2_Pin;
 8040b88:	2308      	movs	r3, #8
 8040b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8040b8c:	4b39      	ldr	r3, [pc, #228]	; (8040c74 <MX_GPIO_Init+0x198>)
 8040b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040b90:	2300      	movs	r3, #0
 8040b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYO_INT2_GPIO_Port, &GPIO_InitStruct);
 8040b94:	f107 0314 	add.w	r3, r7, #20
 8040b98:	4619      	mov	r1, r3
 8040b9a:	4835      	ldr	r0, [pc, #212]	; (8040c70 <MX_GPIO_Init+0x194>)
 8040b9c:	f008 f874 	bl	8048c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CURRENT_CS_Pin;
 8040ba0:	2310      	movs	r3, #16
 8040ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040ba4:	2301      	movs	r3, #1
 8040ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040ba8:	2300      	movs	r3, #0
 8040baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040bac:	2300      	movs	r3, #0
 8040bae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CURRENT_CS_GPIO_Port, &GPIO_InitStruct);
 8040bb0:	f107 0314 	add.w	r3, r7, #20
 8040bb4:	4619      	mov	r1, r3
 8040bb6:	482c      	ldr	r0, [pc, #176]	; (8040c68 <MX_GPIO_Init+0x18c>)
 8040bb8:	f008 f866 	bl	8048c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8040bbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8040bc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8040bc2:	2303      	movs	r3, #3
 8040bc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040bc6:	2300      	movs	r3, #0
 8040bc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8040bca:	f107 0314 	add.w	r3, r7, #20
 8040bce:	4619      	mov	r1, r3
 8040bd0:	4829      	ldr	r0, [pc, #164]	; (8040c78 <MX_GPIO_Init+0x19c>)
 8040bd2:	f008 f859 	bl	8048c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LR_RFSW2_Pin|LR_RFSW3_Pin;
 8040bd6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8040bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8040bdc:	2300      	movs	r3, #0
 8040bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040be0:	2300      	movs	r3, #0
 8040be2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040be4:	f107 0314 	add.w	r3, r7, #20
 8040be8:	4619      	mov	r1, r3
 8040bea:	4820      	ldr	r0, [pc, #128]	; (8040c6c <MX_GPIO_Init+0x190>)
 8040bec:	f008 f84c 	bl	8048c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LR_IRQ_Pin|LR_BUSY_Pin;
 8040bf0:	f244 0302 	movw	r3, #16386	; 0x4002
 8040bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8040bf6:	4b1f      	ldr	r3, [pc, #124]	; (8040c74 <MX_GPIO_Init+0x198>)
 8040bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040bfa:	2300      	movs	r3, #0
 8040bfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040bfe:	f107 0314 	add.w	r3, r7, #20
 8040c02:	4619      	mov	r1, r3
 8040c04:	4819      	ldr	r0, [pc, #100]	; (8040c6c <MX_GPIO_Init+0x190>)
 8040c06:	f008 f83f 	bl	8048c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_CC1_Pin;
 8040c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8040c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8040c10:	2303      	movs	r3, #3
 8040c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040c14:	2300      	movs	r3, #0
 8040c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OTG_FS_CC1_GPIO_Port, &GPIO_InitStruct);
 8040c18:	f107 0314 	add.w	r3, r7, #20
 8040c1c:	4619      	mov	r1, r3
 8040c1e:	4812      	ldr	r0, [pc, #72]	; (8040c68 <MX_GPIO_Init+0x18c>)
 8040c20:	f008 f832 	bl	8048c88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LR_NSS_Pin|LR_NRST_Pin;
 8040c24:	2305      	movs	r3, #5
 8040c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040c28:	2301      	movs	r3, #1
 8040c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040c2c:	2300      	movs	r3, #0
 8040c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040c30:	2300      	movs	r3, #0
 8040c32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040c34:	f107 0314 	add.w	r3, r7, #20
 8040c38:	4619      	mov	r1, r3
 8040c3a:	480c      	ldr	r0, [pc, #48]	; (8040c6c <MX_GPIO_Init+0x190>)
 8040c3c:	f008 f824 	bl	8048c88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYO_DEN_Pin;
 8040c40:	2302      	movs	r3, #2
 8040c42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040c44:	2301      	movs	r3, #1
 8040c46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040c48:	2300      	movs	r3, #0
 8040c4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040c4c:	2300      	movs	r3, #0
 8040c4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYO_DEN_GPIO_Port, &GPIO_InitStruct);
 8040c50:	f107 0314 	add.w	r3, r7, #20
 8040c54:	4619      	mov	r1, r3
 8040c56:	4806      	ldr	r0, [pc, #24]	; (8040c70 <MX_GPIO_Init+0x194>)
 8040c58:	f008 f816 	bl	8048c88 <HAL_GPIO_Init>

}
 8040c5c:	bf00      	nop
 8040c5e:	3728      	adds	r7, #40	; 0x28
 8040c60:	46bd      	mov	sp, r7
 8040c62:	bd80      	pop	{r7, pc}
 8040c64:	40021000 	.word	0x40021000
 8040c68:	42020000 	.word	0x42020000
 8040c6c:	42020c00 	.word	0x42020c00
 8040c70:	42021000 	.word	0x42021000
 8040c74:	10110000 	.word	0x10110000
 8040c78:	42020400 	.word	0x42020400

08040c7c <GpioInit>:

/* USER CODE BEGIN 2 */
static Gpio_t *GpioIrq[16];

void GpioInit( Gpio_t *obj, void* port, uint16_t pin, PinModes mode, PinConfigs config, PinTypes type, uint32_t value )
{
 8040c7c:	b580      	push	{r7, lr}
 8040c7e:	b08e      	sub	sp, #56	; 0x38
 8040c80:	af00      	add	r7, sp, #0
 8040c82:	60f8      	str	r0, [r7, #12]
 8040c84:	60b9      	str	r1, [r7, #8]
 8040c86:	4611      	mov	r1, r2
 8040c88:	461a      	mov	r2, r3
 8040c8a:	460b      	mov	r3, r1
 8040c8c:	80fb      	strh	r3, [r7, #6]
 8040c8e:	4613      	mov	r3, r2
 8040c90:	717b      	strb	r3, [r7, #5]
//    if( pin < IOE_0 )
//    {
        GPIO_InitTypeDef GPIO_InitStructure;

        obj->pin = pin;
 8040c92:	88fb      	ldrh	r3, [r7, #6]
 8040c94:	b25a      	sxtb	r2, r3
 8040c96:	68fb      	ldr	r3, [r7, #12]
 8040c98:	701a      	strb	r2, [r3, #0]

        if( pin == NC  || port == NULL)
 8040c9a:	68bb      	ldr	r3, [r7, #8]
 8040c9c:	2b00      	cmp	r3, #0
 8040c9e:	f000 80a9 	beq.w	8040df4 <GpioInit+0x178>
        {
            return;
        }

        obj->pinIndex = pin; //( 0x01 << ( obj->pin & 0x0F ) );
 8040ca2:	68fb      	ldr	r3, [r7, #12]
 8040ca4:	88fa      	ldrh	r2, [r7, #6]
 8040ca6:	805a      	strh	r2, [r3, #2]
        obj->port = port;
 8040ca8:	68fb      	ldr	r3, [r7, #12]
 8040caa:	68ba      	ldr	r2, [r7, #8]
 8040cac:	605a      	str	r2, [r3, #4]
        if( ( obj->port ) == GPIOA )
 8040cae:	68fb      	ldr	r3, [r7, #12]
 8040cb0:	685b      	ldr	r3, [r3, #4]
 8040cb2:	4a52      	ldr	r2, [pc, #328]	; (8040dfc <GpioInit+0x180>)
 8040cb4:	4293      	cmp	r3, r2
 8040cb6:	d10f      	bne.n	8040cd8 <GpioInit+0x5c>
        {
            obj->port = GPIOA;
 8040cb8:	68fb      	ldr	r3, [r7, #12]
 8040cba:	4a50      	ldr	r2, [pc, #320]	; (8040dfc <GpioInit+0x180>)
 8040cbc:	605a      	str	r2, [r3, #4]
            __HAL_RCC_GPIOA_CLK_ENABLE( );
 8040cbe:	4b50      	ldr	r3, [pc, #320]	; (8040e00 <GpioInit+0x184>)
 8040cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040cc2:	4a4f      	ldr	r2, [pc, #316]	; (8040e00 <GpioInit+0x184>)
 8040cc4:	f043 0301 	orr.w	r3, r3, #1
 8040cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040cca:	4b4d      	ldr	r3, [pc, #308]	; (8040e00 <GpioInit+0x184>)
 8040ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040cce:	f003 0301 	and.w	r3, r3, #1
 8040cd2:	623b      	str	r3, [r7, #32]
 8040cd4:	6a3b      	ldr	r3, [r7, #32]
 8040cd6:	e04d      	b.n	8040d74 <GpioInit+0xf8>
        }
        else if( ( obj->port ) == GPIOB )
 8040cd8:	68fb      	ldr	r3, [r7, #12]
 8040cda:	685b      	ldr	r3, [r3, #4]
 8040cdc:	4a49      	ldr	r2, [pc, #292]	; (8040e04 <GpioInit+0x188>)
 8040cde:	4293      	cmp	r3, r2
 8040ce0:	d10f      	bne.n	8040d02 <GpioInit+0x86>
        {
            obj->port = GPIOB;
 8040ce2:	68fb      	ldr	r3, [r7, #12]
 8040ce4:	4a47      	ldr	r2, [pc, #284]	; (8040e04 <GpioInit+0x188>)
 8040ce6:	605a      	str	r2, [r3, #4]
            __HAL_RCC_GPIOB_CLK_ENABLE( );
 8040ce8:	4b45      	ldr	r3, [pc, #276]	; (8040e00 <GpioInit+0x184>)
 8040cea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040cec:	4a44      	ldr	r2, [pc, #272]	; (8040e00 <GpioInit+0x184>)
 8040cee:	f043 0302 	orr.w	r3, r3, #2
 8040cf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040cf4:	4b42      	ldr	r3, [pc, #264]	; (8040e00 <GpioInit+0x184>)
 8040cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040cf8:	f003 0302 	and.w	r3, r3, #2
 8040cfc:	61fb      	str	r3, [r7, #28]
 8040cfe:	69fb      	ldr	r3, [r7, #28]
 8040d00:	e038      	b.n	8040d74 <GpioInit+0xf8>
        }
        else if( ( obj->port ) == GPIOC )
 8040d02:	68fb      	ldr	r3, [r7, #12]
 8040d04:	685b      	ldr	r3, [r3, #4]
 8040d06:	4a40      	ldr	r2, [pc, #256]	; (8040e08 <GpioInit+0x18c>)
 8040d08:	4293      	cmp	r3, r2
 8040d0a:	d10f      	bne.n	8040d2c <GpioInit+0xb0>
        {
            obj->port = GPIOC;
 8040d0c:	68fb      	ldr	r3, [r7, #12]
 8040d0e:	4a3e      	ldr	r2, [pc, #248]	; (8040e08 <GpioInit+0x18c>)
 8040d10:	605a      	str	r2, [r3, #4]
            __HAL_RCC_GPIOC_CLK_ENABLE( );
 8040d12:	4b3b      	ldr	r3, [pc, #236]	; (8040e00 <GpioInit+0x184>)
 8040d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040d16:	4a3a      	ldr	r2, [pc, #232]	; (8040e00 <GpioInit+0x184>)
 8040d18:	f043 0304 	orr.w	r3, r3, #4
 8040d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040d1e:	4b38      	ldr	r3, [pc, #224]	; (8040e00 <GpioInit+0x184>)
 8040d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040d22:	f003 0304 	and.w	r3, r3, #4
 8040d26:	61bb      	str	r3, [r7, #24]
 8040d28:	69bb      	ldr	r3, [r7, #24]
 8040d2a:	e023      	b.n	8040d74 <GpioInit+0xf8>
        }
        else if( ( obj->port ) == GPIOD )
 8040d2c:	68fb      	ldr	r3, [r7, #12]
 8040d2e:	685b      	ldr	r3, [r3, #4]
 8040d30:	4a36      	ldr	r2, [pc, #216]	; (8040e0c <GpioInit+0x190>)
 8040d32:	4293      	cmp	r3, r2
 8040d34:	d10f      	bne.n	8040d56 <GpioInit+0xda>
        {
            obj->port = GPIOD;
 8040d36:	68fb      	ldr	r3, [r7, #12]
 8040d38:	4a34      	ldr	r2, [pc, #208]	; (8040e0c <GpioInit+0x190>)
 8040d3a:	605a      	str	r2, [r3, #4]
            __HAL_RCC_GPIOD_CLK_ENABLE( );
 8040d3c:	4b30      	ldr	r3, [pc, #192]	; (8040e00 <GpioInit+0x184>)
 8040d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040d40:	4a2f      	ldr	r2, [pc, #188]	; (8040e00 <GpioInit+0x184>)
 8040d42:	f043 0308 	orr.w	r3, r3, #8
 8040d46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040d48:	4b2d      	ldr	r3, [pc, #180]	; (8040e00 <GpioInit+0x184>)
 8040d4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040d4c:	f003 0308 	and.w	r3, r3, #8
 8040d50:	617b      	str	r3, [r7, #20]
 8040d52:	697b      	ldr	r3, [r7, #20]
 8040d54:	e00e      	b.n	8040d74 <GpioInit+0xf8>
        }
        else
        {
            obj->port = GPIOH;
 8040d56:	68fb      	ldr	r3, [r7, #12]
 8040d58:	4a2d      	ldr	r2, [pc, #180]	; (8040e10 <GpioInit+0x194>)
 8040d5a:	605a      	str	r2, [r3, #4]
            __HAL_RCC_GPIOH_CLK_ENABLE( );
 8040d5c:	4b28      	ldr	r3, [pc, #160]	; (8040e00 <GpioInit+0x184>)
 8040d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040d60:	4a27      	ldr	r2, [pc, #156]	; (8040e00 <GpioInit+0x184>)
 8040d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040d68:	4b25      	ldr	r3, [pc, #148]	; (8040e00 <GpioInit+0x184>)
 8040d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8040d70:	613b      	str	r3, [r7, #16]
 8040d72:	693b      	ldr	r3, [r7, #16]
        }

        GPIO_InitStructure.Pin =  obj->pinIndex ;
 8040d74:	68fb      	ldr	r3, [r7, #12]
 8040d76:	885b      	ldrh	r3, [r3, #2]
 8040d78:	627b      	str	r3, [r7, #36]	; 0x24
        GPIO_InitStructure.Pull = obj->pull = type;
 8040d7a:	68fb      	ldr	r3, [r7, #12]
 8040d7c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8040d80:	729a      	strb	r2, [r3, #10]
 8040d82:	68fb      	ldr	r3, [r7, #12]
 8040d84:	7a9b      	ldrb	r3, [r3, #10]
 8040d86:	62fb      	str	r3, [r7, #44]	; 0x2c
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8040d88:	2302      	movs	r3, #2
 8040d8a:	633b      	str	r3, [r7, #48]	; 0x30

        if( mode == PIN_INPUT )
 8040d8c:	797b      	ldrb	r3, [r7, #5]
 8040d8e:	2b00      	cmp	r3, #0
 8040d90:	d102      	bne.n	8040d98 <GpioInit+0x11c>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8040d92:	2300      	movs	r3, #0
 8040d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8040d96:	e01d      	b.n	8040dd4 <GpioInit+0x158>
        }
        else if( mode == PIN_ANALOGIC )
 8040d98:	797b      	ldrb	r3, [r7, #5]
 8040d9a:	2b03      	cmp	r3, #3
 8040d9c:	d102      	bne.n	8040da4 <GpioInit+0x128>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8040d9e:	2303      	movs	r3, #3
 8040da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8040da2:	e017      	b.n	8040dd4 <GpioInit+0x158>
        }
        else if( mode == PIN_ALTERNATE_FCT )
 8040da4:	797b      	ldrb	r3, [r7, #5]
 8040da6:	2b02      	cmp	r3, #2
 8040da8:	d10b      	bne.n	8040dc2 <GpioInit+0x146>
        {
            if( config == PIN_OPEN_DRAIN )
 8040daa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8040dae:	2b01      	cmp	r3, #1
 8040db0:	d102      	bne.n	8040db8 <GpioInit+0x13c>
            {
                GPIO_InitStructure.Mode = GPIO_MODE_AF_OD;
 8040db2:	2312      	movs	r3, #18
 8040db4:	62bb      	str	r3, [r7, #40]	; 0x28
 8040db6:	e001      	b.n	8040dbc <GpioInit+0x140>
            }
            else
            {
                GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8040db8:	2302      	movs	r3, #2
 8040dba:	62bb      	str	r3, [r7, #40]	; 0x28
            }
            GPIO_InitStructure.Alternate = value;
 8040dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8040dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8040dc0:	e008      	b.n	8040dd4 <GpioInit+0x158>
        }
        else // mode output
        {
            if( config == PIN_OPEN_DRAIN )
 8040dc2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8040dc6:	2b01      	cmp	r3, #1
 8040dc8:	d102      	bne.n	8040dd0 <GpioInit+0x154>
            {
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_OD;
 8040dca:	2311      	movs	r3, #17
 8040dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8040dce:	e001      	b.n	8040dd4 <GpioInit+0x158>
            }
            else
            {
                GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8040dd0:	2301      	movs	r3, #1
 8040dd2:	62bb      	str	r3, [r7, #40]	; 0x28
            }
        }

        // Sets initial output value
        if( mode == PIN_OUTPUT )
 8040dd4:	797b      	ldrb	r3, [r7, #5]
 8040dd6:	2b01      	cmp	r3, #1
 8040dd8:	d103      	bne.n	8040de2 <GpioInit+0x166>
        {
            GpioWrite( obj, value );
 8040dda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8040ddc:	68f8      	ldr	r0, [r7, #12]
 8040dde:	f000 f95f 	bl	80410a0 <GpioWrite>
        }

        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8040de2:	68fb      	ldr	r3, [r7, #12]
 8040de4:	685b      	ldr	r3, [r3, #4]
 8040de6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8040dea:	4611      	mov	r1, r2
 8040dec:	4618      	mov	r0, r3
 8040dee:	f007 ff4b 	bl	8048c88 <HAL_GPIO_Init>
 8040df2:	e000      	b.n	8040df6 <GpioInit+0x17a>
            return;
 8040df4:	bf00      	nop
//#if defined( BOARD_IOE_EXT )
//        // IOExt Pin
//        GpioIoeInit( obj, pin, mode, config, type, value );
//#endif
//    }
}
 8040df6:	3738      	adds	r7, #56	; 0x38
 8040df8:	46bd      	mov	sp, r7
 8040dfa:	bd80      	pop	{r7, pc}
 8040dfc:	42020000 	.word	0x42020000
 8040e00:	40021000 	.word	0x40021000
 8040e04:	42020400 	.word	0x42020400
 8040e08:	42020800 	.word	0x42020800
 8040e0c:	42020c00 	.word	0x42020c00
 8040e10:	42021c00 	.word	0x42021c00

08040e14 <GpioSetInterrupt>:
{
    obj->Context = context;
}

void GpioSetInterrupt( Gpio_t *obj, IrqModes irqMode, IrqPriorities irqPriority, GpioIrqHandler *irqHandler )
{
 8040e14:	b580      	push	{r7, lr}
 8040e16:	b08c      	sub	sp, #48	; 0x30
 8040e18:	af00      	add	r7, sp, #0
 8040e1a:	60f8      	str	r0, [r7, #12]
 8040e1c:	607b      	str	r3, [r7, #4]
 8040e1e:	460b      	mov	r3, r1
 8040e20:	72fb      	strb	r3, [r7, #11]
 8040e22:	4613      	mov	r3, r2
 8040e24:	72bb      	strb	r3, [r7, #10]
//    if( obj->pin < IOE_0 )
//    {
        uint32_t priority = 0;
 8040e26:	2300      	movs	r3, #0
 8040e28:	62fb      	str	r3, [r7, #44]	; 0x2c

        IRQn_Type IRQnb = EXTI0_IRQn;
 8040e2a:	230b      	movs	r3, #11
 8040e2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        GPIO_InitTypeDef   GPIO_InitStructure;

        if( irqHandler == NULL )
 8040e30:	687b      	ldr	r3, [r7, #4]
 8040e32:	2b00      	cmp	r3, #0
 8040e34:	f000 8127 	beq.w	8041086 <GpioSetInterrupt+0x272>
        {
            return;
        }

        obj->IrqHandler = irqHandler;
 8040e38:	68fb      	ldr	r3, [r7, #12]
 8040e3a:	687a      	ldr	r2, [r7, #4]
 8040e3c:	611a      	str	r2, [r3, #16]

        GPIO_InitStructure.Pin =  obj->pinIndex;
 8040e3e:	68fb      	ldr	r3, [r7, #12]
 8040e40:	885b      	ldrh	r3, [r3, #2]
 8040e42:	617b      	str	r3, [r7, #20]

        if( irqMode == IRQ_RISING_EDGE )
 8040e44:	7afb      	ldrb	r3, [r7, #11]
 8040e46:	2b01      	cmp	r3, #1
 8040e48:	d102      	bne.n	8040e50 <GpioSetInterrupt+0x3c>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8040e4a:	4b91      	ldr	r3, [pc, #580]	; (8041090 <GpioSetInterrupt+0x27c>)
 8040e4c:	61bb      	str	r3, [r7, #24]
 8040e4e:	e007      	b.n	8040e60 <GpioSetInterrupt+0x4c>
        }
        else if( irqMode == IRQ_FALLING_EDGE )
 8040e50:	7afb      	ldrb	r3, [r7, #11]
 8040e52:	2b02      	cmp	r3, #2
 8040e54:	d102      	bne.n	8040e5c <GpioSetInterrupt+0x48>
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_FALLING;
 8040e56:	4b8f      	ldr	r3, [pc, #572]	; (8041094 <GpioSetInterrupt+0x280>)
 8040e58:	61bb      	str	r3, [r7, #24]
 8040e5a:	e001      	b.n	8040e60 <GpioSetInterrupt+0x4c>
        }
        else
        {
            GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8040e5c:	4b8e      	ldr	r3, [pc, #568]	; (8041098 <GpioSetInterrupt+0x284>)
 8040e5e:	61bb      	str	r3, [r7, #24]
        }

        GPIO_InitStructure.Pull = obj->pull;
 8040e60:	68fb      	ldr	r3, [r7, #12]
 8040e62:	7a9b      	ldrb	r3, [r3, #10]
 8040e64:	61fb      	str	r3, [r7, #28]
        GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8040e66:	2302      	movs	r3, #2
 8040e68:	623b      	str	r3, [r7, #32]

        HAL_GPIO_Init( obj->port, &GPIO_InitStructure );
 8040e6a:	68fb      	ldr	r3, [r7, #12]
 8040e6c:	685b      	ldr	r3, [r3, #4]
 8040e6e:	f107 0214 	add.w	r2, r7, #20
 8040e72:	4611      	mov	r1, r2
 8040e74:	4618      	mov	r0, r3
 8040e76:	f007 ff07 	bl	8048c88 <HAL_GPIO_Init>

        switch( irqPriority )
 8040e7a:	7abb      	ldrb	r3, [r7, #10]
 8040e7c:	2b03      	cmp	r3, #3
 8040e7e:	d00f      	beq.n	8040ea0 <GpioSetInterrupt+0x8c>
 8040e80:	2b03      	cmp	r3, #3
 8040e82:	dc10      	bgt.n	8040ea6 <GpioSetInterrupt+0x92>
 8040e84:	2b01      	cmp	r3, #1
 8040e86:	dc02      	bgt.n	8040e8e <GpioSetInterrupt+0x7a>
 8040e88:	2b00      	cmp	r3, #0
 8040e8a:	da03      	bge.n	8040e94 <GpioSetInterrupt+0x80>
 8040e8c:	e00b      	b.n	8040ea6 <GpioSetInterrupt+0x92>
 8040e8e:	2b02      	cmp	r3, #2
 8040e90:	d003      	beq.n	8040e9a <GpioSetInterrupt+0x86>
 8040e92:	e008      	b.n	8040ea6 <GpioSetInterrupt+0x92>
        {
        case IRQ_VERY_LOW_PRIORITY:
        case IRQ_LOW_PRIORITY:
            priority = 3;
 8040e94:	2303      	movs	r3, #3
 8040e96:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8040e98:	e008      	b.n	8040eac <GpioSetInterrupt+0x98>
        case IRQ_MEDIUM_PRIORITY:
            priority = 2;
 8040e9a:	2302      	movs	r3, #2
 8040e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8040e9e:	e005      	b.n	8040eac <GpioSetInterrupt+0x98>
        case IRQ_HIGH_PRIORITY:
            priority = 1;
 8040ea0:	2301      	movs	r3, #1
 8040ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8040ea4:	e002      	b.n	8040eac <GpioSetInterrupt+0x98>
        case IRQ_VERY_HIGH_PRIORITY:
        default:
            priority = 0;
 8040ea6:	2300      	movs	r3, #0
 8040ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 8040eaa:	bf00      	nop
        }

        switch( obj->pinIndex )
 8040eac:	68fb      	ldr	r3, [r7, #12]
 8040eae:	885b      	ldrh	r3, [r3, #2]
 8040eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8040eb4:	f000 80cb 	beq.w	804104e <GpioSetInterrupt+0x23a>
 8040eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8040ebc:	f300 80cb 	bgt.w	8041056 <GpioSetInterrupt+0x242>
 8040ec0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8040ec4:	f000 80bf 	beq.w	8041046 <GpioSetInterrupt+0x232>
 8040ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8040ecc:	f300 80c3 	bgt.w	8041056 <GpioSetInterrupt+0x242>
 8040ed0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8040ed4:	f000 80b3 	beq.w	804103e <GpioSetInterrupt+0x22a>
 8040ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8040edc:	f300 80bb 	bgt.w	8041056 <GpioSetInterrupt+0x242>
 8040ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8040ee4:	f000 80a7 	beq.w	8041036 <GpioSetInterrupt+0x222>
 8040ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8040eec:	f300 80b3 	bgt.w	8041056 <GpioSetInterrupt+0x242>
 8040ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8040ef4:	f000 809b 	beq.w	804102e <GpioSetInterrupt+0x21a>
 8040ef8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8040efc:	f300 80ab 	bgt.w	8041056 <GpioSetInterrupt+0x242>
 8040f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8040f04:	f000 808f 	beq.w	8041026 <GpioSetInterrupt+0x212>
 8040f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8040f0c:	f300 80a3 	bgt.w	8041056 <GpioSetInterrupt+0x242>
 8040f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8040f14:	f000 8083 	beq.w	804101e <GpioSetInterrupt+0x20a>
 8040f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8040f1c:	f300 809b 	bgt.w	8041056 <GpioSetInterrupt+0x242>
 8040f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8040f24:	d077      	beq.n	8041016 <GpioSetInterrupt+0x202>
 8040f26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8040f2a:	f300 8094 	bgt.w	8041056 <GpioSetInterrupt+0x242>
 8040f2e:	2b80      	cmp	r3, #128	; 0x80
 8040f30:	d06d      	beq.n	804100e <GpioSetInterrupt+0x1fa>
 8040f32:	2b80      	cmp	r3, #128	; 0x80
 8040f34:	f300 808f 	bgt.w	8041056 <GpioSetInterrupt+0x242>
 8040f38:	2b20      	cmp	r3, #32
 8040f3a:	dc49      	bgt.n	8040fd0 <GpioSetInterrupt+0x1bc>
 8040f3c:	2b00      	cmp	r3, #0
 8040f3e:	f340 808a 	ble.w	8041056 <GpioSetInterrupt+0x242>
 8040f42:	3b01      	subs	r3, #1
 8040f44:	2b1f      	cmp	r3, #31
 8040f46:	f200 8086 	bhi.w	8041056 <GpioSetInterrupt+0x242>
 8040f4a:	a201      	add	r2, pc, #4	; (adr r2, 8040f50 <GpioSetInterrupt+0x13c>)
 8040f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8040f50:	08040fd7 	.word	0x08040fd7
 8040f54:	08040fdf 	.word	0x08040fdf
 8040f58:	08041057 	.word	0x08041057
 8040f5c:	08040fe7 	.word	0x08040fe7
 8040f60:	08041057 	.word	0x08041057
 8040f64:	08041057 	.word	0x08041057
 8040f68:	08041057 	.word	0x08041057
 8040f6c:	08040fef 	.word	0x08040fef
 8040f70:	08041057 	.word	0x08041057
 8040f74:	08041057 	.word	0x08041057
 8040f78:	08041057 	.word	0x08041057
 8040f7c:	08041057 	.word	0x08041057
 8040f80:	08041057 	.word	0x08041057
 8040f84:	08041057 	.word	0x08041057
 8040f88:	08041057 	.word	0x08041057
 8040f8c:	08040ff7 	.word	0x08040ff7
 8040f90:	08041057 	.word	0x08041057
 8040f94:	08041057 	.word	0x08041057
 8040f98:	08041057 	.word	0x08041057
 8040f9c:	08041057 	.word	0x08041057
 8040fa0:	08041057 	.word	0x08041057
 8040fa4:	08041057 	.word	0x08041057
 8040fa8:	08041057 	.word	0x08041057
 8040fac:	08041057 	.word	0x08041057
 8040fb0:	08041057 	.word	0x08041057
 8040fb4:	08041057 	.word	0x08041057
 8040fb8:	08041057 	.word	0x08041057
 8040fbc:	08041057 	.word	0x08041057
 8040fc0:	08041057 	.word	0x08041057
 8040fc4:	08041057 	.word	0x08041057
 8040fc8:	08041057 	.word	0x08041057
 8040fcc:	08040fff 	.word	0x08040fff
 8040fd0:	2b40      	cmp	r3, #64	; 0x40
 8040fd2:	d018      	beq.n	8041006 <GpioSetInterrupt+0x1f2>
            break;
        case GPIO_PIN_15:
            IRQnb = EXTI15_IRQn;
            break;
        default:
            break;
 8040fd4:	e03f      	b.n	8041056 <GpioSetInterrupt+0x242>
            IRQnb = EXTI0_IRQn;
 8040fd6:	230b      	movs	r3, #11
 8040fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8040fdc:	e03c      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI1_IRQn;
 8040fde:	230c      	movs	r3, #12
 8040fe0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8040fe4:	e038      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI2_IRQn;
 8040fe6:	230d      	movs	r3, #13
 8040fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8040fec:	e034      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI3_IRQn;
 8040fee:	230e      	movs	r3, #14
 8040ff0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8040ff4:	e030      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI4_IRQn;
 8040ff6:	230f      	movs	r3, #15
 8040ff8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8040ffc:	e02c      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI5_IRQn;
 8040ffe:	2310      	movs	r3, #16
 8041000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041004:	e028      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI6_IRQn;
 8041006:	2311      	movs	r3, #17
 8041008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 804100c:	e024      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI7_IRQn;
 804100e:	2312      	movs	r3, #18
 8041010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041014:	e020      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI8_IRQn;
 8041016:	2313      	movs	r3, #19
 8041018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 804101c:	e01c      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI9_IRQn;
 804101e:	2314      	movs	r3, #20
 8041020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041024:	e018      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI10_IRQn;
 8041026:	2315      	movs	r3, #21
 8041028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 804102c:	e014      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI11_IRQn;
 804102e:	2316      	movs	r3, #22
 8041030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041034:	e010      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI12_IRQn;
 8041036:	2317      	movs	r3, #23
 8041038:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 804103c:	e00c      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI13_IRQn;
 804103e:	2318      	movs	r3, #24
 8041040:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041044:	e008      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI14_IRQn;
 8041046:	2319      	movs	r3, #25
 8041048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 804104c:	e004      	b.n	8041058 <GpioSetInterrupt+0x244>
            IRQnb = EXTI15_IRQn;
 804104e:	231a      	movs	r3, #26
 8041050:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            break;
 8041054:	e000      	b.n	8041058 <GpioSetInterrupt+0x244>
            break;
 8041056:	bf00      	nop
        }

        GpioIrq[( obj->pin ) & 0x0F] = obj;
 8041058:	68fb      	ldr	r3, [r7, #12]
 804105a:	f993 3000 	ldrsb.w	r3, [r3]
 804105e:	b2db      	uxtb	r3, r3
 8041060:	f003 030f 	and.w	r3, r3, #15
 8041064:	490d      	ldr	r1, [pc, #52]	; (804109c <GpioSetInterrupt+0x288>)
 8041066:	68fa      	ldr	r2, [r7, #12]
 8041068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        HAL_NVIC_SetPriority( IRQnb , priority, 0 );
 804106c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8041070:	2200      	movs	r2, #0
 8041072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8041074:	4618      	mov	r0, r3
 8041076:	f007 facd 	bl	8048614 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( IRQnb );
 804107a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 804107e:	4618      	mov	r0, r3
 8041080:	f007 fae2 	bl	8048648 <HAL_NVIC_EnableIRQ>
 8041084:	e000      	b.n	8041088 <GpioSetInterrupt+0x274>
            return;
 8041086:	bf00      	nop
//#if defined( BOARD_IOE_EXT )
//        // IOExt Pin
//        GpioIoeSetInterrupt( obj, irqMode, irqPriority, irqHandler );
//#endif
//    }
}
 8041088:	3730      	adds	r7, #48	; 0x30
 804108a:	46bd      	mov	sp, r7
 804108c:	bd80      	pop	{r7, pc}
 804108e:	bf00      	nop
 8041090:	10110000 	.word	0x10110000
 8041094:	10210000 	.word	0x10210000
 8041098:	10310000 	.word	0x10310000
 804109c:	200180e4 	.word	0x200180e4

080410a0 <GpioWrite>:
//#endif
//    }
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 80410a0:	b580      	push	{r7, lr}
 80410a2:	b082      	sub	sp, #8
 80410a4:	af00      	add	r7, sp, #0
 80410a6:	6078      	str	r0, [r7, #4]
 80410a8:	6039      	str	r1, [r7, #0]
        if( obj == NULL )
        {
            assert_param( FAIL );
        }
        // Check if pin is not connected
        if( obj->pin == NC )
 80410aa:	687b      	ldr	r3, [r7, #4]
 80410ac:	f993 3000 	ldrsb.w	r3, [r3]
 80410b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80410b4:	d009      	beq.n	80410ca <GpioWrite+0x2a>
        {
            return;
        }
        HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 80410b6:	687b      	ldr	r3, [r7, #4]
 80410b8:	6858      	ldr	r0, [r3, #4]
 80410ba:	687b      	ldr	r3, [r7, #4]
 80410bc:	885b      	ldrh	r3, [r3, #2]
 80410be:	683a      	ldr	r2, [r7, #0]
 80410c0:	b2d2      	uxtb	r2, r2
 80410c2:	4619      	mov	r1, r3
 80410c4:	f008 f866 	bl	8049194 <HAL_GPIO_WritePin>
 80410c8:	e000      	b.n	80410cc <GpioWrite+0x2c>
            return;
 80410ca:	bf00      	nop
//#if defined( BOARD_IOE_EXT )
//        // IOExt Pin
//        GpioIoeWrite( obj, value );
//#endif
//    }
}
 80410cc:	3708      	adds	r7, #8
 80410ce:	46bd      	mov	sp, r7
 80410d0:	bd80      	pop	{r7, pc}

080410d2 <GpioRead>:
//#endif
//    }
}

uint32_t GpioRead( Gpio_t *obj )
{
 80410d2:	b580      	push	{r7, lr}
 80410d4:	b082      	sub	sp, #8
 80410d6:	af00      	add	r7, sp, #0
 80410d8:	6078      	str	r0, [r7, #4]
        if( obj == NULL )
        {
            assert_param( FAIL );
        }
        // Check if pin is not connected
        if( obj->pin == NC )
 80410da:	687b      	ldr	r3, [r7, #4]
 80410dc:	f993 3000 	ldrsb.w	r3, [r3]
 80410e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80410e4:	d101      	bne.n	80410ea <GpioRead+0x18>
        {
            return 0;
 80410e6:	2300      	movs	r3, #0
 80410e8:	e008      	b.n	80410fc <GpioRead+0x2a>
        }
        return HAL_GPIO_ReadPin( obj->port, obj->pinIndex );
 80410ea:	687b      	ldr	r3, [r7, #4]
 80410ec:	685a      	ldr	r2, [r3, #4]
 80410ee:	687b      	ldr	r3, [r7, #4]
 80410f0:	885b      	ldrh	r3, [r3, #2]
 80410f2:	4619      	mov	r1, r3
 80410f4:	4610      	mov	r0, r2
 80410f6:	f008 f835 	bl	8049164 <HAL_GPIO_ReadPin>
 80410fa:	4603      	mov	r3, r0
//        return GpioIoeRead( obj );
//#else
//        return 0;
//#endif
//    }
}
 80410fc:	4618      	mov	r0, r3
 80410fe:	3708      	adds	r7, #8
 8041100:	46bd      	mov	sp, r7
 8041102:	bd80      	pop	{r7, pc}

08041104 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler( void )
{
 8041104:	b580      	push	{r7, lr}
 8041106:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_0 );
 8041108:	2001      	movs	r0, #1
 804110a:	f008 f85b 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 804110e:	bf00      	nop
 8041110:	bd80      	pop	{r7, pc}

08041112 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler( void )
{
 8041112:	b580      	push	{r7, lr}
 8041114:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_1 );
 8041116:	2002      	movs	r0, #2
 8041118:	f008 f854 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 804111c:	bf00      	nop
 804111e:	bd80      	pop	{r7, pc}

08041120 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler( void )
{
 8041120:	b580      	push	{r7, lr}
 8041122:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_2 );
 8041124:	2004      	movs	r0, #4
 8041126:	f008 f84d 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 804112a:	bf00      	nop
 804112c:	bd80      	pop	{r7, pc}

0804112e <EXTI3_IRQHandler>:

void EXTI3_IRQHandler( void )
{
 804112e:	b580      	push	{r7, lr}
 8041130:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_3 );
 8041132:	2008      	movs	r0, #8
 8041134:	f008 f846 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 8041138:	bf00      	nop
 804113a:	bd80      	pop	{r7, pc}

0804113c <EXTI4_IRQHandler>:

void EXTI4_IRQHandler( void )
{
 804113c:	b580      	push	{r7, lr}
 804113e:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_4 );
 8041140:	2010      	movs	r0, #16
 8041142:	f008 f83f 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 8041146:	bf00      	nop
 8041148:	bd80      	pop	{r7, pc}

0804114a <EXTI5_IRQHandler>:

void EXTI5_IRQHandler( void )
{
 804114a:	b580      	push	{r7, lr}
 804114c:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_5 );
 804114e:	2020      	movs	r0, #32
 8041150:	f008 f838 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 8041154:	bf00      	nop
 8041156:	bd80      	pop	{r7, pc}

08041158 <EXTI6_IRQHandler>:

void EXTI6_IRQHandler( void )
{
 8041158:	b580      	push	{r7, lr}
 804115a:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_6 );
 804115c:	2040      	movs	r0, #64	; 0x40
 804115e:	f008 f831 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 8041162:	bf00      	nop
 8041164:	bd80      	pop	{r7, pc}

08041166 <EXTI7_IRQHandler>:

void EXTI7_IRQHandler( void )
{
 8041166:	b580      	push	{r7, lr}
 8041168:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_7 );
 804116a:	2080      	movs	r0, #128	; 0x80
 804116c:	f008 f82a 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 8041170:	bf00      	nop
 8041172:	bd80      	pop	{r7, pc}

08041174 <EXTI8_IRQHandler>:

void EXTI8_IRQHandler( void )
{
 8041174:	b580      	push	{r7, lr}
 8041176:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_8 );
 8041178:	f44f 7080 	mov.w	r0, #256	; 0x100
 804117c:	f008 f822 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 8041180:	bf00      	nop
 8041182:	bd80      	pop	{r7, pc}

08041184 <EXTI9_IRQHandler>:

void EXTI9_IRQHandler( void )
{
 8041184:	b580      	push	{r7, lr}
 8041186:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_9 );
 8041188:	f44f 7000 	mov.w	r0, #512	; 0x200
 804118c:	f008 f81a 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 8041190:	bf00      	nop
 8041192:	bd80      	pop	{r7, pc}

08041194 <EXTI10_IRQHandler>:

void EXTI10_IRQHandler( void )
{
 8041194:	b580      	push	{r7, lr}
 8041196:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_10 );
 8041198:	f44f 6080 	mov.w	r0, #1024	; 0x400
 804119c:	f008 f812 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 80411a0:	bf00      	nop
 80411a2:	bd80      	pop	{r7, pc}

080411a4 <EXTI11_IRQHandler>:

void EXTI11_IRQHandler( void )
{
 80411a4:	b580      	push	{r7, lr}
 80411a6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_11 );
 80411a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80411ac:	f008 f80a 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 80411b0:	bf00      	nop
 80411b2:	bd80      	pop	{r7, pc}

080411b4 <EXTI12_IRQHandler>:

void EXTI12_IRQHandler( void )
{
 80411b4:	b580      	push	{r7, lr}
 80411b6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_12 );
 80411b8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80411bc:	f008 f802 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 80411c0:	bf00      	nop
 80411c2:	bd80      	pop	{r7, pc}

080411c4 <EXTI13_IRQHandler>:

void EXTI13_IRQHandler( void )
{
 80411c4:	b580      	push	{r7, lr}
 80411c6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_13 );
 80411c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80411cc:	f007 fffa 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 80411d0:	bf00      	nop
 80411d2:	bd80      	pop	{r7, pc}

080411d4 <EXTI14_IRQHandler>:

void EXTI14_IRQHandler( void )
{
 80411d4:	b580      	push	{r7, lr}
 80411d6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_14 );
 80411d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80411dc:	f007 fff2 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 80411e0:	bf00      	nop
 80411e2:	bd80      	pop	{r7, pc}

080411e4 <EXTI15_IRQHandler>:

void EXTI15_IRQHandler( void )
{
 80411e4:	b580      	push	{r7, lr}
 80411e6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler( GPIO_PIN_15 );
 80411e8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80411ec:	f007 ffea 	bl	80491c4 <HAL_GPIO_EXTI_IRQHandler>
}
 80411f0:	bf00      	nop
 80411f2:	bd80      	pop	{r7, pc}

080411f4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80411f4:	b580      	push	{r7, lr}
 80411f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80411f8:	4b1b      	ldr	r3, [pc, #108]	; (8041268 <MX_I2C1_Init+0x74>)
 80411fa:	4a1c      	ldr	r2, [pc, #112]	; (804126c <MX_I2C1_Init+0x78>)
 80411fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30F77489;
 80411fe:	4b1a      	ldr	r3, [pc, #104]	; (8041268 <MX_I2C1_Init+0x74>)
 8041200:	4a1b      	ldr	r2, [pc, #108]	; (8041270 <MX_I2C1_Init+0x7c>)
 8041202:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8041204:	4b18      	ldr	r3, [pc, #96]	; (8041268 <MX_I2C1_Init+0x74>)
 8041206:	2200      	movs	r2, #0
 8041208:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 804120a:	4b17      	ldr	r3, [pc, #92]	; (8041268 <MX_I2C1_Init+0x74>)
 804120c:	2201      	movs	r2, #1
 804120e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8041210:	4b15      	ldr	r3, [pc, #84]	; (8041268 <MX_I2C1_Init+0x74>)
 8041212:	2200      	movs	r2, #0
 8041214:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8041216:	4b14      	ldr	r3, [pc, #80]	; (8041268 <MX_I2C1_Init+0x74>)
 8041218:	2200      	movs	r2, #0
 804121a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 804121c:	4b12      	ldr	r3, [pc, #72]	; (8041268 <MX_I2C1_Init+0x74>)
 804121e:	2200      	movs	r2, #0
 8041220:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8041222:	4b11      	ldr	r3, [pc, #68]	; (8041268 <MX_I2C1_Init+0x74>)
 8041224:	2200      	movs	r2, #0
 8041226:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8041228:	4b0f      	ldr	r3, [pc, #60]	; (8041268 <MX_I2C1_Init+0x74>)
 804122a:	2200      	movs	r2, #0
 804122c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 804122e:	480e      	ldr	r0, [pc, #56]	; (8041268 <MX_I2C1_Init+0x74>)
 8041230:	f008 f804 	bl	804923c <HAL_I2C_Init>
 8041234:	4603      	mov	r3, r0
 8041236:	2b00      	cmp	r3, #0
 8041238:	d001      	beq.n	804123e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 804123a:	f000 fa29 	bl	8041690 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 804123e:	2100      	movs	r1, #0
 8041240:	4809      	ldr	r0, [pc, #36]	; (8041268 <MX_I2C1_Init+0x74>)
 8041242:	f009 fb75 	bl	804a930 <HAL_I2CEx_ConfigAnalogFilter>
 8041246:	4603      	mov	r3, r0
 8041248:	2b00      	cmp	r3, #0
 804124a:	d001      	beq.n	8041250 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 804124c:	f000 fa20 	bl	8041690 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8041250:	2100      	movs	r1, #0
 8041252:	4805      	ldr	r0, [pc, #20]	; (8041268 <MX_I2C1_Init+0x74>)
 8041254:	f009 fbb7 	bl	804a9c6 <HAL_I2CEx_ConfigDigitalFilter>
 8041258:	4603      	mov	r3, r0
 804125a:	2b00      	cmp	r3, #0
 804125c:	d001      	beq.n	8041262 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 804125e:	f000 fa17 	bl	8041690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8041262:	bf00      	nop
 8041264:	bd80      	pop	{r7, pc}
 8041266:	bf00      	nop
 8041268:	20018fe4 	.word	0x20018fe4
 804126c:	40005400 	.word	0x40005400
 8041270:	30f77489 	.word	0x30f77489

08041274 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8041274:	b580      	push	{r7, lr}
 8041276:	b0ae      	sub	sp, #184	; 0xb8
 8041278:	af00      	add	r7, sp, #0
 804127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804127c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8041280:	2200      	movs	r2, #0
 8041282:	601a      	str	r2, [r3, #0]
 8041284:	605a      	str	r2, [r3, #4]
 8041286:	609a      	str	r2, [r3, #8]
 8041288:	60da      	str	r2, [r3, #12]
 804128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 804128c:	f107 0310 	add.w	r3, r7, #16
 8041290:	2294      	movs	r2, #148	; 0x94
 8041292:	2100      	movs	r1, #0
 8041294:	4618      	mov	r0, r3
 8041296:	f00d fde2 	bl	804ee5e <memset>
  if(i2cHandle->Instance==I2C1)
 804129a:	687b      	ldr	r3, [r7, #4]
 804129c:	681b      	ldr	r3, [r3, #0]
 804129e:	4a29      	ldr	r2, [pc, #164]	; (8041344 <HAL_I2C_MspInit+0xd0>)
 80412a0:	4293      	cmp	r3, r2
 80412a2:	d14b      	bne.n	804133c <HAL_I2C_MspInit+0xc8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80412a4:	2340      	movs	r3, #64	; 0x40
 80412a6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80412a8:	2300      	movs	r3, #0
 80412aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80412ac:	f107 0310 	add.w	r3, r7, #16
 80412b0:	4618      	mov	r0, r3
 80412b2:	f009 fcf1 	bl	804ac98 <HAL_RCCEx_PeriphCLKConfig>
 80412b6:	4603      	mov	r3, r0
 80412b8:	2b00      	cmp	r3, #0
 80412ba:	d001      	beq.n	80412c0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80412bc:	f000 f9e8 	bl	8041690 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80412c0:	4b21      	ldr	r3, [pc, #132]	; (8041348 <HAL_I2C_MspInit+0xd4>)
 80412c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80412c4:	4a20      	ldr	r2, [pc, #128]	; (8041348 <HAL_I2C_MspInit+0xd4>)
 80412c6:	f043 0302 	orr.w	r3, r3, #2
 80412ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80412cc:	4b1e      	ldr	r3, [pc, #120]	; (8041348 <HAL_I2C_MspInit+0xd4>)
 80412ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80412d0:	f003 0302 	and.w	r3, r3, #2
 80412d4:	60fb      	str	r3, [r7, #12]
 80412d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EXT_SCL_Pin|EXT_SDA_Pin;
 80412d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80412dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80412e0:	2312      	movs	r3, #18
 80412e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80412e6:	2301      	movs	r3, #1
 80412e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80412ec:	2300      	movs	r3, #0
 80412ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80412f2:	2304      	movs	r3, #4
 80412f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80412f8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80412fc:	4619      	mov	r1, r3
 80412fe:	4813      	ldr	r0, [pc, #76]	; (804134c <HAL_I2C_MspInit+0xd8>)
 8041300:	f007 fcc2 	bl	8048c88 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8041304:	4b10      	ldr	r3, [pc, #64]	; (8041348 <HAL_I2C_MspInit+0xd4>)
 8041306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041308:	4a0f      	ldr	r2, [pc, #60]	; (8041348 <HAL_I2C_MspInit+0xd4>)
 804130a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 804130e:	6593      	str	r3, [r2, #88]	; 0x58
 8041310:	4b0d      	ldr	r3, [pc, #52]	; (8041348 <HAL_I2C_MspInit+0xd4>)
 8041312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041318:	60bb      	str	r3, [r7, #8]
 804131a:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 804131c:	2200      	movs	r2, #0
 804131e:	2100      	movs	r1, #0
 8041320:	2037      	movs	r0, #55	; 0x37
 8041322:	f007 f977 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8041326:	2037      	movs	r0, #55	; 0x37
 8041328:	f007 f98e 	bl	8048648 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 804132c:	2200      	movs	r2, #0
 804132e:	2100      	movs	r1, #0
 8041330:	2038      	movs	r0, #56	; 0x38
 8041332:	f007 f96f 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8041336:	2038      	movs	r0, #56	; 0x38
 8041338:	f007 f986 	bl	8048648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 804133c:	bf00      	nop
 804133e:	37b8      	adds	r7, #184	; 0xb8
 8041340:	46bd      	mov	sp, r7
 8041342:	bd80      	pop	{r7, pc}
 8041344:	40005400 	.word	0x40005400
 8041348:	40021000 	.word	0x40021000
 804134c:	42020400 	.word	0x42020400

08041350 <LpmSetStopMode>:
    CRITICAL_SECTION_END( );
    return;
}

void LpmSetStopMode( LpmId_t id, LpmSetMode_t mode )
{
 8041350:	b580      	push	{r7, lr}
 8041352:	b084      	sub	sp, #16
 8041354:	af00      	add	r7, sp, #0
 8041356:	4603      	mov	r3, r0
 8041358:	460a      	mov	r2, r1
 804135a:	71fb      	strb	r3, [r7, #7]
 804135c:	4613      	mov	r3, r2
 804135e:	71bb      	strb	r3, [r7, #6]
    CRITICAL_SECTION_BEGIN( );
 8041360:	f107 030c 	add.w	r3, r7, #12
 8041364:	4618      	mov	r0, r3
 8041366:	f003 fd49 	bl	8044dfc <BoardCriticalSectionBegin>

    switch( mode )
 804136a:	79bb      	ldrb	r3, [r7, #6]
 804136c:	2b00      	cmp	r3, #0
 804136e:	d008      	beq.n	8041382 <LpmSetStopMode+0x32>
 8041370:	2b01      	cmp	r3, #1
 8041372:	d10e      	bne.n	8041392 <LpmSetStopMode+0x42>
    {
        case LPM_DISABLE:
        {
            StopModeDisable |= ( uint32_t )id;
 8041374:	79fa      	ldrb	r2, [r7, #7]
 8041376:	4b0c      	ldr	r3, [pc, #48]	; (80413a8 <LpmSetStopMode+0x58>)
 8041378:	681b      	ldr	r3, [r3, #0]
 804137a:	4313      	orrs	r3, r2
 804137c:	4a0a      	ldr	r2, [pc, #40]	; (80413a8 <LpmSetStopMode+0x58>)
 804137e:	6013      	str	r3, [r2, #0]
            break;
 8041380:	e008      	b.n	8041394 <LpmSetStopMode+0x44>
        }
        case LPM_ENABLE:
        {
            StopModeDisable &= ~( uint32_t )id;
 8041382:	79fb      	ldrb	r3, [r7, #7]
 8041384:	43da      	mvns	r2, r3
 8041386:	4b08      	ldr	r3, [pc, #32]	; (80413a8 <LpmSetStopMode+0x58>)
 8041388:	681b      	ldr	r3, [r3, #0]
 804138a:	4013      	ands	r3, r2
 804138c:	4a06      	ldr	r2, [pc, #24]	; (80413a8 <LpmSetStopMode+0x58>)
 804138e:	6013      	str	r3, [r2, #0]
            break;
 8041390:	e000      	b.n	8041394 <LpmSetStopMode+0x44>
        }
        default:
        {
            break;
 8041392:	bf00      	nop
        }
    }

    CRITICAL_SECTION_END( );
 8041394:	f107 030c 	add.w	r3, r7, #12
 8041398:	4618      	mov	r0, r3
 804139a:	f003 fd41 	bl	8044e20 <BoardCriticalSectionEnd>
    return;
 804139e:	bf00      	nop
}
 80413a0:	3710      	adds	r7, #16
 80413a2:	46bd      	mov	sp, r7
 80413a4:	bd80      	pop	{r7, pc}
 80413a6:	bf00      	nop
 80413a8:	20018124 	.word	0x20018124

080413ac <LpmGetMode>:
    }
    return;
}

LpmGetMode_t LpmGetMode(void)
{
 80413ac:	b580      	push	{r7, lr}
 80413ae:	b082      	sub	sp, #8
 80413b0:	af00      	add	r7, sp, #0
    LpmGetMode_t mode;

    CRITICAL_SECTION_BEGIN( );
 80413b2:	463b      	mov	r3, r7
 80413b4:	4618      	mov	r0, r3
 80413b6:	f003 fd21 	bl	8044dfc <BoardCriticalSectionBegin>

    if( StopModeDisable != 0 )
 80413ba:	4b0c      	ldr	r3, [pc, #48]	; (80413ec <LpmGetMode+0x40>)
 80413bc:	681b      	ldr	r3, [r3, #0]
 80413be:	2b00      	cmp	r3, #0
 80413c0:	d002      	beq.n	80413c8 <LpmGetMode+0x1c>
    {
        mode = LPM_SLEEP_MODE;
 80413c2:	2300      	movs	r3, #0
 80413c4:	71fb      	strb	r3, [r7, #7]
 80413c6:	e008      	b.n	80413da <LpmGetMode+0x2e>
    }
    else
    {
        if( OffModeDisable != 0 )
 80413c8:	4b09      	ldr	r3, [pc, #36]	; (80413f0 <LpmGetMode+0x44>)
 80413ca:	681b      	ldr	r3, [r3, #0]
 80413cc:	2b00      	cmp	r3, #0
 80413ce:	d002      	beq.n	80413d6 <LpmGetMode+0x2a>
        {
            mode = LPM_STOP_MODE;
 80413d0:	2301      	movs	r3, #1
 80413d2:	71fb      	strb	r3, [r7, #7]
 80413d4:	e001      	b.n	80413da <LpmGetMode+0x2e>
        }
        else
        {
            mode = LPM_OFF_MODE;
 80413d6:	2302      	movs	r3, #2
 80413d8:	71fb      	strb	r3, [r7, #7]
        }
    }

    CRITICAL_SECTION_END( );
 80413da:	463b      	mov	r3, r7
 80413dc:	4618      	mov	r0, r3
 80413de:	f003 fd1f 	bl	8044e20 <BoardCriticalSectionEnd>
    return mode;
 80413e2:	79fb      	ldrb	r3, [r7, #7]
}
 80413e4:	4618      	mov	r0, r3
 80413e6:	3708      	adds	r7, #8
 80413e8:	46bd      	mov	sp, r7
 80413ea:	bd80      	pop	{r7, pc}
 80413ec:	20018124 	.word	0x20018124
 80413f0:	20018128 	.word	0x20018128

080413f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80413f4:	b590      	push	{r4, r7, lr}
 80413f6:	b08b      	sub	sp, #44	; 0x2c
 80413f8:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80413fa:	f005 f956 	bl	80466aa <HAL_Init>

  /* USER CODE BEGIN Init */
    HAL_DBGMCU_EnableDBGStopMode( );
 80413fe:	f005 f9b3 	bl	8046768 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode( );
 8041402:	f005 f9c1 	bl	8046788 <HAL_DBGMCU_EnableDBGStandbyMode>
  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  /* Register SecureFault callback defined in non-secure and to be called by secure handler */
    SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 8041406:	4949      	ldr	r1, [pc, #292]	; (804152c <main+0x138>)
 8041408:	2000      	movs	r0, #0
 804140a:	f00e fd31 	bl	804fe70 <__SECURE_RegisterCallback_veneer>

    /* Register SecureError callback defined in non-secure and to be called by secure handler */
    SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 804140e:	4948      	ldr	r1, [pc, #288]	; (8041530 <main+0x13c>)
 8041410:	2001      	movs	r0, #1
 8041412:	f00e fd2d 	bl	804fe70 <__SECURE_RegisterCallback_veneer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8041416:	f7ff fb61 	bl	8040adc <MX_GPIO_Init>
  MX_DMA_Init();
 804141a:	f7ff fb09 	bl	8040a30 <MX_DMA_Init>
  MX_ADC1_Init();
 804141e:	f7ff f899 	bl	8040554 <MX_ADC1_Init>
  MX_I2C1_Init();
 8041422:	f7ff fee7 	bl	80411f4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8041426:	f001 fddf 	bl	8042fe8 <MX_USART3_UART_Init>
  MX_RTC_Init();
 804142a:	f000 f98f 	bl	804174c <MX_RTC_Init>
  MX_SPI1_Init();
 804142e:	f000 fce3 	bl	8041df8 <MX_SPI1_Init>
  MX_SPI3_Init();
 8041432:	f000 fd1f 	bl	8041e74 <MX_SPI3_Init>
  MX_TIM1_Init();
 8041436:	f001 fa85 	bl	8042944 <MX_TIM1_Init>
  MX_ADC2_Init();
 804143a:	f7ff f901 	bl	8040640 <MX_ADC2_Init>
  MX_LPUART1_UART_Init();
 804143e:	f001 fd85 	bl	8042f4c <MX_LPUART1_UART_Init>
  MX_CRC_Init();
 8041442:	f7ff fac7 	bl	80409d4 <MX_CRC_Init>
  MX_RNG_Init();
 8041446:	f000 f92f 	bl	80416a8 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 804144a:	f004 f9b9 	bl	80457c0 <BSP_GYRO_Init>

  BSP_IDD_Init(0);
 804144e:	2000      	movs	r0, #0
 8041450:	f004 f94c 	bl	80456ec <BSP_IDD_Init>
  BSP_IDD_Init(1);
 8041454:	2001      	movs	r0, #1
 8041456:	f004 f949 	bl	80456ec <BSP_IDD_Init>
  SpiInit(&LR1110.spi, SPI_3, LR_MOSI_GPIO_Port, LR_MOSI_Pin,
 804145a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 804145e:	9305      	str	r3, [sp, #20]
 8041460:	2300      	movs	r3, #0
 8041462:	9304      	str	r3, [sp, #16]
 8041464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8041468:	9303      	str	r3, [sp, #12]
 804146a:	4b32      	ldr	r3, [pc, #200]	; (8041534 <main+0x140>)
 804146c:	9302      	str	r3, [sp, #8]
 804146e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8041472:	9301      	str	r3, [sp, #4]
 8041474:	4b2f      	ldr	r3, [pc, #188]	; (8041534 <main+0x140>)
 8041476:	9300      	str	r3, [sp, #0]
 8041478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804147c:	4a2d      	ldr	r2, [pc, #180]	; (8041534 <main+0x140>)
 804147e:	2102      	movs	r1, #2
 8041480:	482d      	ldr	r0, [pc, #180]	; (8041538 <main+0x144>)
 8041482:	f000 fdbb 	bl	8041ffc <SpiInit>
		  LR_MISO_GPIO_Port, LR_MISO_Pin, LR_SCK_GPIO_Port, LR_SCK_Pin, NULL, NC);

  lr1110_board_init_io( &LR1110 );
 8041486:	482d      	ldr	r0, [pc, #180]	; (804153c <main+0x148>)
 8041488:	f002 f9a0 	bl	80437cc <lr1110_board_init_io>

  Radio.Init(&lrEvent);
 804148c:	4b2c      	ldr	r3, [pc, #176]	; (8041540 <main+0x14c>)
 804148e:	681b      	ldr	r3, [r3, #0]
 8041490:	482c      	ldr	r0, [pc, #176]	; (8041544 <main+0x150>)
 8041492:	4798      	blx	r3

  Radio.SetModem(MODEM_LORA);
 8041494:	4b2a      	ldr	r3, [pc, #168]	; (8041540 <main+0x14c>)
 8041496:	689b      	ldr	r3, [r3, #8]
 8041498:	2001      	movs	r0, #1
 804149a:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 804149c:	4b28      	ldr	r3, [pc, #160]	; (8041540 <main+0x14c>)
 804149e:	68db      	ldr	r3, [r3, #12]
 80414a0:	4829      	ldr	r0, [pc, #164]	; (8041548 <main+0x154>)
 80414a2:	4798      	blx	r3
  Radio.SetPublicNetwork(LR1110_RADIO_LORA_NETWORK_PUBLIC);
 80414a4:	4b26      	ldr	r3, [pc, #152]	; (8041540 <main+0x14c>)
 80414a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80414a8:	2001      	movs	r0, #1
 80414aa:	4798      	blx	r3
  Radio.SetMaxPayloadLength( MODEM_LORA, 255 );
 80414ac:	4b24      	ldr	r3, [pc, #144]	; (8041540 <main+0x14c>)
 80414ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80414b0:	21ff      	movs	r1, #255	; 0xff
 80414b2:	2001      	movs	r0, #1
 80414b4:	4798      	blx	r3

//  Radio.SetTxConfig();
  Radio.SetRxConfig( MODEM_LORA, LR1110_RADIO_LORA_BW_125,
 80414b6:	4b22      	ldr	r3, [pc, #136]	; (8041540 <main+0x14c>)
 80414b8:	699c      	ldr	r4, [r3, #24]
 80414ba:	2301      	movs	r3, #1
 80414bc:	9309      	str	r3, [sp, #36]	; 0x24
 80414be:	2300      	movs	r3, #0
 80414c0:	9308      	str	r3, [sp, #32]
 80414c2:	2300      	movs	r3, #0
 80414c4:	9307      	str	r3, [sp, #28]
 80414c6:	2300      	movs	r3, #0
 80414c8:	9306      	str	r3, [sp, #24]
 80414ca:	2301      	movs	r3, #1
 80414cc:	9305      	str	r3, [sp, #20]
 80414ce:	2308      	movs	r3, #8
 80414d0:	9304      	str	r3, [sp, #16]
 80414d2:	2301      	movs	r3, #1
 80414d4:	9303      	str	r3, [sp, #12]
 80414d6:	2305      	movs	r3, #5
 80414d8:	9302      	str	r3, [sp, #8]
 80414da:	2308      	movs	r3, #8
 80414dc:	9301      	str	r3, [sp, #4]
 80414de:	2300      	movs	r3, #0
 80414e0:	9300      	str	r3, [sp, #0]
 80414e2:	2301      	movs	r3, #1
 80414e4:	220a      	movs	r2, #10
 80414e6:	2104      	movs	r1, #4
 80414e8:	2001      	movs	r0, #1
 80414ea:	47a0      	blx	r4
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  Radio.Rx(0);
 80414ec:	4b14      	ldr	r3, [pc, #80]	; (8041540 <main+0x14c>)
 80414ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80414f0:	2000      	movs	r0, #0
 80414f2:	4798      	blx	r3

  while (1)
  {
		if (Radio.IrqProcess != NULL) {
 80414f4:	4b12      	ldr	r3, [pc, #72]	; (8041540 <main+0x14c>)
 80414f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80414f8:	2b00      	cmp	r3, #0
 80414fa:	d002      	beq.n	8041502 <main+0x10e>
			Radio.IrqProcess();
 80414fc:	4b10      	ldr	r3, [pc, #64]	; (8041540 <main+0x14c>)
 80414fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041500:	4798      	blx	r3
		}
	  BSP_IDD_StartMeasurement(0);
 8041502:	2000      	movs	r0, #0
 8041504:	f004 f900 	bl	8045708 <BSP_IDD_StartMeasurement>
	  BSP_IDD_GetValue(0, (uint32_t *) &iddValue[0]);
 8041508:	4910      	ldr	r1, [pc, #64]	; (804154c <main+0x158>)
 804150a:	2000      	movs	r0, #0
 804150c:	f004 f920 	bl	8045750 <BSP_IDD_GetValue>
	  BSP_IDD_GetValue(1, (uint32_t *) &iddValue[1]);
 8041510:	490f      	ldr	r1, [pc, #60]	; (8041550 <main+0x15c>)
 8041512:	2001      	movs	r0, #1
 8041514:	f004 f91c 	bl	8045750 <BSP_IDD_GetValue>
	  BSP_GYRO_GetXYZ(pfData);
 8041518:	480e      	ldr	r0, [pc, #56]	; (8041554 <main+0x160>)
 804151a:	f004 f98b 	bl	8045834 <BSP_GYRO_GetXYZ>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SECURE_LEDToggle_YELLOW();
 804151e:	f00e fc8f 	bl	804fe40 <__SECURE_LEDToggle_YELLOW_veneer>
	  HAL_Delay(500);
 8041522:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8041526:	f005 f8fb 	bl	8046720 <HAL_Delay>
		if (Radio.IrqProcess != NULL) {
 804152a:	e7e3      	b.n	80414f4 <main+0x100>
 804152c:	08041559 	.word	0x08041559
 8041530:	08041565 	.word	0x08041565
 8041534:	42020800 	.word	0x42020800
 8041538:	20019688 	.word	0x20019688
 804153c:	2001964c 	.word	0x2001964c
 8041540:	0804ffbc 	.word	0x0804ffbc
 8041544:	20018000 	.word	0x20018000
 8041548:	3703dcc0 	.word	0x3703dcc0
 804154c:	20018138 	.word	0x20018138
 8041550:	2001813c 	.word	0x2001813c
 8041554:	2001812c 	.word	0x2001812c

08041558 <SecureFault_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
  * @retval None
  */
void SecureFault_Callback(void)
{
 8041558:	b580      	push	{r7, lr}
 804155a:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure fault generated by IDAU/SAU check */
  /* because of illegal access */
  Error_Handler();
 804155c:	f000 f898 	bl	8041690 <Error_Handler>
}
 8041560:	bf00      	nop
 8041562:	bd80      	pop	{r7, pc}

08041564 <SecureError_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
  * @retval None
  */
void SecureError_Callback(void)
{
 8041564:	b580      	push	{r7, lr}
 8041566:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure error generated by GTZC check */
  /* because of illegal access */
  Error_Handler();
 8041568:	f000 f892 	bl	8041690 <Error_Handler>
}
 804156c:	bf00      	nop
 804156e:	bd80      	pop	{r7, pc}

08041570 <LR_TxDone>:

/*!
 * \brief  Tx Done callback prototype.
 */
void LR_TxDone ( void )
{
 8041570:	b580      	push	{r7, lr}
 8041572:	af00      	add	r7, sp, #0
	printf("LR_TxDone\r\n");
 8041574:	4802      	ldr	r0, [pc, #8]	; (8041580 <LR_TxDone+0x10>)
 8041576:	f00d fd01 	bl	804ef7c <puts>
}
 804157a:	bf00      	nop
 804157c:	bd80      	pop	{r7, pc}
 804157e:	bf00      	nop
 8041580:	0804fe80 	.word	0x0804fe80

08041584 <LR_TxTimeout>:

/*!
 * \brief  Tx Timeout callback prototype.
 */
void LR_TxTimeout ( void )
{
 8041584:	b580      	push	{r7, lr}
 8041586:	af00      	add	r7, sp, #0
	printf("LR_TxTimeout\r\n");
 8041588:	4802      	ldr	r0, [pc, #8]	; (8041594 <LR_TxTimeout+0x10>)
 804158a:	f00d fcf7 	bl	804ef7c <puts>
}
 804158e:	bf00      	nop
 8041590:	bd80      	pop	{r7, pc}
 8041592:	bf00      	nop
 8041594:	0804fe8c 	.word	0x0804fe8c

08041598 <LR_RxDone>:
 * \param [IN] snr     SNR value computed while receiving the frame [dB]
 *                     FSK : N/A ( set to 0 )
 *                     LoRa: SNR value in dB
 */
void LR_RxDone ( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8041598:	b580      	push	{r7, lr}
 804159a:	b084      	sub	sp, #16
 804159c:	af00      	add	r7, sp, #0
 804159e:	60f8      	str	r0, [r7, #12]
 80415a0:	4608      	mov	r0, r1
 80415a2:	4611      	mov	r1, r2
 80415a4:	461a      	mov	r2, r3
 80415a6:	4603      	mov	r3, r0
 80415a8:	817b      	strh	r3, [r7, #10]
 80415aa:	460b      	mov	r3, r1
 80415ac:	813b      	strh	r3, [r7, #8]
 80415ae:	4613      	mov	r3, r2
 80415b0:	71fb      	strb	r3, [r7, #7]
//	SECURE_LEDToggle_RED();
	printf("LR_RxDone - len=%d;rssi=%d;snr=%d\r\n", size, rssi, snr);
 80415b2:	8979      	ldrh	r1, [r7, #10]
 80415b4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80415b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80415bc:	4805      	ldr	r0, [pc, #20]	; (80415d4 <LR_RxDone+0x3c>)
 80415be:	f00d fc57 	bl	804ee70 <iprintf>
	printf("LR_RxDone - %S\r\n", payload);
 80415c2:	68f9      	ldr	r1, [r7, #12]
 80415c4:	4804      	ldr	r0, [pc, #16]	; (80415d8 <LR_RxDone+0x40>)
 80415c6:	f00d fc53 	bl	804ee70 <iprintf>

}
 80415ca:	bf00      	nop
 80415cc:	3710      	adds	r7, #16
 80415ce:	46bd      	mov	sp, r7
 80415d0:	bd80      	pop	{r7, pc}
 80415d2:	bf00      	nop
 80415d4:	0804fe9c 	.word	0x0804fe9c
 80415d8:	0804fec0 	.word	0x0804fec0

080415dc <LR_RxTimeout>:

/*!
 * \brief  Rx Timeout callback prototype.
 */
void LR_RxTimeout ( void )
{
 80415dc:	b580      	push	{r7, lr}
 80415de:	af00      	add	r7, sp, #0
//	SECURE_LEDToggle_RED();
	printf("LR_RxTimeout\r\n");
 80415e0:	4802      	ldr	r0, [pc, #8]	; (80415ec <LR_RxTimeout+0x10>)
 80415e2:	f00d fccb 	bl	804ef7c <puts>
}
 80415e6:	bf00      	nop
 80415e8:	bd80      	pop	{r7, pc}
 80415ea:	bf00      	nop
 80415ec:	0804fed4 	.word	0x0804fed4

080415f0 <LR_RxError>:

/*!
 * \brief Rx Error callback prototype.
 */
void LR_RxError ( void )
{
 80415f0:	b580      	push	{r7, lr}
 80415f2:	af00      	add	r7, sp, #0
	printf("LR_RxError\r\n");
 80415f4:	4802      	ldr	r0, [pc, #8]	; (8041600 <LR_RxError+0x10>)
 80415f6:	f00d fcc1 	bl	804ef7c <puts>
}
 80415fa:	bf00      	nop
 80415fc:	bd80      	pop	{r7, pc}
 80415fe:	bf00      	nop
 8041600:	0804fee4 	.word	0x0804fee4

08041604 <LR_FhssChangeChannel>:
 * \brief  FHSS Change Channel callback prototype.
 *
 * \param [IN] currentChannel   Index number of the current channel
 */
void LR_FhssChangeChannel ( uint8_t currentChannel )
{
 8041604:	b580      	push	{r7, lr}
 8041606:	b082      	sub	sp, #8
 8041608:	af00      	add	r7, sp, #0
 804160a:	4603      	mov	r3, r0
 804160c:	71fb      	strb	r3, [r7, #7]
	printf("LR_FhssChangeChannel - %d\r\n", currentChannel);
 804160e:	79fb      	ldrb	r3, [r7, #7]
 8041610:	4619      	mov	r1, r3
 8041612:	4803      	ldr	r0, [pc, #12]	; (8041620 <LR_FhssChangeChannel+0x1c>)
 8041614:	f00d fc2c 	bl	804ee70 <iprintf>
}
 8041618:	bf00      	nop
 804161a:	3708      	adds	r7, #8
 804161c:	46bd      	mov	sp, r7
 804161e:	bd80      	pop	{r7, pc}
 8041620:	0804fef0 	.word	0x0804fef0

08041624 <LR_CadDone>:
 * \brief CAD Done callback prototype.
 *
 * \param [IN] channelDetected    Channel Activity detected during the CAD
 */
void LR_CadDone ( bool channelActivityDetected )
{
 8041624:	b580      	push	{r7, lr}
 8041626:	b082      	sub	sp, #8
 8041628:	af00      	add	r7, sp, #0
 804162a:	4603      	mov	r3, r0
 804162c:	71fb      	strb	r3, [r7, #7]
	printf("LR_CadDone - %d\r\n", channelActivityDetected);
 804162e:	79fb      	ldrb	r3, [r7, #7]
 8041630:	4619      	mov	r1, r3
 8041632:	4803      	ldr	r0, [pc, #12]	; (8041640 <LR_CadDone+0x1c>)
 8041634:	f00d fc1c 	bl	804ee70 <iprintf>
}
 8041638:	bf00      	nop
 804163a:	3708      	adds	r7, #8
 804163c:	46bd      	mov	sp, r7
 804163e:	bd80      	pop	{r7, pc}
 8041640:	0804ff0c 	.word	0x0804ff0c

08041644 <LR_GnssDone>:

/*!
 * \brief  Gnss Done Done callback prototype.
*/
void    LR_GnssDone( void )
{
 8041644:	b580      	push	{r7, lr}
 8041646:	af00      	add	r7, sp, #0
	printf("LR_GnssDone\r\n");
 8041648:	4802      	ldr	r0, [pc, #8]	; (8041654 <LR_GnssDone+0x10>)
 804164a:	f00d fc97 	bl	804ef7c <puts>
}
 804164e:	bf00      	nop
 8041650:	bd80      	pop	{r7, pc}
 8041652:	bf00      	nop
 8041654:	0804ff20 	.word	0x0804ff20

08041658 <LR_WifiDone>:

/*!
 * \brief  Gnss Done Done callback prototype.
*/
void    LR_WifiDone( void )
{
 8041658:	b580      	push	{r7, lr}
 804165a:	af00      	add	r7, sp, #0
	printf("LR_GnssDone\r\n");
 804165c:	4802      	ldr	r0, [pc, #8]	; (8041668 <LR_WifiDone+0x10>)
 804165e:	f00d fc8d 	bl	804ef7c <puts>
}
 8041662:	bf00      	nop
 8041664:	bd80      	pop	{r7, pc}
 8041666:	bf00      	nop
 8041668:	0804ff20 	.word	0x0804ff20

0804166c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 804166c:	b580      	push	{r7, lr}
 804166e:	b082      	sub	sp, #8
 8041670:	af00      	add	r7, sp, #0
 8041672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8041674:	687b      	ldr	r3, [r7, #4]
 8041676:	681b      	ldr	r3, [r3, #0]
 8041678:	4a04      	ldr	r2, [pc, #16]	; (804168c <HAL_TIM_PeriodElapsedCallback+0x20>)
 804167a:	4293      	cmp	r3, r2
 804167c:	d101      	bne.n	8041682 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 804167e:	f005 f82f 	bl	80466e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8041682:	bf00      	nop
 8041684:	3708      	adds	r7, #8
 8041686:	46bd      	mov	sp, r7
 8041688:	bd80      	pop	{r7, pc}
 804168a:	bf00      	nop
 804168c:	40001000 	.word	0x40001000

08041690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8041690:	b580      	push	{r7, lr}
 8041692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8041694:	b672      	cpsid	i
}
 8041696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  SECURE_LEDToggle_RED();
 8041698:	f00e fbe2 	bl	804fe60 <__SECURE_LEDToggle_RED_veneer>
	  HAL_Delay(500);
 804169c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80416a0:	f005 f83e 	bl	8046720 <HAL_Delay>
	  SECURE_LEDToggle_RED();
 80416a4:	e7f8      	b.n	8041698 <Error_Handler+0x8>
	...

080416a8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80416a8:	b580      	push	{r7, lr}
 80416aa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80416ac:	4b07      	ldr	r3, [pc, #28]	; (80416cc <MX_RNG_Init+0x24>)
 80416ae:	4a08      	ldr	r2, [pc, #32]	; (80416d0 <MX_RNG_Init+0x28>)
 80416b0:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80416b2:	4b06      	ldr	r3, [pc, #24]	; (80416cc <MX_RNG_Init+0x24>)
 80416b4:	2200      	movs	r2, #0
 80416b6:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80416b8:	4804      	ldr	r0, [pc, #16]	; (80416cc <MX_RNG_Init+0x24>)
 80416ba:	f009 ffd3 	bl	804b664 <HAL_RNG_Init>
 80416be:	4603      	mov	r3, r0
 80416c0:	2b00      	cmp	r3, #0
 80416c2:	d001      	beq.n	80416c8 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80416c4:	f7ff ffe4 	bl	8041690 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80416c8:	bf00      	nop
 80416ca:	bd80      	pop	{r7, pc}
 80416cc:	20019060 	.word	0x20019060
 80416d0:	420c0800 	.word	0x420c0800

080416d4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80416d4:	b580      	push	{r7, lr}
 80416d6:	b0a8      	sub	sp, #160	; 0xa0
 80416d8:	af00      	add	r7, sp, #0
 80416da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80416dc:	f107 030c 	add.w	r3, r7, #12
 80416e0:	2294      	movs	r2, #148	; 0x94
 80416e2:	2100      	movs	r1, #0
 80416e4:	4618      	mov	r0, r3
 80416e6:	f00d fbba 	bl	804ee5e <memset>
  if(rngHandle->Instance==RNG)
 80416ea:	687b      	ldr	r3, [r7, #4]
 80416ec:	681b      	ldr	r3, [r3, #0]
 80416ee:	4a15      	ldr	r2, [pc, #84]	; (8041744 <HAL_RNG_MspInit+0x70>)
 80416f0:	4293      	cmp	r3, r2
 80416f2:	d123      	bne.n	804173c <HAL_RNG_MspInit+0x68>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80416f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80416f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80416fa:	2300      	movs	r3, #0
 80416fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8041700:	f107 030c 	add.w	r3, r7, #12
 8041704:	4618      	mov	r0, r3
 8041706:	f009 fac7 	bl	804ac98 <HAL_RCCEx_PeriphCLKConfig>
 804170a:	4603      	mov	r3, r0
 804170c:	2b00      	cmp	r3, #0
 804170e:	d001      	beq.n	8041714 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8041710:	f7ff ffbe 	bl	8041690 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8041714:	4b0c      	ldr	r3, [pc, #48]	; (8041748 <HAL_RNG_MspInit+0x74>)
 8041716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041718:	4a0b      	ldr	r2, [pc, #44]	; (8041748 <HAL_RNG_MspInit+0x74>)
 804171a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804171e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8041720:	4b09      	ldr	r3, [pc, #36]	; (8041748 <HAL_RNG_MspInit+0x74>)
 8041722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8041728:	60bb      	str	r3, [r7, #8]
 804172a:	68bb      	ldr	r3, [r7, #8]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 804172c:	2200      	movs	r2, #0
 804172e:	2100      	movs	r1, #0
 8041730:	205e      	movs	r0, #94	; 0x5e
 8041732:	f006 ff6f 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8041736:	205e      	movs	r0, #94	; 0x5e
 8041738:	f006 ff86 	bl	8048648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 804173c:	bf00      	nop
 804173e:	37a0      	adds	r7, #160	; 0xa0
 8041740:	46bd      	mov	sp, r7
 8041742:	bd80      	pop	{r7, pc}
 8041744:	420c0800 	.word	0x420c0800
 8041748:	40021000 	.word	0x40021000

0804174c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 804174c:	b580      	push	{r7, lr}
 804174e:	b08a      	sub	sp, #40	; 0x28
 8041750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8041752:	463b      	mov	r3, r7
 8041754:	2228      	movs	r2, #40	; 0x28
 8041756:	2100      	movs	r1, #0
 8041758:	4618      	mov	r0, r3
 804175a:	f00d fb80 	bl	804ee5e <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 804175e:	4b3a      	ldr	r3, [pc, #232]	; (8041848 <MX_RTC_Init+0xfc>)
 8041760:	4a3a      	ldr	r2, [pc, #232]	; (804184c <MX_RTC_Init+0x100>)
 8041762:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8041764:	4b38      	ldr	r3, [pc, #224]	; (8041848 <MX_RTC_Init+0xfc>)
 8041766:	2200      	movs	r2, #0
 8041768:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 804176a:	4b37      	ldr	r3, [pc, #220]	; (8041848 <MX_RTC_Init+0xfc>)
 804176c:	227f      	movs	r2, #127	; 0x7f
 804176e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8041770:	4b35      	ldr	r3, [pc, #212]	; (8041848 <MX_RTC_Init+0xfc>)
 8041772:	22ff      	movs	r2, #255	; 0xff
 8041774:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8041776:	4b34      	ldr	r3, [pc, #208]	; (8041848 <MX_RTC_Init+0xfc>)
 8041778:	2200      	movs	r2, #0
 804177a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 804177c:	4b32      	ldr	r3, [pc, #200]	; (8041848 <MX_RTC_Init+0xfc>)
 804177e:	2200      	movs	r2, #0
 8041780:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8041782:	4b31      	ldr	r3, [pc, #196]	; (8041848 <MX_RTC_Init+0xfc>)
 8041784:	2200      	movs	r2, #0
 8041786:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8041788:	4b2f      	ldr	r3, [pc, #188]	; (8041848 <MX_RTC_Init+0xfc>)
 804178a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 804178e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8041790:	4b2d      	ldr	r3, [pc, #180]	; (8041848 <MX_RTC_Init+0xfc>)
 8041792:	2200      	movs	r2, #0
 8041794:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8041796:	482c      	ldr	r0, [pc, #176]	; (8041848 <MX_RTC_Init+0xfc>)
 8041798:	f00a f894 	bl	804b8c4 <HAL_RTC_Init>
 804179c:	4603      	mov	r3, r0
 804179e:	2b00      	cmp	r3, #0
 80417a0:	d001      	beq.n	80417a6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80417a2:	f7ff ff75 	bl	8041690 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80417a6:	2300      	movs	r3, #0
 80417a8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80417aa:	2300      	movs	r3, #0
 80417ac:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80417ae:	2300      	movs	r3, #0
 80417b0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80417b2:	2300      	movs	r3, #0
 80417b4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80417b6:	2300      	movs	r3, #0
 80417b8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80417ba:	2300      	movs	r3, #0
 80417bc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80417be:	2300      	movs	r3, #0
 80417c0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80417c2:	2301      	movs	r3, #1
 80417c4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80417c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80417cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80417ce:	463b      	mov	r3, r7
 80417d0:	2201      	movs	r2, #1
 80417d2:	4619      	mov	r1, r3
 80417d4:	481c      	ldr	r0, [pc, #112]	; (8041848 <MX_RTC_Init+0xfc>)
 80417d6:	f00a f9f5 	bl	804bbc4 <HAL_RTC_SetAlarm_IT>
 80417da:	4603      	mov	r3, r0
 80417dc:	2b00      	cmp	r3, #0
 80417de:	d001      	beq.n	80417e4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80417e0:	f7ff ff56 	bl	8041690 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80417e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80417e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80417ea:	463b      	mov	r3, r7
 80417ec:	2201      	movs	r2, #1
 80417ee:	4619      	mov	r1, r3
 80417f0:	4815      	ldr	r0, [pc, #84]	; (8041848 <MX_RTC_Init+0xfc>)
 80417f2:	f00a f9e7 	bl	804bbc4 <HAL_RTC_SetAlarm_IT>
 80417f6:	4603      	mov	r3, r0
 80417f8:	2b00      	cmp	r3, #0
 80417fa:	d001      	beq.n	8041800 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 80417fc:	f7ff ff48 	bl	8041690 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp_IT(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8041800:	2200      	movs	r2, #0
 8041802:	2100      	movs	r1, #0
 8041804:	4810      	ldr	r0, [pc, #64]	; (8041848 <MX_RTC_Init+0xfc>)
 8041806:	f00a fbe5 	bl	804bfd4 <HAL_RTCEx_SetTimeStamp_IT>
 804180a:	4603      	mov	r3, r0
 804180c:	2b00      	cmp	r3, #0
 804180e:	d001      	beq.n	8041814 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8041810:	f7ff ff3e 	bl	8041690 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8041814:	2300      	movs	r3, #0
 8041816:	2200      	movs	r2, #0
 8041818:	2100      	movs	r1, #0
 804181a:	480b      	ldr	r0, [pc, #44]	; (8041848 <MX_RTC_Init+0xfc>)
 804181c:	f00a fc4e 	bl	804c0bc <HAL_RTCEx_SetWakeUpTimer_IT>
 8041820:	4603      	mov	r3, r0
 8041822:	2b00      	cmp	r3, #0
 8041824:	d001      	beq.n	804182a <MX_RTC_Init+0xde>
  {
    Error_Handler();
 8041826:	f7ff ff33 	bl	8041690 <Error_Handler>
  }
  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 804182a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 804182e:	4806      	ldr	r0, [pc, #24]	; (8041848 <MX_RTC_Init+0xfc>)
 8041830:	f00a fcf0 	bl	804c214 <HAL_RTCEx_SetCalibrationOutPut>
 8041834:	4603      	mov	r3, r0
 8041836:	2b00      	cmp	r3, #0
 8041838:	d001      	beq.n	804183e <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 804183a:	f7ff ff29 	bl	8041690 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 804183e:	bf00      	nop
 8041840:	3728      	adds	r7, #40	; 0x28
 8041842:	46bd      	mov	sp, r7
 8041844:	bd80      	pop	{r7, pc}
 8041846:	bf00      	nop
 8041848:	20019084 	.word	0x20019084
 804184c:	40002800 	.word	0x40002800

08041850 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8041850:	b580      	push	{r7, lr}
 8041852:	b0a8      	sub	sp, #160	; 0xa0
 8041854:	af00      	add	r7, sp, #0
 8041856:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8041858:	f107 030c 	add.w	r3, r7, #12
 804185c:	2294      	movs	r2, #148	; 0x94
 804185e:	2100      	movs	r1, #0
 8041860:	4618      	mov	r0, r3
 8041862:	f00d fafc 	bl	804ee5e <memset>
  if(rtcHandle->Instance==RTC)
 8041866:	687b      	ldr	r3, [r7, #4]
 8041868:	681b      	ldr	r3, [r3, #0]
 804186a:	4a1a      	ldr	r2, [pc, #104]	; (80418d4 <HAL_RTC_MspInit+0x84>)
 804186c:	4293      	cmp	r3, r2
 804186e:	d12c      	bne.n	80418ca <HAL_RTC_MspInit+0x7a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8041870:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8041874:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8041876:	f44f 7300 	mov.w	r3, #512	; 0x200
 804187a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 804187e:	f107 030c 	add.w	r3, r7, #12
 8041882:	4618      	mov	r0, r3
 8041884:	f009 fa08 	bl	804ac98 <HAL_RCCEx_PeriphCLKConfig>
 8041888:	4603      	mov	r3, r0
 804188a:	2b00      	cmp	r3, #0
 804188c:	d001      	beq.n	8041892 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 804188e:	f7ff feff 	bl	8041690 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8041892:	4b11      	ldr	r3, [pc, #68]	; (80418d8 <HAL_RTC_MspInit+0x88>)
 8041894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041898:	4a0f      	ldr	r2, [pc, #60]	; (80418d8 <HAL_RTC_MspInit+0x88>)
 804189a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804189e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80418a2:	4b0d      	ldr	r3, [pc, #52]	; (80418d8 <HAL_RTC_MspInit+0x88>)
 80418a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80418a6:	4a0c      	ldr	r2, [pc, #48]	; (80418d8 <HAL_RTC_MspInit+0x88>)
 80418a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80418ac:	6593      	str	r3, [r2, #88]	; 0x58
 80418ae:	4b0a      	ldr	r3, [pc, #40]	; (80418d8 <HAL_RTC_MspInit+0x88>)
 80418b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80418b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80418b6:	60bb      	str	r3, [r7, #8]
 80418b8:	68bb      	ldr	r3, [r7, #8]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80418ba:	2200      	movs	r2, #0
 80418bc:	2100      	movs	r1, #0
 80418be:	2002      	movs	r0, #2
 80418c0:	f006 fea8 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80418c4:	2002      	movs	r0, #2
 80418c6:	f006 febf 	bl	8048648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80418ca:	bf00      	nop
 80418cc:	37a0      	adds	r7, #160	; 0xa0
 80418ce:	46bd      	mov	sp, r7
 80418d0:	bd80      	pop	{r7, pc}
 80418d2:	bf00      	nop
 80418d4:	40002800 	.word	0x40002800
 80418d8:	40021000 	.word	0x40021000

080418dc <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 80418dc:	b580      	push	{r7, lr}
 80418de:	b082      	sub	sp, #8
 80418e0:	af00      	add	r7, sp, #0
 80418e2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80418e4:	687b      	ldr	r3, [r7, #4]
 80418e6:	681b      	ldr	r3, [r3, #0]
 80418e8:	4a0b      	ldr	r2, [pc, #44]	; (8041918 <HAL_RTC_MspDeInit+0x3c>)
 80418ea:	4293      	cmp	r3, r2
 80418ec:	d110      	bne.n	8041910 <HAL_RTC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 80418ee:	4b0b      	ldr	r3, [pc, #44]	; (804191c <HAL_RTC_MspDeInit+0x40>)
 80418f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80418f4:	4a09      	ldr	r2, [pc, #36]	; (804191c <HAL_RTC_MspDeInit+0x40>)
 80418f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80418fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_DISABLE();
 80418fe:	4b07      	ldr	r3, [pc, #28]	; (804191c <HAL_RTC_MspDeInit+0x40>)
 8041900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041902:	4a06      	ldr	r2, [pc, #24]	; (804191c <HAL_RTC_MspDeInit+0x40>)
 8041904:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8041908:	6593      	str	r3, [r2, #88]	; 0x58

    /* RTC interrupt Deinit */
    HAL_NVIC_DisableIRQ(RTC_IRQn);
 804190a:	2002      	movs	r0, #2
 804190c:	f006 feaa 	bl	8048664 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8041910:	bf00      	nop
 8041912:	3708      	adds	r7, #8
 8041914:	46bd      	mov	sp, r7
 8041916:	bd80      	pop	{r7, pc}
 8041918:	40002800 	.word	0x40002800
 804191c:	40021000 	.word	0x40021000

08041920 <RtcSetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcSetTimerContext( void )
{
 8041920:	b580      	push	{r7, lr}
 8041922:	af00      	add	r7, sp, #0
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 8041924:	4905      	ldr	r1, [pc, #20]	; (804193c <RtcSetTimerContext+0x1c>)
 8041926:	4806      	ldr	r0, [pc, #24]	; (8041940 <RtcSetTimerContext+0x20>)
 8041928:	f000 f9c6 	bl	8041cb8 <RtcGetCalendarValue>
 804192c:	4602      	mov	r2, r0
 804192e:	460b      	mov	r3, r1
 8041930:	4b04      	ldr	r3, [pc, #16]	; (8041944 <RtcSetTimerContext+0x24>)
 8041932:	601a      	str	r2, [r3, #0]
    return ( uint32_t )RtcTimerContext.Time;
 8041934:	4b03      	ldr	r3, [pc, #12]	; (8041944 <RtcSetTimerContext+0x24>)
 8041936:	681b      	ldr	r3, [r3, #0]
}
 8041938:	4618      	mov	r0, r3
 804193a:	bd80      	pop	{r7, pc}
 804193c:	200181e4 	.word	0x200181e4
 8041940:	200181f8 	.word	0x200181f8
 8041944:	200181e0 	.word	0x200181e0

08041948 <RtcGetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcGetTimerContext( void )
{
 8041948:	b480      	push	{r7}
 804194a:	af00      	add	r7, sp, #0
    return RtcTimerContext.Time;
 804194c:	4b03      	ldr	r3, [pc, #12]	; (804195c <RtcGetTimerContext+0x14>)
 804194e:	681b      	ldr	r3, [r3, #0]
}
 8041950:	4618      	mov	r0, r3
 8041952:	46bd      	mov	sp, r7
 8041954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041958:	4770      	bx	lr
 804195a:	bf00      	nop
 804195c:	200181e0 	.word	0x200181e0

08041960 <RtcGetMinimumTimeout>:
 * \brief returns the wake up time in ticks
 *
 * \retval wake up time in ticks
 */
uint32_t RtcGetMinimumTimeout( void )
{
 8041960:	b480      	push	{r7}
 8041962:	af00      	add	r7, sp, #0
    return( MIN_ALARM_DELAY );
 8041964:	2303      	movs	r3, #3
}
 8041966:	4618      	mov	r0, r3
 8041968:	46bd      	mov	sp, r7
 804196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804196e:	4770      	bx	lr

08041970 <RtcMs2Tick>:
 *
 * \param[IN] milliseconds Time in milliseconds
 * \retval returns time in timer ticks
 */
uint32_t RtcMs2Tick( uint32_t milliseconds )
{
 8041970:	b580      	push	{r7, lr}
 8041972:	b082      	sub	sp, #8
 8041974:	af00      	add	r7, sp, #0
 8041976:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( ( ( ( uint64_t )milliseconds ) * CONV_DENOM ) / CONV_NUMER );
 8041978:	687b      	ldr	r3, [r7, #4]
 804197a:	461a      	mov	r2, r3
 804197c:	f04f 0300 	mov.w	r3, #0
 8041980:	f04f 0000 	mov.w	r0, #0
 8041984:	f04f 0100 	mov.w	r1, #0
 8041988:	01d9      	lsls	r1, r3, #7
 804198a:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 804198e:	01d0      	lsls	r0, r2, #7
 8041990:	f04f 027d 	mov.w	r2, #125	; 0x7d
 8041994:	f04f 0300 	mov.w	r3, #0
 8041998:	f7fe fc4e 	bl	8040238 <__aeabi_uldivmod>
 804199c:	4602      	mov	r2, r0
 804199e:	460b      	mov	r3, r1
 80419a0:	4613      	mov	r3, r2
}
 80419a2:	4618      	mov	r0, r3
 80419a4:	3708      	adds	r7, #8
 80419a6:	46bd      	mov	sp, r7
 80419a8:	bd80      	pop	{r7, pc}

080419aa <RtcTick2Ms>:
 *
 * \param[IN] time in timer ticks
 * \retval returns time in milliseconds
 */
uint32_t RtcTick2Ms( uint32_t tick )
{
 80419aa:	b480      	push	{r7}
 80419ac:	b085      	sub	sp, #20
 80419ae:	af00      	add	r7, sp, #0
 80419b0:	6078      	str	r0, [r7, #4]
    uint32_t seconds = tick >> N_PREDIV_S;
 80419b2:	687b      	ldr	r3, [r7, #4]
 80419b4:	0a9b      	lsrs	r3, r3, #10
 80419b6:	60fb      	str	r3, [r7, #12]

    tick = tick & PREDIV_S;
 80419b8:	687b      	ldr	r3, [r7, #4]
 80419ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80419be:	607b      	str	r3, [r7, #4]
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 80419c0:	68fb      	ldr	r3, [r7, #12]
 80419c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80419c6:	fb02 f203 	mul.w	r2, r2, r3
 80419ca:	687b      	ldr	r3, [r7, #4]
 80419cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80419d0:	fb01 f303 	mul.w	r3, r1, r3
 80419d4:	0a9b      	lsrs	r3, r3, #10
 80419d6:	4413      	add	r3, r2
}
 80419d8:	4618      	mov	r0, r3
 80419da:	3714      	adds	r7, #20
 80419dc:	46bd      	mov	sp, r7
 80419de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419e2:	4770      	bx	lr

080419e4 <RtcSetAlarm>:
 * \note The alarm is set at now (read in this function) + timeout
 *
 * \param timeout Duration of the Timer ticks
 */
void RtcSetAlarm( uint32_t timeout )
{
 80419e4:	b5b0      	push	{r4, r5, r7, lr}
 80419e6:	b082      	sub	sp, #8
 80419e8:	af00      	add	r7, sp, #0
 80419ea:	6078      	str	r0, [r7, #4]
    // We don't go in Low Power mode for timeout below MIN_ALARM_DELAY
    if( ( int64_t )( MIN_ALARM_DELAY + McuWakeUpTimeCal ) < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 80419ec:	4b17      	ldr	r3, [pc, #92]	; (8041a4c <RtcSetAlarm+0x68>)
 80419ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80419f2:	3303      	adds	r3, #3
 80419f4:	461c      	mov	r4, r3
 80419f6:	ea4f 75e4 	mov.w	r5, r4, asr #31
 80419fa:	f000 f945 	bl	8041c88 <RtcGetTimerElapsedTime>
 80419fe:	4602      	mov	r2, r0
 8041a00:	687b      	ldr	r3, [r7, #4]
 8041a02:	1a9b      	subs	r3, r3, r2
 8041a04:	461a      	mov	r2, r3
 8041a06:	f04f 0300 	mov.w	r3, #0
 8041a0a:	4294      	cmp	r4, r2
 8041a0c:	eb75 0303 	sbcs.w	r3, r5, r3
 8041a10:	da04      	bge.n	8041a1c <RtcSetAlarm+0x38>
    {
        LpmSetStopMode( LPM_RTC_ID, LPM_ENABLE );
 8041a12:	2100      	movs	r1, #0
 8041a14:	2004      	movs	r0, #4
 8041a16:	f7ff fc9b 	bl	8041350 <LpmSetStopMode>
 8041a1a:	e003      	b.n	8041a24 <RtcSetAlarm+0x40>
    }
    else
    {
        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
 8041a1c:	2101      	movs	r1, #1
 8041a1e:	2004      	movs	r0, #4
 8041a20:	f7ff fc96 	bl	8041350 <LpmSetStopMode>
    }

    // In case stop mode is required
    if( LpmGetMode( ) == LPM_STOP_MODE )
 8041a24:	f7ff fcc2 	bl	80413ac <LpmGetMode>
 8041a28:	4603      	mov	r3, r0
 8041a2a:	2b01      	cmp	r3, #1
 8041a2c:	d106      	bne.n	8041a3c <RtcSetAlarm+0x58>
    {
        timeout = timeout - McuWakeUpTimeCal;
 8041a2e:	4b07      	ldr	r3, [pc, #28]	; (8041a4c <RtcSetAlarm+0x68>)
 8041a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8041a34:	461a      	mov	r2, r3
 8041a36:	687b      	ldr	r3, [r7, #4]
 8041a38:	1a9b      	subs	r3, r3, r2
 8041a3a:	607b      	str	r3, [r7, #4]
    }

    RtcStartAlarm( timeout );
 8041a3c:	6878      	ldr	r0, [r7, #4]
 8041a3e:	f000 f817 	bl	8041a70 <RtcStartAlarm>
}
 8041a42:	bf00      	nop
 8041a44:	3708      	adds	r7, #8
 8041a46:	46bd      	mov	sp, r7
 8041a48:	bdb0      	pop	{r4, r5, r7, pc}
 8041a4a:	bf00      	nop
 8041a4c:	20018140 	.word	0x20018140

08041a50 <RtcStopAlarm>:

void RtcStopAlarm( void )
{
 8041a50:	b580      	push	{r7, lr}
 8041a52:	af00      	add	r7, sp, #0
    // Disable the Alarm A interrupt
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8041a54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8041a58:	4803      	ldr	r0, [pc, #12]	; (8041a68 <RtcStopAlarm+0x18>)
 8041a5a:	f00a f97d 	bl	804bd58 <HAL_RTC_DeactivateAlarm>

    // Clear RTC Alarm Flag
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 8041a5e:	4b03      	ldr	r3, [pc, #12]	; (8041a6c <RtcStopAlarm+0x1c>)
 8041a60:	2201      	movs	r2, #1
 8041a62:	65da      	str	r2, [r3, #92]	; 0x5c

    // Clear the EXTI's line Flag for RTC Alarm
//    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
}
 8041a64:	bf00      	nop
 8041a66:	bd80      	pop	{r7, pc}
 8041a68:	20018144 	.word	0x20018144
 8041a6c:	40002800 	.word	0x40002800

08041a70 <RtcStartAlarm>:

void RtcStartAlarm( uint32_t timeout )
{
 8041a70:	b5b0      	push	{r4, r5, r7, lr}
 8041a72:	b08c      	sub	sp, #48	; 0x30
 8041a74:	af00      	add	r7, sp, #0
 8041a76:	6078      	str	r0, [r7, #4]
    uint16_t rtcAlarmSubSeconds = 0;
 8041a78:	2300      	movs	r3, #0
 8041a7a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t rtcAlarmSeconds = 0;
 8041a7c:	2300      	movs	r3, #0
 8041a7e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t rtcAlarmMinutes = 0;
 8041a80:	2300      	movs	r3, #0
 8041a82:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t rtcAlarmHours = 0;
 8041a84:	2300      	movs	r3, #0
 8041a86:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t rtcAlarmDays = 0;
 8041a88:	2300      	movs	r3, #0
 8041a8a:	84fb      	strh	r3, [r7, #38]	; 0x26
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 8041a8c:	4b6e      	ldr	r3, [pc, #440]	; (8041c48 <RtcStartAlarm+0x1d8>)
 8041a8e:	f107 0410 	add.w	r4, r7, #16
 8041a92:	1d1d      	adds	r5, r3, #4
 8041a94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8041a96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8041a98:	682b      	ldr	r3, [r5, #0]
 8041a9a:	6023      	str	r3, [r4, #0]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 8041a9c:	4b6a      	ldr	r3, [pc, #424]	; (8041c48 <RtcStartAlarm+0x1d8>)
 8041a9e:	699b      	ldr	r3, [r3, #24]
 8041aa0:	60fb      	str	r3, [r7, #12]

    RtcStopAlarm( );
 8041aa2:	f7ff ffd5 	bl	8041a50 <RtcStopAlarm>

    /*reverse counter */
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 8041aa6:	697b      	ldr	r3, [r7, #20]
 8041aa8:	b29b      	uxth	r3, r3
 8041aaa:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8041aae:	3303      	adds	r3, #3
 8041ab0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 8041ab2:	687b      	ldr	r3, [r7, #4]
 8041ab4:	b29b      	uxth	r3, r3
 8041ab6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8041aba:	b29a      	uxth	r2, r3
 8041abc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8041abe:	4413      	add	r3, r2
 8041ac0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    // convert timeout  to seconds
    timeout >>= N_PREDIV_S;
 8041ac2:	687b      	ldr	r3, [r7, #4]
 8041ac4:	0a9b      	lsrs	r3, r3, #10
 8041ac6:	607b      	str	r3, [r7, #4]

    // Convert microsecs to RTC format and add to 'Now'
    rtcAlarmDays =  date.Date;
 8041ac8:	7bbb      	ldrb	r3, [r7, #14]
 8041aca:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= SECONDS_IN_1DAY )
 8041acc:	e008      	b.n	8041ae0 <RtcStartAlarm+0x70>
    {
        timeout -= SECONDS_IN_1DAY;
 8041ace:	687b      	ldr	r3, [r7, #4]
 8041ad0:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8041ad4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8041ad8:	607b      	str	r3, [r7, #4]
        rtcAlarmDays++;
 8041ada:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8041adc:	3301      	adds	r3, #1
 8041ade:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= SECONDS_IN_1DAY )
 8041ae0:	687b      	ldr	r3, [r7, #4]
 8041ae2:	4a5a      	ldr	r2, [pc, #360]	; (8041c4c <RtcStartAlarm+0x1dc>)
 8041ae4:	4293      	cmp	r3, r2
 8041ae6:	d8f2      	bhi.n	8041ace <RtcStartAlarm+0x5e>
    }

    // Calc hours
    rtcAlarmHours = time.Hours;
 8041ae8:	7c3b      	ldrb	r3, [r7, #16]
 8041aea:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= SECONDS_IN_1HOUR )
 8041aec:	e006      	b.n	8041afc <RtcStartAlarm+0x8c>
    {
        timeout -= SECONDS_IN_1HOUR;
 8041aee:	687b      	ldr	r3, [r7, #4]
 8041af0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8041af4:	607b      	str	r3, [r7, #4]
        rtcAlarmHours++;
 8041af6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8041af8:	3301      	adds	r3, #1
 8041afa:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= SECONDS_IN_1HOUR )
 8041afc:	687b      	ldr	r3, [r7, #4]
 8041afe:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8041b02:	d2f4      	bcs.n	8041aee <RtcStartAlarm+0x7e>
    }

    // Calc minutes
    rtcAlarmMinutes = time.Minutes;
 8041b04:	7c7b      	ldrb	r3, [r7, #17]
 8041b06:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= SECONDS_IN_1MINUTE )
 8041b08:	e005      	b.n	8041b16 <RtcStartAlarm+0xa6>
    {
        timeout -= SECONDS_IN_1MINUTE;
 8041b0a:	687b      	ldr	r3, [r7, #4]
 8041b0c:	3b3c      	subs	r3, #60	; 0x3c
 8041b0e:	607b      	str	r3, [r7, #4]
        rtcAlarmMinutes++;
 8041b10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8041b12:	3301      	adds	r3, #1
 8041b14:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= SECONDS_IN_1MINUTE )
 8041b16:	687b      	ldr	r3, [r7, #4]
 8041b18:	2b3b      	cmp	r3, #59	; 0x3b
 8041b1a:	d8f6      	bhi.n	8041b0a <RtcStartAlarm+0x9a>
    }

    // Calc seconds
    rtcAlarmSeconds =  time.Seconds + timeout;
 8041b1c:	7cbb      	ldrb	r3, [r7, #18]
 8041b1e:	b29a      	uxth	r2, r3
 8041b20:	687b      	ldr	r3, [r7, #4]
 8041b22:	b29b      	uxth	r3, r3
 8041b24:	4413      	add	r3, r2
 8041b26:	85bb      	strh	r3, [r7, #44]	; 0x2c

    //***** Correct for modulo********
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8041b28:	e006      	b.n	8041b38 <RtcStartAlarm+0xc8>
    {
        rtcAlarmSubSeconds -= ( PREDIV_S + 1 );
 8041b2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8041b2c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8041b30:	85fb      	strh	r3, [r7, #46]	; 0x2e
        rtcAlarmSeconds++;
 8041b32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8041b34:	3301      	adds	r3, #1
 8041b36:	85bb      	strh	r3, [r7, #44]	; 0x2c
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8041b38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8041b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041b3e:	d2f4      	bcs.n	8041b2a <RtcStartAlarm+0xba>
    }

    while( rtcAlarmSeconds >= SECONDS_IN_1MINUTE )
 8041b40:	e005      	b.n	8041b4e <RtcStartAlarm+0xde>
    {
        rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8041b42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8041b44:	3b3c      	subs	r3, #60	; 0x3c
 8041b46:	85bb      	strh	r3, [r7, #44]	; 0x2c
        rtcAlarmMinutes++;
 8041b48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8041b4a:	3301      	adds	r3, #1
 8041b4c:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( rtcAlarmSeconds >= SECONDS_IN_1MINUTE )
 8041b4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8041b50:	2b3b      	cmp	r3, #59	; 0x3b
 8041b52:	d8f6      	bhi.n	8041b42 <RtcStartAlarm+0xd2>
    }

    while( rtcAlarmMinutes >= MINUTES_IN_1HOUR )
 8041b54:	e005      	b.n	8041b62 <RtcStartAlarm+0xf2>
    {
        rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8041b56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8041b58:	3b3c      	subs	r3, #60	; 0x3c
 8041b5a:	857b      	strh	r3, [r7, #42]	; 0x2a
        rtcAlarmHours++;
 8041b5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8041b5e:	3301      	adds	r3, #1
 8041b60:	853b      	strh	r3, [r7, #40]	; 0x28
    while( rtcAlarmMinutes >= MINUTES_IN_1HOUR )
 8041b62:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8041b64:	2b3b      	cmp	r3, #59	; 0x3b
 8041b66:	d8f6      	bhi.n	8041b56 <RtcStartAlarm+0xe6>
    }

    while( rtcAlarmHours >= HOURS_IN_1DAY )
 8041b68:	e005      	b.n	8041b76 <RtcStartAlarm+0x106>
    {
        rtcAlarmHours -= HOURS_IN_1DAY;
 8041b6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8041b6c:	3b18      	subs	r3, #24
 8041b6e:	853b      	strh	r3, [r7, #40]	; 0x28
        rtcAlarmDays++;
 8041b70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8041b72:	3301      	adds	r3, #1
 8041b74:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( rtcAlarmHours >= HOURS_IN_1DAY )
 8041b76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8041b78:	2b17      	cmp	r3, #23
 8041b7a:	d8f6      	bhi.n	8041b6a <RtcStartAlarm+0xfa>
    }

    if( date.Year % 4 == 0 )
 8041b7c:	7bfb      	ldrb	r3, [r7, #15]
 8041b7e:	f003 0303 	and.w	r3, r3, #3
 8041b82:	b2db      	uxtb	r3, r3
 8041b84:	2b00      	cmp	r3, #0
 8041b86:	d113      	bne.n	8041bb0 <RtcStartAlarm+0x140>
    {
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 8041b88:	7b7b      	ldrb	r3, [r7, #13]
 8041b8a:	3b01      	subs	r3, #1
 8041b8c:	4a30      	ldr	r2, [pc, #192]	; (8041c50 <RtcStartAlarm+0x1e0>)
 8041b8e:	5cd3      	ldrb	r3, [r2, r3]
 8041b90:	b29b      	uxth	r3, r3
 8041b92:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8041b94:	429a      	cmp	r2, r3
 8041b96:	d91e      	bls.n	8041bd6 <RtcStartAlarm+0x166>
        {
            rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[date.Month - 1];
 8041b98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8041b9a:	7b7a      	ldrb	r2, [r7, #13]
 8041b9c:	3a01      	subs	r2, #1
 8041b9e:	492c      	ldr	r1, [pc, #176]	; (8041c50 <RtcStartAlarm+0x1e0>)
 8041ba0:	5c8a      	ldrb	r2, [r1, r2]
 8041ba2:	fb93 f1f2 	sdiv	r1, r3, r2
 8041ba6:	fb02 f201 	mul.w	r2, r2, r1
 8041baa:	1a9b      	subs	r3, r3, r2
 8041bac:	84fb      	strh	r3, [r7, #38]	; 0x26
 8041bae:	e012      	b.n	8041bd6 <RtcStartAlarm+0x166>
        }
    }
    else
    {
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 8041bb0:	7b7b      	ldrb	r3, [r7, #13]
 8041bb2:	3b01      	subs	r3, #1
 8041bb4:	4a27      	ldr	r2, [pc, #156]	; (8041c54 <RtcStartAlarm+0x1e4>)
 8041bb6:	5cd3      	ldrb	r3, [r2, r3]
 8041bb8:	b29b      	uxth	r3, r3
 8041bba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8041bbc:	429a      	cmp	r2, r3
 8041bbe:	d90a      	bls.n	8041bd6 <RtcStartAlarm+0x166>
        {
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 8041bc0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8041bc2:	7b7a      	ldrb	r2, [r7, #13]
 8041bc4:	3a01      	subs	r2, #1
 8041bc6:	4923      	ldr	r1, [pc, #140]	; (8041c54 <RtcStartAlarm+0x1e4>)
 8041bc8:	5c8a      	ldrb	r2, [r1, r2]
 8041bca:	fb93 f1f2 	sdiv	r1, r3, r2
 8041bce:	fb02 f201 	mul.w	r2, r2, r1
 8041bd2:	1a9b      	subs	r3, r3, r2
 8041bd4:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    }

    /* Set RTC_AlarmStructure with calculated values*/
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 8041bd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8041bd8:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8041bdc:	3303      	adds	r3, #3
 8041bde:	461a      	mov	r2, r3
 8041be0:	4b1d      	ldr	r3, [pc, #116]	; (8041c58 <RtcStartAlarm+0x1e8>)
 8041be2:	605a      	str	r2, [r3, #4]
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK;
 8041be4:	4b1c      	ldr	r3, [pc, #112]	; (8041c58 <RtcStartAlarm+0x1e8>)
 8041be6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8041bea:	619a      	str	r2, [r3, #24]
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 8041bec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8041bee:	b2da      	uxtb	r2, r3
 8041bf0:	4b19      	ldr	r3, [pc, #100]	; (8041c58 <RtcStartAlarm+0x1e8>)
 8041bf2:	709a      	strb	r2, [r3, #2]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 8041bf4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8041bf6:	b2da      	uxtb	r2, r3
 8041bf8:	4b17      	ldr	r3, [pc, #92]	; (8041c58 <RtcStartAlarm+0x1e8>)
 8041bfa:	705a      	strb	r2, [r3, #1]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 8041bfc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8041bfe:	b2da      	uxtb	r2, r3
 8041c00:	4b15      	ldr	r3, [pc, #84]	; (8041c58 <RtcStartAlarm+0x1e8>)
 8041c02:	701a      	strb	r2, [r3, #0]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 8041c04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8041c06:	b2da      	uxtb	r2, r3
 8041c08:	4b13      	ldr	r3, [pc, #76]	; (8041c58 <RtcStartAlarm+0x1e8>)
 8041c0a:	f883 2020 	strb.w	r2, [r3, #32]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 8041c0e:	7cfa      	ldrb	r2, [r7, #19]
 8041c10:	4b11      	ldr	r3, [pc, #68]	; (8041c58 <RtcStartAlarm+0x1e8>)
 8041c12:	70da      	strb	r2, [r3, #3]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8041c14:	4b10      	ldr	r3, [pc, #64]	; (8041c58 <RtcStartAlarm+0x1e8>)
 8041c16:	2200      	movs	r2, #0
 8041c18:	61da      	str	r2, [r3, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 8041c1a:	4b0f      	ldr	r3, [pc, #60]	; (8041c58 <RtcStartAlarm+0x1e8>)
 8041c1c:	2200      	movs	r2, #0
 8041c1e:	615a      	str	r2, [r3, #20]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 8041c20:	4b0d      	ldr	r3, [pc, #52]	; (8041c58 <RtcStartAlarm+0x1e8>)
 8041c22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8041c26:	625a      	str	r2, [r3, #36]	; 0x24
    RtcAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8041c28:	4b0b      	ldr	r3, [pc, #44]	; (8041c58 <RtcStartAlarm+0x1e8>)
 8041c2a:	2200      	movs	r2, #0
 8041c2c:	60da      	str	r2, [r3, #12]
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8041c2e:	4b0a      	ldr	r3, [pc, #40]	; (8041c58 <RtcStartAlarm+0x1e8>)
 8041c30:	2200      	movs	r2, #0
 8041c32:	611a      	str	r2, [r3, #16]

    // Set RTC_Alarm
    HAL_RTC_SetAlarm_IT( &RtcHandle, &RtcAlarm, RTC_FORMAT_BIN );
 8041c34:	2200      	movs	r2, #0
 8041c36:	4908      	ldr	r1, [pc, #32]	; (8041c58 <RtcStartAlarm+0x1e8>)
 8041c38:	4808      	ldr	r0, [pc, #32]	; (8041c5c <RtcStartAlarm+0x1ec>)
 8041c3a:	f009 ffc3 	bl	804bbc4 <HAL_RTC_SetAlarm_IT>
}
 8041c3e:	bf00      	nop
 8041c40:	3730      	adds	r7, #48	; 0x30
 8041c42:	46bd      	mov	sp, r7
 8041c44:	bdb0      	pop	{r4, r5, r7, pc}
 8041c46:	bf00      	nop
 8041c48:	200181e0 	.word	0x200181e0
 8041c4c:	0001517f 	.word	0x0001517f
 8041c50:	0804ff58 	.word	0x0804ff58
 8041c54:	0804ff4c 	.word	0x0804ff4c
 8041c58:	200181b8 	.word	0x200181b8
 8041c5c:	20018144 	.word	0x20018144

08041c60 <RtcGetTimerValue>:

uint32_t RtcGetTimerValue( void )
{
 8041c60:	b580      	push	{r7, lr}
 8041c62:	b088      	sub	sp, #32
 8041c64:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;

    uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 8041c66:	f107 0208 	add.w	r2, r7, #8
 8041c6a:	1d3b      	adds	r3, r7, #4
 8041c6c:	4611      	mov	r1, r2
 8041c6e:	4618      	mov	r0, r3
 8041c70:	f000 f822 	bl	8041cb8 <RtcGetCalendarValue>
 8041c74:	4602      	mov	r2, r0
 8041c76:	460b      	mov	r3, r1
 8041c78:	4613      	mov	r3, r2
 8041c7a:	61fb      	str	r3, [r7, #28]

    return( calendarValue );
 8041c7c:	69fb      	ldr	r3, [r7, #28]
}
 8041c7e:	4618      	mov	r0, r3
 8041c80:	3720      	adds	r7, #32
 8041c82:	46bd      	mov	sp, r7
 8041c84:	bd80      	pop	{r7, pc}
	...

08041c88 <RtcGetTimerElapsedTime>:

uint32_t RtcGetTimerElapsedTime( void )
{
 8041c88:	b580      	push	{r7, lr}
 8041c8a:	b088      	sub	sp, #32
 8041c8c:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;

  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 8041c8e:	f107 0208 	add.w	r2, r7, #8
 8041c92:	1d3b      	adds	r3, r7, #4
 8041c94:	4611      	mov	r1, r2
 8041c96:	4618      	mov	r0, r3
 8041c98:	f000 f80e 	bl	8041cb8 <RtcGetCalendarValue>
 8041c9c:	4602      	mov	r2, r0
 8041c9e:	460b      	mov	r3, r1
 8041ca0:	4613      	mov	r3, r2
 8041ca2:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 8041ca4:	4b03      	ldr	r3, [pc, #12]	; (8041cb4 <RtcGetTimerElapsedTime+0x2c>)
 8041ca6:	681b      	ldr	r3, [r3, #0]
 8041ca8:	69fa      	ldr	r2, [r7, #28]
 8041caa:	1ad3      	subs	r3, r2, r3
}
 8041cac:	4618      	mov	r0, r3
 8041cae:	3720      	adds	r7, #32
 8041cb0:	46bd      	mov	sp, r7
 8041cb2:	bd80      	pop	{r7, pc}
 8041cb4:	200181e0 	.word	0x200181e0

08041cb8 <RtcGetCalendarValue>:
{
    return McuWakeUpTimeCal;
}

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 8041cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8041cbc:	b088      	sub	sp, #32
 8041cbe:	af00      	add	r7, sp, #0
 8041cc0:	6078      	str	r0, [r7, #4]
 8041cc2:	6039      	str	r1, [r7, #0]
    uint64_t calendarValue = 0;
 8041cc4:	f04f 0200 	mov.w	r2, #0
 8041cc8:	f04f 0300 	mov.w	r3, #0
 8041ccc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 8041cd0:	4b3f      	ldr	r3, [pc, #252]	; (8041dd0 <RtcGetCalendarValue+0x118>)
 8041cd2:	689b      	ldr	r3, [r3, #8]
 8041cd4:	617b      	str	r3, [r7, #20]
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 8041cd6:	2200      	movs	r2, #0
 8041cd8:	6879      	ldr	r1, [r7, #4]
 8041cda:	483e      	ldr	r0, [pc, #248]	; (8041dd4 <RtcGetCalendarValue+0x11c>)
 8041cdc:	f009 ff24 	bl	804bb28 <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &RtcHandle, time, RTC_FORMAT_BIN );
 8041ce0:	2200      	movs	r2, #0
 8041ce2:	6839      	ldr	r1, [r7, #0]
 8041ce4:	483b      	ldr	r0, [pc, #236]	; (8041dd4 <RtcGetCalendarValue+0x11c>)
 8041ce6:	f009 fec3 	bl	804ba70 <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 8041cea:	4b39      	ldr	r3, [pc, #228]	; (8041dd0 <RtcGetCalendarValue+0x118>)
 8041cec:	689b      	ldr	r3, [r3, #8]
 8041cee:	697a      	ldr	r2, [r7, #20]
 8041cf0:	429a      	cmp	r2, r3
 8041cf2:	d1ed      	bne.n	8041cd0 <RtcGetCalendarValue+0x18>

    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 8041cf4:	687b      	ldr	r3, [r7, #4]
 8041cf6:	78db      	ldrb	r3, [r3, #3]
 8041cf8:	461a      	mov	r2, r3
 8041cfa:	f240 53b5 	movw	r3, #1461	; 0x5b5
 8041cfe:	fb03 f302 	mul.w	r3, r3, r2
 8041d02:	3303      	adds	r3, #3
 8041d04:	089b      	lsrs	r3, r3, #2
 8041d06:	613b      	str	r3, [r7, #16]

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 8041d08:	687b      	ldr	r3, [r7, #4]
 8041d0a:	78db      	ldrb	r3, [r3, #3]
 8041d0c:	f003 0303 	and.w	r3, r3, #3
 8041d10:	b2db      	uxtb	r3, r3
 8041d12:	2b00      	cmp	r3, #0
 8041d14:	d101      	bne.n	8041d1a <RtcGetCalendarValue+0x62>
 8041d16:	4b30      	ldr	r3, [pc, #192]	; (8041dd8 <RtcGetCalendarValue+0x120>)
 8041d18:	e000      	b.n	8041d1c <RtcGetCalendarValue+0x64>
 8041d1a:	4b30      	ldr	r3, [pc, #192]	; (8041ddc <RtcGetCalendarValue+0x124>)
 8041d1c:	60fb      	str	r3, [r7, #12]

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8041d1e:	687b      	ldr	r3, [r7, #4]
 8041d20:	785b      	ldrb	r3, [r3, #1]
 8041d22:	1e5a      	subs	r2, r3, #1
 8041d24:	4613      	mov	r3, r2
 8041d26:	011b      	lsls	r3, r3, #4
 8041d28:	1a9b      	subs	r3, r3, r2
 8041d2a:	009b      	lsls	r3, r3, #2
 8041d2c:	4413      	add	r3, r2
 8041d2e:	3301      	adds	r3, #1
 8041d30:	0fda      	lsrs	r2, r3, #31
 8041d32:	4413      	add	r3, r2
 8041d34:	105b      	asrs	r3, r3, #1
 8041d36:	4619      	mov	r1, r3
 8041d38:	687b      	ldr	r3, [r7, #4]
 8041d3a:	785b      	ldrb	r3, [r3, #1]
 8041d3c:	3b01      	subs	r3, #1
 8041d3e:	005b      	lsls	r3, r3, #1
 8041d40:	68fa      	ldr	r2, [r7, #12]
 8041d42:	fa22 f303 	lsr.w	r3, r2, r3
 8041d46:	f003 0303 	and.w	r3, r3, #3
 8041d4a:	1acb      	subs	r3, r1, r3
 8041d4c:	693a      	ldr	r2, [r7, #16]
 8041d4e:	4413      	add	r3, r2
 8041d50:	613b      	str	r3, [r7, #16]

    seconds += ( date->Date -1 );
 8041d52:	687b      	ldr	r3, [r7, #4]
 8041d54:	789b      	ldrb	r3, [r3, #2]
 8041d56:	461a      	mov	r2, r3
 8041d58:	693b      	ldr	r3, [r7, #16]
 8041d5a:	4413      	add	r3, r2
 8041d5c:	3b01      	subs	r3, #1
 8041d5e:	613b      	str	r3, [r7, #16]

    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;
 8041d60:	693b      	ldr	r3, [r7, #16]
 8041d62:	4a1f      	ldr	r2, [pc, #124]	; (8041de0 <RtcGetCalendarValue+0x128>)
 8041d64:	fb02 f303 	mul.w	r3, r2, r3
 8041d68:	613b      	str	r3, [r7, #16]

    seconds += ( ( uint32_t )time->Seconds +
 8041d6a:	683b      	ldr	r3, [r7, #0]
 8041d6c:	789b      	ldrb	r3, [r3, #2]
 8041d6e:	4618      	mov	r0, r3
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 8041d70:	683b      	ldr	r3, [r7, #0]
 8041d72:	781b      	ldrb	r3, [r3, #0]
 8041d74:	461a      	mov	r2, r3
 8041d76:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8041d7a:	fb03 f202 	mul.w	r2, r3, r2
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 8041d7e:	683b      	ldr	r3, [r7, #0]
 8041d80:	785b      	ldrb	r3, [r3, #1]
 8041d82:	4619      	mov	r1, r3
 8041d84:	460b      	mov	r3, r1
 8041d86:	011b      	lsls	r3, r3, #4
 8041d88:	1a5b      	subs	r3, r3, r1
 8041d8a:	009b      	lsls	r3, r3, #2
 8041d8c:	4413      	add	r3, r2
 8041d8e:	4403      	add	r3, r0
    seconds += ( ( uint32_t )time->Seconds +
 8041d90:	693a      	ldr	r2, [r7, #16]
 8041d92:	4413      	add	r3, r2
 8041d94:	613b      	str	r3, [r7, #16]

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 8041d96:	693b      	ldr	r3, [r7, #16]
 8041d98:	461a      	mov	r2, r3
 8041d9a:	f04f 0300 	mov.w	r3, #0
 8041d9e:	0d95      	lsrs	r5, r2, #22
 8041da0:	0294      	lsls	r4, r2, #10
 8041da2:	683b      	ldr	r3, [r7, #0]
 8041da4:	685b      	ldr	r3, [r3, #4]
 8041da6:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8041daa:	3303      	adds	r3, #3
 8041dac:	461a      	mov	r2, r3
 8041dae:	f04f 0300 	mov.w	r3, #0
 8041db2:	eb14 0802 	adds.w	r8, r4, r2
 8041db6:	eb45 0903 	adc.w	r9, r5, r3
 8041dba:	e9c7 8906 	strd	r8, r9, [r7, #24]

    return( calendarValue );
 8041dbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 8041dc2:	4610      	mov	r0, r2
 8041dc4:	4619      	mov	r1, r3
 8041dc6:	3720      	adds	r7, #32
 8041dc8:	46bd      	mov	sp, r7
 8041dca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8041dce:	bf00      	nop
 8041dd0:	40002800 	.word	0x40002800
 8041dd4:	20018144 	.word	0x20018144
 8041dd8:	00445550 	.word	0x00445550
 8041ddc:	0099aaa0 	.word	0x0099aaa0
 8041de0:	00015180 	.word	0x00015180

08041de4 <HAL_RTC_AlarmAEventCallback>:
 * \brief  Alarm A callback.
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
 8041de4:	b580      	push	{r7, lr}
 8041de6:	b082      	sub	sp, #8
 8041de8:	af00      	add	r7, sp, #0
 8041dea:	6078      	str	r0, [r7, #4]
    TimerIrqHandler( );
 8041dec:	f000 ff26 	bl	8042c3c <TimerIrqHandler>
}
 8041df0:	bf00      	nop
 8041df2:	3708      	adds	r7, #8
 8041df4:	46bd      	mov	sp, r7
 8041df6:	bd80      	pop	{r7, pc}

08041df8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8041df8:	b580      	push	{r7, lr}
 8041dfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8041dfc:	4b1b      	ldr	r3, [pc, #108]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041dfe:	4a1c      	ldr	r2, [pc, #112]	; (8041e70 <MX_SPI1_Init+0x78>)
 8041e00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8041e02:	4b1a      	ldr	r3, [pc, #104]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8041e08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8041e0a:	4b18      	ldr	r3, [pc, #96]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8041e10:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_12BIT;
 8041e12:	4b16      	ldr	r3, [pc, #88]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e14:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 8041e18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8041e1a:	4b14      	ldr	r3, [pc, #80]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e1c:	2200      	movs	r2, #0
 8041e1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8041e20:	4b12      	ldr	r3, [pc, #72]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e22:	2200      	movs	r2, #0
 8041e24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8041e26:	4b11      	ldr	r3, [pc, #68]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8041e2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8041e2e:	4b0f      	ldr	r3, [pc, #60]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e30:	2208      	movs	r2, #8
 8041e32:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8041e34:	4b0d      	ldr	r3, [pc, #52]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e36:	2200      	movs	r2, #0
 8041e38:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8041e3a:	4b0c      	ldr	r3, [pc, #48]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e3c:	2200      	movs	r2, #0
 8041e3e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8041e40:	4b0a      	ldr	r3, [pc, #40]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e42:	2200      	movs	r2, #0
 8041e44:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8041e46:	4b09      	ldr	r3, [pc, #36]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e48:	2207      	movs	r2, #7
 8041e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8041e4c:	4b07      	ldr	r3, [pc, #28]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e4e:	2200      	movs	r2, #0
 8041e50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8041e52:	4b06      	ldr	r3, [pc, #24]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e54:	2200      	movs	r2, #0
 8041e56:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8041e58:	4804      	ldr	r0, [pc, #16]	; (8041e6c <MX_SPI1_Init+0x74>)
 8041e5a:	f00a faa3 	bl	804c3a4 <HAL_SPI_Init>
 8041e5e:	4603      	mov	r3, r0
 8041e60:	2b00      	cmp	r3, #0
 8041e62:	d001      	beq.n	8041e68 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 8041e64:	f7ff fc14 	bl	8041690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8041e68:	bf00      	nop
 8041e6a:	bd80      	pop	{r7, pc}
 8041e6c:	20019184 	.word	0x20019184
 8041e70:	40013000 	.word	0x40013000

08041e74 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8041e74:	b580      	push	{r7, lr}
 8041e76:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8041e78:	4b1b      	ldr	r3, [pc, #108]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041e7a:	4a1c      	ldr	r2, [pc, #112]	; (8041eec <MX_SPI3_Init+0x78>)
 8041e7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8041e7e:	4b1a      	ldr	r3, [pc, #104]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041e80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8041e84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8041e86:	4b18      	ldr	r3, [pc, #96]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041e88:	2200      	movs	r2, #0
 8041e8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8041e8c:	4b16      	ldr	r3, [pc, #88]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041e8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8041e92:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8041e94:	4b14      	ldr	r3, [pc, #80]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041e96:	2200      	movs	r2, #0
 8041e98:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8041e9a:	4b13      	ldr	r3, [pc, #76]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041e9c:	2200      	movs	r2, #0
 8041e9e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8041ea0:	4b11      	ldr	r3, [pc, #68]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8041ea6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8041ea8:	4b0f      	ldr	r3, [pc, #60]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041eaa:	2218      	movs	r2, #24
 8041eac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8041eae:	4b0e      	ldr	r3, [pc, #56]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041eb0:	2200      	movs	r2, #0
 8041eb2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8041eb4:	4b0c      	ldr	r3, [pc, #48]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041eb6:	2200      	movs	r2, #0
 8041eb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8041eba:	4b0b      	ldr	r3, [pc, #44]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041ebc:	2200      	movs	r2, #0
 8041ebe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8041ec0:	4b09      	ldr	r3, [pc, #36]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041ec2:	2207      	movs	r2, #7
 8041ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8041ec6:	4b08      	ldr	r3, [pc, #32]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041ec8:	2200      	movs	r2, #0
 8041eca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8041ecc:	4b06      	ldr	r3, [pc, #24]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041ece:	2208      	movs	r2, #8
 8041ed0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8041ed2:	4805      	ldr	r0, [pc, #20]	; (8041ee8 <MX_SPI3_Init+0x74>)
 8041ed4:	f00a fa66 	bl	804c3a4 <HAL_SPI_Init>
 8041ed8:	4603      	mov	r3, r0
 8041eda:	2b00      	cmp	r3, #0
 8041edc:	d001      	beq.n	8041ee2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8041ede:	f7ff fbd7 	bl	8041690 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8041ee2:	bf00      	nop
 8041ee4:	bd80      	pop	{r7, pc}
 8041ee6:	bf00      	nop
 8041ee8:	200190f8 	.word	0x200190f8
 8041eec:	40003c00 	.word	0x40003c00

08041ef0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8041ef0:	b580      	push	{r7, lr}
 8041ef2:	b08c      	sub	sp, #48	; 0x30
 8041ef4:	af00      	add	r7, sp, #0
 8041ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041ef8:	f107 031c 	add.w	r3, r7, #28
 8041efc:	2200      	movs	r2, #0
 8041efe:	601a      	str	r2, [r3, #0]
 8041f00:	605a      	str	r2, [r3, #4]
 8041f02:	609a      	str	r2, [r3, #8]
 8041f04:	60da      	str	r2, [r3, #12]
 8041f06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8041f08:	687b      	ldr	r3, [r7, #4]
 8041f0a:	681b      	ldr	r3, [r3, #0]
 8041f0c:	4a36      	ldr	r2, [pc, #216]	; (8041fe8 <HAL_SPI_MspInit+0xf8>)
 8041f0e:	4293      	cmp	r3, r2
 8041f10:	d130      	bne.n	8041f74 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8041f12:	4b36      	ldr	r3, [pc, #216]	; (8041fec <HAL_SPI_MspInit+0xfc>)
 8041f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041f16:	4a35      	ldr	r2, [pc, #212]	; (8041fec <HAL_SPI_MspInit+0xfc>)
 8041f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8041f1c:	6613      	str	r3, [r2, #96]	; 0x60
 8041f1e:	4b33      	ldr	r3, [pc, #204]	; (8041fec <HAL_SPI_MspInit+0xfc>)
 8041f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041f22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8041f26:	61bb      	str	r3, [r7, #24]
 8041f28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8041f2a:	4b30      	ldr	r3, [pc, #192]	; (8041fec <HAL_SPI_MspInit+0xfc>)
 8041f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041f2e:	4a2f      	ldr	r2, [pc, #188]	; (8041fec <HAL_SPI_MspInit+0xfc>)
 8041f30:	f043 0301 	orr.w	r3, r3, #1
 8041f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8041f36:	4b2d      	ldr	r3, [pc, #180]	; (8041fec <HAL_SPI_MspInit+0xfc>)
 8041f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041f3a:	f003 0301 	and.w	r3, r3, #1
 8041f3e:	617b      	str	r3, [r7, #20]
 8041f40:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = CURRENT_SCK_Pin|CURRENT_MISO_Pin;
 8041f42:	2360      	movs	r3, #96	; 0x60
 8041f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041f46:	2302      	movs	r3, #2
 8041f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041f4a:	2300      	movs	r3, #0
 8041f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041f4e:	2300      	movs	r3, #0
 8041f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8041f52:	2305      	movs	r3, #5
 8041f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041f56:	f107 031c 	add.w	r3, r7, #28
 8041f5a:	4619      	mov	r1, r3
 8041f5c:	4824      	ldr	r0, [pc, #144]	; (8041ff0 <HAL_SPI_MspInit+0x100>)
 8041f5e:	f006 fe93 	bl	8048c88 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8041f62:	2200      	movs	r2, #0
 8041f64:	2100      	movs	r1, #0
 8041f66:	203b      	movs	r0, #59	; 0x3b
 8041f68:	f006 fb54 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8041f6c:	203b      	movs	r0, #59	; 0x3b
 8041f6e:	f006 fb6b 	bl	8048648 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8041f72:	e035      	b.n	8041fe0 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI3)
 8041f74:	687b      	ldr	r3, [r7, #4]
 8041f76:	681b      	ldr	r3, [r3, #0]
 8041f78:	4a1e      	ldr	r2, [pc, #120]	; (8041ff4 <HAL_SPI_MspInit+0x104>)
 8041f7a:	4293      	cmp	r3, r2
 8041f7c:	d130      	bne.n	8041fe0 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8041f7e:	4b1b      	ldr	r3, [pc, #108]	; (8041fec <HAL_SPI_MspInit+0xfc>)
 8041f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041f82:	4a1a      	ldr	r2, [pc, #104]	; (8041fec <HAL_SPI_MspInit+0xfc>)
 8041f84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8041f88:	6593      	str	r3, [r2, #88]	; 0x58
 8041f8a:	4b18      	ldr	r3, [pc, #96]	; (8041fec <HAL_SPI_MspInit+0xfc>)
 8041f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041f8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8041f92:	613b      	str	r3, [r7, #16]
 8041f94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8041f96:	4b15      	ldr	r3, [pc, #84]	; (8041fec <HAL_SPI_MspInit+0xfc>)
 8041f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041f9a:	4a14      	ldr	r2, [pc, #80]	; (8041fec <HAL_SPI_MspInit+0xfc>)
 8041f9c:	f043 0304 	orr.w	r3, r3, #4
 8041fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8041fa2:	4b12      	ldr	r3, [pc, #72]	; (8041fec <HAL_SPI_MspInit+0xfc>)
 8041fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041fa6:	f003 0304 	and.w	r3, r3, #4
 8041faa:	60fb      	str	r3, [r7, #12]
 8041fac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8041fae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8041fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041fb4:	2302      	movs	r3, #2
 8041fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041fb8:	2300      	movs	r3, #0
 8041fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041fbc:	2300      	movs	r3, #0
 8041fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8041fc0:	2306      	movs	r3, #6
 8041fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8041fc4:	f107 031c 	add.w	r3, r7, #28
 8041fc8:	4619      	mov	r1, r3
 8041fca:	480b      	ldr	r0, [pc, #44]	; (8041ff8 <HAL_SPI_MspInit+0x108>)
 8041fcc:	f006 fe5c 	bl	8048c88 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8041fd0:	2200      	movs	r2, #0
 8041fd2:	2100      	movs	r1, #0
 8041fd4:	2063      	movs	r0, #99	; 0x63
 8041fd6:	f006 fb1d 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8041fda:	2063      	movs	r0, #99	; 0x63
 8041fdc:	f006 fb34 	bl	8048648 <HAL_NVIC_EnableIRQ>
}
 8041fe0:	bf00      	nop
 8041fe2:	3730      	adds	r7, #48	; 0x30
 8041fe4:	46bd      	mov	sp, r7
 8041fe6:	bd80      	pop	{r7, pc}
 8041fe8:	40013000 	.word	0x40013000
 8041fec:	40021000 	.word	0x40021000
 8041ff0:	42020000 	.word	0x42020000
 8041ff4:	40003c00 	.word	0x40003c00
 8041ff8:	42020800 	.word	0x42020800

08041ffc <SpiInit>:
static SPI_HandleTypeDef SpiHandle[3];

void SpiInit( Spi_t *obj, SpiId_t spiId, void* mosiPort, uint16_t mosiPin,
		void* misoPort, uint16_t misoPin, void* sclkPort, uint16_t sclkPin,
		void* nssPort, uint16_t nssPin )
{
 8041ffc:	b580      	push	{r7, lr}
 8041ffe:	b08c      	sub	sp, #48	; 0x30
 8042000:	af04      	add	r7, sp, #16
 8042002:	60f8      	str	r0, [r7, #12]
 8042004:	607a      	str	r2, [r7, #4]
 8042006:	461a      	mov	r2, r3
 8042008:	460b      	mov	r3, r1
 804200a:	72fb      	strb	r3, [r7, #11]
 804200c:	4613      	mov	r3, r2
 804200e:	813b      	strh	r3, [r7, #8]
    CRITICAL_SECTION_BEGIN( );
 8042010:	f107 031c 	add.w	r3, r7, #28
 8042014:	4618      	mov	r0, r3
 8042016:	f002 fef1 	bl	8044dfc <BoardCriticalSectionBegin>

    obj->SpiId = spiId;
 804201a:	68fb      	ldr	r3, [r7, #12]
 804201c:	7afa      	ldrb	r2, [r7, #11]
 804201e:	701a      	strb	r2, [r3, #0]

    if( spiId == SPI_1 )
 8042020:	7afb      	ldrb	r3, [r7, #11]
 8042022:	2b00      	cmp	r3, #0
 8042024:	d157      	bne.n	80420d6 <SpiInit+0xda>
    {
        __HAL_RCC_SPI1_FORCE_RESET( );
 8042026:	4b99      	ldr	r3, [pc, #612]	; (804228c <SpiInit+0x290>)
 8042028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804202a:	4a98      	ldr	r2, [pc, #608]	; (804228c <SpiInit+0x290>)
 804202c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8042030:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_RCC_SPI1_RELEASE_RESET( );
 8042032:	4b96      	ldr	r3, [pc, #600]	; (804228c <SpiInit+0x290>)
 8042034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8042036:	4a95      	ldr	r2, [pc, #596]	; (804228c <SpiInit+0x290>)
 8042038:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804203c:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_RCC_SPI1_CLK_ENABLE( );
 804203e:	4b93      	ldr	r3, [pc, #588]	; (804228c <SpiInit+0x290>)
 8042040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042042:	4a92      	ldr	r2, [pc, #584]	; (804228c <SpiInit+0x290>)
 8042044:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8042048:	6613      	str	r3, [r2, #96]	; 0x60
 804204a:	4b90      	ldr	r3, [pc, #576]	; (804228c <SpiInit+0x290>)
 804204c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804204e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8042052:	61bb      	str	r3, [r7, #24]
 8042054:	69bb      	ldr	r3, [r7, #24]

        SpiHandle[spiId].Instance = ( SPI_TypeDef* )SPI1_BASE;
 8042056:	7afb      	ldrb	r3, [r7, #11]
 8042058:	4a8d      	ldr	r2, [pc, #564]	; (8042290 <SpiInit+0x294>)
 804205a:	218c      	movs	r1, #140	; 0x8c
 804205c:	fb01 f303 	mul.w	r3, r1, r3
 8042060:	4413      	add	r3, r2
 8042062:	4a8c      	ldr	r2, [pc, #560]	; (8042294 <SpiInit+0x298>)
 8042064:	601a      	str	r2, [r3, #0]

        GpioInit( &obj->Mosi, mosiPort, mosiPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 8042066:	68fb      	ldr	r3, [r7, #12]
 8042068:	1d18      	adds	r0, r3, #4
 804206a:	893a      	ldrh	r2, [r7, #8]
 804206c:	2305      	movs	r3, #5
 804206e:	9302      	str	r3, [sp, #8]
 8042070:	2302      	movs	r3, #2
 8042072:	9301      	str	r3, [sp, #4]
 8042074:	2300      	movs	r3, #0
 8042076:	9300      	str	r3, [sp, #0]
 8042078:	2302      	movs	r3, #2
 804207a:	6879      	ldr	r1, [r7, #4]
 804207c:	f7fe fdfe 	bl	8040c7c <GpioInit>
        GpioInit( &obj->Miso, misoPort, misoPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 8042080:	68fb      	ldr	r3, [r7, #12]
 8042082:	f103 0018 	add.w	r0, r3, #24
 8042086:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8042088:	2305      	movs	r3, #5
 804208a:	9302      	str	r3, [sp, #8]
 804208c:	2302      	movs	r3, #2
 804208e:	9301      	str	r3, [sp, #4]
 8042090:	2300      	movs	r3, #0
 8042092:	9300      	str	r3, [sp, #0]
 8042094:	2302      	movs	r3, #2
 8042096:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8042098:	f7fe fdf0 	bl	8040c7c <GpioInit>
        GpioInit( &obj->Sclk, sclkPort, sclkPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI1 );
 804209c:	68fb      	ldr	r3, [r7, #12]
 804209e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80420a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80420a4:	2305      	movs	r3, #5
 80420a6:	9302      	str	r3, [sp, #8]
 80420a8:	2302      	movs	r3, #2
 80420aa:	9301      	str	r3, [sp, #4]
 80420ac:	2300      	movs	r3, #0
 80420ae:	9300      	str	r3, [sp, #0]
 80420b0:	2302      	movs	r3, #2
 80420b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80420b4:	f7fe fde2 	bl	8040c7c <GpioInit>
        GpioInit( &obj->Nss, nssPort, nssPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI1 );
 80420b8:	68fb      	ldr	r3, [r7, #12]
 80420ba:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80420be:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80420c0:	2305      	movs	r3, #5
 80420c2:	9302      	str	r3, [sp, #8]
 80420c4:	2301      	movs	r3, #1
 80420c6:	9301      	str	r3, [sp, #4]
 80420c8:	2300      	movs	r3, #0
 80420ca:	9300      	str	r3, [sp, #0]
 80420cc:	2302      	movs	r3, #2
 80420ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80420d0:	f7fe fdd4 	bl	8040c7c <GpioInit>
 80420d4:	e0b1      	b.n	804223a <SpiInit+0x23e>
    }
    else if( spiId == SPI_2 )
 80420d6:	7afb      	ldrb	r3, [r7, #11]
 80420d8:	2b01      	cmp	r3, #1
 80420da:	d157      	bne.n	804218c <SpiInit+0x190>
    {
        __HAL_RCC_SPI2_FORCE_RESET( );
 80420dc:	4b6b      	ldr	r3, [pc, #428]	; (804228c <SpiInit+0x290>)
 80420de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80420e0:	4a6a      	ldr	r2, [pc, #424]	; (804228c <SpiInit+0x290>)
 80420e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80420e6:	6393      	str	r3, [r2, #56]	; 0x38
        __HAL_RCC_SPI2_RELEASE_RESET( );
 80420e8:	4b68      	ldr	r3, [pc, #416]	; (804228c <SpiInit+0x290>)
 80420ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80420ec:	4a67      	ldr	r2, [pc, #412]	; (804228c <SpiInit+0x290>)
 80420ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80420f2:	6393      	str	r3, [r2, #56]	; 0x38
        __HAL_RCC_SPI2_CLK_ENABLE( );
 80420f4:	4b65      	ldr	r3, [pc, #404]	; (804228c <SpiInit+0x290>)
 80420f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80420f8:	4a64      	ldr	r2, [pc, #400]	; (804228c <SpiInit+0x290>)
 80420fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80420fe:	6593      	str	r3, [r2, #88]	; 0x58
 8042100:	4b62      	ldr	r3, [pc, #392]	; (804228c <SpiInit+0x290>)
 8042102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8042108:	617b      	str	r3, [r7, #20]
 804210a:	697b      	ldr	r3, [r7, #20]

        SpiHandle[spiId].Instance = ( SPI_TypeDef* )SPI2_BASE;
 804210c:	7afb      	ldrb	r3, [r7, #11]
 804210e:	4a60      	ldr	r2, [pc, #384]	; (8042290 <SpiInit+0x294>)
 8042110:	218c      	movs	r1, #140	; 0x8c
 8042112:	fb01 f303 	mul.w	r3, r1, r3
 8042116:	4413      	add	r3, r2
 8042118:	4a5f      	ldr	r2, [pc, #380]	; (8042298 <SpiInit+0x29c>)
 804211a:	601a      	str	r2, [r3, #0]

        GpioInit( &obj->Mosi, mosiPort, mosiPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 804211c:	68fb      	ldr	r3, [r7, #12]
 804211e:	1d18      	adds	r0, r3, #4
 8042120:	893a      	ldrh	r2, [r7, #8]
 8042122:	2305      	movs	r3, #5
 8042124:	9302      	str	r3, [sp, #8]
 8042126:	2302      	movs	r3, #2
 8042128:	9301      	str	r3, [sp, #4]
 804212a:	2300      	movs	r3, #0
 804212c:	9300      	str	r3, [sp, #0]
 804212e:	2302      	movs	r3, #2
 8042130:	6879      	ldr	r1, [r7, #4]
 8042132:	f7fe fda3 	bl	8040c7c <GpioInit>
                GpioInit( &obj->Miso, misoPort, misoPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 8042136:	68fb      	ldr	r3, [r7, #12]
 8042138:	f103 0018 	add.w	r0, r3, #24
 804213c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 804213e:	2305      	movs	r3, #5
 8042140:	9302      	str	r3, [sp, #8]
 8042142:	2302      	movs	r3, #2
 8042144:	9301      	str	r3, [sp, #4]
 8042146:	2300      	movs	r3, #0
 8042148:	9300      	str	r3, [sp, #0]
 804214a:	2302      	movs	r3, #2
 804214c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804214e:	f7fe fd95 	bl	8040c7c <GpioInit>
                GpioInit( &obj->Sclk, sclkPort, sclkPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_DOWN, GPIO_AF5_SPI2 );
 8042152:	68fb      	ldr	r3, [r7, #12]
 8042154:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8042158:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 804215a:	2305      	movs	r3, #5
 804215c:	9302      	str	r3, [sp, #8]
 804215e:	2302      	movs	r3, #2
 8042160:	9301      	str	r3, [sp, #4]
 8042162:	2300      	movs	r3, #0
 8042164:	9300      	str	r3, [sp, #0]
 8042166:	2302      	movs	r3, #2
 8042168:	6b39      	ldr	r1, [r7, #48]	; 0x30
 804216a:	f7fe fd87 	bl	8040c7c <GpioInit>
                GpioInit( &obj->Nss, nssPort, nssPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF5_SPI2 );
 804216e:	68fb      	ldr	r3, [r7, #12]
 8042170:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8042174:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8042176:	2305      	movs	r3, #5
 8042178:	9302      	str	r3, [sp, #8]
 804217a:	2301      	movs	r3, #1
 804217c:	9301      	str	r3, [sp, #4]
 804217e:	2300      	movs	r3, #0
 8042180:	9300      	str	r3, [sp, #0]
 8042182:	2302      	movs	r3, #2
 8042184:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8042186:	f7fe fd79 	bl	8040c7c <GpioInit>
 804218a:	e056      	b.n	804223a <SpiInit+0x23e>
    }
    else
	{
		__HAL_RCC_SPI3_FORCE_RESET( );
 804218c:	4b3f      	ldr	r3, [pc, #252]	; (804228c <SpiInit+0x290>)
 804218e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8042190:	4a3e      	ldr	r2, [pc, #248]	; (804228c <SpiInit+0x290>)
 8042192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8042196:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_RCC_SPI3_RELEASE_RESET( );
 8042198:	4b3c      	ldr	r3, [pc, #240]	; (804228c <SpiInit+0x290>)
 804219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804219c:	4a3b      	ldr	r2, [pc, #236]	; (804228c <SpiInit+0x290>)
 804219e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80421a2:	6393      	str	r3, [r2, #56]	; 0x38
		__HAL_RCC_SPI3_CLK_ENABLE( );
 80421a4:	4b39      	ldr	r3, [pc, #228]	; (804228c <SpiInit+0x290>)
 80421a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80421a8:	4a38      	ldr	r2, [pc, #224]	; (804228c <SpiInit+0x290>)
 80421aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80421ae:	6593      	str	r3, [r2, #88]	; 0x58
 80421b0:	4b36      	ldr	r3, [pc, #216]	; (804228c <SpiInit+0x290>)
 80421b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80421b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80421b8:	613b      	str	r3, [r7, #16]
 80421ba:	693b      	ldr	r3, [r7, #16]

		SpiHandle[spiId].Instance = ( SPI_TypeDef* )SPI3_BASE;
 80421bc:	7afb      	ldrb	r3, [r7, #11]
 80421be:	4a34      	ldr	r2, [pc, #208]	; (8042290 <SpiInit+0x294>)
 80421c0:	218c      	movs	r1, #140	; 0x8c
 80421c2:	fb01 f303 	mul.w	r3, r1, r3
 80421c6:	4413      	add	r3, r2
 80421c8:	4a34      	ldr	r2, [pc, #208]	; (804229c <SpiInit+0x2a0>)
 80421ca:	601a      	str	r2, [r3, #0]

		GpioInit( &obj->Mosi, mosiPort, mosiPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_NO_PULL, GPIO_AF6_SPI3 );
 80421cc:	68fb      	ldr	r3, [r7, #12]
 80421ce:	1d18      	adds	r0, r3, #4
 80421d0:	893a      	ldrh	r2, [r7, #8]
 80421d2:	2306      	movs	r3, #6
 80421d4:	9302      	str	r3, [sp, #8]
 80421d6:	2300      	movs	r3, #0
 80421d8:	9301      	str	r3, [sp, #4]
 80421da:	2300      	movs	r3, #0
 80421dc:	9300      	str	r3, [sp, #0]
 80421de:	2302      	movs	r3, #2
 80421e0:	6879      	ldr	r1, [r7, #4]
 80421e2:	f7fe fd4b 	bl	8040c7c <GpioInit>
		        GpioInit( &obj->Miso, misoPort, misoPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_NO_PULL, GPIO_AF6_SPI3 );
 80421e6:	68fb      	ldr	r3, [r7, #12]
 80421e8:	f103 0018 	add.w	r0, r3, #24
 80421ec:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80421ee:	2306      	movs	r3, #6
 80421f0:	9302      	str	r3, [sp, #8]
 80421f2:	2300      	movs	r3, #0
 80421f4:	9301      	str	r3, [sp, #4]
 80421f6:	2300      	movs	r3, #0
 80421f8:	9300      	str	r3, [sp, #0]
 80421fa:	2302      	movs	r3, #2
 80421fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80421fe:	f7fe fd3d 	bl	8040c7c <GpioInit>
		        GpioInit( &obj->Sclk, sclkPort, sclkPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_NO_PULL, GPIO_AF6_SPI3 );
 8042202:	68fb      	ldr	r3, [r7, #12]
 8042204:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8042208:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 804220a:	2306      	movs	r3, #6
 804220c:	9302      	str	r3, [sp, #8]
 804220e:	2300      	movs	r3, #0
 8042210:	9301      	str	r3, [sp, #4]
 8042212:	2300      	movs	r3, #0
 8042214:	9300      	str	r3, [sp, #0]
 8042216:	2302      	movs	r3, #2
 8042218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 804221a:	f7fe fd2f 	bl	8040c7c <GpioInit>
		        GpioInit( &obj->Nss, nssPort, nssPin, PIN_ALTERNATE_FCT, PIN_PUSH_PULL, PIN_PULL_UP, GPIO_AF6_SPI3 );
 804221e:	68fb      	ldr	r3, [r7, #12]
 8042220:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8042224:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8042226:	2306      	movs	r3, #6
 8042228:	9302      	str	r3, [sp, #8]
 804222a:	2301      	movs	r3, #1
 804222c:	9301      	str	r3, [sp, #4]
 804222e:	2300      	movs	r3, #0
 8042230:	9300      	str	r3, [sp, #0]
 8042232:	2302      	movs	r3, #2
 8042234:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8042236:	f7fe fd21 	bl	8040c7c <GpioInit>
	}
//    if( nssPin == NC )
//    {
        SpiHandle[spiId].Init.NSS = SPI_NSS_SOFT;
 804223a:	7afb      	ldrb	r3, [r7, #11]
 804223c:	4a14      	ldr	r2, [pc, #80]	; (8042290 <SpiInit+0x294>)
 804223e:	218c      	movs	r1, #140	; 0x8c
 8042240:	fb01 f303 	mul.w	r3, r1, r3
 8042244:	4413      	add	r3, r2
 8042246:	3318      	adds	r3, #24
 8042248:	f44f 7200 	mov.w	r2, #512	; 0x200
 804224c:	601a      	str	r2, [r3, #0]
        SpiFormat( obj, 8, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 0 );
 804224e:	2300      	movs	r3, #0
 8042250:	9300      	str	r3, [sp, #0]
 8042252:	2300      	movs	r3, #0
 8042254:	2200      	movs	r2, #0
 8042256:	2108      	movs	r1, #8
 8042258:	68f8      	ldr	r0, [r7, #12]
 804225a:	f000 f823 	bl	80422a4 <SpiFormat>
//    }
//    else
//    {
//        SpiFormat( obj, 8, SPI_POLARITY_LOW, SPI_PHASE_1EDGE, 1 );
//    }
    SpiFrequency( obj, 10000000 );
 804225e:	4910      	ldr	r1, [pc, #64]	; (80422a0 <SpiInit+0x2a4>)
 8042260:	68f8      	ldr	r0, [r7, #12]
 8042262:	f000 f8bd 	bl	80423e0 <SpiFrequency>

    HAL_SPI_Init( &SpiHandle[spiId] );
 8042266:	7afb      	ldrb	r3, [r7, #11]
 8042268:	228c      	movs	r2, #140	; 0x8c
 804226a:	fb02 f303 	mul.w	r3, r2, r3
 804226e:	4a08      	ldr	r2, [pc, #32]	; (8042290 <SpiInit+0x294>)
 8042270:	4413      	add	r3, r2
 8042272:	4618      	mov	r0, r3
 8042274:	f00a f896 	bl	804c3a4 <HAL_SPI_Init>

    CRITICAL_SECTION_END( );
 8042278:	f107 031c 	add.w	r3, r7, #28
 804227c:	4618      	mov	r0, r3
 804227e:	f002 fdcf 	bl	8044e20 <BoardCriticalSectionEnd>
}
 8042282:	bf00      	nop
 8042284:	3720      	adds	r7, #32
 8042286:	46bd      	mov	sp, r7
 8042288:	bd80      	pop	{r7, pc}
 804228a:	bf00      	nop
 804228c:	40021000 	.word	0x40021000
 8042290:	200181fc 	.word	0x200181fc
 8042294:	40013000 	.word	0x40013000
 8042298:	40003800 	.word	0x40003800
 804229c:	40003c00 	.word	0x40003c00
 80422a0:	00989680 	.word	0x00989680

080422a4 <SpiFormat>:
    GpioInit( &obj->Sclk, obj->Sclk.port, obj->Sclk.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &obj->Nss, obj->Nss.port, obj->Nss.pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 1 );
}

void SpiFormat( Spi_t *obj, int8_t bits, int8_t cpol, int8_t cpha, int8_t slave )
{
 80422a4:	b480      	push	{r7}
 80422a6:	b083      	sub	sp, #12
 80422a8:	af00      	add	r7, sp, #0
 80422aa:	6078      	str	r0, [r7, #4]
 80422ac:	4608      	mov	r0, r1
 80422ae:	4611      	mov	r1, r2
 80422b0:	461a      	mov	r2, r3
 80422b2:	4603      	mov	r3, r0
 80422b4:	70fb      	strb	r3, [r7, #3]
 80422b6:	460b      	mov	r3, r1
 80422b8:	70bb      	strb	r3, [r7, #2]
 80422ba:	4613      	mov	r3, r2
 80422bc:	707b      	strb	r3, [r7, #1]
    SpiHandle[obj->SpiId].Init.Direction = SPI_DIRECTION_2LINES;
 80422be:	687b      	ldr	r3, [r7, #4]
 80422c0:	781b      	ldrb	r3, [r3, #0]
 80422c2:	4619      	mov	r1, r3
 80422c4:	4a45      	ldr	r2, [pc, #276]	; (80423dc <SpiFormat+0x138>)
 80422c6:	238c      	movs	r3, #140	; 0x8c
 80422c8:	fb03 f301 	mul.w	r3, r3, r1
 80422cc:	4413      	add	r3, r2
 80422ce:	3308      	adds	r3, #8
 80422d0:	2200      	movs	r2, #0
 80422d2:	601a      	str	r2, [r3, #0]
    if( bits == 8 )
 80422d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80422d8:	2b08      	cmp	r3, #8
 80422da:	d10c      	bne.n	80422f6 <SpiFormat+0x52>
    {
        SpiHandle[obj->SpiId].Init.DataSize = SPI_DATASIZE_8BIT;
 80422dc:	687b      	ldr	r3, [r7, #4]
 80422de:	781b      	ldrb	r3, [r3, #0]
 80422e0:	4619      	mov	r1, r3
 80422e2:	4a3e      	ldr	r2, [pc, #248]	; (80423dc <SpiFormat+0x138>)
 80422e4:	238c      	movs	r3, #140	; 0x8c
 80422e6:	fb03 f301 	mul.w	r3, r3, r1
 80422ea:	4413      	add	r3, r2
 80422ec:	330c      	adds	r3, #12
 80422ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80422f2:	601a      	str	r2, [r3, #0]
 80422f4:	e00b      	b.n	804230e <SpiFormat+0x6a>
    }
    else
    {
        SpiHandle[obj->SpiId].Init.DataSize = SPI_DATASIZE_16BIT;
 80422f6:	687b      	ldr	r3, [r7, #4]
 80422f8:	781b      	ldrb	r3, [r3, #0]
 80422fa:	4619      	mov	r1, r3
 80422fc:	4a37      	ldr	r2, [pc, #220]	; (80423dc <SpiFormat+0x138>)
 80422fe:	238c      	movs	r3, #140	; 0x8c
 8042300:	fb03 f301 	mul.w	r3, r3, r1
 8042304:	4413      	add	r3, r2
 8042306:	330c      	adds	r3, #12
 8042308:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 804230c:	601a      	str	r2, [r3, #0]
    }
    SpiHandle[obj->SpiId].Init.CLKPolarity = cpol;
 804230e:	687b      	ldr	r3, [r7, #4]
 8042310:	781b      	ldrb	r3, [r3, #0]
 8042312:	4618      	mov	r0, r3
 8042314:	f997 2002 	ldrsb.w	r2, [r7, #2]
 8042318:	4930      	ldr	r1, [pc, #192]	; (80423dc <SpiFormat+0x138>)
 804231a:	238c      	movs	r3, #140	; 0x8c
 804231c:	fb03 f300 	mul.w	r3, r3, r0
 8042320:	440b      	add	r3, r1
 8042322:	3310      	adds	r3, #16
 8042324:	601a      	str	r2, [r3, #0]
    SpiHandle[obj->SpiId].Init.CLKPhase = cpha;
 8042326:	687b      	ldr	r3, [r7, #4]
 8042328:	781b      	ldrb	r3, [r3, #0]
 804232a:	4618      	mov	r0, r3
 804232c:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8042330:	492a      	ldr	r1, [pc, #168]	; (80423dc <SpiFormat+0x138>)
 8042332:	238c      	movs	r3, #140	; 0x8c
 8042334:	fb03 f300 	mul.w	r3, r3, r0
 8042338:	440b      	add	r3, r1
 804233a:	3314      	adds	r3, #20
 804233c:	601a      	str	r2, [r3, #0]
    SpiHandle[obj->SpiId].Init.FirstBit = SPI_FIRSTBIT_MSB;
 804233e:	687b      	ldr	r3, [r7, #4]
 8042340:	781b      	ldrb	r3, [r3, #0]
 8042342:	4619      	mov	r1, r3
 8042344:	4a25      	ldr	r2, [pc, #148]	; (80423dc <SpiFormat+0x138>)
 8042346:	238c      	movs	r3, #140	; 0x8c
 8042348:	fb03 f301 	mul.w	r3, r3, r1
 804234c:	4413      	add	r3, r2
 804234e:	3320      	adds	r3, #32
 8042350:	2200      	movs	r2, #0
 8042352:	601a      	str	r2, [r3, #0]
    SpiHandle[obj->SpiId].Init.TIMode = SPI_TIMODE_DISABLE;
 8042354:	687b      	ldr	r3, [r7, #4]
 8042356:	781b      	ldrb	r3, [r3, #0]
 8042358:	4619      	mov	r1, r3
 804235a:	4a20      	ldr	r2, [pc, #128]	; (80423dc <SpiFormat+0x138>)
 804235c:	238c      	movs	r3, #140	; 0x8c
 804235e:	fb03 f301 	mul.w	r3, r3, r1
 8042362:	4413      	add	r3, r2
 8042364:	3324      	adds	r3, #36	; 0x24
 8042366:	2200      	movs	r2, #0
 8042368:	601a      	str	r2, [r3, #0]
    SpiHandle[obj->SpiId].Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804236a:	687b      	ldr	r3, [r7, #4]
 804236c:	781b      	ldrb	r3, [r3, #0]
 804236e:	4619      	mov	r1, r3
 8042370:	4a1a      	ldr	r2, [pc, #104]	; (80423dc <SpiFormat+0x138>)
 8042372:	238c      	movs	r3, #140	; 0x8c
 8042374:	fb03 f301 	mul.w	r3, r3, r1
 8042378:	4413      	add	r3, r2
 804237a:	3328      	adds	r3, #40	; 0x28
 804237c:	2200      	movs	r2, #0
 804237e:	601a      	str	r2, [r3, #0]
    SpiHandle[obj->SpiId].Init.CRCPolynomial = 7;
 8042380:	687b      	ldr	r3, [r7, #4]
 8042382:	781b      	ldrb	r3, [r3, #0]
 8042384:	4619      	mov	r1, r3
 8042386:	4a15      	ldr	r2, [pc, #84]	; (80423dc <SpiFormat+0x138>)
 8042388:	238c      	movs	r3, #140	; 0x8c
 804238a:	fb03 f301 	mul.w	r3, r3, r1
 804238e:	4413      	add	r3, r2
 8042390:	332c      	adds	r3, #44	; 0x2c
 8042392:	2207      	movs	r2, #7
 8042394:	601a      	str	r2, [r3, #0]

    if( slave == 0 )
 8042396:	f997 3010 	ldrsb.w	r3, [r7, #16]
 804239a:	2b00      	cmp	r3, #0
 804239c:	d10c      	bne.n	80423b8 <SpiFormat+0x114>
    {
        SpiHandle[obj->SpiId].Init.Mode = SPI_MODE_MASTER;
 804239e:	687b      	ldr	r3, [r7, #4]
 80423a0:	781b      	ldrb	r3, [r3, #0]
 80423a2:	4619      	mov	r1, r3
 80423a4:	4a0d      	ldr	r2, [pc, #52]	; (80423dc <SpiFormat+0x138>)
 80423a6:	238c      	movs	r3, #140	; 0x8c
 80423a8:	fb03 f301 	mul.w	r3, r3, r1
 80423ac:	4413      	add	r3, r2
 80423ae:	3304      	adds	r3, #4
 80423b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80423b4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        SpiHandle[obj->SpiId].Init.Mode = SPI_MODE_SLAVE;
    }
}
 80423b6:	e00a      	b.n	80423ce <SpiFormat+0x12a>
        SpiHandle[obj->SpiId].Init.Mode = SPI_MODE_SLAVE;
 80423b8:	687b      	ldr	r3, [r7, #4]
 80423ba:	781b      	ldrb	r3, [r3, #0]
 80423bc:	4619      	mov	r1, r3
 80423be:	4a07      	ldr	r2, [pc, #28]	; (80423dc <SpiFormat+0x138>)
 80423c0:	238c      	movs	r3, #140	; 0x8c
 80423c2:	fb03 f301 	mul.w	r3, r3, r1
 80423c6:	4413      	add	r3, r2
 80423c8:	3304      	adds	r3, #4
 80423ca:	2200      	movs	r2, #0
 80423cc:	601a      	str	r2, [r3, #0]
}
 80423ce:	bf00      	nop
 80423d0:	370c      	adds	r7, #12
 80423d2:	46bd      	mov	sp, r7
 80423d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80423d8:	4770      	bx	lr
 80423da:	bf00      	nop
 80423dc:	200181fc 	.word	0x200181fc

080423e0 <SpiFrequency>:

void SpiFrequency( Spi_t *obj, uint32_t hz )
{
 80423e0:	b480      	push	{r7}
 80423e2:	b087      	sub	sp, #28
 80423e4:	af00      	add	r7, sp, #0
 80423e6:	6078      	str	r0, [r7, #4]
 80423e8:	6039      	str	r1, [r7, #0]
    uint32_t divisor = 0;
 80423ea:	2300      	movs	r3, #0
 80423ec:	617b      	str	r3, [r7, #20]
    uint32_t sysClkTmp = SystemCoreClock;
 80423ee:	4b1f      	ldr	r3, [pc, #124]	; (804246c <SpiFrequency+0x8c>)
 80423f0:	681b      	ldr	r3, [r3, #0]
 80423f2:	613b      	str	r3, [r7, #16]
    uint32_t baudRate;

    while( sysClkTmp > hz )
 80423f4:	e008      	b.n	8042408 <SpiFrequency+0x28>
    {
        divisor++;
 80423f6:	697b      	ldr	r3, [r7, #20]
 80423f8:	3301      	adds	r3, #1
 80423fa:	617b      	str	r3, [r7, #20]
        sysClkTmp = ( sysClkTmp >> 1 );
 80423fc:	693b      	ldr	r3, [r7, #16]
 80423fe:	085b      	lsrs	r3, r3, #1
 8042400:	613b      	str	r3, [r7, #16]

        if( divisor >= 7 )
 8042402:	697b      	ldr	r3, [r7, #20]
 8042404:	2b06      	cmp	r3, #6
 8042406:	d804      	bhi.n	8042412 <SpiFrequency+0x32>
    while( sysClkTmp > hz )
 8042408:	693a      	ldr	r2, [r7, #16]
 804240a:	683b      	ldr	r3, [r7, #0]
 804240c:	429a      	cmp	r2, r3
 804240e:	d8f2      	bhi.n	80423f6 <SpiFrequency+0x16>
 8042410:	e000      	b.n	8042414 <SpiFrequency+0x34>
        {
            break;
 8042412:	bf00      	nop
        }
    }

    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 8042414:	697b      	ldr	r3, [r7, #20]
 8042416:	f003 0304 	and.w	r3, r3, #4
 804241a:	2b00      	cmp	r3, #0
 804241c:	d101      	bne.n	8042422 <SpiFrequency+0x42>
 804241e:	2200      	movs	r2, #0
 8042420:	e000      	b.n	8042424 <SpiFrequency+0x44>
 8042422:	2220      	movs	r2, #32
              ( ( ( divisor & 0x2 ) == 0 ) ? 0x0 : SPI_CR1_BR_1 ) |
 8042424:	697b      	ldr	r3, [r7, #20]
 8042426:	f003 0302 	and.w	r3, r3, #2
 804242a:	2b00      	cmp	r3, #0
 804242c:	d101      	bne.n	8042432 <SpiFrequency+0x52>
 804242e:	2300      	movs	r3, #0
 8042430:	e000      	b.n	8042434 <SpiFrequency+0x54>
 8042432:	2310      	movs	r3, #16
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 8042434:	4313      	orrs	r3, r2
              ( ( ( divisor & 0x1 ) == 0 ) ? 0x0 : SPI_CR1_BR_0 );
 8042436:	697a      	ldr	r2, [r7, #20]
 8042438:	f002 0201 	and.w	r2, r2, #1
 804243c:	2a00      	cmp	r2, #0
 804243e:	d101      	bne.n	8042444 <SpiFrequency+0x64>
 8042440:	2200      	movs	r2, #0
 8042442:	e000      	b.n	8042446 <SpiFrequency+0x66>
 8042444:	2208      	movs	r2, #8
    baudRate =( ( ( divisor & 0x4 ) == 0 ) ? 0x0 : SPI_CR1_BR_2 ) |
 8042446:	4313      	orrs	r3, r2
 8042448:	60fb      	str	r3, [r7, #12]

    SpiHandle[obj->SpiId].Init.BaudRatePrescaler = baudRate;
 804244a:	687b      	ldr	r3, [r7, #4]
 804244c:	781b      	ldrb	r3, [r3, #0]
 804244e:	4619      	mov	r1, r3
 8042450:	4a07      	ldr	r2, [pc, #28]	; (8042470 <SpiFrequency+0x90>)
 8042452:	238c      	movs	r3, #140	; 0x8c
 8042454:	fb03 f301 	mul.w	r3, r3, r1
 8042458:	4413      	add	r3, r2
 804245a:	331c      	adds	r3, #28
 804245c:	68fa      	ldr	r2, [r7, #12]
 804245e:	601a      	str	r2, [r3, #0]
}
 8042460:	bf00      	nop
 8042462:	371c      	adds	r7, #28
 8042464:	46bd      	mov	sp, r7
 8042466:	f85d 7b04 	ldr.w	r7, [sp], #4
 804246a:	4770      	bx	lr
 804246c:	20018024 	.word	0x20018024
 8042470:	200181fc 	.word	0x200181fc

08042474 <SpiInOut>:

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 8042474:	b580      	push	{r7, lr}
 8042476:	b086      	sub	sp, #24
 8042478:	af02      	add	r7, sp, #8
 804247a:	6078      	str	r0, [r7, #4]
 804247c:	460b      	mov	r3, r1
 804247e:	807b      	strh	r3, [r7, #2]
    uint8_t rxData = 0;
 8042480:	2300      	movs	r3, #0
 8042482:	73fb      	strb	r3, [r7, #15]

    if( ( obj == NULL ) || ( SpiHandle[obj->SpiId].Instance ) == NULL )
 8042484:	687b      	ldr	r3, [r7, #4]
 8042486:	2b00      	cmp	r3, #0
    {
        assert_param( FAIL );
    }

    __HAL_SPI_ENABLE( &SpiHandle[obj->SpiId] );
 8042488:	687b      	ldr	r3, [r7, #4]
 804248a:	781b      	ldrb	r3, [r3, #0]
 804248c:	4619      	mov	r1, r3
 804248e:	4a1a      	ldr	r2, [pc, #104]	; (80424f8 <SpiInOut+0x84>)
 8042490:	238c      	movs	r3, #140	; 0x8c
 8042492:	fb03 f301 	mul.w	r3, r3, r1
 8042496:	4413      	add	r3, r2
 8042498:	681b      	ldr	r3, [r3, #0]
 804249a:	681a      	ldr	r2, [r3, #0]
 804249c:	687b      	ldr	r3, [r7, #4]
 804249e:	781b      	ldrb	r3, [r3, #0]
 80424a0:	4618      	mov	r0, r3
 80424a2:	4915      	ldr	r1, [pc, #84]	; (80424f8 <SpiInOut+0x84>)
 80424a4:	238c      	movs	r3, #140	; 0x8c
 80424a6:	fb03 f300 	mul.w	r3, r3, r0
 80424aa:	440b      	add	r3, r1
 80424ac:	681b      	ldr	r3, [r3, #0]
 80424ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80424b2:	601a      	str	r2, [r3, #0]

    CRITICAL_SECTION_BEGIN( );
 80424b4:	f107 0308 	add.w	r3, r7, #8
 80424b8:	4618      	mov	r0, r3
 80424ba:	f002 fc9f 	bl	8044dfc <BoardCriticalSectionBegin>

    HAL_SPI_TransmitReceive( &SpiHandle[obj->SpiId], ( uint8_t* )&outData, &rxData, 1, HAL_MAX_DELAY );
 80424be:	687b      	ldr	r3, [r7, #4]
 80424c0:	781b      	ldrb	r3, [r3, #0]
 80424c2:	461a      	mov	r2, r3
 80424c4:	238c      	movs	r3, #140	; 0x8c
 80424c6:	fb03 f302 	mul.w	r3, r3, r2
 80424ca:	4a0b      	ldr	r2, [pc, #44]	; (80424f8 <SpiInOut+0x84>)
 80424cc:	1898      	adds	r0, r3, r2
 80424ce:	f107 020f 	add.w	r2, r7, #15
 80424d2:	1cb9      	adds	r1, r7, #2
 80424d4:	f04f 33ff 	mov.w	r3, #4294967295
 80424d8:	9300      	str	r3, [sp, #0]
 80424da:	2301      	movs	r3, #1
 80424dc:	f00a f96c 	bl	804c7b8 <HAL_SPI_TransmitReceive>

    CRITICAL_SECTION_END( );
 80424e0:	f107 0308 	add.w	r3, r7, #8
 80424e4:	4618      	mov	r0, r3
 80424e6:	f002 fc9b 	bl	8044e20 <BoardCriticalSectionEnd>

    return( rxData );
 80424ea:	7bfb      	ldrb	r3, [r7, #15]
 80424ec:	b29b      	uxth	r3, r3
}
 80424ee:	4618      	mov	r0, r3
 80424f0:	3710      	adds	r7, #16
 80424f2:	46bd      	mov	sp, r7
 80424f4:	bd80      	pop	{r7, pc}
 80424f6:	bf00      	nop
 80424f8:	200181fc 	.word	0x200181fc

080424fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80424fc:	b580      	push	{r7, lr}
 80424fe:	b082      	sub	sp, #8
 8042500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8042502:	4b12      	ldr	r3, [pc, #72]	; (804254c <HAL_MspInit+0x50>)
 8042504:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042506:	4a11      	ldr	r2, [pc, #68]	; (804254c <HAL_MspInit+0x50>)
 8042508:	f043 0301 	orr.w	r3, r3, #1
 804250c:	6613      	str	r3, [r2, #96]	; 0x60
 804250e:	4b0f      	ldr	r3, [pc, #60]	; (804254c <HAL_MspInit+0x50>)
 8042510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042512:	f003 0301 	and.w	r3, r3, #1
 8042516:	607b      	str	r3, [r7, #4]
 8042518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 804251a:	4b0c      	ldr	r3, [pc, #48]	; (804254c <HAL_MspInit+0x50>)
 804251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804251e:	4a0b      	ldr	r2, [pc, #44]	; (804254c <HAL_MspInit+0x50>)
 8042520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042524:	6593      	str	r3, [r2, #88]	; 0x58
 8042526:	4b09      	ldr	r3, [pc, #36]	; (804254c <HAL_MspInit+0x50>)
 8042528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804252e:	603b      	str	r3, [r7, #0]
 8042530:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8042532:	2200      	movs	r2, #0
 8042534:	2100      	movs	r1, #0
 8042536:	205f      	movs	r0, #95	; 0x5f
 8042538:	f006 f86c 	bl	8048614 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 804253c:	205f      	movs	r0, #95	; 0x5f
 804253e:	f006 f883 	bl	8048648 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8042542:	bf00      	nop
 8042544:	3708      	adds	r7, #8
 8042546:	46bd      	mov	sp, r7
 8042548:	bd80      	pop	{r7, pc}
 804254a:	bf00      	nop
 804254c:	40021000 	.word	0x40021000

08042550 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8042550:	b580      	push	{r7, lr}
 8042552:	b08c      	sub	sp, #48	; 0x30
 8042554:	af00      	add	r7, sp, #0
 8042556:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8042558:	2300      	movs	r3, #0
 804255a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 804255c:	2300      	movs	r3, #0
 804255e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8042560:	2200      	movs	r2, #0
 8042562:	6879      	ldr	r1, [r7, #4]
 8042564:	2031      	movs	r0, #49	; 0x31
 8042566:	f006 f855 	bl	8048614 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 804256a:	2031      	movs	r0, #49	; 0x31
 804256c:	f006 f86c 	bl	8048648 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8042570:	4b1e      	ldr	r3, [pc, #120]	; (80425ec <HAL_InitTick+0x9c>)
 8042572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042574:	4a1d      	ldr	r2, [pc, #116]	; (80425ec <HAL_InitTick+0x9c>)
 8042576:	f043 0310 	orr.w	r3, r3, #16
 804257a:	6593      	str	r3, [r2, #88]	; 0x58
 804257c:	4b1b      	ldr	r3, [pc, #108]	; (80425ec <HAL_InitTick+0x9c>)
 804257e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042580:	f003 0310 	and.w	r3, r3, #16
 8042584:	60fb      	str	r3, [r7, #12]
 8042586:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8042588:	f107 0210 	add.w	r2, r7, #16
 804258c:	f107 0314 	add.w	r3, r7, #20
 8042590:	4611      	mov	r1, r2
 8042592:	4618      	mov	r0, r3
 8042594:	f008 fb4e 	bl	804ac34 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8042598:	f008 fb24 	bl	804abe4 <HAL_RCC_GetPCLK1Freq>
 804259c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 804259e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80425a0:	4a13      	ldr	r2, [pc, #76]	; (80425f0 <HAL_InitTick+0xa0>)
 80425a2:	fba2 2303 	umull	r2, r3, r2, r3
 80425a6:	0c9b      	lsrs	r3, r3, #18
 80425a8:	3b01      	subs	r3, #1
 80425aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80425ac:	4b11      	ldr	r3, [pc, #68]	; (80425f4 <HAL_InitTick+0xa4>)
 80425ae:	4a12      	ldr	r2, [pc, #72]	; (80425f8 <HAL_InitTick+0xa8>)
 80425b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80425b2:	4b10      	ldr	r3, [pc, #64]	; (80425f4 <HAL_InitTick+0xa4>)
 80425b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80425b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80425ba:	4a0e      	ldr	r2, [pc, #56]	; (80425f4 <HAL_InitTick+0xa4>)
 80425bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80425be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80425c0:	4b0c      	ldr	r3, [pc, #48]	; (80425f4 <HAL_InitTick+0xa4>)
 80425c2:	2200      	movs	r2, #0
 80425c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80425c6:	4b0b      	ldr	r3, [pc, #44]	; (80425f4 <HAL_InitTick+0xa4>)
 80425c8:	2200      	movs	r2, #0
 80425ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80425cc:	4809      	ldr	r0, [pc, #36]	; (80425f4 <HAL_InitTick+0xa4>)
 80425ce:	f00a fe21 	bl	804d214 <HAL_TIM_Base_Init>
 80425d2:	4603      	mov	r3, r0
 80425d4:	2b00      	cmp	r3, #0
 80425d6:	d104      	bne.n	80425e2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80425d8:	4806      	ldr	r0, [pc, #24]	; (80425f4 <HAL_InitTick+0xa4>)
 80425da:	f00a fe89 	bl	804d2f0 <HAL_TIM_Base_Start_IT>
 80425de:	4603      	mov	r3, r0
 80425e0:	e000      	b.n	80425e4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80425e2:	2301      	movs	r3, #1
}
 80425e4:	4618      	mov	r0, r3
 80425e6:	3730      	adds	r7, #48	; 0x30
 80425e8:	46bd      	mov	sp, r7
 80425ea:	bd80      	pop	{r7, pc}
 80425ec:	40021000 	.word	0x40021000
 80425f0:	431bde83 	.word	0x431bde83
 80425f4:	20019210 	.word	0x20019210
 80425f8:	40001000 	.word	0x40001000

080425fc <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80425fc:	b480      	push	{r7}
 80425fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8042600:	e7fe      	b.n	8042600 <MemManage_Handler+0x4>

08042602 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8042602:	b480      	push	{r7}
 8042604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8042606:	e7fe      	b.n	8042606 <UsageFault_Handler+0x4>

08042608 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8042608:	b480      	push	{r7}
 804260a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 804260c:	bf00      	nop
 804260e:	46bd      	mov	sp, r7
 8042610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042614:	4770      	bx	lr

08042616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8042616:	b480      	push	{r7}
 8042618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804261a:	bf00      	nop
 804261c:	46bd      	mov	sp, r7
 804261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042622:	4770      	bx	lr

08042624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8042624:	b480      	push	{r7}
 8042626:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8042628:	bf00      	nop
 804262a:	46bd      	mov	sp, r7
 804262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042630:	4770      	bx	lr
	...

08042634 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupts through EXTI line 17.
  */
void RTC_IRQHandler(void)
{
 8042634:	b580      	push	{r7, lr}
 8042636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8042638:	4805      	ldr	r0, [pc, #20]	; (8042650 <RTC_IRQHandler+0x1c>)
 804263a:	f009 fbcd 	bl	804bdd8 <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_TimeStampIRQHandler(&hrtc);
 804263e:	4804      	ldr	r0, [pc, #16]	; (8042650 <RTC_IRQHandler+0x1c>)
 8042640:	f009 fd16 	bl	804c070 <HAL_RTCEx_TimeStampIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8042644:	4802      	ldr	r0, [pc, #8]	; (8042650 <RTC_IRQHandler+0x1c>)
 8042646:	f009 fdbf 	bl	804c1c8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 804264a:	bf00      	nop
 804264c:	bd80      	pop	{r7, pc}
 804264e:	bf00      	nop
 8042650:	20019084 	.word	0x20019084

08042654 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8042654:	b580      	push	{r7, lr}
 8042656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8042658:	4802      	ldr	r0, [pc, #8]	; (8042664 <DMA1_Channel5_IRQHandler+0x10>)
 804265a:	f006 f974 	bl	8048946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 804265e:	bf00      	nop
 8042660:	bd80      	pop	{r7, pc}
 8042662:	bf00      	nop
 8042664:	200195e0 	.word	0x200195e0

08042668 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8042668:	b580      	push	{r7, lr}
 804266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 804266c:	4802      	ldr	r0, [pc, #8]	; (8042678 <DMA1_Channel6_IRQHandler+0x10>)
 804266e:	f006 f96a 	bl	8048946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8042672:	bf00      	nop
 8042674:	bd80      	pop	{r7, pc}
 8042676:	bf00      	nop
 8042678:	20019578 	.word	0x20019578

0804267c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 804267c:	b580      	push	{r7, lr}
 804267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8042680:	4803      	ldr	r0, [pc, #12]	; (8042690 <ADC1_2_IRQHandler+0x14>)
 8042682:	f004 fe43 	bl	804730c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8042686:	4803      	ldr	r0, [pc, #12]	; (8042694 <ADC1_2_IRQHandler+0x18>)
 8042688:	f004 fe40 	bl	804730c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 804268c:	bf00      	nop
 804268e:	bd80      	pop	{r7, pc}
 8042690:	20018ee8 	.word	0x20018ee8
 8042694:	20018e54 	.word	0x20018e54

08042698 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8042698:	b580      	push	{r7, lr}
 804269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 804269c:	4802      	ldr	r0, [pc, #8]	; (80426a8 <TIM1_BRK_IRQHandler+0x10>)
 804269e:	f00a ff4b 	bl	804d538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80426a2:	bf00      	nop
 80426a4:	bd80      	pop	{r7, pc}
 80426a6:	bf00      	nop
 80426a8:	200192cc 	.word	0x200192cc

080426ac <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80426ac:	b580      	push	{r7, lr}
 80426ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80426b0:	4802      	ldr	r0, [pc, #8]	; (80426bc <TIM1_UP_IRQHandler+0x10>)
 80426b2:	f00a ff41 	bl	804d538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80426b6:	bf00      	nop
 80426b8:	bd80      	pop	{r7, pc}
 80426ba:	bf00      	nop
 80426bc:	200192cc 	.word	0x200192cc

080426c0 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80426c0:	b580      	push	{r7, lr}
 80426c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80426c4:	4802      	ldr	r0, [pc, #8]	; (80426d0 <TIM1_TRG_COM_IRQHandler+0x10>)
 80426c6:	f00a ff37 	bl	804d538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80426ca:	bf00      	nop
 80426cc:	bd80      	pop	{r7, pc}
 80426ce:	bf00      	nop
 80426d0:	200192cc 	.word	0x200192cc

080426d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80426d4:	b580      	push	{r7, lr}
 80426d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80426d8:	4802      	ldr	r0, [pc, #8]	; (80426e4 <TIM1_CC_IRQHandler+0x10>)
 80426da:	f00a ff2d 	bl	804d538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80426de:	bf00      	nop
 80426e0:	bd80      	pop	{r7, pc}
 80426e2:	bf00      	nop
 80426e4:	200192cc 	.word	0x200192cc

080426e8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80426e8:	b580      	push	{r7, lr}
 80426ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80426ec:	4802      	ldr	r0, [pc, #8]	; (80426f8 <TIM6_IRQHandler+0x10>)
 80426ee:	f00a ff23 	bl	804d538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80426f2:	bf00      	nop
 80426f4:	bd80      	pop	{r7, pc}
 80426f6:	bf00      	nop
 80426f8:	20019210 	.word	0x20019210

080426fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80426fc:	b580      	push	{r7, lr}
 80426fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8042700:	4802      	ldr	r0, [pc, #8]	; (804270c <I2C1_EV_IRQHandler+0x10>)
 8042702:	f007 f93d 	bl	8049980 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8042706:	bf00      	nop
 8042708:	bd80      	pop	{r7, pc}
 804270a:	bf00      	nop
 804270c:	20018fe4 	.word	0x20018fe4

08042710 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8042710:	b580      	push	{r7, lr}
 8042712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8042714:	4802      	ldr	r0, [pc, #8]	; (8042720 <I2C1_ER_IRQHandler+0x10>)
 8042716:	f007 f94d 	bl	80499b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 804271a:	bf00      	nop
 804271c:	bd80      	pop	{r7, pc}
 804271e:	bf00      	nop
 8042720:	20018fe4 	.word	0x20018fe4

08042724 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8042724:	b580      	push	{r7, lr}
 8042726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8042728:	4802      	ldr	r0, [pc, #8]	; (8042734 <SPI1_IRQHandler+0x10>)
 804272a:	f00a fa59 	bl	804cbe0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 804272e:	bf00      	nop
 8042730:	bd80      	pop	{r7, pc}
 8042732:	bf00      	nop
 8042734:	20019184 	.word	0x20019184

08042738 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8042738:	b580      	push	{r7, lr}
 804273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 804273c:	4802      	ldr	r0, [pc, #8]	; (8042748 <USART3_IRQHandler+0x10>)
 804273e:	f00b fb25 	bl	804dd8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8042742:	bf00      	nop
 8042744:	bd80      	pop	{r7, pc}
 8042746:	bf00      	nop
 8042748:	200193f0 	.word	0x200193f0

0804274c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 804274c:	b580      	push	{r7, lr}
 804274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8042750:	4802      	ldr	r0, [pc, #8]	; (804275c <LPUART1_IRQHandler+0x10>)
 8042752:	f00b fb1b 	bl	804dd8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8042756:	bf00      	nop
 8042758:	bd80      	pop	{r7, pc}
 804275a:	bf00      	nop
 804275c:	200194e8 	.word	0x200194e8

08042760 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8042760:	b580      	push	{r7, lr}
 8042762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8042764:	4802      	ldr	r0, [pc, #8]	; (8042770 <DMA2_Channel2_IRQHandler+0x10>)
 8042766:	f006 f8ee 	bl	8048946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 804276a:	bf00      	nop
 804276c:	bd80      	pop	{r7, pc}
 804276e:	bf00      	nop
 8042770:	20019388 	.word	0x20019388

08042774 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8042774:	b580      	push	{r7, lr}
 8042776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8042778:	4802      	ldr	r0, [pc, #8]	; (8042784 <DMA2_Channel3_IRQHandler+0x10>)
 804277a:	f006 f8e4 	bl	8048946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 804277e:	bf00      	nop
 8042780:	bd80      	pop	{r7, pc}
 8042782:	bf00      	nop
 8042784:	20019480 	.word	0x20019480

08042788 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8042788:	b580      	push	{r7, lr}
 804278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 804278c:	4802      	ldr	r0, [pc, #8]	; (8042798 <DMA2_Channel6_IRQHandler+0x10>)
 804278e:	f006 f8da 	bl	8048946 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8042792:	bf00      	nop
 8042794:	bd80      	pop	{r7, pc}
 8042796:	bf00      	nop
 8042798:	20018f7c 	.word	0x20018f7c

0804279c <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 804279c:	b580      	push	{r7, lr}
 804279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80427a0:	4802      	ldr	r0, [pc, #8]	; (80427ac <RNG_IRQHandler+0x10>)
 80427a2:	f009 f809 	bl	804b7b8 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 80427a6:	bf00      	nop
 80427a8:	bd80      	pop	{r7, pc}
 80427aa:	bf00      	nop
 80427ac:	20019060 	.word	0x20019060

080427b0 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80427b0:	b480      	push	{r7}
 80427b2:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 80427b4:	bf00      	nop
 80427b6:	46bd      	mov	sp, r7
 80427b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80427bc:	4770      	bx	lr
	...

080427c0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80427c0:	b580      	push	{r7, lr}
 80427c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80427c4:	4802      	ldr	r0, [pc, #8]	; (80427d0 <SPI3_IRQHandler+0x10>)
 80427c6:	f00a fa0b 	bl	804cbe0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80427ca:	bf00      	nop
 80427cc:	bd80      	pop	{r7, pc}
 80427ce:	bf00      	nop
 80427d0:	200190f8 	.word	0x200190f8

080427d4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80427d4:	b580      	push	{r7, lr}
 80427d6:	b086      	sub	sp, #24
 80427d8:	af00      	add	r7, sp, #0
 80427da:	60f8      	str	r0, [r7, #12]
 80427dc:	60b9      	str	r1, [r7, #8]
 80427de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80427e0:	2300      	movs	r3, #0
 80427e2:	617b      	str	r3, [r7, #20]
 80427e4:	e00a      	b.n	80427fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80427e6:	e000      	b.n	80427ea <_read+0x16>
 80427e8:	bf00      	nop
 80427ea:	4601      	mov	r1, r0
 80427ec:	68bb      	ldr	r3, [r7, #8]
 80427ee:	1c5a      	adds	r2, r3, #1
 80427f0:	60ba      	str	r2, [r7, #8]
 80427f2:	b2ca      	uxtb	r2, r1
 80427f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80427f6:	697b      	ldr	r3, [r7, #20]
 80427f8:	3301      	adds	r3, #1
 80427fa:	617b      	str	r3, [r7, #20]
 80427fc:	697a      	ldr	r2, [r7, #20]
 80427fe:	687b      	ldr	r3, [r7, #4]
 8042800:	429a      	cmp	r2, r3
 8042802:	dbf0      	blt.n	80427e6 <_read+0x12>
	}

return len;
 8042804:	687b      	ldr	r3, [r7, #4]
}
 8042806:	4618      	mov	r0, r3
 8042808:	3718      	adds	r7, #24
 804280a:	46bd      	mov	sp, r7
 804280c:	bd80      	pop	{r7, pc}

0804280e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 804280e:	b580      	push	{r7, lr}
 8042810:	b086      	sub	sp, #24
 8042812:	af00      	add	r7, sp, #0
 8042814:	60f8      	str	r0, [r7, #12]
 8042816:	60b9      	str	r1, [r7, #8]
 8042818:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 804281a:	2300      	movs	r3, #0
 804281c:	617b      	str	r3, [r7, #20]
 804281e:	e009      	b.n	8042834 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8042820:	68bb      	ldr	r3, [r7, #8]
 8042822:	1c5a      	adds	r2, r3, #1
 8042824:	60ba      	str	r2, [r7, #8]
 8042826:	781b      	ldrb	r3, [r3, #0]
 8042828:	4618      	mov	r0, r3
 804282a:	f002 facb 	bl	8044dc4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 804282e:	697b      	ldr	r3, [r7, #20]
 8042830:	3301      	adds	r3, #1
 8042832:	617b      	str	r3, [r7, #20]
 8042834:	697a      	ldr	r2, [r7, #20]
 8042836:	687b      	ldr	r3, [r7, #4]
 8042838:	429a      	cmp	r2, r3
 804283a:	dbf1      	blt.n	8042820 <_write+0x12>
	}
	return len;
 804283c:	687b      	ldr	r3, [r7, #4]
}
 804283e:	4618      	mov	r0, r3
 8042840:	3718      	adds	r7, #24
 8042842:	46bd      	mov	sp, r7
 8042844:	bd80      	pop	{r7, pc}

08042846 <_close>:

int _close(int file)
{
 8042846:	b480      	push	{r7}
 8042848:	b083      	sub	sp, #12
 804284a:	af00      	add	r7, sp, #0
 804284c:	6078      	str	r0, [r7, #4]
	return -1;
 804284e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8042852:	4618      	mov	r0, r3
 8042854:	370c      	adds	r7, #12
 8042856:	46bd      	mov	sp, r7
 8042858:	f85d 7b04 	ldr.w	r7, [sp], #4
 804285c:	4770      	bx	lr

0804285e <_fstat>:


int _fstat(int file, struct stat *st)
{
 804285e:	b480      	push	{r7}
 8042860:	b083      	sub	sp, #12
 8042862:	af00      	add	r7, sp, #0
 8042864:	6078      	str	r0, [r7, #4]
 8042866:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8042868:	683b      	ldr	r3, [r7, #0]
 804286a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 804286e:	605a      	str	r2, [r3, #4]
	return 0;
 8042870:	2300      	movs	r3, #0
}
 8042872:	4618      	mov	r0, r3
 8042874:	370c      	adds	r7, #12
 8042876:	46bd      	mov	sp, r7
 8042878:	f85d 7b04 	ldr.w	r7, [sp], #4
 804287c:	4770      	bx	lr

0804287e <_isatty>:

int _isatty(int file)
{
 804287e:	b480      	push	{r7}
 8042880:	b083      	sub	sp, #12
 8042882:	af00      	add	r7, sp, #0
 8042884:	6078      	str	r0, [r7, #4]
	return 1;
 8042886:	2301      	movs	r3, #1
}
 8042888:	4618      	mov	r0, r3
 804288a:	370c      	adds	r7, #12
 804288c:	46bd      	mov	sp, r7
 804288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042892:	4770      	bx	lr

08042894 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8042894:	b480      	push	{r7}
 8042896:	b085      	sub	sp, #20
 8042898:	af00      	add	r7, sp, #0
 804289a:	60f8      	str	r0, [r7, #12]
 804289c:	60b9      	str	r1, [r7, #8]
 804289e:	607a      	str	r2, [r7, #4]
	return 0;
 80428a0:	2300      	movs	r3, #0
}
 80428a2:	4618      	mov	r0, r3
 80428a4:	3714      	adds	r7, #20
 80428a6:	46bd      	mov	sp, r7
 80428a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80428ac:	4770      	bx	lr
	...

080428b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80428b0:	b580      	push	{r7, lr}
 80428b2:	b086      	sub	sp, #24
 80428b4:	af00      	add	r7, sp, #0
 80428b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80428b8:	4a14      	ldr	r2, [pc, #80]	; (804290c <_sbrk+0x5c>)
 80428ba:	4b15      	ldr	r3, [pc, #84]	; (8042910 <_sbrk+0x60>)
 80428bc:	1ad3      	subs	r3, r2, r3
 80428be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80428c0:	697b      	ldr	r3, [r7, #20]
 80428c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80428c4:	4b13      	ldr	r3, [pc, #76]	; (8042914 <_sbrk+0x64>)
 80428c6:	681b      	ldr	r3, [r3, #0]
 80428c8:	2b00      	cmp	r3, #0
 80428ca:	d102      	bne.n	80428d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80428cc:	4b11      	ldr	r3, [pc, #68]	; (8042914 <_sbrk+0x64>)
 80428ce:	4a12      	ldr	r2, [pc, #72]	; (8042918 <_sbrk+0x68>)
 80428d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80428d2:	4b10      	ldr	r3, [pc, #64]	; (8042914 <_sbrk+0x64>)
 80428d4:	681a      	ldr	r2, [r3, #0]
 80428d6:	687b      	ldr	r3, [r7, #4]
 80428d8:	4413      	add	r3, r2
 80428da:	693a      	ldr	r2, [r7, #16]
 80428dc:	429a      	cmp	r2, r3
 80428de:	d207      	bcs.n	80428f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80428e0:	f00c fa86 	bl	804edf0 <__errno>
 80428e4:	4603      	mov	r3, r0
 80428e6:	220c      	movs	r2, #12
 80428e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80428ea:	f04f 33ff 	mov.w	r3, #4294967295
 80428ee:	e009      	b.n	8042904 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80428f0:	4b08      	ldr	r3, [pc, #32]	; (8042914 <_sbrk+0x64>)
 80428f2:	681b      	ldr	r3, [r3, #0]
 80428f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80428f6:	4b07      	ldr	r3, [pc, #28]	; (8042914 <_sbrk+0x64>)
 80428f8:	681a      	ldr	r2, [r3, #0]
 80428fa:	687b      	ldr	r3, [r7, #4]
 80428fc:	4413      	add	r3, r2
 80428fe:	4a05      	ldr	r2, [pc, #20]	; (8042914 <_sbrk+0x64>)
 8042900:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8042902:	68fb      	ldr	r3, [r7, #12]
}
 8042904:	4618      	mov	r0, r3
 8042906:	3718      	adds	r7, #24
 8042908:	46bd      	mov	sp, r7
 804290a:	bd80      	pop	{r7, pc}
 804290c:	20030000 	.word	0x20030000
 8042910:	00000400 	.word	0x00000400
 8042914:	200183a0 	.word	0x200183a0
 8042918:	20019978 	.word	0x20019978

0804291c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 804291c:	b480      	push	{r7}
 804291e:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8042920:	bf00      	nop
 8042922:	46bd      	mov	sp, r7
 8042924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042928:	4770      	bx	lr
	...

0804292c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 804292c:	b580      	push	{r7, lr}
 804292e:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8042930:	f00d fa8e 	bl	804fe50 <__SECURE_SystemCoreClockUpdate_veneer>
 8042934:	4603      	mov	r3, r0
 8042936:	4a02      	ldr	r2, [pc, #8]	; (8042940 <SystemCoreClockUpdate+0x14>)
 8042938:	6013      	str	r3, [r2, #0]
}
 804293a:	bf00      	nop
 804293c:	bd80      	pop	{r7, pc}
 804293e:	bf00      	nop
 8042940:	20018024 	.word	0x20018024

08042944 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8042944:	b580      	push	{r7, lr}
 8042946:	b08c      	sub	sp, #48	; 0x30
 8042948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 804294a:	f107 030c 	add.w	r3, r7, #12
 804294e:	2224      	movs	r2, #36	; 0x24
 8042950:	2100      	movs	r1, #0
 8042952:	4618      	mov	r0, r3
 8042954:	f00c fa83 	bl	804ee5e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8042958:	463b      	mov	r3, r7
 804295a:	2200      	movs	r2, #0
 804295c:	601a      	str	r2, [r3, #0]
 804295e:	605a      	str	r2, [r3, #4]
 8042960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8042962:	4b23      	ldr	r3, [pc, #140]	; (80429f0 <MX_TIM1_Init+0xac>)
 8042964:	4a23      	ldr	r2, [pc, #140]	; (80429f4 <MX_TIM1_Init+0xb0>)
 8042966:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8042968:	4b21      	ldr	r3, [pc, #132]	; (80429f0 <MX_TIM1_Init+0xac>)
 804296a:	2200      	movs	r2, #0
 804296c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 804296e:	4b20      	ldr	r3, [pc, #128]	; (80429f0 <MX_TIM1_Init+0xac>)
 8042970:	2200      	movs	r2, #0
 8042972:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8042974:	4b1e      	ldr	r3, [pc, #120]	; (80429f0 <MX_TIM1_Init+0xac>)
 8042976:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804297a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 804297c:	4b1c      	ldr	r3, [pc, #112]	; (80429f0 <MX_TIM1_Init+0xac>)
 804297e:	2200      	movs	r2, #0
 8042980:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8042982:	4b1b      	ldr	r3, [pc, #108]	; (80429f0 <MX_TIM1_Init+0xac>)
 8042984:	2200      	movs	r2, #0
 8042986:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8042988:	4b19      	ldr	r3, [pc, #100]	; (80429f0 <MX_TIM1_Init+0xac>)
 804298a:	2200      	movs	r2, #0
 804298c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 804298e:	2301      	movs	r3, #1
 8042990:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8042992:	2300      	movs	r3, #0
 8042994:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8042996:	2301      	movs	r3, #1
 8042998:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 804299a:	2300      	movs	r3, #0
 804299c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 804299e:	2300      	movs	r3, #0
 80429a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80429a2:	2300      	movs	r3, #0
 80429a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80429a6:	2301      	movs	r3, #1
 80429a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80429aa:	2300      	movs	r3, #0
 80429ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80429ae:	2300      	movs	r3, #0
 80429b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80429b2:	f107 030c 	add.w	r3, r7, #12
 80429b6:	4619      	mov	r1, r3
 80429b8:	480d      	ldr	r0, [pc, #52]	; (80429f0 <MX_TIM1_Init+0xac>)
 80429ba:	f00a fd09 	bl	804d3d0 <HAL_TIM_Encoder_Init>
 80429be:	4603      	mov	r3, r0
 80429c0:	2b00      	cmp	r3, #0
 80429c2:	d001      	beq.n	80429c8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80429c4:	f7fe fe64 	bl	8041690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80429c8:	2300      	movs	r3, #0
 80429ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80429cc:	2300      	movs	r3, #0
 80429ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80429d0:	2300      	movs	r3, #0
 80429d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80429d4:	463b      	mov	r3, r7
 80429d6:	4619      	mov	r1, r3
 80429d8:	4805      	ldr	r0, [pc, #20]	; (80429f0 <MX_TIM1_Init+0xac>)
 80429da:	f00b f841 	bl	804da60 <HAL_TIMEx_MasterConfigSynchronization>
 80429de:	4603      	mov	r3, r0
 80429e0:	2b00      	cmp	r3, #0
 80429e2:	d001      	beq.n	80429e8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80429e4:	f7fe fe54 	bl	8041690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80429e8:	bf00      	nop
 80429ea:	3730      	adds	r7, #48	; 0x30
 80429ec:	46bd      	mov	sp, r7
 80429ee:	bd80      	pop	{r7, pc}
 80429f0:	200192cc 	.word	0x200192cc
 80429f4:	40012c00 	.word	0x40012c00

080429f8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80429f8:	b580      	push	{r7, lr}
 80429fa:	b08a      	sub	sp, #40	; 0x28
 80429fc:	af00      	add	r7, sp, #0
 80429fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8042a00:	f107 0314 	add.w	r3, r7, #20
 8042a04:	2200      	movs	r2, #0
 8042a06:	601a      	str	r2, [r3, #0]
 8042a08:	605a      	str	r2, [r3, #4]
 8042a0a:	609a      	str	r2, [r3, #8]
 8042a0c:	60da      	str	r2, [r3, #12]
 8042a0e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8042a10:	687b      	ldr	r3, [r7, #4]
 8042a12:	681b      	ldr	r3, [r3, #0]
 8042a14:	4a27      	ldr	r2, [pc, #156]	; (8042ab4 <HAL_TIM_Encoder_MspInit+0xbc>)
 8042a16:	4293      	cmp	r3, r2
 8042a18:	d148      	bne.n	8042aac <HAL_TIM_Encoder_MspInit+0xb4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8042a1a:	4b27      	ldr	r3, [pc, #156]	; (8042ab8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8042a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042a1e:	4a26      	ldr	r2, [pc, #152]	; (8042ab8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8042a20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8042a24:	6613      	str	r3, [r2, #96]	; 0x60
 8042a26:	4b24      	ldr	r3, [pc, #144]	; (8042ab8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8042a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042a2e:	613b      	str	r3, [r7, #16]
 8042a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8042a32:	4b21      	ldr	r3, [pc, #132]	; (8042ab8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8042a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042a36:	4a20      	ldr	r2, [pc, #128]	; (8042ab8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8042a38:	f043 0310 	orr.w	r3, r3, #16
 8042a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8042a3e:	4b1e      	ldr	r3, [pc, #120]	; (8042ab8 <HAL_TIM_Encoder_MspInit+0xc0>)
 8042a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042a42:	f003 0310 	and.w	r3, r3, #16
 8042a46:	60fb      	str	r3, [r7, #12]
 8042a48:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_P_Pin|ENCODER_N_Pin;
 8042a4a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8042a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8042a50:	2302      	movs	r3, #2
 8042a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8042a54:	2300      	movs	r3, #0
 8042a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8042a58:	2300      	movs	r3, #0
 8042a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8042a5c:	2301      	movs	r3, #1
 8042a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8042a60:	f107 0314 	add.w	r3, r7, #20
 8042a64:	4619      	mov	r1, r3
 8042a66:	4815      	ldr	r0, [pc, #84]	; (8042abc <HAL_TIM_Encoder_MspInit+0xc4>)
 8042a68:	f006 f90e 	bl	8048c88 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8042a6c:	2200      	movs	r2, #0
 8042a6e:	2100      	movs	r1, #0
 8042a70:	2029      	movs	r0, #41	; 0x29
 8042a72:	f005 fdcf 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8042a76:	2029      	movs	r0, #41	; 0x29
 8042a78:	f005 fde6 	bl	8048648 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8042a7c:	2200      	movs	r2, #0
 8042a7e:	2100      	movs	r1, #0
 8042a80:	202a      	movs	r0, #42	; 0x2a
 8042a82:	f005 fdc7 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8042a86:	202a      	movs	r0, #42	; 0x2a
 8042a88:	f005 fdde 	bl	8048648 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8042a8c:	2200      	movs	r2, #0
 8042a8e:	2100      	movs	r1, #0
 8042a90:	202b      	movs	r0, #43	; 0x2b
 8042a92:	f005 fdbf 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8042a96:	202b      	movs	r0, #43	; 0x2b
 8042a98:	f005 fdd6 	bl	8048648 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8042a9c:	2200      	movs	r2, #0
 8042a9e:	2100      	movs	r1, #0
 8042aa0:	202c      	movs	r0, #44	; 0x2c
 8042aa2:	f005 fdb7 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8042aa6:	202c      	movs	r0, #44	; 0x2c
 8042aa8:	f005 fdce 	bl	8048648 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8042aac:	bf00      	nop
 8042aae:	3728      	adds	r7, #40	; 0x28
 8042ab0:	46bd      	mov	sp, r7
 8042ab2:	bd80      	pop	{r7, pc}
 8042ab4:	40012c00 	.word	0x40012c00
 8042ab8:	40021000 	.word	0x40021000
 8042abc:	42021000 	.word	0x42021000

08042ac0 <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 8042ac0:	b480      	push	{r7}
 8042ac2:	b083      	sub	sp, #12
 8042ac4:	af00      	add	r7, sp, #0
 8042ac6:	6078      	str	r0, [r7, #4]
 8042ac8:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 8042aca:	687b      	ldr	r3, [r7, #4]
 8042acc:	2200      	movs	r2, #0
 8042ace:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 8042ad0:	687b      	ldr	r3, [r7, #4]
 8042ad2:	2200      	movs	r2, #0
 8042ad4:	605a      	str	r2, [r3, #4]
    obj->IsStarted = false;
 8042ad6:	687b      	ldr	r3, [r7, #4]
 8042ad8:	2200      	movs	r2, #0
 8042ada:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 8042adc:	687b      	ldr	r3, [r7, #4]
 8042ade:	2200      	movs	r2, #0
 8042ae0:	725a      	strb	r2, [r3, #9]
    obj->Callback = callback;
 8042ae2:	687b      	ldr	r3, [r7, #4]
 8042ae4:	683a      	ldr	r2, [r7, #0]
 8042ae6:	60da      	str	r2, [r3, #12]
    obj->Context = NULL;
 8042ae8:	687b      	ldr	r3, [r7, #4]
 8042aea:	2200      	movs	r2, #0
 8042aec:	611a      	str	r2, [r3, #16]
    obj->Next = NULL;
 8042aee:	687b      	ldr	r3, [r7, #4]
 8042af0:	2200      	movs	r2, #0
 8042af2:	615a      	str	r2, [r3, #20]
}
 8042af4:	bf00      	nop
 8042af6:	370c      	adds	r7, #12
 8042af8:	46bd      	mov	sp, r7
 8042afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042afe:	4770      	bx	lr

08042b00 <TimerStart>:
{
    obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 8042b00:	b580      	push	{r7, lr}
 8042b02:	b084      	sub	sp, #16
 8042b04:	af00      	add	r7, sp, #0
 8042b06:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 8042b08:	2300      	movs	r3, #0
 8042b0a:	60fb      	str	r3, [r7, #12]

    CRITICAL_SECTION_BEGIN( );
 8042b0c:	f107 0308 	add.w	r3, r7, #8
 8042b10:	4618      	mov	r0, r3
 8042b12:	f002 f973 	bl	8044dfc <BoardCriticalSectionBegin>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8042b16:	687b      	ldr	r3, [r7, #4]
 8042b18:	2b00      	cmp	r3, #0
 8042b1a:	d005      	beq.n	8042b28 <TimerStart+0x28>
 8042b1c:	6878      	ldr	r0, [r7, #4]
 8042b1e:	f000 f989 	bl	8042e34 <TimerExists>
 8042b22:	4603      	mov	r3, r0
 8042b24:	2b00      	cmp	r3, #0
 8042b26:	d005      	beq.n	8042b34 <TimerStart+0x34>
    {
        CRITICAL_SECTION_END( );
 8042b28:	f107 0308 	add.w	r3, r7, #8
 8042b2c:	4618      	mov	r0, r3
 8042b2e:	f002 f977 	bl	8044e20 <BoardCriticalSectionEnd>
 8042b32:	e02f      	b.n	8042b94 <TimerStart+0x94>
        return;
    }

    obj->Timestamp = obj->ReloadValue;
 8042b34:	687b      	ldr	r3, [r7, #4]
 8042b36:	685a      	ldr	r2, [r3, #4]
 8042b38:	687b      	ldr	r3, [r7, #4]
 8042b3a:	601a      	str	r2, [r3, #0]
    obj->IsStarted = true;
 8042b3c:	687b      	ldr	r3, [r7, #4]
 8042b3e:	2201      	movs	r2, #1
 8042b40:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 8042b42:	687b      	ldr	r3, [r7, #4]
 8042b44:	2200      	movs	r2, #0
 8042b46:	725a      	strb	r2, [r3, #9]

    if( TimerListHead == NULL )
 8042b48:	4b14      	ldr	r3, [pc, #80]	; (8042b9c <TimerStart+0x9c>)
 8042b4a:	681b      	ldr	r3, [r3, #0]
 8042b4c:	2b00      	cmp	r3, #0
 8042b4e:	d105      	bne.n	8042b5c <TimerStart+0x5c>
    {
        RtcSetTimerContext( );
 8042b50:	f7fe fee6 	bl	8041920 <RtcSetTimerContext>
        // Inserts a timer at time now + obj->Timestamp
        TimerInsertNewHeadTimer( obj );
 8042b54:	6878      	ldr	r0, [r7, #4]
 8042b56:	f000 f853 	bl	8042c00 <TimerInsertNewHeadTimer>
 8042b5a:	e016      	b.n	8042b8a <TimerStart+0x8a>
    }
    else
    {
        elapsedTime = RtcGetTimerElapsedTime( );
 8042b5c:	f7ff f894 	bl	8041c88 <RtcGetTimerElapsedTime>
 8042b60:	60f8      	str	r0, [r7, #12]
        obj->Timestamp += elapsedTime;
 8042b62:	687b      	ldr	r3, [r7, #4]
 8042b64:	681a      	ldr	r2, [r3, #0]
 8042b66:	68fb      	ldr	r3, [r7, #12]
 8042b68:	441a      	add	r2, r3
 8042b6a:	687b      	ldr	r3, [r7, #4]
 8042b6c:	601a      	str	r2, [r3, #0]

        if( obj->Timestamp < TimerListHead->Timestamp )
 8042b6e:	687b      	ldr	r3, [r7, #4]
 8042b70:	681a      	ldr	r2, [r3, #0]
 8042b72:	4b0a      	ldr	r3, [pc, #40]	; (8042b9c <TimerStart+0x9c>)
 8042b74:	681b      	ldr	r3, [r3, #0]
 8042b76:	681b      	ldr	r3, [r3, #0]
 8042b78:	429a      	cmp	r2, r3
 8042b7a:	d203      	bcs.n	8042b84 <TimerStart+0x84>
        {
            TimerInsertNewHeadTimer( obj );
 8042b7c:	6878      	ldr	r0, [r7, #4]
 8042b7e:	f000 f83f 	bl	8042c00 <TimerInsertNewHeadTimer>
 8042b82:	e002      	b.n	8042b8a <TimerStart+0x8a>
        }
        else
        {
            TimerInsertTimer( obj );
 8042b84:	6878      	ldr	r0, [r7, #4]
 8042b86:	f000 f80b 	bl	8042ba0 <TimerInsertTimer>
        }
    }
    CRITICAL_SECTION_END( );
 8042b8a:	f107 0308 	add.w	r3, r7, #8
 8042b8e:	4618      	mov	r0, r3
 8042b90:	f002 f946 	bl	8044e20 <BoardCriticalSectionEnd>
}
 8042b94:	3710      	adds	r7, #16
 8042b96:	46bd      	mov	sp, r7
 8042b98:	bd80      	pop	{r7, pc}
 8042b9a:	bf00      	nop
 8042b9c:	200183a4 	.word	0x200183a4

08042ba0 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj )
{
 8042ba0:	b480      	push	{r7}
 8042ba2:	b085      	sub	sp, #20
 8042ba4:	af00      	add	r7, sp, #0
 8042ba6:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8042ba8:	4b14      	ldr	r3, [pc, #80]	; (8042bfc <TimerInsertTimer+0x5c>)
 8042baa:	681b      	ldr	r3, [r3, #0]
 8042bac:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* next = TimerListHead->Next;
 8042bae:	4b13      	ldr	r3, [pc, #76]	; (8042bfc <TimerInsertTimer+0x5c>)
 8042bb0:	681b      	ldr	r3, [r3, #0]
 8042bb2:	695b      	ldr	r3, [r3, #20]
 8042bb4:	60bb      	str	r3, [r7, #8]

    while( cur->Next != NULL )
 8042bb6:	e012      	b.n	8042bde <TimerInsertTimer+0x3e>
    {
        if( obj->Timestamp > next->Timestamp )
 8042bb8:	687b      	ldr	r3, [r7, #4]
 8042bba:	681a      	ldr	r2, [r3, #0]
 8042bbc:	68bb      	ldr	r3, [r7, #8]
 8042bbe:	681b      	ldr	r3, [r3, #0]
 8042bc0:	429a      	cmp	r2, r3
 8042bc2:	d905      	bls.n	8042bd0 <TimerInsertTimer+0x30>
        {
            cur = next;
 8042bc4:	68bb      	ldr	r3, [r7, #8]
 8042bc6:	60fb      	str	r3, [r7, #12]
            next = next->Next;
 8042bc8:	68bb      	ldr	r3, [r7, #8]
 8042bca:	695b      	ldr	r3, [r3, #20]
 8042bcc:	60bb      	str	r3, [r7, #8]
 8042bce:	e006      	b.n	8042bde <TimerInsertTimer+0x3e>
        }
        else
        {
            cur->Next = obj;
 8042bd0:	68fb      	ldr	r3, [r7, #12]
 8042bd2:	687a      	ldr	r2, [r7, #4]
 8042bd4:	615a      	str	r2, [r3, #20]
            obj->Next = next;
 8042bd6:	687b      	ldr	r3, [r7, #4]
 8042bd8:	68ba      	ldr	r2, [r7, #8]
 8042bda:	615a      	str	r2, [r3, #20]
            return;
 8042bdc:	e009      	b.n	8042bf2 <TimerInsertTimer+0x52>
    while( cur->Next != NULL )
 8042bde:	68fb      	ldr	r3, [r7, #12]
 8042be0:	695b      	ldr	r3, [r3, #20]
 8042be2:	2b00      	cmp	r3, #0
 8042be4:	d1e8      	bne.n	8042bb8 <TimerInsertTimer+0x18>
        }
    }
    cur->Next = obj;
 8042be6:	68fb      	ldr	r3, [r7, #12]
 8042be8:	687a      	ldr	r2, [r7, #4]
 8042bea:	615a      	str	r2, [r3, #20]
    obj->Next = NULL;
 8042bec:	687b      	ldr	r3, [r7, #4]
 8042bee:	2200      	movs	r2, #0
 8042bf0:	615a      	str	r2, [r3, #20]
}
 8042bf2:	3714      	adds	r7, #20
 8042bf4:	46bd      	mov	sp, r7
 8042bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042bfa:	4770      	bx	lr
 8042bfc:	200183a4 	.word	0x200183a4

08042c00 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 8042c00:	b580      	push	{r7, lr}
 8042c02:	b084      	sub	sp, #16
 8042c04:	af00      	add	r7, sp, #0
 8042c06:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8042c08:	4b0b      	ldr	r3, [pc, #44]	; (8042c38 <TimerInsertNewHeadTimer+0x38>)
 8042c0a:	681b      	ldr	r3, [r3, #0]
 8042c0c:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 8042c0e:	68fb      	ldr	r3, [r7, #12]
 8042c10:	2b00      	cmp	r3, #0
 8042c12:	d002      	beq.n	8042c1a <TimerInsertNewHeadTimer+0x1a>
    {
        cur->IsNext2Expire = false;
 8042c14:	68fb      	ldr	r3, [r7, #12]
 8042c16:	2200      	movs	r2, #0
 8042c18:	725a      	strb	r2, [r3, #9]
    }

    obj->Next = cur;
 8042c1a:	687b      	ldr	r3, [r7, #4]
 8042c1c:	68fa      	ldr	r2, [r7, #12]
 8042c1e:	615a      	str	r2, [r3, #20]
    TimerListHead = obj;
 8042c20:	4a05      	ldr	r2, [pc, #20]	; (8042c38 <TimerInsertNewHeadTimer+0x38>)
 8042c22:	687b      	ldr	r3, [r7, #4]
 8042c24:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 8042c26:	4b04      	ldr	r3, [pc, #16]	; (8042c38 <TimerInsertNewHeadTimer+0x38>)
 8042c28:	681b      	ldr	r3, [r3, #0]
 8042c2a:	4618      	mov	r0, r3
 8042c2c:	f000 f96a 	bl	8042f04 <TimerSetTimeout>
}
 8042c30:	bf00      	nop
 8042c32:	3710      	adds	r7, #16
 8042c34:	46bd      	mov	sp, r7
 8042c36:	bd80      	pop	{r7, pc}
 8042c38:	200183a4 	.word	0x200183a4

08042c3c <TimerIrqHandler>:
{
    return obj->IsStarted;
}

void TimerIrqHandler( void )
{
 8042c3c:	b590      	push	{r4, r7, lr}
 8042c3e:	b087      	sub	sp, #28
 8042c40:	af00      	add	r7, sp, #0
    TimerEvent_t* cur;
    TimerEvent_t* next;

    uint32_t old =  RtcGetTimerContext( );
 8042c42:	f7fe fe81 	bl	8041948 <RtcGetTimerContext>
 8042c46:	6138      	str	r0, [r7, #16]
    uint32_t now =  RtcSetTimerContext( );
 8042c48:	f7fe fe6a 	bl	8041920 <RtcSetTimerContext>
 8042c4c:	60f8      	str	r0, [r7, #12]
    uint32_t deltaContext = now - old; // intentional wrap around
 8042c4e:	68fa      	ldr	r2, [r7, #12]
 8042c50:	693b      	ldr	r3, [r7, #16]
 8042c52:	1ad3      	subs	r3, r2, r3
 8042c54:	60bb      	str	r3, [r7, #8]

    // Update timeStamp based upon new Time Reference
    // because delta context should never exceed 2^32
    if( TimerListHead != NULL )
 8042c56:	4b39      	ldr	r3, [pc, #228]	; (8042d3c <TimerIrqHandler+0x100>)
 8042c58:	681b      	ldr	r3, [r3, #0]
 8042c5a:	2b00      	cmp	r3, #0
 8042c5c:	d01c      	beq.n	8042c98 <TimerIrqHandler+0x5c>
    {
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8042c5e:	4b37      	ldr	r3, [pc, #220]	; (8042d3c <TimerIrqHandler+0x100>)
 8042c60:	681b      	ldr	r3, [r3, #0]
 8042c62:	617b      	str	r3, [r7, #20]
 8042c64:	e014      	b.n	8042c90 <TimerIrqHandler+0x54>
        {
            next = cur->Next;
 8042c66:	697b      	ldr	r3, [r7, #20]
 8042c68:	695b      	ldr	r3, [r3, #20]
 8042c6a:	607b      	str	r3, [r7, #4]
            if( next->Timestamp > deltaContext )
 8042c6c:	687b      	ldr	r3, [r7, #4]
 8042c6e:	681b      	ldr	r3, [r3, #0]
 8042c70:	68ba      	ldr	r2, [r7, #8]
 8042c72:	429a      	cmp	r2, r3
 8042c74:	d206      	bcs.n	8042c84 <TimerIrqHandler+0x48>
            {
                next->Timestamp -= deltaContext;
 8042c76:	687b      	ldr	r3, [r7, #4]
 8042c78:	681a      	ldr	r2, [r3, #0]
 8042c7a:	68bb      	ldr	r3, [r7, #8]
 8042c7c:	1ad2      	subs	r2, r2, r3
 8042c7e:	687b      	ldr	r3, [r7, #4]
 8042c80:	601a      	str	r2, [r3, #0]
 8042c82:	e002      	b.n	8042c8a <TimerIrqHandler+0x4e>
            }
            else
            {
                next->Timestamp = 0;
 8042c84:	687b      	ldr	r3, [r7, #4]
 8042c86:	2200      	movs	r2, #0
 8042c88:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8042c8a:	697b      	ldr	r3, [r7, #20]
 8042c8c:	695b      	ldr	r3, [r3, #20]
 8042c8e:	617b      	str	r3, [r7, #20]
 8042c90:	697b      	ldr	r3, [r7, #20]
 8042c92:	695b      	ldr	r3, [r3, #20]
 8042c94:	2b00      	cmp	r3, #0
 8042c96:	d1e6      	bne.n	8042c66 <TimerIrqHandler+0x2a>
            }
        }
    }

    // Execute immediately the alarm callback
    if ( TimerListHead != NULL )
 8042c98:	4b28      	ldr	r3, [pc, #160]	; (8042d3c <TimerIrqHandler+0x100>)
 8042c9a:	681b      	ldr	r3, [r3, #0]
 8042c9c:	2b00      	cmp	r3, #0
 8042c9e:	d02c      	beq.n	8042cfa <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 8042ca0:	4b26      	ldr	r3, [pc, #152]	; (8042d3c <TimerIrqHandler+0x100>)
 8042ca2:	681b      	ldr	r3, [r3, #0]
 8042ca4:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 8042ca6:	4b25      	ldr	r3, [pc, #148]	; (8042d3c <TimerIrqHandler+0x100>)
 8042ca8:	681b      	ldr	r3, [r3, #0]
 8042caa:	695b      	ldr	r3, [r3, #20]
 8042cac:	4a23      	ldr	r2, [pc, #140]	; (8042d3c <TimerIrqHandler+0x100>)
 8042cae:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 8042cb0:	697b      	ldr	r3, [r7, #20]
 8042cb2:	2200      	movs	r2, #0
 8042cb4:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8042cb6:	697b      	ldr	r3, [r7, #20]
 8042cb8:	68db      	ldr	r3, [r3, #12]
 8042cba:	2b00      	cmp	r3, #0
 8042cbc:	d100      	bne.n	8042cc0 <TimerIrqHandler+0x84>
 8042cbe:	e7fe      	b.n	8042cbe <TimerIrqHandler+0x82>
 8042cc0:	697b      	ldr	r3, [r7, #20]
 8042cc2:	68db      	ldr	r3, [r3, #12]
 8042cc4:	697a      	ldr	r2, [r7, #20]
 8042cc6:	6912      	ldr	r2, [r2, #16]
 8042cc8:	4610      	mov	r0, r2
 8042cca:	4798      	blx	r3
    }

    // Remove all the expired object from the list
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8042ccc:	e015      	b.n	8042cfa <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 8042cce:	4b1b      	ldr	r3, [pc, #108]	; (8042d3c <TimerIrqHandler+0x100>)
 8042cd0:	681b      	ldr	r3, [r3, #0]
 8042cd2:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 8042cd4:	4b19      	ldr	r3, [pc, #100]	; (8042d3c <TimerIrqHandler+0x100>)
 8042cd6:	681b      	ldr	r3, [r3, #0]
 8042cd8:	695b      	ldr	r3, [r3, #20]
 8042cda:	4a18      	ldr	r2, [pc, #96]	; (8042d3c <TimerIrqHandler+0x100>)
 8042cdc:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 8042cde:	697b      	ldr	r3, [r7, #20]
 8042ce0:	2200      	movs	r2, #0
 8042ce2:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8042ce4:	697b      	ldr	r3, [r7, #20]
 8042ce6:	68db      	ldr	r3, [r3, #12]
 8042ce8:	2b00      	cmp	r3, #0
 8042cea:	d100      	bne.n	8042cee <TimerIrqHandler+0xb2>
 8042cec:	e7fe      	b.n	8042cec <TimerIrqHandler+0xb0>
 8042cee:	697b      	ldr	r3, [r7, #20]
 8042cf0:	68db      	ldr	r3, [r3, #12]
 8042cf2:	697a      	ldr	r2, [r7, #20]
 8042cf4:	6912      	ldr	r2, [r2, #16]
 8042cf6:	4610      	mov	r0, r2
 8042cf8:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8042cfa:	4b10      	ldr	r3, [pc, #64]	; (8042d3c <TimerIrqHandler+0x100>)
 8042cfc:	681b      	ldr	r3, [r3, #0]
 8042cfe:	2b00      	cmp	r3, #0
 8042d00:	d007      	beq.n	8042d12 <TimerIrqHandler+0xd6>
 8042d02:	4b0e      	ldr	r3, [pc, #56]	; (8042d3c <TimerIrqHandler+0x100>)
 8042d04:	681b      	ldr	r3, [r3, #0]
 8042d06:	681c      	ldr	r4, [r3, #0]
 8042d08:	f7fe ffbe 	bl	8041c88 <RtcGetTimerElapsedTime>
 8042d0c:	4603      	mov	r3, r0
 8042d0e:	429c      	cmp	r4, r3
 8042d10:	d3dd      	bcc.n	8042cce <TimerIrqHandler+0x92>
    }

    // Start the next TimerListHead if it exists AND NOT running
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8042d12:	4b0a      	ldr	r3, [pc, #40]	; (8042d3c <TimerIrqHandler+0x100>)
 8042d14:	681b      	ldr	r3, [r3, #0]
 8042d16:	2b00      	cmp	r3, #0
 8042d18:	d00c      	beq.n	8042d34 <TimerIrqHandler+0xf8>
 8042d1a:	4b08      	ldr	r3, [pc, #32]	; (8042d3c <TimerIrqHandler+0x100>)
 8042d1c:	681b      	ldr	r3, [r3, #0]
 8042d1e:	7a5b      	ldrb	r3, [r3, #9]
 8042d20:	f083 0301 	eor.w	r3, r3, #1
 8042d24:	b2db      	uxtb	r3, r3
 8042d26:	2b00      	cmp	r3, #0
 8042d28:	d004      	beq.n	8042d34 <TimerIrqHandler+0xf8>
    {
        TimerSetTimeout( TimerListHead );
 8042d2a:	4b04      	ldr	r3, [pc, #16]	; (8042d3c <TimerIrqHandler+0x100>)
 8042d2c:	681b      	ldr	r3, [r3, #0]
 8042d2e:	4618      	mov	r0, r3
 8042d30:	f000 f8e8 	bl	8042f04 <TimerSetTimeout>
    }
}
 8042d34:	bf00      	nop
 8042d36:	371c      	adds	r7, #28
 8042d38:	46bd      	mov	sp, r7
 8042d3a:	bd90      	pop	{r4, r7, pc}
 8042d3c:	200183a4 	.word	0x200183a4

08042d40 <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 8042d40:	b580      	push	{r7, lr}
 8042d42:	b086      	sub	sp, #24
 8042d44:	af00      	add	r7, sp, #0
 8042d46:	6078      	str	r0, [r7, #4]
    CRITICAL_SECTION_BEGIN( );
 8042d48:	f107 030c 	add.w	r3, r7, #12
 8042d4c:	4618      	mov	r0, r3
 8042d4e:	f002 f855 	bl	8044dfc <BoardCriticalSectionBegin>

    TimerEvent_t* prev = TimerListHead;
 8042d52:	4b37      	ldr	r3, [pc, #220]	; (8042e30 <TimerStop+0xf0>)
 8042d54:	681b      	ldr	r3, [r3, #0]
 8042d56:	617b      	str	r3, [r7, #20]
    TimerEvent_t* cur = TimerListHead;
 8042d58:	4b35      	ldr	r3, [pc, #212]	; (8042e30 <TimerStop+0xf0>)
 8042d5a:	681b      	ldr	r3, [r3, #0]
 8042d5c:	613b      	str	r3, [r7, #16]

    // List is empty or the obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8042d5e:	4b34      	ldr	r3, [pc, #208]	; (8042e30 <TimerStop+0xf0>)
 8042d60:	681b      	ldr	r3, [r3, #0]
 8042d62:	2b00      	cmp	r3, #0
 8042d64:	d002      	beq.n	8042d6c <TimerStop+0x2c>
 8042d66:	687b      	ldr	r3, [r7, #4]
 8042d68:	2b00      	cmp	r3, #0
 8042d6a:	d105      	bne.n	8042d78 <TimerStop+0x38>
    {
        CRITICAL_SECTION_END( );
 8042d6c:	f107 030c 	add.w	r3, r7, #12
 8042d70:	4618      	mov	r0, r3
 8042d72:	f002 f855 	bl	8044e20 <BoardCriticalSectionEnd>
 8042d76:	e057      	b.n	8042e28 <TimerStop+0xe8>
        return;
    }

    obj->IsStarted = false;
 8042d78:	687b      	ldr	r3, [r7, #4]
 8042d7a:	2200      	movs	r2, #0
 8042d7c:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == obj ) // Stop the Head
 8042d7e:	4b2c      	ldr	r3, [pc, #176]	; (8042e30 <TimerStop+0xf0>)
 8042d80:	681b      	ldr	r3, [r3, #0]
 8042d82:	687a      	ldr	r2, [r7, #4]
 8042d84:	429a      	cmp	r2, r3
 8042d86:	d147      	bne.n	8042e18 <TimerStop+0xd8>
    {
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8042d88:	4b29      	ldr	r3, [pc, #164]	; (8042e30 <TimerStop+0xf0>)
 8042d8a:	681b      	ldr	r3, [r3, #0]
 8042d8c:	7a5b      	ldrb	r3, [r3, #9]
 8042d8e:	2b00      	cmp	r3, #0
 8042d90:	d019      	beq.n	8042dc6 <TimerStop+0x86>
        {
            TimerListHead->IsNext2Expire = false;
 8042d92:	4b27      	ldr	r3, [pc, #156]	; (8042e30 <TimerStop+0xf0>)
 8042d94:	681b      	ldr	r3, [r3, #0]
 8042d96:	2200      	movs	r2, #0
 8042d98:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 8042d9a:	4b25      	ldr	r3, [pc, #148]	; (8042e30 <TimerStop+0xf0>)
 8042d9c:	681b      	ldr	r3, [r3, #0]
 8042d9e:	695b      	ldr	r3, [r3, #20]
 8042da0:	2b00      	cmp	r3, #0
 8042da2:	d00a      	beq.n	8042dba <TimerStop+0x7a>
            {
                TimerListHead = TimerListHead->Next;
 8042da4:	4b22      	ldr	r3, [pc, #136]	; (8042e30 <TimerStop+0xf0>)
 8042da6:	681b      	ldr	r3, [r3, #0]
 8042da8:	695b      	ldr	r3, [r3, #20]
 8042daa:	4a21      	ldr	r2, [pc, #132]	; (8042e30 <TimerStop+0xf0>)
 8042dac:	6013      	str	r3, [r2, #0]
                TimerSetTimeout( TimerListHead );
 8042dae:	4b20      	ldr	r3, [pc, #128]	; (8042e30 <TimerStop+0xf0>)
 8042db0:	681b      	ldr	r3, [r3, #0]
 8042db2:	4618      	mov	r0, r3
 8042db4:	f000 f8a6 	bl	8042f04 <TimerSetTimeout>
 8042db8:	e031      	b.n	8042e1e <TimerStop+0xde>
            }
            else
            {
                RtcStopAlarm( );
 8042dba:	f7fe fe49 	bl	8041a50 <RtcStopAlarm>
                TimerListHead = NULL;
 8042dbe:	4b1c      	ldr	r3, [pc, #112]	; (8042e30 <TimerStop+0xf0>)
 8042dc0:	2200      	movs	r2, #0
 8042dc2:	601a      	str	r2, [r3, #0]
 8042dc4:	e02b      	b.n	8042e1e <TimerStop+0xde>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 8042dc6:	4b1a      	ldr	r3, [pc, #104]	; (8042e30 <TimerStop+0xf0>)
 8042dc8:	681b      	ldr	r3, [r3, #0]
 8042dca:	695b      	ldr	r3, [r3, #20]
 8042dcc:	2b00      	cmp	r3, #0
 8042dce:	d005      	beq.n	8042ddc <TimerStop+0x9c>
            {
                TimerListHead = TimerListHead->Next;
 8042dd0:	4b17      	ldr	r3, [pc, #92]	; (8042e30 <TimerStop+0xf0>)
 8042dd2:	681b      	ldr	r3, [r3, #0]
 8042dd4:	695b      	ldr	r3, [r3, #20]
 8042dd6:	4a16      	ldr	r2, [pc, #88]	; (8042e30 <TimerStop+0xf0>)
 8042dd8:	6013      	str	r3, [r2, #0]
 8042dda:	e020      	b.n	8042e1e <TimerStop+0xde>
            }
            else
            {
                TimerListHead = NULL;
 8042ddc:	4b14      	ldr	r3, [pc, #80]	; (8042e30 <TimerStop+0xf0>)
 8042dde:	2200      	movs	r2, #0
 8042de0:	601a      	str	r2, [r3, #0]
 8042de2:	e01c      	b.n	8042e1e <TimerStop+0xde>
    }
    else // Stop an object within the list
    {
        while( cur != NULL )
        {
            if( cur == obj )
 8042de4:	693a      	ldr	r2, [r7, #16]
 8042de6:	687b      	ldr	r3, [r7, #4]
 8042de8:	429a      	cmp	r2, r3
 8042dea:	d110      	bne.n	8042e0e <TimerStop+0xce>
            {
                if( cur->Next != NULL )
 8042dec:	693b      	ldr	r3, [r7, #16]
 8042dee:	695b      	ldr	r3, [r3, #20]
 8042df0:	2b00      	cmp	r3, #0
 8042df2:	d006      	beq.n	8042e02 <TimerStop+0xc2>
                {
                    cur = cur->Next;
 8042df4:	693b      	ldr	r3, [r7, #16]
 8042df6:	695b      	ldr	r3, [r3, #20]
 8042df8:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8042dfa:	697b      	ldr	r3, [r7, #20]
 8042dfc:	693a      	ldr	r2, [r7, #16]
 8042dfe:	615a      	str	r2, [r3, #20]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 8042e00:	e00d      	b.n	8042e1e <TimerStop+0xde>
                    cur = NULL;
 8042e02:	2300      	movs	r3, #0
 8042e04:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8042e06:	697b      	ldr	r3, [r7, #20]
 8042e08:	693a      	ldr	r2, [r7, #16]
 8042e0a:	615a      	str	r2, [r3, #20]
                break;
 8042e0c:	e007      	b.n	8042e1e <TimerStop+0xde>
            }
            else
            {
                prev = cur;
 8042e0e:	693b      	ldr	r3, [r7, #16]
 8042e10:	617b      	str	r3, [r7, #20]
                cur = cur->Next;
 8042e12:	693b      	ldr	r3, [r7, #16]
 8042e14:	695b      	ldr	r3, [r3, #20]
 8042e16:	613b      	str	r3, [r7, #16]
        while( cur != NULL )
 8042e18:	693b      	ldr	r3, [r7, #16]
 8042e1a:	2b00      	cmp	r3, #0
 8042e1c:	d1e2      	bne.n	8042de4 <TimerStop+0xa4>
            }
        }
    }
    CRITICAL_SECTION_END( );
 8042e1e:	f107 030c 	add.w	r3, r7, #12
 8042e22:	4618      	mov	r0, r3
 8042e24:	f001 fffc 	bl	8044e20 <BoardCriticalSectionEnd>
}
 8042e28:	3718      	adds	r7, #24
 8042e2a:	46bd      	mov	sp, r7
 8042e2c:	bd80      	pop	{r7, pc}
 8042e2e:	bf00      	nop
 8042e30:	200183a4 	.word	0x200183a4

08042e34 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8042e34:	b480      	push	{r7}
 8042e36:	b085      	sub	sp, #20
 8042e38:	af00      	add	r7, sp, #0
 8042e3a:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8042e3c:	4b0b      	ldr	r3, [pc, #44]	; (8042e6c <TimerExists+0x38>)
 8042e3e:	681b      	ldr	r3, [r3, #0]
 8042e40:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 8042e42:	e008      	b.n	8042e56 <TimerExists+0x22>
    {
        if( cur == obj )
 8042e44:	68fa      	ldr	r2, [r7, #12]
 8042e46:	687b      	ldr	r3, [r7, #4]
 8042e48:	429a      	cmp	r2, r3
 8042e4a:	d101      	bne.n	8042e50 <TimerExists+0x1c>
        {
            return true;
 8042e4c:	2301      	movs	r3, #1
 8042e4e:	e006      	b.n	8042e5e <TimerExists+0x2a>
        }
        cur = cur->Next;
 8042e50:	68fb      	ldr	r3, [r7, #12]
 8042e52:	695b      	ldr	r3, [r3, #20]
 8042e54:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 8042e56:	68fb      	ldr	r3, [r7, #12]
 8042e58:	2b00      	cmp	r3, #0
 8042e5a:	d1f3      	bne.n	8042e44 <TimerExists+0x10>
    }
    return false;
 8042e5c:	2300      	movs	r3, #0
}
 8042e5e:	4618      	mov	r0, r3
 8042e60:	3714      	adds	r7, #20
 8042e62:	46bd      	mov	sp, r7
 8042e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e68:	4770      	bx	lr
 8042e6a:	bf00      	nop
 8042e6c:	200183a4 	.word	0x200183a4

08042e70 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8042e70:	b580      	push	{r7, lr}
 8042e72:	b084      	sub	sp, #16
 8042e74:	af00      	add	r7, sp, #0
 8042e76:	6078      	str	r0, [r7, #4]
 8042e78:	6039      	str	r1, [r7, #0]
    uint32_t minValue = 0;
 8042e7a:	2300      	movs	r3, #0
 8042e7c:	60bb      	str	r3, [r7, #8]
    uint32_t ticks = RtcMs2Tick( value );
 8042e7e:	6838      	ldr	r0, [r7, #0]
 8042e80:	f7fe fd76 	bl	8041970 <RtcMs2Tick>
 8042e84:	60f8      	str	r0, [r7, #12]

    TimerStop( obj );
 8042e86:	6878      	ldr	r0, [r7, #4]
 8042e88:	f7ff ff5a 	bl	8042d40 <TimerStop>

    minValue = RtcGetMinimumTimeout( );
 8042e8c:	f7fe fd68 	bl	8041960 <RtcGetMinimumTimeout>
 8042e90:	60b8      	str	r0, [r7, #8]

    if( ticks < minValue )
 8042e92:	68fa      	ldr	r2, [r7, #12]
 8042e94:	68bb      	ldr	r3, [r7, #8]
 8042e96:	429a      	cmp	r2, r3
 8042e98:	d201      	bcs.n	8042e9e <TimerSetValue+0x2e>
    {
        ticks = minValue;
 8042e9a:	68bb      	ldr	r3, [r7, #8]
 8042e9c:	60fb      	str	r3, [r7, #12]
    }

    obj->Timestamp = ticks;
 8042e9e:	687b      	ldr	r3, [r7, #4]
 8042ea0:	68fa      	ldr	r2, [r7, #12]
 8042ea2:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = ticks;
 8042ea4:	687b      	ldr	r3, [r7, #4]
 8042ea6:	68fa      	ldr	r2, [r7, #12]
 8042ea8:	605a      	str	r2, [r3, #4]
}
 8042eaa:	bf00      	nop
 8042eac:	3710      	adds	r7, #16
 8042eae:	46bd      	mov	sp, r7
 8042eb0:	bd80      	pop	{r7, pc}

08042eb2 <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 8042eb2:	b580      	push	{r7, lr}
 8042eb4:	b082      	sub	sp, #8
 8042eb6:	af00      	add	r7, sp, #0
    uint32_t now = RtcGetTimerValue( );
 8042eb8:	f7fe fed2 	bl	8041c60 <RtcGetTimerValue>
 8042ebc:	6078      	str	r0, [r7, #4]
    return  RtcTick2Ms( now );
 8042ebe:	6878      	ldr	r0, [r7, #4]
 8042ec0:	f7fe fd73 	bl	80419aa <RtcTick2Ms>
 8042ec4:	4603      	mov	r3, r0
}
 8042ec6:	4618      	mov	r0, r3
 8042ec8:	3708      	adds	r7, #8
 8042eca:	46bd      	mov	sp, r7
 8042ecc:	bd80      	pop	{r7, pc}

08042ece <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 8042ece:	b580      	push	{r7, lr}
 8042ed0:	b084      	sub	sp, #16
 8042ed2:	af00      	add	r7, sp, #0
 8042ed4:	6078      	str	r0, [r7, #4]
    if ( past == 0 )
 8042ed6:	687b      	ldr	r3, [r7, #4]
 8042ed8:	2b00      	cmp	r3, #0
 8042eda:	d101      	bne.n	8042ee0 <TimerGetElapsedTime+0x12>
    {
        return 0;
 8042edc:	2300      	movs	r3, #0
 8042ede:	e00d      	b.n	8042efc <TimerGetElapsedTime+0x2e>
    }
    uint32_t nowInTicks = RtcGetTimerValue( );
 8042ee0:	f7fe febe 	bl	8041c60 <RtcGetTimerValue>
 8042ee4:	60f8      	str	r0, [r7, #12]
    uint32_t pastInTicks = RtcMs2Tick( past );
 8042ee6:	6878      	ldr	r0, [r7, #4]
 8042ee8:	f7fe fd42 	bl	8041970 <RtcMs2Tick>
 8042eec:	60b8      	str	r0, [r7, #8]

    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8042eee:	68fa      	ldr	r2, [r7, #12]
 8042ef0:	68bb      	ldr	r3, [r7, #8]
 8042ef2:	1ad3      	subs	r3, r2, r3
 8042ef4:	4618      	mov	r0, r3
 8042ef6:	f7fe fd58 	bl	80419aa <RtcTick2Ms>
 8042efa:	4603      	mov	r3, r0
}
 8042efc:	4618      	mov	r0, r3
 8042efe:	3710      	adds	r7, #16
 8042f00:	46bd      	mov	sp, r7
 8042f02:	bd80      	pop	{r7, pc}

08042f04 <TimerSetTimeout>:

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8042f04:	b590      	push	{r4, r7, lr}
 8042f06:	b085      	sub	sp, #20
 8042f08:	af00      	add	r7, sp, #0
 8042f0a:	6078      	str	r0, [r7, #4]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8042f0c:	f7fe fd28 	bl	8041960 <RtcGetMinimumTimeout>
 8042f10:	4603      	mov	r3, r0
 8042f12:	60fb      	str	r3, [r7, #12]
    obj->IsNext2Expire = true;
 8042f14:	687b      	ldr	r3, [r7, #4]
 8042f16:	2201      	movs	r2, #1
 8042f18:	725a      	strb	r2, [r3, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8042f1a:	687b      	ldr	r3, [r7, #4]
 8042f1c:	681c      	ldr	r4, [r3, #0]
 8042f1e:	f7fe feb3 	bl	8041c88 <RtcGetTimerElapsedTime>
 8042f22:	4602      	mov	r2, r0
 8042f24:	68fb      	ldr	r3, [r7, #12]
 8042f26:	4413      	add	r3, r2
 8042f28:	429c      	cmp	r4, r3
 8042f2a:	d206      	bcs.n	8042f3a <TimerSetTimeout+0x36>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8042f2c:	f7fe feac 	bl	8041c88 <RtcGetTimerElapsedTime>
 8042f30:	4602      	mov	r2, r0
 8042f32:	68fb      	ldr	r3, [r7, #12]
 8042f34:	441a      	add	r2, r3
 8042f36:	687b      	ldr	r3, [r7, #4]
 8042f38:	601a      	str	r2, [r3, #0]
    }
    RtcSetAlarm( obj->Timestamp );
 8042f3a:	687b      	ldr	r3, [r7, #4]
 8042f3c:	681b      	ldr	r3, [r3, #0]
 8042f3e:	4618      	mov	r0, r3
 8042f40:	f7fe fd50 	bl	80419e4 <RtcSetAlarm>
}
 8042f44:	bf00      	nop
 8042f46:	3714      	adds	r7, #20
 8042f48:	46bd      	mov	sp, r7
 8042f4a:	bd90      	pop	{r4, r7, pc}

08042f4c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8042f4c:	b580      	push	{r7, lr}
 8042f4e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8042f50:	4b22      	ldr	r3, [pc, #136]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042f52:	4a23      	ldr	r2, [pc, #140]	; (8042fe0 <MX_LPUART1_UART_Init+0x94>)
 8042f54:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8042f56:	4b21      	ldr	r3, [pc, #132]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042f58:	4a22      	ldr	r2, [pc, #136]	; (8042fe4 <MX_LPUART1_UART_Init+0x98>)
 8042f5a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8042f5c:	4b1f      	ldr	r3, [pc, #124]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042f5e:	2200      	movs	r2, #0
 8042f60:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8042f62:	4b1e      	ldr	r3, [pc, #120]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042f64:	2200      	movs	r2, #0
 8042f66:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8042f68:	4b1c      	ldr	r3, [pc, #112]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042f6a:	2200      	movs	r2, #0
 8042f6c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8042f6e:	4b1b      	ldr	r3, [pc, #108]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042f70:	220c      	movs	r2, #12
 8042f72:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8042f74:	4b19      	ldr	r3, [pc, #100]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042f76:	2200      	movs	r2, #0
 8042f78:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8042f7a:	4b18      	ldr	r3, [pc, #96]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042f7c:	2200      	movs	r2, #0
 8042f7e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8042f80:	4b16      	ldr	r3, [pc, #88]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042f82:	2200      	movs	r2, #0
 8042f84:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8042f86:	4b15      	ldr	r3, [pc, #84]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042f88:	2200      	movs	r2, #0
 8042f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8042f8c:	4b13      	ldr	r3, [pc, #76]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042f8e:	2200      	movs	r2, #0
 8042f90:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8042f92:	4812      	ldr	r0, [pc, #72]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042f94:	f00a fe14 	bl	804dbc0 <HAL_UART_Init>
 8042f98:	4603      	mov	r3, r0
 8042f9a:	2b00      	cmp	r3, #0
 8042f9c:	d001      	beq.n	8042fa2 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 8042f9e:	f7fe fb77 	bl	8041690 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8042fa2:	2100      	movs	r1, #0
 8042fa4:	480d      	ldr	r0, [pc, #52]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042fa6:	f00b fe3f 	bl	804ec28 <HAL_UARTEx_SetTxFifoThreshold>
 8042faa:	4603      	mov	r3, r0
 8042fac:	2b00      	cmp	r3, #0
 8042fae:	d001      	beq.n	8042fb4 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 8042fb0:	f7fe fb6e 	bl	8041690 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8042fb4:	2100      	movs	r1, #0
 8042fb6:	4809      	ldr	r0, [pc, #36]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042fb8:	f00b fe74 	bl	804eca4 <HAL_UARTEx_SetRxFifoThreshold>
 8042fbc:	4603      	mov	r3, r0
 8042fbe:	2b00      	cmp	r3, #0
 8042fc0:	d001      	beq.n	8042fc6 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 8042fc2:	f7fe fb65 	bl	8041690 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8042fc6:	4805      	ldr	r0, [pc, #20]	; (8042fdc <MX_LPUART1_UART_Init+0x90>)
 8042fc8:	f00b fdf5 	bl	804ebb6 <HAL_UARTEx_DisableFifoMode>
 8042fcc:	4603      	mov	r3, r0
 8042fce:	2b00      	cmp	r3, #0
 8042fd0:	d001      	beq.n	8042fd6 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 8042fd2:	f7fe fb5d 	bl	8041690 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8042fd6:	bf00      	nop
 8042fd8:	bd80      	pop	{r7, pc}
 8042fda:	bf00      	nop
 8042fdc:	200194e8 	.word	0x200194e8
 8042fe0:	40008000 	.word	0x40008000
 8042fe4:	00033324 	.word	0x00033324

08042fe8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8042fe8:	b580      	push	{r7, lr}
 8042fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8042fec:	4b22      	ldr	r3, [pc, #136]	; (8043078 <MX_USART3_UART_Init+0x90>)
 8042fee:	4a23      	ldr	r2, [pc, #140]	; (804307c <MX_USART3_UART_Init+0x94>)
 8042ff0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8042ff2:	4b21      	ldr	r3, [pc, #132]	; (8043078 <MX_USART3_UART_Init+0x90>)
 8042ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8042ff8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8042ffa:	4b1f      	ldr	r3, [pc, #124]	; (8043078 <MX_USART3_UART_Init+0x90>)
 8042ffc:	2200      	movs	r2, #0
 8042ffe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8043000:	4b1d      	ldr	r3, [pc, #116]	; (8043078 <MX_USART3_UART_Init+0x90>)
 8043002:	2200      	movs	r2, #0
 8043004:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8043006:	4b1c      	ldr	r3, [pc, #112]	; (8043078 <MX_USART3_UART_Init+0x90>)
 8043008:	2200      	movs	r2, #0
 804300a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 804300c:	4b1a      	ldr	r3, [pc, #104]	; (8043078 <MX_USART3_UART_Init+0x90>)
 804300e:	220c      	movs	r2, #12
 8043010:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8043012:	4b19      	ldr	r3, [pc, #100]	; (8043078 <MX_USART3_UART_Init+0x90>)
 8043014:	2200      	movs	r2, #0
 8043016:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8043018:	4b17      	ldr	r3, [pc, #92]	; (8043078 <MX_USART3_UART_Init+0x90>)
 804301a:	2200      	movs	r2, #0
 804301c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 804301e:	4b16      	ldr	r3, [pc, #88]	; (8043078 <MX_USART3_UART_Init+0x90>)
 8043020:	2200      	movs	r2, #0
 8043022:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8043024:	4b14      	ldr	r3, [pc, #80]	; (8043078 <MX_USART3_UART_Init+0x90>)
 8043026:	2200      	movs	r2, #0
 8043028:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 804302a:	4b13      	ldr	r3, [pc, #76]	; (8043078 <MX_USART3_UART_Init+0x90>)
 804302c:	2200      	movs	r2, #0
 804302e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8043030:	4811      	ldr	r0, [pc, #68]	; (8043078 <MX_USART3_UART_Init+0x90>)
 8043032:	f00a fdc5 	bl	804dbc0 <HAL_UART_Init>
 8043036:	4603      	mov	r3, r0
 8043038:	2b00      	cmp	r3, #0
 804303a:	d001      	beq.n	8043040 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 804303c:	f7fe fb28 	bl	8041690 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8043040:	2100      	movs	r1, #0
 8043042:	480d      	ldr	r0, [pc, #52]	; (8043078 <MX_USART3_UART_Init+0x90>)
 8043044:	f00b fdf0 	bl	804ec28 <HAL_UARTEx_SetTxFifoThreshold>
 8043048:	4603      	mov	r3, r0
 804304a:	2b00      	cmp	r3, #0
 804304c:	d001      	beq.n	8043052 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 804304e:	f7fe fb1f 	bl	8041690 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8043052:	2100      	movs	r1, #0
 8043054:	4808      	ldr	r0, [pc, #32]	; (8043078 <MX_USART3_UART_Init+0x90>)
 8043056:	f00b fe25 	bl	804eca4 <HAL_UARTEx_SetRxFifoThreshold>
 804305a:	4603      	mov	r3, r0
 804305c:	2b00      	cmp	r3, #0
 804305e:	d001      	beq.n	8043064 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8043060:	f7fe fb16 	bl	8041690 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8043064:	4804      	ldr	r0, [pc, #16]	; (8043078 <MX_USART3_UART_Init+0x90>)
 8043066:	f00b fda6 	bl	804ebb6 <HAL_UARTEx_DisableFifoMode>
 804306a:	4603      	mov	r3, r0
 804306c:	2b00      	cmp	r3, #0
 804306e:	d001      	beq.n	8043074 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8043070:	f7fe fb0e 	bl	8041690 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8043074:	bf00      	nop
 8043076:	bd80      	pop	{r7, pc}
 8043078:	200193f0 	.word	0x200193f0
 804307c:	40004800 	.word	0x40004800

08043080 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8043080:	b580      	push	{r7, lr}
 8043082:	b0b0      	sub	sp, #192	; 0xc0
 8043084:	af00      	add	r7, sp, #0
 8043086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8043088:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 804308c:	2200      	movs	r2, #0
 804308e:	601a      	str	r2, [r3, #0]
 8043090:	605a      	str	r2, [r3, #4]
 8043092:	609a      	str	r2, [r3, #8]
 8043094:	60da      	str	r2, [r3, #12]
 8043096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8043098:	f107 0318 	add.w	r3, r7, #24
 804309c:	2294      	movs	r2, #148	; 0x94
 804309e:	2100      	movs	r1, #0
 80430a0:	4618      	mov	r0, r3
 80430a2:	f00b fedc 	bl	804ee5e <memset>
  if(uartHandle->Instance==LPUART1)
 80430a6:	687b      	ldr	r3, [r7, #4]
 80430a8:	681b      	ldr	r3, [r3, #0]
 80430aa:	4a56      	ldr	r2, [pc, #344]	; (8043204 <HAL_UART_MspInit+0x184>)
 80430ac:	4293      	cmp	r3, r2
 80430ae:	f040 80b7 	bne.w	8043220 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80430b2:	2320      	movs	r3, #32
 80430b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80430b6:	2300      	movs	r3, #0
 80430b8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80430ba:	f107 0318 	add.w	r3, r7, #24
 80430be:	4618      	mov	r0, r3
 80430c0:	f007 fdea 	bl	804ac98 <HAL_RCCEx_PeriphCLKConfig>
 80430c4:	4603      	mov	r3, r0
 80430c6:	2b00      	cmp	r3, #0
 80430c8:	d001      	beq.n	80430ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80430ca:	f7fe fae1 	bl	8041690 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80430ce:	4b4e      	ldr	r3, [pc, #312]	; (8043208 <HAL_UART_MspInit+0x188>)
 80430d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80430d2:	4a4d      	ldr	r2, [pc, #308]	; (8043208 <HAL_UART_MspInit+0x188>)
 80430d4:	f043 0301 	orr.w	r3, r3, #1
 80430d8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80430da:	4b4b      	ldr	r3, [pc, #300]	; (8043208 <HAL_UART_MspInit+0x188>)
 80430dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80430de:	f003 0301 	and.w	r3, r3, #1
 80430e2:	617b      	str	r3, [r7, #20]
 80430e4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80430e6:	4b48      	ldr	r3, [pc, #288]	; (8043208 <HAL_UART_MspInit+0x188>)
 80430e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80430ea:	4a47      	ldr	r2, [pc, #284]	; (8043208 <HAL_UART_MspInit+0x188>)
 80430ec:	f043 0302 	orr.w	r3, r3, #2
 80430f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80430f2:	4b45      	ldr	r3, [pc, #276]	; (8043208 <HAL_UART_MspInit+0x188>)
 80430f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80430f6:	f003 0302 	and.w	r3, r3, #2
 80430fa:	613b      	str	r3, [r7, #16]
 80430fc:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = DBG_RX_Pin|DBG_TX_Pin;
 80430fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8043102:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8043106:	2302      	movs	r3, #2
 8043108:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804310c:	2300      	movs	r3, #0
 804310e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8043112:	2300      	movs	r3, #0
 8043114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8043118:	2308      	movs	r3, #8
 804311a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 804311e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8043122:	4619      	mov	r1, r3
 8043124:	4839      	ldr	r0, [pc, #228]	; (804320c <HAL_UART_MspInit+0x18c>)
 8043126:	f005 fdaf 	bl	8048c88 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel5;
 804312a:	4b39      	ldr	r3, [pc, #228]	; (8043210 <HAL_UART_MspInit+0x190>)
 804312c:	4a39      	ldr	r2, [pc, #228]	; (8043214 <HAL_UART_MspInit+0x194>)
 804312e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8043130:	4b37      	ldr	r3, [pc, #220]	; (8043210 <HAL_UART_MspInit+0x190>)
 8043132:	2223      	movs	r2, #35	; 0x23
 8043134:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8043136:	4b36      	ldr	r3, [pc, #216]	; (8043210 <HAL_UART_MspInit+0x190>)
 8043138:	2200      	movs	r2, #0
 804313a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 804313c:	4b34      	ldr	r3, [pc, #208]	; (8043210 <HAL_UART_MspInit+0x190>)
 804313e:	2200      	movs	r2, #0
 8043140:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8043142:	4b33      	ldr	r3, [pc, #204]	; (8043210 <HAL_UART_MspInit+0x190>)
 8043144:	2280      	movs	r2, #128	; 0x80
 8043146:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8043148:	4b31      	ldr	r3, [pc, #196]	; (8043210 <HAL_UART_MspInit+0x190>)
 804314a:	2200      	movs	r2, #0
 804314c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 804314e:	4b30      	ldr	r3, [pc, #192]	; (8043210 <HAL_UART_MspInit+0x190>)
 8043150:	2200      	movs	r2, #0
 8043152:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8043154:	4b2e      	ldr	r3, [pc, #184]	; (8043210 <HAL_UART_MspInit+0x190>)
 8043156:	2200      	movs	r2, #0
 8043158:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 804315a:	4b2d      	ldr	r3, [pc, #180]	; (8043210 <HAL_UART_MspInit+0x190>)
 804315c:	2200      	movs	r2, #0
 804315e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8043160:	482b      	ldr	r0, [pc, #172]	; (8043210 <HAL_UART_MspInit+0x190>)
 8043162:	f005 fa8d 	bl	8048680 <HAL_DMA_Init>
 8043166:	4603      	mov	r3, r0
 8043168:	2b00      	cmp	r3, #0
 804316a:	d001      	beq.n	8043170 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 804316c:	f7fe fa90 	bl	8041690 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8043170:	2110      	movs	r1, #16
 8043172:	4827      	ldr	r0, [pc, #156]	; (8043210 <HAL_UART_MspInit+0x190>)
 8043174:	f005 fcf5 	bl	8048b62 <HAL_DMA_ConfigChannelAttributes>
 8043178:	4603      	mov	r3, r0
 804317a:	2b00      	cmp	r3, #0
 804317c:	d001      	beq.n	8043182 <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 804317e:	f7fe fa87 	bl	8041690 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8043182:	687b      	ldr	r3, [r7, #4]
 8043184:	4a22      	ldr	r2, [pc, #136]	; (8043210 <HAL_UART_MspInit+0x190>)
 8043186:	67da      	str	r2, [r3, #124]	; 0x7c
 8043188:	4a21      	ldr	r2, [pc, #132]	; (8043210 <HAL_UART_MspInit+0x190>)
 804318a:	687b      	ldr	r3, [r7, #4]
 804318c:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel6;
 804318e:	4b22      	ldr	r3, [pc, #136]	; (8043218 <HAL_UART_MspInit+0x198>)
 8043190:	4a22      	ldr	r2, [pc, #136]	; (804321c <HAL_UART_MspInit+0x19c>)
 8043192:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8043194:	4b20      	ldr	r3, [pc, #128]	; (8043218 <HAL_UART_MspInit+0x198>)
 8043196:	2224      	movs	r2, #36	; 0x24
 8043198:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 804319a:	4b1f      	ldr	r3, [pc, #124]	; (8043218 <HAL_UART_MspInit+0x198>)
 804319c:	2210      	movs	r2, #16
 804319e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80431a0:	4b1d      	ldr	r3, [pc, #116]	; (8043218 <HAL_UART_MspInit+0x198>)
 80431a2:	2200      	movs	r2, #0
 80431a4:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80431a6:	4b1c      	ldr	r3, [pc, #112]	; (8043218 <HAL_UART_MspInit+0x198>)
 80431a8:	2280      	movs	r2, #128	; 0x80
 80431aa:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80431ac:	4b1a      	ldr	r3, [pc, #104]	; (8043218 <HAL_UART_MspInit+0x198>)
 80431ae:	2200      	movs	r2, #0
 80431b0:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80431b2:	4b19      	ldr	r3, [pc, #100]	; (8043218 <HAL_UART_MspInit+0x198>)
 80431b4:	2200      	movs	r2, #0
 80431b6:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80431b8:	4b17      	ldr	r3, [pc, #92]	; (8043218 <HAL_UART_MspInit+0x198>)
 80431ba:	2200      	movs	r2, #0
 80431bc:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80431be:	4b16      	ldr	r3, [pc, #88]	; (8043218 <HAL_UART_MspInit+0x198>)
 80431c0:	2200      	movs	r2, #0
 80431c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80431c4:	4814      	ldr	r0, [pc, #80]	; (8043218 <HAL_UART_MspInit+0x198>)
 80431c6:	f005 fa5b 	bl	8048680 <HAL_DMA_Init>
 80431ca:	4603      	mov	r3, r0
 80431cc:	2b00      	cmp	r3, #0
 80431ce:	d001      	beq.n	80431d4 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 80431d0:	f7fe fa5e 	bl	8041690 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80431d4:	2110      	movs	r1, #16
 80431d6:	4810      	ldr	r0, [pc, #64]	; (8043218 <HAL_UART_MspInit+0x198>)
 80431d8:	f005 fcc3 	bl	8048b62 <HAL_DMA_ConfigChannelAttributes>
 80431dc:	4603      	mov	r3, r0
 80431de:	2b00      	cmp	r3, #0
 80431e0:	d001      	beq.n	80431e6 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 80431e2:	f7fe fa55 	bl	8041690 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80431e6:	687b      	ldr	r3, [r7, #4]
 80431e8:	4a0b      	ldr	r2, [pc, #44]	; (8043218 <HAL_UART_MspInit+0x198>)
 80431ea:	679a      	str	r2, [r3, #120]	; 0x78
 80431ec:	4a0a      	ldr	r2, [pc, #40]	; (8043218 <HAL_UART_MspInit+0x198>)
 80431ee:	687b      	ldr	r3, [r7, #4]
 80431f0:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80431f2:	2200      	movs	r2, #0
 80431f4:	2100      	movs	r1, #0
 80431f6:	2042      	movs	r0, #66	; 0x42
 80431f8:	f005 fa0c 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80431fc:	2042      	movs	r0, #66	; 0x42
 80431fe:	f005 fa23 	bl	8048648 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8043202:	e0ba      	b.n	804337a <HAL_UART_MspInit+0x2fa>
 8043204:	40008000 	.word	0x40008000
 8043208:	40021000 	.word	0x40021000
 804320c:	42020400 	.word	0x42020400
 8043210:	200195e0 	.word	0x200195e0
 8043214:	40020058 	.word	0x40020058
 8043218:	20019578 	.word	0x20019578
 804321c:	4002006c 	.word	0x4002006c
  else if(uartHandle->Instance==USART3)
 8043220:	687b      	ldr	r3, [r7, #4]
 8043222:	681b      	ldr	r3, [r3, #0]
 8043224:	4a57      	ldr	r2, [pc, #348]	; (8043384 <HAL_UART_MspInit+0x304>)
 8043226:	4293      	cmp	r3, r2
 8043228:	f040 80a7 	bne.w	804337a <HAL_UART_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 804322c:	2304      	movs	r3, #4
 804322e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8043230:	2300      	movs	r3, #0
 8043232:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8043234:	f107 0318 	add.w	r3, r7, #24
 8043238:	4618      	mov	r0, r3
 804323a:	f007 fd2d 	bl	804ac98 <HAL_RCCEx_PeriphCLKConfig>
 804323e:	4603      	mov	r3, r0
 8043240:	2b00      	cmp	r3, #0
 8043242:	d001      	beq.n	8043248 <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8043244:	f7fe fa24 	bl	8041690 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8043248:	4b4f      	ldr	r3, [pc, #316]	; (8043388 <HAL_UART_MspInit+0x308>)
 804324a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804324c:	4a4e      	ldr	r2, [pc, #312]	; (8043388 <HAL_UART_MspInit+0x308>)
 804324e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8043252:	6593      	str	r3, [r2, #88]	; 0x58
 8043254:	4b4c      	ldr	r3, [pc, #304]	; (8043388 <HAL_UART_MspInit+0x308>)
 8043256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 804325c:	60fb      	str	r3, [r7, #12]
 804325e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8043260:	4b49      	ldr	r3, [pc, #292]	; (8043388 <HAL_UART_MspInit+0x308>)
 8043262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8043264:	4a48      	ldr	r2, [pc, #288]	; (8043388 <HAL_UART_MspInit+0x308>)
 8043266:	f043 0304 	orr.w	r3, r3, #4
 804326a:	64d3      	str	r3, [r2, #76]	; 0x4c
 804326c:	4b46      	ldr	r3, [pc, #280]	; (8043388 <HAL_UART_MspInit+0x308>)
 804326e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8043270:	f003 0304 	and.w	r3, r3, #4
 8043274:	60bb      	str	r3, [r7, #8]
 8043276:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EXT_TX_Pin|EXT_RX_Pin;
 8043278:	2330      	movs	r3, #48	; 0x30
 804327a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804327e:	2302      	movs	r3, #2
 8043280:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8043284:	2300      	movs	r3, #0
 8043286:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804328a:	2300      	movs	r3, #0
 804328c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8043290:	2307      	movs	r3, #7
 8043292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8043296:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 804329a:	4619      	mov	r1, r3
 804329c:	483b      	ldr	r0, [pc, #236]	; (804338c <HAL_UART_MspInit+0x30c>)
 804329e:	f005 fcf3 	bl	8048c88 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Channel2;
 80432a2:	4b3b      	ldr	r3, [pc, #236]	; (8043390 <HAL_UART_MspInit+0x310>)
 80432a4:	4a3b      	ldr	r2, [pc, #236]	; (8043394 <HAL_UART_MspInit+0x314>)
 80432a6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80432a8:	4b39      	ldr	r3, [pc, #228]	; (8043390 <HAL_UART_MspInit+0x310>)
 80432aa:	221d      	movs	r2, #29
 80432ac:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80432ae:	4b38      	ldr	r3, [pc, #224]	; (8043390 <HAL_UART_MspInit+0x310>)
 80432b0:	2200      	movs	r2, #0
 80432b2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80432b4:	4b36      	ldr	r3, [pc, #216]	; (8043390 <HAL_UART_MspInit+0x310>)
 80432b6:	2200      	movs	r2, #0
 80432b8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80432ba:	4b35      	ldr	r3, [pc, #212]	; (8043390 <HAL_UART_MspInit+0x310>)
 80432bc:	2280      	movs	r2, #128	; 0x80
 80432be:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80432c0:	4b33      	ldr	r3, [pc, #204]	; (8043390 <HAL_UART_MspInit+0x310>)
 80432c2:	2200      	movs	r2, #0
 80432c4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80432c6:	4b32      	ldr	r3, [pc, #200]	; (8043390 <HAL_UART_MspInit+0x310>)
 80432c8:	2200      	movs	r2, #0
 80432ca:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80432cc:	4b30      	ldr	r3, [pc, #192]	; (8043390 <HAL_UART_MspInit+0x310>)
 80432ce:	2200      	movs	r2, #0
 80432d0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80432d2:	4b2f      	ldr	r3, [pc, #188]	; (8043390 <HAL_UART_MspInit+0x310>)
 80432d4:	2200      	movs	r2, #0
 80432d6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80432d8:	482d      	ldr	r0, [pc, #180]	; (8043390 <HAL_UART_MspInit+0x310>)
 80432da:	f005 f9d1 	bl	8048680 <HAL_DMA_Init>
 80432de:	4603      	mov	r3, r0
 80432e0:	2b00      	cmp	r3, #0
 80432e2:	d001      	beq.n	80432e8 <HAL_UART_MspInit+0x268>
      Error_Handler();
 80432e4:	f7fe f9d4 	bl	8041690 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80432e8:	2110      	movs	r1, #16
 80432ea:	4829      	ldr	r0, [pc, #164]	; (8043390 <HAL_UART_MspInit+0x310>)
 80432ec:	f005 fc39 	bl	8048b62 <HAL_DMA_ConfigChannelAttributes>
 80432f0:	4603      	mov	r3, r0
 80432f2:	2b00      	cmp	r3, #0
 80432f4:	d001      	beq.n	80432fa <HAL_UART_MspInit+0x27a>
      Error_Handler();
 80432f6:	f7fe f9cb 	bl	8041690 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80432fa:	687b      	ldr	r3, [r7, #4]
 80432fc:	4a24      	ldr	r2, [pc, #144]	; (8043390 <HAL_UART_MspInit+0x310>)
 80432fe:	67da      	str	r2, [r3, #124]	; 0x7c
 8043300:	4a23      	ldr	r2, [pc, #140]	; (8043390 <HAL_UART_MspInit+0x310>)
 8043302:	687b      	ldr	r3, [r7, #4]
 8043304:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA2_Channel3;
 8043306:	4b24      	ldr	r3, [pc, #144]	; (8043398 <HAL_UART_MspInit+0x318>)
 8043308:	4a24      	ldr	r2, [pc, #144]	; (804339c <HAL_UART_MspInit+0x31c>)
 804330a:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 804330c:	4b22      	ldr	r3, [pc, #136]	; (8043398 <HAL_UART_MspInit+0x318>)
 804330e:	221e      	movs	r2, #30
 8043310:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8043312:	4b21      	ldr	r3, [pc, #132]	; (8043398 <HAL_UART_MspInit+0x318>)
 8043314:	2210      	movs	r2, #16
 8043316:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8043318:	4b1f      	ldr	r3, [pc, #124]	; (8043398 <HAL_UART_MspInit+0x318>)
 804331a:	2200      	movs	r2, #0
 804331c:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 804331e:	4b1e      	ldr	r3, [pc, #120]	; (8043398 <HAL_UART_MspInit+0x318>)
 8043320:	2280      	movs	r2, #128	; 0x80
 8043322:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8043324:	4b1c      	ldr	r3, [pc, #112]	; (8043398 <HAL_UART_MspInit+0x318>)
 8043326:	2200      	movs	r2, #0
 8043328:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 804332a:	4b1b      	ldr	r3, [pc, #108]	; (8043398 <HAL_UART_MspInit+0x318>)
 804332c:	2200      	movs	r2, #0
 804332e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8043330:	4b19      	ldr	r3, [pc, #100]	; (8043398 <HAL_UART_MspInit+0x318>)
 8043332:	2200      	movs	r2, #0
 8043334:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8043336:	4b18      	ldr	r3, [pc, #96]	; (8043398 <HAL_UART_MspInit+0x318>)
 8043338:	2200      	movs	r2, #0
 804333a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 804333c:	4816      	ldr	r0, [pc, #88]	; (8043398 <HAL_UART_MspInit+0x318>)
 804333e:	f005 f99f 	bl	8048680 <HAL_DMA_Init>
 8043342:	4603      	mov	r3, r0
 8043344:	2b00      	cmp	r3, #0
 8043346:	d001      	beq.n	804334c <HAL_UART_MspInit+0x2cc>
      Error_Handler();
 8043348:	f7fe f9a2 	bl	8041690 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart3_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 804334c:	2110      	movs	r1, #16
 804334e:	4812      	ldr	r0, [pc, #72]	; (8043398 <HAL_UART_MspInit+0x318>)
 8043350:	f005 fc07 	bl	8048b62 <HAL_DMA_ConfigChannelAttributes>
 8043354:	4603      	mov	r3, r0
 8043356:	2b00      	cmp	r3, #0
 8043358:	d001      	beq.n	804335e <HAL_UART_MspInit+0x2de>
      Error_Handler();
 804335a:	f7fe f999 	bl	8041690 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 804335e:	687b      	ldr	r3, [r7, #4]
 8043360:	4a0d      	ldr	r2, [pc, #52]	; (8043398 <HAL_UART_MspInit+0x318>)
 8043362:	679a      	str	r2, [r3, #120]	; 0x78
 8043364:	4a0c      	ldr	r2, [pc, #48]	; (8043398 <HAL_UART_MspInit+0x318>)
 8043366:	687b      	ldr	r3, [r7, #4]
 8043368:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 804336a:	2200      	movs	r2, #0
 804336c:	2100      	movs	r1, #0
 804336e:	203f      	movs	r0, #63	; 0x3f
 8043370:	f005 f950 	bl	8048614 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8043374:	203f      	movs	r0, #63	; 0x3f
 8043376:	f005 f967 	bl	8048648 <HAL_NVIC_EnableIRQ>
}
 804337a:	bf00      	nop
 804337c:	37c0      	adds	r7, #192	; 0xc0
 804337e:	46bd      	mov	sp, r7
 8043380:	bd80      	pop	{r7, pc}
 8043382:	bf00      	nop
 8043384:	40004800 	.word	0x40004800
 8043388:	40021000 	.word	0x40021000
 804338c:	42020800 	.word	0x42020800
 8043390:	20019388 	.word	0x20019388
 8043394:	4002041c 	.word	0x4002041c
 8043398:	20019480 	.word	0x20019480
 804339c:	40020430 	.word	0x40020430

080433a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80433a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80433d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80433a4:	f7ff faba 	bl	804291c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80433a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80433aa:	e003      	b.n	80433b4 <LoopCopyDataInit>

080433ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80433ac:	4b0b      	ldr	r3, [pc, #44]	; (80433dc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80433ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80433b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80433b2:	3104      	adds	r1, #4

080433b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80433b4:	480a      	ldr	r0, [pc, #40]	; (80433e0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80433b6:	4b0b      	ldr	r3, [pc, #44]	; (80433e4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80433b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80433ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80433bc:	d3f6      	bcc.n	80433ac <CopyDataInit>
	ldr	r2, =_sbss
 80433be:	4a0a      	ldr	r2, [pc, #40]	; (80433e8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80433c0:	e002      	b.n	80433c8 <LoopFillZerobss>

080433c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80433c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80433c4:	f842 3b04 	str.w	r3, [r2], #4

080433c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80433c8:	4b08      	ldr	r3, [pc, #32]	; (80433ec <LoopForever+0x16>)
	cmp	r2, r3
 80433ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80433cc:	d3f9      	bcc.n	80433c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80433ce:	f00b fd15 	bl	804edfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80433d2:	f7fe f80f 	bl	80413f4 <main>

080433d6 <LoopForever>:

LoopForever:
    b LoopForever
 80433d6:	e7fe      	b.n	80433d6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80433d8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80433dc:	08050220 	.word	0x08050220
	ldr	r0, =_sdata
 80433e0:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 80433e4:	200180c4 	.word	0x200180c4
	ldr	r2, =_sbss
 80433e8:	200180c4 	.word	0x200180c4
	ldr	r3, = _ebss
 80433ec:	20019978 	.word	0x20019978

080433f0 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80433f0:	e7fe      	b.n	80433f0 <BusFault_Handler>
	...

080433f4 <ICG20330_Init>:
  * @param  ICG20330_InitStruct: pointer to a ICG20330_InitTypeDef structure
  *         that contains the configuration setting for the ICG20330.
  * @retval None
  */
void ICG20330_Init(void* InitStruct)
{  
 80433f4:	b580      	push	{r7, lr}
 80433f6:	b084      	sub	sp, #16
 80433f8:	af00      	add	r7, sp, #0
 80433fa:	6078      	str	r0, [r7, #4]
  GYRO_InitTypeDef *init = (GYRO_InitTypeDef *) InitStruct;
 80433fc:	687b      	ldr	r3, [r7, #4]
 80433fe:	60fb      	str	r3, [r7, #12]
  uint8_t ctrl = 0x00;
 8043400:	2300      	movs	r3, #0
 8043402:	72fb      	strb	r3, [r7, #11]
  /* Configure the low level interface */
  GYRO_IO_Init();
 8043404:	f002 fa2a 	bl	804585c <GYRO_IO_Init>
  
  switch (init->Power_Mode) {
 8043408:	68fb      	ldr	r3, [r7, #12]
 804340a:	781b      	ldrb	r3, [r3, #0]
 804340c:	2b03      	cmp	r3, #3
 804340e:	d817      	bhi.n	8043440 <ICG20330_Init+0x4c>
 8043410:	a201      	add	r2, pc, #4	; (adr r2, 8043418 <ICG20330_Init+0x24>)
 8043412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043416:	bf00      	nop
 8043418:	08043429 	.word	0x08043429
 804341c:	0804342f 	.word	0x0804342f
 8043420:	08043435 	.word	0x08043435
 8043424:	0804343b 	.word	0x0804343b
	case ICG20330_MODE_POWERDOWN:
		ctrl = 0xFF;
 8043428:	23ff      	movs	r3, #255	; 0xff
 804342a:	72fb      	strb	r3, [r7, #11]
		break;
 804342c:	e009      	b.n	8043442 <ICG20330_Init+0x4e>
	case ICG20330_MODE_STANDBY:
		ctrl = 0x10;
 804342e:	2310      	movs	r3, #16
 8043430:	72fb      	strb	r3, [r7, #11]
		break;
 8043432:	e006      	b.n	8043442 <ICG20330_Init+0x4e>
	case ICG20330_MODE_SLEEP:
		ctrl = 0x40;
 8043434:	2340      	movs	r3, #64	; 0x40
 8043436:	72fb      	strb	r3, [r7, #11]
		break;
 8043438:	e003      	b.n	8043442 <ICG20330_Init+0x4e>
	case ICG20330_MODE_ACTIVE:
		ctrl = 0x01;
 804343a:	2301      	movs	r3, #1
 804343c:	72fb      	strb	r3, [r7, #11]
		break;
 804343e:	e000      	b.n	8043442 <ICG20330_Init+0x4e>
	default:
		break;
 8043440:	bf00      	nop
  }
  GYRO_IO_Write(&ctrl, ICG20330_PWR_MGMT_1_ADDR, 1);
 8043442:	f107 030b 	add.w	r3, r7, #11
 8043446:	2201      	movs	r2, #1
 8043448:	216b      	movs	r1, #107	; 0x6b
 804344a:	4618      	mov	r0, r3
 804344c:	f002 fa24 	bl	8045898 <GYRO_IO_Write>
  
  ctrl &=~ (ICG20330_STBY_XG_DISABLE | ICG20330_STBY_YG_DISABLE | ICG20330_STBY_ZG_DISABLE);
 8043450:	7afb      	ldrb	r3, [r7, #11]
 8043452:	f023 0307 	bic.w	r3, r3, #7
 8043456:	b2db      	uxtb	r3, r3
 8043458:	72fb      	strb	r3, [r7, #11]
  GYRO_IO_Write(&ctrl, ICG20330_PWR_MGMT_2_ADDR, 1);
 804345a:	f107 030b 	add.w	r3, r7, #11
 804345e:	2201      	movs	r2, #1
 8043460:	216c      	movs	r1, #108	; 0x6c
 8043462:	4618      	mov	r0, r3
 8043464:	f002 fa18 	bl	8045898 <GYRO_IO_Write>
}
 8043468:	bf00      	nop
 804346a:	3710      	adds	r7, #16
 804346c:	46bd      	mov	sp, r7
 804346e:	bd80      	pop	{r7, pc}

08043470 <ICG20330_DeInit>:
  * @brief ICG20330 De-initialization
  * @param  None
  * @retval None
  */
void ICG20330_DeInit(void)
{
 8043470:	b480      	push	{r7}
 8043472:	af00      	add	r7, sp, #0
}
 8043474:	bf00      	nop
 8043476:	46bd      	mov	sp, r7
 8043478:	f85d 7b04 	ldr.w	r7, [sp], #4
 804347c:	4770      	bx	lr

0804347e <ICG20330_ReadID>:
  * @brief  Read ID address of ICG20330
  * @param  None
  * @retval ID name
  */
uint8_t ICG20330_ReadID(void)
{
 804347e:	b580      	push	{r7, lr}
 8043480:	b082      	sub	sp, #8
 8043482:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8043484:	f002 f9ea 	bl	804585c <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, ICG20330_WHO_AM_I_ADDR, 1);
 8043488:	1dfb      	adds	r3, r7, #7
 804348a:	2201      	movs	r2, #1
 804348c:	2175      	movs	r1, #117	; 0x75
 804348e:	4618      	mov	r0, r3
 8043490:	f002 fa17 	bl	80458c2 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8043494:	79fb      	ldrb	r3, [r7, #7]
}
 8043496:	4618      	mov	r0, r3
 8043498:	3708      	adds	r7, #8
 804349a:	46bd      	mov	sp, r7
 804349c:	bd80      	pop	{r7, pc}

0804349e <ICG20330_RebootCmd>:
  * @brief  Reboot memory content of ICG20330
  * @param  None
  * @retval None
  */
void ICG20330_RebootCmd(void)
{
 804349e:	b580      	push	{r7, lr}
 80434a0:	b082      	sub	sp, #8
 80434a2:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, ICG20330_PWR_MGMT_1_ADDR, 1);
 80434a4:	1dfb      	adds	r3, r7, #7
 80434a6:	2201      	movs	r2, #1
 80434a8:	216b      	movs	r1, #107	; 0x6b
 80434aa:	4618      	mov	r0, r3
 80434ac:	f002 fa09 	bl	80458c2 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= ICG20330_DEV_RESET;
 80434b0:	79fb      	ldrb	r3, [r7, #7]
 80434b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80434b6:	b2db      	uxtb	r3, r3
 80434b8:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, ICG20330_PWR_MGMT_1_ADDR, 1);
 80434ba:	1dfb      	adds	r3, r7, #7
 80434bc:	2201      	movs	r2, #1
 80434be:	216b      	movs	r1, #107	; 0x6b
 80434c0:	4618      	mov	r0, r3
 80434c2:	f002 f9e9 	bl	8045898 <GYRO_IO_Write>
}
 80434c6:	bf00      	nop
 80434c8:	3708      	adds	r7, #8
 80434ca:	46bd      	mov	sp, r7
 80434cc:	bd80      	pop	{r7, pc}

080434ce <ICG20330_LowPower>:
  * @brief Set ICG20330 in low-power mode
  * @param 
  * @retval  None
  */
void ICG20330_LowPower(uint16_t InitStruct)
{  
 80434ce:	b580      	push	{r7, lr}
 80434d0:	b084      	sub	sp, #16
 80434d2:	af00      	add	r7, sp, #0
 80434d4:	4603      	mov	r3, r0
 80434d6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80434d8:	2300      	movs	r3, #0
 80434da:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80434dc:	88fb      	ldrh	r3, [r7, #6]
 80434de:	b2db      	uxtb	r3, r3
 80434e0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, ICG20330_PWR_MGMT_1_ADDR, 1);
 80434e2:	f107 030f 	add.w	r3, r7, #15
 80434e6:	2201      	movs	r2, #1
 80434e8:	216b      	movs	r1, #107	; 0x6b
 80434ea:	4618      	mov	r0, r3
 80434ec:	f002 f9d4 	bl	8045898 <GYRO_IO_Write>
}
 80434f0:	bf00      	nop
 80434f2:	3710      	adds	r7, #16
 80434f4:	46bd      	mov	sp, r7
 80434f6:	bd80      	pop	{r7, pc}

080434f8 <ICG20330_INT1InterruptConfig>:
  * @brief  Set ICG20330 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the ICG20330 Interrupt.
  * @retval None
  */
void ICG20330_INT1InterruptConfig(uint16_t Int1Config)
{
 80434f8:	b580      	push	{r7, lr}
 80434fa:	b084      	sub	sp, #16
 80434fc:	af00      	add	r7, sp, #0
 80434fe:	4603      	mov	r3, r0
 8043500:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8043502:	2300      	movs	r3, #0
 8043504:	73fb      	strb	r3, [r7, #15]
 8043506:	2300      	movs	r3, #0
 8043508:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, ICG20330_INT_PIN_CFG_ADDR, 1);
 804350a:	f107 030f 	add.w	r3, r7, #15
 804350e:	2201      	movs	r2, #1
 8043510:	2137      	movs	r1, #55	; 0x37
 8043512:	4618      	mov	r0, r3
 8043514:	f002 f9d5 	bl	80458c2 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, ICG20330_INT_ENABLE_ADDR, 1);
 8043518:	f107 030e 	add.w	r3, r7, #14
 804351c:	2201      	movs	r2, #1
 804351e:	2138      	movs	r1, #56	; 0x38
 8043520:	4618      	mov	r0, r3
 8043522:	f002 f9ce 	bl	80458c2 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8043526:	7bfb      	ldrb	r3, [r7, #15]
 8043528:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 804352c:	b2db      	uxtb	r3, r3
 804352e:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8043530:	88fb      	ldrh	r3, [r7, #6]
 8043532:	b2db      	uxtb	r3, r3
 8043534:	121b      	asrs	r3, r3, #8
 8043536:	b25a      	sxtb	r2, r3
 8043538:	7bfb      	ldrb	r3, [r7, #15]
 804353a:	b25b      	sxtb	r3, r3
 804353c:	4313      	orrs	r3, r2
 804353e:	b25b      	sxtb	r3, r3
 8043540:	b2db      	uxtb	r3, r3
 8043542:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8043544:	7bbb      	ldrb	r3, [r7, #14]
 8043546:	f023 0320 	bic.w	r3, r3, #32
 804354a:	b2db      	uxtb	r3, r3
 804354c:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 804354e:	88fb      	ldrh	r3, [r7, #6]
 8043550:	b2da      	uxtb	r2, r3
 8043552:	7bbb      	ldrb	r3, [r7, #14]
 8043554:	4313      	orrs	r3, r2
 8043556:	b2db      	uxtb	r3, r3
 8043558:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, ICG20330_INT_PIN_CFG_ADDR, 1);
 804355a:	f107 030f 	add.w	r3, r7, #15
 804355e:	2201      	movs	r2, #1
 8043560:	2137      	movs	r1, #55	; 0x37
 8043562:	4618      	mov	r0, r3
 8043564:	f002 f998 	bl	8045898 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, ICG20330_INT_ENABLE_ADDR, 1);
 8043568:	f107 030e 	add.w	r3, r7, #14
 804356c:	2201      	movs	r2, #1
 804356e:	2138      	movs	r1, #56	; 0x38
 8043570:	4618      	mov	r0, r3
 8043572:	f002 f991 	bl	8045898 <GYRO_IO_Write>
}
 8043576:	bf00      	nop
 8043578:	3710      	adds	r7, #16
 804357a:	46bd      	mov	sp, r7
 804357c:	bd80      	pop	{r7, pc}

0804357e <ICG20330_EnableIT>:
  *        @arg ICG20330_INT1
  *        @arg ICG20330_INT2
  * @retval None
  */
void ICG20330_EnableIT(uint8_t IntSel)
{  
 804357e:	b580      	push	{r7, lr}
 8043580:	b084      	sub	sp, #16
 8043582:	af00      	add	r7, sp, #0
 8043584:	4603      	mov	r3, r0
 8043586:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, ICG20330_INT_ENABLE_ADDR, 1);
 8043588:	f107 030f 	add.w	r3, r7, #15
 804358c:	2201      	movs	r2, #1
 804358e:	2138      	movs	r1, #56	; 0x38
 8043590:	4618      	mov	r0, r3
 8043592:	f002 f996 	bl	80458c2 <GYRO_IO_Read>
//    tmpreg &= 0xF7;
//    tmpreg |= ICG20330_INT2INTERRUPT_ENABLE;
//  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&IntSel, ICG20330_INT_ENABLE_ADDR, 1);
 8043596:	1dfb      	adds	r3, r7, #7
 8043598:	2201      	movs	r2, #1
 804359a:	2138      	movs	r1, #56	; 0x38
 804359c:	4618      	mov	r0, r3
 804359e:	f002 f97b 	bl	8045898 <GYRO_IO_Write>
}
 80435a2:	bf00      	nop
 80435a4:	3710      	adds	r7, #16
 80435a6:	46bd      	mov	sp, r7
 80435a8:	bd80      	pop	{r7, pc}

080435aa <ICG20330_DisableIT>:
  *        @arg ICG20330_INT1
  *        @arg ICG20330_INT2
  * @retval None
  */
void ICG20330_DisableIT(uint8_t IntSel)
{  
 80435aa:	b580      	push	{r7, lr}
 80435ac:	b084      	sub	sp, #16
 80435ae:	af00      	add	r7, sp, #0
 80435b0:	4603      	mov	r3, r0
 80435b2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, ICG20330_INT_ENABLE_ADDR, 1);
 80435b4:	f107 030f 	add.w	r3, r7, #15
 80435b8:	2201      	movs	r2, #1
 80435ba:	2138      	movs	r1, #56	; 0x38
 80435bc:	4618      	mov	r0, r3
 80435be:	f002 f980 	bl	80458c2 <GYRO_IO_Read>
//  else if(IntSel == ICG20330_INT2)
//  {
//    tmpreg &= 0xF7;
//    tmpreg |= ICG20330_INT2INTERRUPT_DISABLE;
//  }
  tmpreg &=~ IntSel;
 80435c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80435c6:	43db      	mvns	r3, r3
 80435c8:	b25a      	sxtb	r2, r3
 80435ca:	7bfb      	ldrb	r3, [r7, #15]
 80435cc:	b25b      	sxtb	r3, r3
 80435ce:	4013      	ands	r3, r2
 80435d0:	b25b      	sxtb	r3, r3
 80435d2:	b2db      	uxtb	r3, r3
 80435d4:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, ICG20330_INT_ENABLE_ADDR, 1);
 80435d6:	f107 030f 	add.w	r3, r7, #15
 80435da:	2201      	movs	r2, #1
 80435dc:	2138      	movs	r1, #56	; 0x38
 80435de:	4618      	mov	r0, r3
 80435e0:	f002 f95a 	bl	8045898 <GYRO_IO_Write>
}
 80435e4:	bf00      	nop
 80435e6:	3710      	adds	r7, #16
 80435e8:	46bd      	mov	sp, r7
 80435ea:	bd80      	pop	{r7, pc}

080435ec <ICG20330_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the ICG20330.
  * @retval None
  */
void ICG20330_FilterConfig(uint8_t FilterStruct)
{
 80435ec:	b580      	push	{r7, lr}
 80435ee:	b084      	sub	sp, #16
 80435f0:	af00      	add	r7, sp, #0
 80435f2:	4603      	mov	r3, r0
 80435f4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, ICG20330_CONFIG_ADDR, 1);
 80435f6:	f107 030f 	add.w	r3, r7, #15
 80435fa:	2201      	movs	r2, #1
 80435fc:	211a      	movs	r1, #26
 80435fe:	4618      	mov	r0, r3
 8043600:	f002 f95f 	bl	80458c2 <GYRO_IO_Read>
//
//  /* Configure MEMS: mode and cutoff frequency */
//  tmpreg |= FilterStruct;
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&FilterStruct, ICG20330_CONFIG_ADDR, 1);
 8043604:	1dfb      	adds	r3, r7, #7
 8043606:	2201      	movs	r2, #1
 8043608:	211a      	movs	r1, #26
 804360a:	4618      	mov	r0, r3
 804360c:	f002 f944 	bl	8045898 <GYRO_IO_Write>
}
 8043610:	bf00      	nop
 8043612:	3710      	adds	r7, #16
 8043614:	46bd      	mov	sp, r7
 8043616:	bd80      	pop	{r7, pc}

08043618 <ICG20330_FilterCmd>:
  *         @arg: ICG20330_HIGHPASSFILTER_DISABLE
  *         @arg: ICG20330_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void ICG20330_FilterCmd(uint8_t HighPassFilterState)
{
 8043618:	b580      	push	{r7, lr}
 804361a:	b084      	sub	sp, #16
 804361c:	af00      	add	r7, sp, #0
 804361e:	4603      	mov	r3, r0
 8043620:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, ICG20330_GYRO_CONFIG_ADDR, 1);
 8043622:	f107 030f 	add.w	r3, r7, #15
 8043626:	2201      	movs	r2, #1
 8043628:	211b      	movs	r1, #27
 804362a:	4618      	mov	r0, r3
 804362c:	f002 f949 	bl	80458c2 <GYRO_IO_Read>
//  tmpreg &= 0xEF;
//
//  tmpreg |= HighPassFilterState;
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&HighPassFilterState, ICG20330_GYRO_CONFIG_ADDR, 1);
 8043630:	1dfb      	adds	r3, r7, #7
 8043632:	2201      	movs	r2, #1
 8043634:	211b      	movs	r1, #27
 8043636:	4618      	mov	r0, r3
 8043638:	f002 f92e 	bl	8045898 <GYRO_IO_Write>
}
 804363c:	bf00      	nop
 804363e:	3710      	adds	r7, #16
 8043640:	46bd      	mov	sp, r7
 8043642:	bd80      	pop	{r7, pc}

08043644 <ICG20330_ReadXYZAngRate>:
* @brief  Calculate the ICG20330 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void ICG20330_ReadXYZAngRate(float *pfData)
{
 8043644:	b580      	push	{r7, lr}
 8043646:	b08a      	sub	sp, #40	; 0x28
 8043648:	af00      	add	r7, sp, #0
 804364a:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 804364c:	2300      	movs	r3, #0
 804364e:	61bb      	str	r3, [r7, #24]
 8043650:	2300      	movs	r3, #0
 8043652:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8043654:	f107 0310 	add.w	r3, r7, #16
 8043658:	2200      	movs	r2, #0
 804365a:	601a      	str	r2, [r3, #0]
 804365c:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 804365e:	2300      	movs	r3, #0
 8043660:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8043662:	f04f 0300 	mov.w	r3, #0
 8043666:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8043668:	2300      	movs	r3, #0
 804366a:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,ICG20330_GYRO_CONFIG_ADDR,1);
 804366c:	f107 030f 	add.w	r3, r7, #15
 8043670:	2201      	movs	r2, #1
 8043672:	211b      	movs	r1, #27
 8043674:	4618      	mov	r0, r3
 8043676:	f002 f924 	bl	80458c2 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,ICG20330_GYRO_XOUT_H_ADDR,6);
 804367a:	f107 0318 	add.w	r3, r7, #24
 804367e:	2206      	movs	r2, #6
 8043680:	2143      	movs	r1, #67	; 0x43
 8043682:	4618      	mov	r0, r3
 8043684:	f002 f91d 	bl	80458c2 <GYRO_IO_Read>
//      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
//    }
//  }
//  else
//  {
    for(i=0; i<3; i++)
 8043688:	2300      	movs	r3, #0
 804368a:	623b      	str	r3, [r7, #32]
 804368c:	e01f      	b.n	80436ce <ICG20330_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 804368e:	6a3b      	ldr	r3, [r7, #32]
 8043690:	005b      	lsls	r3, r3, #1
 8043692:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8043696:	4413      	add	r3, r2
 8043698:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 804369c:	b29b      	uxth	r3, r3
 804369e:	021b      	lsls	r3, r3, #8
 80436a0:	b29a      	uxth	r2, r3
 80436a2:	6a3b      	ldr	r3, [r7, #32]
 80436a4:	005b      	lsls	r3, r3, #1
 80436a6:	3301      	adds	r3, #1
 80436a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80436ac:	440b      	add	r3, r1
 80436ae:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80436b2:	b29b      	uxth	r3, r3
 80436b4:	4413      	add	r3, r2
 80436b6:	b29b      	uxth	r3, r3
 80436b8:	b21a      	sxth	r2, r3
 80436ba:	6a3b      	ldr	r3, [r7, #32]
 80436bc:	005b      	lsls	r3, r3, #1
 80436be:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80436c2:	440b      	add	r3, r1
 80436c4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80436c8:	6a3b      	ldr	r3, [r7, #32]
 80436ca:	3301      	adds	r3, #1
 80436cc:	623b      	str	r3, [r7, #32]
 80436ce:	6a3b      	ldr	r3, [r7, #32]
 80436d0:	2b02      	cmp	r3, #2
 80436d2:	dddc      	ble.n	804368e <ICG20330_ReadXYZAngRate+0x4a>
    }
//  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & ICG20330_FS_SEL)
 80436d4:	7bfb      	ldrb	r3, [r7, #15]
 80436d6:	f003 0318 	and.w	r3, r3, #24
 80436da:	2b18      	cmp	r3, #24
 80436dc:	d841      	bhi.n	8043762 <ICG20330_ReadXYZAngRate+0x11e>
 80436de:	a201      	add	r2, pc, #4	; (adr r2, 80436e4 <ICG20330_ReadXYZAngRate+0xa0>)
 80436e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80436e4:	08043749 	.word	0x08043749
 80436e8:	08043763 	.word	0x08043763
 80436ec:	08043763 	.word	0x08043763
 80436f0:	08043763 	.word	0x08043763
 80436f4:	08043763 	.word	0x08043763
 80436f8:	08043763 	.word	0x08043763
 80436fc:	08043763 	.word	0x08043763
 8043700:	08043763 	.word	0x08043763
 8043704:	08043751 	.word	0x08043751
 8043708:	08043763 	.word	0x08043763
 804370c:	08043763 	.word	0x08043763
 8043710:	08043763 	.word	0x08043763
 8043714:	08043763 	.word	0x08043763
 8043718:	08043763 	.word	0x08043763
 804371c:	08043763 	.word	0x08043763
 8043720:	08043763 	.word	0x08043763
 8043724:	08043757 	.word	0x08043757
 8043728:	08043763 	.word	0x08043763
 804372c:	08043763 	.word	0x08043763
 8043730:	08043763 	.word	0x08043763
 8043734:	08043763 	.word	0x08043763
 8043738:	08043763 	.word	0x08043763
 804373c:	08043763 	.word	0x08043763
 8043740:	08043763 	.word	0x08043763
 8043744:	0804375d 	.word	0x0804375d
  {
  case ICG20330_FULLSCALE_63: //+-31.25
    sensitivity=ICG20330_SENSITIVITY_1024;
 8043748:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 804374c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 804374e:	e008      	b.n	8043762 <ICG20330_ReadXYZAngRate+0x11e>
    
  case ICG20330_FULLSCALE_125: //+-62.5
    sensitivity=ICG20330_SENSITIVITY_524;
 8043750:	4b1b      	ldr	r3, [pc, #108]	; (80437c0 <ICG20330_ReadXYZAngRate+0x17c>)
 8043752:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8043754:	e005      	b.n	8043762 <ICG20330_ReadXYZAngRate+0x11e>
    
  case ICG20330_FULLSCALE_250: //+-125
    sensitivity=ICG20330_SENSITIVITY_262;
 8043756:	4b1b      	ldr	r3, [pc, #108]	; (80437c4 <ICG20330_ReadXYZAngRate+0x180>)
 8043758:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 804375a:	e002      	b.n	8043762 <ICG20330_ReadXYZAngRate+0x11e>
  case ICG20330_FULLSCALE_500: //+-250
     sensitivity=ICG20330_SENSITIVITY_131;
 804375c:	4b1a      	ldr	r3, [pc, #104]	; (80437c8 <ICG20330_ReadXYZAngRate+0x184>)
 804375e:	627b      	str	r3, [r7, #36]	; 0x24
     break;
 8043760:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8043762:	2300      	movs	r3, #0
 8043764:	623b      	str	r3, [r7, #32]
 8043766:	e023      	b.n	80437b0 <ICG20330_ReadXYZAngRate+0x16c>
  {
    pfData[i]=(float)(RawData[i]);
 8043768:	6a3b      	ldr	r3, [r7, #32]
 804376a:	005b      	lsls	r3, r3, #1
 804376c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8043770:	4413      	add	r3, r2
 8043772:	f933 1c18 	ldrsh.w	r1, [r3, #-24]
 8043776:	6a3b      	ldr	r3, [r7, #32]
 8043778:	009b      	lsls	r3, r3, #2
 804377a:	687a      	ldr	r2, [r7, #4]
 804377c:	4413      	add	r3, r2
 804377e:	ee07 1a90 	vmov	s15, r1
 8043782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8043786:	edc3 7a00 	vstr	s15, [r3]
    pfData[i]/=(float)(sensitivity);
 804378a:	6a3b      	ldr	r3, [r7, #32]
 804378c:	009b      	lsls	r3, r3, #2
 804378e:	687a      	ldr	r2, [r7, #4]
 8043790:	4413      	add	r3, r2
 8043792:	edd3 6a00 	vldr	s13, [r3]
 8043796:	6a3b      	ldr	r3, [r7, #32]
 8043798:	009b      	lsls	r3, r3, #2
 804379a:	687a      	ldr	r2, [r7, #4]
 804379c:	4413      	add	r3, r2
 804379e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80437a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80437a6:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80437aa:	6a3b      	ldr	r3, [r7, #32]
 80437ac:	3301      	adds	r3, #1
 80437ae:	623b      	str	r3, [r7, #32]
 80437b0:	6a3b      	ldr	r3, [r7, #32]
 80437b2:	2b02      	cmp	r3, #2
 80437b4:	ddd8      	ble.n	8043768 <ICG20330_ReadXYZAngRate+0x124>
  }
}
 80437b6:	bf00      	nop
 80437b8:	bf00      	nop
 80437ba:	3728      	adds	r7, #40	; 0x28
 80437bc:	46bd      	mov	sp, r7
 80437be:	bd80      	pop	{r7, pc}
 80437c0:	44030000 	.word	0x44030000
 80437c4:	43830000 	.word	0x43830000
 80437c8:	43030000 	.word	0x43030000

080437cc <lr1110_board_init_io>:
#endif

static void lr1110_board_init_tcxo_io( const void* context );

void lr1110_board_init_io( const void* context )
{
 80437cc:	b580      	push	{r7, lr}
 80437ce:	b086      	sub	sp, #24
 80437d0:	af04      	add	r7, sp, #16
 80437d2:	6078      	str	r0, [r7, #4]
    GpioInit( &( ( lr1110_t* ) context )->reset, LR_NRST_GPIO_Port, LR_NRST_Pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 80437d4:	6878      	ldr	r0, [r7, #4]
 80437d6:	2301      	movs	r3, #1
 80437d8:	9302      	str	r3, [sp, #8]
 80437da:	2300      	movs	r3, #0
 80437dc:	9301      	str	r3, [sp, #4]
 80437de:	2300      	movs	r3, #0
 80437e0:	9300      	str	r3, [sp, #0]
 80437e2:	2301      	movs	r3, #1
 80437e4:	2204      	movs	r2, #4
 80437e6:	4919      	ldr	r1, [pc, #100]	; (804384c <lr1110_board_init_io+0x80>)
 80437e8:	f7fd fa48 	bl	8040c7c <GpioInit>
    GpioInit( &( ( lr1110_t* ) context )->spi.Nss, LR_NSS_GPIO_Port, LR_NSS_Pin, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 1 );
 80437ec:	687b      	ldr	r3, [r7, #4]
 80437ee:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80437f2:	2301      	movs	r3, #1
 80437f4:	9302      	str	r3, [sp, #8]
 80437f6:	2300      	movs	r3, #0
 80437f8:	9301      	str	r3, [sp, #4]
 80437fa:	2300      	movs	r3, #0
 80437fc:	9300      	str	r3, [sp, #0]
 80437fe:	2301      	movs	r3, #1
 8043800:	2201      	movs	r2, #1
 8043802:	4912      	ldr	r1, [pc, #72]	; (804384c <lr1110_board_init_io+0x80>)
 8043804:	f7fd fa3a 	bl	8040c7c <GpioInit>
    GpioInit( &( ( lr1110_t* ) context )->dio_1, LR_IRQ_GPIO_Port, LR_IRQ_Pin, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8043808:	687b      	ldr	r3, [r7, #4]
 804380a:	f103 0028 	add.w	r0, r3, #40	; 0x28
 804380e:	2300      	movs	r3, #0
 8043810:	9302      	str	r3, [sp, #8]
 8043812:	2300      	movs	r3, #0
 8043814:	9301      	str	r3, [sp, #4]
 8043816:	2300      	movs	r3, #0
 8043818:	9300      	str	r3, [sp, #0]
 804381a:	2300      	movs	r3, #0
 804381c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8043820:	490a      	ldr	r1, [pc, #40]	; (804384c <lr1110_board_init_io+0x80>)
 8043822:	f7fd fa2b 	bl	8040c7c <GpioInit>
    GpioInit( &( ( lr1110_t* ) context )->busy, LR_BUSY_GPIO_Port, LR_BUSY_Pin, PIN_INPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
 8043826:	687b      	ldr	r3, [r7, #4]
 8043828:	f103 0014 	add.w	r0, r3, #20
 804382c:	2300      	movs	r3, #0
 804382e:	9302      	str	r3, [sp, #8]
 8043830:	2300      	movs	r3, #0
 8043832:	9301      	str	r3, [sp, #4]
 8043834:	2300      	movs	r3, #0
 8043836:	9300      	str	r3, [sp, #0]
 8043838:	2300      	movs	r3, #0
 804383a:	2202      	movs	r2, #2
 804383c:	4903      	ldr	r1, [pc, #12]	; (804384c <lr1110_board_init_io+0x80>)
 804383e:	f7fd fa1d 	bl	8040c7c <GpioInit>
}
 8043842:	bf00      	nop
 8043844:	3708      	adds	r7, #8
 8043846:	46bd      	mov	sp, r7
 8043848:	bd80      	pop	{r7, pc}
 804384a:	bf00      	nop
 804384c:	42020c00 	.word	0x42020c00

08043850 <lr1110_board_set_rf_tx_power>:
    GpioInit( &DbgPinRx, RADIO_DBG_PIN_RX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
#endif
}

void lr1110_board_set_rf_tx_power( const void* context, int8_t power )
{
 8043850:	b580      	push	{r7, lr}
 8043852:	b082      	sub	sp, #8
 8043854:	af00      	add	r7, sp, #0
 8043856:	6078      	str	r0, [r7, #4]
 8043858:	460b      	mov	r3, r1
 804385a:	70fb      	strb	r3, [r7, #3]
    // TODO: Add PA Config check
    if( power > 0 )
 804385c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8043860:	2b00      	cmp	r3, #0
 8043862:	dd06      	ble.n	8043872 <lr1110_board_set_rf_tx_power+0x22>
    {
        if( power > 22 )
 8043864:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8043868:	2b16      	cmp	r3, #22
 804386a:	dd09      	ble.n	8043880 <lr1110_board_set_rf_tx_power+0x30>
        {
            power = 22;
 804386c:	2316      	movs	r3, #22
 804386e:	70fb      	strb	r3, [r7, #3]
 8043870:	e006      	b.n	8043880 <lr1110_board_set_rf_tx_power+0x30>
        }
    }
    else
    {
        if( power < -9 )
 8043872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8043876:	f113 0f09 	cmn.w	r3, #9
 804387a:	da01      	bge.n	8043880 <lr1110_board_set_rf_tx_power+0x30>
        {
            power = -9;
 804387c:	23f7      	movs	r3, #247	; 0xf7
 804387e:	70fb      	strb	r3, [r7, #3]
        }
    }
    lr1110_radio_set_tx_params( context, power, LR1110_RADIO_RAMP_32_US );
 8043880:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8043884:	2201      	movs	r2, #1
 8043886:	4619      	mov	r1, r3
 8043888:	6878      	ldr	r0, [r7, #4]
 804388a:	f002 fb0a 	bl	8045ea2 <lr1110_radio_set_tx_params>
}
 804388e:	bf00      	nop
 8043890:	3708      	adds	r7, #8
 8043892:	46bd      	mov	sp, r7
 8043894:	bd80      	pop	{r7, pc}

08043896 <lr1110_board_get_tcxo_wakeup_time>:

uint32_t lr1110_board_get_tcxo_wakeup_time( const void* context )
{
 8043896:	b480      	push	{r7}
 8043898:	b083      	sub	sp, #12
 804389a:	af00      	add	r7, sp, #0
 804389c:	6078      	str	r0, [r7, #4]
    return BOARD_TCXO_WAKEUP_TIME;
 804389e:	2305      	movs	r3, #5
}
 80438a0:	4618      	mov	r0, r3
 80438a2:	370c      	adds	r7, #12
 80438a4:	46bd      	mov	sp, r7
 80438a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80438aa:	4770      	bx	lr

080438ac <lr1110_board_init>:

void lr1110_board_init( const void* context, lr1110_dio_irq_handler dio_irq )
{
 80438ac:	b580      	push	{r7, lr}
 80438ae:	b08a      	sub	sp, #40	; 0x28
 80438b0:	af00      	add	r7, sp, #0
 80438b2:	6078      	str	r0, [r7, #4]
 80438b4:	6039      	str	r1, [r7, #0]
    lr1110_system_reset( context );
 80438b6:	6878      	ldr	r0, [r7, #4]
 80438b8:	f002 fd21 	bl	80462fe <lr1110_system_reset>
    lr1110_hal_set_operating_mode( context, LR1110_HAL_OP_MODE_STDBY_RC );
 80438bc:	2101      	movs	r1, #1
 80438be:	6878      	ldr	r0, [r7, #4]
 80438c0:	f000 f9c7 	bl	8043c52 <lr1110_hal_set_operating_mode>

    // Attach interrupt handler to radio irq pin
    GpioSetInterrupt( &( ( lr1110_t* ) context )->dio_1, IRQ_RISING_EDGE, IRQ_HIGH_PRIORITY, dio_irq );
 80438c4:	687b      	ldr	r3, [r7, #4]
 80438c6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80438ca:	683b      	ldr	r3, [r7, #0]
 80438cc:	2203      	movs	r2, #3
 80438ce:	2101      	movs	r1, #1
 80438d0:	f7fd faa0 	bl	8040e14 <GpioSetInterrupt>

    lr1110_system_stat1_t stat1;
    lr1110_system_stat2_t stat2;
    uint32_t              irq = 0;
 80438d4:	2300      	movs	r3, #0
 80438d6:	61fb      	str	r3, [r7, #28]
    lr1110_system_get_status( context, &stat1, &stat2, &irq );
 80438d8:	f107 031c 	add.w	r3, r7, #28
 80438dc:	f107 0220 	add.w	r2, r7, #32
 80438e0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80438e4:	6878      	ldr	r0, [r7, #4]
 80438e6:	f002 fd16 	bl	8046316 <lr1110_system_get_status>
    lr1110_system_version_t version;
    lr1110_system_get_version( context, &version );
 80438ea:	f107 0318 	add.w	r3, r7, #24
 80438ee:	4619      	mov	r1, r3
 80438f0:	6878      	ldr	r0, [r7, #4]
 80438f2:	f002 fd64 	bl	80463be <lr1110_system_get_version>
    lr1110_system_errors_t errors = { 0 };
 80438f6:	2300      	movs	r3, #0
 80438f8:	82fb      	strh	r3, [r7, #22]
    lr1110_system_get_errors( context, &errors );
 80438fa:	f107 0316 	add.w	r3, r7, #22
 80438fe:	4619      	mov	r1, r3
 8043900:	6878      	ldr	r0, [r7, #4]
 8043902:	f002 fd8d 	bl	8046420 <lr1110_system_get_errors>
    lr1110_system_clear_errors( context );
 8043906:	6878      	ldr	r0, [r7, #4]
 8043908:	f002 fdb5 	bl	8046476 <lr1110_system_clear_errors>

    // Initialize TCXO control
    lr1110_board_init_tcxo_io( context );
 804390c:	6878      	ldr	r0, [r7, #4]
 804390e:	f000 f82d 	bl	804396c <lr1110_board_init_tcxo_io>

    // Initialize RF switch control
    lr1110_system_rfswitch_cfg_t rf_switch_configuration;
    rf_switch_configuration.enable  = LR1110_SYSTEM_RFSW0_HIGH | LR1110_SYSTEM_RFSW1_HIGH;
 8043912:	2303      	movs	r3, #3
 8043914:	733b      	strb	r3, [r7, #12]
    rf_switch_configuration.standby = 0;
 8043916:	2300      	movs	r3, #0
 8043918:	737b      	strb	r3, [r7, #13]
    rf_switch_configuration.rx      = LR1110_SYSTEM_RFSW0_HIGH;
 804391a:	2301      	movs	r3, #1
 804391c:	73bb      	strb	r3, [r7, #14]
    rf_switch_configuration.tx      = LR1110_SYSTEM_RFSW0_HIGH | LR1110_SYSTEM_RFSW1_HIGH;
 804391e:	2303      	movs	r3, #3
 8043920:	73fb      	strb	r3, [r7, #15]
    rf_switch_configuration.wifi    = 0;
 8043922:	2300      	movs	r3, #0
 8043924:	74fb      	strb	r3, [r7, #19]
    rf_switch_configuration.gnss    = 0;
 8043926:	2300      	movs	r3, #0
 8043928:	74bb      	strb	r3, [r7, #18]

    lr1110_system_set_dio_as_rf_switch( context, &rf_switch_configuration );
 804392a:	f107 030c 	add.w	r3, r7, #12
 804392e:	4619      	mov	r1, r3
 8043930:	6878      	ldr	r0, [r7, #4]
 8043932:	f002 fdd0 	bl	80464d6 <lr1110_system_set_dio_as_rf_switch>

    lr1110_radio_pa_cfg_t paConfig = {
 8043936:	2300      	movs	r3, #0
 8043938:	723b      	strb	r3, [r7, #8]
 804393a:	2300      	movs	r3, #0
 804393c:	727b      	strb	r3, [r7, #9]
 804393e:	2304      	movs	r3, #4
 8043940:	72bb      	strb	r3, [r7, #10]
 8043942:	2300      	movs	r3, #0
 8043944:	72fb      	strb	r3, [r7, #11]
        .pa_sel        = LR1110_RADIO_PA_SEL_LP,
        .pa_reg_supply = LR1110_RADIO_PA_REG_SUPPLY_VREG,
        .pa_duty_cycle  = 0x04,
        .pa_hp_sel     = 0x00,
    };
    lr1110_radio_set_pa_cfg( context, &paConfig );
 8043946:	f107 0308 	add.w	r3, r7, #8
 804394a:	4619      	mov	r1, r3
 804394c:	6878      	ldr	r0, [r7, #4]
 804394e:	f002 fb11 	bl	8045f74 <lr1110_radio_set_pa_cfg>

    // Set packet type
    lr1110_radio_pkt_type_t packet_type = LR1110_RADIO_PKT_TYPE_LORA;
 8043952:	2302      	movs	r3, #2
 8043954:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    lr1110_radio_set_pkt_type( context, packet_type );
 8043958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 804395c:	4619      	mov	r1, r3
 804395e:	6878      	ldr	r0, [r7, #4]
 8043960:	f002 f9bc 	bl	8045cdc <lr1110_radio_set_pkt_type>
}
 8043964:	bf00      	nop
 8043966:	3728      	adds	r7, #40	; 0x28
 8043968:	46bd      	mov	sp, r7
 804396a:	bd80      	pop	{r7, pc}

0804396c <lr1110_board_init_tcxo_io>:

static void lr1110_board_init_tcxo_io( const void* context )
{
 804396c:	b480      	push	{r7}
 804396e:	b083      	sub	sp, #12
 8043970:	af00      	add	r7, sp, #0
 8043972:	6078      	str	r0, [r7, #4]
    uint8_t calib_params = LR1110_SYSTEM_CALIB_LF_RC_MASK | LR1110_SYSTEM_CALIB_HF_RC_MASK |
                  LR1110_SYSTEM_CALIB_PLL_MASK | LR1110_SYSTEM_CALIB_ADC_MASK |
                  LR1110_SYSTEM_CALIB_IMG_MASK | LR1110_SYSTEM_CALIB_PLL_TX_MASK;
    lr1110_system_calibrate( context, calib_params );
#endif
}
 8043974:	bf00      	nop
 8043976:	370c      	adds	r7, #12
 8043978:	46bd      	mov	sp, r7
 804397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804397e:	4770      	bx	lr

08043980 <lr1110_hal_write>:
static lr1110_hal_status_t lr1110_hal_wait_on_busy( const void* context );

lr1110_hal_status_t lr1110_hal_write( const void* context, const uint8_t* command, const uint16_t command_length,
                                      const uint8_t* data, const uint16_t data_length )

{
 8043980:	b580      	push	{r7, lr}
 8043982:	b086      	sub	sp, #24
 8043984:	af00      	add	r7, sp, #0
 8043986:	60f8      	str	r0, [r7, #12]
 8043988:	60b9      	str	r1, [r7, #8]
 804398a:	603b      	str	r3, [r7, #0]
 804398c:	4613      	mov	r3, r2
 804398e:	80fb      	strh	r3, [r7, #6]
    if( lr1110_hal_wakeup( context ) == LR1110_HAL_STATUS_OK )
 8043990:	68f8      	ldr	r0, [r7, #12]
 8043992:	f000 f917 	bl	8043bc4 <lr1110_hal_wakeup>
 8043996:	4603      	mov	r3, r0
 8043998:	2b00      	cmp	r3, #0
 804399a:	d147      	bne.n	8043a2c <lr1110_hal_write+0xac>
    {
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 804399c:	68fb      	ldr	r3, [r7, #12]
 804399e:	337c      	adds	r3, #124	; 0x7c
 80439a0:	2100      	movs	r1, #0
 80439a2:	4618      	mov	r0, r3
 80439a4:	f7fd fb7c 	bl	80410a0 <GpioWrite>
        for( uint16_t i = 0; i < command_length; i++ )
 80439a8:	2300      	movs	r3, #0
 80439aa:	82fb      	strh	r3, [r7, #22]
 80439ac:	e00d      	b.n	80439ca <lr1110_hal_write+0x4a>
        {
            SpiInOut( &( ( lr1110_t* ) context )->spi, command[i] );
 80439ae:	68fb      	ldr	r3, [r7, #12]
 80439b0:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80439b4:	8afb      	ldrh	r3, [r7, #22]
 80439b6:	68ba      	ldr	r2, [r7, #8]
 80439b8:	4413      	add	r3, r2
 80439ba:	781b      	ldrb	r3, [r3, #0]
 80439bc:	b29b      	uxth	r3, r3
 80439be:	4619      	mov	r1, r3
 80439c0:	f7fe fd58 	bl	8042474 <SpiInOut>
        for( uint16_t i = 0; i < command_length; i++ )
 80439c4:	8afb      	ldrh	r3, [r7, #22]
 80439c6:	3301      	adds	r3, #1
 80439c8:	82fb      	strh	r3, [r7, #22]
 80439ca:	8afa      	ldrh	r2, [r7, #22]
 80439cc:	88fb      	ldrh	r3, [r7, #6]
 80439ce:	429a      	cmp	r2, r3
 80439d0:	d3ed      	bcc.n	80439ae <lr1110_hal_write+0x2e>
        }
        for( uint16_t i = 0; i < data_length; i++ )
 80439d2:	2300      	movs	r3, #0
 80439d4:	82bb      	strh	r3, [r7, #20]
 80439d6:	e00d      	b.n	80439f4 <lr1110_hal_write+0x74>
        {
            SpiInOut( &( ( lr1110_t* ) context )->spi, data[i] );
 80439d8:	68fb      	ldr	r3, [r7, #12]
 80439da:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 80439de:	8abb      	ldrh	r3, [r7, #20]
 80439e0:	683a      	ldr	r2, [r7, #0]
 80439e2:	4413      	add	r3, r2
 80439e4:	781b      	ldrb	r3, [r3, #0]
 80439e6:	b29b      	uxth	r3, r3
 80439e8:	4619      	mov	r1, r3
 80439ea:	f7fe fd43 	bl	8042474 <SpiInOut>
        for( uint16_t i = 0; i < data_length; i++ )
 80439ee:	8abb      	ldrh	r3, [r7, #20]
 80439f0:	3301      	adds	r3, #1
 80439f2:	82bb      	strh	r3, [r7, #20]
 80439f4:	8aba      	ldrh	r2, [r7, #20]
 80439f6:	8c3b      	ldrh	r3, [r7, #32]
 80439f8:	429a      	cmp	r2, r3
 80439fa:	d3ed      	bcc.n	80439d8 <lr1110_hal_write+0x58>
        }
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 80439fc:	68fb      	ldr	r3, [r7, #12]
 80439fe:	337c      	adds	r3, #124	; 0x7c
 8043a00:	2101      	movs	r1, #1
 8043a02:	4618      	mov	r0, r3
 8043a04:	f7fd fb4c 	bl	80410a0 <GpioWrite>

        // 0x011B - LR1110_SYSTEM_SET_SLEEP_OC
        if( ( ( command[0] << 8 ) | command[1] ) != 0x011B )
 8043a08:	68bb      	ldr	r3, [r7, #8]
 8043a0a:	781b      	ldrb	r3, [r3, #0]
 8043a0c:	021b      	lsls	r3, r3, #8
 8043a0e:	68ba      	ldr	r2, [r7, #8]
 8043a10:	3201      	adds	r2, #1
 8043a12:	7812      	ldrb	r2, [r2, #0]
 8043a14:	4313      	orrs	r3, r2
 8043a16:	f240 121b 	movw	r2, #283	; 0x11b
 8043a1a:	4293      	cmp	r3, r2
 8043a1c:	d004      	beq.n	8043a28 <lr1110_hal_write+0xa8>
        {
            return lr1110_hal_wait_on_busy( context );
 8043a1e:	68f8      	ldr	r0, [r7, #12]
 8043a20:	f000 f8f8 	bl	8043c14 <lr1110_hal_wait_on_busy>
 8043a24:	4603      	mov	r3, r0
 8043a26:	e002      	b.n	8043a2e <lr1110_hal_write+0xae>
        }
        else
        {
            return LR1110_HAL_STATUS_OK;
 8043a28:	2300      	movs	r3, #0
 8043a2a:	e000      	b.n	8043a2e <lr1110_hal_write+0xae>
        }
    }
    return LR1110_HAL_STATUS_ERROR;
 8043a2c:	2303      	movs	r3, #3
}
 8043a2e:	4618      	mov	r0, r3
 8043a30:	3718      	adds	r7, #24
 8043a32:	46bd      	mov	sp, r7
 8043a34:	bd80      	pop	{r7, pc}

08043a36 <lr1110_hal_read>:

lr1110_hal_status_t lr1110_hal_read( const void* context, const uint8_t* command, const uint16_t command_length,
                                     uint8_t* data, const uint16_t data_length )
{
 8043a36:	b580      	push	{r7, lr}
 8043a38:	b086      	sub	sp, #24
 8043a3a:	af00      	add	r7, sp, #0
 8043a3c:	60f8      	str	r0, [r7, #12]
 8043a3e:	60b9      	str	r1, [r7, #8]
 8043a40:	603b      	str	r3, [r7, #0]
 8043a42:	4613      	mov	r3, r2
 8043a44:	80fb      	strh	r3, [r7, #6]
    if( lr1110_hal_wakeup( context ) == LR1110_HAL_STATUS_OK )
 8043a46:	68f8      	ldr	r0, [r7, #12]
 8043a48:	f000 f8bc 	bl	8043bc4 <lr1110_hal_wakeup>
 8043a4c:	4603      	mov	r3, r0
 8043a4e:	2b00      	cmp	r3, #0
 8043a50:	d151      	bne.n	8043af6 <lr1110_hal_read+0xc0>
    {
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 8043a52:	68fb      	ldr	r3, [r7, #12]
 8043a54:	337c      	adds	r3, #124	; 0x7c
 8043a56:	2100      	movs	r1, #0
 8043a58:	4618      	mov	r0, r3
 8043a5a:	f7fd fb21 	bl	80410a0 <GpioWrite>

        for( uint16_t i = 0; i < command_length; i++ )
 8043a5e:	2300      	movs	r3, #0
 8043a60:	82fb      	strh	r3, [r7, #22]
 8043a62:	e00d      	b.n	8043a80 <lr1110_hal_read+0x4a>
        {
            SpiInOut( &( ( lr1110_t* ) context )->spi, command[i] );
 8043a64:	68fb      	ldr	r3, [r7, #12]
 8043a66:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8043a6a:	8afb      	ldrh	r3, [r7, #22]
 8043a6c:	68ba      	ldr	r2, [r7, #8]
 8043a6e:	4413      	add	r3, r2
 8043a70:	781b      	ldrb	r3, [r3, #0]
 8043a72:	b29b      	uxth	r3, r3
 8043a74:	4619      	mov	r1, r3
 8043a76:	f7fe fcfd 	bl	8042474 <SpiInOut>
        for( uint16_t i = 0; i < command_length; i++ )
 8043a7a:	8afb      	ldrh	r3, [r7, #22]
 8043a7c:	3301      	adds	r3, #1
 8043a7e:	82fb      	strh	r3, [r7, #22]
 8043a80:	8afa      	ldrh	r2, [r7, #22]
 8043a82:	88fb      	ldrh	r3, [r7, #6]
 8043a84:	429a      	cmp	r2, r3
 8043a86:	d3ed      	bcc.n	8043a64 <lr1110_hal_read+0x2e>
        }

        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 8043a88:	68fb      	ldr	r3, [r7, #12]
 8043a8a:	337c      	adds	r3, #124	; 0x7c
 8043a8c:	2101      	movs	r1, #1
 8043a8e:	4618      	mov	r0, r3
 8043a90:	f7fd fb06 	bl	80410a0 <GpioWrite>

        lr1110_hal_wait_on_busy( context );
 8043a94:	68f8      	ldr	r0, [r7, #12]
 8043a96:	f000 f8bd 	bl	8043c14 <lr1110_hal_wait_on_busy>

        // Send dummy byte
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 8043a9a:	68fb      	ldr	r3, [r7, #12]
 8043a9c:	337c      	adds	r3, #124	; 0x7c
 8043a9e:	2100      	movs	r1, #0
 8043aa0:	4618      	mov	r0, r3
 8043aa2:	f7fd fafd 	bl	80410a0 <GpioWrite>

        SpiInOut( &( ( lr1110_t* ) context )->spi, 0 );
 8043aa6:	68fb      	ldr	r3, [r7, #12]
 8043aa8:	333c      	adds	r3, #60	; 0x3c
 8043aaa:	2100      	movs	r1, #0
 8043aac:	4618      	mov	r0, r3
 8043aae:	f7fe fce1 	bl	8042474 <SpiInOut>

        for( uint16_t i = 0; i < data_length; i++ )
 8043ab2:	2300      	movs	r3, #0
 8043ab4:	82bb      	strh	r3, [r7, #20]
 8043ab6:	e00f      	b.n	8043ad8 <lr1110_hal_read+0xa2>
        {
            data[i] = SpiInOut( &( ( lr1110_t* ) context )->spi, 0 );
 8043ab8:	68fb      	ldr	r3, [r7, #12]
 8043aba:	333c      	adds	r3, #60	; 0x3c
 8043abc:	2100      	movs	r1, #0
 8043abe:	4618      	mov	r0, r3
 8043ac0:	f7fe fcd8 	bl	8042474 <SpiInOut>
 8043ac4:	4603      	mov	r3, r0
 8043ac6:	4619      	mov	r1, r3
 8043ac8:	8abb      	ldrh	r3, [r7, #20]
 8043aca:	683a      	ldr	r2, [r7, #0]
 8043acc:	4413      	add	r3, r2
 8043ace:	b2ca      	uxtb	r2, r1
 8043ad0:	701a      	strb	r2, [r3, #0]
        for( uint16_t i = 0; i < data_length; i++ )
 8043ad2:	8abb      	ldrh	r3, [r7, #20]
 8043ad4:	3301      	adds	r3, #1
 8043ad6:	82bb      	strh	r3, [r7, #20]
 8043ad8:	8aba      	ldrh	r2, [r7, #20]
 8043ada:	8c3b      	ldrh	r3, [r7, #32]
 8043adc:	429a      	cmp	r2, r3
 8043ade:	d3eb      	bcc.n	8043ab8 <lr1110_hal_read+0x82>
        }

        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 8043ae0:	68fb      	ldr	r3, [r7, #12]
 8043ae2:	337c      	adds	r3, #124	; 0x7c
 8043ae4:	2101      	movs	r1, #1
 8043ae6:	4618      	mov	r0, r3
 8043ae8:	f7fd fada 	bl	80410a0 <GpioWrite>

        return lr1110_hal_wait_on_busy( context );
 8043aec:	68f8      	ldr	r0, [r7, #12]
 8043aee:	f000 f891 	bl	8043c14 <lr1110_hal_wait_on_busy>
 8043af2:	4603      	mov	r3, r0
 8043af4:	e000      	b.n	8043af8 <lr1110_hal_read+0xc2>
    }
    return LR1110_HAL_STATUS_ERROR;
 8043af6:	2303      	movs	r3, #3
}
 8043af8:	4618      	mov	r0, r3
 8043afa:	3718      	adds	r7, #24
 8043afc:	46bd      	mov	sp, r7
 8043afe:	bd80      	pop	{r7, pc}

08043b00 <lr1110_hal_write_read>:

lr1110_hal_status_t lr1110_hal_write_read( const void* context, const uint8_t* command, uint8_t* data,
                                           const uint16_t data_length )
{
 8043b00:	b580      	push	{r7, lr}
 8043b02:	b086      	sub	sp, #24
 8043b04:	af00      	add	r7, sp, #0
 8043b06:	60f8      	str	r0, [r7, #12]
 8043b08:	60b9      	str	r1, [r7, #8]
 8043b0a:	607a      	str	r2, [r7, #4]
 8043b0c:	807b      	strh	r3, [r7, #2]
    if( lr1110_hal_wakeup( context ) == LR1110_HAL_STATUS_OK )
 8043b0e:	68f8      	ldr	r0, [r7, #12]
 8043b10:	f000 f858 	bl	8043bc4 <lr1110_hal_wakeup>
 8043b14:	4603      	mov	r3, r0
 8043b16:	2b00      	cmp	r3, #0
 8043b18:	d139      	bne.n	8043b8e <lr1110_hal_write_read+0x8e>
    {
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 8043b1a:	68fb      	ldr	r3, [r7, #12]
 8043b1c:	337c      	adds	r3, #124	; 0x7c
 8043b1e:	2100      	movs	r1, #0
 8043b20:	4618      	mov	r0, r3
 8043b22:	f7fd fabd 	bl	80410a0 <GpioWrite>

        for( uint16_t i = 0; i < data_length; i++ )
 8043b26:	2300      	movs	r3, #0
 8043b28:	82fb      	strh	r3, [r7, #22]
 8043b2a:	e014      	b.n	8043b56 <lr1110_hal_write_read+0x56>
        {
            data[i] = SpiInOut( &( ( lr1110_t* ) context )->spi, command[i] );
 8043b2c:	68fb      	ldr	r3, [r7, #12]
 8043b2e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8043b32:	8afb      	ldrh	r3, [r7, #22]
 8043b34:	68ba      	ldr	r2, [r7, #8]
 8043b36:	4413      	add	r3, r2
 8043b38:	781b      	ldrb	r3, [r3, #0]
 8043b3a:	b29b      	uxth	r3, r3
 8043b3c:	4619      	mov	r1, r3
 8043b3e:	f7fe fc99 	bl	8042474 <SpiInOut>
 8043b42:	4603      	mov	r3, r0
 8043b44:	4619      	mov	r1, r3
 8043b46:	8afb      	ldrh	r3, [r7, #22]
 8043b48:	687a      	ldr	r2, [r7, #4]
 8043b4a:	4413      	add	r3, r2
 8043b4c:	b2ca      	uxtb	r2, r1
 8043b4e:	701a      	strb	r2, [r3, #0]
        for( uint16_t i = 0; i < data_length; i++ )
 8043b50:	8afb      	ldrh	r3, [r7, #22]
 8043b52:	3301      	adds	r3, #1
 8043b54:	82fb      	strh	r3, [r7, #22]
 8043b56:	8afa      	ldrh	r2, [r7, #22]
 8043b58:	887b      	ldrh	r3, [r7, #2]
 8043b5a:	429a      	cmp	r2, r3
 8043b5c:	d3e6      	bcc.n	8043b2c <lr1110_hal_write_read+0x2c>
        }

        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 8043b5e:	68fb      	ldr	r3, [r7, #12]
 8043b60:	337c      	adds	r3, #124	; 0x7c
 8043b62:	2101      	movs	r1, #1
 8043b64:	4618      	mov	r0, r3
 8043b66:	f7fd fa9b 	bl	80410a0 <GpioWrite>

        // 0x011B - LR1110_SYSTEM_SET_SLEEP_OC
        if( ( ( command[0] << 8 ) | command[1] ) != 0x011B )
 8043b6a:	68bb      	ldr	r3, [r7, #8]
 8043b6c:	781b      	ldrb	r3, [r3, #0]
 8043b6e:	021b      	lsls	r3, r3, #8
 8043b70:	68ba      	ldr	r2, [r7, #8]
 8043b72:	3201      	adds	r2, #1
 8043b74:	7812      	ldrb	r2, [r2, #0]
 8043b76:	4313      	orrs	r3, r2
 8043b78:	f240 121b 	movw	r2, #283	; 0x11b
 8043b7c:	4293      	cmp	r3, r2
 8043b7e:	d004      	beq.n	8043b8a <lr1110_hal_write_read+0x8a>
        {
            return lr1110_hal_wait_on_busy( context );
 8043b80:	68f8      	ldr	r0, [r7, #12]
 8043b82:	f000 f847 	bl	8043c14 <lr1110_hal_wait_on_busy>
 8043b86:	4603      	mov	r3, r0
 8043b88:	e002      	b.n	8043b90 <lr1110_hal_write_read+0x90>
        }
        else
        {
            return LR1110_HAL_STATUS_OK;
 8043b8a:	2300      	movs	r3, #0
 8043b8c:	e000      	b.n	8043b90 <lr1110_hal_write_read+0x90>
        }
    }
    return LR1110_HAL_STATUS_ERROR;
 8043b8e:	2303      	movs	r3, #3
}
 8043b90:	4618      	mov	r0, r3
 8043b92:	3718      	adds	r7, #24
 8043b94:	46bd      	mov	sp, r7
 8043b96:	bd80      	pop	{r7, pc}

08043b98 <lr1110_hal_reset>:

lr1110_hal_status_t lr1110_hal_reset( const void* context )
{
 8043b98:	b580      	push	{r7, lr}
 8043b9a:	b082      	sub	sp, #8
 8043b9c:	af00      	add	r7, sp, #0
 8043b9e:	6078      	str	r0, [r7, #4]
    GpioWrite( &( ( lr1110_t* ) context )->reset, 0 );
 8043ba0:	687b      	ldr	r3, [r7, #4]
 8043ba2:	2100      	movs	r1, #0
 8043ba4:	4618      	mov	r0, r3
 8043ba6:	f7fd fa7b 	bl	80410a0 <GpioWrite>
    DelayMs( 1 );
 8043baa:	2001      	movs	r0, #1
 8043bac:	f7fc ff34 	bl	8040a18 <DelayMs>
    GpioWrite( &( ( lr1110_t* ) context )->reset, 1 );
 8043bb0:	687b      	ldr	r3, [r7, #4]
 8043bb2:	2101      	movs	r1, #1
 8043bb4:	4618      	mov	r0, r3
 8043bb6:	f7fd fa73 	bl	80410a0 <GpioWrite>
    return LR1110_HAL_STATUS_OK;
 8043bba:	2300      	movs	r3, #0
}
 8043bbc:	4618      	mov	r0, r3
 8043bbe:	3708      	adds	r7, #8
 8043bc0:	46bd      	mov	sp, r7
 8043bc2:	bd80      	pop	{r7, pc}

08043bc4 <lr1110_hal_wakeup>:

lr1110_hal_status_t lr1110_hal_wakeup( const void* context )
{
 8043bc4:	b580      	push	{r7, lr}
 8043bc6:	b082      	sub	sp, #8
 8043bc8:	af00      	add	r7, sp, #0
 8043bca:	6078      	str	r0, [r7, #4]
    if( ( lr1110_hal_get_operating_mode( context ) == LR1110_HAL_OP_MODE_SLEEP ) ||
 8043bcc:	6878      	ldr	r0, [r7, #4]
 8043bce:	f000 f833 	bl	8043c38 <lr1110_hal_get_operating_mode>
 8043bd2:	4603      	mov	r3, r0
 8043bd4:	2b00      	cmp	r3, #0
 8043bd6:	d005      	beq.n	8043be4 <lr1110_hal_wakeup+0x20>
        ( lr1110_hal_get_operating_mode( context ) == LR1110_HAL_OP_MODE_RX_DC ) )
 8043bd8:	6878      	ldr	r0, [r7, #4]
 8043bda:	f000 f82d 	bl	8043c38 <lr1110_hal_get_operating_mode>
 8043bde:	4603      	mov	r3, r0
    if( ( lr1110_hal_get_operating_mode( context ) == LR1110_HAL_OP_MODE_SLEEP ) ||
 8043be0:	2b07      	cmp	r3, #7
 8043be2:	d10f      	bne.n	8043c04 <lr1110_hal_wakeup+0x40>
    {
        // Wakeup radio
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 0 );
 8043be4:	687b      	ldr	r3, [r7, #4]
 8043be6:	337c      	adds	r3, #124	; 0x7c
 8043be8:	2100      	movs	r1, #0
 8043bea:	4618      	mov	r0, r3
 8043bec:	f7fd fa58 	bl	80410a0 <GpioWrite>
        GpioWrite( &( ( lr1110_t* ) context )->spi.Nss, 1 );
 8043bf0:	687b      	ldr	r3, [r7, #4]
 8043bf2:	337c      	adds	r3, #124	; 0x7c
 8043bf4:	2101      	movs	r1, #1
 8043bf6:	4618      	mov	r0, r3
 8043bf8:	f7fd fa52 	bl	80410a0 <GpioWrite>
        // Radio is awake in STDBY_RC mode
        ( ( lr1110_t* ) context )->op_mode = LR1110_HAL_OP_MODE_STDBY_RC;
 8043bfc:	687b      	ldr	r3, [r7, #4]
 8043bfe:	2201      	movs	r2, #1
 8043c00:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    }

    // Wait on busy pin for 100 ms
    return lr1110_hal_wait_on_busy( context );
 8043c04:	6878      	ldr	r0, [r7, #4]
 8043c06:	f000 f805 	bl	8043c14 <lr1110_hal_wait_on_busy>
 8043c0a:	4603      	mov	r3, r0
}
 8043c0c:	4618      	mov	r0, r3
 8043c0e:	3708      	adds	r7, #8
 8043c10:	46bd      	mov	sp, r7
 8043c12:	bd80      	pop	{r7, pc}

08043c14 <lr1110_hal_wait_on_busy>:

static lr1110_hal_status_t lr1110_hal_wait_on_busy( const void* context )
{
 8043c14:	b580      	push	{r7, lr}
 8043c16:	b082      	sub	sp, #8
 8043c18:	af00      	add	r7, sp, #0
 8043c1a:	6078      	str	r0, [r7, #4]
    while( GpioRead( &( ( lr1110_t* ) context )->busy ) == 1 )
 8043c1c:	bf00      	nop
 8043c1e:	687b      	ldr	r3, [r7, #4]
 8043c20:	3314      	adds	r3, #20
 8043c22:	4618      	mov	r0, r3
 8043c24:	f7fd fa55 	bl	80410d2 <GpioRead>
 8043c28:	4603      	mov	r3, r0
 8043c2a:	2b01      	cmp	r3, #1
 8043c2c:	d0f7      	beq.n	8043c1e <lr1110_hal_wait_on_busy+0xa>
    {
        ;
    }
    return LR1110_HAL_STATUS_OK;
 8043c2e:	2300      	movs	r3, #0
}
 8043c30:	4618      	mov	r0, r3
 8043c32:	3708      	adds	r7, #8
 8043c34:	46bd      	mov	sp, r7
 8043c36:	bd80      	pop	{r7, pc}

08043c38 <lr1110_hal_get_operating_mode>:

lr1110_hal_operating_mode_t lr1110_hal_get_operating_mode( const void* context )
{
 8043c38:	b480      	push	{r7}
 8043c3a:	b083      	sub	sp, #12
 8043c3c:	af00      	add	r7, sp, #0
 8043c3e:	6078      	str	r0, [r7, #4]
    return ( ( lr1110_t* ) context )->op_mode;
 8043c40:	687b      	ldr	r3, [r7, #4]
 8043c42:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
}
 8043c46:	4618      	mov	r0, r3
 8043c48:	370c      	adds	r7, #12
 8043c4a:	46bd      	mov	sp, r7
 8043c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c50:	4770      	bx	lr

08043c52 <lr1110_hal_set_operating_mode>:

void lr1110_hal_set_operating_mode( const void* context, lr1110_hal_operating_mode_t op_mode )
{
 8043c52:	b480      	push	{r7}
 8043c54:	b083      	sub	sp, #12
 8043c56:	af00      	add	r7, sp, #0
 8043c58:	6078      	str	r0, [r7, #4]
 8043c5a:	460b      	mov	r3, r1
 8043c5c:	70fb      	strb	r3, [r7, #3]
    ( ( lr1110_t* ) context )->op_mode = op_mode;
 8043c5e:	687b      	ldr	r3, [r7, #4]
 8043c60:	78fa      	ldrb	r2, [r7, #3]
 8043c62:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
        GpioWrite( &DbgPinTx, 0 );
        GpioWrite( &DbgPinRx, 0 );
        break;
    }
#endif
}
 8043c66:	bf00      	nop
 8043c68:	370c      	adds	r7, #12
 8043c6a:	46bd      	mov	sp, r7
 8043c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043c70:	4770      	bx	lr
	...

08043c74 <RadioGetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t RadioGetFskBandwidthRegValue( uint32_t bandwidth )
{
 8043c74:	b480      	push	{r7}
 8043c76:	b085      	sub	sp, #20
 8043c78:	af00      	add	r7, sp, #0
 8043c7a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8043c7c:	687b      	ldr	r3, [r7, #4]
 8043c7e:	2b00      	cmp	r3, #0
 8043c80:	d101      	bne.n	8043c86 <RadioGetFskBandwidthRegValue+0x12>
    {
        return ( 0x1F );
 8043c82:	231f      	movs	r3, #31
 8043c84:	e01f      	b.n	8043cc6 <RadioGetFskBandwidthRegValue+0x52>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8043c86:	2300      	movs	r3, #0
 8043c88:	73fb      	strb	r3, [r7, #15]
 8043c8a:	e018      	b.n	8043cbe <RadioGetFskBandwidthRegValue+0x4a>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 8043c8c:	7bfb      	ldrb	r3, [r7, #15]
 8043c8e:	4a11      	ldr	r2, [pc, #68]	; (8043cd4 <RadioGetFskBandwidthRegValue+0x60>)
 8043c90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8043c94:	687a      	ldr	r2, [r7, #4]
 8043c96:	429a      	cmp	r2, r3
 8043c98:	d30e      	bcc.n	8043cb8 <RadioGetFskBandwidthRegValue+0x44>
 8043c9a:	7bfb      	ldrb	r3, [r7, #15]
 8043c9c:	3301      	adds	r3, #1
 8043c9e:	4a0d      	ldr	r2, [pc, #52]	; (8043cd4 <RadioGetFskBandwidthRegValue+0x60>)
 8043ca0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8043ca4:	687a      	ldr	r2, [r7, #4]
 8043ca6:	429a      	cmp	r2, r3
 8043ca8:	d206      	bcs.n	8043cb8 <RadioGetFskBandwidthRegValue+0x44>
        {
            return FskBandwidths[i + 1].RegValue;
 8043caa:	7bfb      	ldrb	r3, [r7, #15]
 8043cac:	3301      	adds	r3, #1
 8043cae:	4a09      	ldr	r2, [pc, #36]	; (8043cd4 <RadioGetFskBandwidthRegValue+0x60>)
 8043cb0:	00db      	lsls	r3, r3, #3
 8043cb2:	4413      	add	r3, r2
 8043cb4:	791b      	ldrb	r3, [r3, #4]
 8043cb6:	e006      	b.n	8043cc6 <RadioGetFskBandwidthRegValue+0x52>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8043cb8:	7bfb      	ldrb	r3, [r7, #15]
 8043cba:	3301      	adds	r3, #1
 8043cbc:	73fb      	strb	r3, [r7, #15]
 8043cbe:	7bfb      	ldrb	r3, [r7, #15]
 8043cc0:	2b14      	cmp	r3, #20
 8043cc2:	d9e3      	bls.n	8043c8c <RadioGetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 )
 8043cc4:	e7fe      	b.n	8043cc4 <RadioGetFskBandwidthRegValue+0x50>
        ;
}
 8043cc6:	4618      	mov	r0, r3
 8043cc8:	3714      	adds	r7, #20
 8043cca:	46bd      	mov	sp, r7
 8043ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043cd0:	4770      	bx	lr
 8043cd2:	bf00      	nop
 8043cd4:	08050028 	.word	0x08050028

08043cd8 <RadioInit>:

void RadioInit( RadioEvents_t* events )
{
 8043cd8:	b580      	push	{r7, lr}
 8043cda:	b082      	sub	sp, #8
 8043cdc:	af00      	add	r7, sp, #0
 8043cde:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8043ce0:	4a15      	ldr	r2, [pc, #84]	; (8043d38 <RadioInit+0x60>)
 8043ce2:	687b      	ldr	r3, [r7, #4]
 8043ce4:	6013      	str	r3, [r2, #0]

    lr1110_board_init( &LR1110, RadioOnDioIrq );
 8043ce6:	4915      	ldr	r1, [pc, #84]	; (8043d3c <RadioInit+0x64>)
 8043ce8:	4815      	ldr	r0, [pc, #84]	; (8043d40 <RadioInit+0x68>)
 8043cea:	f7ff fddf 	bl	80438ac <lr1110_board_init>

    lr1110_system_set_standby( &LR1110, LR1110_SYSTEM_STANDBY_CFG_RC );
 8043cee:	2100      	movs	r1, #0
 8043cf0:	4813      	ldr	r0, [pc, #76]	; (8043d40 <RadioInit+0x68>)
 8043cf2:	f002 fca9 	bl	8046648 <lr1110_system_set_standby>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_STDBY_RC );
 8043cf6:	2101      	movs	r1, #1
 8043cf8:	4811      	ldr	r0, [pc, #68]	; (8043d40 <RadioInit+0x68>)
 8043cfa:	f7ff ffaa 	bl	8043c52 <lr1110_hal_set_operating_mode>

    lr1110_system_set_reg_mode( &LR1110, LR1110_SYSTEM_REG_MODE_DCDC );
 8043cfe:	2101      	movs	r1, #1
 8043d00:	480f      	ldr	r0, [pc, #60]	; (8043d40 <RadioInit+0x68>)
 8043d02:	f002 fbce 	bl	80464a2 <lr1110_system_set_reg_mode>

    lr1110_radio_set_tx_params( &LR1110, 0, LR1110_RADIO_RAMP_208_US );
 8043d06:	220c      	movs	r2, #12
 8043d08:	2100      	movs	r1, #0
 8043d0a:	480d      	ldr	r0, [pc, #52]	; (8043d40 <RadioInit+0x68>)
 8043d0c:	f002 f8c9 	bl	8045ea2 <lr1110_radio_set_tx_params>
    lr1110_system_set_dio_irq_params( &LR1110, LR1110_SYSTEM_IRQ_ALL_MASK, LR1110_SYSTEM_IRQ_NONE );
 8043d10:	2200      	movs	r2, #0
 8043d12:	490c      	ldr	r1, [pc, #48]	; (8043d44 <RadioInit+0x6c>)
 8043d14:	480a      	ldr	r0, [pc, #40]	; (8043d40 <RadioInit+0x68>)
 8043d16:	f002 fc0d 	bl	8046534 <lr1110_system_set_dio_irq_params>

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8043d1a:	490b      	ldr	r1, [pc, #44]	; (8043d48 <RadioInit+0x70>)
 8043d1c:	480b      	ldr	r0, [pc, #44]	; (8043d4c <RadioInit+0x74>)
 8043d1e:	f7fe fecf 	bl	8042ac0 <TimerInit>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8043d22:	490b      	ldr	r1, [pc, #44]	; (8043d50 <RadioInit+0x78>)
 8043d24:	480b      	ldr	r0, [pc, #44]	; (8043d54 <RadioInit+0x7c>)
 8043d26:	f7fe fecb 	bl	8042ac0 <TimerInit>

    IrqFired = false;
 8043d2a:	4b0b      	ldr	r3, [pc, #44]	; (8043d58 <RadioInit+0x80>)
 8043d2c:	2200      	movs	r2, #0
 8043d2e:	701a      	strb	r2, [r3, #0]
}
 8043d30:	bf00      	nop
 8043d32:	3708      	adds	r7, #8
 8043d34:	46bd      	mov	sp, r7
 8043d36:	bd80      	pop	{r7, pc}
 8043d38:	200183b8 	.word	0x200183b8
 8043d3c:	08044aed 	.word	0x08044aed
 8043d40:	2001964c 	.word	0x2001964c
 8043d44:	03f807fc 	.word	0x03f807fc
 8043d48:	08044a8d 	.word	0x08044a8d
 8043d4c:	20019708 	.word	0x20019708
 8043d50:	08044abd 	.word	0x08044abd
 8043d54:	2001982c 	.word	0x2001982c
 8043d58:	200183b1 	.word	0x200183b1

08043d5c <RadioGetStatus>:

RadioState_t RadioGetStatus( void )
{
 8043d5c:	b580      	push	{r7, lr}
 8043d5e:	af00      	add	r7, sp, #0
    switch( lr1110_hal_get_operating_mode( &LR1110 ) )
 8043d60:	480c      	ldr	r0, [pc, #48]	; (8043d94 <RadioGetStatus+0x38>)
 8043d62:	f7ff ff69 	bl	8043c38 <lr1110_hal_get_operating_mode>
 8043d66:	4603      	mov	r3, r0
 8043d68:	2b08      	cmp	r3, #8
 8043d6a:	d00d      	beq.n	8043d88 <RadioGetStatus+0x2c>
 8043d6c:	2b08      	cmp	r3, #8
 8043d6e:	dc0d      	bgt.n	8043d8c <RadioGetStatus+0x30>
 8043d70:	2b04      	cmp	r3, #4
 8043d72:	d005      	beq.n	8043d80 <RadioGetStatus+0x24>
 8043d74:	2b04      	cmp	r3, #4
 8043d76:	db09      	blt.n	8043d8c <RadioGetStatus+0x30>
 8043d78:	3b05      	subs	r3, #5
 8043d7a:	2b02      	cmp	r3, #2
 8043d7c:	d806      	bhi.n	8043d8c <RadioGetStatus+0x30>
 8043d7e:	e001      	b.n	8043d84 <RadioGetStatus+0x28>
    {
    case LR1110_HAL_OP_MODE_TX:
        return RF_TX_RUNNING;
 8043d80:	2302      	movs	r3, #2
 8043d82:	e004      	b.n	8043d8e <RadioGetStatus+0x32>
    case LR1110_HAL_OP_MODE_RX:
    case LR1110_HAL_OP_MODE_RX_C:
    case LR1110_HAL_OP_MODE_RX_DC:
        return RF_RX_RUNNING;
 8043d84:	2301      	movs	r3, #1
 8043d86:	e002      	b.n	8043d8e <RadioGetStatus+0x32>
    case LR1110_HAL_OP_MODE_CAD:
        return RF_CAD;
 8043d88:	2303      	movs	r3, #3
 8043d8a:	e000      	b.n	8043d8e <RadioGetStatus+0x32>
    default:
        return RF_IDLE;
 8043d8c:	2300      	movs	r3, #0
    }
}
 8043d8e:	4618      	mov	r0, r3
 8043d90:	bd80      	pop	{r7, pc}
 8043d92:	bf00      	nop
 8043d94:	2001964c 	.word	0x2001964c

08043d98 <RadioSetModem>:

void RadioSetModem( RadioModems_t modem )
{
 8043d98:	b580      	push	{r7, lr}
 8043d9a:	b082      	sub	sp, #8
 8043d9c:	af00      	add	r7, sp, #0
 8043d9e:	4603      	mov	r3, r0
 8043da0:	71fb      	strb	r3, [r7, #7]
    switch( modem )
 8043da2:	79fb      	ldrb	r3, [r7, #7]
 8043da4:	2b01      	cmp	r3, #1
 8043da6:	d007      	beq.n	8043db8 <RadioSetModem+0x20>
    {
    default:
    case MODEM_FSK:
    	lr1110_radio_set_pkt_type( &LR1110, LR1110_RADIO_PKT_TYPE_GFSK );
 8043da8:	2101      	movs	r1, #1
 8043daa:	480f      	ldr	r0, [pc, #60]	; (8043de8 <RadioSetModem+0x50>)
 8043dac:	f001 ff96 	bl	8045cdc <lr1110_radio_set_pkt_type>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        RadioPublicNetwork.Current = false;
 8043db0:	4b0e      	ldr	r3, [pc, #56]	; (8043dec <RadioSetModem+0x54>)
 8043db2:	2200      	movs	r2, #0
 8043db4:	705a      	strb	r2, [r3, #1]
        break;
 8043db6:	e013      	b.n	8043de0 <RadioSetModem+0x48>
    case MODEM_LORA:
        lr1110_radio_set_pkt_type( &LR1110, LR1110_RADIO_PKT_TYPE_LORA );
 8043db8:	2102      	movs	r1, #2
 8043dba:	480b      	ldr	r0, [pc, #44]	; (8043de8 <RadioSetModem+0x50>)
 8043dbc:	f001 ff8e 	bl	8045cdc <lr1110_radio_set_pkt_type>
        // Public/Private network register is reset when switching modems
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 8043dc0:	4b0a      	ldr	r3, [pc, #40]	; (8043dec <RadioSetModem+0x54>)
 8043dc2:	785a      	ldrb	r2, [r3, #1]
 8043dc4:	4b09      	ldr	r3, [pc, #36]	; (8043dec <RadioSetModem+0x54>)
 8043dc6:	781b      	ldrb	r3, [r3, #0]
 8043dc8:	429a      	cmp	r2, r3
 8043dca:	d008      	beq.n	8043dde <RadioSetModem+0x46>
        {
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 8043dcc:	4b07      	ldr	r3, [pc, #28]	; (8043dec <RadioSetModem+0x54>)
 8043dce:	781a      	ldrb	r2, [r3, #0]
 8043dd0:	4b06      	ldr	r3, [pc, #24]	; (8043dec <RadioSetModem+0x54>)
 8043dd2:	705a      	strb	r2, [r3, #1]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 8043dd4:	4b05      	ldr	r3, [pc, #20]	; (8043dec <RadioSetModem+0x54>)
 8043dd6:	785b      	ldrb	r3, [r3, #1]
 8043dd8:	4618      	mov	r0, r3
 8043dda:	f000 fe27 	bl	8044a2c <RadioSetPublicNetwork>
        }
        break;
 8043dde:	bf00      	nop
    }
}
 8043de0:	bf00      	nop
 8043de2:	3708      	adds	r7, #8
 8043de4:	46bd      	mov	sp, r7
 8043de6:	bd80      	pop	{r7, pc}
 8043de8:	2001964c 	.word	0x2001964c
 8043dec:	200183b4 	.word	0x200183b4

08043df0 <RadioSetChannel>:

void RadioSetChannel( uint32_t freq )
{
 8043df0:	b580      	push	{r7, lr}
 8043df2:	b082      	sub	sp, #8
 8043df4:	af00      	add	r7, sp, #0
 8043df6:	6078      	str	r0, [r7, #4]
    lr1110_radio_set_rf_freq( &LR1110, freq );
 8043df8:	6879      	ldr	r1, [r7, #4]
 8043dfa:	4803      	ldr	r0, [pc, #12]	; (8043e08 <RadioSetChannel+0x18>)
 8043dfc:	f001 ff48 	bl	8045c90 <lr1110_radio_set_rf_freq>
}
 8043e00:	bf00      	nop
 8043e02:	3708      	adds	r7, #8
 8043e04:	46bd      	mov	sp, r7
 8043e06:	bd80      	pop	{r7, pc}
 8043e08:	2001964c 	.word	0x2001964c

08043e0c <RadioIsChannelFree>:

bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8043e0c:	b580      	push	{r7, lr}
 8043e0e:	b090      	sub	sp, #64	; 0x40
 8043e10:	af0a      	add	r7, sp, #40	; 0x28
 8043e12:	60f8      	str	r0, [r7, #12]
 8043e14:	60b9      	str	r1, [r7, #8]
 8043e16:	603b      	str	r3, [r7, #0]
 8043e18:	4613      	mov	r3, r2
 8043e1a:	80fb      	strh	r3, [r7, #6]
    bool     status           = true;
 8043e1c:	2301      	movs	r3, #1
 8043e1e:	75fb      	strb	r3, [r7, #23]
    int16_t  rssi             = 0;
 8043e20:	2300      	movs	r3, #0
 8043e22:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8043e24:	2300      	movs	r3, #0
 8043e26:	613b      	str	r3, [r7, #16]

    RadioSetModem( MODEM_FSK );
 8043e28:	2000      	movs	r0, #0
 8043e2a:	f7ff ffb5 	bl	8043d98 <RadioSetModem>

    RadioSetChannel( freq );
 8043e2e:	68f8      	ldr	r0, [r7, #12]
 8043e30:	f7ff ffde 	bl	8043df0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8043e34:	2301      	movs	r3, #1
 8043e36:	9309      	str	r3, [sp, #36]	; 0x24
 8043e38:	2300      	movs	r3, #0
 8043e3a:	9308      	str	r3, [sp, #32]
 8043e3c:	2300      	movs	r3, #0
 8043e3e:	9307      	str	r3, [sp, #28]
 8043e40:	2300      	movs	r3, #0
 8043e42:	9306      	str	r3, [sp, #24]
 8043e44:	2300      	movs	r3, #0
 8043e46:	9305      	str	r3, [sp, #20]
 8043e48:	2300      	movs	r3, #0
 8043e4a:	9304      	str	r3, [sp, #16]
 8043e4c:	2300      	movs	r3, #0
 8043e4e:	9303      	str	r3, [sp, #12]
 8043e50:	2300      	movs	r3, #0
 8043e52:	9302      	str	r3, [sp, #8]
 8043e54:	2303      	movs	r3, #3
 8043e56:	9301      	str	r3, [sp, #4]
 8043e58:	68bb      	ldr	r3, [r7, #8]
 8043e5a:	9300      	str	r3, [sp, #0]
 8043e5c:	2300      	movs	r3, #0
 8043e5e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8043e62:	68b9      	ldr	r1, [r7, #8]
 8043e64:	2000      	movs	r0, #0
 8043e66:	f000 f83b 	bl	8043ee0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8043e6a:	2000      	movs	r0, #0
 8043e6c:	f000 fc76 	bl	804475c <RadioRx>

    DelayMs( 1 );
 8043e70:	2001      	movs	r0, #1
 8043e72:	f7fc fdd1 	bl	8040a18 <DelayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 8043e76:	f7ff f81c 	bl	8042eb2 <TimerGetCurrentTime>
 8043e7a:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8043e7c:	e00d      	b.n	8043e9a <RadioIsChannelFree+0x8e>
    {
        rssi = RadioRssi( MODEM_FSK );
 8043e7e:	2000      	movs	r0, #0
 8043e80:	f000 fd3a 	bl	80448f8 <RadioRssi>
 8043e84:	4603      	mov	r3, r0
 8043e86:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8043e88:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8043e8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8043e90:	429a      	cmp	r2, r3
 8043e92:	dd02      	ble.n	8043e9a <RadioIsChannelFree+0x8e>
        {
            status = false;
 8043e94:	2300      	movs	r3, #0
 8043e96:	75fb      	strb	r3, [r7, #23]
            break;
 8043e98:	e006      	b.n	8043ea8 <RadioIsChannelFree+0x9c>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8043e9a:	6938      	ldr	r0, [r7, #16]
 8043e9c:	f7ff f817 	bl	8042ece <TimerGetElapsedTime>
 8043ea0:	4602      	mov	r2, r0
 8043ea2:	683b      	ldr	r3, [r7, #0]
 8043ea4:	4293      	cmp	r3, r2
 8043ea6:	d8ea      	bhi.n	8043e7e <RadioIsChannelFree+0x72>
        }
    }
    RadioSleep( );
 8043ea8:	f000 fc30 	bl	804470c <RadioSleep>
    return status;
 8043eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8043eae:	4618      	mov	r0, r3
 8043eb0:	3718      	adds	r7, #24
 8043eb2:	46bd      	mov	sp, r7
 8043eb4:	bd80      	pop	{r7, pc}
	...

08043eb8 <RadioRandom>:

uint32_t RadioRandom( void )
{
 8043eb8:	b580      	push	{r7, lr}
 8043eba:	b082      	sub	sp, #8
 8043ebc:	af00      	add	r7, sp, #0
    uint32_t rnd  = 0;
 8043ebe:	2300      	movs	r3, #0
 8043ec0:	607b      	str	r3, [r7, #4]

    RadioStandby( );
 8043ec2:	f000 fc3d 	bl	8044740 <RadioStandby>

    lr1110_system_get_random_number( &LR1110, &rnd );
 8043ec6:	1d3b      	adds	r3, r7, #4
 8043ec8:	4619      	mov	r1, r3
 8043eca:	4804      	ldr	r0, [pc, #16]	; (8043edc <RadioRandom+0x24>)
 8043ecc:	f002 fbd6 	bl	804667c <lr1110_system_get_random_number>

    return rnd;
 8043ed0:	687b      	ldr	r3, [r7, #4]
}
 8043ed2:	4618      	mov	r0, r3
 8043ed4:	3708      	adds	r7, #8
 8043ed6:	46bd      	mov	sp, r7
 8043ed8:	bd80      	pop	{r7, pc}
 8043eda:	bf00      	nop
 8043edc:	2001964c 	.word	0x2001964c

08043ee0 <RadioSetRxConfig>:

void RadioSetRxConfig( RadioModems_t modem, uint32_t bandwidth, uint32_t datarate, uint8_t coderate,
                       uint32_t bandwidthAfc, uint16_t preambleLen, uint16_t symbTimeout, bool fixLen,
                       uint8_t payloadLen, bool crcOn, bool freqHopOn, uint8_t hopPeriod, bool iqInverted,
                       bool rxContinuous )
{
 8043ee0:	b580      	push	{r7, lr}
 8043ee2:	b086      	sub	sp, #24
 8043ee4:	af00      	add	r7, sp, #0
 8043ee6:	60b9      	str	r1, [r7, #8]
 8043ee8:	607a      	str	r2, [r7, #4]
 8043eea:	461a      	mov	r2, r3
 8043eec:	4603      	mov	r3, r0
 8043eee:	73fb      	strb	r3, [r7, #15]
 8043ef0:	4613      	mov	r3, r2
 8043ef2:	73bb      	strb	r3, [r7, #14]
    RxContinuous = rxContinuous;
 8043ef4:	4a94      	ldr	r2, [pc, #592]	; (8044148 <RadioSetRxConfig+0x268>)
 8043ef6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8043efa:	7013      	strb	r3, [r2, #0]
    if( rxContinuous == true )
 8043efc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8043f00:	2b00      	cmp	r3, #0
 8043f02:	d001      	beq.n	8043f08 <RadioSetRxConfig+0x28>
    {
        symbTimeout = 0;
 8043f04:	2300      	movs	r3, #0
 8043f06:	853b      	strh	r3, [r7, #40]	; 0x28
    }
    if( fixLen == true )
 8043f08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8043f0c:	2b00      	cmp	r3, #0
 8043f0e:	d004      	beq.n	8043f1a <RadioSetRxConfig+0x3a>
    {
        MaxPayloadLength = payloadLen;
 8043f10:	4a8e      	ldr	r2, [pc, #568]	; (804414c <RadioSetRxConfig+0x26c>)
 8043f12:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8043f16:	7013      	strb	r3, [r2, #0]
 8043f18:	e002      	b.n	8043f20 <RadioSetRxConfig+0x40>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8043f1a:	4b8c      	ldr	r3, [pc, #560]	; (804414c <RadioSetRxConfig+0x26c>)
 8043f1c:	22ff      	movs	r2, #255	; 0xff
 8043f1e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8043f20:	7bfb      	ldrb	r3, [r7, #15]
 8043f22:	2b00      	cmp	r3, #0
 8043f24:	d003      	beq.n	8043f2e <RadioSetRxConfig+0x4e>
 8043f26:	2b01      	cmp	r3, #1
 8043f28:	f000 8089 	beq.w	804403e <RadioSetRxConfig+0x15e>
        // Timeout Max, Timeout handled directly in SetRx function
        RxTimeout = 0xFFFF;

        break;
    }
}
 8043f2c:	e108      	b.n	8044140 <RadioSetRxConfig+0x260>
        lr1110_radio_stop_timeout_on_preamble( &LR1110, false );
 8043f2e:	2100      	movs	r1, #0
 8043f30:	4887      	ldr	r0, [pc, #540]	; (8044150 <RadioSetRxConfig+0x270>)
 8043f32:	f002 f842 	bl	8045fba <lr1110_radio_stop_timeout_on_preamble>
        LR1110.modulation_params.packet_type = LR1110_RADIO_PKT_TYPE_GFSK;
 8043f36:	4b86      	ldr	r3, [pc, #536]	; (8044150 <RadioSetRxConfig+0x270>)
 8043f38:	2201      	movs	r2, #1
 8043f3a:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        LR1110.modulation_params.modulation.gfsk.br_in_bps     = datarate;
 8043f3e:	4a84      	ldr	r2, [pc, #528]	; (8044150 <RadioSetRxConfig+0x270>)
 8043f40:	687b      	ldr	r3, [r7, #4]
 8043f42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
        LR1110.modulation_params.modulation.gfsk.pulse_shape = LR1110_RADIO_GFSK_PULSE_SHAPE_BT_1;
 8043f46:	4b82      	ldr	r3, [pc, #520]	; (8044150 <RadioSetRxConfig+0x270>)
 8043f48:	220b      	movs	r2, #11
 8043f4a:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            ( lr1110_radio_gfsk_bw_t ) RadioGetFskBandwidthRegValue( bandwidth << 1 ); // LR1110 badwidth is double sided
 8043f4e:	68bb      	ldr	r3, [r7, #8]
 8043f50:	005b      	lsls	r3, r3, #1
 8043f52:	4618      	mov	r0, r3
 8043f54:	f7ff fe8e 	bl	8043c74 <RadioGetFskBandwidthRegValue>
 8043f58:	4603      	mov	r3, r0
 8043f5a:	461a      	mov	r2, r3
        LR1110.modulation_params.modulation.gfsk.bw_dsb_param =
 8043f5c:	4b7c      	ldr	r3, [pc, #496]	; (8044150 <RadioSetRxConfig+0x270>)
 8043f5e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
        LR1110.packet_params.packet_type                     = LR1110_RADIO_PKT_TYPE_GFSK;
 8043f62:	4b7b      	ldr	r3, [pc, #492]	; (8044150 <RadioSetRxConfig+0x270>)
 8043f64:	2201      	movs	r2, #1
 8043f66:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        LR1110.packet_params.packet.gfsk.preamble_len_in_bits = ( preambleLen << 3 );  // convert byte into bit
 8043f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8043f6c:	00db      	lsls	r3, r3, #3
 8043f6e:	b29a      	uxth	r2, r3
 8043f70:	4b77      	ldr	r3, [pc, #476]	; (8044150 <RadioSetRxConfig+0x270>)
 8043f72:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        LR1110.packet_params.packet.gfsk.preamble_detector    = LR1110_RADIO_GFSK_PREAMBLE_DETECTOR_MIN_8BITS;
 8043f76:	4b76      	ldr	r3, [pc, #472]	; (8044150 <RadioSetRxConfig+0x270>)
 8043f78:	2204      	movs	r2, #4
 8043f7a:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        LR1110.packet_params.packet.gfsk.sync_word_len_in_bits = 3 << 3;  // convert byte into bit
 8043f7e:	4b74      	ldr	r3, [pc, #464]	; (8044150 <RadioSetRxConfig+0x270>)
 8043f80:	2218      	movs	r2, #24
 8043f82:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
        LR1110.packet_params.packet.gfsk.address_filtering         = LR1110_RADIO_GFSK_ADDRESS_FILTERING_DISABLE;
 8043f86:	4b72      	ldr	r3, [pc, #456]	; (8044150 <RadioSetRxConfig+0x270>)
 8043f88:	2200      	movs	r2, #0
 8043f8a:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
            ( fixLen == true ) ? LR1110_RADIO_GFSK_PKT_FIX_LEN : LR1110_RADIO_GFSK_PKT_VAR_LEN;
 8043f8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8043f92:	f083 0301 	eor.w	r3, r3, #1
 8043f96:	b2db      	uxtb	r3, r3
 8043f98:	461a      	mov	r2, r3
        LR1110.packet_params.packet.gfsk.header_type =
 8043f9a:	4b6d      	ldr	r3, [pc, #436]	; (8044150 <RadioSetRxConfig+0x270>)
 8043f9c:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
        LR1110.packet_params.packet.gfsk.pld_len_in_bytes = MaxPayloadLength;
 8043fa0:	4b6a      	ldr	r3, [pc, #424]	; (804414c <RadioSetRxConfig+0x26c>)
 8043fa2:	781a      	ldrb	r2, [r3, #0]
 8043fa4:	4b6a      	ldr	r3, [pc, #424]	; (8044150 <RadioSetRxConfig+0x270>)
 8043fa6:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
        if( crcOn == true )
 8043faa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8043fae:	2b00      	cmp	r3, #0
 8043fb0:	d004      	beq.n	8043fbc <RadioSetRxConfig+0xdc>
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_2_BYTES_INV;
 8043fb2:	4b67      	ldr	r3, [pc, #412]	; (8044150 <RadioSetRxConfig+0x270>)
 8043fb4:	2206      	movs	r2, #6
 8043fb6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8043fba:	e003      	b.n	8043fc4 <RadioSetRxConfig+0xe4>
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_OFF;
 8043fbc:	4b64      	ldr	r3, [pc, #400]	; (8044150 <RadioSetRxConfig+0x270>)
 8043fbe:	2201      	movs	r2, #1
 8043fc0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
        LR1110.packet_params.packet.gfsk.dc_free = LR1110_RADIO_GFSK_DC_FREE_WHITENING;
 8043fc4:	4b62      	ldr	r3, [pc, #392]	; (8044150 <RadioSetRxConfig+0x270>)
 8043fc6:	2201      	movs	r2, #1
 8043fc8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
        RadioStandby( );
 8043fcc:	f000 fbb8 	bl	8044740 <RadioStandby>
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PKT_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8043fd0:	4b5f      	ldr	r3, [pc, #380]	; (8044150 <RadioSetRxConfig+0x270>)
 8043fd2:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8043fd6:	2b01      	cmp	r3, #1
 8043fd8:	bf14      	ite	ne
 8043fda:	2301      	movne	r3, #1
 8043fdc:	2300      	moveq	r3, #0
 8043fde:	b2db      	uxtb	r3, r3
 8043fe0:	4618      	mov	r0, r3
 8043fe2:	f7ff fed9 	bl	8043d98 <RadioSetModem>
        lr1110_radio_set_gfsk_mod_params( &LR1110, &LR1110.modulation_params.modulation.gfsk );
 8043fe6:	495b      	ldr	r1, [pc, #364]	; (8044154 <RadioSetRxConfig+0x274>)
 8043fe8:	4859      	ldr	r0, [pc, #356]	; (8044150 <RadioSetRxConfig+0x270>)
 8043fea:	f001 fe91 	bl	8045d10 <lr1110_radio_set_gfsk_mod_params>
        lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
 8043fee:	495a      	ldr	r1, [pc, #360]	; (8044158 <RadioSetRxConfig+0x278>)
 8043ff0:	4857      	ldr	r0, [pc, #348]	; (8044150 <RadioSetRxConfig+0x270>)
 8043ff2:	f001 fef3 	bl	8045ddc <lr1110_radio_set_gfsk_pkt_params>
        lr1110_radio_set_gfsk_sync_word( &LR1110, ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8043ff6:	4a59      	ldr	r2, [pc, #356]	; (804415c <RadioSetRxConfig+0x27c>)
 8043ff8:	f107 0310 	add.w	r3, r7, #16
 8043ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8044000:	e883 0003 	stmia.w	r3, {r0, r1}
 8044004:	f107 0310 	add.w	r3, r7, #16
 8044008:	4619      	mov	r1, r3
 804400a:	4851      	ldr	r0, [pc, #324]	; (8044150 <RadioSetRxConfig+0x270>)
 804400c:	f001 fd93 	bl	8045b36 <lr1110_radio_set_gfsk_sync_word>
        lr1110_radio_set_gfsk_crc_params( &LR1110, 0x1D0F, 0x1021 );
 8044010:	f241 0221 	movw	r2, #4129	; 0x1021
 8044014:	f641 510f 	movw	r1, #7439	; 0x1d0f
 8044018:	484d      	ldr	r0, [pc, #308]	; (8044150 <RadioSetRxConfig+0x270>)
 804401a:	f002 f82e 	bl	804607a <lr1110_radio_set_gfsk_crc_params>
        lr1110_radio_set_gfsk_whitening_seed( &LR1110, 0x01FF );
 804401e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8044022:	484b      	ldr	r0, [pc, #300]	; (8044150 <RadioSetRxConfig+0x270>)
 8044024:	f002 f85f 	bl	80460e6 <lr1110_radio_set_gfsk_whitening_seed>
        RxTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8044028:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804402a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 804402e:	fb02 f203 	mul.w	r2, r2, r3
 8044032:	687b      	ldr	r3, [r7, #4]
 8044034:	fbb2 f3f3 	udiv	r3, r2, r3
 8044038:	4a49      	ldr	r2, [pc, #292]	; (8044160 <RadioSetRxConfig+0x280>)
 804403a:	6013      	str	r3, [r2, #0]
        break;
 804403c:	e080      	b.n	8044140 <RadioSetRxConfig+0x260>
        lr1110_radio_stop_timeout_on_preamble( &LR1110, false );
 804403e:	2100      	movs	r1, #0
 8044040:	4843      	ldr	r0, [pc, #268]	; (8044150 <RadioSetRxConfig+0x270>)
 8044042:	f001 ffba 	bl	8045fba <lr1110_radio_stop_timeout_on_preamble>
        lr1110_radio_set_lora_sync_timeout( &LR1110, symbTimeout );
 8044046:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8044048:	b2db      	uxtb	r3, r3
 804404a:	4619      	mov	r1, r3
 804404c:	4840      	ldr	r0, [pc, #256]	; (8044150 <RadioSetRxConfig+0x270>)
 804404e:	f001 fffa 	bl	8046046 <lr1110_radio_set_lora_sync_timeout>
        LR1110.modulation_params.packet_type            = LR1110_RADIO_PKT_TYPE_LORA;
 8044052:	4b3f      	ldr	r3, [pc, #252]	; (8044150 <RadioSetRxConfig+0x270>)
 8044054:	2202      	movs	r2, #2
 8044056:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        LR1110.modulation_params.modulation.lora.sf = ( lr1110_radio_lora_sf_t ) datarate;
 804405a:	687b      	ldr	r3, [r7, #4]
 804405c:	b2da      	uxtb	r2, r3
 804405e:	4b3c      	ldr	r3, [pc, #240]	; (8044150 <RadioSetRxConfig+0x270>)
 8044060:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        LR1110.modulation_params.modulation.lora.bw = Bandwidths[bandwidth];
 8044064:	4a3f      	ldr	r2, [pc, #252]	; (8044164 <RadioSetRxConfig+0x284>)
 8044066:	68bb      	ldr	r3, [r7, #8]
 8044068:	4413      	add	r3, r2
 804406a:	781a      	ldrb	r2, [r3, #0]
 804406c:	4b38      	ldr	r3, [pc, #224]	; (8044150 <RadioSetRxConfig+0x270>)
 804406e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        LR1110.modulation_params.modulation.lora.cr = ( lr1110_radio_lora_cr_t ) coderate;
 8044072:	4a37      	ldr	r2, [pc, #220]	; (8044150 <RadioSetRxConfig+0x270>)
 8044074:	7bbb      	ldrb	r3, [r7, #14]
 8044076:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
        if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 804407a:	68bb      	ldr	r3, [r7, #8]
 804407c:	2b00      	cmp	r3, #0
 804407e:	d105      	bne.n	804408c <RadioSetRxConfig+0x1ac>
 8044080:	687b      	ldr	r3, [r7, #4]
 8044082:	2b0b      	cmp	r3, #11
 8044084:	d008      	beq.n	8044098 <RadioSetRxConfig+0x1b8>
 8044086:	687b      	ldr	r3, [r7, #4]
 8044088:	2b0c      	cmp	r3, #12
 804408a:	d005      	beq.n	8044098 <RadioSetRxConfig+0x1b8>
 804408c:	68bb      	ldr	r3, [r7, #8]
 804408e:	2b01      	cmp	r3, #1
 8044090:	d107      	bne.n	80440a2 <RadioSetRxConfig+0x1c2>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8044092:	687b      	ldr	r3, [r7, #4]
 8044094:	2b0c      	cmp	r3, #12
 8044096:	d104      	bne.n	80440a2 <RadioSetRxConfig+0x1c2>
            LR1110.modulation_params.modulation.lora.ldro = 0x01;
 8044098:	4b2d      	ldr	r3, [pc, #180]	; (8044150 <RadioSetRxConfig+0x270>)
 804409a:	2201      	movs	r2, #1
 804409c:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 80440a0:	e003      	b.n	80440aa <RadioSetRxConfig+0x1ca>
            LR1110.modulation_params.modulation.lora.ldro = 0x00;
 80440a2:	4b2b      	ldr	r3, [pc, #172]	; (8044150 <RadioSetRxConfig+0x270>)
 80440a4:	2200      	movs	r2, #0
 80440a6:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        LR1110.packet_params.packet_type = LR1110_RADIO_PKT_TYPE_LORA;
 80440aa:	4b29      	ldr	r3, [pc, #164]	; (8044150 <RadioSetRxConfig+0x270>)
 80440ac:	2202      	movs	r2, #2
 80440ae:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        if( ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF5 ) ||
 80440b2:	4b27      	ldr	r3, [pc, #156]	; (8044150 <RadioSetRxConfig+0x270>)
 80440b4:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80440b8:	2b05      	cmp	r3, #5
 80440ba:	d004      	beq.n	80440c6 <RadioSetRxConfig+0x1e6>
            ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF6 ) )
 80440bc:	4b24      	ldr	r3, [pc, #144]	; (8044150 <RadioSetRxConfig+0x270>)
 80440be:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
        if( ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF5 ) ||
 80440c2:	2b06      	cmp	r3, #6
 80440c4:	d10c      	bne.n	80440e0 <RadioSetRxConfig+0x200>
            if( preambleLen < 12 )
 80440c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80440c8:	2b0b      	cmp	r3, #11
 80440ca:	d804      	bhi.n	80440d6 <RadioSetRxConfig+0x1f6>
                LR1110.packet_params.packet.lora.preamble_len_in_symb = 12;
 80440cc:	4b20      	ldr	r3, [pc, #128]	; (8044150 <RadioSetRxConfig+0x270>)
 80440ce:	220c      	movs	r2, #12
 80440d0:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
            if( preambleLen < 12 )
 80440d4:	e008      	b.n	80440e8 <RadioSetRxConfig+0x208>
                LR1110.packet_params.packet.lora.preamble_len_in_symb = preambleLen;
 80440d6:	4a1e      	ldr	r2, [pc, #120]	; (8044150 <RadioSetRxConfig+0x270>)
 80440d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80440da:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
            if( preambleLen < 12 )
 80440de:	e003      	b.n	80440e8 <RadioSetRxConfig+0x208>
            LR1110.packet_params.packet.lora.preamble_len_in_symb = preambleLen;
 80440e0:	4a1b      	ldr	r2, [pc, #108]	; (8044150 <RadioSetRxConfig+0x270>)
 80440e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80440e4:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
        LR1110.packet_params.packet.lora.header_type = ( lr1110_radio_lora_pkt_len_modes_t ) fixLen;
 80440e8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80440ec:	4b18      	ldr	r3, [pc, #96]	; (8044150 <RadioSetRxConfig+0x270>)
 80440ee:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
        LR1110.packet_params.packet.lora.pld_len_in_bytes = MaxPayloadLength;
 80440f2:	4b16      	ldr	r3, [pc, #88]	; (804414c <RadioSetRxConfig+0x26c>)
 80440f4:	781a      	ldrb	r2, [r3, #0]
 80440f6:	4b16      	ldr	r3, [pc, #88]	; (8044150 <RadioSetRxConfig+0x270>)
 80440f8:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
        LR1110.packet_params.packet.lora.crc                    = ( lr1110_radio_lora_crc_t ) crcOn;
 80440fc:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8044100:	4b13      	ldr	r3, [pc, #76]	; (8044150 <RadioSetRxConfig+0x270>)
 8044102:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        LR1110.packet_params.packet.lora.iq                     = ( lr1110_radio_lora_iq_t ) iqInverted;
 8044106:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 804410a:	4b11      	ldr	r3, [pc, #68]	; (8044150 <RadioSetRxConfig+0x270>)
 804410c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PKT_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8044110:	4b0f      	ldr	r3, [pc, #60]	; (8044150 <RadioSetRxConfig+0x270>)
 8044112:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8044116:	2b01      	cmp	r3, #1
 8044118:	bf14      	ite	ne
 804411a:	2301      	movne	r3, #1
 804411c:	2300      	moveq	r3, #0
 804411e:	b2db      	uxtb	r3, r3
 8044120:	4618      	mov	r0, r3
 8044122:	f7ff fe39 	bl	8043d98 <RadioSetModem>
        lr1110_radio_set_lora_mod_params( &LR1110, &LR1110.modulation_params.modulation.lora );
 8044126:	4910      	ldr	r1, [pc, #64]	; (8044168 <RadioSetRxConfig+0x288>)
 8044128:	4809      	ldr	r0, [pc, #36]	; (8044150 <RadioSetRxConfig+0x270>)
 804412a:	f001 fe34 	bl	8045d96 <lr1110_radio_set_lora_mod_params>
        lr1110_radio_set_lora_pkt_params( &LR1110, &LR1110.packet_params.packet.lora );
 804412e:	490f      	ldr	r1, [pc, #60]	; (804416c <RadioSetRxConfig+0x28c>)
 8044130:	4807      	ldr	r0, [pc, #28]	; (8044150 <RadioSetRxConfig+0x270>)
 8044132:	f001 fe89 	bl	8045e48 <lr1110_radio_set_lora_pkt_params>
        RxTimeout = 0xFFFF;
 8044136:	4b0a      	ldr	r3, [pc, #40]	; (8044160 <RadioSetRxConfig+0x280>)
 8044138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 804413c:	601a      	str	r2, [r3, #0]
        break;
 804413e:	bf00      	nop
}
 8044140:	bf00      	nop
 8044142:	3718      	adds	r7, #24
 8044144:	46bd      	mov	sp, r7
 8044146:	bd80      	pop	{r7, pc}
 8044148:	200183b0 	.word	0x200183b0
 804414c:	2001805c 	.word	0x2001805c
 8044150:	2001964c 	.word	0x2001964c
 8044154:	200196e4 	.word	0x200196e4
 8044158:	200196f6 	.word	0x200196f6
 804415c:	0804ff30 	.word	0x0804ff30
 8044160:	200183ac 	.word	0x200183ac
 8044164:	080500d8 	.word	0x080500d8
 8044168:	200196f0 	.word	0x200196f0
 804416c:	20019700 	.word	0x20019700

08044170 <RadioSetTxConfig>:

void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev, uint32_t bandwidth, uint32_t datarate,
                       uint8_t coderate, uint16_t preambleLen, bool fixLen, bool crcOn, bool freqHopOn,
                       uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8044170:	b580      	push	{r7, lr}
 8044172:	b086      	sub	sp, #24
 8044174:	af00      	add	r7, sp, #0
 8044176:	60ba      	str	r2, [r7, #8]
 8044178:	607b      	str	r3, [r7, #4]
 804417a:	4603      	mov	r3, r0
 804417c:	73fb      	strb	r3, [r7, #15]
 804417e:	460b      	mov	r3, r1
 8044180:	73bb      	strb	r3, [r7, #14]
    switch( modem )
 8044182:	7bfb      	ldrb	r3, [r7, #15]
 8044184:	2b00      	cmp	r3, #0
 8044186:	d002      	beq.n	804418e <RadioSetTxConfig+0x1e>
 8044188:	2b01      	cmp	r3, #1
 804418a:	d079      	beq.n	8044280 <RadioSetTxConfig+0x110>
 804418c:	e0ee      	b.n	804436c <RadioSetTxConfig+0x1fc>
    {
    case MODEM_FSK:
        LR1110.modulation_params.packet_type   = LR1110_RADIO_PKT_TYPE_GFSK;
 804418e:	4b7e      	ldr	r3, [pc, #504]	; (8044388 <RadioSetTxConfig+0x218>)
 8044190:	2201      	movs	r2, #1
 8044192:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        LR1110.modulation_params.modulation.gfsk.br_in_bps = datarate;
 8044196:	4a7c      	ldr	r2, [pc, #496]	; (8044388 <RadioSetTxConfig+0x218>)
 8044198:	6a3b      	ldr	r3, [r7, #32]
 804419a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

        LR1110.modulation_params.modulation.gfsk.pulse_shape = LR1110_RADIO_GFSK_PULSE_SHAPE_BT_1;
 804419e:	4b7a      	ldr	r3, [pc, #488]	; (8044388 <RadioSetTxConfig+0x218>)
 80441a0:	220b      	movs	r2, #11
 80441a2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
        LR1110.modulation_params.modulation.gfsk.bw_dsb_param =
            ( lr1110_radio_gfsk_bw_t ) RadioGetFskBandwidthRegValue( bandwidth << 1 ); // LR1110 badwidth is double sided
 80441a6:	687b      	ldr	r3, [r7, #4]
 80441a8:	005b      	lsls	r3, r3, #1
 80441aa:	4618      	mov	r0, r3
 80441ac:	f7ff fd62 	bl	8043c74 <RadioGetFskBandwidthRegValue>
 80441b0:	4603      	mov	r3, r0
 80441b2:	461a      	mov	r2, r3
        LR1110.modulation_params.modulation.gfsk.bw_dsb_param =
 80441b4:	4b74      	ldr	r3, [pc, #464]	; (8044388 <RadioSetTxConfig+0x218>)
 80441b6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
        LR1110.modulation_params.modulation.gfsk.fdev_in_hz = fdev;
 80441ba:	4a73      	ldr	r2, [pc, #460]	; (8044388 <RadioSetTxConfig+0x218>)
 80441bc:	68bb      	ldr	r3, [r7, #8]
 80441be:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

        LR1110.packet_params.packet_type                     = LR1110_RADIO_PKT_TYPE_GFSK;
 80441c2:	4b71      	ldr	r3, [pc, #452]	; (8044388 <RadioSetTxConfig+0x218>)
 80441c4:	2201      	movs	r2, #1
 80441c6:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
        LR1110.packet_params.packet.gfsk.preamble_len_in_bits = ( preambleLen << 3 );  // convert byte into bit
 80441ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80441cc:	00db      	lsls	r3, r3, #3
 80441ce:	b29a      	uxth	r2, r3
 80441d0:	4b6d      	ldr	r3, [pc, #436]	; (8044388 <RadioSetTxConfig+0x218>)
 80441d2:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
        LR1110.packet_params.packet.gfsk.preamble_detector           = LR1110_RADIO_GFSK_PREAMBLE_DETECTOR_MIN_8BITS;
 80441d6:	4b6c      	ldr	r3, [pc, #432]	; (8044388 <RadioSetTxConfig+0x218>)
 80441d8:	2204      	movs	r2, #4
 80441da:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
        LR1110.packet_params.packet.gfsk.sync_word_len_in_bits = 3 << 3;  // convert byte into bit
 80441de:	4b6a      	ldr	r3, [pc, #424]	; (8044388 <RadioSetTxConfig+0x218>)
 80441e0:	2218      	movs	r2, #24
 80441e2:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
        LR1110.packet_params.packet.gfsk.address_filtering         = LR1110_RADIO_GFSK_ADDRESS_FILTERING_DISABLE;
 80441e6:	4b68      	ldr	r3, [pc, #416]	; (8044388 <RadioSetTxConfig+0x218>)
 80441e8:	2200      	movs	r2, #0
 80441ea:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
        LR1110.packet_params.packet.gfsk.header_type =
            ( fixLen == true ) ? LR1110_RADIO_GFSK_PKT_FIX_LEN : LR1110_RADIO_GFSK_PKT_VAR_LEN;
 80441ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80441f2:	f083 0301 	eor.w	r3, r3, #1
 80441f6:	b2db      	uxtb	r3, r3
 80441f8:	461a      	mov	r2, r3
        LR1110.packet_params.packet.gfsk.header_type =
 80441fa:	4b63      	ldr	r3, [pc, #396]	; (8044388 <RadioSetTxConfig+0x218>)
 80441fc:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf

        if( crcOn == true )
 8044200:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8044204:	2b00      	cmp	r3, #0
 8044206:	d004      	beq.n	8044212 <RadioSetTxConfig+0xa2>
        {
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_2_BYTES_INV;
 8044208:	4b5f      	ldr	r3, [pc, #380]	; (8044388 <RadioSetTxConfig+0x218>)
 804420a:	2206      	movs	r2, #6
 804420c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
 8044210:	e003      	b.n	804421a <RadioSetTxConfig+0xaa>
        }
        else
        {
            LR1110.packet_params.packet.gfsk.crc_type = LR1110_RADIO_GFSK_CRC_OFF;
 8044212:	4b5d      	ldr	r3, [pc, #372]	; (8044388 <RadioSetTxConfig+0x218>)
 8044214:	2201      	movs	r2, #1
 8044216:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
        }
        LR1110.packet_params.packet.gfsk.dc_free = LR1110_RADIO_GFSK_DC_FREE_WHITENING;
 804421a:	4b5b      	ldr	r3, [pc, #364]	; (8044388 <RadioSetTxConfig+0x218>)
 804421c:	2201      	movs	r2, #1
 804421e:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2

        RadioStandby( );
 8044222:	f000 fa8d 	bl	8044740 <RadioStandby>
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PKT_TYPE_GFSK) ? MODEM_FSK : MODEM_LORA );
 8044226:	4b58      	ldr	r3, [pc, #352]	; (8044388 <RadioSetTxConfig+0x218>)
 8044228:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 804422c:	2b01      	cmp	r3, #1
 804422e:	bf14      	ite	ne
 8044230:	2301      	movne	r3, #1
 8044232:	2300      	moveq	r3, #0
 8044234:	b2db      	uxtb	r3, r3
 8044236:	4618      	mov	r0, r3
 8044238:	f7ff fdae 	bl	8043d98 <RadioSetModem>
        lr1110_radio_set_gfsk_mod_params( &LR1110, &LR1110.modulation_params.modulation.gfsk );
 804423c:	4953      	ldr	r1, [pc, #332]	; (804438c <RadioSetTxConfig+0x21c>)
 804423e:	4852      	ldr	r0, [pc, #328]	; (8044388 <RadioSetTxConfig+0x218>)
 8044240:	f001 fd66 	bl	8045d10 <lr1110_radio_set_gfsk_mod_params>
        lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
 8044244:	4952      	ldr	r1, [pc, #328]	; (8044390 <RadioSetTxConfig+0x220>)
 8044246:	4850      	ldr	r0, [pc, #320]	; (8044388 <RadioSetTxConfig+0x218>)
 8044248:	f001 fdc8 	bl	8045ddc <lr1110_radio_set_gfsk_pkt_params>
        lr1110_radio_set_gfsk_sync_word( &LR1110, ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 804424c:	4a51      	ldr	r2, [pc, #324]	; (8044394 <RadioSetTxConfig+0x224>)
 804424e:	f107 0310 	add.w	r3, r7, #16
 8044252:	e892 0003 	ldmia.w	r2, {r0, r1}
 8044256:	e883 0003 	stmia.w	r3, {r0, r1}
 804425a:	f107 0310 	add.w	r3, r7, #16
 804425e:	4619      	mov	r1, r3
 8044260:	4849      	ldr	r0, [pc, #292]	; (8044388 <RadioSetTxConfig+0x218>)
 8044262:	f001 fc68 	bl	8045b36 <lr1110_radio_set_gfsk_sync_word>
        lr1110_radio_set_gfsk_crc_params( &LR1110, 0x1D0F, 0x1021 );
 8044266:	f241 0221 	movw	r2, #4129	; 0x1021
 804426a:	f641 510f 	movw	r1, #7439	; 0x1d0f
 804426e:	4846      	ldr	r0, [pc, #280]	; (8044388 <RadioSetTxConfig+0x218>)
 8044270:	f001 ff03 	bl	804607a <lr1110_radio_set_gfsk_crc_params>
        lr1110_radio_set_gfsk_whitening_seed( &LR1110, 0x01FF );
 8044274:	f240 11ff 	movw	r1, #511	; 0x1ff
 8044278:	4843      	ldr	r0, [pc, #268]	; (8044388 <RadioSetTxConfig+0x218>)
 804427a:	f001 ff34 	bl	80460e6 <lr1110_radio_set_gfsk_whitening_seed>
        break;
 804427e:	e075      	b.n	804436c <RadioSetTxConfig+0x1fc>

    case MODEM_LORA:
        LR1110.modulation_params.packet_type            = LR1110_RADIO_PKT_TYPE_LORA;
 8044280:	4b41      	ldr	r3, [pc, #260]	; (8044388 <RadioSetTxConfig+0x218>)
 8044282:	2202      	movs	r2, #2
 8044284:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        LR1110.modulation_params.modulation.lora.sf = ( lr1110_radio_lora_sf_t ) datarate;
 8044288:	6a3b      	ldr	r3, [r7, #32]
 804428a:	b2da      	uxtb	r2, r3
 804428c:	4b3e      	ldr	r3, [pc, #248]	; (8044388 <RadioSetTxConfig+0x218>)
 804428e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
        LR1110.modulation_params.modulation.lora.bw        = Bandwidths[bandwidth];
 8044292:	4a41      	ldr	r2, [pc, #260]	; (8044398 <RadioSetTxConfig+0x228>)
 8044294:	687b      	ldr	r3, [r7, #4]
 8044296:	4413      	add	r3, r2
 8044298:	781a      	ldrb	r2, [r3, #0]
 804429a:	4b3b      	ldr	r3, [pc, #236]	; (8044388 <RadioSetTxConfig+0x218>)
 804429c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
        LR1110.modulation_params.modulation.lora.cr      = ( lr1110_radio_lora_cr_t ) coderate;
 80442a0:	4a39      	ldr	r2, [pc, #228]	; (8044388 <RadioSetTxConfig+0x218>)
 80442a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80442a6:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6

        if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80442aa:	687b      	ldr	r3, [r7, #4]
 80442ac:	2b00      	cmp	r3, #0
 80442ae:	d105      	bne.n	80442bc <RadioSetTxConfig+0x14c>
 80442b0:	6a3b      	ldr	r3, [r7, #32]
 80442b2:	2b0b      	cmp	r3, #11
 80442b4:	d008      	beq.n	80442c8 <RadioSetTxConfig+0x158>
 80442b6:	6a3b      	ldr	r3, [r7, #32]
 80442b8:	2b0c      	cmp	r3, #12
 80442ba:	d005      	beq.n	80442c8 <RadioSetTxConfig+0x158>
 80442bc:	687b      	ldr	r3, [r7, #4]
 80442be:	2b01      	cmp	r3, #1
 80442c0:	d107      	bne.n	80442d2 <RadioSetTxConfig+0x162>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80442c2:	6a3b      	ldr	r3, [r7, #32]
 80442c4:	2b0c      	cmp	r3, #12
 80442c6:	d104      	bne.n	80442d2 <RadioSetTxConfig+0x162>
        {
            LR1110.modulation_params.modulation.lora.ldro = 0x01;
 80442c8:	4b2f      	ldr	r3, [pc, #188]	; (8044388 <RadioSetTxConfig+0x218>)
 80442ca:	2201      	movs	r2, #1
 80442cc:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
 80442d0:	e003      	b.n	80442da <RadioSetTxConfig+0x16a>
        }
        else
        {
            LR1110.modulation_params.modulation.lora.ldro = 0x00;
 80442d2:	4b2d      	ldr	r3, [pc, #180]	; (8044388 <RadioSetTxConfig+0x218>)
 80442d4:	2200      	movs	r2, #0
 80442d6:	f883 20a7 	strb.w	r2, [r3, #167]	; 0xa7
        }

        LR1110.packet_params.packet_type = LR1110_RADIO_PKT_TYPE_LORA;
 80442da:	4b2b      	ldr	r3, [pc, #172]	; (8044388 <RadioSetTxConfig+0x218>)
 80442dc:	2202      	movs	r2, #2
 80442de:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

        if( ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF5 ) ||
 80442e2:	4b29      	ldr	r3, [pc, #164]	; (8044388 <RadioSetTxConfig+0x218>)
 80442e4:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80442e8:	2b05      	cmp	r3, #5
 80442ea:	d004      	beq.n	80442f6 <RadioSetTxConfig+0x186>
            ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF6 ) )
 80442ec:	4b26      	ldr	r3, [pc, #152]	; (8044388 <RadioSetTxConfig+0x218>)
 80442ee:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
        if( ( LR1110.modulation_params.modulation.lora.sf == LR1110_RADIO_LORA_SF5 ) ||
 80442f2:	2b06      	cmp	r3, #6
 80442f4:	d10c      	bne.n	8044310 <RadioSetTxConfig+0x1a0>
        {
            if( preambleLen < 12 )
 80442f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80442f8:	2b0b      	cmp	r3, #11
 80442fa:	d804      	bhi.n	8044306 <RadioSetTxConfig+0x196>
            {
                LR1110.packet_params.packet.lora.preamble_len_in_symb = 12;
 80442fc:	4b22      	ldr	r3, [pc, #136]	; (8044388 <RadioSetTxConfig+0x218>)
 80442fe:	220c      	movs	r2, #12
 8044300:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
            if( preambleLen < 12 )
 8044304:	e008      	b.n	8044318 <RadioSetTxConfig+0x1a8>
            }
            else
            {
                LR1110.packet_params.packet.lora.preamble_len_in_symb = preambleLen;
 8044306:	4a20      	ldr	r2, [pc, #128]	; (8044388 <RadioSetTxConfig+0x218>)
 8044308:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 804430a:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
            if( preambleLen < 12 )
 804430e:	e003      	b.n	8044318 <RadioSetTxConfig+0x1a8>
            }
        }
        else
        {
            LR1110.packet_params.packet.lora.preamble_len_in_symb = preambleLen;
 8044310:	4a1d      	ldr	r2, [pc, #116]	; (8044388 <RadioSetTxConfig+0x218>)
 8044312:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8044314:	f8a2 30b4 	strh.w	r3, [r2, #180]	; 0xb4
        }

        LR1110.packet_params.packet.lora.header_type            = ( lr1110_radio_lora_pkt_len_modes_t ) fixLen;
 8044318:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 804431c:	4b1a      	ldr	r3, [pc, #104]	; (8044388 <RadioSetTxConfig+0x218>)
 804431e:	f883 20b6 	strb.w	r2, [r3, #182]	; 0xb6
        LR1110.packet_params.packet.lora.pld_len_in_bytes = MaxPayloadLength;
 8044322:	4b1e      	ldr	r3, [pc, #120]	; (804439c <RadioSetTxConfig+0x22c>)
 8044324:	781a      	ldrb	r2, [r3, #0]
 8044326:	4b18      	ldr	r3, [pc, #96]	; (8044388 <RadioSetTxConfig+0x218>)
 8044328:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
        LR1110.packet_params.packet.lora.crc                    = ( lr1110_radio_lora_crc_t ) crcOn;
 804432c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8044330:	4b15      	ldr	r3, [pc, #84]	; (8044388 <RadioSetTxConfig+0x218>)
 8044332:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        LR1110.packet_params.packet.lora.iq                     = ( lr1110_radio_lora_iq_t ) iqInverted;
 8044336:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 804433a:	4b13      	ldr	r3, [pc, #76]	; (8044388 <RadioSetTxConfig+0x218>)
 804433c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9

        RadioStandby( );
 8044340:	f000 f9fe 	bl	8044740 <RadioStandby>
        RadioSetModem( ( LR1110.modulation_params.packet_type == LR1110_RADIO_PKT_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8044344:	4b10      	ldr	r3, [pc, #64]	; (8044388 <RadioSetTxConfig+0x218>)
 8044346:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 804434a:	2b01      	cmp	r3, #1
 804434c:	bf14      	ite	ne
 804434e:	2301      	movne	r3, #1
 8044350:	2300      	moveq	r3, #0
 8044352:	b2db      	uxtb	r3, r3
 8044354:	4618      	mov	r0, r3
 8044356:	f7ff fd1f 	bl	8043d98 <RadioSetModem>
        lr1110_radio_set_lora_mod_params( &LR1110, &LR1110.modulation_params.modulation.lora );
 804435a:	4911      	ldr	r1, [pc, #68]	; (80443a0 <RadioSetTxConfig+0x230>)
 804435c:	480a      	ldr	r0, [pc, #40]	; (8044388 <RadioSetTxConfig+0x218>)
 804435e:	f001 fd1a 	bl	8045d96 <lr1110_radio_set_lora_mod_params>
        lr1110_radio_set_lora_pkt_params( &LR1110, &LR1110.packet_params.packet.lora );
 8044362:	4910      	ldr	r1, [pc, #64]	; (80443a4 <RadioSetTxConfig+0x234>)
 8044364:	4808      	ldr	r0, [pc, #32]	; (8044388 <RadioSetTxConfig+0x218>)
 8044366:	f001 fd6f 	bl	8045e48 <lr1110_radio_set_lora_pkt_params>
        break;
 804436a:	bf00      	nop
    }

    lr1110_board_set_rf_tx_power( &LR1110, power );
 804436c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8044370:	4619      	mov	r1, r3
 8044372:	4805      	ldr	r0, [pc, #20]	; (8044388 <RadioSetTxConfig+0x218>)
 8044374:	f7ff fa6c 	bl	8043850 <lr1110_board_set_rf_tx_power>
    TxTimeout = timeout;
 8044378:	4a0b      	ldr	r2, [pc, #44]	; (80443a8 <RadioSetTxConfig+0x238>)
 804437a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 804437c:	6013      	str	r3, [r2, #0]
}
 804437e:	bf00      	nop
 8044380:	3718      	adds	r7, #24
 8044382:	46bd      	mov	sp, r7
 8044384:	bd80      	pop	{r7, pc}
 8044386:	bf00      	nop
 8044388:	2001964c 	.word	0x2001964c
 804438c:	200196e4 	.word	0x200196e4
 8044390:	200196f6 	.word	0x200196f6
 8044394:	0804ff30 	.word	0x0804ff30
 8044398:	080500d8 	.word	0x080500d8
 804439c:	2001805c 	.word	0x2001805c
 80443a0:	200196f0 	.word	0x200196f0
 80443a4:	20019700 	.word	0x20019700
 80443a8:	200183a8 	.word	0x200183a8

080443ac <RadioCheckRfFrequency>:

bool RadioCheckRfFrequency( uint32_t frequency )
{
 80443ac:	b480      	push	{r7}
 80443ae:	b083      	sub	sp, #12
 80443b0:	af00      	add	r7, sp, #0
 80443b2:	6078      	str	r0, [r7, #4]
    return true;
 80443b4:	2301      	movs	r3, #1
}
 80443b6:	4618      	mov	r0, r3
 80443b8:	370c      	adds	r7, #12
 80443ba:	46bd      	mov	sp, r7
 80443bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80443c0:	4770      	bx	lr
	...

080443c4 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( lr1110_radio_lora_bw_t bw )
{
 80443c4:	b480      	push	{r7}
 80443c6:	b085      	sub	sp, #20
 80443c8:	af00      	add	r7, sp, #0
 80443ca:	4603      	mov	r3, r0
 80443cc:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 80443ce:	2300      	movs	r3, #0
 80443d0:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80443d2:	79fb      	ldrb	r3, [r7, #7]
 80443d4:	3b01      	subs	r3, #1
 80443d6:	2b09      	cmp	r3, #9
 80443d8:	d837      	bhi.n	804444a <RadioGetLoRaBandwidthInHz+0x86>
 80443da:	a201      	add	r2, pc, #4	; (adr r2, 80443e0 <RadioGetLoRaBandwidthInHz+0x1c>)
 80443dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80443e0:	08044411 	.word	0x08044411
 80443e4:	08044421 	.word	0x08044421
 80443e8:	08044431 	.word	0x08044431
 80443ec:	08044439 	.word	0x08044439
 80443f0:	0804443f 	.word	0x0804443f
 80443f4:	08044445 	.word	0x08044445
 80443f8:	0804444b 	.word	0x0804444b
 80443fc:	08044409 	.word	0x08044409
 8044400:	08044419 	.word	0x08044419
 8044404:	08044429 	.word	0x08044429
    {
    case LR1110_RADIO_LORA_BW_10:
        bandwidthInHz = 10417UL;
 8044408:	f642 03b1 	movw	r3, #10417	; 0x28b1
 804440c:	60fb      	str	r3, [r7, #12]
        break;
 804440e:	e01c      	b.n	804444a <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_15:
        bandwidthInHz = 15625UL;
 8044410:	f643 5309 	movw	r3, #15625	; 0x3d09
 8044414:	60fb      	str	r3, [r7, #12]
        break;
 8044416:	e018      	b.n	804444a <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_20:
        bandwidthInHz = 20833UL;
 8044418:	f245 1361 	movw	r3, #20833	; 0x5161
 804441c:	60fb      	str	r3, [r7, #12]
        break;
 804441e:	e014      	b.n	804444a <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_31:
        bandwidthInHz = 31250UL;
 8044420:	f647 2312 	movw	r3, #31250	; 0x7a12
 8044424:	60fb      	str	r3, [r7, #12]
        break;
 8044426:	e010      	b.n	804444a <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_41:
        bandwidthInHz = 41667UL;
 8044428:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 804442c:	60fb      	str	r3, [r7, #12]
        break;
 804442e:	e00c      	b.n	804444a <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_62:
        bandwidthInHz = 62500UL;
 8044430:	f24f 4324 	movw	r3, #62500	; 0xf424
 8044434:	60fb      	str	r3, [r7, #12]
        break;
 8044436:	e008      	b.n	804444a <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_125:
        bandwidthInHz = 125000UL;
 8044438:	4b07      	ldr	r3, [pc, #28]	; (8044458 <RadioGetLoRaBandwidthInHz+0x94>)
 804443a:	60fb      	str	r3, [r7, #12]
        break;
 804443c:	e005      	b.n	804444a <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_250:
        bandwidthInHz = 250000UL;
 804443e:	4b07      	ldr	r3, [pc, #28]	; (804445c <RadioGetLoRaBandwidthInHz+0x98>)
 8044440:	60fb      	str	r3, [r7, #12]
        break;
 8044442:	e002      	b.n	804444a <RadioGetLoRaBandwidthInHz+0x86>
    case LR1110_RADIO_LORA_BW_500:
        bandwidthInHz = 500000UL;
 8044444:	4b06      	ldr	r3, [pc, #24]	; (8044460 <RadioGetLoRaBandwidthInHz+0x9c>)
 8044446:	60fb      	str	r3, [r7, #12]
        break;
 8044448:	bf00      	nop
    }

    return bandwidthInHz;
 804444a:	68fb      	ldr	r3, [r7, #12]
}
 804444c:	4618      	mov	r0, r3
 804444e:	3714      	adds	r7, #20
 8044450:	46bd      	mov	sp, r7
 8044452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044456:	4770      	bx	lr
 8044458:	0001e848 	.word	0x0001e848
 804445c:	0003d090 	.word	0x0003d090
 8044460:	0007a120 	.word	0x0007a120

08044464 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8044464:	b480      	push	{r7}
 8044466:	b085      	sub	sp, #20
 8044468:	af00      	add	r7, sp, #0
 804446a:	6078      	str	r0, [r7, #4]
 804446c:	4608      	mov	r0, r1
 804446e:	4611      	mov	r1, r2
 8044470:	461a      	mov	r2, r3
 8044472:	4603      	mov	r3, r0
 8044474:	70fb      	strb	r3, [r7, #3]
 8044476:	460b      	mov	r3, r1
 8044478:	803b      	strh	r3, [r7, #0]
 804447a:	4613      	mov	r3, r2
 804447c:	70bb      	strb	r3, [r7, #2]
    const uint8_t syncWordLength = 3;
 804447e:	2303      	movs	r3, #3
 8044480:	73fb      	strb	r3, [r7, #15]

    return ( preambleLen << 3 ) +
 8044482:	883b      	ldrh	r3, [r7, #0]
 8044484:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8044486:	78ba      	ldrb	r2, [r7, #2]
 8044488:	f082 0201 	eor.w	r2, r2, #1
 804448c:	b2d2      	uxtb	r2, r2
 804448e:	2a00      	cmp	r2, #0
 8044490:	d001      	beq.n	8044496 <RadioGetGfskTimeOnAirNumerator+0x32>
 8044492:	2208      	movs	r2, #8
 8044494:	e000      	b.n	8044498 <RadioGetGfskTimeOnAirNumerator+0x34>
 8044496:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8044498:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 804449a:	7bfb      	ldrb	r3, [r7, #15]
 804449c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 804449e:	441a      	add	r2, r3
             ( ( payloadLen +
 80444a0:	7e3b      	ldrb	r3, [r7, #24]
               ( 0 ) +
               ( ( crcOn == true ) ? 2 : 0 ) 
 80444a2:	7f39      	ldrb	r1, [r7, #28]
 80444a4:	2900      	cmp	r1, #0
 80444a6:	d001      	beq.n	80444ac <RadioGetGfskTimeOnAirNumerator+0x48>
 80444a8:	2102      	movs	r1, #2
 80444aa:	e000      	b.n	80444ae <RadioGetGfskTimeOnAirNumerator+0x4a>
 80444ac:	2100      	movs	r1, #0
               ( 0 ) +
 80444ae:	440b      	add	r3, r1
               ) << 3 
 80444b0:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 80444b2:	4413      	add	r3, r2
             );
}
 80444b4:	4618      	mov	r0, r3
 80444b6:	3714      	adds	r7, #20
 80444b8:	46bd      	mov	sp, r7
 80444ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80444be:	4770      	bx	lr

080444c0 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 80444c0:	b480      	push	{r7}
 80444c2:	b08b      	sub	sp, #44	; 0x2c
 80444c4:	af00      	add	r7, sp, #0
 80444c6:	60f8      	str	r0, [r7, #12]
 80444c8:	60b9      	str	r1, [r7, #8]
 80444ca:	4611      	mov	r1, r2
 80444cc:	461a      	mov	r2, r3
 80444ce:	460b      	mov	r3, r1
 80444d0:	71fb      	strb	r3, [r7, #7]
 80444d2:	4613      	mov	r3, r2
 80444d4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 80444d6:	79fb      	ldrb	r3, [r7, #7]
 80444d8:	3304      	adds	r3, #4
 80444da:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80444dc:	2300      	movs	r3, #0
 80444de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80444e2:	68bb      	ldr	r3, [r7, #8]
 80444e4:	2b05      	cmp	r3, #5
 80444e6:	d002      	beq.n	80444ee <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80444e8:	68bb      	ldr	r3, [r7, #8]
 80444ea:	2b06      	cmp	r3, #6
 80444ec:	d104      	bne.n	80444f8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80444ee:	88bb      	ldrh	r3, [r7, #4]
 80444f0:	2b0b      	cmp	r3, #11
 80444f2:	d801      	bhi.n	80444f8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80444f4:	230c      	movs	r3, #12
 80444f6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80444f8:	68fb      	ldr	r3, [r7, #12]
 80444fa:	2b00      	cmp	r3, #0
 80444fc:	d105      	bne.n	804450a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80444fe:	68bb      	ldr	r3, [r7, #8]
 8044500:	2b0b      	cmp	r3, #11
 8044502:	d008      	beq.n	8044516 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8044504:	68bb      	ldr	r3, [r7, #8]
 8044506:	2b0c      	cmp	r3, #12
 8044508:	d005      	beq.n	8044516 <RadioGetLoRaTimeOnAirNumerator+0x56>
 804450a:	68fb      	ldr	r3, [r7, #12]
 804450c:	2b01      	cmp	r3, #1
 804450e:	d105      	bne.n	804451c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8044510:	68bb      	ldr	r3, [r7, #8]
 8044512:	2b0c      	cmp	r3, #12
 8044514:	d102      	bne.n	804451c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8044516:	2301      	movs	r3, #1
 8044518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 804451c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8044520:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8044522:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8044526:	2a00      	cmp	r2, #0
 8044528:	d001      	beq.n	804452e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 804452a:	2210      	movs	r2, #16
 804452c:	e000      	b.n	8044530 <RadioGetLoRaTimeOnAirNumerator+0x70>
 804452e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8044530:	4413      	add	r3, r2
 8044532:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8044534:	68bb      	ldr	r3, [r7, #8]
 8044536:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8044538:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 804453a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 804453e:	2a00      	cmp	r2, #0
 8044540:	d001      	beq.n	8044546 <RadioGetLoRaTimeOnAirNumerator+0x86>
 8044542:	2200      	movs	r2, #0
 8044544:	e000      	b.n	8044548 <RadioGetLoRaTimeOnAirNumerator+0x88>
 8044546:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8044548:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 804454a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 804454c:	68bb      	ldr	r3, [r7, #8]
 804454e:	2b06      	cmp	r3, #6
 8044550:	d803      	bhi.n	804455a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8044552:	68bb      	ldr	r3, [r7, #8]
 8044554:	009b      	lsls	r3, r3, #2
 8044556:	623b      	str	r3, [r7, #32]
 8044558:	e00e      	b.n	8044578 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 804455a:	69fb      	ldr	r3, [r7, #28]
 804455c:	3308      	adds	r3, #8
 804455e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8044560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8044564:	2b00      	cmp	r3, #0
 8044566:	d004      	beq.n	8044572 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8044568:	68bb      	ldr	r3, [r7, #8]
 804456a:	3b02      	subs	r3, #2
 804456c:	009b      	lsls	r3, r3, #2
 804456e:	623b      	str	r3, [r7, #32]
 8044570:	e002      	b.n	8044578 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8044572:	68bb      	ldr	r3, [r7, #8]
 8044574:	009b      	lsls	r3, r3, #2
 8044576:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8044578:	69fb      	ldr	r3, [r7, #28]
 804457a:	2b00      	cmp	r3, #0
 804457c:	da01      	bge.n	8044582 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 804457e:	2300      	movs	r3, #0
 8044580:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8044582:	69fa      	ldr	r2, [r7, #28]
 8044584:	6a3b      	ldr	r3, [r7, #32]
 8044586:	4413      	add	r3, r2
 8044588:	1e5a      	subs	r2, r3, #1
 804458a:	6a3b      	ldr	r3, [r7, #32]
 804458c:	fb92 f3f3 	sdiv	r3, r2, r3
 8044590:	697a      	ldr	r2, [r7, #20]
 8044592:	fb02 f203 	mul.w	r2, r2, r3
 8044596:	88bb      	ldrh	r3, [r7, #4]
 8044598:	4413      	add	r3, r2
    int32_t intermediate =
 804459a:	330c      	adds	r3, #12
 804459c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 804459e:	68bb      	ldr	r3, [r7, #8]
 80445a0:	2b06      	cmp	r3, #6
 80445a2:	d802      	bhi.n	80445aa <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 80445a4:	69bb      	ldr	r3, [r7, #24]
 80445a6:	3302      	adds	r3, #2
 80445a8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 80445aa:	69bb      	ldr	r3, [r7, #24]
 80445ac:	009b      	lsls	r3, r3, #2
 80445ae:	1c5a      	adds	r2, r3, #1
 80445b0:	68bb      	ldr	r3, [r7, #8]
 80445b2:	3b02      	subs	r3, #2
 80445b4:	fa02 f303 	lsl.w	r3, r2, r3
}
 80445b8:	4618      	mov	r0, r3
 80445ba:	372c      	adds	r7, #44	; 0x2c
 80445bc:	46bd      	mov	sp, r7
 80445be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80445c2:	4770      	bx	lr

080445c4 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 80445c4:	b580      	push	{r7, lr}
 80445c6:	b08a      	sub	sp, #40	; 0x28
 80445c8:	af04      	add	r7, sp, #16
 80445ca:	60b9      	str	r1, [r7, #8]
 80445cc:	607a      	str	r2, [r7, #4]
 80445ce:	461a      	mov	r2, r3
 80445d0:	4603      	mov	r3, r0
 80445d2:	73fb      	strb	r3, [r7, #15]
 80445d4:	4613      	mov	r3, r2
 80445d6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80445d8:	2300      	movs	r3, #0
 80445da:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80445dc:	2301      	movs	r3, #1
 80445de:	613b      	str	r3, [r7, #16]

    switch( modem )
 80445e0:	7bfb      	ldrb	r3, [r7, #15]
 80445e2:	2b00      	cmp	r3, #0
 80445e4:	d002      	beq.n	80445ec <RadioTimeOnAir+0x28>
 80445e6:	2b01      	cmp	r3, #1
 80445e8:	d017      	beq.n	804461a <RadioTimeOnAir+0x56>
 80445ea:	e035      	b.n	8044658 <RadioTimeOnAir+0x94>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80445ec:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 80445f0:	8c3a      	ldrh	r2, [r7, #32]
 80445f2:	7bb9      	ldrb	r1, [r7, #14]
 80445f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80445f8:	9301      	str	r3, [sp, #4]
 80445fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80445fe:	9300      	str	r3, [sp, #0]
 8044600:	4603      	mov	r3, r0
 8044602:	6878      	ldr	r0, [r7, #4]
 8044604:	f7ff ff2e 	bl	8044464 <RadioGetGfskTimeOnAirNumerator>
 8044608:	4603      	mov	r3, r0
 804460a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 804460e:	fb02 f303 	mul.w	r3, r2, r3
 8044612:	617b      	str	r3, [r7, #20]
                                                                  preambleLen, fixLen,
                                                                  payloadLen, crcOn );
            denominator = datarate;
 8044614:	687b      	ldr	r3, [r7, #4]
 8044616:	613b      	str	r3, [r7, #16]
        }
        break;
 8044618:	e01e      	b.n	8044658 <RadioTimeOnAir+0x94>
    case MODEM_LORA:
        {
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 804461a:	8c39      	ldrh	r1, [r7, #32]
 804461c:	7bba      	ldrb	r2, [r7, #14]
 804461e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8044622:	9302      	str	r3, [sp, #8]
 8044624:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8044628:	9301      	str	r3, [sp, #4]
 804462a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 804462e:	9300      	str	r3, [sp, #0]
 8044630:	460b      	mov	r3, r1
 8044632:	6879      	ldr	r1, [r7, #4]
 8044634:	68b8      	ldr	r0, [r7, #8]
 8044636:	f7ff ff43 	bl	80444c0 <RadioGetLoRaTimeOnAirNumerator>
 804463a:	4603      	mov	r3, r0
 804463c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8044640:	fb02 f303 	mul.w	r3, r2, r3
 8044644:	617b      	str	r3, [r7, #20]
                                                                  coderate, preambleLen,
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8044646:	4a0a      	ldr	r2, [pc, #40]	; (8044670 <RadioTimeOnAir+0xac>)
 8044648:	68bb      	ldr	r3, [r7, #8]
 804464a:	4413      	add	r3, r2
 804464c:	781b      	ldrb	r3, [r3, #0]
 804464e:	4618      	mov	r0, r3
 8044650:	f7ff feb8 	bl	80443c4 <RadioGetLoRaBandwidthInHz>
 8044654:	6138      	str	r0, [r7, #16]
        }
        break;
 8044656:	bf00      	nop
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 8044658:	697a      	ldr	r2, [r7, #20]
 804465a:	693b      	ldr	r3, [r7, #16]
 804465c:	4413      	add	r3, r2
 804465e:	1e5a      	subs	r2, r3, #1
 8044660:	693b      	ldr	r3, [r7, #16]
 8044662:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8044666:	4618      	mov	r0, r3
 8044668:	3718      	adds	r7, #24
 804466a:	46bd      	mov	sp, r7
 804466c:	bd80      	pop	{r7, pc}
 804466e:	bf00      	nop
 8044670:	080500d8 	.word	0x080500d8

08044674 <RadioSend>:

void RadioSend( uint8_t* buffer, uint8_t size )
{
 8044674:	b580      	push	{r7, lr}
 8044676:	b084      	sub	sp, #16
 8044678:	af00      	add	r7, sp, #0
 804467a:	6078      	str	r0, [r7, #4]
 804467c:	460b      	mov	r3, r1
 804467e:	70fb      	strb	r3, [r7, #3]
    lr1110_radio_pkt_type_t packet_type;

    lr1110_system_set_dio_irq_params( &LR1110, LR1110_SYSTEM_IRQ_TX_DONE | LR1110_SYSTEM_IRQ_TIMEOUT,
 8044680:	2200      	movs	r2, #0
 8044682:	f240 4104 	movw	r1, #1028	; 0x404
 8044686:	481c      	ldr	r0, [pc, #112]	; (80446f8 <RadioSend+0x84>)
 8044688:	f001 ff54 	bl	8046534 <lr1110_system_set_dio_irq_params>
                                      LR1110_SYSTEM_IRQ_NONE );

    lr1110_radio_get_pkt_type( &LR1110, &packet_type );
 804468c:	f107 030f 	add.w	r3, r7, #15
 8044690:	4619      	mov	r1, r3
 8044692:	4819      	ldr	r0, [pc, #100]	; (80446f8 <RadioSend+0x84>)
 8044694:	f001 f92a 	bl	80458ec <lr1110_radio_get_pkt_type>
    if( packet_type == LR1110_RADIO_PKT_TYPE_LORA )
 8044698:	7bfb      	ldrb	r3, [r7, #15]
 804469a:	2b02      	cmp	r3, #2
 804469c:	d108      	bne.n	80446b0 <RadioSend+0x3c>
    {
        LR1110.packet_params.packet.lora.pld_len_in_bytes = size;
 804469e:	4a16      	ldr	r2, [pc, #88]	; (80446f8 <RadioSend+0x84>)
 80446a0:	78fb      	ldrb	r3, [r7, #3]
 80446a2:	f882 30b7 	strb.w	r3, [r2, #183]	; 0xb7
        lr1110_radio_set_lora_pkt_params( &LR1110, &LR1110.packet_params.packet.lora );
 80446a6:	4915      	ldr	r1, [pc, #84]	; (80446fc <RadioSend+0x88>)
 80446a8:	4813      	ldr	r0, [pc, #76]	; (80446f8 <RadioSend+0x84>)
 80446aa:	f001 fbcd 	bl	8045e48 <lr1110_radio_set_lora_pkt_params>
 80446ae:	e007      	b.n	80446c0 <RadioSend+0x4c>
    }
    else
    {
        LR1110.packet_params.packet.gfsk.pld_len_in_bytes = size;
 80446b0:	4a11      	ldr	r2, [pc, #68]	; (80446f8 <RadioSend+0x84>)
 80446b2:	78fb      	ldrb	r3, [r7, #3]
 80446b4:	f882 30b0 	strb.w	r3, [r2, #176]	; 0xb0
        lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
 80446b8:	4911      	ldr	r1, [pc, #68]	; (8044700 <RadioSend+0x8c>)
 80446ba:	480f      	ldr	r0, [pc, #60]	; (80446f8 <RadioSend+0x84>)
 80446bc:	f001 fb8e 	bl	8045ddc <lr1110_radio_set_gfsk_pkt_params>
    }

    /* Send Payload */
    lr1110_regmem_write_buffer8( &LR1110, buffer, size );
 80446c0:	78fb      	ldrb	r3, [r7, #3]
 80446c2:	461a      	mov	r2, r3
 80446c4:	6879      	ldr	r1, [r7, #4]
 80446c6:	480c      	ldr	r0, [pc, #48]	; (80446f8 <RadioSend+0x84>)
 80446c8:	f001 fd96 	bl	80461f8 <lr1110_regmem_write_buffer8>
    lr1110_radio_set_tx( &LR1110, 0 );
 80446cc:	2100      	movs	r1, #0
 80446ce:	480a      	ldr	r0, [pc, #40]	; (80446f8 <RadioSend+0x84>)
 80446d0:	f001 faaa 	bl	8045c28 <lr1110_radio_set_tx>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_TX );
 80446d4:	2104      	movs	r1, #4
 80446d6:	4808      	ldr	r0, [pc, #32]	; (80446f8 <RadioSend+0x84>)
 80446d8:	f7ff fabb 	bl	8043c52 <lr1110_hal_set_operating_mode>

    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 80446dc:	4b09      	ldr	r3, [pc, #36]	; (8044704 <RadioSend+0x90>)
 80446de:	681b      	ldr	r3, [r3, #0]
 80446e0:	4619      	mov	r1, r3
 80446e2:	4809      	ldr	r0, [pc, #36]	; (8044708 <RadioSend+0x94>)
 80446e4:	f7fe fbc4 	bl	8042e70 <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 80446e8:	4807      	ldr	r0, [pc, #28]	; (8044708 <RadioSend+0x94>)
 80446ea:	f7fe fa09 	bl	8042b00 <TimerStart>
}
 80446ee:	bf00      	nop
 80446f0:	3710      	adds	r7, #16
 80446f2:	46bd      	mov	sp, r7
 80446f4:	bd80      	pop	{r7, pc}
 80446f6:	bf00      	nop
 80446f8:	2001964c 	.word	0x2001964c
 80446fc:	20019700 	.word	0x20019700
 8044700:	200196f6 	.word	0x200196f6
 8044704:	200183a8 	.word	0x200183a8
 8044708:	20019708 	.word	0x20019708

0804470c <RadioSleep>:

void RadioSleep( void )
{
 804470c:	b580      	push	{r7, lr}
 804470e:	b082      	sub	sp, #8
 8044710:	af00      	add	r7, sp, #0
    lr1110_system_sleep_cfg_t sleep_config;

    sleep_config.is_warm_start  = 1;
 8044712:	2301      	movs	r3, #1
 8044714:	713b      	strb	r3, [r7, #4]
    sleep_config.is_rtc_timeout = 0;
 8044716:	2300      	movs	r3, #0
 8044718:	717b      	strb	r3, [r7, #5]

    lr1110_system_set_sleep( &LR1110, sleep_config, 0 );
 804471a:	2200      	movs	r2, #0
 804471c:	6879      	ldr	r1, [r7, #4]
 804471e:	4807      	ldr	r0, [pc, #28]	; (804473c <RadioSleep+0x30>)
 8044720:	f001 ff64 	bl	80465ec <lr1110_system_set_sleep>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_SLEEP );
 8044724:	2100      	movs	r1, #0
 8044726:	4805      	ldr	r0, [pc, #20]	; (804473c <RadioSleep+0x30>)
 8044728:	f7ff fa93 	bl	8043c52 <lr1110_hal_set_operating_mode>

    DelayMs( 2 );
 804472c:	2002      	movs	r0, #2
 804472e:	f7fc f973 	bl	8040a18 <DelayMs>
}
 8044732:	bf00      	nop
 8044734:	3708      	adds	r7, #8
 8044736:	46bd      	mov	sp, r7
 8044738:	bd80      	pop	{r7, pc}
 804473a:	bf00      	nop
 804473c:	2001964c 	.word	0x2001964c

08044740 <RadioStandby>:

void RadioStandby( void )
{
 8044740:	b580      	push	{r7, lr}
 8044742:	af00      	add	r7, sp, #0
    lr1110_system_set_standby( &LR1110, LR1110_SYSTEM_STANDBY_CFG_RC );
 8044744:	2100      	movs	r1, #0
 8044746:	4804      	ldr	r0, [pc, #16]	; (8044758 <RadioStandby+0x18>)
 8044748:	f001 ff7e 	bl	8046648 <lr1110_system_set_standby>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_STDBY_RC );
 804474c:	2101      	movs	r1, #1
 804474e:	4802      	ldr	r0, [pc, #8]	; (8044758 <RadioStandby+0x18>)
 8044750:	f7ff fa7f 	bl	8043c52 <lr1110_hal_set_operating_mode>
}
 8044754:	bf00      	nop
 8044756:	bd80      	pop	{r7, pc}
 8044758:	2001964c 	.word	0x2001964c

0804475c <RadioRx>:

void RadioRx( uint32_t timeout )
{
 804475c:	b580      	push	{r7, lr}
 804475e:	b082      	sub	sp, #8
 8044760:	af00      	add	r7, sp, #0
 8044762:	6078      	str	r0, [r7, #4]
    lr1110_system_set_dio_irq_params(
 8044764:	2200      	movs	r2, #0
 8044766:	4917      	ldr	r1, [pc, #92]	; (80447c4 <RadioRx+0x68>)
 8044768:	4817      	ldr	r0, [pc, #92]	; (80447c8 <RadioRx+0x6c>)
 804476a:	f001 fee3 	bl	8046534 <lr1110_system_set_dio_irq_params>
        &LR1110,
        LR1110_SYSTEM_IRQ_ALL_MASK,  // LR1110_SYSTEM_IRQ_RXDONE_MASK | LR1110_SYSTEM_IRQ_TIMEOUT_MASK,
        LR1110_SYSTEM_IRQ_NONE );

    lr1110_radio_cfg_rx_boosted( &LR1110, false );
 804476e:	2100      	movs	r1, #0
 8044770:	4815      	ldr	r0, [pc, #84]	; (80447c8 <RadioRx+0x6c>)
 8044772:	f001 fcd8 	bl	8046126 <lr1110_radio_cfg_rx_boosted>

    if( timeout != 0 )
 8044776:	687b      	ldr	r3, [r7, #4]
 8044778:	2b00      	cmp	r3, #0
 804477a:	d006      	beq.n	804478a <RadioRx+0x2e>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 804477c:	6879      	ldr	r1, [r7, #4]
 804477e:	4813      	ldr	r0, [pc, #76]	; (80447cc <RadioRx+0x70>)
 8044780:	f7fe fb76 	bl	8042e70 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8044784:	4811      	ldr	r0, [pc, #68]	; (80447cc <RadioRx+0x70>)
 8044786:	f7fe f9bb 	bl	8042b00 <TimerStart>
    }

    if( RxContinuous == true )
 804478a:	4b11      	ldr	r3, [pc, #68]	; (80447d0 <RadioRx+0x74>)
 804478c:	781b      	ldrb	r3, [r3, #0]
 804478e:	2b00      	cmp	r3, #0
 8044790:	d009      	beq.n	80447a6 <RadioRx+0x4a>
    {
        lr1110_radio_set_rx( &LR1110, 0xFFFFFF );  // Rx Continuous
 8044792:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8044796:	480c      	ldr	r0, [pc, #48]	; (80447c8 <RadioRx+0x6c>)
 8044798:	f001 fa12 	bl	8045bc0 <lr1110_radio_set_rx>
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX_C );
 804479c:	2106      	movs	r1, #6
 804479e:	480a      	ldr	r0, [pc, #40]	; (80447c8 <RadioRx+0x6c>)
 80447a0:	f7ff fa57 	bl	8043c52 <lr1110_hal_set_operating_mode>
    else
    {
        lr1110_radio_set_rx( &LR1110, ( RxTimeout * 32768 ) );
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX );
    }
}
 80447a4:	e00a      	b.n	80447bc <RadioRx+0x60>
        lr1110_radio_set_rx( &LR1110, ( RxTimeout * 32768 ) );
 80447a6:	4b0b      	ldr	r3, [pc, #44]	; (80447d4 <RadioRx+0x78>)
 80447a8:	681b      	ldr	r3, [r3, #0]
 80447aa:	03db      	lsls	r3, r3, #15
 80447ac:	4619      	mov	r1, r3
 80447ae:	4806      	ldr	r0, [pc, #24]	; (80447c8 <RadioRx+0x6c>)
 80447b0:	f001 fa06 	bl	8045bc0 <lr1110_radio_set_rx>
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX );
 80447b4:	2105      	movs	r1, #5
 80447b6:	4804      	ldr	r0, [pc, #16]	; (80447c8 <RadioRx+0x6c>)
 80447b8:	f7ff fa4b 	bl	8043c52 <lr1110_hal_set_operating_mode>
}
 80447bc:	bf00      	nop
 80447be:	3708      	adds	r7, #8
 80447c0:	46bd      	mov	sp, r7
 80447c2:	bd80      	pop	{r7, pc}
 80447c4:	03f807fc 	.word	0x03f807fc
 80447c8:	2001964c 	.word	0x2001964c
 80447cc:	2001982c 	.word	0x2001982c
 80447d0:	200183b0 	.word	0x200183b0
 80447d4:	200183ac 	.word	0x200183ac

080447d8 <RadioRxBoosted>:

void RadioRxBoosted( uint32_t timeout )
{
 80447d8:	b580      	push	{r7, lr}
 80447da:	b082      	sub	sp, #8
 80447dc:	af00      	add	r7, sp, #0
 80447de:	6078      	str	r0, [r7, #4]
    lr1110_system_set_dio_irq_params(
 80447e0:	2200      	movs	r2, #0
 80447e2:	4917      	ldr	r1, [pc, #92]	; (8044840 <RadioRxBoosted+0x68>)
 80447e4:	4817      	ldr	r0, [pc, #92]	; (8044844 <RadioRxBoosted+0x6c>)
 80447e6:	f001 fea5 	bl	8046534 <lr1110_system_set_dio_irq_params>
        &LR1110,
        LR1110_SYSTEM_IRQ_ALL_MASK,  // LR1110_SYSTEM_IRQ_RXDONE_MASK | LR1110_SYSTEM_IRQ_TIMEOUT_MASK,
        LR1110_SYSTEM_IRQ_NONE );

    if( timeout != 0 )
 80447ea:	687b      	ldr	r3, [r7, #4]
 80447ec:	2b00      	cmp	r3, #0
 80447ee:	d006      	beq.n	80447fe <RadioRxBoosted+0x26>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80447f0:	6879      	ldr	r1, [r7, #4]
 80447f2:	4815      	ldr	r0, [pc, #84]	; (8044848 <RadioRxBoosted+0x70>)
 80447f4:	f7fe fb3c 	bl	8042e70 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80447f8:	4813      	ldr	r0, [pc, #76]	; (8044848 <RadioRxBoosted+0x70>)
 80447fa:	f7fe f981 	bl	8042b00 <TimerStart>
    }

    lr1110_radio_cfg_rx_boosted( &LR1110, true );
 80447fe:	2101      	movs	r1, #1
 8044800:	4810      	ldr	r0, [pc, #64]	; (8044844 <RadioRxBoosted+0x6c>)
 8044802:	f001 fc90 	bl	8046126 <lr1110_radio_cfg_rx_boosted>
    if( RxContinuous == true )
 8044806:	4b11      	ldr	r3, [pc, #68]	; (804484c <RadioRxBoosted+0x74>)
 8044808:	781b      	ldrb	r3, [r3, #0]
 804480a:	2b00      	cmp	r3, #0
 804480c:	d009      	beq.n	8044822 <RadioRxBoosted+0x4a>
    {
        lr1110_radio_set_rx( &LR1110, 0xFFFFFF );  // Rx Continuous
 804480e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8044812:	480c      	ldr	r0, [pc, #48]	; (8044844 <RadioRxBoosted+0x6c>)
 8044814:	f001 f9d4 	bl	8045bc0 <lr1110_radio_set_rx>
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX_C );
 8044818:	2106      	movs	r1, #6
 804481a:	480a      	ldr	r0, [pc, #40]	; (8044844 <RadioRxBoosted+0x6c>)
 804481c:	f7ff fa19 	bl	8043c52 <lr1110_hal_set_operating_mode>
    else
    {
        lr1110_radio_set_rx( &LR1110, ( RxTimeout * 32768 ) );
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX );
    }
}
 8044820:	e00a      	b.n	8044838 <RadioRxBoosted+0x60>
        lr1110_radio_set_rx( &LR1110, ( RxTimeout * 32768 ) );
 8044822:	4b0b      	ldr	r3, [pc, #44]	; (8044850 <RadioRxBoosted+0x78>)
 8044824:	681b      	ldr	r3, [r3, #0]
 8044826:	03db      	lsls	r3, r3, #15
 8044828:	4619      	mov	r1, r3
 804482a:	4806      	ldr	r0, [pc, #24]	; (8044844 <RadioRxBoosted+0x6c>)
 804482c:	f001 f9c8 	bl	8045bc0 <lr1110_radio_set_rx>
        lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX );
 8044830:	2105      	movs	r1, #5
 8044832:	4804      	ldr	r0, [pc, #16]	; (8044844 <RadioRxBoosted+0x6c>)
 8044834:	f7ff fa0d 	bl	8043c52 <lr1110_hal_set_operating_mode>
}
 8044838:	bf00      	nop
 804483a:	3708      	adds	r7, #8
 804483c:	46bd      	mov	sp, r7
 804483e:	bd80      	pop	{r7, pc}
 8044840:	03f807fc 	.word	0x03f807fc
 8044844:	2001964c 	.word	0x2001964c
 8044848:	2001982c 	.word	0x2001982c
 804484c:	200183b0 	.word	0x200183b0
 8044850:	200183ac 	.word	0x200183ac

08044854 <RadioSetRxDutyCycle>:

void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8044854:	b580      	push	{r7, lr}
 8044856:	b082      	sub	sp, #8
 8044858:	af00      	add	r7, sp, #0
 804485a:	6078      	str	r0, [r7, #4]
 804485c:	6039      	str	r1, [r7, #0]
    lr1110_radio_set_rx_duty_cycle( &LR1110, rxTime, sleepTime, 0 );
 804485e:	2300      	movs	r3, #0
 8044860:	683a      	ldr	r2, [r7, #0]
 8044862:	6879      	ldr	r1, [r7, #4]
 8044864:	4805      	ldr	r0, [pc, #20]	; (804487c <RadioSetRxDutyCycle+0x28>)
 8044866:	f001 fb3a 	bl	8045ede <lr1110_radio_set_rx_duty_cycle>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_RX_DC );
 804486a:	2107      	movs	r1, #7
 804486c:	4803      	ldr	r0, [pc, #12]	; (804487c <RadioSetRxDutyCycle+0x28>)
 804486e:	f7ff f9f0 	bl	8043c52 <lr1110_hal_set_operating_mode>
}
 8044872:	bf00      	nop
 8044874:	3708      	adds	r7, #8
 8044876:	46bd      	mov	sp, r7
 8044878:	bd80      	pop	{r7, pc}
 804487a:	bf00      	nop
 804487c:	2001964c 	.word	0x2001964c

08044880 <RadioStartCad>:

void RadioStartCad( void )
{
 8044880:	b580      	push	{r7, lr}
 8044882:	af00      	add	r7, sp, #0
    lr1110_radio_set_cad( &LR1110 );
 8044884:	4804      	ldr	r0, [pc, #16]	; (8044898 <RadioStartCad+0x18>)
 8044886:	f001 fbb2 	bl	8045fee <lr1110_radio_set_cad>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_CAD );
 804488a:	2108      	movs	r1, #8
 804488c:	4802      	ldr	r0, [pc, #8]	; (8044898 <RadioStartCad+0x18>)
 804488e:	f7ff f9e0 	bl	8043c52 <lr1110_hal_set_operating_mode>
}
 8044892:	bf00      	nop
 8044894:	bd80      	pop	{r7, pc}
 8044896:	bf00      	nop
 8044898:	2001964c 	.word	0x2001964c

0804489c <RadioSetTxContinuousWave>:
    lr1110_radio_set_tx( &LR1110, timeout * 32768 );
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_TX );
}

void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 804489c:	b580      	push	{r7, lr}
 804489e:	b084      	sub	sp, #16
 80448a0:	af00      	add	r7, sp, #0
 80448a2:	6078      	str	r0, [r7, #4]
 80448a4:	460b      	mov	r3, r1
 80448a6:	70fb      	strb	r3, [r7, #3]
 80448a8:	4613      	mov	r3, r2
 80448aa:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 80448ac:	883b      	ldrh	r3, [r7, #0]
 80448ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80448b2:	fb02 f303 	mul.w	r3, r2, r3
 80448b6:	60fb      	str	r3, [r7, #12]

    lr1110_radio_set_rf_freq( &LR1110, freq );
 80448b8:	6879      	ldr	r1, [r7, #4]
 80448ba:	480d      	ldr	r0, [pc, #52]	; (80448f0 <RadioSetTxContinuousWave+0x54>)
 80448bc:	f001 f9e8 	bl	8045c90 <lr1110_radio_set_rf_freq>
    lr1110_board_set_rf_tx_power( &LR1110, power );
 80448c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80448c4:	4619      	mov	r1, r3
 80448c6:	480a      	ldr	r0, [pc, #40]	; (80448f0 <RadioSetTxContinuousWave+0x54>)
 80448c8:	f7fe ffc2 	bl	8043850 <lr1110_board_set_rf_tx_power>
    lr1110_radio_set_tx_cw( &LR1110 );
 80448cc:	4808      	ldr	r0, [pc, #32]	; (80448f0 <RadioSetTxContinuousWave+0x54>)
 80448ce:	f001 fba4 	bl	804601a <lr1110_radio_set_tx_cw>
    lr1110_hal_set_operating_mode( &LR1110, LR1110_HAL_OP_MODE_TX );
 80448d2:	2104      	movs	r1, #4
 80448d4:	4806      	ldr	r0, [pc, #24]	; (80448f0 <RadioSetTxContinuousWave+0x54>)
 80448d6:	f7ff f9bc 	bl	8043c52 <lr1110_hal_set_operating_mode>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80448da:	68f9      	ldr	r1, [r7, #12]
 80448dc:	4805      	ldr	r0, [pc, #20]	; (80448f4 <RadioSetTxContinuousWave+0x58>)
 80448de:	f7fe fac7 	bl	8042e70 <TimerSetValue>
    TimerStart( &TxTimeoutTimer );
 80448e2:	4804      	ldr	r0, [pc, #16]	; (80448f4 <RadioSetTxContinuousWave+0x58>)
 80448e4:	f7fe f90c 	bl	8042b00 <TimerStart>
}
 80448e8:	bf00      	nop
 80448ea:	3710      	adds	r7, #16
 80448ec:	46bd      	mov	sp, r7
 80448ee:	bd80      	pop	{r7, pc}
 80448f0:	2001964c 	.word	0x2001964c
 80448f4:	20019708 	.word	0x20019708

080448f8 <RadioRssi>:

int16_t RadioRssi( RadioModems_t modem )
{
 80448f8:	b580      	push	{r7, lr}
 80448fa:	b084      	sub	sp, #16
 80448fc:	af00      	add	r7, sp, #0
 80448fe:	4603      	mov	r3, r0
 8044900:	71fb      	strb	r3, [r7, #7]
    int8_t rssi = 0;
 8044902:	2300      	movs	r3, #0
 8044904:	73fb      	strb	r3, [r7, #15]

    lr1110_radio_get_rssi_inst( &LR1110, &rssi );
 8044906:	f107 030f 	add.w	r3, r7, #15
 804490a:	4619      	mov	r1, r3
 804490c:	4804      	ldr	r0, [pc, #16]	; (8044920 <RadioRssi+0x28>)
 804490e:	f001 f8e9 	bl	8045ae4 <lr1110_radio_get_rssi_inst>

    return rssi;
 8044912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8044916:	b21b      	sxth	r3, r3
}
 8044918:	4618      	mov	r0, r3
 804491a:	3710      	adds	r7, #16
 804491c:	46bd      	mov	sp, r7
 804491e:	bd80      	pop	{r7, pc}
 8044920:	2001964c 	.word	0x2001964c

08044924 <RadioWrite>:

void RadioWrite( uint32_t addr, uint8_t data )
{
 8044924:	b580      	push	{r7, lr}
 8044926:	b082      	sub	sp, #8
 8044928:	af00      	add	r7, sp, #0
 804492a:	6078      	str	r0, [r7, #4]
 804492c:	460b      	mov	r3, r1
 804492e:	70fb      	strb	r3, [r7, #3]
    lr1110_regmem_write_mem8( &LR1110, addr, &data, 1 );
 8044930:	1cfa      	adds	r2, r7, #3
 8044932:	2301      	movs	r3, #1
 8044934:	6879      	ldr	r1, [r7, #4]
 8044936:	4803      	ldr	r0, [pc, #12]	; (8044944 <RadioWrite+0x20>)
 8044938:	f001 fc22 	bl	8046180 <lr1110_regmem_write_mem8>
}
 804493c:	bf00      	nop
 804493e:	3708      	adds	r7, #8
 8044940:	46bd      	mov	sp, r7
 8044942:	bd80      	pop	{r7, pc}
 8044944:	2001964c 	.word	0x2001964c

08044948 <RadioRead>:

uint8_t RadioRead( uint32_t addr )
{
 8044948:	b580      	push	{r7, lr}
 804494a:	b084      	sub	sp, #16
 804494c:	af00      	add	r7, sp, #0
 804494e:	6078      	str	r0, [r7, #4]
    uint8_t data = 0;
 8044950:	2300      	movs	r3, #0
 8044952:	73fb      	strb	r3, [r7, #15]

    lr1110_regmem_read_mem8( &LR1110, addr, &data, 1 );
 8044954:	f107 020f 	add.w	r2, r7, #15
 8044958:	2301      	movs	r3, #1
 804495a:	6879      	ldr	r1, [r7, #4]
 804495c:	4803      	ldr	r0, [pc, #12]	; (804496c <RadioRead+0x24>)
 804495e:	f001 fc2d 	bl	80461bc <lr1110_regmem_read_mem8>

    return data;
 8044962:	7bfb      	ldrb	r3, [r7, #15]
}
 8044964:	4618      	mov	r0, r3
 8044966:	3710      	adds	r7, #16
 8044968:	46bd      	mov	sp, r7
 804496a:	bd80      	pop	{r7, pc}
 804496c:	2001964c 	.word	0x2001964c

08044970 <RadioWriteBuffer>:

void RadioWriteBuffer( uint32_t addr, uint8_t* buffer, uint8_t size )
{
 8044970:	b580      	push	{r7, lr}
 8044972:	b084      	sub	sp, #16
 8044974:	af00      	add	r7, sp, #0
 8044976:	60f8      	str	r0, [r7, #12]
 8044978:	60b9      	str	r1, [r7, #8]
 804497a:	4613      	mov	r3, r2
 804497c:	71fb      	strb	r3, [r7, #7]
    lr1110_regmem_write_buffer8( &LR1110, buffer, size );
 804497e:	79fb      	ldrb	r3, [r7, #7]
 8044980:	461a      	mov	r2, r3
 8044982:	68b9      	ldr	r1, [r7, #8]
 8044984:	4803      	ldr	r0, [pc, #12]	; (8044994 <RadioWriteBuffer+0x24>)
 8044986:	f001 fc37 	bl	80461f8 <lr1110_regmem_write_buffer8>
}
 804498a:	bf00      	nop
 804498c:	3710      	adds	r7, #16
 804498e:	46bd      	mov	sp, r7
 8044990:	bd80      	pop	{r7, pc}
 8044992:	bf00      	nop
 8044994:	2001964c 	.word	0x2001964c

08044998 <RadioReadBuffer>:

void RadioReadBuffer( uint32_t addr, uint8_t* buffer, uint8_t size )
{
 8044998:	b580      	push	{r7, lr}
 804499a:	b084      	sub	sp, #16
 804499c:	af00      	add	r7, sp, #0
 804499e:	60f8      	str	r0, [r7, #12]
 80449a0:	60b9      	str	r1, [r7, #8]
 80449a2:	4613      	mov	r3, r2
 80449a4:	71fb      	strb	r3, [r7, #7]
    lr1110_regmem_read_buffer8( &LR1110, buffer, addr, size );
 80449a6:	68fb      	ldr	r3, [r7, #12]
 80449a8:	b2da      	uxtb	r2, r3
 80449aa:	79fb      	ldrb	r3, [r7, #7]
 80449ac:	68b9      	ldr	r1, [r7, #8]
 80449ae:	4803      	ldr	r0, [pc, #12]	; (80449bc <RadioReadBuffer+0x24>)
 80449b0:	f001 fc3c 	bl	804622c <lr1110_regmem_read_buffer8>
}
 80449b4:	bf00      	nop
 80449b6:	3710      	adds	r7, #16
 80449b8:	46bd      	mov	sp, r7
 80449ba:	bd80      	pop	{r7, pc}
 80449bc:	2001964c 	.word	0x2001964c

080449c0 <RadioSetMaxPayloadLength>:
{
    lr1110_regmem_read_buffer8( &LR1110, buffer, offset, size );
}

void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80449c0:	b580      	push	{r7, lr}
 80449c2:	b082      	sub	sp, #8
 80449c4:	af00      	add	r7, sp, #0
 80449c6:	4603      	mov	r3, r0
 80449c8:	460a      	mov	r2, r1
 80449ca:	71fb      	strb	r3, [r7, #7]
 80449cc:	4613      	mov	r3, r2
 80449ce:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 80449d0:	79fb      	ldrb	r3, [r7, #7]
 80449d2:	2b01      	cmp	r3, #1
 80449d4:	d10c      	bne.n	80449f0 <RadioSetMaxPayloadLength+0x30>
    {
        LR1110.packet_params.packet.lora.pld_len_in_bytes = MaxPayloadLength = max;
 80449d6:	4a11      	ldr	r2, [pc, #68]	; (8044a1c <RadioSetMaxPayloadLength+0x5c>)
 80449d8:	79bb      	ldrb	r3, [r7, #6]
 80449da:	7013      	strb	r3, [r2, #0]
 80449dc:	4b0f      	ldr	r3, [pc, #60]	; (8044a1c <RadioSetMaxPayloadLength+0x5c>)
 80449de:	781a      	ldrb	r2, [r3, #0]
 80449e0:	4b0f      	ldr	r3, [pc, #60]	; (8044a20 <RadioSetMaxPayloadLength+0x60>)
 80449e2:	f883 20b7 	strb.w	r2, [r3, #183]	; 0xb7
        lr1110_radio_set_lora_pkt_params( &LR1110, &LR1110.packet_params.packet.lora );
 80449e6:	490f      	ldr	r1, [pc, #60]	; (8044a24 <RadioSetMaxPayloadLength+0x64>)
 80449e8:	480d      	ldr	r0, [pc, #52]	; (8044a20 <RadioSetMaxPayloadLength+0x60>)
 80449ea:	f001 fa2d 	bl	8045e48 <lr1110_radio_set_lora_pkt_params>
        {
            LR1110.packet_params.packet.gfsk.pld_len_in_bytes = MaxPayloadLength = max;
            lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
        }
    }
}
 80449ee:	e010      	b.n	8044a12 <RadioSetMaxPayloadLength+0x52>
        if( LR1110.packet_params.packet.gfsk.header_type == LR1110_RADIO_GFSK_PKT_VAR_LEN )
 80449f0:	4b0b      	ldr	r3, [pc, #44]	; (8044a20 <RadioSetMaxPayloadLength+0x60>)
 80449f2:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 80449f6:	2b01      	cmp	r3, #1
 80449f8:	d10b      	bne.n	8044a12 <RadioSetMaxPayloadLength+0x52>
            LR1110.packet_params.packet.gfsk.pld_len_in_bytes = MaxPayloadLength = max;
 80449fa:	4a08      	ldr	r2, [pc, #32]	; (8044a1c <RadioSetMaxPayloadLength+0x5c>)
 80449fc:	79bb      	ldrb	r3, [r7, #6]
 80449fe:	7013      	strb	r3, [r2, #0]
 8044a00:	4b06      	ldr	r3, [pc, #24]	; (8044a1c <RadioSetMaxPayloadLength+0x5c>)
 8044a02:	781a      	ldrb	r2, [r3, #0]
 8044a04:	4b06      	ldr	r3, [pc, #24]	; (8044a20 <RadioSetMaxPayloadLength+0x60>)
 8044a06:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
            lr1110_radio_set_gfsk_pkt_params( &LR1110, &LR1110.packet_params.packet.gfsk );
 8044a0a:	4907      	ldr	r1, [pc, #28]	; (8044a28 <RadioSetMaxPayloadLength+0x68>)
 8044a0c:	4804      	ldr	r0, [pc, #16]	; (8044a20 <RadioSetMaxPayloadLength+0x60>)
 8044a0e:	f001 f9e5 	bl	8045ddc <lr1110_radio_set_gfsk_pkt_params>
}
 8044a12:	bf00      	nop
 8044a14:	3708      	adds	r7, #8
 8044a16:	46bd      	mov	sp, r7
 8044a18:	bd80      	pop	{r7, pc}
 8044a1a:	bf00      	nop
 8044a1c:	2001805c 	.word	0x2001805c
 8044a20:	2001964c 	.word	0x2001964c
 8044a24:	20019700 	.word	0x20019700
 8044a28:	200196f6 	.word	0x200196f6

08044a2c <RadioSetPublicNetwork>:

void RadioSetPublicNetwork( bool enable )
{
 8044a2c:	b580      	push	{r7, lr}
 8044a2e:	b082      	sub	sp, #8
 8044a30:	af00      	add	r7, sp, #0
 8044a32:	4603      	mov	r3, r0
 8044a34:	71fb      	strb	r3, [r7, #7]
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 8044a36:	4a0d      	ldr	r2, [pc, #52]	; (8044a6c <RadioSetPublicNetwork+0x40>)
 8044a38:	79fb      	ldrb	r3, [r7, #7]
 8044a3a:	7013      	strb	r3, [r2, #0]
 8044a3c:	4b0b      	ldr	r3, [pc, #44]	; (8044a6c <RadioSetPublicNetwork+0x40>)
 8044a3e:	781a      	ldrb	r2, [r3, #0]
 8044a40:	4b0a      	ldr	r3, [pc, #40]	; (8044a6c <RadioSetPublicNetwork+0x40>)
 8044a42:	705a      	strb	r2, [r3, #1]

    RadioSetModem( MODEM_LORA );
 8044a44:	2001      	movs	r0, #1
 8044a46:	f7ff f9a7 	bl	8043d98 <RadioSetModem>
    if( enable == true )
 8044a4a:	79fb      	ldrb	r3, [r7, #7]
 8044a4c:	2b00      	cmp	r3, #0
 8044a4e:	d004      	beq.n	8044a5a <RadioSetPublicNetwork+0x2e>
    {
        // Change LoRa modem SyncWord
        lr1110_radio_set_lora_sync_word( &LR1110, LR1110_RADIO_LORA_NETWORK_PUBLIC );
 8044a50:	2101      	movs	r1, #1
 8044a52:	4807      	ldr	r0, [pc, #28]	; (8044a70 <RadioSetPublicNetwork+0x44>)
 8044a54:	f001 f89a 	bl	8045b8c <lr1110_radio_set_lora_sync_word>
    else
    {
        // Change LoRa modem SyncWord
        lr1110_radio_set_lora_sync_word( &LR1110, LR1110_RADIO_LORA_NETWORK_PRIVATE );
    }
}
 8044a58:	e003      	b.n	8044a62 <RadioSetPublicNetwork+0x36>
        lr1110_radio_set_lora_sync_word( &LR1110, LR1110_RADIO_LORA_NETWORK_PRIVATE );
 8044a5a:	2100      	movs	r1, #0
 8044a5c:	4804      	ldr	r0, [pc, #16]	; (8044a70 <RadioSetPublicNetwork+0x44>)
 8044a5e:	f001 f895 	bl	8045b8c <lr1110_radio_set_lora_sync_word>
}
 8044a62:	bf00      	nop
 8044a64:	3708      	adds	r7, #8
 8044a66:	46bd      	mov	sp, r7
 8044a68:	bd80      	pop	{r7, pc}
 8044a6a:	bf00      	nop
 8044a6c:	200183b4 	.word	0x200183b4
 8044a70:	2001964c 	.word	0x2001964c

08044a74 <RadioGetWakeupTime>:

uint32_t RadioGetWakeupTime( void )
{
 8044a74:	b580      	push	{r7, lr}
 8044a76:	af00      	add	r7, sp, #0
    return lr1110_board_get_tcxo_wakeup_time( &LR1110 ) + 3;
 8044a78:	4803      	ldr	r0, [pc, #12]	; (8044a88 <RadioGetWakeupTime+0x14>)
 8044a7a:	f7fe ff0c 	bl	8043896 <lr1110_board_get_tcxo_wakeup_time>
 8044a7e:	4603      	mov	r3, r0
 8044a80:	3303      	adds	r3, #3
}
 8044a82:	4618      	mov	r0, r3
 8044a84:	bd80      	pop	{r7, pc}
 8044a86:	bf00      	nop
 8044a88:	2001964c 	.word	0x2001964c

08044a8c <RadioOnTxTimeoutIrq>:

void RadioOnTxTimeoutIrq( void* context )
{
 8044a8c:	b580      	push	{r7, lr}
 8044a8e:	b082      	sub	sp, #8
 8044a90:	af00      	add	r7, sp, #0
 8044a92:	6078      	str	r0, [r7, #4]
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8044a94:	4b08      	ldr	r3, [pc, #32]	; (8044ab8 <RadioOnTxTimeoutIrq+0x2c>)
 8044a96:	681b      	ldr	r3, [r3, #0]
 8044a98:	2b00      	cmp	r3, #0
 8044a9a:	d008      	beq.n	8044aae <RadioOnTxTimeoutIrq+0x22>
 8044a9c:	4b06      	ldr	r3, [pc, #24]	; (8044ab8 <RadioOnTxTimeoutIrq+0x2c>)
 8044a9e:	681b      	ldr	r3, [r3, #0]
 8044aa0:	685b      	ldr	r3, [r3, #4]
 8044aa2:	2b00      	cmp	r3, #0
 8044aa4:	d003      	beq.n	8044aae <RadioOnTxTimeoutIrq+0x22>
    {
        RadioEvents->TxTimeout( );
 8044aa6:	4b04      	ldr	r3, [pc, #16]	; (8044ab8 <RadioOnTxTimeoutIrq+0x2c>)
 8044aa8:	681b      	ldr	r3, [r3, #0]
 8044aaa:	685b      	ldr	r3, [r3, #4]
 8044aac:	4798      	blx	r3
    }
}
 8044aae:	bf00      	nop
 8044ab0:	3708      	adds	r7, #8
 8044ab2:	46bd      	mov	sp, r7
 8044ab4:	bd80      	pop	{r7, pc}
 8044ab6:	bf00      	nop
 8044ab8:	200183b8 	.word	0x200183b8

08044abc <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
 8044abc:	b580      	push	{r7, lr}
 8044abe:	b082      	sub	sp, #8
 8044ac0:	af00      	add	r7, sp, #0
 8044ac2:	6078      	str	r0, [r7, #4]
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8044ac4:	4b08      	ldr	r3, [pc, #32]	; (8044ae8 <RadioOnRxTimeoutIrq+0x2c>)
 8044ac6:	681b      	ldr	r3, [r3, #0]
 8044ac8:	2b00      	cmp	r3, #0
 8044aca:	d008      	beq.n	8044ade <RadioOnRxTimeoutIrq+0x22>
 8044acc:	4b06      	ldr	r3, [pc, #24]	; (8044ae8 <RadioOnRxTimeoutIrq+0x2c>)
 8044ace:	681b      	ldr	r3, [r3, #0]
 8044ad0:	68db      	ldr	r3, [r3, #12]
 8044ad2:	2b00      	cmp	r3, #0
 8044ad4:	d003      	beq.n	8044ade <RadioOnRxTimeoutIrq+0x22>
    {
        RadioEvents->RxTimeout( );
 8044ad6:	4b04      	ldr	r3, [pc, #16]	; (8044ae8 <RadioOnRxTimeoutIrq+0x2c>)
 8044ad8:	681b      	ldr	r3, [r3, #0]
 8044ada:	68db      	ldr	r3, [r3, #12]
 8044adc:	4798      	blx	r3
    }
}
 8044ade:	bf00      	nop
 8044ae0:	3708      	adds	r7, #8
 8044ae2:	46bd      	mov	sp, r7
 8044ae4:	bd80      	pop	{r7, pc}
 8044ae6:	bf00      	nop
 8044ae8:	200183b8 	.word	0x200183b8

08044aec <RadioOnDioIrq>:

void RadioOnDioIrq( void* context )
{
 8044aec:	b480      	push	{r7}
 8044aee:	b083      	sub	sp, #12
 8044af0:	af00      	add	r7, sp, #0
 8044af2:	6078      	str	r0, [r7, #4]
    IrqFired = true;
 8044af4:	4b04      	ldr	r3, [pc, #16]	; (8044b08 <RadioOnDioIrq+0x1c>)
 8044af6:	2201      	movs	r2, #1
 8044af8:	701a      	strb	r2, [r3, #0]
}
 8044afa:	bf00      	nop
 8044afc:	370c      	adds	r7, #12
 8044afe:	46bd      	mov	sp, r7
 8044b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044b04:	4770      	bx	lr
 8044b06:	bf00      	nop
 8044b08:	200183b1 	.word	0x200183b1

08044b0c <lr1110_system_irq_process>:
 * \param [out] irq  Pointer to the interrupt field returned to the caller
 *
 * \see lr1110_system_get_status, lr1110_system_clear_irq
 */
static void lr1110_system_irq_process( const void* radio, uint32_t* irq )
{
 8044b0c:	b580      	push	{r7, lr}
 8044b0e:	b084      	sub	sp, #16
 8044b10:	af00      	add	r7, sp, #0
 8044b12:	6078      	str	r0, [r7, #4]
 8044b14:	6039      	str	r1, [r7, #0]
    lr1110_system_stat1_t stat1;
    lr1110_system_stat2_t stat2;

    lr1110_hal_operating_mode_t op_mode = lr1110_hal_get_operating_mode( radio );
 8044b16:	6878      	ldr	r0, [r7, #4]
 8044b18:	f7ff f88e 	bl	8043c38 <lr1110_hal_get_operating_mode>
 8044b1c:	4603      	mov	r3, r0
 8044b1e:	73fb      	strb	r3, [r7, #15]

    lr1110_system_get_status( radio, &stat1, &stat2, irq );
 8044b20:	f107 0208 	add.w	r2, r7, #8
 8044b24:	f107 010c 	add.w	r1, r7, #12
 8044b28:	683b      	ldr	r3, [r7, #0]
 8044b2a:	6878      	ldr	r0, [r7, #4]
 8044b2c:	f001 fbf3 	bl	8046316 <lr1110_system_get_status>
    lr1110_system_clear_irq_status( radio, *irq );
 8044b30:	683b      	ldr	r3, [r7, #0]
 8044b32:	681b      	ldr	r3, [r3, #0]
 8044b34:	4619      	mov	r1, r3
 8044b36:	6878      	ldr	r0, [r7, #4]
 8044b38:	f001 fd32 	bl	80465a0 <lr1110_system_clear_irq_status>

    if( ( ( *irq & LR1110_SYSTEM_IRQ_TX_DONE ) != 0 ) || ( ( *irq & LR1110_SYSTEM_IRQ_CAD_DONE ) != 0 ) ||
 8044b3c:	683b      	ldr	r3, [r7, #0]
 8044b3e:	681b      	ldr	r3, [r3, #0]
 8044b40:	f003 0304 	and.w	r3, r3, #4
 8044b44:	2b00      	cmp	r3, #0
 8044b46:	d10b      	bne.n	8044b60 <lr1110_system_irq_process+0x54>
 8044b48:	683b      	ldr	r3, [r7, #0]
 8044b4a:	681b      	ldr	r3, [r3, #0]
 8044b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8044b50:	2b00      	cmp	r3, #0
 8044b52:	d105      	bne.n	8044b60 <lr1110_system_irq_process+0x54>
        ( ( *irq & LR1110_SYSTEM_IRQ_TIMEOUT ) != 0 ) )
 8044b54:	683b      	ldr	r3, [r7, #0]
 8044b56:	681b      	ldr	r3, [r3, #0]
 8044b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    if( ( ( *irq & LR1110_SYSTEM_IRQ_TX_DONE ) != 0 ) || ( ( *irq & LR1110_SYSTEM_IRQ_CAD_DONE ) != 0 ) ||
 8044b5c:	2b00      	cmp	r3, #0
 8044b5e:	d003      	beq.n	8044b68 <lr1110_system_irq_process+0x5c>
    {
        lr1110_hal_set_operating_mode( radio, LR1110_HAL_OP_MODE_STDBY_RC );
 8044b60:	2101      	movs	r1, #1
 8044b62:	6878      	ldr	r0, [r7, #4]
 8044b64:	f7ff f875 	bl	8043c52 <lr1110_hal_set_operating_mode>
    }

    if( ( ( *irq & LR1110_SYSTEM_IRQ_HEADER_ERROR ) != 0 ) || ( ( *irq & LR1110_SYSTEM_IRQ_RX_DONE ) != 0 ) ||
 8044b68:	683b      	ldr	r3, [r7, #0]
 8044b6a:	681b      	ldr	r3, [r3, #0]
 8044b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044b70:	2b00      	cmp	r3, #0
 8044b72:	d10b      	bne.n	8044b8c <lr1110_system_irq_process+0x80>
 8044b74:	683b      	ldr	r3, [r7, #0]
 8044b76:	681b      	ldr	r3, [r3, #0]
 8044b78:	f003 0308 	and.w	r3, r3, #8
 8044b7c:	2b00      	cmp	r3, #0
 8044b7e:	d105      	bne.n	8044b8c <lr1110_system_irq_process+0x80>
        ( ( *irq & LR1110_SYSTEM_IRQ_CRC_ERROR ) != 0 ) )
 8044b80:	683b      	ldr	r3, [r7, #0]
 8044b82:	681b      	ldr	r3, [r3, #0]
 8044b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
    if( ( ( *irq & LR1110_SYSTEM_IRQ_HEADER_ERROR ) != 0 ) || ( ( *irq & LR1110_SYSTEM_IRQ_RX_DONE ) != 0 ) ||
 8044b88:	2b00      	cmp	r3, #0
 8044b8a:	d006      	beq.n	8044b9a <lr1110_system_irq_process+0x8e>
    {
        if( op_mode != LR1110_HAL_OP_MODE_RX_C )
 8044b8c:	7bfb      	ldrb	r3, [r7, #15]
 8044b8e:	2b06      	cmp	r3, #6
 8044b90:	d003      	beq.n	8044b9a <lr1110_system_irq_process+0x8e>
        {
            lr1110_hal_set_operating_mode( radio, LR1110_HAL_OP_MODE_STDBY_RC );
 8044b92:	2101      	movs	r1, #1
 8044b94:	6878      	ldr	r0, [r7, #4]
 8044b96:	f7ff f85c 	bl	8043c52 <lr1110_hal_set_operating_mode>
        }
    }
}
 8044b9a:	bf00      	nop
 8044b9c:	3710      	adds	r7, #16
 8044b9e:	46bd      	mov	sp, r7
 8044ba0:	bd80      	pop	{r7, pc}
	...

08044ba4 <RadioIrqProcess>:

void RadioIrqProcess( void )
{
 8044ba4:	b590      	push	{r4, r7, lr}
 8044ba6:	b085      	sub	sp, #20
 8044ba8:	af00      	add	r7, sp, #0
    if( IrqFired == true )
 8044baa:	4b7e      	ldr	r3, [pc, #504]	; (8044da4 <RadioIrqProcess+0x200>)
 8044bac:	781b      	ldrb	r3, [r3, #0]
 8044bae:	2b00      	cmp	r3, #0
 8044bb0:	f000 80f3 	beq.w	8044d9a <RadioIrqProcess+0x1f6>
    {
        CRITICAL_SECTION_BEGIN( );
 8044bb4:	f107 030c 	add.w	r3, r7, #12
 8044bb8:	4618      	mov	r0, r3
 8044bba:	f000 f91f 	bl	8044dfc <BoardCriticalSectionBegin>
        // Clear IRQ flag
        IrqFired = false;
 8044bbe:	4b79      	ldr	r3, [pc, #484]	; (8044da4 <RadioIrqProcess+0x200>)
 8044bc0:	2200      	movs	r2, #0
 8044bc2:	701a      	strb	r2, [r3, #0]
        CRITICAL_SECTION_END( );
 8044bc4:	f107 030c 	add.w	r3, r7, #12
 8044bc8:	4618      	mov	r0, r3
 8044bca:	f000 f929 	bl	8044e20 <BoardCriticalSectionEnd>

        uint32_t irqRegs;
        // Get Status
        lr1110_system_irq_process( &LR1110, &irqRegs );
 8044bce:	f107 0308 	add.w	r3, r7, #8
 8044bd2:	4619      	mov	r1, r3
 8044bd4:	4874      	ldr	r0, [pc, #464]	; (8044da8 <RadioIrqProcess+0x204>)
 8044bd6:	f7ff ff99 	bl	8044b0c <lr1110_system_irq_process>

        if( ( irqRegs & LR1110_SYSTEM_IRQ_TX_DONE ) == LR1110_SYSTEM_IRQ_TX_DONE )
 8044bda:	68bb      	ldr	r3, [r7, #8]
 8044bdc:	f003 0304 	and.w	r3, r3, #4
 8044be0:	2b00      	cmp	r3, #0
 8044be2:	d00f      	beq.n	8044c04 <RadioIrqProcess+0x60>
        {
            TimerStop( &TxTimeoutTimer );
 8044be4:	4871      	ldr	r0, [pc, #452]	; (8044dac <RadioIrqProcess+0x208>)
 8044be6:	f7fe f8ab 	bl	8042d40 <TimerStop>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8044bea:	4b71      	ldr	r3, [pc, #452]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044bec:	681b      	ldr	r3, [r3, #0]
 8044bee:	2b00      	cmp	r3, #0
 8044bf0:	d008      	beq.n	8044c04 <RadioIrqProcess+0x60>
 8044bf2:	4b6f      	ldr	r3, [pc, #444]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044bf4:	681b      	ldr	r3, [r3, #0]
 8044bf6:	681b      	ldr	r3, [r3, #0]
 8044bf8:	2b00      	cmp	r3, #0
 8044bfa:	d003      	beq.n	8044c04 <RadioIrqProcess+0x60>
            {
                RadioEvents->TxDone( );
 8044bfc:	4b6c      	ldr	r3, [pc, #432]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044bfe:	681b      	ldr	r3, [r3, #0]
 8044c00:	681b      	ldr	r3, [r3, #0]
 8044c02:	4798      	blx	r3
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_RX_DONE ) == LR1110_SYSTEM_IRQ_RX_DONE )
 8044c04:	68bb      	ldr	r3, [r7, #8]
 8044c06:	f003 0308 	and.w	r3, r3, #8
 8044c0a:	2b00      	cmp	r3, #0
 8044c0c:	d04a      	beq.n	8044ca4 <RadioIrqProcess+0x100>
        {
            lr1110_radio_pkt_type_t    packet_type;
            lr1110_radio_rx_buffer_status_t rxbuffer_status;

            TimerStop( &RxTimeoutTimer );
 8044c0e:	4869      	ldr	r0, [pc, #420]	; (8044db4 <RadioIrqProcess+0x210>)
 8044c10:	f7fe f896 	bl	8042d40 <TimerStop>

            lr1110_radio_get_rx_buffer_status( &LR1110, &rxbuffer_status );
 8044c14:	1d3b      	adds	r3, r7, #4
 8044c16:	4619      	mov	r1, r3
 8044c18:	4863      	ldr	r0, [pc, #396]	; (8044da8 <RadioIrqProcess+0x204>)
 8044c1a:	f000 fe89 	bl	8045930 <lr1110_radio_get_rx_buffer_status>
            lr1110_regmem_read_buffer8( &LR1110, RadioRxPayload, rxbuffer_status.buffer_start_pointer,
 8044c1e:	797a      	ldrb	r2, [r7, #5]
 8044c20:	793b      	ldrb	r3, [r7, #4]
 8044c22:	4965      	ldr	r1, [pc, #404]	; (8044db8 <RadioIrqProcess+0x214>)
 8044c24:	4860      	ldr	r0, [pc, #384]	; (8044da8 <RadioIrqProcess+0x204>)
 8044c26:	f001 fb01 	bl	804622c <lr1110_regmem_read_buffer8>
                                        rxbuffer_status.pld_len_in_bytes );

            lr1110_radio_get_pkt_type( &LR1110, &packet_type );
 8044c2a:	1dfb      	adds	r3, r7, #7
 8044c2c:	4619      	mov	r1, r3
 8044c2e:	485e      	ldr	r0, [pc, #376]	; (8044da8 <RadioIrqProcess+0x204>)
 8044c30:	f000 fe5c 	bl	80458ec <lr1110_radio_get_pkt_type>
            if( packet_type == LR1110_RADIO_PKT_TYPE_LORA )
 8044c34:	79fb      	ldrb	r3, [r7, #7]
 8044c36:	2b02      	cmp	r3, #2
 8044c38:	d11b      	bne.n	8044c72 <RadioIrqProcess+0xce>
            {
                lr1110_radio_get_lora_pkt_status( &LR1110, &lora_packet_status );
 8044c3a:	4960      	ldr	r1, [pc, #384]	; (8044dbc <RadioIrqProcess+0x218>)
 8044c3c:	485a      	ldr	r0, [pc, #360]	; (8044da8 <RadioIrqProcess+0x204>)
 8044c3e:	f000 ff13 	bl	8045a68 <lr1110_radio_get_lora_pkt_status>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8044c42:	4b5b      	ldr	r3, [pc, #364]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044c44:	681b      	ldr	r3, [r3, #0]
 8044c46:	2b00      	cmp	r3, #0
 8044c48:	d02c      	beq.n	8044ca4 <RadioIrqProcess+0x100>
 8044c4a:	4b59      	ldr	r3, [pc, #356]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044c4c:	681b      	ldr	r3, [r3, #0]
 8044c4e:	689b      	ldr	r3, [r3, #8]
 8044c50:	2b00      	cmp	r3, #0
 8044c52:	d027      	beq.n	8044ca4 <RadioIrqProcess+0x100>
                {
                    RadioEvents->RxDone( RadioRxPayload, rxbuffer_status.pld_len_in_bytes,
 8044c54:	4b56      	ldr	r3, [pc, #344]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044c56:	681b      	ldr	r3, [r3, #0]
 8044c58:	689c      	ldr	r4, [r3, #8]
 8044c5a:	793b      	ldrb	r3, [r7, #4]
 8044c5c:	b299      	uxth	r1, r3
                                         lora_packet_status.rssi_pkt_in_dbm, lora_packet_status.snr_pkt_in_db);
 8044c5e:	4b57      	ldr	r3, [pc, #348]	; (8044dbc <RadioIrqProcess+0x218>)
 8044c60:	f993 3000 	ldrsb.w	r3, [r3]
                    RadioEvents->RxDone( RadioRxPayload, rxbuffer_status.pld_len_in_bytes,
 8044c64:	b21a      	sxth	r2, r3
 8044c66:	4b55      	ldr	r3, [pc, #340]	; (8044dbc <RadioIrqProcess+0x218>)
 8044c68:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8044c6c:	4852      	ldr	r0, [pc, #328]	; (8044db8 <RadioIrqProcess+0x214>)
 8044c6e:	47a0      	blx	r4
 8044c70:	e018      	b.n	8044ca4 <RadioIrqProcess+0x100>
                }
            }
            else
            {
                lr1110_radio_get_gfsk_pkt_status( &LR1110, &gfsk_packet_status );
 8044c72:	4953      	ldr	r1, [pc, #332]	; (8044dc0 <RadioIrqProcess+0x21c>)
 8044c74:	484c      	ldr	r0, [pc, #304]	; (8044da8 <RadioIrqProcess+0x204>)
 8044c76:	f000 fe82 	bl	804597e <lr1110_radio_get_gfsk_pkt_status>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8044c7a:	4b4d      	ldr	r3, [pc, #308]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044c7c:	681b      	ldr	r3, [r3, #0]
 8044c7e:	2b00      	cmp	r3, #0
 8044c80:	d010      	beq.n	8044ca4 <RadioIrqProcess+0x100>
 8044c82:	4b4b      	ldr	r3, [pc, #300]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044c84:	681b      	ldr	r3, [r3, #0]
 8044c86:	689b      	ldr	r3, [r3, #8]
 8044c88:	2b00      	cmp	r3, #0
 8044c8a:	d00b      	beq.n	8044ca4 <RadioIrqProcess+0x100>
                {
                    RadioEvents->RxDone( RadioRxPayload, rxbuffer_status.pld_len_in_bytes,
 8044c8c:	4b48      	ldr	r3, [pc, #288]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044c8e:	681b      	ldr	r3, [r3, #0]
 8044c90:	689c      	ldr	r4, [r3, #8]
 8044c92:	793b      	ldrb	r3, [r7, #4]
 8044c94:	b299      	uxth	r1, r3
                                         gfsk_packet_status.rssi_avg_in_dbm, 0 );
 8044c96:	4b4a      	ldr	r3, [pc, #296]	; (8044dc0 <RadioIrqProcess+0x21c>)
 8044c98:	f993 3001 	ldrsb.w	r3, [r3, #1]
                    RadioEvents->RxDone( RadioRxPayload, rxbuffer_status.pld_len_in_bytes,
 8044c9c:	b21a      	sxth	r2, r3
 8044c9e:	2300      	movs	r3, #0
 8044ca0:	4845      	ldr	r0, [pc, #276]	; (8044db8 <RadioIrqProcess+0x214>)
 8044ca2:	47a0      	blx	r4
                }
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_CRC_ERROR ) == LR1110_SYSTEM_IRQ_CRC_ERROR )
 8044ca4:	68bb      	ldr	r3, [r7, #8]
 8044ca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8044caa:	2b00      	cmp	r3, #0
 8044cac:	d00c      	beq.n	8044cc8 <RadioIrqProcess+0x124>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8044cae:	4b40      	ldr	r3, [pc, #256]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044cb0:	681b      	ldr	r3, [r3, #0]
 8044cb2:	2b00      	cmp	r3, #0
 8044cb4:	d008      	beq.n	8044cc8 <RadioIrqProcess+0x124>
 8044cb6:	4b3e      	ldr	r3, [pc, #248]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044cb8:	681b      	ldr	r3, [r3, #0]
 8044cba:	691b      	ldr	r3, [r3, #16]
 8044cbc:	2b00      	cmp	r3, #0
 8044cbe:	d003      	beq.n	8044cc8 <RadioIrqProcess+0x124>
            {
                RadioEvents->RxError( );
 8044cc0:	4b3b      	ldr	r3, [pc, #236]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044cc2:	681b      	ldr	r3, [r3, #0]
 8044cc4:	691b      	ldr	r3, [r3, #16]
 8044cc6:	4798      	blx	r3
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_CAD_DONE) == LR1110_SYSTEM_IRQ_CAD_DONE )
 8044cc8:	68bb      	ldr	r3, [r7, #8]
 8044cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8044cce:	2b00      	cmp	r3, #0
 8044cd0:	d015      	beq.n	8044cfe <RadioIrqProcess+0x15a>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8044cd2:	4b37      	ldr	r3, [pc, #220]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044cd4:	681b      	ldr	r3, [r3, #0]
 8044cd6:	2b00      	cmp	r3, #0
 8044cd8:	d011      	beq.n	8044cfe <RadioIrqProcess+0x15a>
 8044cda:	4b35      	ldr	r3, [pc, #212]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044cdc:	681b      	ldr	r3, [r3, #0]
 8044cde:	699b      	ldr	r3, [r3, #24]
 8044ce0:	2b00      	cmp	r3, #0
 8044ce2:	d00c      	beq.n	8044cfe <RadioIrqProcess+0x15a>
            {
                RadioEvents->CadDone(
 8044ce4:	4b32      	ldr	r3, [pc, #200]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044ce6:	681b      	ldr	r3, [r3, #0]
 8044ce8:	699b      	ldr	r3, [r3, #24]
                    ( ( irqRegs & LR1110_SYSTEM_IRQ_CAD_DETECTED) == LR1110_SYSTEM_IRQ_CAD_DETECTED ) );
 8044cea:	68ba      	ldr	r2, [r7, #8]
 8044cec:	f402 7200 	and.w	r2, r2, #512	; 0x200
                RadioEvents->CadDone(
 8044cf0:	2a00      	cmp	r2, #0
 8044cf2:	bf14      	ite	ne
 8044cf4:	2201      	movne	r2, #1
 8044cf6:	2200      	moveq	r2, #0
 8044cf8:	b2d2      	uxtb	r2, r2
 8044cfa:	4610      	mov	r0, r2
 8044cfc:	4798      	blx	r3
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_TIMEOUT ) == LR1110_SYSTEM_IRQ_TIMEOUT )
 8044cfe:	68bb      	ldr	r3, [r7, #8]
 8044d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8044d04:	2b00      	cmp	r3, #0
 8044d06:	d00f      	beq.n	8044d28 <RadioIrqProcess+0x184>
        {
            TimerStop( &RxTimeoutTimer );
 8044d08:	482a      	ldr	r0, [pc, #168]	; (8044db4 <RadioIrqProcess+0x210>)
 8044d0a:	f7fe f819 	bl	8042d40 <TimerStop>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8044d0e:	4b28      	ldr	r3, [pc, #160]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044d10:	681b      	ldr	r3, [r3, #0]
 8044d12:	2b00      	cmp	r3, #0
 8044d14:	d008      	beq.n	8044d28 <RadioIrqProcess+0x184>
 8044d16:	4b26      	ldr	r3, [pc, #152]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044d18:	681b      	ldr	r3, [r3, #0]
 8044d1a:	68db      	ldr	r3, [r3, #12]
 8044d1c:	2b00      	cmp	r3, #0
 8044d1e:	d003      	beq.n	8044d28 <RadioIrqProcess+0x184>
            {
                RadioEvents->RxTimeout( );
 8044d20:	4b23      	ldr	r3, [pc, #140]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044d22:	681b      	ldr	r3, [r3, #0]
 8044d24:	68db      	ldr	r3, [r3, #12]
 8044d26:	4798      	blx	r3
        if( ( irqRegs & LR1110_SYSTEM_IRQ_SYNC_WORD_HEADER_VALID ) == LR1110_SYSTEM_IRQ_SYNC_WORD_HEADER_VALID )
        {
            //__NOP( );
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_HEADER_ERROR) == LR1110_SYSTEM_IRQ_HEADER_ERROR )
 8044d28:	68bb      	ldr	r3, [r7, #8]
 8044d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044d2e:	2b00      	cmp	r3, #0
 8044d30:	d00f      	beq.n	8044d52 <RadioIrqProcess+0x1ae>
        {
            TimerStop( &RxTimeoutTimer );
 8044d32:	4820      	ldr	r0, [pc, #128]	; (8044db4 <RadioIrqProcess+0x210>)
 8044d34:	f7fe f804 	bl	8042d40 <TimerStop>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8044d38:	4b1d      	ldr	r3, [pc, #116]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044d3a:	681b      	ldr	r3, [r3, #0]
 8044d3c:	2b00      	cmp	r3, #0
 8044d3e:	d008      	beq.n	8044d52 <RadioIrqProcess+0x1ae>
 8044d40:	4b1b      	ldr	r3, [pc, #108]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044d42:	681b      	ldr	r3, [r3, #0]
 8044d44:	68db      	ldr	r3, [r3, #12]
 8044d46:	2b00      	cmp	r3, #0
 8044d48:	d003      	beq.n	8044d52 <RadioIrqProcess+0x1ae>
            {
                RadioEvents->RxTimeout( );
 8044d4a:	4b19      	ldr	r3, [pc, #100]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044d4c:	681b      	ldr	r3, [r3, #0]
 8044d4e:	68db      	ldr	r3, [r3, #12]
 8044d50:	4798      	blx	r3
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_GNSS_SCAN_DONE) == LR1110_SYSTEM_IRQ_GNSS_SCAN_DONE )
 8044d52:	68bb      	ldr	r3, [r7, #8]
 8044d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8044d58:	2b00      	cmp	r3, #0
 8044d5a:	d00c      	beq.n	8044d76 <RadioIrqProcess+0x1d2>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->GnssDone != NULL ) )
 8044d5c:	4b14      	ldr	r3, [pc, #80]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044d5e:	681b      	ldr	r3, [r3, #0]
 8044d60:	2b00      	cmp	r3, #0
 8044d62:	d008      	beq.n	8044d76 <RadioIrqProcess+0x1d2>
 8044d64:	4b12      	ldr	r3, [pc, #72]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044d66:	681b      	ldr	r3, [r3, #0]
 8044d68:	69db      	ldr	r3, [r3, #28]
 8044d6a:	2b00      	cmp	r3, #0
 8044d6c:	d003      	beq.n	8044d76 <RadioIrqProcess+0x1d2>
            {
                RadioEvents->GnssDone( );
 8044d6e:	4b10      	ldr	r3, [pc, #64]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044d70:	681b      	ldr	r3, [r3, #0]
 8044d72:	69db      	ldr	r3, [r3, #28]
 8044d74:	4798      	blx	r3
            }
        }

        if( ( irqRegs & LR1110_SYSTEM_IRQ_WIFI_SCAN_DONE ) == LR1110_SYSTEM_IRQ_WIFI_SCAN_DONE )
 8044d76:	68bb      	ldr	r3, [r7, #8]
 8044d78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8044d7c:	2b00      	cmp	r3, #0
 8044d7e:	d00c      	beq.n	8044d9a <RadioIrqProcess+0x1f6>
        {
            if( ( RadioEvents != NULL ) && ( RadioEvents->WifiDone != NULL ) )
 8044d80:	4b0b      	ldr	r3, [pc, #44]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044d82:	681b      	ldr	r3, [r3, #0]
 8044d84:	2b00      	cmp	r3, #0
 8044d86:	d008      	beq.n	8044d9a <RadioIrqProcess+0x1f6>
 8044d88:	4b09      	ldr	r3, [pc, #36]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044d8a:	681b      	ldr	r3, [r3, #0]
 8044d8c:	6a1b      	ldr	r3, [r3, #32]
 8044d8e:	2b00      	cmp	r3, #0
 8044d90:	d003      	beq.n	8044d9a <RadioIrqProcess+0x1f6>
            {
                RadioEvents->WifiDone( );
 8044d92:	4b07      	ldr	r3, [pc, #28]	; (8044db0 <RadioIrqProcess+0x20c>)
 8044d94:	681b      	ldr	r3, [r3, #0]
 8044d96:	6a1b      	ldr	r3, [r3, #32]
 8044d98:	4798      	blx	r3
            }
        }
    }
}
 8044d9a:	bf00      	nop
 8044d9c:	3714      	adds	r7, #20
 8044d9e:	46bd      	mov	sp, r7
 8044da0:	bd90      	pop	{r4, r7, pc}
 8044da2:	bf00      	nop
 8044da4:	200183b1 	.word	0x200183b1
 8044da8:	2001964c 	.word	0x2001964c
 8044dac:	20019708 	.word	0x20019708
 8044db0:	200183b8 	.word	0x200183b8
 8044db4:	2001982c 	.word	0x2001982c
 8044db8:	2001972c 	.word	0x2001972c
 8044dbc:	20019648 	.word	0x20019648
 8044dc0:	20019720 	.word	0x20019720

08044dc4 <__io_putchar>:
#if defined(__ARMCC_VERSION) || defined(__ICCARM__)
int fputc(int ch, __attribute__((unused))FILE *f)
#elif __GNUC__
int __io_putchar(int ch)
#endif
{
 8044dc4:	b580      	push	{r7, lr}
 8044dc6:	b082      	sub	sp, #8
 8044dc8:	af00      	add	r7, sp, #0
 8044dca:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8044dcc:	4b09      	ldr	r3, [pc, #36]	; (8044df4 <__io_putchar+0x30>)
 8044dce:	781b      	ldrb	r3, [r3, #0]
 8044dd0:	461a      	mov	r2, r3
 8044dd2:	4613      	mov	r3, r2
 8044dd4:	00db      	lsls	r3, r3, #3
 8044dd6:	4413      	add	r3, r2
 8044dd8:	011b      	lsls	r3, r3, #4
 8044dda:	4a07      	ldr	r2, [pc, #28]	; (8044df8 <__io_putchar+0x34>)
 8044ddc:	1898      	adds	r0, r3, r2
 8044dde:	1d39      	adds	r1, r7, #4
 8044de0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8044de4:	2201      	movs	r2, #1
 8044de6:	f008 ff3b 	bl	804dc60 <HAL_UART_Transmit>
  return ch;
 8044dea:	687b      	ldr	r3, [r7, #4]
}
 8044dec:	4618      	mov	r0, r3
 8044dee:	3708      	adds	r7, #8
 8044df0:	46bd      	mov	sp, r7
 8044df2:	bd80      	pop	{r7, pc}
 8044df4:	200183bc 	.word	0x200183bc
 8044df8:	20019844 	.word	0x20019844

08044dfc <BoardCriticalSectionBegin>:

/**
  * @}
  */
void BoardCriticalSectionBegin( uint32_t *mask )
{
 8044dfc:	b480      	push	{r7}
 8044dfe:	b085      	sub	sp, #20
 8044e00:	af00      	add	r7, sp, #0
 8044e02:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8044e04:	f3ef 8310 	mrs	r3, PRIMASK
 8044e08:	60fb      	str	r3, [r7, #12]
  return(result);
 8044e0a:	68fa      	ldr	r2, [r7, #12]
    *mask = __get_PRIMASK( );
 8044e0c:	687b      	ldr	r3, [r7, #4]
 8044e0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8044e10:	b672      	cpsid	i
}
 8044e12:	bf00      	nop
    __disable_irq( );
}
 8044e14:	bf00      	nop
 8044e16:	3714      	adds	r7, #20
 8044e18:	46bd      	mov	sp, r7
 8044e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e1e:	4770      	bx	lr

08044e20 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd( uint32_t *mask )
{
 8044e20:	b480      	push	{r7}
 8044e22:	b085      	sub	sp, #20
 8044e24:	af00      	add	r7, sp, #0
 8044e26:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( *mask );
 8044e28:	687b      	ldr	r3, [r7, #4]
 8044e2a:	681b      	ldr	r3, [r3, #0]
 8044e2c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8044e2e:	68fb      	ldr	r3, [r7, #12]
 8044e30:	f383 8810 	msr	PRIMASK, r3
}
 8044e34:	bf00      	nop
}
 8044e36:	bf00      	nop
 8044e38:	3714      	adds	r7, #20
 8044e3a:	46bd      	mov	sp, r7
 8044e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044e40:	4770      	bx	lr
	...

08044e44 <BSP_I2C1_Init>:
/**
  * @brief  Initialize BSP I2C1.
  * @retval BSP status.
  */
int32_t BSP_I2C1_Init()
{
 8044e44:	b580      	push	{r7, lr}
 8044e46:	b082      	sub	sp, #8
 8044e48:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 8044e4a:	2300      	movs	r3, #0
 8044e4c:	607b      	str	r3, [r7, #4]

  if(&hi2c1 != NULL)
  {
	 hbus_i2c1 = hi2c1;
 8044e4e:	4a20      	ldr	r2, [pc, #128]	; (8044ed0 <BSP_I2C1_Init+0x8c>)
 8044e50:	4b20      	ldr	r3, [pc, #128]	; (8044ed4 <BSP_I2C1_Init+0x90>)
 8044e52:	4610      	mov	r0, r2
 8044e54:	4619      	mov	r1, r3
 8044e56:	237c      	movs	r3, #124	; 0x7c
 8044e58:	461a      	mov	r2, r3
 8044e5a:	f009 fff3 	bl	804ee44 <memcpy>
  else
  {
	  hbus_i2c1.Instance = BUS_I2C1;
  }

  if (I2c1InitCounter == 0U)
 8044e5e:	4b1e      	ldr	r3, [pc, #120]	; (8044ed8 <BSP_I2C1_Init+0x94>)
 8044e60:	681b      	ldr	r3, [r3, #0]
 8044e62:	2b00      	cmp	r3, #0
 8044e64:	d125      	bne.n	8044eb2 <BSP_I2C1_Init+0x6e>
  {
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
 8044e66:	481a      	ldr	r0, [pc, #104]	; (8044ed0 <BSP_I2C1_Init+0x8c>)
 8044e68:	f004 fe6d 	bl	8049b46 <HAL_I2C_GetState>
 8044e6c:	4603      	mov	r3, r0
 8044e6e:	2b00      	cmp	r3, #0
 8044e70:	d11f      	bne.n	8044eb2 <BSP_I2C1_Init+0x6e>
      if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(SystemCoreClock, BUS_I2C1_FREQUENCY)) != HAL_OK)
      {
        status = BSP_ERROR_BUS_FAILURE;
      }
#else
      if (Bus_IsI2c1MspCbValid == 0U)
 8044e72:	4b1a      	ldr	r3, [pc, #104]	; (8044edc <BSP_I2C1_Init+0x98>)
 8044e74:	681b      	ldr	r3, [r3, #0]
 8044e76:	2b00      	cmp	r3, #0
 8044e78:	d107      	bne.n	8044e8a <BSP_I2C1_Init+0x46>
      {
        if (BSP_I2C1_RegisterDefaultMspCallbacks() != BSP_ERROR_NONE)
 8044e7a:	f000 f865 	bl	8044f48 <BSP_I2C1_RegisterDefaultMspCallbacks>
 8044e7e:	4603      	mov	r3, r0
 8044e80:	2b00      	cmp	r3, #0
 8044e82:	d002      	beq.n	8044e8a <BSP_I2C1_Init+0x46>
        {
          status = BSP_ERROR_MSP_FAILURE;
 8044e84:	f06f 0309 	mvn.w	r3, #9
 8044e88:	607b      	str	r3, [r7, #4]
        }
      }

      if (status == BSP_ERROR_NONE)
 8044e8a:	687b      	ldr	r3, [r7, #4]
 8044e8c:	2b00      	cmp	r3, #0
 8044e8e:	d110      	bne.n	8044eb2 <BSP_I2C1_Init+0x6e>
      {
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(SystemCoreClock, BUS_I2C1_FREQUENCY)) != HAL_OK)
 8044e90:	4b13      	ldr	r3, [pc, #76]	; (8044ee0 <BSP_I2C1_Init+0x9c>)
 8044e92:	681b      	ldr	r3, [r3, #0]
 8044e94:	4913      	ldr	r1, [pc, #76]	; (8044ee4 <BSP_I2C1_Init+0xa0>)
 8044e96:	4618      	mov	r0, r3
 8044e98:	f000 f9b2 	bl	8045200 <I2C_GetTiming>
 8044e9c:	4603      	mov	r3, r0
 8044e9e:	4619      	mov	r1, r3
 8044ea0:	480b      	ldr	r0, [pc, #44]	; (8044ed0 <BSP_I2C1_Init+0x8c>)
 8044ea2:	f7fc f9a7 	bl	80411f4 <MX_I2C1_Init>
 8044ea6:	4603      	mov	r3, r0
 8044ea8:	2b00      	cmp	r3, #0
 8044eaa:	d002      	beq.n	8044eb2 <BSP_I2C1_Init+0x6e>
        {
          status = BSP_ERROR_BUS_FAILURE;
 8044eac:	f06f 0307 	mvn.w	r3, #7
 8044eb0:	607b      	str	r3, [r7, #4]
        }
      }
#endif
    }
  }
  if (I2c1InitCounter < 0xFFFFFFFFU)
 8044eb2:	4b09      	ldr	r3, [pc, #36]	; (8044ed8 <BSP_I2C1_Init+0x94>)
 8044eb4:	681b      	ldr	r3, [r3, #0]
 8044eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8044eba:	d004      	beq.n	8044ec6 <BSP_I2C1_Init+0x82>
  {
    I2c1InitCounter++;
 8044ebc:	4b06      	ldr	r3, [pc, #24]	; (8044ed8 <BSP_I2C1_Init+0x94>)
 8044ebe:	681b      	ldr	r3, [r3, #0]
 8044ec0:	3301      	adds	r3, #1
 8044ec2:	4a05      	ldr	r2, [pc, #20]	; (8044ed8 <BSP_I2C1_Init+0x94>)
 8044ec4:	6013      	str	r3, [r2, #0]
  }
  return status;
 8044ec6:	687b      	ldr	r3, [r7, #4]
}
 8044ec8:	4618      	mov	r0, r3
 8044eca:	3708      	adds	r7, #8
 8044ecc:	46bd      	mov	sp, r7
 8044ece:	bd80      	pop	{r7, pc}
 8044ed0:	20018dcc 	.word	0x20018dcc
 8044ed4:	20018fe4 	.word	0x20018fe4
 8044ed8:	200183c0 	.word	0x200183c0
 8044edc:	200183c4 	.word	0x200183c4
 8044ee0:	20018024 	.word	0x20018024
 8044ee4:	000186a0 	.word	0x000186a0

08044ee8 <BSP_I2C1_WriteReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status.
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8044ee8:	b580      	push	{r7, lr}
 8044eea:	b086      	sub	sp, #24
 8044eec:	af02      	add	r7, sp, #8
 8044eee:	60ba      	str	r2, [r7, #8]
 8044ef0:	461a      	mov	r2, r3
 8044ef2:	4603      	mov	r3, r0
 8044ef4:	81fb      	strh	r3, [r7, #14]
 8044ef6:	460b      	mov	r3, r1
 8044ef8:	81bb      	strh	r3, [r7, #12]
 8044efa:	4613      	mov	r3, r2
 8044efc:	80fb      	strh	r3, [r7, #6]
  return I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 8044efe:	89b9      	ldrh	r1, [r7, #12]
 8044f00:	89f8      	ldrh	r0, [r7, #14]
 8044f02:	88fb      	ldrh	r3, [r7, #6]
 8044f04:	9300      	str	r3, [sp, #0]
 8044f06:	68bb      	ldr	r3, [r7, #8]
 8044f08:	2201      	movs	r2, #1
 8044f0a:	f000 f8d1 	bl	80450b0 <I2C1_WriteReg>
 8044f0e:	4603      	mov	r3, r0
}
 8044f10:	4618      	mov	r0, r3
 8044f12:	3710      	adds	r7, #16
 8044f14:	46bd      	mov	sp, r7
 8044f16:	bd80      	pop	{r7, pc}

08044f18 <BSP_I2C1_ReadReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8044f18:	b580      	push	{r7, lr}
 8044f1a:	b086      	sub	sp, #24
 8044f1c:	af02      	add	r7, sp, #8
 8044f1e:	60ba      	str	r2, [r7, #8]
 8044f20:	461a      	mov	r2, r3
 8044f22:	4603      	mov	r3, r0
 8044f24:	81fb      	strh	r3, [r7, #14]
 8044f26:	460b      	mov	r3, r1
 8044f28:	81bb      	strh	r3, [r7, #12]
 8044f2a:	4613      	mov	r3, r2
 8044f2c:	80fb      	strh	r3, [r7, #6]
  return I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 8044f2e:	89b9      	ldrh	r1, [r7, #12]
 8044f30:	89f8      	ldrh	r0, [r7, #14]
 8044f32:	88fb      	ldrh	r3, [r7, #6]
 8044f34:	9300      	str	r3, [sp, #0]
 8044f36:	68bb      	ldr	r3, [r7, #8]
 8044f38:	2201      	movs	r2, #1
 8044f3a:	f000 f90d 	bl	8045158 <I2C1_ReadReg>
 8044f3e:	4603      	mov	r3, r0
}
 8044f40:	4618      	mov	r0, r3
 8044f42:	3710      	adds	r7, #16
 8044f44:	46bd      	mov	sp, r7
 8044f46:	bd80      	pop	{r7, pc}

08044f48 <BSP_I2C1_RegisterDefaultMspCallbacks>:
/**
  * @brief  Register Default I2C1 Bus Msp Callbacks
  * @retval BSP status
  */
int32_t BSP_I2C1_RegisterDefaultMspCallbacks(void)
{
 8044f48:	b580      	push	{r7, lr}
 8044f4a:	b082      	sub	sp, #8
 8044f4c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8044f4e:	2300      	movs	r3, #0
 8044f50:	607b      	str	r3, [r7, #4]

  __HAL_I2C_RESET_HANDLE_STATE(&hbus_i2c1);
 8044f52:	4b15      	ldr	r3, [pc, #84]	; (8044fa8 <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 8044f54:	2200      	movs	r2, #0
 8044f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8044f5a:	4b13      	ldr	r3, [pc, #76]	; (8044fa8 <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 8044f5c:	2200      	movs	r2, #0
 8044f5e:	675a      	str	r2, [r3, #116]	; 0x74
 8044f60:	4b11      	ldr	r3, [pc, #68]	; (8044fa8 <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 8044f62:	2200      	movs	r2, #0
 8044f64:	679a      	str	r2, [r3, #120]	; 0x78

  /* Register default MspInit/MspDeInit Callback */
  if (HAL_I2C_RegisterCallback(&hbus_i2c1, HAL_I2C_MSPINIT_CB_ID, I2C1_MspInit) != HAL_OK)
 8044f66:	4a11      	ldr	r2, [pc, #68]	; (8044fac <BSP_I2C1_RegisterDefaultMspCallbacks+0x64>)
 8044f68:	2109      	movs	r1, #9
 8044f6a:	480f      	ldr	r0, [pc, #60]	; (8044fa8 <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 8044f6c:	f004 fa32 	bl	80493d4 <HAL_I2C_RegisterCallback>
 8044f70:	4603      	mov	r3, r0
 8044f72:	2b00      	cmp	r3, #0
 8044f74:	d003      	beq.n	8044f7e <BSP_I2C1_RegisterDefaultMspCallbacks+0x36>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8044f76:	f06f 0303 	mvn.w	r3, #3
 8044f7a:	607b      	str	r3, [r7, #4]
 8044f7c:	e00e      	b.n	8044f9c <BSP_I2C1_RegisterDefaultMspCallbacks+0x54>
  }
  else if (HAL_I2C_RegisterCallback(&hbus_i2c1, HAL_I2C_MSPDEINIT_CB_ID, I2C1_MspDeInit) != HAL_OK)
 8044f7e:	4a0c      	ldr	r2, [pc, #48]	; (8044fb0 <BSP_I2C1_RegisterDefaultMspCallbacks+0x68>)
 8044f80:	210a      	movs	r1, #10
 8044f82:	4809      	ldr	r0, [pc, #36]	; (8044fa8 <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 8044f84:	f004 fa26 	bl	80493d4 <HAL_I2C_RegisterCallback>
 8044f88:	4603      	mov	r3, r0
 8044f8a:	2b00      	cmp	r3, #0
 8044f8c:	d003      	beq.n	8044f96 <BSP_I2C1_RegisterDefaultMspCallbacks+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 8044f8e:	f06f 0303 	mvn.w	r3, #3
 8044f92:	607b      	str	r3, [r7, #4]
 8044f94:	e002      	b.n	8044f9c <BSP_I2C1_RegisterDefaultMspCallbacks+0x54>
  }
  else
  {
    Bus_IsI2c1MspCbValid = 1U;
 8044f96:	4b07      	ldr	r3, [pc, #28]	; (8044fb4 <BSP_I2C1_RegisterDefaultMspCallbacks+0x6c>)
 8044f98:	2201      	movs	r2, #1
 8044f9a:	601a      	str	r2, [r3, #0]
  }

  /* BSP status */
  return ret;
 8044f9c:	687b      	ldr	r3, [r7, #4]
}
 8044f9e:	4618      	mov	r0, r3
 8044fa0:	3708      	adds	r7, #8
 8044fa2:	46bd      	mov	sp, r7
 8044fa4:	bd80      	pop	{r7, pc}
 8044fa6:	bf00      	nop
 8044fa8:	20018dcc 	.word	0x20018dcc
 8044fac:	08044fb9 	.word	0x08044fb9
 8044fb0:	0804506d 	.word	0x0804506d
 8044fb4:	200183c4 	.word	0x200183c4

08044fb8 <I2C1_MspInit>:
  * @brief  Initializes I2C1 MSP.
  * @param  hI2c I2C handle.
  * @retval None
  */
static void  I2C1_MspInit(I2C_HandleTypeDef *hI2c)
{
 8044fb8:	b580      	push	{r7, lr}
 8044fba:	b08a      	sub	sp, #40	; 0x28
 8044fbc:	af00      	add	r7, sp, #0
 8044fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable VddIO2 for GPIOG */
  __HAL_RCC_PWR_CLK_ENABLE();
 8044fc0:	4b28      	ldr	r3, [pc, #160]	; (8045064 <I2C1_MspInit+0xac>)
 8044fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8044fc4:	4a27      	ldr	r2, [pc, #156]	; (8045064 <I2C1_MspInit+0xac>)
 8044fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044fca:	6593      	str	r3, [r2, #88]	; 0x58
 8044fcc:	4b25      	ldr	r3, [pc, #148]	; (8045064 <I2C1_MspInit+0xac>)
 8044fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8044fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8044fd4:	613b      	str	r3, [r7, #16]
 8044fd6:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8044fd8:	f005 fd42 	bl	804aa60 <HAL_PWREx_EnableVddIO2>
  /* Enable GPIO clock */
  BUS_I2C1_GPIO_CLK_ENABLE();
 8044fdc:	4b21      	ldr	r3, [pc, #132]	; (8045064 <I2C1_MspInit+0xac>)
 8044fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8044fe0:	4a20      	ldr	r2, [pc, #128]	; (8045064 <I2C1_MspInit+0xac>)
 8044fe2:	f043 0302 	orr.w	r3, r3, #2
 8044fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8044fe8:	4b1e      	ldr	r3, [pc, #120]	; (8045064 <I2C1_MspInit+0xac>)
 8044fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8044fec:	f003 0302 	and.w	r3, r3, #2
 8044ff0:	60fb      	str	r3, [r7, #12]
 8044ff2:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C SCL as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SCL_GPIO_PIN;
 8044ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8044ff8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8044ffa:	2312      	movs	r3, #18
 8044ffc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8044ffe:	2300      	movs	r3, #0
 8045000:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8045002:	2302      	movs	r3, #2
 8045004:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8045006:	2304      	movs	r3, #4
 8045008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 804500a:	f107 0314 	add.w	r3, r7, #20
 804500e:	4619      	mov	r1, r3
 8045010:	4815      	ldr	r0, [pc, #84]	; (8045068 <I2C1_MspInit+0xb0>)
 8045012:	f003 fe39 	bl	8048c88 <HAL_GPIO_Init>

  /* Configure I2C SDA as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SDA_GPIO_PIN;
 8045016:	f44f 7300 	mov.w	r3, #512	; 0x200
 804501a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_GPIO_AF;
 804501c:	2304      	movs	r3, #4
 804501e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8045020:	f107 0314 	add.w	r3, r7, #20
 8045024:	4619      	mov	r1, r3
 8045026:	4810      	ldr	r0, [pc, #64]	; (8045068 <I2C1_MspInit+0xb0>)
 8045028:	f003 fe2e 	bl	8048c88 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C1_CLK_ENABLE();
 804502c:	4b0d      	ldr	r3, [pc, #52]	; (8045064 <I2C1_MspInit+0xac>)
 804502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8045030:	4a0c      	ldr	r2, [pc, #48]	; (8045064 <I2C1_MspInit+0xac>)
 8045032:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8045036:	6593      	str	r3, [r2, #88]	; 0x58
 8045038:	4b0a      	ldr	r3, [pc, #40]	; (8045064 <I2C1_MspInit+0xac>)
 804503a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804503c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8045040:	60bb      	str	r3, [r7, #8]
 8045042:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C1_FORCE_RESET();
 8045044:	4b07      	ldr	r3, [pc, #28]	; (8045064 <I2C1_MspInit+0xac>)
 8045046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045048:	4a06      	ldr	r2, [pc, #24]	; (8045064 <I2C1_MspInit+0xac>)
 804504a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 804504e:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  BUS_I2C1_RELEASE_RESET();
 8045050:	4b04      	ldr	r3, [pc, #16]	; (8045064 <I2C1_MspInit+0xac>)
 8045052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045054:	4a03      	ldr	r2, [pc, #12]	; (8045064 <I2C1_MspInit+0xac>)
 8045056:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 804505a:	6393      	str	r3, [r2, #56]	; 0x38
}
 804505c:	bf00      	nop
 804505e:	3728      	adds	r7, #40	; 0x28
 8045060:	46bd      	mov	sp, r7
 8045062:	bd80      	pop	{r7, pc}
 8045064:	40021000 	.word	0x40021000
 8045068:	42020400 	.word	0x42020400

0804506c <I2C1_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c I2C handle.
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 804506c:	b580      	push	{r7, lr}
 804506e:	b088      	sub	sp, #32
 8045070:	af00      	add	r7, sp, #0
 8045072:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* De-initialiaze I2C SCL and SDA */
  gpio_init_structure.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8045074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8045078:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin);
 804507a:	68fb      	ldr	r3, [r7, #12]
 804507c:	4619      	mov	r1, r3
 804507e:	480a      	ldr	r0, [pc, #40]	; (80450a8 <I2C1_MspDeInit+0x3c>)
 8045080:	f003 ff82 	bl	8048f88 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8045084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8045088:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
 804508a:	68fb      	ldr	r3, [r7, #12]
 804508c:	4619      	mov	r1, r3
 804508e:	4806      	ldr	r0, [pc, #24]	; (80450a8 <I2C1_MspDeInit+0x3c>)
 8045090:	f003 ff7a 	bl	8048f88 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
 8045094:	4b05      	ldr	r3, [pc, #20]	; (80450ac <I2C1_MspDeInit+0x40>)
 8045096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8045098:	4a04      	ldr	r2, [pc, #16]	; (80450ac <I2C1_MspDeInit+0x40>)
 804509a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 804509e:	6593      	str	r3, [r2, #88]	; 0x58
}
 80450a0:	bf00      	nop
 80450a2:	3720      	adds	r7, #32
 80450a4:	46bd      	mov	sp, r7
 80450a6:	bd80      	pop	{r7, pc}
 80450a8:	42020400 	.word	0x42020400
 80450ac:	40021000 	.word	0x40021000

080450b0 <I2C1_WriteReg>:
  * @param  pData      The target register values to be written.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80450b0:	b580      	push	{r7, lr}
 80450b2:	b08a      	sub	sp, #40	; 0x28
 80450b4:	af04      	add	r7, sp, #16
 80450b6:	607b      	str	r3, [r7, #4]
 80450b8:	4603      	mov	r3, r0
 80450ba:	81fb      	strh	r3, [r7, #14]
 80450bc:	460b      	mov	r3, r1
 80450be:	81bb      	strh	r3, [r7, #12]
 80450c0:	4613      	mov	r3, r2
 80450c2:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 80450c4:	2300      	movs	r3, #0
 80450c6:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C1_TIMEOUT) != HAL_OK)
 80450c8:	8978      	ldrh	r0, [r7, #10]
 80450ca:	89ba      	ldrh	r2, [r7, #12]
 80450cc:	89f9      	ldrh	r1, [r7, #14]
 80450ce:	f242 7310 	movw	r3, #10000	; 0x2710
 80450d2:	9302      	str	r3, [sp, #8]
 80450d4:	8c3b      	ldrh	r3, [r7, #32]
 80450d6:	9301      	str	r3, [sp, #4]
 80450d8:	687b      	ldr	r3, [r7, #4]
 80450da:	9300      	str	r3, [sp, #0]
 80450dc:	4603      	mov	r3, r0
 80450de:	481d      	ldr	r0, [pc, #116]	; (8045154 <I2C1_WriteReg+0xa4>)
 80450e0:	f004 fa20 	bl	8049524 <HAL_I2C_Mem_Write>
 80450e4:	4603      	mov	r3, r0
 80450e6:	2b00      	cmp	r3, #0
 80450e8:	d02f      	beq.n	804514a <I2C1_WriteReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c1);
 80450ea:	481a      	ldr	r0, [pc, #104]	; (8045154 <I2C1_WriteReg+0xa4>)
 80450ec:	f004 fd39 	bl	8049b62 <HAL_I2C_GetError>
 80450f0:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 80450f2:	693b      	ldr	r3, [r7, #16]
 80450f4:	f003 0301 	and.w	r3, r3, #1
 80450f8:	2b00      	cmp	r3, #0
 80450fa:	d003      	beq.n	8045104 <I2C1_WriteReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 80450fc:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8045100:	617b      	str	r3, [r7, #20]
 8045102:	e022      	b.n	804514a <I2C1_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8045104:	693b      	ldr	r3, [r7, #16]
 8045106:	f003 0302 	and.w	r3, r3, #2
 804510a:	2b00      	cmp	r3, #0
 804510c:	d003      	beq.n	8045116 <I2C1_WriteReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 804510e:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8045112:	617b      	str	r3, [r7, #20]
 8045114:	e019      	b.n	804514a <I2C1_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 8045116:	693b      	ldr	r3, [r7, #16]
 8045118:	f003 0304 	and.w	r3, r3, #4
 804511c:	2b00      	cmp	r3, #0
 804511e:	d003      	beq.n	8045128 <I2C1_WriteReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8045120:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8045124:	617b      	str	r3, [r7, #20]
 8045126:	e010      	b.n	804514a <I2C1_WriteReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8045128:	693b      	ldr	r3, [r7, #16]
 804512a:	f003 0320 	and.w	r3, r3, #32
 804512e:	2b00      	cmp	r3, #0
 8045130:	d104      	bne.n	804513c <I2C1_WriteReg+0x8c>
 8045132:	693b      	ldr	r3, [r7, #16]
 8045134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045138:	2b00      	cmp	r3, #0
 804513a:	d003      	beq.n	8045144 <I2C1_WriteReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 804513c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8045140:	617b      	str	r3, [r7, #20]
 8045142:	e002      	b.n	804514a <I2C1_WriteReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8045144:	f06f 0303 	mvn.w	r3, #3
 8045148:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 804514a:	697b      	ldr	r3, [r7, #20]
}
 804514c:	4618      	mov	r0, r3
 804514e:	3718      	adds	r7, #24
 8045150:	46bd      	mov	sp, r7
 8045152:	bd80      	pop	{r7, pc}
 8045154:	20018dcc 	.word	0x20018dcc

08045158 <I2C1_ReadReg>:
  * @param  pData      The target register values to be read.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8045158:	b580      	push	{r7, lr}
 804515a:	b08a      	sub	sp, #40	; 0x28
 804515c:	af04      	add	r7, sp, #16
 804515e:	607b      	str	r3, [r7, #4]
 8045160:	4603      	mov	r3, r0
 8045162:	81fb      	strh	r3, [r7, #14]
 8045164:	460b      	mov	r3, r1
 8045166:	81bb      	strh	r3, [r7, #12]
 8045168:	4613      	mov	r3, r2
 804516a:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 804516c:	2300      	movs	r3, #0
 804516e:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C1_TIMEOUT) != HAL_OK)
 8045170:	8978      	ldrh	r0, [r7, #10]
 8045172:	89ba      	ldrh	r2, [r7, #12]
 8045174:	89f9      	ldrh	r1, [r7, #14]
 8045176:	f242 7310 	movw	r3, #10000	; 0x2710
 804517a:	9302      	str	r3, [sp, #8]
 804517c:	8c3b      	ldrh	r3, [r7, #32]
 804517e:	9301      	str	r3, [sp, #4]
 8045180:	687b      	ldr	r3, [r7, #4]
 8045182:	9300      	str	r3, [sp, #0]
 8045184:	4603      	mov	r3, r0
 8045186:	481d      	ldr	r0, [pc, #116]	; (80451fc <I2C1_ReadReg+0xa4>)
 8045188:	f004 fae0 	bl	804974c <HAL_I2C_Mem_Read>
 804518c:	4603      	mov	r3, r0
 804518e:	2b00      	cmp	r3, #0
 8045190:	d02f      	beq.n	80451f2 <I2C1_ReadReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c1);
 8045192:	481a      	ldr	r0, [pc, #104]	; (80451fc <I2C1_ReadReg+0xa4>)
 8045194:	f004 fce5 	bl	8049b62 <HAL_I2C_GetError>
 8045198:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 804519a:	693b      	ldr	r3, [r7, #16]
 804519c:	f003 0301 	and.w	r3, r3, #1
 80451a0:	2b00      	cmp	r3, #0
 80451a2:	d003      	beq.n	80451ac <I2C1_ReadReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 80451a4:	f06f 0366 	mvn.w	r3, #102	; 0x66
 80451a8:	617b      	str	r3, [r7, #20]
 80451aa:	e022      	b.n	80451f2 <I2C1_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 80451ac:	693b      	ldr	r3, [r7, #16]
 80451ae:	f003 0302 	and.w	r3, r3, #2
 80451b2:	2b00      	cmp	r3, #0
 80451b4:	d003      	beq.n	80451be <I2C1_ReadReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 80451b6:	f06f 0364 	mvn.w	r3, #100	; 0x64
 80451ba:	617b      	str	r3, [r7, #20]
 80451bc:	e019      	b.n	80451f2 <I2C1_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 80451be:	693b      	ldr	r3, [r7, #16]
 80451c0:	f003 0304 	and.w	r3, r3, #4
 80451c4:	2b00      	cmp	r3, #0
 80451c6:	d003      	beq.n	80451d0 <I2C1_ReadReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80451c8:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80451cc:	617b      	str	r3, [r7, #20]
 80451ce:	e010      	b.n	80451f2 <I2C1_ReadReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 80451d0:	693b      	ldr	r3, [r7, #16]
 80451d2:	f003 0320 	and.w	r3, r3, #32
 80451d6:	2b00      	cmp	r3, #0
 80451d8:	d104      	bne.n	80451e4 <I2C1_ReadReg+0x8c>
 80451da:	693b      	ldr	r3, [r7, #16]
 80451dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80451e0:	2b00      	cmp	r3, #0
 80451e2:	d003      	beq.n	80451ec <I2C1_ReadReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 80451e4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80451e8:	617b      	str	r3, [r7, #20]
 80451ea:	e002      	b.n	80451f2 <I2C1_ReadReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 80451ec:	f06f 0303 	mvn.w	r3, #3
 80451f0:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80451f2:	697b      	ldr	r3, [r7, #20]
}
 80451f4:	4618      	mov	r0, r3
 80451f6:	3718      	adds	r7, #24
 80451f8:	46bd      	mov	sp, r7
 80451fa:	bd80      	pop	{r7, pc}
 80451fc:	20018dcc 	.word	0x20018dcc

08045200 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8045200:	b580      	push	{r7, lr}
 8045202:	b086      	sub	sp, #24
 8045204:	af00      	add	r7, sp, #0
 8045206:	6078      	str	r0, [r7, #4]
 8045208:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 804520a:	2300      	movs	r3, #0
 804520c:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 804520e:	687b      	ldr	r3, [r7, #4]
 8045210:	2b00      	cmp	r3, #0
 8045212:	d06b      	beq.n	80452ec <I2C_GetTiming+0xec>
 8045214:	683b      	ldr	r3, [r7, #0]
 8045216:	2b00      	cmp	r3, #0
 8045218:	d068      	beq.n	80452ec <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 804521a:	2300      	movs	r3, #0
 804521c:	613b      	str	r3, [r7, #16]
 804521e:	e060      	b.n	80452e2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8045220:	4a35      	ldr	r2, [pc, #212]	; (80452f8 <I2C_GetTiming+0xf8>)
 8045222:	693b      	ldr	r3, [r7, #16]
 8045224:	212c      	movs	r1, #44	; 0x2c
 8045226:	fb01 f303 	mul.w	r3, r1, r3
 804522a:	4413      	add	r3, r2
 804522c:	3304      	adds	r3, #4
 804522e:	681b      	ldr	r3, [r3, #0]
 8045230:	683a      	ldr	r2, [r7, #0]
 8045232:	429a      	cmp	r2, r3
 8045234:	d352      	bcc.n	80452dc <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8045236:	4a30      	ldr	r2, [pc, #192]	; (80452f8 <I2C_GetTiming+0xf8>)
 8045238:	693b      	ldr	r3, [r7, #16]
 804523a:	212c      	movs	r1, #44	; 0x2c
 804523c:	fb01 f303 	mul.w	r3, r1, r3
 8045240:	4413      	add	r3, r2
 8045242:	3308      	adds	r3, #8
 8045244:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8045246:	683a      	ldr	r2, [r7, #0]
 8045248:	429a      	cmp	r2, r3
 804524a:	d847      	bhi.n	80452dc <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 804524c:	6939      	ldr	r1, [r7, #16]
 804524e:	6878      	ldr	r0, [r7, #4]
 8045250:	f000 f856 	bl	8045300 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8045254:	6939      	ldr	r1, [r7, #16]
 8045256:	6878      	ldr	r0, [r7, #4]
 8045258:	f000 f940 	bl	80454dc <I2C_Compute_SCLL_SCLH>
 804525c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 804525e:	68fb      	ldr	r3, [r7, #12]
 8045260:	2b7f      	cmp	r3, #127	; 0x7f
 8045262:	d842      	bhi.n	80452ea <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8045264:	4925      	ldr	r1, [pc, #148]	; (80452fc <I2C_GetTiming+0xfc>)
 8045266:	68fa      	ldr	r2, [r7, #12]
 8045268:	4613      	mov	r3, r2
 804526a:	009b      	lsls	r3, r3, #2
 804526c:	4413      	add	r3, r2
 804526e:	009b      	lsls	r3, r3, #2
 8045270:	440b      	add	r3, r1
 8045272:	681b      	ldr	r3, [r3, #0]
 8045274:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8045276:	4821      	ldr	r0, [pc, #132]	; (80452fc <I2C_GetTiming+0xfc>)
 8045278:	68fa      	ldr	r2, [r7, #12]
 804527a:	4613      	mov	r3, r2
 804527c:	009b      	lsls	r3, r3, #2
 804527e:	4413      	add	r3, r2
 8045280:	009b      	lsls	r3, r3, #2
 8045282:	4403      	add	r3, r0
 8045284:	3304      	adds	r3, #4
 8045286:	681b      	ldr	r3, [r3, #0]
 8045288:	051b      	lsls	r3, r3, #20
 804528a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 804528e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8045290:	481a      	ldr	r0, [pc, #104]	; (80452fc <I2C_GetTiming+0xfc>)
 8045292:	68fa      	ldr	r2, [r7, #12]
 8045294:	4613      	mov	r3, r2
 8045296:	009b      	lsls	r3, r3, #2
 8045298:	4413      	add	r3, r2
 804529a:	009b      	lsls	r3, r3, #2
 804529c:	4403      	add	r3, r0
 804529e:	3308      	adds	r3, #8
 80452a0:	681b      	ldr	r3, [r3, #0]
 80452a2:	041b      	lsls	r3, r3, #16
 80452a4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80452a8:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80452aa:	4814      	ldr	r0, [pc, #80]	; (80452fc <I2C_GetTiming+0xfc>)
 80452ac:	68fa      	ldr	r2, [r7, #12]
 80452ae:	4613      	mov	r3, r2
 80452b0:	009b      	lsls	r3, r3, #2
 80452b2:	4413      	add	r3, r2
 80452b4:	009b      	lsls	r3, r3, #2
 80452b6:	4403      	add	r3, r0
 80452b8:	330c      	adds	r3, #12
 80452ba:	681b      	ldr	r3, [r3, #0]
 80452bc:	021b      	lsls	r3, r3, #8
 80452be:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80452c0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 80452c2:	480e      	ldr	r0, [pc, #56]	; (80452fc <I2C_GetTiming+0xfc>)
 80452c4:	68fa      	ldr	r2, [r7, #12]
 80452c6:	4613      	mov	r3, r2
 80452c8:	009b      	lsls	r3, r3, #2
 80452ca:	4413      	add	r3, r2
 80452cc:	009b      	lsls	r3, r3, #2
 80452ce:	4403      	add	r3, r0
 80452d0:	3310      	adds	r3, #16
 80452d2:	681b      	ldr	r3, [r3, #0]
 80452d4:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80452d6:	430b      	orrs	r3, r1
 80452d8:	617b      	str	r3, [r7, #20]
        }
        break;
 80452da:	e006      	b.n	80452ea <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 80452dc:	693b      	ldr	r3, [r7, #16]
 80452de:	3301      	adds	r3, #1
 80452e0:	613b      	str	r3, [r7, #16]
 80452e2:	693b      	ldr	r3, [r7, #16]
 80452e4:	2b02      	cmp	r3, #2
 80452e6:	d99b      	bls.n	8045220 <I2C_GetTiming+0x20>
 80452e8:	e000      	b.n	80452ec <I2C_GetTiming+0xec>
        break;
 80452ea:	bf00      	nop
      }
    }
  }

  return ret;
 80452ec:	697b      	ldr	r3, [r7, #20]
}
 80452ee:	4618      	mov	r0, r3
 80452f0:	3718      	adds	r7, #24
 80452f2:	46bd      	mov	sp, r7
 80452f4:	bd80      	pop	{r7, pc}
 80452f6:	bf00      	nop
 80452f8:	080500dc 	.word	0x080500dc
 80452fc:	200183c8 	.word	0x200183c8

08045300 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8045300:	b480      	push	{r7}
 8045302:	b08f      	sub	sp, #60	; 0x3c
 8045304:	af00      	add	r7, sp, #0
 8045306:	6078      	str	r0, [r7, #4]
 8045308:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 804530a:	2310      	movs	r3, #16
 804530c:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 804530e:	687b      	ldr	r3, [r7, #4]
 8045310:	085a      	lsrs	r2, r3, #1
 8045312:	4b6e      	ldr	r3, [pc, #440]	; (80454cc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8045314:	4413      	add	r3, r2
 8045316:	687a      	ldr	r2, [r7, #4]
 8045318:	fbb3 f3f2 	udiv	r3, r3, r2
 804531c:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 804531e:	2332      	movs	r3, #50	; 0x32
 8045320:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 8045322:	f44f 7382 	mov.w	r3, #260	; 0x104
 8045326:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8045328:	4a69      	ldr	r2, [pc, #420]	; (80454d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 804532a:	683b      	ldr	r3, [r7, #0]
 804532c:	212c      	movs	r1, #44	; 0x2c
 804532e:	fb01 f303 	mul.w	r3, r1, r3
 8045332:	4413      	add	r3, r2
 8045334:	3324      	adds	r3, #36	; 0x24
 8045336:	681b      	ldr	r3, [r3, #0]
 8045338:	4618      	mov	r0, r3
 804533a:	4a65      	ldr	r2, [pc, #404]	; (80454d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 804533c:	683b      	ldr	r3, [r7, #0]
 804533e:	212c      	movs	r1, #44	; 0x2c
 8045340:	fb01 f303 	mul.w	r3, r1, r3
 8045344:	4413      	add	r3, r2
 8045346:	330c      	adds	r3, #12
 8045348:	681b      	ldr	r3, [r3, #0]
 804534a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 804534c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 804534e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8045350:	495f      	ldr	r1, [pc, #380]	; (80454d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8045352:	683b      	ldr	r3, [r7, #0]
 8045354:	202c      	movs	r0, #44	; 0x2c
 8045356:	fb00 f303 	mul.w	r3, r0, r3
 804535a:	440b      	add	r3, r1
 804535c:	3328      	adds	r3, #40	; 0x28
 804535e:	681b      	ldr	r3, [r3, #0]
 8045360:	3303      	adds	r3, #3
 8045362:	69f9      	ldr	r1, [r7, #28]
 8045364:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8045368:	1ad3      	subs	r3, r2, r3
 804536a:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 804536c:	4a58      	ldr	r2, [pc, #352]	; (80454d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 804536e:	683b      	ldr	r3, [r7, #0]
 8045370:	212c      	movs	r1, #44	; 0x2c
 8045372:	fb01 f303 	mul.w	r3, r1, r3
 8045376:	4413      	add	r3, r2
 8045378:	3310      	adds	r3, #16
 804537a:	681b      	ldr	r3, [r3, #0]
 804537c:	4618      	mov	r0, r3
 804537e:	4a54      	ldr	r2, [pc, #336]	; (80454d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8045380:	683b      	ldr	r3, [r7, #0]
 8045382:	212c      	movs	r1, #44	; 0x2c
 8045384:	fb01 f303 	mul.w	r3, r1, r3
 8045388:	4413      	add	r3, r2
 804538a:	3320      	adds	r3, #32
 804538c:	681b      	ldr	r3, [r3, #0]
 804538e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8045390:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8045392:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8045394:	494e      	ldr	r1, [pc, #312]	; (80454d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8045396:	683b      	ldr	r3, [r7, #0]
 8045398:	202c      	movs	r0, #44	; 0x2c
 804539a:	fb00 f303 	mul.w	r3, r0, r3
 804539e:	440b      	add	r3, r1
 80453a0:	3328      	adds	r3, #40	; 0x28
 80453a2:	681b      	ldr	r3, [r3, #0]
 80453a4:	3304      	adds	r3, #4
 80453a6:	69f9      	ldr	r1, [r7, #28]
 80453a8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80453ac:	1ad3      	subs	r3, r2, r3
 80453ae:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 80453b0:	4a47      	ldr	r2, [pc, #284]	; (80454d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80453b2:	683b      	ldr	r3, [r7, #0]
 80453b4:	212c      	movs	r1, #44	; 0x2c
 80453b6:	fb01 f303 	mul.w	r3, r1, r3
 80453ba:	4413      	add	r3, r2
 80453bc:	3320      	adds	r3, #32
 80453be:	681b      	ldr	r3, [r3, #0]
 80453c0:	4618      	mov	r0, r3
 80453c2:	4a43      	ldr	r2, [pc, #268]	; (80454d0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80453c4:	683b      	ldr	r3, [r7, #0]
 80453c6:	212c      	movs	r1, #44	; 0x2c
 80453c8:	fb01 f303 	mul.w	r3, r1, r3
 80453cc:	4413      	add	r3, r2
 80453ce:	3314      	adds	r3, #20
 80453d0:	681b      	ldr	r3, [r3, #0]
 80453d2:	4403      	add	r3, r0
 80453d4:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 80453d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80453d8:	2b00      	cmp	r3, #0
 80453da:	dc01      	bgt.n	80453e0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 80453dc:	2300      	movs	r3, #0
 80453de:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 80453e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80453e2:	2b00      	cmp	r3, #0
 80453e4:	dc01      	bgt.n	80453ea <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 80453e6:	2300      	movs	r3, #0
 80453e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80453ea:	2300      	movs	r3, #0
 80453ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80453ee:	e062      	b.n	80454b6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80453f0:	2300      	movs	r3, #0
 80453f2:	627b      	str	r3, [r7, #36]	; 0x24
 80453f4:	e059      	b.n	80454aa <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 80453f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80453f8:	3301      	adds	r3, #1
 80453fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80453fc:	3201      	adds	r2, #1
 80453fe:	fb02 f203 	mul.w	r2, r2, r3
 8045402:	69fb      	ldr	r3, [r7, #28]
 8045404:	fb02 f303 	mul.w	r3, r2, r3
 8045408:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 804540a:	693b      	ldr	r3, [r7, #16]
 804540c:	68fa      	ldr	r2, [r7, #12]
 804540e:	429a      	cmp	r2, r3
 8045410:	d348      	bcc.n	80454a4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8045412:	2300      	movs	r3, #0
 8045414:	623b      	str	r3, [r7, #32]
 8045416:	e042      	b.n	804549e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8045418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804541a:	3301      	adds	r3, #1
 804541c:	6a3a      	ldr	r2, [r7, #32]
 804541e:	fb02 f203 	mul.w	r2, r2, r3
 8045422:	69fb      	ldr	r3, [r7, #28]
 8045424:	fb02 f303 	mul.w	r3, r2, r3
 8045428:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 804542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804542c:	68ba      	ldr	r2, [r7, #8]
 804542e:	429a      	cmp	r2, r3
 8045430:	d332      	bcc.n	8045498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8045432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8045434:	68ba      	ldr	r2, [r7, #8]
 8045436:	429a      	cmp	r2, r3
 8045438:	d82e      	bhi.n	8045498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 804543a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 804543c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804543e:	429a      	cmp	r2, r3
 8045440:	d02a      	beq.n	8045498 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8045442:	4b24      	ldr	r3, [pc, #144]	; (80454d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8045444:	681a      	ldr	r2, [r3, #0]
 8045446:	4924      	ldr	r1, [pc, #144]	; (80454d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8045448:	4613      	mov	r3, r2
 804544a:	009b      	lsls	r3, r3, #2
 804544c:	4413      	add	r3, r2
 804544e:	009b      	lsls	r3, r3, #2
 8045450:	440b      	add	r3, r1
 8045452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8045454:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8045456:	4b1f      	ldr	r3, [pc, #124]	; (80454d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8045458:	681a      	ldr	r2, [r3, #0]
 804545a:	491f      	ldr	r1, [pc, #124]	; (80454d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 804545c:	4613      	mov	r3, r2
 804545e:	009b      	lsls	r3, r3, #2
 8045460:	4413      	add	r3, r2
 8045462:	009b      	lsls	r3, r3, #2
 8045464:	440b      	add	r3, r1
 8045466:	3304      	adds	r3, #4
 8045468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804546a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 804546c:	4b19      	ldr	r3, [pc, #100]	; (80454d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 804546e:	681a      	ldr	r2, [r3, #0]
 8045470:	4919      	ldr	r1, [pc, #100]	; (80454d8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8045472:	4613      	mov	r3, r2
 8045474:	009b      	lsls	r3, r3, #2
 8045476:	4413      	add	r3, r2
 8045478:	009b      	lsls	r3, r3, #2
 804547a:	440b      	add	r3, r1
 804547c:	3308      	adds	r3, #8
 804547e:	6a3a      	ldr	r2, [r7, #32]
 8045480:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8045482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045484:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 8045486:	4b13      	ldr	r3, [pc, #76]	; (80454d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8045488:	681b      	ldr	r3, [r3, #0]
 804548a:	3301      	adds	r3, #1
 804548c:	4a11      	ldr	r2, [pc, #68]	; (80454d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 804548e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8045490:	4b10      	ldr	r3, [pc, #64]	; (80454d4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8045492:	681b      	ldr	r3, [r3, #0]
 8045494:	2b7f      	cmp	r3, #127	; 0x7f
 8045496:	d812      	bhi.n	80454be <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8045498:	6a3b      	ldr	r3, [r7, #32]
 804549a:	3301      	adds	r3, #1
 804549c:	623b      	str	r3, [r7, #32]
 804549e:	6a3b      	ldr	r3, [r7, #32]
 80454a0:	2b0f      	cmp	r3, #15
 80454a2:	d9b9      	bls.n	8045418 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80454a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80454a6:	3301      	adds	r3, #1
 80454a8:	627b      	str	r3, [r7, #36]	; 0x24
 80454aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80454ac:	2b0f      	cmp	r3, #15
 80454ae:	d9a2      	bls.n	80453f6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80454b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80454b2:	3301      	adds	r3, #1
 80454b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80454b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80454b8:	2b0f      	cmp	r3, #15
 80454ba:	d999      	bls.n	80453f0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 80454bc:	e000      	b.n	80454c0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 80454be:	bf00      	nop
          }
        }
      }
    }
  }
}
 80454c0:	373c      	adds	r7, #60	; 0x3c
 80454c2:	46bd      	mov	sp, r7
 80454c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80454c8:	4770      	bx	lr
 80454ca:	bf00      	nop
 80454cc:	3b9aca00 	.word	0x3b9aca00
 80454d0:	080500dc 	.word	0x080500dc
 80454d4:	20018dc8 	.word	0x20018dc8
 80454d8:	200183c8 	.word	0x200183c8

080454dc <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 80454dc:	b480      	push	{r7}
 80454de:	b093      	sub	sp, #76	; 0x4c
 80454e0:	af00      	add	r7, sp, #0
 80454e2:	6078      	str	r0, [r7, #4]
 80454e4:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 80454e6:	f04f 33ff 	mov.w	r3, #4294967295
 80454ea:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80454ec:	687b      	ldr	r3, [r7, #4]
 80454ee:	085a      	lsrs	r2, r3, #1
 80454f0:	4b7a      	ldr	r3, [pc, #488]	; (80456dc <I2C_Compute_SCLL_SCLH+0x200>)
 80454f2:	4413      	add	r3, r2
 80454f4:	687a      	ldr	r2, [r7, #4]
 80454f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80454fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 80454fc:	4a78      	ldr	r2, [pc, #480]	; (80456e0 <I2C_Compute_SCLL_SCLH+0x204>)
 80454fe:	683b      	ldr	r3, [r7, #0]
 8045500:	212c      	movs	r1, #44	; 0x2c
 8045502:	fb01 f303 	mul.w	r3, r1, r3
 8045506:	4413      	add	r3, r2
 8045508:	681b      	ldr	r3, [r3, #0]
 804550a:	085a      	lsrs	r2, r3, #1
 804550c:	4b73      	ldr	r3, [pc, #460]	; (80456dc <I2C_Compute_SCLL_SCLH+0x200>)
 804550e:	4413      	add	r3, r2
 8045510:	4973      	ldr	r1, [pc, #460]	; (80456e0 <I2C_Compute_SCLL_SCLH+0x204>)
 8045512:	683a      	ldr	r2, [r7, #0]
 8045514:	202c      	movs	r0, #44	; 0x2c
 8045516:	fb00 f202 	mul.w	r2, r0, r2
 804551a:	440a      	add	r2, r1
 804551c:	6812      	ldr	r2, [r2, #0]
 804551e:	fbb3 f3f2 	udiv	r3, r3, r2
 8045522:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8045524:	2332      	movs	r3, #50	; 0x32
 8045526:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8045528:	4a6d      	ldr	r2, [pc, #436]	; (80456e0 <I2C_Compute_SCLL_SCLH+0x204>)
 804552a:	683b      	ldr	r3, [r7, #0]
 804552c:	212c      	movs	r1, #44	; 0x2c
 804552e:	fb01 f303 	mul.w	r3, r1, r3
 8045532:	4413      	add	r3, r2
 8045534:	3328      	adds	r3, #40	; 0x28
 8045536:	681a      	ldr	r2, [r3, #0]
 8045538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804553a:	fb02 f303 	mul.w	r3, r2, r3
 804553e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8045540:	4a67      	ldr	r2, [pc, #412]	; (80456e0 <I2C_Compute_SCLL_SCLH+0x204>)
 8045542:	683b      	ldr	r3, [r7, #0]
 8045544:	212c      	movs	r1, #44	; 0x2c
 8045546:	fb01 f303 	mul.w	r3, r1, r3
 804554a:	4413      	add	r3, r2
 804554c:	3304      	adds	r3, #4
 804554e:	681b      	ldr	r3, [r3, #0]
 8045550:	4a62      	ldr	r2, [pc, #392]	; (80456dc <I2C_Compute_SCLL_SCLH+0x200>)
 8045552:	fbb2 f3f3 	udiv	r3, r2, r3
 8045556:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8045558:	4a61      	ldr	r2, [pc, #388]	; (80456e0 <I2C_Compute_SCLL_SCLH+0x204>)
 804555a:	683b      	ldr	r3, [r7, #0]
 804555c:	212c      	movs	r1, #44	; 0x2c
 804555e:	fb01 f303 	mul.w	r3, r1, r3
 8045562:	4413      	add	r3, r2
 8045564:	3308      	adds	r3, #8
 8045566:	681b      	ldr	r3, [r3, #0]
 8045568:	4a5c      	ldr	r2, [pc, #368]	; (80456dc <I2C_Compute_SCLL_SCLH+0x200>)
 804556a:	fbb2 f3f3 	udiv	r3, r2, r3
 804556e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8045570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045572:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8045574:	2300      	movs	r3, #0
 8045576:	637b      	str	r3, [r7, #52]	; 0x34
 8045578:	e0a3      	b.n	80456c2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 804557a:	495a      	ldr	r1, [pc, #360]	; (80456e4 <I2C_Compute_SCLL_SCLH+0x208>)
 804557c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 804557e:	4613      	mov	r3, r2
 8045580:	009b      	lsls	r3, r3, #2
 8045582:	4413      	add	r3, r2
 8045584:	009b      	lsls	r3, r3, #2
 8045586:	440b      	add	r3, r1
 8045588:	681b      	ldr	r3, [r3, #0]
 804558a:	1c5a      	adds	r2, r3, #1
 804558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804558e:	fb02 f303 	mul.w	r3, r2, r3
 8045592:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8045594:	2300      	movs	r3, #0
 8045596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8045598:	e08c      	b.n	80456b4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 804559a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 804559c:	6a3b      	ldr	r3, [r7, #32]
 804559e:	441a      	add	r2, r3
 80455a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80455a2:	3301      	adds	r3, #1
 80455a4:	6979      	ldr	r1, [r7, #20]
 80455a6:	fb01 f103 	mul.w	r1, r1, r3
 80455aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80455ac:	005b      	lsls	r3, r3, #1
 80455ae:	440b      	add	r3, r1
 80455b0:	4413      	add	r3, r2
 80455b2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80455b4:	4a4a      	ldr	r2, [pc, #296]	; (80456e0 <I2C_Compute_SCLL_SCLH+0x204>)
 80455b6:	683b      	ldr	r3, [r7, #0]
 80455b8:	212c      	movs	r1, #44	; 0x2c
 80455ba:	fb01 f303 	mul.w	r3, r1, r3
 80455be:	4413      	add	r3, r2
 80455c0:	3318      	adds	r3, #24
 80455c2:	681b      	ldr	r3, [r3, #0]
 80455c4:	693a      	ldr	r2, [r7, #16]
 80455c6:	429a      	cmp	r2, r3
 80455c8:	d971      	bls.n	80456ae <I2C_Compute_SCLL_SCLH+0x1d2>
 80455ca:	693a      	ldr	r2, [r7, #16]
 80455cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80455ce:	1ad2      	subs	r2, r2, r3
 80455d0:	6a3b      	ldr	r3, [r7, #32]
 80455d2:	1ad3      	subs	r3, r2, r3
 80455d4:	089b      	lsrs	r3, r3, #2
 80455d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80455d8:	429a      	cmp	r2, r3
 80455da:	d268      	bcs.n	80456ae <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80455dc:	2300      	movs	r3, #0
 80455de:	63bb      	str	r3, [r7, #56]	; 0x38
 80455e0:	e062      	b.n	80456a8 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80455e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80455e4:	6a3b      	ldr	r3, [r7, #32]
 80455e6:	441a      	add	r2, r3
 80455e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80455ea:	3301      	adds	r3, #1
 80455ec:	6979      	ldr	r1, [r7, #20]
 80455ee:	fb01 f103 	mul.w	r1, r1, r3
 80455f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80455f4:	005b      	lsls	r3, r3, #1
 80455f6:	440b      	add	r3, r1
 80455f8:	4413      	add	r3, r2
 80455fa:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80455fc:	693a      	ldr	r2, [r7, #16]
 80455fe:	68fb      	ldr	r3, [r7, #12]
 8045600:	441a      	add	r2, r3
 8045602:	4937      	ldr	r1, [pc, #220]	; (80456e0 <I2C_Compute_SCLL_SCLH+0x204>)
 8045604:	683b      	ldr	r3, [r7, #0]
 8045606:	202c      	movs	r0, #44	; 0x2c
 8045608:	fb00 f303 	mul.w	r3, r0, r3
 804560c:	440b      	add	r3, r1
 804560e:	3320      	adds	r3, #32
 8045610:	681b      	ldr	r3, [r3, #0]
 8045612:	441a      	add	r2, r3
 8045614:	4932      	ldr	r1, [pc, #200]	; (80456e0 <I2C_Compute_SCLL_SCLH+0x204>)
 8045616:	683b      	ldr	r3, [r7, #0]
 8045618:	202c      	movs	r0, #44	; 0x2c
 804561a:	fb00 f303 	mul.w	r3, r0, r3
 804561e:	440b      	add	r3, r1
 8045620:	3324      	adds	r3, #36	; 0x24
 8045622:	681b      	ldr	r3, [r3, #0]
 8045624:	4413      	add	r3, r2
 8045626:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8045628:	68ba      	ldr	r2, [r7, #8]
 804562a:	69bb      	ldr	r3, [r7, #24]
 804562c:	429a      	cmp	r2, r3
 804562e:	d338      	bcc.n	80456a2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8045630:	68ba      	ldr	r2, [r7, #8]
 8045632:	69fb      	ldr	r3, [r7, #28]
 8045634:	429a      	cmp	r2, r3
 8045636:	d834      	bhi.n	80456a2 <I2C_Compute_SCLL_SCLH+0x1c6>
 8045638:	4a29      	ldr	r2, [pc, #164]	; (80456e0 <I2C_Compute_SCLL_SCLH+0x204>)
 804563a:	683b      	ldr	r3, [r7, #0]
 804563c:	212c      	movs	r1, #44	; 0x2c
 804563e:	fb01 f303 	mul.w	r3, r1, r3
 8045642:	4413      	add	r3, r2
 8045644:	331c      	adds	r3, #28
 8045646:	681b      	ldr	r3, [r3, #0]
 8045648:	68fa      	ldr	r2, [r7, #12]
 804564a:	429a      	cmp	r2, r3
 804564c:	d329      	bcc.n	80456a2 <I2C_Compute_SCLL_SCLH+0x1c6>
 804564e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8045650:	68fb      	ldr	r3, [r7, #12]
 8045652:	429a      	cmp	r2, r3
 8045654:	d225      	bcs.n	80456a2 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8045656:	68ba      	ldr	r2, [r7, #8]
 8045658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804565a:	1ad3      	subs	r3, r2, r3
 804565c:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 804565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045660:	2b00      	cmp	r3, #0
 8045662:	da02      	bge.n	804566a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8045664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045666:	425b      	negs	r3, r3
 8045668:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 804566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804566c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 804566e:	429a      	cmp	r2, r3
 8045670:	d917      	bls.n	80456a2 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8045672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8045674:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 8045676:	491b      	ldr	r1, [pc, #108]	; (80456e4 <I2C_Compute_SCLL_SCLH+0x208>)
 8045678:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 804567a:	4613      	mov	r3, r2
 804567c:	009b      	lsls	r3, r3, #2
 804567e:	4413      	add	r3, r2
 8045680:	009b      	lsls	r3, r3, #2
 8045682:	440b      	add	r3, r1
 8045684:	3310      	adds	r3, #16
 8045686:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8045688:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 804568a:	4916      	ldr	r1, [pc, #88]	; (80456e4 <I2C_Compute_SCLL_SCLH+0x208>)
 804568c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 804568e:	4613      	mov	r3, r2
 8045690:	009b      	lsls	r3, r3, #2
 8045692:	4413      	add	r3, r2
 8045694:	009b      	lsls	r3, r3, #2
 8045696:	440b      	add	r3, r1
 8045698:	330c      	adds	r3, #12
 804569a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 804569c:	601a      	str	r2, [r3, #0]
              ret = count;
 804569e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80456a0:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80456a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80456a4:	3301      	adds	r3, #1
 80456a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80456a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80456aa:	2bff      	cmp	r3, #255	; 0xff
 80456ac:	d999      	bls.n	80455e2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80456ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80456b0:	3301      	adds	r3, #1
 80456b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80456b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80456b6:	2bff      	cmp	r3, #255	; 0xff
 80456b8:	f67f af6f 	bls.w	804559a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80456bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80456be:	3301      	adds	r3, #1
 80456c0:	637b      	str	r3, [r7, #52]	; 0x34
 80456c2:	4b09      	ldr	r3, [pc, #36]	; (80456e8 <I2C_Compute_SCLL_SCLH+0x20c>)
 80456c4:	681b      	ldr	r3, [r3, #0]
 80456c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80456c8:	429a      	cmp	r2, r3
 80456ca:	f4ff af56 	bcc.w	804557a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80456ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80456d0:	4618      	mov	r0, r3
 80456d2:	374c      	adds	r7, #76	; 0x4c
 80456d4:	46bd      	mov	sp, r7
 80456d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80456da:	4770      	bx	lr
 80456dc:	3b9aca00 	.word	0x3b9aca00
 80456e0:	080500dc 	.word	0x080500dc
 80456e4:	200183c8 	.word	0x200183c8
 80456e8:	20018dc8 	.word	0x20018dc8

080456ec <BSP_IDD_Init>:
#include "stm32l552e_eval_io.h"
#include "adc.h"
#include "spi.h"

int32_t   BSP_IDD_Init(uint32_t Instance)
{
 80456ec:	b480      	push	{r7}
 80456ee:	b085      	sub	sp, #20
 80456f0:	af00      	add	r7, sp, #0
 80456f2:	6078      	str	r0, [r7, #4]
	int32_t status = BSP_ERROR_NONE;
 80456f4:	2300      	movs	r3, #0
 80456f6:	60fb      	str	r3, [r7, #12]
	return status;
 80456f8:	68fb      	ldr	r3, [r7, #12]
}
 80456fa:	4618      	mov	r0, r3
 80456fc:	3714      	adds	r7, #20
 80456fe:	46bd      	mov	sp, r7
 8045700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045704:	4770      	bx	lr
	...

08045708 <BSP_IDD_StartMeasurement>:
{
	int32_t status = BSP_ERROR_NONE;
	return status;
}
int32_t   BSP_IDD_StartMeasurement(uint32_t Instance)
{
 8045708:	b580      	push	{r7, lr}
 804570a:	b084      	sub	sp, #16
 804570c:	af00      	add	r7, sp, #0
 804570e:	6078      	str	r0, [r7, #4]
	int32_t status = BSP_ERROR_NONE;
 8045710:	2300      	movs	r3, #0
 8045712:	60fb      	str	r3, [r7, #12]
	if(Instance == 0){
 8045714:	687b      	ldr	r3, [r7, #4]
 8045716:	2b00      	cmp	r3, #0
 8045718:	d113      	bne.n	8045742 <BSP_IDD_StartMeasurement+0x3a>
		HAL_ADC_Start(&hadc2);
 804571a:	480c      	ldr	r0, [pc, #48]	; (804574c <BSP_IDD_StartMeasurement+0x44>)
 804571c:	f001 fc2a 	bl	8046f74 <HAL_ADC_Start>
		while ((HAL_ADC_GetState(&hadc2) & HAL_ADC_STATE_REG_EOC) == 0)
 8045720:	e004      	b.n	804572c <BSP_IDD_StartMeasurement+0x24>
			HAL_ADC_PollForConversion(&hadc2, 1000);
 8045722:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8045726:	4809      	ldr	r0, [pc, #36]	; (804574c <BSP_IDD_StartMeasurement+0x44>)
 8045728:	f001 fd12 	bl	8047150 <HAL_ADC_PollForConversion>
		while ((HAL_ADC_GetState(&hadc2) & HAL_ADC_STATE_REG_EOC) == 0)
 804572c:	4807      	ldr	r0, [pc, #28]	; (804574c <BSP_IDD_StartMeasurement+0x44>)
 804572e:	f002 fc21 	bl	8047f74 <HAL_ADC_GetState>
 8045732:	4603      	mov	r3, r0
 8045734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8045738:	2b00      	cmp	r3, #0
 804573a:	d0f2      	beq.n	8045722 <BSP_IDD_StartMeasurement+0x1a>
		HAL_ADC_Stop(&hadc2);
 804573c:	4803      	ldr	r0, [pc, #12]	; (804574c <BSP_IDD_StartMeasurement+0x44>)
 804573e:	f001 fcd3 	bl	80470e8 <HAL_ADC_Stop>
	} else {

	}
	return status;
 8045742:	68fb      	ldr	r3, [r7, #12]
}
 8045744:	4618      	mov	r0, r3
 8045746:	3710      	adds	r7, #16
 8045748:	46bd      	mov	sp, r7
 804574a:	bd80      	pop	{r7, pc}
 804574c:	20018e54 	.word	0x20018e54

08045750 <BSP_IDD_GetValue>:
	int32_t status = BSP_ERROR_NONE;

	return status;
}
int32_t   BSP_IDD_GetValue(uint32_t Instance, uint32_t *IddValue)
{
 8045750:	b580      	push	{r7, lr}
 8045752:	b084      	sub	sp, #16
 8045754:	af00      	add	r7, sp, #0
 8045756:	6078      	str	r0, [r7, #4]
 8045758:	6039      	str	r1, [r7, #0]
	int32_t status = BSP_ERROR_NONE;
 804575a:	2300      	movs	r3, #0
 804575c:	60fb      	str	r3, [r7, #12]
	if(Instance == 0) {
 804575e:	687b      	ldr	r3, [r7, #4]
 8045760:	2b00      	cmp	r3, #0
 8045762:	d106      	bne.n	8045772 <BSP_IDD_GetValue+0x22>
		*IddValue = HAL_ADC_GetValue(&hadc2);
 8045764:	4813      	ldr	r0, [pc, #76]	; (80457b4 <BSP_IDD_GetValue+0x64>)
 8045766:	f001 fdc3 	bl	80472f0 <HAL_ADC_GetValue>
 804576a:	4602      	mov	r2, r0
 804576c:	683b      	ldr	r3, [r7, #0]
 804576e:	601a      	str	r2, [r3, #0]
 8045770:	e01a      	b.n	80457a8 <BSP_IDD_GetValue+0x58>
	} else {
		uint8_t tmp[2] = {0};
 8045772:	2300      	movs	r3, #0
 8045774:	813b      	strh	r3, [r7, #8]
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, GPIO_PIN_RESET);
 8045776:	2200      	movs	r2, #0
 8045778:	2110      	movs	r1, #16
 804577a:	480f      	ldr	r0, [pc, #60]	; (80457b8 <BSP_IDD_GetValue+0x68>)
 804577c:	f003 fd0a 	bl	8049194 <HAL_GPIO_WritePin>
		HAL_SPI_Receive(&hspi1, tmp, 2, 1000);
 8045780:	f107 0108 	add.w	r1, r7, #8
 8045784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8045788:	2202      	movs	r2, #2
 804578a:	480c      	ldr	r0, [pc, #48]	; (80457bc <BSP_IDD_GetValue+0x6c>)
 804578c:	f006 fee4 	bl	804c558 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, GPIO_PIN_SET);
 8045790:	2201      	movs	r2, #1
 8045792:	2110      	movs	r1, #16
 8045794:	4808      	ldr	r0, [pc, #32]	; (80457b8 <BSP_IDD_GetValue+0x68>)
 8045796:	f003 fcfd 	bl	8049194 <HAL_GPIO_WritePin>
		*IddValue = (tmp[1] << 8) | tmp[0];
 804579a:	7a7b      	ldrb	r3, [r7, #9]
 804579c:	021b      	lsls	r3, r3, #8
 804579e:	7a3a      	ldrb	r2, [r7, #8]
 80457a0:	4313      	orrs	r3, r2
 80457a2:	461a      	mov	r2, r3
 80457a4:	683b      	ldr	r3, [r7, #0]
 80457a6:	601a      	str	r2, [r3, #0]
	}
	return status;
 80457a8:	68fb      	ldr	r3, [r7, #12]
}
 80457aa:	4618      	mov	r0, r3
 80457ac:	3710      	adds	r7, #16
 80457ae:	46bd      	mov	sp, r7
 80457b0:	bd80      	pop	{r7, pc}
 80457b2:	bf00      	nop
 80457b4:	20018e54 	.word	0x20018e54
 80457b8:	42020000 	.word	0x42020000
 80457bc:	20019184 	.word	0x20019184

080457c0 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 80457c0:	b580      	push	{r7, lr}
 80457c2:	b082      	sub	sp, #8
 80457c4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80457c6:	2301      	movs	r3, #1
 80457c8:	71fb      	strb	r3, [r7, #7]
//  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef ICG20330_InitStructure;
//  GYRO_FilterConfigTypeDef ICG20330_FilterStructure = {0, 0};

  if (icg20330Drv.ReadID() == I_AM_ICG20330)
 80457ca:	4b18      	ldr	r3, [pc, #96]	; (804582c <BSP_GYRO_Init+0x6c>)
 80457cc:	689b      	ldr	r3, [r3, #8]
 80457ce:	4798      	blx	r3
 80457d0:	4603      	mov	r3, r0
 80457d2:	2b92      	cmp	r3, #146	; 0x92
 80457d4:	d123      	bne.n	804581e <BSP_GYRO_Init+0x5e>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &icg20330Drv;
 80457d6:	4b16      	ldr	r3, [pc, #88]	; (8045830 <BSP_GYRO_Init+0x70>)
 80457d8:	4a14      	ldr	r2, [pc, #80]	; (804582c <BSP_GYRO_Init+0x6c>)
 80457da:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    ICG20330_InitStructure.Power_Mode = ICG20330_MODE_ACTIVE;
 80457dc:	2303      	movs	r3, #3
 80457de:	703b      	strb	r3, [r7, #0]
    ICG20330_InitStructure.Output_DataRate = ICG20330_OUTPUT_DATARATE_1;
 80457e0:	2300      	movs	r3, #0
 80457e2:	707b      	strb	r3, [r7, #1]
    ICG20330_InitStructure.Axes_Enable = ICG20330_AXES_ENABLE;
 80457e4:	2303      	movs	r3, #3
 80457e6:	70bb      	strb	r3, [r7, #2]
    ICG20330_InitStructure.Band_Width = ICG20330_BANDWIDTH_250;
 80457e8:	2302      	movs	r3, #2
 80457ea:	70fb      	strb	r3, [r7, #3]
    ICG20330_InitStructure.BlockData_Update = ICG20330_BlockDataUpdate_Continous;
 80457ec:	2300      	movs	r3, #0
 80457ee:	713b      	strb	r3, [r7, #4]
    ICG20330_InitStructure.Endianness = ICG20330_BLE_LSB;
 80457f0:	2300      	movs	r3, #0
 80457f2:	717b      	strb	r3, [r7, #5]
    ICG20330_InitStructure.Full_Scale = ICG20330_FULLSCALE_500;
 80457f4:	2318      	movs	r3, #24
 80457f6:	71bb      	strb	r3, [r7, #6]

    /* Initialize component */
    GyroscopeDrv->Init(&ICG20330_InitStructure);
 80457f8:	4b0d      	ldr	r3, [pc, #52]	; (8045830 <BSP_GYRO_Init+0x70>)
 80457fa:	681b      	ldr	r3, [r3, #0]
 80457fc:	681b      	ldr	r3, [r3, #0]
 80457fe:	463a      	mov	r2, r7
 8045800:	4610      	mov	r0, r2
 8045802:	4798      	blx	r3

    /* Configure component filter */
      GyroscopeDrv->FilterConfig(0x00) ;
 8045804:	4b0a      	ldr	r3, [pc, #40]	; (8045830 <BSP_GYRO_Init+0x70>)
 8045806:	681b      	ldr	r3, [r3, #0]
 8045808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804580a:	2000      	movs	r0, #0
 804580c:	4798      	blx	r3

    /* Enable component filter */
    GyroscopeDrv->FilterCmd(0x1B);
 804580e:	4b08      	ldr	r3, [pc, #32]	; (8045830 <BSP_GYRO_Init+0x70>)
 8045810:	681b      	ldr	r3, [r3, #0]
 8045812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045814:	201b      	movs	r0, #27
 8045816:	4798      	blx	r3

    ret = GYRO_OK;
 8045818:	2300      	movs	r3, #0
 804581a:	71fb      	strb	r3, [r7, #7]
 804581c:	e001      	b.n	8045822 <BSP_GYRO_Init+0x62>
  }
  else
  {
    ret = GYRO_ERROR;
 804581e:	2301      	movs	r3, #1
 8045820:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8045822:	79fb      	ldrb	r3, [r7, #7]
}
 8045824:	4618      	mov	r0, r3
 8045826:	3708      	adds	r7, #8
 8045828:	46bd      	mov	sp, r7
 804582a:	bd80      	pop	{r7, pc}
 804582c:	20018028 	.word	0x20018028
 8045830:	20018e48 	.word	0x20018e48

08045834 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 8045834:	b580      	push	{r7, lr}
 8045836:	b082      	sub	sp, #8
 8045838:	af00      	add	r7, sp, #0
 804583a:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 804583c:	4b06      	ldr	r3, [pc, #24]	; (8045858 <BSP_GYRO_GetXYZ+0x24>)
 804583e:	681b      	ldr	r3, [r3, #0]
 8045840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8045842:	2b00      	cmp	r3, #0
 8045844:	d004      	beq.n	8045850 <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 8045846:	4b04      	ldr	r3, [pc, #16]	; (8045858 <BSP_GYRO_GetXYZ+0x24>)
 8045848:	681b      	ldr	r3, [r3, #0]
 804584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804584c:	6878      	ldr	r0, [r7, #4]
 804584e:	4798      	blx	r3
  }
}
 8045850:	bf00      	nop
 8045852:	3708      	adds	r7, #8
 8045854:	46bd      	mov	sp, r7
 8045856:	bd80      	pop	{r7, pc}
 8045858:	20018e48 	.word	0x20018e48

0804585c <GYRO_IO_Init>:

/**
  * @}
  */
void    GYRO_IO_Init(void)
{
 804585c:	b580      	push	{r7, lr}
 804585e:	b082      	sub	sp, #8
 8045860:	af00      	add	r7, sp, #0
	uint8_t data = 0x81;
 8045862:	2381      	movs	r3, #129	; 0x81
 8045864:	71fb      	strb	r3, [r7, #7]

	BSP_I2C1_Init();
 8045866:	f7ff faed 	bl	8044e44 <BSP_I2C1_Init>

	HAL_GPIO_WritePin(GYO_DEN_GPIO_Port, GYO_DEN_Pin, GPIO_PIN_RESET);
 804586a:	2200      	movs	r2, #0
 804586c:	2102      	movs	r1, #2
 804586e:	4809      	ldr	r0, [pc, #36]	; (8045894 <GYRO_IO_Init+0x38>)
 8045870:	f003 fc90 	bl	8049194 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8045874:	2032      	movs	r0, #50	; 0x32
 8045876:	f000 ff53 	bl	8046720 <HAL_Delay>

	GYRO_IO_Write(&data, ICG20330_PWR_MGMT_1_ADDR, 1);
 804587a:	1dfb      	adds	r3, r7, #7
 804587c:	2201      	movs	r2, #1
 804587e:	216b      	movs	r1, #107	; 0x6b
 8045880:	4618      	mov	r0, r3
 8045882:	f000 f809 	bl	8045898 <GYRO_IO_Write>
	HAL_Delay(100);
 8045886:	2064      	movs	r0, #100	; 0x64
 8045888:	f000 ff4a 	bl	8046720 <HAL_Delay>
}
 804588c:	bf00      	nop
 804588e:	3708      	adds	r7, #8
 8045890:	46bd      	mov	sp, r7
 8045892:	bd80      	pop	{r7, pc}
 8045894:	42021000 	.word	0x42021000

08045898 <GYRO_IO_Write>:
void    GYRO_IO_DeInit(void)
{
	BSP_I2C1_DeInit();
}
void    GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8045898:	b580      	push	{r7, lr}
 804589a:	b084      	sub	sp, #16
 804589c:	af00      	add	r7, sp, #0
 804589e:	6078      	str	r0, [r7, #4]
 80458a0:	460b      	mov	r3, r1
 80458a2:	70fb      	strb	r3, [r7, #3]
 80458a4:	4613      	mov	r3, r2
 80458a6:	803b      	strh	r3, [r7, #0]
	uint16_t DevAddress = (ICG20330_ADDR << 1) | 0x00;
 80458a8:	23d2      	movs	r3, #210	; 0xd2
 80458aa:	81fb      	strh	r3, [r7, #14]
	BSP_I2C1_WriteReg(DevAddress, WriteAddr, pBuffer, NumByteToWrite);
 80458ac:	78fb      	ldrb	r3, [r7, #3]
 80458ae:	b299      	uxth	r1, r3
 80458b0:	883b      	ldrh	r3, [r7, #0]
 80458b2:	89f8      	ldrh	r0, [r7, #14]
 80458b4:	687a      	ldr	r2, [r7, #4]
 80458b6:	f7ff fb17 	bl	8044ee8 <BSP_I2C1_WriteReg>

}
 80458ba:	bf00      	nop
 80458bc:	3710      	adds	r7, #16
 80458be:	46bd      	mov	sp, r7
 80458c0:	bd80      	pop	{r7, pc}

080458c2 <GYRO_IO_Read>:
void    GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 80458c2:	b580      	push	{r7, lr}
 80458c4:	b084      	sub	sp, #16
 80458c6:	af00      	add	r7, sp, #0
 80458c8:	6078      	str	r0, [r7, #4]
 80458ca:	460b      	mov	r3, r1
 80458cc:	70fb      	strb	r3, [r7, #3]
 80458ce:	4613      	mov	r3, r2
 80458d0:	803b      	strh	r3, [r7, #0]
	uint16_t DevAddress = (ICG20330_ADDR << 1) | 0x01;
 80458d2:	23d3      	movs	r3, #211	; 0xd3
 80458d4:	81fb      	strh	r3, [r7, #14]
	BSP_I2C1_ReadReg(DevAddress, ReadAddr, pBuffer, NumByteToRead);
 80458d6:	78fb      	ldrb	r3, [r7, #3]
 80458d8:	b299      	uxth	r1, r3
 80458da:	883b      	ldrh	r3, [r7, #0]
 80458dc:	89f8      	ldrh	r0, [r7, #14]
 80458de:	687a      	ldr	r2, [r7, #4]
 80458e0:	f7ff fb1a 	bl	8044f18 <BSP_I2C1_ReadReg>
}
 80458e4:	bf00      	nop
 80458e6:	3710      	adds	r7, #16
 80458e8:	46bd      	mov	sp, r7
 80458ea:	bd80      	pop	{r7, pc}

080458ec <lr1110_radio_get_pkt_type>:

    return status;
}

lr1110_status_t lr1110_radio_get_pkt_type( const void* context, lr1110_radio_pkt_type_t* pkt_type )
{
 80458ec:	b580      	push	{r7, lr}
 80458ee:	b086      	sub	sp, #24
 80458f0:	af02      	add	r7, sp, #8
 80458f2:	6078      	str	r0, [r7, #4]
 80458f4:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_GET_PKT_TYPE_CMD_LENGTH];
    uint8_t pkt_type_raw = 0;
 80458f6:	2300      	movs	r3, #0
 80458f8:	72fb      	strb	r3, [r7, #11]

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PKT_TYPE_OC >> 8 );
 80458fa:	2302      	movs	r3, #2
 80458fc:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_PKT_TYPE_OC >> 0 );
 80458fe:	2302      	movs	r3, #2
 8045900:	737b      	strb	r3, [r7, #13]

    lr1110_status_t status =
        ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_PKT_TYPE_CMD_LENGTH, &pkt_type_raw, 1 );
 8045902:	f107 030b 	add.w	r3, r7, #11
 8045906:	f107 010c 	add.w	r1, r7, #12
 804590a:	2201      	movs	r2, #1
 804590c:	9200      	str	r2, [sp, #0]
 804590e:	2202      	movs	r2, #2
 8045910:	6878      	ldr	r0, [r7, #4]
 8045912:	f7fe f890 	bl	8043a36 <lr1110_hal_read>
 8045916:	4603      	mov	r3, r0
 8045918:	73fb      	strb	r3, [r7, #15]

    if( status == LR1110_STATUS_OK )
 804591a:	7bfb      	ldrb	r3, [r7, #15]
 804591c:	2b00      	cmp	r3, #0
 804591e:	d102      	bne.n	8045926 <lr1110_radio_get_pkt_type+0x3a>
    {
        *pkt_type = ( lr1110_radio_pkt_type_t ) pkt_type_raw;
 8045920:	7afa      	ldrb	r2, [r7, #11]
 8045922:	683b      	ldr	r3, [r7, #0]
 8045924:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8045926:	7bfb      	ldrb	r3, [r7, #15]
}
 8045928:	4618      	mov	r0, r3
 804592a:	3710      	adds	r7, #16
 804592c:	46bd      	mov	sp, r7
 804592e:	bd80      	pop	{r7, pc}

08045930 <lr1110_radio_get_rx_buffer_status>:

lr1110_status_t lr1110_radio_get_rx_buffer_status( const void*                      context,
                                                   lr1110_radio_rx_buffer_status_t* rx_buffer_status )
{
 8045930:	b580      	push	{r7, lr}
 8045932:	b086      	sub	sp, #24
 8045934:	af02      	add	r7, sp, #8
 8045936:	6078      	str	r0, [r7, #4]
 8045938:	6039      	str	r1, [r7, #0]
    uint8_t         cbuffer[LR1110_RADIO_GET_RXBUFFER_STATUS_CMD_LENGTH];
    uint8_t         rbuffer[sizeof( *rx_buffer_status )] = { 0x00 };
 804593a:	2300      	movs	r3, #0
 804593c:	813b      	strh	r3, [r7, #8]
    lr1110_status_t status                               = LR1110_STATUS_ERROR;
 804593e:	2303      	movs	r3, #3
 8045940:	73fb      	strb	r3, [r7, #15]

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_RXBUFFER_STATUS_OC >> 8 );
 8045942:	2302      	movs	r3, #2
 8045944:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_RXBUFFER_STATUS_OC >> 0 );
 8045946:	2303      	movs	r3, #3
 8045948:	737b      	strb	r3, [r7, #13]

    status = ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_RXBUFFER_STATUS_CMD_LENGTH,
 804594a:	f107 0308 	add.w	r3, r7, #8
 804594e:	f107 010c 	add.w	r1, r7, #12
 8045952:	2202      	movs	r2, #2
 8045954:	9200      	str	r2, [sp, #0]
 8045956:	2202      	movs	r2, #2
 8045958:	6878      	ldr	r0, [r7, #4]
 804595a:	f7fe f86c 	bl	8043a36 <lr1110_hal_read>
 804595e:	4603      	mov	r3, r0
 8045960:	73fb      	strb	r3, [r7, #15]
                                                  rbuffer, sizeof( *rx_buffer_status ) );

    if( status == LR1110_STATUS_OK )
 8045962:	7bfb      	ldrb	r3, [r7, #15]
 8045964:	2b00      	cmp	r3, #0
 8045966:	d105      	bne.n	8045974 <lr1110_radio_get_rx_buffer_status+0x44>
    {
        rx_buffer_status->pld_len_in_bytes     = rbuffer[0];
 8045968:	7a3a      	ldrb	r2, [r7, #8]
 804596a:	683b      	ldr	r3, [r7, #0]
 804596c:	701a      	strb	r2, [r3, #0]
        rx_buffer_status->buffer_start_pointer = rbuffer[1];
 804596e:	7a7a      	ldrb	r2, [r7, #9]
 8045970:	683b      	ldr	r3, [r7, #0]
 8045972:	705a      	strb	r2, [r3, #1]
    }

    return status;
 8045974:	7bfb      	ldrb	r3, [r7, #15]
}
 8045976:	4618      	mov	r0, r3
 8045978:	3710      	adds	r7, #16
 804597a:	46bd      	mov	sp, r7
 804597c:	bd80      	pop	{r7, pc}

0804597e <lr1110_radio_get_gfsk_pkt_status>:

lr1110_status_t lr1110_radio_get_gfsk_pkt_status( const void* context, lr1110_radio_pkt_status_gfsk_t* pkt_status )
{
 804597e:	b580      	push	{r7, lr}
 8045980:	b086      	sub	sp, #24
 8045982:	af02      	add	r7, sp, #8
 8045984:	6078      	str	r0, [r7, #4]
 8045986:	6039      	str	r1, [r7, #0]
    uint8_t         cbuffer[LR1110_RADIO_GET_PKT_STATUS_CMD_LENGTH];
    uint8_t         rbuffer[4] = { 0x00 };
 8045988:	2300      	movs	r3, #0
 804598a:	60bb      	str	r3, [r7, #8]
    lr1110_status_t status     = LR1110_STATUS_ERROR;
 804598c:	2303      	movs	r3, #3
 804598e:	73fb      	strb	r3, [r7, #15]

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PKT_STATUS_OC >> 8 );
 8045990:	2302      	movs	r3, #2
 8045992:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_PKT_STATUS_OC >> 0 );
 8045994:	2304      	movs	r3, #4
 8045996:	737b      	strb	r3, [r7, #13]

    status =
        ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_PKT_STATUS_CMD_LENGTH, rbuffer, 4 );
 8045998:	f107 0308 	add.w	r3, r7, #8
 804599c:	f107 010c 	add.w	r1, r7, #12
 80459a0:	2204      	movs	r2, #4
 80459a2:	9200      	str	r2, [sp, #0]
 80459a4:	2202      	movs	r2, #2
 80459a6:	6878      	ldr	r0, [r7, #4]
 80459a8:	f7fe f845 	bl	8043a36 <lr1110_hal_read>
 80459ac:	4603      	mov	r3, r0
 80459ae:	73fb      	strb	r3, [r7, #15]

    if( status == LR1110_STATUS_OK )
 80459b0:	7bfb      	ldrb	r3, [r7, #15]
 80459b2:	2b00      	cmp	r3, #0
 80459b4:	d153      	bne.n	8045a5e <lr1110_radio_get_gfsk_pkt_status+0xe0>
    {
        pkt_status->rssi_sync_in_dbm = -( int8_t )( rbuffer[0] >> 1 );
 80459b6:	7a3b      	ldrb	r3, [r7, #8]
 80459b8:	085b      	lsrs	r3, r3, #1
 80459ba:	b2db      	uxtb	r3, r3
 80459bc:	425b      	negs	r3, r3
 80459be:	b2db      	uxtb	r3, r3
 80459c0:	b25a      	sxtb	r2, r3
 80459c2:	683b      	ldr	r3, [r7, #0]
 80459c4:	701a      	strb	r2, [r3, #0]
        pkt_status->rssi_avg_in_dbm  = -( int8_t )( rbuffer[1] >> 1 );
 80459c6:	7a7b      	ldrb	r3, [r7, #9]
 80459c8:	085b      	lsrs	r3, r3, #1
 80459ca:	b2db      	uxtb	r3, r3
 80459cc:	425b      	negs	r3, r3
 80459ce:	b2db      	uxtb	r3, r3
 80459d0:	b25a      	sxtb	r2, r3
 80459d2:	683b      	ldr	r3, [r7, #0]
 80459d4:	705a      	strb	r2, [r3, #1]
        pkt_status->rx_len_in_bytes  = rbuffer[2];
 80459d6:	7aba      	ldrb	r2, [r7, #10]
 80459d8:	683b      	ldr	r3, [r7, #0]
 80459da:	709a      	strb	r2, [r3, #2]
        pkt_status->is_addr_err      = ( ( rbuffer[3] & 0x20 ) != 0 ) ? true : false;
 80459dc:	7afb      	ldrb	r3, [r7, #11]
 80459de:	115b      	asrs	r3, r3, #5
 80459e0:	f003 0301 	and.w	r3, r3, #1
 80459e4:	2b00      	cmp	r3, #0
 80459e6:	bf14      	ite	ne
 80459e8:	2301      	movne	r3, #1
 80459ea:	2300      	moveq	r3, #0
 80459ec:	b2da      	uxtb	r2, r3
 80459ee:	683b      	ldr	r3, [r7, #0]
 80459f0:	70da      	strb	r2, [r3, #3]
        pkt_status->is_crc_err       = ( ( rbuffer[3] & 0x10 ) != 0 ) ? true : false;
 80459f2:	7afb      	ldrb	r3, [r7, #11]
 80459f4:	111b      	asrs	r3, r3, #4
 80459f6:	f003 0301 	and.w	r3, r3, #1
 80459fa:	2b00      	cmp	r3, #0
 80459fc:	bf14      	ite	ne
 80459fe:	2301      	movne	r3, #1
 8045a00:	2300      	moveq	r3, #0
 8045a02:	b2da      	uxtb	r2, r3
 8045a04:	683b      	ldr	r3, [r7, #0]
 8045a06:	711a      	strb	r2, [r3, #4]
        pkt_status->is_len_err       = ( ( rbuffer[3] & 0x08 ) != 0 ) ? true : false;
 8045a08:	7afb      	ldrb	r3, [r7, #11]
 8045a0a:	10db      	asrs	r3, r3, #3
 8045a0c:	f003 0301 	and.w	r3, r3, #1
 8045a10:	2b00      	cmp	r3, #0
 8045a12:	bf14      	ite	ne
 8045a14:	2301      	movne	r3, #1
 8045a16:	2300      	moveq	r3, #0
 8045a18:	b2da      	uxtb	r2, r3
 8045a1a:	683b      	ldr	r3, [r7, #0]
 8045a1c:	715a      	strb	r2, [r3, #5]
        pkt_status->is_abort_err     = ( ( rbuffer[3] & 0x04 ) != 0 ) ? true : false;
 8045a1e:	7afb      	ldrb	r3, [r7, #11]
 8045a20:	109b      	asrs	r3, r3, #2
 8045a22:	f003 0301 	and.w	r3, r3, #1
 8045a26:	2b00      	cmp	r3, #0
 8045a28:	bf14      	ite	ne
 8045a2a:	2301      	movne	r3, #1
 8045a2c:	2300      	moveq	r3, #0
 8045a2e:	b2da      	uxtb	r2, r3
 8045a30:	683b      	ldr	r3, [r7, #0]
 8045a32:	719a      	strb	r2, [r3, #6]
        pkt_status->is_received      = ( ( rbuffer[3] & 0x02 ) != 0 ) ? true : false;
 8045a34:	7afb      	ldrb	r3, [r7, #11]
 8045a36:	105b      	asrs	r3, r3, #1
 8045a38:	f003 0301 	and.w	r3, r3, #1
 8045a3c:	2b00      	cmp	r3, #0
 8045a3e:	bf14      	ite	ne
 8045a40:	2301      	movne	r3, #1
 8045a42:	2300      	moveq	r3, #0
 8045a44:	b2da      	uxtb	r2, r3
 8045a46:	683b      	ldr	r3, [r7, #0]
 8045a48:	71da      	strb	r2, [r3, #7]
        pkt_status->is_sent          = ( ( rbuffer[3] & 0x01 ) != 0 ) ? true : false;
 8045a4a:	7afb      	ldrb	r3, [r7, #11]
 8045a4c:	f003 0301 	and.w	r3, r3, #1
 8045a50:	2b00      	cmp	r3, #0
 8045a52:	bf14      	ite	ne
 8045a54:	2301      	movne	r3, #1
 8045a56:	2300      	moveq	r3, #0
 8045a58:	b2da      	uxtb	r2, r3
 8045a5a:	683b      	ldr	r3, [r7, #0]
 8045a5c:	721a      	strb	r2, [r3, #8]
    }

    return status;
 8045a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8045a60:	4618      	mov	r0, r3
 8045a62:	3710      	adds	r7, #16
 8045a64:	46bd      	mov	sp, r7
 8045a66:	bd80      	pop	{r7, pc}

08045a68 <lr1110_radio_get_lora_pkt_status>:

lr1110_status_t lr1110_radio_get_lora_pkt_status( const void* context, lr1110_radio_pkt_status_lora_t* pkt_status )
{
 8045a68:	b580      	push	{r7, lr}
 8045a6a:	b086      	sub	sp, #24
 8045a6c:	af02      	add	r7, sp, #8
 8045a6e:	6078      	str	r0, [r7, #4]
 8045a70:	6039      	str	r1, [r7, #0]
    uint8_t         cbuffer[LR1110_RADIO_GET_PKT_STATUS_CMD_LENGTH];
    uint8_t         rbuffer[3] = { 0x00 };
 8045a72:	4b1b      	ldr	r3, [pc, #108]	; (8045ae0 <lr1110_radio_get_lora_pkt_status+0x78>)
 8045a74:	881b      	ldrh	r3, [r3, #0]
 8045a76:	813b      	strh	r3, [r7, #8]
 8045a78:	2300      	movs	r3, #0
 8045a7a:	72bb      	strb	r3, [r7, #10]
    lr1110_status_t status     = LR1110_STATUS_ERROR;
 8045a7c:	2303      	movs	r3, #3
 8045a7e:	73fb      	strb	r3, [r7, #15]

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_PKT_STATUS_OC >> 8 );
 8045a80:	2302      	movs	r3, #2
 8045a82:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_PKT_STATUS_OC >> 0 );
 8045a84:	2304      	movs	r3, #4
 8045a86:	737b      	strb	r3, [r7, #13]

    status =
        ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_PKT_STATUS_CMD_LENGTH, rbuffer, 3 );
 8045a88:	f107 0308 	add.w	r3, r7, #8
 8045a8c:	f107 010c 	add.w	r1, r7, #12
 8045a90:	2203      	movs	r2, #3
 8045a92:	9200      	str	r2, [sp, #0]
 8045a94:	2202      	movs	r2, #2
 8045a96:	6878      	ldr	r0, [r7, #4]
 8045a98:	f7fd ffcd 	bl	8043a36 <lr1110_hal_read>
 8045a9c:	4603      	mov	r3, r0
 8045a9e:	73fb      	strb	r3, [r7, #15]

    if( status == LR1110_STATUS_OK )
 8045aa0:	7bfb      	ldrb	r3, [r7, #15]
 8045aa2:	2b00      	cmp	r3, #0
 8045aa4:	d116      	bne.n	8045ad4 <lr1110_radio_get_lora_pkt_status+0x6c>
    {
        pkt_status->rssi_pkt_in_dbm        = -( int8_t )( rbuffer[0] >> 1 );
 8045aa6:	7a3b      	ldrb	r3, [r7, #8]
 8045aa8:	085b      	lsrs	r3, r3, #1
 8045aaa:	b2db      	uxtb	r3, r3
 8045aac:	425b      	negs	r3, r3
 8045aae:	b2db      	uxtb	r3, r3
 8045ab0:	b25a      	sxtb	r2, r3
 8045ab2:	683b      	ldr	r3, [r7, #0]
 8045ab4:	701a      	strb	r2, [r3, #0]
        pkt_status->snr_pkt_in_db          = ( ( ( int8_t ) rbuffer[1] ) + 2 ) >> 2;
 8045ab6:	7a7b      	ldrb	r3, [r7, #9]
 8045ab8:	b25b      	sxtb	r3, r3
 8045aba:	3302      	adds	r3, #2
 8045abc:	109b      	asrs	r3, r3, #2
 8045abe:	b25a      	sxtb	r2, r3
 8045ac0:	683b      	ldr	r3, [r7, #0]
 8045ac2:	705a      	strb	r2, [r3, #1]
        pkt_status->signal_rssi_pkt_in_dbm = -( int8_t )( rbuffer[2] >> 1 );
 8045ac4:	7abb      	ldrb	r3, [r7, #10]
 8045ac6:	085b      	lsrs	r3, r3, #1
 8045ac8:	b2db      	uxtb	r3, r3
 8045aca:	425b      	negs	r3, r3
 8045acc:	b2db      	uxtb	r3, r3
 8045ace:	b25a      	sxtb	r2, r3
 8045ad0:	683b      	ldr	r3, [r7, #0]
 8045ad2:	709a      	strb	r2, [r3, #2]
    }

    return status;
 8045ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8045ad6:	4618      	mov	r0, r3
 8045ad8:	3710      	adds	r7, #16
 8045ada:	46bd      	mov	sp, r7
 8045adc:	bd80      	pop	{r7, pc}
 8045ade:	bf00      	nop
 8045ae0:	0804ff38 	.word	0x0804ff38

08045ae4 <lr1110_radio_get_rssi_inst>:

lr1110_status_t lr1110_radio_get_rssi_inst( const void* context, int8_t* rssi_in_dbm )
{
 8045ae4:	b580      	push	{r7, lr}
 8045ae6:	b086      	sub	sp, #24
 8045ae8:	af02      	add	r7, sp, #8
 8045aea:	6078      	str	r0, [r7, #4]
 8045aec:	6039      	str	r1, [r7, #0]
    uint8_t         cbuffer[LR1110_RADIO_GET_RSSI_INST_CMD_LENGTH];
    uint8_t         rssi   = 0;
 8045aee:	2300      	movs	r3, #0
 8045af0:	72fb      	strb	r3, [r7, #11]
    lr1110_status_t status = LR1110_STATUS_ERROR;
 8045af2:	2303      	movs	r3, #3
 8045af4:	73fb      	strb	r3, [r7, #15]

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_GET_RSSI_INST_OC >> 8 );
 8045af6:	2302      	movs	r3, #2
 8045af8:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_GET_RSSI_INST_OC >> 0 );
 8045afa:	2305      	movs	r3, #5
 8045afc:	737b      	strb	r3, [r7, #13]

    status = ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_RADIO_GET_RSSI_INST_CMD_LENGTH, &rssi,
 8045afe:	f107 030b 	add.w	r3, r7, #11
 8045b02:	f107 010c 	add.w	r1, r7, #12
 8045b06:	2201      	movs	r2, #1
 8045b08:	9200      	str	r2, [sp, #0]
 8045b0a:	2202      	movs	r2, #2
 8045b0c:	6878      	ldr	r0, [r7, #4]
 8045b0e:	f7fd ff92 	bl	8043a36 <lr1110_hal_read>
 8045b12:	4603      	mov	r3, r0
 8045b14:	73fb      	strb	r3, [r7, #15]
                                                  sizeof( rssi ) );

    if( status == LR1110_STATUS_OK )
 8045b16:	7bfb      	ldrb	r3, [r7, #15]
 8045b18:	2b00      	cmp	r3, #0
 8045b1a:	d107      	bne.n	8045b2c <lr1110_radio_get_rssi_inst+0x48>
    {
        *rssi_in_dbm = -( int8_t )( rssi >> 1 );
 8045b1c:	7afb      	ldrb	r3, [r7, #11]
 8045b1e:	085b      	lsrs	r3, r3, #1
 8045b20:	b2db      	uxtb	r3, r3
 8045b22:	425b      	negs	r3, r3
 8045b24:	b2db      	uxtb	r3, r3
 8045b26:	b25a      	sxtb	r2, r3
 8045b28:	683b      	ldr	r3, [r7, #0]
 8045b2a:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8045b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8045b2e:	4618      	mov	r0, r3
 8045b30:	3710      	adds	r7, #16
 8045b32:	46bd      	mov	sp, r7
 8045b34:	bd80      	pop	{r7, pc}

08045b36 <lr1110_radio_set_gfsk_sync_word>:

lr1110_status_t lr1110_radio_set_gfsk_sync_word( const void* context, const uint8_t* gfsk_sync_word )
{
 8045b36:	b580      	push	{r7, lr}
 8045b38:	b088      	sub	sp, #32
 8045b3a:	af02      	add	r7, sp, #8
 8045b3c:	6078      	str	r0, [r7, #4]
 8045b3e:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_GFSK_SYNC_WORD_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_SYNC_WORD_OC >> 8 );
 8045b40:	2302      	movs	r3, #2
 8045b42:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_GFSK_SYNC_WORD_OC >> 0 );
 8045b44:	2306      	movs	r3, #6
 8045b46:	737b      	strb	r3, [r7, #13]

    for( uint8_t index = 0; index < 8; index++ )
 8045b48:	2300      	movs	r3, #0
 8045b4a:	75fb      	strb	r3, [r7, #23]
 8045b4c:	e00d      	b.n	8045b6a <lr1110_radio_set_gfsk_sync_word+0x34>
    {
        cbuffer[2 + index] = gfsk_sync_word[index];
 8045b4e:	7dfb      	ldrb	r3, [r7, #23]
 8045b50:	683a      	ldr	r2, [r7, #0]
 8045b52:	441a      	add	r2, r3
 8045b54:	7dfb      	ldrb	r3, [r7, #23]
 8045b56:	3302      	adds	r3, #2
 8045b58:	7812      	ldrb	r2, [r2, #0]
 8045b5a:	f107 0118 	add.w	r1, r7, #24
 8045b5e:	440b      	add	r3, r1
 8045b60:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for( uint8_t index = 0; index < 8; index++ )
 8045b64:	7dfb      	ldrb	r3, [r7, #23]
 8045b66:	3301      	adds	r3, #1
 8045b68:	75fb      	strb	r3, [r7, #23]
 8045b6a:	7dfb      	ldrb	r3, [r7, #23]
 8045b6c:	2b07      	cmp	r3, #7
 8045b6e:	d9ee      	bls.n	8045b4e <lr1110_radio_set_gfsk_sync_word+0x18>
    }

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_GFSK_SYNC_WORD_CMD_LENGTH, 0, 0 );
 8045b70:	f107 010c 	add.w	r1, r7, #12
 8045b74:	2300      	movs	r3, #0
 8045b76:	9300      	str	r3, [sp, #0]
 8045b78:	2300      	movs	r3, #0
 8045b7a:	220a      	movs	r2, #10
 8045b7c:	6878      	ldr	r0, [r7, #4]
 8045b7e:	f7fd feff 	bl	8043980 <lr1110_hal_write>
 8045b82:	4603      	mov	r3, r0
}
 8045b84:	4618      	mov	r0, r3
 8045b86:	3718      	adds	r7, #24
 8045b88:	46bd      	mov	sp, r7
 8045b8a:	bd80      	pop	{r7, pc}

08045b8c <lr1110_radio_set_lora_sync_word>:
only, please use lr1110_radio_set_lora_public_network. \
To deactivate this warning, define C preprocessor symbol \
LR1110_DISABLE_WARNINGS."
#endif
lr1110_status_t lr1110_radio_set_lora_sync_word( const void* context, const uint8_t sync_word )
{
 8045b8c:	b580      	push	{r7, lr}
 8045b8e:	b086      	sub	sp, #24
 8045b90:	af02      	add	r7, sp, #8
 8045b92:	6078      	str	r0, [r7, #4]
 8045b94:	460b      	mov	r3, r1
 8045b96:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_WORD_OC >> 8 );
 8045b98:	2302      	movs	r3, #2
 8045b9a:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_WORD_OC >> 0 );
 8045b9c:	232b      	movs	r3, #43	; 0x2b
 8045b9e:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = sync_word;
 8045ba0:	78fb      	ldrb	r3, [r7, #3]
 8045ba2:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH, 0, 0 );
 8045ba4:	f107 010c 	add.w	r1, r7, #12
 8045ba8:	2300      	movs	r3, #0
 8045baa:	9300      	str	r3, [sp, #0]
 8045bac:	2300      	movs	r3, #0
 8045bae:	2203      	movs	r2, #3
 8045bb0:	6878      	ldr	r0, [r7, #4]
 8045bb2:	f7fd fee5 	bl	8043980 <lr1110_hal_write>
 8045bb6:	4603      	mov	r3, r0
}
 8045bb8:	4618      	mov	r0, r3
 8045bba:	3710      	adds	r7, #16
 8045bbc:	46bd      	mov	sp, r7
 8045bbe:	bd80      	pop	{r7, pc}

08045bc0 <lr1110_radio_set_rx>:

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_LORA_SYNC_WORD_CMD_LENGTH, 0, 0 );
}

lr1110_status_t lr1110_radio_set_rx( const void* context, const uint32_t timeout_in_ms )
{
 8045bc0:	b580      	push	{r7, lr}
 8045bc2:	b084      	sub	sp, #16
 8045bc4:	af00      	add	r7, sp, #0
 8045bc6:	6078      	str	r0, [r7, #4]
 8045bc8:	6039      	str	r1, [r7, #0]
    const uint32_t timeout_in_rtc_step = lr1110_radio_convert_time_in_ms_to_rtc_step( timeout_in_ms );
 8045bca:	6838      	ldr	r0, [r7, #0]
 8045bcc:	f000 fac6 	bl	804615c <lr1110_radio_convert_time_in_ms_to_rtc_step>
 8045bd0:	60f8      	str	r0, [r7, #12]

    return lr1110_radio_set_rx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8045bd2:	68f9      	ldr	r1, [r7, #12]
 8045bd4:	6878      	ldr	r0, [r7, #4]
 8045bd6:	f000 f805 	bl	8045be4 <lr1110_radio_set_rx_with_timeout_in_rtc_step>
 8045bda:	4603      	mov	r3, r0
}
 8045bdc:	4618      	mov	r0, r3
 8045bde:	3710      	adds	r7, #16
 8045be0:	46bd      	mov	sp, r7
 8045be2:	bd80      	pop	{r7, pc}

08045be4 <lr1110_radio_set_rx_with_timeout_in_rtc_step>:

lr1110_status_t lr1110_radio_set_rx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout )
{
 8045be4:	b580      	push	{r7, lr}
 8045be6:	b086      	sub	sp, #24
 8045be8:	af02      	add	r7, sp, #8
 8045bea:	6078      	str	r0, [r7, #4]
 8045bec:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_RX_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_OC >> 8 );
 8045bee:	2302      	movs	r3, #2
 8045bf0:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_RX_OC >> 0 );
 8045bf2:	2309      	movs	r3, #9
 8045bf4:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t )( timeout >> 16 );
 8045bf6:	683b      	ldr	r3, [r7, #0]
 8045bf8:	0c1b      	lsrs	r3, r3, #16
 8045bfa:	b2db      	uxtb	r3, r3
 8045bfc:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t )( timeout >> 8 );
 8045bfe:	683b      	ldr	r3, [r7, #0]
 8045c00:	0a1b      	lsrs	r3, r3, #8
 8045c02:	b2db      	uxtb	r3, r3
 8045c04:	72fb      	strb	r3, [r7, #11]
    cbuffer[4] = ( uint8_t )( timeout >> 0 );
 8045c06:	683b      	ldr	r3, [r7, #0]
 8045c08:	b2db      	uxtb	r3, r3
 8045c0a:	733b      	strb	r3, [r7, #12]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_RX_CMD_LENGTH, 0, 0 );
 8045c0c:	f107 0108 	add.w	r1, r7, #8
 8045c10:	2300      	movs	r3, #0
 8045c12:	9300      	str	r3, [sp, #0]
 8045c14:	2300      	movs	r3, #0
 8045c16:	2205      	movs	r2, #5
 8045c18:	6878      	ldr	r0, [r7, #4]
 8045c1a:	f7fd feb1 	bl	8043980 <lr1110_hal_write>
 8045c1e:	4603      	mov	r3, r0
}
 8045c20:	4618      	mov	r0, r3
 8045c22:	3710      	adds	r7, #16
 8045c24:	46bd      	mov	sp, r7
 8045c26:	bd80      	pop	{r7, pc}

08045c28 <lr1110_radio_set_tx>:

lr1110_status_t lr1110_radio_set_tx( const void* context, const uint32_t timeout_in_ms )
{
 8045c28:	b580      	push	{r7, lr}
 8045c2a:	b084      	sub	sp, #16
 8045c2c:	af00      	add	r7, sp, #0
 8045c2e:	6078      	str	r0, [r7, #4]
 8045c30:	6039      	str	r1, [r7, #0]
    const uint32_t timeout_in_rtc_step = lr1110_radio_convert_time_in_ms_to_rtc_step( timeout_in_ms );
 8045c32:	6838      	ldr	r0, [r7, #0]
 8045c34:	f000 fa92 	bl	804615c <lr1110_radio_convert_time_in_ms_to_rtc_step>
 8045c38:	60f8      	str	r0, [r7, #12]

    return lr1110_radio_set_tx_with_timeout_in_rtc_step( context, timeout_in_rtc_step );
 8045c3a:	68f9      	ldr	r1, [r7, #12]
 8045c3c:	6878      	ldr	r0, [r7, #4]
 8045c3e:	f000 f805 	bl	8045c4c <lr1110_radio_set_tx_with_timeout_in_rtc_step>
 8045c42:	4603      	mov	r3, r0
}
 8045c44:	4618      	mov	r0, r3
 8045c46:	3710      	adds	r7, #16
 8045c48:	46bd      	mov	sp, r7
 8045c4a:	bd80      	pop	{r7, pc}

08045c4c <lr1110_radio_set_tx_with_timeout_in_rtc_step>:

lr1110_status_t lr1110_radio_set_tx_with_timeout_in_rtc_step( const void* context, const uint32_t timeout_in_rtc_step )
{
 8045c4c:	b580      	push	{r7, lr}
 8045c4e:	b086      	sub	sp, #24
 8045c50:	af02      	add	r7, sp, #8
 8045c52:	6078      	str	r0, [r7, #4]
 8045c54:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_TX_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_OC >> 8 );
 8045c56:	2302      	movs	r3, #2
 8045c58:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_TX_OC >> 0 );
 8045c5a:	230a      	movs	r3, #10
 8045c5c:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t )( timeout_in_rtc_step >> 16 );
 8045c5e:	683b      	ldr	r3, [r7, #0]
 8045c60:	0c1b      	lsrs	r3, r3, #16
 8045c62:	b2db      	uxtb	r3, r3
 8045c64:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t )( timeout_in_rtc_step >> 8 );
 8045c66:	683b      	ldr	r3, [r7, #0]
 8045c68:	0a1b      	lsrs	r3, r3, #8
 8045c6a:	b2db      	uxtb	r3, r3
 8045c6c:	72fb      	strb	r3, [r7, #11]
    cbuffer[4] = ( uint8_t )( timeout_in_rtc_step >> 0 );
 8045c6e:	683b      	ldr	r3, [r7, #0]
 8045c70:	b2db      	uxtb	r3, r3
 8045c72:	733b      	strb	r3, [r7, #12]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_TX_CMD_LENGTH, 0, 0 );
 8045c74:	f107 0108 	add.w	r1, r7, #8
 8045c78:	2300      	movs	r3, #0
 8045c7a:	9300      	str	r3, [sp, #0]
 8045c7c:	2300      	movs	r3, #0
 8045c7e:	2205      	movs	r2, #5
 8045c80:	6878      	ldr	r0, [r7, #4]
 8045c82:	f7fd fe7d 	bl	8043980 <lr1110_hal_write>
 8045c86:	4603      	mov	r3, r0
}
 8045c88:	4618      	mov	r0, r3
 8045c8a:	3710      	adds	r7, #16
 8045c8c:	46bd      	mov	sp, r7
 8045c8e:	bd80      	pop	{r7, pc}

08045c90 <lr1110_radio_set_rf_freq>:

lr1110_status_t lr1110_radio_set_rf_freq( const void* context, const uint32_t freq_in_hz )
{
 8045c90:	b580      	push	{r7, lr}
 8045c92:	b086      	sub	sp, #24
 8045c94:	af02      	add	r7, sp, #8
 8045c96:	6078      	str	r0, [r7, #4]
 8045c98:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_RF_FREQUENCY_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RF_FREQUENCY_OC >> 8 );
 8045c9a:	2302      	movs	r3, #2
 8045c9c:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_RF_FREQUENCY_OC >> 0 );
 8045c9e:	230b      	movs	r3, #11
 8045ca0:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t )( freq_in_hz >> 24 );
 8045ca2:	683b      	ldr	r3, [r7, #0]
 8045ca4:	0e1b      	lsrs	r3, r3, #24
 8045ca6:	b2db      	uxtb	r3, r3
 8045ca8:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t )( freq_in_hz >> 16 );
 8045caa:	683b      	ldr	r3, [r7, #0]
 8045cac:	0c1b      	lsrs	r3, r3, #16
 8045cae:	b2db      	uxtb	r3, r3
 8045cb0:	72fb      	strb	r3, [r7, #11]
    cbuffer[4] = ( uint8_t )( freq_in_hz >> 8 );
 8045cb2:	683b      	ldr	r3, [r7, #0]
 8045cb4:	0a1b      	lsrs	r3, r3, #8
 8045cb6:	b2db      	uxtb	r3, r3
 8045cb8:	733b      	strb	r3, [r7, #12]
    cbuffer[5] = ( uint8_t )( freq_in_hz >> 0 );
 8045cba:	683b      	ldr	r3, [r7, #0]
 8045cbc:	b2db      	uxtb	r3, r3
 8045cbe:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_RF_FREQUENCY_CMD_LENGTH, 0, 0 );
 8045cc0:	f107 0108 	add.w	r1, r7, #8
 8045cc4:	2300      	movs	r3, #0
 8045cc6:	9300      	str	r3, [sp, #0]
 8045cc8:	2300      	movs	r3, #0
 8045cca:	2206      	movs	r2, #6
 8045ccc:	6878      	ldr	r0, [r7, #4]
 8045cce:	f7fd fe57 	bl	8043980 <lr1110_hal_write>
 8045cd2:	4603      	mov	r3, r0
}
 8045cd4:	4618      	mov	r0, r3
 8045cd6:	3710      	adds	r7, #16
 8045cd8:	46bd      	mov	sp, r7
 8045cda:	bd80      	pop	{r7, pc}

08045cdc <lr1110_radio_set_pkt_type>:

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_CAD_PARAMS_CMD_LENGTH, 0, 0 );
}

lr1110_status_t lr1110_radio_set_pkt_type( const void* context, const lr1110_radio_pkt_type_t pkt_type )
{
 8045cdc:	b580      	push	{r7, lr}
 8045cde:	b086      	sub	sp, #24
 8045ce0:	af02      	add	r7, sp, #8
 8045ce2:	6078      	str	r0, [r7, #4]
 8045ce4:	460b      	mov	r3, r1
 8045ce6:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_RADIO_SET_PKT_TYPE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PKT_TYPE_OC >> 8 );
 8045ce8:	2302      	movs	r3, #2
 8045cea:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PKT_TYPE_OC >> 0 );
 8045cec:	230e      	movs	r3, #14
 8045cee:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t ) pkt_type;
 8045cf0:	78fb      	ldrb	r3, [r7, #3]
 8045cf2:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_PKT_TYPE_CMD_LENGTH, 0, 0 );
 8045cf4:	f107 010c 	add.w	r1, r7, #12
 8045cf8:	2300      	movs	r3, #0
 8045cfa:	9300      	str	r3, [sp, #0]
 8045cfc:	2300      	movs	r3, #0
 8045cfe:	2203      	movs	r2, #3
 8045d00:	6878      	ldr	r0, [r7, #4]
 8045d02:	f7fd fe3d 	bl	8043980 <lr1110_hal_write>
 8045d06:	4603      	mov	r3, r0
}
 8045d08:	4618      	mov	r0, r3
 8045d0a:	3710      	adds	r7, #16
 8045d0c:	46bd      	mov	sp, r7
 8045d0e:	bd80      	pop	{r7, pc}

08045d10 <lr1110_radio_set_gfsk_mod_params>:

lr1110_status_t lr1110_radio_set_gfsk_mod_params( const void*                           context,
                                                  const lr1110_radio_mod_params_gfsk_t* mod_params )
{
 8045d10:	b580      	push	{r7, lr}
 8045d12:	b088      	sub	sp, #32
 8045d14:	af02      	add	r7, sp, #8
 8045d16:	6078      	str	r0, [r7, #4]
 8045d18:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_MODULATION_PARAMS_GFSK_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 8 );
 8045d1a:	2302      	movs	r3, #2
 8045d1c:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 0 );
 8045d1e:	230f      	movs	r3, #15
 8045d20:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t )( mod_params->br_in_bps >> 24 );
 8045d22:	683b      	ldr	r3, [r7, #0]
 8045d24:	681b      	ldr	r3, [r3, #0]
 8045d26:	0e1b      	lsrs	r3, r3, #24
 8045d28:	b2db      	uxtb	r3, r3
 8045d2a:	73bb      	strb	r3, [r7, #14]
    cbuffer[3] = ( uint8_t )( mod_params->br_in_bps >> 16 );
 8045d2c:	683b      	ldr	r3, [r7, #0]
 8045d2e:	681b      	ldr	r3, [r3, #0]
 8045d30:	0c1b      	lsrs	r3, r3, #16
 8045d32:	b2db      	uxtb	r3, r3
 8045d34:	73fb      	strb	r3, [r7, #15]
    cbuffer[4] = ( uint8_t )( mod_params->br_in_bps >> 8 );
 8045d36:	683b      	ldr	r3, [r7, #0]
 8045d38:	681b      	ldr	r3, [r3, #0]
 8045d3a:	0a1b      	lsrs	r3, r3, #8
 8045d3c:	b2db      	uxtb	r3, r3
 8045d3e:	743b      	strb	r3, [r7, #16]
    cbuffer[5] = ( uint8_t )( mod_params->br_in_bps >> 0 );
 8045d40:	683b      	ldr	r3, [r7, #0]
 8045d42:	681b      	ldr	r3, [r3, #0]
 8045d44:	b2db      	uxtb	r3, r3
 8045d46:	747b      	strb	r3, [r7, #17]

    cbuffer[6] = ( uint8_t ) mod_params->pulse_shape;
 8045d48:	683b      	ldr	r3, [r7, #0]
 8045d4a:	791b      	ldrb	r3, [r3, #4]
 8045d4c:	74bb      	strb	r3, [r7, #18]
    cbuffer[7] = ( uint8_t ) mod_params->bw_dsb_param;
 8045d4e:	683b      	ldr	r3, [r7, #0]
 8045d50:	795b      	ldrb	r3, [r3, #5]
 8045d52:	74fb      	strb	r3, [r7, #19]

    cbuffer[8]  = ( uint8_t )( mod_params->fdev_in_hz >> 24 );
 8045d54:	683b      	ldr	r3, [r7, #0]
 8045d56:	689b      	ldr	r3, [r3, #8]
 8045d58:	0e1b      	lsrs	r3, r3, #24
 8045d5a:	b2db      	uxtb	r3, r3
 8045d5c:	753b      	strb	r3, [r7, #20]
    cbuffer[9]  = ( uint8_t )( mod_params->fdev_in_hz >> 16 );
 8045d5e:	683b      	ldr	r3, [r7, #0]
 8045d60:	689b      	ldr	r3, [r3, #8]
 8045d62:	0c1b      	lsrs	r3, r3, #16
 8045d64:	b2db      	uxtb	r3, r3
 8045d66:	757b      	strb	r3, [r7, #21]
    cbuffer[10] = ( uint8_t )( mod_params->fdev_in_hz >> 8 );
 8045d68:	683b      	ldr	r3, [r7, #0]
 8045d6a:	689b      	ldr	r3, [r3, #8]
 8045d6c:	0a1b      	lsrs	r3, r3, #8
 8045d6e:	b2db      	uxtb	r3, r3
 8045d70:	75bb      	strb	r3, [r7, #22]
    cbuffer[11] = ( uint8_t )( mod_params->fdev_in_hz >> 0 );
 8045d72:	683b      	ldr	r3, [r7, #0]
 8045d74:	689b      	ldr	r3, [r3, #8]
 8045d76:	b2db      	uxtb	r3, r3
 8045d78:	75fb      	strb	r3, [r7, #23]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_GFSK_CMD_LENGTH,
 8045d7a:	f107 010c 	add.w	r1, r7, #12
 8045d7e:	2300      	movs	r3, #0
 8045d80:	9300      	str	r3, [sp, #0]
 8045d82:	2300      	movs	r3, #0
 8045d84:	220c      	movs	r2, #12
 8045d86:	6878      	ldr	r0, [r7, #4]
 8045d88:	f7fd fdfa 	bl	8043980 <lr1110_hal_write>
 8045d8c:	4603      	mov	r3, r0
                                                 0, 0 );
}
 8045d8e:	4618      	mov	r0, r3
 8045d90:	3718      	adds	r7, #24
 8045d92:	46bd      	mov	sp, r7
 8045d94:	bd80      	pop	{r7, pc}

08045d96 <lr1110_radio_set_lora_mod_params>:

lr1110_status_t lr1110_radio_set_lora_mod_params( const void*                           context,
                                                  const lr1110_radio_mod_params_lora_t* mod_params )
{
 8045d96:	b580      	push	{r7, lr}
 8045d98:	b086      	sub	sp, #24
 8045d9a:	af02      	add	r7, sp, #8
 8045d9c:	6078      	str	r0, [r7, #4]
 8045d9e:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 8 );
 8045da0:	2302      	movs	r3, #2
 8045da2:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_MODULATION_PARAM_OC >> 0 );
 8045da4:	230f      	movs	r3, #15
 8045da6:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t ) mod_params->sf;
 8045da8:	683b      	ldr	r3, [r7, #0]
 8045daa:	781b      	ldrb	r3, [r3, #0]
 8045dac:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t ) mod_params->bw;
 8045dae:	683b      	ldr	r3, [r7, #0]
 8045db0:	785b      	ldrb	r3, [r3, #1]
 8045db2:	72fb      	strb	r3, [r7, #11]
    cbuffer[4] = ( uint8_t ) mod_params->cr;
 8045db4:	683b      	ldr	r3, [r7, #0]
 8045db6:	789b      	ldrb	r3, [r3, #2]
 8045db8:	733b      	strb	r3, [r7, #12]
    cbuffer[5] = ( uint8_t ) mod_params->ldro;
 8045dba:	683b      	ldr	r3, [r7, #0]
 8045dbc:	78db      	ldrb	r3, [r3, #3]
 8045dbe:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_MODULATION_PARAMS_LORA_CMD_LENGTH,
 8045dc0:	f107 0108 	add.w	r1, r7, #8
 8045dc4:	2300      	movs	r3, #0
 8045dc6:	9300      	str	r3, [sp, #0]
 8045dc8:	2300      	movs	r3, #0
 8045dca:	2206      	movs	r2, #6
 8045dcc:	6878      	ldr	r0, [r7, #4]
 8045dce:	f7fd fdd7 	bl	8043980 <lr1110_hal_write>
 8045dd2:	4603      	mov	r3, r0
                                                 0, 0 );
}
 8045dd4:	4618      	mov	r0, r3
 8045dd6:	3710      	adds	r7, #16
 8045dd8:	46bd      	mov	sp, r7
 8045dda:	bd80      	pop	{r7, pc}

08045ddc <lr1110_radio_set_gfsk_pkt_params>:

lr1110_status_t lr1110_radio_set_gfsk_pkt_params( const void*                           context,
                                                  const lr1110_radio_pkt_params_gfsk_t* pkt_params )
{
 8045ddc:	b580      	push	{r7, lr}
 8045dde:	b088      	sub	sp, #32
 8045de0:	af02      	add	r7, sp, #8
 8045de2:	6078      	str	r0, [r7, #4]
 8045de4:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_PKT_PARAM_GFSK_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PKT_PARAM_OC >> 8 );
 8045de6:	2302      	movs	r3, #2
 8045de8:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PKT_PARAM_OC >> 0 );
 8045dea:	2310      	movs	r3, #16
 8045dec:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t )( pkt_params->preamble_len_in_bits >> 8 );
 8045dee:	683b      	ldr	r3, [r7, #0]
 8045df0:	881b      	ldrh	r3, [r3, #0]
 8045df2:	0a1b      	lsrs	r3, r3, #8
 8045df4:	b29b      	uxth	r3, r3
 8045df6:	b2db      	uxtb	r3, r3
 8045df8:	73bb      	strb	r3, [r7, #14]
    cbuffer[3] = ( uint8_t )( pkt_params->preamble_len_in_bits >> 0 );
 8045dfa:	683b      	ldr	r3, [r7, #0]
 8045dfc:	881b      	ldrh	r3, [r3, #0]
 8045dfe:	b2db      	uxtb	r3, r3
 8045e00:	73fb      	strb	r3, [r7, #15]

    cbuffer[4] = ( uint8_t )( pkt_params->preamble_detector );
 8045e02:	683b      	ldr	r3, [r7, #0]
 8045e04:	789b      	ldrb	r3, [r3, #2]
 8045e06:	743b      	strb	r3, [r7, #16]

    cbuffer[5] = pkt_params->sync_word_len_in_bits;
 8045e08:	683b      	ldr	r3, [r7, #0]
 8045e0a:	78db      	ldrb	r3, [r3, #3]
 8045e0c:	747b      	strb	r3, [r7, #17]

    cbuffer[6] = ( uint8_t )( pkt_params->address_filtering );
 8045e0e:	683b      	ldr	r3, [r7, #0]
 8045e10:	791b      	ldrb	r3, [r3, #4]
 8045e12:	74bb      	strb	r3, [r7, #18]

    cbuffer[7] = ( uint8_t )( pkt_params->header_type );
 8045e14:	683b      	ldr	r3, [r7, #0]
 8045e16:	795b      	ldrb	r3, [r3, #5]
 8045e18:	74fb      	strb	r3, [r7, #19]

    cbuffer[8] = pkt_params->pld_len_in_bytes;
 8045e1a:	683b      	ldr	r3, [r7, #0]
 8045e1c:	799b      	ldrb	r3, [r3, #6]
 8045e1e:	753b      	strb	r3, [r7, #20]

    cbuffer[9] = ( uint8_t )( pkt_params->crc_type );
 8045e20:	683b      	ldr	r3, [r7, #0]
 8045e22:	79db      	ldrb	r3, [r3, #7]
 8045e24:	757b      	strb	r3, [r7, #21]

    cbuffer[10] = ( uint8_t )( pkt_params->dc_free );
 8045e26:	683b      	ldr	r3, [r7, #0]
 8045e28:	7a1b      	ldrb	r3, [r3, #8]
 8045e2a:	75bb      	strb	r3, [r7, #22]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_PKT_PARAM_GFSK_CMD_LENGTH, 0, 0 );
 8045e2c:	f107 010c 	add.w	r1, r7, #12
 8045e30:	2300      	movs	r3, #0
 8045e32:	9300      	str	r3, [sp, #0]
 8045e34:	2300      	movs	r3, #0
 8045e36:	220b      	movs	r2, #11
 8045e38:	6878      	ldr	r0, [r7, #4]
 8045e3a:	f7fd fda1 	bl	8043980 <lr1110_hal_write>
 8045e3e:	4603      	mov	r3, r0
}
 8045e40:	4618      	mov	r0, r3
 8045e42:	3718      	adds	r7, #24
 8045e44:	46bd      	mov	sp, r7
 8045e46:	bd80      	pop	{r7, pc}

08045e48 <lr1110_radio_set_lora_pkt_params>:

lr1110_status_t lr1110_radio_set_lora_pkt_params( const void*                           context,
                                                  const lr1110_radio_pkt_params_lora_t* pkt_params )
{
 8045e48:	b580      	push	{r7, lr}
 8045e4a:	b086      	sub	sp, #24
 8045e4c:	af02      	add	r7, sp, #8
 8045e4e:	6078      	str	r0, [r7, #4]
 8045e50:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_PKT_PARAM_LORA_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PKT_PARAM_OC >> 8 );
 8045e52:	2302      	movs	r3, #2
 8045e54:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PKT_PARAM_OC >> 0 );
 8045e56:	2310      	movs	r3, #16
 8045e58:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t )( pkt_params->preamble_len_in_symb >> 8 );
 8045e5a:	683b      	ldr	r3, [r7, #0]
 8045e5c:	881b      	ldrh	r3, [r3, #0]
 8045e5e:	0a1b      	lsrs	r3, r3, #8
 8045e60:	b29b      	uxth	r3, r3
 8045e62:	b2db      	uxtb	r3, r3
 8045e64:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t )( pkt_params->preamble_len_in_symb >> 0 );
 8045e66:	683b      	ldr	r3, [r7, #0]
 8045e68:	881b      	ldrh	r3, [r3, #0]
 8045e6a:	b2db      	uxtb	r3, r3
 8045e6c:	72fb      	strb	r3, [r7, #11]

    cbuffer[4] = ( uint8_t )( pkt_params->header_type );
 8045e6e:	683b      	ldr	r3, [r7, #0]
 8045e70:	789b      	ldrb	r3, [r3, #2]
 8045e72:	733b      	strb	r3, [r7, #12]

    cbuffer[5] = pkt_params->pld_len_in_bytes;
 8045e74:	683b      	ldr	r3, [r7, #0]
 8045e76:	78db      	ldrb	r3, [r3, #3]
 8045e78:	737b      	strb	r3, [r7, #13]

    cbuffer[6] = ( uint8_t )( pkt_params->crc );
 8045e7a:	683b      	ldr	r3, [r7, #0]
 8045e7c:	791b      	ldrb	r3, [r3, #4]
 8045e7e:	73bb      	strb	r3, [r7, #14]

    cbuffer[7] = ( uint8_t )( pkt_params->iq );
 8045e80:	683b      	ldr	r3, [r7, #0]
 8045e82:	795b      	ldrb	r3, [r3, #5]
 8045e84:	73fb      	strb	r3, [r7, #15]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_PKT_PARAM_LORA_CMD_LENGTH, 0, 0 );
 8045e86:	f107 0108 	add.w	r1, r7, #8
 8045e8a:	2300      	movs	r3, #0
 8045e8c:	9300      	str	r3, [sp, #0]
 8045e8e:	2300      	movs	r3, #0
 8045e90:	2208      	movs	r2, #8
 8045e92:	6878      	ldr	r0, [r7, #4]
 8045e94:	f7fd fd74 	bl	8043980 <lr1110_hal_write>
 8045e98:	4603      	mov	r3, r0
}
 8045e9a:	4618      	mov	r0, r3
 8045e9c:	3710      	adds	r7, #16
 8045e9e:	46bd      	mov	sp, r7
 8045ea0:	bd80      	pop	{r7, pc}

08045ea2 <lr1110_radio_set_tx_params>:

lr1110_status_t lr1110_radio_set_tx_params( const void* context, const int8_t pwr_in_dbm,
                                            const lr1110_radio_ramp_time_t ramp_time )
{
 8045ea2:	b580      	push	{r7, lr}
 8045ea4:	b086      	sub	sp, #24
 8045ea6:	af02      	add	r7, sp, #8
 8045ea8:	6078      	str	r0, [r7, #4]
 8045eaa:	460b      	mov	r3, r1
 8045eac:	70fb      	strb	r3, [r7, #3]
 8045eae:	4613      	mov	r3, r2
 8045eb0:	70bb      	strb	r3, [r7, #2]
    uint8_t cbuffer[LR1110_RADIO_SET_TX_PARAMS_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_PARAMS_OC >> 8 );
 8045eb2:	2302      	movs	r3, #2
 8045eb4:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_TX_PARAMS_OC >> 0 );
 8045eb6:	2311      	movs	r3, #17
 8045eb8:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t ) pwr_in_dbm;
 8045eba:	78fb      	ldrb	r3, [r7, #3]
 8045ebc:	73bb      	strb	r3, [r7, #14]
    cbuffer[3] = ( uint8_t ) ramp_time;
 8045ebe:	78bb      	ldrb	r3, [r7, #2]
 8045ec0:	73fb      	strb	r3, [r7, #15]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_TX_PARAMS_CMD_LENGTH, 0, 0 );
 8045ec2:	f107 010c 	add.w	r1, r7, #12
 8045ec6:	2300      	movs	r3, #0
 8045ec8:	9300      	str	r3, [sp, #0]
 8045eca:	2300      	movs	r3, #0
 8045ecc:	2204      	movs	r2, #4
 8045ece:	6878      	ldr	r0, [r7, #4]
 8045ed0:	f7fd fd56 	bl	8043980 <lr1110_hal_write>
 8045ed4:	4603      	mov	r3, r0
}
 8045ed6:	4618      	mov	r0, r3
 8045ed8:	3710      	adds	r7, #16
 8045eda:	46bd      	mov	sp, r7
 8045edc:	bd80      	pop	{r7, pc}

08045ede <lr1110_radio_set_rx_duty_cycle>:
}

lr1110_status_t lr1110_radio_set_rx_duty_cycle( const void* context, const uint32_t rx_period_in_ms,
                                                const uint32_t                          sleep_period_in_ms,
                                                const lr1110_radio_rx_duty_cycle_mode_t mode )
{
 8045ede:	b580      	push	{r7, lr}
 8045ee0:	b086      	sub	sp, #24
 8045ee2:	af00      	add	r7, sp, #0
 8045ee4:	60f8      	str	r0, [r7, #12]
 8045ee6:	60b9      	str	r1, [r7, #8]
 8045ee8:	607a      	str	r2, [r7, #4]
 8045eea:	70fb      	strb	r3, [r7, #3]
    const uint32_t rx_period_in_rtc_step    = lr1110_radio_convert_time_in_ms_to_rtc_step( rx_period_in_ms );
 8045eec:	68b8      	ldr	r0, [r7, #8]
 8045eee:	f000 f935 	bl	804615c <lr1110_radio_convert_time_in_ms_to_rtc_step>
 8045ef2:	6178      	str	r0, [r7, #20]
    const uint32_t sleep_period_in_rtc_step = lr1110_radio_convert_time_in_ms_to_rtc_step( sleep_period_in_ms );
 8045ef4:	6878      	ldr	r0, [r7, #4]
 8045ef6:	f000 f931 	bl	804615c <lr1110_radio_convert_time_in_ms_to_rtc_step>
 8045efa:	6138      	str	r0, [r7, #16]

    return lr1110_radio_set_rx_duty_cycle_with_timings_in_rtc_step( context, rx_period_in_rtc_step,
 8045efc:	78fb      	ldrb	r3, [r7, #3]
 8045efe:	693a      	ldr	r2, [r7, #16]
 8045f00:	6979      	ldr	r1, [r7, #20]
 8045f02:	68f8      	ldr	r0, [r7, #12]
 8045f04:	f000 f805 	bl	8045f12 <lr1110_radio_set_rx_duty_cycle_with_timings_in_rtc_step>
 8045f08:	4603      	mov	r3, r0
                                                                    sleep_period_in_rtc_step, mode );
}
 8045f0a:	4618      	mov	r0, r3
 8045f0c:	3718      	adds	r7, #24
 8045f0e:	46bd      	mov	sp, r7
 8045f10:	bd80      	pop	{r7, pc}

08045f12 <lr1110_radio_set_rx_duty_cycle_with_timings_in_rtc_step>:

lr1110_status_t lr1110_radio_set_rx_duty_cycle_with_timings_in_rtc_step( const void*    context,
                                                                         const uint32_t rx_period_in_rtc_step,
                                                                         const uint32_t sleep_period_in_rtc_step,
                                                                         const lr1110_radio_rx_duty_cycle_mode_t mode )
{
 8045f12:	b580      	push	{r7, lr}
 8045f14:	b08a      	sub	sp, #40	; 0x28
 8045f16:	af02      	add	r7, sp, #8
 8045f18:	60f8      	str	r0, [r7, #12]
 8045f1a:	60b9      	str	r1, [r7, #8]
 8045f1c:	607a      	str	r2, [r7, #4]
 8045f1e:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_RADIO_SET_RX_DUTY_CYCLE_MODE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_DUTY_CYCLE_OC >> 8 );
 8045f20:	2302      	movs	r3, #2
 8045f22:	753b      	strb	r3, [r7, #20]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_RX_DUTY_CYCLE_OC >> 0 );
 8045f24:	2314      	movs	r3, #20
 8045f26:	757b      	strb	r3, [r7, #21]

    cbuffer[2] = ( uint8_t )( rx_period_in_rtc_step >> 16 );
 8045f28:	68bb      	ldr	r3, [r7, #8]
 8045f2a:	0c1b      	lsrs	r3, r3, #16
 8045f2c:	b2db      	uxtb	r3, r3
 8045f2e:	75bb      	strb	r3, [r7, #22]
    cbuffer[3] = ( uint8_t )( rx_period_in_rtc_step >> 8 );
 8045f30:	68bb      	ldr	r3, [r7, #8]
 8045f32:	0a1b      	lsrs	r3, r3, #8
 8045f34:	b2db      	uxtb	r3, r3
 8045f36:	75fb      	strb	r3, [r7, #23]
    cbuffer[4] = ( uint8_t )( rx_period_in_rtc_step >> 0 );
 8045f38:	68bb      	ldr	r3, [r7, #8]
 8045f3a:	b2db      	uxtb	r3, r3
 8045f3c:	763b      	strb	r3, [r7, #24]

    cbuffer[5] = ( uint8_t )( sleep_period_in_rtc_step >> 16 );
 8045f3e:	687b      	ldr	r3, [r7, #4]
 8045f40:	0c1b      	lsrs	r3, r3, #16
 8045f42:	b2db      	uxtb	r3, r3
 8045f44:	767b      	strb	r3, [r7, #25]
    cbuffer[6] = ( uint8_t )( sleep_period_in_rtc_step >> 8 );
 8045f46:	687b      	ldr	r3, [r7, #4]
 8045f48:	0a1b      	lsrs	r3, r3, #8
 8045f4a:	b2db      	uxtb	r3, r3
 8045f4c:	76bb      	strb	r3, [r7, #26]
    cbuffer[7] = ( uint8_t )( sleep_period_in_rtc_step >> 0 );
 8045f4e:	687b      	ldr	r3, [r7, #4]
 8045f50:	b2db      	uxtb	r3, r3
 8045f52:	76fb      	strb	r3, [r7, #27]

    cbuffer[8] = mode;
 8045f54:	78fb      	ldrb	r3, [r7, #3]
 8045f56:	773b      	strb	r3, [r7, #28]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_RX_DUTY_CYCLE_MODE_CMD_LENGTH, 0,
 8045f58:	f107 0114 	add.w	r1, r7, #20
 8045f5c:	2300      	movs	r3, #0
 8045f5e:	9300      	str	r3, [sp, #0]
 8045f60:	2300      	movs	r3, #0
 8045f62:	2209      	movs	r2, #9
 8045f64:	68f8      	ldr	r0, [r7, #12]
 8045f66:	f7fd fd0b 	bl	8043980 <lr1110_hal_write>
 8045f6a:	4603      	mov	r3, r0
                                                 0 );
}
 8045f6c:	4618      	mov	r0, r3
 8045f6e:	3720      	adds	r7, #32
 8045f70:	46bd      	mov	sp, r7
 8045f72:	bd80      	pop	{r7, pc}

08045f74 <lr1110_radio_set_pa_cfg>:

lr1110_status_t lr1110_radio_set_pa_cfg( const void* context, const lr1110_radio_pa_cfg_t* pa_cfg )
{
 8045f74:	b580      	push	{r7, lr}
 8045f76:	b086      	sub	sp, #24
 8045f78:	af02      	add	r7, sp, #8
 8045f7a:	6078      	str	r0, [r7, #4]
 8045f7c:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_RADIO_SET_PA_CFG_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_PA_CFG_OC >> 8 );
 8045f7e:	2302      	movs	r3, #2
 8045f80:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_PA_CFG_OC >> 0 );
 8045f82:	2315      	movs	r3, #21
 8045f84:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t ) pa_cfg->pa_sel;
 8045f86:	683b      	ldr	r3, [r7, #0]
 8045f88:	781b      	ldrb	r3, [r3, #0]
 8045f8a:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t ) pa_cfg->pa_reg_supply;
 8045f8c:	683b      	ldr	r3, [r7, #0]
 8045f8e:	785b      	ldrb	r3, [r3, #1]
 8045f90:	72fb      	strb	r3, [r7, #11]

    cbuffer[4] = pa_cfg->pa_duty_cycle;
 8045f92:	683b      	ldr	r3, [r7, #0]
 8045f94:	789b      	ldrb	r3, [r3, #2]
 8045f96:	733b      	strb	r3, [r7, #12]
    cbuffer[5] = pa_cfg->pa_hp_sel;
 8045f98:	683b      	ldr	r3, [r7, #0]
 8045f9a:	78db      	ldrb	r3, [r3, #3]
 8045f9c:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_PA_CFG_CMD_LENGTH, 0, 0 );
 8045f9e:	f107 0108 	add.w	r1, r7, #8
 8045fa2:	2300      	movs	r3, #0
 8045fa4:	9300      	str	r3, [sp, #0]
 8045fa6:	2300      	movs	r3, #0
 8045fa8:	2206      	movs	r2, #6
 8045faa:	6878      	ldr	r0, [r7, #4]
 8045fac:	f7fd fce8 	bl	8043980 <lr1110_hal_write>
 8045fb0:	4603      	mov	r3, r0
}
 8045fb2:	4618      	mov	r0, r3
 8045fb4:	3710      	adds	r7, #16
 8045fb6:	46bd      	mov	sp, r7
 8045fb8:	bd80      	pop	{r7, pc}

08045fba <lr1110_radio_stop_timeout_on_preamble>:

lr1110_status_t lr1110_radio_stop_timeout_on_preamble( const void* context, const bool stop_timeout_on_preamble )
{
 8045fba:	b580      	push	{r7, lr}
 8045fbc:	b086      	sub	sp, #24
 8045fbe:	af02      	add	r7, sp, #8
 8045fc0:	6078      	str	r0, [r7, #4]
 8045fc2:	460b      	mov	r3, r1
 8045fc4:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_OC >> 8 );
 8045fc6:	2302      	movs	r3, #2
 8045fc8:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_OC >> 0 );
 8045fca:	2317      	movs	r3, #23
 8045fcc:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t ) stop_timeout_on_preamble;
 8045fce:	78fb      	ldrb	r3, [r7, #3]
 8045fd0:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_STOP_TIMEOUT_ON_PREAMBLE_CMD_LENGTH, 0,
 8045fd2:	f107 010c 	add.w	r1, r7, #12
 8045fd6:	2300      	movs	r3, #0
 8045fd8:	9300      	str	r3, [sp, #0]
 8045fda:	2300      	movs	r3, #0
 8045fdc:	2203      	movs	r2, #3
 8045fde:	6878      	ldr	r0, [r7, #4]
 8045fe0:	f7fd fcce 	bl	8043980 <lr1110_hal_write>
 8045fe4:	4603      	mov	r3, r0
                                                 0 );
}
 8045fe6:	4618      	mov	r0, r3
 8045fe8:	3710      	adds	r7, #16
 8045fea:	46bd      	mov	sp, r7
 8045fec:	bd80      	pop	{r7, pc}

08045fee <lr1110_radio_set_cad>:

lr1110_status_t lr1110_radio_set_cad( const void* context )
{
 8045fee:	b580      	push	{r7, lr}
 8045ff0:	b086      	sub	sp, #24
 8045ff2:	af02      	add	r7, sp, #8
 8045ff4:	6078      	str	r0, [r7, #4]
    uint8_t cbuffer[LR1110_RADIO_SET_CAD_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_CAD_OC >> 8 );
 8045ff6:	2302      	movs	r3, #2
 8045ff8:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_CAD_OC >> 0 );
 8045ffa:	2318      	movs	r3, #24
 8045ffc:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_CAD_CMD_LENGTH, 0, 0 );
 8045ffe:	f107 010c 	add.w	r1, r7, #12
 8046002:	2300      	movs	r3, #0
 8046004:	9300      	str	r3, [sp, #0]
 8046006:	2300      	movs	r3, #0
 8046008:	2202      	movs	r2, #2
 804600a:	6878      	ldr	r0, [r7, #4]
 804600c:	f7fd fcb8 	bl	8043980 <lr1110_hal_write>
 8046010:	4603      	mov	r3, r0
}
 8046012:	4618      	mov	r0, r3
 8046014:	3710      	adds	r7, #16
 8046016:	46bd      	mov	sp, r7
 8046018:	bd80      	pop	{r7, pc}

0804601a <lr1110_radio_set_tx_cw>:

lr1110_status_t lr1110_radio_set_tx_cw( const void* context )
{
 804601a:	b580      	push	{r7, lr}
 804601c:	b086      	sub	sp, #24
 804601e:	af02      	add	r7, sp, #8
 8046020:	6078      	str	r0, [r7, #4]
    uint8_t cbuffer[LR1110_RADIO_SET_TX_CW_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_TX_CW_OC >> 8 );
 8046022:	2302      	movs	r3, #2
 8046024:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_TX_CW_OC >> 0 );
 8046026:	2319      	movs	r3, #25
 8046028:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_TX_CW_CMD_LENGTH, 0, 0 );
 804602a:	f107 010c 	add.w	r1, r7, #12
 804602e:	2300      	movs	r3, #0
 8046030:	9300      	str	r3, [sp, #0]
 8046032:	2300      	movs	r3, #0
 8046034:	2202      	movs	r2, #2
 8046036:	6878      	ldr	r0, [r7, #4]
 8046038:	f7fd fca2 	bl	8043980 <lr1110_hal_write>
 804603c:	4603      	mov	r3, r0
}
 804603e:	4618      	mov	r0, r3
 8046040:	3710      	adds	r7, #16
 8046042:	46bd      	mov	sp, r7
 8046044:	bd80      	pop	{r7, pc}

08046046 <lr1110_radio_set_lora_sync_timeout>:
    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_TX_INFINITE_PREAMBLE_CMD_LENGTH, 0,
                                                 0 );
}

lr1110_status_t lr1110_radio_set_lora_sync_timeout( const void* context, const uint8_t nb_symbol )
{
 8046046:	b580      	push	{r7, lr}
 8046048:	b086      	sub	sp, #24
 804604a:	af02      	add	r7, sp, #8
 804604c:	6078      	str	r0, [r7, #4]
 804604e:	460b      	mov	r3, r1
 8046050:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_OC >> 8 );
 8046052:	2302      	movs	r3, #2
 8046054:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_OC >> 0 );
 8046056:	231b      	movs	r3, #27
 8046058:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = nb_symbol;
 804605a:	78fb      	ldrb	r3, [r7, #3]
 804605c:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_LORA_SYNC_TIMEOUT_CMD_LENGTH, 0,
 804605e:	f107 010c 	add.w	r1, r7, #12
 8046062:	2300      	movs	r3, #0
 8046064:	9300      	str	r3, [sp, #0]
 8046066:	2300      	movs	r3, #0
 8046068:	2203      	movs	r2, #3
 804606a:	6878      	ldr	r0, [r7, #4]
 804606c:	f7fd fc88 	bl	8043980 <lr1110_hal_write>
 8046070:	4603      	mov	r3, r0
                                                 0 );
}
 8046072:	4618      	mov	r0, r3
 8046074:	3710      	adds	r7, #16
 8046076:	46bd      	mov	sp, r7
 8046078:	bd80      	pop	{r7, pc}

0804607a <lr1110_radio_set_gfsk_crc_params>:

lr1110_status_t lr1110_radio_set_gfsk_crc_params( const void* context, const uint32_t seed, const uint32_t polynomial )
{
 804607a:	b580      	push	{r7, lr}
 804607c:	b08a      	sub	sp, #40	; 0x28
 804607e:	af02      	add	r7, sp, #8
 8046080:	60f8      	str	r0, [r7, #12]
 8046082:	60b9      	str	r1, [r7, #8]
 8046084:	607a      	str	r2, [r7, #4]
    uint8_t cbuffer[LR1110_RADIO_SET_GFSK_CRC_PARAMS_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_CRC_PARAMS_OC >> 8 );
 8046086:	2302      	movs	r3, #2
 8046088:	753b      	strb	r3, [r7, #20]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_GFSK_CRC_PARAMS_OC >> 0 );
 804608a:	2324      	movs	r3, #36	; 0x24
 804608c:	757b      	strb	r3, [r7, #21]

    cbuffer[2] = ( uint8_t )( seed >> 24 );
 804608e:	68bb      	ldr	r3, [r7, #8]
 8046090:	0e1b      	lsrs	r3, r3, #24
 8046092:	b2db      	uxtb	r3, r3
 8046094:	75bb      	strb	r3, [r7, #22]
    cbuffer[3] = ( uint8_t )( seed >> 16 );
 8046096:	68bb      	ldr	r3, [r7, #8]
 8046098:	0c1b      	lsrs	r3, r3, #16
 804609a:	b2db      	uxtb	r3, r3
 804609c:	75fb      	strb	r3, [r7, #23]
    cbuffer[4] = ( uint8_t )( seed >> 8 );
 804609e:	68bb      	ldr	r3, [r7, #8]
 80460a0:	0a1b      	lsrs	r3, r3, #8
 80460a2:	b2db      	uxtb	r3, r3
 80460a4:	763b      	strb	r3, [r7, #24]
    cbuffer[5] = ( uint8_t )( seed >> 0 );
 80460a6:	68bb      	ldr	r3, [r7, #8]
 80460a8:	b2db      	uxtb	r3, r3
 80460aa:	767b      	strb	r3, [r7, #25]

    cbuffer[6] = ( uint8_t )( polynomial >> 24 );
 80460ac:	687b      	ldr	r3, [r7, #4]
 80460ae:	0e1b      	lsrs	r3, r3, #24
 80460b0:	b2db      	uxtb	r3, r3
 80460b2:	76bb      	strb	r3, [r7, #26]
    cbuffer[7] = ( uint8_t )( polynomial >> 16 );
 80460b4:	687b      	ldr	r3, [r7, #4]
 80460b6:	0c1b      	lsrs	r3, r3, #16
 80460b8:	b2db      	uxtb	r3, r3
 80460ba:	76fb      	strb	r3, [r7, #27]
    cbuffer[8] = ( uint8_t )( polynomial >> 8 );
 80460bc:	687b      	ldr	r3, [r7, #4]
 80460be:	0a1b      	lsrs	r3, r3, #8
 80460c0:	b2db      	uxtb	r3, r3
 80460c2:	773b      	strb	r3, [r7, #28]
    cbuffer[9] = ( uint8_t )( polynomial >> 0 );
 80460c4:	687b      	ldr	r3, [r7, #4]
 80460c6:	b2db      	uxtb	r3, r3
 80460c8:	777b      	strb	r3, [r7, #29]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_GFSK_CRC_PARAMS_CMD_LENGTH, 0, 0 );
 80460ca:	f107 0114 	add.w	r1, r7, #20
 80460ce:	2300      	movs	r3, #0
 80460d0:	9300      	str	r3, [sp, #0]
 80460d2:	2300      	movs	r3, #0
 80460d4:	220a      	movs	r2, #10
 80460d6:	68f8      	ldr	r0, [r7, #12]
 80460d8:	f7fd fc52 	bl	8043980 <lr1110_hal_write>
 80460dc:	4603      	mov	r3, r0
}
 80460de:	4618      	mov	r0, r3
 80460e0:	3720      	adds	r7, #32
 80460e2:	46bd      	mov	sp, r7
 80460e4:	bd80      	pop	{r7, pc}

080460e6 <lr1110_radio_set_gfsk_whitening_seed>:

lr1110_status_t lr1110_radio_set_gfsk_whitening_seed( const void* context, const uint16_t seed )
{
 80460e6:	b580      	push	{r7, lr}
 80460e8:	b086      	sub	sp, #24
 80460ea:	af02      	add	r7, sp, #8
 80460ec:	6078      	str	r0, [r7, #4]
 80460ee:	460b      	mov	r3, r1
 80460f0:	807b      	strh	r3, [r7, #2]
    uint8_t cbuffer[LR1110_RADIO_SET_GFSK_WHITENING_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_GFSK_WHITENING_PARAMS_OC >> 8 );
 80460f2:	2302      	movs	r3, #2
 80460f4:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_GFSK_WHITENING_PARAMS_OC >> 0 );
 80460f6:	2325      	movs	r3, #37	; 0x25
 80460f8:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t )( seed >> 8 );
 80460fa:	887b      	ldrh	r3, [r7, #2]
 80460fc:	0a1b      	lsrs	r3, r3, #8
 80460fe:	b29b      	uxth	r3, r3
 8046100:	b2db      	uxtb	r3, r3
 8046102:	73bb      	strb	r3, [r7, #14]
    cbuffer[3] = ( uint8_t )( seed >> 0 );
 8046104:	887b      	ldrh	r3, [r7, #2]
 8046106:	b2db      	uxtb	r3, r3
 8046108:	73fb      	strb	r3, [r7, #15]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_GFSK_WHITENING_CMD_LENGTH, 0, 0 );
 804610a:	f107 010c 	add.w	r1, r7, #12
 804610e:	2300      	movs	r3, #0
 8046110:	9300      	str	r3, [sp, #0]
 8046112:	2300      	movs	r3, #0
 8046114:	2204      	movs	r2, #4
 8046116:	6878      	ldr	r0, [r7, #4]
 8046118:	f7fd fc32 	bl	8043980 <lr1110_hal_write>
 804611c:	4603      	mov	r3, r0
}
 804611e:	4618      	mov	r0, r3
 8046120:	3710      	adds	r7, #16
 8046122:	46bd      	mov	sp, r7
 8046124:	bd80      	pop	{r7, pc}

08046126 <lr1110_radio_cfg_rx_boosted>:

lr1110_status_t lr1110_radio_cfg_rx_boosted( const void* context, const bool enable_boost_mode )
{
 8046126:	b580      	push	{r7, lr}
 8046128:	b086      	sub	sp, #24
 804612a:	af02      	add	r7, sp, #8
 804612c:	6078      	str	r0, [r7, #4]
 804612e:	460b      	mov	r3, r1
 8046130:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_RADIO_SET_RX_BOOSTED_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_RADIO_SET_RX_BOOSTED_OC >> 8 );
 8046132:	2302      	movs	r3, #2
 8046134:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_RADIO_SET_RX_BOOSTED_OC >> 0 );
 8046136:	2327      	movs	r3, #39	; 0x27
 8046138:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( enable_boost_mode == true ) ? 0x01 : 0x00;
 804613a:	78fb      	ldrb	r3, [r7, #3]
 804613c:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_RADIO_SET_RX_BOOSTED_LENGTH, 0, 0 );
 804613e:	f107 010c 	add.w	r1, r7, #12
 8046142:	2300      	movs	r3, #0
 8046144:	9300      	str	r3, [sp, #0]
 8046146:	2300      	movs	r3, #0
 8046148:	2203      	movs	r2, #3
 804614a:	6878      	ldr	r0, [r7, #4]
 804614c:	f7fd fc18 	bl	8043980 <lr1110_hal_write>
 8046150:	4603      	mov	r3, r0
}
 8046152:	4618      	mov	r0, r3
 8046154:	3710      	adds	r7, #16
 8046156:	46bd      	mov	sp, r7
 8046158:	bd80      	pop	{r7, pc}
	...

0804615c <lr1110_radio_convert_time_in_ms_to_rtc_step>:
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
}

uint32_t lr1110_radio_convert_time_in_ms_to_rtc_step( uint32_t time_in_ms )
{
 804615c:	b480      	push	{r7}
 804615e:	b083      	sub	sp, #12
 8046160:	af00      	add	r7, sp, #0
 8046162:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( time_in_ms * LR1110_RTC_FREQ_IN_HZ / 1000 );
 8046164:	687b      	ldr	r3, [r7, #4]
 8046166:	03db      	lsls	r3, r3, #15
 8046168:	4a04      	ldr	r2, [pc, #16]	; (804617c <lr1110_radio_convert_time_in_ms_to_rtc_step+0x20>)
 804616a:	fba2 2303 	umull	r2, r3, r2, r3
 804616e:	099b      	lsrs	r3, r3, #6
}
 8046170:	4618      	mov	r0, r3
 8046172:	370c      	adds	r7, #12
 8046174:	46bd      	mov	sp, r7
 8046176:	f85d 7b04 	ldr.w	r7, [sp], #4
 804617a:	4770      	bx	lr
 804617c:	10624dd3 	.word	0x10624dd3

08046180 <lr1110_regmem_write_mem8>:
    return status;
}

lr1110_status_t lr1110_regmem_write_mem8( const void* context, const uint32_t address, const uint8_t* buffer,
                                          const uint8_t length )
{
 8046180:	b580      	push	{r7, lr}
 8046182:	b088      	sub	sp, #32
 8046184:	af02      	add	r7, sp, #8
 8046186:	60f8      	str	r0, [r7, #12]
 8046188:	60b9      	str	r1, [r7, #8]
 804618a:	607a      	str	r2, [r7, #4]
 804618c:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_REGMEM_WRITE_MEM8_CMD_LENGTH];

    lr1110_regmem_fill_cbuffer_opcode_address( cbuffer, LR1110_REGMEM_WRITE_MEM8_OC, address );
 804618e:	f107 0310 	add.w	r3, r7, #16
 8046192:	68ba      	ldr	r2, [r7, #8]
 8046194:	f240 1107 	movw	r1, #263	; 0x107
 8046198:	4618      	mov	r0, r3
 804619a:	f000 f869 	bl	8046270 <lr1110_regmem_fill_cbuffer_opcode_address>

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_REGMEM_WRITE_MEM8_CMD_LENGTH, buffer,
 804619e:	78fb      	ldrb	r3, [r7, #3]
 80461a0:	b29b      	uxth	r3, r3
 80461a2:	f107 0110 	add.w	r1, r7, #16
 80461a6:	9300      	str	r3, [sp, #0]
 80461a8:	687b      	ldr	r3, [r7, #4]
 80461aa:	2206      	movs	r2, #6
 80461ac:	68f8      	ldr	r0, [r7, #12]
 80461ae:	f7fd fbe7 	bl	8043980 <lr1110_hal_write>
 80461b2:	4603      	mov	r3, r0
                                                 length );
}
 80461b4:	4618      	mov	r0, r3
 80461b6:	3718      	adds	r7, #24
 80461b8:	46bd      	mov	sp, r7
 80461ba:	bd80      	pop	{r7, pc}

080461bc <lr1110_regmem_read_mem8>:

lr1110_status_t lr1110_regmem_read_mem8( const void* context, const uint32_t address, uint8_t* buffer,
                                         const uint8_t length )
{
 80461bc:	b580      	push	{r7, lr}
 80461be:	b088      	sub	sp, #32
 80461c0:	af02      	add	r7, sp, #8
 80461c2:	60f8      	str	r0, [r7, #12]
 80461c4:	60b9      	str	r1, [r7, #8]
 80461c6:	607a      	str	r2, [r7, #4]
 80461c8:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_REGMEM_READ_MEM8_CMD_LENGTH];

    lr1110_regmem_fill_cbuffer_opcode_address_length( cbuffer, LR1110_REGMEM_READ_MEM8_OC, address, length );
 80461ca:	78fb      	ldrb	r3, [r7, #3]
 80461cc:	f107 0010 	add.w	r0, r7, #16
 80461d0:	68ba      	ldr	r2, [r7, #8]
 80461d2:	f44f 7184 	mov.w	r1, #264	; 0x108
 80461d6:	f000 f87a 	bl	80462ce <lr1110_regmem_fill_cbuffer_opcode_address_length>

    return ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_REGMEM_READ_MEM8_CMD_LENGTH, buffer, length );
 80461da:	78fb      	ldrb	r3, [r7, #3]
 80461dc:	b29b      	uxth	r3, r3
 80461de:	f107 0110 	add.w	r1, r7, #16
 80461e2:	9300      	str	r3, [sp, #0]
 80461e4:	687b      	ldr	r3, [r7, #4]
 80461e6:	2207      	movs	r2, #7
 80461e8:	68f8      	ldr	r0, [r7, #12]
 80461ea:	f7fd fc24 	bl	8043a36 <lr1110_hal_read>
 80461ee:	4603      	mov	r3, r0
}
 80461f0:	4618      	mov	r0, r3
 80461f2:	3718      	adds	r7, #24
 80461f4:	46bd      	mov	sp, r7
 80461f6:	bd80      	pop	{r7, pc}

080461f8 <lr1110_regmem_write_buffer8>:

lr1110_status_t lr1110_regmem_write_buffer8( const void* context, const uint8_t* buffer, const uint8_t length )
{
 80461f8:	b580      	push	{r7, lr}
 80461fa:	b088      	sub	sp, #32
 80461fc:	af02      	add	r7, sp, #8
 80461fe:	60f8      	str	r0, [r7, #12]
 8046200:	60b9      	str	r1, [r7, #8]
 8046202:	4613      	mov	r3, r2
 8046204:	71fb      	strb	r3, [r7, #7]
    uint8_t cbuffer[LR1110_REGMEM_WRITE_BUFFER8_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_WRITE_BUFFER8_OC >> 8 );
 8046206:	2301      	movs	r3, #1
 8046208:	753b      	strb	r3, [r7, #20]
    cbuffer[1] = ( uint8_t )( LR1110_REGMEM_WRITE_BUFFER8_OC >> 0 );
 804620a:	2309      	movs	r3, #9
 804620c:	757b      	strb	r3, [r7, #21]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_REGMEM_WRITE_BUFFER8_CMD_LENGTH, buffer,
 804620e:	79fb      	ldrb	r3, [r7, #7]
 8046210:	b29b      	uxth	r3, r3
 8046212:	f107 0114 	add.w	r1, r7, #20
 8046216:	9300      	str	r3, [sp, #0]
 8046218:	68bb      	ldr	r3, [r7, #8]
 804621a:	2202      	movs	r2, #2
 804621c:	68f8      	ldr	r0, [r7, #12]
 804621e:	f7fd fbaf 	bl	8043980 <lr1110_hal_write>
 8046222:	4603      	mov	r3, r0
                                                 length );
}
 8046224:	4618      	mov	r0, r3
 8046226:	3718      	adds	r7, #24
 8046228:	46bd      	mov	sp, r7
 804622a:	bd80      	pop	{r7, pc}

0804622c <lr1110_regmem_read_buffer8>:

lr1110_status_t lr1110_regmem_read_buffer8( const void* context, uint8_t* buffer, const uint8_t offset,
                                            const uint8_t length )
{
 804622c:	b580      	push	{r7, lr}
 804622e:	b088      	sub	sp, #32
 8046230:	af02      	add	r7, sp, #8
 8046232:	60f8      	str	r0, [r7, #12]
 8046234:	60b9      	str	r1, [r7, #8]
 8046236:	4611      	mov	r1, r2
 8046238:	461a      	mov	r2, r3
 804623a:	460b      	mov	r3, r1
 804623c:	71fb      	strb	r3, [r7, #7]
 804623e:	4613      	mov	r3, r2
 8046240:	71bb      	strb	r3, [r7, #6]
    uint8_t cbuffer[LR1110_REGMEM_READ_BUFFER8_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_REGMEM_READ_BUFFER8_OC >> 8 );
 8046242:	2301      	movs	r3, #1
 8046244:	753b      	strb	r3, [r7, #20]
    cbuffer[1] = ( uint8_t )( LR1110_REGMEM_READ_BUFFER8_OC >> 0 );
 8046246:	230a      	movs	r3, #10
 8046248:	757b      	strb	r3, [r7, #21]

    cbuffer[2] = offset;
 804624a:	79fb      	ldrb	r3, [r7, #7]
 804624c:	75bb      	strb	r3, [r7, #22]
    cbuffer[3] = length;
 804624e:	79bb      	ldrb	r3, [r7, #6]
 8046250:	75fb      	strb	r3, [r7, #23]

    return ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_REGMEM_READ_BUFFER8_CMD_LENGTH, buffer,
 8046252:	79bb      	ldrb	r3, [r7, #6]
 8046254:	b29b      	uxth	r3, r3
 8046256:	f107 0114 	add.w	r1, r7, #20
 804625a:	9300      	str	r3, [sp, #0]
 804625c:	68bb      	ldr	r3, [r7, #8]
 804625e:	2204      	movs	r2, #4
 8046260:	68f8      	ldr	r0, [r7, #12]
 8046262:	f7fd fbe8 	bl	8043a36 <lr1110_hal_read>
 8046266:	4603      	mov	r3, r0
                                                length );
}
 8046268:	4618      	mov	r0, r3
 804626a:	3718      	adds	r7, #24
 804626c:	46bd      	mov	sp, r7
 804626e:	bd80      	pop	{r7, pc}

08046270 <lr1110_regmem_fill_cbuffer_opcode_address>:
 * -----------------------------------------------------------------------------
 * --- PRIVATE FUNCTIONS DEFINITION --------------------------------------------
 */

void lr1110_regmem_fill_cbuffer_opcode_address( uint8_t* cbuffer, uint16_t opcode, uint32_t address )
{
 8046270:	b480      	push	{r7}
 8046272:	b085      	sub	sp, #20
 8046274:	af00      	add	r7, sp, #0
 8046276:	60f8      	str	r0, [r7, #12]
 8046278:	460b      	mov	r3, r1
 804627a:	607a      	str	r2, [r7, #4]
 804627c:	817b      	strh	r3, [r7, #10]
    cbuffer[0] = ( uint8_t )( opcode >> 8 );
 804627e:	897b      	ldrh	r3, [r7, #10]
 8046280:	0a1b      	lsrs	r3, r3, #8
 8046282:	b29b      	uxth	r3, r3
 8046284:	b2da      	uxtb	r2, r3
 8046286:	68fb      	ldr	r3, [r7, #12]
 8046288:	701a      	strb	r2, [r3, #0]
    cbuffer[1] = ( uint8_t )( opcode >> 0 );
 804628a:	68fb      	ldr	r3, [r7, #12]
 804628c:	3301      	adds	r3, #1
 804628e:	897a      	ldrh	r2, [r7, #10]
 8046290:	b2d2      	uxtb	r2, r2
 8046292:	701a      	strb	r2, [r3, #0]

    cbuffer[2] = ( uint8_t )( address >> 24 );
 8046294:	687b      	ldr	r3, [r7, #4]
 8046296:	0e1a      	lsrs	r2, r3, #24
 8046298:	68fb      	ldr	r3, [r7, #12]
 804629a:	3302      	adds	r3, #2
 804629c:	b2d2      	uxtb	r2, r2
 804629e:	701a      	strb	r2, [r3, #0]
    cbuffer[3] = ( uint8_t )( address >> 16 );
 80462a0:	687b      	ldr	r3, [r7, #4]
 80462a2:	0c1a      	lsrs	r2, r3, #16
 80462a4:	68fb      	ldr	r3, [r7, #12]
 80462a6:	3303      	adds	r3, #3
 80462a8:	b2d2      	uxtb	r2, r2
 80462aa:	701a      	strb	r2, [r3, #0]
    cbuffer[4] = ( uint8_t )( address >> 8 );
 80462ac:	687b      	ldr	r3, [r7, #4]
 80462ae:	0a1a      	lsrs	r2, r3, #8
 80462b0:	68fb      	ldr	r3, [r7, #12]
 80462b2:	3304      	adds	r3, #4
 80462b4:	b2d2      	uxtb	r2, r2
 80462b6:	701a      	strb	r2, [r3, #0]
    cbuffer[5] = ( uint8_t )( address >> 0 );
 80462b8:	68fb      	ldr	r3, [r7, #12]
 80462ba:	3305      	adds	r3, #5
 80462bc:	687a      	ldr	r2, [r7, #4]
 80462be:	b2d2      	uxtb	r2, r2
 80462c0:	701a      	strb	r2, [r3, #0]
}
 80462c2:	bf00      	nop
 80462c4:	3714      	adds	r7, #20
 80462c6:	46bd      	mov	sp, r7
 80462c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80462cc:	4770      	bx	lr

080462ce <lr1110_regmem_fill_cbuffer_opcode_address_length>:

void lr1110_regmem_fill_cbuffer_opcode_address_length( uint8_t* cbuffer, uint16_t opcode, uint32_t address,
                                                       uint8_t length )
{
 80462ce:	b580      	push	{r7, lr}
 80462d0:	b084      	sub	sp, #16
 80462d2:	af00      	add	r7, sp, #0
 80462d4:	60f8      	str	r0, [r7, #12]
 80462d6:	607a      	str	r2, [r7, #4]
 80462d8:	461a      	mov	r2, r3
 80462da:	460b      	mov	r3, r1
 80462dc:	817b      	strh	r3, [r7, #10]
 80462de:	4613      	mov	r3, r2
 80462e0:	727b      	strb	r3, [r7, #9]
    lr1110_regmem_fill_cbuffer_opcode_address( cbuffer, opcode, address );
 80462e2:	897b      	ldrh	r3, [r7, #10]
 80462e4:	687a      	ldr	r2, [r7, #4]
 80462e6:	4619      	mov	r1, r3
 80462e8:	68f8      	ldr	r0, [r7, #12]
 80462ea:	f7ff ffc1 	bl	8046270 <lr1110_regmem_fill_cbuffer_opcode_address>
    cbuffer[6] = length;
 80462ee:	68fb      	ldr	r3, [r7, #12]
 80462f0:	3306      	adds	r3, #6
 80462f2:	7a7a      	ldrb	r2, [r7, #9]
 80462f4:	701a      	strb	r2, [r3, #0]
}
 80462f6:	bf00      	nop
 80462f8:	3710      	adds	r7, #16
 80462fa:	46bd      	mov	sp, r7
 80462fc:	bd80      	pop	{r7, pc}

080462fe <lr1110_system_reset>:
 * -----------------------------------------------------------------------------
 * --- PUBLIC FUNCTIONS DEFINITION ---------------------------------------------
 */

lr1110_status_t lr1110_system_reset( const void* context )
{
 80462fe:	b580      	push	{r7, lr}
 8046300:	b082      	sub	sp, #8
 8046302:	af00      	add	r7, sp, #0
 8046304:	6078      	str	r0, [r7, #4]
    return ( lr1110_status_t ) lr1110_hal_reset( context );
 8046306:	6878      	ldr	r0, [r7, #4]
 8046308:	f7fd fc46 	bl	8043b98 <lr1110_hal_reset>
 804630c:	4603      	mov	r3, r0
}
 804630e:	4618      	mov	r0, r3
 8046310:	3708      	adds	r7, #8
 8046312:	46bd      	mov	sp, r7
 8046314:	bd80      	pop	{r7, pc}

08046316 <lr1110_system_get_status>:

lr1110_status_t lr1110_system_get_status( const void* context, lr1110_system_stat1_t* stat1,
                                          lr1110_system_stat2_t* stat2, lr1110_system_irq_mask_t* irq_status )
{
 8046316:	b580      	push	{r7, lr}
 8046318:	b086      	sub	sp, #24
 804631a:	af00      	add	r7, sp, #0
 804631c:	60f8      	str	r0, [r7, #12]
 804631e:	60b9      	str	r1, [r7, #8]
 8046320:	607a      	str	r2, [r7, #4]
 8046322:	603b      	str	r3, [r7, #0]
    uint8_t         cbuffer[LR1110_SYSTEM_GET_STATUS_CMD_LENGTH] = { 0x00 };
 8046324:	2300      	movs	r3, #0
 8046326:	613b      	str	r3, [r7, #16]
 8046328:	2300      	movs	r3, #0
 804632a:	82bb      	strh	r3, [r7, #20]
    lr1110_status_t status                                       = LR1110_STATUS_ERROR;
 804632c:	2303      	movs	r3, #3
 804632e:	75fb      	strb	r3, [r7, #23]

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_STATUS_OC >> 8 );
 8046330:	2301      	movs	r3, #1
 8046332:	743b      	strb	r3, [r7, #16]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_STATUS_OC >> 0 );
 8046334:	2300      	movs	r3, #0
 8046336:	747b      	strb	r3, [r7, #17]

    status =
        ( lr1110_status_t ) lr1110_hal_write_read( context, cbuffer, cbuffer, LR1110_SYSTEM_GET_STATUS_CMD_LENGTH );
 8046338:	f107 0210 	add.w	r2, r7, #16
 804633c:	f107 0110 	add.w	r1, r7, #16
 8046340:	2306      	movs	r3, #6
 8046342:	68f8      	ldr	r0, [r7, #12]
 8046344:	f7fd fbdc 	bl	8043b00 <lr1110_hal_write_read>
 8046348:	4603      	mov	r3, r0
 804634a:	75fb      	strb	r3, [r7, #23]

    if( status == LR1110_STATUS_OK )
 804634c:	7dfb      	ldrb	r3, [r7, #23]
 804634e:	2b00      	cmp	r3, #0
 8046350:	d130      	bne.n	80463b4 <lr1110_system_get_status+0x9e>
    {
        stat1->is_interrupt_active = ( ( cbuffer[0] & 0x01 ) != 0 ) ? true : false;
 8046352:	7c3b      	ldrb	r3, [r7, #16]
 8046354:	f003 0301 	and.w	r3, r3, #1
 8046358:	2b00      	cmp	r3, #0
 804635a:	bf14      	ite	ne
 804635c:	2301      	movne	r3, #1
 804635e:	2300      	moveq	r3, #0
 8046360:	b2da      	uxtb	r2, r3
 8046362:	68bb      	ldr	r3, [r7, #8]
 8046364:	705a      	strb	r2, [r3, #1]
        stat1->command_status      = ( lr1110_system_command_status_t )( cbuffer[0] >> 1 );
 8046366:	7c3b      	ldrb	r3, [r7, #16]
 8046368:	085b      	lsrs	r3, r3, #1
 804636a:	b2da      	uxtb	r2, r3
 804636c:	68bb      	ldr	r3, [r7, #8]
 804636e:	701a      	strb	r2, [r3, #0]

        stat2->is_running_from_flash = ( ( cbuffer[1] & 0x01 ) != 0 ) ? true : false;
 8046370:	7c7b      	ldrb	r3, [r7, #17]
 8046372:	f003 0301 	and.w	r3, r3, #1
 8046376:	2b00      	cmp	r3, #0
 8046378:	bf14      	ite	ne
 804637a:	2301      	movne	r3, #1
 804637c:	2300      	moveq	r3, #0
 804637e:	b2da      	uxtb	r2, r3
 8046380:	687b      	ldr	r3, [r7, #4]
 8046382:	709a      	strb	r2, [r3, #2]
        stat2->chip_mode             = ( lr1110_system_chip_modes_t )( ( cbuffer[1] & 0x0F ) >> 1 );
 8046384:	7c7b      	ldrb	r3, [r7, #17]
 8046386:	105b      	asrs	r3, r3, #1
 8046388:	f003 0307 	and.w	r3, r3, #7
 804638c:	b2da      	uxtb	r2, r3
 804638e:	687b      	ldr	r3, [r7, #4]
 8046390:	705a      	strb	r2, [r3, #1]
        stat2->reset_status          = ( lr1110_system_reset_status_t )( ( cbuffer[1] & 0xF0 ) >> 4 );
 8046392:	7c7b      	ldrb	r3, [r7, #17]
 8046394:	091b      	lsrs	r3, r3, #4
 8046396:	b2da      	uxtb	r2, r3
 8046398:	687b      	ldr	r3, [r7, #4]
 804639a:	701a      	strb	r2, [r3, #0]

        *irq_status =
            ( ( lr1110_system_irq_mask_t ) cbuffer[2] << 24 ) + ( ( lr1110_system_irq_mask_t ) cbuffer[3] << 16 ) +
 804639c:	7cbb      	ldrb	r3, [r7, #18]
 804639e:	061a      	lsls	r2, r3, #24
 80463a0:	7cfb      	ldrb	r3, [r7, #19]
 80463a2:	041b      	lsls	r3, r3, #16
 80463a4:	441a      	add	r2, r3
            ( ( lr1110_system_irq_mask_t ) cbuffer[4] << 8 ) + ( ( lr1110_system_irq_mask_t ) cbuffer[5] << 0 );
 80463a6:	7d3b      	ldrb	r3, [r7, #20]
 80463a8:	021b      	lsls	r3, r3, #8
            ( ( lr1110_system_irq_mask_t ) cbuffer[2] << 24 ) + ( ( lr1110_system_irq_mask_t ) cbuffer[3] << 16 ) +
 80463aa:	4413      	add	r3, r2
            ( ( lr1110_system_irq_mask_t ) cbuffer[4] << 8 ) + ( ( lr1110_system_irq_mask_t ) cbuffer[5] << 0 );
 80463ac:	7d7a      	ldrb	r2, [r7, #21]
 80463ae:	441a      	add	r2, r3
        *irq_status =
 80463b0:	683b      	ldr	r3, [r7, #0]
 80463b2:	601a      	str	r2, [r3, #0]
    }

    return status;
 80463b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80463b6:	4618      	mov	r0, r3
 80463b8:	3718      	adds	r7, #24
 80463ba:	46bd      	mov	sp, r7
 80463bc:	bd80      	pop	{r7, pc}

080463be <lr1110_system_get_version>:

    return status;
}

lr1110_status_t lr1110_system_get_version( const void* context, lr1110_system_version_t* version )
{
 80463be:	b580      	push	{r7, lr}
 80463c0:	b086      	sub	sp, #24
 80463c2:	af02      	add	r7, sp, #8
 80463c4:	6078      	str	r0, [r7, #4]
 80463c6:	6039      	str	r1, [r7, #0]
    uint8_t         cbuffer[LR1110_SYSTEM_GET_VERSION_CMD_LENGTH];
    uint8_t         rbuffer[LR1110_SYSTEM_VERSION_LENGTH] = { 0x00 };
 80463c8:	2300      	movs	r3, #0
 80463ca:	60bb      	str	r3, [r7, #8]
    lr1110_status_t status                                = LR1110_STATUS_ERROR;
 80463cc:	2303      	movs	r3, #3
 80463ce:	73fb      	strb	r3, [r7, #15]

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_VERSION_OC >> 8 );
 80463d0:	2301      	movs	r3, #1
 80463d2:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_VERSION_OC >> 0 );
 80463d4:	2301      	movs	r3, #1
 80463d6:	737b      	strb	r3, [r7, #13]

    status = ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_SYSTEM_GET_VERSION_CMD_LENGTH, rbuffer,
 80463d8:	f107 0308 	add.w	r3, r7, #8
 80463dc:	f107 010c 	add.w	r1, r7, #12
 80463e0:	2204      	movs	r2, #4
 80463e2:	9200      	str	r2, [sp, #0]
 80463e4:	2202      	movs	r2, #2
 80463e6:	6878      	ldr	r0, [r7, #4]
 80463e8:	f7fd fb25 	bl	8043a36 <lr1110_hal_read>
 80463ec:	4603      	mov	r3, r0
 80463ee:	73fb      	strb	r3, [r7, #15]
                                                  LR1110_SYSTEM_VERSION_LENGTH );

    if( status == LR1110_STATUS_OK )
 80463f0:	7bfb      	ldrb	r3, [r7, #15]
 80463f2:	2b00      	cmp	r3, #0
 80463f4:	d10f      	bne.n	8046416 <lr1110_system_get_version+0x58>
    {
        version->hw   = rbuffer[0];
 80463f6:	7a3a      	ldrb	r2, [r7, #8]
 80463f8:	683b      	ldr	r3, [r7, #0]
 80463fa:	701a      	strb	r2, [r3, #0]
        version->type = rbuffer[1];
 80463fc:	7a7a      	ldrb	r2, [r7, #9]
 80463fe:	683b      	ldr	r3, [r7, #0]
 8046400:	705a      	strb	r2, [r3, #1]
        version->fw   = ( ( uint16_t ) rbuffer[2] << 8 ) + ( uint16_t ) rbuffer[3];
 8046402:	7abb      	ldrb	r3, [r7, #10]
 8046404:	b29b      	uxth	r3, r3
 8046406:	021b      	lsls	r3, r3, #8
 8046408:	b29a      	uxth	r2, r3
 804640a:	7afb      	ldrb	r3, [r7, #11]
 804640c:	b29b      	uxth	r3, r3
 804640e:	4413      	add	r3, r2
 8046410:	b29a      	uxth	r2, r3
 8046412:	683b      	ldr	r3, [r7, #0]
 8046414:	805a      	strh	r2, [r3, #2]
    }

    return status;
 8046416:	7bfb      	ldrb	r3, [r7, #15]
}
 8046418:	4618      	mov	r0, r3
 804641a:	3710      	adds	r7, #16
 804641c:	46bd      	mov	sp, r7
 804641e:	bd80      	pop	{r7, pc}

08046420 <lr1110_system_get_errors>:

lr1110_status_t lr1110_system_get_errors( const void* context, lr1110_system_errors_t* errors )
{
 8046420:	b580      	push	{r7, lr}
 8046422:	b086      	sub	sp, #24
 8046424:	af02      	add	r7, sp, #8
 8046426:	6078      	str	r0, [r7, #4]
 8046428:	6039      	str	r1, [r7, #0]
    uint8_t         cbuffer[LR1110_SYSTEM_GET_ERRORS_CMD_LENGTH];
    uint8_t         rbuffer[sizeof( errors )] = { 0x00 };
 804642a:	2300      	movs	r3, #0
 804642c:	60bb      	str	r3, [r7, #8]
    lr1110_status_t status                    = LR1110_STATUS_ERROR;
 804642e:	2303      	movs	r3, #3
 8046430:	73fb      	strb	r3, [r7, #15]

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_ERRORS_OC >> 8 );
 8046432:	2301      	movs	r3, #1
 8046434:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_ERRORS_OC >> 0 );
 8046436:	230d      	movs	r3, #13
 8046438:	737b      	strb	r3, [r7, #13]

    status = ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_SYSTEM_GET_ERRORS_CMD_LENGTH, rbuffer,
 804643a:	f107 0308 	add.w	r3, r7, #8
 804643e:	f107 010c 	add.w	r1, r7, #12
 8046442:	2202      	movs	r2, #2
 8046444:	9200      	str	r2, [sp, #0]
 8046446:	2202      	movs	r2, #2
 8046448:	6878      	ldr	r0, [r7, #4]
 804644a:	f7fd faf4 	bl	8043a36 <lr1110_hal_read>
 804644e:	4603      	mov	r3, r0
 8046450:	73fb      	strb	r3, [r7, #15]
                                                  sizeof( *errors ) );

    if( status == LR1110_STATUS_OK )
 8046452:	7bfb      	ldrb	r3, [r7, #15]
 8046454:	2b00      	cmp	r3, #0
 8046456:	d109      	bne.n	804646c <lr1110_system_get_errors+0x4c>
    {
        *errors = ( ( uint16_t ) rbuffer[0] << 8 ) + ( uint16_t ) rbuffer[1];
 8046458:	7a3b      	ldrb	r3, [r7, #8]
 804645a:	b29b      	uxth	r3, r3
 804645c:	021b      	lsls	r3, r3, #8
 804645e:	b29a      	uxth	r2, r3
 8046460:	7a7b      	ldrb	r3, [r7, #9]
 8046462:	b29b      	uxth	r3, r3
 8046464:	4413      	add	r3, r2
 8046466:	b29a      	uxth	r2, r3
 8046468:	683b      	ldr	r3, [r7, #0]
 804646a:	801a      	strh	r2, [r3, #0]
    }

    return status;
 804646c:	7bfb      	ldrb	r3, [r7, #15]
}
 804646e:	4618      	mov	r0, r3
 8046470:	3710      	adds	r7, #16
 8046472:	46bd      	mov	sp, r7
 8046474:	bd80      	pop	{r7, pc}

08046476 <lr1110_system_clear_errors>:

lr1110_status_t lr1110_system_clear_errors( const void* context )
{
 8046476:	b580      	push	{r7, lr}
 8046478:	b086      	sub	sp, #24
 804647a:	af02      	add	r7, sp, #8
 804647c:	6078      	str	r0, [r7, #4]
    uint8_t cbuffer[LR1110_SYSTEM_CLEAR_ERRORS_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CLEAR_ERRORS_OC >> 8 );
 804647e:	2301      	movs	r3, #1
 8046480:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_CLEAR_ERRORS_OC >> 0 );
 8046482:	230e      	movs	r3, #14
 8046484:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_CLEAR_ERRORS_CMD_LENGTH, 0, 0 );
 8046486:	f107 010c 	add.w	r1, r7, #12
 804648a:	2300      	movs	r3, #0
 804648c:	9300      	str	r3, [sp, #0]
 804648e:	2300      	movs	r3, #0
 8046490:	2202      	movs	r2, #2
 8046492:	6878      	ldr	r0, [r7, #4]
 8046494:	f7fd fa74 	bl	8043980 <lr1110_hal_write>
 8046498:	4603      	mov	r3, r0
}
 804649a:	4618      	mov	r0, r3
 804649c:	3710      	adds	r7, #16
 804649e:	46bd      	mov	sp, r7
 80464a0:	bd80      	pop	{r7, pc}

080464a2 <lr1110_system_set_reg_mode>:

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_CALIBRATE_CMD_LENGTH, 0, 0 );
}

lr1110_status_t lr1110_system_set_reg_mode( const void* context, const lr1110_system_reg_mode_t reg_mode )
{
 80464a2:	b580      	push	{r7, lr}
 80464a4:	b086      	sub	sp, #24
 80464a6:	af02      	add	r7, sp, #8
 80464a8:	6078      	str	r0, [r7, #4]
 80464aa:	460b      	mov	r3, r1
 80464ac:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_SYSTEM_SET_REGMODE_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_REGMODE_OC >> 8 );
 80464ae:	2301      	movs	r3, #1
 80464b0:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_REGMODE_OC >> 0 );
 80464b2:	2310      	movs	r3, #16
 80464b4:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t ) reg_mode;
 80464b6:	78fb      	ldrb	r3, [r7, #3]
 80464b8:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_REGMODE_CMD_LENGTH, 0, 0 );
 80464ba:	f107 010c 	add.w	r1, r7, #12
 80464be:	2300      	movs	r3, #0
 80464c0:	9300      	str	r3, [sp, #0]
 80464c2:	2300      	movs	r3, #0
 80464c4:	2203      	movs	r2, #3
 80464c6:	6878      	ldr	r0, [r7, #4]
 80464c8:	f7fd fa5a 	bl	8043980 <lr1110_hal_write>
 80464cc:	4603      	mov	r3, r0
}
 80464ce:	4618      	mov	r0, r3
 80464d0:	3710      	adds	r7, #16
 80464d2:	46bd      	mov	sp, r7
 80464d4:	bd80      	pop	{r7, pc}

080464d6 <lr1110_system_set_dio_as_rf_switch>:
    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_CALIBRATE_IMAGE_CMD_LENGTH, 0, 0 );
}

lr1110_status_t lr1110_system_set_dio_as_rf_switch( const void*                         context,
                                                    const lr1110_system_rfswitch_cfg_t* rf_switch_cfg )
{
 80464d6:	b580      	push	{r7, lr}
 80464d8:	b088      	sub	sp, #32
 80464da:	af02      	add	r7, sp, #8
 80464dc:	6078      	str	r0, [r7, #4]
 80464de:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_OC >> 8 );
 80464e0:	2301      	movs	r3, #1
 80464e2:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_OC >> 0 );
 80464e4:	2312      	movs	r3, #18
 80464e6:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = rf_switch_cfg->enable;
 80464e8:	683b      	ldr	r3, [r7, #0]
 80464ea:	781b      	ldrb	r3, [r3, #0]
 80464ec:	73bb      	strb	r3, [r7, #14]
    cbuffer[3] = rf_switch_cfg->standby;
 80464ee:	683b      	ldr	r3, [r7, #0]
 80464f0:	785b      	ldrb	r3, [r3, #1]
 80464f2:	73fb      	strb	r3, [r7, #15]
    cbuffer[4] = rf_switch_cfg->rx;
 80464f4:	683b      	ldr	r3, [r7, #0]
 80464f6:	789b      	ldrb	r3, [r3, #2]
 80464f8:	743b      	strb	r3, [r7, #16]
    cbuffer[5] = rf_switch_cfg->tx;
 80464fa:	683b      	ldr	r3, [r7, #0]
 80464fc:	78db      	ldrb	r3, [r3, #3]
 80464fe:	747b      	strb	r3, [r7, #17]
    cbuffer[6] = rf_switch_cfg->tx_hp;
 8046500:	683b      	ldr	r3, [r7, #0]
 8046502:	791b      	ldrb	r3, [r3, #4]
 8046504:	74bb      	strb	r3, [r7, #18]
    cbuffer[7] = rf_switch_cfg->tx_hf;
 8046506:	683b      	ldr	r3, [r7, #0]
 8046508:	795b      	ldrb	r3, [r3, #5]
 804650a:	74fb      	strb	r3, [r7, #19]
    cbuffer[8] = rf_switch_cfg->gnss;
 804650c:	683b      	ldr	r3, [r7, #0]
 804650e:	799b      	ldrb	r3, [r3, #6]
 8046510:	753b      	strb	r3, [r7, #20]
    cbuffer[9] = rf_switch_cfg->wifi;
 8046512:	683b      	ldr	r3, [r7, #0]
 8046514:	79db      	ldrb	r3, [r3, #7]
 8046516:	757b      	strb	r3, [r7, #21]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_DIO_AS_RF_SWITCH_CMD_LENGTH, 0,
 8046518:	f107 010c 	add.w	r1, r7, #12
 804651c:	2300      	movs	r3, #0
 804651e:	9300      	str	r3, [sp, #0]
 8046520:	2300      	movs	r3, #0
 8046522:	220a      	movs	r2, #10
 8046524:	6878      	ldr	r0, [r7, #4]
 8046526:	f7fd fa2b 	bl	8043980 <lr1110_hal_write>
 804652a:	4603      	mov	r3, r0
                                                 0 );
}
 804652c:	4618      	mov	r0, r3
 804652e:	3718      	adds	r7, #24
 8046530:	46bd      	mov	sp, r7
 8046532:	bd80      	pop	{r7, pc}

08046534 <lr1110_system_set_dio_irq_params>:

lr1110_status_t lr1110_system_set_dio_irq_params( const void* context, const uint32_t irqs_to_enable_dio1,
                                                  const uint32_t irqs_to_enable_dio2 )
{
 8046534:	b580      	push	{r7, lr}
 8046536:	b08a      	sub	sp, #40	; 0x28
 8046538:	af02      	add	r7, sp, #8
 804653a:	60f8      	str	r0, [r7, #12]
 804653c:	60b9      	str	r1, [r7, #8]
 804653e:	607a      	str	r2, [r7, #4]
    uint8_t cbuffer[LR1110_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_DIOIRQPARAMS_OC >> 8 );
 8046540:	2301      	movs	r3, #1
 8046542:	753b      	strb	r3, [r7, #20]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_DIOIRQPARAMS_OC >> 0 );
 8046544:	2313      	movs	r3, #19
 8046546:	757b      	strb	r3, [r7, #21]

    cbuffer[2] = ( uint8_t )( irqs_to_enable_dio1 >> 24 );
 8046548:	68bb      	ldr	r3, [r7, #8]
 804654a:	0e1b      	lsrs	r3, r3, #24
 804654c:	b2db      	uxtb	r3, r3
 804654e:	75bb      	strb	r3, [r7, #22]
    cbuffer[3] = ( uint8_t )( irqs_to_enable_dio1 >> 16 );
 8046550:	68bb      	ldr	r3, [r7, #8]
 8046552:	0c1b      	lsrs	r3, r3, #16
 8046554:	b2db      	uxtb	r3, r3
 8046556:	75fb      	strb	r3, [r7, #23]
    cbuffer[4] = ( uint8_t )( irqs_to_enable_dio1 >> 8 );
 8046558:	68bb      	ldr	r3, [r7, #8]
 804655a:	0a1b      	lsrs	r3, r3, #8
 804655c:	b2db      	uxtb	r3, r3
 804655e:	763b      	strb	r3, [r7, #24]
    cbuffer[5] = ( uint8_t )( irqs_to_enable_dio1 >> 0 );
 8046560:	68bb      	ldr	r3, [r7, #8]
 8046562:	b2db      	uxtb	r3, r3
 8046564:	767b      	strb	r3, [r7, #25]

    cbuffer[6] = ( uint8_t )( irqs_to_enable_dio2 >> 24 );
 8046566:	687b      	ldr	r3, [r7, #4]
 8046568:	0e1b      	lsrs	r3, r3, #24
 804656a:	b2db      	uxtb	r3, r3
 804656c:	76bb      	strb	r3, [r7, #26]
    cbuffer[7] = ( uint8_t )( irqs_to_enable_dio2 >> 16 );
 804656e:	687b      	ldr	r3, [r7, #4]
 8046570:	0c1b      	lsrs	r3, r3, #16
 8046572:	b2db      	uxtb	r3, r3
 8046574:	76fb      	strb	r3, [r7, #27]
    cbuffer[8] = ( uint8_t )( irqs_to_enable_dio2 >> 8 );
 8046576:	687b      	ldr	r3, [r7, #4]
 8046578:	0a1b      	lsrs	r3, r3, #8
 804657a:	b2db      	uxtb	r3, r3
 804657c:	773b      	strb	r3, [r7, #28]
    cbuffer[9] = ( uint8_t )( irqs_to_enable_dio2 >> 0 );
 804657e:	687b      	ldr	r3, [r7, #4]
 8046580:	b2db      	uxtb	r3, r3
 8046582:	777b      	strb	r3, [r7, #29]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_DIO_IRQ_PARAMS_CMD_LENGTH, 0, 0 );
 8046584:	f107 0114 	add.w	r1, r7, #20
 8046588:	2300      	movs	r3, #0
 804658a:	9300      	str	r3, [sp, #0]
 804658c:	2300      	movs	r3, #0
 804658e:	220a      	movs	r2, #10
 8046590:	68f8      	ldr	r0, [r7, #12]
 8046592:	f7fd f9f5 	bl	8043980 <lr1110_hal_write>
 8046596:	4603      	mov	r3, r0
}
 8046598:	4618      	mov	r0, r3
 804659a:	3720      	adds	r7, #32
 804659c:	46bd      	mov	sp, r7
 804659e:	bd80      	pop	{r7, pc}

080465a0 <lr1110_system_clear_irq_status>:

lr1110_status_t lr1110_system_clear_irq_status( const void* context, const lr1110_system_irq_mask_t irqs_to_clear )
{
 80465a0:	b580      	push	{r7, lr}
 80465a2:	b086      	sub	sp, #24
 80465a4:	af02      	add	r7, sp, #8
 80465a6:	6078      	str	r0, [r7, #4]
 80465a8:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_SYSTEM_CLEAR_IRQ_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_CLEAR_IRQ_OC >> 8 );
 80465aa:	2301      	movs	r3, #1
 80465ac:	723b      	strb	r3, [r7, #8]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_CLEAR_IRQ_OC >> 0 );
 80465ae:	2314      	movs	r3, #20
 80465b0:	727b      	strb	r3, [r7, #9]

    cbuffer[2] = ( uint8_t )( irqs_to_clear >> 24 );
 80465b2:	683b      	ldr	r3, [r7, #0]
 80465b4:	0e1b      	lsrs	r3, r3, #24
 80465b6:	b2db      	uxtb	r3, r3
 80465b8:	72bb      	strb	r3, [r7, #10]
    cbuffer[3] = ( uint8_t )( irqs_to_clear >> 16 );
 80465ba:	683b      	ldr	r3, [r7, #0]
 80465bc:	0c1b      	lsrs	r3, r3, #16
 80465be:	b2db      	uxtb	r3, r3
 80465c0:	72fb      	strb	r3, [r7, #11]
    cbuffer[4] = ( uint8_t )( irqs_to_clear >> 8 );
 80465c2:	683b      	ldr	r3, [r7, #0]
 80465c4:	0a1b      	lsrs	r3, r3, #8
 80465c6:	b2db      	uxtb	r3, r3
 80465c8:	733b      	strb	r3, [r7, #12]
    cbuffer[5] = ( uint8_t )( irqs_to_clear >> 0 );
 80465ca:	683b      	ldr	r3, [r7, #0]
 80465cc:	b2db      	uxtb	r3, r3
 80465ce:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_CLEAR_IRQ_CMD_LENGTH, 0, 0 );
 80465d0:	f107 0108 	add.w	r1, r7, #8
 80465d4:	2300      	movs	r3, #0
 80465d6:	9300      	str	r3, [sp, #0]
 80465d8:	2300      	movs	r3, #0
 80465da:	2206      	movs	r2, #6
 80465dc:	6878      	ldr	r0, [r7, #4]
 80465de:	f7fd f9cf 	bl	8043980 <lr1110_hal_write>
 80465e2:	4603      	mov	r3, r0
}
 80465e4:	4618      	mov	r0, r3
 80465e6:	3710      	adds	r7, #16
 80465e8:	46bd      	mov	sp, r7
 80465ea:	bd80      	pop	{r7, pc}

080465ec <lr1110_system_set_sleep>:
    return status;
}

lr1110_status_t lr1110_system_set_sleep( const void* context, const lr1110_system_sleep_cfg_t sleep_cfg,
                                         const uint32_t sleep_time )
{
 80465ec:	b580      	push	{r7, lr}
 80465ee:	b088      	sub	sp, #32
 80465f0:	af02      	add	r7, sp, #8
 80465f2:	60f8      	str	r0, [r7, #12]
 80465f4:	8139      	strh	r1, [r7, #8]
 80465f6:	607a      	str	r2, [r7, #4]
    uint8_t cbuffer[LR1110_SYSTEM_SET_SLEEP_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_SLEEP_OC >> 8 );
 80465f8:	2301      	movs	r3, #1
 80465fa:	743b      	strb	r3, [r7, #16]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_SLEEP_OC >> 0 );
 80465fc:	231b      	movs	r3, #27
 80465fe:	747b      	strb	r3, [r7, #17]

    cbuffer[2] = ( sleep_cfg.is_rtc_timeout << 1 ) + sleep_cfg.is_warm_start;
 8046600:	7a7b      	ldrb	r3, [r7, #9]
 8046602:	005b      	lsls	r3, r3, #1
 8046604:	b2db      	uxtb	r3, r3
 8046606:	7a3a      	ldrb	r2, [r7, #8]
 8046608:	4413      	add	r3, r2
 804660a:	b2db      	uxtb	r3, r3
 804660c:	74bb      	strb	r3, [r7, #18]

    cbuffer[3] = ( uint8_t )( sleep_time >> 24 );
 804660e:	687b      	ldr	r3, [r7, #4]
 8046610:	0e1b      	lsrs	r3, r3, #24
 8046612:	b2db      	uxtb	r3, r3
 8046614:	74fb      	strb	r3, [r7, #19]
    cbuffer[4] = ( uint8_t )( sleep_time >> 16 );
 8046616:	687b      	ldr	r3, [r7, #4]
 8046618:	0c1b      	lsrs	r3, r3, #16
 804661a:	b2db      	uxtb	r3, r3
 804661c:	753b      	strb	r3, [r7, #20]
    cbuffer[5] = ( uint8_t )( sleep_time >> 8 );
 804661e:	687b      	ldr	r3, [r7, #4]
 8046620:	0a1b      	lsrs	r3, r3, #8
 8046622:	b2db      	uxtb	r3, r3
 8046624:	757b      	strb	r3, [r7, #21]
    cbuffer[6] = ( uint8_t )( sleep_time >> 0 );
 8046626:	687b      	ldr	r3, [r7, #4]
 8046628:	b2db      	uxtb	r3, r3
 804662a:	75bb      	strb	r3, [r7, #22]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_SLEEP_CMD_LENGTH, 0, 0 );
 804662c:	f107 0110 	add.w	r1, r7, #16
 8046630:	2300      	movs	r3, #0
 8046632:	9300      	str	r3, [sp, #0]
 8046634:	2300      	movs	r3, #0
 8046636:	2207      	movs	r2, #7
 8046638:	68f8      	ldr	r0, [r7, #12]
 804663a:	f7fd f9a1 	bl	8043980 <lr1110_hal_write>
 804663e:	4603      	mov	r3, r0
}
 8046640:	4618      	mov	r0, r3
 8046642:	3718      	adds	r7, #24
 8046644:	46bd      	mov	sp, r7
 8046646:	bd80      	pop	{r7, pc}

08046648 <lr1110_system_set_standby>:

lr1110_status_t lr1110_system_set_standby( const void* context, const lr1110_system_standby_cfg_t standby_cfg )
{
 8046648:	b580      	push	{r7, lr}
 804664a:	b086      	sub	sp, #24
 804664c:	af02      	add	r7, sp, #8
 804664e:	6078      	str	r0, [r7, #4]
 8046650:	460b      	mov	r3, r1
 8046652:	70fb      	strb	r3, [r7, #3]
    uint8_t cbuffer[LR1110_SYSTEM_SET_STANDBY_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_SET_STANDBY_OC >> 8 );
 8046654:	2301      	movs	r3, #1
 8046656:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_SET_STANDBY_OC >> 0 );
 8046658:	231c      	movs	r3, #28
 804665a:	737b      	strb	r3, [r7, #13]

    cbuffer[2] = ( uint8_t ) standby_cfg;
 804665c:	78fb      	ldrb	r3, [r7, #3]
 804665e:	73bb      	strb	r3, [r7, #14]

    return ( lr1110_status_t ) lr1110_hal_write( context, cbuffer, LR1110_SYSTEM_SET_STANDBY_CMD_LENGTH, 0, 0 );
 8046660:	f107 010c 	add.w	r1, r7, #12
 8046664:	2300      	movs	r3, #0
 8046666:	9300      	str	r3, [sp, #0]
 8046668:	2300      	movs	r3, #0
 804666a:	2203      	movs	r2, #3
 804666c:	6878      	ldr	r0, [r7, #4]
 804666e:	f7fd f987 	bl	8043980 <lr1110_hal_write>
 8046672:	4603      	mov	r3, r0
}
 8046674:	4618      	mov	r0, r3
 8046676:	3710      	adds	r7, #16
 8046678:	46bd      	mov	sp, r7
 804667a:	bd80      	pop	{r7, pc}

0804667c <lr1110_system_get_random_number>:
    return ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_SYSTEM_READ_PIN_CUSTOM_EUI_CMD_LENGTH, pin,
                                                LR1110_SYSTEM_PIN_LENGTH );
}

lr1110_status_t lr1110_system_get_random_number( const void* context, uint32_t* random_number )
{
 804667c:	b580      	push	{r7, lr}
 804667e:	b086      	sub	sp, #24
 8046680:	af02      	add	r7, sp, #8
 8046682:	6078      	str	r0, [r7, #4]
 8046684:	6039      	str	r1, [r7, #0]
    uint8_t cbuffer[LR1110_SYSTEM_GET_RANDOM_CMD_LENGTH];

    cbuffer[0] = ( uint8_t )( LR1110_SYSTEM_GET_RANDOM_OC >> 8 );
 8046686:	2301      	movs	r3, #1
 8046688:	733b      	strb	r3, [r7, #12]
    cbuffer[1] = ( uint8_t )( LR1110_SYSTEM_GET_RANDOM_OC >> 0 );
 804668a:	2320      	movs	r3, #32
 804668c:	737b      	strb	r3, [r7, #13]

    return ( lr1110_status_t ) lr1110_hal_read( context, cbuffer, LR1110_SYSTEM_GET_RANDOM_CMD_LENGTH,
 804668e:	f107 010c 	add.w	r1, r7, #12
 8046692:	2304      	movs	r3, #4
 8046694:	9300      	str	r3, [sp, #0]
 8046696:	683b      	ldr	r3, [r7, #0]
 8046698:	2202      	movs	r2, #2
 804669a:	6878      	ldr	r0, [r7, #4]
 804669c:	f7fd f9cb 	bl	8043a36 <lr1110_hal_read>
 80466a0:	4603      	mov	r3, r0
                                                ( uint8_t* ) random_number, sizeof( uint32_t ) );
}
 80466a2:	4618      	mov	r0, r3
 80466a4:	3710      	adds	r7, #16
 80466a6:	46bd      	mov	sp, r7
 80466a8:	bd80      	pop	{r7, pc}

080466aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80466aa:	b580      	push	{r7, lr}
 80466ac:	b082      	sub	sp, #8
 80466ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80466b0:	2300      	movs	r3, #0
 80466b2:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80466b4:	2004      	movs	r0, #4
 80466b6:	f001 ffa2 	bl	80485fe <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80466ba:	f7fc f937 	bl	804292c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80466be:	2000      	movs	r0, #0
 80466c0:	f7fb ff46 	bl	8042550 <HAL_InitTick>
 80466c4:	4603      	mov	r3, r0
 80466c6:	2b00      	cmp	r3, #0
 80466c8:	d002      	beq.n	80466d0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80466ca:	2301      	movs	r3, #1
 80466cc:	71fb      	strb	r3, [r7, #7]
 80466ce:	e001      	b.n	80466d4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80466d0:	f7fb ff14 	bl	80424fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80466d4:	79fb      	ldrb	r3, [r7, #7]
}
 80466d6:	4618      	mov	r0, r3
 80466d8:	3708      	adds	r7, #8
 80466da:	46bd      	mov	sp, r7
 80466dc:	bd80      	pop	{r7, pc}
	...

080466e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80466e0:	b480      	push	{r7}
 80466e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80466e4:	4b06      	ldr	r3, [pc, #24]	; (8046700 <HAL_IncTick+0x20>)
 80466e6:	781b      	ldrb	r3, [r3, #0]
 80466e8:	461a      	mov	r2, r3
 80466ea:	4b06      	ldr	r3, [pc, #24]	; (8046704 <HAL_IncTick+0x24>)
 80466ec:	681b      	ldr	r3, [r3, #0]
 80466ee:	4413      	add	r3, r2
 80466f0:	4a04      	ldr	r2, [pc, #16]	; (8046704 <HAL_IncTick+0x24>)
 80466f2:	6013      	str	r3, [r2, #0]
}
 80466f4:	bf00      	nop
 80466f6:	46bd      	mov	sp, r7
 80466f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80466fc:	4770      	bx	lr
 80466fe:	bf00      	nop
 8046700:	2001805d 	.word	0x2001805d
 8046704:	20019964 	.word	0x20019964

08046708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8046708:	b480      	push	{r7}
 804670a:	af00      	add	r7, sp, #0
  return uwTick;
 804670c:	4b03      	ldr	r3, [pc, #12]	; (804671c <HAL_GetTick+0x14>)
 804670e:	681b      	ldr	r3, [r3, #0]
}
 8046710:	4618      	mov	r0, r3
 8046712:	46bd      	mov	sp, r7
 8046714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046718:	4770      	bx	lr
 804671a:	bf00      	nop
 804671c:	20019964 	.word	0x20019964

08046720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8046720:	b580      	push	{r7, lr}
 8046722:	b084      	sub	sp, #16
 8046724:	af00      	add	r7, sp, #0
 8046726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8046728:	f7ff ffee 	bl	8046708 <HAL_GetTick>
 804672c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 804672e:	687b      	ldr	r3, [r7, #4]
 8046730:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8046732:	68fb      	ldr	r3, [r7, #12]
 8046734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046738:	d005      	beq.n	8046746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 804673a:	4b0a      	ldr	r3, [pc, #40]	; (8046764 <HAL_Delay+0x44>)
 804673c:	781b      	ldrb	r3, [r3, #0]
 804673e:	461a      	mov	r2, r3
 8046740:	68fb      	ldr	r3, [r7, #12]
 8046742:	4413      	add	r3, r2
 8046744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8046746:	bf00      	nop
 8046748:	f7ff ffde 	bl	8046708 <HAL_GetTick>
 804674c:	4602      	mov	r2, r0
 804674e:	68bb      	ldr	r3, [r7, #8]
 8046750:	1ad3      	subs	r3, r2, r3
 8046752:	68fa      	ldr	r2, [r7, #12]
 8046754:	429a      	cmp	r2, r3
 8046756:	d8f7      	bhi.n	8046748 <HAL_Delay+0x28>
  {
  }
}
 8046758:	bf00      	nop
 804675a:	bf00      	nop
 804675c:	3710      	adds	r7, #16
 804675e:	46bd      	mov	sp, r7
 8046760:	bd80      	pop	{r7, pc}
 8046762:	bf00      	nop
 8046764:	2001805d 	.word	0x2001805d

08046768 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP0/STOP1/STOP2 modes.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8046768:	b480      	push	{r7}
 804676a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 804676c:	4b05      	ldr	r3, [pc, #20]	; (8046784 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 804676e:	685b      	ldr	r3, [r3, #4]
 8046770:	4a04      	ldr	r2, [pc, #16]	; (8046784 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8046772:	f043 0302 	orr.w	r3, r3, #2
 8046776:	6053      	str	r3, [r2, #4]
}
 8046778:	bf00      	nop
 804677a:	46bd      	mov	sp, r7
 804677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046780:	4770      	bx	lr
 8046782:	bf00      	nop
 8046784:	e0044000 	.word	0xe0044000

08046788 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode.
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8046788:	b480      	push	{r7}
 804678a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 804678c:	4b05      	ldr	r3, [pc, #20]	; (80467a4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 804678e:	685b      	ldr	r3, [r3, #4]
 8046790:	4a04      	ldr	r2, [pc, #16]	; (80467a4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 8046792:	f043 0304 	orr.w	r3, r3, #4
 8046796:	6053      	str	r3, [r2, #4]
}
 8046798:	bf00      	nop
 804679a:	46bd      	mov	sp, r7
 804679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80467a0:	4770      	bx	lr
 80467a2:	bf00      	nop
 80467a4:	e0044000 	.word	0xe0044000

080467a8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80467a8:	b480      	push	{r7}
 80467aa:	b083      	sub	sp, #12
 80467ac:	af00      	add	r7, sp, #0
 80467ae:	6078      	str	r0, [r7, #4]
 80467b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80467b2:	687b      	ldr	r3, [r7, #4]
 80467b4:	689b      	ldr	r3, [r3, #8]
 80467b6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80467ba:	683b      	ldr	r3, [r7, #0]
 80467bc:	431a      	orrs	r2, r3
 80467be:	687b      	ldr	r3, [r7, #4]
 80467c0:	609a      	str	r2, [r3, #8]
}
 80467c2:	bf00      	nop
 80467c4:	370c      	adds	r7, #12
 80467c6:	46bd      	mov	sp, r7
 80467c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80467cc:	4770      	bx	lr

080467ce <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80467ce:	b480      	push	{r7}
 80467d0:	b083      	sub	sp, #12
 80467d2:	af00      	add	r7, sp, #0
 80467d4:	6078      	str	r0, [r7, #4]
 80467d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80467d8:	687b      	ldr	r3, [r7, #4]
 80467da:	689b      	ldr	r3, [r3, #8]
 80467dc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80467e0:	683b      	ldr	r3, [r7, #0]
 80467e2:	431a      	orrs	r2, r3
 80467e4:	687b      	ldr	r3, [r7, #4]
 80467e6:	609a      	str	r2, [r3, #8]
}
 80467e8:	bf00      	nop
 80467ea:	370c      	adds	r7, #12
 80467ec:	46bd      	mov	sp, r7
 80467ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80467f2:	4770      	bx	lr

080467f4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80467f4:	b480      	push	{r7}
 80467f6:	b083      	sub	sp, #12
 80467f8:	af00      	add	r7, sp, #0
 80467fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80467fc:	687b      	ldr	r3, [r7, #4]
 80467fe:	689b      	ldr	r3, [r3, #8]
 8046800:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8046804:	4618      	mov	r0, r3
 8046806:	370c      	adds	r7, #12
 8046808:	46bd      	mov	sp, r7
 804680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804680e:	4770      	bx	lr

08046810 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8046810:	b480      	push	{r7}
 8046812:	b087      	sub	sp, #28
 8046814:	af00      	add	r7, sp, #0
 8046816:	60f8      	str	r0, [r7, #12]
 8046818:	60b9      	str	r1, [r7, #8]
 804681a:	607a      	str	r2, [r7, #4]
 804681c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 804681e:	68fb      	ldr	r3, [r7, #12]
 8046820:	3360      	adds	r3, #96	; 0x60
 8046822:	461a      	mov	r2, r3
 8046824:	68bb      	ldr	r3, [r7, #8]
 8046826:	009b      	lsls	r3, r3, #2
 8046828:	4413      	add	r3, r2
 804682a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 804682c:	697b      	ldr	r3, [r7, #20]
 804682e:	681a      	ldr	r2, [r3, #0]
 8046830:	4b08      	ldr	r3, [pc, #32]	; (8046854 <LL_ADC_SetOffset+0x44>)
 8046832:	4013      	ands	r3, r2
 8046834:	687a      	ldr	r2, [r7, #4]
 8046836:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 804683a:	683a      	ldr	r2, [r7, #0]
 804683c:	430a      	orrs	r2, r1
 804683e:	4313      	orrs	r3, r2
 8046840:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8046844:	697b      	ldr	r3, [r7, #20]
 8046846:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8046848:	bf00      	nop
 804684a:	371c      	adds	r7, #28
 804684c:	46bd      	mov	sp, r7
 804684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046852:	4770      	bx	lr
 8046854:	03fff000 	.word	0x03fff000

08046858 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8046858:	b480      	push	{r7}
 804685a:	b085      	sub	sp, #20
 804685c:	af00      	add	r7, sp, #0
 804685e:	6078      	str	r0, [r7, #4]
 8046860:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8046862:	687b      	ldr	r3, [r7, #4]
 8046864:	3360      	adds	r3, #96	; 0x60
 8046866:	461a      	mov	r2, r3
 8046868:	683b      	ldr	r3, [r7, #0]
 804686a:	009b      	lsls	r3, r3, #2
 804686c:	4413      	add	r3, r2
 804686e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8046870:	68fb      	ldr	r3, [r7, #12]
 8046872:	681b      	ldr	r3, [r3, #0]
 8046874:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8046878:	4618      	mov	r0, r3
 804687a:	3714      	adds	r7, #20
 804687c:	46bd      	mov	sp, r7
 804687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046882:	4770      	bx	lr

08046884 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8046884:	b480      	push	{r7}
 8046886:	b087      	sub	sp, #28
 8046888:	af00      	add	r7, sp, #0
 804688a:	60f8      	str	r0, [r7, #12]
 804688c:	60b9      	str	r1, [r7, #8]
 804688e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8046890:	68fb      	ldr	r3, [r7, #12]
 8046892:	3360      	adds	r3, #96	; 0x60
 8046894:	461a      	mov	r2, r3
 8046896:	68bb      	ldr	r3, [r7, #8]
 8046898:	009b      	lsls	r3, r3, #2
 804689a:	4413      	add	r3, r2
 804689c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 804689e:	697b      	ldr	r3, [r7, #20]
 80468a0:	681b      	ldr	r3, [r3, #0]
 80468a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80468a6:	687b      	ldr	r3, [r7, #4]
 80468a8:	431a      	orrs	r2, r3
 80468aa:	697b      	ldr	r3, [r7, #20]
 80468ac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80468ae:	bf00      	nop
 80468b0:	371c      	adds	r7, #28
 80468b2:	46bd      	mov	sp, r7
 80468b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80468b8:	4770      	bx	lr

080468ba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80468ba:	b480      	push	{r7}
 80468bc:	b083      	sub	sp, #12
 80468be:	af00      	add	r7, sp, #0
 80468c0:	6078      	str	r0, [r7, #4]
 80468c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80468c4:	687b      	ldr	r3, [r7, #4]
 80468c6:	695b      	ldr	r3, [r3, #20]
 80468c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80468cc:	683b      	ldr	r3, [r7, #0]
 80468ce:	431a      	orrs	r2, r3
 80468d0:	687b      	ldr	r3, [r7, #4]
 80468d2:	615a      	str	r2, [r3, #20]
}
 80468d4:	bf00      	nop
 80468d6:	370c      	adds	r7, #12
 80468d8:	46bd      	mov	sp, r7
 80468da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80468de:	4770      	bx	lr

080468e0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80468e0:	b480      	push	{r7}
 80468e2:	b083      	sub	sp, #12
 80468e4:	af00      	add	r7, sp, #0
 80468e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80468e8:	687b      	ldr	r3, [r7, #4]
 80468ea:	68db      	ldr	r3, [r3, #12]
 80468ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80468f0:	2b00      	cmp	r3, #0
 80468f2:	d101      	bne.n	80468f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80468f4:	2301      	movs	r3, #1
 80468f6:	e000      	b.n	80468fa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80468f8:	2300      	movs	r3, #0
}
 80468fa:	4618      	mov	r0, r3
 80468fc:	370c      	adds	r7, #12
 80468fe:	46bd      	mov	sp, r7
 8046900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046904:	4770      	bx	lr

08046906 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8046906:	b480      	push	{r7}
 8046908:	b087      	sub	sp, #28
 804690a:	af00      	add	r7, sp, #0
 804690c:	60f8      	str	r0, [r7, #12]
 804690e:	60b9      	str	r1, [r7, #8]
 8046910:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8046912:	68fb      	ldr	r3, [r7, #12]
 8046914:	3330      	adds	r3, #48	; 0x30
 8046916:	461a      	mov	r2, r3
 8046918:	68bb      	ldr	r3, [r7, #8]
 804691a:	0a1b      	lsrs	r3, r3, #8
 804691c:	009b      	lsls	r3, r3, #2
 804691e:	f003 030c 	and.w	r3, r3, #12
 8046922:	4413      	add	r3, r2
 8046924:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8046926:	697b      	ldr	r3, [r7, #20]
 8046928:	681a      	ldr	r2, [r3, #0]
 804692a:	68bb      	ldr	r3, [r7, #8]
 804692c:	f003 031f 	and.w	r3, r3, #31
 8046930:	211f      	movs	r1, #31
 8046932:	fa01 f303 	lsl.w	r3, r1, r3
 8046936:	43db      	mvns	r3, r3
 8046938:	401a      	ands	r2, r3
 804693a:	687b      	ldr	r3, [r7, #4]
 804693c:	0e9b      	lsrs	r3, r3, #26
 804693e:	f003 011f 	and.w	r1, r3, #31
 8046942:	68bb      	ldr	r3, [r7, #8]
 8046944:	f003 031f 	and.w	r3, r3, #31
 8046948:	fa01 f303 	lsl.w	r3, r1, r3
 804694c:	431a      	orrs	r2, r3
 804694e:	697b      	ldr	r3, [r7, #20]
 8046950:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8046952:	bf00      	nop
 8046954:	371c      	adds	r7, #28
 8046956:	46bd      	mov	sp, r7
 8046958:	f85d 7b04 	ldr.w	r7, [sp], #4
 804695c:	4770      	bx	lr

0804695e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 804695e:	b480      	push	{r7}
 8046960:	b083      	sub	sp, #12
 8046962:	af00      	add	r7, sp, #0
 8046964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8046966:	687b      	ldr	r3, [r7, #4]
 8046968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804696a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 804696e:	2b00      	cmp	r3, #0
 8046970:	d101      	bne.n	8046976 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8046972:	2301      	movs	r3, #1
 8046974:	e000      	b.n	8046978 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8046976:	2300      	movs	r3, #0
}
 8046978:	4618      	mov	r0, r3
 804697a:	370c      	adds	r7, #12
 804697c:	46bd      	mov	sp, r7
 804697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046982:	4770      	bx	lr

08046984 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8046984:	b480      	push	{r7}
 8046986:	b087      	sub	sp, #28
 8046988:	af00      	add	r7, sp, #0
 804698a:	60f8      	str	r0, [r7, #12]
 804698c:	60b9      	str	r1, [r7, #8]
 804698e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8046990:	68fb      	ldr	r3, [r7, #12]
 8046992:	3314      	adds	r3, #20
 8046994:	461a      	mov	r2, r3
 8046996:	68bb      	ldr	r3, [r7, #8]
 8046998:	0e5b      	lsrs	r3, r3, #25
 804699a:	009b      	lsls	r3, r3, #2
 804699c:	f003 0304 	and.w	r3, r3, #4
 80469a0:	4413      	add	r3, r2
 80469a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80469a4:	697b      	ldr	r3, [r7, #20]
 80469a6:	681a      	ldr	r2, [r3, #0]
 80469a8:	68bb      	ldr	r3, [r7, #8]
 80469aa:	0d1b      	lsrs	r3, r3, #20
 80469ac:	f003 031f 	and.w	r3, r3, #31
 80469b0:	2107      	movs	r1, #7
 80469b2:	fa01 f303 	lsl.w	r3, r1, r3
 80469b6:	43db      	mvns	r3, r3
 80469b8:	401a      	ands	r2, r3
 80469ba:	68bb      	ldr	r3, [r7, #8]
 80469bc:	0d1b      	lsrs	r3, r3, #20
 80469be:	f003 031f 	and.w	r3, r3, #31
 80469c2:	6879      	ldr	r1, [r7, #4]
 80469c4:	fa01 f303 	lsl.w	r3, r1, r3
 80469c8:	431a      	orrs	r2, r3
 80469ca:	697b      	ldr	r3, [r7, #20]
 80469cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80469ce:	bf00      	nop
 80469d0:	371c      	adds	r7, #28
 80469d2:	46bd      	mov	sp, r7
 80469d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80469d8:	4770      	bx	lr
	...

080469dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80469dc:	b480      	push	{r7}
 80469de:	b085      	sub	sp, #20
 80469e0:	af00      	add	r7, sp, #0
 80469e2:	60f8      	str	r0, [r7, #12]
 80469e4:	60b9      	str	r1, [r7, #8]
 80469e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80469e8:	68fb      	ldr	r3, [r7, #12]
 80469ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80469ee:	68bb      	ldr	r3, [r7, #8]
 80469f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80469f4:	43db      	mvns	r3, r3
 80469f6:	401a      	ands	r2, r3
 80469f8:	687b      	ldr	r3, [r7, #4]
 80469fa:	f003 0318 	and.w	r3, r3, #24
 80469fe:	4908      	ldr	r1, [pc, #32]	; (8046a20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8046a00:	40d9      	lsrs	r1, r3
 8046a02:	68bb      	ldr	r3, [r7, #8]
 8046a04:	400b      	ands	r3, r1
 8046a06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8046a0a:	431a      	orrs	r2, r3
 8046a0c:	68fb      	ldr	r3, [r7, #12]
 8046a0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8046a12:	bf00      	nop
 8046a14:	3714      	adds	r7, #20
 8046a16:	46bd      	mov	sp, r7
 8046a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046a1c:	4770      	bx	lr
 8046a1e:	bf00      	nop
 8046a20:	0007ffff 	.word	0x0007ffff

08046a24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8046a24:	b480      	push	{r7}
 8046a26:	b083      	sub	sp, #12
 8046a28:	af00      	add	r7, sp, #0
 8046a2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8046a2c:	687b      	ldr	r3, [r7, #4]
 8046a2e:	689b      	ldr	r3, [r3, #8]
 8046a30:	f003 031f 	and.w	r3, r3, #31
}
 8046a34:	4618      	mov	r0, r3
 8046a36:	370c      	adds	r7, #12
 8046a38:	46bd      	mov	sp, r7
 8046a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046a3e:	4770      	bx	lr

08046a40 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8046a40:	b480      	push	{r7}
 8046a42:	b083      	sub	sp, #12
 8046a44:	af00      	add	r7, sp, #0
 8046a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8046a48:	687b      	ldr	r3, [r7, #4]
 8046a4a:	689b      	ldr	r3, [r3, #8]
 8046a4c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8046a50:	4618      	mov	r0, r3
 8046a52:	370c      	adds	r7, #12
 8046a54:	46bd      	mov	sp, r7
 8046a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046a5a:	4770      	bx	lr

08046a5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8046a5c:	b480      	push	{r7}
 8046a5e:	b083      	sub	sp, #12
 8046a60:	af00      	add	r7, sp, #0
 8046a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8046a64:	687b      	ldr	r3, [r7, #4]
 8046a66:	689b      	ldr	r3, [r3, #8]
 8046a68:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8046a6c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8046a70:	687a      	ldr	r2, [r7, #4]
 8046a72:	6093      	str	r3, [r2, #8]
}
 8046a74:	bf00      	nop
 8046a76:	370c      	adds	r7, #12
 8046a78:	46bd      	mov	sp, r7
 8046a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046a7e:	4770      	bx	lr

08046a80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8046a80:	b480      	push	{r7}
 8046a82:	b083      	sub	sp, #12
 8046a84:	af00      	add	r7, sp, #0
 8046a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8046a88:	687b      	ldr	r3, [r7, #4]
 8046a8a:	689b      	ldr	r3, [r3, #8]
 8046a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8046a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8046a94:	d101      	bne.n	8046a9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8046a96:	2301      	movs	r3, #1
 8046a98:	e000      	b.n	8046a9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8046a9a:	2300      	movs	r3, #0
}
 8046a9c:	4618      	mov	r0, r3
 8046a9e:	370c      	adds	r7, #12
 8046aa0:	46bd      	mov	sp, r7
 8046aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046aa6:	4770      	bx	lr

08046aa8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8046aa8:	b480      	push	{r7}
 8046aaa:	b083      	sub	sp, #12
 8046aac:	af00      	add	r7, sp, #0
 8046aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8046ab0:	687b      	ldr	r3, [r7, #4]
 8046ab2:	689b      	ldr	r3, [r3, #8]
 8046ab4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8046ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8046abc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8046ac0:	687b      	ldr	r3, [r7, #4]
 8046ac2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8046ac4:	bf00      	nop
 8046ac6:	370c      	adds	r7, #12
 8046ac8:	46bd      	mov	sp, r7
 8046aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046ace:	4770      	bx	lr

08046ad0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8046ad0:	b480      	push	{r7}
 8046ad2:	b083      	sub	sp, #12
 8046ad4:	af00      	add	r7, sp, #0
 8046ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8046ad8:	687b      	ldr	r3, [r7, #4]
 8046ada:	689b      	ldr	r3, [r3, #8]
 8046adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8046ae0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8046ae4:	d101      	bne.n	8046aea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8046ae6:	2301      	movs	r3, #1
 8046ae8:	e000      	b.n	8046aec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8046aea:	2300      	movs	r3, #0
}
 8046aec:	4618      	mov	r0, r3
 8046aee:	370c      	adds	r7, #12
 8046af0:	46bd      	mov	sp, r7
 8046af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046af6:	4770      	bx	lr

08046af8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8046af8:	b480      	push	{r7}
 8046afa:	b083      	sub	sp, #12
 8046afc:	af00      	add	r7, sp, #0
 8046afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8046b00:	687b      	ldr	r3, [r7, #4]
 8046b02:	689b      	ldr	r3, [r3, #8]
 8046b04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8046b08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8046b0c:	f043 0201 	orr.w	r2, r3, #1
 8046b10:	687b      	ldr	r3, [r7, #4]
 8046b12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8046b14:	bf00      	nop
 8046b16:	370c      	adds	r7, #12
 8046b18:	46bd      	mov	sp, r7
 8046b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046b1e:	4770      	bx	lr

08046b20 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8046b20:	b480      	push	{r7}
 8046b22:	b083      	sub	sp, #12
 8046b24:	af00      	add	r7, sp, #0
 8046b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8046b28:	687b      	ldr	r3, [r7, #4]
 8046b2a:	689b      	ldr	r3, [r3, #8]
 8046b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8046b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8046b34:	f043 0202 	orr.w	r2, r3, #2
 8046b38:	687b      	ldr	r3, [r7, #4]
 8046b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8046b3c:	bf00      	nop
 8046b3e:	370c      	adds	r7, #12
 8046b40:	46bd      	mov	sp, r7
 8046b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046b46:	4770      	bx	lr

08046b48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8046b48:	b480      	push	{r7}
 8046b4a:	b083      	sub	sp, #12
 8046b4c:	af00      	add	r7, sp, #0
 8046b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8046b50:	687b      	ldr	r3, [r7, #4]
 8046b52:	689b      	ldr	r3, [r3, #8]
 8046b54:	f003 0301 	and.w	r3, r3, #1
 8046b58:	2b01      	cmp	r3, #1
 8046b5a:	d101      	bne.n	8046b60 <LL_ADC_IsEnabled+0x18>
 8046b5c:	2301      	movs	r3, #1
 8046b5e:	e000      	b.n	8046b62 <LL_ADC_IsEnabled+0x1a>
 8046b60:	2300      	movs	r3, #0
}
 8046b62:	4618      	mov	r0, r3
 8046b64:	370c      	adds	r7, #12
 8046b66:	46bd      	mov	sp, r7
 8046b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046b6c:	4770      	bx	lr

08046b6e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8046b6e:	b480      	push	{r7}
 8046b70:	b083      	sub	sp, #12
 8046b72:	af00      	add	r7, sp, #0
 8046b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8046b76:	687b      	ldr	r3, [r7, #4]
 8046b78:	689b      	ldr	r3, [r3, #8]
 8046b7a:	f003 0302 	and.w	r3, r3, #2
 8046b7e:	2b02      	cmp	r3, #2
 8046b80:	d101      	bne.n	8046b86 <LL_ADC_IsDisableOngoing+0x18>
 8046b82:	2301      	movs	r3, #1
 8046b84:	e000      	b.n	8046b88 <LL_ADC_IsDisableOngoing+0x1a>
 8046b86:	2300      	movs	r3, #0
}
 8046b88:	4618      	mov	r0, r3
 8046b8a:	370c      	adds	r7, #12
 8046b8c:	46bd      	mov	sp, r7
 8046b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046b92:	4770      	bx	lr

08046b94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8046b94:	b480      	push	{r7}
 8046b96:	b083      	sub	sp, #12
 8046b98:	af00      	add	r7, sp, #0
 8046b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8046b9c:	687b      	ldr	r3, [r7, #4]
 8046b9e:	689b      	ldr	r3, [r3, #8]
 8046ba0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8046ba4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8046ba8:	f043 0204 	orr.w	r2, r3, #4
 8046bac:	687b      	ldr	r3, [r7, #4]
 8046bae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8046bb0:	bf00      	nop
 8046bb2:	370c      	adds	r7, #12
 8046bb4:	46bd      	mov	sp, r7
 8046bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046bba:	4770      	bx	lr

08046bbc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8046bbc:	b480      	push	{r7}
 8046bbe:	b083      	sub	sp, #12
 8046bc0:	af00      	add	r7, sp, #0
 8046bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8046bc4:	687b      	ldr	r3, [r7, #4]
 8046bc6:	689b      	ldr	r3, [r3, #8]
 8046bc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8046bcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8046bd0:	f043 0210 	orr.w	r2, r3, #16
 8046bd4:	687b      	ldr	r3, [r7, #4]
 8046bd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8046bd8:	bf00      	nop
 8046bda:	370c      	adds	r7, #12
 8046bdc:	46bd      	mov	sp, r7
 8046bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046be2:	4770      	bx	lr

08046be4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8046be4:	b480      	push	{r7}
 8046be6:	b083      	sub	sp, #12
 8046be8:	af00      	add	r7, sp, #0
 8046bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8046bec:	687b      	ldr	r3, [r7, #4]
 8046bee:	689b      	ldr	r3, [r3, #8]
 8046bf0:	f003 0304 	and.w	r3, r3, #4
 8046bf4:	2b04      	cmp	r3, #4
 8046bf6:	d101      	bne.n	8046bfc <LL_ADC_REG_IsConversionOngoing+0x18>
 8046bf8:	2301      	movs	r3, #1
 8046bfa:	e000      	b.n	8046bfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8046bfc:	2300      	movs	r3, #0
}
 8046bfe:	4618      	mov	r0, r3
 8046c00:	370c      	adds	r7, #12
 8046c02:	46bd      	mov	sp, r7
 8046c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046c08:	4770      	bx	lr

08046c0a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8046c0a:	b480      	push	{r7}
 8046c0c:	b083      	sub	sp, #12
 8046c0e:	af00      	add	r7, sp, #0
 8046c10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8046c12:	687b      	ldr	r3, [r7, #4]
 8046c14:	689b      	ldr	r3, [r3, #8]
 8046c16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8046c1a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8046c1e:	f043 0220 	orr.w	r2, r3, #32
 8046c22:	687b      	ldr	r3, [r7, #4]
 8046c24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8046c26:	bf00      	nop
 8046c28:	370c      	adds	r7, #12
 8046c2a:	46bd      	mov	sp, r7
 8046c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046c30:	4770      	bx	lr

08046c32 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8046c32:	b480      	push	{r7}
 8046c34:	b083      	sub	sp, #12
 8046c36:	af00      	add	r7, sp, #0
 8046c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8046c3a:	687b      	ldr	r3, [r7, #4]
 8046c3c:	689b      	ldr	r3, [r3, #8]
 8046c3e:	f003 0308 	and.w	r3, r3, #8
 8046c42:	2b08      	cmp	r3, #8
 8046c44:	d101      	bne.n	8046c4a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8046c46:	2301      	movs	r3, #1
 8046c48:	e000      	b.n	8046c4c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8046c4a:	2300      	movs	r3, #0
}
 8046c4c:	4618      	mov	r0, r3
 8046c4e:	370c      	adds	r7, #12
 8046c50:	46bd      	mov	sp, r7
 8046c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046c56:	4770      	bx	lr

08046c58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8046c58:	b590      	push	{r4, r7, lr}
 8046c5a:	b089      	sub	sp, #36	; 0x24
 8046c5c:	af00      	add	r7, sp, #0
 8046c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8046c60:	2300      	movs	r3, #0
 8046c62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8046c64:	2300      	movs	r3, #0
 8046c66:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8046c68:	687b      	ldr	r3, [r7, #4]
 8046c6a:	2b00      	cmp	r3, #0
 8046c6c:	d101      	bne.n	8046c72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8046c6e:	2301      	movs	r3, #1
 8046c70:	e17c      	b.n	8046f6c <HAL_ADC_Init+0x314>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8046c72:	687b      	ldr	r3, [r7, #4]
 8046c74:	691b      	ldr	r3, [r3, #16]
 8046c76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8046c78:	687b      	ldr	r3, [r7, #4]
 8046c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046c7c:	2b00      	cmp	r3, #0
 8046c7e:	d132      	bne.n	8046ce6 <HAL_ADC_Init+0x8e>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8046c80:	687b      	ldr	r3, [r7, #4]
 8046c82:	4a9d      	ldr	r2, [pc, #628]	; (8046ef8 <HAL_ADC_Init+0x2a0>)
 8046c84:	669a      	str	r2, [r3, #104]	; 0x68
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8046c86:	687b      	ldr	r3, [r7, #4]
 8046c88:	4a9c      	ldr	r2, [pc, #624]	; (8046efc <HAL_ADC_Init+0x2a4>)
 8046c8a:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8046c8c:	687b      	ldr	r3, [r7, #4]
 8046c8e:	4a9c      	ldr	r2, [pc, #624]	; (8046f00 <HAL_ADC_Init+0x2a8>)
 8046c90:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8046c92:	687b      	ldr	r3, [r7, #4]
 8046c94:	4a9b      	ldr	r2, [pc, #620]	; (8046f04 <HAL_ADC_Init+0x2ac>)
 8046c96:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8046c98:	687b      	ldr	r3, [r7, #4]
 8046c9a:	4a9b      	ldr	r2, [pc, #620]	; (8046f08 <HAL_ADC_Init+0x2b0>)
 8046c9c:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8046c9e:	687b      	ldr	r3, [r7, #4]
 8046ca0:	4a9a      	ldr	r2, [pc, #616]	; (8046f0c <HAL_ADC_Init+0x2b4>)
 8046ca2:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8046ca4:	687b      	ldr	r3, [r7, #4]
 8046ca6:	4a9a      	ldr	r2, [pc, #616]	; (8046f10 <HAL_ADC_Init+0x2b8>)
 8046ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8046cac:	687b      	ldr	r3, [r7, #4]
 8046cae:	4a99      	ldr	r2, [pc, #612]	; (8046f14 <HAL_ADC_Init+0x2bc>)
 8046cb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8046cb4:	687b      	ldr	r3, [r7, #4]
 8046cb6:	4a98      	ldr	r2, [pc, #608]	; (8046f18 <HAL_ADC_Init+0x2c0>)
 8046cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (hadc->MspInitCallback == NULL)
 8046cbc:	687b      	ldr	r3, [r7, #4]
 8046cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8046cc2:	2b00      	cmp	r3, #0
 8046cc4:	d103      	bne.n	8046cce <HAL_ADC_Init+0x76>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8046cc6:	687b      	ldr	r3, [r7, #4]
 8046cc8:	4a94      	ldr	r2, [pc, #592]	; (8046f1c <HAL_ADC_Init+0x2c4>)
 8046cca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8046cce:	687b      	ldr	r3, [r7, #4]
 8046cd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8046cd4:	6878      	ldr	r0, [r7, #4]
 8046cd6:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8046cd8:	687b      	ldr	r3, [r7, #4]
 8046cda:	2200      	movs	r2, #0
 8046cdc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8046cde:	687b      	ldr	r3, [r7, #4]
 8046ce0:	2200      	movs	r2, #0
 8046ce2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8046ce6:	687b      	ldr	r3, [r7, #4]
 8046ce8:	681b      	ldr	r3, [r3, #0]
 8046cea:	4618      	mov	r0, r3
 8046cec:	f7ff fec8 	bl	8046a80 <LL_ADC_IsDeepPowerDownEnabled>
 8046cf0:	4603      	mov	r3, r0
 8046cf2:	2b00      	cmp	r3, #0
 8046cf4:	d004      	beq.n	8046d00 <HAL_ADC_Init+0xa8>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8046cf6:	687b      	ldr	r3, [r7, #4]
 8046cf8:	681b      	ldr	r3, [r3, #0]
 8046cfa:	4618      	mov	r0, r3
 8046cfc:	f7ff feae 	bl	8046a5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8046d00:	687b      	ldr	r3, [r7, #4]
 8046d02:	681b      	ldr	r3, [r3, #0]
 8046d04:	4618      	mov	r0, r3
 8046d06:	f7ff fee3 	bl	8046ad0 <LL_ADC_IsInternalRegulatorEnabled>
 8046d0a:	4603      	mov	r3, r0
 8046d0c:	2b00      	cmp	r3, #0
 8046d0e:	d113      	bne.n	8046d38 <HAL_ADC_Init+0xe0>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8046d10:	687b      	ldr	r3, [r7, #4]
 8046d12:	681b      	ldr	r3, [r3, #0]
 8046d14:	4618      	mov	r0, r3
 8046d16:	f7ff fec7 	bl	8046aa8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8046d1a:	4b81      	ldr	r3, [pc, #516]	; (8046f20 <HAL_ADC_Init+0x2c8>)
 8046d1c:	681b      	ldr	r3, [r3, #0]
 8046d1e:	099b      	lsrs	r3, r3, #6
 8046d20:	4a80      	ldr	r2, [pc, #512]	; (8046f24 <HAL_ADC_Init+0x2cc>)
 8046d22:	fba2 2303 	umull	r2, r3, r2, r3
 8046d26:	099b      	lsrs	r3, r3, #6
 8046d28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8046d2a:	e002      	b.n	8046d32 <HAL_ADC_Init+0xda>
    {
      wait_loop_index--;
 8046d2c:	68bb      	ldr	r3, [r7, #8]
 8046d2e:	3b01      	subs	r3, #1
 8046d30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8046d32:	68bb      	ldr	r3, [r7, #8]
 8046d34:	2b00      	cmp	r3, #0
 8046d36:	d1f9      	bne.n	8046d2c <HAL_ADC_Init+0xd4>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8046d38:	687b      	ldr	r3, [r7, #4]
 8046d3a:	681b      	ldr	r3, [r3, #0]
 8046d3c:	4618      	mov	r0, r3
 8046d3e:	f7ff fec7 	bl	8046ad0 <LL_ADC_IsInternalRegulatorEnabled>
 8046d42:	4603      	mov	r3, r0
 8046d44:	2b00      	cmp	r3, #0
 8046d46:	d10d      	bne.n	8046d64 <HAL_ADC_Init+0x10c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8046d48:	687b      	ldr	r3, [r7, #4]
 8046d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046d4c:	f043 0210 	orr.w	r2, r3, #16
 8046d50:	687b      	ldr	r3, [r7, #4]
 8046d52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8046d54:	687b      	ldr	r3, [r7, #4]
 8046d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8046d58:	f043 0201 	orr.w	r2, r3, #1
 8046d5c:	687b      	ldr	r3, [r7, #4]
 8046d5e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8046d60:	2301      	movs	r3, #1
 8046d62:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8046d64:	687b      	ldr	r3, [r7, #4]
 8046d66:	681b      	ldr	r3, [r3, #0]
 8046d68:	4618      	mov	r0, r3
 8046d6a:	f7ff ff3b 	bl	8046be4 <LL_ADC_REG_IsConversionOngoing>
 8046d6e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8046d70:	687b      	ldr	r3, [r7, #4]
 8046d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046d74:	f003 0310 	and.w	r3, r3, #16
 8046d78:	2b00      	cmp	r3, #0
 8046d7a:	f040 80ee 	bne.w	8046f5a <HAL_ADC_Init+0x302>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8046d7e:	697b      	ldr	r3, [r7, #20]
 8046d80:	2b00      	cmp	r3, #0
 8046d82:	f040 80ea 	bne.w	8046f5a <HAL_ADC_Init+0x302>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8046d86:	687b      	ldr	r3, [r7, #4]
 8046d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046d8a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8046d8e:	f043 0202 	orr.w	r2, r3, #2
 8046d92:	687b      	ldr	r3, [r7, #4]
 8046d94:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8046d96:	687b      	ldr	r3, [r7, #4]
 8046d98:	681b      	ldr	r3, [r3, #0]
 8046d9a:	4618      	mov	r0, r3
 8046d9c:	f7ff fed4 	bl	8046b48 <LL_ADC_IsEnabled>
 8046da0:	4603      	mov	r3, r0
 8046da2:	2b00      	cmp	r3, #0
 8046da4:	d110      	bne.n	8046dc8 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8046da6:	4860      	ldr	r0, [pc, #384]	; (8046f28 <HAL_ADC_Init+0x2d0>)
 8046da8:	f7ff fece 	bl	8046b48 <LL_ADC_IsEnabled>
 8046dac:	4604      	mov	r4, r0
 8046dae:	485f      	ldr	r0, [pc, #380]	; (8046f2c <HAL_ADC_Init+0x2d4>)
 8046db0:	f7ff feca 	bl	8046b48 <LL_ADC_IsEnabled>
 8046db4:	4603      	mov	r3, r0
 8046db6:	4323      	orrs	r3, r4
 8046db8:	2b00      	cmp	r3, #0
 8046dba:	d105      	bne.n	8046dc8 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8046dbc:	687b      	ldr	r3, [r7, #4]
 8046dbe:	685b      	ldr	r3, [r3, #4]
 8046dc0:	4619      	mov	r1, r3
 8046dc2:	485b      	ldr	r0, [pc, #364]	; (8046f30 <HAL_ADC_Init+0x2d8>)
 8046dc4:	f7ff fcf0 	bl	80467a8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8046dc8:	687b      	ldr	r3, [r7, #4]
 8046dca:	7e5b      	ldrb	r3, [r3, #25]
 8046dcc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8046dce:	687b      	ldr	r3, [r7, #4]
 8046dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8046dd2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8046dd4:	687b      	ldr	r3, [r7, #4]
 8046dd6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8046dd8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8046dda:	687b      	ldr	r3, [r7, #4]
 8046ddc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8046dde:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8046de0:	687b      	ldr	r3, [r7, #4]
 8046de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8046de6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8046de8:	4313      	orrs	r3, r2
 8046dea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8046dec:	687b      	ldr	r3, [r7, #4]
 8046dee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8046df2:	2b01      	cmp	r3, #1
 8046df4:	d106      	bne.n	8046e04 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8046df6:	687b      	ldr	r3, [r7, #4]
 8046df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046dfa:	3b01      	subs	r3, #1
 8046dfc:	045b      	lsls	r3, r3, #17
 8046dfe:	69ba      	ldr	r2, [r7, #24]
 8046e00:	4313      	orrs	r3, r2
 8046e02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8046e04:	687b      	ldr	r3, [r7, #4]
 8046e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046e08:	2b00      	cmp	r3, #0
 8046e0a:	d009      	beq.n	8046e20 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8046e0c:	687b      	ldr	r3, [r7, #4]
 8046e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8046e10:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8046e14:	687b      	ldr	r3, [r7, #4]
 8046e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8046e18:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8046e1a:	69ba      	ldr	r2, [r7, #24]
 8046e1c:	4313      	orrs	r3, r2
 8046e1e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8046e20:	687b      	ldr	r3, [r7, #4]
 8046e22:	681b      	ldr	r3, [r3, #0]
 8046e24:	68da      	ldr	r2, [r3, #12]
 8046e26:	4b43      	ldr	r3, [pc, #268]	; (8046f34 <HAL_ADC_Init+0x2dc>)
 8046e28:	4013      	ands	r3, r2
 8046e2a:	687a      	ldr	r2, [r7, #4]
 8046e2c:	6812      	ldr	r2, [r2, #0]
 8046e2e:	69b9      	ldr	r1, [r7, #24]
 8046e30:	430b      	orrs	r3, r1
 8046e32:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8046e34:	687b      	ldr	r3, [r7, #4]
 8046e36:	681b      	ldr	r3, [r3, #0]
 8046e38:	4618      	mov	r0, r3
 8046e3a:	f7ff fed3 	bl	8046be4 <LL_ADC_REG_IsConversionOngoing>
 8046e3e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8046e40:	687b      	ldr	r3, [r7, #4]
 8046e42:	681b      	ldr	r3, [r3, #0]
 8046e44:	4618      	mov	r0, r3
 8046e46:	f7ff fef4 	bl	8046c32 <LL_ADC_INJ_IsConversionOngoing>
 8046e4a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8046e4c:	693b      	ldr	r3, [r7, #16]
 8046e4e:	2b00      	cmp	r3, #0
 8046e50:	d140      	bne.n	8046ed4 <HAL_ADC_Init+0x27c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8046e52:	68fb      	ldr	r3, [r7, #12]
 8046e54:	2b00      	cmp	r3, #0
 8046e56:	d13d      	bne.n	8046ed4 <HAL_ADC_Init+0x27c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8046e58:	687b      	ldr	r3, [r7, #4]
 8046e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8046e5c:	687b      	ldr	r3, [r7, #4]
 8046e5e:	7e1b      	ldrb	r3, [r3, #24]
 8046e60:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8046e62:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8046e64:	687b      	ldr	r3, [r7, #4]
 8046e66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8046e6a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8046e6c:	4313      	orrs	r3, r2
 8046e6e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8046e70:	687b      	ldr	r3, [r7, #4]
 8046e72:	681b      	ldr	r3, [r3, #0]
 8046e74:	68db      	ldr	r3, [r3, #12]
 8046e76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8046e7a:	f023 0306 	bic.w	r3, r3, #6
 8046e7e:	687a      	ldr	r2, [r7, #4]
 8046e80:	6812      	ldr	r2, [r2, #0]
 8046e82:	69b9      	ldr	r1, [r7, #24]
 8046e84:	430b      	orrs	r3, r1
 8046e86:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8046e88:	687b      	ldr	r3, [r7, #4]
 8046e8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8046e8e:	2b01      	cmp	r3, #1
 8046e90:	d118      	bne.n	8046ec4 <HAL_ADC_Init+0x26c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8046e92:	687b      	ldr	r3, [r7, #4]
 8046e94:	681b      	ldr	r3, [r3, #0]
 8046e96:	691b      	ldr	r3, [r3, #16]
 8046e98:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8046e9c:	f023 0304 	bic.w	r3, r3, #4
 8046ea0:	687a      	ldr	r2, [r7, #4]
 8046ea2:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8046ea4:	687a      	ldr	r2, [r7, #4]
 8046ea6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8046ea8:	4311      	orrs	r1, r2
 8046eaa:	687a      	ldr	r2, [r7, #4]
 8046eac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8046eae:	4311      	orrs	r1, r2
 8046eb0:	687a      	ldr	r2, [r7, #4]
 8046eb2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8046eb4:	430a      	orrs	r2, r1
 8046eb6:	431a      	orrs	r2, r3
 8046eb8:	687b      	ldr	r3, [r7, #4]
 8046eba:	681b      	ldr	r3, [r3, #0]
 8046ebc:	f042 0201 	orr.w	r2, r2, #1
 8046ec0:	611a      	str	r2, [r3, #16]
 8046ec2:	e007      	b.n	8046ed4 <HAL_ADC_Init+0x27c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8046ec4:	687b      	ldr	r3, [r7, #4]
 8046ec6:	681b      	ldr	r3, [r3, #0]
 8046ec8:	691a      	ldr	r2, [r3, #16]
 8046eca:	687b      	ldr	r3, [r7, #4]
 8046ecc:	681b      	ldr	r3, [r3, #0]
 8046ece:	f022 0201 	bic.w	r2, r2, #1
 8046ed2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8046ed4:	687b      	ldr	r3, [r7, #4]
 8046ed6:	691b      	ldr	r3, [r3, #16]
 8046ed8:	2b01      	cmp	r3, #1
 8046eda:	d12d      	bne.n	8046f38 <HAL_ADC_Init+0x2e0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8046edc:	687b      	ldr	r3, [r7, #4]
 8046ede:	681b      	ldr	r3, [r3, #0]
 8046ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046ee2:	f023 010f 	bic.w	r1, r3, #15
 8046ee6:	687b      	ldr	r3, [r7, #4]
 8046ee8:	69db      	ldr	r3, [r3, #28]
 8046eea:	1e5a      	subs	r2, r3, #1
 8046eec:	687b      	ldr	r3, [r7, #4]
 8046eee:	681b      	ldr	r3, [r3, #0]
 8046ef0:	430a      	orrs	r2, r1
 8046ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8046ef4:	e028      	b.n	8046f48 <HAL_ADC_Init+0x2f0>
 8046ef6:	bf00      	nop
 8046ef8:	08047755 	.word	0x08047755
 8046efc:	08047769 	.word	0x08047769
 8046f00:	0804777d 	.word	0x0804777d
 8046f04:	08047791 	.word	0x08047791
 8046f08:	080482a5 	.word	0x080482a5
 8046f0c:	080482b9 	.word	0x080482b9
 8046f10:	080482cd 	.word	0x080482cd
 8046f14:	080482e1 	.word	0x080482e1
 8046f18:	080482f5 	.word	0x080482f5
 8046f1c:	08040709 	.word	0x08040709
 8046f20:	20018024 	.word	0x20018024
 8046f24:	053e2d63 	.word	0x053e2d63
 8046f28:	42028000 	.word	0x42028000
 8046f2c:	42028100 	.word	0x42028100
 8046f30:	42028300 	.word	0x42028300
 8046f34:	fff0c007 	.word	0xfff0c007
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8046f38:	687b      	ldr	r3, [r7, #4]
 8046f3a:	681b      	ldr	r3, [r3, #0]
 8046f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8046f3e:	687b      	ldr	r3, [r7, #4]
 8046f40:	681b      	ldr	r3, [r3, #0]
 8046f42:	f022 020f 	bic.w	r2, r2, #15
 8046f46:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8046f48:	687b      	ldr	r3, [r7, #4]
 8046f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046f4c:	f023 0303 	bic.w	r3, r3, #3
 8046f50:	f043 0201 	orr.w	r2, r3, #1
 8046f54:	687b      	ldr	r3, [r7, #4]
 8046f56:	659a      	str	r2, [r3, #88]	; 0x58
 8046f58:	e007      	b.n	8046f6a <HAL_ADC_Init+0x312>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8046f5a:	687b      	ldr	r3, [r7, #4]
 8046f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046f5e:	f043 0210 	orr.w	r2, r3, #16
 8046f62:	687b      	ldr	r3, [r7, #4]
 8046f64:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8046f66:	2301      	movs	r3, #1
 8046f68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8046f6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8046f6c:	4618      	mov	r0, r3
 8046f6e:	3724      	adds	r7, #36	; 0x24
 8046f70:	46bd      	mov	sp, r7
 8046f72:	bd90      	pop	{r4, r7, pc}

08046f74 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8046f74:	b580      	push	{r7, lr}
 8046f76:	b086      	sub	sp, #24
 8046f78:	af00      	add	r7, sp, #0
 8046f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8046f7c:	4857      	ldr	r0, [pc, #348]	; (80470dc <HAL_ADC_Start+0x168>)
 8046f7e:	f7ff fd51 	bl	8046a24 <LL_ADC_GetMultimode>
 8046f82:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8046f84:	687b      	ldr	r3, [r7, #4]
 8046f86:	681b      	ldr	r3, [r3, #0]
 8046f88:	4618      	mov	r0, r3
 8046f8a:	f7ff fe2b 	bl	8046be4 <LL_ADC_REG_IsConversionOngoing>
 8046f8e:	4603      	mov	r3, r0
 8046f90:	2b00      	cmp	r3, #0
 8046f92:	f040 809c 	bne.w	80470ce <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8046f96:	687b      	ldr	r3, [r7, #4]
 8046f98:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8046f9c:	2b01      	cmp	r3, #1
 8046f9e:	d101      	bne.n	8046fa4 <HAL_ADC_Start+0x30>
 8046fa0:	2302      	movs	r3, #2
 8046fa2:	e097      	b.n	80470d4 <HAL_ADC_Start+0x160>
 8046fa4:	687b      	ldr	r3, [r7, #4]
 8046fa6:	2201      	movs	r2, #1
 8046fa8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8046fac:	6878      	ldr	r0, [r7, #4]
 8046fae:	f001 f8a1 	bl	80480f4 <ADC_Enable>
 8046fb2:	4603      	mov	r3, r0
 8046fb4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8046fb6:	7dfb      	ldrb	r3, [r7, #23]
 8046fb8:	2b00      	cmp	r3, #0
 8046fba:	f040 8083 	bne.w	80470c4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8046fbe:	687b      	ldr	r3, [r7, #4]
 8046fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046fc2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8046fc6:	f023 0301 	bic.w	r3, r3, #1
 8046fca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8046fce:	687b      	ldr	r3, [r7, #4]
 8046fd0:	659a      	str	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8046fd2:	687b      	ldr	r3, [r7, #4]
 8046fd4:	681b      	ldr	r3, [r3, #0]
 8046fd6:	4a42      	ldr	r2, [pc, #264]	; (80470e0 <HAL_ADC_Start+0x16c>)
 8046fd8:	4293      	cmp	r3, r2
 8046fda:	d002      	beq.n	8046fe2 <HAL_ADC_Start+0x6e>
 8046fdc:	687b      	ldr	r3, [r7, #4]
 8046fde:	681b      	ldr	r3, [r3, #0]
 8046fe0:	e000      	b.n	8046fe4 <HAL_ADC_Start+0x70>
 8046fe2:	4b40      	ldr	r3, [pc, #256]	; (80470e4 <HAL_ADC_Start+0x170>)
 8046fe4:	687a      	ldr	r2, [r7, #4]
 8046fe6:	6812      	ldr	r2, [r2, #0]
 8046fe8:	4293      	cmp	r3, r2
 8046fea:	d002      	beq.n	8046ff2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8046fec:	693b      	ldr	r3, [r7, #16]
 8046fee:	2b00      	cmp	r3, #0
 8046ff0:	d105      	bne.n	8046ffe <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8046ff2:	687b      	ldr	r3, [r7, #4]
 8046ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046ff6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8046ffa:	687b      	ldr	r3, [r7, #4]
 8046ffc:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8046ffe:	687b      	ldr	r3, [r7, #4]
 8047000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8047006:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804700a:	d106      	bne.n	804701a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 804700c:	687b      	ldr	r3, [r7, #4]
 804700e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8047010:	f023 0206 	bic.w	r2, r3, #6
 8047014:	687b      	ldr	r3, [r7, #4]
 8047016:	65da      	str	r2, [r3, #92]	; 0x5c
 8047018:	e002      	b.n	8047020 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 804701a:	687b      	ldr	r3, [r7, #4]
 804701c:	2200      	movs	r2, #0
 804701e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8047020:	687b      	ldr	r3, [r7, #4]
 8047022:	681b      	ldr	r3, [r3, #0]
 8047024:	221c      	movs	r2, #28
 8047026:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8047028:	687b      	ldr	r3, [r7, #4]
 804702a:	2200      	movs	r2, #0
 804702c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8047030:	687b      	ldr	r3, [r7, #4]
 8047032:	681b      	ldr	r3, [r3, #0]
 8047034:	4a2a      	ldr	r2, [pc, #168]	; (80470e0 <HAL_ADC_Start+0x16c>)
 8047036:	4293      	cmp	r3, r2
 8047038:	d002      	beq.n	8047040 <HAL_ADC_Start+0xcc>
 804703a:	687b      	ldr	r3, [r7, #4]
 804703c:	681b      	ldr	r3, [r3, #0]
 804703e:	e000      	b.n	8047042 <HAL_ADC_Start+0xce>
 8047040:	4b28      	ldr	r3, [pc, #160]	; (80470e4 <HAL_ADC_Start+0x170>)
 8047042:	687a      	ldr	r2, [r7, #4]
 8047044:	6812      	ldr	r2, [r2, #0]
 8047046:	4293      	cmp	r3, r2
 8047048:	d008      	beq.n	804705c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 804704a:	693b      	ldr	r3, [r7, #16]
 804704c:	2b00      	cmp	r3, #0
 804704e:	d005      	beq.n	804705c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8047050:	693b      	ldr	r3, [r7, #16]
 8047052:	2b05      	cmp	r3, #5
 8047054:	d002      	beq.n	804705c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8047056:	693b      	ldr	r3, [r7, #16]
 8047058:	2b09      	cmp	r3, #9
 804705a:	d114      	bne.n	8047086 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 804705c:	687b      	ldr	r3, [r7, #4]
 804705e:	681b      	ldr	r3, [r3, #0]
 8047060:	68db      	ldr	r3, [r3, #12]
 8047062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8047066:	2b00      	cmp	r3, #0
 8047068:	d007      	beq.n	804707a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 804706a:	687b      	ldr	r3, [r7, #4]
 804706c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804706e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8047072:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8047076:	687b      	ldr	r3, [r7, #4]
 8047078:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 804707a:	687b      	ldr	r3, [r7, #4]
 804707c:	681b      	ldr	r3, [r3, #0]
 804707e:	4618      	mov	r0, r3
 8047080:	f7ff fd88 	bl	8046b94 <LL_ADC_REG_StartConversion>
 8047084:	e025      	b.n	80470d2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8047086:	687b      	ldr	r3, [r7, #4]
 8047088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804708a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 804708e:	687b      	ldr	r3, [r7, #4]
 8047090:	659a      	str	r2, [r3, #88]	; 0x58
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8047092:	687b      	ldr	r3, [r7, #4]
 8047094:	681b      	ldr	r3, [r3, #0]
 8047096:	4a12      	ldr	r2, [pc, #72]	; (80470e0 <HAL_ADC_Start+0x16c>)
 8047098:	4293      	cmp	r3, r2
 804709a:	d002      	beq.n	80470a2 <HAL_ADC_Start+0x12e>
 804709c:	687b      	ldr	r3, [r7, #4]
 804709e:	681b      	ldr	r3, [r3, #0]
 80470a0:	e000      	b.n	80470a4 <HAL_ADC_Start+0x130>
 80470a2:	4b10      	ldr	r3, [pc, #64]	; (80470e4 <HAL_ADC_Start+0x170>)
 80470a4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80470a6:	68fb      	ldr	r3, [r7, #12]
 80470a8:	68db      	ldr	r3, [r3, #12]
 80470aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80470ae:	2b00      	cmp	r3, #0
 80470b0:	d00f      	beq.n	80470d2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80470b2:	687b      	ldr	r3, [r7, #4]
 80470b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80470b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80470ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80470be:	687b      	ldr	r3, [r7, #4]
 80470c0:	659a      	str	r2, [r3, #88]	; 0x58
 80470c2:	e006      	b.n	80470d2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80470c4:	687b      	ldr	r3, [r7, #4]
 80470c6:	2200      	movs	r2, #0
 80470c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80470cc:	e001      	b.n	80470d2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80470ce:	2302      	movs	r3, #2
 80470d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80470d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80470d4:	4618      	mov	r0, r3
 80470d6:	3718      	adds	r7, #24
 80470d8:	46bd      	mov	sp, r7
 80470da:	bd80      	pop	{r7, pc}
 80470dc:	42028300 	.word	0x42028300
 80470e0:	42028100 	.word	0x42028100
 80470e4:	42028000 	.word	0x42028000

080470e8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80470e8:	b580      	push	{r7, lr}
 80470ea:	b084      	sub	sp, #16
 80470ec:	af00      	add	r7, sp, #0
 80470ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80470f0:	687b      	ldr	r3, [r7, #4]
 80470f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80470f6:	2b01      	cmp	r3, #1
 80470f8:	d101      	bne.n	80470fe <HAL_ADC_Stop+0x16>
 80470fa:	2302      	movs	r3, #2
 80470fc:	e023      	b.n	8047146 <HAL_ADC_Stop+0x5e>
 80470fe:	687b      	ldr	r3, [r7, #4]
 8047100:	2201      	movs	r2, #1
 8047102:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8047106:	2103      	movs	r1, #3
 8047108:	6878      	ldr	r0, [r7, #4]
 804710a:	f000 ff3f 	bl	8047f8c <ADC_ConversionStop>
 804710e:	4603      	mov	r3, r0
 8047110:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8047112:	7bfb      	ldrb	r3, [r7, #15]
 8047114:	2b00      	cmp	r3, #0
 8047116:	d111      	bne.n	804713c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8047118:	6878      	ldr	r0, [r7, #4]
 804711a:	f001 f845 	bl	80481a8 <ADC_Disable>
 804711e:	4603      	mov	r3, r0
 8047120:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8047122:	7bfb      	ldrb	r3, [r7, #15]
 8047124:	2b00      	cmp	r3, #0
 8047126:	d109      	bne.n	804713c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8047128:	687b      	ldr	r3, [r7, #4]
 804712a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804712c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8047130:	f023 0301 	bic.w	r3, r3, #1
 8047134:	f043 0201 	orr.w	r2, r3, #1
 8047138:	687b      	ldr	r3, [r7, #4]
 804713a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 804713c:	687b      	ldr	r3, [r7, #4]
 804713e:	2200      	movs	r2, #0
 8047140:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8047144:	7bfb      	ldrb	r3, [r7, #15]
}
 8047146:	4618      	mov	r0, r3
 8047148:	3710      	adds	r7, #16
 804714a:	46bd      	mov	sp, r7
 804714c:	bd80      	pop	{r7, pc}
	...

08047150 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8047150:	b580      	push	{r7, lr}
 8047152:	b088      	sub	sp, #32
 8047154:	af00      	add	r7, sp, #0
 8047156:	6078      	str	r0, [r7, #4]
 8047158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 804715a:	4862      	ldr	r0, [pc, #392]	; (80472e4 <HAL_ADC_PollForConversion+0x194>)
 804715c:	f7ff fc62 	bl	8046a24 <LL_ADC_GetMultimode>
 8047160:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8047162:	687b      	ldr	r3, [r7, #4]
 8047164:	695b      	ldr	r3, [r3, #20]
 8047166:	2b08      	cmp	r3, #8
 8047168:	d102      	bne.n	8047170 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 804716a:	2308      	movs	r3, #8
 804716c:	61fb      	str	r3, [r7, #28]
 804716e:	e02a      	b.n	80471c6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8047170:	697b      	ldr	r3, [r7, #20]
 8047172:	2b00      	cmp	r3, #0
 8047174:	d005      	beq.n	8047182 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8047176:	697b      	ldr	r3, [r7, #20]
 8047178:	2b05      	cmp	r3, #5
 804717a:	d002      	beq.n	8047182 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 804717c:	697b      	ldr	r3, [r7, #20]
 804717e:	2b09      	cmp	r3, #9
 8047180:	d111      	bne.n	80471a6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8047182:	687b      	ldr	r3, [r7, #4]
 8047184:	681b      	ldr	r3, [r3, #0]
 8047186:	68db      	ldr	r3, [r3, #12]
 8047188:	f003 0301 	and.w	r3, r3, #1
 804718c:	2b00      	cmp	r3, #0
 804718e:	d007      	beq.n	80471a0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8047190:	687b      	ldr	r3, [r7, #4]
 8047192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047194:	f043 0220 	orr.w	r2, r3, #32
 8047198:	687b      	ldr	r3, [r7, #4]
 804719a:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 804719c:	2301      	movs	r3, #1
 804719e:	e09d      	b.n	80472dc <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80471a0:	2304      	movs	r3, #4
 80471a2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80471a4:	e00f      	b.n	80471c6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80471a6:	484f      	ldr	r0, [pc, #316]	; (80472e4 <HAL_ADC_PollForConversion+0x194>)
 80471a8:	f7ff fc4a 	bl	8046a40 <LL_ADC_GetMultiDMATransfer>
 80471ac:	4603      	mov	r3, r0
 80471ae:	2b00      	cmp	r3, #0
 80471b0:	d007      	beq.n	80471c2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80471b2:	687b      	ldr	r3, [r7, #4]
 80471b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80471b6:	f043 0220 	orr.w	r2, r3, #32
 80471ba:	687b      	ldr	r3, [r7, #4]
 80471bc:	659a      	str	r2, [r3, #88]	; 0x58
        return HAL_ERROR;
 80471be:	2301      	movs	r3, #1
 80471c0:	e08c      	b.n	80472dc <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80471c2:	2304      	movs	r3, #4
 80471c4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80471c6:	f7ff fa9f 	bl	8046708 <HAL_GetTick>
 80471ca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80471cc:	e01a      	b.n	8047204 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80471ce:	683b      	ldr	r3, [r7, #0]
 80471d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80471d4:	d016      	beq.n	8047204 <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80471d6:	f7ff fa97 	bl	8046708 <HAL_GetTick>
 80471da:	4602      	mov	r2, r0
 80471dc:	693b      	ldr	r3, [r7, #16]
 80471de:	1ad3      	subs	r3, r2, r3
 80471e0:	683a      	ldr	r2, [r7, #0]
 80471e2:	429a      	cmp	r2, r3
 80471e4:	d302      	bcc.n	80471ec <HAL_ADC_PollForConversion+0x9c>
 80471e6:	683b      	ldr	r3, [r7, #0]
 80471e8:	2b00      	cmp	r3, #0
 80471ea:	d10b      	bne.n	8047204 <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80471ec:	687b      	ldr	r3, [r7, #4]
 80471ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80471f0:	f043 0204 	orr.w	r2, r3, #4
 80471f4:	687b      	ldr	r3, [r7, #4]
 80471f6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80471f8:	687b      	ldr	r3, [r7, #4]
 80471fa:	2200      	movs	r2, #0
 80471fc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        return HAL_TIMEOUT;
 8047200:	2303      	movs	r3, #3
 8047202:	e06b      	b.n	80472dc <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8047204:	687b      	ldr	r3, [r7, #4]
 8047206:	681b      	ldr	r3, [r3, #0]
 8047208:	681a      	ldr	r2, [r3, #0]
 804720a:	69fb      	ldr	r3, [r7, #28]
 804720c:	4013      	ands	r3, r2
 804720e:	2b00      	cmp	r3, #0
 8047210:	d0dd      	beq.n	80471ce <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8047212:	687b      	ldr	r3, [r7, #4]
 8047214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047216:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 804721a:	687b      	ldr	r3, [r7, #4]
 804721c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 804721e:	687b      	ldr	r3, [r7, #4]
 8047220:	681b      	ldr	r3, [r3, #0]
 8047222:	4618      	mov	r0, r3
 8047224:	f7ff fb5c 	bl	80468e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8047228:	4603      	mov	r3, r0
 804722a:	2b00      	cmp	r3, #0
 804722c:	d01c      	beq.n	8047268 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 804722e:	687b      	ldr	r3, [r7, #4]
 8047230:	7e5b      	ldrb	r3, [r3, #25]
 8047232:	2b00      	cmp	r3, #0
 8047234:	d118      	bne.n	8047268 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8047236:	687b      	ldr	r3, [r7, #4]
 8047238:	681b      	ldr	r3, [r3, #0]
 804723a:	681b      	ldr	r3, [r3, #0]
 804723c:	f003 0308 	and.w	r3, r3, #8
 8047240:	2b08      	cmp	r3, #8
 8047242:	d111      	bne.n	8047268 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8047244:	687b      	ldr	r3, [r7, #4]
 8047246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047248:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 804724c:	687b      	ldr	r3, [r7, #4]
 804724e:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8047250:	687b      	ldr	r3, [r7, #4]
 8047252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047254:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8047258:	2b00      	cmp	r3, #0
 804725a:	d105      	bne.n	8047268 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 804725c:	687b      	ldr	r3, [r7, #4]
 804725e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047260:	f043 0201 	orr.w	r2, r3, #1
 8047264:	687b      	ldr	r3, [r7, #4]
 8047266:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8047268:	687b      	ldr	r3, [r7, #4]
 804726a:	681b      	ldr	r3, [r3, #0]
 804726c:	4a1e      	ldr	r2, [pc, #120]	; (80472e8 <HAL_ADC_PollForConversion+0x198>)
 804726e:	4293      	cmp	r3, r2
 8047270:	d002      	beq.n	8047278 <HAL_ADC_PollForConversion+0x128>
 8047272:	687b      	ldr	r3, [r7, #4]
 8047274:	681b      	ldr	r3, [r3, #0]
 8047276:	e000      	b.n	804727a <HAL_ADC_PollForConversion+0x12a>
 8047278:	4b1c      	ldr	r3, [pc, #112]	; (80472ec <HAL_ADC_PollForConversion+0x19c>)
 804727a:	687a      	ldr	r2, [r7, #4]
 804727c:	6812      	ldr	r2, [r2, #0]
 804727e:	4293      	cmp	r3, r2
 8047280:	d008      	beq.n	8047294 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8047282:	697b      	ldr	r3, [r7, #20]
 8047284:	2b00      	cmp	r3, #0
 8047286:	d005      	beq.n	8047294 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8047288:	697b      	ldr	r3, [r7, #20]
 804728a:	2b05      	cmp	r3, #5
 804728c:	d002      	beq.n	8047294 <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 804728e:	697b      	ldr	r3, [r7, #20]
 8047290:	2b09      	cmp	r3, #9
 8047292:	d104      	bne.n	804729e <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8047294:	687b      	ldr	r3, [r7, #4]
 8047296:	681b      	ldr	r3, [r3, #0]
 8047298:	68db      	ldr	r3, [r3, #12]
 804729a:	61bb      	str	r3, [r7, #24]
 804729c:	e00c      	b.n	80472b8 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 804729e:	687b      	ldr	r3, [r7, #4]
 80472a0:	681b      	ldr	r3, [r3, #0]
 80472a2:	4a11      	ldr	r2, [pc, #68]	; (80472e8 <HAL_ADC_PollForConversion+0x198>)
 80472a4:	4293      	cmp	r3, r2
 80472a6:	d002      	beq.n	80472ae <HAL_ADC_PollForConversion+0x15e>
 80472a8:	687b      	ldr	r3, [r7, #4]
 80472aa:	681b      	ldr	r3, [r3, #0]
 80472ac:	e000      	b.n	80472b0 <HAL_ADC_PollForConversion+0x160>
 80472ae:	4b0f      	ldr	r3, [pc, #60]	; (80472ec <HAL_ADC_PollForConversion+0x19c>)
 80472b0:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80472b2:	68fb      	ldr	r3, [r7, #12]
 80472b4:	68db      	ldr	r3, [r3, #12]
 80472b6:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80472b8:	69fb      	ldr	r3, [r7, #28]
 80472ba:	2b08      	cmp	r3, #8
 80472bc:	d104      	bne.n	80472c8 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80472be:	687b      	ldr	r3, [r7, #4]
 80472c0:	681b      	ldr	r3, [r3, #0]
 80472c2:	2208      	movs	r2, #8
 80472c4:	601a      	str	r2, [r3, #0]
 80472c6:	e008      	b.n	80472da <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80472c8:	69bb      	ldr	r3, [r7, #24]
 80472ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80472ce:	2b00      	cmp	r3, #0
 80472d0:	d103      	bne.n	80472da <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80472d2:	687b      	ldr	r3, [r7, #4]
 80472d4:	681b      	ldr	r3, [r3, #0]
 80472d6:	220c      	movs	r2, #12
 80472d8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80472da:	2300      	movs	r3, #0
}
 80472dc:	4618      	mov	r0, r3
 80472de:	3720      	adds	r7, #32
 80472e0:	46bd      	mov	sp, r7
 80472e2:	bd80      	pop	{r7, pc}
 80472e4:	42028300 	.word	0x42028300
 80472e8:	42028100 	.word	0x42028100
 80472ec:	42028000 	.word	0x42028000

080472f0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80472f0:	b480      	push	{r7}
 80472f2:	b083      	sub	sp, #12
 80472f4:	af00      	add	r7, sp, #0
 80472f6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80472f8:	687b      	ldr	r3, [r7, #4]
 80472fa:	681b      	ldr	r3, [r3, #0]
 80472fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80472fe:	4618      	mov	r0, r3
 8047300:	370c      	adds	r7, #12
 8047302:	46bd      	mov	sp, r7
 8047304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047308:	4770      	bx	lr
	...

0804730c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 804730c:	b580      	push	{r7, lr}
 804730e:	b08a      	sub	sp, #40	; 0x28
 8047310:	af00      	add	r7, sp, #0
 8047312:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8047314:	2300      	movs	r3, #0
 8047316:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8047318:	687b      	ldr	r3, [r7, #4]
 804731a:	681b      	ldr	r3, [r3, #0]
 804731c:	681b      	ldr	r3, [r3, #0]
 804731e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8047320:	687b      	ldr	r3, [r7, #4]
 8047322:	681b      	ldr	r3, [r3, #0]
 8047324:	685b      	ldr	r3, [r3, #4]
 8047326:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8047328:	4883      	ldr	r0, [pc, #524]	; (8047538 <HAL_ADC_IRQHandler+0x22c>)
 804732a:	f7ff fb7b 	bl	8046a24 <LL_ADC_GetMultimode>
 804732e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8047330:	69fb      	ldr	r3, [r7, #28]
 8047332:	f003 0302 	and.w	r3, r3, #2
 8047336:	2b00      	cmp	r3, #0
 8047338:	d019      	beq.n	804736e <HAL_ADC_IRQHandler+0x62>
 804733a:	69bb      	ldr	r3, [r7, #24]
 804733c:	f003 0302 	and.w	r3, r3, #2
 8047340:	2b00      	cmp	r3, #0
 8047342:	d014      	beq.n	804736e <HAL_ADC_IRQHandler+0x62>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8047344:	687b      	ldr	r3, [r7, #4]
 8047346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047348:	f003 0310 	and.w	r3, r3, #16
 804734c:	2b00      	cmp	r3, #0
 804734e:	d105      	bne.n	804735c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8047350:	687b      	ldr	r3, [r7, #4]
 8047352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047354:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8047358:	687b      	ldr	r3, [r7, #4]
 804735a:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
 804735c:	687b      	ldr	r3, [r7, #4]
 804735e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8047362:	6878      	ldr	r0, [r7, #4]
 8047364:	4798      	blx	r3
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8047366:	687b      	ldr	r3, [r7, #4]
 8047368:	681b      	ldr	r3, [r3, #0]
 804736a:	2202      	movs	r2, #2
 804736c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 804736e:	69fb      	ldr	r3, [r7, #28]
 8047370:	f003 0304 	and.w	r3, r3, #4
 8047374:	2b00      	cmp	r3, #0
 8047376:	d004      	beq.n	8047382 <HAL_ADC_IRQHandler+0x76>
 8047378:	69bb      	ldr	r3, [r7, #24]
 804737a:	f003 0304 	and.w	r3, r3, #4
 804737e:	2b00      	cmp	r3, #0
 8047380:	d10a      	bne.n	8047398 <HAL_ADC_IRQHandler+0x8c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8047382:	69fb      	ldr	r3, [r7, #28]
 8047384:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8047388:	2b00      	cmp	r3, #0
 804738a:	f000 8084 	beq.w	8047496 <HAL_ADC_IRQHandler+0x18a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 804738e:	69bb      	ldr	r3, [r7, #24]
 8047390:	f003 0308 	and.w	r3, r3, #8
 8047394:	2b00      	cmp	r3, #0
 8047396:	d07e      	beq.n	8047496 <HAL_ADC_IRQHandler+0x18a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8047398:	687b      	ldr	r3, [r7, #4]
 804739a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804739c:	f003 0310 	and.w	r3, r3, #16
 80473a0:	2b00      	cmp	r3, #0
 80473a2:	d105      	bne.n	80473b0 <HAL_ADC_IRQHandler+0xa4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80473a4:	687b      	ldr	r3, [r7, #4]
 80473a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80473a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80473ac:	687b      	ldr	r3, [r7, #4]
 80473ae:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80473b0:	687b      	ldr	r3, [r7, #4]
 80473b2:	681b      	ldr	r3, [r3, #0]
 80473b4:	4618      	mov	r0, r3
 80473b6:	f7ff fa93 	bl	80468e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80473ba:	4603      	mov	r3, r0
 80473bc:	2b00      	cmp	r3, #0
 80473be:	d062      	beq.n	8047486 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80473c0:	687b      	ldr	r3, [r7, #4]
 80473c2:	681b      	ldr	r3, [r3, #0]
 80473c4:	4a5d      	ldr	r2, [pc, #372]	; (804753c <HAL_ADC_IRQHandler+0x230>)
 80473c6:	4293      	cmp	r3, r2
 80473c8:	d002      	beq.n	80473d0 <HAL_ADC_IRQHandler+0xc4>
 80473ca:	687b      	ldr	r3, [r7, #4]
 80473cc:	681b      	ldr	r3, [r3, #0]
 80473ce:	e000      	b.n	80473d2 <HAL_ADC_IRQHandler+0xc6>
 80473d0:	4b5b      	ldr	r3, [pc, #364]	; (8047540 <HAL_ADC_IRQHandler+0x234>)
 80473d2:	687a      	ldr	r2, [r7, #4]
 80473d4:	6812      	ldr	r2, [r2, #0]
 80473d6:	4293      	cmp	r3, r2
 80473d8:	d008      	beq.n	80473ec <HAL_ADC_IRQHandler+0xe0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80473da:	697b      	ldr	r3, [r7, #20]
 80473dc:	2b00      	cmp	r3, #0
 80473de:	d005      	beq.n	80473ec <HAL_ADC_IRQHandler+0xe0>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80473e0:	697b      	ldr	r3, [r7, #20]
 80473e2:	2b05      	cmp	r3, #5
 80473e4:	d002      	beq.n	80473ec <HAL_ADC_IRQHandler+0xe0>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80473e6:	697b      	ldr	r3, [r7, #20]
 80473e8:	2b09      	cmp	r3, #9
 80473ea:	d104      	bne.n	80473f6 <HAL_ADC_IRQHandler+0xea>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80473ec:	687b      	ldr	r3, [r7, #4]
 80473ee:	681b      	ldr	r3, [r3, #0]
 80473f0:	68db      	ldr	r3, [r3, #12]
 80473f2:	623b      	str	r3, [r7, #32]
 80473f4:	e00c      	b.n	8047410 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80473f6:	687b      	ldr	r3, [r7, #4]
 80473f8:	681b      	ldr	r3, [r3, #0]
 80473fa:	4a50      	ldr	r2, [pc, #320]	; (804753c <HAL_ADC_IRQHandler+0x230>)
 80473fc:	4293      	cmp	r3, r2
 80473fe:	d002      	beq.n	8047406 <HAL_ADC_IRQHandler+0xfa>
 8047400:	687b      	ldr	r3, [r7, #4]
 8047402:	681b      	ldr	r3, [r3, #0]
 8047404:	e000      	b.n	8047408 <HAL_ADC_IRQHandler+0xfc>
 8047406:	4b4e      	ldr	r3, [pc, #312]	; (8047540 <HAL_ADC_IRQHandler+0x234>)
 8047408:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 804740a:	693b      	ldr	r3, [r7, #16]
 804740c:	68db      	ldr	r3, [r3, #12]
 804740e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8047410:	6a3b      	ldr	r3, [r7, #32]
 8047412:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8047416:	2b00      	cmp	r3, #0
 8047418:	d135      	bne.n	8047486 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 804741a:	687b      	ldr	r3, [r7, #4]
 804741c:	681b      	ldr	r3, [r3, #0]
 804741e:	681b      	ldr	r3, [r3, #0]
 8047420:	f003 0308 	and.w	r3, r3, #8
 8047424:	2b08      	cmp	r3, #8
 8047426:	d12e      	bne.n	8047486 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8047428:	687b      	ldr	r3, [r7, #4]
 804742a:	681b      	ldr	r3, [r3, #0]
 804742c:	4618      	mov	r0, r3
 804742e:	f7ff fbd9 	bl	8046be4 <LL_ADC_REG_IsConversionOngoing>
 8047432:	4603      	mov	r3, r0
 8047434:	2b00      	cmp	r3, #0
 8047436:	d11a      	bne.n	804746e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8047438:	687b      	ldr	r3, [r7, #4]
 804743a:	681b      	ldr	r3, [r3, #0]
 804743c:	685a      	ldr	r2, [r3, #4]
 804743e:	687b      	ldr	r3, [r7, #4]
 8047440:	681b      	ldr	r3, [r3, #0]
 8047442:	f022 020c 	bic.w	r2, r2, #12
 8047446:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8047448:	687b      	ldr	r3, [r7, #4]
 804744a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804744c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8047450:	687b      	ldr	r3, [r7, #4]
 8047452:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8047454:	687b      	ldr	r3, [r7, #4]
 8047456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047458:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804745c:	2b00      	cmp	r3, #0
 804745e:	d112      	bne.n	8047486 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8047460:	687b      	ldr	r3, [r7, #4]
 8047462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047464:	f043 0201 	orr.w	r2, r3, #1
 8047468:	687b      	ldr	r3, [r7, #4]
 804746a:	659a      	str	r2, [r3, #88]	; 0x58
 804746c:	e00b      	b.n	8047486 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 804746e:	687b      	ldr	r3, [r7, #4]
 8047470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047472:	f043 0210 	orr.w	r2, r3, #16
 8047476:	687b      	ldr	r3, [r7, #4]
 8047478:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 804747a:	687b      	ldr	r3, [r7, #4]
 804747c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804747e:	f043 0201 	orr.w	r2, r3, #1
 8047482:	687b      	ldr	r3, [r7, #4]
 8047484:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
    /*       to determine if conversion has been triggered from EOC or EOS,   */
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 8047486:	687b      	ldr	r3, [r7, #4]
 8047488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 804748a:	6878      	ldr	r0, [r7, #4]
 804748c:	4798      	blx	r3
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 804748e:	687b      	ldr	r3, [r7, #4]
 8047490:	681b      	ldr	r3, [r3, #0]
 8047492:	220c      	movs	r2, #12
 8047494:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8047496:	69fb      	ldr	r3, [r7, #28]
 8047498:	f003 0320 	and.w	r3, r3, #32
 804749c:	2b00      	cmp	r3, #0
 804749e:	d004      	beq.n	80474aa <HAL_ADC_IRQHandler+0x19e>
 80474a0:	69bb      	ldr	r3, [r7, #24]
 80474a2:	f003 0320 	and.w	r3, r3, #32
 80474a6:	2b00      	cmp	r3, #0
 80474a8:	d10b      	bne.n	80474c2 <HAL_ADC_IRQHandler+0x1b6>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80474aa:	69fb      	ldr	r3, [r7, #28]
 80474ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80474b0:	2b00      	cmp	r3, #0
 80474b2:	f000 809f 	beq.w	80475f4 <HAL_ADC_IRQHandler+0x2e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80474b6:	69bb      	ldr	r3, [r7, #24]
 80474b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80474bc:	2b00      	cmp	r3, #0
 80474be:	f000 8099 	beq.w	80475f4 <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80474c2:	687b      	ldr	r3, [r7, #4]
 80474c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80474c6:	f003 0310 	and.w	r3, r3, #16
 80474ca:	2b00      	cmp	r3, #0
 80474cc:	d105      	bne.n	80474da <HAL_ADC_IRQHandler+0x1ce>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80474ce:	687b      	ldr	r3, [r7, #4]
 80474d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80474d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80474d6:	687b      	ldr	r3, [r7, #4]
 80474d8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80474da:	687b      	ldr	r3, [r7, #4]
 80474dc:	681b      	ldr	r3, [r3, #0]
 80474de:	4618      	mov	r0, r3
 80474e0:	f7ff fa3d 	bl	804695e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80474e4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80474e6:	687b      	ldr	r3, [r7, #4]
 80474e8:	681b      	ldr	r3, [r3, #0]
 80474ea:	4618      	mov	r0, r3
 80474ec:	f7ff f9f8 	bl	80468e0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80474f0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80474f2:	687b      	ldr	r3, [r7, #4]
 80474f4:	681b      	ldr	r3, [r3, #0]
 80474f6:	4a11      	ldr	r2, [pc, #68]	; (804753c <HAL_ADC_IRQHandler+0x230>)
 80474f8:	4293      	cmp	r3, r2
 80474fa:	d002      	beq.n	8047502 <HAL_ADC_IRQHandler+0x1f6>
 80474fc:	687b      	ldr	r3, [r7, #4]
 80474fe:	681b      	ldr	r3, [r3, #0]
 8047500:	e000      	b.n	8047504 <HAL_ADC_IRQHandler+0x1f8>
 8047502:	4b0f      	ldr	r3, [pc, #60]	; (8047540 <HAL_ADC_IRQHandler+0x234>)
 8047504:	687a      	ldr	r2, [r7, #4]
 8047506:	6812      	ldr	r2, [r2, #0]
 8047508:	4293      	cmp	r3, r2
 804750a:	d008      	beq.n	804751e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 804750c:	697b      	ldr	r3, [r7, #20]
 804750e:	2b00      	cmp	r3, #0
 8047510:	d005      	beq.n	804751e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8047512:	697b      	ldr	r3, [r7, #20]
 8047514:	2b06      	cmp	r3, #6
 8047516:	d002      	beq.n	804751e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8047518:	697b      	ldr	r3, [r7, #20]
 804751a:	2b07      	cmp	r3, #7
 804751c:	d104      	bne.n	8047528 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 804751e:	687b      	ldr	r3, [r7, #4]
 8047520:	681b      	ldr	r3, [r3, #0]
 8047522:	68db      	ldr	r3, [r3, #12]
 8047524:	623b      	str	r3, [r7, #32]
 8047526:	e012      	b.n	804754e <HAL_ADC_IRQHandler+0x242>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8047528:	687b      	ldr	r3, [r7, #4]
 804752a:	681b      	ldr	r3, [r3, #0]
 804752c:	4a03      	ldr	r2, [pc, #12]	; (804753c <HAL_ADC_IRQHandler+0x230>)
 804752e:	4293      	cmp	r3, r2
 8047530:	d008      	beq.n	8047544 <HAL_ADC_IRQHandler+0x238>
 8047532:	687b      	ldr	r3, [r7, #4]
 8047534:	681b      	ldr	r3, [r3, #0]
 8047536:	e006      	b.n	8047546 <HAL_ADC_IRQHandler+0x23a>
 8047538:	42028300 	.word	0x42028300
 804753c:	42028100 	.word	0x42028100
 8047540:	42028000 	.word	0x42028000
 8047544:	4b81      	ldr	r3, [pc, #516]	; (804774c <HAL_ADC_IRQHandler+0x440>)
 8047546:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8047548:	693b      	ldr	r3, [r7, #16]
 804754a:	68db      	ldr	r3, [r3, #12]
 804754c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 804754e:	68fb      	ldr	r3, [r7, #12]
 8047550:	2b00      	cmp	r3, #0
 8047552:	d10c      	bne.n	804756e <HAL_ADC_IRQHandler+0x262>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8047554:	6a3b      	ldr	r3, [r7, #32]
 8047556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 804755a:	2b00      	cmp	r3, #0
 804755c:	d142      	bne.n	80475e4 <HAL_ADC_IRQHandler+0x2d8>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 804755e:	68bb      	ldr	r3, [r7, #8]
 8047560:	2b00      	cmp	r3, #0
 8047562:	d03f      	beq.n	80475e4 <HAL_ADC_IRQHandler+0x2d8>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 8047564:	6a3b      	ldr	r3, [r7, #32]
 8047566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 804756a:	2b00      	cmp	r3, #0
 804756c:	d13a      	bne.n	80475e4 <HAL_ADC_IRQHandler+0x2d8>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 804756e:	687b      	ldr	r3, [r7, #4]
 8047570:	681b      	ldr	r3, [r3, #0]
 8047572:	681b      	ldr	r3, [r3, #0]
 8047574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047578:	2b40      	cmp	r3, #64	; 0x40
 804757a:	d133      	bne.n	80475e4 <HAL_ADC_IRQHandler+0x2d8>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 804757c:	6a3b      	ldr	r3, [r7, #32]
 804757e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8047582:	2b00      	cmp	r3, #0
 8047584:	d12e      	bne.n	80475e4 <HAL_ADC_IRQHandler+0x2d8>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8047586:	687b      	ldr	r3, [r7, #4]
 8047588:	681b      	ldr	r3, [r3, #0]
 804758a:	4618      	mov	r0, r3
 804758c:	f7ff fb51 	bl	8046c32 <LL_ADC_INJ_IsConversionOngoing>
 8047590:	4603      	mov	r3, r0
 8047592:	2b00      	cmp	r3, #0
 8047594:	d11a      	bne.n	80475cc <HAL_ADC_IRQHandler+0x2c0>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8047596:	687b      	ldr	r3, [r7, #4]
 8047598:	681b      	ldr	r3, [r3, #0]
 804759a:	685a      	ldr	r2, [r3, #4]
 804759c:	687b      	ldr	r3, [r7, #4]
 804759e:	681b      	ldr	r3, [r3, #0]
 80475a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80475a4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80475a6:	687b      	ldr	r3, [r7, #4]
 80475a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80475aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80475ae:	687b      	ldr	r3, [r7, #4]
 80475b0:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80475b2:	687b      	ldr	r3, [r7, #4]
 80475b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80475b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80475ba:	2b00      	cmp	r3, #0
 80475bc:	d112      	bne.n	80475e4 <HAL_ADC_IRQHandler+0x2d8>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80475be:	687b      	ldr	r3, [r7, #4]
 80475c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80475c2:	f043 0201 	orr.w	r2, r3, #1
 80475c6:	687b      	ldr	r3, [r7, #4]
 80475c8:	659a      	str	r2, [r3, #88]	; 0x58
 80475ca:	e00b      	b.n	80475e4 <HAL_ADC_IRQHandler+0x2d8>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80475cc:	687b      	ldr	r3, [r7, #4]
 80475ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80475d0:	f043 0210 	orr.w	r2, r3, #16
 80475d4:	687b      	ldr	r3, [r7, #4]
 80475d6:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80475d8:	687b      	ldr	r3, [r7, #4]
 80475da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80475dc:	f043 0201 	orr.w	r2, r3, #1
 80475e0:	687b      	ldr	r3, [r7, #4]
 80475e2:	65da      	str	r2, [r3, #92]	; 0x5c
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
 80475e4:	687b      	ldr	r3, [r7, #4]
 80475e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80475e8:	6878      	ldr	r0, [r7, #4]
 80475ea:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80475ec:	687b      	ldr	r3, [r7, #4]
 80475ee:	681b      	ldr	r3, [r3, #0]
 80475f0:	2260      	movs	r2, #96	; 0x60
 80475f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80475f4:	69fb      	ldr	r3, [r7, #28]
 80475f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80475fa:	2b00      	cmp	r3, #0
 80475fc:	d012      	beq.n	8047624 <HAL_ADC_IRQHandler+0x318>
 80475fe:	69bb      	ldr	r3, [r7, #24]
 8047600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8047604:	2b00      	cmp	r3, #0
 8047606:	d00d      	beq.n	8047624 <HAL_ADC_IRQHandler+0x318>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8047608:	687b      	ldr	r3, [r7, #4]
 804760a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804760c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8047610:	687b      	ldr	r3, [r7, #4]
 8047612:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
 8047614:	687b      	ldr	r3, [r7, #4]
 8047616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047618:	6878      	ldr	r0, [r7, #4]
 804761a:	4798      	blx	r3
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 804761c:	687b      	ldr	r3, [r7, #4]
 804761e:	681b      	ldr	r3, [r3, #0]
 8047620:	2280      	movs	r2, #128	; 0x80
 8047622:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8047624:	69fb      	ldr	r3, [r7, #28]
 8047626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804762a:	2b00      	cmp	r3, #0
 804762c:	d014      	beq.n	8047658 <HAL_ADC_IRQHandler+0x34c>
 804762e:	69bb      	ldr	r3, [r7, #24]
 8047630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8047634:	2b00      	cmp	r3, #0
 8047636:	d00f      	beq.n	8047658 <HAL_ADC_IRQHandler+0x34c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8047638:	687b      	ldr	r3, [r7, #4]
 804763a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804763c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8047640:	687b      	ldr	r3, [r7, #4]
 8047642:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
 8047644:	687b      	ldr	r3, [r7, #4]
 8047646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804764a:	6878      	ldr	r0, [r7, #4]
 804764c:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 804764e:	687b      	ldr	r3, [r7, #4]
 8047650:	681b      	ldr	r3, [r3, #0]
 8047652:	f44f 7280 	mov.w	r2, #256	; 0x100
 8047656:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8047658:	69fb      	ldr	r3, [r7, #28]
 804765a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804765e:	2b00      	cmp	r3, #0
 8047660:	d014      	beq.n	804768c <HAL_ADC_IRQHandler+0x380>
 8047662:	69bb      	ldr	r3, [r7, #24]
 8047664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8047668:	2b00      	cmp	r3, #0
 804766a:	d00f      	beq.n	804768c <HAL_ADC_IRQHandler+0x380>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 804766c:	687b      	ldr	r3, [r7, #4]
 804766e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047670:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8047674:	687b      	ldr	r3, [r7, #4]
 8047676:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
 8047678:	687b      	ldr	r3, [r7, #4]
 804767a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804767e:	6878      	ldr	r0, [r7, #4]
 8047680:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8047682:	687b      	ldr	r3, [r7, #4]
 8047684:	681b      	ldr	r3, [r3, #0]
 8047686:	f44f 7200 	mov.w	r2, #512	; 0x200
 804768a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 804768c:	69fb      	ldr	r3, [r7, #28]
 804768e:	f003 0310 	and.w	r3, r3, #16
 8047692:	2b00      	cmp	r3, #0
 8047694:	d037      	beq.n	8047706 <HAL_ADC_IRQHandler+0x3fa>
 8047696:	69bb      	ldr	r3, [r7, #24]
 8047698:	f003 0310 	and.w	r3, r3, #16
 804769c:	2b00      	cmp	r3, #0
 804769e:	d032      	beq.n	8047706 <HAL_ADC_IRQHandler+0x3fa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80476a0:	687b      	ldr	r3, [r7, #4]
 80476a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80476a4:	2b00      	cmp	r3, #0
 80476a6:	d102      	bne.n	80476ae <HAL_ADC_IRQHandler+0x3a2>
    {
      overrun_error = 1UL;
 80476a8:	2301      	movs	r3, #1
 80476aa:	627b      	str	r3, [r7, #36]	; 0x24
 80476ac:	e014      	b.n	80476d8 <HAL_ADC_IRQHandler+0x3cc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80476ae:	697b      	ldr	r3, [r7, #20]
 80476b0:	2b00      	cmp	r3, #0
 80476b2:	d008      	beq.n	80476c6 <HAL_ADC_IRQHandler+0x3ba>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80476b4:	4826      	ldr	r0, [pc, #152]	; (8047750 <HAL_ADC_IRQHandler+0x444>)
 80476b6:	f7ff f9c3 	bl	8046a40 <LL_ADC_GetMultiDMATransfer>
 80476ba:	4603      	mov	r3, r0
 80476bc:	2b00      	cmp	r3, #0
 80476be:	d00b      	beq.n	80476d8 <HAL_ADC_IRQHandler+0x3cc>
        {
          overrun_error = 1UL;
 80476c0:	2301      	movs	r3, #1
 80476c2:	627b      	str	r3, [r7, #36]	; 0x24
 80476c4:	e008      	b.n	80476d8 <HAL_ADC_IRQHandler+0x3cc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80476c6:	687b      	ldr	r3, [r7, #4]
 80476c8:	681b      	ldr	r3, [r3, #0]
 80476ca:	68db      	ldr	r3, [r3, #12]
 80476cc:	f003 0301 	and.w	r3, r3, #1
 80476d0:	2b00      	cmp	r3, #0
 80476d2:	d001      	beq.n	80476d8 <HAL_ADC_IRQHandler+0x3cc>
        {
          overrun_error = 1UL;
 80476d4:	2301      	movs	r3, #1
 80476d6:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80476d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80476da:	2b01      	cmp	r3, #1
 80476dc:	d10f      	bne.n	80476fe <HAL_ADC_IRQHandler+0x3f2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80476de:	687b      	ldr	r3, [r7, #4]
 80476e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80476e2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80476e6:	687b      	ldr	r3, [r7, #4]
 80476e8:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80476ea:	687b      	ldr	r3, [r7, #4]
 80476ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80476ee:	f043 0202 	orr.w	r2, r3, #2
 80476f2:	687b      	ldr	r3, [r7, #4]
 80476f4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Note: In case of overrun, ADC conversion data is preserved until     */
      /*       flag OVR is reset.                                             */
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 80476f6:	687b      	ldr	r3, [r7, #4]
 80476f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80476fa:	6878      	ldr	r0, [r7, #4]
 80476fc:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80476fe:	687b      	ldr	r3, [r7, #4]
 8047700:	681b      	ldr	r3, [r3, #0]
 8047702:	2210      	movs	r2, #16
 8047704:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8047706:	69fb      	ldr	r3, [r7, #28]
 8047708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804770c:	2b00      	cmp	r3, #0
 804770e:	d019      	beq.n	8047744 <HAL_ADC_IRQHandler+0x438>
 8047710:	69bb      	ldr	r3, [r7, #24]
 8047712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8047716:	2b00      	cmp	r3, #0
 8047718:	d014      	beq.n	8047744 <HAL_ADC_IRQHandler+0x438>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 804771a:	687b      	ldr	r3, [r7, #4]
 804771c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804771e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8047722:	687b      	ldr	r3, [r7, #4]
 8047724:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8047726:	687b      	ldr	r3, [r7, #4]
 8047728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804772a:	f043 0208 	orr.w	r2, r3, #8
 804772e:	687b      	ldr	r3, [r7, #4]
 8047730:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8047732:	687b      	ldr	r3, [r7, #4]
 8047734:	681b      	ldr	r3, [r3, #0]
 8047736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 804773a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
 804773c:	687b      	ldr	r3, [r7, #4]
 804773e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8047740:	6878      	ldr	r0, [r7, #4]
 8047742:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8047744:	bf00      	nop
 8047746:	3728      	adds	r7, #40	; 0x28
 8047748:	46bd      	mov	sp, r7
 804774a:	bd80      	pop	{r7, pc}
 804774c:	42028000 	.word	0x42028000
 8047750:	42028300 	.word	0x42028300

08047754 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8047754:	b480      	push	{r7}
 8047756:	b083      	sub	sp, #12
 8047758:	af00      	add	r7, sp, #0
 804775a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 804775c:	bf00      	nop
 804775e:	370c      	adds	r7, #12
 8047760:	46bd      	mov	sp, r7
 8047762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047766:	4770      	bx	lr

08047768 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8047768:	b480      	push	{r7}
 804776a:	b083      	sub	sp, #12
 804776c:	af00      	add	r7, sp, #0
 804776e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8047770:	bf00      	nop
 8047772:	370c      	adds	r7, #12
 8047774:	46bd      	mov	sp, r7
 8047776:	f85d 7b04 	ldr.w	r7, [sp], #4
 804777a:	4770      	bx	lr

0804777c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 804777c:	b480      	push	{r7}
 804777e:	b083      	sub	sp, #12
 8047780:	af00      	add	r7, sp, #0
 8047782:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8047784:	bf00      	nop
 8047786:	370c      	adds	r7, #12
 8047788:	46bd      	mov	sp, r7
 804778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804778e:	4770      	bx	lr

08047790 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8047790:	b480      	push	{r7}
 8047792:	b083      	sub	sp, #12
 8047794:	af00      	add	r7, sp, #0
 8047796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8047798:	bf00      	nop
 804779a:	370c      	adds	r7, #12
 804779c:	46bd      	mov	sp, r7
 804779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80477a2:	4770      	bx	lr

080477a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80477a4:	b590      	push	{r4, r7, lr}
 80477a6:	b0b7      	sub	sp, #220	; 0xdc
 80477a8:	af00      	add	r7, sp, #0
 80477aa:	6078      	str	r0, [r7, #4]
 80477ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80477ae:	2300      	movs	r3, #0
 80477b0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80477b4:	2300      	movs	r3, #0
 80477b6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80477b8:	687b      	ldr	r3, [r7, #4]
 80477ba:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80477be:	2b01      	cmp	r3, #1
 80477c0:	d101      	bne.n	80477c6 <HAL_ADC_ConfigChannel+0x22>
 80477c2:	2302      	movs	r3, #2
 80477c4:	e3c0      	b.n	8047f48 <HAL_ADC_ConfigChannel+0x7a4>
 80477c6:	687b      	ldr	r3, [r7, #4]
 80477c8:	2201      	movs	r2, #1
 80477ca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80477ce:	687b      	ldr	r3, [r7, #4]
 80477d0:	681b      	ldr	r3, [r3, #0]
 80477d2:	4618      	mov	r0, r3
 80477d4:	f7ff fa06 	bl	8046be4 <LL_ADC_REG_IsConversionOngoing>
 80477d8:	4603      	mov	r3, r0
 80477da:	2b00      	cmp	r3, #0
 80477dc:	f040 83a5 	bne.w	8047f2a <HAL_ADC_ConfigChannel+0x786>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80477e0:	687b      	ldr	r3, [r7, #4]
 80477e2:	6818      	ldr	r0, [r3, #0]
 80477e4:	683b      	ldr	r3, [r7, #0]
 80477e6:	6859      	ldr	r1, [r3, #4]
 80477e8:	683b      	ldr	r3, [r7, #0]
 80477ea:	681b      	ldr	r3, [r3, #0]
 80477ec:	461a      	mov	r2, r3
 80477ee:	f7ff f88a 	bl	8046906 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80477f2:	687b      	ldr	r3, [r7, #4]
 80477f4:	681b      	ldr	r3, [r3, #0]
 80477f6:	4618      	mov	r0, r3
 80477f8:	f7ff f9f4 	bl	8046be4 <LL_ADC_REG_IsConversionOngoing>
 80477fc:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8047800:	687b      	ldr	r3, [r7, #4]
 8047802:	681b      	ldr	r3, [r3, #0]
 8047804:	4618      	mov	r0, r3
 8047806:	f7ff fa14 	bl	8046c32 <LL_ADC_INJ_IsConversionOngoing>
 804780a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 804780e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8047812:	2b00      	cmp	r3, #0
 8047814:	f040 81c1 	bne.w	8047b9a <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8047818:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 804781c:	2b00      	cmp	r3, #0
 804781e:	f040 81bc 	bne.w	8047b9a <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8047822:	683b      	ldr	r3, [r7, #0]
 8047824:	689b      	ldr	r3, [r3, #8]
 8047826:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 804782a:	d10f      	bne.n	804784c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 804782c:	687b      	ldr	r3, [r7, #4]
 804782e:	6818      	ldr	r0, [r3, #0]
 8047830:	683b      	ldr	r3, [r7, #0]
 8047832:	681b      	ldr	r3, [r3, #0]
 8047834:	2200      	movs	r2, #0
 8047836:	4619      	mov	r1, r3
 8047838:	f7ff f8a4 	bl	8046984 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 804783c:	687b      	ldr	r3, [r7, #4]
 804783e:	681b      	ldr	r3, [r3, #0]
 8047840:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8047844:	4618      	mov	r0, r3
 8047846:	f7ff f838 	bl	80468ba <LL_ADC_SetSamplingTimeCommonConfig>
 804784a:	e00e      	b.n	804786a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 804784c:	687b      	ldr	r3, [r7, #4]
 804784e:	6818      	ldr	r0, [r3, #0]
 8047850:	683b      	ldr	r3, [r7, #0]
 8047852:	6819      	ldr	r1, [r3, #0]
 8047854:	683b      	ldr	r3, [r7, #0]
 8047856:	689b      	ldr	r3, [r3, #8]
 8047858:	461a      	mov	r2, r3
 804785a:	f7ff f893 	bl	8046984 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 804785e:	687b      	ldr	r3, [r7, #4]
 8047860:	681b      	ldr	r3, [r3, #0]
 8047862:	2100      	movs	r1, #0
 8047864:	4618      	mov	r0, r3
 8047866:	f7ff f828 	bl	80468ba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 804786a:	683b      	ldr	r3, [r7, #0]
 804786c:	695a      	ldr	r2, [r3, #20]
 804786e:	687b      	ldr	r3, [r7, #4]
 8047870:	681b      	ldr	r3, [r3, #0]
 8047872:	68db      	ldr	r3, [r3, #12]
 8047874:	08db      	lsrs	r3, r3, #3
 8047876:	f003 0303 	and.w	r3, r3, #3
 804787a:	005b      	lsls	r3, r3, #1
 804787c:	fa02 f303 	lsl.w	r3, r2, r3
 8047880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8047884:	683b      	ldr	r3, [r7, #0]
 8047886:	691b      	ldr	r3, [r3, #16]
 8047888:	2b04      	cmp	r3, #4
 804788a:	d00a      	beq.n	80478a2 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 804788c:	687b      	ldr	r3, [r7, #4]
 804788e:	6818      	ldr	r0, [r3, #0]
 8047890:	683b      	ldr	r3, [r7, #0]
 8047892:	6919      	ldr	r1, [r3, #16]
 8047894:	683b      	ldr	r3, [r7, #0]
 8047896:	681a      	ldr	r2, [r3, #0]
 8047898:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 804789c:	f7fe ffb8 	bl	8046810 <LL_ADC_SetOffset>
 80478a0:	e17b      	b.n	8047b9a <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80478a2:	687b      	ldr	r3, [r7, #4]
 80478a4:	681b      	ldr	r3, [r3, #0]
 80478a6:	2100      	movs	r1, #0
 80478a8:	4618      	mov	r0, r3
 80478aa:	f7fe ffd5 	bl	8046858 <LL_ADC_GetOffsetChannel>
 80478ae:	4603      	mov	r3, r0
 80478b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80478b4:	2b00      	cmp	r3, #0
 80478b6:	d10a      	bne.n	80478ce <HAL_ADC_ConfigChannel+0x12a>
 80478b8:	687b      	ldr	r3, [r7, #4]
 80478ba:	681b      	ldr	r3, [r3, #0]
 80478bc:	2100      	movs	r1, #0
 80478be:	4618      	mov	r0, r3
 80478c0:	f7fe ffca 	bl	8046858 <LL_ADC_GetOffsetChannel>
 80478c4:	4603      	mov	r3, r0
 80478c6:	0e9b      	lsrs	r3, r3, #26
 80478c8:	f003 021f 	and.w	r2, r3, #31
 80478cc:	e01e      	b.n	804790c <HAL_ADC_ConfigChannel+0x168>
 80478ce:	687b      	ldr	r3, [r7, #4]
 80478d0:	681b      	ldr	r3, [r3, #0]
 80478d2:	2100      	movs	r1, #0
 80478d4:	4618      	mov	r0, r3
 80478d6:	f7fe ffbf 	bl	8046858 <LL_ADC_GetOffsetChannel>
 80478da:	4603      	mov	r3, r0
 80478dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80478e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80478e4:	fa93 f3a3 	rbit	r3, r3
 80478e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80478ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80478f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80478f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80478f8:	2b00      	cmp	r3, #0
 80478fa:	d101      	bne.n	8047900 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 80478fc:	2320      	movs	r3, #32
 80478fe:	e004      	b.n	804790a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8047900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8047904:	fab3 f383 	clz	r3, r3
 8047908:	b2db      	uxtb	r3, r3
 804790a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 804790c:	683b      	ldr	r3, [r7, #0]
 804790e:	681b      	ldr	r3, [r3, #0]
 8047910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047914:	2b00      	cmp	r3, #0
 8047916:	d105      	bne.n	8047924 <HAL_ADC_ConfigChannel+0x180>
 8047918:	683b      	ldr	r3, [r7, #0]
 804791a:	681b      	ldr	r3, [r3, #0]
 804791c:	0e9b      	lsrs	r3, r3, #26
 804791e:	f003 031f 	and.w	r3, r3, #31
 8047922:	e018      	b.n	8047956 <HAL_ADC_ConfigChannel+0x1b2>
 8047924:	683b      	ldr	r3, [r7, #0]
 8047926:	681b      	ldr	r3, [r3, #0]
 8047928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804792c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8047930:	fa93 f3a3 	rbit	r3, r3
 8047934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8047938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 804793c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8047940:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8047944:	2b00      	cmp	r3, #0
 8047946:	d101      	bne.n	804794c <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8047948:	2320      	movs	r3, #32
 804794a:	e004      	b.n	8047956 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 804794c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8047950:	fab3 f383 	clz	r3, r3
 8047954:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8047956:	429a      	cmp	r2, r3
 8047958:	d106      	bne.n	8047968 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 804795a:	687b      	ldr	r3, [r7, #4]
 804795c:	681b      	ldr	r3, [r3, #0]
 804795e:	2200      	movs	r2, #0
 8047960:	2100      	movs	r1, #0
 8047962:	4618      	mov	r0, r3
 8047964:	f7fe ff8e 	bl	8046884 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8047968:	687b      	ldr	r3, [r7, #4]
 804796a:	681b      	ldr	r3, [r3, #0]
 804796c:	2101      	movs	r1, #1
 804796e:	4618      	mov	r0, r3
 8047970:	f7fe ff72 	bl	8046858 <LL_ADC_GetOffsetChannel>
 8047974:	4603      	mov	r3, r0
 8047976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 804797a:	2b00      	cmp	r3, #0
 804797c:	d10a      	bne.n	8047994 <HAL_ADC_ConfigChannel+0x1f0>
 804797e:	687b      	ldr	r3, [r7, #4]
 8047980:	681b      	ldr	r3, [r3, #0]
 8047982:	2101      	movs	r1, #1
 8047984:	4618      	mov	r0, r3
 8047986:	f7fe ff67 	bl	8046858 <LL_ADC_GetOffsetChannel>
 804798a:	4603      	mov	r3, r0
 804798c:	0e9b      	lsrs	r3, r3, #26
 804798e:	f003 021f 	and.w	r2, r3, #31
 8047992:	e01e      	b.n	80479d2 <HAL_ADC_ConfigChannel+0x22e>
 8047994:	687b      	ldr	r3, [r7, #4]
 8047996:	681b      	ldr	r3, [r3, #0]
 8047998:	2101      	movs	r1, #1
 804799a:	4618      	mov	r0, r3
 804799c:	f7fe ff5c 	bl	8046858 <LL_ADC_GetOffsetChannel>
 80479a0:	4603      	mov	r3, r0
 80479a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80479a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80479aa:	fa93 f3a3 	rbit	r3, r3
 80479ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80479b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80479b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80479ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80479be:	2b00      	cmp	r3, #0
 80479c0:	d101      	bne.n	80479c6 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80479c2:	2320      	movs	r3, #32
 80479c4:	e004      	b.n	80479d0 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80479c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80479ca:	fab3 f383 	clz	r3, r3
 80479ce:	b2db      	uxtb	r3, r3
 80479d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80479d2:	683b      	ldr	r3, [r7, #0]
 80479d4:	681b      	ldr	r3, [r3, #0]
 80479d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80479da:	2b00      	cmp	r3, #0
 80479dc:	d105      	bne.n	80479ea <HAL_ADC_ConfigChannel+0x246>
 80479de:	683b      	ldr	r3, [r7, #0]
 80479e0:	681b      	ldr	r3, [r3, #0]
 80479e2:	0e9b      	lsrs	r3, r3, #26
 80479e4:	f003 031f 	and.w	r3, r3, #31
 80479e8:	e018      	b.n	8047a1c <HAL_ADC_ConfigChannel+0x278>
 80479ea:	683b      	ldr	r3, [r7, #0]
 80479ec:	681b      	ldr	r3, [r3, #0]
 80479ee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80479f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80479f6:	fa93 f3a3 	rbit	r3, r3
 80479fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80479fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8047a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8047a06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8047a0a:	2b00      	cmp	r3, #0
 8047a0c:	d101      	bne.n	8047a12 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8047a0e:	2320      	movs	r3, #32
 8047a10:	e004      	b.n	8047a1c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8047a12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8047a16:	fab3 f383 	clz	r3, r3
 8047a1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8047a1c:	429a      	cmp	r2, r3
 8047a1e:	d106      	bne.n	8047a2e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8047a20:	687b      	ldr	r3, [r7, #4]
 8047a22:	681b      	ldr	r3, [r3, #0]
 8047a24:	2200      	movs	r2, #0
 8047a26:	2101      	movs	r1, #1
 8047a28:	4618      	mov	r0, r3
 8047a2a:	f7fe ff2b 	bl	8046884 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8047a2e:	687b      	ldr	r3, [r7, #4]
 8047a30:	681b      	ldr	r3, [r3, #0]
 8047a32:	2102      	movs	r1, #2
 8047a34:	4618      	mov	r0, r3
 8047a36:	f7fe ff0f 	bl	8046858 <LL_ADC_GetOffsetChannel>
 8047a3a:	4603      	mov	r3, r0
 8047a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047a40:	2b00      	cmp	r3, #0
 8047a42:	d10a      	bne.n	8047a5a <HAL_ADC_ConfigChannel+0x2b6>
 8047a44:	687b      	ldr	r3, [r7, #4]
 8047a46:	681b      	ldr	r3, [r3, #0]
 8047a48:	2102      	movs	r1, #2
 8047a4a:	4618      	mov	r0, r3
 8047a4c:	f7fe ff04 	bl	8046858 <LL_ADC_GetOffsetChannel>
 8047a50:	4603      	mov	r3, r0
 8047a52:	0e9b      	lsrs	r3, r3, #26
 8047a54:	f003 021f 	and.w	r2, r3, #31
 8047a58:	e01e      	b.n	8047a98 <HAL_ADC_ConfigChannel+0x2f4>
 8047a5a:	687b      	ldr	r3, [r7, #4]
 8047a5c:	681b      	ldr	r3, [r3, #0]
 8047a5e:	2102      	movs	r1, #2
 8047a60:	4618      	mov	r0, r3
 8047a62:	f7fe fef9 	bl	8046858 <LL_ADC_GetOffsetChannel>
 8047a66:	4603      	mov	r3, r0
 8047a68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8047a70:	fa93 f3a3 	rbit	r3, r3
 8047a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8047a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8047a7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8047a80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8047a84:	2b00      	cmp	r3, #0
 8047a86:	d101      	bne.n	8047a8c <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8047a88:	2320      	movs	r3, #32
 8047a8a:	e004      	b.n	8047a96 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8047a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8047a90:	fab3 f383 	clz	r3, r3
 8047a94:	b2db      	uxtb	r3, r3
 8047a96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8047a98:	683b      	ldr	r3, [r7, #0]
 8047a9a:	681b      	ldr	r3, [r3, #0]
 8047a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047aa0:	2b00      	cmp	r3, #0
 8047aa2:	d105      	bne.n	8047ab0 <HAL_ADC_ConfigChannel+0x30c>
 8047aa4:	683b      	ldr	r3, [r7, #0]
 8047aa6:	681b      	ldr	r3, [r3, #0]
 8047aa8:	0e9b      	lsrs	r3, r3, #26
 8047aaa:	f003 031f 	and.w	r3, r3, #31
 8047aae:	e016      	b.n	8047ade <HAL_ADC_ConfigChannel+0x33a>
 8047ab0:	683b      	ldr	r3, [r7, #0]
 8047ab2:	681b      	ldr	r3, [r3, #0]
 8047ab4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047ab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8047abc:	fa93 f3a3 	rbit	r3, r3
 8047ac0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8047ac2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8047ac4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8047ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8047acc:	2b00      	cmp	r3, #0
 8047ace:	d101      	bne.n	8047ad4 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8047ad0:	2320      	movs	r3, #32
 8047ad2:	e004      	b.n	8047ade <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8047ad4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8047ad8:	fab3 f383 	clz	r3, r3
 8047adc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8047ade:	429a      	cmp	r2, r3
 8047ae0:	d106      	bne.n	8047af0 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8047ae2:	687b      	ldr	r3, [r7, #4]
 8047ae4:	681b      	ldr	r3, [r3, #0]
 8047ae6:	2200      	movs	r2, #0
 8047ae8:	2102      	movs	r1, #2
 8047aea:	4618      	mov	r0, r3
 8047aec:	f7fe feca 	bl	8046884 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8047af0:	687b      	ldr	r3, [r7, #4]
 8047af2:	681b      	ldr	r3, [r3, #0]
 8047af4:	2103      	movs	r1, #3
 8047af6:	4618      	mov	r0, r3
 8047af8:	f7fe feae 	bl	8046858 <LL_ADC_GetOffsetChannel>
 8047afc:	4603      	mov	r3, r0
 8047afe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047b02:	2b00      	cmp	r3, #0
 8047b04:	d10a      	bne.n	8047b1c <HAL_ADC_ConfigChannel+0x378>
 8047b06:	687b      	ldr	r3, [r7, #4]
 8047b08:	681b      	ldr	r3, [r3, #0]
 8047b0a:	2103      	movs	r1, #3
 8047b0c:	4618      	mov	r0, r3
 8047b0e:	f7fe fea3 	bl	8046858 <LL_ADC_GetOffsetChannel>
 8047b12:	4603      	mov	r3, r0
 8047b14:	0e9b      	lsrs	r3, r3, #26
 8047b16:	f003 021f 	and.w	r2, r3, #31
 8047b1a:	e017      	b.n	8047b4c <HAL_ADC_ConfigChannel+0x3a8>
 8047b1c:	687b      	ldr	r3, [r7, #4]
 8047b1e:	681b      	ldr	r3, [r3, #0]
 8047b20:	2103      	movs	r1, #3
 8047b22:	4618      	mov	r0, r3
 8047b24:	f7fe fe98 	bl	8046858 <LL_ADC_GetOffsetChannel>
 8047b28:	4603      	mov	r3, r0
 8047b2a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8047b2e:	fa93 f3a3 	rbit	r3, r3
 8047b32:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8047b34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8047b36:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8047b38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8047b3a:	2b00      	cmp	r3, #0
 8047b3c:	d101      	bne.n	8047b42 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8047b3e:	2320      	movs	r3, #32
 8047b40:	e003      	b.n	8047b4a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8047b42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8047b44:	fab3 f383 	clz	r3, r3
 8047b48:	b2db      	uxtb	r3, r3
 8047b4a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8047b4c:	683b      	ldr	r3, [r7, #0]
 8047b4e:	681b      	ldr	r3, [r3, #0]
 8047b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047b54:	2b00      	cmp	r3, #0
 8047b56:	d105      	bne.n	8047b64 <HAL_ADC_ConfigChannel+0x3c0>
 8047b58:	683b      	ldr	r3, [r7, #0]
 8047b5a:	681b      	ldr	r3, [r3, #0]
 8047b5c:	0e9b      	lsrs	r3, r3, #26
 8047b5e:	f003 031f 	and.w	r3, r3, #31
 8047b62:	e011      	b.n	8047b88 <HAL_ADC_ConfigChannel+0x3e4>
 8047b64:	683b      	ldr	r3, [r7, #0]
 8047b66:	681b      	ldr	r3, [r3, #0]
 8047b68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047b6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8047b6c:	fa93 f3a3 	rbit	r3, r3
 8047b70:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8047b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8047b74:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8047b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8047b78:	2b00      	cmp	r3, #0
 8047b7a:	d101      	bne.n	8047b80 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8047b7c:	2320      	movs	r3, #32
 8047b7e:	e003      	b.n	8047b88 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8047b80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8047b82:	fab3 f383 	clz	r3, r3
 8047b86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8047b88:	429a      	cmp	r2, r3
 8047b8a:	d106      	bne.n	8047b9a <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8047b8c:	687b      	ldr	r3, [r7, #4]
 8047b8e:	681b      	ldr	r3, [r3, #0]
 8047b90:	2200      	movs	r2, #0
 8047b92:	2103      	movs	r1, #3
 8047b94:	4618      	mov	r0, r3
 8047b96:	f7fe fe75 	bl	8046884 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8047b9a:	687b      	ldr	r3, [r7, #4]
 8047b9c:	681b      	ldr	r3, [r3, #0]
 8047b9e:	4618      	mov	r0, r3
 8047ba0:	f7fe ffd2 	bl	8046b48 <LL_ADC_IsEnabled>
 8047ba4:	4603      	mov	r3, r0
 8047ba6:	2b00      	cmp	r3, #0
 8047ba8:	f040 81c8 	bne.w	8047f3c <HAL_ADC_ConfigChannel+0x798>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8047bac:	687b      	ldr	r3, [r7, #4]
 8047bae:	6818      	ldr	r0, [r3, #0]
 8047bb0:	683b      	ldr	r3, [r7, #0]
 8047bb2:	6819      	ldr	r1, [r3, #0]
 8047bb4:	683b      	ldr	r3, [r7, #0]
 8047bb6:	68db      	ldr	r3, [r3, #12]
 8047bb8:	461a      	mov	r2, r3
 8047bba:	f7fe ff0f 	bl	80469dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8047bbe:	683b      	ldr	r3, [r7, #0]
 8047bc0:	68db      	ldr	r3, [r3, #12]
 8047bc2:	4a8f      	ldr	r2, [pc, #572]	; (8047e00 <HAL_ADC_ConfigChannel+0x65c>)
 8047bc4:	4293      	cmp	r3, r2
 8047bc6:	f040 8131 	bne.w	8047e2c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8047bca:	687b      	ldr	r3, [r7, #4]
 8047bcc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8047bce:	683b      	ldr	r3, [r7, #0]
 8047bd0:	681b      	ldr	r3, [r3, #0]
 8047bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047bd6:	2b00      	cmp	r3, #0
 8047bd8:	d10b      	bne.n	8047bf2 <HAL_ADC_ConfigChannel+0x44e>
 8047bda:	683b      	ldr	r3, [r7, #0]
 8047bdc:	681b      	ldr	r3, [r3, #0]
 8047bde:	0e9b      	lsrs	r3, r3, #26
 8047be0:	3301      	adds	r3, #1
 8047be2:	f003 031f 	and.w	r3, r3, #31
 8047be6:	2b09      	cmp	r3, #9
 8047be8:	bf94      	ite	ls
 8047bea:	2301      	movls	r3, #1
 8047bec:	2300      	movhi	r3, #0
 8047bee:	b2db      	uxtb	r3, r3
 8047bf0:	e019      	b.n	8047c26 <HAL_ADC_ConfigChannel+0x482>
 8047bf2:	683b      	ldr	r3, [r7, #0]
 8047bf4:	681b      	ldr	r3, [r3, #0]
 8047bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8047bfa:	fa93 f3a3 	rbit	r3, r3
 8047bfe:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8047c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8047c02:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8047c04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8047c06:	2b00      	cmp	r3, #0
 8047c08:	d101      	bne.n	8047c0e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8047c0a:	2320      	movs	r3, #32
 8047c0c:	e003      	b.n	8047c16 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8047c0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8047c10:	fab3 f383 	clz	r3, r3
 8047c14:	b2db      	uxtb	r3, r3
 8047c16:	3301      	adds	r3, #1
 8047c18:	f003 031f 	and.w	r3, r3, #31
 8047c1c:	2b09      	cmp	r3, #9
 8047c1e:	bf94      	ite	ls
 8047c20:	2301      	movls	r3, #1
 8047c22:	2300      	movhi	r3, #0
 8047c24:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8047c26:	2b00      	cmp	r3, #0
 8047c28:	d079      	beq.n	8047d1e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8047c2a:	683b      	ldr	r3, [r7, #0]
 8047c2c:	681b      	ldr	r3, [r3, #0]
 8047c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047c32:	2b00      	cmp	r3, #0
 8047c34:	d107      	bne.n	8047c46 <HAL_ADC_ConfigChannel+0x4a2>
 8047c36:	683b      	ldr	r3, [r7, #0]
 8047c38:	681b      	ldr	r3, [r3, #0]
 8047c3a:	0e9b      	lsrs	r3, r3, #26
 8047c3c:	3301      	adds	r3, #1
 8047c3e:	069b      	lsls	r3, r3, #26
 8047c40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8047c44:	e015      	b.n	8047c72 <HAL_ADC_ConfigChannel+0x4ce>
 8047c46:	683b      	ldr	r3, [r7, #0]
 8047c48:	681b      	ldr	r3, [r3, #0]
 8047c4a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8047c4e:	fa93 f3a3 	rbit	r3, r3
 8047c52:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8047c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8047c56:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8047c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8047c5a:	2b00      	cmp	r3, #0
 8047c5c:	d101      	bne.n	8047c62 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8047c5e:	2320      	movs	r3, #32
 8047c60:	e003      	b.n	8047c6a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8047c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8047c64:	fab3 f383 	clz	r3, r3
 8047c68:	b2db      	uxtb	r3, r3
 8047c6a:	3301      	adds	r3, #1
 8047c6c:	069b      	lsls	r3, r3, #26
 8047c6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8047c72:	683b      	ldr	r3, [r7, #0]
 8047c74:	681b      	ldr	r3, [r3, #0]
 8047c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047c7a:	2b00      	cmp	r3, #0
 8047c7c:	d109      	bne.n	8047c92 <HAL_ADC_ConfigChannel+0x4ee>
 8047c7e:	683b      	ldr	r3, [r7, #0]
 8047c80:	681b      	ldr	r3, [r3, #0]
 8047c82:	0e9b      	lsrs	r3, r3, #26
 8047c84:	3301      	adds	r3, #1
 8047c86:	f003 031f 	and.w	r3, r3, #31
 8047c8a:	2101      	movs	r1, #1
 8047c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8047c90:	e017      	b.n	8047cc2 <HAL_ADC_ConfigChannel+0x51e>
 8047c92:	683b      	ldr	r3, [r7, #0]
 8047c94:	681b      	ldr	r3, [r3, #0]
 8047c96:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8047c9a:	fa93 f3a3 	rbit	r3, r3
 8047c9e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8047ca0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8047ca2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8047ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8047ca6:	2b00      	cmp	r3, #0
 8047ca8:	d101      	bne.n	8047cae <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8047caa:	2320      	movs	r3, #32
 8047cac:	e003      	b.n	8047cb6 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8047cae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8047cb0:	fab3 f383 	clz	r3, r3
 8047cb4:	b2db      	uxtb	r3, r3
 8047cb6:	3301      	adds	r3, #1
 8047cb8:	f003 031f 	and.w	r3, r3, #31
 8047cbc:	2101      	movs	r1, #1
 8047cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8047cc2:	ea42 0103 	orr.w	r1, r2, r3
 8047cc6:	683b      	ldr	r3, [r7, #0]
 8047cc8:	681b      	ldr	r3, [r3, #0]
 8047cca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047cce:	2b00      	cmp	r3, #0
 8047cd0:	d10a      	bne.n	8047ce8 <HAL_ADC_ConfigChannel+0x544>
 8047cd2:	683b      	ldr	r3, [r7, #0]
 8047cd4:	681b      	ldr	r3, [r3, #0]
 8047cd6:	0e9b      	lsrs	r3, r3, #26
 8047cd8:	3301      	adds	r3, #1
 8047cda:	f003 021f 	and.w	r2, r3, #31
 8047cde:	4613      	mov	r3, r2
 8047ce0:	005b      	lsls	r3, r3, #1
 8047ce2:	4413      	add	r3, r2
 8047ce4:	051b      	lsls	r3, r3, #20
 8047ce6:	e018      	b.n	8047d1a <HAL_ADC_ConfigChannel+0x576>
 8047ce8:	683b      	ldr	r3, [r7, #0]
 8047cea:	681b      	ldr	r3, [r3, #0]
 8047cec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047cf0:	fa93 f3a3 	rbit	r3, r3
 8047cf4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8047cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8047cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8047cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8047cfc:	2b00      	cmp	r3, #0
 8047cfe:	d101      	bne.n	8047d04 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8047d00:	2320      	movs	r3, #32
 8047d02:	e003      	b.n	8047d0c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8047d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8047d06:	fab3 f383 	clz	r3, r3
 8047d0a:	b2db      	uxtb	r3, r3
 8047d0c:	3301      	adds	r3, #1
 8047d0e:	f003 021f 	and.w	r2, r3, #31
 8047d12:	4613      	mov	r3, r2
 8047d14:	005b      	lsls	r3, r3, #1
 8047d16:	4413      	add	r3, r2
 8047d18:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8047d1a:	430b      	orrs	r3, r1
 8047d1c:	e081      	b.n	8047e22 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8047d1e:	683b      	ldr	r3, [r7, #0]
 8047d20:	681b      	ldr	r3, [r3, #0]
 8047d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047d26:	2b00      	cmp	r3, #0
 8047d28:	d107      	bne.n	8047d3a <HAL_ADC_ConfigChannel+0x596>
 8047d2a:	683b      	ldr	r3, [r7, #0]
 8047d2c:	681b      	ldr	r3, [r3, #0]
 8047d2e:	0e9b      	lsrs	r3, r3, #26
 8047d30:	3301      	adds	r3, #1
 8047d32:	069b      	lsls	r3, r3, #26
 8047d34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8047d38:	e015      	b.n	8047d66 <HAL_ADC_ConfigChannel+0x5c2>
 8047d3a:	683b      	ldr	r3, [r7, #0]
 8047d3c:	681b      	ldr	r3, [r3, #0]
 8047d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047d42:	fa93 f3a3 	rbit	r3, r3
 8047d46:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8047d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8047d4a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8047d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8047d4e:	2b00      	cmp	r3, #0
 8047d50:	d101      	bne.n	8047d56 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8047d52:	2320      	movs	r3, #32
 8047d54:	e003      	b.n	8047d5e <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8047d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8047d58:	fab3 f383 	clz	r3, r3
 8047d5c:	b2db      	uxtb	r3, r3
 8047d5e:	3301      	adds	r3, #1
 8047d60:	069b      	lsls	r3, r3, #26
 8047d62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8047d66:	683b      	ldr	r3, [r7, #0]
 8047d68:	681b      	ldr	r3, [r3, #0]
 8047d6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047d6e:	2b00      	cmp	r3, #0
 8047d70:	d109      	bne.n	8047d86 <HAL_ADC_ConfigChannel+0x5e2>
 8047d72:	683b      	ldr	r3, [r7, #0]
 8047d74:	681b      	ldr	r3, [r3, #0]
 8047d76:	0e9b      	lsrs	r3, r3, #26
 8047d78:	3301      	adds	r3, #1
 8047d7a:	f003 031f 	and.w	r3, r3, #31
 8047d7e:	2101      	movs	r1, #1
 8047d80:	fa01 f303 	lsl.w	r3, r1, r3
 8047d84:	e017      	b.n	8047db6 <HAL_ADC_ConfigChannel+0x612>
 8047d86:	683b      	ldr	r3, [r7, #0]
 8047d88:	681b      	ldr	r3, [r3, #0]
 8047d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047d8c:	6a3b      	ldr	r3, [r7, #32]
 8047d8e:	fa93 f3a3 	rbit	r3, r3
 8047d92:	61fb      	str	r3, [r7, #28]
  return result;
 8047d94:	69fb      	ldr	r3, [r7, #28]
 8047d96:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8047d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047d9a:	2b00      	cmp	r3, #0
 8047d9c:	d101      	bne.n	8047da2 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8047d9e:	2320      	movs	r3, #32
 8047da0:	e003      	b.n	8047daa <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8047da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8047da4:	fab3 f383 	clz	r3, r3
 8047da8:	b2db      	uxtb	r3, r3
 8047daa:	3301      	adds	r3, #1
 8047dac:	f003 031f 	and.w	r3, r3, #31
 8047db0:	2101      	movs	r1, #1
 8047db2:	fa01 f303 	lsl.w	r3, r1, r3
 8047db6:	ea42 0103 	orr.w	r1, r2, r3
 8047dba:	683b      	ldr	r3, [r7, #0]
 8047dbc:	681b      	ldr	r3, [r3, #0]
 8047dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8047dc2:	2b00      	cmp	r3, #0
 8047dc4:	d10d      	bne.n	8047de2 <HAL_ADC_ConfigChannel+0x63e>
 8047dc6:	683b      	ldr	r3, [r7, #0]
 8047dc8:	681b      	ldr	r3, [r3, #0]
 8047dca:	0e9b      	lsrs	r3, r3, #26
 8047dcc:	3301      	adds	r3, #1
 8047dce:	f003 021f 	and.w	r2, r3, #31
 8047dd2:	4613      	mov	r3, r2
 8047dd4:	005b      	lsls	r3, r3, #1
 8047dd6:	4413      	add	r3, r2
 8047dd8:	3b1e      	subs	r3, #30
 8047dda:	051b      	lsls	r3, r3, #20
 8047ddc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8047de0:	e01e      	b.n	8047e20 <HAL_ADC_ConfigChannel+0x67c>
 8047de2:	683b      	ldr	r3, [r7, #0]
 8047de4:	681b      	ldr	r3, [r3, #0]
 8047de6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8047de8:	697b      	ldr	r3, [r7, #20]
 8047dea:	fa93 f3a3 	rbit	r3, r3
 8047dee:	613b      	str	r3, [r7, #16]
  return result;
 8047df0:	693b      	ldr	r3, [r7, #16]
 8047df2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8047df4:	69bb      	ldr	r3, [r7, #24]
 8047df6:	2b00      	cmp	r3, #0
 8047df8:	d104      	bne.n	8047e04 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8047dfa:	2320      	movs	r3, #32
 8047dfc:	e006      	b.n	8047e0c <HAL_ADC_ConfigChannel+0x668>
 8047dfe:	bf00      	nop
 8047e00:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8047e04:	69bb      	ldr	r3, [r7, #24]
 8047e06:	fab3 f383 	clz	r3, r3
 8047e0a:	b2db      	uxtb	r3, r3
 8047e0c:	3301      	adds	r3, #1
 8047e0e:	f003 021f 	and.w	r2, r3, #31
 8047e12:	4613      	mov	r3, r2
 8047e14:	005b      	lsls	r3, r3, #1
 8047e16:	4413      	add	r3, r2
 8047e18:	3b1e      	subs	r3, #30
 8047e1a:	051b      	lsls	r3, r3, #20
 8047e1c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8047e20:	430b      	orrs	r3, r1
 8047e22:	683a      	ldr	r2, [r7, #0]
 8047e24:	6892      	ldr	r2, [r2, #8]
 8047e26:	4619      	mov	r1, r3
 8047e28:	f7fe fdac 	bl	8046984 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8047e2c:	683b      	ldr	r3, [r7, #0]
 8047e2e:	681a      	ldr	r2, [r3, #0]
 8047e30:	4b47      	ldr	r3, [pc, #284]	; (8047f50 <HAL_ADC_ConfigChannel+0x7ac>)
 8047e32:	4013      	ands	r3, r2
 8047e34:	2b00      	cmp	r3, #0
 8047e36:	f000 8081 	beq.w	8047f3c <HAL_ADC_ConfigChannel+0x798>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8047e3a:	4846      	ldr	r0, [pc, #280]	; (8047f54 <HAL_ADC_ConfigChannel+0x7b0>)
 8047e3c:	f7fe fcda 	bl	80467f4 <LL_ADC_GetCommonPathInternalCh>
 8047e40:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8047e44:	4844      	ldr	r0, [pc, #272]	; (8047f58 <HAL_ADC_ConfigChannel+0x7b4>)
 8047e46:	f7fe fe7f 	bl	8046b48 <LL_ADC_IsEnabled>
 8047e4a:	4604      	mov	r4, r0
 8047e4c:	4843      	ldr	r0, [pc, #268]	; (8047f5c <HAL_ADC_ConfigChannel+0x7b8>)
 8047e4e:	f7fe fe7b 	bl	8046b48 <LL_ADC_IsEnabled>
 8047e52:	4603      	mov	r3, r0
 8047e54:	4323      	orrs	r3, r4
 8047e56:	2b00      	cmp	r3, #0
 8047e58:	d15d      	bne.n	8047f16 <HAL_ADC_ConfigChannel+0x772>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8047e5a:	683b      	ldr	r3, [r7, #0]
 8047e5c:	681b      	ldr	r3, [r3, #0]
 8047e5e:	4a40      	ldr	r2, [pc, #256]	; (8047f60 <HAL_ADC_ConfigChannel+0x7bc>)
 8047e60:	4293      	cmp	r3, r2
 8047e62:	d126      	bne.n	8047eb2 <HAL_ADC_ConfigChannel+0x70e>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8047e64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8047e68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8047e6c:	2b00      	cmp	r3, #0
 8047e6e:	d120      	bne.n	8047eb2 <HAL_ADC_ConfigChannel+0x70e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8047e70:	687b      	ldr	r3, [r7, #4]
 8047e72:	681b      	ldr	r3, [r3, #0]
 8047e74:	4a38      	ldr	r2, [pc, #224]	; (8047f58 <HAL_ADC_ConfigChannel+0x7b4>)
 8047e76:	4293      	cmp	r3, r2
 8047e78:	d160      	bne.n	8047f3c <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8047e7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8047e7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8047e82:	4619      	mov	r1, r3
 8047e84:	4833      	ldr	r0, [pc, #204]	; (8047f54 <HAL_ADC_ConfigChannel+0x7b0>)
 8047e86:	f7fe fca2 	bl	80467ce <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8047e8a:	4b36      	ldr	r3, [pc, #216]	; (8047f64 <HAL_ADC_ConfigChannel+0x7c0>)
 8047e8c:	681b      	ldr	r3, [r3, #0]
 8047e8e:	099b      	lsrs	r3, r3, #6
 8047e90:	4a35      	ldr	r2, [pc, #212]	; (8047f68 <HAL_ADC_ConfigChannel+0x7c4>)
 8047e92:	fba2 2303 	umull	r2, r3, r2, r3
 8047e96:	099a      	lsrs	r2, r3, #6
 8047e98:	4613      	mov	r3, r2
 8047e9a:	005b      	lsls	r3, r3, #1
 8047e9c:	4413      	add	r3, r2
 8047e9e:	009b      	lsls	r3, r3, #2
 8047ea0:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8047ea2:	e002      	b.n	8047eaa <HAL_ADC_ConfigChannel+0x706>
              {
                wait_loop_index--;
 8047ea4:	68fb      	ldr	r3, [r7, #12]
 8047ea6:	3b01      	subs	r3, #1
 8047ea8:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8047eaa:	68fb      	ldr	r3, [r7, #12]
 8047eac:	2b00      	cmp	r3, #0
 8047eae:	d1f9      	bne.n	8047ea4 <HAL_ADC_ConfigChannel+0x700>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8047eb0:	e044      	b.n	8047f3c <HAL_ADC_ConfigChannel+0x798>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8047eb2:	683b      	ldr	r3, [r7, #0]
 8047eb4:	681b      	ldr	r3, [r3, #0]
 8047eb6:	4a2d      	ldr	r2, [pc, #180]	; (8047f6c <HAL_ADC_ConfigChannel+0x7c8>)
 8047eb8:	4293      	cmp	r3, r2
 8047eba:	d113      	bne.n	8047ee4 <HAL_ADC_ConfigChannel+0x740>
 8047ebc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8047ec0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8047ec4:	2b00      	cmp	r3, #0
 8047ec6:	d10d      	bne.n	8047ee4 <HAL_ADC_ConfigChannel+0x740>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8047ec8:	687b      	ldr	r3, [r7, #4]
 8047eca:	681b      	ldr	r3, [r3, #0]
 8047ecc:	4a22      	ldr	r2, [pc, #136]	; (8047f58 <HAL_ADC_ConfigChannel+0x7b4>)
 8047ece:	4293      	cmp	r3, r2
 8047ed0:	d134      	bne.n	8047f3c <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8047ed2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8047ed6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8047eda:	4619      	mov	r1, r3
 8047edc:	481d      	ldr	r0, [pc, #116]	; (8047f54 <HAL_ADC_ConfigChannel+0x7b0>)
 8047ede:	f7fe fc76 	bl	80467ce <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8047ee2:	e02b      	b.n	8047f3c <HAL_ADC_ConfigChannel+0x798>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8047ee4:	683b      	ldr	r3, [r7, #0]
 8047ee6:	681b      	ldr	r3, [r3, #0]
 8047ee8:	4a21      	ldr	r2, [pc, #132]	; (8047f70 <HAL_ADC_ConfigChannel+0x7cc>)
 8047eea:	4293      	cmp	r3, r2
 8047eec:	d126      	bne.n	8047f3c <HAL_ADC_ConfigChannel+0x798>
 8047eee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8047ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8047ef6:	2b00      	cmp	r3, #0
 8047ef8:	d120      	bne.n	8047f3c <HAL_ADC_ConfigChannel+0x798>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8047efa:	687b      	ldr	r3, [r7, #4]
 8047efc:	681b      	ldr	r3, [r3, #0]
 8047efe:	4a16      	ldr	r2, [pc, #88]	; (8047f58 <HAL_ADC_ConfigChannel+0x7b4>)
 8047f00:	4293      	cmp	r3, r2
 8047f02:	d11b      	bne.n	8047f3c <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8047f04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8047f08:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8047f0c:	4619      	mov	r1, r3
 8047f0e:	4811      	ldr	r0, [pc, #68]	; (8047f54 <HAL_ADC_ConfigChannel+0x7b0>)
 8047f10:	f7fe fc5d 	bl	80467ce <LL_ADC_SetCommonPathInternalCh>
 8047f14:	e012      	b.n	8047f3c <HAL_ADC_ConfigChannel+0x798>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8047f16:	687b      	ldr	r3, [r7, #4]
 8047f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047f1a:	f043 0220 	orr.w	r2, r3, #32
 8047f1e:	687b      	ldr	r3, [r7, #4]
 8047f20:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8047f22:	2301      	movs	r3, #1
 8047f24:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8047f28:	e008      	b.n	8047f3c <HAL_ADC_ConfigChannel+0x798>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8047f2a:	687b      	ldr	r3, [r7, #4]
 8047f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047f2e:	f043 0220 	orr.w	r2, r3, #32
 8047f32:	687b      	ldr	r3, [r7, #4]
 8047f34:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8047f36:	2301      	movs	r3, #1
 8047f38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8047f3c:	687b      	ldr	r3, [r7, #4]
 8047f3e:	2200      	movs	r2, #0
 8047f40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8047f44:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8047f48:	4618      	mov	r0, r3
 8047f4a:	37dc      	adds	r7, #220	; 0xdc
 8047f4c:	46bd      	mov	sp, r7
 8047f4e:	bd90      	pop	{r4, r7, pc}
 8047f50:	80080000 	.word	0x80080000
 8047f54:	42028300 	.word	0x42028300
 8047f58:	42028000 	.word	0x42028000
 8047f5c:	42028100 	.word	0x42028100
 8047f60:	c7520000 	.word	0xc7520000
 8047f64:	20018024 	.word	0x20018024
 8047f68:	053e2d63 	.word	0x053e2d63
 8047f6c:	cb840000 	.word	0xcb840000
 8047f70:	80000001 	.word	0x80000001

08047f74 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8047f74:	b480      	push	{r7}
 8047f76:	b083      	sub	sp, #12
 8047f78:	af00      	add	r7, sp, #0
 8047f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8047f7c:	687b      	ldr	r3, [r7, #4]
 8047f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8047f80:	4618      	mov	r0, r3
 8047f82:	370c      	adds	r7, #12
 8047f84:	46bd      	mov	sp, r7
 8047f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f8a:	4770      	bx	lr

08047f8c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8047f8c:	b580      	push	{r7, lr}
 8047f8e:	b088      	sub	sp, #32
 8047f90:	af00      	add	r7, sp, #0
 8047f92:	6078      	str	r0, [r7, #4]
 8047f94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8047f96:	2300      	movs	r3, #0
 8047f98:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8047f9a:	683b      	ldr	r3, [r7, #0]
 8047f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8047f9e:	687b      	ldr	r3, [r7, #4]
 8047fa0:	681b      	ldr	r3, [r3, #0]
 8047fa2:	4618      	mov	r0, r3
 8047fa4:	f7fe fe1e 	bl	8046be4 <LL_ADC_REG_IsConversionOngoing>
 8047fa8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8047faa:	687b      	ldr	r3, [r7, #4]
 8047fac:	681b      	ldr	r3, [r3, #0]
 8047fae:	4618      	mov	r0, r3
 8047fb0:	f7fe fe3f 	bl	8046c32 <LL_ADC_INJ_IsConversionOngoing>
 8047fb4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8047fb6:	693b      	ldr	r3, [r7, #16]
 8047fb8:	2b00      	cmp	r3, #0
 8047fba:	d103      	bne.n	8047fc4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8047fbc:	68fb      	ldr	r3, [r7, #12]
 8047fbe:	2b00      	cmp	r3, #0
 8047fc0:	f000 8091 	beq.w	80480e6 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8047fc4:	687b      	ldr	r3, [r7, #4]
 8047fc6:	681b      	ldr	r3, [r3, #0]
 8047fc8:	68db      	ldr	r3, [r3, #12]
 8047fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8047fce:	2b00      	cmp	r3, #0
 8047fd0:	d02a      	beq.n	8048028 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8047fd2:	687b      	ldr	r3, [r7, #4]
 8047fd4:	7e5b      	ldrb	r3, [r3, #25]
 8047fd6:	2b01      	cmp	r3, #1
 8047fd8:	d126      	bne.n	8048028 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8047fda:	687b      	ldr	r3, [r7, #4]
 8047fdc:	7e1b      	ldrb	r3, [r3, #24]
 8047fde:	2b01      	cmp	r3, #1
 8047fe0:	d122      	bne.n	8048028 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8047fe2:	2301      	movs	r3, #1
 8047fe4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8047fe6:	e014      	b.n	8048012 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8047fe8:	69fb      	ldr	r3, [r7, #28]
 8047fea:	4a41      	ldr	r2, [pc, #260]	; (80480f0 <ADC_ConversionStop+0x164>)
 8047fec:	4293      	cmp	r3, r2
 8047fee:	d90d      	bls.n	804800c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8047ff0:	687b      	ldr	r3, [r7, #4]
 8047ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8047ff4:	f043 0210 	orr.w	r2, r3, #16
 8047ff8:	687b      	ldr	r3, [r7, #4]
 8047ffa:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8047ffc:	687b      	ldr	r3, [r7, #4]
 8047ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8048000:	f043 0201 	orr.w	r2, r3, #1
 8048004:	687b      	ldr	r3, [r7, #4]
 8048006:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8048008:	2301      	movs	r3, #1
 804800a:	e06d      	b.n	80480e8 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 804800c:	69fb      	ldr	r3, [r7, #28]
 804800e:	3301      	adds	r3, #1
 8048010:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8048012:	687b      	ldr	r3, [r7, #4]
 8048014:	681b      	ldr	r3, [r3, #0]
 8048016:	681b      	ldr	r3, [r3, #0]
 8048018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804801c:	2b40      	cmp	r3, #64	; 0x40
 804801e:	d1e3      	bne.n	8047fe8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8048020:	687b      	ldr	r3, [r7, #4]
 8048022:	681b      	ldr	r3, [r3, #0]
 8048024:	2240      	movs	r2, #64	; 0x40
 8048026:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8048028:	69bb      	ldr	r3, [r7, #24]
 804802a:	2b02      	cmp	r3, #2
 804802c:	d014      	beq.n	8048058 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 804802e:	687b      	ldr	r3, [r7, #4]
 8048030:	681b      	ldr	r3, [r3, #0]
 8048032:	4618      	mov	r0, r3
 8048034:	f7fe fdd6 	bl	8046be4 <LL_ADC_REG_IsConversionOngoing>
 8048038:	4603      	mov	r3, r0
 804803a:	2b00      	cmp	r3, #0
 804803c:	d00c      	beq.n	8048058 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 804803e:	687b      	ldr	r3, [r7, #4]
 8048040:	681b      	ldr	r3, [r3, #0]
 8048042:	4618      	mov	r0, r3
 8048044:	f7fe fd93 	bl	8046b6e <LL_ADC_IsDisableOngoing>
 8048048:	4603      	mov	r3, r0
 804804a:	2b00      	cmp	r3, #0
 804804c:	d104      	bne.n	8048058 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 804804e:	687b      	ldr	r3, [r7, #4]
 8048050:	681b      	ldr	r3, [r3, #0]
 8048052:	4618      	mov	r0, r3
 8048054:	f7fe fdb2 	bl	8046bbc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8048058:	69bb      	ldr	r3, [r7, #24]
 804805a:	2b01      	cmp	r3, #1
 804805c:	d014      	beq.n	8048088 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 804805e:	687b      	ldr	r3, [r7, #4]
 8048060:	681b      	ldr	r3, [r3, #0]
 8048062:	4618      	mov	r0, r3
 8048064:	f7fe fde5 	bl	8046c32 <LL_ADC_INJ_IsConversionOngoing>
 8048068:	4603      	mov	r3, r0
 804806a:	2b00      	cmp	r3, #0
 804806c:	d00c      	beq.n	8048088 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 804806e:	687b      	ldr	r3, [r7, #4]
 8048070:	681b      	ldr	r3, [r3, #0]
 8048072:	4618      	mov	r0, r3
 8048074:	f7fe fd7b 	bl	8046b6e <LL_ADC_IsDisableOngoing>
 8048078:	4603      	mov	r3, r0
 804807a:	2b00      	cmp	r3, #0
 804807c:	d104      	bne.n	8048088 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 804807e:	687b      	ldr	r3, [r7, #4]
 8048080:	681b      	ldr	r3, [r3, #0]
 8048082:	4618      	mov	r0, r3
 8048084:	f7fe fdc1 	bl	8046c0a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8048088:	69bb      	ldr	r3, [r7, #24]
 804808a:	2b02      	cmp	r3, #2
 804808c:	d005      	beq.n	804809a <ADC_ConversionStop+0x10e>
 804808e:	69bb      	ldr	r3, [r7, #24]
 8048090:	2b03      	cmp	r3, #3
 8048092:	d105      	bne.n	80480a0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8048094:	230c      	movs	r3, #12
 8048096:	617b      	str	r3, [r7, #20]
        break;
 8048098:	e005      	b.n	80480a6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 804809a:	2308      	movs	r3, #8
 804809c:	617b      	str	r3, [r7, #20]
        break;
 804809e:	e002      	b.n	80480a6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80480a0:	2304      	movs	r3, #4
 80480a2:	617b      	str	r3, [r7, #20]
        break;
 80480a4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80480a6:	f7fe fb2f 	bl	8046708 <HAL_GetTick>
 80480aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80480ac:	e014      	b.n	80480d8 <ADC_ConversionStop+0x14c>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80480ae:	f7fe fb2b 	bl	8046708 <HAL_GetTick>
 80480b2:	4602      	mov	r2, r0
 80480b4:	68bb      	ldr	r3, [r7, #8]
 80480b6:	1ad3      	subs	r3, r2, r3
 80480b8:	2b05      	cmp	r3, #5
 80480ba:	d90d      	bls.n	80480d8 <ADC_ConversionStop+0x14c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80480bc:	687b      	ldr	r3, [r7, #4]
 80480be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80480c0:	f043 0210 	orr.w	r2, r3, #16
 80480c4:	687b      	ldr	r3, [r7, #4]
 80480c6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80480c8:	687b      	ldr	r3, [r7, #4]
 80480ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80480cc:	f043 0201 	orr.w	r2, r3, #1
 80480d0:	687b      	ldr	r3, [r7, #4]
 80480d2:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 80480d4:	2301      	movs	r3, #1
 80480d6:	e007      	b.n	80480e8 <ADC_ConversionStop+0x15c>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80480d8:	687b      	ldr	r3, [r7, #4]
 80480da:	681b      	ldr	r3, [r3, #0]
 80480dc:	689a      	ldr	r2, [r3, #8]
 80480de:	697b      	ldr	r3, [r7, #20]
 80480e0:	4013      	ands	r3, r2
 80480e2:	2b00      	cmp	r3, #0
 80480e4:	d1e3      	bne.n	80480ae <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80480e6:	2300      	movs	r3, #0
}
 80480e8:	4618      	mov	r0, r3
 80480ea:	3720      	adds	r7, #32
 80480ec:	46bd      	mov	sp, r7
 80480ee:	bd80      	pop	{r7, pc}
 80480f0:	a33fffff 	.word	0xa33fffff

080480f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80480f4:	b580      	push	{r7, lr}
 80480f6:	b084      	sub	sp, #16
 80480f8:	af00      	add	r7, sp, #0
 80480fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80480fc:	687b      	ldr	r3, [r7, #4]
 80480fe:	681b      	ldr	r3, [r3, #0]
 8048100:	4618      	mov	r0, r3
 8048102:	f7fe fd21 	bl	8046b48 <LL_ADC_IsEnabled>
 8048106:	4603      	mov	r3, r0
 8048108:	2b00      	cmp	r3, #0
 804810a:	d146      	bne.n	804819a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 804810c:	687b      	ldr	r3, [r7, #4]
 804810e:	681b      	ldr	r3, [r3, #0]
 8048110:	689a      	ldr	r2, [r3, #8]
 8048112:	4b24      	ldr	r3, [pc, #144]	; (80481a4 <ADC_Enable+0xb0>)
 8048114:	4013      	ands	r3, r2
 8048116:	2b00      	cmp	r3, #0
 8048118:	d00d      	beq.n	8048136 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 804811a:	687b      	ldr	r3, [r7, #4]
 804811c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804811e:	f043 0210 	orr.w	r2, r3, #16
 8048122:	687b      	ldr	r3, [r7, #4]
 8048124:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8048126:	687b      	ldr	r3, [r7, #4]
 8048128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804812a:	f043 0201 	orr.w	r2, r3, #1
 804812e:	687b      	ldr	r3, [r7, #4]
 8048130:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8048132:	2301      	movs	r3, #1
 8048134:	e032      	b.n	804819c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8048136:	687b      	ldr	r3, [r7, #4]
 8048138:	681b      	ldr	r3, [r3, #0]
 804813a:	4618      	mov	r0, r3
 804813c:	f7fe fcdc 	bl	8046af8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8048140:	f7fe fae2 	bl	8046708 <HAL_GetTick>
 8048144:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8048146:	e021      	b.n	804818c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8048148:	687b      	ldr	r3, [r7, #4]
 804814a:	681b      	ldr	r3, [r3, #0]
 804814c:	4618      	mov	r0, r3
 804814e:	f7fe fcfb 	bl	8046b48 <LL_ADC_IsEnabled>
 8048152:	4603      	mov	r3, r0
 8048154:	2b00      	cmp	r3, #0
 8048156:	d104      	bne.n	8048162 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8048158:	687b      	ldr	r3, [r7, #4]
 804815a:	681b      	ldr	r3, [r3, #0]
 804815c:	4618      	mov	r0, r3
 804815e:	f7fe fccb 	bl	8046af8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8048162:	f7fe fad1 	bl	8046708 <HAL_GetTick>
 8048166:	4602      	mov	r2, r0
 8048168:	68fb      	ldr	r3, [r7, #12]
 804816a:	1ad3      	subs	r3, r2, r3
 804816c:	2b02      	cmp	r3, #2
 804816e:	d90d      	bls.n	804818c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8048170:	687b      	ldr	r3, [r7, #4]
 8048172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8048174:	f043 0210 	orr.w	r2, r3, #16
 8048178:	687b      	ldr	r3, [r7, #4]
 804817a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 804817c:	687b      	ldr	r3, [r7, #4]
 804817e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8048180:	f043 0201 	orr.w	r2, r3, #1
 8048184:	687b      	ldr	r3, [r7, #4]
 8048186:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8048188:	2301      	movs	r3, #1
 804818a:	e007      	b.n	804819c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 804818c:	687b      	ldr	r3, [r7, #4]
 804818e:	681b      	ldr	r3, [r3, #0]
 8048190:	681b      	ldr	r3, [r3, #0]
 8048192:	f003 0301 	and.w	r3, r3, #1
 8048196:	2b01      	cmp	r3, #1
 8048198:	d1d6      	bne.n	8048148 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 804819a:	2300      	movs	r3, #0
}
 804819c:	4618      	mov	r0, r3
 804819e:	3710      	adds	r7, #16
 80481a0:	46bd      	mov	sp, r7
 80481a2:	bd80      	pop	{r7, pc}
 80481a4:	8000003f 	.word	0x8000003f

080481a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80481a8:	b580      	push	{r7, lr}
 80481aa:	b084      	sub	sp, #16
 80481ac:	af00      	add	r7, sp, #0
 80481ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80481b0:	687b      	ldr	r3, [r7, #4]
 80481b2:	681b      	ldr	r3, [r3, #0]
 80481b4:	4618      	mov	r0, r3
 80481b6:	f7fe fcda 	bl	8046b6e <LL_ADC_IsDisableOngoing>
 80481ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80481bc:	687b      	ldr	r3, [r7, #4]
 80481be:	681b      	ldr	r3, [r3, #0]
 80481c0:	4618      	mov	r0, r3
 80481c2:	f7fe fcc1 	bl	8046b48 <LL_ADC_IsEnabled>
 80481c6:	4603      	mov	r3, r0
 80481c8:	2b00      	cmp	r3, #0
 80481ca:	d040      	beq.n	804824e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 80481cc:	68fb      	ldr	r3, [r7, #12]
 80481ce:	2b00      	cmp	r3, #0
 80481d0:	d13d      	bne.n	804824e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80481d2:	687b      	ldr	r3, [r7, #4]
 80481d4:	681b      	ldr	r3, [r3, #0]
 80481d6:	689b      	ldr	r3, [r3, #8]
 80481d8:	f003 030d 	and.w	r3, r3, #13
 80481dc:	2b01      	cmp	r3, #1
 80481de:	d10c      	bne.n	80481fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80481e0:	687b      	ldr	r3, [r7, #4]
 80481e2:	681b      	ldr	r3, [r3, #0]
 80481e4:	4618      	mov	r0, r3
 80481e6:	f7fe fc9b 	bl	8046b20 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80481ea:	687b      	ldr	r3, [r7, #4]
 80481ec:	681b      	ldr	r3, [r3, #0]
 80481ee:	2203      	movs	r2, #3
 80481f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80481f2:	f7fe fa89 	bl	8046708 <HAL_GetTick>
 80481f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80481f8:	e022      	b.n	8048240 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80481fa:	687b      	ldr	r3, [r7, #4]
 80481fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80481fe:	f043 0210 	orr.w	r2, r3, #16
 8048202:	687b      	ldr	r3, [r7, #4]
 8048204:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8048206:	687b      	ldr	r3, [r7, #4]
 8048208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804820a:	f043 0201 	orr.w	r2, r3, #1
 804820e:	687b      	ldr	r3, [r7, #4]
 8048210:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8048212:	2301      	movs	r3, #1
 8048214:	e01c      	b.n	8048250 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8048216:	f7fe fa77 	bl	8046708 <HAL_GetTick>
 804821a:	4602      	mov	r2, r0
 804821c:	68bb      	ldr	r3, [r7, #8]
 804821e:	1ad3      	subs	r3, r2, r3
 8048220:	2b02      	cmp	r3, #2
 8048222:	d90d      	bls.n	8048240 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8048224:	687b      	ldr	r3, [r7, #4]
 8048226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8048228:	f043 0210 	orr.w	r2, r3, #16
 804822c:	687b      	ldr	r3, [r7, #4]
 804822e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8048230:	687b      	ldr	r3, [r7, #4]
 8048232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8048234:	f043 0201 	orr.w	r2, r3, #1
 8048238:	687b      	ldr	r3, [r7, #4]
 804823a:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 804823c:	2301      	movs	r3, #1
 804823e:	e007      	b.n	8048250 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8048240:	687b      	ldr	r3, [r7, #4]
 8048242:	681b      	ldr	r3, [r3, #0]
 8048244:	689b      	ldr	r3, [r3, #8]
 8048246:	f003 0301 	and.w	r3, r3, #1
 804824a:	2b00      	cmp	r3, #0
 804824c:	d1e3      	bne.n	8048216 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 804824e:	2300      	movs	r3, #0
}
 8048250:	4618      	mov	r0, r3
 8048252:	3710      	adds	r7, #16
 8048254:	46bd      	mov	sp, r7
 8048256:	bd80      	pop	{r7, pc}

08048258 <LL_ADC_IsEnabled>:
{
 8048258:	b480      	push	{r7}
 804825a:	b083      	sub	sp, #12
 804825c:	af00      	add	r7, sp, #0
 804825e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8048260:	687b      	ldr	r3, [r7, #4]
 8048262:	689b      	ldr	r3, [r3, #8]
 8048264:	f003 0301 	and.w	r3, r3, #1
 8048268:	2b01      	cmp	r3, #1
 804826a:	d101      	bne.n	8048270 <LL_ADC_IsEnabled+0x18>
 804826c:	2301      	movs	r3, #1
 804826e:	e000      	b.n	8048272 <LL_ADC_IsEnabled+0x1a>
 8048270:	2300      	movs	r3, #0
}
 8048272:	4618      	mov	r0, r3
 8048274:	370c      	adds	r7, #12
 8048276:	46bd      	mov	sp, r7
 8048278:	f85d 7b04 	ldr.w	r7, [sp], #4
 804827c:	4770      	bx	lr

0804827e <LL_ADC_REG_IsConversionOngoing>:
{
 804827e:	b480      	push	{r7}
 8048280:	b083      	sub	sp, #12
 8048282:	af00      	add	r7, sp, #0
 8048284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8048286:	687b      	ldr	r3, [r7, #4]
 8048288:	689b      	ldr	r3, [r3, #8]
 804828a:	f003 0304 	and.w	r3, r3, #4
 804828e:	2b04      	cmp	r3, #4
 8048290:	d101      	bne.n	8048296 <LL_ADC_REG_IsConversionOngoing+0x18>
 8048292:	2301      	movs	r3, #1
 8048294:	e000      	b.n	8048298 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8048296:	2300      	movs	r3, #0
}
 8048298:	4618      	mov	r0, r3
 804829a:	370c      	adds	r7, #12
 804829c:	46bd      	mov	sp, r7
 804829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80482a2:	4770      	bx	lr

080482a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80482a4:	b480      	push	{r7}
 80482a6:	b083      	sub	sp, #12
 80482a8:	af00      	add	r7, sp, #0
 80482aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80482ac:	bf00      	nop
 80482ae:	370c      	adds	r7, #12
 80482b0:	46bd      	mov	sp, r7
 80482b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80482b6:	4770      	bx	lr

080482b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80482b8:	b480      	push	{r7}
 80482ba:	b083      	sub	sp, #12
 80482bc:	af00      	add	r7, sp, #0
 80482be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80482c0:	bf00      	nop
 80482c2:	370c      	adds	r7, #12
 80482c4:	46bd      	mov	sp, r7
 80482c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80482ca:	4770      	bx	lr

080482cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80482cc:	b480      	push	{r7}
 80482ce:	b083      	sub	sp, #12
 80482d0:	af00      	add	r7, sp, #0
 80482d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80482d4:	bf00      	nop
 80482d6:	370c      	adds	r7, #12
 80482d8:	46bd      	mov	sp, r7
 80482da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80482de:	4770      	bx	lr

080482e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80482e0:	b480      	push	{r7}
 80482e2:	b083      	sub	sp, #12
 80482e4:	af00      	add	r7, sp, #0
 80482e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80482e8:	bf00      	nop
 80482ea:	370c      	adds	r7, #12
 80482ec:	46bd      	mov	sp, r7
 80482ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80482f2:	4770      	bx	lr

080482f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80482f4:	b480      	push	{r7}
 80482f6:	b083      	sub	sp, #12
 80482f8:	af00      	add	r7, sp, #0
 80482fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80482fc:	bf00      	nop
 80482fe:	370c      	adds	r7, #12
 8048300:	46bd      	mov	sp, r7
 8048302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048306:	4770      	bx	lr

08048308 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8048308:	b590      	push	{r4, r7, lr}
 804830a:	b0ab      	sub	sp, #172	; 0xac
 804830c:	af00      	add	r7, sp, #0
 804830e:	6078      	str	r0, [r7, #4]
 8048310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8048312:	2300      	movs	r3, #0
 8048314:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8048318:	687b      	ldr	r3, [r7, #4]
 804831a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 804831e:	2b01      	cmp	r3, #1
 8048320:	d101      	bne.n	8048326 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8048322:	2302      	movs	r3, #2
 8048324:	e090      	b.n	8048448 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8048326:	687b      	ldr	r3, [r7, #4]
 8048328:	2201      	movs	r2, #1
 804832a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 804832e:	687b      	ldr	r3, [r7, #4]
 8048330:	681b      	ldr	r3, [r3, #0]
 8048332:	4a47      	ldr	r2, [pc, #284]	; (8048450 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8048334:	4293      	cmp	r3, r2
 8048336:	d102      	bne.n	804833e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8048338:	4b46      	ldr	r3, [pc, #280]	; (8048454 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 804833a:	60bb      	str	r3, [r7, #8]
 804833c:	e001      	b.n	8048342 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 804833e:	2300      	movs	r3, #0
 8048340:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8048342:	68bb      	ldr	r3, [r7, #8]
 8048344:	2b00      	cmp	r3, #0
 8048346:	d10b      	bne.n	8048360 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8048348:	687b      	ldr	r3, [r7, #4]
 804834a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804834c:	f043 0220 	orr.w	r2, r3, #32
 8048350:	687b      	ldr	r3, [r7, #4]
 8048352:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8048354:	687b      	ldr	r3, [r7, #4]
 8048356:	2200      	movs	r2, #0
 8048358:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 804835c:	2301      	movs	r3, #1
 804835e:	e073      	b.n	8048448 <HAL_ADCEx_MultiModeConfigChannel+0x140>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8048360:	68bb      	ldr	r3, [r7, #8]
 8048362:	4618      	mov	r0, r3
 8048364:	f7ff ff8b 	bl	804827e <LL_ADC_REG_IsConversionOngoing>
 8048368:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 804836c:	687b      	ldr	r3, [r7, #4]
 804836e:	681b      	ldr	r3, [r3, #0]
 8048370:	4618      	mov	r0, r3
 8048372:	f7ff ff84 	bl	804827e <LL_ADC_REG_IsConversionOngoing>
 8048376:	4603      	mov	r3, r0
 8048378:	2b00      	cmp	r3, #0
 804837a:	d154      	bne.n	8048426 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
      && (tmphadcSlave_conversion_on_going == 0UL))
 804837c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8048380:	2b00      	cmp	r3, #0
 8048382:	d150      	bne.n	8048426 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8048384:	4b34      	ldr	r3, [pc, #208]	; (8048458 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8048386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 804838a:	683b      	ldr	r3, [r7, #0]
 804838c:	681b      	ldr	r3, [r3, #0]
 804838e:	2b00      	cmp	r3, #0
 8048390:	d02b      	beq.n	80483ea <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8048392:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8048396:	689b      	ldr	r3, [r3, #8]
 8048398:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 804839c:	683b      	ldr	r3, [r7, #0]
 804839e:	6859      	ldr	r1, [r3, #4]
 80483a0:	687b      	ldr	r3, [r7, #4]
 80483a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80483a6:	035b      	lsls	r3, r3, #13
 80483a8:	430b      	orrs	r3, r1
 80483aa:	431a      	orrs	r2, r3
 80483ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80483b0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80483b2:	4827      	ldr	r0, [pc, #156]	; (8048450 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80483b4:	f7ff ff50 	bl	8048258 <LL_ADC_IsEnabled>
 80483b8:	4604      	mov	r4, r0
 80483ba:	4826      	ldr	r0, [pc, #152]	; (8048454 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80483bc:	f7ff ff4c 	bl	8048258 <LL_ADC_IsEnabled>
 80483c0:	4603      	mov	r3, r0
 80483c2:	4323      	orrs	r3, r4
 80483c4:	2b00      	cmp	r3, #0
 80483c6:	d138      	bne.n	804843a <HAL_ADCEx_MultiModeConfigChannel+0x132>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80483c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80483cc:	689b      	ldr	r3, [r3, #8]
 80483ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80483d2:	f023 030f 	bic.w	r3, r3, #15
 80483d6:	683a      	ldr	r2, [r7, #0]
 80483d8:	6811      	ldr	r1, [r2, #0]
 80483da:	683a      	ldr	r2, [r7, #0]
 80483dc:	6892      	ldr	r2, [r2, #8]
 80483de:	430a      	orrs	r2, r1
 80483e0:	431a      	orrs	r2, r3
 80483e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80483e6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80483e8:	e027      	b.n	804843a <HAL_ADCEx_MultiModeConfigChannel+0x132>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80483ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80483ee:	689b      	ldr	r3, [r3, #8]
 80483f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80483f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80483f8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80483fa:	4815      	ldr	r0, [pc, #84]	; (8048450 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80483fc:	f7ff ff2c 	bl	8048258 <LL_ADC_IsEnabled>
 8048400:	4604      	mov	r4, r0
 8048402:	4814      	ldr	r0, [pc, #80]	; (8048454 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8048404:	f7ff ff28 	bl	8048258 <LL_ADC_IsEnabled>
 8048408:	4603      	mov	r3, r0
 804840a:	4323      	orrs	r3, r4
 804840c:	2b00      	cmp	r3, #0
 804840e:	d114      	bne.n	804843a <HAL_ADCEx_MultiModeConfigChannel+0x132>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8048410:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8048414:	689b      	ldr	r3, [r3, #8]
 8048416:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 804841a:	f023 030f 	bic.w	r3, r3, #15
 804841e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8048422:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8048424:	e009      	b.n	804843a <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8048426:	687b      	ldr	r3, [r7, #4]
 8048428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804842a:	f043 0220 	orr.w	r2, r3, #32
 804842e:	687b      	ldr	r3, [r7, #4]
 8048430:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8048432:	2301      	movs	r3, #1
 8048434:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8048438:	e000      	b.n	804843c <HAL_ADCEx_MultiModeConfigChannel+0x134>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 804843a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 804843c:	687b      	ldr	r3, [r7, #4]
 804843e:	2200      	movs	r2, #0
 8048440:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8048444:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 8048448:	4618      	mov	r0, r3
 804844a:	37ac      	adds	r7, #172	; 0xac
 804844c:	46bd      	mov	sp, r7
 804844e:	bd90      	pop	{r4, r7, pc}
 8048450:	42028000 	.word	0x42028000
 8048454:	42028100 	.word	0x42028100
 8048458:	42028300 	.word	0x42028300

0804845c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 804845c:	b480      	push	{r7}
 804845e:	b085      	sub	sp, #20
 8048460:	af00      	add	r7, sp, #0
 8048462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8048464:	687b      	ldr	r3, [r7, #4]
 8048466:	f003 0307 	and.w	r3, r3, #7
 804846a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 804846c:	4b0c      	ldr	r3, [pc, #48]	; (80484a0 <__NVIC_SetPriorityGrouping+0x44>)
 804846e:	68db      	ldr	r3, [r3, #12]
 8048470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8048472:	68ba      	ldr	r2, [r7, #8]
 8048474:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8048478:	4013      	ands	r3, r2
 804847a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 804847c:	68fb      	ldr	r3, [r7, #12]
 804847e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8048480:	68bb      	ldr	r3, [r7, #8]
 8048482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8048484:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8048488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804848c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804848e:	4a04      	ldr	r2, [pc, #16]	; (80484a0 <__NVIC_SetPriorityGrouping+0x44>)
 8048490:	68bb      	ldr	r3, [r7, #8]
 8048492:	60d3      	str	r3, [r2, #12]
}
 8048494:	bf00      	nop
 8048496:	3714      	adds	r7, #20
 8048498:	46bd      	mov	sp, r7
 804849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804849e:	4770      	bx	lr
 80484a0:	e000ed00 	.word	0xe000ed00

080484a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80484a4:	b480      	push	{r7}
 80484a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80484a8:	4b04      	ldr	r3, [pc, #16]	; (80484bc <__NVIC_GetPriorityGrouping+0x18>)
 80484aa:	68db      	ldr	r3, [r3, #12]
 80484ac:	0a1b      	lsrs	r3, r3, #8
 80484ae:	f003 0307 	and.w	r3, r3, #7
}
 80484b2:	4618      	mov	r0, r3
 80484b4:	46bd      	mov	sp, r7
 80484b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80484ba:	4770      	bx	lr
 80484bc:	e000ed00 	.word	0xe000ed00

080484c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80484c0:	b480      	push	{r7}
 80484c2:	b083      	sub	sp, #12
 80484c4:	af00      	add	r7, sp, #0
 80484c6:	4603      	mov	r3, r0
 80484c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80484ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80484ce:	2b00      	cmp	r3, #0
 80484d0:	db0b      	blt.n	80484ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80484d2:	79fb      	ldrb	r3, [r7, #7]
 80484d4:	f003 021f 	and.w	r2, r3, #31
 80484d8:	4907      	ldr	r1, [pc, #28]	; (80484f8 <__NVIC_EnableIRQ+0x38>)
 80484da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80484de:	095b      	lsrs	r3, r3, #5
 80484e0:	2001      	movs	r0, #1
 80484e2:	fa00 f202 	lsl.w	r2, r0, r2
 80484e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80484ea:	bf00      	nop
 80484ec:	370c      	adds	r7, #12
 80484ee:	46bd      	mov	sp, r7
 80484f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80484f4:	4770      	bx	lr
 80484f6:	bf00      	nop
 80484f8:	e000e100 	.word	0xe000e100

080484fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80484fc:	b480      	push	{r7}
 80484fe:	b083      	sub	sp, #12
 8048500:	af00      	add	r7, sp, #0
 8048502:	4603      	mov	r3, r0
 8048504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8048506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804850a:	2b00      	cmp	r3, #0
 804850c:	db12      	blt.n	8048534 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 804850e:	79fb      	ldrb	r3, [r7, #7]
 8048510:	f003 021f 	and.w	r2, r3, #31
 8048514:	490a      	ldr	r1, [pc, #40]	; (8048540 <__NVIC_DisableIRQ+0x44>)
 8048516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804851a:	095b      	lsrs	r3, r3, #5
 804851c:	2001      	movs	r0, #1
 804851e:	fa00 f202 	lsl.w	r2, r0, r2
 8048522:	3320      	adds	r3, #32
 8048524:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8048528:	f3bf 8f4f 	dsb	sy
}
 804852c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 804852e:	f3bf 8f6f 	isb	sy
}
 8048532:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8048534:	bf00      	nop
 8048536:	370c      	adds	r7, #12
 8048538:	46bd      	mov	sp, r7
 804853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804853e:	4770      	bx	lr
 8048540:	e000e100 	.word	0xe000e100

08048544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8048544:	b480      	push	{r7}
 8048546:	b083      	sub	sp, #12
 8048548:	af00      	add	r7, sp, #0
 804854a:	4603      	mov	r3, r0
 804854c:	6039      	str	r1, [r7, #0]
 804854e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8048550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8048554:	2b00      	cmp	r3, #0
 8048556:	db0a      	blt.n	804856e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8048558:	683b      	ldr	r3, [r7, #0]
 804855a:	b2da      	uxtb	r2, r3
 804855c:	490c      	ldr	r1, [pc, #48]	; (8048590 <__NVIC_SetPriority+0x4c>)
 804855e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8048562:	0152      	lsls	r2, r2, #5
 8048564:	b2d2      	uxtb	r2, r2
 8048566:	440b      	add	r3, r1
 8048568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 804856c:	e00a      	b.n	8048584 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804856e:	683b      	ldr	r3, [r7, #0]
 8048570:	b2da      	uxtb	r2, r3
 8048572:	4908      	ldr	r1, [pc, #32]	; (8048594 <__NVIC_SetPriority+0x50>)
 8048574:	79fb      	ldrb	r3, [r7, #7]
 8048576:	f003 030f 	and.w	r3, r3, #15
 804857a:	3b04      	subs	r3, #4
 804857c:	0152      	lsls	r2, r2, #5
 804857e:	b2d2      	uxtb	r2, r2
 8048580:	440b      	add	r3, r1
 8048582:	761a      	strb	r2, [r3, #24]
}
 8048584:	bf00      	nop
 8048586:	370c      	adds	r7, #12
 8048588:	46bd      	mov	sp, r7
 804858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804858e:	4770      	bx	lr
 8048590:	e000e100 	.word	0xe000e100
 8048594:	e000ed00 	.word	0xe000ed00

08048598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8048598:	b480      	push	{r7}
 804859a:	b089      	sub	sp, #36	; 0x24
 804859c:	af00      	add	r7, sp, #0
 804859e:	60f8      	str	r0, [r7, #12]
 80485a0:	60b9      	str	r1, [r7, #8]
 80485a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80485a4:	68fb      	ldr	r3, [r7, #12]
 80485a6:	f003 0307 	and.w	r3, r3, #7
 80485aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80485ac:	69fb      	ldr	r3, [r7, #28]
 80485ae:	f1c3 0307 	rsb	r3, r3, #7
 80485b2:	2b03      	cmp	r3, #3
 80485b4:	bf28      	it	cs
 80485b6:	2303      	movcs	r3, #3
 80485b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80485ba:	69fb      	ldr	r3, [r7, #28]
 80485bc:	3303      	adds	r3, #3
 80485be:	2b06      	cmp	r3, #6
 80485c0:	d902      	bls.n	80485c8 <NVIC_EncodePriority+0x30>
 80485c2:	69fb      	ldr	r3, [r7, #28]
 80485c4:	3b04      	subs	r3, #4
 80485c6:	e000      	b.n	80485ca <NVIC_EncodePriority+0x32>
 80485c8:	2300      	movs	r3, #0
 80485ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80485cc:	f04f 32ff 	mov.w	r2, #4294967295
 80485d0:	69bb      	ldr	r3, [r7, #24]
 80485d2:	fa02 f303 	lsl.w	r3, r2, r3
 80485d6:	43da      	mvns	r2, r3
 80485d8:	68bb      	ldr	r3, [r7, #8]
 80485da:	401a      	ands	r2, r3
 80485dc:	697b      	ldr	r3, [r7, #20]
 80485de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80485e0:	f04f 31ff 	mov.w	r1, #4294967295
 80485e4:	697b      	ldr	r3, [r7, #20]
 80485e6:	fa01 f303 	lsl.w	r3, r1, r3
 80485ea:	43d9      	mvns	r1, r3
 80485ec:	687b      	ldr	r3, [r7, #4]
 80485ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80485f0:	4313      	orrs	r3, r2
         );
}
 80485f2:	4618      	mov	r0, r3
 80485f4:	3724      	adds	r7, #36	; 0x24
 80485f6:	46bd      	mov	sp, r7
 80485f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80485fc:	4770      	bx	lr

080485fe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80485fe:	b580      	push	{r7, lr}
 8048600:	b082      	sub	sp, #8
 8048602:	af00      	add	r7, sp, #0
 8048604:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8048606:	6878      	ldr	r0, [r7, #4]
 8048608:	f7ff ff28 	bl	804845c <__NVIC_SetPriorityGrouping>
}
 804860c:	bf00      	nop
 804860e:	3708      	adds	r7, #8
 8048610:	46bd      	mov	sp, r7
 8048612:	bd80      	pop	{r7, pc}

08048614 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8048614:	b580      	push	{r7, lr}
 8048616:	b086      	sub	sp, #24
 8048618:	af00      	add	r7, sp, #0
 804861a:	4603      	mov	r3, r0
 804861c:	60b9      	str	r1, [r7, #8]
 804861e:	607a      	str	r2, [r7, #4]
 8048620:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8048622:	f7ff ff3f 	bl	80484a4 <__NVIC_GetPriorityGrouping>
 8048626:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8048628:	687a      	ldr	r2, [r7, #4]
 804862a:	68b9      	ldr	r1, [r7, #8]
 804862c:	6978      	ldr	r0, [r7, #20]
 804862e:	f7ff ffb3 	bl	8048598 <NVIC_EncodePriority>
 8048632:	4602      	mov	r2, r0
 8048634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8048638:	4611      	mov	r1, r2
 804863a:	4618      	mov	r0, r3
 804863c:	f7ff ff82 	bl	8048544 <__NVIC_SetPriority>
}
 8048640:	bf00      	nop
 8048642:	3718      	adds	r7, #24
 8048644:	46bd      	mov	sp, r7
 8048646:	bd80      	pop	{r7, pc}

08048648 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8048648:	b580      	push	{r7, lr}
 804864a:	b082      	sub	sp, #8
 804864c:	af00      	add	r7, sp, #0
 804864e:	4603      	mov	r3, r0
 8048650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8048652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8048656:	4618      	mov	r0, r3
 8048658:	f7ff ff32 	bl	80484c0 <__NVIC_EnableIRQ>
}
 804865c:	bf00      	nop
 804865e:	3708      	adds	r7, #8
 8048660:	46bd      	mov	sp, r7
 8048662:	bd80      	pop	{r7, pc}

08048664 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8048664:	b580      	push	{r7, lr}
 8048666:	b082      	sub	sp, #8
 8048668:	af00      	add	r7, sp, #0
 804866a:	4603      	mov	r3, r0
 804866c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 804866e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8048672:	4618      	mov	r0, r3
 8048674:	f7ff ff42 	bl	80484fc <__NVIC_DisableIRQ>
}
 8048678:	bf00      	nop
 804867a:	3708      	adds	r7, #8
 804867c:	46bd      	mov	sp, r7
 804867e:	bd80      	pop	{r7, pc}

08048680 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8048680:	b580      	push	{r7, lr}
 8048682:	b084      	sub	sp, #16
 8048684:	af00      	add	r7, sp, #0
 8048686:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8048688:	687b      	ldr	r3, [r7, #4]
 804868a:	2b00      	cmp	r3, #0
 804868c:	d101      	bne.n	8048692 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 804868e:	2301      	movs	r3, #1
 8048690:	e08d      	b.n	80487ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8048692:	687b      	ldr	r3, [r7, #4]
 8048694:	681b      	ldr	r3, [r3, #0]
 8048696:	461a      	mov	r2, r3
 8048698:	4b47      	ldr	r3, [pc, #284]	; (80487b8 <HAL_DMA_Init+0x138>)
 804869a:	429a      	cmp	r2, r3
 804869c:	d80f      	bhi.n	80486be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 804869e:	687b      	ldr	r3, [r7, #4]
 80486a0:	681b      	ldr	r3, [r3, #0]
 80486a2:	461a      	mov	r2, r3
 80486a4:	4b45      	ldr	r3, [pc, #276]	; (80487bc <HAL_DMA_Init+0x13c>)
 80486a6:	4413      	add	r3, r2
 80486a8:	4a45      	ldr	r2, [pc, #276]	; (80487c0 <HAL_DMA_Init+0x140>)
 80486aa:	fba2 2303 	umull	r2, r3, r2, r3
 80486ae:	091b      	lsrs	r3, r3, #4
 80486b0:	009a      	lsls	r2, r3, #2
 80486b2:	687b      	ldr	r3, [r7, #4]
 80486b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 80486b6:	687b      	ldr	r3, [r7, #4]
 80486b8:	4a42      	ldr	r2, [pc, #264]	; (80487c4 <HAL_DMA_Init+0x144>)
 80486ba:	649a      	str	r2, [r3, #72]	; 0x48
 80486bc:	e00e      	b.n	80486dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80486be:	687b      	ldr	r3, [r7, #4]
 80486c0:	681b      	ldr	r3, [r3, #0]
 80486c2:	461a      	mov	r2, r3
 80486c4:	4b40      	ldr	r3, [pc, #256]	; (80487c8 <HAL_DMA_Init+0x148>)
 80486c6:	4413      	add	r3, r2
 80486c8:	4a3d      	ldr	r2, [pc, #244]	; (80487c0 <HAL_DMA_Init+0x140>)
 80486ca:	fba2 2303 	umull	r2, r3, r2, r3
 80486ce:	091b      	lsrs	r3, r3, #4
 80486d0:	009a      	lsls	r2, r3, #2
 80486d2:	687b      	ldr	r3, [r7, #4]
 80486d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 80486d6:	687b      	ldr	r3, [r7, #4]
 80486d8:	4a3c      	ldr	r2, [pc, #240]	; (80487cc <HAL_DMA_Init+0x14c>)
 80486da:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80486dc:	687b      	ldr	r3, [r7, #4]
 80486de:	2202      	movs	r2, #2
 80486e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80486e4:	687b      	ldr	r3, [r7, #4]
 80486e6:	681b      	ldr	r3, [r3, #0]
 80486e8:	681b      	ldr	r3, [r3, #0]
 80486ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80486ec:	68fb      	ldr	r3, [r7, #12]
 80486ee:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 80486f2:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80486f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80486f8:	687b      	ldr	r3, [r7, #4]
 80486fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80486fc:	687b      	ldr	r3, [r7, #4]
 80486fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8048700:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8048702:	687b      	ldr	r3, [r7, #4]
 8048704:	691b      	ldr	r3, [r3, #16]
 8048706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8048708:	687b      	ldr	r3, [r7, #4]
 804870a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 804870c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 804870e:	687b      	ldr	r3, [r7, #4]
 8048710:	699b      	ldr	r3, [r3, #24]
 8048712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8048714:	687b      	ldr	r3, [r7, #4]
 8048716:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8048718:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 804871a:	687b      	ldr	r3, [r7, #4]
 804871c:	6a1b      	ldr	r3, [r3, #32]
 804871e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8048720:	68fa      	ldr	r2, [r7, #12]
 8048722:	4313      	orrs	r3, r2
 8048724:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8048726:	687b      	ldr	r3, [r7, #4]
 8048728:	681b      	ldr	r3, [r3, #0]
 804872a:	68fa      	ldr	r2, [r7, #12]
 804872c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 804872e:	6878      	ldr	r0, [r7, #4]
 8048730:	f000 fa48 	bl	8048bc4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8048734:	687b      	ldr	r3, [r7, #4]
 8048736:	689b      	ldr	r3, [r3, #8]
 8048738:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804873c:	d102      	bne.n	8048744 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 804873e:	687b      	ldr	r3, [r7, #4]
 8048740:	2200      	movs	r2, #0
 8048742:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8048744:	687b      	ldr	r3, [r7, #4]
 8048746:	685a      	ldr	r2, [r3, #4]
 8048748:	687b      	ldr	r3, [r7, #4]
 804874a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804874c:	b2d2      	uxtb	r2, r2
 804874e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8048750:	687b      	ldr	r3, [r7, #4]
 8048752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048754:	687a      	ldr	r2, [r7, #4]
 8048756:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8048758:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 804875a:	687b      	ldr	r3, [r7, #4]
 804875c:	685b      	ldr	r3, [r3, #4]
 804875e:	2b00      	cmp	r3, #0
 8048760:	d010      	beq.n	8048784 <HAL_DMA_Init+0x104>
 8048762:	687b      	ldr	r3, [r7, #4]
 8048764:	685b      	ldr	r3, [r3, #4]
 8048766:	2b04      	cmp	r3, #4
 8048768:	d80c      	bhi.n	8048784 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 804876a:	6878      	ldr	r0, [r7, #4]
 804876c:	f000 fa68 	bl	8048c40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8048770:	687b      	ldr	r3, [r7, #4]
 8048772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8048774:	2200      	movs	r2, #0
 8048776:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8048778:	687b      	ldr	r3, [r7, #4]
 804877a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804877c:	687a      	ldr	r2, [r7, #4]
 804877e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8048780:	605a      	str	r2, [r3, #4]
 8048782:	e008      	b.n	8048796 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8048784:	687b      	ldr	r3, [r7, #4]
 8048786:	2200      	movs	r2, #0
 8048788:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 804878a:	687b      	ldr	r3, [r7, #4]
 804878c:	2200      	movs	r2, #0
 804878e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8048790:	687b      	ldr	r3, [r7, #4]
 8048792:	2200      	movs	r2, #0
 8048794:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8048796:	687b      	ldr	r3, [r7, #4]
 8048798:	2200      	movs	r2, #0
 804879a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 804879c:	687b      	ldr	r3, [r7, #4]
 804879e:	2201      	movs	r2, #1
 80487a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80487a4:	687b      	ldr	r3, [r7, #4]
 80487a6:	2200      	movs	r2, #0
 80487a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80487ac:	2300      	movs	r3, #0
}
 80487ae:	4618      	mov	r0, r3
 80487b0:	3710      	adds	r7, #16
 80487b2:	46bd      	mov	sp, r7
 80487b4:	bd80      	pop	{r7, pc}
 80487b6:	bf00      	nop
 80487b8:	40020407 	.word	0x40020407
 80487bc:	bffdfff8 	.word	0xbffdfff8
 80487c0:	cccccccd 	.word	0xcccccccd
 80487c4:	40020000 	.word	0x40020000
 80487c8:	bffdfbf8 	.word	0xbffdfbf8
 80487cc:	40020400 	.word	0x40020400

080487d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80487d0:	b480      	push	{r7}
 80487d2:	b085      	sub	sp, #20
 80487d4:	af00      	add	r7, sp, #0
 80487d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80487d8:	2300      	movs	r3, #0
 80487da:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80487dc:	687b      	ldr	r3, [r7, #4]
 80487de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80487e2:	b2db      	uxtb	r3, r3
 80487e4:	2b02      	cmp	r3, #2
 80487e6:	d008      	beq.n	80487fa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80487e8:	687b      	ldr	r3, [r7, #4]
 80487ea:	2204      	movs	r2, #4
 80487ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80487ee:	687b      	ldr	r3, [r7, #4]
 80487f0:	2200      	movs	r2, #0
 80487f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80487f6:	2301      	movs	r3, #1
 80487f8:	e040      	b.n	804887c <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80487fa:	687b      	ldr	r3, [r7, #4]
 80487fc:	681b      	ldr	r3, [r3, #0]
 80487fe:	681a      	ldr	r2, [r3, #0]
 8048800:	687b      	ldr	r3, [r7, #4]
 8048802:	681b      	ldr	r3, [r3, #0]
 8048804:	f022 020e 	bic.w	r2, r2, #14
 8048808:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 804880a:	687b      	ldr	r3, [r7, #4]
 804880c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804880e:	681a      	ldr	r2, [r3, #0]
 8048810:	687b      	ldr	r3, [r7, #4]
 8048812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8048814:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8048818:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 804881a:	687b      	ldr	r3, [r7, #4]
 804881c:	681b      	ldr	r3, [r3, #0]
 804881e:	681a      	ldr	r2, [r3, #0]
 8048820:	687b      	ldr	r3, [r7, #4]
 8048822:	681b      	ldr	r3, [r3, #0]
 8048824:	f022 0201 	bic.w	r2, r2, #1
 8048828:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 804882a:	687b      	ldr	r3, [r7, #4]
 804882c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804882e:	f003 021c 	and.w	r2, r3, #28
 8048832:	687b      	ldr	r3, [r7, #4]
 8048834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8048836:	2101      	movs	r1, #1
 8048838:	fa01 f202 	lsl.w	r2, r1, r2
 804883c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 804883e:	687b      	ldr	r3, [r7, #4]
 8048840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048842:	687a      	ldr	r2, [r7, #4]
 8048844:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8048846:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8048848:	687b      	ldr	r3, [r7, #4]
 804884a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804884c:	2b00      	cmp	r3, #0
 804884e:	d00c      	beq.n	804886a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8048850:	687b      	ldr	r3, [r7, #4]
 8048852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8048854:	681a      	ldr	r2, [r3, #0]
 8048856:	687b      	ldr	r3, [r7, #4]
 8048858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804885a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 804885e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8048860:	687b      	ldr	r3, [r7, #4]
 8048862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8048864:	687a      	ldr	r2, [r7, #4]
 8048866:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8048868:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 804886a:	687b      	ldr	r3, [r7, #4]
 804886c:	2201      	movs	r2, #1
 804886e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8048872:	687b      	ldr	r3, [r7, #4]
 8048874:	2200      	movs	r2, #0
 8048876:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 804887a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 804887c:	4618      	mov	r0, r3
 804887e:	3714      	adds	r7, #20
 8048880:	46bd      	mov	sp, r7
 8048882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048886:	4770      	bx	lr

08048888 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8048888:	b580      	push	{r7, lr}
 804888a:	b084      	sub	sp, #16
 804888c:	af00      	add	r7, sp, #0
 804888e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8048890:	2300      	movs	r3, #0
 8048892:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8048894:	687b      	ldr	r3, [r7, #4]
 8048896:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 804889a:	b2db      	uxtb	r3, r3
 804889c:	2b02      	cmp	r3, #2
 804889e:	d005      	beq.n	80488ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80488a0:	687b      	ldr	r3, [r7, #4]
 80488a2:	2204      	movs	r2, #4
 80488a4:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80488a6:	2301      	movs	r3, #1
 80488a8:	73fb      	strb	r3, [r7, #15]
 80488aa:	e047      	b.n	804893c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80488ac:	687b      	ldr	r3, [r7, #4]
 80488ae:	681b      	ldr	r3, [r3, #0]
 80488b0:	681a      	ldr	r2, [r3, #0]
 80488b2:	687b      	ldr	r3, [r7, #4]
 80488b4:	681b      	ldr	r3, [r3, #0]
 80488b6:	f022 020e 	bic.w	r2, r2, #14
 80488ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80488bc:	687b      	ldr	r3, [r7, #4]
 80488be:	681b      	ldr	r3, [r3, #0]
 80488c0:	681a      	ldr	r2, [r3, #0]
 80488c2:	687b      	ldr	r3, [r7, #4]
 80488c4:	681b      	ldr	r3, [r3, #0]
 80488c6:	f022 0201 	bic.w	r2, r2, #1
 80488ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80488cc:	687b      	ldr	r3, [r7, #4]
 80488ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80488d0:	681a      	ldr	r2, [r3, #0]
 80488d2:	687b      	ldr	r3, [r7, #4]
 80488d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80488d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80488da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80488dc:	687b      	ldr	r3, [r7, #4]
 80488de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80488e0:	f003 021c 	and.w	r2, r3, #28
 80488e4:	687b      	ldr	r3, [r7, #4]
 80488e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80488e8:	2101      	movs	r1, #1
 80488ea:	fa01 f202 	lsl.w	r2, r1, r2
 80488ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80488f0:	687b      	ldr	r3, [r7, #4]
 80488f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80488f4:	687a      	ldr	r2, [r7, #4]
 80488f6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80488f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80488fa:	687b      	ldr	r3, [r7, #4]
 80488fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80488fe:	2b00      	cmp	r3, #0
 8048900:	d00c      	beq.n	804891c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8048902:	687b      	ldr	r3, [r7, #4]
 8048904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8048906:	681a      	ldr	r2, [r3, #0]
 8048908:	687b      	ldr	r3, [r7, #4]
 804890a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804890c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8048910:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8048912:	687b      	ldr	r3, [r7, #4]
 8048914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8048916:	687a      	ldr	r2, [r7, #4]
 8048918:	6e52      	ldr	r2, [r2, #100]	; 0x64
 804891a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 804891c:	687b      	ldr	r3, [r7, #4]
 804891e:	2201      	movs	r2, #1
 8048920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8048924:	687b      	ldr	r3, [r7, #4]
 8048926:	2200      	movs	r2, #0
 8048928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 804892c:	687b      	ldr	r3, [r7, #4]
 804892e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048930:	2b00      	cmp	r3, #0
 8048932:	d003      	beq.n	804893c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8048934:	687b      	ldr	r3, [r7, #4]
 8048936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8048938:	6878      	ldr	r0, [r7, #4]
 804893a:	4798      	blx	r3
    }
  }
  return status;
 804893c:	7bfb      	ldrb	r3, [r7, #15]
}
 804893e:	4618      	mov	r0, r3
 8048940:	3710      	adds	r7, #16
 8048942:	46bd      	mov	sp, r7
 8048944:	bd80      	pop	{r7, pc}

08048946 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8048946:	b580      	push	{r7, lr}
 8048948:	b084      	sub	sp, #16
 804894a:	af00      	add	r7, sp, #0
 804894c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 804894e:	687b      	ldr	r3, [r7, #4]
 8048950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8048952:	681b      	ldr	r3, [r3, #0]
 8048954:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8048956:	687b      	ldr	r3, [r7, #4]
 8048958:	681b      	ldr	r3, [r3, #0]
 804895a:	681b      	ldr	r3, [r3, #0]
 804895c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 804895e:	687b      	ldr	r3, [r7, #4]
 8048960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048962:	f003 031c 	and.w	r3, r3, #28
 8048966:	2204      	movs	r2, #4
 8048968:	409a      	lsls	r2, r3
 804896a:	68fb      	ldr	r3, [r7, #12]
 804896c:	4013      	ands	r3, r2
 804896e:	2b00      	cmp	r3, #0
 8048970:	d053      	beq.n	8048a1a <HAL_DMA_IRQHandler+0xd4>
 8048972:	68bb      	ldr	r3, [r7, #8]
 8048974:	f003 0304 	and.w	r3, r3, #4
 8048978:	2b00      	cmp	r3, #0
 804897a:	d04e      	beq.n	8048a1a <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 804897c:	687b      	ldr	r3, [r7, #4]
 804897e:	681b      	ldr	r3, [r3, #0]
 8048980:	681b      	ldr	r3, [r3, #0]
 8048982:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8048986:	2b00      	cmp	r3, #0
 8048988:	d024      	beq.n	80489d4 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 804898a:	687b      	ldr	r3, [r7, #4]
 804898c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804898e:	f003 021c 	and.w	r2, r3, #28
 8048992:	687b      	ldr	r3, [r7, #4]
 8048994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8048996:	2104      	movs	r1, #4
 8048998:	fa01 f202 	lsl.w	r2, r1, r2
 804899c:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 804899e:	687b      	ldr	r3, [r7, #4]
 80489a0:	681b      	ldr	r3, [r3, #0]
 80489a2:	681b      	ldr	r3, [r3, #0]
 80489a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80489a8:	2b00      	cmp	r3, #0
 80489aa:	d109      	bne.n	80489c0 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 80489ac:	687b      	ldr	r3, [r7, #4]
 80489ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80489b0:	2b00      	cmp	r3, #0
 80489b2:	f000 80c0 	beq.w	8048b36 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80489b6:	687b      	ldr	r3, [r7, #4]
 80489b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80489ba:	6878      	ldr	r0, [r7, #4]
 80489bc:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80489be:	e0ba      	b.n	8048b36 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 80489c0:	687b      	ldr	r3, [r7, #4]
 80489c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80489c4:	2b00      	cmp	r3, #0
 80489c6:	f000 80b6 	beq.w	8048b36 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 80489ca:	687b      	ldr	r3, [r7, #4]
 80489cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80489ce:	6878      	ldr	r0, [r7, #4]
 80489d0:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80489d2:	e0b0      	b.n	8048b36 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80489d4:	687b      	ldr	r3, [r7, #4]
 80489d6:	681b      	ldr	r3, [r3, #0]
 80489d8:	681b      	ldr	r3, [r3, #0]
 80489da:	f003 0320 	and.w	r3, r3, #32
 80489de:	2b00      	cmp	r3, #0
 80489e0:	d107      	bne.n	80489f2 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80489e2:	687b      	ldr	r3, [r7, #4]
 80489e4:	681b      	ldr	r3, [r3, #0]
 80489e6:	681a      	ldr	r2, [r3, #0]
 80489e8:	687b      	ldr	r3, [r7, #4]
 80489ea:	681b      	ldr	r3, [r3, #0]
 80489ec:	f022 0204 	bic.w	r2, r2, #4
 80489f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80489f2:	687b      	ldr	r3, [r7, #4]
 80489f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80489f6:	f003 021c 	and.w	r2, r3, #28
 80489fa:	687b      	ldr	r3, [r7, #4]
 80489fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80489fe:	2104      	movs	r1, #4
 8048a00:	fa01 f202 	lsl.w	r2, r1, r2
 8048a04:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8048a06:	687b      	ldr	r3, [r7, #4]
 8048a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048a0a:	2b00      	cmp	r3, #0
 8048a0c:	f000 8093 	beq.w	8048b36 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8048a10:	687b      	ldr	r3, [r7, #4]
 8048a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8048a14:	6878      	ldr	r0, [r7, #4]
 8048a16:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8048a18:	e08d      	b.n	8048b36 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8048a1a:	687b      	ldr	r3, [r7, #4]
 8048a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048a1e:	f003 031c 	and.w	r3, r3, #28
 8048a22:	2202      	movs	r2, #2
 8048a24:	409a      	lsls	r2, r3
 8048a26:	68fb      	ldr	r3, [r7, #12]
 8048a28:	4013      	ands	r3, r2
 8048a2a:	2b00      	cmp	r3, #0
 8048a2c:	d04e      	beq.n	8048acc <HAL_DMA_IRQHandler+0x186>
 8048a2e:	68bb      	ldr	r3, [r7, #8]
 8048a30:	f003 0302 	and.w	r3, r3, #2
 8048a34:	2b00      	cmp	r3, #0
 8048a36:	d049      	beq.n	8048acc <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8048a38:	687b      	ldr	r3, [r7, #4]
 8048a3a:	681b      	ldr	r3, [r3, #0]
 8048a3c:	681b      	ldr	r3, [r3, #0]
 8048a3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8048a42:	2b00      	cmp	r3, #0
 8048a44:	d018      	beq.n	8048a78 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8048a46:	687b      	ldr	r3, [r7, #4]
 8048a48:	681b      	ldr	r3, [r3, #0]
 8048a4a:	681b      	ldr	r3, [r3, #0]
 8048a4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8048a50:	2b00      	cmp	r3, #0
 8048a52:	d108      	bne.n	8048a66 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8048a54:	687b      	ldr	r3, [r7, #4]
 8048a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048a58:	2b00      	cmp	r3, #0
 8048a5a:	d06e      	beq.n	8048b3a <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8048a5c:	687b      	ldr	r3, [r7, #4]
 8048a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048a60:	6878      	ldr	r0, [r7, #4]
 8048a62:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8048a64:	e069      	b.n	8048b3a <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8048a66:	687b      	ldr	r3, [r7, #4]
 8048a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048a6a:	2b00      	cmp	r3, #0
 8048a6c:	d065      	beq.n	8048b3a <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8048a6e:	687b      	ldr	r3, [r7, #4]
 8048a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048a72:	6878      	ldr	r0, [r7, #4]
 8048a74:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8048a76:	e060      	b.n	8048b3a <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8048a78:	687b      	ldr	r3, [r7, #4]
 8048a7a:	681b      	ldr	r3, [r3, #0]
 8048a7c:	681b      	ldr	r3, [r3, #0]
 8048a7e:	f003 0320 	and.w	r3, r3, #32
 8048a82:	2b00      	cmp	r3, #0
 8048a84:	d10b      	bne.n	8048a9e <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8048a86:	687b      	ldr	r3, [r7, #4]
 8048a88:	681b      	ldr	r3, [r3, #0]
 8048a8a:	681a      	ldr	r2, [r3, #0]
 8048a8c:	687b      	ldr	r3, [r7, #4]
 8048a8e:	681b      	ldr	r3, [r3, #0]
 8048a90:	f022 020a 	bic.w	r2, r2, #10
 8048a94:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8048a96:	687b      	ldr	r3, [r7, #4]
 8048a98:	2201      	movs	r2, #1
 8048a9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8048a9e:	687b      	ldr	r3, [r7, #4]
 8048aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048aa2:	f003 021c 	and.w	r2, r3, #28
 8048aa6:	687b      	ldr	r3, [r7, #4]
 8048aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8048aaa:	2102      	movs	r1, #2
 8048aac:	fa01 f202 	lsl.w	r2, r1, r2
 8048ab0:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8048ab2:	687b      	ldr	r3, [r7, #4]
 8048ab4:	2200      	movs	r2, #0
 8048ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8048aba:	687b      	ldr	r3, [r7, #4]
 8048abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048abe:	2b00      	cmp	r3, #0
 8048ac0:	d03b      	beq.n	8048b3a <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8048ac2:	687b      	ldr	r3, [r7, #4]
 8048ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048ac6:	6878      	ldr	r0, [r7, #4]
 8048ac8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8048aca:	e036      	b.n	8048b3a <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8048acc:	687b      	ldr	r3, [r7, #4]
 8048ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048ad0:	f003 031c 	and.w	r3, r3, #28
 8048ad4:	2208      	movs	r2, #8
 8048ad6:	409a      	lsls	r2, r3
 8048ad8:	68fb      	ldr	r3, [r7, #12]
 8048ada:	4013      	ands	r3, r2
 8048adc:	2b00      	cmp	r3, #0
 8048ade:	d02e      	beq.n	8048b3e <HAL_DMA_IRQHandler+0x1f8>
 8048ae0:	68bb      	ldr	r3, [r7, #8]
 8048ae2:	f003 0308 	and.w	r3, r3, #8
 8048ae6:	2b00      	cmp	r3, #0
 8048ae8:	d029      	beq.n	8048b3e <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8048aea:	687b      	ldr	r3, [r7, #4]
 8048aec:	681b      	ldr	r3, [r3, #0]
 8048aee:	681a      	ldr	r2, [r3, #0]
 8048af0:	687b      	ldr	r3, [r7, #4]
 8048af2:	681b      	ldr	r3, [r3, #0]
 8048af4:	f022 020e 	bic.w	r2, r2, #14
 8048af8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8048afa:	687b      	ldr	r3, [r7, #4]
 8048afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048afe:	f003 021c 	and.w	r2, r3, #28
 8048b02:	687b      	ldr	r3, [r7, #4]
 8048b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8048b06:	2101      	movs	r1, #1
 8048b08:	fa01 f202 	lsl.w	r2, r1, r2
 8048b0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8048b0e:	687b      	ldr	r3, [r7, #4]
 8048b10:	2201      	movs	r2, #1
 8048b12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8048b14:	687b      	ldr	r3, [r7, #4]
 8048b16:	2201      	movs	r2, #1
 8048b18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8048b1c:	687b      	ldr	r3, [r7, #4]
 8048b1e:	2200      	movs	r2, #0
 8048b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8048b24:	687b      	ldr	r3, [r7, #4]
 8048b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8048b28:	2b00      	cmp	r3, #0
 8048b2a:	d008      	beq.n	8048b3e <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8048b2c:	687b      	ldr	r3, [r7, #4]
 8048b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8048b30:	6878      	ldr	r0, [r7, #4]
 8048b32:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8048b34:	e002      	b.n	8048b3c <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8048b36:	bf00      	nop
 8048b38:	e000      	b.n	8048b3c <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8048b3a:	bf00      	nop
  return;
 8048b3c:	bf00      	nop
 8048b3e:	bf00      	nop
}
 8048b40:	3710      	adds	r7, #16
 8048b42:	46bd      	mov	sp, r7
 8048b44:	bd80      	pop	{r7, pc}

08048b46 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8048b46:	b480      	push	{r7}
 8048b48:	b083      	sub	sp, #12
 8048b4a:	af00      	add	r7, sp, #0
 8048b4c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8048b4e:	687b      	ldr	r3, [r7, #4]
 8048b50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8048b54:	b2db      	uxtb	r3, r3
}
 8048b56:	4618      	mov	r0, r3
 8048b58:	370c      	adds	r7, #12
 8048b5a:	46bd      	mov	sp, r7
 8048b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b60:	4770      	bx	lr

08048b62 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8048b62:	b480      	push	{r7}
 8048b64:	b085      	sub	sp, #20
 8048b66:	af00      	add	r7, sp, #0
 8048b68:	6078      	str	r0, [r7, #4]
 8048b6a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8048b6c:	2300      	movs	r3, #0
 8048b6e:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8048b70:	687b      	ldr	r3, [r7, #4]
 8048b72:	2b00      	cmp	r3, #0
 8048b74:	d103      	bne.n	8048b7e <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8048b76:	2301      	movs	r3, #1
 8048b78:	72fb      	strb	r3, [r7, #11]
    return status;
 8048b7a:	7afb      	ldrb	r3, [r7, #11]
 8048b7c:	e01b      	b.n	8048bb6 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8048b7e:	687b      	ldr	r3, [r7, #4]
 8048b80:	681b      	ldr	r3, [r3, #0]
 8048b82:	681b      	ldr	r3, [r3, #0]
 8048b84:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8048b86:	683b      	ldr	r3, [r7, #0]
 8048b88:	f003 0310 	and.w	r3, r3, #16
 8048b8c:	2b00      	cmp	r3, #0
 8048b8e:	d00d      	beq.n	8048bac <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8048b90:	683b      	ldr	r3, [r7, #0]
 8048b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8048b96:	2b00      	cmp	r3, #0
 8048b98:	d004      	beq.n	8048ba4 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8048b9a:	68fb      	ldr	r3, [r7, #12]
 8048b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8048ba0:	60fb      	str	r3, [r7, #12]
 8048ba2:	e003      	b.n	8048bac <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8048ba4:	68fb      	ldr	r3, [r7, #12]
 8048ba6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8048baa:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8048bac:	687b      	ldr	r3, [r7, #4]
 8048bae:	681b      	ldr	r3, [r3, #0]
 8048bb0:	68fa      	ldr	r2, [r7, #12]
 8048bb2:	601a      	str	r2, [r3, #0]

  return status;
 8048bb4:	7afb      	ldrb	r3, [r7, #11]
}
 8048bb6:	4618      	mov	r0, r3
 8048bb8:	3714      	adds	r7, #20
 8048bba:	46bd      	mov	sp, r7
 8048bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048bc0:	4770      	bx	lr
	...

08048bc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8048bc4:	b480      	push	{r7}
 8048bc6:	b085      	sub	sp, #20
 8048bc8:	af00      	add	r7, sp, #0
 8048bca:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8048bcc:	687b      	ldr	r3, [r7, #4]
 8048bce:	681b      	ldr	r3, [r3, #0]
 8048bd0:	461a      	mov	r2, r3
 8048bd2:	4b17      	ldr	r3, [pc, #92]	; (8048c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8048bd4:	429a      	cmp	r2, r3
 8048bd6:	d80a      	bhi.n	8048bee <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8048bd8:	687b      	ldr	r3, [r7, #4]
 8048bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048bdc:	089b      	lsrs	r3, r3, #2
 8048bde:	009b      	lsls	r3, r3, #2
 8048be0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8048be4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8048be8:	687a      	ldr	r2, [r7, #4]
 8048bea:	6513      	str	r3, [r2, #80]	; 0x50
 8048bec:	e007      	b.n	8048bfe <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8048bee:	687b      	ldr	r3, [r7, #4]
 8048bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048bf2:	089b      	lsrs	r3, r3, #2
 8048bf4:	009a      	lsls	r2, r3, #2
 8048bf6:	4b0f      	ldr	r3, [pc, #60]	; (8048c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8048bf8:	4413      	add	r3, r2
 8048bfa:	687a      	ldr	r2, [r7, #4]
 8048bfc:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8048bfe:	687b      	ldr	r3, [r7, #4]
 8048c00:	681b      	ldr	r3, [r3, #0]
 8048c02:	b2db      	uxtb	r3, r3
 8048c04:	3b08      	subs	r3, #8
 8048c06:	4a0c      	ldr	r2, [pc, #48]	; (8048c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8048c08:	fba2 2303 	umull	r2, r3, r2, r3
 8048c0c:	091b      	lsrs	r3, r3, #4
 8048c0e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8048c10:	687b      	ldr	r3, [r7, #4]
 8048c12:	4a0a      	ldr	r2, [pc, #40]	; (8048c3c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8048c14:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8048c16:	68fb      	ldr	r3, [r7, #12]
 8048c18:	f003 031f 	and.w	r3, r3, #31
 8048c1c:	2201      	movs	r2, #1
 8048c1e:	409a      	lsls	r2, r3
 8048c20:	687b      	ldr	r3, [r7, #4]
 8048c22:	659a      	str	r2, [r3, #88]	; 0x58
}
 8048c24:	bf00      	nop
 8048c26:	3714      	adds	r7, #20
 8048c28:	46bd      	mov	sp, r7
 8048c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c2e:	4770      	bx	lr
 8048c30:	40020407 	.word	0x40020407
 8048c34:	40020820 	.word	0x40020820
 8048c38:	cccccccd 	.word	0xcccccccd
 8048c3c:	40020880 	.word	0x40020880

08048c40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8048c40:	b480      	push	{r7}
 8048c42:	b085      	sub	sp, #20
 8048c44:	af00      	add	r7, sp, #0
 8048c46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8048c48:	687b      	ldr	r3, [r7, #4]
 8048c4a:	685b      	ldr	r3, [r3, #4]
 8048c4c:	b2db      	uxtb	r3, r3
 8048c4e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8048c50:	68fa      	ldr	r2, [r7, #12]
 8048c52:	4b0b      	ldr	r3, [pc, #44]	; (8048c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8048c54:	4413      	add	r3, r2
 8048c56:	009b      	lsls	r3, r3, #2
 8048c58:	461a      	mov	r2, r3
 8048c5a:	687b      	ldr	r3, [r7, #4]
 8048c5c:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8048c5e:	687b      	ldr	r3, [r7, #4]
 8048c60:	4a08      	ldr	r2, [pc, #32]	; (8048c84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8048c62:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8048c64:	68fb      	ldr	r3, [r7, #12]
 8048c66:	3b01      	subs	r3, #1
 8048c68:	f003 0303 	and.w	r3, r3, #3
 8048c6c:	2201      	movs	r2, #1
 8048c6e:	409a      	lsls	r2, r3
 8048c70:	687b      	ldr	r3, [r7, #4]
 8048c72:	665a      	str	r2, [r3, #100]	; 0x64
}
 8048c74:	bf00      	nop
 8048c76:	3714      	adds	r7, #20
 8048c78:	46bd      	mov	sp, r7
 8048c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c7e:	4770      	bx	lr
 8048c80:	1000823f 	.word	0x1000823f
 8048c84:	40020940 	.word	0x40020940

08048c88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8048c88:	b480      	push	{r7}
 8048c8a:	b087      	sub	sp, #28
 8048c8c:	af00      	add	r7, sp, #0
 8048c8e:	6078      	str	r0, [r7, #4]
 8048c90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8048c92:	2300      	movs	r3, #0
 8048c94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8048c96:	e158      	b.n	8048f4a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8048c98:	683b      	ldr	r3, [r7, #0]
 8048c9a:	681a      	ldr	r2, [r3, #0]
 8048c9c:	2101      	movs	r1, #1
 8048c9e:	697b      	ldr	r3, [r7, #20]
 8048ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8048ca4:	4013      	ands	r3, r2
 8048ca6:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8048ca8:	68fb      	ldr	r3, [r7, #12]
 8048caa:	2b00      	cmp	r3, #0
 8048cac:	f000 814a 	beq.w	8048f44 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8048cb0:	683b      	ldr	r3, [r7, #0]
 8048cb2:	685b      	ldr	r3, [r3, #4]
 8048cb4:	2b01      	cmp	r3, #1
 8048cb6:	d00b      	beq.n	8048cd0 <HAL_GPIO_Init+0x48>
 8048cb8:	683b      	ldr	r3, [r7, #0]
 8048cba:	685b      	ldr	r3, [r3, #4]
 8048cbc:	2b02      	cmp	r3, #2
 8048cbe:	d007      	beq.n	8048cd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8048cc0:	683b      	ldr	r3, [r7, #0]
 8048cc2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8048cc4:	2b11      	cmp	r3, #17
 8048cc6:	d003      	beq.n	8048cd0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8048cc8:	683b      	ldr	r3, [r7, #0]
 8048cca:	685b      	ldr	r3, [r3, #4]
 8048ccc:	2b12      	cmp	r3, #18
 8048cce:	d130      	bne.n	8048d32 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8048cd0:	687b      	ldr	r3, [r7, #4]
 8048cd2:	689b      	ldr	r3, [r3, #8]
 8048cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8048cd6:	697b      	ldr	r3, [r7, #20]
 8048cd8:	005b      	lsls	r3, r3, #1
 8048cda:	2203      	movs	r2, #3
 8048cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8048ce0:	43db      	mvns	r3, r3
 8048ce2:	693a      	ldr	r2, [r7, #16]
 8048ce4:	4013      	ands	r3, r2
 8048ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8048ce8:	683b      	ldr	r3, [r7, #0]
 8048cea:	68da      	ldr	r2, [r3, #12]
 8048cec:	697b      	ldr	r3, [r7, #20]
 8048cee:	005b      	lsls	r3, r3, #1
 8048cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8048cf4:	693a      	ldr	r2, [r7, #16]
 8048cf6:	4313      	orrs	r3, r2
 8048cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8048cfa:	687b      	ldr	r3, [r7, #4]
 8048cfc:	693a      	ldr	r2, [r7, #16]
 8048cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8048d00:	687b      	ldr	r3, [r7, #4]
 8048d02:	685b      	ldr	r3, [r3, #4]
 8048d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8048d06:	2201      	movs	r2, #1
 8048d08:	697b      	ldr	r3, [r7, #20]
 8048d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8048d0e:	43db      	mvns	r3, r3
 8048d10:	693a      	ldr	r2, [r7, #16]
 8048d12:	4013      	ands	r3, r2
 8048d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8048d16:	683b      	ldr	r3, [r7, #0]
 8048d18:	685b      	ldr	r3, [r3, #4]
 8048d1a:	091b      	lsrs	r3, r3, #4
 8048d1c:	f003 0201 	and.w	r2, r3, #1
 8048d20:	697b      	ldr	r3, [r7, #20]
 8048d22:	fa02 f303 	lsl.w	r3, r2, r3
 8048d26:	693a      	ldr	r2, [r7, #16]
 8048d28:	4313      	orrs	r3, r2
 8048d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8048d2c:	687b      	ldr	r3, [r7, #4]
 8048d2e:	693a      	ldr	r2, [r7, #16]
 8048d30:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8048d32:	687b      	ldr	r3, [r7, #4]
 8048d34:	68db      	ldr	r3, [r3, #12]
 8048d36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8048d38:	697b      	ldr	r3, [r7, #20]
 8048d3a:	005b      	lsls	r3, r3, #1
 8048d3c:	2203      	movs	r2, #3
 8048d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8048d42:	43db      	mvns	r3, r3
 8048d44:	693a      	ldr	r2, [r7, #16]
 8048d46:	4013      	ands	r3, r2
 8048d48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8048d4a:	683b      	ldr	r3, [r7, #0]
 8048d4c:	689a      	ldr	r2, [r3, #8]
 8048d4e:	697b      	ldr	r3, [r7, #20]
 8048d50:	005b      	lsls	r3, r3, #1
 8048d52:	fa02 f303 	lsl.w	r3, r2, r3
 8048d56:	693a      	ldr	r2, [r7, #16]
 8048d58:	4313      	orrs	r3, r2
 8048d5a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8048d5c:	687b      	ldr	r3, [r7, #4]
 8048d5e:	693a      	ldr	r2, [r7, #16]
 8048d60:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8048d62:	683b      	ldr	r3, [r7, #0]
 8048d64:	685b      	ldr	r3, [r3, #4]
 8048d66:	2b02      	cmp	r3, #2
 8048d68:	d003      	beq.n	8048d72 <HAL_GPIO_Init+0xea>
 8048d6a:	683b      	ldr	r3, [r7, #0]
 8048d6c:	685b      	ldr	r3, [r3, #4]
 8048d6e:	2b12      	cmp	r3, #18
 8048d70:	d123      	bne.n	8048dba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8048d72:	697b      	ldr	r3, [r7, #20]
 8048d74:	08da      	lsrs	r2, r3, #3
 8048d76:	687b      	ldr	r3, [r7, #4]
 8048d78:	3208      	adds	r2, #8
 8048d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8048d80:	697b      	ldr	r3, [r7, #20]
 8048d82:	f003 0307 	and.w	r3, r3, #7
 8048d86:	009b      	lsls	r3, r3, #2
 8048d88:	220f      	movs	r2, #15
 8048d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8048d8e:	43db      	mvns	r3, r3
 8048d90:	693a      	ldr	r2, [r7, #16]
 8048d92:	4013      	ands	r3, r2
 8048d94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8048d96:	683b      	ldr	r3, [r7, #0]
 8048d98:	691a      	ldr	r2, [r3, #16]
 8048d9a:	697b      	ldr	r3, [r7, #20]
 8048d9c:	f003 0307 	and.w	r3, r3, #7
 8048da0:	009b      	lsls	r3, r3, #2
 8048da2:	fa02 f303 	lsl.w	r3, r2, r3
 8048da6:	693a      	ldr	r2, [r7, #16]
 8048da8:	4313      	orrs	r3, r2
 8048daa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8048dac:	697b      	ldr	r3, [r7, #20]
 8048dae:	08da      	lsrs	r2, r3, #3
 8048db0:	687b      	ldr	r3, [r7, #4]
 8048db2:	3208      	adds	r2, #8
 8048db4:	6939      	ldr	r1, [r7, #16]
 8048db6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8048dba:	687b      	ldr	r3, [r7, #4]
 8048dbc:	681b      	ldr	r3, [r3, #0]
 8048dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8048dc0:	697b      	ldr	r3, [r7, #20]
 8048dc2:	005b      	lsls	r3, r3, #1
 8048dc4:	2203      	movs	r2, #3
 8048dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8048dca:	43db      	mvns	r3, r3
 8048dcc:	693a      	ldr	r2, [r7, #16]
 8048dce:	4013      	ands	r3, r2
 8048dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8048dd2:	683b      	ldr	r3, [r7, #0]
 8048dd4:	685b      	ldr	r3, [r3, #4]
 8048dd6:	f003 0203 	and.w	r2, r3, #3
 8048dda:	697b      	ldr	r3, [r7, #20]
 8048ddc:	005b      	lsls	r3, r3, #1
 8048dde:	fa02 f303 	lsl.w	r3, r2, r3
 8048de2:	693a      	ldr	r2, [r7, #16]
 8048de4:	4313      	orrs	r3, r2
 8048de6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8048de8:	687b      	ldr	r3, [r7, #4]
 8048dea:	693a      	ldr	r2, [r7, #16]
 8048dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8048dee:	683b      	ldr	r3, [r7, #0]
 8048df0:	685b      	ldr	r3, [r3, #4]
 8048df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8048df6:	2b00      	cmp	r3, #0
 8048df8:	f000 80a4 	beq.w	8048f44 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8048dfc:	4a5a      	ldr	r2, [pc, #360]	; (8048f68 <HAL_GPIO_Init+0x2e0>)
 8048dfe:	697b      	ldr	r3, [r7, #20]
 8048e00:	089b      	lsrs	r3, r3, #2
 8048e02:	3318      	adds	r3, #24
 8048e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8048e08:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8048e0a:	697b      	ldr	r3, [r7, #20]
 8048e0c:	f003 0303 	and.w	r3, r3, #3
 8048e10:	00db      	lsls	r3, r3, #3
 8048e12:	220f      	movs	r2, #15
 8048e14:	fa02 f303 	lsl.w	r3, r2, r3
 8048e18:	43db      	mvns	r3, r3
 8048e1a:	693a      	ldr	r2, [r7, #16]
 8048e1c:	4013      	ands	r3, r2
 8048e1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8048e20:	687b      	ldr	r3, [r7, #4]
 8048e22:	4a52      	ldr	r2, [pc, #328]	; (8048f6c <HAL_GPIO_Init+0x2e4>)
 8048e24:	4293      	cmp	r3, r2
 8048e26:	d025      	beq.n	8048e74 <HAL_GPIO_Init+0x1ec>
 8048e28:	687b      	ldr	r3, [r7, #4]
 8048e2a:	4a51      	ldr	r2, [pc, #324]	; (8048f70 <HAL_GPIO_Init+0x2e8>)
 8048e2c:	4293      	cmp	r3, r2
 8048e2e:	d01f      	beq.n	8048e70 <HAL_GPIO_Init+0x1e8>
 8048e30:	687b      	ldr	r3, [r7, #4]
 8048e32:	4a50      	ldr	r2, [pc, #320]	; (8048f74 <HAL_GPIO_Init+0x2ec>)
 8048e34:	4293      	cmp	r3, r2
 8048e36:	d019      	beq.n	8048e6c <HAL_GPIO_Init+0x1e4>
 8048e38:	687b      	ldr	r3, [r7, #4]
 8048e3a:	4a4f      	ldr	r2, [pc, #316]	; (8048f78 <HAL_GPIO_Init+0x2f0>)
 8048e3c:	4293      	cmp	r3, r2
 8048e3e:	d013      	beq.n	8048e68 <HAL_GPIO_Init+0x1e0>
 8048e40:	687b      	ldr	r3, [r7, #4]
 8048e42:	4a4e      	ldr	r2, [pc, #312]	; (8048f7c <HAL_GPIO_Init+0x2f4>)
 8048e44:	4293      	cmp	r3, r2
 8048e46:	d00d      	beq.n	8048e64 <HAL_GPIO_Init+0x1dc>
 8048e48:	687b      	ldr	r3, [r7, #4]
 8048e4a:	4a4d      	ldr	r2, [pc, #308]	; (8048f80 <HAL_GPIO_Init+0x2f8>)
 8048e4c:	4293      	cmp	r3, r2
 8048e4e:	d007      	beq.n	8048e60 <HAL_GPIO_Init+0x1d8>
 8048e50:	687b      	ldr	r3, [r7, #4]
 8048e52:	4a4c      	ldr	r2, [pc, #304]	; (8048f84 <HAL_GPIO_Init+0x2fc>)
 8048e54:	4293      	cmp	r3, r2
 8048e56:	d101      	bne.n	8048e5c <HAL_GPIO_Init+0x1d4>
 8048e58:	2306      	movs	r3, #6
 8048e5a:	e00c      	b.n	8048e76 <HAL_GPIO_Init+0x1ee>
 8048e5c:	2307      	movs	r3, #7
 8048e5e:	e00a      	b.n	8048e76 <HAL_GPIO_Init+0x1ee>
 8048e60:	2305      	movs	r3, #5
 8048e62:	e008      	b.n	8048e76 <HAL_GPIO_Init+0x1ee>
 8048e64:	2304      	movs	r3, #4
 8048e66:	e006      	b.n	8048e76 <HAL_GPIO_Init+0x1ee>
 8048e68:	2303      	movs	r3, #3
 8048e6a:	e004      	b.n	8048e76 <HAL_GPIO_Init+0x1ee>
 8048e6c:	2302      	movs	r3, #2
 8048e6e:	e002      	b.n	8048e76 <HAL_GPIO_Init+0x1ee>
 8048e70:	2301      	movs	r3, #1
 8048e72:	e000      	b.n	8048e76 <HAL_GPIO_Init+0x1ee>
 8048e74:	2300      	movs	r3, #0
 8048e76:	697a      	ldr	r2, [r7, #20]
 8048e78:	f002 0203 	and.w	r2, r2, #3
 8048e7c:	00d2      	lsls	r2, r2, #3
 8048e7e:	4093      	lsls	r3, r2
 8048e80:	693a      	ldr	r2, [r7, #16]
 8048e82:	4313      	orrs	r3, r2
 8048e84:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8048e86:	4938      	ldr	r1, [pc, #224]	; (8048f68 <HAL_GPIO_Init+0x2e0>)
 8048e88:	697b      	ldr	r3, [r7, #20]
 8048e8a:	089b      	lsrs	r3, r3, #2
 8048e8c:	3318      	adds	r3, #24
 8048e8e:	693a      	ldr	r2, [r7, #16]
 8048e90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8048e94:	4b34      	ldr	r3, [pc, #208]	; (8048f68 <HAL_GPIO_Init+0x2e0>)
 8048e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8048e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8048e9c:	68fb      	ldr	r3, [r7, #12]
 8048e9e:	43db      	mvns	r3, r3
 8048ea0:	693a      	ldr	r2, [r7, #16]
 8048ea2:	4013      	ands	r3, r2
 8048ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8048ea6:	683b      	ldr	r3, [r7, #0]
 8048ea8:	685b      	ldr	r3, [r3, #4]
 8048eaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8048eae:	2b00      	cmp	r3, #0
 8048eb0:	d003      	beq.n	8048eba <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8048eb2:	693a      	ldr	r2, [r7, #16]
 8048eb4:	68fb      	ldr	r3, [r7, #12]
 8048eb6:	4313      	orrs	r3, r2
 8048eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8048eba:	4a2b      	ldr	r2, [pc, #172]	; (8048f68 <HAL_GPIO_Init+0x2e0>)
 8048ebc:	693b      	ldr	r3, [r7, #16]
 8048ebe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8048ec2:	4b29      	ldr	r3, [pc, #164]	; (8048f68 <HAL_GPIO_Init+0x2e0>)
 8048ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8048ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8048eca:	68fb      	ldr	r3, [r7, #12]
 8048ecc:	43db      	mvns	r3, r3
 8048ece:	693a      	ldr	r2, [r7, #16]
 8048ed0:	4013      	ands	r3, r2
 8048ed2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8048ed4:	683b      	ldr	r3, [r7, #0]
 8048ed6:	685b      	ldr	r3, [r3, #4]
 8048ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8048edc:	2b00      	cmp	r3, #0
 8048ede:	d003      	beq.n	8048ee8 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8048ee0:	693a      	ldr	r2, [r7, #16]
 8048ee2:	68fb      	ldr	r3, [r7, #12]
 8048ee4:	4313      	orrs	r3, r2
 8048ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8048ee8:	4a1f      	ldr	r2, [pc, #124]	; (8048f68 <HAL_GPIO_Init+0x2e0>)
 8048eea:	693b      	ldr	r3, [r7, #16]
 8048eec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8048ef0:	4b1d      	ldr	r3, [pc, #116]	; (8048f68 <HAL_GPIO_Init+0x2e0>)
 8048ef2:	681b      	ldr	r3, [r3, #0]
 8048ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8048ef6:	68fb      	ldr	r3, [r7, #12]
 8048ef8:	43db      	mvns	r3, r3
 8048efa:	693a      	ldr	r2, [r7, #16]
 8048efc:	4013      	ands	r3, r2
 8048efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8048f00:	683b      	ldr	r3, [r7, #0]
 8048f02:	685b      	ldr	r3, [r3, #4]
 8048f04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8048f08:	2b00      	cmp	r3, #0
 8048f0a:	d003      	beq.n	8048f14 <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8048f0c:	693a      	ldr	r2, [r7, #16]
 8048f0e:	68fb      	ldr	r3, [r7, #12]
 8048f10:	4313      	orrs	r3, r2
 8048f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8048f14:	4a14      	ldr	r2, [pc, #80]	; (8048f68 <HAL_GPIO_Init+0x2e0>)
 8048f16:	693b      	ldr	r3, [r7, #16]
 8048f18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8048f1a:	4b13      	ldr	r3, [pc, #76]	; (8048f68 <HAL_GPIO_Init+0x2e0>)
 8048f1c:	685b      	ldr	r3, [r3, #4]
 8048f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8048f20:	68fb      	ldr	r3, [r7, #12]
 8048f22:	43db      	mvns	r3, r3
 8048f24:	693a      	ldr	r2, [r7, #16]
 8048f26:	4013      	ands	r3, r2
 8048f28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8048f2a:	683b      	ldr	r3, [r7, #0]
 8048f2c:	685b      	ldr	r3, [r3, #4]
 8048f2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8048f32:	2b00      	cmp	r3, #0
 8048f34:	d003      	beq.n	8048f3e <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8048f36:	693a      	ldr	r2, [r7, #16]
 8048f38:	68fb      	ldr	r3, [r7, #12]
 8048f3a:	4313      	orrs	r3, r2
 8048f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8048f3e:	4a0a      	ldr	r2, [pc, #40]	; (8048f68 <HAL_GPIO_Init+0x2e0>)
 8048f40:	693b      	ldr	r3, [r7, #16]
 8048f42:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8048f44:	697b      	ldr	r3, [r7, #20]
 8048f46:	3301      	adds	r3, #1
 8048f48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8048f4a:	683b      	ldr	r3, [r7, #0]
 8048f4c:	681a      	ldr	r2, [r3, #0]
 8048f4e:	697b      	ldr	r3, [r7, #20]
 8048f50:	fa22 f303 	lsr.w	r3, r2, r3
 8048f54:	2b00      	cmp	r3, #0
 8048f56:	f47f ae9f 	bne.w	8048c98 <HAL_GPIO_Init+0x10>
  }
}
 8048f5a:	bf00      	nop
 8048f5c:	bf00      	nop
 8048f5e:	371c      	adds	r7, #28
 8048f60:	46bd      	mov	sp, r7
 8048f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048f66:	4770      	bx	lr
 8048f68:	4002f400 	.word	0x4002f400
 8048f6c:	42020000 	.word	0x42020000
 8048f70:	42020400 	.word	0x42020400
 8048f74:	42020800 	.word	0x42020800
 8048f78:	42020c00 	.word	0x42020c00
 8048f7c:	42021000 	.word	0x42021000
 8048f80:	42021400 	.word	0x42021400
 8048f84:	42021800 	.word	0x42021800

08048f88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8048f88:	b480      	push	{r7}
 8048f8a:	b087      	sub	sp, #28
 8048f8c:	af00      	add	r7, sp, #0
 8048f8e:	6078      	str	r0, [r7, #4]
 8048f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8048f92:	2300      	movs	r3, #0
 8048f94:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8048f96:	e0c7      	b.n	8049128 <HAL_GPIO_DeInit+0x1a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8048f98:	2201      	movs	r2, #1
 8048f9a:	697b      	ldr	r3, [r7, #20]
 8048f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8048fa0:	683a      	ldr	r2, [r7, #0]
 8048fa2:	4013      	ands	r3, r2
 8048fa4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8048fa6:	693b      	ldr	r3, [r7, #16]
 8048fa8:	2b00      	cmp	r3, #0
 8048faa:	f000 80ba 	beq.w	8049122 <HAL_GPIO_DeInit+0x19a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      temp = EXTI->EXTICR[position >> 2U];
 8048fae:	4a65      	ldr	r2, [pc, #404]	; (8049144 <HAL_GPIO_DeInit+0x1bc>)
 8048fb0:	697b      	ldr	r3, [r7, #20]
 8048fb2:	089b      	lsrs	r3, r3, #2
 8048fb4:	3318      	adds	r3, #24
 8048fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8048fba:	60fb      	str	r3, [r7, #12]
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8048fbc:	697b      	ldr	r3, [r7, #20]
 8048fbe:	f003 0303 	and.w	r3, r3, #3
 8048fc2:	00db      	lsls	r3, r3, #3
 8048fc4:	220f      	movs	r2, #15
 8048fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8048fca:	68fa      	ldr	r2, [r7, #12]
 8048fcc:	4013      	ands	r3, r2
 8048fce:	60fb      	str	r3, [r7, #12]
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8048fd0:	687b      	ldr	r3, [r7, #4]
 8048fd2:	4a5d      	ldr	r2, [pc, #372]	; (8049148 <HAL_GPIO_DeInit+0x1c0>)
 8048fd4:	4293      	cmp	r3, r2
 8048fd6:	d025      	beq.n	8049024 <HAL_GPIO_DeInit+0x9c>
 8048fd8:	687b      	ldr	r3, [r7, #4]
 8048fda:	4a5c      	ldr	r2, [pc, #368]	; (804914c <HAL_GPIO_DeInit+0x1c4>)
 8048fdc:	4293      	cmp	r3, r2
 8048fde:	d01f      	beq.n	8049020 <HAL_GPIO_DeInit+0x98>
 8048fe0:	687b      	ldr	r3, [r7, #4]
 8048fe2:	4a5b      	ldr	r2, [pc, #364]	; (8049150 <HAL_GPIO_DeInit+0x1c8>)
 8048fe4:	4293      	cmp	r3, r2
 8048fe6:	d019      	beq.n	804901c <HAL_GPIO_DeInit+0x94>
 8048fe8:	687b      	ldr	r3, [r7, #4]
 8048fea:	4a5a      	ldr	r2, [pc, #360]	; (8049154 <HAL_GPIO_DeInit+0x1cc>)
 8048fec:	4293      	cmp	r3, r2
 8048fee:	d013      	beq.n	8049018 <HAL_GPIO_DeInit+0x90>
 8048ff0:	687b      	ldr	r3, [r7, #4]
 8048ff2:	4a59      	ldr	r2, [pc, #356]	; (8049158 <HAL_GPIO_DeInit+0x1d0>)
 8048ff4:	4293      	cmp	r3, r2
 8048ff6:	d00d      	beq.n	8049014 <HAL_GPIO_DeInit+0x8c>
 8048ff8:	687b      	ldr	r3, [r7, #4]
 8048ffa:	4a58      	ldr	r2, [pc, #352]	; (804915c <HAL_GPIO_DeInit+0x1d4>)
 8048ffc:	4293      	cmp	r3, r2
 8048ffe:	d007      	beq.n	8049010 <HAL_GPIO_DeInit+0x88>
 8049000:	687b      	ldr	r3, [r7, #4]
 8049002:	4a57      	ldr	r2, [pc, #348]	; (8049160 <HAL_GPIO_DeInit+0x1d8>)
 8049004:	4293      	cmp	r3, r2
 8049006:	d101      	bne.n	804900c <HAL_GPIO_DeInit+0x84>
 8049008:	2306      	movs	r3, #6
 804900a:	e00c      	b.n	8049026 <HAL_GPIO_DeInit+0x9e>
 804900c:	2307      	movs	r3, #7
 804900e:	e00a      	b.n	8049026 <HAL_GPIO_DeInit+0x9e>
 8049010:	2305      	movs	r3, #5
 8049012:	e008      	b.n	8049026 <HAL_GPIO_DeInit+0x9e>
 8049014:	2304      	movs	r3, #4
 8049016:	e006      	b.n	8049026 <HAL_GPIO_DeInit+0x9e>
 8049018:	2303      	movs	r3, #3
 804901a:	e004      	b.n	8049026 <HAL_GPIO_DeInit+0x9e>
 804901c:	2302      	movs	r3, #2
 804901e:	e002      	b.n	8049026 <HAL_GPIO_DeInit+0x9e>
 8049020:	2301      	movs	r3, #1
 8049022:	e000      	b.n	8049026 <HAL_GPIO_DeInit+0x9e>
 8049024:	2300      	movs	r3, #0
 8049026:	697a      	ldr	r2, [r7, #20]
 8049028:	f002 0203 	and.w	r2, r2, #3
 804902c:	00d2      	lsls	r2, r2, #3
 804902e:	4093      	lsls	r3, r2
 8049030:	68fa      	ldr	r2, [r7, #12]
 8049032:	429a      	cmp	r2, r3
 8049034:	d136      	bne.n	80490a4 <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8049036:	4b43      	ldr	r3, [pc, #268]	; (8049144 <HAL_GPIO_DeInit+0x1bc>)
 8049038:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 804903c:	693b      	ldr	r3, [r7, #16]
 804903e:	43db      	mvns	r3, r3
 8049040:	4940      	ldr	r1, [pc, #256]	; (8049144 <HAL_GPIO_DeInit+0x1bc>)
 8049042:	4013      	ands	r3, r2
 8049044:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8049048:	4b3e      	ldr	r3, [pc, #248]	; (8049144 <HAL_GPIO_DeInit+0x1bc>)
 804904a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 804904e:	693b      	ldr	r3, [r7, #16]
 8049050:	43db      	mvns	r3, r3
 8049052:	493c      	ldr	r1, [pc, #240]	; (8049144 <HAL_GPIO_DeInit+0x1bc>)
 8049054:	4013      	ands	r3, r2
 8049056:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 804905a:	4b3a      	ldr	r3, [pc, #232]	; (8049144 <HAL_GPIO_DeInit+0x1bc>)
 804905c:	681a      	ldr	r2, [r3, #0]
 804905e:	693b      	ldr	r3, [r7, #16]
 8049060:	43db      	mvns	r3, r3
 8049062:	4938      	ldr	r1, [pc, #224]	; (8049144 <HAL_GPIO_DeInit+0x1bc>)
 8049064:	4013      	ands	r3, r2
 8049066:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8049068:	4b36      	ldr	r3, [pc, #216]	; (8049144 <HAL_GPIO_DeInit+0x1bc>)
 804906a:	685a      	ldr	r2, [r3, #4]
 804906c:	693b      	ldr	r3, [r7, #16]
 804906e:	43db      	mvns	r3, r3
 8049070:	4934      	ldr	r1, [pc, #208]	; (8049144 <HAL_GPIO_DeInit+0x1bc>)
 8049072:	4013      	ands	r3, r2
 8049074:	604b      	str	r3, [r1, #4]

        temp = (0x0FUL) << (8U * (position & 0x03U));
 8049076:	697b      	ldr	r3, [r7, #20]
 8049078:	f003 0303 	and.w	r3, r3, #3
 804907c:	00db      	lsls	r3, r3, #3
 804907e:	220f      	movs	r2, #15
 8049080:	fa02 f303 	lsl.w	r3, r2, r3
 8049084:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~temp;
 8049086:	4a2f      	ldr	r2, [pc, #188]	; (8049144 <HAL_GPIO_DeInit+0x1bc>)
 8049088:	697b      	ldr	r3, [r7, #20]
 804908a:	089b      	lsrs	r3, r3, #2
 804908c:	3318      	adds	r3, #24
 804908e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8049092:	68fb      	ldr	r3, [r7, #12]
 8049094:	43da      	mvns	r2, r3
 8049096:	482b      	ldr	r0, [pc, #172]	; (8049144 <HAL_GPIO_DeInit+0x1bc>)
 8049098:	697b      	ldr	r3, [r7, #20]
 804909a:	089b      	lsrs	r3, r3, #2
 804909c:	400a      	ands	r2, r1
 804909e:	3318      	adds	r3, #24
 80490a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80490a4:	687b      	ldr	r3, [r7, #4]
 80490a6:	681a      	ldr	r2, [r3, #0]
 80490a8:	697b      	ldr	r3, [r7, #20]
 80490aa:	005b      	lsls	r3, r3, #1
 80490ac:	2103      	movs	r1, #3
 80490ae:	fa01 f303 	lsl.w	r3, r1, r3
 80490b2:	431a      	orrs	r2, r3
 80490b4:	687b      	ldr	r3, [r7, #4]
 80490b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 80490b8:	697b      	ldr	r3, [r7, #20]
 80490ba:	08da      	lsrs	r2, r3, #3
 80490bc:	687b      	ldr	r3, [r7, #4]
 80490be:	3208      	adds	r2, #8
 80490c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80490c4:	697b      	ldr	r3, [r7, #20]
 80490c6:	f003 0307 	and.w	r3, r3, #7
 80490ca:	009b      	lsls	r3, r3, #2
 80490cc:	220f      	movs	r2, #15
 80490ce:	fa02 f303 	lsl.w	r3, r2, r3
 80490d2:	43db      	mvns	r3, r3
 80490d4:	697a      	ldr	r2, [r7, #20]
 80490d6:	08d2      	lsrs	r2, r2, #3
 80490d8:	4019      	ands	r1, r3
 80490da:	687b      	ldr	r3, [r7, #4]
 80490dc:	3208      	adds	r2, #8
 80490de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80490e2:	687b      	ldr	r3, [r7, #4]
 80490e4:	689a      	ldr	r2, [r3, #8]
 80490e6:	697b      	ldr	r3, [r7, #20]
 80490e8:	005b      	lsls	r3, r3, #1
 80490ea:	2103      	movs	r1, #3
 80490ec:	fa01 f303 	lsl.w	r3, r1, r3
 80490f0:	43db      	mvns	r3, r3
 80490f2:	401a      	ands	r2, r3
 80490f4:	687b      	ldr	r3, [r7, #4]
 80490f6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80490f8:	687b      	ldr	r3, [r7, #4]
 80490fa:	685a      	ldr	r2, [r3, #4]
 80490fc:	2101      	movs	r1, #1
 80490fe:	697b      	ldr	r3, [r7, #20]
 8049100:	fa01 f303 	lsl.w	r3, r1, r3
 8049104:	43db      	mvns	r3, r3
 8049106:	401a      	ands	r2, r3
 8049108:	687b      	ldr	r3, [r7, #4]
 804910a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 804910c:	687b      	ldr	r3, [r7, #4]
 804910e:	68da      	ldr	r2, [r3, #12]
 8049110:	697b      	ldr	r3, [r7, #20]
 8049112:	005b      	lsls	r3, r3, #1
 8049114:	2103      	movs	r1, #3
 8049116:	fa01 f303 	lsl.w	r3, r1, r3
 804911a:	43db      	mvns	r3, r3
 804911c:	401a      	ands	r2, r3
 804911e:	687b      	ldr	r3, [r7, #4]
 8049120:	60da      	str	r2, [r3, #12]
    }

    position++;
 8049122:	697b      	ldr	r3, [r7, #20]
 8049124:	3301      	adds	r3, #1
 8049126:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8049128:	683a      	ldr	r2, [r7, #0]
 804912a:	697b      	ldr	r3, [r7, #20]
 804912c:	fa22 f303 	lsr.w	r3, r2, r3
 8049130:	2b00      	cmp	r3, #0
 8049132:	f47f af31 	bne.w	8048f98 <HAL_GPIO_DeInit+0x10>
  }
}
 8049136:	bf00      	nop
 8049138:	bf00      	nop
 804913a:	371c      	adds	r7, #28
 804913c:	46bd      	mov	sp, r7
 804913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049142:	4770      	bx	lr
 8049144:	4002f400 	.word	0x4002f400
 8049148:	42020000 	.word	0x42020000
 804914c:	42020400 	.word	0x42020400
 8049150:	42020800 	.word	0x42020800
 8049154:	42020c00 	.word	0x42020c00
 8049158:	42021000 	.word	0x42021000
 804915c:	42021400 	.word	0x42021400
 8049160:	42021800 	.word	0x42021800

08049164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8049164:	b480      	push	{r7}
 8049166:	b085      	sub	sp, #20
 8049168:	af00      	add	r7, sp, #0
 804916a:	6078      	str	r0, [r7, #4]
 804916c:	460b      	mov	r3, r1
 804916e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != 0U)
 8049170:	687b      	ldr	r3, [r7, #4]
 8049172:	691a      	ldr	r2, [r3, #16]
 8049174:	887b      	ldrh	r3, [r7, #2]
 8049176:	4013      	ands	r3, r2
 8049178:	2b00      	cmp	r3, #0
 804917a:	d002      	beq.n	8049182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 804917c:	2301      	movs	r3, #1
 804917e:	73fb      	strb	r3, [r7, #15]
 8049180:	e001      	b.n	8049186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8049182:	2300      	movs	r3, #0
 8049184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8049186:	7bfb      	ldrb	r3, [r7, #15]
}
 8049188:	4618      	mov	r0, r3
 804918a:	3714      	adds	r7, #20
 804918c:	46bd      	mov	sp, r7
 804918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049192:	4770      	bx	lr

08049194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8049194:	b480      	push	{r7}
 8049196:	b083      	sub	sp, #12
 8049198:	af00      	add	r7, sp, #0
 804919a:	6078      	str	r0, [r7, #4]
 804919c:	460b      	mov	r3, r1
 804919e:	807b      	strh	r3, [r7, #2]
 80491a0:	4613      	mov	r3, r2
 80491a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80491a4:	787b      	ldrb	r3, [r7, #1]
 80491a6:	2b00      	cmp	r3, #0
 80491a8:	d003      	beq.n	80491b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80491aa:	887a      	ldrh	r2, [r7, #2]
 80491ac:	687b      	ldr	r3, [r7, #4]
 80491ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80491b0:	e002      	b.n	80491b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80491b2:	887a      	ldrh	r2, [r7, #2]
 80491b4:	687b      	ldr	r3, [r7, #4]
 80491b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80491b8:	bf00      	nop
 80491ba:	370c      	adds	r7, #12
 80491bc:	46bd      	mov	sp, r7
 80491be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80491c2:	4770      	bx	lr

080491c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80491c4:	b580      	push	{r7, lr}
 80491c6:	b082      	sub	sp, #8
 80491c8:	af00      	add	r7, sp, #0
 80491ca:	4603      	mov	r3, r0
 80491cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80491ce:	4b0f      	ldr	r3, [pc, #60]	; (804920c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80491d0:	68da      	ldr	r2, [r3, #12]
 80491d2:	88fb      	ldrh	r3, [r7, #6]
 80491d4:	4013      	ands	r3, r2
 80491d6:	2b00      	cmp	r3, #0
 80491d8:	d006      	beq.n	80491e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80491da:	4a0c      	ldr	r2, [pc, #48]	; (804920c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80491dc:	88fb      	ldrh	r3, [r7, #6]
 80491de:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80491e0:	88fb      	ldrh	r3, [r7, #6]
 80491e2:	4618      	mov	r0, r3
 80491e4:	f000 f814 	bl	8049210 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if(__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80491e8:	4b08      	ldr	r3, [pc, #32]	; (804920c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80491ea:	691a      	ldr	r2, [r3, #16]
 80491ec:	88fb      	ldrh	r3, [r7, #6]
 80491ee:	4013      	ands	r3, r2
 80491f0:	2b00      	cmp	r3, #0
 80491f2:	d006      	beq.n	8049202 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80491f4:	4a05      	ldr	r2, [pc, #20]	; (804920c <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80491f6:	88fb      	ldrh	r3, [r7, #6]
 80491f8:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80491fa:	88fb      	ldrh	r3, [r7, #6]
 80491fc:	4618      	mov	r0, r3
 80491fe:	f000 f812 	bl	8049226 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8049202:	bf00      	nop
 8049204:	3708      	adds	r7, #8
 8049206:	46bd      	mov	sp, r7
 8049208:	bd80      	pop	{r7, pc}
 804920a:	bf00      	nop
 804920c:	4002f400 	.word	0x4002f400

08049210 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8049210:	b480      	push	{r7}
 8049212:	b083      	sub	sp, #12
 8049214:	af00      	add	r7, sp, #0
 8049216:	4603      	mov	r3, r0
 8049218:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 804921a:	bf00      	nop
 804921c:	370c      	adds	r7, #12
 804921e:	46bd      	mov	sp, r7
 8049220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049224:	4770      	bx	lr

08049226 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8049226:	b480      	push	{r7}
 8049228:	b083      	sub	sp, #12
 804922a:	af00      	add	r7, sp, #0
 804922c:	4603      	mov	r3, r0
 804922e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8049230:	bf00      	nop
 8049232:	370c      	adds	r7, #12
 8049234:	46bd      	mov	sp, r7
 8049236:	f85d 7b04 	ldr.w	r7, [sp], #4
 804923a:	4770      	bx	lr

0804923c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 804923c:	b580      	push	{r7, lr}
 804923e:	b082      	sub	sp, #8
 8049240:	af00      	add	r7, sp, #0
 8049242:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8049244:	687b      	ldr	r3, [r7, #4]
 8049246:	2b00      	cmp	r3, #0
 8049248:	d101      	bne.n	804924e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 804924a:	2301      	movs	r3, #1
 804924c:	e0a7      	b.n	804939e <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 804924e:	687b      	ldr	r3, [r7, #4]
 8049250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049254:	b2db      	uxtb	r3, r3
 8049256:	2b00      	cmp	r3, #0
 8049258:	d12c      	bne.n	80492b4 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 804925a:	687b      	ldr	r3, [r7, #4]
 804925c:	2200      	movs	r2, #0
 804925e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8049262:	687b      	ldr	r3, [r7, #4]
 8049264:	4a50      	ldr	r2, [pc, #320]	; (80493a8 <HAL_I2C_Init+0x16c>)
 8049266:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8049268:	687b      	ldr	r3, [r7, #4]
 804926a:	4a50      	ldr	r2, [pc, #320]	; (80493ac <HAL_I2C_Init+0x170>)
 804926c:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 804926e:	687b      	ldr	r3, [r7, #4]
 8049270:	4a4f      	ldr	r2, [pc, #316]	; (80493b0 <HAL_I2C_Init+0x174>)
 8049272:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8049274:	687b      	ldr	r3, [r7, #4]
 8049276:	4a4f      	ldr	r2, [pc, #316]	; (80493b4 <HAL_I2C_Init+0x178>)
 8049278:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 804927a:	687b      	ldr	r3, [r7, #4]
 804927c:	4a4e      	ldr	r2, [pc, #312]	; (80493b8 <HAL_I2C_Init+0x17c>)
 804927e:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8049280:	687b      	ldr	r3, [r7, #4]
 8049282:	4a4e      	ldr	r2, [pc, #312]	; (80493bc <HAL_I2C_Init+0x180>)
 8049284:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8049286:	687b      	ldr	r3, [r7, #4]
 8049288:	4a4d      	ldr	r2, [pc, #308]	; (80493c0 <HAL_I2C_Init+0x184>)
 804928a:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 804928c:	687b      	ldr	r3, [r7, #4]
 804928e:	4a4d      	ldr	r2, [pc, #308]	; (80493c4 <HAL_I2C_Init+0x188>)
 8049290:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8049292:	687b      	ldr	r3, [r7, #4]
 8049294:	4a4c      	ldr	r2, [pc, #304]	; (80493c8 <HAL_I2C_Init+0x18c>)
 8049296:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8049298:	687b      	ldr	r3, [r7, #4]
 804929a:	4a4c      	ldr	r2, [pc, #304]	; (80493cc <HAL_I2C_Init+0x190>)
 804929c:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 804929e:	687b      	ldr	r3, [r7, #4]
 80492a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80492a2:	2b00      	cmp	r3, #0
 80492a4:	d102      	bne.n	80492ac <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80492a6:	687b      	ldr	r3, [r7, #4]
 80492a8:	4a49      	ldr	r2, [pc, #292]	; (80493d0 <HAL_I2C_Init+0x194>)
 80492aa:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 80492ac:	687b      	ldr	r3, [r7, #4]
 80492ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80492b0:	6878      	ldr	r0, [r7, #4]
 80492b2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80492b4:	687b      	ldr	r3, [r7, #4]
 80492b6:	2224      	movs	r2, #36	; 0x24
 80492b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80492bc:	687b      	ldr	r3, [r7, #4]
 80492be:	681b      	ldr	r3, [r3, #0]
 80492c0:	681a      	ldr	r2, [r3, #0]
 80492c2:	687b      	ldr	r3, [r7, #4]
 80492c4:	681b      	ldr	r3, [r3, #0]
 80492c6:	f022 0201 	bic.w	r2, r2, #1
 80492ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80492cc:	687b      	ldr	r3, [r7, #4]
 80492ce:	685a      	ldr	r2, [r3, #4]
 80492d0:	687b      	ldr	r3, [r7, #4]
 80492d2:	681b      	ldr	r3, [r3, #0]
 80492d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80492d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80492da:	687b      	ldr	r3, [r7, #4]
 80492dc:	681b      	ldr	r3, [r3, #0]
 80492de:	689a      	ldr	r2, [r3, #8]
 80492e0:	687b      	ldr	r3, [r7, #4]
 80492e2:	681b      	ldr	r3, [r3, #0]
 80492e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80492e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80492ea:	687b      	ldr	r3, [r7, #4]
 80492ec:	68db      	ldr	r3, [r3, #12]
 80492ee:	2b01      	cmp	r3, #1
 80492f0:	d107      	bne.n	8049302 <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80492f2:	687b      	ldr	r3, [r7, #4]
 80492f4:	689a      	ldr	r2, [r3, #8]
 80492f6:	687b      	ldr	r3, [r7, #4]
 80492f8:	681b      	ldr	r3, [r3, #0]
 80492fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80492fe:	609a      	str	r2, [r3, #8]
 8049300:	e006      	b.n	8049310 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8049302:	687b      	ldr	r3, [r7, #4]
 8049304:	689a      	ldr	r2, [r3, #8]
 8049306:	687b      	ldr	r3, [r7, #4]
 8049308:	681b      	ldr	r3, [r3, #0]
 804930a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 804930e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8049310:	687b      	ldr	r3, [r7, #4]
 8049312:	68db      	ldr	r3, [r3, #12]
 8049314:	2b02      	cmp	r3, #2
 8049316:	d104      	bne.n	8049322 <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8049318:	687b      	ldr	r3, [r7, #4]
 804931a:	681b      	ldr	r3, [r3, #0]
 804931c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8049320:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8049322:	687b      	ldr	r3, [r7, #4]
 8049324:	681b      	ldr	r3, [r3, #0]
 8049326:	685b      	ldr	r3, [r3, #4]
 8049328:	687a      	ldr	r2, [r7, #4]
 804932a:	6812      	ldr	r2, [r2, #0]
 804932c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8049330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8049334:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8049336:	687b      	ldr	r3, [r7, #4]
 8049338:	681b      	ldr	r3, [r3, #0]
 804933a:	68da      	ldr	r2, [r3, #12]
 804933c:	687b      	ldr	r3, [r7, #4]
 804933e:	681b      	ldr	r3, [r3, #0]
 8049340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8049344:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8049346:	687b      	ldr	r3, [r7, #4]
 8049348:	691a      	ldr	r2, [r3, #16]
 804934a:	687b      	ldr	r3, [r7, #4]
 804934c:	695b      	ldr	r3, [r3, #20]
 804934e:	ea42 0103 	orr.w	r1, r2, r3
 8049352:	687b      	ldr	r3, [r7, #4]
 8049354:	699b      	ldr	r3, [r3, #24]
 8049356:	021a      	lsls	r2, r3, #8
 8049358:	687b      	ldr	r3, [r7, #4]
 804935a:	681b      	ldr	r3, [r3, #0]
 804935c:	430a      	orrs	r2, r1
 804935e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8049360:	687b      	ldr	r3, [r7, #4]
 8049362:	69d9      	ldr	r1, [r3, #28]
 8049364:	687b      	ldr	r3, [r7, #4]
 8049366:	6a1a      	ldr	r2, [r3, #32]
 8049368:	687b      	ldr	r3, [r7, #4]
 804936a:	681b      	ldr	r3, [r3, #0]
 804936c:	430a      	orrs	r2, r1
 804936e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8049370:	687b      	ldr	r3, [r7, #4]
 8049372:	681b      	ldr	r3, [r3, #0]
 8049374:	681a      	ldr	r2, [r3, #0]
 8049376:	687b      	ldr	r3, [r7, #4]
 8049378:	681b      	ldr	r3, [r3, #0]
 804937a:	f042 0201 	orr.w	r2, r2, #1
 804937e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8049380:	687b      	ldr	r3, [r7, #4]
 8049382:	2200      	movs	r2, #0
 8049384:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8049386:	687b      	ldr	r3, [r7, #4]
 8049388:	2220      	movs	r2, #32
 804938a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 804938e:	687b      	ldr	r3, [r7, #4]
 8049390:	2200      	movs	r2, #0
 8049392:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8049394:	687b      	ldr	r3, [r7, #4]
 8049396:	2200      	movs	r2, #0
 8049398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 804939c:	2300      	movs	r3, #0
}
 804939e:	4618      	mov	r0, r3
 80493a0:	3708      	adds	r7, #8
 80493a2:	46bd      	mov	sp, r7
 80493a4:	bd80      	pop	{r7, pc}
 80493a6:	bf00      	nop
 80493a8:	08049a77 	.word	0x08049a77
 80493ac:	08049a8b 	.word	0x08049a8b
 80493b0:	08049a9f 	.word	0x08049a9f
 80493b4:	08049ab3 	.word	0x08049ab3
 80493b8:	08049ae3 	.word	0x08049ae3
 80493bc:	08049af7 	.word	0x08049af7
 80493c0:	08049b0b 	.word	0x08049b0b
 80493c4:	08049b1f 	.word	0x08049b1f
 80493c8:	08049b33 	.word	0x08049b33
 80493cc:	08049ac7 	.word	0x08049ac7
 80493d0:	08041275 	.word	0x08041275

080493d4 <HAL_I2C_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_RegisterCallback(I2C_HandleTypeDef *hi2c, HAL_I2C_CallbackIDTypeDef CallbackID,
                                           pI2C_CallbackTypeDef pCallback)
{
 80493d4:	b480      	push	{r7}
 80493d6:	b087      	sub	sp, #28
 80493d8:	af00      	add	r7, sp, #0
 80493da:	60f8      	str	r0, [r7, #12]
 80493dc:	460b      	mov	r3, r1
 80493de:	607a      	str	r2, [r7, #4]
 80493e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80493e2:	2300      	movs	r3, #0
 80493e4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80493e6:	687b      	ldr	r3, [r7, #4]
 80493e8:	2b00      	cmp	r3, #0
 80493ea:	d107      	bne.n	80493fc <HAL_I2C_RegisterCallback+0x28>
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 80493ec:	68fb      	ldr	r3, [r7, #12]
 80493ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80493f0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80493f4:	68fb      	ldr	r3, [r7, #12]
 80493f6:	645a      	str	r2, [r3, #68]	; 0x44

    return HAL_ERROR;
 80493f8:	2301      	movs	r3, #1
 80493fa:	e08c      	b.n	8049516 <HAL_I2C_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(hi2c);
 80493fc:	68fb      	ldr	r3, [r7, #12]
 80493fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8049402:	2b01      	cmp	r3, #1
 8049404:	d101      	bne.n	804940a <HAL_I2C_RegisterCallback+0x36>
 8049406:	2302      	movs	r3, #2
 8049408:	e085      	b.n	8049516 <HAL_I2C_RegisterCallback+0x142>
 804940a:	68fb      	ldr	r3, [r7, #12]
 804940c:	2201      	movs	r2, #1
 804940e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (HAL_I2C_STATE_READY == hi2c->State)
 8049412:	68fb      	ldr	r3, [r7, #12]
 8049414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049418:	b2db      	uxtb	r3, r3
 804941a:	2b20      	cmp	r3, #32
 804941c:	d151      	bne.n	80494c2 <HAL_I2C_RegisterCallback+0xee>
  {
    switch (CallbackID)
 804941e:	7afb      	ldrb	r3, [r7, #11]
 8049420:	2b0a      	cmp	r3, #10
 8049422:	d845      	bhi.n	80494b0 <HAL_I2C_RegisterCallback+0xdc>
 8049424:	a201      	add	r2, pc, #4	; (adr r2, 804942c <HAL_I2C_RegisterCallback+0x58>)
 8049426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804942a:	bf00      	nop
 804942c:	08049459 	.word	0x08049459
 8049430:	08049461 	.word	0x08049461
 8049434:	08049469 	.word	0x08049469
 8049438:	08049471 	.word	0x08049471
 804943c:	08049479 	.word	0x08049479
 8049440:	08049481 	.word	0x08049481
 8049444:	08049489 	.word	0x08049489
 8049448:	08049491 	.word	0x08049491
 804944c:	08049499 	.word	0x08049499
 8049450:	080494a1 	.word	0x080494a1
 8049454:	080494a9 	.word	0x080494a9
    {
      case HAL_I2C_MASTER_TX_COMPLETE_CB_ID :
        hi2c->MasterTxCpltCallback = pCallback;
 8049458:	68fb      	ldr	r3, [r7, #12]
 804945a:	687a      	ldr	r2, [r7, #4]
 804945c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 804945e:	e055      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MASTER_RX_COMPLETE_CB_ID :
        hi2c->MasterRxCpltCallback = pCallback;
 8049460:	68fb      	ldr	r3, [r7, #12]
 8049462:	687a      	ldr	r2, [r7, #4]
 8049464:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8049466:	e051      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_SLAVE_TX_COMPLETE_CB_ID :
        hi2c->SlaveTxCpltCallback = pCallback;
 8049468:	68fb      	ldr	r3, [r7, #12]
 804946a:	687a      	ldr	r2, [r7, #4]
 804946c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 804946e:	e04d      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_SLAVE_RX_COMPLETE_CB_ID :
        hi2c->SlaveRxCpltCallback = pCallback;
 8049470:	68fb      	ldr	r3, [r7, #12]
 8049472:	687a      	ldr	r2, [r7, #4]
 8049474:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8049476:	e049      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_LISTEN_COMPLETE_CB_ID :
        hi2c->ListenCpltCallback = pCallback;
 8049478:	68fb      	ldr	r3, [r7, #12]
 804947a:	687a      	ldr	r2, [r7, #4]
 804947c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 804947e:	e045      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MEM_TX_COMPLETE_CB_ID :
        hi2c->MemTxCpltCallback = pCallback;
 8049480:	68fb      	ldr	r3, [r7, #12]
 8049482:	687a      	ldr	r2, [r7, #4]
 8049484:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8049486:	e041      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MEM_RX_COMPLETE_CB_ID :
        hi2c->MemRxCpltCallback = pCallback;
 8049488:	68fb      	ldr	r3, [r7, #12]
 804948a:	687a      	ldr	r2, [r7, #4]
 804948c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 804948e:	e03d      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_ERROR_CB_ID :
        hi2c->ErrorCallback = pCallback;
 8049490:	68fb      	ldr	r3, [r7, #12]
 8049492:	687a      	ldr	r2, [r7, #4]
 8049494:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8049496:	e039      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_ABORT_CB_ID :
        hi2c->AbortCpltCallback = pCallback;
 8049498:	68fb      	ldr	r3, [r7, #12]
 804949a:	687a      	ldr	r2, [r7, #4]
 804949c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 804949e:	e035      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 80494a0:	68fb      	ldr	r3, [r7, #12]
 80494a2:	687a      	ldr	r2, [r7, #4]
 80494a4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80494a6:	e031      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 80494a8:	68fb      	ldr	r3, [r7, #12]
 80494aa:	687a      	ldr	r2, [r7, #4]
 80494ac:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80494ae:	e02d      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 80494b0:	68fb      	ldr	r3, [r7, #12]
 80494b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80494b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80494b8:	68fb      	ldr	r3, [r7, #12]
 80494ba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 80494bc:	2301      	movs	r3, #1
 80494be:	75fb      	strb	r3, [r7, #23]
        break;
 80494c0:	e024      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>
    }
  }
  else if (HAL_I2C_STATE_RESET == hi2c->State)
 80494c2:	68fb      	ldr	r3, [r7, #12]
 80494c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80494c8:	b2db      	uxtb	r3, r3
 80494ca:	2b00      	cmp	r3, #0
 80494cc:	d116      	bne.n	80494fc <HAL_I2C_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80494ce:	7afb      	ldrb	r3, [r7, #11]
 80494d0:	2b09      	cmp	r3, #9
 80494d2:	d002      	beq.n	80494da <HAL_I2C_RegisterCallback+0x106>
 80494d4:	2b0a      	cmp	r3, #10
 80494d6:	d004      	beq.n	80494e2 <HAL_I2C_RegisterCallback+0x10e>
 80494d8:	e007      	b.n	80494ea <HAL_I2C_RegisterCallback+0x116>
    {
      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 80494da:	68fb      	ldr	r3, [r7, #12]
 80494dc:	687a      	ldr	r2, [r7, #4]
 80494de:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80494e0:	e014      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 80494e2:	68fb      	ldr	r3, [r7, #12]
 80494e4:	687a      	ldr	r2, [r7, #4]
 80494e6:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80494e8:	e010      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 80494ea:	68fb      	ldr	r3, [r7, #12]
 80494ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80494ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80494f2:	68fb      	ldr	r3, [r7, #12]
 80494f4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 80494f6:	2301      	movs	r3, #1
 80494f8:	75fb      	strb	r3, [r7, #23]
        break;
 80494fa:	e007      	b.n	804950c <HAL_I2C_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 80494fc:	68fb      	ldr	r3, [r7, #12]
 80494fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049500:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8049504:	68fb      	ldr	r3, [r7, #12]
 8049506:	645a      	str	r2, [r3, #68]	; 0x44

    /* Return error status */
    status =  HAL_ERROR;
 8049508:	2301      	movs	r3, #1
 804950a:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 804950c:	68fb      	ldr	r3, [r7, #12]
 804950e:	2200      	movs	r2, #0
 8049510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return status;
 8049514:	7dfb      	ldrb	r3, [r7, #23]
}
 8049516:	4618      	mov	r0, r3
 8049518:	371c      	adds	r7, #28
 804951a:	46bd      	mov	sp, r7
 804951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049520:	4770      	bx	lr
 8049522:	bf00      	nop

08049524 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8049524:	b580      	push	{r7, lr}
 8049526:	b088      	sub	sp, #32
 8049528:	af02      	add	r7, sp, #8
 804952a:	60f8      	str	r0, [r7, #12]
 804952c:	4608      	mov	r0, r1
 804952e:	4611      	mov	r1, r2
 8049530:	461a      	mov	r2, r3
 8049532:	4603      	mov	r3, r0
 8049534:	817b      	strh	r3, [r7, #10]
 8049536:	460b      	mov	r3, r1
 8049538:	813b      	strh	r3, [r7, #8]
 804953a:	4613      	mov	r3, r2
 804953c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 804953e:	68fb      	ldr	r3, [r7, #12]
 8049540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049544:	b2db      	uxtb	r3, r3
 8049546:	2b20      	cmp	r3, #32
 8049548:	f040 80f9 	bne.w	804973e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 804954c:	6a3b      	ldr	r3, [r7, #32]
 804954e:	2b00      	cmp	r3, #0
 8049550:	d002      	beq.n	8049558 <HAL_I2C_Mem_Write+0x34>
 8049552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8049554:	2b00      	cmp	r3, #0
 8049556:	d105      	bne.n	8049564 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8049558:	68fb      	ldr	r3, [r7, #12]
 804955a:	f44f 7200 	mov.w	r2, #512	; 0x200
 804955e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8049560:	2301      	movs	r3, #1
 8049562:	e0ed      	b.n	8049740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8049564:	68fb      	ldr	r3, [r7, #12]
 8049566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 804956a:	2b01      	cmp	r3, #1
 804956c:	d101      	bne.n	8049572 <HAL_I2C_Mem_Write+0x4e>
 804956e:	2302      	movs	r3, #2
 8049570:	e0e6      	b.n	8049740 <HAL_I2C_Mem_Write+0x21c>
 8049572:	68fb      	ldr	r3, [r7, #12]
 8049574:	2201      	movs	r2, #1
 8049576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 804957a:	f7fd f8c5 	bl	8046708 <HAL_GetTick>
 804957e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8049580:	697b      	ldr	r3, [r7, #20]
 8049582:	9300      	str	r3, [sp, #0]
 8049584:	2319      	movs	r3, #25
 8049586:	2201      	movs	r2, #1
 8049588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 804958c:	68f8      	ldr	r0, [r7, #12]
 804958e:	f001 f820 	bl	804a5d2 <I2C_WaitOnFlagUntilTimeout>
 8049592:	4603      	mov	r3, r0
 8049594:	2b00      	cmp	r3, #0
 8049596:	d001      	beq.n	804959c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8049598:	2301      	movs	r3, #1
 804959a:	e0d1      	b.n	8049740 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 804959c:	68fb      	ldr	r3, [r7, #12]
 804959e:	2221      	movs	r2, #33	; 0x21
 80495a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80495a4:	68fb      	ldr	r3, [r7, #12]
 80495a6:	2240      	movs	r2, #64	; 0x40
 80495a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80495ac:	68fb      	ldr	r3, [r7, #12]
 80495ae:	2200      	movs	r2, #0
 80495b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80495b2:	68fb      	ldr	r3, [r7, #12]
 80495b4:	6a3a      	ldr	r2, [r7, #32]
 80495b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80495b8:	68fb      	ldr	r3, [r7, #12]
 80495ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80495bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80495be:	68fb      	ldr	r3, [r7, #12]
 80495c0:	2200      	movs	r2, #0
 80495c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80495c4:	88f8      	ldrh	r0, [r7, #6]
 80495c6:	893a      	ldrh	r2, [r7, #8]
 80495c8:	8979      	ldrh	r1, [r7, #10]
 80495ca:	697b      	ldr	r3, [r7, #20]
 80495cc:	9301      	str	r3, [sp, #4]
 80495ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80495d0:	9300      	str	r3, [sp, #0]
 80495d2:	4603      	mov	r3, r0
 80495d4:	68f8      	ldr	r0, [r7, #12]
 80495d6:	f000 fbd3 	bl	8049d80 <I2C_RequestMemoryWrite>
 80495da:	4603      	mov	r3, r0
 80495dc:	2b00      	cmp	r3, #0
 80495de:	d005      	beq.n	80495ec <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80495e0:	68fb      	ldr	r3, [r7, #12]
 80495e2:	2200      	movs	r2, #0
 80495e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80495e8:	2301      	movs	r3, #1
 80495ea:	e0a9      	b.n	8049740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80495ec:	68fb      	ldr	r3, [r7, #12]
 80495ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80495f0:	b29b      	uxth	r3, r3
 80495f2:	2bff      	cmp	r3, #255	; 0xff
 80495f4:	d90e      	bls.n	8049614 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80495f6:	68fb      	ldr	r3, [r7, #12]
 80495f8:	22ff      	movs	r2, #255	; 0xff
 80495fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80495fc:	68fb      	ldr	r3, [r7, #12]
 80495fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049600:	b2da      	uxtb	r2, r3
 8049602:	8979      	ldrh	r1, [r7, #10]
 8049604:	2300      	movs	r3, #0
 8049606:	9300      	str	r3, [sp, #0]
 8049608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 804960c:	68f8      	ldr	r0, [r7, #12]
 804960e:	f001 f903 	bl	804a818 <I2C_TransferConfig>
 8049612:	e00f      	b.n	8049634 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8049614:	68fb      	ldr	r3, [r7, #12]
 8049616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049618:	b29a      	uxth	r2, r3
 804961a:	68fb      	ldr	r3, [r7, #12]
 804961c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 804961e:	68fb      	ldr	r3, [r7, #12]
 8049620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049622:	b2da      	uxtb	r2, r3
 8049624:	8979      	ldrh	r1, [r7, #10]
 8049626:	2300      	movs	r3, #0
 8049628:	9300      	str	r3, [sp, #0]
 804962a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 804962e:	68f8      	ldr	r0, [r7, #12]
 8049630:	f001 f8f2 	bl	804a818 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8049634:	697a      	ldr	r2, [r7, #20]
 8049636:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8049638:	68f8      	ldr	r0, [r7, #12]
 804963a:	f001 f80a 	bl	804a652 <I2C_WaitOnTXISFlagUntilTimeout>
 804963e:	4603      	mov	r3, r0
 8049640:	2b00      	cmp	r3, #0
 8049642:	d001      	beq.n	8049648 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8049644:	2301      	movs	r3, #1
 8049646:	e07b      	b.n	8049740 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8049648:	68fb      	ldr	r3, [r7, #12]
 804964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804964c:	781a      	ldrb	r2, [r3, #0]
 804964e:	68fb      	ldr	r3, [r7, #12]
 8049650:	681b      	ldr	r3, [r3, #0]
 8049652:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8049654:	68fb      	ldr	r3, [r7, #12]
 8049656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049658:	1c5a      	adds	r2, r3, #1
 804965a:	68fb      	ldr	r3, [r7, #12]
 804965c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 804965e:	68fb      	ldr	r3, [r7, #12]
 8049660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049662:	b29b      	uxth	r3, r3
 8049664:	3b01      	subs	r3, #1
 8049666:	b29a      	uxth	r2, r3
 8049668:	68fb      	ldr	r3, [r7, #12]
 804966a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 804966c:	68fb      	ldr	r3, [r7, #12]
 804966e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049670:	3b01      	subs	r3, #1
 8049672:	b29a      	uxth	r2, r3
 8049674:	68fb      	ldr	r3, [r7, #12]
 8049676:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8049678:	68fb      	ldr	r3, [r7, #12]
 804967a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804967c:	b29b      	uxth	r3, r3
 804967e:	2b00      	cmp	r3, #0
 8049680:	d034      	beq.n	80496ec <HAL_I2C_Mem_Write+0x1c8>
 8049682:	68fb      	ldr	r3, [r7, #12]
 8049684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049686:	2b00      	cmp	r3, #0
 8049688:	d130      	bne.n	80496ec <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 804968a:	697b      	ldr	r3, [r7, #20]
 804968c:	9300      	str	r3, [sp, #0]
 804968e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049690:	2200      	movs	r2, #0
 8049692:	2180      	movs	r1, #128	; 0x80
 8049694:	68f8      	ldr	r0, [r7, #12]
 8049696:	f000 ff9c 	bl	804a5d2 <I2C_WaitOnFlagUntilTimeout>
 804969a:	4603      	mov	r3, r0
 804969c:	2b00      	cmp	r3, #0
 804969e:	d001      	beq.n	80496a4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80496a0:	2301      	movs	r3, #1
 80496a2:	e04d      	b.n	8049740 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80496a4:	68fb      	ldr	r3, [r7, #12]
 80496a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80496a8:	b29b      	uxth	r3, r3
 80496aa:	2bff      	cmp	r3, #255	; 0xff
 80496ac:	d90e      	bls.n	80496cc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80496ae:	68fb      	ldr	r3, [r7, #12]
 80496b0:	22ff      	movs	r2, #255	; 0xff
 80496b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80496b4:	68fb      	ldr	r3, [r7, #12]
 80496b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80496b8:	b2da      	uxtb	r2, r3
 80496ba:	8979      	ldrh	r1, [r7, #10]
 80496bc:	2300      	movs	r3, #0
 80496be:	9300      	str	r3, [sp, #0]
 80496c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80496c4:	68f8      	ldr	r0, [r7, #12]
 80496c6:	f001 f8a7 	bl	804a818 <I2C_TransferConfig>
 80496ca:	e00f      	b.n	80496ec <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80496cc:	68fb      	ldr	r3, [r7, #12]
 80496ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80496d0:	b29a      	uxth	r2, r3
 80496d2:	68fb      	ldr	r3, [r7, #12]
 80496d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80496d6:	68fb      	ldr	r3, [r7, #12]
 80496d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80496da:	b2da      	uxtb	r2, r3
 80496dc:	8979      	ldrh	r1, [r7, #10]
 80496de:	2300      	movs	r3, #0
 80496e0:	9300      	str	r3, [sp, #0]
 80496e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80496e6:	68f8      	ldr	r0, [r7, #12]
 80496e8:	f001 f896 	bl	804a818 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80496ec:	68fb      	ldr	r3, [r7, #12]
 80496ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80496f0:	b29b      	uxth	r3, r3
 80496f2:	2b00      	cmp	r3, #0
 80496f4:	d19e      	bne.n	8049634 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80496f6:	697a      	ldr	r2, [r7, #20]
 80496f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80496fa:	68f8      	ldr	r0, [r7, #12]
 80496fc:	f000 ffe9 	bl	804a6d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8049700:	4603      	mov	r3, r0
 8049702:	2b00      	cmp	r3, #0
 8049704:	d001      	beq.n	804970a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8049706:	2301      	movs	r3, #1
 8049708:	e01a      	b.n	8049740 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 804970a:	68fb      	ldr	r3, [r7, #12]
 804970c:	681b      	ldr	r3, [r3, #0]
 804970e:	2220      	movs	r2, #32
 8049710:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8049712:	68fb      	ldr	r3, [r7, #12]
 8049714:	681b      	ldr	r3, [r3, #0]
 8049716:	6859      	ldr	r1, [r3, #4]
 8049718:	68fb      	ldr	r3, [r7, #12]
 804971a:	681a      	ldr	r2, [r3, #0]
 804971c:	4b0a      	ldr	r3, [pc, #40]	; (8049748 <HAL_I2C_Mem_Write+0x224>)
 804971e:	400b      	ands	r3, r1
 8049720:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8049722:	68fb      	ldr	r3, [r7, #12]
 8049724:	2220      	movs	r2, #32
 8049726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 804972a:	68fb      	ldr	r3, [r7, #12]
 804972c:	2200      	movs	r2, #0
 804972e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8049732:	68fb      	ldr	r3, [r7, #12]
 8049734:	2200      	movs	r2, #0
 8049736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 804973a:	2300      	movs	r3, #0
 804973c:	e000      	b.n	8049740 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 804973e:	2302      	movs	r3, #2
  }
}
 8049740:	4618      	mov	r0, r3
 8049742:	3718      	adds	r7, #24
 8049744:	46bd      	mov	sp, r7
 8049746:	bd80      	pop	{r7, pc}
 8049748:	fe00e800 	.word	0xfe00e800

0804974c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 804974c:	b580      	push	{r7, lr}
 804974e:	b088      	sub	sp, #32
 8049750:	af02      	add	r7, sp, #8
 8049752:	60f8      	str	r0, [r7, #12]
 8049754:	4608      	mov	r0, r1
 8049756:	4611      	mov	r1, r2
 8049758:	461a      	mov	r2, r3
 804975a:	4603      	mov	r3, r0
 804975c:	817b      	strh	r3, [r7, #10]
 804975e:	460b      	mov	r3, r1
 8049760:	813b      	strh	r3, [r7, #8]
 8049762:	4613      	mov	r3, r2
 8049764:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8049766:	68fb      	ldr	r3, [r7, #12]
 8049768:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804976c:	b2db      	uxtb	r3, r3
 804976e:	2b20      	cmp	r3, #32
 8049770:	f040 80fd 	bne.w	804996e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8049774:	6a3b      	ldr	r3, [r7, #32]
 8049776:	2b00      	cmp	r3, #0
 8049778:	d002      	beq.n	8049780 <HAL_I2C_Mem_Read+0x34>
 804977a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 804977c:	2b00      	cmp	r3, #0
 804977e:	d105      	bne.n	804978c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8049780:	68fb      	ldr	r3, [r7, #12]
 8049782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8049786:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8049788:	2301      	movs	r3, #1
 804978a:	e0f1      	b.n	8049970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 804978c:	68fb      	ldr	r3, [r7, #12]
 804978e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8049792:	2b01      	cmp	r3, #1
 8049794:	d101      	bne.n	804979a <HAL_I2C_Mem_Read+0x4e>
 8049796:	2302      	movs	r3, #2
 8049798:	e0ea      	b.n	8049970 <HAL_I2C_Mem_Read+0x224>
 804979a:	68fb      	ldr	r3, [r7, #12]
 804979c:	2201      	movs	r2, #1
 804979e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80497a2:	f7fc ffb1 	bl	8046708 <HAL_GetTick>
 80497a6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80497a8:	697b      	ldr	r3, [r7, #20]
 80497aa:	9300      	str	r3, [sp, #0]
 80497ac:	2319      	movs	r3, #25
 80497ae:	2201      	movs	r2, #1
 80497b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80497b4:	68f8      	ldr	r0, [r7, #12]
 80497b6:	f000 ff0c 	bl	804a5d2 <I2C_WaitOnFlagUntilTimeout>
 80497ba:	4603      	mov	r3, r0
 80497bc:	2b00      	cmp	r3, #0
 80497be:	d001      	beq.n	80497c4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80497c0:	2301      	movs	r3, #1
 80497c2:	e0d5      	b.n	8049970 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80497c4:	68fb      	ldr	r3, [r7, #12]
 80497c6:	2222      	movs	r2, #34	; 0x22
 80497c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80497cc:	68fb      	ldr	r3, [r7, #12]
 80497ce:	2240      	movs	r2, #64	; 0x40
 80497d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80497d4:	68fb      	ldr	r3, [r7, #12]
 80497d6:	2200      	movs	r2, #0
 80497d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80497da:	68fb      	ldr	r3, [r7, #12]
 80497dc:	6a3a      	ldr	r2, [r7, #32]
 80497de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80497e0:	68fb      	ldr	r3, [r7, #12]
 80497e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80497e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80497e6:	68fb      	ldr	r3, [r7, #12]
 80497e8:	2200      	movs	r2, #0
 80497ea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80497ec:	88f8      	ldrh	r0, [r7, #6]
 80497ee:	893a      	ldrh	r2, [r7, #8]
 80497f0:	8979      	ldrh	r1, [r7, #10]
 80497f2:	697b      	ldr	r3, [r7, #20]
 80497f4:	9301      	str	r3, [sp, #4]
 80497f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80497f8:	9300      	str	r3, [sp, #0]
 80497fa:	4603      	mov	r3, r0
 80497fc:	68f8      	ldr	r0, [r7, #12]
 80497fe:	f000 fb13 	bl	8049e28 <I2C_RequestMemoryRead>
 8049802:	4603      	mov	r3, r0
 8049804:	2b00      	cmp	r3, #0
 8049806:	d005      	beq.n	8049814 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8049808:	68fb      	ldr	r3, [r7, #12]
 804980a:	2200      	movs	r2, #0
 804980c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8049810:	2301      	movs	r3, #1
 8049812:	e0ad      	b.n	8049970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8049814:	68fb      	ldr	r3, [r7, #12]
 8049816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049818:	b29b      	uxth	r3, r3
 804981a:	2bff      	cmp	r3, #255	; 0xff
 804981c:	d90e      	bls.n	804983c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 804981e:	68fb      	ldr	r3, [r7, #12]
 8049820:	22ff      	movs	r2, #255	; 0xff
 8049822:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8049824:	68fb      	ldr	r3, [r7, #12]
 8049826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049828:	b2da      	uxtb	r2, r3
 804982a:	8979      	ldrh	r1, [r7, #10]
 804982c:	4b52      	ldr	r3, [pc, #328]	; (8049978 <HAL_I2C_Mem_Read+0x22c>)
 804982e:	9300      	str	r3, [sp, #0]
 8049830:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8049834:	68f8      	ldr	r0, [r7, #12]
 8049836:	f000 ffef 	bl	804a818 <I2C_TransferConfig>
 804983a:	e00f      	b.n	804985c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 804983c:	68fb      	ldr	r3, [r7, #12]
 804983e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049840:	b29a      	uxth	r2, r3
 8049842:	68fb      	ldr	r3, [r7, #12]
 8049844:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8049846:	68fb      	ldr	r3, [r7, #12]
 8049848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804984a:	b2da      	uxtb	r2, r3
 804984c:	8979      	ldrh	r1, [r7, #10]
 804984e:	4b4a      	ldr	r3, [pc, #296]	; (8049978 <HAL_I2C_Mem_Read+0x22c>)
 8049850:	9300      	str	r3, [sp, #0]
 8049852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8049856:	68f8      	ldr	r0, [r7, #12]
 8049858:	f000 ffde 	bl	804a818 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 804985c:	697b      	ldr	r3, [r7, #20]
 804985e:	9300      	str	r3, [sp, #0]
 8049860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8049862:	2200      	movs	r2, #0
 8049864:	2104      	movs	r1, #4
 8049866:	68f8      	ldr	r0, [r7, #12]
 8049868:	f000 feb3 	bl	804a5d2 <I2C_WaitOnFlagUntilTimeout>
 804986c:	4603      	mov	r3, r0
 804986e:	2b00      	cmp	r3, #0
 8049870:	d001      	beq.n	8049876 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8049872:	2301      	movs	r3, #1
 8049874:	e07c      	b.n	8049970 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8049876:	68fb      	ldr	r3, [r7, #12]
 8049878:	681b      	ldr	r3, [r3, #0]
 804987a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804987c:	68fb      	ldr	r3, [r7, #12]
 804987e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049880:	b2d2      	uxtb	r2, r2
 8049882:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8049884:	68fb      	ldr	r3, [r7, #12]
 8049886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049888:	1c5a      	adds	r2, r3, #1
 804988a:	68fb      	ldr	r3, [r7, #12]
 804988c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 804988e:	68fb      	ldr	r3, [r7, #12]
 8049890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049892:	3b01      	subs	r3, #1
 8049894:	b29a      	uxth	r2, r3
 8049896:	68fb      	ldr	r3, [r7, #12]
 8049898:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 804989a:	68fb      	ldr	r3, [r7, #12]
 804989c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804989e:	b29b      	uxth	r3, r3
 80498a0:	3b01      	subs	r3, #1
 80498a2:	b29a      	uxth	r2, r3
 80498a4:	68fb      	ldr	r3, [r7, #12]
 80498a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80498a8:	68fb      	ldr	r3, [r7, #12]
 80498aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80498ac:	b29b      	uxth	r3, r3
 80498ae:	2b00      	cmp	r3, #0
 80498b0:	d034      	beq.n	804991c <HAL_I2C_Mem_Read+0x1d0>
 80498b2:	68fb      	ldr	r3, [r7, #12]
 80498b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80498b6:	2b00      	cmp	r3, #0
 80498b8:	d130      	bne.n	804991c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80498ba:	697b      	ldr	r3, [r7, #20]
 80498bc:	9300      	str	r3, [sp, #0]
 80498be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80498c0:	2200      	movs	r2, #0
 80498c2:	2180      	movs	r1, #128	; 0x80
 80498c4:	68f8      	ldr	r0, [r7, #12]
 80498c6:	f000 fe84 	bl	804a5d2 <I2C_WaitOnFlagUntilTimeout>
 80498ca:	4603      	mov	r3, r0
 80498cc:	2b00      	cmp	r3, #0
 80498ce:	d001      	beq.n	80498d4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80498d0:	2301      	movs	r3, #1
 80498d2:	e04d      	b.n	8049970 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80498d4:	68fb      	ldr	r3, [r7, #12]
 80498d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80498d8:	b29b      	uxth	r3, r3
 80498da:	2bff      	cmp	r3, #255	; 0xff
 80498dc:	d90e      	bls.n	80498fc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80498de:	68fb      	ldr	r3, [r7, #12]
 80498e0:	22ff      	movs	r2, #255	; 0xff
 80498e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80498e4:	68fb      	ldr	r3, [r7, #12]
 80498e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80498e8:	b2da      	uxtb	r2, r3
 80498ea:	8979      	ldrh	r1, [r7, #10]
 80498ec:	2300      	movs	r3, #0
 80498ee:	9300      	str	r3, [sp, #0]
 80498f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80498f4:	68f8      	ldr	r0, [r7, #12]
 80498f6:	f000 ff8f 	bl	804a818 <I2C_TransferConfig>
 80498fa:	e00f      	b.n	804991c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80498fc:	68fb      	ldr	r3, [r7, #12]
 80498fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049900:	b29a      	uxth	r2, r3
 8049902:	68fb      	ldr	r3, [r7, #12]
 8049904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8049906:	68fb      	ldr	r3, [r7, #12]
 8049908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804990a:	b2da      	uxtb	r2, r3
 804990c:	8979      	ldrh	r1, [r7, #10]
 804990e:	2300      	movs	r3, #0
 8049910:	9300      	str	r3, [sp, #0]
 8049912:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8049916:	68f8      	ldr	r0, [r7, #12]
 8049918:	f000 ff7e 	bl	804a818 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 804991c:	68fb      	ldr	r3, [r7, #12]
 804991e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049920:	b29b      	uxth	r3, r3
 8049922:	2b00      	cmp	r3, #0
 8049924:	d19a      	bne.n	804985c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8049926:	697a      	ldr	r2, [r7, #20]
 8049928:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 804992a:	68f8      	ldr	r0, [r7, #12]
 804992c:	f000 fed1 	bl	804a6d2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8049930:	4603      	mov	r3, r0
 8049932:	2b00      	cmp	r3, #0
 8049934:	d001      	beq.n	804993a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8049936:	2301      	movs	r3, #1
 8049938:	e01a      	b.n	8049970 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 804993a:	68fb      	ldr	r3, [r7, #12]
 804993c:	681b      	ldr	r3, [r3, #0]
 804993e:	2220      	movs	r2, #32
 8049940:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8049942:	68fb      	ldr	r3, [r7, #12]
 8049944:	681b      	ldr	r3, [r3, #0]
 8049946:	6859      	ldr	r1, [r3, #4]
 8049948:	68fb      	ldr	r3, [r7, #12]
 804994a:	681a      	ldr	r2, [r3, #0]
 804994c:	4b0b      	ldr	r3, [pc, #44]	; (804997c <HAL_I2C_Mem_Read+0x230>)
 804994e:	400b      	ands	r3, r1
 8049950:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8049952:	68fb      	ldr	r3, [r7, #12]
 8049954:	2220      	movs	r2, #32
 8049956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 804995a:	68fb      	ldr	r3, [r7, #12]
 804995c:	2200      	movs	r2, #0
 804995e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8049962:	68fb      	ldr	r3, [r7, #12]
 8049964:	2200      	movs	r2, #0
 8049966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 804996a:	2300      	movs	r3, #0
 804996c:	e000      	b.n	8049970 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 804996e:	2302      	movs	r3, #2
  }
}
 8049970:	4618      	mov	r0, r3
 8049972:	3718      	adds	r7, #24
 8049974:	46bd      	mov	sp, r7
 8049976:	bd80      	pop	{r7, pc}
 8049978:	80002400 	.word	0x80002400
 804997c:	fe00e800 	.word	0xfe00e800

08049980 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8049980:	b580      	push	{r7, lr}
 8049982:	b084      	sub	sp, #16
 8049984:	af00      	add	r7, sp, #0
 8049986:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8049988:	687b      	ldr	r3, [r7, #4]
 804998a:	681b      	ldr	r3, [r3, #0]
 804998c:	699b      	ldr	r3, [r3, #24]
 804998e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8049990:	687b      	ldr	r3, [r7, #4]
 8049992:	681b      	ldr	r3, [r3, #0]
 8049994:	681b      	ldr	r3, [r3, #0]
 8049996:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8049998:	687b      	ldr	r3, [r7, #4]
 804999a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804999c:	2b00      	cmp	r3, #0
 804999e:	d005      	beq.n	80499ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80499a0:	687b      	ldr	r3, [r7, #4]
 80499a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80499a4:	68ba      	ldr	r2, [r7, #8]
 80499a6:	68f9      	ldr	r1, [r7, #12]
 80499a8:	6878      	ldr	r0, [r7, #4]
 80499aa:	4798      	blx	r3
  }
}
 80499ac:	bf00      	nop
 80499ae:	3710      	adds	r7, #16
 80499b0:	46bd      	mov	sp, r7
 80499b2:	bd80      	pop	{r7, pc}

080499b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80499b4:	b580      	push	{r7, lr}
 80499b6:	b086      	sub	sp, #24
 80499b8:	af00      	add	r7, sp, #0
 80499ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80499bc:	687b      	ldr	r3, [r7, #4]
 80499be:	681b      	ldr	r3, [r3, #0]
 80499c0:	699b      	ldr	r3, [r3, #24]
 80499c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80499c4:	687b      	ldr	r3, [r7, #4]
 80499c6:	681b      	ldr	r3, [r3, #0]
 80499c8:	681b      	ldr	r3, [r3, #0]
 80499ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80499cc:	697b      	ldr	r3, [r7, #20]
 80499ce:	0a1b      	lsrs	r3, r3, #8
 80499d0:	f003 0301 	and.w	r3, r3, #1
 80499d4:	2b00      	cmp	r3, #0
 80499d6:	d010      	beq.n	80499fa <HAL_I2C_ER_IRQHandler+0x46>
 80499d8:	693b      	ldr	r3, [r7, #16]
 80499da:	09db      	lsrs	r3, r3, #7
 80499dc:	f003 0301 	and.w	r3, r3, #1
 80499e0:	2b00      	cmp	r3, #0
 80499e2:	d00a      	beq.n	80499fa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80499e4:	687b      	ldr	r3, [r7, #4]
 80499e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80499e8:	f043 0201 	orr.w	r2, r3, #1
 80499ec:	687b      	ldr	r3, [r7, #4]
 80499ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80499f0:	687b      	ldr	r3, [r7, #4]
 80499f2:	681b      	ldr	r3, [r3, #0]
 80499f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80499f8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80499fa:	697b      	ldr	r3, [r7, #20]
 80499fc:	0a9b      	lsrs	r3, r3, #10
 80499fe:	f003 0301 	and.w	r3, r3, #1
 8049a02:	2b00      	cmp	r3, #0
 8049a04:	d010      	beq.n	8049a28 <HAL_I2C_ER_IRQHandler+0x74>
 8049a06:	693b      	ldr	r3, [r7, #16]
 8049a08:	09db      	lsrs	r3, r3, #7
 8049a0a:	f003 0301 	and.w	r3, r3, #1
 8049a0e:	2b00      	cmp	r3, #0
 8049a10:	d00a      	beq.n	8049a28 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8049a12:	687b      	ldr	r3, [r7, #4]
 8049a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049a16:	f043 0208 	orr.w	r2, r3, #8
 8049a1a:	687b      	ldr	r3, [r7, #4]
 8049a1c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8049a1e:	687b      	ldr	r3, [r7, #4]
 8049a20:	681b      	ldr	r3, [r3, #0]
 8049a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8049a26:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8049a28:	697b      	ldr	r3, [r7, #20]
 8049a2a:	0a5b      	lsrs	r3, r3, #9
 8049a2c:	f003 0301 	and.w	r3, r3, #1
 8049a30:	2b00      	cmp	r3, #0
 8049a32:	d010      	beq.n	8049a56 <HAL_I2C_ER_IRQHandler+0xa2>
 8049a34:	693b      	ldr	r3, [r7, #16]
 8049a36:	09db      	lsrs	r3, r3, #7
 8049a38:	f003 0301 	and.w	r3, r3, #1
 8049a3c:	2b00      	cmp	r3, #0
 8049a3e:	d00a      	beq.n	8049a56 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8049a40:	687b      	ldr	r3, [r7, #4]
 8049a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049a44:	f043 0202 	orr.w	r2, r3, #2
 8049a48:	687b      	ldr	r3, [r7, #4]
 8049a4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8049a4c:	687b      	ldr	r3, [r7, #4]
 8049a4e:	681b      	ldr	r3, [r3, #0]
 8049a50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8049a54:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8049a56:	687b      	ldr	r3, [r7, #4]
 8049a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049a5a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8049a5c:	68fb      	ldr	r3, [r7, #12]
 8049a5e:	f003 030b 	and.w	r3, r3, #11
 8049a62:	2b00      	cmp	r3, #0
 8049a64:	d003      	beq.n	8049a6e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8049a66:	68f9      	ldr	r1, [r7, #12]
 8049a68:	6878      	ldr	r0, [r7, #4]
 8049a6a:	f000 fc77 	bl	804a35c <I2C_ITError>
  }
}
 8049a6e:	bf00      	nop
 8049a70:	3718      	adds	r7, #24
 8049a72:	46bd      	mov	sp, r7
 8049a74:	bd80      	pop	{r7, pc}

08049a76 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8049a76:	b480      	push	{r7}
 8049a78:	b083      	sub	sp, #12
 8049a7a:	af00      	add	r7, sp, #0
 8049a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8049a7e:	bf00      	nop
 8049a80:	370c      	adds	r7, #12
 8049a82:	46bd      	mov	sp, r7
 8049a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049a88:	4770      	bx	lr

08049a8a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8049a8a:	b480      	push	{r7}
 8049a8c:	b083      	sub	sp, #12
 8049a8e:	af00      	add	r7, sp, #0
 8049a90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8049a92:	bf00      	nop
 8049a94:	370c      	adds	r7, #12
 8049a96:	46bd      	mov	sp, r7
 8049a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049a9c:	4770      	bx	lr

08049a9e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8049a9e:	b480      	push	{r7}
 8049aa0:	b083      	sub	sp, #12
 8049aa2:	af00      	add	r7, sp, #0
 8049aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8049aa6:	bf00      	nop
 8049aa8:	370c      	adds	r7, #12
 8049aaa:	46bd      	mov	sp, r7
 8049aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049ab0:	4770      	bx	lr

08049ab2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8049ab2:	b480      	push	{r7}
 8049ab4:	b083      	sub	sp, #12
 8049ab6:	af00      	add	r7, sp, #0
 8049ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8049aba:	bf00      	nop
 8049abc:	370c      	adds	r7, #12
 8049abe:	46bd      	mov	sp, r7
 8049ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049ac4:	4770      	bx	lr

08049ac6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8049ac6:	b480      	push	{r7}
 8049ac8:	b083      	sub	sp, #12
 8049aca:	af00      	add	r7, sp, #0
 8049acc:	6078      	str	r0, [r7, #4]
 8049ace:	460b      	mov	r3, r1
 8049ad0:	70fb      	strb	r3, [r7, #3]
 8049ad2:	4613      	mov	r3, r2
 8049ad4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8049ad6:	bf00      	nop
 8049ad8:	370c      	adds	r7, #12
 8049ada:	46bd      	mov	sp, r7
 8049adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049ae0:	4770      	bx	lr

08049ae2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8049ae2:	b480      	push	{r7}
 8049ae4:	b083      	sub	sp, #12
 8049ae6:	af00      	add	r7, sp, #0
 8049ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8049aea:	bf00      	nop
 8049aec:	370c      	adds	r7, #12
 8049aee:	46bd      	mov	sp, r7
 8049af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049af4:	4770      	bx	lr

08049af6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8049af6:	b480      	push	{r7}
 8049af8:	b083      	sub	sp, #12
 8049afa:	af00      	add	r7, sp, #0
 8049afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8049afe:	bf00      	nop
 8049b00:	370c      	adds	r7, #12
 8049b02:	46bd      	mov	sp, r7
 8049b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b08:	4770      	bx	lr

08049b0a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8049b0a:	b480      	push	{r7}
 8049b0c:	b083      	sub	sp, #12
 8049b0e:	af00      	add	r7, sp, #0
 8049b10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8049b12:	bf00      	nop
 8049b14:	370c      	adds	r7, #12
 8049b16:	46bd      	mov	sp, r7
 8049b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b1c:	4770      	bx	lr

08049b1e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8049b1e:	b480      	push	{r7}
 8049b20:	b083      	sub	sp, #12
 8049b22:	af00      	add	r7, sp, #0
 8049b24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8049b26:	bf00      	nop
 8049b28:	370c      	adds	r7, #12
 8049b2a:	46bd      	mov	sp, r7
 8049b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b30:	4770      	bx	lr

08049b32 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8049b32:	b480      	push	{r7}
 8049b34:	b083      	sub	sp, #12
 8049b36:	af00      	add	r7, sp, #0
 8049b38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8049b3a:	bf00      	nop
 8049b3c:	370c      	adds	r7, #12
 8049b3e:	46bd      	mov	sp, r7
 8049b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b44:	4770      	bx	lr

08049b46 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8049b46:	b480      	push	{r7}
 8049b48:	b083      	sub	sp, #12
 8049b4a:	af00      	add	r7, sp, #0
 8049b4c:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8049b4e:	687b      	ldr	r3, [r7, #4]
 8049b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049b54:	b2db      	uxtb	r3, r3
}
 8049b56:	4618      	mov	r0, r3
 8049b58:	370c      	adds	r7, #12
 8049b5a:	46bd      	mov	sp, r7
 8049b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b60:	4770      	bx	lr

08049b62 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8049b62:	b480      	push	{r7}
 8049b64:	b083      	sub	sp, #12
 8049b66:	af00      	add	r7, sp, #0
 8049b68:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8049b6a:	687b      	ldr	r3, [r7, #4]
 8049b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8049b6e:	4618      	mov	r0, r3
 8049b70:	370c      	adds	r7, #12
 8049b72:	46bd      	mov	sp, r7
 8049b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049b78:	4770      	bx	lr

08049b7a <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8049b7a:	b580      	push	{r7, lr}
 8049b7c:	b086      	sub	sp, #24
 8049b7e:	af00      	add	r7, sp, #0
 8049b80:	60f8      	str	r0, [r7, #12]
 8049b82:	60b9      	str	r1, [r7, #8]
 8049b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8049b86:	68fb      	ldr	r3, [r7, #12]
 8049b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049b8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8049b8c:	68bb      	ldr	r3, [r7, #8]
 8049b8e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8049b90:	68fb      	ldr	r3, [r7, #12]
 8049b92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8049b96:	2b01      	cmp	r3, #1
 8049b98:	d101      	bne.n	8049b9e <I2C_Slave_ISR_IT+0x24>
 8049b9a:	2302      	movs	r3, #2
 8049b9c:	e0ec      	b.n	8049d78 <I2C_Slave_ISR_IT+0x1fe>
 8049b9e:	68fb      	ldr	r3, [r7, #12]
 8049ba0:	2201      	movs	r2, #1
 8049ba2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8049ba6:	693b      	ldr	r3, [r7, #16]
 8049ba8:	095b      	lsrs	r3, r3, #5
 8049baa:	f003 0301 	and.w	r3, r3, #1
 8049bae:	2b00      	cmp	r3, #0
 8049bb0:	d009      	beq.n	8049bc6 <I2C_Slave_ISR_IT+0x4c>
 8049bb2:	687b      	ldr	r3, [r7, #4]
 8049bb4:	095b      	lsrs	r3, r3, #5
 8049bb6:	f003 0301 	and.w	r3, r3, #1
 8049bba:	2b00      	cmp	r3, #0
 8049bbc:	d003      	beq.n	8049bc6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8049bbe:	6939      	ldr	r1, [r7, #16]
 8049bc0:	68f8      	ldr	r0, [r7, #12]
 8049bc2:	f000 fa69 	bl	804a098 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8049bc6:	693b      	ldr	r3, [r7, #16]
 8049bc8:	091b      	lsrs	r3, r3, #4
 8049bca:	f003 0301 	and.w	r3, r3, #1
 8049bce:	2b00      	cmp	r3, #0
 8049bd0:	d04d      	beq.n	8049c6e <I2C_Slave_ISR_IT+0xf4>
 8049bd2:	687b      	ldr	r3, [r7, #4]
 8049bd4:	091b      	lsrs	r3, r3, #4
 8049bd6:	f003 0301 	and.w	r3, r3, #1
 8049bda:	2b00      	cmp	r3, #0
 8049bdc:	d047      	beq.n	8049c6e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8049bde:	68fb      	ldr	r3, [r7, #12]
 8049be0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049be2:	b29b      	uxth	r3, r3
 8049be4:	2b00      	cmp	r3, #0
 8049be6:	d128      	bne.n	8049c3a <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8049be8:	68fb      	ldr	r3, [r7, #12]
 8049bea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049bee:	b2db      	uxtb	r3, r3
 8049bf0:	2b28      	cmp	r3, #40	; 0x28
 8049bf2:	d108      	bne.n	8049c06 <I2C_Slave_ISR_IT+0x8c>
 8049bf4:	697b      	ldr	r3, [r7, #20]
 8049bf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8049bfa:	d104      	bne.n	8049c06 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8049bfc:	6939      	ldr	r1, [r7, #16]
 8049bfe:	68f8      	ldr	r0, [r7, #12]
 8049c00:	f000 fb56 	bl	804a2b0 <I2C_ITListenCplt>
 8049c04:	e032      	b.n	8049c6c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8049c06:	68fb      	ldr	r3, [r7, #12]
 8049c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049c0c:	b2db      	uxtb	r3, r3
 8049c0e:	2b29      	cmp	r3, #41	; 0x29
 8049c10:	d10e      	bne.n	8049c30 <I2C_Slave_ISR_IT+0xb6>
 8049c12:	697b      	ldr	r3, [r7, #20]
 8049c14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8049c18:	d00a      	beq.n	8049c30 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8049c1a:	68fb      	ldr	r3, [r7, #12]
 8049c1c:	681b      	ldr	r3, [r3, #0]
 8049c1e:	2210      	movs	r2, #16
 8049c20:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8049c22:	68f8      	ldr	r0, [r7, #12]
 8049c24:	f000 fc93 	bl	804a54e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8049c28:	68f8      	ldr	r0, [r7, #12]
 8049c2a:	f000 f9d5 	bl	8049fd8 <I2C_ITSlaveSeqCplt>
 8049c2e:	e01d      	b.n	8049c6c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8049c30:	68fb      	ldr	r3, [r7, #12]
 8049c32:	681b      	ldr	r3, [r3, #0]
 8049c34:	2210      	movs	r2, #16
 8049c36:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8049c38:	e096      	b.n	8049d68 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8049c3a:	68fb      	ldr	r3, [r7, #12]
 8049c3c:	681b      	ldr	r3, [r3, #0]
 8049c3e:	2210      	movs	r2, #16
 8049c40:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8049c42:	68fb      	ldr	r3, [r7, #12]
 8049c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049c46:	f043 0204 	orr.w	r2, r3, #4
 8049c4a:	68fb      	ldr	r3, [r7, #12]
 8049c4c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8049c4e:	697b      	ldr	r3, [r7, #20]
 8049c50:	2b00      	cmp	r3, #0
 8049c52:	d004      	beq.n	8049c5e <I2C_Slave_ISR_IT+0xe4>
 8049c54:	697b      	ldr	r3, [r7, #20]
 8049c56:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8049c5a:	f040 8085 	bne.w	8049d68 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8049c5e:	68fb      	ldr	r3, [r7, #12]
 8049c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8049c62:	4619      	mov	r1, r3
 8049c64:	68f8      	ldr	r0, [r7, #12]
 8049c66:	f000 fb79 	bl	804a35c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8049c6a:	e07d      	b.n	8049d68 <I2C_Slave_ISR_IT+0x1ee>
 8049c6c:	e07c      	b.n	8049d68 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8049c6e:	693b      	ldr	r3, [r7, #16]
 8049c70:	089b      	lsrs	r3, r3, #2
 8049c72:	f003 0301 	and.w	r3, r3, #1
 8049c76:	2b00      	cmp	r3, #0
 8049c78:	d030      	beq.n	8049cdc <I2C_Slave_ISR_IT+0x162>
 8049c7a:	687b      	ldr	r3, [r7, #4]
 8049c7c:	089b      	lsrs	r3, r3, #2
 8049c7e:	f003 0301 	and.w	r3, r3, #1
 8049c82:	2b00      	cmp	r3, #0
 8049c84:	d02a      	beq.n	8049cdc <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8049c86:	68fb      	ldr	r3, [r7, #12]
 8049c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049c8a:	b29b      	uxth	r3, r3
 8049c8c:	2b00      	cmp	r3, #0
 8049c8e:	d018      	beq.n	8049cc2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8049c90:	68fb      	ldr	r3, [r7, #12]
 8049c92:	681b      	ldr	r3, [r3, #0]
 8049c94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8049c96:	68fb      	ldr	r3, [r7, #12]
 8049c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049c9a:	b2d2      	uxtb	r2, r2
 8049c9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8049c9e:	68fb      	ldr	r3, [r7, #12]
 8049ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049ca2:	1c5a      	adds	r2, r3, #1
 8049ca4:	68fb      	ldr	r3, [r7, #12]
 8049ca6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8049ca8:	68fb      	ldr	r3, [r7, #12]
 8049caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049cac:	3b01      	subs	r3, #1
 8049cae:	b29a      	uxth	r2, r3
 8049cb0:	68fb      	ldr	r3, [r7, #12]
 8049cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8049cb4:	68fb      	ldr	r3, [r7, #12]
 8049cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049cb8:	b29b      	uxth	r3, r3
 8049cba:	3b01      	subs	r3, #1
 8049cbc:	b29a      	uxth	r2, r3
 8049cbe:	68fb      	ldr	r3, [r7, #12]
 8049cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8049cc2:	68fb      	ldr	r3, [r7, #12]
 8049cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049cc6:	b29b      	uxth	r3, r3
 8049cc8:	2b00      	cmp	r3, #0
 8049cca:	d14f      	bne.n	8049d6c <I2C_Slave_ISR_IT+0x1f2>
 8049ccc:	697b      	ldr	r3, [r7, #20]
 8049cce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8049cd2:	d04b      	beq.n	8049d6c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8049cd4:	68f8      	ldr	r0, [r7, #12]
 8049cd6:	f000 f97f 	bl	8049fd8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8049cda:	e047      	b.n	8049d6c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8049cdc:	693b      	ldr	r3, [r7, #16]
 8049cde:	08db      	lsrs	r3, r3, #3
 8049ce0:	f003 0301 	and.w	r3, r3, #1
 8049ce4:	2b00      	cmp	r3, #0
 8049ce6:	d00a      	beq.n	8049cfe <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8049ce8:	687b      	ldr	r3, [r7, #4]
 8049cea:	08db      	lsrs	r3, r3, #3
 8049cec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8049cf0:	2b00      	cmp	r3, #0
 8049cf2:	d004      	beq.n	8049cfe <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8049cf4:	6939      	ldr	r1, [r7, #16]
 8049cf6:	68f8      	ldr	r0, [r7, #12]
 8049cf8:	f000 f8ea 	bl	8049ed0 <I2C_ITAddrCplt>
 8049cfc:	e037      	b.n	8049d6e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8049cfe:	693b      	ldr	r3, [r7, #16]
 8049d00:	085b      	lsrs	r3, r3, #1
 8049d02:	f003 0301 	and.w	r3, r3, #1
 8049d06:	2b00      	cmp	r3, #0
 8049d08:	d031      	beq.n	8049d6e <I2C_Slave_ISR_IT+0x1f4>
 8049d0a:	687b      	ldr	r3, [r7, #4]
 8049d0c:	085b      	lsrs	r3, r3, #1
 8049d0e:	f003 0301 	and.w	r3, r3, #1
 8049d12:	2b00      	cmp	r3, #0
 8049d14:	d02b      	beq.n	8049d6e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8049d16:	68fb      	ldr	r3, [r7, #12]
 8049d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049d1a:	b29b      	uxth	r3, r3
 8049d1c:	2b00      	cmp	r3, #0
 8049d1e:	d018      	beq.n	8049d52 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8049d20:	68fb      	ldr	r3, [r7, #12]
 8049d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049d24:	781a      	ldrb	r2, [r3, #0]
 8049d26:	68fb      	ldr	r3, [r7, #12]
 8049d28:	681b      	ldr	r3, [r3, #0]
 8049d2a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8049d2c:	68fb      	ldr	r3, [r7, #12]
 8049d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049d30:	1c5a      	adds	r2, r3, #1
 8049d32:	68fb      	ldr	r3, [r7, #12]
 8049d34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8049d36:	68fb      	ldr	r3, [r7, #12]
 8049d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8049d3a:	b29b      	uxth	r3, r3
 8049d3c:	3b01      	subs	r3, #1
 8049d3e:	b29a      	uxth	r2, r3
 8049d40:	68fb      	ldr	r3, [r7, #12]
 8049d42:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8049d44:	68fb      	ldr	r3, [r7, #12]
 8049d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8049d48:	3b01      	subs	r3, #1
 8049d4a:	b29a      	uxth	r2, r3
 8049d4c:	68fb      	ldr	r3, [r7, #12]
 8049d4e:	851a      	strh	r2, [r3, #40]	; 0x28
 8049d50:	e00d      	b.n	8049d6e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8049d52:	697b      	ldr	r3, [r7, #20]
 8049d54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8049d58:	d002      	beq.n	8049d60 <I2C_Slave_ISR_IT+0x1e6>
 8049d5a:	697b      	ldr	r3, [r7, #20]
 8049d5c:	2b00      	cmp	r3, #0
 8049d5e:	d106      	bne.n	8049d6e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8049d60:	68f8      	ldr	r0, [r7, #12]
 8049d62:	f000 f939 	bl	8049fd8 <I2C_ITSlaveSeqCplt>
 8049d66:	e002      	b.n	8049d6e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8049d68:	bf00      	nop
 8049d6a:	e000      	b.n	8049d6e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8049d6c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8049d6e:	68fb      	ldr	r3, [r7, #12]
 8049d70:	2200      	movs	r2, #0
 8049d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8049d76:	2300      	movs	r3, #0
}
 8049d78:	4618      	mov	r0, r3
 8049d7a:	3718      	adds	r7, #24
 8049d7c:	46bd      	mov	sp, r7
 8049d7e:	bd80      	pop	{r7, pc}

08049d80 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8049d80:	b580      	push	{r7, lr}
 8049d82:	b086      	sub	sp, #24
 8049d84:	af02      	add	r7, sp, #8
 8049d86:	60f8      	str	r0, [r7, #12]
 8049d88:	4608      	mov	r0, r1
 8049d8a:	4611      	mov	r1, r2
 8049d8c:	461a      	mov	r2, r3
 8049d8e:	4603      	mov	r3, r0
 8049d90:	817b      	strh	r3, [r7, #10]
 8049d92:	460b      	mov	r3, r1
 8049d94:	813b      	strh	r3, [r7, #8]
 8049d96:	4613      	mov	r3, r2
 8049d98:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8049d9a:	88fb      	ldrh	r3, [r7, #6]
 8049d9c:	b2da      	uxtb	r2, r3
 8049d9e:	8979      	ldrh	r1, [r7, #10]
 8049da0:	4b20      	ldr	r3, [pc, #128]	; (8049e24 <I2C_RequestMemoryWrite+0xa4>)
 8049da2:	9300      	str	r3, [sp, #0]
 8049da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8049da8:	68f8      	ldr	r0, [r7, #12]
 8049daa:	f000 fd35 	bl	804a818 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8049dae:	69fa      	ldr	r2, [r7, #28]
 8049db0:	69b9      	ldr	r1, [r7, #24]
 8049db2:	68f8      	ldr	r0, [r7, #12]
 8049db4:	f000 fc4d 	bl	804a652 <I2C_WaitOnTXISFlagUntilTimeout>
 8049db8:	4603      	mov	r3, r0
 8049dba:	2b00      	cmp	r3, #0
 8049dbc:	d001      	beq.n	8049dc2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8049dbe:	2301      	movs	r3, #1
 8049dc0:	e02c      	b.n	8049e1c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8049dc2:	88fb      	ldrh	r3, [r7, #6]
 8049dc4:	2b01      	cmp	r3, #1
 8049dc6:	d105      	bne.n	8049dd4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8049dc8:	893b      	ldrh	r3, [r7, #8]
 8049dca:	b2da      	uxtb	r2, r3
 8049dcc:	68fb      	ldr	r3, [r7, #12]
 8049dce:	681b      	ldr	r3, [r3, #0]
 8049dd0:	629a      	str	r2, [r3, #40]	; 0x28
 8049dd2:	e015      	b.n	8049e00 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8049dd4:	893b      	ldrh	r3, [r7, #8]
 8049dd6:	0a1b      	lsrs	r3, r3, #8
 8049dd8:	b29b      	uxth	r3, r3
 8049dda:	b2da      	uxtb	r2, r3
 8049ddc:	68fb      	ldr	r3, [r7, #12]
 8049dde:	681b      	ldr	r3, [r3, #0]
 8049de0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8049de2:	69fa      	ldr	r2, [r7, #28]
 8049de4:	69b9      	ldr	r1, [r7, #24]
 8049de6:	68f8      	ldr	r0, [r7, #12]
 8049de8:	f000 fc33 	bl	804a652 <I2C_WaitOnTXISFlagUntilTimeout>
 8049dec:	4603      	mov	r3, r0
 8049dee:	2b00      	cmp	r3, #0
 8049df0:	d001      	beq.n	8049df6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8049df2:	2301      	movs	r3, #1
 8049df4:	e012      	b.n	8049e1c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8049df6:	893b      	ldrh	r3, [r7, #8]
 8049df8:	b2da      	uxtb	r2, r3
 8049dfa:	68fb      	ldr	r3, [r7, #12]
 8049dfc:	681b      	ldr	r3, [r3, #0]
 8049dfe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8049e00:	69fb      	ldr	r3, [r7, #28]
 8049e02:	9300      	str	r3, [sp, #0]
 8049e04:	69bb      	ldr	r3, [r7, #24]
 8049e06:	2200      	movs	r2, #0
 8049e08:	2180      	movs	r1, #128	; 0x80
 8049e0a:	68f8      	ldr	r0, [r7, #12]
 8049e0c:	f000 fbe1 	bl	804a5d2 <I2C_WaitOnFlagUntilTimeout>
 8049e10:	4603      	mov	r3, r0
 8049e12:	2b00      	cmp	r3, #0
 8049e14:	d001      	beq.n	8049e1a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8049e16:	2301      	movs	r3, #1
 8049e18:	e000      	b.n	8049e1c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8049e1a:	2300      	movs	r3, #0
}
 8049e1c:	4618      	mov	r0, r3
 8049e1e:	3710      	adds	r7, #16
 8049e20:	46bd      	mov	sp, r7
 8049e22:	bd80      	pop	{r7, pc}
 8049e24:	80002000 	.word	0x80002000

08049e28 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8049e28:	b580      	push	{r7, lr}
 8049e2a:	b086      	sub	sp, #24
 8049e2c:	af02      	add	r7, sp, #8
 8049e2e:	60f8      	str	r0, [r7, #12]
 8049e30:	4608      	mov	r0, r1
 8049e32:	4611      	mov	r1, r2
 8049e34:	461a      	mov	r2, r3
 8049e36:	4603      	mov	r3, r0
 8049e38:	817b      	strh	r3, [r7, #10]
 8049e3a:	460b      	mov	r3, r1
 8049e3c:	813b      	strh	r3, [r7, #8]
 8049e3e:	4613      	mov	r3, r2
 8049e40:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8049e42:	88fb      	ldrh	r3, [r7, #6]
 8049e44:	b2da      	uxtb	r2, r3
 8049e46:	8979      	ldrh	r1, [r7, #10]
 8049e48:	4b20      	ldr	r3, [pc, #128]	; (8049ecc <I2C_RequestMemoryRead+0xa4>)
 8049e4a:	9300      	str	r3, [sp, #0]
 8049e4c:	2300      	movs	r3, #0
 8049e4e:	68f8      	ldr	r0, [r7, #12]
 8049e50:	f000 fce2 	bl	804a818 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8049e54:	69fa      	ldr	r2, [r7, #28]
 8049e56:	69b9      	ldr	r1, [r7, #24]
 8049e58:	68f8      	ldr	r0, [r7, #12]
 8049e5a:	f000 fbfa 	bl	804a652 <I2C_WaitOnTXISFlagUntilTimeout>
 8049e5e:	4603      	mov	r3, r0
 8049e60:	2b00      	cmp	r3, #0
 8049e62:	d001      	beq.n	8049e68 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8049e64:	2301      	movs	r3, #1
 8049e66:	e02c      	b.n	8049ec2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8049e68:	88fb      	ldrh	r3, [r7, #6]
 8049e6a:	2b01      	cmp	r3, #1
 8049e6c:	d105      	bne.n	8049e7a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8049e6e:	893b      	ldrh	r3, [r7, #8]
 8049e70:	b2da      	uxtb	r2, r3
 8049e72:	68fb      	ldr	r3, [r7, #12]
 8049e74:	681b      	ldr	r3, [r3, #0]
 8049e76:	629a      	str	r2, [r3, #40]	; 0x28
 8049e78:	e015      	b.n	8049ea6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8049e7a:	893b      	ldrh	r3, [r7, #8]
 8049e7c:	0a1b      	lsrs	r3, r3, #8
 8049e7e:	b29b      	uxth	r3, r3
 8049e80:	b2da      	uxtb	r2, r3
 8049e82:	68fb      	ldr	r3, [r7, #12]
 8049e84:	681b      	ldr	r3, [r3, #0]
 8049e86:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8049e88:	69fa      	ldr	r2, [r7, #28]
 8049e8a:	69b9      	ldr	r1, [r7, #24]
 8049e8c:	68f8      	ldr	r0, [r7, #12]
 8049e8e:	f000 fbe0 	bl	804a652 <I2C_WaitOnTXISFlagUntilTimeout>
 8049e92:	4603      	mov	r3, r0
 8049e94:	2b00      	cmp	r3, #0
 8049e96:	d001      	beq.n	8049e9c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8049e98:	2301      	movs	r3, #1
 8049e9a:	e012      	b.n	8049ec2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8049e9c:	893b      	ldrh	r3, [r7, #8]
 8049e9e:	b2da      	uxtb	r2, r3
 8049ea0:	68fb      	ldr	r3, [r7, #12]
 8049ea2:	681b      	ldr	r3, [r3, #0]
 8049ea4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8049ea6:	69fb      	ldr	r3, [r7, #28]
 8049ea8:	9300      	str	r3, [sp, #0]
 8049eaa:	69bb      	ldr	r3, [r7, #24]
 8049eac:	2200      	movs	r2, #0
 8049eae:	2140      	movs	r1, #64	; 0x40
 8049eb0:	68f8      	ldr	r0, [r7, #12]
 8049eb2:	f000 fb8e 	bl	804a5d2 <I2C_WaitOnFlagUntilTimeout>
 8049eb6:	4603      	mov	r3, r0
 8049eb8:	2b00      	cmp	r3, #0
 8049eba:	d001      	beq.n	8049ec0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8049ebc:	2301      	movs	r3, #1
 8049ebe:	e000      	b.n	8049ec2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8049ec0:	2300      	movs	r3, #0
}
 8049ec2:	4618      	mov	r0, r3
 8049ec4:	3710      	adds	r7, #16
 8049ec6:	46bd      	mov	sp, r7
 8049ec8:	bd80      	pop	{r7, pc}
 8049eca:	bf00      	nop
 8049ecc:	80002000 	.word	0x80002000

08049ed0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8049ed0:	b580      	push	{r7, lr}
 8049ed2:	b084      	sub	sp, #16
 8049ed4:	af00      	add	r7, sp, #0
 8049ed6:	6078      	str	r0, [r7, #4]
 8049ed8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8049eda:	687b      	ldr	r3, [r7, #4]
 8049edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8049ee0:	b2db      	uxtb	r3, r3
 8049ee2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8049ee6:	2b28      	cmp	r3, #40	; 0x28
 8049ee8:	d16a      	bne.n	8049fc0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8049eea:	687b      	ldr	r3, [r7, #4]
 8049eec:	681b      	ldr	r3, [r3, #0]
 8049eee:	699b      	ldr	r3, [r3, #24]
 8049ef0:	0c1b      	lsrs	r3, r3, #16
 8049ef2:	b2db      	uxtb	r3, r3
 8049ef4:	f003 0301 	and.w	r3, r3, #1
 8049ef8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8049efa:	687b      	ldr	r3, [r7, #4]
 8049efc:	681b      	ldr	r3, [r3, #0]
 8049efe:	699b      	ldr	r3, [r3, #24]
 8049f00:	0c1b      	lsrs	r3, r3, #16
 8049f02:	b29b      	uxth	r3, r3
 8049f04:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8049f08:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8049f0a:	687b      	ldr	r3, [r7, #4]
 8049f0c:	681b      	ldr	r3, [r3, #0]
 8049f0e:	689b      	ldr	r3, [r3, #8]
 8049f10:	b29b      	uxth	r3, r3
 8049f12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8049f16:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8049f18:	687b      	ldr	r3, [r7, #4]
 8049f1a:	681b      	ldr	r3, [r3, #0]
 8049f1c:	68db      	ldr	r3, [r3, #12]
 8049f1e:	b29b      	uxth	r3, r3
 8049f20:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8049f24:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8049f26:	687b      	ldr	r3, [r7, #4]
 8049f28:	68db      	ldr	r3, [r3, #12]
 8049f2a:	2b02      	cmp	r3, #2
 8049f2c:	d138      	bne.n	8049fa0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8049f2e:	897b      	ldrh	r3, [r7, #10]
 8049f30:	09db      	lsrs	r3, r3, #7
 8049f32:	b29a      	uxth	r2, r3
 8049f34:	89bb      	ldrh	r3, [r7, #12]
 8049f36:	4053      	eors	r3, r2
 8049f38:	b29b      	uxth	r3, r3
 8049f3a:	f003 0306 	and.w	r3, r3, #6
 8049f3e:	2b00      	cmp	r3, #0
 8049f40:	d11c      	bne.n	8049f7c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8049f42:	897b      	ldrh	r3, [r7, #10]
 8049f44:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8049f46:	687b      	ldr	r3, [r7, #4]
 8049f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8049f4a:	1c5a      	adds	r2, r3, #1
 8049f4c:	687b      	ldr	r3, [r7, #4]
 8049f4e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8049f50:	687b      	ldr	r3, [r7, #4]
 8049f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8049f54:	2b02      	cmp	r3, #2
 8049f56:	d13b      	bne.n	8049fd0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8049f58:	687b      	ldr	r3, [r7, #4]
 8049f5a:	2200      	movs	r2, #0
 8049f5c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8049f5e:	687b      	ldr	r3, [r7, #4]
 8049f60:	681b      	ldr	r3, [r3, #0]
 8049f62:	2208      	movs	r2, #8
 8049f64:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8049f66:	687b      	ldr	r3, [r7, #4]
 8049f68:	2200      	movs	r2, #0
 8049f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8049f6e:	687b      	ldr	r3, [r7, #4]
 8049f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8049f72:	89ba      	ldrh	r2, [r7, #12]
 8049f74:	7bf9      	ldrb	r1, [r7, #15]
 8049f76:	6878      	ldr	r0, [r7, #4]
 8049f78:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8049f7a:	e029      	b.n	8049fd0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8049f7c:	893b      	ldrh	r3, [r7, #8]
 8049f7e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8049f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8049f84:	6878      	ldr	r0, [r7, #4]
 8049f86:	f000 fc75 	bl	804a874 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8049f8a:	687b      	ldr	r3, [r7, #4]
 8049f8c:	2200      	movs	r2, #0
 8049f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8049f92:	687b      	ldr	r3, [r7, #4]
 8049f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8049f96:	89ba      	ldrh	r2, [r7, #12]
 8049f98:	7bf9      	ldrb	r1, [r7, #15]
 8049f9a:	6878      	ldr	r0, [r7, #4]
 8049f9c:	4798      	blx	r3
}
 8049f9e:	e017      	b.n	8049fd0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8049fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8049fa4:	6878      	ldr	r0, [r7, #4]
 8049fa6:	f000 fc65 	bl	804a874 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8049faa:	687b      	ldr	r3, [r7, #4]
 8049fac:	2200      	movs	r2, #0
 8049fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8049fb2:	687b      	ldr	r3, [r7, #4]
 8049fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8049fb6:	89ba      	ldrh	r2, [r7, #12]
 8049fb8:	7bf9      	ldrb	r1, [r7, #15]
 8049fba:	6878      	ldr	r0, [r7, #4]
 8049fbc:	4798      	blx	r3
}
 8049fbe:	e007      	b.n	8049fd0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8049fc0:	687b      	ldr	r3, [r7, #4]
 8049fc2:	681b      	ldr	r3, [r3, #0]
 8049fc4:	2208      	movs	r2, #8
 8049fc6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8049fc8:	687b      	ldr	r3, [r7, #4]
 8049fca:	2200      	movs	r2, #0
 8049fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8049fd0:	bf00      	nop
 8049fd2:	3710      	adds	r7, #16
 8049fd4:	46bd      	mov	sp, r7
 8049fd6:	bd80      	pop	{r7, pc}

08049fd8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8049fd8:	b580      	push	{r7, lr}
 8049fda:	b084      	sub	sp, #16
 8049fdc:	af00      	add	r7, sp, #0
 8049fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8049fe0:	687b      	ldr	r3, [r7, #4]
 8049fe2:	681b      	ldr	r3, [r3, #0]
 8049fe4:	681b      	ldr	r3, [r3, #0]
 8049fe6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8049fe8:	687b      	ldr	r3, [r7, #4]
 8049fea:	2200      	movs	r2, #0
 8049fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8049ff0:	68fb      	ldr	r3, [r7, #12]
 8049ff2:	0b9b      	lsrs	r3, r3, #14
 8049ff4:	f003 0301 	and.w	r3, r3, #1
 8049ff8:	2b00      	cmp	r3, #0
 8049ffa:	d008      	beq.n	804a00e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8049ffc:	687b      	ldr	r3, [r7, #4]
 8049ffe:	681b      	ldr	r3, [r3, #0]
 804a000:	681a      	ldr	r2, [r3, #0]
 804a002:	687b      	ldr	r3, [r7, #4]
 804a004:	681b      	ldr	r3, [r3, #0]
 804a006:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 804a00a:	601a      	str	r2, [r3, #0]
 804a00c:	e00d      	b.n	804a02a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 804a00e:	68fb      	ldr	r3, [r7, #12]
 804a010:	0bdb      	lsrs	r3, r3, #15
 804a012:	f003 0301 	and.w	r3, r3, #1
 804a016:	2b00      	cmp	r3, #0
 804a018:	d007      	beq.n	804a02a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 804a01a:	687b      	ldr	r3, [r7, #4]
 804a01c:	681b      	ldr	r3, [r3, #0]
 804a01e:	681a      	ldr	r2, [r3, #0]
 804a020:	687b      	ldr	r3, [r7, #4]
 804a022:	681b      	ldr	r3, [r3, #0]
 804a024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 804a028:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 804a02a:	687b      	ldr	r3, [r7, #4]
 804a02c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a030:	b2db      	uxtb	r3, r3
 804a032:	2b29      	cmp	r3, #41	; 0x29
 804a034:	d113      	bne.n	804a05e <I2C_ITSlaveSeqCplt+0x86>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 804a036:	687b      	ldr	r3, [r7, #4]
 804a038:	2228      	movs	r2, #40	; 0x28
 804a03a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 804a03e:	687b      	ldr	r3, [r7, #4]
 804a040:	2221      	movs	r2, #33	; 0x21
 804a042:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 804a044:	2101      	movs	r1, #1
 804a046:	6878      	ldr	r0, [r7, #4]
 804a048:	f000 fc14 	bl	804a874 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804a04c:	687b      	ldr	r3, [r7, #4]
 804a04e:	2200      	movs	r2, #0
 804a050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 804a054:	687b      	ldr	r3, [r7, #4]
 804a056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804a058:	6878      	ldr	r0, [r7, #4]
 804a05a:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 804a05c:	e018      	b.n	804a090 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 804a05e:	687b      	ldr	r3, [r7, #4]
 804a060:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a064:	b2db      	uxtb	r3, r3
 804a066:	2b2a      	cmp	r3, #42	; 0x2a
 804a068:	d112      	bne.n	804a090 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 804a06a:	687b      	ldr	r3, [r7, #4]
 804a06c:	2228      	movs	r2, #40	; 0x28
 804a06e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 804a072:	687b      	ldr	r3, [r7, #4]
 804a074:	2222      	movs	r2, #34	; 0x22
 804a076:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 804a078:	2102      	movs	r1, #2
 804a07a:	6878      	ldr	r0, [r7, #4]
 804a07c:	f000 fbfa 	bl	804a874 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 804a080:	687b      	ldr	r3, [r7, #4]
 804a082:	2200      	movs	r2, #0
 804a084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 804a088:	687b      	ldr	r3, [r7, #4]
 804a08a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804a08c:	6878      	ldr	r0, [r7, #4]
 804a08e:	4798      	blx	r3
}
 804a090:	bf00      	nop
 804a092:	3710      	adds	r7, #16
 804a094:	46bd      	mov	sp, r7
 804a096:	bd80      	pop	{r7, pc}

0804a098 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 804a098:	b580      	push	{r7, lr}
 804a09a:	b086      	sub	sp, #24
 804a09c:	af00      	add	r7, sp, #0
 804a09e:	6078      	str	r0, [r7, #4]
 804a0a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 804a0a2:	687b      	ldr	r3, [r7, #4]
 804a0a4:	681b      	ldr	r3, [r3, #0]
 804a0a6:	681b      	ldr	r3, [r3, #0]
 804a0a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 804a0aa:	683b      	ldr	r3, [r7, #0]
 804a0ac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 804a0ae:	687b      	ldr	r3, [r7, #4]
 804a0b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a0b4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 804a0b6:	687b      	ldr	r3, [r7, #4]
 804a0b8:	681b      	ldr	r3, [r3, #0]
 804a0ba:	2220      	movs	r2, #32
 804a0bc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 804a0be:	7bfb      	ldrb	r3, [r7, #15]
 804a0c0:	2b21      	cmp	r3, #33	; 0x21
 804a0c2:	d002      	beq.n	804a0ca <I2C_ITSlaveCplt+0x32>
 804a0c4:	7bfb      	ldrb	r3, [r7, #15]
 804a0c6:	2b29      	cmp	r3, #41	; 0x29
 804a0c8:	d108      	bne.n	804a0dc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 804a0ca:	f248 0101 	movw	r1, #32769	; 0x8001
 804a0ce:	6878      	ldr	r0, [r7, #4]
 804a0d0:	f000 fbd0 	bl	804a874 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 804a0d4:	687b      	ldr	r3, [r7, #4]
 804a0d6:	2221      	movs	r2, #33	; 0x21
 804a0d8:	631a      	str	r2, [r3, #48]	; 0x30
 804a0da:	e00d      	b.n	804a0f8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 804a0dc:	7bfb      	ldrb	r3, [r7, #15]
 804a0de:	2b22      	cmp	r3, #34	; 0x22
 804a0e0:	d002      	beq.n	804a0e8 <I2C_ITSlaveCplt+0x50>
 804a0e2:	7bfb      	ldrb	r3, [r7, #15]
 804a0e4:	2b2a      	cmp	r3, #42	; 0x2a
 804a0e6:	d107      	bne.n	804a0f8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 804a0e8:	f248 0102 	movw	r1, #32770	; 0x8002
 804a0ec:	6878      	ldr	r0, [r7, #4]
 804a0ee:	f000 fbc1 	bl	804a874 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 804a0f2:	687b      	ldr	r3, [r7, #4]
 804a0f4:	2222      	movs	r2, #34	; 0x22
 804a0f6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 804a0f8:	687b      	ldr	r3, [r7, #4]
 804a0fa:	681b      	ldr	r3, [r3, #0]
 804a0fc:	685a      	ldr	r2, [r3, #4]
 804a0fe:	687b      	ldr	r3, [r7, #4]
 804a100:	681b      	ldr	r3, [r3, #0]
 804a102:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 804a106:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 804a108:	687b      	ldr	r3, [r7, #4]
 804a10a:	681b      	ldr	r3, [r3, #0]
 804a10c:	6859      	ldr	r1, [r3, #4]
 804a10e:	687b      	ldr	r3, [r7, #4]
 804a110:	681a      	ldr	r2, [r3, #0]
 804a112:	4b65      	ldr	r3, [pc, #404]	; (804a2a8 <I2C_ITSlaveCplt+0x210>)
 804a114:	400b      	ands	r3, r1
 804a116:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 804a118:	6878      	ldr	r0, [r7, #4]
 804a11a:	f000 fa18 	bl	804a54e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 804a11e:	693b      	ldr	r3, [r7, #16]
 804a120:	0b9b      	lsrs	r3, r3, #14
 804a122:	f003 0301 	and.w	r3, r3, #1
 804a126:	2b00      	cmp	r3, #0
 804a128:	d013      	beq.n	804a152 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 804a12a:	687b      	ldr	r3, [r7, #4]
 804a12c:	681b      	ldr	r3, [r3, #0]
 804a12e:	681a      	ldr	r2, [r3, #0]
 804a130:	687b      	ldr	r3, [r7, #4]
 804a132:	681b      	ldr	r3, [r3, #0]
 804a134:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 804a138:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 804a13a:	687b      	ldr	r3, [r7, #4]
 804a13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a13e:	2b00      	cmp	r3, #0
 804a140:	d020      	beq.n	804a184 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 804a142:	687b      	ldr	r3, [r7, #4]
 804a144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a146:	681b      	ldr	r3, [r3, #0]
 804a148:	685b      	ldr	r3, [r3, #4]
 804a14a:	b29a      	uxth	r2, r3
 804a14c:	687b      	ldr	r3, [r7, #4]
 804a14e:	855a      	strh	r2, [r3, #42]	; 0x2a
 804a150:	e018      	b.n	804a184 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 804a152:	693b      	ldr	r3, [r7, #16]
 804a154:	0bdb      	lsrs	r3, r3, #15
 804a156:	f003 0301 	and.w	r3, r3, #1
 804a15a:	2b00      	cmp	r3, #0
 804a15c:	d012      	beq.n	804a184 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 804a15e:	687b      	ldr	r3, [r7, #4]
 804a160:	681b      	ldr	r3, [r3, #0]
 804a162:	681a      	ldr	r2, [r3, #0]
 804a164:	687b      	ldr	r3, [r7, #4]
 804a166:	681b      	ldr	r3, [r3, #0]
 804a168:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 804a16c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 804a16e:	687b      	ldr	r3, [r7, #4]
 804a170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a172:	2b00      	cmp	r3, #0
 804a174:	d006      	beq.n	804a184 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 804a176:	687b      	ldr	r3, [r7, #4]
 804a178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a17a:	681b      	ldr	r3, [r3, #0]
 804a17c:	685b      	ldr	r3, [r3, #4]
 804a17e:	b29a      	uxth	r2, r3
 804a180:	687b      	ldr	r3, [r7, #4]
 804a182:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 804a184:	697b      	ldr	r3, [r7, #20]
 804a186:	089b      	lsrs	r3, r3, #2
 804a188:	f003 0301 	and.w	r3, r3, #1
 804a18c:	2b00      	cmp	r3, #0
 804a18e:	d020      	beq.n	804a1d2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 804a190:	697b      	ldr	r3, [r7, #20]
 804a192:	f023 0304 	bic.w	r3, r3, #4
 804a196:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 804a198:	687b      	ldr	r3, [r7, #4]
 804a19a:	681b      	ldr	r3, [r3, #0]
 804a19c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804a19e:	687b      	ldr	r3, [r7, #4]
 804a1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a1a2:	b2d2      	uxtb	r2, r2
 804a1a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 804a1a6:	687b      	ldr	r3, [r7, #4]
 804a1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a1aa:	1c5a      	adds	r2, r3, #1
 804a1ac:	687b      	ldr	r3, [r7, #4]
 804a1ae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 804a1b0:	687b      	ldr	r3, [r7, #4]
 804a1b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804a1b4:	2b00      	cmp	r3, #0
 804a1b6:	d00c      	beq.n	804a1d2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 804a1b8:	687b      	ldr	r3, [r7, #4]
 804a1ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804a1bc:	3b01      	subs	r3, #1
 804a1be:	b29a      	uxth	r2, r3
 804a1c0:	687b      	ldr	r3, [r7, #4]
 804a1c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 804a1c4:	687b      	ldr	r3, [r7, #4]
 804a1c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804a1c8:	b29b      	uxth	r3, r3
 804a1ca:	3b01      	subs	r3, #1
 804a1cc:	b29a      	uxth	r2, r3
 804a1ce:	687b      	ldr	r3, [r7, #4]
 804a1d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 804a1d2:	687b      	ldr	r3, [r7, #4]
 804a1d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804a1d6:	b29b      	uxth	r3, r3
 804a1d8:	2b00      	cmp	r3, #0
 804a1da:	d005      	beq.n	804a1e8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 804a1dc:	687b      	ldr	r3, [r7, #4]
 804a1de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a1e0:	f043 0204 	orr.w	r2, r3, #4
 804a1e4:	687b      	ldr	r3, [r7, #4]
 804a1e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 804a1e8:	687b      	ldr	r3, [r7, #4]
 804a1ea:	2200      	movs	r2, #0
 804a1ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 804a1f0:	687b      	ldr	r3, [r7, #4]
 804a1f2:	2200      	movs	r2, #0
 804a1f4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 804a1f6:	687b      	ldr	r3, [r7, #4]
 804a1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a1fa:	2b00      	cmp	r3, #0
 804a1fc:	d010      	beq.n	804a220 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 804a1fe:	687b      	ldr	r3, [r7, #4]
 804a200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a202:	4619      	mov	r1, r3
 804a204:	6878      	ldr	r0, [r7, #4]
 804a206:	f000 f8a9 	bl	804a35c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 804a20a:	687b      	ldr	r3, [r7, #4]
 804a20c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a210:	b2db      	uxtb	r3, r3
 804a212:	2b28      	cmp	r3, #40	; 0x28
 804a214:	d144      	bne.n	804a2a0 <I2C_ITSlaveCplt+0x208>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 804a216:	6979      	ldr	r1, [r7, #20]
 804a218:	6878      	ldr	r0, [r7, #4]
 804a21a:	f000 f849 	bl	804a2b0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 804a21e:	e03f      	b.n	804a2a0 <I2C_ITSlaveCplt+0x208>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 804a220:	687b      	ldr	r3, [r7, #4]
 804a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804a224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 804a228:	d015      	beq.n	804a256 <I2C_ITSlaveCplt+0x1be>
    I2C_ITSlaveSeqCplt(hi2c);
 804a22a:	6878      	ldr	r0, [r7, #4]
 804a22c:	f7ff fed4 	bl	8049fd8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 804a230:	687b      	ldr	r3, [r7, #4]
 804a232:	4a1e      	ldr	r2, [pc, #120]	; (804a2ac <I2C_ITSlaveCplt+0x214>)
 804a234:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 804a236:	687b      	ldr	r3, [r7, #4]
 804a238:	2220      	movs	r2, #32
 804a23a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 804a23e:	687b      	ldr	r3, [r7, #4]
 804a240:	2200      	movs	r2, #0
 804a242:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 804a244:	687b      	ldr	r3, [r7, #4]
 804a246:	2200      	movs	r2, #0
 804a248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 804a24c:	687b      	ldr	r3, [r7, #4]
 804a24e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804a250:	6878      	ldr	r0, [r7, #4]
 804a252:	4798      	blx	r3
}
 804a254:	e024      	b.n	804a2a0 <I2C_ITSlaveCplt+0x208>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 804a256:	687b      	ldr	r3, [r7, #4]
 804a258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a25c:	b2db      	uxtb	r3, r3
 804a25e:	2b22      	cmp	r3, #34	; 0x22
 804a260:	d10f      	bne.n	804a282 <I2C_ITSlaveCplt+0x1ea>
    hi2c->State = HAL_I2C_STATE_READY;
 804a262:	687b      	ldr	r3, [r7, #4]
 804a264:	2220      	movs	r2, #32
 804a266:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 804a26a:	687b      	ldr	r3, [r7, #4]
 804a26c:	2200      	movs	r2, #0
 804a26e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 804a270:	687b      	ldr	r3, [r7, #4]
 804a272:	2200      	movs	r2, #0
 804a274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 804a278:	687b      	ldr	r3, [r7, #4]
 804a27a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804a27c:	6878      	ldr	r0, [r7, #4]
 804a27e:	4798      	blx	r3
}
 804a280:	e00e      	b.n	804a2a0 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 804a282:	687b      	ldr	r3, [r7, #4]
 804a284:	2220      	movs	r2, #32
 804a286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 804a28a:	687b      	ldr	r3, [r7, #4]
 804a28c:	2200      	movs	r2, #0
 804a28e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 804a290:	687b      	ldr	r3, [r7, #4]
 804a292:	2200      	movs	r2, #0
 804a294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 804a298:	687b      	ldr	r3, [r7, #4]
 804a29a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804a29c:	6878      	ldr	r0, [r7, #4]
 804a29e:	4798      	blx	r3
}
 804a2a0:	bf00      	nop
 804a2a2:	3718      	adds	r7, #24
 804a2a4:	46bd      	mov	sp, r7
 804a2a6:	bd80      	pop	{r7, pc}
 804a2a8:	fe00e800 	.word	0xfe00e800
 804a2ac:	ffff0000 	.word	0xffff0000

0804a2b0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 804a2b0:	b580      	push	{r7, lr}
 804a2b2:	b082      	sub	sp, #8
 804a2b4:	af00      	add	r7, sp, #0
 804a2b6:	6078      	str	r0, [r7, #4]
 804a2b8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 804a2ba:	687b      	ldr	r3, [r7, #4]
 804a2bc:	4a26      	ldr	r2, [pc, #152]	; (804a358 <I2C_ITListenCplt+0xa8>)
 804a2be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 804a2c0:	687b      	ldr	r3, [r7, #4]
 804a2c2:	2200      	movs	r2, #0
 804a2c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 804a2c6:	687b      	ldr	r3, [r7, #4]
 804a2c8:	2220      	movs	r2, #32
 804a2ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 804a2ce:	687b      	ldr	r3, [r7, #4]
 804a2d0:	2200      	movs	r2, #0
 804a2d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 804a2d6:	687b      	ldr	r3, [r7, #4]
 804a2d8:	2200      	movs	r2, #0
 804a2da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 804a2dc:	683b      	ldr	r3, [r7, #0]
 804a2de:	089b      	lsrs	r3, r3, #2
 804a2e0:	f003 0301 	and.w	r3, r3, #1
 804a2e4:	2b00      	cmp	r3, #0
 804a2e6:	d022      	beq.n	804a32e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 804a2e8:	687b      	ldr	r3, [r7, #4]
 804a2ea:	681b      	ldr	r3, [r3, #0]
 804a2ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804a2ee:	687b      	ldr	r3, [r7, #4]
 804a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a2f2:	b2d2      	uxtb	r2, r2
 804a2f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 804a2f6:	687b      	ldr	r3, [r7, #4]
 804a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804a2fa:	1c5a      	adds	r2, r3, #1
 804a2fc:	687b      	ldr	r3, [r7, #4]
 804a2fe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 804a300:	687b      	ldr	r3, [r7, #4]
 804a302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804a304:	2b00      	cmp	r3, #0
 804a306:	d012      	beq.n	804a32e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 804a308:	687b      	ldr	r3, [r7, #4]
 804a30a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804a30c:	3b01      	subs	r3, #1
 804a30e:	b29a      	uxth	r2, r3
 804a310:	687b      	ldr	r3, [r7, #4]
 804a312:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 804a314:	687b      	ldr	r3, [r7, #4]
 804a316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804a318:	b29b      	uxth	r3, r3
 804a31a:	3b01      	subs	r3, #1
 804a31c:	b29a      	uxth	r2, r3
 804a31e:	687b      	ldr	r3, [r7, #4]
 804a320:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 804a322:	687b      	ldr	r3, [r7, #4]
 804a324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a326:	f043 0204 	orr.w	r2, r3, #4
 804a32a:	687b      	ldr	r3, [r7, #4]
 804a32c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 804a32e:	f248 0103 	movw	r1, #32771	; 0x8003
 804a332:	6878      	ldr	r0, [r7, #4]
 804a334:	f000 fa9e 	bl	804a874 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 804a338:	687b      	ldr	r3, [r7, #4]
 804a33a:	681b      	ldr	r3, [r3, #0]
 804a33c:	2210      	movs	r2, #16
 804a33e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 804a340:	687b      	ldr	r3, [r7, #4]
 804a342:	2200      	movs	r2, #0
 804a344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 804a348:	687b      	ldr	r3, [r7, #4]
 804a34a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804a34c:	6878      	ldr	r0, [r7, #4]
 804a34e:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 804a350:	bf00      	nop
 804a352:	3708      	adds	r7, #8
 804a354:	46bd      	mov	sp, r7
 804a356:	bd80      	pop	{r7, pc}
 804a358:	ffff0000 	.word	0xffff0000

0804a35c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 804a35c:	b580      	push	{r7, lr}
 804a35e:	b084      	sub	sp, #16
 804a360:	af00      	add	r7, sp, #0
 804a362:	6078      	str	r0, [r7, #4]
 804a364:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 804a366:	687b      	ldr	r3, [r7, #4]
 804a368:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a36c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 804a36e:	687b      	ldr	r3, [r7, #4]
 804a370:	2200      	movs	r2, #0
 804a372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 804a376:	687b      	ldr	r3, [r7, #4]
 804a378:	4a5d      	ldr	r2, [pc, #372]	; (804a4f0 <I2C_ITError+0x194>)
 804a37a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 804a37c:	687b      	ldr	r3, [r7, #4]
 804a37e:	2200      	movs	r2, #0
 804a380:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 804a382:	687b      	ldr	r3, [r7, #4]
 804a384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804a386:	683b      	ldr	r3, [r7, #0]
 804a388:	431a      	orrs	r2, r3
 804a38a:	687b      	ldr	r3, [r7, #4]
 804a38c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 804a38e:	7bfb      	ldrb	r3, [r7, #15]
 804a390:	2b28      	cmp	r3, #40	; 0x28
 804a392:	d005      	beq.n	804a3a0 <I2C_ITError+0x44>
 804a394:	7bfb      	ldrb	r3, [r7, #15]
 804a396:	2b29      	cmp	r3, #41	; 0x29
 804a398:	d002      	beq.n	804a3a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 804a39a:	7bfb      	ldrb	r3, [r7, #15]
 804a39c:	2b2a      	cmp	r3, #42	; 0x2a
 804a39e:	d10b      	bne.n	804a3b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 804a3a0:	2103      	movs	r1, #3
 804a3a2:	6878      	ldr	r0, [r7, #4]
 804a3a4:	f000 fa66 	bl	804a874 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 804a3a8:	687b      	ldr	r3, [r7, #4]
 804a3aa:	2228      	movs	r2, #40	; 0x28
 804a3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 804a3b0:	687b      	ldr	r3, [r7, #4]
 804a3b2:	4a50      	ldr	r2, [pc, #320]	; (804a4f4 <I2C_ITError+0x198>)
 804a3b4:	635a      	str	r2, [r3, #52]	; 0x34
 804a3b6:	e011      	b.n	804a3dc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 804a3b8:	f248 0103 	movw	r1, #32771	; 0x8003
 804a3bc:	6878      	ldr	r0, [r7, #4]
 804a3be:	f000 fa59 	bl	804a874 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 804a3c2:	687b      	ldr	r3, [r7, #4]
 804a3c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a3c8:	b2db      	uxtb	r3, r3
 804a3ca:	2b60      	cmp	r3, #96	; 0x60
 804a3cc:	d003      	beq.n	804a3d6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 804a3ce:	687b      	ldr	r3, [r7, #4]
 804a3d0:	2220      	movs	r2, #32
 804a3d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 804a3d6:	687b      	ldr	r3, [r7, #4]
 804a3d8:	2200      	movs	r2, #0
 804a3da:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 804a3dc:	687b      	ldr	r3, [r7, #4]
 804a3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804a3e0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 804a3e2:	687b      	ldr	r3, [r7, #4]
 804a3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a3e6:	2b00      	cmp	r3, #0
 804a3e8:	d039      	beq.n	804a45e <I2C_ITError+0x102>
 804a3ea:	68bb      	ldr	r3, [r7, #8]
 804a3ec:	2b11      	cmp	r3, #17
 804a3ee:	d002      	beq.n	804a3f6 <I2C_ITError+0x9a>
 804a3f0:	68bb      	ldr	r3, [r7, #8]
 804a3f2:	2b21      	cmp	r3, #33	; 0x21
 804a3f4:	d133      	bne.n	804a45e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 804a3f6:	687b      	ldr	r3, [r7, #4]
 804a3f8:	681b      	ldr	r3, [r3, #0]
 804a3fa:	681b      	ldr	r3, [r3, #0]
 804a3fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804a400:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804a404:	d107      	bne.n	804a416 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 804a406:	687b      	ldr	r3, [r7, #4]
 804a408:	681b      	ldr	r3, [r3, #0]
 804a40a:	681a      	ldr	r2, [r3, #0]
 804a40c:	687b      	ldr	r3, [r7, #4]
 804a40e:	681b      	ldr	r3, [r3, #0]
 804a410:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 804a414:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 804a416:	687b      	ldr	r3, [r7, #4]
 804a418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a41a:	4618      	mov	r0, r3
 804a41c:	f7fe fb93 	bl	8048b46 <HAL_DMA_GetState>
 804a420:	4603      	mov	r3, r0
 804a422:	2b01      	cmp	r3, #1
 804a424:	d017      	beq.n	804a456 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 804a426:	687b      	ldr	r3, [r7, #4]
 804a428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a42a:	4a33      	ldr	r2, [pc, #204]	; (804a4f8 <I2C_ITError+0x19c>)
 804a42c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 804a42e:	687b      	ldr	r3, [r7, #4]
 804a430:	2200      	movs	r2, #0
 804a432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 804a436:	687b      	ldr	r3, [r7, #4]
 804a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a43a:	4618      	mov	r0, r3
 804a43c:	f7fe fa24 	bl	8048888 <HAL_DMA_Abort_IT>
 804a440:	4603      	mov	r3, r0
 804a442:	2b00      	cmp	r3, #0
 804a444:	d04d      	beq.n	804a4e2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 804a446:	687b      	ldr	r3, [r7, #4]
 804a448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804a44c:	687a      	ldr	r2, [r7, #4]
 804a44e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 804a450:	4610      	mov	r0, r2
 804a452:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 804a454:	e045      	b.n	804a4e2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 804a456:	6878      	ldr	r0, [r7, #4]
 804a458:	f000 f850 	bl	804a4fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 804a45c:	e041      	b.n	804a4e2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 804a45e:	687b      	ldr	r3, [r7, #4]
 804a460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a462:	2b00      	cmp	r3, #0
 804a464:	d039      	beq.n	804a4da <I2C_ITError+0x17e>
 804a466:	68bb      	ldr	r3, [r7, #8]
 804a468:	2b12      	cmp	r3, #18
 804a46a:	d002      	beq.n	804a472 <I2C_ITError+0x116>
 804a46c:	68bb      	ldr	r3, [r7, #8]
 804a46e:	2b22      	cmp	r3, #34	; 0x22
 804a470:	d133      	bne.n	804a4da <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 804a472:	687b      	ldr	r3, [r7, #4]
 804a474:	681b      	ldr	r3, [r3, #0]
 804a476:	681b      	ldr	r3, [r3, #0]
 804a478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804a47c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804a480:	d107      	bne.n	804a492 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 804a482:	687b      	ldr	r3, [r7, #4]
 804a484:	681b      	ldr	r3, [r3, #0]
 804a486:	681a      	ldr	r2, [r3, #0]
 804a488:	687b      	ldr	r3, [r7, #4]
 804a48a:	681b      	ldr	r3, [r3, #0]
 804a48c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 804a490:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 804a492:	687b      	ldr	r3, [r7, #4]
 804a494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a496:	4618      	mov	r0, r3
 804a498:	f7fe fb55 	bl	8048b46 <HAL_DMA_GetState>
 804a49c:	4603      	mov	r3, r0
 804a49e:	2b01      	cmp	r3, #1
 804a4a0:	d017      	beq.n	804a4d2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 804a4a2:	687b      	ldr	r3, [r7, #4]
 804a4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a4a6:	4a14      	ldr	r2, [pc, #80]	; (804a4f8 <I2C_ITError+0x19c>)
 804a4a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 804a4aa:	687b      	ldr	r3, [r7, #4]
 804a4ac:	2200      	movs	r2, #0
 804a4ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 804a4b2:	687b      	ldr	r3, [r7, #4]
 804a4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a4b6:	4618      	mov	r0, r3
 804a4b8:	f7fe f9e6 	bl	8048888 <HAL_DMA_Abort_IT>
 804a4bc:	4603      	mov	r3, r0
 804a4be:	2b00      	cmp	r3, #0
 804a4c0:	d011      	beq.n	804a4e6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 804a4c2:	687b      	ldr	r3, [r7, #4]
 804a4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804a4c8:	687a      	ldr	r2, [r7, #4]
 804a4ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 804a4cc:	4610      	mov	r0, r2
 804a4ce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 804a4d0:	e009      	b.n	804a4e6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 804a4d2:	6878      	ldr	r0, [r7, #4]
 804a4d4:	f000 f812 	bl	804a4fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 804a4d8:	e005      	b.n	804a4e6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 804a4da:	6878      	ldr	r0, [r7, #4]
 804a4dc:	f000 f80e 	bl	804a4fc <I2C_TreatErrorCallback>
  }
}
 804a4e0:	e002      	b.n	804a4e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 804a4e2:	bf00      	nop
 804a4e4:	e000      	b.n	804a4e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 804a4e6:	bf00      	nop
}
 804a4e8:	bf00      	nop
 804a4ea:	3710      	adds	r7, #16
 804a4ec:	46bd      	mov	sp, r7
 804a4ee:	bd80      	pop	{r7, pc}
 804a4f0:	ffff0000 	.word	0xffff0000
 804a4f4:	08049b7b 	.word	0x08049b7b
 804a4f8:	0804a597 	.word	0x0804a597

0804a4fc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 804a4fc:	b580      	push	{r7, lr}
 804a4fe:	b082      	sub	sp, #8
 804a500:	af00      	add	r7, sp, #0
 804a502:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 804a504:	687b      	ldr	r3, [r7, #4]
 804a506:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a50a:	b2db      	uxtb	r3, r3
 804a50c:	2b60      	cmp	r3, #96	; 0x60
 804a50e:	d10f      	bne.n	804a530 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 804a510:	687b      	ldr	r3, [r7, #4]
 804a512:	2220      	movs	r2, #32
 804a514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 804a518:	687b      	ldr	r3, [r7, #4]
 804a51a:	2200      	movs	r2, #0
 804a51c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804a51e:	687b      	ldr	r3, [r7, #4]
 804a520:	2200      	movs	r2, #0
 804a522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 804a526:	687b      	ldr	r3, [r7, #4]
 804a528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804a52a:	6878      	ldr	r0, [r7, #4]
 804a52c:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 804a52e:	e00a      	b.n	804a546 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 804a530:	687b      	ldr	r3, [r7, #4]
 804a532:	2200      	movs	r2, #0
 804a534:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 804a536:	687b      	ldr	r3, [r7, #4]
 804a538:	2200      	movs	r2, #0
 804a53a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 804a53e:	687b      	ldr	r3, [r7, #4]
 804a540:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 804a542:	6878      	ldr	r0, [r7, #4]
 804a544:	4798      	blx	r3
}
 804a546:	bf00      	nop
 804a548:	3708      	adds	r7, #8
 804a54a:	46bd      	mov	sp, r7
 804a54c:	bd80      	pop	{r7, pc}

0804a54e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 804a54e:	b480      	push	{r7}
 804a550:	b083      	sub	sp, #12
 804a552:	af00      	add	r7, sp, #0
 804a554:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 804a556:	687b      	ldr	r3, [r7, #4]
 804a558:	681b      	ldr	r3, [r3, #0]
 804a55a:	699b      	ldr	r3, [r3, #24]
 804a55c:	f003 0302 	and.w	r3, r3, #2
 804a560:	2b02      	cmp	r3, #2
 804a562:	d103      	bne.n	804a56c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 804a564:	687b      	ldr	r3, [r7, #4]
 804a566:	681b      	ldr	r3, [r3, #0]
 804a568:	2200      	movs	r2, #0
 804a56a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 804a56c:	687b      	ldr	r3, [r7, #4]
 804a56e:	681b      	ldr	r3, [r3, #0]
 804a570:	699b      	ldr	r3, [r3, #24]
 804a572:	f003 0301 	and.w	r3, r3, #1
 804a576:	2b01      	cmp	r3, #1
 804a578:	d007      	beq.n	804a58a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 804a57a:	687b      	ldr	r3, [r7, #4]
 804a57c:	681b      	ldr	r3, [r3, #0]
 804a57e:	699a      	ldr	r2, [r3, #24]
 804a580:	687b      	ldr	r3, [r7, #4]
 804a582:	681b      	ldr	r3, [r3, #0]
 804a584:	f042 0201 	orr.w	r2, r2, #1
 804a588:	619a      	str	r2, [r3, #24]
  }
}
 804a58a:	bf00      	nop
 804a58c:	370c      	adds	r7, #12
 804a58e:	46bd      	mov	sp, r7
 804a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a594:	4770      	bx	lr

0804a596 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 804a596:	b580      	push	{r7, lr}
 804a598:	b084      	sub	sp, #16
 804a59a:	af00      	add	r7, sp, #0
 804a59c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 804a59e:	687b      	ldr	r3, [r7, #4]
 804a5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804a5a2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 804a5a4:	68fb      	ldr	r3, [r7, #12]
 804a5a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a5a8:	2b00      	cmp	r3, #0
 804a5aa:	d003      	beq.n	804a5b4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 804a5ac:	68fb      	ldr	r3, [r7, #12]
 804a5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804a5b0:	2200      	movs	r2, #0
 804a5b2:	641a      	str	r2, [r3, #64]	; 0x40
  }
  if (hi2c->hdmarx != NULL)
 804a5b4:	68fb      	ldr	r3, [r7, #12]
 804a5b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a5b8:	2b00      	cmp	r3, #0
 804a5ba:	d003      	beq.n	804a5c4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 804a5bc:	68fb      	ldr	r3, [r7, #12]
 804a5be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804a5c0:	2200      	movs	r2, #0
 804a5c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  I2C_TreatErrorCallback(hi2c);
 804a5c4:	68f8      	ldr	r0, [r7, #12]
 804a5c6:	f7ff ff99 	bl	804a4fc <I2C_TreatErrorCallback>
}
 804a5ca:	bf00      	nop
 804a5cc:	3710      	adds	r7, #16
 804a5ce:	46bd      	mov	sp, r7
 804a5d0:	bd80      	pop	{r7, pc}

0804a5d2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 804a5d2:	b580      	push	{r7, lr}
 804a5d4:	b084      	sub	sp, #16
 804a5d6:	af00      	add	r7, sp, #0
 804a5d8:	60f8      	str	r0, [r7, #12]
 804a5da:	60b9      	str	r1, [r7, #8]
 804a5dc:	603b      	str	r3, [r7, #0]
 804a5de:	4613      	mov	r3, r2
 804a5e0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 804a5e2:	e022      	b.n	804a62a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804a5e4:	683b      	ldr	r3, [r7, #0]
 804a5e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 804a5ea:	d01e      	beq.n	804a62a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804a5ec:	f7fc f88c 	bl	8046708 <HAL_GetTick>
 804a5f0:	4602      	mov	r2, r0
 804a5f2:	69bb      	ldr	r3, [r7, #24]
 804a5f4:	1ad3      	subs	r3, r2, r3
 804a5f6:	683a      	ldr	r2, [r7, #0]
 804a5f8:	429a      	cmp	r2, r3
 804a5fa:	d302      	bcc.n	804a602 <I2C_WaitOnFlagUntilTimeout+0x30>
 804a5fc:	683b      	ldr	r3, [r7, #0]
 804a5fe:	2b00      	cmp	r3, #0
 804a600:	d113      	bne.n	804a62a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 804a602:	68fb      	ldr	r3, [r7, #12]
 804a604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a606:	f043 0220 	orr.w	r2, r3, #32
 804a60a:	68fb      	ldr	r3, [r7, #12]
 804a60c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 804a60e:	68fb      	ldr	r3, [r7, #12]
 804a610:	2220      	movs	r2, #32
 804a612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 804a616:	68fb      	ldr	r3, [r7, #12]
 804a618:	2200      	movs	r2, #0
 804a61a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 804a61e:	68fb      	ldr	r3, [r7, #12]
 804a620:	2200      	movs	r2, #0
 804a622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 804a626:	2301      	movs	r3, #1
 804a628:	e00f      	b.n	804a64a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 804a62a:	68fb      	ldr	r3, [r7, #12]
 804a62c:	681b      	ldr	r3, [r3, #0]
 804a62e:	699a      	ldr	r2, [r3, #24]
 804a630:	68bb      	ldr	r3, [r7, #8]
 804a632:	4013      	ands	r3, r2
 804a634:	68ba      	ldr	r2, [r7, #8]
 804a636:	429a      	cmp	r2, r3
 804a638:	bf0c      	ite	eq
 804a63a:	2301      	moveq	r3, #1
 804a63c:	2300      	movne	r3, #0
 804a63e:	b2db      	uxtb	r3, r3
 804a640:	461a      	mov	r2, r3
 804a642:	79fb      	ldrb	r3, [r7, #7]
 804a644:	429a      	cmp	r2, r3
 804a646:	d0cd      	beq.n	804a5e4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 804a648:	2300      	movs	r3, #0
}
 804a64a:	4618      	mov	r0, r3
 804a64c:	3710      	adds	r7, #16
 804a64e:	46bd      	mov	sp, r7
 804a650:	bd80      	pop	{r7, pc}

0804a652 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 804a652:	b580      	push	{r7, lr}
 804a654:	b084      	sub	sp, #16
 804a656:	af00      	add	r7, sp, #0
 804a658:	60f8      	str	r0, [r7, #12]
 804a65a:	60b9      	str	r1, [r7, #8]
 804a65c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 804a65e:	e02c      	b.n	804a6ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 804a660:	687a      	ldr	r2, [r7, #4]
 804a662:	68b9      	ldr	r1, [r7, #8]
 804a664:	68f8      	ldr	r0, [r7, #12]
 804a666:	f000 f871 	bl	804a74c <I2C_IsAcknowledgeFailed>
 804a66a:	4603      	mov	r3, r0
 804a66c:	2b00      	cmp	r3, #0
 804a66e:	d001      	beq.n	804a674 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 804a670:	2301      	movs	r3, #1
 804a672:	e02a      	b.n	804a6ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804a674:	68bb      	ldr	r3, [r7, #8]
 804a676:	f1b3 3fff 	cmp.w	r3, #4294967295
 804a67a:	d01e      	beq.n	804a6ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804a67c:	f7fc f844 	bl	8046708 <HAL_GetTick>
 804a680:	4602      	mov	r2, r0
 804a682:	687b      	ldr	r3, [r7, #4]
 804a684:	1ad3      	subs	r3, r2, r3
 804a686:	68ba      	ldr	r2, [r7, #8]
 804a688:	429a      	cmp	r2, r3
 804a68a:	d302      	bcc.n	804a692 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 804a68c:	68bb      	ldr	r3, [r7, #8]
 804a68e:	2b00      	cmp	r3, #0
 804a690:	d113      	bne.n	804a6ba <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 804a692:	68fb      	ldr	r3, [r7, #12]
 804a694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a696:	f043 0220 	orr.w	r2, r3, #32
 804a69a:	68fb      	ldr	r3, [r7, #12]
 804a69c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 804a69e:	68fb      	ldr	r3, [r7, #12]
 804a6a0:	2220      	movs	r2, #32
 804a6a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 804a6a6:	68fb      	ldr	r3, [r7, #12]
 804a6a8:	2200      	movs	r2, #0
 804a6aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 804a6ae:	68fb      	ldr	r3, [r7, #12]
 804a6b0:	2200      	movs	r2, #0
 804a6b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 804a6b6:	2301      	movs	r3, #1
 804a6b8:	e007      	b.n	804a6ca <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 804a6ba:	68fb      	ldr	r3, [r7, #12]
 804a6bc:	681b      	ldr	r3, [r3, #0]
 804a6be:	699b      	ldr	r3, [r3, #24]
 804a6c0:	f003 0302 	and.w	r3, r3, #2
 804a6c4:	2b02      	cmp	r3, #2
 804a6c6:	d1cb      	bne.n	804a660 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 804a6c8:	2300      	movs	r3, #0
}
 804a6ca:	4618      	mov	r0, r3
 804a6cc:	3710      	adds	r7, #16
 804a6ce:	46bd      	mov	sp, r7
 804a6d0:	bd80      	pop	{r7, pc}

0804a6d2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 804a6d2:	b580      	push	{r7, lr}
 804a6d4:	b084      	sub	sp, #16
 804a6d6:	af00      	add	r7, sp, #0
 804a6d8:	60f8      	str	r0, [r7, #12]
 804a6da:	60b9      	str	r1, [r7, #8]
 804a6dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 804a6de:	e028      	b.n	804a732 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 804a6e0:	687a      	ldr	r2, [r7, #4]
 804a6e2:	68b9      	ldr	r1, [r7, #8]
 804a6e4:	68f8      	ldr	r0, [r7, #12]
 804a6e6:	f000 f831 	bl	804a74c <I2C_IsAcknowledgeFailed>
 804a6ea:	4603      	mov	r3, r0
 804a6ec:	2b00      	cmp	r3, #0
 804a6ee:	d001      	beq.n	804a6f4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 804a6f0:	2301      	movs	r3, #1
 804a6f2:	e026      	b.n	804a742 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804a6f4:	f7fc f808 	bl	8046708 <HAL_GetTick>
 804a6f8:	4602      	mov	r2, r0
 804a6fa:	687b      	ldr	r3, [r7, #4]
 804a6fc:	1ad3      	subs	r3, r2, r3
 804a6fe:	68ba      	ldr	r2, [r7, #8]
 804a700:	429a      	cmp	r2, r3
 804a702:	d302      	bcc.n	804a70a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 804a704:	68bb      	ldr	r3, [r7, #8]
 804a706:	2b00      	cmp	r3, #0
 804a708:	d113      	bne.n	804a732 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 804a70a:	68fb      	ldr	r3, [r7, #12]
 804a70c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a70e:	f043 0220 	orr.w	r2, r3, #32
 804a712:	68fb      	ldr	r3, [r7, #12]
 804a714:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 804a716:	68fb      	ldr	r3, [r7, #12]
 804a718:	2220      	movs	r2, #32
 804a71a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 804a71e:	68fb      	ldr	r3, [r7, #12]
 804a720:	2200      	movs	r2, #0
 804a722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 804a726:	68fb      	ldr	r3, [r7, #12]
 804a728:	2200      	movs	r2, #0
 804a72a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 804a72e:	2301      	movs	r3, #1
 804a730:	e007      	b.n	804a742 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 804a732:	68fb      	ldr	r3, [r7, #12]
 804a734:	681b      	ldr	r3, [r3, #0]
 804a736:	699b      	ldr	r3, [r3, #24]
 804a738:	f003 0320 	and.w	r3, r3, #32
 804a73c:	2b20      	cmp	r3, #32
 804a73e:	d1cf      	bne.n	804a6e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 804a740:	2300      	movs	r3, #0
}
 804a742:	4618      	mov	r0, r3
 804a744:	3710      	adds	r7, #16
 804a746:	46bd      	mov	sp, r7
 804a748:	bd80      	pop	{r7, pc}
	...

0804a74c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 804a74c:	b580      	push	{r7, lr}
 804a74e:	b084      	sub	sp, #16
 804a750:	af00      	add	r7, sp, #0
 804a752:	60f8      	str	r0, [r7, #12]
 804a754:	60b9      	str	r1, [r7, #8]
 804a756:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 804a758:	68fb      	ldr	r3, [r7, #12]
 804a75a:	681b      	ldr	r3, [r3, #0]
 804a75c:	699b      	ldr	r3, [r3, #24]
 804a75e:	f003 0310 	and.w	r3, r3, #16
 804a762:	2b10      	cmp	r3, #16
 804a764:	d151      	bne.n	804a80a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 804a766:	e022      	b.n	804a7ae <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 804a768:	68bb      	ldr	r3, [r7, #8]
 804a76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804a76e:	d01e      	beq.n	804a7ae <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804a770:	f7fb ffca 	bl	8046708 <HAL_GetTick>
 804a774:	4602      	mov	r2, r0
 804a776:	687b      	ldr	r3, [r7, #4]
 804a778:	1ad3      	subs	r3, r2, r3
 804a77a:	68ba      	ldr	r2, [r7, #8]
 804a77c:	429a      	cmp	r2, r3
 804a77e:	d302      	bcc.n	804a786 <I2C_IsAcknowledgeFailed+0x3a>
 804a780:	68bb      	ldr	r3, [r7, #8]
 804a782:	2b00      	cmp	r3, #0
 804a784:	d113      	bne.n	804a7ae <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 804a786:	68fb      	ldr	r3, [r7, #12]
 804a788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a78a:	f043 0220 	orr.w	r2, r3, #32
 804a78e:	68fb      	ldr	r3, [r7, #12]
 804a790:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 804a792:	68fb      	ldr	r3, [r7, #12]
 804a794:	2220      	movs	r2, #32
 804a796:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 804a79a:	68fb      	ldr	r3, [r7, #12]
 804a79c:	2200      	movs	r2, #0
 804a79e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 804a7a2:	68fb      	ldr	r3, [r7, #12]
 804a7a4:	2200      	movs	r2, #0
 804a7a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 804a7aa:	2301      	movs	r3, #1
 804a7ac:	e02e      	b.n	804a80c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 804a7ae:	68fb      	ldr	r3, [r7, #12]
 804a7b0:	681b      	ldr	r3, [r3, #0]
 804a7b2:	699b      	ldr	r3, [r3, #24]
 804a7b4:	f003 0320 	and.w	r3, r3, #32
 804a7b8:	2b20      	cmp	r3, #32
 804a7ba:	d1d5      	bne.n	804a768 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 804a7bc:	68fb      	ldr	r3, [r7, #12]
 804a7be:	681b      	ldr	r3, [r3, #0]
 804a7c0:	2210      	movs	r2, #16
 804a7c2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 804a7c4:	68fb      	ldr	r3, [r7, #12]
 804a7c6:	681b      	ldr	r3, [r3, #0]
 804a7c8:	2220      	movs	r2, #32
 804a7ca:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 804a7cc:	68f8      	ldr	r0, [r7, #12]
 804a7ce:	f7ff febe 	bl	804a54e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 804a7d2:	68fb      	ldr	r3, [r7, #12]
 804a7d4:	681b      	ldr	r3, [r3, #0]
 804a7d6:	6859      	ldr	r1, [r3, #4]
 804a7d8:	68fb      	ldr	r3, [r7, #12]
 804a7da:	681a      	ldr	r2, [r3, #0]
 804a7dc:	4b0d      	ldr	r3, [pc, #52]	; (804a814 <I2C_IsAcknowledgeFailed+0xc8>)
 804a7de:	400b      	ands	r3, r1
 804a7e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 804a7e2:	68fb      	ldr	r3, [r7, #12]
 804a7e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804a7e6:	f043 0204 	orr.w	r2, r3, #4
 804a7ea:	68fb      	ldr	r3, [r7, #12]
 804a7ec:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 804a7ee:	68fb      	ldr	r3, [r7, #12]
 804a7f0:	2220      	movs	r2, #32
 804a7f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 804a7f6:	68fb      	ldr	r3, [r7, #12]
 804a7f8:	2200      	movs	r2, #0
 804a7fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804a7fe:	68fb      	ldr	r3, [r7, #12]
 804a800:	2200      	movs	r2, #0
 804a802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 804a806:	2301      	movs	r3, #1
 804a808:	e000      	b.n	804a80c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 804a80a:	2300      	movs	r3, #0
}
 804a80c:	4618      	mov	r0, r3
 804a80e:	3710      	adds	r7, #16
 804a810:	46bd      	mov	sp, r7
 804a812:	bd80      	pop	{r7, pc}
 804a814:	fe00e800 	.word	0xfe00e800

0804a818 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 804a818:	b480      	push	{r7}
 804a81a:	b085      	sub	sp, #20
 804a81c:	af00      	add	r7, sp, #0
 804a81e:	60f8      	str	r0, [r7, #12]
 804a820:	607b      	str	r3, [r7, #4]
 804a822:	460b      	mov	r3, r1
 804a824:	817b      	strh	r3, [r7, #10]
 804a826:	4613      	mov	r3, r2
 804a828:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 804a82a:	68fb      	ldr	r3, [r7, #12]
 804a82c:	681b      	ldr	r3, [r3, #0]
 804a82e:	685a      	ldr	r2, [r3, #4]
 804a830:	69bb      	ldr	r3, [r7, #24]
 804a832:	0d5b      	lsrs	r3, r3, #21
 804a834:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 804a838:	4b0d      	ldr	r3, [pc, #52]	; (804a870 <I2C_TransferConfig+0x58>)
 804a83a:	430b      	orrs	r3, r1
 804a83c:	43db      	mvns	r3, r3
 804a83e:	ea02 0103 	and.w	r1, r2, r3
 804a842:	897b      	ldrh	r3, [r7, #10]
 804a844:	f3c3 0209 	ubfx	r2, r3, #0, #10
 804a848:	7a7b      	ldrb	r3, [r7, #9]
 804a84a:	041b      	lsls	r3, r3, #16
 804a84c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 804a850:	431a      	orrs	r2, r3
 804a852:	687b      	ldr	r3, [r7, #4]
 804a854:	431a      	orrs	r2, r3
 804a856:	69bb      	ldr	r3, [r7, #24]
 804a858:	431a      	orrs	r2, r3
 804a85a:	68fb      	ldr	r3, [r7, #12]
 804a85c:	681b      	ldr	r3, [r3, #0]
 804a85e:	430a      	orrs	r2, r1
 804a860:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 804a862:	bf00      	nop
 804a864:	3714      	adds	r7, #20
 804a866:	46bd      	mov	sp, r7
 804a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a86c:	4770      	bx	lr
 804a86e:	bf00      	nop
 804a870:	03ff63ff 	.word	0x03ff63ff

0804a874 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 804a874:	b480      	push	{r7}
 804a876:	b085      	sub	sp, #20
 804a878:	af00      	add	r7, sp, #0
 804a87a:	6078      	str	r0, [r7, #4]
 804a87c:	460b      	mov	r3, r1
 804a87e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 804a880:	2300      	movs	r3, #0
 804a882:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 804a884:	887b      	ldrh	r3, [r7, #2]
 804a886:	f003 0301 	and.w	r3, r3, #1
 804a88a:	2b00      	cmp	r3, #0
 804a88c:	d00f      	beq.n	804a8ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 804a88e:	68fb      	ldr	r3, [r7, #12]
 804a890:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 804a894:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 804a896:	687b      	ldr	r3, [r7, #4]
 804a898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a89c:	b2db      	uxtb	r3, r3
 804a89e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 804a8a2:	2b28      	cmp	r3, #40	; 0x28
 804a8a4:	d003      	beq.n	804a8ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 804a8a6:	68fb      	ldr	r3, [r7, #12]
 804a8a8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 804a8ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 804a8ae:	887b      	ldrh	r3, [r7, #2]
 804a8b0:	f003 0302 	and.w	r3, r3, #2
 804a8b4:	2b00      	cmp	r3, #0
 804a8b6:	d00f      	beq.n	804a8d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 804a8b8:	68fb      	ldr	r3, [r7, #12]
 804a8ba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 804a8be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 804a8c0:	687b      	ldr	r3, [r7, #4]
 804a8c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a8c6:	b2db      	uxtb	r3, r3
 804a8c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 804a8cc:	2b28      	cmp	r3, #40	; 0x28
 804a8ce:	d003      	beq.n	804a8d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 804a8d0:	68fb      	ldr	r3, [r7, #12]
 804a8d2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 804a8d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 804a8d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 804a8dc:	2b00      	cmp	r3, #0
 804a8de:	da03      	bge.n	804a8e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 804a8e0:	68fb      	ldr	r3, [r7, #12]
 804a8e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 804a8e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 804a8e8:	887b      	ldrh	r3, [r7, #2]
 804a8ea:	2b10      	cmp	r3, #16
 804a8ec:	d103      	bne.n	804a8f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 804a8ee:	68fb      	ldr	r3, [r7, #12]
 804a8f0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 804a8f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 804a8f6:	887b      	ldrh	r3, [r7, #2]
 804a8f8:	2b20      	cmp	r3, #32
 804a8fa:	d103      	bne.n	804a904 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 804a8fc:	68fb      	ldr	r3, [r7, #12]
 804a8fe:	f043 0320 	orr.w	r3, r3, #32
 804a902:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 804a904:	887b      	ldrh	r3, [r7, #2]
 804a906:	2b40      	cmp	r3, #64	; 0x40
 804a908:	d103      	bne.n	804a912 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 804a90a:	68fb      	ldr	r3, [r7, #12]
 804a90c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804a910:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 804a912:	687b      	ldr	r3, [r7, #4]
 804a914:	681b      	ldr	r3, [r3, #0]
 804a916:	6819      	ldr	r1, [r3, #0]
 804a918:	68fb      	ldr	r3, [r7, #12]
 804a91a:	43da      	mvns	r2, r3
 804a91c:	687b      	ldr	r3, [r7, #4]
 804a91e:	681b      	ldr	r3, [r3, #0]
 804a920:	400a      	ands	r2, r1
 804a922:	601a      	str	r2, [r3, #0]
}
 804a924:	bf00      	nop
 804a926:	3714      	adds	r7, #20
 804a928:	46bd      	mov	sp, r7
 804a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a92e:	4770      	bx	lr

0804a930 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 804a930:	b480      	push	{r7}
 804a932:	b083      	sub	sp, #12
 804a934:	af00      	add	r7, sp, #0
 804a936:	6078      	str	r0, [r7, #4]
 804a938:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 804a93a:	687b      	ldr	r3, [r7, #4]
 804a93c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a940:	b2db      	uxtb	r3, r3
 804a942:	2b20      	cmp	r3, #32
 804a944:	d138      	bne.n	804a9b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 804a946:	687b      	ldr	r3, [r7, #4]
 804a948:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 804a94c:	2b01      	cmp	r3, #1
 804a94e:	d101      	bne.n	804a954 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 804a950:	2302      	movs	r3, #2
 804a952:	e032      	b.n	804a9ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 804a954:	687b      	ldr	r3, [r7, #4]
 804a956:	2201      	movs	r2, #1
 804a958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 804a95c:	687b      	ldr	r3, [r7, #4]
 804a95e:	2224      	movs	r2, #36	; 0x24
 804a960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 804a964:	687b      	ldr	r3, [r7, #4]
 804a966:	681b      	ldr	r3, [r3, #0]
 804a968:	681a      	ldr	r2, [r3, #0]
 804a96a:	687b      	ldr	r3, [r7, #4]
 804a96c:	681b      	ldr	r3, [r3, #0]
 804a96e:	f022 0201 	bic.w	r2, r2, #1
 804a972:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 804a974:	687b      	ldr	r3, [r7, #4]
 804a976:	681b      	ldr	r3, [r3, #0]
 804a978:	681a      	ldr	r2, [r3, #0]
 804a97a:	687b      	ldr	r3, [r7, #4]
 804a97c:	681b      	ldr	r3, [r3, #0]
 804a97e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 804a982:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 804a984:	687b      	ldr	r3, [r7, #4]
 804a986:	681b      	ldr	r3, [r3, #0]
 804a988:	6819      	ldr	r1, [r3, #0]
 804a98a:	687b      	ldr	r3, [r7, #4]
 804a98c:	681b      	ldr	r3, [r3, #0]
 804a98e:	683a      	ldr	r2, [r7, #0]
 804a990:	430a      	orrs	r2, r1
 804a992:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 804a994:	687b      	ldr	r3, [r7, #4]
 804a996:	681b      	ldr	r3, [r3, #0]
 804a998:	681a      	ldr	r2, [r3, #0]
 804a99a:	687b      	ldr	r3, [r7, #4]
 804a99c:	681b      	ldr	r3, [r3, #0]
 804a99e:	f042 0201 	orr.w	r2, r2, #1
 804a9a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 804a9a4:	687b      	ldr	r3, [r7, #4]
 804a9a6:	2220      	movs	r2, #32
 804a9a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804a9ac:	687b      	ldr	r3, [r7, #4]
 804a9ae:	2200      	movs	r2, #0
 804a9b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 804a9b4:	2300      	movs	r3, #0
 804a9b6:	e000      	b.n	804a9ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 804a9b8:	2302      	movs	r3, #2
  }
}
 804a9ba:	4618      	mov	r0, r3
 804a9bc:	370c      	adds	r7, #12
 804a9be:	46bd      	mov	sp, r7
 804a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804a9c4:	4770      	bx	lr

0804a9c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 804a9c6:	b480      	push	{r7}
 804a9c8:	b085      	sub	sp, #20
 804a9ca:	af00      	add	r7, sp, #0
 804a9cc:	6078      	str	r0, [r7, #4]
 804a9ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 804a9d0:	687b      	ldr	r3, [r7, #4]
 804a9d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804a9d6:	b2db      	uxtb	r3, r3
 804a9d8:	2b20      	cmp	r3, #32
 804a9da:	d139      	bne.n	804aa50 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 804a9dc:	687b      	ldr	r3, [r7, #4]
 804a9de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 804a9e2:	2b01      	cmp	r3, #1
 804a9e4:	d101      	bne.n	804a9ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 804a9e6:	2302      	movs	r3, #2
 804a9e8:	e033      	b.n	804aa52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 804a9ea:	687b      	ldr	r3, [r7, #4]
 804a9ec:	2201      	movs	r2, #1
 804a9ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 804a9f2:	687b      	ldr	r3, [r7, #4]
 804a9f4:	2224      	movs	r2, #36	; 0x24
 804a9f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 804a9fa:	687b      	ldr	r3, [r7, #4]
 804a9fc:	681b      	ldr	r3, [r3, #0]
 804a9fe:	681a      	ldr	r2, [r3, #0]
 804aa00:	687b      	ldr	r3, [r7, #4]
 804aa02:	681b      	ldr	r3, [r3, #0]
 804aa04:	f022 0201 	bic.w	r2, r2, #1
 804aa08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 804aa0a:	687b      	ldr	r3, [r7, #4]
 804aa0c:	681b      	ldr	r3, [r3, #0]
 804aa0e:	681b      	ldr	r3, [r3, #0]
 804aa10:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 804aa12:	68fb      	ldr	r3, [r7, #12]
 804aa14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 804aa18:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 804aa1a:	683b      	ldr	r3, [r7, #0]
 804aa1c:	021b      	lsls	r3, r3, #8
 804aa1e:	68fa      	ldr	r2, [r7, #12]
 804aa20:	4313      	orrs	r3, r2
 804aa22:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 804aa24:	687b      	ldr	r3, [r7, #4]
 804aa26:	681b      	ldr	r3, [r3, #0]
 804aa28:	68fa      	ldr	r2, [r7, #12]
 804aa2a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 804aa2c:	687b      	ldr	r3, [r7, #4]
 804aa2e:	681b      	ldr	r3, [r3, #0]
 804aa30:	681a      	ldr	r2, [r3, #0]
 804aa32:	687b      	ldr	r3, [r7, #4]
 804aa34:	681b      	ldr	r3, [r3, #0]
 804aa36:	f042 0201 	orr.w	r2, r2, #1
 804aa3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 804aa3c:	687b      	ldr	r3, [r7, #4]
 804aa3e:	2220      	movs	r2, #32
 804aa40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804aa44:	687b      	ldr	r3, [r7, #4]
 804aa46:	2200      	movs	r2, #0
 804aa48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 804aa4c:	2300      	movs	r3, #0
 804aa4e:	e000      	b.n	804aa52 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 804aa50:	2302      	movs	r3, #2
  }
}
 804aa52:	4618      	mov	r0, r3
 804aa54:	3714      	adds	r7, #20
 804aa56:	46bd      	mov	sp, r7
 804aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 804aa5c:	4770      	bx	lr
	...

0804aa60 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 804aa60:	b480      	push	{r7}
 804aa62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 804aa64:	4b05      	ldr	r3, [pc, #20]	; (804aa7c <HAL_PWREx_EnableVddIO2+0x1c>)
 804aa66:	685b      	ldr	r3, [r3, #4]
 804aa68:	4a04      	ldr	r2, [pc, #16]	; (804aa7c <HAL_PWREx_EnableVddIO2+0x1c>)
 804aa6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 804aa6e:	6053      	str	r3, [r2, #4]
}
 804aa70:	bf00      	nop
 804aa72:	46bd      	mov	sp, r7
 804aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 804aa78:	4770      	bx	lr
 804aa7a:	bf00      	nop
 804aa7c:	40007000 	.word	0x40007000

0804aa80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 804aa80:	b480      	push	{r7}
 804aa82:	b089      	sub	sp, #36	; 0x24
 804aa84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 804aa86:	2300      	movs	r3, #0
 804aa88:	61fb      	str	r3, [r7, #28]
 804aa8a:	2300      	movs	r3, #0
 804aa8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 804aa8e:	4b47      	ldr	r3, [pc, #284]	; (804abac <HAL_RCC_GetSysClockFreq+0x12c>)
 804aa90:	689b      	ldr	r3, [r3, #8]
 804aa92:	f003 030c 	and.w	r3, r3, #12
 804aa96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 804aa98:	4b44      	ldr	r3, [pc, #272]	; (804abac <HAL_RCC_GetSysClockFreq+0x12c>)
 804aa9a:	68db      	ldr	r3, [r3, #12]
 804aa9c:	f003 0303 	and.w	r3, r3, #3
 804aaa0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 804aaa2:	693b      	ldr	r3, [r7, #16]
 804aaa4:	2b00      	cmp	r3, #0
 804aaa6:	d005      	beq.n	804aab4 <HAL_RCC_GetSysClockFreq+0x34>
 804aaa8:	693b      	ldr	r3, [r7, #16]
 804aaaa:	2b0c      	cmp	r3, #12
 804aaac:	d121      	bne.n	804aaf2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 804aaae:	68fb      	ldr	r3, [r7, #12]
 804aab0:	2b01      	cmp	r3, #1
 804aab2:	d11e      	bne.n	804aaf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 804aab4:	4b3d      	ldr	r3, [pc, #244]	; (804abac <HAL_RCC_GetSysClockFreq+0x12c>)
 804aab6:	681b      	ldr	r3, [r3, #0]
 804aab8:	f003 0308 	and.w	r3, r3, #8
 804aabc:	2b00      	cmp	r3, #0
 804aabe:	d107      	bne.n	804aad0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 804aac0:	4b3a      	ldr	r3, [pc, #232]	; (804abac <HAL_RCC_GetSysClockFreq+0x12c>)
 804aac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804aac6:	0a1b      	lsrs	r3, r3, #8
 804aac8:	f003 030f 	and.w	r3, r3, #15
 804aacc:	61fb      	str	r3, [r7, #28]
 804aace:	e005      	b.n	804aadc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 804aad0:	4b36      	ldr	r3, [pc, #216]	; (804abac <HAL_RCC_GetSysClockFreq+0x12c>)
 804aad2:	681b      	ldr	r3, [r3, #0]
 804aad4:	091b      	lsrs	r3, r3, #4
 804aad6:	f003 030f 	and.w	r3, r3, #15
 804aada:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 804aadc:	4a34      	ldr	r2, [pc, #208]	; (804abb0 <HAL_RCC_GetSysClockFreq+0x130>)
 804aade:	69fb      	ldr	r3, [r7, #28]
 804aae0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804aae4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 804aae6:	693b      	ldr	r3, [r7, #16]
 804aae8:	2b00      	cmp	r3, #0
 804aaea:	d10d      	bne.n	804ab08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 804aaec:	69fb      	ldr	r3, [r7, #28]
 804aaee:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 804aaf0:	e00a      	b.n	804ab08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 804aaf2:	693b      	ldr	r3, [r7, #16]
 804aaf4:	2b04      	cmp	r3, #4
 804aaf6:	d102      	bne.n	804aafe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 804aaf8:	4b2e      	ldr	r3, [pc, #184]	; (804abb4 <HAL_RCC_GetSysClockFreq+0x134>)
 804aafa:	61bb      	str	r3, [r7, #24]
 804aafc:	e004      	b.n	804ab08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 804aafe:	693b      	ldr	r3, [r7, #16]
 804ab00:	2b08      	cmp	r3, #8
 804ab02:	d101      	bne.n	804ab08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 804ab04:	4b2c      	ldr	r3, [pc, #176]	; (804abb8 <HAL_RCC_GetSysClockFreq+0x138>)
 804ab06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 804ab08:	693b      	ldr	r3, [r7, #16]
 804ab0a:	2b0c      	cmp	r3, #12
 804ab0c:	d146      	bne.n	804ab9c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 804ab0e:	4b27      	ldr	r3, [pc, #156]	; (804abac <HAL_RCC_GetSysClockFreq+0x12c>)
 804ab10:	68db      	ldr	r3, [r3, #12]
 804ab12:	f003 0303 	and.w	r3, r3, #3
 804ab16:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 804ab18:	4b24      	ldr	r3, [pc, #144]	; (804abac <HAL_RCC_GetSysClockFreq+0x12c>)
 804ab1a:	68db      	ldr	r3, [r3, #12]
 804ab1c:	091b      	lsrs	r3, r3, #4
 804ab1e:	f003 030f 	and.w	r3, r3, #15
 804ab22:	3301      	adds	r3, #1
 804ab24:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 804ab26:	68bb      	ldr	r3, [r7, #8]
 804ab28:	2b02      	cmp	r3, #2
 804ab2a:	d003      	beq.n	804ab34 <HAL_RCC_GetSysClockFreq+0xb4>
 804ab2c:	68bb      	ldr	r3, [r7, #8]
 804ab2e:	2b03      	cmp	r3, #3
 804ab30:	d00d      	beq.n	804ab4e <HAL_RCC_GetSysClockFreq+0xce>
 804ab32:	e019      	b.n	804ab68 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804ab34:	4a1f      	ldr	r2, [pc, #124]	; (804abb4 <HAL_RCC_GetSysClockFreq+0x134>)
 804ab36:	687b      	ldr	r3, [r7, #4]
 804ab38:	fbb2 f3f3 	udiv	r3, r2, r3
 804ab3c:	4a1b      	ldr	r2, [pc, #108]	; (804abac <HAL_RCC_GetSysClockFreq+0x12c>)
 804ab3e:	68d2      	ldr	r2, [r2, #12]
 804ab40:	0a12      	lsrs	r2, r2, #8
 804ab42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804ab46:	fb02 f303 	mul.w	r3, r2, r3
 804ab4a:	617b      	str	r3, [r7, #20]
        break;
 804ab4c:	e019      	b.n	804ab82 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804ab4e:	4a1a      	ldr	r2, [pc, #104]	; (804abb8 <HAL_RCC_GetSysClockFreq+0x138>)
 804ab50:	687b      	ldr	r3, [r7, #4]
 804ab52:	fbb2 f3f3 	udiv	r3, r2, r3
 804ab56:	4a15      	ldr	r2, [pc, #84]	; (804abac <HAL_RCC_GetSysClockFreq+0x12c>)
 804ab58:	68d2      	ldr	r2, [r2, #12]
 804ab5a:	0a12      	lsrs	r2, r2, #8
 804ab5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804ab60:	fb02 f303 	mul.w	r3, r2, r3
 804ab64:	617b      	str	r3, [r7, #20]
        break;
 804ab66:	e00c      	b.n	804ab82 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804ab68:	69fa      	ldr	r2, [r7, #28]
 804ab6a:	687b      	ldr	r3, [r7, #4]
 804ab6c:	fbb2 f3f3 	udiv	r3, r2, r3
 804ab70:	4a0e      	ldr	r2, [pc, #56]	; (804abac <HAL_RCC_GetSysClockFreq+0x12c>)
 804ab72:	68d2      	ldr	r2, [r2, #12]
 804ab74:	0a12      	lsrs	r2, r2, #8
 804ab76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804ab7a:	fb02 f303 	mul.w	r3, r2, r3
 804ab7e:	617b      	str	r3, [r7, #20]
        break;
 804ab80:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 804ab82:	4b0a      	ldr	r3, [pc, #40]	; (804abac <HAL_RCC_GetSysClockFreq+0x12c>)
 804ab84:	68db      	ldr	r3, [r3, #12]
 804ab86:	0e5b      	lsrs	r3, r3, #25
 804ab88:	f003 0303 	and.w	r3, r3, #3
 804ab8c:	3301      	adds	r3, #1
 804ab8e:	005b      	lsls	r3, r3, #1
 804ab90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 804ab92:	697a      	ldr	r2, [r7, #20]
 804ab94:	683b      	ldr	r3, [r7, #0]
 804ab96:	fbb2 f3f3 	udiv	r3, r2, r3
 804ab9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 804ab9c:	69bb      	ldr	r3, [r7, #24]
}
 804ab9e:	4618      	mov	r0, r3
 804aba0:	3724      	adds	r7, #36	; 0x24
 804aba2:	46bd      	mov	sp, r7
 804aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 804aba8:	4770      	bx	lr
 804abaa:	bf00      	nop
 804abac:	40021000 	.word	0x40021000
 804abb0:	0804ff7c 	.word	0x0804ff7c
 804abb4:	00f42400 	.word	0x00f42400
 804abb8:	007a1200 	.word	0x007a1200

0804abbc <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 804abbc:	b580      	push	{r7, lr}
 804abbe:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 804abc0:	f7ff ff5e 	bl	804aa80 <HAL_RCC_GetSysClockFreq>
 804abc4:	4602      	mov	r2, r0
 804abc6:	4b05      	ldr	r3, [pc, #20]	; (804abdc <HAL_RCC_GetHCLKFreq+0x20>)
 804abc8:	689b      	ldr	r3, [r3, #8]
 804abca:	091b      	lsrs	r3, r3, #4
 804abcc:	f003 030f 	and.w	r3, r3, #15
 804abd0:	4903      	ldr	r1, [pc, #12]	; (804abe0 <HAL_RCC_GetHCLKFreq+0x24>)
 804abd2:	5ccb      	ldrb	r3, [r1, r3]
 804abd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 804abd8:	4618      	mov	r0, r3
 804abda:	bd80      	pop	{r7, pc}
 804abdc:	40021000 	.word	0x40021000
 804abe0:	0804ff64 	.word	0x0804ff64

0804abe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 804abe4:	b580      	push	{r7, lr}
 804abe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 804abe8:	f7ff ffe8 	bl	804abbc <HAL_RCC_GetHCLKFreq>
 804abec:	4602      	mov	r2, r0
 804abee:	4b05      	ldr	r3, [pc, #20]	; (804ac04 <HAL_RCC_GetPCLK1Freq+0x20>)
 804abf0:	689b      	ldr	r3, [r3, #8]
 804abf2:	0a1b      	lsrs	r3, r3, #8
 804abf4:	f003 0307 	and.w	r3, r3, #7
 804abf8:	4903      	ldr	r1, [pc, #12]	; (804ac08 <HAL_RCC_GetPCLK1Freq+0x24>)
 804abfa:	5ccb      	ldrb	r3, [r1, r3]
 804abfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 804ac00:	4618      	mov	r0, r3
 804ac02:	bd80      	pop	{r7, pc}
 804ac04:	40021000 	.word	0x40021000
 804ac08:	0804ff74 	.word	0x0804ff74

0804ac0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 804ac0c:	b580      	push	{r7, lr}
 804ac0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 804ac10:	f7ff ffd4 	bl	804abbc <HAL_RCC_GetHCLKFreq>
 804ac14:	4602      	mov	r2, r0
 804ac16:	4b05      	ldr	r3, [pc, #20]	; (804ac2c <HAL_RCC_GetPCLK2Freq+0x20>)
 804ac18:	689b      	ldr	r3, [r3, #8]
 804ac1a:	0adb      	lsrs	r3, r3, #11
 804ac1c:	f003 0307 	and.w	r3, r3, #7
 804ac20:	4903      	ldr	r1, [pc, #12]	; (804ac30 <HAL_RCC_GetPCLK2Freq+0x24>)
 804ac22:	5ccb      	ldrb	r3, [r1, r3]
 804ac24:	fa22 f303 	lsr.w	r3, r2, r3
}
 804ac28:	4618      	mov	r0, r3
 804ac2a:	bd80      	pop	{r7, pc}
 804ac2c:	40021000 	.word	0x40021000
 804ac30:	0804ff74 	.word	0x0804ff74

0804ac34 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 804ac34:	b480      	push	{r7}
 804ac36:	b083      	sub	sp, #12
 804ac38:	af00      	add	r7, sp, #0
 804ac3a:	6078      	str	r0, [r7, #4]
 804ac3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 804ac3e:	687b      	ldr	r3, [r7, #4]
 804ac40:	220f      	movs	r2, #15
 804ac42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 804ac44:	4b12      	ldr	r3, [pc, #72]	; (804ac90 <HAL_RCC_GetClockConfig+0x5c>)
 804ac46:	689b      	ldr	r3, [r3, #8]
 804ac48:	f003 0203 	and.w	r2, r3, #3
 804ac4c:	687b      	ldr	r3, [r7, #4]
 804ac4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 804ac50:	4b0f      	ldr	r3, [pc, #60]	; (804ac90 <HAL_RCC_GetClockConfig+0x5c>)
 804ac52:	689b      	ldr	r3, [r3, #8]
 804ac54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 804ac58:	687b      	ldr	r3, [r7, #4]
 804ac5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 804ac5c:	4b0c      	ldr	r3, [pc, #48]	; (804ac90 <HAL_RCC_GetClockConfig+0x5c>)
 804ac5e:	689b      	ldr	r3, [r3, #8]
 804ac60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 804ac64:	687b      	ldr	r3, [r7, #4]
 804ac66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 804ac68:	4b09      	ldr	r3, [pc, #36]	; (804ac90 <HAL_RCC_GetClockConfig+0x5c>)
 804ac6a:	689b      	ldr	r3, [r3, #8]
 804ac6c:	08db      	lsrs	r3, r3, #3
 804ac6e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 804ac72:	687b      	ldr	r3, [r7, #4]
 804ac74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 804ac76:	4b07      	ldr	r3, [pc, #28]	; (804ac94 <HAL_RCC_GetClockConfig+0x60>)
 804ac78:	681b      	ldr	r3, [r3, #0]
 804ac7a:	f003 020f 	and.w	r2, r3, #15
 804ac7e:	683b      	ldr	r3, [r7, #0]
 804ac80:	601a      	str	r2, [r3, #0]
}
 804ac82:	bf00      	nop
 804ac84:	370c      	adds	r7, #12
 804ac86:	46bd      	mov	sp, r7
 804ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ac8c:	4770      	bx	lr
 804ac8e:	bf00      	nop
 804ac90:	40021000 	.word	0x40021000
 804ac94:	40022000 	.word	0x40022000

0804ac98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 804ac98:	b580      	push	{r7, lr}
 804ac9a:	b088      	sub	sp, #32
 804ac9c:	af00      	add	r7, sp, #0
 804ac9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 804aca0:	2300      	movs	r3, #0
 804aca2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 804aca4:	2300      	movs	r3, #0
 804aca6:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 804aca8:	687b      	ldr	r3, [r7, #4]
 804acaa:	681b      	ldr	r3, [r3, #0]
 804acac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804acb0:	2b00      	cmp	r3, #0
 804acb2:	d040      	beq.n	804ad36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 804acb4:	687b      	ldr	r3, [r7, #4]
 804acb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804acb8:	2b80      	cmp	r3, #128	; 0x80
 804acba:	d02a      	beq.n	804ad12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 804acbc:	2b80      	cmp	r3, #128	; 0x80
 804acbe:	d825      	bhi.n	804ad0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 804acc0:	2b60      	cmp	r3, #96	; 0x60
 804acc2:	d026      	beq.n	804ad12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 804acc4:	2b60      	cmp	r3, #96	; 0x60
 804acc6:	d821      	bhi.n	804ad0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 804acc8:	2b40      	cmp	r3, #64	; 0x40
 804acca:	d006      	beq.n	804acda <HAL_RCCEx_PeriphCLKConfig+0x42>
 804accc:	2b40      	cmp	r3, #64	; 0x40
 804acce:	d81d      	bhi.n	804ad0c <HAL_RCCEx_PeriphCLKConfig+0x74>
 804acd0:	2b00      	cmp	r3, #0
 804acd2:	d009      	beq.n	804ace8 <HAL_RCCEx_PeriphCLKConfig+0x50>
 804acd4:	2b20      	cmp	r3, #32
 804acd6:	d010      	beq.n	804acfa <HAL_RCCEx_PeriphCLKConfig+0x62>
 804acd8:	e018      	b.n	804ad0c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 804acda:	4b87      	ldr	r3, [pc, #540]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804acdc:	68db      	ldr	r3, [r3, #12]
 804acde:	4a86      	ldr	r2, [pc, #536]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ace0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804ace4:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 804ace6:	e015      	b.n	804ad14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 804ace8:	687b      	ldr	r3, [r7, #4]
 804acea:	3304      	adds	r3, #4
 804acec:	2100      	movs	r1, #0
 804acee:	4618      	mov	r0, r3
 804acf0:	f000 fb46 	bl	804b380 <RCCEx_PLLSAI1_Config>
 804acf4:	4603      	mov	r3, r0
 804acf6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 804acf8:	e00c      	b.n	804ad14 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 804acfa:	687b      	ldr	r3, [r7, #4]
 804acfc:	3320      	adds	r3, #32
 804acfe:	2100      	movs	r1, #0
 804ad00:	4618      	mov	r0, r3
 804ad02:	f000 fc13 	bl	804b52c <RCCEx_PLLSAI2_Config>
 804ad06:	4603      	mov	r3, r0
 804ad08:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 804ad0a:	e003      	b.n	804ad14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804ad0c:	2301      	movs	r3, #1
 804ad0e:	77fb      	strb	r3, [r7, #31]
        break;
 804ad10:	e000      	b.n	804ad14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 804ad12:	bf00      	nop
    }

    if (ret == HAL_OK)
 804ad14:	7ffb      	ldrb	r3, [r7, #31]
 804ad16:	2b00      	cmp	r3, #0
 804ad18:	d10b      	bne.n	804ad32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 804ad1a:	4b77      	ldr	r3, [pc, #476]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ad1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804ad20:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 804ad24:	687b      	ldr	r3, [r7, #4]
 804ad26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804ad28:	4973      	ldr	r1, [pc, #460]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ad2a:	4313      	orrs	r3, r2
 804ad2c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 804ad30:	e001      	b.n	804ad36 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804ad32:	7ffb      	ldrb	r3, [r7, #31]
 804ad34:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 804ad36:	687b      	ldr	r3, [r7, #4]
 804ad38:	681b      	ldr	r3, [r3, #0]
 804ad3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804ad3e:	2b00      	cmp	r3, #0
 804ad40:	d047      	beq.n	804add2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 804ad42:	687b      	ldr	r3, [r7, #4]
 804ad44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804ad46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804ad4a:	d030      	beq.n	804adae <HAL_RCCEx_PeriphCLKConfig+0x116>
 804ad4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804ad50:	d82a      	bhi.n	804ada8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 804ad52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804ad56:	d02a      	beq.n	804adae <HAL_RCCEx_PeriphCLKConfig+0x116>
 804ad58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804ad5c:	d824      	bhi.n	804ada8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 804ad5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804ad62:	d008      	beq.n	804ad76 <HAL_RCCEx_PeriphCLKConfig+0xde>
 804ad64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804ad68:	d81e      	bhi.n	804ada8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 804ad6a:	2b00      	cmp	r3, #0
 804ad6c:	d00a      	beq.n	804ad84 <HAL_RCCEx_PeriphCLKConfig+0xec>
 804ad6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804ad72:	d010      	beq.n	804ad96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 804ad74:	e018      	b.n	804ada8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 804ad76:	4b60      	ldr	r3, [pc, #384]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ad78:	68db      	ldr	r3, [r3, #12]
 804ad7a:	4a5f      	ldr	r2, [pc, #380]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ad7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804ad80:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804ad82:	e015      	b.n	804adb0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 804ad84:	687b      	ldr	r3, [r7, #4]
 804ad86:	3304      	adds	r3, #4
 804ad88:	2100      	movs	r1, #0
 804ad8a:	4618      	mov	r0, r3
 804ad8c:	f000 faf8 	bl	804b380 <RCCEx_PLLSAI1_Config>
 804ad90:	4603      	mov	r3, r0
 804ad92:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804ad94:	e00c      	b.n	804adb0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 804ad96:	687b      	ldr	r3, [r7, #4]
 804ad98:	3320      	adds	r3, #32
 804ad9a:	2100      	movs	r1, #0
 804ad9c:	4618      	mov	r0, r3
 804ad9e:	f000 fbc5 	bl	804b52c <RCCEx_PLLSAI2_Config>
 804ada2:	4603      	mov	r3, r0
 804ada4:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804ada6:	e003      	b.n	804adb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804ada8:	2301      	movs	r3, #1
 804adaa:	77fb      	strb	r3, [r7, #31]
        break;
 804adac:	e000      	b.n	804adb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 804adae:	bf00      	nop
    }

    if (ret == HAL_OK)
 804adb0:	7ffb      	ldrb	r3, [r7, #31]
 804adb2:	2b00      	cmp	r3, #0
 804adb4:	d10b      	bne.n	804adce <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 804adb6:	4b50      	ldr	r3, [pc, #320]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804adb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804adbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 804adc0:	687b      	ldr	r3, [r7, #4]
 804adc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804adc4:	494c      	ldr	r1, [pc, #304]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804adc6:	4313      	orrs	r3, r2
 804adc8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 804adcc:	e001      	b.n	804add2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804adce:	7ffb      	ldrb	r3, [r7, #31]
 804add0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 804add2:	687b      	ldr	r3, [r7, #4]
 804add4:	681b      	ldr	r3, [r3, #0]
 804add6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804adda:	2b00      	cmp	r3, #0
 804addc:	f000 809b 	beq.w	804af16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 804ade0:	2300      	movs	r3, #0
 804ade2:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 804ade4:	4b44      	ldr	r3, [pc, #272]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ade6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804ade8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804adec:	2b00      	cmp	r3, #0
 804adee:	d10d      	bne.n	804ae0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 804adf0:	4b41      	ldr	r3, [pc, #260]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804adf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804adf4:	4a40      	ldr	r2, [pc, #256]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804adf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804adfa:	6593      	str	r3, [r2, #88]	; 0x58
 804adfc:	4b3e      	ldr	r3, [pc, #248]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804adfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804ae00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804ae04:	60fb      	str	r3, [r7, #12]
 804ae06:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 804ae08:	2301      	movs	r3, #1
 804ae0a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 804ae0c:	4b3b      	ldr	r3, [pc, #236]	; (804aefc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 804ae0e:	681b      	ldr	r3, [r3, #0]
 804ae10:	4a3a      	ldr	r2, [pc, #232]	; (804aefc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 804ae12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804ae16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 804ae18:	f7fb fc76 	bl	8046708 <HAL_GetTick>
 804ae1c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804ae1e:	e009      	b.n	804ae34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804ae20:	f7fb fc72 	bl	8046708 <HAL_GetTick>
 804ae24:	4602      	mov	r2, r0
 804ae26:	693b      	ldr	r3, [r7, #16]
 804ae28:	1ad3      	subs	r3, r2, r3
 804ae2a:	2b02      	cmp	r3, #2
 804ae2c:	d902      	bls.n	804ae34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 804ae2e:	2303      	movs	r3, #3
 804ae30:	77fb      	strb	r3, [r7, #31]
        break;
 804ae32:	e005      	b.n	804ae40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804ae34:	4b31      	ldr	r3, [pc, #196]	; (804aefc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 804ae36:	681b      	ldr	r3, [r3, #0]
 804ae38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804ae3c:	2b00      	cmp	r3, #0
 804ae3e:	d0ef      	beq.n	804ae20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if (ret == HAL_OK)
 804ae40:	7ffb      	ldrb	r3, [r7, #31]
 804ae42:	2b00      	cmp	r3, #0
 804ae44:	d15c      	bne.n	804af00 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 804ae46:	4b2c      	ldr	r3, [pc, #176]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ae48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804ae4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804ae50:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 804ae52:	69bb      	ldr	r3, [r7, #24]
 804ae54:	2b00      	cmp	r3, #0
 804ae56:	d01f      	beq.n	804ae98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 804ae58:	687b      	ldr	r3, [r7, #4]
 804ae5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804ae5e:	69ba      	ldr	r2, [r7, #24]
 804ae60:	429a      	cmp	r2, r3
 804ae62:	d019      	beq.n	804ae98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 804ae64:	4b24      	ldr	r3, [pc, #144]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ae66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804ae6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804ae6e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 804ae70:	4b21      	ldr	r3, [pc, #132]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ae72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804ae76:	4a20      	ldr	r2, [pc, #128]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ae78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804ae7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 804ae80:	4b1d      	ldr	r3, [pc, #116]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ae82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804ae86:	4a1c      	ldr	r2, [pc, #112]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ae88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804ae8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 804ae90:	4a19      	ldr	r2, [pc, #100]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804ae92:	69bb      	ldr	r3, [r7, #24]
 804ae94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 804ae98:	69bb      	ldr	r3, [r7, #24]
 804ae9a:	f003 0301 	and.w	r3, r3, #1
 804ae9e:	2b00      	cmp	r3, #0
 804aea0:	d016      	beq.n	804aed0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804aea2:	f7fb fc31 	bl	8046708 <HAL_GetTick>
 804aea6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804aea8:	e00b      	b.n	804aec2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804aeaa:	f7fb fc2d 	bl	8046708 <HAL_GetTick>
 804aeae:	4602      	mov	r2, r0
 804aeb0:	693b      	ldr	r3, [r7, #16]
 804aeb2:	1ad3      	subs	r3, r2, r3
 804aeb4:	f241 3288 	movw	r2, #5000	; 0x1388
 804aeb8:	4293      	cmp	r3, r2
 804aeba:	d902      	bls.n	804aec2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 804aebc:	2303      	movs	r3, #3
 804aebe:	77fb      	strb	r3, [r7, #31]
            break;
 804aec0:	e006      	b.n	804aed0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804aec2:	4b0d      	ldr	r3, [pc, #52]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804aec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804aec8:	f003 0302 	and.w	r3, r3, #2
 804aecc:	2b00      	cmp	r3, #0
 804aece:	d0ec      	beq.n	804aeaa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if (ret == HAL_OK)
 804aed0:	7ffb      	ldrb	r3, [r7, #31]
 804aed2:	2b00      	cmp	r3, #0
 804aed4:	d10c      	bne.n	804aef0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804aed6:	4b08      	ldr	r3, [pc, #32]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804aed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804aedc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 804aee0:	687b      	ldr	r3, [r7, #4]
 804aee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804aee6:	4904      	ldr	r1, [pc, #16]	; (804aef8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 804aee8:	4313      	orrs	r3, r2
 804aeea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 804aeee:	e009      	b.n	804af04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 804aef0:	7ffb      	ldrb	r3, [r7, #31]
 804aef2:	77bb      	strb	r3, [r7, #30]
 804aef4:	e006      	b.n	804af04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 804aef6:	bf00      	nop
 804aef8:	40021000 	.word	0x40021000
 804aefc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 804af00:	7ffb      	ldrb	r3, [r7, #31]
 804af02:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 804af04:	7dfb      	ldrb	r3, [r7, #23]
 804af06:	2b01      	cmp	r3, #1
 804af08:	d105      	bne.n	804af16 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 804af0a:	4baf      	ldr	r3, [pc, #700]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804af0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804af0e:	4aae      	ldr	r2, [pc, #696]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804af10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804af14:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 804af16:	687b      	ldr	r3, [r7, #4]
 804af18:	681b      	ldr	r3, [r3, #0]
 804af1a:	f003 0301 	and.w	r3, r3, #1
 804af1e:	2b00      	cmp	r3, #0
 804af20:	d00a      	beq.n	804af38 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 804af22:	4ba9      	ldr	r3, [pc, #676]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804af24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804af28:	f023 0203 	bic.w	r2, r3, #3
 804af2c:	687b      	ldr	r3, [r7, #4]
 804af2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804af30:	49a5      	ldr	r1, [pc, #660]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804af32:	4313      	orrs	r3, r2
 804af34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 804af38:	687b      	ldr	r3, [r7, #4]
 804af3a:	681b      	ldr	r3, [r3, #0]
 804af3c:	f003 0302 	and.w	r3, r3, #2
 804af40:	2b00      	cmp	r3, #0
 804af42:	d00a      	beq.n	804af5a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 804af44:	4ba0      	ldr	r3, [pc, #640]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804af46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804af4a:	f023 020c 	bic.w	r2, r3, #12
 804af4e:	687b      	ldr	r3, [r7, #4]
 804af50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804af52:	499d      	ldr	r1, [pc, #628]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804af54:	4313      	orrs	r3, r2
 804af56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 804af5a:	687b      	ldr	r3, [r7, #4]
 804af5c:	681b      	ldr	r3, [r3, #0]
 804af5e:	f003 0304 	and.w	r3, r3, #4
 804af62:	2b00      	cmp	r3, #0
 804af64:	d00a      	beq.n	804af7c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 804af66:	4b98      	ldr	r3, [pc, #608]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804af68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804af6c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 804af70:	687b      	ldr	r3, [r7, #4]
 804af72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804af74:	4994      	ldr	r1, [pc, #592]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804af76:	4313      	orrs	r3, r2
 804af78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 804af7c:	687b      	ldr	r3, [r7, #4]
 804af7e:	681b      	ldr	r3, [r3, #0]
 804af80:	f003 0308 	and.w	r3, r3, #8
 804af84:	2b00      	cmp	r3, #0
 804af86:	d00a      	beq.n	804af9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 804af88:	4b8f      	ldr	r3, [pc, #572]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804af8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804af8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 804af92:	687b      	ldr	r3, [r7, #4]
 804af94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804af96:	498c      	ldr	r1, [pc, #560]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804af98:	4313      	orrs	r3, r2
 804af9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 804af9e:	687b      	ldr	r3, [r7, #4]
 804afa0:	681b      	ldr	r3, [r3, #0]
 804afa2:	f003 0310 	and.w	r3, r3, #16
 804afa6:	2b00      	cmp	r3, #0
 804afa8:	d00a      	beq.n	804afc0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 804afaa:	4b87      	ldr	r3, [pc, #540]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804afac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804afb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 804afb4:	687b      	ldr	r3, [r7, #4]
 804afb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804afb8:	4983      	ldr	r1, [pc, #524]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804afba:	4313      	orrs	r3, r2
 804afbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 804afc0:	687b      	ldr	r3, [r7, #4]
 804afc2:	681b      	ldr	r3, [r3, #0]
 804afc4:	f003 0320 	and.w	r3, r3, #32
 804afc8:	2b00      	cmp	r3, #0
 804afca:	d00a      	beq.n	804afe2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 804afcc:	4b7e      	ldr	r3, [pc, #504]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804afce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804afd2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 804afd6:	687b      	ldr	r3, [r7, #4]
 804afd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804afda:	497b      	ldr	r1, [pc, #492]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804afdc:	4313      	orrs	r3, r2
 804afde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 804afe2:	687b      	ldr	r3, [r7, #4]
 804afe4:	681b      	ldr	r3, [r3, #0]
 804afe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804afea:	2b00      	cmp	r3, #0
 804afec:	d00a      	beq.n	804b004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 804afee:	4b76      	ldr	r3, [pc, #472]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804aff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804aff4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 804aff8:	687b      	ldr	r3, [r7, #4]
 804affa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804affc:	4972      	ldr	r1, [pc, #456]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804affe:	4313      	orrs	r3, r2
 804b000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 804b004:	687b      	ldr	r3, [r7, #4]
 804b006:	681b      	ldr	r3, [r3, #0]
 804b008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804b00c:	2b00      	cmp	r3, #0
 804b00e:	d00a      	beq.n	804b026 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 804b010:	4b6d      	ldr	r3, [pc, #436]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b016:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 804b01a:	687b      	ldr	r3, [r7, #4]
 804b01c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804b01e:	496a      	ldr	r1, [pc, #424]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b020:	4313      	orrs	r3, r2
 804b022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 804b026:	687b      	ldr	r3, [r7, #4]
 804b028:	681b      	ldr	r3, [r3, #0]
 804b02a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804b02e:	2b00      	cmp	r3, #0
 804b030:	d00a      	beq.n	804b048 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 804b032:	4b65      	ldr	r3, [pc, #404]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b034:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b038:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 804b03c:	687b      	ldr	r3, [r7, #4]
 804b03e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804b040:	4961      	ldr	r1, [pc, #388]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b042:	4313      	orrs	r3, r2
 804b044:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 804b048:	687b      	ldr	r3, [r7, #4]
 804b04a:	681b      	ldr	r3, [r3, #0]
 804b04c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804b050:	2b00      	cmp	r3, #0
 804b052:	d031      	beq.n	804b0b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 804b054:	687b      	ldr	r3, [r7, #4]
 804b056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 804b058:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804b05c:	d00e      	beq.n	804b07c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 804b05e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804b062:	d814      	bhi.n	804b08e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 804b064:	2b00      	cmp	r3, #0
 804b066:	d015      	beq.n	804b094 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 804b068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 804b06c:	d10f      	bne.n	804b08e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804b06e:	4b56      	ldr	r3, [pc, #344]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b070:	68db      	ldr	r3, [r3, #12]
 804b072:	4a55      	ldr	r2, [pc, #340]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b074:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804b078:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 804b07a:	e00c      	b.n	804b096 <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 804b07c:	687b      	ldr	r3, [r7, #4]
 804b07e:	3304      	adds	r3, #4
 804b080:	2100      	movs	r1, #0
 804b082:	4618      	mov	r0, r3
 804b084:	f000 f97c 	bl	804b380 <RCCEx_PLLSAI1_Config>
 804b088:	4603      	mov	r3, r0
 804b08a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 804b08c:	e003      	b.n	804b096 <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      default:
        ret = HAL_ERROR;
 804b08e:	2301      	movs	r3, #1
 804b090:	77fb      	strb	r3, [r7, #31]
        break;
 804b092:	e000      	b.n	804b096 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        break;
 804b094:	bf00      	nop
    }

    if (ret == HAL_OK)
 804b096:	7ffb      	ldrb	r3, [r7, #31]
 804b098:	2b00      	cmp	r3, #0
 804b09a:	d10b      	bne.n	804b0b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 804b09c:	4b4a      	ldr	r3, [pc, #296]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b09e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b0a2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 804b0a6:	687b      	ldr	r3, [r7, #4]
 804b0a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 804b0aa:	4947      	ldr	r1, [pc, #284]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b0ac:	4313      	orrs	r3, r2
 804b0ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 804b0b2:	e001      	b.n	804b0b8 <HAL_RCCEx_PeriphCLKConfig+0x420>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804b0b4:	7ffb      	ldrb	r3, [r7, #31]
 804b0b6:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 804b0b8:	687b      	ldr	r3, [r7, #4]
 804b0ba:	681b      	ldr	r3, [r3, #0]
 804b0bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804b0c0:	2b00      	cmp	r3, #0
 804b0c2:	d00a      	beq.n	804b0da <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 804b0c4:	4b40      	ldr	r3, [pc, #256]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b0c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b0ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 804b0ce:	687b      	ldr	r3, [r7, #4]
 804b0d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804b0d2:	493d      	ldr	r1, [pc, #244]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b0d4:	4313      	orrs	r3, r2
 804b0d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 804b0da:	687b      	ldr	r3, [r7, #4]
 804b0dc:	681b      	ldr	r3, [r3, #0]
 804b0de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804b0e2:	2b00      	cmp	r3, #0
 804b0e4:	d00a      	beq.n	804b0fc <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 804b0e6:	4b38      	ldr	r3, [pc, #224]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b0e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b0ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 804b0f0:	687b      	ldr	r3, [r7, #4]
 804b0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804b0f4:	4934      	ldr	r1, [pc, #208]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b0f6:	4313      	orrs	r3, r2
 804b0f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 804b0fc:	687b      	ldr	r3, [r7, #4]
 804b0fe:	681b      	ldr	r3, [r3, #0]
 804b100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804b104:	2b00      	cmp	r3, #0
 804b106:	d00a      	beq.n	804b11e <HAL_RCCEx_PeriphCLKConfig+0x486>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 804b108:	4b2f      	ldr	r3, [pc, #188]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b10e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 804b112:	687b      	ldr	r3, [r7, #4]
 804b114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804b116:	492c      	ldr	r1, [pc, #176]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b118:	4313      	orrs	r3, r2
 804b11a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 804b11e:	687b      	ldr	r3, [r7, #4]
 804b120:	681b      	ldr	r3, [r3, #0]
 804b122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804b126:	2b00      	cmp	r3, #0
 804b128:	d00a      	beq.n	804b140 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 804b12a:	4b27      	ldr	r3, [pc, #156]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b12c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804b130:	f023 0203 	bic.w	r2, r3, #3
 804b134:	687b      	ldr	r3, [r7, #4]
 804b136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804b138:	4923      	ldr	r1, [pc, #140]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b13a:	4313      	orrs	r3, r2
 804b13c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 804b140:	687b      	ldr	r3, [r7, #4]
 804b142:	681b      	ldr	r3, [r3, #0]
 804b144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 804b148:	2b00      	cmp	r3, #0
 804b14a:	d028      	beq.n	804b19e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 804b14c:	4b1e      	ldr	r3, [pc, #120]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b14e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b152:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804b156:	687b      	ldr	r3, [r7, #4]
 804b158:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804b15a:	491b      	ldr	r1, [pc, #108]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b15c:	4313      	orrs	r3, r2
 804b15e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 804b162:	687b      	ldr	r3, [r7, #4]
 804b164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804b166:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804b16a:	d106      	bne.n	804b17a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804b16c:	4b16      	ldr	r3, [pc, #88]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b16e:	68db      	ldr	r3, [r3, #12]
 804b170:	4a15      	ldr	r2, [pc, #84]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804b176:	60d3      	str	r3, [r2, #12]
 804b178:	e011      	b.n	804b19e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 804b17a:	687b      	ldr	r3, [r7, #4]
 804b17c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804b17e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 804b182:	d10c      	bne.n	804b19e <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 804b184:	687b      	ldr	r3, [r7, #4]
 804b186:	3304      	adds	r3, #4
 804b188:	2101      	movs	r1, #1
 804b18a:	4618      	mov	r0, r3
 804b18c:	f000 f8f8 	bl	804b380 <RCCEx_PLLSAI1_Config>
 804b190:	4603      	mov	r3, r0
 804b192:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 804b194:	7ffb      	ldrb	r3, [r7, #31]
 804b196:	2b00      	cmp	r3, #0
 804b198:	d001      	beq.n	804b19e <HAL_RCCEx_PeriphCLKConfig+0x506>
        {
          /* set overall return value */
          status = ret;
 804b19a:	7ffb      	ldrb	r3, [r7, #31]
 804b19c:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 804b19e:	687b      	ldr	r3, [r7, #4]
 804b1a0:	681b      	ldr	r3, [r3, #0]
 804b1a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804b1a6:	2b00      	cmp	r3, #0
 804b1a8:	d04d      	beq.n	804b246 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 804b1aa:	687b      	ldr	r3, [r7, #4]
 804b1ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804b1ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804b1b2:	d10b      	bne.n	804b1cc <HAL_RCCEx_PeriphCLKConfig+0x534>
 804b1b4:	4b04      	ldr	r3, [pc, #16]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b1b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804b1ba:	4a03      	ldr	r2, [pc, #12]	; (804b1c8 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 804b1bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804b1c0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 804b1c4:	e015      	b.n	804b1f2 <HAL_RCCEx_PeriphCLKConfig+0x55a>
 804b1c6:	bf00      	nop
 804b1c8:	40021000 	.word	0x40021000
 804b1cc:	4b6b      	ldr	r3, [pc, #428]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b1ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b1d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804b1d6:	687b      	ldr	r3, [r7, #4]
 804b1d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804b1da:	4968      	ldr	r1, [pc, #416]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b1dc:	4313      	orrs	r3, r2
 804b1de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 804b1e2:	4b66      	ldr	r3, [pc, #408]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b1e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804b1e8:	4a64      	ldr	r2, [pc, #400]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b1ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 804b1ee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 804b1f2:	687b      	ldr	r3, [r7, #4]
 804b1f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804b1f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 804b1fa:	d10d      	bne.n	804b218 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 804b1fc:	687b      	ldr	r3, [r7, #4]
 804b1fe:	3304      	adds	r3, #4
 804b200:	2101      	movs	r1, #1
 804b202:	4618      	mov	r0, r3
 804b204:	f000 f8bc 	bl	804b380 <RCCEx_PLLSAI1_Config>
 804b208:	4603      	mov	r3, r0
 804b20a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 804b20c:	7ffb      	ldrb	r3, [r7, #31]
 804b20e:	2b00      	cmp	r3, #0
 804b210:	d019      	beq.n	804b246 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      {
        /* set overall return value */
        status = ret;
 804b212:	7ffb      	ldrb	r3, [r7, #31]
 804b214:	77bb      	strb	r3, [r7, #30]
 804b216:	e016      	b.n	804b246 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 804b218:	687b      	ldr	r3, [r7, #4]
 804b21a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804b21c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804b220:	d106      	bne.n	804b230 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804b222:	4b56      	ldr	r3, [pc, #344]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b224:	68db      	ldr	r3, [r3, #12]
 804b226:	4a55      	ldr	r2, [pc, #340]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804b22c:	60d3      	str	r3, [r2, #12]
 804b22e:	e00a      	b.n	804b246 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 804b230:	687b      	ldr	r3, [r7, #4]
 804b232:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804b234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804b238:	d105      	bne.n	804b246 <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 804b23a:	4b50      	ldr	r3, [pc, #320]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b23c:	68db      	ldr	r3, [r3, #12]
 804b23e:	4a4f      	ldr	r2, [pc, #316]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804b244:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 804b246:	687b      	ldr	r3, [r7, #4]
 804b248:	681b      	ldr	r3, [r3, #0]
 804b24a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 804b24e:	2b00      	cmp	r3, #0
 804b250:	d028      	beq.n	804b2a4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 804b252:	4b4a      	ldr	r3, [pc, #296]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b258:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804b25c:	687b      	ldr	r3, [r7, #4]
 804b25e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804b260:	4946      	ldr	r1, [pc, #280]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b262:	4313      	orrs	r3, r2
 804b264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 804b268:	687b      	ldr	r3, [r7, #4]
 804b26a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804b26c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804b270:	d106      	bne.n	804b280 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804b272:	4b42      	ldr	r3, [pc, #264]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b274:	68db      	ldr	r3, [r3, #12]
 804b276:	4a41      	ldr	r2, [pc, #260]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b278:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804b27c:	60d3      	str	r3, [r2, #12]
 804b27e:	e011      	b.n	804b2a4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 804b280:	687b      	ldr	r3, [r7, #4]
 804b282:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804b284:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 804b288:	d10c      	bne.n	804b2a4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 804b28a:	687b      	ldr	r3, [r7, #4]
 804b28c:	3304      	adds	r3, #4
 804b28e:	2101      	movs	r1, #1
 804b290:	4618      	mov	r0, r3
 804b292:	f000 f875 	bl	804b380 <RCCEx_PLLSAI1_Config>
 804b296:	4603      	mov	r3, r0
 804b298:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 804b29a:	7ffb      	ldrb	r3, [r7, #31]
 804b29c:	2b00      	cmp	r3, #0
 804b29e:	d001      	beq.n	804b2a4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
      {
        /* set overall return value */
        status = ret;
 804b2a0:	7ffb      	ldrb	r3, [r7, #31]
 804b2a2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 804b2a4:	687b      	ldr	r3, [r7, #4]
 804b2a6:	681b      	ldr	r3, [r3, #0]
 804b2a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 804b2ac:	2b00      	cmp	r3, #0
 804b2ae:	d01e      	beq.n	804b2ee <HAL_RCCEx_PeriphCLKConfig+0x656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 804b2b0:	4b32      	ldr	r3, [pc, #200]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b2b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b2b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 804b2ba:	687b      	ldr	r3, [r7, #4]
 804b2bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804b2c0:	492e      	ldr	r1, [pc, #184]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b2c2:	4313      	orrs	r3, r2
 804b2c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 804b2c8:	687b      	ldr	r3, [r7, #4]
 804b2ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804b2ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 804b2d2:	d10c      	bne.n	804b2ee <HAL_RCCEx_PeriphCLKConfig+0x656>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 804b2d4:	687b      	ldr	r3, [r7, #4]
 804b2d6:	3304      	adds	r3, #4
 804b2d8:	2102      	movs	r1, #2
 804b2da:	4618      	mov	r0, r3
 804b2dc:	f000 f850 	bl	804b380 <RCCEx_PLLSAI1_Config>
 804b2e0:	4603      	mov	r3, r0
 804b2e2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 804b2e4:	7ffb      	ldrb	r3, [r7, #31]
 804b2e6:	2b00      	cmp	r3, #0
 804b2e8:	d001      	beq.n	804b2ee <HAL_RCCEx_PeriphCLKConfig+0x656>
      {
        /* set overall return value */
        status = ret;
 804b2ea:	7ffb      	ldrb	r3, [r7, #31]
 804b2ec:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 804b2ee:	687b      	ldr	r3, [r7, #4]
 804b2f0:	681b      	ldr	r3, [r3, #0]
 804b2f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804b2f6:	2b00      	cmp	r3, #0
 804b2f8:	d00b      	beq.n	804b312 <HAL_RCCEx_PeriphCLKConfig+0x67a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 804b2fa:	4b20      	ldr	r3, [pc, #128]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b2fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804b300:	f023 0204 	bic.w	r2, r3, #4
 804b304:	687b      	ldr	r3, [r7, #4]
 804b306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804b30a:	491c      	ldr	r1, [pc, #112]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b30c:	4313      	orrs	r3, r2
 804b30e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 804b312:	687b      	ldr	r3, [r7, #4]
 804b314:	681b      	ldr	r3, [r3, #0]
 804b316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804b31a:	2b00      	cmp	r3, #0
 804b31c:	d00b      	beq.n	804b336 <HAL_RCCEx_PeriphCLKConfig+0x69e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 804b31e:	4b17      	ldr	r3, [pc, #92]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b320:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804b324:	f023 0218 	bic.w	r2, r3, #24
 804b328:	687b      	ldr	r3, [r7, #4]
 804b32a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804b32e:	4913      	ldr	r1, [pc, #76]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b330:	4313      	orrs	r3, r2
 804b332:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 804b336:	687b      	ldr	r3, [r7, #4]
 804b338:	681b      	ldr	r3, [r3, #0]
 804b33a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804b33e:	2b00      	cmp	r3, #0
 804b340:	d017      	beq.n	804b372 <HAL_RCCEx_PeriphCLKConfig+0x6da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 804b342:	4b0e      	ldr	r3, [pc, #56]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b344:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804b348:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 804b34c:	687b      	ldr	r3, [r7, #4]
 804b34e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804b352:	490a      	ldr	r1, [pc, #40]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b354:	4313      	orrs	r3, r2
 804b356:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 804b35a:	687b      	ldr	r3, [r7, #4]
 804b35c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804b360:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804b364:	d105      	bne.n	804b372 <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804b366:	4b05      	ldr	r3, [pc, #20]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b368:	68db      	ldr	r3, [r3, #12]
 804b36a:	4a04      	ldr	r2, [pc, #16]	; (804b37c <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804b36c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804b370:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 804b372:	7fbb      	ldrb	r3, [r7, #30]
}
 804b374:	4618      	mov	r0, r3
 804b376:	3720      	adds	r7, #32
 804b378:	46bd      	mov	sp, r7
 804b37a:	bd80      	pop	{r7, pc}
 804b37c:	40021000 	.word	0x40021000

0804b380 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 804b380:	b580      	push	{r7, lr}
 804b382:	b084      	sub	sp, #16
 804b384:	af00      	add	r7, sp, #0
 804b386:	6078      	str	r0, [r7, #4]
 804b388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 804b38a:	2300      	movs	r3, #0
 804b38c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 804b38e:	687b      	ldr	r3, [r7, #4]
 804b390:	681b      	ldr	r3, [r3, #0]
 804b392:	2b03      	cmp	r3, #3
 804b394:	d018      	beq.n	804b3c8 <RCCEx_PLLSAI1_Config+0x48>
 804b396:	2b03      	cmp	r3, #3
 804b398:	d81f      	bhi.n	804b3da <RCCEx_PLLSAI1_Config+0x5a>
 804b39a:	2b01      	cmp	r3, #1
 804b39c:	d002      	beq.n	804b3a4 <RCCEx_PLLSAI1_Config+0x24>
 804b39e:	2b02      	cmp	r3, #2
 804b3a0:	d009      	beq.n	804b3b6 <RCCEx_PLLSAI1_Config+0x36>
 804b3a2:	e01a      	b.n	804b3da <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 804b3a4:	4b5d      	ldr	r3, [pc, #372]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b3a6:	681b      	ldr	r3, [r3, #0]
 804b3a8:	f003 0302 	and.w	r3, r3, #2
 804b3ac:	2b00      	cmp	r3, #0
 804b3ae:	d117      	bne.n	804b3e0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 804b3b0:	2301      	movs	r3, #1
 804b3b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804b3b4:	e014      	b.n	804b3e0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 804b3b6:	4b59      	ldr	r3, [pc, #356]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b3b8:	681b      	ldr	r3, [r3, #0]
 804b3ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804b3be:	2b00      	cmp	r3, #0
 804b3c0:	d110      	bne.n	804b3e4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 804b3c2:	2301      	movs	r3, #1
 804b3c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804b3c6:	e00d      	b.n	804b3e4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 804b3c8:	4b54      	ldr	r3, [pc, #336]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b3ca:	681b      	ldr	r3, [r3, #0]
 804b3cc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 804b3d0:	2b00      	cmp	r3, #0
 804b3d2:	d109      	bne.n	804b3e8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 804b3d4:	2301      	movs	r3, #1
 804b3d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804b3d8:	e006      	b.n	804b3e8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 804b3da:	2301      	movs	r3, #1
 804b3dc:	73fb      	strb	r3, [r7, #15]
      break;
 804b3de:	e004      	b.n	804b3ea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 804b3e0:	bf00      	nop
 804b3e2:	e002      	b.n	804b3ea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 804b3e4:	bf00      	nop
 804b3e6:	e000      	b.n	804b3ea <RCCEx_PLLSAI1_Config+0x6a>
      break;
 804b3e8:	bf00      	nop
  }

  if (status == HAL_OK)
 804b3ea:	7bfb      	ldrb	r3, [r7, #15]
 804b3ec:	2b00      	cmp	r3, #0
 804b3ee:	f040 808f 	bne.w	804b510 <RCCEx_PLLSAI1_Config+0x190>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 804b3f2:	4b4a      	ldr	r3, [pc, #296]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b3f4:	681b      	ldr	r3, [r3, #0]
 804b3f6:	4a49      	ldr	r2, [pc, #292]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b3f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 804b3fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804b3fe:	f7fb f983 	bl	8046708 <HAL_GetTick>
 804b402:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 804b404:	e009      	b.n	804b41a <RCCEx_PLLSAI1_Config+0x9a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 804b406:	f7fb f97f 	bl	8046708 <HAL_GetTick>
 804b40a:	4602      	mov	r2, r0
 804b40c:	68bb      	ldr	r3, [r7, #8]
 804b40e:	1ad3      	subs	r3, r2, r3
 804b410:	2b02      	cmp	r3, #2
 804b412:	d902      	bls.n	804b41a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_TIMEOUT;
 804b414:	2303      	movs	r3, #3
 804b416:	73fb      	strb	r3, [r7, #15]
        break;
 804b418:	e005      	b.n	804b426 <RCCEx_PLLSAI1_Config+0xa6>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 804b41a:	4b40      	ldr	r3, [pc, #256]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b41c:	681b      	ldr	r3, [r3, #0]
 804b41e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 804b422:	2b00      	cmp	r3, #0
 804b424:	d1ef      	bne.n	804b406 <RCCEx_PLLSAI1_Config+0x86>
      }
    }

    if (status == HAL_OK)
 804b426:	7bfb      	ldrb	r3, [r7, #15]
 804b428:	2b00      	cmp	r3, #0
 804b42a:	d171      	bne.n	804b510 <RCCEx_PLLSAI1_Config+0x190>
    {
      if (Divider == DIVIDER_P_UPDATE)
 804b42c:	683b      	ldr	r3, [r7, #0]
 804b42e:	2b00      	cmp	r3, #0
 804b430:	d116      	bne.n	804b460 <RCCEx_PLLSAI1_Config+0xe0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 804b432:	4b3a      	ldr	r3, [pc, #232]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b434:	691a      	ldr	r2, [r3, #16]
 804b436:	4b3a      	ldr	r3, [pc, #232]	; (804b520 <RCCEx_PLLSAI1_Config+0x1a0>)
 804b438:	4013      	ands	r3, r2
 804b43a:	687a      	ldr	r2, [r7, #4]
 804b43c:	6892      	ldr	r2, [r2, #8]
 804b43e:	0211      	lsls	r1, r2, #8
 804b440:	687a      	ldr	r2, [r7, #4]
 804b442:	68d2      	ldr	r2, [r2, #12]
 804b444:	06d2      	lsls	r2, r2, #27
 804b446:	4311      	orrs	r1, r2
 804b448:	687a      	ldr	r2, [r7, #4]
 804b44a:	6852      	ldr	r2, [r2, #4]
 804b44c:	3a01      	subs	r2, #1
 804b44e:	0112      	lsls	r2, r2, #4
 804b450:	4311      	orrs	r1, r2
 804b452:	687a      	ldr	r2, [r7, #4]
 804b454:	6812      	ldr	r2, [r2, #0]
 804b456:	430a      	orrs	r2, r1
 804b458:	4930      	ldr	r1, [pc, #192]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b45a:	4313      	orrs	r3, r2
 804b45c:	610b      	str	r3, [r1, #16]
 804b45e:	e033      	b.n	804b4c8 <RCCEx_PLLSAI1_Config+0x148>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 804b460:	683b      	ldr	r3, [r7, #0]
 804b462:	2b01      	cmp	r3, #1
 804b464:	d118      	bne.n	804b498 <RCCEx_PLLSAI1_Config+0x118>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 804b466:	4b2d      	ldr	r3, [pc, #180]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b468:	691a      	ldr	r2, [r3, #16]
 804b46a:	4b2e      	ldr	r3, [pc, #184]	; (804b524 <RCCEx_PLLSAI1_Config+0x1a4>)
 804b46c:	4013      	ands	r3, r2
 804b46e:	687a      	ldr	r2, [r7, #4]
 804b470:	6892      	ldr	r2, [r2, #8]
 804b472:	0211      	lsls	r1, r2, #8
 804b474:	687a      	ldr	r2, [r7, #4]
 804b476:	6912      	ldr	r2, [r2, #16]
 804b478:	0852      	lsrs	r2, r2, #1
 804b47a:	3a01      	subs	r2, #1
 804b47c:	0552      	lsls	r2, r2, #21
 804b47e:	4311      	orrs	r1, r2
 804b480:	687a      	ldr	r2, [r7, #4]
 804b482:	6852      	ldr	r2, [r2, #4]
 804b484:	3a01      	subs	r2, #1
 804b486:	0112      	lsls	r2, r2, #4
 804b488:	4311      	orrs	r1, r2
 804b48a:	687a      	ldr	r2, [r7, #4]
 804b48c:	6812      	ldr	r2, [r2, #0]
 804b48e:	430a      	orrs	r2, r1
 804b490:	4922      	ldr	r1, [pc, #136]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b492:	4313      	orrs	r3, r2
 804b494:	610b      	str	r3, [r1, #16]
 804b496:	e017      	b.n	804b4c8 <RCCEx_PLLSAI1_Config+0x148>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 804b498:	4b20      	ldr	r3, [pc, #128]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b49a:	691a      	ldr	r2, [r3, #16]
 804b49c:	4b22      	ldr	r3, [pc, #136]	; (804b528 <RCCEx_PLLSAI1_Config+0x1a8>)
 804b49e:	4013      	ands	r3, r2
 804b4a0:	687a      	ldr	r2, [r7, #4]
 804b4a2:	6892      	ldr	r2, [r2, #8]
 804b4a4:	0211      	lsls	r1, r2, #8
 804b4a6:	687a      	ldr	r2, [r7, #4]
 804b4a8:	6952      	ldr	r2, [r2, #20]
 804b4aa:	0852      	lsrs	r2, r2, #1
 804b4ac:	3a01      	subs	r2, #1
 804b4ae:	0652      	lsls	r2, r2, #25
 804b4b0:	4311      	orrs	r1, r2
 804b4b2:	687a      	ldr	r2, [r7, #4]
 804b4b4:	6852      	ldr	r2, [r2, #4]
 804b4b6:	3a01      	subs	r2, #1
 804b4b8:	0112      	lsls	r2, r2, #4
 804b4ba:	4311      	orrs	r1, r2
 804b4bc:	687a      	ldr	r2, [r7, #4]
 804b4be:	6812      	ldr	r2, [r2, #0]
 804b4c0:	430a      	orrs	r2, r1
 804b4c2:	4916      	ldr	r1, [pc, #88]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b4c4:	4313      	orrs	r3, r2
 804b4c6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 804b4c8:	4b14      	ldr	r3, [pc, #80]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b4ca:	681b      	ldr	r3, [r3, #0]
 804b4cc:	4a13      	ldr	r2, [pc, #76]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b4ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 804b4d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804b4d4:	f7fb f918 	bl	8046708 <HAL_GetTick>
 804b4d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 804b4da:	e009      	b.n	804b4f0 <RCCEx_PLLSAI1_Config+0x170>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 804b4dc:	f7fb f914 	bl	8046708 <HAL_GetTick>
 804b4e0:	4602      	mov	r2, r0
 804b4e2:	68bb      	ldr	r3, [r7, #8]
 804b4e4:	1ad3      	subs	r3, r2, r3
 804b4e6:	2b02      	cmp	r3, #2
 804b4e8:	d902      	bls.n	804b4f0 <RCCEx_PLLSAI1_Config+0x170>
        {
          status = HAL_TIMEOUT;
 804b4ea:	2303      	movs	r3, #3
 804b4ec:	73fb      	strb	r3, [r7, #15]
          break;
 804b4ee:	e005      	b.n	804b4fc <RCCEx_PLLSAI1_Config+0x17c>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 804b4f0:	4b0a      	ldr	r3, [pc, #40]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b4f2:	681b      	ldr	r3, [r3, #0]
 804b4f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 804b4f8:	2b00      	cmp	r3, #0
 804b4fa:	d0ef      	beq.n	804b4dc <RCCEx_PLLSAI1_Config+0x15c>
        }
      }

      if (status == HAL_OK)
 804b4fc:	7bfb      	ldrb	r3, [r7, #15]
 804b4fe:	2b00      	cmp	r3, #0
 804b500:	d106      	bne.n	804b510 <RCCEx_PLLSAI1_Config+0x190>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 804b502:	4b06      	ldr	r3, [pc, #24]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b504:	691a      	ldr	r2, [r3, #16]
 804b506:	687b      	ldr	r3, [r7, #4]
 804b508:	699b      	ldr	r3, [r3, #24]
 804b50a:	4904      	ldr	r1, [pc, #16]	; (804b51c <RCCEx_PLLSAI1_Config+0x19c>)
 804b50c:	4313      	orrs	r3, r2
 804b50e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 804b510:	7bfb      	ldrb	r3, [r7, #15]
}
 804b512:	4618      	mov	r0, r3
 804b514:	3710      	adds	r7, #16
 804b516:	46bd      	mov	sp, r7
 804b518:	bd80      	pop	{r7, pc}
 804b51a:	bf00      	nop
 804b51c:	40021000 	.word	0x40021000
 804b520:	07ff800c 	.word	0x07ff800c
 804b524:	ff9f800c 	.word	0xff9f800c
 804b528:	f9ff800c 	.word	0xf9ff800c

0804b52c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 804b52c:	b580      	push	{r7, lr}
 804b52e:	b084      	sub	sp, #16
 804b530:	af00      	add	r7, sp, #0
 804b532:	6078      	str	r0, [r7, #4]
 804b534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 804b536:	2300      	movs	r3, #0
 804b538:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 804b53a:	687b      	ldr	r3, [r7, #4]
 804b53c:	681b      	ldr	r3, [r3, #0]
 804b53e:	2b03      	cmp	r3, #3
 804b540:	d018      	beq.n	804b574 <RCCEx_PLLSAI2_Config+0x48>
 804b542:	2b03      	cmp	r3, #3
 804b544:	d81f      	bhi.n	804b586 <RCCEx_PLLSAI2_Config+0x5a>
 804b546:	2b01      	cmp	r3, #1
 804b548:	d002      	beq.n	804b550 <RCCEx_PLLSAI2_Config+0x24>
 804b54a:	2b02      	cmp	r3, #2
 804b54c:	d009      	beq.n	804b562 <RCCEx_PLLSAI2_Config+0x36>
 804b54e:	e01a      	b.n	804b586 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 804b550:	4b42      	ldr	r3, [pc, #264]	; (804b65c <RCCEx_PLLSAI2_Config+0x130>)
 804b552:	681b      	ldr	r3, [r3, #0]
 804b554:	f003 0302 	and.w	r3, r3, #2
 804b558:	2b00      	cmp	r3, #0
 804b55a:	d117      	bne.n	804b58c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 804b55c:	2301      	movs	r3, #1
 804b55e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804b560:	e014      	b.n	804b58c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 804b562:	4b3e      	ldr	r3, [pc, #248]	; (804b65c <RCCEx_PLLSAI2_Config+0x130>)
 804b564:	681b      	ldr	r3, [r3, #0]
 804b566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804b56a:	2b00      	cmp	r3, #0
 804b56c:	d110      	bne.n	804b590 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 804b56e:	2301      	movs	r3, #1
 804b570:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804b572:	e00d      	b.n	804b590 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 804b574:	4b39      	ldr	r3, [pc, #228]	; (804b65c <RCCEx_PLLSAI2_Config+0x130>)
 804b576:	681b      	ldr	r3, [r3, #0]
 804b578:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 804b57c:	2b00      	cmp	r3, #0
 804b57e:	d109      	bne.n	804b594 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 804b580:	2301      	movs	r3, #1
 804b582:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804b584:	e006      	b.n	804b594 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 804b586:	2301      	movs	r3, #1
 804b588:	73fb      	strb	r3, [r7, #15]
      break;
 804b58a:	e004      	b.n	804b596 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 804b58c:	bf00      	nop
 804b58e:	e002      	b.n	804b596 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 804b590:	bf00      	nop
 804b592:	e000      	b.n	804b596 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 804b594:	bf00      	nop
  }

  if (status == HAL_OK)
 804b596:	7bfb      	ldrb	r3, [r7, #15]
 804b598:	2b00      	cmp	r3, #0
 804b59a:	d159      	bne.n	804b650 <RCCEx_PLLSAI2_Config+0x124>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 804b59c:	4b2f      	ldr	r3, [pc, #188]	; (804b65c <RCCEx_PLLSAI2_Config+0x130>)
 804b59e:	681b      	ldr	r3, [r3, #0]
 804b5a0:	4a2e      	ldr	r2, [pc, #184]	; (804b65c <RCCEx_PLLSAI2_Config+0x130>)
 804b5a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804b5a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804b5a8:	f7fb f8ae 	bl	8046708 <HAL_GetTick>
 804b5ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 804b5ae:	e009      	b.n	804b5c4 <RCCEx_PLLSAI2_Config+0x98>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 804b5b0:	f7fb f8aa 	bl	8046708 <HAL_GetTick>
 804b5b4:	4602      	mov	r2, r0
 804b5b6:	68bb      	ldr	r3, [r7, #8]
 804b5b8:	1ad3      	subs	r3, r2, r3
 804b5ba:	2b02      	cmp	r3, #2
 804b5bc:	d902      	bls.n	804b5c4 <RCCEx_PLLSAI2_Config+0x98>
      {
        status = HAL_TIMEOUT;
 804b5be:	2303      	movs	r3, #3
 804b5c0:	73fb      	strb	r3, [r7, #15]
        break;
 804b5c2:	e005      	b.n	804b5d0 <RCCEx_PLLSAI2_Config+0xa4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 804b5c4:	4b25      	ldr	r3, [pc, #148]	; (804b65c <RCCEx_PLLSAI2_Config+0x130>)
 804b5c6:	681b      	ldr	r3, [r3, #0]
 804b5c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804b5cc:	2b00      	cmp	r3, #0
 804b5ce:	d1ef      	bne.n	804b5b0 <RCCEx_PLLSAI2_Config+0x84>
      }
    }

    if (status == HAL_OK)
 804b5d0:	7bfb      	ldrb	r3, [r7, #15]
 804b5d2:	2b00      	cmp	r3, #0
 804b5d4:	d13c      	bne.n	804b650 <RCCEx_PLLSAI2_Config+0x124>
    {
      if (Divider == DIVIDER_P_UPDATE)
 804b5d6:	683b      	ldr	r3, [r7, #0]
 804b5d8:	2b00      	cmp	r3, #0
 804b5da:	d115      	bne.n	804b608 <RCCEx_PLLSAI2_Config+0xdc>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 804b5dc:	4b1f      	ldr	r3, [pc, #124]	; (804b65c <RCCEx_PLLSAI2_Config+0x130>)
 804b5de:	695a      	ldr	r2, [r3, #20]
 804b5e0:	4b1f      	ldr	r3, [pc, #124]	; (804b660 <RCCEx_PLLSAI2_Config+0x134>)
 804b5e2:	4013      	ands	r3, r2
 804b5e4:	687a      	ldr	r2, [r7, #4]
 804b5e6:	6892      	ldr	r2, [r2, #8]
 804b5e8:	0211      	lsls	r1, r2, #8
 804b5ea:	687a      	ldr	r2, [r7, #4]
 804b5ec:	68d2      	ldr	r2, [r2, #12]
 804b5ee:	06d2      	lsls	r2, r2, #27
 804b5f0:	4311      	orrs	r1, r2
 804b5f2:	687a      	ldr	r2, [r7, #4]
 804b5f4:	6852      	ldr	r2, [r2, #4]
 804b5f6:	3a01      	subs	r2, #1
 804b5f8:	0112      	lsls	r2, r2, #4
 804b5fa:	4311      	orrs	r1, r2
 804b5fc:	687a      	ldr	r2, [r7, #4]
 804b5fe:	6812      	ldr	r2, [r2, #0]
 804b600:	430a      	orrs	r2, r1
 804b602:	4916      	ldr	r1, [pc, #88]	; (804b65c <RCCEx_PLLSAI2_Config+0x130>)
 804b604:	4313      	orrs	r3, r2
 804b606:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 804b608:	4b14      	ldr	r3, [pc, #80]	; (804b65c <RCCEx_PLLSAI2_Config+0x130>)
 804b60a:	681b      	ldr	r3, [r3, #0]
 804b60c:	4a13      	ldr	r2, [pc, #76]	; (804b65c <RCCEx_PLLSAI2_Config+0x130>)
 804b60e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804b612:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804b614:	f7fb f878 	bl	8046708 <HAL_GetTick>
 804b618:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 804b61a:	e009      	b.n	804b630 <RCCEx_PLLSAI2_Config+0x104>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 804b61c:	f7fb f874 	bl	8046708 <HAL_GetTick>
 804b620:	4602      	mov	r2, r0
 804b622:	68bb      	ldr	r3, [r7, #8]
 804b624:	1ad3      	subs	r3, r2, r3
 804b626:	2b02      	cmp	r3, #2
 804b628:	d902      	bls.n	804b630 <RCCEx_PLLSAI2_Config+0x104>
        {
          status = HAL_TIMEOUT;
 804b62a:	2303      	movs	r3, #3
 804b62c:	73fb      	strb	r3, [r7, #15]
          break;
 804b62e:	e005      	b.n	804b63c <RCCEx_PLLSAI2_Config+0x110>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 804b630:	4b0a      	ldr	r3, [pc, #40]	; (804b65c <RCCEx_PLLSAI2_Config+0x130>)
 804b632:	681b      	ldr	r3, [r3, #0]
 804b634:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 804b638:	2b00      	cmp	r3, #0
 804b63a:	d0ef      	beq.n	804b61c <RCCEx_PLLSAI2_Config+0xf0>
        }
      }

      if (status == HAL_OK)
 804b63c:	7bfb      	ldrb	r3, [r7, #15]
 804b63e:	2b00      	cmp	r3, #0
 804b640:	d106      	bne.n	804b650 <RCCEx_PLLSAI2_Config+0x124>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 804b642:	4b06      	ldr	r3, [pc, #24]	; (804b65c <RCCEx_PLLSAI2_Config+0x130>)
 804b644:	695a      	ldr	r2, [r3, #20]
 804b646:	687b      	ldr	r3, [r7, #4]
 804b648:	691b      	ldr	r3, [r3, #16]
 804b64a:	4904      	ldr	r1, [pc, #16]	; (804b65c <RCCEx_PLLSAI2_Config+0x130>)
 804b64c:	4313      	orrs	r3, r2
 804b64e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 804b650:	7bfb      	ldrb	r3, [r7, #15]
}
 804b652:	4618      	mov	r0, r3
 804b654:	3710      	adds	r7, #16
 804b656:	46bd      	mov	sp, r7
 804b658:	bd80      	pop	{r7, pc}
 804b65a:	bf00      	nop
 804b65c:	40021000 	.word	0x40021000
 804b660:	07ff800c 	.word	0x07ff800c

0804b664 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 804b664:	b580      	push	{r7, lr}
 804b666:	b084      	sub	sp, #16
 804b668:	af00      	add	r7, sp, #0
 804b66a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 804b66c:	687b      	ldr	r3, [r7, #4]
 804b66e:	2b00      	cmp	r3, #0
 804b670:	d101      	bne.n	804b676 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 804b672:	2301      	movs	r3, #1
 804b674:	e092      	b.n	804b79c <HAL_RNG_Init+0x138>
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));

#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
  if (hrng->State == HAL_RNG_STATE_RESET)
 804b676:	687b      	ldr	r3, [r7, #4]
 804b678:	7a5b      	ldrb	r3, [r3, #9]
 804b67a:	b2db      	uxtb	r3, r3
 804b67c:	2b00      	cmp	r3, #0
 804b67e:	d113      	bne.n	804b6a8 <HAL_RNG_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 804b680:	687b      	ldr	r3, [r7, #4]
 804b682:	2200      	movs	r2, #0
 804b684:	721a      	strb	r2, [r3, #8]

    hrng->ReadyDataCallback  = HAL_RNG_ReadyDataCallback;  /* Legacy weak ReadyDataCallback  */
 804b686:	687b      	ldr	r3, [r7, #4]
 804b688:	4a46      	ldr	r2, [pc, #280]	; (804b7a4 <HAL_RNG_Init+0x140>)
 804b68a:	615a      	str	r2, [r3, #20]
    hrng->ErrorCallback      = HAL_RNG_ErrorCallback;      /* Legacy weak ErrorCallback      */
 804b68c:	687b      	ldr	r3, [r7, #4]
 804b68e:	4a46      	ldr	r2, [pc, #280]	; (804b7a8 <HAL_RNG_Init+0x144>)
 804b690:	619a      	str	r2, [r3, #24]

    if (hrng->MspInitCallback == NULL)
 804b692:	687b      	ldr	r3, [r7, #4]
 804b694:	69db      	ldr	r3, [r3, #28]
 804b696:	2b00      	cmp	r3, #0
 804b698:	d102      	bne.n	804b6a0 <HAL_RNG_Init+0x3c>
    {
      hrng->MspInitCallback = HAL_RNG_MspInit; /* Legacy weak MspInit  */
 804b69a:	687b      	ldr	r3, [r7, #4]
 804b69c:	4a43      	ldr	r2, [pc, #268]	; (804b7ac <HAL_RNG_Init+0x148>)
 804b69e:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
 804b6a0:	687b      	ldr	r3, [r7, #4]
 804b6a2:	69db      	ldr	r3, [r3, #28]
 804b6a4:	6878      	ldr	r0, [r7, #4]
 804b6a6:	4798      	blx	r3
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 804b6a8:	687b      	ldr	r3, [r7, #4]
 804b6aa:	2202      	movs	r2, #2
 804b6ac:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 804b6ae:	687b      	ldr	r3, [r7, #4]
 804b6b0:	681b      	ldr	r3, [r3, #0]
 804b6b2:	681a      	ldr	r2, [r3, #0]
 804b6b4:	687b      	ldr	r3, [r7, #4]
 804b6b6:	681b      	ldr	r3, [r3, #0]
 804b6b8:	f022 0204 	bic.w	r2, r2, #4
 804b6bc:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 804b6be:	687b      	ldr	r3, [r7, #4]
 804b6c0:	681b      	ldr	r3, [r3, #0]
 804b6c2:	681b      	ldr	r3, [r3, #0]
 804b6c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 804b6c8:	f023 0320 	bic.w	r3, r3, #32
 804b6cc:	687a      	ldr	r2, [r7, #4]
 804b6ce:	6852      	ldr	r2, [r2, #4]
 804b6d0:	431a      	orrs	r2, r3
 804b6d2:	687b      	ldr	r3, [r7, #4]
 804b6d4:	681b      	ldr	r3, [r3, #0]
 804b6d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 804b6da:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 804b6dc:	687b      	ldr	r3, [r7, #4]
 804b6de:	681b      	ldr	r3, [r3, #0]
 804b6e0:	4a33      	ldr	r2, [pc, #204]	; (804b7b0 <HAL_RNG_Init+0x14c>)
 804b6e2:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 804b6e4:	687b      	ldr	r3, [r7, #4]
 804b6e6:	681b      	ldr	r3, [r3, #0]
 804b6e8:	4a32      	ldr	r2, [pc, #200]	; (804b7b4 <HAL_RNG_Init+0x150>)
 804b6ea:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 804b6ec:	687b      	ldr	r3, [r7, #4]
 804b6ee:	681b      	ldr	r3, [r3, #0]
 804b6f0:	681a      	ldr	r2, [r3, #0]
 804b6f2:	687b      	ldr	r3, [r7, #4]
 804b6f4:	681b      	ldr	r3, [r3, #0]
 804b6f6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 804b6fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 804b6fc:	f7fb f804 	bl	8046708 <HAL_GetTick>
 804b700:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 804b702:	e00e      	b.n	804b722 <HAL_RNG_Init+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 804b704:	f7fb f800 	bl	8046708 <HAL_GetTick>
 804b708:	4602      	mov	r2, r0
 804b70a:	68fb      	ldr	r3, [r7, #12]
 804b70c:	1ad3      	subs	r3, r2, r3
 804b70e:	2b02      	cmp	r3, #2
 804b710:	d907      	bls.n	804b722 <HAL_RNG_Init+0xbe>
    {
      hrng->State = HAL_RNG_STATE_READY;
 804b712:	687b      	ldr	r3, [r7, #4]
 804b714:	2201      	movs	r2, #1
 804b716:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 804b718:	687b      	ldr	r3, [r7, #4]
 804b71a:	2202      	movs	r2, #2
 804b71c:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 804b71e:	2301      	movs	r3, #1
 804b720:	e03c      	b.n	804b79c <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 804b722:	687b      	ldr	r3, [r7, #4]
 804b724:	681b      	ldr	r3, [r3, #0]
 804b726:	681b      	ldr	r3, [r3, #0]
 804b728:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 804b72c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804b730:	d0e8      	beq.n	804b704 <HAL_RNG_Init+0xa0>
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 804b732:	687b      	ldr	r3, [r7, #4]
 804b734:	681b      	ldr	r3, [r3, #0]
 804b736:	681a      	ldr	r2, [r3, #0]
 804b738:	687b      	ldr	r3, [r7, #4]
 804b73a:	681b      	ldr	r3, [r3, #0]
 804b73c:	f042 0204 	orr.w	r2, r2, #4
 804b740:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 804b742:	687b      	ldr	r3, [r7, #4]
 804b744:	681b      	ldr	r3, [r3, #0]
 804b746:	685b      	ldr	r3, [r3, #4]
 804b748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804b74c:	2b40      	cmp	r3, #64	; 0x40
 804b74e:	d104      	bne.n	804b75a <HAL_RNG_Init+0xf6>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 804b750:	687b      	ldr	r3, [r7, #4]
 804b752:	2204      	movs	r2, #4
 804b754:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 804b756:	2301      	movs	r3, #1
 804b758:	e020      	b.n	804b79c <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 804b75a:	f7fa ffd5 	bl	8046708 <HAL_GetTick>
 804b75e:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 804b760:	e00e      	b.n	804b780 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 804b762:	f7fa ffd1 	bl	8046708 <HAL_GetTick>
 804b766:	4602      	mov	r2, r0
 804b768:	68fb      	ldr	r3, [r7, #12]
 804b76a:	1ad3      	subs	r3, r2, r3
 804b76c:	2b02      	cmp	r3, #2
 804b76e:	d907      	bls.n	804b780 <HAL_RNG_Init+0x11c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 804b770:	687b      	ldr	r3, [r7, #4]
 804b772:	2204      	movs	r2, #4
 804b774:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 804b776:	687b      	ldr	r3, [r7, #4]
 804b778:	2202      	movs	r2, #2
 804b77a:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 804b77c:	2301      	movs	r3, #1
 804b77e:	e00d      	b.n	804b79c <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 804b780:	687b      	ldr	r3, [r7, #4]
 804b782:	681b      	ldr	r3, [r3, #0]
 804b784:	685b      	ldr	r3, [r3, #4]
 804b786:	f003 0304 	and.w	r3, r3, #4
 804b78a:	2b04      	cmp	r3, #4
 804b78c:	d0e9      	beq.n	804b762 <HAL_RNG_Init+0xfe>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 804b78e:	687b      	ldr	r3, [r7, #4]
 804b790:	2201      	movs	r2, #1
 804b792:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 804b794:	687b      	ldr	r3, [r7, #4]
 804b796:	2200      	movs	r2, #0
 804b798:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 804b79a:	2300      	movs	r3, #0
}
 804b79c:	4618      	mov	r0, r3
 804b79e:	3710      	adds	r7, #16
 804b7a0:	46bd      	mov	sp, r7
 804b7a2:	bd80      	pop	{r7, pc}
 804b7a4:	0804b899 	.word	0x0804b899
 804b7a8:	0804b8af 	.word	0x0804b8af
 804b7ac:	080416d5 	.word	0x080416d5
 804b7b0:	17590abc 	.word	0x17590abc
 804b7b4:	000caa74 	.word	0x000caa74

0804b7b8 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 804b7b8:	b580      	push	{r7, lr}
 804b7ba:	b084      	sub	sp, #16
 804b7bc:	af00      	add	r7, sp, #0
 804b7be:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 804b7c0:	2300      	movs	r3, #0
 804b7c2:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 804b7c4:	687b      	ldr	r3, [r7, #4]
 804b7c6:	681b      	ldr	r3, [r3, #0]
 804b7c8:	685b      	ldr	r3, [r3, #4]
 804b7ca:	f003 0320 	and.w	r3, r3, #32
 804b7ce:	2b20      	cmp	r3, #32
 804b7d0:	d105      	bne.n	804b7de <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 804b7d2:	687b      	ldr	r3, [r7, #4]
 804b7d4:	2210      	movs	r2, #16
 804b7d6:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 804b7d8:	2301      	movs	r3, #1
 804b7da:	60fb      	str	r3, [r7, #12]
 804b7dc:	e023      	b.n	804b826 <HAL_RNG_IRQHandler+0x6e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 804b7de:	687b      	ldr	r3, [r7, #4]
 804b7e0:	681b      	ldr	r3, [r3, #0]
 804b7e2:	685b      	ldr	r3, [r3, #4]
 804b7e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804b7e8:	2b40      	cmp	r3, #64	; 0x40
 804b7ea:	d11c      	bne.n	804b826 <HAL_RNG_IRQHandler+0x6e>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 804b7ec:	687b      	ldr	r3, [r7, #4]
 804b7ee:	681b      	ldr	r3, [r3, #0]
 804b7f0:	685b      	ldr	r3, [r3, #4]
 804b7f2:	f003 0304 	and.w	r3, r3, #4
 804b7f6:	2b04      	cmp	r3, #4
 804b7f8:	d008      	beq.n	804b80c <HAL_RNG_IRQHandler+0x54>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 804b7fa:	687b      	ldr	r3, [r7, #4]
 804b7fc:	681b      	ldr	r3, [r3, #0]
 804b7fe:	685a      	ldr	r2, [r3, #4]
 804b800:	687b      	ldr	r3, [r7, #4]
 804b802:	681b      	ldr	r3, [r3, #0]
 804b804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804b808:	605a      	str	r2, [r3, #4]
 804b80a:	e00c      	b.n	804b826 <HAL_RNG_IRQHandler+0x6e>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 804b80c:	687b      	ldr	r3, [r7, #4]
 804b80e:	2208      	movs	r2, #8
 804b810:	60da      	str	r2, [r3, #12]
      rngclockerror = 1U;
 804b812:	2301      	movs	r3, #1
 804b814:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 804b816:	687b      	ldr	r3, [r7, #4]
 804b818:	681b      	ldr	r3, [r3, #0]
 804b81a:	681a      	ldr	r2, [r3, #0]
 804b81c:	687b      	ldr	r3, [r7, #4]
 804b81e:	681b      	ldr	r3, [r3, #0]
 804b820:	f022 0208 	bic.w	r2, r2, #8
 804b824:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 804b826:	68fb      	ldr	r3, [r7, #12]
 804b828:	2b01      	cmp	r3, #1
 804b82a:	d10c      	bne.n	804b846 <HAL_RNG_IRQHandler+0x8e>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 804b82c:	687b      	ldr	r3, [r7, #4]
 804b82e:	2204      	movs	r2, #4
 804b830:	725a      	strb	r2, [r3, #9]

#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
 804b832:	687b      	ldr	r3, [r7, #4]
 804b834:	699b      	ldr	r3, [r3, #24]
 804b836:	6878      	ldr	r0, [r7, #4]
 804b838:	4798      	blx	r3
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 804b83a:	687b      	ldr	r3, [r7, #4]
 804b83c:	681b      	ldr	r3, [r3, #0]
 804b83e:	f06f 0260 	mvn.w	r2, #96	; 0x60
 804b842:	605a      	str	r2, [r3, #4]

    return;
 804b844:	e025      	b.n	804b892 <HAL_RNG_IRQHandler+0xda>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 804b846:	687b      	ldr	r3, [r7, #4]
 804b848:	681b      	ldr	r3, [r3, #0]
 804b84a:	685b      	ldr	r3, [r3, #4]
 804b84c:	f003 0301 	and.w	r3, r3, #1
 804b850:	2b01      	cmp	r3, #1
 804b852:	d11e      	bne.n	804b892 <HAL_RNG_IRQHandler+0xda>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 804b854:	687b      	ldr	r3, [r7, #4]
 804b856:	681b      	ldr	r3, [r3, #0]
 804b858:	681a      	ldr	r2, [r3, #0]
 804b85a:	687b      	ldr	r3, [r7, #4]
 804b85c:	681b      	ldr	r3, [r3, #0]
 804b85e:	f022 0208 	bic.w	r2, r2, #8
 804b862:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 804b864:	687b      	ldr	r3, [r7, #4]
 804b866:	681b      	ldr	r3, [r3, #0]
 804b868:	689a      	ldr	r2, [r3, #8]
 804b86a:	687b      	ldr	r3, [r7, #4]
 804b86c:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 804b86e:	687b      	ldr	r3, [r7, #4]
 804b870:	7a5b      	ldrb	r3, [r3, #9]
 804b872:	b2db      	uxtb	r3, r3
 804b874:	2b04      	cmp	r3, #4
 804b876:	d00c      	beq.n	804b892 <HAL_RNG_IRQHandler+0xda>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 804b878:	687b      	ldr	r3, [r7, #4]
 804b87a:	2201      	movs	r2, #1
 804b87c:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 804b87e:	687b      	ldr	r3, [r7, #4]
 804b880:	2200      	movs	r2, #0
 804b882:	721a      	strb	r2, [r3, #8]

#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
 804b884:	687b      	ldr	r3, [r7, #4]
 804b886:	695b      	ldr	r3, [r3, #20]
 804b888:	687a      	ldr	r2, [r7, #4]
 804b88a:	6912      	ldr	r2, [r2, #16]
 804b88c:	4611      	mov	r1, r2
 804b88e:	6878      	ldr	r0, [r7, #4]
 804b890:	4798      	blx	r3
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 804b892:	3710      	adds	r7, #16
 804b894:	46bd      	mov	sp, r7
 804b896:	bd80      	pop	{r7, pc}

0804b898 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 804b898:	b480      	push	{r7}
 804b89a:	b083      	sub	sp, #12
 804b89c:	af00      	add	r7, sp, #0
 804b89e:	6078      	str	r0, [r7, #4]
 804b8a0:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 804b8a2:	bf00      	nop
 804b8a4:	370c      	adds	r7, #12
 804b8a6:	46bd      	mov	sp, r7
 804b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b8ac:	4770      	bx	lr

0804b8ae <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 804b8ae:	b480      	push	{r7}
 804b8b0:	b083      	sub	sp, #12
 804b8b2:	af00      	add	r7, sp, #0
 804b8b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 804b8b6:	bf00      	nop
 804b8b8:	370c      	adds	r7, #12
 804b8ba:	46bd      	mov	sp, r7
 804b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804b8c0:	4770      	bx	lr
	...

0804b8c4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 804b8c4:	b580      	push	{r7, lr}
 804b8c6:	b084      	sub	sp, #16
 804b8c8:	af00      	add	r7, sp, #0
 804b8ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 804b8cc:	2301      	movs	r3, #1
 804b8ce:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 804b8d0:	687b      	ldr	r3, [r7, #4]
 804b8d2:	2b00      	cmp	r3, #0
 804b8d4:	f000 809f 	beq.w	804ba16 <HAL_RTC_Init+0x152>
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    if (hrtc->State == HAL_RTC_STATE_RESET)
 804b8d8:	687b      	ldr	r3, [r7, #4]
 804b8da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 804b8de:	b2db      	uxtb	r3, r3
 804b8e0:	2b00      	cmp	r3, #0
 804b8e2:	d148      	bne.n	804b976 <HAL_RTC_Init+0xb2>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 804b8e4:	687b      	ldr	r3, [r7, #4]
 804b8e6:	2200      	movs	r2, #0
 804b8e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;             /* Legacy weak AlarmAEventCallback      */
 804b8ec:	687b      	ldr	r3, [r7, #4]
 804b8ee:	4a4c      	ldr	r2, [pc, #304]	; (804ba20 <HAL_RTC_Init+0x15c>)
 804b8f0:	629a      	str	r2, [r3, #40]	; 0x28
      hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak AlarmBEventCallback      */
 804b8f2:	687b      	ldr	r3, [r7, #4]
 804b8f4:	4a4b      	ldr	r2, [pc, #300]	; (804ba24 <HAL_RTC_Init+0x160>)
 804b8f6:	62da      	str	r2, [r3, #44]	; 0x2c
      hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;        /* Legacy weak TimeStampEventCallback   */
 804b8f8:	687b      	ldr	r3, [r7, #4]
 804b8fa:	4a4b      	ldr	r2, [pc, #300]	; (804ba28 <HAL_RTC_Init+0x164>)
 804b8fc:	631a      	str	r2, [r3, #48]	; 0x30
      hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback;      /* Legacy weak WakeUpTimerEventCallback */
 804b8fe:	687b      	ldr	r3, [r7, #4]
 804b900:	4a4a      	ldr	r2, [pc, #296]	; (804ba2c <HAL_RTC_Init+0x168>)
 804b902:	635a      	str	r2, [r3, #52]	; 0x34
      hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;          /* Legacy weak Tamper1EventCallback     */
 804b904:	687b      	ldr	r3, [r7, #4]
 804b906:	4a4a      	ldr	r2, [pc, #296]	; (804ba30 <HAL_RTC_Init+0x16c>)
 804b908:	639a      	str	r2, [r3, #56]	; 0x38
      hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;          /* Legacy weak Tamper2EventCallback     */
 804b90a:	687b      	ldr	r3, [r7, #4]
 804b90c:	4a49      	ldr	r2, [pc, #292]	; (804ba34 <HAL_RTC_Init+0x170>)
 804b90e:	63da      	str	r2, [r3, #60]	; 0x3c
      hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;          /* Legacy weak Tamper3EventCallback     */
 804b910:	687b      	ldr	r3, [r7, #4]
 804b912:	4a49      	ldr	r2, [pc, #292]	; (804ba38 <HAL_RTC_Init+0x174>)
 804b914:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Tamper4EventCallback         =  HAL_RTCEx_Tamper4EventCallback;          /* Legacy weak Tamper4EventCallback     */
 804b916:	687b      	ldr	r3, [r7, #4]
 804b918:	4a48      	ldr	r2, [pc, #288]	; (804ba3c <HAL_RTC_Init+0x178>)
 804b91a:	645a      	str	r2, [r3, #68]	; 0x44
      hrtc->Tamper5EventCallback         =  HAL_RTCEx_Tamper5EventCallback;          /* Legacy weak Tamper5EventCallback     */
 804b91c:	687b      	ldr	r3, [r7, #4]
 804b91e:	4a48      	ldr	r2, [pc, #288]	; (804ba40 <HAL_RTC_Init+0x17c>)
 804b920:	649a      	str	r2, [r3, #72]	; 0x48
      hrtc->Tamper6EventCallback         =  HAL_RTCEx_Tamper6EventCallback;          /* Legacy weak Tamper6EventCallback     */
 804b922:	687b      	ldr	r3, [r7, #4]
 804b924:	4a47      	ldr	r2, [pc, #284]	; (804ba44 <HAL_RTC_Init+0x180>)
 804b926:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Tamper7EventCallback         =  HAL_RTCEx_Tamper7EventCallback;          /* Legacy weak Tamper7EventCallback     */
 804b928:	687b      	ldr	r3, [r7, #4]
 804b92a:	4a47      	ldr	r2, [pc, #284]	; (804ba48 <HAL_RTC_Init+0x184>)
 804b92c:	651a      	str	r2, [r3, #80]	; 0x50
      hrtc->Tamper8EventCallback         =  HAL_RTCEx_Tamper8EventCallback;          /* Legacy weak Tamper8EventCallback     */
 804b92e:	687b      	ldr	r3, [r7, #4]
 804b930:	4a46      	ldr	r2, [pc, #280]	; (804ba4c <HAL_RTC_Init+0x188>)
 804b932:	655a      	str	r2, [r3, #84]	; 0x54
      hrtc->InternalTamper1EventCallback =  HAL_RTCEx_InternalTamper1EventCallback;  /* Legacy weak InternalTamper1EventCallback */
 804b934:	687b      	ldr	r3, [r7, #4]
 804b936:	4a46      	ldr	r2, [pc, #280]	; (804ba50 <HAL_RTC_Init+0x18c>)
 804b938:	659a      	str	r2, [r3, #88]	; 0x58
      hrtc->InternalTamper2EventCallback =  HAL_RTCEx_InternalTamper2EventCallback;  /* Legacy weak InternalTamper2EventCallback */
 804b93a:	687b      	ldr	r3, [r7, #4]
 804b93c:	4a45      	ldr	r2, [pc, #276]	; (804ba54 <HAL_RTC_Init+0x190>)
 804b93e:	65da      	str	r2, [r3, #92]	; 0x5c
      hrtc->InternalTamper3EventCallback =  HAL_RTCEx_InternalTamper3EventCallback;  /* Legacy weak InternalTamper3EventCallback */
 804b940:	687b      	ldr	r3, [r7, #4]
 804b942:	4a45      	ldr	r2, [pc, #276]	; (804ba58 <HAL_RTC_Init+0x194>)
 804b944:	661a      	str	r2, [r3, #96]	; 0x60
      hrtc->InternalTamper5EventCallback =  HAL_RTCEx_InternalTamper5EventCallback;  /* Legacy weak InternalTamper5EventCallback */
 804b946:	687b      	ldr	r3, [r7, #4]
 804b948:	4a44      	ldr	r2, [pc, #272]	; (804ba5c <HAL_RTC_Init+0x198>)
 804b94a:	665a      	str	r2, [r3, #100]	; 0x64
      hrtc->InternalTamper8EventCallback =  HAL_RTCEx_InternalTamper8EventCallback;  /* Legacy weak InternalTamper8EventCallback */
 804b94c:	687b      	ldr	r3, [r7, #4]
 804b94e:	4a44      	ldr	r2, [pc, #272]	; (804ba60 <HAL_RTC_Init+0x19c>)
 804b950:	669a      	str	r2, [r3, #104]	; 0x68

      if (hrtc->MspInitCallback == NULL)
 804b952:	687b      	ldr	r3, [r7, #4]
 804b954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804b956:	2b00      	cmp	r3, #0
 804b958:	d102      	bne.n	804b960 <HAL_RTC_Init+0x9c>
      {
        hrtc->MspInitCallback = HAL_RTC_MspInit;
 804b95a:	687b      	ldr	r3, [r7, #4]
 804b95c:	4a41      	ldr	r2, [pc, #260]	; (804ba64 <HAL_RTC_Init+0x1a0>)
 804b95e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      /* Init the low level hardware */
      hrtc->MspInitCallback(hrtc);
 804b960:	687b      	ldr	r3, [r7, #4]
 804b962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804b964:	6878      	ldr	r0, [r7, #4]
 804b966:	4798      	blx	r3

      if (hrtc->MspDeInitCallback == NULL)
 804b968:	687b      	ldr	r3, [r7, #4]
 804b96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804b96c:	2b00      	cmp	r3, #0
 804b96e:	d102      	bne.n	804b976 <HAL_RTC_Init+0xb2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 804b970:	687b      	ldr	r3, [r7, #4]
 804b972:	4a3d      	ldr	r2, [pc, #244]	; (804ba68 <HAL_RTC_Init+0x1a4>)
 804b974:	671a      	str	r2, [r3, #112]	; 0x70
      HAL_RTC_MspInit(hrtc);
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 804b976:	687b      	ldr	r3, [r7, #4]
 804b978:	2202      	movs	r2, #2
 804b97a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804b97e:	4b3b      	ldr	r3, [pc, #236]	; (804ba6c <HAL_RTC_Init+0x1a8>)
 804b980:	22ca      	movs	r2, #202	; 0xca
 804b982:	625a      	str	r2, [r3, #36]	; 0x24
 804b984:	4b39      	ldr	r3, [pc, #228]	; (804ba6c <HAL_RTC_Init+0x1a8>)
 804b986:	2253      	movs	r2, #83	; 0x53
 804b988:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 804b98a:	6878      	ldr	r0, [r7, #4]
 804b98c:	f000 fa74 	bl	804be78 <RTC_EnterInitMode>
 804b990:	4603      	mov	r3, r0
 804b992:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 804b994:	7bfb      	ldrb	r3, [r7, #15]
 804b996:	2b00      	cmp	r3, #0
 804b998:	d133      	bne.n	804ba02 <HAL_RTC_Init+0x13e>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 804b99a:	4b34      	ldr	r3, [pc, #208]	; (804ba6c <HAL_RTC_Init+0x1a8>)
 804b99c:	699b      	ldr	r3, [r3, #24]
 804b99e:	4a33      	ldr	r2, [pc, #204]	; (804ba6c <HAL_RTC_Init+0x1a8>)
 804b9a0:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 804b9a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 804b9a8:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 804b9aa:	4b30      	ldr	r3, [pc, #192]	; (804ba6c <HAL_RTC_Init+0x1a8>)
 804b9ac:	699a      	ldr	r2, [r3, #24]
 804b9ae:	687b      	ldr	r3, [r7, #4]
 804b9b0:	6859      	ldr	r1, [r3, #4]
 804b9b2:	687b      	ldr	r3, [r7, #4]
 804b9b4:	691b      	ldr	r3, [r3, #16]
 804b9b6:	4319      	orrs	r1, r3
 804b9b8:	687b      	ldr	r3, [r7, #4]
 804b9ba:	699b      	ldr	r3, [r3, #24]
 804b9bc:	430b      	orrs	r3, r1
 804b9be:	492b      	ldr	r1, [pc, #172]	; (804ba6c <HAL_RTC_Init+0x1a8>)
 804b9c0:	4313      	orrs	r3, r2
 804b9c2:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 804b9c4:	687b      	ldr	r3, [r7, #4]
 804b9c6:	68da      	ldr	r2, [r3, #12]
 804b9c8:	687b      	ldr	r3, [r7, #4]
 804b9ca:	689b      	ldr	r3, [r3, #8]
 804b9cc:	041b      	lsls	r3, r3, #16
 804b9ce:	4927      	ldr	r1, [pc, #156]	; (804ba6c <HAL_RTC_Init+0x1a8>)
 804b9d0:	4313      	orrs	r3, r2
 804b9d2:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 804b9d4:	6878      	ldr	r0, [r7, #4]
 804b9d6:	f000 fa83 	bl	804bee0 <RTC_ExitInitMode>
 804b9da:	4603      	mov	r3, r0
 804b9dc:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 804b9de:	7bfb      	ldrb	r3, [r7, #15]
 804b9e0:	2b00      	cmp	r3, #0
 804b9e2:	d10e      	bne.n	804ba02 <HAL_RTC_Init+0x13e>
      {
        MODIFY_REG(RTC->CR, \
 804b9e4:	4b21      	ldr	r3, [pc, #132]	; (804ba6c <HAL_RTC_Init+0x1a8>)
 804b9e6:	699b      	ldr	r3, [r3, #24]
 804b9e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 804b9ec:	687b      	ldr	r3, [r7, #4]
 804b9ee:	6a19      	ldr	r1, [r3, #32]
 804b9f0:	687b      	ldr	r3, [r7, #4]
 804b9f2:	69db      	ldr	r3, [r3, #28]
 804b9f4:	4319      	orrs	r1, r3
 804b9f6:	687b      	ldr	r3, [r7, #4]
 804b9f8:	695b      	ldr	r3, [r3, #20]
 804b9fa:	430b      	orrs	r3, r1
 804b9fc:	491b      	ldr	r1, [pc, #108]	; (804ba6c <HAL_RTC_Init+0x1a8>)
 804b9fe:	4313      	orrs	r3, r2
 804ba00:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804ba02:	4b1a      	ldr	r3, [pc, #104]	; (804ba6c <HAL_RTC_Init+0x1a8>)
 804ba04:	22ff      	movs	r2, #255	; 0xff
 804ba06:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 804ba08:	7bfb      	ldrb	r3, [r7, #15]
 804ba0a:	2b00      	cmp	r3, #0
 804ba0c:	d103      	bne.n	804ba16 <HAL_RTC_Init+0x152>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 804ba0e:	687b      	ldr	r3, [r7, #4]
 804ba10:	2201      	movs	r2, #1
 804ba12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 804ba16:	7bfb      	ldrb	r3, [r7, #15]
}
 804ba18:	4618      	mov	r0, r3
 804ba1a:	3710      	adds	r7, #16
 804ba1c:	46bd      	mov	sp, r7
 804ba1e:	bd80      	pop	{r7, pc}
 804ba20:	08041de5 	.word	0x08041de5
 804ba24:	0804c28d 	.word	0x0804c28d
 804ba28:	0804c0a9 	.word	0x0804c0a9
 804ba2c:	0804c201 	.word	0x0804c201
 804ba30:	0804c2a1 	.word	0x0804c2a1
 804ba34:	0804c2b5 	.word	0x0804c2b5
 804ba38:	0804c2c9 	.word	0x0804c2c9
 804ba3c:	0804c2dd 	.word	0x0804c2dd
 804ba40:	0804c2f1 	.word	0x0804c2f1
 804ba44:	0804c305 	.word	0x0804c305
 804ba48:	0804c319 	.word	0x0804c319
 804ba4c:	0804c32d 	.word	0x0804c32d
 804ba50:	0804c341 	.word	0x0804c341
 804ba54:	0804c355 	.word	0x0804c355
 804ba58:	0804c369 	.word	0x0804c369
 804ba5c:	0804c37d 	.word	0x0804c37d
 804ba60:	0804c391 	.word	0x0804c391
 804ba64:	08041851 	.word	0x08041851
 804ba68:	080418dd 	.word	0x080418dd
 804ba6c:	40002800 	.word	0x40002800

0804ba70 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 804ba70:	b580      	push	{r7, lr}
 804ba72:	b086      	sub	sp, #24
 804ba74:	af00      	add	r7, sp, #0
 804ba76:	60f8      	str	r0, [r7, #12]
 804ba78:	60b9      	str	r1, [r7, #8]
 804ba7a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 804ba7c:	4b29      	ldr	r3, [pc, #164]	; (804bb24 <HAL_RTC_GetTime+0xb4>)
 804ba7e:	689a      	ldr	r2, [r3, #8]
 804ba80:	68bb      	ldr	r3, [r7, #8]
 804ba82:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 804ba84:	4b27      	ldr	r3, [pc, #156]	; (804bb24 <HAL_RTC_GetTime+0xb4>)
 804ba86:	691b      	ldr	r3, [r3, #16]
 804ba88:	f3c3 020e 	ubfx	r2, r3, #0, #15
 804ba8c:	68bb      	ldr	r3, [r7, #8]
 804ba8e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 804ba90:	4b24      	ldr	r3, [pc, #144]	; (804bb24 <HAL_RTC_GetTime+0xb4>)
 804ba92:	681b      	ldr	r3, [r3, #0]
 804ba94:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 804ba98:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 804ba9c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 804ba9e:	697b      	ldr	r3, [r7, #20]
 804baa0:	0c1b      	lsrs	r3, r3, #16
 804baa2:	b2db      	uxtb	r3, r3
 804baa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 804baa8:	b2da      	uxtb	r2, r3
 804baaa:	68bb      	ldr	r3, [r7, #8]
 804baac:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 804baae:	697b      	ldr	r3, [r7, #20]
 804bab0:	0a1b      	lsrs	r3, r3, #8
 804bab2:	b2db      	uxtb	r3, r3
 804bab4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804bab8:	b2da      	uxtb	r2, r3
 804baba:	68bb      	ldr	r3, [r7, #8]
 804babc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 804babe:	697b      	ldr	r3, [r7, #20]
 804bac0:	b2db      	uxtb	r3, r3
 804bac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804bac6:	b2da      	uxtb	r2, r3
 804bac8:	68bb      	ldr	r3, [r7, #8]
 804baca:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 804bacc:	697b      	ldr	r3, [r7, #20]
 804bace:	0d9b      	lsrs	r3, r3, #22
 804bad0:	b2db      	uxtb	r3, r3
 804bad2:	f003 0301 	and.w	r3, r3, #1
 804bad6:	b2da      	uxtb	r2, r3
 804bad8:	68bb      	ldr	r3, [r7, #8]
 804bada:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 804badc:	687b      	ldr	r3, [r7, #4]
 804bade:	2b00      	cmp	r3, #0
 804bae0:	d11a      	bne.n	804bb18 <HAL_RTC_GetTime+0xa8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 804bae2:	68bb      	ldr	r3, [r7, #8]
 804bae4:	781b      	ldrb	r3, [r3, #0]
 804bae6:	4618      	mov	r0, r3
 804bae8:	f000 fa58 	bl	804bf9c <RTC_Bcd2ToByte>
 804baec:	4603      	mov	r3, r0
 804baee:	461a      	mov	r2, r3
 804baf0:	68bb      	ldr	r3, [r7, #8]
 804baf2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 804baf4:	68bb      	ldr	r3, [r7, #8]
 804baf6:	785b      	ldrb	r3, [r3, #1]
 804baf8:	4618      	mov	r0, r3
 804bafa:	f000 fa4f 	bl	804bf9c <RTC_Bcd2ToByte>
 804bafe:	4603      	mov	r3, r0
 804bb00:	461a      	mov	r2, r3
 804bb02:	68bb      	ldr	r3, [r7, #8]
 804bb04:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 804bb06:	68bb      	ldr	r3, [r7, #8]
 804bb08:	789b      	ldrb	r3, [r3, #2]
 804bb0a:	4618      	mov	r0, r3
 804bb0c:	f000 fa46 	bl	804bf9c <RTC_Bcd2ToByte>
 804bb10:	4603      	mov	r3, r0
 804bb12:	461a      	mov	r2, r3
 804bb14:	68bb      	ldr	r3, [r7, #8]
 804bb16:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 804bb18:	2300      	movs	r3, #0
}
 804bb1a:	4618      	mov	r0, r3
 804bb1c:	3718      	adds	r7, #24
 804bb1e:	46bd      	mov	sp, r7
 804bb20:	bd80      	pop	{r7, pc}
 804bb22:	bf00      	nop
 804bb24:	40002800 	.word	0x40002800

0804bb28 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 804bb28:	b580      	push	{r7, lr}
 804bb2a:	b086      	sub	sp, #24
 804bb2c:	af00      	add	r7, sp, #0
 804bb2e:	60f8      	str	r0, [r7, #12]
 804bb30:	60b9      	str	r1, [r7, #8]
 804bb32:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 804bb34:	4b22      	ldr	r3, [pc, #136]	; (804bbc0 <HAL_RTC_GetDate+0x98>)
 804bb36:	685b      	ldr	r3, [r3, #4]
 804bb38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 804bb3c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 804bb40:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 804bb42:	697b      	ldr	r3, [r7, #20]
 804bb44:	0c1b      	lsrs	r3, r3, #16
 804bb46:	b2da      	uxtb	r2, r3
 804bb48:	68bb      	ldr	r3, [r7, #8]
 804bb4a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 804bb4c:	697b      	ldr	r3, [r7, #20]
 804bb4e:	0a1b      	lsrs	r3, r3, #8
 804bb50:	b2db      	uxtb	r3, r3
 804bb52:	f003 031f 	and.w	r3, r3, #31
 804bb56:	b2da      	uxtb	r2, r3
 804bb58:	68bb      	ldr	r3, [r7, #8]
 804bb5a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 804bb5c:	697b      	ldr	r3, [r7, #20]
 804bb5e:	b2db      	uxtb	r3, r3
 804bb60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 804bb64:	b2da      	uxtb	r2, r3
 804bb66:	68bb      	ldr	r3, [r7, #8]
 804bb68:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 804bb6a:	697b      	ldr	r3, [r7, #20]
 804bb6c:	0b5b      	lsrs	r3, r3, #13
 804bb6e:	b2db      	uxtb	r3, r3
 804bb70:	f003 0307 	and.w	r3, r3, #7
 804bb74:	b2da      	uxtb	r2, r3
 804bb76:	68bb      	ldr	r3, [r7, #8]
 804bb78:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 804bb7a:	687b      	ldr	r3, [r7, #4]
 804bb7c:	2b00      	cmp	r3, #0
 804bb7e:	d11a      	bne.n	804bbb6 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 804bb80:	68bb      	ldr	r3, [r7, #8]
 804bb82:	78db      	ldrb	r3, [r3, #3]
 804bb84:	4618      	mov	r0, r3
 804bb86:	f000 fa09 	bl	804bf9c <RTC_Bcd2ToByte>
 804bb8a:	4603      	mov	r3, r0
 804bb8c:	461a      	mov	r2, r3
 804bb8e:	68bb      	ldr	r3, [r7, #8]
 804bb90:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 804bb92:	68bb      	ldr	r3, [r7, #8]
 804bb94:	785b      	ldrb	r3, [r3, #1]
 804bb96:	4618      	mov	r0, r3
 804bb98:	f000 fa00 	bl	804bf9c <RTC_Bcd2ToByte>
 804bb9c:	4603      	mov	r3, r0
 804bb9e:	461a      	mov	r2, r3
 804bba0:	68bb      	ldr	r3, [r7, #8]
 804bba2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 804bba4:	68bb      	ldr	r3, [r7, #8]
 804bba6:	789b      	ldrb	r3, [r3, #2]
 804bba8:	4618      	mov	r0, r3
 804bbaa:	f000 f9f7 	bl	804bf9c <RTC_Bcd2ToByte>
 804bbae:	4603      	mov	r3, r0
 804bbb0:	461a      	mov	r2, r3
 804bbb2:	68bb      	ldr	r3, [r7, #8]
 804bbb4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 804bbb6:	2300      	movs	r3, #0
}
 804bbb8:	4618      	mov	r0, r3
 804bbba:	3718      	adds	r7, #24
 804bbbc:	46bd      	mov	sp, r7
 804bbbe:	bd80      	pop	{r7, pc}
 804bbc0:	40002800 	.word	0x40002800

0804bbc4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 804bbc4:	b590      	push	{r4, r7, lr}
 804bbc6:	b087      	sub	sp, #28
 804bbc8:	af00      	add	r7, sp, #0
 804bbca:	60f8      	str	r0, [r7, #12]
 804bbcc:	60b9      	str	r1, [r7, #8]
 804bbce:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 804bbd0:	68fb      	ldr	r3, [r7, #12]
 804bbd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 804bbd6:	2b01      	cmp	r3, #1
 804bbd8:	d101      	bne.n	804bbde <HAL_RTC_SetAlarm_IT+0x1a>
 804bbda:	2302      	movs	r3, #2
 804bbdc:	e0b4      	b.n	804bd48 <HAL_RTC_SetAlarm_IT+0x184>
 804bbde:	68fb      	ldr	r3, [r7, #12]
 804bbe0:	2201      	movs	r2, #1
 804bbe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 804bbe6:	68fb      	ldr	r3, [r7, #12]
 804bbe8:	2202      	movs	r2, #2
 804bbea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if (Format == RTC_FORMAT_BIN)
 804bbee:	687b      	ldr	r3, [r7, #4]
 804bbf0:	2b00      	cmp	r3, #0
 804bbf2:	d136      	bne.n	804bc62 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 804bbf4:	4b56      	ldr	r3, [pc, #344]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bbf6:	699b      	ldr	r3, [r3, #24]
 804bbf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804bbfc:	2b00      	cmp	r3, #0
 804bbfe:	d102      	bne.n	804bc06 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 804bc00:	68bb      	ldr	r3, [r7, #8]
 804bc02:	2200      	movs	r2, #0
 804bc04:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 804bc06:	68bb      	ldr	r3, [r7, #8]
 804bc08:	781b      	ldrb	r3, [r3, #0]
 804bc0a:	4618      	mov	r0, r3
 804bc0c:	f000 f9a6 	bl	804bf5c <RTC_ByteToBcd2>
 804bc10:	4603      	mov	r3, r0
 804bc12:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 804bc14:	68bb      	ldr	r3, [r7, #8]
 804bc16:	785b      	ldrb	r3, [r3, #1]
 804bc18:	4618      	mov	r0, r3
 804bc1a:	f000 f99f 	bl	804bf5c <RTC_ByteToBcd2>
 804bc1e:	4603      	mov	r3, r0
 804bc20:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 804bc22:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 804bc24:	68bb      	ldr	r3, [r7, #8]
 804bc26:	789b      	ldrb	r3, [r3, #2]
 804bc28:	4618      	mov	r0, r3
 804bc2a:	f000 f997 	bl	804bf5c <RTC_ByteToBcd2>
 804bc2e:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 804bc30:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 804bc34:	68bb      	ldr	r3, [r7, #8]
 804bc36:	78db      	ldrb	r3, [r3, #3]
 804bc38:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 804bc3a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 804bc3e:	68bb      	ldr	r3, [r7, #8]
 804bc40:	f893 3020 	ldrb.w	r3, [r3, #32]
 804bc44:	4618      	mov	r0, r3
 804bc46:	f000 f989 	bl	804bf5c <RTC_ByteToBcd2>
 804bc4a:	4603      	mov	r3, r0
 804bc4c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 804bc4e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 804bc52:	68bb      	ldr	r3, [r7, #8]
 804bc54:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 804bc56:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 804bc58:	68bb      	ldr	r3, [r7, #8]
 804bc5a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 804bc5c:	4313      	orrs	r3, r2
 804bc5e:	617b      	str	r3, [r7, #20]
 804bc60:	e022      	b.n	804bca8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else /* Format BCD */
  {
    if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 804bc62:	4b3b      	ldr	r3, [pc, #236]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bc64:	699b      	ldr	r3, [r3, #24]
 804bc66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804bc6a:	2b00      	cmp	r3, #0
 804bc6c:	d102      	bne.n	804bc74 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 804bc6e:	68bb      	ldr	r3, [r7, #8]
 804bc70:	2200      	movs	r2, #0
 804bc72:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 804bc74:	68bb      	ldr	r3, [r7, #8]
 804bc76:	781b      	ldrb	r3, [r3, #0]
 804bc78:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 804bc7a:	68bb      	ldr	r3, [r7, #8]
 804bc7c:	785b      	ldrb	r3, [r3, #1]
 804bc7e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 804bc80:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 804bc82:	68ba      	ldr	r2, [r7, #8]
 804bc84:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 804bc86:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 804bc88:	68bb      	ldr	r3, [r7, #8]
 804bc8a:	78db      	ldrb	r3, [r3, #3]
 804bc8c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 804bc8e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 804bc90:	68bb      	ldr	r3, [r7, #8]
 804bc92:	f893 3020 	ldrb.w	r3, [r3, #32]
 804bc96:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 804bc98:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 804bc9a:	68bb      	ldr	r3, [r7, #8]
 804bc9c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 804bc9e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 804bca0:	68bb      	ldr	r3, [r7, #8]
 804bca2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 804bca4:	4313      	orrs	r3, r2
 804bca6:	617b      	str	r3, [r7, #20]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 804bca8:	68bb      	ldr	r3, [r7, #8]
 804bcaa:	685a      	ldr	r2, [r3, #4]
 804bcac:	68bb      	ldr	r3, [r7, #8]
 804bcae:	699b      	ldr	r3, [r3, #24]
 804bcb0:	4313      	orrs	r3, r2
 804bcb2:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804bcb4:	4b26      	ldr	r3, [pc, #152]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bcb6:	22ca      	movs	r2, #202	; 0xca
 804bcb8:	625a      	str	r2, [r3, #36]	; 0x24
 804bcba:	4b25      	ldr	r3, [pc, #148]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bcbc:	2253      	movs	r2, #83	; 0x53
 804bcbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 804bcc0:	68bb      	ldr	r3, [r7, #8]
 804bcc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804bcc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804bcc8:	d115      	bne.n	804bcf6 <HAL_RTC_SetAlarm_IT+0x132>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 804bcca:	4b21      	ldr	r3, [pc, #132]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bccc:	699b      	ldr	r3, [r3, #24]
 804bcce:	4a20      	ldr	r2, [pc, #128]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bcd0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 804bcd4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 804bcd6:	4b1e      	ldr	r3, [pc, #120]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bcd8:	2201      	movs	r2, #1
 804bcda:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configure the Alarm A */
    WRITE_REG(RTC->ALRMAR, (uint32_t)tmpreg);
 804bcdc:	4a1c      	ldr	r2, [pc, #112]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bcde:	697b      	ldr	r3, [r7, #20]
 804bce0:	6413      	str	r3, [r2, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    WRITE_REG(RTC->ALRMASSR, subsecondtmpreg);
 804bce2:	4a1b      	ldr	r2, [pc, #108]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bce4:	693b      	ldr	r3, [r7, #16]
 804bce6:	6453      	str	r3, [r2, #68]	; 0x44
    /* Configure the Alarm interrupt : Enable Alarm */
    SET_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 804bce8:	4b19      	ldr	r3, [pc, #100]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bcea:	699b      	ldr	r3, [r3, #24]
 804bcec:	4a18      	ldr	r2, [pc, #96]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bcee:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 804bcf2:	6193      	str	r3, [r2, #24]
 804bcf4:	e014      	b.n	804bd20 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 804bcf6:	4b16      	ldr	r3, [pc, #88]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bcf8:	699b      	ldr	r3, [r3, #24]
 804bcfa:	4a15      	ldr	r2, [pc, #84]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bcfc:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 804bd00:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 804bd02:	4b13      	ldr	r3, [pc, #76]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bd04:	2202      	movs	r2, #2
 804bd06:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configure the Alarm B */
    WRITE_REG(RTC->ALRMBR, (uint32_t)tmpreg);
 804bd08:	4a11      	ldr	r2, [pc, #68]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bd0a:	697b      	ldr	r3, [r7, #20]
 804bd0c:	6493      	str	r3, [r2, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    WRITE_REG(RTC->ALRMBSSR, subsecondtmpreg);
 804bd0e:	4a10      	ldr	r2, [pc, #64]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bd10:	693b      	ldr	r3, [r7, #16]
 804bd12:	64d3      	str	r3, [r2, #76]	; 0x4c
    /* Configure the Alarm B interrupt : Enable Alarm */
    SET_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 804bd14:	4b0e      	ldr	r3, [pc, #56]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bd16:	699b      	ldr	r3, [r3, #24]
 804bd18:	4a0d      	ldr	r2, [pc, #52]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bd1a:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 804bd1e:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 804bd20:	4b0c      	ldr	r3, [pc, #48]	; (804bd54 <HAL_RTC_SetAlarm_IT+0x190>)
 804bd22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804bd26:	4a0b      	ldr	r2, [pc, #44]	; (804bd54 <HAL_RTC_SetAlarm_IT+0x190>)
 804bd28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804bd2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804bd30:	4b07      	ldr	r3, [pc, #28]	; (804bd50 <HAL_RTC_SetAlarm_IT+0x18c>)
 804bd32:	22ff      	movs	r2, #255	; 0xff
 804bd34:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 804bd36:	68fb      	ldr	r3, [r7, #12]
 804bd38:	2201      	movs	r2, #1
 804bd3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 804bd3e:	68fb      	ldr	r3, [r7, #12]
 804bd40:	2200      	movs	r2, #0
 804bd42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 804bd46:	2300      	movs	r3, #0
}
 804bd48:	4618      	mov	r0, r3
 804bd4a:	371c      	adds	r7, #28
 804bd4c:	46bd      	mov	sp, r7
 804bd4e:	bd90      	pop	{r4, r7, pc}
 804bd50:	40002800 	.word	0x40002800
 804bd54:	4002f400 	.word	0x4002f400

0804bd58 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 804bd58:	b480      	push	{r7}
 804bd5a:	b083      	sub	sp, #12
 804bd5c:	af00      	add	r7, sp, #0
 804bd5e:	6078      	str	r0, [r7, #4]
 804bd60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 804bd62:	687b      	ldr	r3, [r7, #4]
 804bd64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 804bd68:	2b01      	cmp	r3, #1
 804bd6a:	d101      	bne.n	804bd70 <HAL_RTC_DeactivateAlarm+0x18>
 804bd6c:	2302      	movs	r3, #2
 804bd6e:	e02a      	b.n	804bdc6 <HAL_RTC_DeactivateAlarm+0x6e>
 804bd70:	687b      	ldr	r3, [r7, #4]
 804bd72:	2201      	movs	r2, #1
 804bd74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 804bd78:	687b      	ldr	r3, [r7, #4]
 804bd7a:	2202      	movs	r2, #2
 804bd7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804bd80:	4b14      	ldr	r3, [pc, #80]	; (804bdd4 <HAL_RTC_DeactivateAlarm+0x7c>)
 804bd82:	22ca      	movs	r2, #202	; 0xca
 804bd84:	625a      	str	r2, [r3, #36]	; 0x24
 804bd86:	4b13      	ldr	r3, [pc, #76]	; (804bdd4 <HAL_RTC_DeactivateAlarm+0x7c>)
 804bd88:	2253      	movs	r2, #83	; 0x53
 804bd8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* In case of interrupt mode is used, the interrupt source must disabled */
  if (Alarm == RTC_ALARM_A)
 804bd8c:	683b      	ldr	r3, [r7, #0]
 804bd8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804bd92:	d106      	bne.n	804bda2 <HAL_RTC_DeactivateAlarm+0x4a>
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 804bd94:	4b0f      	ldr	r3, [pc, #60]	; (804bdd4 <HAL_RTC_DeactivateAlarm+0x7c>)
 804bd96:	699b      	ldr	r3, [r3, #24]
 804bd98:	4a0e      	ldr	r2, [pc, #56]	; (804bdd4 <HAL_RTC_DeactivateAlarm+0x7c>)
 804bd9a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 804bd9e:	6193      	str	r3, [r2, #24]
 804bda0:	e005      	b.n	804bdae <HAL_RTC_DeactivateAlarm+0x56>
  }
  else
  {
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 804bda2:	4b0c      	ldr	r3, [pc, #48]	; (804bdd4 <HAL_RTC_DeactivateAlarm+0x7c>)
 804bda4:	699b      	ldr	r3, [r3, #24]
 804bda6:	4a0b      	ldr	r2, [pc, #44]	; (804bdd4 <HAL_RTC_DeactivateAlarm+0x7c>)
 804bda8:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 804bdac:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804bdae:	4b09      	ldr	r3, [pc, #36]	; (804bdd4 <HAL_RTC_DeactivateAlarm+0x7c>)
 804bdb0:	22ff      	movs	r2, #255	; 0xff
 804bdb2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 804bdb4:	687b      	ldr	r3, [r7, #4]
 804bdb6:	2201      	movs	r2, #1
 804bdb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 804bdbc:	687b      	ldr	r3, [r7, #4]
 804bdbe:	2200      	movs	r2, #0
 804bdc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 804bdc4:	2300      	movs	r3, #0
}
 804bdc6:	4618      	mov	r0, r3
 804bdc8:	370c      	adds	r7, #12
 804bdca:	46bd      	mov	sp, r7
 804bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bdd0:	4770      	bx	lr
 804bdd2:	bf00      	nop
 804bdd4:	40002800 	.word	0x40002800

0804bdd8 <HAL_RTC_AlarmIRQHandler>:
  * @note   Alarm non-secure is available in non-secure driver.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 804bdd8:	b580      	push	{r7, lr}
 804bdda:	b084      	sub	sp, #16
 804bddc:	af00      	add	r7, sp, #0
 804bdde:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);
 804bde0:	4b11      	ldr	r3, [pc, #68]	; (804be28 <HAL_RTC_AlarmIRQHandler+0x50>)
 804bde2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804bde4:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 804bde6:	68fb      	ldr	r3, [r7, #12]
 804bde8:	f003 0301 	and.w	r3, r3, #1
 804bdec:	2b00      	cmp	r3, #0
 804bdee:	d006      	beq.n	804bdfe <HAL_RTC_AlarmIRQHandler+0x26>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 804bdf0:	4b0d      	ldr	r3, [pc, #52]	; (804be28 <HAL_RTC_AlarmIRQHandler+0x50>)
 804bdf2:	2201      	movs	r2, #1
 804bdf4:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
 804bdf6:	687b      	ldr	r3, [r7, #4]
 804bdf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804bdfa:	6878      	ldr	r0, [r7, #4]
 804bdfc:	4798      	blx	r3
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 804bdfe:	68fb      	ldr	r3, [r7, #12]
 804be00:	f003 0302 	and.w	r3, r3, #2
 804be04:	2b00      	cmp	r3, #0
 804be06:	d006      	beq.n	804be16 <HAL_RTC_AlarmIRQHandler+0x3e>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 804be08:	4b07      	ldr	r3, [pc, #28]	; (804be28 <HAL_RTC_AlarmIRQHandler+0x50>)
 804be0a:	2202      	movs	r2, #2
 804be0c:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
 804be0e:	687b      	ldr	r3, [r7, #4]
 804be10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804be12:	6878      	ldr	r0, [r7, #4]
 804be14:	4798      	blx	r3
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 804be16:	687b      	ldr	r3, [r7, #4]
 804be18:	2201      	movs	r2, #1
 804be1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 804be1e:	bf00      	nop
 804be20:	3710      	adds	r7, #16
 804be22:	46bd      	mov	sp, r7
 804be24:	bd80      	pop	{r7, pc}
 804be26:	bf00      	nop
 804be28:	40002800 	.word	0x40002800

0804be2c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 804be2c:	b580      	push	{r7, lr}
 804be2e:	b084      	sub	sp, #16
 804be30:	af00      	add	r7, sp, #0
 804be32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 804be34:	4b0f      	ldr	r3, [pc, #60]	; (804be74 <HAL_RTC_WaitForSynchro+0x48>)
 804be36:	68db      	ldr	r3, [r3, #12]
 804be38:	4a0e      	ldr	r2, [pc, #56]	; (804be74 <HAL_RTC_WaitForSynchro+0x48>)
 804be3a:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 804be3e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 804be40:	f7fa fc62 	bl	8046708 <HAL_GetTick>
 804be44:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 804be46:	e009      	b.n	804be5c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 804be48:	f7fa fc5e 	bl	8046708 <HAL_GetTick>
 804be4c:	4602      	mov	r2, r0
 804be4e:	68fb      	ldr	r3, [r7, #12]
 804be50:	1ad3      	subs	r3, r2, r3
 804be52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804be56:	d901      	bls.n	804be5c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 804be58:	2303      	movs	r3, #3
 804be5a:	e006      	b.n	804be6a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 804be5c:	4b05      	ldr	r3, [pc, #20]	; (804be74 <HAL_RTC_WaitForSynchro+0x48>)
 804be5e:	68db      	ldr	r3, [r3, #12]
 804be60:	f003 0320 	and.w	r3, r3, #32
 804be64:	2b00      	cmp	r3, #0
 804be66:	d0ef      	beq.n	804be48 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 804be68:	2300      	movs	r3, #0
}
 804be6a:	4618      	mov	r0, r3
 804be6c:	3710      	adds	r7, #16
 804be6e:	46bd      	mov	sp, r7
 804be70:	bd80      	pop	{r7, pc}
 804be72:	bf00      	nop
 804be74:	40002800 	.word	0x40002800

0804be78 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 804be78:	b580      	push	{r7, lr}
 804be7a:	b084      	sub	sp, #16
 804be7c:	af00      	add	r7, sp, #0
 804be7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 804be80:	2300      	movs	r3, #0
 804be82:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 804be84:	4b15      	ldr	r3, [pc, #84]	; (804bedc <RTC_EnterInitMode+0x64>)
 804be86:	68db      	ldr	r3, [r3, #12]
 804be88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804be8c:	2b00      	cmp	r3, #0
 804be8e:	d120      	bne.n	804bed2 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 804be90:	4b12      	ldr	r3, [pc, #72]	; (804bedc <RTC_EnterInitMode+0x64>)
 804be92:	68db      	ldr	r3, [r3, #12]
 804be94:	4a11      	ldr	r2, [pc, #68]	; (804bedc <RTC_EnterInitMode+0x64>)
 804be96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804be9a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 804be9c:	f7fa fc34 	bl	8046708 <HAL_GetTick>
 804bea0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 804bea2:	e00d      	b.n	804bec0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 804bea4:	f7fa fc30 	bl	8046708 <HAL_GetTick>
 804bea8:	4602      	mov	r2, r0
 804beaa:	68bb      	ldr	r3, [r7, #8]
 804beac:	1ad3      	subs	r3, r2, r3
 804beae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804beb2:	d905      	bls.n	804bec0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 804beb4:	2303      	movs	r3, #3
 804beb6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 804beb8:	687b      	ldr	r3, [r7, #4]
 804beba:	2203      	movs	r2, #3
 804bebc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 804bec0:	4b06      	ldr	r3, [pc, #24]	; (804bedc <RTC_EnterInitMode+0x64>)
 804bec2:	68db      	ldr	r3, [r3, #12]
 804bec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804bec8:	2b00      	cmp	r3, #0
 804beca:	d102      	bne.n	804bed2 <RTC_EnterInitMode+0x5a>
 804becc:	7bfb      	ldrb	r3, [r7, #15]
 804bece:	2b03      	cmp	r3, #3
 804bed0:	d1e8      	bne.n	804bea4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 804bed2:	7bfb      	ldrb	r3, [r7, #15]
}
 804bed4:	4618      	mov	r0, r3
 804bed6:	3710      	adds	r7, #16
 804bed8:	46bd      	mov	sp, r7
 804beda:	bd80      	pop	{r7, pc}
 804bedc:	40002800 	.word	0x40002800

0804bee0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 804bee0:	b580      	push	{r7, lr}
 804bee2:	b084      	sub	sp, #16
 804bee4:	af00      	add	r7, sp, #0
 804bee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 804bee8:	2300      	movs	r3, #0
 804beea:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 804beec:	4b1a      	ldr	r3, [pc, #104]	; (804bf58 <RTC_ExitInitMode+0x78>)
 804beee:	68db      	ldr	r3, [r3, #12]
 804bef0:	4a19      	ldr	r2, [pc, #100]	; (804bf58 <RTC_ExitInitMode+0x78>)
 804bef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804bef6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 804bef8:	4b17      	ldr	r3, [pc, #92]	; (804bf58 <RTC_ExitInitMode+0x78>)
 804befa:	699b      	ldr	r3, [r3, #24]
 804befc:	f003 0320 	and.w	r3, r3, #32
 804bf00:	2b00      	cmp	r3, #0
 804bf02:	d10c      	bne.n	804bf1e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 804bf04:	6878      	ldr	r0, [r7, #4]
 804bf06:	f7ff ff91 	bl	804be2c <HAL_RTC_WaitForSynchro>
 804bf0a:	4603      	mov	r3, r0
 804bf0c:	2b00      	cmp	r3, #0
 804bf0e:	d01e      	beq.n	804bf4e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 804bf10:	687b      	ldr	r3, [r7, #4]
 804bf12:	2203      	movs	r2, #3
 804bf14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 804bf18:	2303      	movs	r3, #3
 804bf1a:	73fb      	strb	r3, [r7, #15]
 804bf1c:	e017      	b.n	804bf4e <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 804bf1e:	4b0e      	ldr	r3, [pc, #56]	; (804bf58 <RTC_ExitInitMode+0x78>)
 804bf20:	699b      	ldr	r3, [r3, #24]
 804bf22:	4a0d      	ldr	r2, [pc, #52]	; (804bf58 <RTC_ExitInitMode+0x78>)
 804bf24:	f023 0320 	bic.w	r3, r3, #32
 804bf28:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 804bf2a:	6878      	ldr	r0, [r7, #4]
 804bf2c:	f7ff ff7e 	bl	804be2c <HAL_RTC_WaitForSynchro>
 804bf30:	4603      	mov	r3, r0
 804bf32:	2b00      	cmp	r3, #0
 804bf34:	d005      	beq.n	804bf42 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 804bf36:	687b      	ldr	r3, [r7, #4]
 804bf38:	2203      	movs	r2, #3
 804bf3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 804bf3e:	2303      	movs	r3, #3
 804bf40:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 804bf42:	4b05      	ldr	r3, [pc, #20]	; (804bf58 <RTC_ExitInitMode+0x78>)
 804bf44:	699b      	ldr	r3, [r3, #24]
 804bf46:	4a04      	ldr	r2, [pc, #16]	; (804bf58 <RTC_ExitInitMode+0x78>)
 804bf48:	f043 0320 	orr.w	r3, r3, #32
 804bf4c:	6193      	str	r3, [r2, #24]
  }

  return status;
 804bf4e:	7bfb      	ldrb	r3, [r7, #15]
}
 804bf50:	4618      	mov	r0, r3
 804bf52:	3710      	adds	r7, #16
 804bf54:	46bd      	mov	sp, r7
 804bf56:	bd80      	pop	{r7, pc}
 804bf58:	40002800 	.word	0x40002800

0804bf5c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 804bf5c:	b480      	push	{r7}
 804bf5e:	b085      	sub	sp, #20
 804bf60:	af00      	add	r7, sp, #0
 804bf62:	4603      	mov	r3, r0
 804bf64:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 804bf66:	2300      	movs	r3, #0
 804bf68:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 804bf6a:	79fb      	ldrb	r3, [r7, #7]
 804bf6c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 804bf6e:	e005      	b.n	804bf7c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 804bf70:	68fb      	ldr	r3, [r7, #12]
 804bf72:	3301      	adds	r3, #1
 804bf74:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 804bf76:	7afb      	ldrb	r3, [r7, #11]
 804bf78:	3b0a      	subs	r3, #10
 804bf7a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 804bf7c:	7afb      	ldrb	r3, [r7, #11]
 804bf7e:	2b09      	cmp	r3, #9
 804bf80:	d8f6      	bhi.n	804bf70 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 804bf82:	68fb      	ldr	r3, [r7, #12]
 804bf84:	b2db      	uxtb	r3, r3
 804bf86:	011b      	lsls	r3, r3, #4
 804bf88:	b2da      	uxtb	r2, r3
 804bf8a:	7afb      	ldrb	r3, [r7, #11]
 804bf8c:	4313      	orrs	r3, r2
 804bf8e:	b2db      	uxtb	r3, r3
}
 804bf90:	4618      	mov	r0, r3
 804bf92:	3714      	adds	r7, #20
 804bf94:	46bd      	mov	sp, r7
 804bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bf9a:	4770      	bx	lr

0804bf9c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 804bf9c:	b480      	push	{r7}
 804bf9e:	b085      	sub	sp, #20
 804bfa0:	af00      	add	r7, sp, #0
 804bfa2:	4603      	mov	r3, r0
 804bfa4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 804bfa6:	79fb      	ldrb	r3, [r7, #7]
 804bfa8:	091b      	lsrs	r3, r3, #4
 804bfaa:	b2db      	uxtb	r3, r3
 804bfac:	461a      	mov	r2, r3
 804bfae:	4613      	mov	r3, r2
 804bfb0:	009b      	lsls	r3, r3, #2
 804bfb2:	4413      	add	r3, r2
 804bfb4:	005b      	lsls	r3, r3, #1
 804bfb6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 804bfb8:	68fb      	ldr	r3, [r7, #12]
 804bfba:	b2da      	uxtb	r2, r3
 804bfbc:	79fb      	ldrb	r3, [r7, #7]
 804bfbe:	f003 030f 	and.w	r3, r3, #15
 804bfc2:	b2db      	uxtb	r3, r3
 804bfc4:	4413      	add	r3, r2
 804bfc6:	b2db      	uxtb	r3, r3
}
 804bfc8:	4618      	mov	r0, r3
 804bfca:	3714      	adds	r7, #20
 804bfcc:	46bd      	mov	sp, r7
 804bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 804bfd2:	4770      	bx	lr

0804bfd4 <HAL_RTCEx_SetTimeStamp_IT>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 804bfd4:	b480      	push	{r7}
 804bfd6:	b085      	sub	sp, #20
 804bfd8:	af00      	add	r7, sp, #0
 804bfda:	60f8      	str	r0, [r7, #12]
 804bfdc:	60b9      	str	r1, [r7, #8]
 804bfde:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 804bfe0:	68fb      	ldr	r3, [r7, #12]
 804bfe2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 804bfe6:	2b01      	cmp	r3, #1
 804bfe8:	d101      	bne.n	804bfee <HAL_RTCEx_SetTimeStamp_IT+0x1a>
 804bfea:	2302      	movs	r3, #2
 804bfec:	e035      	b.n	804c05a <HAL_RTCEx_SetTimeStamp_IT+0x86>
 804bfee:	68fb      	ldr	r3, [r7, #12]
 804bff0:	2201      	movs	r2, #1
 804bff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 804bff6:	68fb      	ldr	r3, [r7, #12]
 804bff8:	2202      	movs	r2, #2
 804bffa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* RTC timestamp Interrupt Configuration: EXTI configuration */
  __HAL_RTC_TIMESTAMP_EXTI_ENABLE_IT();
 804bffe:	4b1a      	ldr	r3, [pc, #104]	; (804c068 <HAL_RTCEx_SetTimeStamp_IT+0x94>)
 804c000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804c004:	4a18      	ldr	r2, [pc, #96]	; (804c068 <HAL_RTCEx_SetTimeStamp_IT+0x94>)
 804c006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804c00a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Get the RTC_CR register and clear the bits to be configured */
  CLEAR_BIT(RTC->CR, (RTC_CR_TSEDGE | RTC_CR_TSE));
 804c00e:	4b17      	ldr	r3, [pc, #92]	; (804c06c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804c010:	699b      	ldr	r3, [r3, #24]
 804c012:	4a16      	ldr	r2, [pc, #88]	; (804c06c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804c014:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 804c018:	f023 0308 	bic.w	r3, r3, #8
 804c01c:	6193      	str	r3, [r2, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804c01e:	4b13      	ldr	r3, [pc, #76]	; (804c06c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804c020:	22ca      	movs	r2, #202	; 0xca
 804c022:	625a      	str	r2, [r3, #36]	; 0x24
 804c024:	4b11      	ldr	r3, [pc, #68]	; (804c06c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804c026:	2253      	movs	r2, #83	; 0x53
 804c028:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE before Enable bit to avoid unwanted TSF setting. */
  SET_BIT(RTC->CR, (uint32_t)TimeStampEdge);
 804c02a:	4b10      	ldr	r3, [pc, #64]	; (804c06c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804c02c:	699a      	ldr	r2, [r3, #24]
 804c02e:	490f      	ldr	r1, [pc, #60]	; (804c06c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804c030:	68bb      	ldr	r3, [r7, #8]
 804c032:	4313      	orrs	r3, r2
 804c034:	618b      	str	r3, [r1, #24]

  /* Enable timestamp and IT */
  SET_BIT(RTC->CR, RTC_CR_TSE | RTC_CR_TSIE);
 804c036:	4b0d      	ldr	r3, [pc, #52]	; (804c06c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804c038:	699b      	ldr	r3, [r3, #24]
 804c03a:	4a0c      	ldr	r2, [pc, #48]	; (804c06c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804c03c:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 804c040:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804c042:	4b0a      	ldr	r3, [pc, #40]	; (804c06c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 804c044:	22ff      	movs	r2, #255	; 0xff
 804c046:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 804c048:	68fb      	ldr	r3, [r7, #12]
 804c04a:	2201      	movs	r2, #1
 804c04c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 804c050:	68fb      	ldr	r3, [r7, #12]
 804c052:	2200      	movs	r2, #0
 804c054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 804c058:	2300      	movs	r3, #0
}
 804c05a:	4618      	mov	r0, r3
 804c05c:	3714      	adds	r7, #20
 804c05e:	46bd      	mov	sp, r7
 804c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c064:	4770      	bx	lr
 804c066:	bf00      	nop
 804c068:	4002f400 	.word	0x4002f400
 804c06c:	40002800 	.word	0x40002800

0804c070 <HAL_RTCEx_TimeStampIRQHandler>:
  * @brief  Handle TimeStamp non-secure interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_TimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 804c070:	b580      	push	{r7, lr}
 804c072:	b082      	sub	sp, #8
 804c074:	af00      	add	r7, sp, #0
 804c076:	6078      	str	r0, [r7, #4]
  if (READ_BIT(RTC->MISR, RTC_MISR_TSMF) != 0U)
 804c078:	4b0a      	ldr	r3, [pc, #40]	; (804c0a4 <HAL_RTCEx_TimeStampIRQHandler+0x34>)
 804c07a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804c07c:	f003 0308 	and.w	r3, r3, #8
 804c080:	2b00      	cmp	r3, #0
 804c082:	d006      	beq.n	804c092 <HAL_RTCEx_TimeStampIRQHandler+0x22>
  {
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call TimeStampEvent registered Callback */
    hrtc->TimeStampEventCallback(hrtc);
 804c084:	687b      	ldr	r3, [r7, #4]
 804c086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804c088:	6878      	ldr	r0, [r7, #4]
 804c08a:	4798      	blx	r3
#else
    HAL_RTCEx_TimeStampEventCallback(hrtc);
#endif
    /* Clearing flags after the Callback because the content of RTC_TSTR and RTC_TSDR are cleared when TSF bit is reset.*/
    WRITE_REG(RTC->SCR, RTC_SCR_CITSF | RTC_SCR_CTSF);
 804c08c:	4b05      	ldr	r3, [pc, #20]	; (804c0a4 <HAL_RTCEx_TimeStampIRQHandler+0x34>)
 804c08e:	2228      	movs	r2, #40	; 0x28
 804c090:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 804c092:	687b      	ldr	r3, [r7, #4]
 804c094:	2201      	movs	r2, #1
 804c096:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 804c09a:	bf00      	nop
 804c09c:	3708      	adds	r7, #8
 804c09e:	46bd      	mov	sp, r7
 804c0a0:	bd80      	pop	{r7, pc}
 804c0a2:	bf00      	nop
 804c0a4:	40002800 	.word	0x40002800

0804c0a8 <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 804c0a8:	b480      	push	{r7}
 804c0aa:	b083      	sub	sp, #12
 804c0ac:	af00      	add	r7, sp, #0
 804c0ae:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 804c0b0:	bf00      	nop
 804c0b2:	370c      	adds	r7, #12
 804c0b4:	46bd      	mov	sp, r7
 804c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c0ba:	4770      	bx	lr

0804c0bc <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 804c0bc:	b580      	push	{r7, lr}
 804c0be:	b086      	sub	sp, #24
 804c0c0:	af00      	add	r7, sp, #0
 804c0c2:	60f8      	str	r0, [r7, #12]
 804c0c4:	60b9      	str	r1, [r7, #8]
 804c0c6:	607a      	str	r2, [r7, #4]
 804c0c8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 804c0ca:	68fb      	ldr	r3, [r7, #12]
 804c0cc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 804c0d0:	2b01      	cmp	r3, #1
 804c0d2:	d101      	bne.n	804c0d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 804c0d4:	2302      	movs	r3, #2
 804c0d6:	e06f      	b.n	804c1b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
 804c0d8:	68fb      	ldr	r3, [r7, #12]
 804c0da:	2201      	movs	r2, #1
 804c0dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 804c0e0:	68fb      	ldr	r3, [r7, #12]
 804c0e2:	2202      	movs	r2, #2
 804c0e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804c0e8:	4b35      	ldr	r3, [pc, #212]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c0ea:	22ca      	movs	r2, #202	; 0xca
 804c0ec:	625a      	str	r2, [r3, #36]	; 0x24
 804c0ee:	4b34      	ldr	r3, [pc, #208]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c0f0:	2253      	movs	r2, #83	; 0x53
 804c0f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 804c0f4:	4b32      	ldr	r3, [pc, #200]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c0f6:	699b      	ldr	r3, [r3, #24]
 804c0f8:	4a31      	ldr	r2, [pc, #196]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c0fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 804c0fe:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 804c100:	4b2f      	ldr	r3, [pc, #188]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c102:	2204      	movs	r2, #4
 804c104:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 804c106:	4b2e      	ldr	r3, [pc, #184]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c108:	68db      	ldr	r3, [r3, #12]
 804c10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804c10e:	2b00      	cmp	r3, #0
 804c110:	d11e      	bne.n	804c150 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 804c112:	f7fa faf9 	bl	8046708 <HAL_GetTick>
 804c116:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 804c118:	e014      	b.n	804c144 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 804c11a:	f7fa faf5 	bl	8046708 <HAL_GetTick>
 804c11e:	4602      	mov	r2, r0
 804c120:	697b      	ldr	r3, [r7, #20]
 804c122:	1ad3      	subs	r3, r2, r3
 804c124:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 804c128:	d90c      	bls.n	804c144 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804c12a:	4b25      	ldr	r3, [pc, #148]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c12c:	22ff      	movs	r2, #255	; 0xff
 804c12e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 804c130:	68fb      	ldr	r3, [r7, #12]
 804c132:	2203      	movs	r2, #3
 804c134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 804c138:	68fb      	ldr	r3, [r7, #12]
 804c13a:	2200      	movs	r2, #0
 804c13c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 804c140:	2303      	movs	r3, #3
 804c142:	e039      	b.n	804c1b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 804c144:	4b1e      	ldr	r3, [pc, #120]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c146:	68db      	ldr	r3, [r3, #12]
 804c148:	f003 0304 	and.w	r3, r3, #4
 804c14c:	2b00      	cmp	r3, #0
 804c14e:	d0e4      	beq.n	804c11a <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 804c150:	683b      	ldr	r3, [r7, #0]
 804c152:	041a      	lsls	r2, r3, #16
 804c154:	491a      	ldr	r1, [pc, #104]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c156:	68bb      	ldr	r3, [r7, #8]
 804c158:	4313      	orrs	r3, r2
 804c15a:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 804c15c:	4b18      	ldr	r3, [pc, #96]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c15e:	699b      	ldr	r3, [r3, #24]
 804c160:	f023 0207 	bic.w	r2, r3, #7
 804c164:	4916      	ldr	r1, [pc, #88]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c166:	687b      	ldr	r3, [r7, #4]
 804c168:	4313      	orrs	r3, r2
 804c16a:	618b      	str	r3, [r1, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 804c16c:	683b      	ldr	r3, [r7, #0]
 804c16e:	2b00      	cmp	r3, #0
 804c170:	d008      	beq.n	804c184 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 804c172:	4b14      	ldr	r3, [pc, #80]	; (804c1c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 804c174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804c178:	4a12      	ldr	r2, [pc, #72]	; (804c1c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 804c17a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804c17e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 804c182:	e007      	b.n	804c194 <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 804c184:	4b0f      	ldr	r3, [pc, #60]	; (804c1c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 804c186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804c18a:	4a0e      	ldr	r2, [pc, #56]	; (804c1c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 804c18c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804c190:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 804c194:	4b0a      	ldr	r3, [pc, #40]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c196:	699b      	ldr	r3, [r3, #24]
 804c198:	4a09      	ldr	r2, [pc, #36]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c19a:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 804c19e:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804c1a0:	4b07      	ldr	r3, [pc, #28]	; (804c1c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 804c1a2:	22ff      	movs	r2, #255	; 0xff
 804c1a4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 804c1a6:	68fb      	ldr	r3, [r7, #12]
 804c1a8:	2201      	movs	r2, #1
 804c1aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 804c1ae:	68fb      	ldr	r3, [r7, #12]
 804c1b0:	2200      	movs	r2, #0
 804c1b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 804c1b6:	2300      	movs	r3, #0
}
 804c1b8:	4618      	mov	r0, r3
 804c1ba:	3718      	adds	r7, #24
 804c1bc:	46bd      	mov	sp, r7
 804c1be:	bd80      	pop	{r7, pc}
 804c1c0:	40002800 	.word	0x40002800
 804c1c4:	4002f400 	.word	0x4002f400

0804c1c8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer non-secure interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 804c1c8:	b580      	push	{r7, lr}
 804c1ca:	b082      	sub	sp, #8
 804c1cc:	af00      	add	r7, sp, #0
 804c1ce:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 804c1d0:	4b0a      	ldr	r3, [pc, #40]	; (804c1fc <HAL_RTCEx_WakeUpTimerIRQHandler+0x34>)
 804c1d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804c1d4:	f003 0304 	and.w	r3, r3, #4
 804c1d8:	2b00      	cmp	r3, #0
 804c1da:	d006      	beq.n	804c1ea <HAL_RTCEx_WakeUpTimerIRQHandler+0x22>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 804c1dc:	4b07      	ldr	r3, [pc, #28]	; (804c1fc <HAL_RTCEx_WakeUpTimerIRQHandler+0x34>)
 804c1de:	2204      	movs	r2, #4
 804c1e0:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
 804c1e2:	687b      	ldr	r3, [r7, #4]
 804c1e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804c1e6:	6878      	ldr	r0, [r7, #4]
 804c1e8:	4798      	blx	r3
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 804c1ea:	687b      	ldr	r3, [r7, #4]
 804c1ec:	2201      	movs	r2, #1
 804c1ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 804c1f2:	bf00      	nop
 804c1f4:	3708      	adds	r7, #8
 804c1f6:	46bd      	mov	sp, r7
 804c1f8:	bd80      	pop	{r7, pc}
 804c1fa:	bf00      	nop
 804c1fc:	40002800 	.word	0x40002800

0804c200 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 804c200:	b480      	push	{r7}
 804c202:	b083      	sub	sp, #12
 804c204:	af00      	add	r7, sp, #0
 804c206:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 804c208:	bf00      	nop
 804c20a:	370c      	adds	r7, #12
 804c20c:	46bd      	mov	sp, r7
 804c20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c212:	4770      	bx	lr

0804c214 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 804c214:	b480      	push	{r7}
 804c216:	b083      	sub	sp, #12
 804c218:	af00      	add	r7, sp, #0
 804c21a:	6078      	str	r0, [r7, #4]
 804c21c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 804c21e:	687b      	ldr	r3, [r7, #4]
 804c220:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 804c224:	2b01      	cmp	r3, #1
 804c226:	d101      	bne.n	804c22c <HAL_RTCEx_SetCalibrationOutPut+0x18>
 804c228:	2302      	movs	r3, #2
 804c22a:	e027      	b.n	804c27c <HAL_RTCEx_SetCalibrationOutPut+0x68>
 804c22c:	687b      	ldr	r3, [r7, #4]
 804c22e:	2201      	movs	r2, #1
 804c230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 804c234:	687b      	ldr	r3, [r7, #4]
 804c236:	2202      	movs	r2, #2
 804c238:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 804c23c:	4b12      	ldr	r3, [pc, #72]	; (804c288 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804c23e:	22ca      	movs	r2, #202	; 0xca
 804c240:	625a      	str	r2, [r3, #36]	; 0x24
 804c242:	4b11      	ldr	r3, [pc, #68]	; (804c288 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804c244:	2253      	movs	r2, #83	; 0x53
 804c246:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the RTC_CR register */
  MODIFY_REG(RTC->CR, RTC_CR_COSEL, CalibOutput);
 804c248:	4b0f      	ldr	r3, [pc, #60]	; (804c288 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804c24a:	699b      	ldr	r3, [r3, #24]
 804c24c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 804c250:	490d      	ldr	r1, [pc, #52]	; (804c288 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804c252:	683b      	ldr	r3, [r7, #0]
 804c254:	4313      	orrs	r3, r2
 804c256:	618b      	str	r3, [r1, #24]

  /* Enable calibration output */
  SET_BIT(RTC->CR, RTC_CR_COE);
 804c258:	4b0b      	ldr	r3, [pc, #44]	; (804c288 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804c25a:	699b      	ldr	r3, [r3, #24]
 804c25c:	4a0a      	ldr	r2, [pc, #40]	; (804c288 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804c25e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 804c262:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 804c264:	4b08      	ldr	r3, [pc, #32]	; (804c288 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 804c266:	22ff      	movs	r2, #255	; 0xff
 804c268:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 804c26a:	687b      	ldr	r3, [r7, #4]
 804c26c:	2201      	movs	r2, #1
 804c26e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 804c272:	687b      	ldr	r3, [r7, #4]
 804c274:	2200      	movs	r2, #0
 804c276:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 804c27a:	2300      	movs	r3, #0
}
 804c27c:	4618      	mov	r0, r3
 804c27e:	370c      	adds	r7, #12
 804c280:	46bd      	mov	sp, r7
 804c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c286:	4770      	bx	lr
 804c288:	40002800 	.word	0x40002800

0804c28c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 804c28c:	b480      	push	{r7}
 804c28e:	b083      	sub	sp, #12
 804c290:	af00      	add	r7, sp, #0
 804c292:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 804c294:	bf00      	nop
 804c296:	370c      	adds	r7, #12
 804c298:	46bd      	mov	sp, r7
 804c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c29e:	4770      	bx	lr

0804c2a0 <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c2a0:	b480      	push	{r7}
 804c2a2:	b083      	sub	sp, #12
 804c2a4:	af00      	add	r7, sp, #0
 804c2a6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 804c2a8:	bf00      	nop
 804c2aa:	370c      	adds	r7, #12
 804c2ac:	46bd      	mov	sp, r7
 804c2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c2b2:	4770      	bx	lr

0804c2b4 <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c2b4:	b480      	push	{r7}
 804c2b6:	b083      	sub	sp, #12
 804c2b8:	af00      	add	r7, sp, #0
 804c2ba:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 804c2bc:	bf00      	nop
 804c2be:	370c      	adds	r7, #12
 804c2c0:	46bd      	mov	sp, r7
 804c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c2c6:	4770      	bx	lr

0804c2c8 <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c2c8:	b480      	push	{r7}
 804c2ca:	b083      	sub	sp, #12
 804c2cc:	af00      	add	r7, sp, #0
 804c2ce:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 804c2d0:	bf00      	nop
 804c2d2:	370c      	adds	r7, #12
 804c2d4:	46bd      	mov	sp, r7
 804c2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c2da:	4770      	bx	lr

0804c2dc <HAL_RTCEx_Tamper4EventCallback>:
  * @brief  Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper4EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c2dc:	b480      	push	{r7}
 804c2de:	b083      	sub	sp, #12
 804c2e0:	af00      	add	r7, sp, #0
 804c2e2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper4EventCallback could be implemented in the user file
   */
}
 804c2e4:	bf00      	nop
 804c2e6:	370c      	adds	r7, #12
 804c2e8:	46bd      	mov	sp, r7
 804c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c2ee:	4770      	bx	lr

0804c2f0 <HAL_RTCEx_Tamper5EventCallback>:
  * @brief  Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c2f0:	b480      	push	{r7}
 804c2f2:	b083      	sub	sp, #12
 804c2f4:	af00      	add	r7, sp, #0
 804c2f6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper5EventCallback could be implemented in the user file
   */
}
 804c2f8:	bf00      	nop
 804c2fa:	370c      	adds	r7, #12
 804c2fc:	46bd      	mov	sp, r7
 804c2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c302:	4770      	bx	lr

0804c304 <HAL_RTCEx_Tamper6EventCallback>:
  * @brief  Tamper 6 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper6EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c304:	b480      	push	{r7}
 804c306:	b083      	sub	sp, #12
 804c308:	af00      	add	r7, sp, #0
 804c30a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper6EventCallback could be implemented in the user file
   */
}
 804c30c:	bf00      	nop
 804c30e:	370c      	adds	r7, #12
 804c310:	46bd      	mov	sp, r7
 804c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c316:	4770      	bx	lr

0804c318 <HAL_RTCEx_Tamper7EventCallback>:
  * @brief  Tamper 7 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper7EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c318:	b480      	push	{r7}
 804c31a:	b083      	sub	sp, #12
 804c31c:	af00      	add	r7, sp, #0
 804c31e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper7EventCallback could be implemented in the user file
   */
}
 804c320:	bf00      	nop
 804c322:	370c      	adds	r7, #12
 804c324:	46bd      	mov	sp, r7
 804c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c32a:	4770      	bx	lr

0804c32c <HAL_RTCEx_Tamper8EventCallback>:
  * @brief  Tamper 8 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper8EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c32c:	b480      	push	{r7}
 804c32e:	b083      	sub	sp, #12
 804c330:	af00      	add	r7, sp, #0
 804c332:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper8EventCallback could be implemented in the user file
   */
}
 804c334:	bf00      	nop
 804c336:	370c      	adds	r7, #12
 804c338:	46bd      	mov	sp, r7
 804c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c33e:	4770      	bx	lr

0804c340 <HAL_RTCEx_InternalTamper1EventCallback>:
  * @brief  Internal Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c340:	b480      	push	{r7}
 804c342:	b083      	sub	sp, #12
 804c344:	af00      	add	r7, sp, #0
 804c346:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper1EventCallback could be implemented in the user file
   */
}
 804c348:	bf00      	nop
 804c34a:	370c      	adds	r7, #12
 804c34c:	46bd      	mov	sp, r7
 804c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c352:	4770      	bx	lr

0804c354 <HAL_RTCEx_InternalTamper2EventCallback>:
  * @brief  Internal Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c354:	b480      	push	{r7}
 804c356:	b083      	sub	sp, #12
 804c358:	af00      	add	r7, sp, #0
 804c35a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper2EventCallback could be implemented in the user file
   */
}
 804c35c:	bf00      	nop
 804c35e:	370c      	adds	r7, #12
 804c360:	46bd      	mov	sp, r7
 804c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c366:	4770      	bx	lr

0804c368 <HAL_RTCEx_InternalTamper3EventCallback>:
  * @brief  Internal Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c368:	b480      	push	{r7}
 804c36a:	b083      	sub	sp, #12
 804c36c:	af00      	add	r7, sp, #0
 804c36e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper3EventCallback could be implemented in the user file
   */
}
 804c370:	bf00      	nop
 804c372:	370c      	adds	r7, #12
 804c374:	46bd      	mov	sp, r7
 804c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c37a:	4770      	bx	lr

0804c37c <HAL_RTCEx_InternalTamper5EventCallback>:
  * @brief  Internal Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c37c:	b480      	push	{r7}
 804c37e:	b083      	sub	sp, #12
 804c380:	af00      	add	r7, sp, #0
 804c382:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper5EventCallback could be implemented in the user file
   */
}
 804c384:	bf00      	nop
 804c386:	370c      	adds	r7, #12
 804c388:	46bd      	mov	sp, r7
 804c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c38e:	4770      	bx	lr

0804c390 <HAL_RTCEx_InternalTamper8EventCallback>:
  * @brief  Internal Tamper 8 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper8EventCallback(RTC_HandleTypeDef *hrtc)
{
 804c390:	b480      	push	{r7}
 804c392:	b083      	sub	sp, #12
 804c394:	af00      	add	r7, sp, #0
 804c396:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper8EventCallback could be implemented in the user file
   */
}
 804c398:	bf00      	nop
 804c39a:	370c      	adds	r7, #12
 804c39c:	46bd      	mov	sp, r7
 804c39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804c3a2:	4770      	bx	lr

0804c3a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 804c3a4:	b580      	push	{r7, lr}
 804c3a6:	b084      	sub	sp, #16
 804c3a8:	af00      	add	r7, sp, #0
 804c3aa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 804c3ac:	687b      	ldr	r3, [r7, #4]
 804c3ae:	2b00      	cmp	r3, #0
 804c3b0:	d101      	bne.n	804c3b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 804c3b2:	2301      	movs	r3, #1
 804c3b4:	e0b9      	b.n	804c52a <HAL_SPI_Init+0x186>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 804c3b6:	687b      	ldr	r3, [r7, #4]
 804c3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c3ba:	2b00      	cmp	r3, #0
 804c3bc:	d108      	bne.n	804c3d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 804c3be:	687b      	ldr	r3, [r7, #4]
 804c3c0:	685b      	ldr	r3, [r3, #4]
 804c3c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804c3c6:	d009      	beq.n	804c3dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 804c3c8:	687b      	ldr	r3, [r7, #4]
 804c3ca:	2200      	movs	r2, #0
 804c3cc:	61da      	str	r2, [r3, #28]
 804c3ce:	e005      	b.n	804c3dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 804c3d0:	687b      	ldr	r3, [r7, #4]
 804c3d2:	2200      	movs	r2, #0
 804c3d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 804c3d6:	687b      	ldr	r3, [r7, #4]
 804c3d8:	2200      	movs	r2, #0
 804c3da:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804c3dc:	687b      	ldr	r3, [r7, #4]
 804c3de:	2200      	movs	r2, #0
 804c3e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 804c3e2:	687b      	ldr	r3, [r7, #4]
 804c3e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 804c3e8:	b2db      	uxtb	r3, r3
 804c3ea:	2b00      	cmp	r3, #0
 804c3ec:	d12a      	bne.n	804c444 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 804c3ee:	687b      	ldr	r3, [r7, #4]
 804c3f0:	2200      	movs	r2, #0
 804c3f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 804c3f6:	687b      	ldr	r3, [r7, #4]
 804c3f8:	4a4e      	ldr	r2, [pc, #312]	; (804c534 <HAL_SPI_Init+0x190>)
 804c3fa:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 804c3fc:	687b      	ldr	r3, [r7, #4]
 804c3fe:	4a4e      	ldr	r2, [pc, #312]	; (804c538 <HAL_SPI_Init+0x194>)
 804c400:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 804c402:	687b      	ldr	r3, [r7, #4]
 804c404:	4a4d      	ldr	r2, [pc, #308]	; (804c53c <HAL_SPI_Init+0x198>)
 804c406:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 804c408:	687b      	ldr	r3, [r7, #4]
 804c40a:	4a4d      	ldr	r2, [pc, #308]	; (804c540 <HAL_SPI_Init+0x19c>)
 804c40c:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 804c40e:	687b      	ldr	r3, [r7, #4]
 804c410:	4a4c      	ldr	r2, [pc, #304]	; (804c544 <HAL_SPI_Init+0x1a0>)
 804c412:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 804c414:	687b      	ldr	r3, [r7, #4]
 804c416:	4a4c      	ldr	r2, [pc, #304]	; (804c548 <HAL_SPI_Init+0x1a4>)
 804c418:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 804c41a:	687b      	ldr	r3, [r7, #4]
 804c41c:	4a4b      	ldr	r2, [pc, #300]	; (804c54c <HAL_SPI_Init+0x1a8>)
 804c41e:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 804c420:	687b      	ldr	r3, [r7, #4]
 804c422:	4a4b      	ldr	r2, [pc, #300]	; (804c550 <HAL_SPI_Init+0x1ac>)
 804c424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 804c428:	687b      	ldr	r3, [r7, #4]
 804c42a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804c42e:	2b00      	cmp	r3, #0
 804c430:	d103      	bne.n	804c43a <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 804c432:	687b      	ldr	r3, [r7, #4]
 804c434:	4a47      	ldr	r2, [pc, #284]	; (804c554 <HAL_SPI_Init+0x1b0>)
 804c436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 804c43a:	687b      	ldr	r3, [r7, #4]
 804c43c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804c440:	6878      	ldr	r0, [r7, #4]
 804c442:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 804c444:	687b      	ldr	r3, [r7, #4]
 804c446:	2202      	movs	r2, #2
 804c448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 804c44c:	687b      	ldr	r3, [r7, #4]
 804c44e:	681b      	ldr	r3, [r3, #0]
 804c450:	681a      	ldr	r2, [r3, #0]
 804c452:	687b      	ldr	r3, [r7, #4]
 804c454:	681b      	ldr	r3, [r3, #0]
 804c456:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804c45a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 804c45c:	687b      	ldr	r3, [r7, #4]
 804c45e:	68db      	ldr	r3, [r3, #12]
 804c460:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804c464:	d902      	bls.n	804c46c <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 804c466:	2300      	movs	r3, #0
 804c468:	60fb      	str	r3, [r7, #12]
 804c46a:	e002      	b.n	804c472 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 804c46c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804c470:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 804c472:	687b      	ldr	r3, [r7, #4]
 804c474:	68db      	ldr	r3, [r3, #12]
 804c476:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 804c47a:	d007      	beq.n	804c48c <HAL_SPI_Init+0xe8>
 804c47c:	687b      	ldr	r3, [r7, #4]
 804c47e:	68db      	ldr	r3, [r3, #12]
 804c480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804c484:	d002      	beq.n	804c48c <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804c486:	687b      	ldr	r3, [r7, #4]
 804c488:	2200      	movs	r2, #0
 804c48a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 804c48c:	687b      	ldr	r3, [r7, #4]
 804c48e:	685b      	ldr	r3, [r3, #4]
 804c490:	f403 7282 	and.w	r2, r3, #260	; 0x104
 804c494:	687b      	ldr	r3, [r7, #4]
 804c496:	689b      	ldr	r3, [r3, #8]
 804c498:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 804c49c:	431a      	orrs	r2, r3
 804c49e:	687b      	ldr	r3, [r7, #4]
 804c4a0:	691b      	ldr	r3, [r3, #16]
 804c4a2:	f003 0302 	and.w	r3, r3, #2
 804c4a6:	431a      	orrs	r2, r3
 804c4a8:	687b      	ldr	r3, [r7, #4]
 804c4aa:	695b      	ldr	r3, [r3, #20]
 804c4ac:	f003 0301 	and.w	r3, r3, #1
 804c4b0:	431a      	orrs	r2, r3
 804c4b2:	687b      	ldr	r3, [r7, #4]
 804c4b4:	699b      	ldr	r3, [r3, #24]
 804c4b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804c4ba:	431a      	orrs	r2, r3
 804c4bc:	687b      	ldr	r3, [r7, #4]
 804c4be:	69db      	ldr	r3, [r3, #28]
 804c4c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804c4c4:	431a      	orrs	r2, r3
 804c4c6:	687b      	ldr	r3, [r7, #4]
 804c4c8:	6a1b      	ldr	r3, [r3, #32]
 804c4ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804c4ce:	ea42 0103 	orr.w	r1, r2, r3
 804c4d2:	687b      	ldr	r3, [r7, #4]
 804c4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804c4d6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 804c4da:	687b      	ldr	r3, [r7, #4]
 804c4dc:	681b      	ldr	r3, [r3, #0]
 804c4de:	430a      	orrs	r2, r1
 804c4e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 804c4e2:	687b      	ldr	r3, [r7, #4]
 804c4e4:	699b      	ldr	r3, [r3, #24]
 804c4e6:	0c1b      	lsrs	r3, r3, #16
 804c4e8:	f003 0204 	and.w	r2, r3, #4
 804c4ec:	687b      	ldr	r3, [r7, #4]
 804c4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804c4f0:	f003 0310 	and.w	r3, r3, #16
 804c4f4:	431a      	orrs	r2, r3
 804c4f6:	687b      	ldr	r3, [r7, #4]
 804c4f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804c4fa:	f003 0308 	and.w	r3, r3, #8
 804c4fe:	431a      	orrs	r2, r3
 804c500:	687b      	ldr	r3, [r7, #4]
 804c502:	68db      	ldr	r3, [r3, #12]
 804c504:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 804c508:	ea42 0103 	orr.w	r1, r2, r3
 804c50c:	68fb      	ldr	r3, [r7, #12]
 804c50e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 804c512:	687b      	ldr	r3, [r7, #4]
 804c514:	681b      	ldr	r3, [r3, #0]
 804c516:	430a      	orrs	r2, r1
 804c518:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 804c51a:	687b      	ldr	r3, [r7, #4]
 804c51c:	2200      	movs	r2, #0
 804c51e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 804c520:	687b      	ldr	r3, [r7, #4]
 804c522:	2201      	movs	r2, #1
 804c524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 804c528:	2300      	movs	r3, #0
}
 804c52a:	4618      	mov	r0, r3
 804c52c:	3710      	adds	r7, #16
 804c52e:	46bd      	mov	sp, r7
 804c530:	bd80      	pop	{r7, pc}
 804c532:	bf00      	nop
 804c534:	0804cde1 	.word	0x0804cde1
 804c538:	0804cdf5 	.word	0x0804cdf5
 804c53c:	0804ce09 	.word	0x0804ce09
 804c540:	0804ce1d 	.word	0x0804ce1d
 804c544:	0804ce31 	.word	0x0804ce31
 804c548:	0804ce45 	.word	0x0804ce45
 804c54c:	0804ce59 	.word	0x0804ce59
 804c550:	0804ce6d 	.word	0x0804ce6d
 804c554:	08041ef1 	.word	0x08041ef1

0804c558 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 804c558:	b580      	push	{r7, lr}
 804c55a:	b088      	sub	sp, #32
 804c55c:	af02      	add	r7, sp, #8
 804c55e:	60f8      	str	r0, [r7, #12]
 804c560:	60b9      	str	r1, [r7, #8]
 804c562:	603b      	str	r3, [r7, #0]
 804c564:	4613      	mov	r3, r2
 804c566:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 804c568:	2300      	movs	r3, #0
 804c56a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 804c56c:	68fb      	ldr	r3, [r7, #12]
 804c56e:	685b      	ldr	r3, [r3, #4]
 804c570:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804c574:	d112      	bne.n	804c59c <HAL_SPI_Receive+0x44>
 804c576:	68fb      	ldr	r3, [r7, #12]
 804c578:	689b      	ldr	r3, [r3, #8]
 804c57a:	2b00      	cmp	r3, #0
 804c57c:	d10e      	bne.n	804c59c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 804c57e:	68fb      	ldr	r3, [r7, #12]
 804c580:	2204      	movs	r2, #4
 804c582:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 804c586:	88fa      	ldrh	r2, [r7, #6]
 804c588:	683b      	ldr	r3, [r7, #0]
 804c58a:	9300      	str	r3, [sp, #0]
 804c58c:	4613      	mov	r3, r2
 804c58e:	68ba      	ldr	r2, [r7, #8]
 804c590:	68b9      	ldr	r1, [r7, #8]
 804c592:	68f8      	ldr	r0, [r7, #12]
 804c594:	f000 f910 	bl	804c7b8 <HAL_SPI_TransmitReceive>
 804c598:	4603      	mov	r3, r0
 804c59a:	e109      	b.n	804c7b0 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 804c59c:	68fb      	ldr	r3, [r7, #12]
 804c59e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 804c5a2:	2b01      	cmp	r3, #1
 804c5a4:	d101      	bne.n	804c5aa <HAL_SPI_Receive+0x52>
 804c5a6:	2302      	movs	r3, #2
 804c5a8:	e102      	b.n	804c7b0 <HAL_SPI_Receive+0x258>
 804c5aa:	68fb      	ldr	r3, [r7, #12]
 804c5ac:	2201      	movs	r2, #1
 804c5ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 804c5b2:	f7fa f8a9 	bl	8046708 <HAL_GetTick>
 804c5b6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 804c5b8:	68fb      	ldr	r3, [r7, #12]
 804c5ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 804c5be:	b2db      	uxtb	r3, r3
 804c5c0:	2b01      	cmp	r3, #1
 804c5c2:	d002      	beq.n	804c5ca <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 804c5c4:	2302      	movs	r3, #2
 804c5c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 804c5c8:	e0e9      	b.n	804c79e <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 804c5ca:	68bb      	ldr	r3, [r7, #8]
 804c5cc:	2b00      	cmp	r3, #0
 804c5ce:	d002      	beq.n	804c5d6 <HAL_SPI_Receive+0x7e>
 804c5d0:	88fb      	ldrh	r3, [r7, #6]
 804c5d2:	2b00      	cmp	r3, #0
 804c5d4:	d102      	bne.n	804c5dc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 804c5d6:	2301      	movs	r3, #1
 804c5d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 804c5da:	e0e0      	b.n	804c79e <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 804c5dc:	68fb      	ldr	r3, [r7, #12]
 804c5de:	2204      	movs	r2, #4
 804c5e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 804c5e4:	68fb      	ldr	r3, [r7, #12]
 804c5e6:	2200      	movs	r2, #0
 804c5e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 804c5ea:	68fb      	ldr	r3, [r7, #12]
 804c5ec:	68ba      	ldr	r2, [r7, #8]
 804c5ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 804c5f0:	68fb      	ldr	r3, [r7, #12]
 804c5f2:	88fa      	ldrh	r2, [r7, #6]
 804c5f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 804c5f8:	68fb      	ldr	r3, [r7, #12]
 804c5fa:	88fa      	ldrh	r2, [r7, #6]
 804c5fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 804c600:	68fb      	ldr	r3, [r7, #12]
 804c602:	2200      	movs	r2, #0
 804c604:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 804c606:	68fb      	ldr	r3, [r7, #12]
 804c608:	2200      	movs	r2, #0
 804c60a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 804c60c:	68fb      	ldr	r3, [r7, #12]
 804c60e:	2200      	movs	r2, #0
 804c610:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 804c612:	68fb      	ldr	r3, [r7, #12]
 804c614:	2200      	movs	r2, #0
 804c616:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 804c618:	68fb      	ldr	r3, [r7, #12]
 804c61a:	2200      	movs	r2, #0
 804c61c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 804c61e:	68fb      	ldr	r3, [r7, #12]
 804c620:	68db      	ldr	r3, [r3, #12]
 804c622:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804c626:	d908      	bls.n	804c63a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 804c628:	68fb      	ldr	r3, [r7, #12]
 804c62a:	681b      	ldr	r3, [r3, #0]
 804c62c:	685a      	ldr	r2, [r3, #4]
 804c62e:	68fb      	ldr	r3, [r7, #12]
 804c630:	681b      	ldr	r3, [r3, #0]
 804c632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 804c636:	605a      	str	r2, [r3, #4]
 804c638:	e007      	b.n	804c64a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 804c63a:	68fb      	ldr	r3, [r7, #12]
 804c63c:	681b      	ldr	r3, [r3, #0]
 804c63e:	685a      	ldr	r2, [r3, #4]
 804c640:	68fb      	ldr	r3, [r7, #12]
 804c642:	681b      	ldr	r3, [r3, #0]
 804c644:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 804c648:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804c64a:	68fb      	ldr	r3, [r7, #12]
 804c64c:	689b      	ldr	r3, [r3, #8]
 804c64e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804c652:	d10f      	bne.n	804c674 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 804c654:	68fb      	ldr	r3, [r7, #12]
 804c656:	681b      	ldr	r3, [r3, #0]
 804c658:	681a      	ldr	r2, [r3, #0]
 804c65a:	68fb      	ldr	r3, [r7, #12]
 804c65c:	681b      	ldr	r3, [r3, #0]
 804c65e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804c662:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 804c664:	68fb      	ldr	r3, [r7, #12]
 804c666:	681b      	ldr	r3, [r3, #0]
 804c668:	681a      	ldr	r2, [r3, #0]
 804c66a:	68fb      	ldr	r3, [r7, #12]
 804c66c:	681b      	ldr	r3, [r3, #0]
 804c66e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 804c672:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 804c674:	68fb      	ldr	r3, [r7, #12]
 804c676:	681b      	ldr	r3, [r3, #0]
 804c678:	681b      	ldr	r3, [r3, #0]
 804c67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804c67e:	2b40      	cmp	r3, #64	; 0x40
 804c680:	d007      	beq.n	804c692 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 804c682:	68fb      	ldr	r3, [r7, #12]
 804c684:	681b      	ldr	r3, [r3, #0]
 804c686:	681a      	ldr	r2, [r3, #0]
 804c688:	68fb      	ldr	r3, [r7, #12]
 804c68a:	681b      	ldr	r3, [r3, #0]
 804c68c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804c690:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 804c692:	68fb      	ldr	r3, [r7, #12]
 804c694:	68db      	ldr	r3, [r3, #12]
 804c696:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804c69a:	d867      	bhi.n	804c76c <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 804c69c:	e030      	b.n	804c700 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 804c69e:	68fb      	ldr	r3, [r7, #12]
 804c6a0:	681b      	ldr	r3, [r3, #0]
 804c6a2:	689b      	ldr	r3, [r3, #8]
 804c6a4:	f003 0301 	and.w	r3, r3, #1
 804c6a8:	2b01      	cmp	r3, #1
 804c6aa:	d117      	bne.n	804c6dc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 804c6ac:	68fb      	ldr	r3, [r7, #12]
 804c6ae:	681b      	ldr	r3, [r3, #0]
 804c6b0:	f103 020c 	add.w	r2, r3, #12
 804c6b4:	68fb      	ldr	r3, [r7, #12]
 804c6b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c6b8:	7812      	ldrb	r2, [r2, #0]
 804c6ba:	b2d2      	uxtb	r2, r2
 804c6bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 804c6be:	68fb      	ldr	r3, [r7, #12]
 804c6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c6c2:	1c5a      	adds	r2, r3, #1
 804c6c4:	68fb      	ldr	r3, [r7, #12]
 804c6c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 804c6c8:	68fb      	ldr	r3, [r7, #12]
 804c6ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c6ce:	b29b      	uxth	r3, r3
 804c6d0:	3b01      	subs	r3, #1
 804c6d2:	b29a      	uxth	r2, r3
 804c6d4:	68fb      	ldr	r3, [r7, #12]
 804c6d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 804c6da:	e011      	b.n	804c700 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 804c6dc:	f7fa f814 	bl	8046708 <HAL_GetTick>
 804c6e0:	4602      	mov	r2, r0
 804c6e2:	693b      	ldr	r3, [r7, #16]
 804c6e4:	1ad3      	subs	r3, r2, r3
 804c6e6:	683a      	ldr	r2, [r7, #0]
 804c6e8:	429a      	cmp	r2, r3
 804c6ea:	d803      	bhi.n	804c6f4 <HAL_SPI_Receive+0x19c>
 804c6ec:	683b      	ldr	r3, [r7, #0]
 804c6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 804c6f2:	d102      	bne.n	804c6fa <HAL_SPI_Receive+0x1a2>
 804c6f4:	683b      	ldr	r3, [r7, #0]
 804c6f6:	2b00      	cmp	r3, #0
 804c6f8:	d102      	bne.n	804c700 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 804c6fa:	2303      	movs	r3, #3
 804c6fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 804c6fe:	e04e      	b.n	804c79e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 804c700:	68fb      	ldr	r3, [r7, #12]
 804c702:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c706:	b29b      	uxth	r3, r3
 804c708:	2b00      	cmp	r3, #0
 804c70a:	d1c8      	bne.n	804c69e <HAL_SPI_Receive+0x146>
 804c70c:	e034      	b.n	804c778 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 804c70e:	68fb      	ldr	r3, [r7, #12]
 804c710:	681b      	ldr	r3, [r3, #0]
 804c712:	689b      	ldr	r3, [r3, #8]
 804c714:	f003 0301 	and.w	r3, r3, #1
 804c718:	2b01      	cmp	r3, #1
 804c71a:	d115      	bne.n	804c748 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 804c71c:	68fb      	ldr	r3, [r7, #12]
 804c71e:	681b      	ldr	r3, [r3, #0]
 804c720:	68da      	ldr	r2, [r3, #12]
 804c722:	68fb      	ldr	r3, [r7, #12]
 804c724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c726:	b292      	uxth	r2, r2
 804c728:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 804c72a:	68fb      	ldr	r3, [r7, #12]
 804c72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c72e:	1c9a      	adds	r2, r3, #2
 804c730:	68fb      	ldr	r3, [r7, #12]
 804c732:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 804c734:	68fb      	ldr	r3, [r7, #12]
 804c736:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c73a:	b29b      	uxth	r3, r3
 804c73c:	3b01      	subs	r3, #1
 804c73e:	b29a      	uxth	r2, r3
 804c740:	68fb      	ldr	r3, [r7, #12]
 804c742:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 804c746:	e011      	b.n	804c76c <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 804c748:	f7f9 ffde 	bl	8046708 <HAL_GetTick>
 804c74c:	4602      	mov	r2, r0
 804c74e:	693b      	ldr	r3, [r7, #16]
 804c750:	1ad3      	subs	r3, r2, r3
 804c752:	683a      	ldr	r2, [r7, #0]
 804c754:	429a      	cmp	r2, r3
 804c756:	d803      	bhi.n	804c760 <HAL_SPI_Receive+0x208>
 804c758:	683b      	ldr	r3, [r7, #0]
 804c75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804c75e:	d102      	bne.n	804c766 <HAL_SPI_Receive+0x20e>
 804c760:	683b      	ldr	r3, [r7, #0]
 804c762:	2b00      	cmp	r3, #0
 804c764:	d102      	bne.n	804c76c <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 804c766:	2303      	movs	r3, #3
 804c768:	75fb      	strb	r3, [r7, #23]
          goto error;
 804c76a:	e018      	b.n	804c79e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 804c76c:	68fb      	ldr	r3, [r7, #12]
 804c76e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c772:	b29b      	uxth	r3, r3
 804c774:	2b00      	cmp	r3, #0
 804c776:	d1ca      	bne.n	804c70e <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 804c778:	693a      	ldr	r2, [r7, #16]
 804c77a:	6839      	ldr	r1, [r7, #0]
 804c77c:	68f8      	ldr	r0, [r7, #12]
 804c77e:	f000 fcab 	bl	804d0d8 <SPI_EndRxTransaction>
 804c782:	4603      	mov	r3, r0
 804c784:	2b00      	cmp	r3, #0
 804c786:	d002      	beq.n	804c78e <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 804c788:	68fb      	ldr	r3, [r7, #12]
 804c78a:	2220      	movs	r2, #32
 804c78c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 804c78e:	68fb      	ldr	r3, [r7, #12]
 804c790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804c792:	2b00      	cmp	r3, #0
 804c794:	d002      	beq.n	804c79c <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 804c796:	2301      	movs	r3, #1
 804c798:	75fb      	strb	r3, [r7, #23]
 804c79a:	e000      	b.n	804c79e <HAL_SPI_Receive+0x246>
  }

error :
 804c79c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 804c79e:	68fb      	ldr	r3, [r7, #12]
 804c7a0:	2201      	movs	r2, #1
 804c7a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 804c7a6:	68fb      	ldr	r3, [r7, #12]
 804c7a8:	2200      	movs	r2, #0
 804c7aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 804c7ae:	7dfb      	ldrb	r3, [r7, #23]
}
 804c7b0:	4618      	mov	r0, r3
 804c7b2:	3718      	adds	r7, #24
 804c7b4:	46bd      	mov	sp, r7
 804c7b6:	bd80      	pop	{r7, pc}

0804c7b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 804c7b8:	b580      	push	{r7, lr}
 804c7ba:	b08a      	sub	sp, #40	; 0x28
 804c7bc:	af00      	add	r7, sp, #0
 804c7be:	60f8      	str	r0, [r7, #12]
 804c7c0:	60b9      	str	r1, [r7, #8]
 804c7c2:	607a      	str	r2, [r7, #4]
 804c7c4:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 804c7c6:	2301      	movs	r3, #1
 804c7c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 804c7ca:	2300      	movs	r3, #0
 804c7cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 804c7d0:	68fb      	ldr	r3, [r7, #12]
 804c7d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 804c7d6:	2b01      	cmp	r3, #1
 804c7d8:	d101      	bne.n	804c7de <HAL_SPI_TransmitReceive+0x26>
 804c7da:	2302      	movs	r3, #2
 804c7dc:	e1fb      	b.n	804cbd6 <HAL_SPI_TransmitReceive+0x41e>
 804c7de:	68fb      	ldr	r3, [r7, #12]
 804c7e0:	2201      	movs	r2, #1
 804c7e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 804c7e6:	f7f9 ff8f 	bl	8046708 <HAL_GetTick>
 804c7ea:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 804c7ec:	68fb      	ldr	r3, [r7, #12]
 804c7ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 804c7f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 804c7f4:	68fb      	ldr	r3, [r7, #12]
 804c7f6:	685b      	ldr	r3, [r3, #4]
 804c7f8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 804c7fa:	887b      	ldrh	r3, [r7, #2]
 804c7fc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 804c7fe:	887b      	ldrh	r3, [r7, #2]
 804c800:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 804c802:	7efb      	ldrb	r3, [r7, #27]
 804c804:	2b01      	cmp	r3, #1
 804c806:	d00e      	beq.n	804c826 <HAL_SPI_TransmitReceive+0x6e>
 804c808:	697b      	ldr	r3, [r7, #20]
 804c80a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804c80e:	d106      	bne.n	804c81e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 804c810:	68fb      	ldr	r3, [r7, #12]
 804c812:	689b      	ldr	r3, [r3, #8]
 804c814:	2b00      	cmp	r3, #0
 804c816:	d102      	bne.n	804c81e <HAL_SPI_TransmitReceive+0x66>
 804c818:	7efb      	ldrb	r3, [r7, #27]
 804c81a:	2b04      	cmp	r3, #4
 804c81c:	d003      	beq.n	804c826 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 804c81e:	2302      	movs	r3, #2
 804c820:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 804c824:	e1cd      	b.n	804cbc2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 804c826:	68bb      	ldr	r3, [r7, #8]
 804c828:	2b00      	cmp	r3, #0
 804c82a:	d005      	beq.n	804c838 <HAL_SPI_TransmitReceive+0x80>
 804c82c:	687b      	ldr	r3, [r7, #4]
 804c82e:	2b00      	cmp	r3, #0
 804c830:	d002      	beq.n	804c838 <HAL_SPI_TransmitReceive+0x80>
 804c832:	887b      	ldrh	r3, [r7, #2]
 804c834:	2b00      	cmp	r3, #0
 804c836:	d103      	bne.n	804c840 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 804c838:	2301      	movs	r3, #1
 804c83a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 804c83e:	e1c0      	b.n	804cbc2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 804c840:	68fb      	ldr	r3, [r7, #12]
 804c842:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 804c846:	b2db      	uxtb	r3, r3
 804c848:	2b04      	cmp	r3, #4
 804c84a:	d003      	beq.n	804c854 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 804c84c:	68fb      	ldr	r3, [r7, #12]
 804c84e:	2205      	movs	r2, #5
 804c850:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 804c854:	68fb      	ldr	r3, [r7, #12]
 804c856:	2200      	movs	r2, #0
 804c858:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 804c85a:	68fb      	ldr	r3, [r7, #12]
 804c85c:	687a      	ldr	r2, [r7, #4]
 804c85e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 804c860:	68fb      	ldr	r3, [r7, #12]
 804c862:	887a      	ldrh	r2, [r7, #2]
 804c864:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 804c868:	68fb      	ldr	r3, [r7, #12]
 804c86a:	887a      	ldrh	r2, [r7, #2]
 804c86c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 804c870:	68fb      	ldr	r3, [r7, #12]
 804c872:	68ba      	ldr	r2, [r7, #8]
 804c874:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 804c876:	68fb      	ldr	r3, [r7, #12]
 804c878:	887a      	ldrh	r2, [r7, #2]
 804c87a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 804c87c:	68fb      	ldr	r3, [r7, #12]
 804c87e:	887a      	ldrh	r2, [r7, #2]
 804c880:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 804c882:	68fb      	ldr	r3, [r7, #12]
 804c884:	2200      	movs	r2, #0
 804c886:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 804c888:	68fb      	ldr	r3, [r7, #12]
 804c88a:	2200      	movs	r2, #0
 804c88c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 804c88e:	68fb      	ldr	r3, [r7, #12]
 804c890:	68db      	ldr	r3, [r3, #12]
 804c892:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804c896:	d802      	bhi.n	804c89e <HAL_SPI_TransmitReceive+0xe6>
 804c898:	8a3b      	ldrh	r3, [r7, #16]
 804c89a:	2b01      	cmp	r3, #1
 804c89c:	d908      	bls.n	804c8b0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 804c89e:	68fb      	ldr	r3, [r7, #12]
 804c8a0:	681b      	ldr	r3, [r3, #0]
 804c8a2:	685a      	ldr	r2, [r3, #4]
 804c8a4:	68fb      	ldr	r3, [r7, #12]
 804c8a6:	681b      	ldr	r3, [r3, #0]
 804c8a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 804c8ac:	605a      	str	r2, [r3, #4]
 804c8ae:	e007      	b.n	804c8c0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 804c8b0:	68fb      	ldr	r3, [r7, #12]
 804c8b2:	681b      	ldr	r3, [r3, #0]
 804c8b4:	685a      	ldr	r2, [r3, #4]
 804c8b6:	68fb      	ldr	r3, [r7, #12]
 804c8b8:	681b      	ldr	r3, [r3, #0]
 804c8ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 804c8be:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 804c8c0:	68fb      	ldr	r3, [r7, #12]
 804c8c2:	681b      	ldr	r3, [r3, #0]
 804c8c4:	681b      	ldr	r3, [r3, #0]
 804c8c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804c8ca:	2b40      	cmp	r3, #64	; 0x40
 804c8cc:	d007      	beq.n	804c8de <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 804c8ce:	68fb      	ldr	r3, [r7, #12]
 804c8d0:	681b      	ldr	r3, [r3, #0]
 804c8d2:	681a      	ldr	r2, [r3, #0]
 804c8d4:	68fb      	ldr	r3, [r7, #12]
 804c8d6:	681b      	ldr	r3, [r3, #0]
 804c8d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 804c8dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 804c8de:	68fb      	ldr	r3, [r7, #12]
 804c8e0:	68db      	ldr	r3, [r3, #12]
 804c8e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 804c8e6:	d97c      	bls.n	804c9e2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 804c8e8:	68fb      	ldr	r3, [r7, #12]
 804c8ea:	685b      	ldr	r3, [r3, #4]
 804c8ec:	2b00      	cmp	r3, #0
 804c8ee:	d002      	beq.n	804c8f6 <HAL_SPI_TransmitReceive+0x13e>
 804c8f0:	8a7b      	ldrh	r3, [r7, #18]
 804c8f2:	2b01      	cmp	r3, #1
 804c8f4:	d169      	bne.n	804c9ca <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804c8f6:	68fb      	ldr	r3, [r7, #12]
 804c8f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c8fa:	881a      	ldrh	r2, [r3, #0]
 804c8fc:	68fb      	ldr	r3, [r7, #12]
 804c8fe:	681b      	ldr	r3, [r3, #0]
 804c900:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 804c902:	68fb      	ldr	r3, [r7, #12]
 804c904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c906:	1c9a      	adds	r2, r3, #2
 804c908:	68fb      	ldr	r3, [r7, #12]
 804c90a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 804c90c:	68fb      	ldr	r3, [r7, #12]
 804c90e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c910:	b29b      	uxth	r3, r3
 804c912:	3b01      	subs	r3, #1
 804c914:	b29a      	uxth	r2, r3
 804c916:	68fb      	ldr	r3, [r7, #12]
 804c918:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804c91a:	e056      	b.n	804c9ca <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 804c91c:	68fb      	ldr	r3, [r7, #12]
 804c91e:	681b      	ldr	r3, [r3, #0]
 804c920:	689b      	ldr	r3, [r3, #8]
 804c922:	f003 0302 	and.w	r3, r3, #2
 804c926:	2b02      	cmp	r3, #2
 804c928:	d11b      	bne.n	804c962 <HAL_SPI_TransmitReceive+0x1aa>
 804c92a:	68fb      	ldr	r3, [r7, #12]
 804c92c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c92e:	b29b      	uxth	r3, r3
 804c930:	2b00      	cmp	r3, #0
 804c932:	d016      	beq.n	804c962 <HAL_SPI_TransmitReceive+0x1aa>
 804c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804c936:	2b01      	cmp	r3, #1
 804c938:	d113      	bne.n	804c962 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804c93a:	68fb      	ldr	r3, [r7, #12]
 804c93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c93e:	881a      	ldrh	r2, [r3, #0]
 804c940:	68fb      	ldr	r3, [r7, #12]
 804c942:	681b      	ldr	r3, [r3, #0]
 804c944:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 804c946:	68fb      	ldr	r3, [r7, #12]
 804c948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804c94a:	1c9a      	adds	r2, r3, #2
 804c94c:	68fb      	ldr	r3, [r7, #12]
 804c94e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 804c950:	68fb      	ldr	r3, [r7, #12]
 804c952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c954:	b29b      	uxth	r3, r3
 804c956:	3b01      	subs	r3, #1
 804c958:	b29a      	uxth	r2, r3
 804c95a:	68fb      	ldr	r3, [r7, #12]
 804c95c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 804c95e:	2300      	movs	r3, #0
 804c960:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 804c962:	68fb      	ldr	r3, [r7, #12]
 804c964:	681b      	ldr	r3, [r3, #0]
 804c966:	689b      	ldr	r3, [r3, #8]
 804c968:	f003 0301 	and.w	r3, r3, #1
 804c96c:	2b01      	cmp	r3, #1
 804c96e:	d11c      	bne.n	804c9aa <HAL_SPI_TransmitReceive+0x1f2>
 804c970:	68fb      	ldr	r3, [r7, #12]
 804c972:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c976:	b29b      	uxth	r3, r3
 804c978:	2b00      	cmp	r3, #0
 804c97a:	d016      	beq.n	804c9aa <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 804c97c:	68fb      	ldr	r3, [r7, #12]
 804c97e:	681b      	ldr	r3, [r3, #0]
 804c980:	68da      	ldr	r2, [r3, #12]
 804c982:	68fb      	ldr	r3, [r7, #12]
 804c984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c986:	b292      	uxth	r2, r2
 804c988:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 804c98a:	68fb      	ldr	r3, [r7, #12]
 804c98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804c98e:	1c9a      	adds	r2, r3, #2
 804c990:	68fb      	ldr	r3, [r7, #12]
 804c992:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 804c994:	68fb      	ldr	r3, [r7, #12]
 804c996:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c99a:	b29b      	uxth	r3, r3
 804c99c:	3b01      	subs	r3, #1
 804c99e:	b29a      	uxth	r2, r3
 804c9a0:	68fb      	ldr	r3, [r7, #12]
 804c9a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 804c9a6:	2301      	movs	r3, #1
 804c9a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 804c9aa:	f7f9 fead 	bl	8046708 <HAL_GetTick>
 804c9ae:	4602      	mov	r2, r0
 804c9b0:	69fb      	ldr	r3, [r7, #28]
 804c9b2:	1ad3      	subs	r3, r2, r3
 804c9b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804c9b6:	429a      	cmp	r2, r3
 804c9b8:	d807      	bhi.n	804c9ca <HAL_SPI_TransmitReceive+0x212>
 804c9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804c9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 804c9c0:	d003      	beq.n	804c9ca <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 804c9c2:	2303      	movs	r3, #3
 804c9c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 804c9c8:	e0fb      	b.n	804cbc2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804c9ca:	68fb      	ldr	r3, [r7, #12]
 804c9cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c9ce:	b29b      	uxth	r3, r3
 804c9d0:	2b00      	cmp	r3, #0
 804c9d2:	d1a3      	bne.n	804c91c <HAL_SPI_TransmitReceive+0x164>
 804c9d4:	68fb      	ldr	r3, [r7, #12]
 804c9d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804c9da:	b29b      	uxth	r3, r3
 804c9dc:	2b00      	cmp	r3, #0
 804c9de:	d19d      	bne.n	804c91c <HAL_SPI_TransmitReceive+0x164>
 804c9e0:	e0df      	b.n	804cba2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 804c9e2:	68fb      	ldr	r3, [r7, #12]
 804c9e4:	685b      	ldr	r3, [r3, #4]
 804c9e6:	2b00      	cmp	r3, #0
 804c9e8:	d003      	beq.n	804c9f2 <HAL_SPI_TransmitReceive+0x23a>
 804c9ea:	8a7b      	ldrh	r3, [r7, #18]
 804c9ec:	2b01      	cmp	r3, #1
 804c9ee:	f040 80cb 	bne.w	804cb88 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 804c9f2:	68fb      	ldr	r3, [r7, #12]
 804c9f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804c9f6:	b29b      	uxth	r3, r3
 804c9f8:	2b01      	cmp	r3, #1
 804c9fa:	d912      	bls.n	804ca22 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804c9fc:	68fb      	ldr	r3, [r7, #12]
 804c9fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804ca00:	881a      	ldrh	r2, [r3, #0]
 804ca02:	68fb      	ldr	r3, [r7, #12]
 804ca04:	681b      	ldr	r3, [r3, #0]
 804ca06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 804ca08:	68fb      	ldr	r3, [r7, #12]
 804ca0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804ca0c:	1c9a      	adds	r2, r3, #2
 804ca0e:	68fb      	ldr	r3, [r7, #12]
 804ca10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 804ca12:	68fb      	ldr	r3, [r7, #12]
 804ca14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804ca16:	b29b      	uxth	r3, r3
 804ca18:	3b02      	subs	r3, #2
 804ca1a:	b29a      	uxth	r2, r3
 804ca1c:	68fb      	ldr	r3, [r7, #12]
 804ca1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 804ca20:	e0b2      	b.n	804cb88 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 804ca22:	68fb      	ldr	r3, [r7, #12]
 804ca24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 804ca26:	68fb      	ldr	r3, [r7, #12]
 804ca28:	681b      	ldr	r3, [r3, #0]
 804ca2a:	330c      	adds	r3, #12
 804ca2c:	7812      	ldrb	r2, [r2, #0]
 804ca2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 804ca30:	68fb      	ldr	r3, [r7, #12]
 804ca32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804ca34:	1c5a      	adds	r2, r3, #1
 804ca36:	68fb      	ldr	r3, [r7, #12]
 804ca38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 804ca3a:	68fb      	ldr	r3, [r7, #12]
 804ca3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804ca3e:	b29b      	uxth	r3, r3
 804ca40:	3b01      	subs	r3, #1
 804ca42:	b29a      	uxth	r2, r3
 804ca44:	68fb      	ldr	r3, [r7, #12]
 804ca46:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804ca48:	e09e      	b.n	804cb88 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 804ca4a:	68fb      	ldr	r3, [r7, #12]
 804ca4c:	681b      	ldr	r3, [r3, #0]
 804ca4e:	689b      	ldr	r3, [r3, #8]
 804ca50:	f003 0302 	and.w	r3, r3, #2
 804ca54:	2b02      	cmp	r3, #2
 804ca56:	d134      	bne.n	804cac2 <HAL_SPI_TransmitReceive+0x30a>
 804ca58:	68fb      	ldr	r3, [r7, #12]
 804ca5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804ca5c:	b29b      	uxth	r3, r3
 804ca5e:	2b00      	cmp	r3, #0
 804ca60:	d02f      	beq.n	804cac2 <HAL_SPI_TransmitReceive+0x30a>
 804ca62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804ca64:	2b01      	cmp	r3, #1
 804ca66:	d12c      	bne.n	804cac2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 804ca68:	68fb      	ldr	r3, [r7, #12]
 804ca6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804ca6c:	b29b      	uxth	r3, r3
 804ca6e:	2b01      	cmp	r3, #1
 804ca70:	d912      	bls.n	804ca98 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 804ca72:	68fb      	ldr	r3, [r7, #12]
 804ca74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804ca76:	881a      	ldrh	r2, [r3, #0]
 804ca78:	68fb      	ldr	r3, [r7, #12]
 804ca7a:	681b      	ldr	r3, [r3, #0]
 804ca7c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 804ca7e:	68fb      	ldr	r3, [r7, #12]
 804ca80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804ca82:	1c9a      	adds	r2, r3, #2
 804ca84:	68fb      	ldr	r3, [r7, #12]
 804ca86:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 804ca88:	68fb      	ldr	r3, [r7, #12]
 804ca8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804ca8c:	b29b      	uxth	r3, r3
 804ca8e:	3b02      	subs	r3, #2
 804ca90:	b29a      	uxth	r2, r3
 804ca92:	68fb      	ldr	r3, [r7, #12]
 804ca94:	87da      	strh	r2, [r3, #62]	; 0x3e
 804ca96:	e012      	b.n	804cabe <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 804ca98:	68fb      	ldr	r3, [r7, #12]
 804ca9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 804ca9c:	68fb      	ldr	r3, [r7, #12]
 804ca9e:	681b      	ldr	r3, [r3, #0]
 804caa0:	330c      	adds	r3, #12
 804caa2:	7812      	ldrb	r2, [r2, #0]
 804caa4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 804caa6:	68fb      	ldr	r3, [r7, #12]
 804caa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804caaa:	1c5a      	adds	r2, r3, #1
 804caac:	68fb      	ldr	r3, [r7, #12]
 804caae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 804cab0:	68fb      	ldr	r3, [r7, #12]
 804cab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804cab4:	b29b      	uxth	r3, r3
 804cab6:	3b01      	subs	r3, #1
 804cab8:	b29a      	uxth	r2, r3
 804caba:	68fb      	ldr	r3, [r7, #12]
 804cabc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 804cabe:	2300      	movs	r3, #0
 804cac0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 804cac2:	68fb      	ldr	r3, [r7, #12]
 804cac4:	681b      	ldr	r3, [r3, #0]
 804cac6:	689b      	ldr	r3, [r3, #8]
 804cac8:	f003 0301 	and.w	r3, r3, #1
 804cacc:	2b01      	cmp	r3, #1
 804cace:	d148      	bne.n	804cb62 <HAL_SPI_TransmitReceive+0x3aa>
 804cad0:	68fb      	ldr	r3, [r7, #12]
 804cad2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804cad6:	b29b      	uxth	r3, r3
 804cad8:	2b00      	cmp	r3, #0
 804cada:	d042      	beq.n	804cb62 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 804cadc:	68fb      	ldr	r3, [r7, #12]
 804cade:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804cae2:	b29b      	uxth	r3, r3
 804cae4:	2b01      	cmp	r3, #1
 804cae6:	d923      	bls.n	804cb30 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 804cae8:	68fb      	ldr	r3, [r7, #12]
 804caea:	681b      	ldr	r3, [r3, #0]
 804caec:	68da      	ldr	r2, [r3, #12]
 804caee:	68fb      	ldr	r3, [r7, #12]
 804caf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804caf2:	b292      	uxth	r2, r2
 804caf4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 804caf6:	68fb      	ldr	r3, [r7, #12]
 804caf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804cafa:	1c9a      	adds	r2, r3, #2
 804cafc:	68fb      	ldr	r3, [r7, #12]
 804cafe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 804cb00:	68fb      	ldr	r3, [r7, #12]
 804cb02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804cb06:	b29b      	uxth	r3, r3
 804cb08:	3b02      	subs	r3, #2
 804cb0a:	b29a      	uxth	r2, r3
 804cb0c:	68fb      	ldr	r3, [r7, #12]
 804cb0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 804cb12:	68fb      	ldr	r3, [r7, #12]
 804cb14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804cb18:	b29b      	uxth	r3, r3
 804cb1a:	2b01      	cmp	r3, #1
 804cb1c:	d81f      	bhi.n	804cb5e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 804cb1e:	68fb      	ldr	r3, [r7, #12]
 804cb20:	681b      	ldr	r3, [r3, #0]
 804cb22:	685a      	ldr	r2, [r3, #4]
 804cb24:	68fb      	ldr	r3, [r7, #12]
 804cb26:	681b      	ldr	r3, [r3, #0]
 804cb28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 804cb2c:	605a      	str	r2, [r3, #4]
 804cb2e:	e016      	b.n	804cb5e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 804cb30:	68fb      	ldr	r3, [r7, #12]
 804cb32:	681b      	ldr	r3, [r3, #0]
 804cb34:	f103 020c 	add.w	r2, r3, #12
 804cb38:	68fb      	ldr	r3, [r7, #12]
 804cb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804cb3c:	7812      	ldrb	r2, [r2, #0]
 804cb3e:	b2d2      	uxtb	r2, r2
 804cb40:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 804cb42:	68fb      	ldr	r3, [r7, #12]
 804cb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804cb46:	1c5a      	adds	r2, r3, #1
 804cb48:	68fb      	ldr	r3, [r7, #12]
 804cb4a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 804cb4c:	68fb      	ldr	r3, [r7, #12]
 804cb4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804cb52:	b29b      	uxth	r3, r3
 804cb54:	3b01      	subs	r3, #1
 804cb56:	b29a      	uxth	r2, r3
 804cb58:	68fb      	ldr	r3, [r7, #12]
 804cb5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 804cb5e:	2301      	movs	r3, #1
 804cb60:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 804cb62:	f7f9 fdd1 	bl	8046708 <HAL_GetTick>
 804cb66:	4602      	mov	r2, r0
 804cb68:	69fb      	ldr	r3, [r7, #28]
 804cb6a:	1ad3      	subs	r3, r2, r3
 804cb6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804cb6e:	429a      	cmp	r2, r3
 804cb70:	d803      	bhi.n	804cb7a <HAL_SPI_TransmitReceive+0x3c2>
 804cb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804cb74:	f1b3 3fff 	cmp.w	r3, #4294967295
 804cb78:	d102      	bne.n	804cb80 <HAL_SPI_TransmitReceive+0x3c8>
 804cb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804cb7c:	2b00      	cmp	r3, #0
 804cb7e:	d103      	bne.n	804cb88 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 804cb80:	2303      	movs	r3, #3
 804cb82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 804cb86:	e01c      	b.n	804cbc2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 804cb88:	68fb      	ldr	r3, [r7, #12]
 804cb8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 804cb8c:	b29b      	uxth	r3, r3
 804cb8e:	2b00      	cmp	r3, #0
 804cb90:	f47f af5b 	bne.w	804ca4a <HAL_SPI_TransmitReceive+0x292>
 804cb94:	68fb      	ldr	r3, [r7, #12]
 804cb96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 804cb9a:	b29b      	uxth	r3, r3
 804cb9c:	2b00      	cmp	r3, #0
 804cb9e:	f47f af54 	bne.w	804ca4a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 804cba2:	69fa      	ldr	r2, [r7, #28]
 804cba4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 804cba6:	68f8      	ldr	r0, [r7, #12]
 804cba8:	f000 faee 	bl	804d188 <SPI_EndRxTxTransaction>
 804cbac:	4603      	mov	r3, r0
 804cbae:	2b00      	cmp	r3, #0
 804cbb0:	d006      	beq.n	804cbc0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 804cbb2:	2301      	movs	r3, #1
 804cbb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 804cbb8:	68fb      	ldr	r3, [r7, #12]
 804cbba:	2220      	movs	r2, #32
 804cbbc:	661a      	str	r2, [r3, #96]	; 0x60
 804cbbe:	e000      	b.n	804cbc2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 804cbc0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 804cbc2:	68fb      	ldr	r3, [r7, #12]
 804cbc4:	2201      	movs	r2, #1
 804cbc6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 804cbca:	68fb      	ldr	r3, [r7, #12]
 804cbcc:	2200      	movs	r2, #0
 804cbce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 804cbd2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 804cbd6:	4618      	mov	r0, r3
 804cbd8:	3728      	adds	r7, #40	; 0x28
 804cbda:	46bd      	mov	sp, r7
 804cbdc:	bd80      	pop	{r7, pc}
	...

0804cbe0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 804cbe0:	b580      	push	{r7, lr}
 804cbe2:	b088      	sub	sp, #32
 804cbe4:	af00      	add	r7, sp, #0
 804cbe6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 804cbe8:	687b      	ldr	r3, [r7, #4]
 804cbea:	681b      	ldr	r3, [r3, #0]
 804cbec:	685b      	ldr	r3, [r3, #4]
 804cbee:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 804cbf0:	687b      	ldr	r3, [r7, #4]
 804cbf2:	681b      	ldr	r3, [r3, #0]
 804cbf4:	689b      	ldr	r3, [r3, #8]
 804cbf6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 804cbf8:	69bb      	ldr	r3, [r7, #24]
 804cbfa:	099b      	lsrs	r3, r3, #6
 804cbfc:	f003 0301 	and.w	r3, r3, #1
 804cc00:	2b00      	cmp	r3, #0
 804cc02:	d10f      	bne.n	804cc24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 804cc04:	69bb      	ldr	r3, [r7, #24]
 804cc06:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 804cc0a:	2b00      	cmp	r3, #0
 804cc0c:	d00a      	beq.n	804cc24 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 804cc0e:	69fb      	ldr	r3, [r7, #28]
 804cc10:	099b      	lsrs	r3, r3, #6
 804cc12:	f003 0301 	and.w	r3, r3, #1
 804cc16:	2b00      	cmp	r3, #0
 804cc18:	d004      	beq.n	804cc24 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 804cc1a:	687b      	ldr	r3, [r7, #4]
 804cc1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804cc1e:	6878      	ldr	r0, [r7, #4]
 804cc20:	4798      	blx	r3
    return;
 804cc22:	e0d8      	b.n	804cdd6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 804cc24:	69bb      	ldr	r3, [r7, #24]
 804cc26:	085b      	lsrs	r3, r3, #1
 804cc28:	f003 0301 	and.w	r3, r3, #1
 804cc2c:	2b00      	cmp	r3, #0
 804cc2e:	d00a      	beq.n	804cc46 <HAL_SPI_IRQHandler+0x66>
 804cc30:	69fb      	ldr	r3, [r7, #28]
 804cc32:	09db      	lsrs	r3, r3, #7
 804cc34:	f003 0301 	and.w	r3, r3, #1
 804cc38:	2b00      	cmp	r3, #0
 804cc3a:	d004      	beq.n	804cc46 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 804cc3c:	687b      	ldr	r3, [r7, #4]
 804cc3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804cc40:	6878      	ldr	r0, [r7, #4]
 804cc42:	4798      	blx	r3
    return;
 804cc44:	e0c7      	b.n	804cdd6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 804cc46:	69bb      	ldr	r3, [r7, #24]
 804cc48:	095b      	lsrs	r3, r3, #5
 804cc4a:	f003 0301 	and.w	r3, r3, #1
 804cc4e:	2b00      	cmp	r3, #0
 804cc50:	d10c      	bne.n	804cc6c <HAL_SPI_IRQHandler+0x8c>
 804cc52:	69bb      	ldr	r3, [r7, #24]
 804cc54:	099b      	lsrs	r3, r3, #6
 804cc56:	f003 0301 	and.w	r3, r3, #1
 804cc5a:	2b00      	cmp	r3, #0
 804cc5c:	d106      	bne.n	804cc6c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 804cc5e:	69bb      	ldr	r3, [r7, #24]
 804cc60:	0a1b      	lsrs	r3, r3, #8
 804cc62:	f003 0301 	and.w	r3, r3, #1
 804cc66:	2b00      	cmp	r3, #0
 804cc68:	f000 80b5 	beq.w	804cdd6 <HAL_SPI_IRQHandler+0x1f6>
 804cc6c:	69fb      	ldr	r3, [r7, #28]
 804cc6e:	095b      	lsrs	r3, r3, #5
 804cc70:	f003 0301 	and.w	r3, r3, #1
 804cc74:	2b00      	cmp	r3, #0
 804cc76:	f000 80ae 	beq.w	804cdd6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 804cc7a:	69bb      	ldr	r3, [r7, #24]
 804cc7c:	099b      	lsrs	r3, r3, #6
 804cc7e:	f003 0301 	and.w	r3, r3, #1
 804cc82:	2b00      	cmp	r3, #0
 804cc84:	d023      	beq.n	804ccce <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 804cc86:	687b      	ldr	r3, [r7, #4]
 804cc88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 804cc8c:	b2db      	uxtb	r3, r3
 804cc8e:	2b03      	cmp	r3, #3
 804cc90:	d011      	beq.n	804ccb6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 804cc92:	687b      	ldr	r3, [r7, #4]
 804cc94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804cc96:	f043 0204 	orr.w	r2, r3, #4
 804cc9a:	687b      	ldr	r3, [r7, #4]
 804cc9c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 804cc9e:	2300      	movs	r3, #0
 804cca0:	617b      	str	r3, [r7, #20]
 804cca2:	687b      	ldr	r3, [r7, #4]
 804cca4:	681b      	ldr	r3, [r3, #0]
 804cca6:	68db      	ldr	r3, [r3, #12]
 804cca8:	617b      	str	r3, [r7, #20]
 804ccaa:	687b      	ldr	r3, [r7, #4]
 804ccac:	681b      	ldr	r3, [r3, #0]
 804ccae:	689b      	ldr	r3, [r3, #8]
 804ccb0:	617b      	str	r3, [r7, #20]
 804ccb2:	697b      	ldr	r3, [r7, #20]
 804ccb4:	e00b      	b.n	804ccce <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 804ccb6:	2300      	movs	r3, #0
 804ccb8:	613b      	str	r3, [r7, #16]
 804ccba:	687b      	ldr	r3, [r7, #4]
 804ccbc:	681b      	ldr	r3, [r3, #0]
 804ccbe:	68db      	ldr	r3, [r3, #12]
 804ccc0:	613b      	str	r3, [r7, #16]
 804ccc2:	687b      	ldr	r3, [r7, #4]
 804ccc4:	681b      	ldr	r3, [r3, #0]
 804ccc6:	689b      	ldr	r3, [r3, #8]
 804ccc8:	613b      	str	r3, [r7, #16]
 804ccca:	693b      	ldr	r3, [r7, #16]
        return;
 804cccc:	e083      	b.n	804cdd6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 804ccce:	69bb      	ldr	r3, [r7, #24]
 804ccd0:	095b      	lsrs	r3, r3, #5
 804ccd2:	f003 0301 	and.w	r3, r3, #1
 804ccd6:	2b00      	cmp	r3, #0
 804ccd8:	d014      	beq.n	804cd04 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 804ccda:	687b      	ldr	r3, [r7, #4]
 804ccdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804ccde:	f043 0201 	orr.w	r2, r3, #1
 804cce2:	687b      	ldr	r3, [r7, #4]
 804cce4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 804cce6:	2300      	movs	r3, #0
 804cce8:	60fb      	str	r3, [r7, #12]
 804ccea:	687b      	ldr	r3, [r7, #4]
 804ccec:	681b      	ldr	r3, [r3, #0]
 804ccee:	689b      	ldr	r3, [r3, #8]
 804ccf0:	60fb      	str	r3, [r7, #12]
 804ccf2:	687b      	ldr	r3, [r7, #4]
 804ccf4:	681b      	ldr	r3, [r3, #0]
 804ccf6:	681a      	ldr	r2, [r3, #0]
 804ccf8:	687b      	ldr	r3, [r7, #4]
 804ccfa:	681b      	ldr	r3, [r3, #0]
 804ccfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804cd00:	601a      	str	r2, [r3, #0]
 804cd02:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 804cd04:	69bb      	ldr	r3, [r7, #24]
 804cd06:	0a1b      	lsrs	r3, r3, #8
 804cd08:	f003 0301 	and.w	r3, r3, #1
 804cd0c:	2b00      	cmp	r3, #0
 804cd0e:	d00c      	beq.n	804cd2a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 804cd10:	687b      	ldr	r3, [r7, #4]
 804cd12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804cd14:	f043 0208 	orr.w	r2, r3, #8
 804cd18:	687b      	ldr	r3, [r7, #4]
 804cd1a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 804cd1c:	2300      	movs	r3, #0
 804cd1e:	60bb      	str	r3, [r7, #8]
 804cd20:	687b      	ldr	r3, [r7, #4]
 804cd22:	681b      	ldr	r3, [r3, #0]
 804cd24:	689b      	ldr	r3, [r3, #8]
 804cd26:	60bb      	str	r3, [r7, #8]
 804cd28:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 804cd2a:	687b      	ldr	r3, [r7, #4]
 804cd2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804cd2e:	2b00      	cmp	r3, #0
 804cd30:	d050      	beq.n	804cdd4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 804cd32:	687b      	ldr	r3, [r7, #4]
 804cd34:	681b      	ldr	r3, [r3, #0]
 804cd36:	685a      	ldr	r2, [r3, #4]
 804cd38:	687b      	ldr	r3, [r7, #4]
 804cd3a:	681b      	ldr	r3, [r3, #0]
 804cd3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 804cd40:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 804cd42:	687b      	ldr	r3, [r7, #4]
 804cd44:	2201      	movs	r2, #1
 804cd46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 804cd4a:	69fb      	ldr	r3, [r7, #28]
 804cd4c:	f003 0302 	and.w	r3, r3, #2
 804cd50:	2b00      	cmp	r3, #0
 804cd52:	d104      	bne.n	804cd5e <HAL_SPI_IRQHandler+0x17e>
 804cd54:	69fb      	ldr	r3, [r7, #28]
 804cd56:	f003 0301 	and.w	r3, r3, #1
 804cd5a:	2b00      	cmp	r3, #0
 804cd5c:	d034      	beq.n	804cdc8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 804cd5e:	687b      	ldr	r3, [r7, #4]
 804cd60:	681b      	ldr	r3, [r3, #0]
 804cd62:	685a      	ldr	r2, [r3, #4]
 804cd64:	687b      	ldr	r3, [r7, #4]
 804cd66:	681b      	ldr	r3, [r3, #0]
 804cd68:	f022 0203 	bic.w	r2, r2, #3
 804cd6c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 804cd6e:	687b      	ldr	r3, [r7, #4]
 804cd70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804cd72:	2b00      	cmp	r3, #0
 804cd74:	d011      	beq.n	804cd9a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 804cd76:	687b      	ldr	r3, [r7, #4]
 804cd78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804cd7a:	4a18      	ldr	r2, [pc, #96]	; (804cddc <HAL_SPI_IRQHandler+0x1fc>)
 804cd7c:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 804cd7e:	687b      	ldr	r3, [r7, #4]
 804cd80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804cd82:	4618      	mov	r0, r3
 804cd84:	f7fb fd80 	bl	8048888 <HAL_DMA_Abort_IT>
 804cd88:	4603      	mov	r3, r0
 804cd8a:	2b00      	cmp	r3, #0
 804cd8c:	d005      	beq.n	804cd9a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 804cd8e:	687b      	ldr	r3, [r7, #4]
 804cd90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804cd92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 804cd96:	687b      	ldr	r3, [r7, #4]
 804cd98:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 804cd9a:	687b      	ldr	r3, [r7, #4]
 804cd9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804cd9e:	2b00      	cmp	r3, #0
 804cda0:	d017      	beq.n	804cdd2 <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 804cda2:	687b      	ldr	r3, [r7, #4]
 804cda4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804cda6:	4a0d      	ldr	r2, [pc, #52]	; (804cddc <HAL_SPI_IRQHandler+0x1fc>)
 804cda8:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 804cdaa:	687b      	ldr	r3, [r7, #4]
 804cdac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804cdae:	4618      	mov	r0, r3
 804cdb0:	f7fb fd6a 	bl	8048888 <HAL_DMA_Abort_IT>
 804cdb4:	4603      	mov	r3, r0
 804cdb6:	2b00      	cmp	r3, #0
 804cdb8:	d00b      	beq.n	804cdd2 <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 804cdba:	687b      	ldr	r3, [r7, #4]
 804cdbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804cdbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 804cdc2:	687b      	ldr	r3, [r7, #4]
 804cdc4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 804cdc6:	e004      	b.n	804cdd2 <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 804cdc8:	687b      	ldr	r3, [r7, #4]
 804cdca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804cdcc:	6878      	ldr	r0, [r7, #4]
 804cdce:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 804cdd0:	e000      	b.n	804cdd4 <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 804cdd2:	bf00      	nop
    return;
 804cdd4:	bf00      	nop
  }
}
 804cdd6:	3720      	adds	r7, #32
 804cdd8:	46bd      	mov	sp, r7
 804cdda:	bd80      	pop	{r7, pc}
 804cddc:	0804ce81 	.word	0x0804ce81

0804cde0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 804cde0:	b480      	push	{r7}
 804cde2:	b083      	sub	sp, #12
 804cde4:	af00      	add	r7, sp, #0
 804cde6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 804cde8:	bf00      	nop
 804cdea:	370c      	adds	r7, #12
 804cdec:	46bd      	mov	sp, r7
 804cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 804cdf2:	4770      	bx	lr

0804cdf4 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 804cdf4:	b480      	push	{r7}
 804cdf6:	b083      	sub	sp, #12
 804cdf8:	af00      	add	r7, sp, #0
 804cdfa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 804cdfc:	bf00      	nop
 804cdfe:	370c      	adds	r7, #12
 804ce00:	46bd      	mov	sp, r7
 804ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ce06:	4770      	bx	lr

0804ce08 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 804ce08:	b480      	push	{r7}
 804ce0a:	b083      	sub	sp, #12
 804ce0c:	af00      	add	r7, sp, #0
 804ce0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 804ce10:	bf00      	nop
 804ce12:	370c      	adds	r7, #12
 804ce14:	46bd      	mov	sp, r7
 804ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ce1a:	4770      	bx	lr

0804ce1c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 804ce1c:	b480      	push	{r7}
 804ce1e:	b083      	sub	sp, #12
 804ce20:	af00      	add	r7, sp, #0
 804ce22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 804ce24:	bf00      	nop
 804ce26:	370c      	adds	r7, #12
 804ce28:	46bd      	mov	sp, r7
 804ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ce2e:	4770      	bx	lr

0804ce30 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 804ce30:	b480      	push	{r7}
 804ce32:	b083      	sub	sp, #12
 804ce34:	af00      	add	r7, sp, #0
 804ce36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 804ce38:	bf00      	nop
 804ce3a:	370c      	adds	r7, #12
 804ce3c:	46bd      	mov	sp, r7
 804ce3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ce42:	4770      	bx	lr

0804ce44 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 804ce44:	b480      	push	{r7}
 804ce46:	b083      	sub	sp, #12
 804ce48:	af00      	add	r7, sp, #0
 804ce4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 804ce4c:	bf00      	nop
 804ce4e:	370c      	adds	r7, #12
 804ce50:	46bd      	mov	sp, r7
 804ce52:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ce56:	4770      	bx	lr

0804ce58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 804ce58:	b480      	push	{r7}
 804ce5a:	b083      	sub	sp, #12
 804ce5c:	af00      	add	r7, sp, #0
 804ce5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 804ce60:	bf00      	nop
 804ce62:	370c      	adds	r7, #12
 804ce64:	46bd      	mov	sp, r7
 804ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ce6a:	4770      	bx	lr

0804ce6c <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 804ce6c:	b480      	push	{r7}
 804ce6e:	b083      	sub	sp, #12
 804ce70:	af00      	add	r7, sp, #0
 804ce72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 804ce74:	bf00      	nop
 804ce76:	370c      	adds	r7, #12
 804ce78:	46bd      	mov	sp, r7
 804ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ce7e:	4770      	bx	lr

0804ce80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 804ce80:	b580      	push	{r7, lr}
 804ce82:	b084      	sub	sp, #16
 804ce84:	af00      	add	r7, sp, #0
 804ce86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 804ce88:	687b      	ldr	r3, [r7, #4]
 804ce8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804ce8c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 804ce8e:	68fb      	ldr	r3, [r7, #12]
 804ce90:	2200      	movs	r2, #0
 804ce92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 804ce96:	68fb      	ldr	r3, [r7, #12]
 804ce98:	2200      	movs	r2, #0
 804ce9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 804ce9c:	68fb      	ldr	r3, [r7, #12]
 804ce9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804cea0:	68f8      	ldr	r0, [r7, #12]
 804cea2:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 804cea4:	bf00      	nop
 804cea6:	3710      	adds	r7, #16
 804cea8:	46bd      	mov	sp, r7
 804ceaa:	bd80      	pop	{r7, pc}

0804ceac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 804ceac:	b580      	push	{r7, lr}
 804ceae:	b088      	sub	sp, #32
 804ceb0:	af00      	add	r7, sp, #0
 804ceb2:	60f8      	str	r0, [r7, #12]
 804ceb4:	60b9      	str	r1, [r7, #8]
 804ceb6:	603b      	str	r3, [r7, #0]
 804ceb8:	4613      	mov	r3, r2
 804ceba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 804cebc:	f7f9 fc24 	bl	8046708 <HAL_GetTick>
 804cec0:	4602      	mov	r2, r0
 804cec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804cec4:	1a9b      	subs	r3, r3, r2
 804cec6:	683a      	ldr	r2, [r7, #0]
 804cec8:	4413      	add	r3, r2
 804ceca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 804cecc:	f7f9 fc1c 	bl	8046708 <HAL_GetTick>
 804ced0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 804ced2:	4b39      	ldr	r3, [pc, #228]	; (804cfb8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 804ced4:	681b      	ldr	r3, [r3, #0]
 804ced6:	015b      	lsls	r3, r3, #5
 804ced8:	0d1b      	lsrs	r3, r3, #20
 804ceda:	69fa      	ldr	r2, [r7, #28]
 804cedc:	fb02 f303 	mul.w	r3, r2, r3
 804cee0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 804cee2:	e054      	b.n	804cf8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 804cee4:	683b      	ldr	r3, [r7, #0]
 804cee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 804ceea:	d050      	beq.n	804cf8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 804ceec:	f7f9 fc0c 	bl	8046708 <HAL_GetTick>
 804cef0:	4602      	mov	r2, r0
 804cef2:	69bb      	ldr	r3, [r7, #24]
 804cef4:	1ad3      	subs	r3, r2, r3
 804cef6:	69fa      	ldr	r2, [r7, #28]
 804cef8:	429a      	cmp	r2, r3
 804cefa:	d902      	bls.n	804cf02 <SPI_WaitFlagStateUntilTimeout+0x56>
 804cefc:	69fb      	ldr	r3, [r7, #28]
 804cefe:	2b00      	cmp	r3, #0
 804cf00:	d13d      	bne.n	804cf7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 804cf02:	68fb      	ldr	r3, [r7, #12]
 804cf04:	681b      	ldr	r3, [r3, #0]
 804cf06:	685a      	ldr	r2, [r3, #4]
 804cf08:	68fb      	ldr	r3, [r7, #12]
 804cf0a:	681b      	ldr	r3, [r3, #0]
 804cf0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 804cf10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804cf12:	68fb      	ldr	r3, [r7, #12]
 804cf14:	685b      	ldr	r3, [r3, #4]
 804cf16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804cf1a:	d111      	bne.n	804cf40 <SPI_WaitFlagStateUntilTimeout+0x94>
 804cf1c:	68fb      	ldr	r3, [r7, #12]
 804cf1e:	689b      	ldr	r3, [r3, #8]
 804cf20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804cf24:	d004      	beq.n	804cf30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 804cf26:	68fb      	ldr	r3, [r7, #12]
 804cf28:	689b      	ldr	r3, [r3, #8]
 804cf2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804cf2e:	d107      	bne.n	804cf40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 804cf30:	68fb      	ldr	r3, [r7, #12]
 804cf32:	681b      	ldr	r3, [r3, #0]
 804cf34:	681a      	ldr	r2, [r3, #0]
 804cf36:	68fb      	ldr	r3, [r7, #12]
 804cf38:	681b      	ldr	r3, [r3, #0]
 804cf3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804cf3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 804cf40:	68fb      	ldr	r3, [r7, #12]
 804cf42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804cf44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804cf48:	d10f      	bne.n	804cf6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 804cf4a:	68fb      	ldr	r3, [r7, #12]
 804cf4c:	681b      	ldr	r3, [r3, #0]
 804cf4e:	681a      	ldr	r2, [r3, #0]
 804cf50:	68fb      	ldr	r3, [r7, #12]
 804cf52:	681b      	ldr	r3, [r3, #0]
 804cf54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 804cf58:	601a      	str	r2, [r3, #0]
 804cf5a:	68fb      	ldr	r3, [r7, #12]
 804cf5c:	681b      	ldr	r3, [r3, #0]
 804cf5e:	681a      	ldr	r2, [r3, #0]
 804cf60:	68fb      	ldr	r3, [r7, #12]
 804cf62:	681b      	ldr	r3, [r3, #0]
 804cf64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 804cf68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 804cf6a:	68fb      	ldr	r3, [r7, #12]
 804cf6c:	2201      	movs	r2, #1
 804cf6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 804cf72:	68fb      	ldr	r3, [r7, #12]
 804cf74:	2200      	movs	r2, #0
 804cf76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 804cf7a:	2303      	movs	r3, #3
 804cf7c:	e017      	b.n	804cfae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 804cf7e:	697b      	ldr	r3, [r7, #20]
 804cf80:	2b00      	cmp	r3, #0
 804cf82:	d101      	bne.n	804cf88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 804cf84:	2300      	movs	r3, #0
 804cf86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 804cf88:	697b      	ldr	r3, [r7, #20]
 804cf8a:	3b01      	subs	r3, #1
 804cf8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 804cf8e:	68fb      	ldr	r3, [r7, #12]
 804cf90:	681b      	ldr	r3, [r3, #0]
 804cf92:	689a      	ldr	r2, [r3, #8]
 804cf94:	68bb      	ldr	r3, [r7, #8]
 804cf96:	4013      	ands	r3, r2
 804cf98:	68ba      	ldr	r2, [r7, #8]
 804cf9a:	429a      	cmp	r2, r3
 804cf9c:	bf0c      	ite	eq
 804cf9e:	2301      	moveq	r3, #1
 804cfa0:	2300      	movne	r3, #0
 804cfa2:	b2db      	uxtb	r3, r3
 804cfa4:	461a      	mov	r2, r3
 804cfa6:	79fb      	ldrb	r3, [r7, #7]
 804cfa8:	429a      	cmp	r2, r3
 804cfaa:	d19b      	bne.n	804cee4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 804cfac:	2300      	movs	r3, #0
}
 804cfae:	4618      	mov	r0, r3
 804cfb0:	3720      	adds	r7, #32
 804cfb2:	46bd      	mov	sp, r7
 804cfb4:	bd80      	pop	{r7, pc}
 804cfb6:	bf00      	nop
 804cfb8:	20018024 	.word	0x20018024

0804cfbc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 804cfbc:	b580      	push	{r7, lr}
 804cfbe:	b088      	sub	sp, #32
 804cfc0:	af00      	add	r7, sp, #0
 804cfc2:	60f8      	str	r0, [r7, #12]
 804cfc4:	60b9      	str	r1, [r7, #8]
 804cfc6:	607a      	str	r2, [r7, #4]
 804cfc8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 804cfca:	f7f9 fb9d 	bl	8046708 <HAL_GetTick>
 804cfce:	4602      	mov	r2, r0
 804cfd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804cfd2:	1a9b      	subs	r3, r3, r2
 804cfd4:	683a      	ldr	r2, [r7, #0]
 804cfd6:	4413      	add	r3, r2
 804cfd8:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 804cfda:	f7f9 fb95 	bl	8046708 <HAL_GetTick>
 804cfde:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 804cfe0:	4b3c      	ldr	r3, [pc, #240]	; (804d0d4 <SPI_WaitFifoStateUntilTimeout+0x118>)
 804cfe2:	681a      	ldr	r2, [r3, #0]
 804cfe4:	4613      	mov	r3, r2
 804cfe6:	009b      	lsls	r3, r3, #2
 804cfe8:	4413      	add	r3, r2
 804cfea:	00da      	lsls	r2, r3, #3
 804cfec:	1ad3      	subs	r3, r2, r3
 804cfee:	0d1b      	lsrs	r3, r3, #20
 804cff0:	69fa      	ldr	r2, [r7, #28]
 804cff2:	fb02 f303 	mul.w	r3, r2, r3
 804cff6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 804cff8:	e05f      	b.n	804d0ba <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 804cffa:	68bb      	ldr	r3, [r7, #8]
 804cffc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 804d000:	d106      	bne.n	804d010 <SPI_WaitFifoStateUntilTimeout+0x54>
 804d002:	687b      	ldr	r3, [r7, #4]
 804d004:	2b00      	cmp	r3, #0
 804d006:	d103      	bne.n	804d010 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 804d008:	68fb      	ldr	r3, [r7, #12]
 804d00a:	681b      	ldr	r3, [r3, #0]
 804d00c:	330c      	adds	r3, #12
 804d00e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 804d010:	683b      	ldr	r3, [r7, #0]
 804d012:	f1b3 3fff 	cmp.w	r3, #4294967295
 804d016:	d050      	beq.n	804d0ba <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 804d018:	f7f9 fb76 	bl	8046708 <HAL_GetTick>
 804d01c:	4602      	mov	r2, r0
 804d01e:	69bb      	ldr	r3, [r7, #24]
 804d020:	1ad3      	subs	r3, r2, r3
 804d022:	69fa      	ldr	r2, [r7, #28]
 804d024:	429a      	cmp	r2, r3
 804d026:	d902      	bls.n	804d02e <SPI_WaitFifoStateUntilTimeout+0x72>
 804d028:	69fb      	ldr	r3, [r7, #28]
 804d02a:	2b00      	cmp	r3, #0
 804d02c:	d13d      	bne.n	804d0aa <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 804d02e:	68fb      	ldr	r3, [r7, #12]
 804d030:	681b      	ldr	r3, [r3, #0]
 804d032:	685a      	ldr	r2, [r3, #4]
 804d034:	68fb      	ldr	r3, [r7, #12]
 804d036:	681b      	ldr	r3, [r3, #0]
 804d038:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 804d03c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804d03e:	68fb      	ldr	r3, [r7, #12]
 804d040:	685b      	ldr	r3, [r3, #4]
 804d042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804d046:	d111      	bne.n	804d06c <SPI_WaitFifoStateUntilTimeout+0xb0>
 804d048:	68fb      	ldr	r3, [r7, #12]
 804d04a:	689b      	ldr	r3, [r3, #8]
 804d04c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804d050:	d004      	beq.n	804d05c <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 804d052:	68fb      	ldr	r3, [r7, #12]
 804d054:	689b      	ldr	r3, [r3, #8]
 804d056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804d05a:	d107      	bne.n	804d06c <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 804d05c:	68fb      	ldr	r3, [r7, #12]
 804d05e:	681b      	ldr	r3, [r3, #0]
 804d060:	681a      	ldr	r2, [r3, #0]
 804d062:	68fb      	ldr	r3, [r7, #12]
 804d064:	681b      	ldr	r3, [r3, #0]
 804d066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804d06a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 804d06c:	68fb      	ldr	r3, [r7, #12]
 804d06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804d070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804d074:	d10f      	bne.n	804d096 <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 804d076:	68fb      	ldr	r3, [r7, #12]
 804d078:	681b      	ldr	r3, [r3, #0]
 804d07a:	681a      	ldr	r2, [r3, #0]
 804d07c:	68fb      	ldr	r3, [r7, #12]
 804d07e:	681b      	ldr	r3, [r3, #0]
 804d080:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 804d084:	601a      	str	r2, [r3, #0]
 804d086:	68fb      	ldr	r3, [r7, #12]
 804d088:	681b      	ldr	r3, [r3, #0]
 804d08a:	681a      	ldr	r2, [r3, #0]
 804d08c:	68fb      	ldr	r3, [r7, #12]
 804d08e:	681b      	ldr	r3, [r3, #0]
 804d090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 804d094:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 804d096:	68fb      	ldr	r3, [r7, #12]
 804d098:	2201      	movs	r2, #1
 804d09a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 804d09e:	68fb      	ldr	r3, [r7, #12]
 804d0a0:	2200      	movs	r2, #0
 804d0a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 804d0a6:	2303      	movs	r3, #3
 804d0a8:	e010      	b.n	804d0cc <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 804d0aa:	697b      	ldr	r3, [r7, #20]
 804d0ac:	2b00      	cmp	r3, #0
 804d0ae:	d101      	bne.n	804d0b4 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 804d0b0:	2300      	movs	r3, #0
 804d0b2:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 804d0b4:	697b      	ldr	r3, [r7, #20]
 804d0b6:	3b01      	subs	r3, #1
 804d0b8:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 804d0ba:	68fb      	ldr	r3, [r7, #12]
 804d0bc:	681b      	ldr	r3, [r3, #0]
 804d0be:	689a      	ldr	r2, [r3, #8]
 804d0c0:	68bb      	ldr	r3, [r7, #8]
 804d0c2:	4013      	ands	r3, r2
 804d0c4:	687a      	ldr	r2, [r7, #4]
 804d0c6:	429a      	cmp	r2, r3
 804d0c8:	d197      	bne.n	804cffa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 804d0ca:	2300      	movs	r3, #0
}
 804d0cc:	4618      	mov	r0, r3
 804d0ce:	3720      	adds	r7, #32
 804d0d0:	46bd      	mov	sp, r7
 804d0d2:	bd80      	pop	{r7, pc}
 804d0d4:	20018024 	.word	0x20018024

0804d0d8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 804d0d8:	b580      	push	{r7, lr}
 804d0da:	b086      	sub	sp, #24
 804d0dc:	af02      	add	r7, sp, #8
 804d0de:	60f8      	str	r0, [r7, #12]
 804d0e0:	60b9      	str	r1, [r7, #8]
 804d0e2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804d0e4:	68fb      	ldr	r3, [r7, #12]
 804d0e6:	685b      	ldr	r3, [r3, #4]
 804d0e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804d0ec:	d111      	bne.n	804d112 <SPI_EndRxTransaction+0x3a>
 804d0ee:	68fb      	ldr	r3, [r7, #12]
 804d0f0:	689b      	ldr	r3, [r3, #8]
 804d0f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804d0f6:	d004      	beq.n	804d102 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 804d0f8:	68fb      	ldr	r3, [r7, #12]
 804d0fa:	689b      	ldr	r3, [r3, #8]
 804d0fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804d100:	d107      	bne.n	804d112 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 804d102:	68fb      	ldr	r3, [r7, #12]
 804d104:	681b      	ldr	r3, [r3, #0]
 804d106:	681a      	ldr	r2, [r3, #0]
 804d108:	68fb      	ldr	r3, [r7, #12]
 804d10a:	681b      	ldr	r3, [r3, #0]
 804d10c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804d110:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 804d112:	687b      	ldr	r3, [r7, #4]
 804d114:	9300      	str	r3, [sp, #0]
 804d116:	68bb      	ldr	r3, [r7, #8]
 804d118:	2200      	movs	r2, #0
 804d11a:	2180      	movs	r1, #128	; 0x80
 804d11c:	68f8      	ldr	r0, [r7, #12]
 804d11e:	f7ff fec5 	bl	804ceac <SPI_WaitFlagStateUntilTimeout>
 804d122:	4603      	mov	r3, r0
 804d124:	2b00      	cmp	r3, #0
 804d126:	d007      	beq.n	804d138 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804d128:	68fb      	ldr	r3, [r7, #12]
 804d12a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804d12c:	f043 0220 	orr.w	r2, r3, #32
 804d130:	68fb      	ldr	r3, [r7, #12]
 804d132:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 804d134:	2303      	movs	r3, #3
 804d136:	e023      	b.n	804d180 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 804d138:	68fb      	ldr	r3, [r7, #12]
 804d13a:	685b      	ldr	r3, [r3, #4]
 804d13c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804d140:	d11d      	bne.n	804d17e <SPI_EndRxTransaction+0xa6>
 804d142:	68fb      	ldr	r3, [r7, #12]
 804d144:	689b      	ldr	r3, [r3, #8]
 804d146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804d14a:	d004      	beq.n	804d156 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 804d14c:	68fb      	ldr	r3, [r7, #12]
 804d14e:	689b      	ldr	r3, [r3, #8]
 804d150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804d154:	d113      	bne.n	804d17e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 804d156:	687b      	ldr	r3, [r7, #4]
 804d158:	9300      	str	r3, [sp, #0]
 804d15a:	68bb      	ldr	r3, [r7, #8]
 804d15c:	2200      	movs	r2, #0
 804d15e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 804d162:	68f8      	ldr	r0, [r7, #12]
 804d164:	f7ff ff2a 	bl	804cfbc <SPI_WaitFifoStateUntilTimeout>
 804d168:	4603      	mov	r3, r0
 804d16a:	2b00      	cmp	r3, #0
 804d16c:	d007      	beq.n	804d17e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804d16e:	68fb      	ldr	r3, [r7, #12]
 804d170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804d172:	f043 0220 	orr.w	r2, r3, #32
 804d176:	68fb      	ldr	r3, [r7, #12]
 804d178:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 804d17a:	2303      	movs	r3, #3
 804d17c:	e000      	b.n	804d180 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 804d17e:	2300      	movs	r3, #0
}
 804d180:	4618      	mov	r0, r3
 804d182:	3710      	adds	r7, #16
 804d184:	46bd      	mov	sp, r7
 804d186:	bd80      	pop	{r7, pc}

0804d188 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 804d188:	b580      	push	{r7, lr}
 804d18a:	b086      	sub	sp, #24
 804d18c:	af02      	add	r7, sp, #8
 804d18e:	60f8      	str	r0, [r7, #12]
 804d190:	60b9      	str	r1, [r7, #8]
 804d192:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 804d194:	687b      	ldr	r3, [r7, #4]
 804d196:	9300      	str	r3, [sp, #0]
 804d198:	68bb      	ldr	r3, [r7, #8]
 804d19a:	2200      	movs	r2, #0
 804d19c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 804d1a0:	68f8      	ldr	r0, [r7, #12]
 804d1a2:	f7ff ff0b 	bl	804cfbc <SPI_WaitFifoStateUntilTimeout>
 804d1a6:	4603      	mov	r3, r0
 804d1a8:	2b00      	cmp	r3, #0
 804d1aa:	d007      	beq.n	804d1bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804d1ac:	68fb      	ldr	r3, [r7, #12]
 804d1ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804d1b0:	f043 0220 	orr.w	r2, r3, #32
 804d1b4:	68fb      	ldr	r3, [r7, #12]
 804d1b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 804d1b8:	2303      	movs	r3, #3
 804d1ba:	e027      	b.n	804d20c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 804d1bc:	687b      	ldr	r3, [r7, #4]
 804d1be:	9300      	str	r3, [sp, #0]
 804d1c0:	68bb      	ldr	r3, [r7, #8]
 804d1c2:	2200      	movs	r2, #0
 804d1c4:	2180      	movs	r1, #128	; 0x80
 804d1c6:	68f8      	ldr	r0, [r7, #12]
 804d1c8:	f7ff fe70 	bl	804ceac <SPI_WaitFlagStateUntilTimeout>
 804d1cc:	4603      	mov	r3, r0
 804d1ce:	2b00      	cmp	r3, #0
 804d1d0:	d007      	beq.n	804d1e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804d1d2:	68fb      	ldr	r3, [r7, #12]
 804d1d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804d1d6:	f043 0220 	orr.w	r2, r3, #32
 804d1da:	68fb      	ldr	r3, [r7, #12]
 804d1dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 804d1de:	2303      	movs	r3, #3
 804d1e0:	e014      	b.n	804d20c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 804d1e2:	687b      	ldr	r3, [r7, #4]
 804d1e4:	9300      	str	r3, [sp, #0]
 804d1e6:	68bb      	ldr	r3, [r7, #8]
 804d1e8:	2200      	movs	r2, #0
 804d1ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 804d1ee:	68f8      	ldr	r0, [r7, #12]
 804d1f0:	f7ff fee4 	bl	804cfbc <SPI_WaitFifoStateUntilTimeout>
 804d1f4:	4603      	mov	r3, r0
 804d1f6:	2b00      	cmp	r3, #0
 804d1f8:	d007      	beq.n	804d20a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 804d1fa:	68fb      	ldr	r3, [r7, #12]
 804d1fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804d1fe:	f043 0220 	orr.w	r2, r3, #32
 804d202:	68fb      	ldr	r3, [r7, #12]
 804d204:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 804d206:	2303      	movs	r3, #3
 804d208:	e000      	b.n	804d20c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 804d20a:	2300      	movs	r3, #0
}
 804d20c:	4618      	mov	r0, r3
 804d20e:	3710      	adds	r7, #16
 804d210:	46bd      	mov	sp, r7
 804d212:	bd80      	pop	{r7, pc}

0804d214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 804d214:	b580      	push	{r7, lr}
 804d216:	b082      	sub	sp, #8
 804d218:	af00      	add	r7, sp, #0
 804d21a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 804d21c:	687b      	ldr	r3, [r7, #4]
 804d21e:	2b00      	cmp	r3, #0
 804d220:	d101      	bne.n	804d226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 804d222:	2301      	movs	r3, #1
 804d224:	e054      	b.n	804d2d0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 804d226:	687b      	ldr	r3, [r7, #4]
 804d228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804d22c:	b2db      	uxtb	r3, r3
 804d22e:	2b00      	cmp	r3, #0
 804d230:	d111      	bne.n	804d256 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 804d232:	687b      	ldr	r3, [r7, #4]
 804d234:	2200      	movs	r2, #0
 804d236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 804d23a:	6878      	ldr	r0, [r7, #4]
 804d23c:	f000 fbb2 	bl	804d9a4 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 804d240:	687b      	ldr	r3, [r7, #4]
 804d242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804d244:	2b00      	cmp	r3, #0
 804d246:	d102      	bne.n	804d24e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 804d248:	687b      	ldr	r3, [r7, #4]
 804d24a:	4a23      	ldr	r2, [pc, #140]	; (804d2d8 <HAL_TIM_Base_Init+0xc4>)
 804d24c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 804d24e:	687b      	ldr	r3, [r7, #4]
 804d250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804d252:	6878      	ldr	r0, [r7, #4]
 804d254:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804d256:	687b      	ldr	r3, [r7, #4]
 804d258:	2202      	movs	r2, #2
 804d25a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 804d25e:	687b      	ldr	r3, [r7, #4]
 804d260:	681a      	ldr	r2, [r3, #0]
 804d262:	687b      	ldr	r3, [r7, #4]
 804d264:	3304      	adds	r3, #4
 804d266:	4619      	mov	r1, r3
 804d268:	4610      	mov	r0, r2
 804d26a:	f000 fb01 	bl	804d870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 804d26e:	687b      	ldr	r3, [r7, #4]
 804d270:	2201      	movs	r2, #1
 804d272:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804d276:	687b      	ldr	r3, [r7, #4]
 804d278:	2201      	movs	r2, #1
 804d27a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 804d27e:	687b      	ldr	r3, [r7, #4]
 804d280:	2201      	movs	r2, #1
 804d282:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 804d286:	687b      	ldr	r3, [r7, #4]
 804d288:	2201      	movs	r2, #1
 804d28a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 804d28e:	687b      	ldr	r3, [r7, #4]
 804d290:	2201      	movs	r2, #1
 804d292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 804d296:	687b      	ldr	r3, [r7, #4]
 804d298:	2201      	movs	r2, #1
 804d29a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 804d29e:	687b      	ldr	r3, [r7, #4]
 804d2a0:	2201      	movs	r2, #1
 804d2a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804d2a6:	687b      	ldr	r3, [r7, #4]
 804d2a8:	2201      	movs	r2, #1
 804d2aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 804d2ae:	687b      	ldr	r3, [r7, #4]
 804d2b0:	2201      	movs	r2, #1
 804d2b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 804d2b6:	687b      	ldr	r3, [r7, #4]
 804d2b8:	2201      	movs	r2, #1
 804d2ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 804d2be:	687b      	ldr	r3, [r7, #4]
 804d2c0:	2201      	movs	r2, #1
 804d2c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 804d2c6:	687b      	ldr	r3, [r7, #4]
 804d2c8:	2201      	movs	r2, #1
 804d2ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 804d2ce:	2300      	movs	r3, #0
}
 804d2d0:	4618      	mov	r0, r3
 804d2d2:	3708      	adds	r7, #8
 804d2d4:	46bd      	mov	sp, r7
 804d2d6:	bd80      	pop	{r7, pc}
 804d2d8:	0804d2dd 	.word	0x0804d2dd

0804d2dc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 804d2dc:	b480      	push	{r7}
 804d2de:	b083      	sub	sp, #12
 804d2e0:	af00      	add	r7, sp, #0
 804d2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 804d2e4:	bf00      	nop
 804d2e6:	370c      	adds	r7, #12
 804d2e8:	46bd      	mov	sp, r7
 804d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d2ee:	4770      	bx	lr

0804d2f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 804d2f0:	b480      	push	{r7}
 804d2f2:	b085      	sub	sp, #20
 804d2f4:	af00      	add	r7, sp, #0
 804d2f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 804d2f8:	687b      	ldr	r3, [r7, #4]
 804d2fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804d2fe:	b2db      	uxtb	r3, r3
 804d300:	2b01      	cmp	r3, #1
 804d302:	d001      	beq.n	804d308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 804d304:	2301      	movs	r3, #1
 804d306:	e04f      	b.n	804d3a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804d308:	687b      	ldr	r3, [r7, #4]
 804d30a:	2202      	movs	r2, #2
 804d30c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 804d310:	687b      	ldr	r3, [r7, #4]
 804d312:	681b      	ldr	r3, [r3, #0]
 804d314:	68da      	ldr	r2, [r3, #12]
 804d316:	687b      	ldr	r3, [r7, #4]
 804d318:	681b      	ldr	r3, [r3, #0]
 804d31a:	f042 0201 	orr.w	r2, r2, #1
 804d31e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 804d320:	687b      	ldr	r3, [r7, #4]
 804d322:	681b      	ldr	r3, [r3, #0]
 804d324:	4a23      	ldr	r2, [pc, #140]	; (804d3b4 <HAL_TIM_Base_Start_IT+0xc4>)
 804d326:	4293      	cmp	r3, r2
 804d328:	d01d      	beq.n	804d366 <HAL_TIM_Base_Start_IT+0x76>
 804d32a:	687b      	ldr	r3, [r7, #4]
 804d32c:	681b      	ldr	r3, [r3, #0]
 804d32e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804d332:	d018      	beq.n	804d366 <HAL_TIM_Base_Start_IT+0x76>
 804d334:	687b      	ldr	r3, [r7, #4]
 804d336:	681b      	ldr	r3, [r3, #0]
 804d338:	4a1f      	ldr	r2, [pc, #124]	; (804d3b8 <HAL_TIM_Base_Start_IT+0xc8>)
 804d33a:	4293      	cmp	r3, r2
 804d33c:	d013      	beq.n	804d366 <HAL_TIM_Base_Start_IT+0x76>
 804d33e:	687b      	ldr	r3, [r7, #4]
 804d340:	681b      	ldr	r3, [r3, #0]
 804d342:	4a1e      	ldr	r2, [pc, #120]	; (804d3bc <HAL_TIM_Base_Start_IT+0xcc>)
 804d344:	4293      	cmp	r3, r2
 804d346:	d00e      	beq.n	804d366 <HAL_TIM_Base_Start_IT+0x76>
 804d348:	687b      	ldr	r3, [r7, #4]
 804d34a:	681b      	ldr	r3, [r3, #0]
 804d34c:	4a1c      	ldr	r2, [pc, #112]	; (804d3c0 <HAL_TIM_Base_Start_IT+0xd0>)
 804d34e:	4293      	cmp	r3, r2
 804d350:	d009      	beq.n	804d366 <HAL_TIM_Base_Start_IT+0x76>
 804d352:	687b      	ldr	r3, [r7, #4]
 804d354:	681b      	ldr	r3, [r3, #0]
 804d356:	4a1b      	ldr	r2, [pc, #108]	; (804d3c4 <HAL_TIM_Base_Start_IT+0xd4>)
 804d358:	4293      	cmp	r3, r2
 804d35a:	d004      	beq.n	804d366 <HAL_TIM_Base_Start_IT+0x76>
 804d35c:	687b      	ldr	r3, [r7, #4]
 804d35e:	681b      	ldr	r3, [r3, #0]
 804d360:	4a19      	ldr	r2, [pc, #100]	; (804d3c8 <HAL_TIM_Base_Start_IT+0xd8>)
 804d362:	4293      	cmp	r3, r2
 804d364:	d115      	bne.n	804d392 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 804d366:	687b      	ldr	r3, [r7, #4]
 804d368:	681b      	ldr	r3, [r3, #0]
 804d36a:	689a      	ldr	r2, [r3, #8]
 804d36c:	4b17      	ldr	r3, [pc, #92]	; (804d3cc <HAL_TIM_Base_Start_IT+0xdc>)
 804d36e:	4013      	ands	r3, r2
 804d370:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804d372:	68fb      	ldr	r3, [r7, #12]
 804d374:	2b06      	cmp	r3, #6
 804d376:	d015      	beq.n	804d3a4 <HAL_TIM_Base_Start_IT+0xb4>
 804d378:	68fb      	ldr	r3, [r7, #12]
 804d37a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804d37e:	d011      	beq.n	804d3a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 804d380:	687b      	ldr	r3, [r7, #4]
 804d382:	681b      	ldr	r3, [r3, #0]
 804d384:	681a      	ldr	r2, [r3, #0]
 804d386:	687b      	ldr	r3, [r7, #4]
 804d388:	681b      	ldr	r3, [r3, #0]
 804d38a:	f042 0201 	orr.w	r2, r2, #1
 804d38e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804d390:	e008      	b.n	804d3a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 804d392:	687b      	ldr	r3, [r7, #4]
 804d394:	681b      	ldr	r3, [r3, #0]
 804d396:	681a      	ldr	r2, [r3, #0]
 804d398:	687b      	ldr	r3, [r7, #4]
 804d39a:	681b      	ldr	r3, [r3, #0]
 804d39c:	f042 0201 	orr.w	r2, r2, #1
 804d3a0:	601a      	str	r2, [r3, #0]
 804d3a2:	e000      	b.n	804d3a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 804d3a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 804d3a6:	2300      	movs	r3, #0
}
 804d3a8:	4618      	mov	r0, r3
 804d3aa:	3714      	adds	r7, #20
 804d3ac:	46bd      	mov	sp, r7
 804d3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d3b2:	4770      	bx	lr
 804d3b4:	40012c00 	.word	0x40012c00
 804d3b8:	40000400 	.word	0x40000400
 804d3bc:	40000800 	.word	0x40000800
 804d3c0:	40000c00 	.word	0x40000c00
 804d3c4:	40013400 	.word	0x40013400
 804d3c8:	40014000 	.word	0x40014000
 804d3cc:	00010007 	.word	0x00010007

0804d3d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 804d3d0:	b580      	push	{r7, lr}
 804d3d2:	b086      	sub	sp, #24
 804d3d4:	af00      	add	r7, sp, #0
 804d3d6:	6078      	str	r0, [r7, #4]
 804d3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 804d3da:	687b      	ldr	r3, [r7, #4]
 804d3dc:	2b00      	cmp	r3, #0
 804d3de:	d101      	bne.n	804d3e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 804d3e0:	2301      	movs	r3, #1
 804d3e2:	e0a2      	b.n	804d52a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 804d3e4:	687b      	ldr	r3, [r7, #4]
 804d3e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804d3ea:	b2db      	uxtb	r3, r3
 804d3ec:	2b00      	cmp	r3, #0
 804d3ee:	d111      	bne.n	804d414 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 804d3f0:	687b      	ldr	r3, [r7, #4]
 804d3f2:	2200      	movs	r2, #0
 804d3f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 804d3f8:	6878      	ldr	r0, [r7, #4]
 804d3fa:	f000 fad3 	bl	804d9a4 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 804d3fe:	687b      	ldr	r3, [r7, #4]
 804d400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804d402:	2b00      	cmp	r3, #0
 804d404:	d102      	bne.n	804d40c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 804d406:	687b      	ldr	r3, [r7, #4]
 804d408:	4a4a      	ldr	r2, [pc, #296]	; (804d534 <HAL_TIM_Encoder_Init+0x164>)
 804d40a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 804d40c:	687b      	ldr	r3, [r7, #4]
 804d40e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804d410:	6878      	ldr	r0, [r7, #4]
 804d412:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804d414:	687b      	ldr	r3, [r7, #4]
 804d416:	2202      	movs	r2, #2
 804d418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 804d41c:	687b      	ldr	r3, [r7, #4]
 804d41e:	681b      	ldr	r3, [r3, #0]
 804d420:	689b      	ldr	r3, [r3, #8]
 804d422:	687a      	ldr	r2, [r7, #4]
 804d424:	6812      	ldr	r2, [r2, #0]
 804d426:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 804d42a:	f023 0307 	bic.w	r3, r3, #7
 804d42e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 804d430:	687b      	ldr	r3, [r7, #4]
 804d432:	681a      	ldr	r2, [r3, #0]
 804d434:	687b      	ldr	r3, [r7, #4]
 804d436:	3304      	adds	r3, #4
 804d438:	4619      	mov	r1, r3
 804d43a:	4610      	mov	r0, r2
 804d43c:	f000 fa18 	bl	804d870 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 804d440:	687b      	ldr	r3, [r7, #4]
 804d442:	681b      	ldr	r3, [r3, #0]
 804d444:	689b      	ldr	r3, [r3, #8]
 804d446:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 804d448:	687b      	ldr	r3, [r7, #4]
 804d44a:	681b      	ldr	r3, [r3, #0]
 804d44c:	699b      	ldr	r3, [r3, #24]
 804d44e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 804d450:	687b      	ldr	r3, [r7, #4]
 804d452:	681b      	ldr	r3, [r3, #0]
 804d454:	6a1b      	ldr	r3, [r3, #32]
 804d456:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 804d458:	683b      	ldr	r3, [r7, #0]
 804d45a:	681b      	ldr	r3, [r3, #0]
 804d45c:	697a      	ldr	r2, [r7, #20]
 804d45e:	4313      	orrs	r3, r2
 804d460:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 804d462:	693b      	ldr	r3, [r7, #16]
 804d464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804d468:	f023 0303 	bic.w	r3, r3, #3
 804d46c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 804d46e:	683b      	ldr	r3, [r7, #0]
 804d470:	689a      	ldr	r2, [r3, #8]
 804d472:	683b      	ldr	r3, [r7, #0]
 804d474:	699b      	ldr	r3, [r3, #24]
 804d476:	021b      	lsls	r3, r3, #8
 804d478:	4313      	orrs	r3, r2
 804d47a:	693a      	ldr	r2, [r7, #16]
 804d47c:	4313      	orrs	r3, r2
 804d47e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 804d480:	693b      	ldr	r3, [r7, #16]
 804d482:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 804d486:	f023 030c 	bic.w	r3, r3, #12
 804d48a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 804d48c:	693b      	ldr	r3, [r7, #16]
 804d48e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 804d492:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804d496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 804d498:	683b      	ldr	r3, [r7, #0]
 804d49a:	68da      	ldr	r2, [r3, #12]
 804d49c:	683b      	ldr	r3, [r7, #0]
 804d49e:	69db      	ldr	r3, [r3, #28]
 804d4a0:	021b      	lsls	r3, r3, #8
 804d4a2:	4313      	orrs	r3, r2
 804d4a4:	693a      	ldr	r2, [r7, #16]
 804d4a6:	4313      	orrs	r3, r2
 804d4a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 804d4aa:	683b      	ldr	r3, [r7, #0]
 804d4ac:	691b      	ldr	r3, [r3, #16]
 804d4ae:	011a      	lsls	r2, r3, #4
 804d4b0:	683b      	ldr	r3, [r7, #0]
 804d4b2:	6a1b      	ldr	r3, [r3, #32]
 804d4b4:	031b      	lsls	r3, r3, #12
 804d4b6:	4313      	orrs	r3, r2
 804d4b8:	693a      	ldr	r2, [r7, #16]
 804d4ba:	4313      	orrs	r3, r2
 804d4bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 804d4be:	68fb      	ldr	r3, [r7, #12]
 804d4c0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 804d4c4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 804d4c6:	68fb      	ldr	r3, [r7, #12]
 804d4c8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 804d4cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 804d4ce:	683b      	ldr	r3, [r7, #0]
 804d4d0:	685a      	ldr	r2, [r3, #4]
 804d4d2:	683b      	ldr	r3, [r7, #0]
 804d4d4:	695b      	ldr	r3, [r3, #20]
 804d4d6:	011b      	lsls	r3, r3, #4
 804d4d8:	4313      	orrs	r3, r2
 804d4da:	68fa      	ldr	r2, [r7, #12]
 804d4dc:	4313      	orrs	r3, r2
 804d4de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 804d4e0:	687b      	ldr	r3, [r7, #4]
 804d4e2:	681b      	ldr	r3, [r3, #0]
 804d4e4:	697a      	ldr	r2, [r7, #20]
 804d4e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 804d4e8:	687b      	ldr	r3, [r7, #4]
 804d4ea:	681b      	ldr	r3, [r3, #0]
 804d4ec:	693a      	ldr	r2, [r7, #16]
 804d4ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 804d4f0:	687b      	ldr	r3, [r7, #4]
 804d4f2:	681b      	ldr	r3, [r3, #0]
 804d4f4:	68fa      	ldr	r2, [r7, #12]
 804d4f6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 804d4f8:	687b      	ldr	r3, [r7, #4]
 804d4fa:	2201      	movs	r2, #1
 804d4fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 804d500:	687b      	ldr	r3, [r7, #4]
 804d502:	2201      	movs	r2, #1
 804d504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 804d508:	687b      	ldr	r3, [r7, #4]
 804d50a:	2201      	movs	r2, #1
 804d50c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 804d510:	687b      	ldr	r3, [r7, #4]
 804d512:	2201      	movs	r2, #1
 804d514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 804d518:	687b      	ldr	r3, [r7, #4]
 804d51a:	2201      	movs	r2, #1
 804d51c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 804d520:	687b      	ldr	r3, [r7, #4]
 804d522:	2201      	movs	r2, #1
 804d524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 804d528:	2300      	movs	r3, #0
}
 804d52a:	4618      	mov	r0, r3
 804d52c:	3718      	adds	r7, #24
 804d52e:	46bd      	mov	sp, r7
 804d530:	bd80      	pop	{r7, pc}
 804d532:	bf00      	nop
 804d534:	080429f9 	.word	0x080429f9

0804d538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 804d538:	b580      	push	{r7, lr}
 804d53a:	b082      	sub	sp, #8
 804d53c:	af00      	add	r7, sp, #0
 804d53e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 804d540:	687b      	ldr	r3, [r7, #4]
 804d542:	681b      	ldr	r3, [r3, #0]
 804d544:	691b      	ldr	r3, [r3, #16]
 804d546:	f003 0302 	and.w	r3, r3, #2
 804d54a:	2b02      	cmp	r3, #2
 804d54c:	d128      	bne.n	804d5a0 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 804d54e:	687b      	ldr	r3, [r7, #4]
 804d550:	681b      	ldr	r3, [r3, #0]
 804d552:	68db      	ldr	r3, [r3, #12]
 804d554:	f003 0302 	and.w	r3, r3, #2
 804d558:	2b02      	cmp	r3, #2
 804d55a:	d121      	bne.n	804d5a0 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 804d55c:	687b      	ldr	r3, [r7, #4]
 804d55e:	681b      	ldr	r3, [r3, #0]
 804d560:	f06f 0202 	mvn.w	r2, #2
 804d564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 804d566:	687b      	ldr	r3, [r7, #4]
 804d568:	2201      	movs	r2, #1
 804d56a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 804d56c:	687b      	ldr	r3, [r7, #4]
 804d56e:	681b      	ldr	r3, [r3, #0]
 804d570:	699b      	ldr	r3, [r3, #24]
 804d572:	f003 0303 	and.w	r3, r3, #3
 804d576:	2b00      	cmp	r3, #0
 804d578:	d005      	beq.n	804d586 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 804d57a:	687b      	ldr	r3, [r7, #4]
 804d57c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804d580:	6878      	ldr	r0, [r7, #4]
 804d582:	4798      	blx	r3
 804d584:	e009      	b.n	804d59a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 804d586:	687b      	ldr	r3, [r7, #4]
 804d588:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804d58c:	6878      	ldr	r0, [r7, #4]
 804d58e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 804d590:	687b      	ldr	r3, [r7, #4]
 804d592:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 804d596:	6878      	ldr	r0, [r7, #4]
 804d598:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804d59a:	687b      	ldr	r3, [r7, #4]
 804d59c:	2200      	movs	r2, #0
 804d59e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 804d5a0:	687b      	ldr	r3, [r7, #4]
 804d5a2:	681b      	ldr	r3, [r3, #0]
 804d5a4:	691b      	ldr	r3, [r3, #16]
 804d5a6:	f003 0304 	and.w	r3, r3, #4
 804d5aa:	2b04      	cmp	r3, #4
 804d5ac:	d128      	bne.n	804d600 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 804d5ae:	687b      	ldr	r3, [r7, #4]
 804d5b0:	681b      	ldr	r3, [r3, #0]
 804d5b2:	68db      	ldr	r3, [r3, #12]
 804d5b4:	f003 0304 	and.w	r3, r3, #4
 804d5b8:	2b04      	cmp	r3, #4
 804d5ba:	d121      	bne.n	804d600 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 804d5bc:	687b      	ldr	r3, [r7, #4]
 804d5be:	681b      	ldr	r3, [r3, #0]
 804d5c0:	f06f 0204 	mvn.w	r2, #4
 804d5c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 804d5c6:	687b      	ldr	r3, [r7, #4]
 804d5c8:	2202      	movs	r2, #2
 804d5ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 804d5cc:	687b      	ldr	r3, [r7, #4]
 804d5ce:	681b      	ldr	r3, [r3, #0]
 804d5d0:	699b      	ldr	r3, [r3, #24]
 804d5d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804d5d6:	2b00      	cmp	r3, #0
 804d5d8:	d005      	beq.n	804d5e6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 804d5da:	687b      	ldr	r3, [r7, #4]
 804d5dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804d5e0:	6878      	ldr	r0, [r7, #4]
 804d5e2:	4798      	blx	r3
 804d5e4:	e009      	b.n	804d5fa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 804d5e6:	687b      	ldr	r3, [r7, #4]
 804d5e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804d5ec:	6878      	ldr	r0, [r7, #4]
 804d5ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 804d5f0:	687b      	ldr	r3, [r7, #4]
 804d5f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 804d5f6:	6878      	ldr	r0, [r7, #4]
 804d5f8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804d5fa:	687b      	ldr	r3, [r7, #4]
 804d5fc:	2200      	movs	r2, #0
 804d5fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 804d600:	687b      	ldr	r3, [r7, #4]
 804d602:	681b      	ldr	r3, [r3, #0]
 804d604:	691b      	ldr	r3, [r3, #16]
 804d606:	f003 0308 	and.w	r3, r3, #8
 804d60a:	2b08      	cmp	r3, #8
 804d60c:	d128      	bne.n	804d660 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 804d60e:	687b      	ldr	r3, [r7, #4]
 804d610:	681b      	ldr	r3, [r3, #0]
 804d612:	68db      	ldr	r3, [r3, #12]
 804d614:	f003 0308 	and.w	r3, r3, #8
 804d618:	2b08      	cmp	r3, #8
 804d61a:	d121      	bne.n	804d660 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 804d61c:	687b      	ldr	r3, [r7, #4]
 804d61e:	681b      	ldr	r3, [r3, #0]
 804d620:	f06f 0208 	mvn.w	r2, #8
 804d624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 804d626:	687b      	ldr	r3, [r7, #4]
 804d628:	2204      	movs	r2, #4
 804d62a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 804d62c:	687b      	ldr	r3, [r7, #4]
 804d62e:	681b      	ldr	r3, [r3, #0]
 804d630:	69db      	ldr	r3, [r3, #28]
 804d632:	f003 0303 	and.w	r3, r3, #3
 804d636:	2b00      	cmp	r3, #0
 804d638:	d005      	beq.n	804d646 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 804d63a:	687b      	ldr	r3, [r7, #4]
 804d63c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804d640:	6878      	ldr	r0, [r7, #4]
 804d642:	4798      	blx	r3
 804d644:	e009      	b.n	804d65a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 804d646:	687b      	ldr	r3, [r7, #4]
 804d648:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804d64c:	6878      	ldr	r0, [r7, #4]
 804d64e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 804d650:	687b      	ldr	r3, [r7, #4]
 804d652:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 804d656:	6878      	ldr	r0, [r7, #4]
 804d658:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804d65a:	687b      	ldr	r3, [r7, #4]
 804d65c:	2200      	movs	r2, #0
 804d65e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 804d660:	687b      	ldr	r3, [r7, #4]
 804d662:	681b      	ldr	r3, [r3, #0]
 804d664:	691b      	ldr	r3, [r3, #16]
 804d666:	f003 0310 	and.w	r3, r3, #16
 804d66a:	2b10      	cmp	r3, #16
 804d66c:	d128      	bne.n	804d6c0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 804d66e:	687b      	ldr	r3, [r7, #4]
 804d670:	681b      	ldr	r3, [r3, #0]
 804d672:	68db      	ldr	r3, [r3, #12]
 804d674:	f003 0310 	and.w	r3, r3, #16
 804d678:	2b10      	cmp	r3, #16
 804d67a:	d121      	bne.n	804d6c0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 804d67c:	687b      	ldr	r3, [r7, #4]
 804d67e:	681b      	ldr	r3, [r3, #0]
 804d680:	f06f 0210 	mvn.w	r2, #16
 804d684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 804d686:	687b      	ldr	r3, [r7, #4]
 804d688:	2208      	movs	r2, #8
 804d68a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 804d68c:	687b      	ldr	r3, [r7, #4]
 804d68e:	681b      	ldr	r3, [r3, #0]
 804d690:	69db      	ldr	r3, [r3, #28]
 804d692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804d696:	2b00      	cmp	r3, #0
 804d698:	d005      	beq.n	804d6a6 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 804d69a:	687b      	ldr	r3, [r7, #4]
 804d69c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804d6a0:	6878      	ldr	r0, [r7, #4]
 804d6a2:	4798      	blx	r3
 804d6a4:	e009      	b.n	804d6ba <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 804d6a6:	687b      	ldr	r3, [r7, #4]
 804d6a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804d6ac:	6878      	ldr	r0, [r7, #4]
 804d6ae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 804d6b0:	687b      	ldr	r3, [r7, #4]
 804d6b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 804d6b6:	6878      	ldr	r0, [r7, #4]
 804d6b8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804d6ba:	687b      	ldr	r3, [r7, #4]
 804d6bc:	2200      	movs	r2, #0
 804d6be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 804d6c0:	687b      	ldr	r3, [r7, #4]
 804d6c2:	681b      	ldr	r3, [r3, #0]
 804d6c4:	691b      	ldr	r3, [r3, #16]
 804d6c6:	f003 0301 	and.w	r3, r3, #1
 804d6ca:	2b01      	cmp	r3, #1
 804d6cc:	d110      	bne.n	804d6f0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 804d6ce:	687b      	ldr	r3, [r7, #4]
 804d6d0:	681b      	ldr	r3, [r3, #0]
 804d6d2:	68db      	ldr	r3, [r3, #12]
 804d6d4:	f003 0301 	and.w	r3, r3, #1
 804d6d8:	2b01      	cmp	r3, #1
 804d6da:	d109      	bne.n	804d6f0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 804d6dc:	687b      	ldr	r3, [r7, #4]
 804d6de:	681b      	ldr	r3, [r3, #0]
 804d6e0:	f06f 0201 	mvn.w	r2, #1
 804d6e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 804d6e6:	687b      	ldr	r3, [r7, #4]
 804d6e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804d6ec:	6878      	ldr	r0, [r7, #4]
 804d6ee:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 804d6f0:	687b      	ldr	r3, [r7, #4]
 804d6f2:	681b      	ldr	r3, [r3, #0]
 804d6f4:	691b      	ldr	r3, [r3, #16]
 804d6f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804d6fa:	2b80      	cmp	r3, #128	; 0x80
 804d6fc:	d110      	bne.n	804d720 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 804d6fe:	687b      	ldr	r3, [r7, #4]
 804d700:	681b      	ldr	r3, [r3, #0]
 804d702:	68db      	ldr	r3, [r3, #12]
 804d704:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804d708:	2b80      	cmp	r3, #128	; 0x80
 804d70a:	d109      	bne.n	804d720 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 804d70c:	687b      	ldr	r3, [r7, #4]
 804d70e:	681b      	ldr	r3, [r3, #0]
 804d710:	f06f 0280 	mvn.w	r2, #128	; 0x80
 804d714:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 804d716:	687b      	ldr	r3, [r7, #4]
 804d718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 804d71c:	6878      	ldr	r0, [r7, #4]
 804d71e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 804d720:	687b      	ldr	r3, [r7, #4]
 804d722:	681b      	ldr	r3, [r3, #0]
 804d724:	691b      	ldr	r3, [r3, #16]
 804d726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804d72a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804d72e:	d110      	bne.n	804d752 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 804d730:	687b      	ldr	r3, [r7, #4]
 804d732:	681b      	ldr	r3, [r3, #0]
 804d734:	68db      	ldr	r3, [r3, #12]
 804d736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804d73a:	2b80      	cmp	r3, #128	; 0x80
 804d73c:	d109      	bne.n	804d752 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 804d73e:	687b      	ldr	r3, [r7, #4]
 804d740:	681b      	ldr	r3, [r3, #0]
 804d742:	f46f 7280 	mvn.w	r2, #256	; 0x100
 804d746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 804d748:	687b      	ldr	r3, [r7, #4]
 804d74a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 804d74e:	6878      	ldr	r0, [r7, #4]
 804d750:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 804d752:	687b      	ldr	r3, [r7, #4]
 804d754:	681b      	ldr	r3, [r3, #0]
 804d756:	691b      	ldr	r3, [r3, #16]
 804d758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804d75c:	2b40      	cmp	r3, #64	; 0x40
 804d75e:	d110      	bne.n	804d782 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 804d760:	687b      	ldr	r3, [r7, #4]
 804d762:	681b      	ldr	r3, [r3, #0]
 804d764:	68db      	ldr	r3, [r3, #12]
 804d766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804d76a:	2b40      	cmp	r3, #64	; 0x40
 804d76c:	d109      	bne.n	804d782 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 804d76e:	687b      	ldr	r3, [r7, #4]
 804d770:	681b      	ldr	r3, [r3, #0]
 804d772:	f06f 0240 	mvn.w	r2, #64	; 0x40
 804d776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 804d778:	687b      	ldr	r3, [r7, #4]
 804d77a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804d77e:	6878      	ldr	r0, [r7, #4]
 804d780:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 804d782:	687b      	ldr	r3, [r7, #4]
 804d784:	681b      	ldr	r3, [r3, #0]
 804d786:	691b      	ldr	r3, [r3, #16]
 804d788:	f003 0320 	and.w	r3, r3, #32
 804d78c:	2b20      	cmp	r3, #32
 804d78e:	d110      	bne.n	804d7b2 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 804d790:	687b      	ldr	r3, [r7, #4]
 804d792:	681b      	ldr	r3, [r3, #0]
 804d794:	68db      	ldr	r3, [r3, #12]
 804d796:	f003 0320 	and.w	r3, r3, #32
 804d79a:	2b20      	cmp	r3, #32
 804d79c:	d109      	bne.n	804d7b2 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 804d79e:	687b      	ldr	r3, [r7, #4]
 804d7a0:	681b      	ldr	r3, [r3, #0]
 804d7a2:	f06f 0220 	mvn.w	r2, #32
 804d7a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 804d7a8:	687b      	ldr	r3, [r7, #4]
 804d7aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 804d7ae:	6878      	ldr	r0, [r7, #4]
 804d7b0:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 804d7b2:	bf00      	nop
 804d7b4:	3708      	adds	r7, #8
 804d7b6:	46bd      	mov	sp, r7
 804d7b8:	bd80      	pop	{r7, pc}

0804d7ba <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 804d7ba:	b480      	push	{r7}
 804d7bc:	b083      	sub	sp, #12
 804d7be:	af00      	add	r7, sp, #0
 804d7c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 804d7c2:	bf00      	nop
 804d7c4:	370c      	adds	r7, #12
 804d7c6:	46bd      	mov	sp, r7
 804d7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d7cc:	4770      	bx	lr

0804d7ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 804d7ce:	b480      	push	{r7}
 804d7d0:	b083      	sub	sp, #12
 804d7d2:	af00      	add	r7, sp, #0
 804d7d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 804d7d6:	bf00      	nop
 804d7d8:	370c      	adds	r7, #12
 804d7da:	46bd      	mov	sp, r7
 804d7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d7e0:	4770      	bx	lr

0804d7e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 804d7e2:	b480      	push	{r7}
 804d7e4:	b083      	sub	sp, #12
 804d7e6:	af00      	add	r7, sp, #0
 804d7e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 804d7ea:	bf00      	nop
 804d7ec:	370c      	adds	r7, #12
 804d7ee:	46bd      	mov	sp, r7
 804d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d7f4:	4770      	bx	lr

0804d7f6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 804d7f6:	b480      	push	{r7}
 804d7f8:	b083      	sub	sp, #12
 804d7fa:	af00      	add	r7, sp, #0
 804d7fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 804d7fe:	bf00      	nop
 804d800:	370c      	adds	r7, #12
 804d802:	46bd      	mov	sp, r7
 804d804:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d808:	4770      	bx	lr

0804d80a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 804d80a:	b480      	push	{r7}
 804d80c:	b083      	sub	sp, #12
 804d80e:	af00      	add	r7, sp, #0
 804d810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 804d812:	bf00      	nop
 804d814:	370c      	adds	r7, #12
 804d816:	46bd      	mov	sp, r7
 804d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d81c:	4770      	bx	lr

0804d81e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 804d81e:	b480      	push	{r7}
 804d820:	b083      	sub	sp, #12
 804d822:	af00      	add	r7, sp, #0
 804d824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 804d826:	bf00      	nop
 804d828:	370c      	adds	r7, #12
 804d82a:	46bd      	mov	sp, r7
 804d82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d830:	4770      	bx	lr

0804d832 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 804d832:	b480      	push	{r7}
 804d834:	b083      	sub	sp, #12
 804d836:	af00      	add	r7, sp, #0
 804d838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 804d83a:	bf00      	nop
 804d83c:	370c      	adds	r7, #12
 804d83e:	46bd      	mov	sp, r7
 804d840:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d844:	4770      	bx	lr

0804d846 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 804d846:	b480      	push	{r7}
 804d848:	b083      	sub	sp, #12
 804d84a:	af00      	add	r7, sp, #0
 804d84c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 804d84e:	bf00      	nop
 804d850:	370c      	adds	r7, #12
 804d852:	46bd      	mov	sp, r7
 804d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d858:	4770      	bx	lr

0804d85a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 804d85a:	b480      	push	{r7}
 804d85c:	b083      	sub	sp, #12
 804d85e:	af00      	add	r7, sp, #0
 804d860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 804d862:	bf00      	nop
 804d864:	370c      	adds	r7, #12
 804d866:	46bd      	mov	sp, r7
 804d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d86c:	4770      	bx	lr
	...

0804d870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 804d870:	b480      	push	{r7}
 804d872:	b085      	sub	sp, #20
 804d874:	af00      	add	r7, sp, #0
 804d876:	6078      	str	r0, [r7, #4]
 804d878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 804d87a:	687b      	ldr	r3, [r7, #4]
 804d87c:	681b      	ldr	r3, [r3, #0]
 804d87e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 804d880:	687b      	ldr	r3, [r7, #4]
 804d882:	4a40      	ldr	r2, [pc, #256]	; (804d984 <TIM_Base_SetConfig+0x114>)
 804d884:	4293      	cmp	r3, r2
 804d886:	d013      	beq.n	804d8b0 <TIM_Base_SetConfig+0x40>
 804d888:	687b      	ldr	r3, [r7, #4]
 804d88a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804d88e:	d00f      	beq.n	804d8b0 <TIM_Base_SetConfig+0x40>
 804d890:	687b      	ldr	r3, [r7, #4]
 804d892:	4a3d      	ldr	r2, [pc, #244]	; (804d988 <TIM_Base_SetConfig+0x118>)
 804d894:	4293      	cmp	r3, r2
 804d896:	d00b      	beq.n	804d8b0 <TIM_Base_SetConfig+0x40>
 804d898:	687b      	ldr	r3, [r7, #4]
 804d89a:	4a3c      	ldr	r2, [pc, #240]	; (804d98c <TIM_Base_SetConfig+0x11c>)
 804d89c:	4293      	cmp	r3, r2
 804d89e:	d007      	beq.n	804d8b0 <TIM_Base_SetConfig+0x40>
 804d8a0:	687b      	ldr	r3, [r7, #4]
 804d8a2:	4a3b      	ldr	r2, [pc, #236]	; (804d990 <TIM_Base_SetConfig+0x120>)
 804d8a4:	4293      	cmp	r3, r2
 804d8a6:	d003      	beq.n	804d8b0 <TIM_Base_SetConfig+0x40>
 804d8a8:	687b      	ldr	r3, [r7, #4]
 804d8aa:	4a3a      	ldr	r2, [pc, #232]	; (804d994 <TIM_Base_SetConfig+0x124>)
 804d8ac:	4293      	cmp	r3, r2
 804d8ae:	d108      	bne.n	804d8c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 804d8b0:	68fb      	ldr	r3, [r7, #12]
 804d8b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804d8b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 804d8b8:	683b      	ldr	r3, [r7, #0]
 804d8ba:	685b      	ldr	r3, [r3, #4]
 804d8bc:	68fa      	ldr	r2, [r7, #12]
 804d8be:	4313      	orrs	r3, r2
 804d8c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 804d8c2:	687b      	ldr	r3, [r7, #4]
 804d8c4:	4a2f      	ldr	r2, [pc, #188]	; (804d984 <TIM_Base_SetConfig+0x114>)
 804d8c6:	4293      	cmp	r3, r2
 804d8c8:	d01f      	beq.n	804d90a <TIM_Base_SetConfig+0x9a>
 804d8ca:	687b      	ldr	r3, [r7, #4]
 804d8cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804d8d0:	d01b      	beq.n	804d90a <TIM_Base_SetConfig+0x9a>
 804d8d2:	687b      	ldr	r3, [r7, #4]
 804d8d4:	4a2c      	ldr	r2, [pc, #176]	; (804d988 <TIM_Base_SetConfig+0x118>)
 804d8d6:	4293      	cmp	r3, r2
 804d8d8:	d017      	beq.n	804d90a <TIM_Base_SetConfig+0x9a>
 804d8da:	687b      	ldr	r3, [r7, #4]
 804d8dc:	4a2b      	ldr	r2, [pc, #172]	; (804d98c <TIM_Base_SetConfig+0x11c>)
 804d8de:	4293      	cmp	r3, r2
 804d8e0:	d013      	beq.n	804d90a <TIM_Base_SetConfig+0x9a>
 804d8e2:	687b      	ldr	r3, [r7, #4]
 804d8e4:	4a2a      	ldr	r2, [pc, #168]	; (804d990 <TIM_Base_SetConfig+0x120>)
 804d8e6:	4293      	cmp	r3, r2
 804d8e8:	d00f      	beq.n	804d90a <TIM_Base_SetConfig+0x9a>
 804d8ea:	687b      	ldr	r3, [r7, #4]
 804d8ec:	4a29      	ldr	r2, [pc, #164]	; (804d994 <TIM_Base_SetConfig+0x124>)
 804d8ee:	4293      	cmp	r3, r2
 804d8f0:	d00b      	beq.n	804d90a <TIM_Base_SetConfig+0x9a>
 804d8f2:	687b      	ldr	r3, [r7, #4]
 804d8f4:	4a28      	ldr	r2, [pc, #160]	; (804d998 <TIM_Base_SetConfig+0x128>)
 804d8f6:	4293      	cmp	r3, r2
 804d8f8:	d007      	beq.n	804d90a <TIM_Base_SetConfig+0x9a>
 804d8fa:	687b      	ldr	r3, [r7, #4]
 804d8fc:	4a27      	ldr	r2, [pc, #156]	; (804d99c <TIM_Base_SetConfig+0x12c>)
 804d8fe:	4293      	cmp	r3, r2
 804d900:	d003      	beq.n	804d90a <TIM_Base_SetConfig+0x9a>
 804d902:	687b      	ldr	r3, [r7, #4]
 804d904:	4a26      	ldr	r2, [pc, #152]	; (804d9a0 <TIM_Base_SetConfig+0x130>)
 804d906:	4293      	cmp	r3, r2
 804d908:	d108      	bne.n	804d91c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 804d90a:	68fb      	ldr	r3, [r7, #12]
 804d90c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804d910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 804d912:	683b      	ldr	r3, [r7, #0]
 804d914:	68db      	ldr	r3, [r3, #12]
 804d916:	68fa      	ldr	r2, [r7, #12]
 804d918:	4313      	orrs	r3, r2
 804d91a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 804d91c:	68fb      	ldr	r3, [r7, #12]
 804d91e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 804d922:	683b      	ldr	r3, [r7, #0]
 804d924:	695b      	ldr	r3, [r3, #20]
 804d926:	4313      	orrs	r3, r2
 804d928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 804d92a:	687b      	ldr	r3, [r7, #4]
 804d92c:	68fa      	ldr	r2, [r7, #12]
 804d92e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 804d930:	683b      	ldr	r3, [r7, #0]
 804d932:	689a      	ldr	r2, [r3, #8]
 804d934:	687b      	ldr	r3, [r7, #4]
 804d936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 804d938:	683b      	ldr	r3, [r7, #0]
 804d93a:	681a      	ldr	r2, [r3, #0]
 804d93c:	687b      	ldr	r3, [r7, #4]
 804d93e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 804d940:	687b      	ldr	r3, [r7, #4]
 804d942:	4a10      	ldr	r2, [pc, #64]	; (804d984 <TIM_Base_SetConfig+0x114>)
 804d944:	4293      	cmp	r3, r2
 804d946:	d00f      	beq.n	804d968 <TIM_Base_SetConfig+0xf8>
 804d948:	687b      	ldr	r3, [r7, #4]
 804d94a:	4a12      	ldr	r2, [pc, #72]	; (804d994 <TIM_Base_SetConfig+0x124>)
 804d94c:	4293      	cmp	r3, r2
 804d94e:	d00b      	beq.n	804d968 <TIM_Base_SetConfig+0xf8>
 804d950:	687b      	ldr	r3, [r7, #4]
 804d952:	4a11      	ldr	r2, [pc, #68]	; (804d998 <TIM_Base_SetConfig+0x128>)
 804d954:	4293      	cmp	r3, r2
 804d956:	d007      	beq.n	804d968 <TIM_Base_SetConfig+0xf8>
 804d958:	687b      	ldr	r3, [r7, #4]
 804d95a:	4a10      	ldr	r2, [pc, #64]	; (804d99c <TIM_Base_SetConfig+0x12c>)
 804d95c:	4293      	cmp	r3, r2
 804d95e:	d003      	beq.n	804d968 <TIM_Base_SetConfig+0xf8>
 804d960:	687b      	ldr	r3, [r7, #4]
 804d962:	4a0f      	ldr	r2, [pc, #60]	; (804d9a0 <TIM_Base_SetConfig+0x130>)
 804d964:	4293      	cmp	r3, r2
 804d966:	d103      	bne.n	804d970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 804d968:	683b      	ldr	r3, [r7, #0]
 804d96a:	691a      	ldr	r2, [r3, #16]
 804d96c:	687b      	ldr	r3, [r7, #4]
 804d96e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 804d970:	687b      	ldr	r3, [r7, #4]
 804d972:	2201      	movs	r2, #1
 804d974:	615a      	str	r2, [r3, #20]
}
 804d976:	bf00      	nop
 804d978:	3714      	adds	r7, #20
 804d97a:	46bd      	mov	sp, r7
 804d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804d980:	4770      	bx	lr
 804d982:	bf00      	nop
 804d984:	40012c00 	.word	0x40012c00
 804d988:	40000400 	.word	0x40000400
 804d98c:	40000800 	.word	0x40000800
 804d990:	40000c00 	.word	0x40000c00
 804d994:	40013400 	.word	0x40013400
 804d998:	40014000 	.word	0x40014000
 804d99c:	40014400 	.word	0x40014400
 804d9a0:	40014800 	.word	0x40014800

0804d9a4 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 804d9a4:	b480      	push	{r7}
 804d9a6:	b083      	sub	sp, #12
 804d9a8:	af00      	add	r7, sp, #0
 804d9aa:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 804d9ac:	687b      	ldr	r3, [r7, #4]
 804d9ae:	4a1e      	ldr	r2, [pc, #120]	; (804da28 <TIM_ResetCallback+0x84>)
 804d9b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 804d9b4:	687b      	ldr	r3, [r7, #4]
 804d9b6:	4a1d      	ldr	r2, [pc, #116]	; (804da2c <TIM_ResetCallback+0x88>)
 804d9b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 804d9bc:	687b      	ldr	r3, [r7, #4]
 804d9be:	4a1c      	ldr	r2, [pc, #112]	; (804da30 <TIM_ResetCallback+0x8c>)
 804d9c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 804d9c4:	687b      	ldr	r3, [r7, #4]
 804d9c6:	4a1b      	ldr	r2, [pc, #108]	; (804da34 <TIM_ResetCallback+0x90>)
 804d9c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 804d9cc:	687b      	ldr	r3, [r7, #4]
 804d9ce:	4a1a      	ldr	r2, [pc, #104]	; (804da38 <TIM_ResetCallback+0x94>)
 804d9d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 804d9d4:	687b      	ldr	r3, [r7, #4]
 804d9d6:	4a19      	ldr	r2, [pc, #100]	; (804da3c <TIM_ResetCallback+0x98>)
 804d9d8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 804d9dc:	687b      	ldr	r3, [r7, #4]
 804d9de:	4a18      	ldr	r2, [pc, #96]	; (804da40 <TIM_ResetCallback+0x9c>)
 804d9e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 804d9e4:	687b      	ldr	r3, [r7, #4]
 804d9e6:	4a17      	ldr	r2, [pc, #92]	; (804da44 <TIM_ResetCallback+0xa0>)
 804d9e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 804d9ec:	687b      	ldr	r3, [r7, #4]
 804d9ee:	4a16      	ldr	r2, [pc, #88]	; (804da48 <TIM_ResetCallback+0xa4>)
 804d9f0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 804d9f4:	687b      	ldr	r3, [r7, #4]
 804d9f6:	4a15      	ldr	r2, [pc, #84]	; (804da4c <TIM_ResetCallback+0xa8>)
 804d9f8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 804d9fc:	687b      	ldr	r3, [r7, #4]
 804d9fe:	4a14      	ldr	r2, [pc, #80]	; (804da50 <TIM_ResetCallback+0xac>)
 804da00:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 804da04:	687b      	ldr	r3, [r7, #4]
 804da06:	4a13      	ldr	r2, [pc, #76]	; (804da54 <TIM_ResetCallback+0xb0>)
 804da08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 804da0c:	687b      	ldr	r3, [r7, #4]
 804da0e:	4a12      	ldr	r2, [pc, #72]	; (804da58 <TIM_ResetCallback+0xb4>)
 804da10:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 804da14:	687b      	ldr	r3, [r7, #4]
 804da16:	4a11      	ldr	r2, [pc, #68]	; (804da5c <TIM_ResetCallback+0xb8>)
 804da18:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 804da1c:	bf00      	nop
 804da1e:	370c      	adds	r7, #12
 804da20:	46bd      	mov	sp, r7
 804da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 804da26:	4770      	bx	lr
 804da28:	0804166d 	.word	0x0804166d
 804da2c:	0804d7bb 	.word	0x0804d7bb
 804da30:	0804d833 	.word	0x0804d833
 804da34:	0804d847 	.word	0x0804d847
 804da38:	0804d7e3 	.word	0x0804d7e3
 804da3c:	0804d7f7 	.word	0x0804d7f7
 804da40:	0804d7cf 	.word	0x0804d7cf
 804da44:	0804d80b 	.word	0x0804d80b
 804da48:	0804d81f 	.word	0x0804d81f
 804da4c:	0804d85b 	.word	0x0804d85b
 804da50:	0804db71 	.word	0x0804db71
 804da54:	0804db85 	.word	0x0804db85
 804da58:	0804db99 	.word	0x0804db99
 804da5c:	0804dbad 	.word	0x0804dbad

0804da60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 804da60:	b480      	push	{r7}
 804da62:	b085      	sub	sp, #20
 804da64:	af00      	add	r7, sp, #0
 804da66:	6078      	str	r0, [r7, #4]
 804da68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 804da6a:	687b      	ldr	r3, [r7, #4]
 804da6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 804da70:	2b01      	cmp	r3, #1
 804da72:	d101      	bne.n	804da78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 804da74:	2302      	movs	r3, #2
 804da76:	e068      	b.n	804db4a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 804da78:	687b      	ldr	r3, [r7, #4]
 804da7a:	2201      	movs	r2, #1
 804da7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 804da80:	687b      	ldr	r3, [r7, #4]
 804da82:	2202      	movs	r2, #2
 804da84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 804da88:	687b      	ldr	r3, [r7, #4]
 804da8a:	681b      	ldr	r3, [r3, #0]
 804da8c:	685b      	ldr	r3, [r3, #4]
 804da8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 804da90:	687b      	ldr	r3, [r7, #4]
 804da92:	681b      	ldr	r3, [r3, #0]
 804da94:	689b      	ldr	r3, [r3, #8]
 804da96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 804da98:	687b      	ldr	r3, [r7, #4]
 804da9a:	681b      	ldr	r3, [r3, #0]
 804da9c:	4a2e      	ldr	r2, [pc, #184]	; (804db58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 804da9e:	4293      	cmp	r3, r2
 804daa0:	d004      	beq.n	804daac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 804daa2:	687b      	ldr	r3, [r7, #4]
 804daa4:	681b      	ldr	r3, [r3, #0]
 804daa6:	4a2d      	ldr	r2, [pc, #180]	; (804db5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 804daa8:	4293      	cmp	r3, r2
 804daaa:	d108      	bne.n	804dabe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 804daac:	68fb      	ldr	r3, [r7, #12]
 804daae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 804dab2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 804dab4:	683b      	ldr	r3, [r7, #0]
 804dab6:	685b      	ldr	r3, [r3, #4]
 804dab8:	68fa      	ldr	r2, [r7, #12]
 804daba:	4313      	orrs	r3, r2
 804dabc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 804dabe:	68fb      	ldr	r3, [r7, #12]
 804dac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804dac4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 804dac6:	683b      	ldr	r3, [r7, #0]
 804dac8:	681b      	ldr	r3, [r3, #0]
 804daca:	68fa      	ldr	r2, [r7, #12]
 804dacc:	4313      	orrs	r3, r2
 804dace:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 804dad0:	687b      	ldr	r3, [r7, #4]
 804dad2:	681b      	ldr	r3, [r3, #0]
 804dad4:	68fa      	ldr	r2, [r7, #12]
 804dad6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 804dad8:	687b      	ldr	r3, [r7, #4]
 804dada:	681b      	ldr	r3, [r3, #0]
 804dadc:	4a1e      	ldr	r2, [pc, #120]	; (804db58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 804dade:	4293      	cmp	r3, r2
 804dae0:	d01d      	beq.n	804db1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 804dae2:	687b      	ldr	r3, [r7, #4]
 804dae4:	681b      	ldr	r3, [r3, #0]
 804dae6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 804daea:	d018      	beq.n	804db1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 804daec:	687b      	ldr	r3, [r7, #4]
 804daee:	681b      	ldr	r3, [r3, #0]
 804daf0:	4a1b      	ldr	r2, [pc, #108]	; (804db60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 804daf2:	4293      	cmp	r3, r2
 804daf4:	d013      	beq.n	804db1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 804daf6:	687b      	ldr	r3, [r7, #4]
 804daf8:	681b      	ldr	r3, [r3, #0]
 804dafa:	4a1a      	ldr	r2, [pc, #104]	; (804db64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 804dafc:	4293      	cmp	r3, r2
 804dafe:	d00e      	beq.n	804db1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 804db00:	687b      	ldr	r3, [r7, #4]
 804db02:	681b      	ldr	r3, [r3, #0]
 804db04:	4a18      	ldr	r2, [pc, #96]	; (804db68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 804db06:	4293      	cmp	r3, r2
 804db08:	d009      	beq.n	804db1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 804db0a:	687b      	ldr	r3, [r7, #4]
 804db0c:	681b      	ldr	r3, [r3, #0]
 804db0e:	4a13      	ldr	r2, [pc, #76]	; (804db5c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 804db10:	4293      	cmp	r3, r2
 804db12:	d004      	beq.n	804db1e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 804db14:	687b      	ldr	r3, [r7, #4]
 804db16:	681b      	ldr	r3, [r3, #0]
 804db18:	4a14      	ldr	r2, [pc, #80]	; (804db6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 804db1a:	4293      	cmp	r3, r2
 804db1c:	d10c      	bne.n	804db38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 804db1e:	68bb      	ldr	r3, [r7, #8]
 804db20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804db24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 804db26:	683b      	ldr	r3, [r7, #0]
 804db28:	689b      	ldr	r3, [r3, #8]
 804db2a:	68ba      	ldr	r2, [r7, #8]
 804db2c:	4313      	orrs	r3, r2
 804db2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 804db30:	687b      	ldr	r3, [r7, #4]
 804db32:	681b      	ldr	r3, [r3, #0]
 804db34:	68ba      	ldr	r2, [r7, #8]
 804db36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 804db38:	687b      	ldr	r3, [r7, #4]
 804db3a:	2201      	movs	r2, #1
 804db3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 804db40:	687b      	ldr	r3, [r7, #4]
 804db42:	2200      	movs	r2, #0
 804db44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 804db48:	2300      	movs	r3, #0
}
 804db4a:	4618      	mov	r0, r3
 804db4c:	3714      	adds	r7, #20
 804db4e:	46bd      	mov	sp, r7
 804db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 804db54:	4770      	bx	lr
 804db56:	bf00      	nop
 804db58:	40012c00 	.word	0x40012c00
 804db5c:	40013400 	.word	0x40013400
 804db60:	40000400 	.word	0x40000400
 804db64:	40000800 	.word	0x40000800
 804db68:	40000c00 	.word	0x40000c00
 804db6c:	40014000 	.word	0x40014000

0804db70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 804db70:	b480      	push	{r7}
 804db72:	b083      	sub	sp, #12
 804db74:	af00      	add	r7, sp, #0
 804db76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 804db78:	bf00      	nop
 804db7a:	370c      	adds	r7, #12
 804db7c:	46bd      	mov	sp, r7
 804db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804db82:	4770      	bx	lr

0804db84 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 804db84:	b480      	push	{r7}
 804db86:	b083      	sub	sp, #12
 804db88:	af00      	add	r7, sp, #0
 804db8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 804db8c:	bf00      	nop
 804db8e:	370c      	adds	r7, #12
 804db90:	46bd      	mov	sp, r7
 804db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 804db96:	4770      	bx	lr

0804db98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 804db98:	b480      	push	{r7}
 804db9a:	b083      	sub	sp, #12
 804db9c:	af00      	add	r7, sp, #0
 804db9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 804dba0:	bf00      	nop
 804dba2:	370c      	adds	r7, #12
 804dba4:	46bd      	mov	sp, r7
 804dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 804dbaa:	4770      	bx	lr

0804dbac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 804dbac:	b480      	push	{r7}
 804dbae:	b083      	sub	sp, #12
 804dbb0:	af00      	add	r7, sp, #0
 804dbb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 804dbb4:	bf00      	nop
 804dbb6:	370c      	adds	r7, #12
 804dbb8:	46bd      	mov	sp, r7
 804dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 804dbbe:	4770      	bx	lr

0804dbc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 804dbc0:	b580      	push	{r7, lr}
 804dbc2:	b082      	sub	sp, #8
 804dbc4:	af00      	add	r7, sp, #0
 804dbc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 804dbc8:	687b      	ldr	r3, [r7, #4]
 804dbca:	2b00      	cmp	r3, #0
 804dbcc:	d101      	bne.n	804dbd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 804dbce:	2301      	movs	r3, #1
 804dbd0:	e042      	b.n	804dc58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 804dbd2:	687b      	ldr	r3, [r7, #4]
 804dbd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804dbd8:	2b00      	cmp	r3, #0
 804dbda:	d106      	bne.n	804dbea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 804dbdc:	687b      	ldr	r3, [r7, #4]
 804dbde:	2200      	movs	r2, #0
 804dbe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 804dbe4:	6878      	ldr	r0, [r7, #4]
 804dbe6:	f7f5 fa4b 	bl	8043080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 804dbea:	687b      	ldr	r3, [r7, #4]
 804dbec:	2224      	movs	r2, #36	; 0x24
 804dbee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 804dbf2:	687b      	ldr	r3, [r7, #4]
 804dbf4:	681b      	ldr	r3, [r3, #0]
 804dbf6:	681a      	ldr	r2, [r3, #0]
 804dbf8:	687b      	ldr	r3, [r7, #4]
 804dbfa:	681b      	ldr	r3, [r3, #0]
 804dbfc:	f022 0201 	bic.w	r2, r2, #1
 804dc00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 804dc02:	6878      	ldr	r0, [r7, #4]
 804dc04:	f000 fb16 	bl	804e234 <UART_SetConfig>
 804dc08:	4603      	mov	r3, r0
 804dc0a:	2b01      	cmp	r3, #1
 804dc0c:	d101      	bne.n	804dc12 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 804dc0e:	2301      	movs	r3, #1
 804dc10:	e022      	b.n	804dc58 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 804dc12:	687b      	ldr	r3, [r7, #4]
 804dc14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804dc16:	2b00      	cmp	r3, #0
 804dc18:	d002      	beq.n	804dc20 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 804dc1a:	6878      	ldr	r0, [r7, #4]
 804dc1c:	f000 fdde 	bl	804e7dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 804dc20:	687b      	ldr	r3, [r7, #4]
 804dc22:	681b      	ldr	r3, [r3, #0]
 804dc24:	685a      	ldr	r2, [r3, #4]
 804dc26:	687b      	ldr	r3, [r7, #4]
 804dc28:	681b      	ldr	r3, [r3, #0]
 804dc2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 804dc2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 804dc30:	687b      	ldr	r3, [r7, #4]
 804dc32:	681b      	ldr	r3, [r3, #0]
 804dc34:	689a      	ldr	r2, [r3, #8]
 804dc36:	687b      	ldr	r3, [r7, #4]
 804dc38:	681b      	ldr	r3, [r3, #0]
 804dc3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804dc3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 804dc40:	687b      	ldr	r3, [r7, #4]
 804dc42:	681b      	ldr	r3, [r3, #0]
 804dc44:	681a      	ldr	r2, [r3, #0]
 804dc46:	687b      	ldr	r3, [r7, #4]
 804dc48:	681b      	ldr	r3, [r3, #0]
 804dc4a:	f042 0201 	orr.w	r2, r2, #1
 804dc4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 804dc50:	6878      	ldr	r0, [r7, #4]
 804dc52:	f000 fe65 	bl	804e920 <UART_CheckIdleState>
 804dc56:	4603      	mov	r3, r0
}
 804dc58:	4618      	mov	r0, r3
 804dc5a:	3708      	adds	r7, #8
 804dc5c:	46bd      	mov	sp, r7
 804dc5e:	bd80      	pop	{r7, pc}

0804dc60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 804dc60:	b580      	push	{r7, lr}
 804dc62:	b08a      	sub	sp, #40	; 0x28
 804dc64:	af02      	add	r7, sp, #8
 804dc66:	60f8      	str	r0, [r7, #12]
 804dc68:	60b9      	str	r1, [r7, #8]
 804dc6a:	603b      	str	r3, [r7, #0]
 804dc6c:	4613      	mov	r3, r2
 804dc6e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 804dc70:	68fb      	ldr	r3, [r7, #12]
 804dc72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804dc76:	2b20      	cmp	r3, #32
 804dc78:	f040 8083 	bne.w	804dd82 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 804dc7c:	68bb      	ldr	r3, [r7, #8]
 804dc7e:	2b00      	cmp	r3, #0
 804dc80:	d002      	beq.n	804dc88 <HAL_UART_Transmit+0x28>
 804dc82:	88fb      	ldrh	r3, [r7, #6]
 804dc84:	2b00      	cmp	r3, #0
 804dc86:	d101      	bne.n	804dc8c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 804dc88:	2301      	movs	r3, #1
 804dc8a:	e07b      	b.n	804dd84 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 804dc8c:	68fb      	ldr	r3, [r7, #12]
 804dc8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 804dc92:	2b01      	cmp	r3, #1
 804dc94:	d101      	bne.n	804dc9a <HAL_UART_Transmit+0x3a>
 804dc96:	2302      	movs	r3, #2
 804dc98:	e074      	b.n	804dd84 <HAL_UART_Transmit+0x124>
 804dc9a:	68fb      	ldr	r3, [r7, #12]
 804dc9c:	2201      	movs	r2, #1
 804dc9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 804dca2:	68fb      	ldr	r3, [r7, #12]
 804dca4:	2200      	movs	r2, #0
 804dca6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804dcaa:	68fb      	ldr	r3, [r7, #12]
 804dcac:	2221      	movs	r2, #33	; 0x21
 804dcae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 804dcb2:	f7f8 fd29 	bl	8046708 <HAL_GetTick>
 804dcb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 804dcb8:	68fb      	ldr	r3, [r7, #12]
 804dcba:	88fa      	ldrh	r2, [r7, #6]
 804dcbc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 804dcc0:	68fb      	ldr	r3, [r7, #12]
 804dcc2:	88fa      	ldrh	r2, [r7, #6]
 804dcc4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 804dcc8:	68fb      	ldr	r3, [r7, #12]
 804dcca:	689b      	ldr	r3, [r3, #8]
 804dccc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804dcd0:	d108      	bne.n	804dce4 <HAL_UART_Transmit+0x84>
 804dcd2:	68fb      	ldr	r3, [r7, #12]
 804dcd4:	691b      	ldr	r3, [r3, #16]
 804dcd6:	2b00      	cmp	r3, #0
 804dcd8:	d104      	bne.n	804dce4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 804dcda:	2300      	movs	r3, #0
 804dcdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 804dcde:	68bb      	ldr	r3, [r7, #8]
 804dce0:	61bb      	str	r3, [r7, #24]
 804dce2:	e003      	b.n	804dcec <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 804dce4:	68bb      	ldr	r3, [r7, #8]
 804dce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 804dce8:	2300      	movs	r3, #0
 804dcea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 804dcec:	68fb      	ldr	r3, [r7, #12]
 804dcee:	2200      	movs	r2, #0
 804dcf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 804dcf4:	e02c      	b.n	804dd50 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 804dcf6:	683b      	ldr	r3, [r7, #0]
 804dcf8:	9300      	str	r3, [sp, #0]
 804dcfa:	697b      	ldr	r3, [r7, #20]
 804dcfc:	2200      	movs	r2, #0
 804dcfe:	2180      	movs	r1, #128	; 0x80
 804dd00:	68f8      	ldr	r0, [r7, #12]
 804dd02:	f000 fe58 	bl	804e9b6 <UART_WaitOnFlagUntilTimeout>
 804dd06:	4603      	mov	r3, r0
 804dd08:	2b00      	cmp	r3, #0
 804dd0a:	d001      	beq.n	804dd10 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 804dd0c:	2303      	movs	r3, #3
 804dd0e:	e039      	b.n	804dd84 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 804dd10:	69fb      	ldr	r3, [r7, #28]
 804dd12:	2b00      	cmp	r3, #0
 804dd14:	d10b      	bne.n	804dd2e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 804dd16:	69bb      	ldr	r3, [r7, #24]
 804dd18:	881b      	ldrh	r3, [r3, #0]
 804dd1a:	461a      	mov	r2, r3
 804dd1c:	68fb      	ldr	r3, [r7, #12]
 804dd1e:	681b      	ldr	r3, [r3, #0]
 804dd20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 804dd24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 804dd26:	69bb      	ldr	r3, [r7, #24]
 804dd28:	3302      	adds	r3, #2
 804dd2a:	61bb      	str	r3, [r7, #24]
 804dd2c:	e007      	b.n	804dd3e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 804dd2e:	69fb      	ldr	r3, [r7, #28]
 804dd30:	781a      	ldrb	r2, [r3, #0]
 804dd32:	68fb      	ldr	r3, [r7, #12]
 804dd34:	681b      	ldr	r3, [r3, #0]
 804dd36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 804dd38:	69fb      	ldr	r3, [r7, #28]
 804dd3a:	3301      	adds	r3, #1
 804dd3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 804dd3e:	68fb      	ldr	r3, [r7, #12]
 804dd40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 804dd44:	b29b      	uxth	r3, r3
 804dd46:	3b01      	subs	r3, #1
 804dd48:	b29a      	uxth	r2, r3
 804dd4a:	68fb      	ldr	r3, [r7, #12]
 804dd4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 804dd50:	68fb      	ldr	r3, [r7, #12]
 804dd52:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 804dd56:	b29b      	uxth	r3, r3
 804dd58:	2b00      	cmp	r3, #0
 804dd5a:	d1cc      	bne.n	804dcf6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 804dd5c:	683b      	ldr	r3, [r7, #0]
 804dd5e:	9300      	str	r3, [sp, #0]
 804dd60:	697b      	ldr	r3, [r7, #20]
 804dd62:	2200      	movs	r2, #0
 804dd64:	2140      	movs	r1, #64	; 0x40
 804dd66:	68f8      	ldr	r0, [r7, #12]
 804dd68:	f000 fe25 	bl	804e9b6 <UART_WaitOnFlagUntilTimeout>
 804dd6c:	4603      	mov	r3, r0
 804dd6e:	2b00      	cmp	r3, #0
 804dd70:	d001      	beq.n	804dd76 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 804dd72:	2303      	movs	r3, #3
 804dd74:	e006      	b.n	804dd84 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 804dd76:	68fb      	ldr	r3, [r7, #12]
 804dd78:	2220      	movs	r2, #32
 804dd7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 804dd7e:	2300      	movs	r3, #0
 804dd80:	e000      	b.n	804dd84 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 804dd82:	2302      	movs	r3, #2
  }
}
 804dd84:	4618      	mov	r0, r3
 804dd86:	3720      	adds	r7, #32
 804dd88:	46bd      	mov	sp, r7
 804dd8a:	bd80      	pop	{r7, pc}

0804dd8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 804dd8c:	b580      	push	{r7, lr}
 804dd8e:	b088      	sub	sp, #32
 804dd90:	af00      	add	r7, sp, #0
 804dd92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 804dd94:	687b      	ldr	r3, [r7, #4]
 804dd96:	681b      	ldr	r3, [r3, #0]
 804dd98:	69db      	ldr	r3, [r3, #28]
 804dd9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 804dd9c:	687b      	ldr	r3, [r7, #4]
 804dd9e:	681b      	ldr	r3, [r3, #0]
 804dda0:	681b      	ldr	r3, [r3, #0]
 804dda2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 804dda4:	687b      	ldr	r3, [r7, #4]
 804dda6:	681b      	ldr	r3, [r3, #0]
 804dda8:	689b      	ldr	r3, [r3, #8]
 804ddaa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 804ddac:	69fa      	ldr	r2, [r7, #28]
 804ddae:	f640 030f 	movw	r3, #2063	; 0x80f
 804ddb2:	4013      	ands	r3, r2
 804ddb4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 804ddb6:	693b      	ldr	r3, [r7, #16]
 804ddb8:	2b00      	cmp	r3, #0
 804ddba:	d118      	bne.n	804ddee <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 804ddbc:	69fb      	ldr	r3, [r7, #28]
 804ddbe:	f003 0320 	and.w	r3, r3, #32
 804ddc2:	2b00      	cmp	r3, #0
 804ddc4:	d013      	beq.n	804ddee <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 804ddc6:	69bb      	ldr	r3, [r7, #24]
 804ddc8:	f003 0320 	and.w	r3, r3, #32
 804ddcc:	2b00      	cmp	r3, #0
 804ddce:	d104      	bne.n	804ddda <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 804ddd0:	697b      	ldr	r3, [r7, #20]
 804ddd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804ddd6:	2b00      	cmp	r3, #0
 804ddd8:	d009      	beq.n	804ddee <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 804ddda:	687b      	ldr	r3, [r7, #4]
 804dddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804ddde:	2b00      	cmp	r3, #0
 804dde0:	f000 81fb 	beq.w	804e1da <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 804dde4:	687b      	ldr	r3, [r7, #4]
 804dde6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804dde8:	6878      	ldr	r0, [r7, #4]
 804ddea:	4798      	blx	r3
      }
      return;
 804ddec:	e1f5      	b.n	804e1da <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 804ddee:	693b      	ldr	r3, [r7, #16]
 804ddf0:	2b00      	cmp	r3, #0
 804ddf2:	f000 80ef 	beq.w	804dfd4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 804ddf6:	697a      	ldr	r2, [r7, #20]
 804ddf8:	4b73      	ldr	r3, [pc, #460]	; (804dfc8 <HAL_UART_IRQHandler+0x23c>)
 804ddfa:	4013      	ands	r3, r2
 804ddfc:	2b00      	cmp	r3, #0
 804ddfe:	d105      	bne.n	804de0c <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 804de00:	69ba      	ldr	r2, [r7, #24]
 804de02:	4b72      	ldr	r3, [pc, #456]	; (804dfcc <HAL_UART_IRQHandler+0x240>)
 804de04:	4013      	ands	r3, r2
 804de06:	2b00      	cmp	r3, #0
 804de08:	f000 80e4 	beq.w	804dfd4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 804de0c:	69fb      	ldr	r3, [r7, #28]
 804de0e:	f003 0301 	and.w	r3, r3, #1
 804de12:	2b00      	cmp	r3, #0
 804de14:	d010      	beq.n	804de38 <HAL_UART_IRQHandler+0xac>
 804de16:	69bb      	ldr	r3, [r7, #24]
 804de18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804de1c:	2b00      	cmp	r3, #0
 804de1e:	d00b      	beq.n	804de38 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 804de20:	687b      	ldr	r3, [r7, #4]
 804de22:	681b      	ldr	r3, [r3, #0]
 804de24:	2201      	movs	r2, #1
 804de26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 804de28:	687b      	ldr	r3, [r7, #4]
 804de2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804de2e:	f043 0201 	orr.w	r2, r3, #1
 804de32:	687b      	ldr	r3, [r7, #4]
 804de34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 804de38:	69fb      	ldr	r3, [r7, #28]
 804de3a:	f003 0302 	and.w	r3, r3, #2
 804de3e:	2b00      	cmp	r3, #0
 804de40:	d010      	beq.n	804de64 <HAL_UART_IRQHandler+0xd8>
 804de42:	697b      	ldr	r3, [r7, #20]
 804de44:	f003 0301 	and.w	r3, r3, #1
 804de48:	2b00      	cmp	r3, #0
 804de4a:	d00b      	beq.n	804de64 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 804de4c:	687b      	ldr	r3, [r7, #4]
 804de4e:	681b      	ldr	r3, [r3, #0]
 804de50:	2202      	movs	r2, #2
 804de52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 804de54:	687b      	ldr	r3, [r7, #4]
 804de56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804de5a:	f043 0204 	orr.w	r2, r3, #4
 804de5e:	687b      	ldr	r3, [r7, #4]
 804de60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 804de64:	69fb      	ldr	r3, [r7, #28]
 804de66:	f003 0304 	and.w	r3, r3, #4
 804de6a:	2b00      	cmp	r3, #0
 804de6c:	d010      	beq.n	804de90 <HAL_UART_IRQHandler+0x104>
 804de6e:	697b      	ldr	r3, [r7, #20]
 804de70:	f003 0301 	and.w	r3, r3, #1
 804de74:	2b00      	cmp	r3, #0
 804de76:	d00b      	beq.n	804de90 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 804de78:	687b      	ldr	r3, [r7, #4]
 804de7a:	681b      	ldr	r3, [r3, #0]
 804de7c:	2204      	movs	r2, #4
 804de7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 804de80:	687b      	ldr	r3, [r7, #4]
 804de82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804de86:	f043 0202 	orr.w	r2, r3, #2
 804de8a:	687b      	ldr	r3, [r7, #4]
 804de8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 804de90:	69fb      	ldr	r3, [r7, #28]
 804de92:	f003 0308 	and.w	r3, r3, #8
 804de96:	2b00      	cmp	r3, #0
 804de98:	d015      	beq.n	804dec6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 804de9a:	69bb      	ldr	r3, [r7, #24]
 804de9c:	f003 0320 	and.w	r3, r3, #32
 804dea0:	2b00      	cmp	r3, #0
 804dea2:	d104      	bne.n	804deae <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 804dea4:	697a      	ldr	r2, [r7, #20]
 804dea6:	4b48      	ldr	r3, [pc, #288]	; (804dfc8 <HAL_UART_IRQHandler+0x23c>)
 804dea8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 804deaa:	2b00      	cmp	r3, #0
 804deac:	d00b      	beq.n	804dec6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 804deae:	687b      	ldr	r3, [r7, #4]
 804deb0:	681b      	ldr	r3, [r3, #0]
 804deb2:	2208      	movs	r2, #8
 804deb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 804deb6:	687b      	ldr	r3, [r7, #4]
 804deb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804debc:	f043 0208 	orr.w	r2, r3, #8
 804dec0:	687b      	ldr	r3, [r7, #4]
 804dec2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 804dec6:	69fb      	ldr	r3, [r7, #28]
 804dec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804decc:	2b00      	cmp	r3, #0
 804dece:	d011      	beq.n	804def4 <HAL_UART_IRQHandler+0x168>
 804ded0:	69bb      	ldr	r3, [r7, #24]
 804ded2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 804ded6:	2b00      	cmp	r3, #0
 804ded8:	d00c      	beq.n	804def4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 804deda:	687b      	ldr	r3, [r7, #4]
 804dedc:	681b      	ldr	r3, [r3, #0]
 804dede:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804dee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 804dee4:	687b      	ldr	r3, [r7, #4]
 804dee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804deea:	f043 0220 	orr.w	r2, r3, #32
 804deee:	687b      	ldr	r3, [r7, #4]
 804def0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 804def4:	687b      	ldr	r3, [r7, #4]
 804def6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804defa:	2b00      	cmp	r3, #0
 804defc:	f000 816f 	beq.w	804e1de <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 804df00:	69fb      	ldr	r3, [r7, #28]
 804df02:	f003 0320 	and.w	r3, r3, #32
 804df06:	2b00      	cmp	r3, #0
 804df08:	d011      	beq.n	804df2e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 804df0a:	69bb      	ldr	r3, [r7, #24]
 804df0c:	f003 0320 	and.w	r3, r3, #32
 804df10:	2b00      	cmp	r3, #0
 804df12:	d104      	bne.n	804df1e <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 804df14:	697b      	ldr	r3, [r7, #20]
 804df16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804df1a:	2b00      	cmp	r3, #0
 804df1c:	d007      	beq.n	804df2e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 804df1e:	687b      	ldr	r3, [r7, #4]
 804df20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804df22:	2b00      	cmp	r3, #0
 804df24:	d003      	beq.n	804df2e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 804df26:	687b      	ldr	r3, [r7, #4]
 804df28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804df2a:	6878      	ldr	r0, [r7, #4]
 804df2c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 804df2e:	687b      	ldr	r3, [r7, #4]
 804df30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804df34:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 804df36:	687b      	ldr	r3, [r7, #4]
 804df38:	681b      	ldr	r3, [r3, #0]
 804df3a:	689b      	ldr	r3, [r3, #8]
 804df3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804df40:	2b40      	cmp	r3, #64	; 0x40
 804df42:	d004      	beq.n	804df4e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 804df44:	68fb      	ldr	r3, [r7, #12]
 804df46:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 804df4a:	2b00      	cmp	r3, #0
 804df4c:	d031      	beq.n	804dfb2 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 804df4e:	6878      	ldr	r0, [r7, #4]
 804df50:	f000 fdb1 	bl	804eab6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804df54:	687b      	ldr	r3, [r7, #4]
 804df56:	681b      	ldr	r3, [r3, #0]
 804df58:	689b      	ldr	r3, [r3, #8]
 804df5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804df5e:	2b40      	cmp	r3, #64	; 0x40
 804df60:	d123      	bne.n	804dfaa <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804df62:	687b      	ldr	r3, [r7, #4]
 804df64:	681b      	ldr	r3, [r3, #0]
 804df66:	689a      	ldr	r2, [r3, #8]
 804df68:	687b      	ldr	r3, [r7, #4]
 804df6a:	681b      	ldr	r3, [r3, #0]
 804df6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804df70:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 804df72:	687b      	ldr	r3, [r7, #4]
 804df74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804df76:	2b00      	cmp	r3, #0
 804df78:	d013      	beq.n	804dfa2 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 804df7a:	687b      	ldr	r3, [r7, #4]
 804df7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804df7e:	4a14      	ldr	r2, [pc, #80]	; (804dfd0 <HAL_UART_IRQHandler+0x244>)
 804df80:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 804df82:	687b      	ldr	r3, [r7, #4]
 804df84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804df86:	4618      	mov	r0, r3
 804df88:	f7fa fc7e 	bl	8048888 <HAL_DMA_Abort_IT>
 804df8c:	4603      	mov	r3, r0
 804df8e:	2b00      	cmp	r3, #0
 804df90:	d017      	beq.n	804dfc2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 804df92:	687b      	ldr	r3, [r7, #4]
 804df94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804df96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804df98:	687a      	ldr	r2, [r7, #4]
 804df9a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 804df9c:	4610      	mov	r0, r2
 804df9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804dfa0:	e00f      	b.n	804dfc2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 804dfa2:	6878      	ldr	r0, [r7, #4]
 804dfa4:	f000 f930 	bl	804e208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804dfa8:	e00b      	b.n	804dfc2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 804dfaa:	6878      	ldr	r0, [r7, #4]
 804dfac:	f000 f92c 	bl	804e208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804dfb0:	e007      	b.n	804dfc2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 804dfb2:	6878      	ldr	r0, [r7, #4]
 804dfb4:	f000 f928 	bl	804e208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 804dfb8:	687b      	ldr	r3, [r7, #4]
 804dfba:	2200      	movs	r2, #0
 804dfbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 804dfc0:	e10d      	b.n	804e1de <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804dfc2:	bf00      	nop
    return;
 804dfc4:	e10b      	b.n	804e1de <HAL_UART_IRQHandler+0x452>
 804dfc6:	bf00      	nop
 804dfc8:	10000001 	.word	0x10000001
 804dfcc:	04000120 	.word	0x04000120
 804dfd0:	0804eb1b 	.word	0x0804eb1b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804dfd4:	687b      	ldr	r3, [r7, #4]
 804dfd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804dfd8:	2b01      	cmp	r3, #1
 804dfda:	f040 80ab 	bne.w	804e134 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 804dfde:	69fb      	ldr	r3, [r7, #28]
 804dfe0:	f003 0310 	and.w	r3, r3, #16
 804dfe4:	2b00      	cmp	r3, #0
 804dfe6:	f000 80a5 	beq.w	804e134 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 804dfea:	69bb      	ldr	r3, [r7, #24]
 804dfec:	f003 0310 	and.w	r3, r3, #16
 804dff0:	2b00      	cmp	r3, #0
 804dff2:	f000 809f 	beq.w	804e134 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 804dff6:	687b      	ldr	r3, [r7, #4]
 804dff8:	681b      	ldr	r3, [r3, #0]
 804dffa:	2210      	movs	r2, #16
 804dffc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804dffe:	687b      	ldr	r3, [r7, #4]
 804e000:	681b      	ldr	r3, [r3, #0]
 804e002:	689b      	ldr	r3, [r3, #8]
 804e004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804e008:	2b40      	cmp	r3, #64	; 0x40
 804e00a:	d155      	bne.n	804e0b8 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 804e00c:	687b      	ldr	r3, [r7, #4]
 804e00e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804e010:	681b      	ldr	r3, [r3, #0]
 804e012:	685b      	ldr	r3, [r3, #4]
 804e014:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 804e016:	893b      	ldrh	r3, [r7, #8]
 804e018:	2b00      	cmp	r3, #0
 804e01a:	f000 80e2 	beq.w	804e1e2 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 804e01e:	687b      	ldr	r3, [r7, #4]
 804e020:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 804e024:	893a      	ldrh	r2, [r7, #8]
 804e026:	429a      	cmp	r2, r3
 804e028:	f080 80db 	bcs.w	804e1e2 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 804e02c:	687b      	ldr	r3, [r7, #4]
 804e02e:	893a      	ldrh	r2, [r7, #8]
 804e030:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 804e034:	687b      	ldr	r3, [r7, #4]
 804e036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804e038:	681b      	ldr	r3, [r3, #0]
 804e03a:	681b      	ldr	r3, [r3, #0]
 804e03c:	f003 0320 	and.w	r3, r3, #32
 804e040:	2b00      	cmp	r3, #0
 804e042:	d12b      	bne.n	804e09c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 804e044:	687b      	ldr	r3, [r7, #4]
 804e046:	681b      	ldr	r3, [r3, #0]
 804e048:	681a      	ldr	r2, [r3, #0]
 804e04a:	687b      	ldr	r3, [r7, #4]
 804e04c:	681b      	ldr	r3, [r3, #0]
 804e04e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 804e052:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804e054:	687b      	ldr	r3, [r7, #4]
 804e056:	681b      	ldr	r3, [r3, #0]
 804e058:	689a      	ldr	r2, [r3, #8]
 804e05a:	687b      	ldr	r3, [r7, #4]
 804e05c:	681b      	ldr	r3, [r3, #0]
 804e05e:	f022 0201 	bic.w	r2, r2, #1
 804e062:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 804e064:	687b      	ldr	r3, [r7, #4]
 804e066:	681b      	ldr	r3, [r3, #0]
 804e068:	689a      	ldr	r2, [r3, #8]
 804e06a:	687b      	ldr	r3, [r7, #4]
 804e06c:	681b      	ldr	r3, [r3, #0]
 804e06e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804e072:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 804e074:	687b      	ldr	r3, [r7, #4]
 804e076:	2220      	movs	r2, #32
 804e078:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804e07c:	687b      	ldr	r3, [r7, #4]
 804e07e:	2200      	movs	r2, #0
 804e080:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804e082:	687b      	ldr	r3, [r7, #4]
 804e084:	681b      	ldr	r3, [r3, #0]
 804e086:	681a      	ldr	r2, [r3, #0]
 804e088:	687b      	ldr	r3, [r7, #4]
 804e08a:	681b      	ldr	r3, [r3, #0]
 804e08c:	f022 0210 	bic.w	r2, r2, #16
 804e090:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 804e092:	687b      	ldr	r3, [r7, #4]
 804e094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804e096:	4618      	mov	r0, r3
 804e098:	f7fa fb9a 	bl	80487d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 804e09c:	687b      	ldr	r3, [r7, #4]
 804e09e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 804e0a2:	687b      	ldr	r3, [r7, #4]
 804e0a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804e0a8:	b29b      	uxth	r3, r3
 804e0aa:	1ad3      	subs	r3, r2, r3
 804e0ac:	b29b      	uxth	r3, r3
 804e0ae:	4619      	mov	r1, r3
 804e0b0:	6878      	ldr	r0, [r7, #4]
 804e0b2:	f000 f8b3 	bl	804e21c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 804e0b6:	e094      	b.n	804e1e2 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 804e0b8:	687b      	ldr	r3, [r7, #4]
 804e0ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 804e0be:	687b      	ldr	r3, [r7, #4]
 804e0c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804e0c4:	b29b      	uxth	r3, r3
 804e0c6:	1ad3      	subs	r3, r2, r3
 804e0c8:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 804e0ca:	687b      	ldr	r3, [r7, #4]
 804e0cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804e0d0:	b29b      	uxth	r3, r3
 804e0d2:	2b00      	cmp	r3, #0
 804e0d4:	f000 8087 	beq.w	804e1e6 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 804e0d8:	897b      	ldrh	r3, [r7, #10]
 804e0da:	2b00      	cmp	r3, #0
 804e0dc:	f000 8083 	beq.w	804e1e6 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 804e0e0:	687b      	ldr	r3, [r7, #4]
 804e0e2:	681b      	ldr	r3, [r3, #0]
 804e0e4:	681a      	ldr	r2, [r3, #0]
 804e0e6:	687b      	ldr	r3, [r7, #4]
 804e0e8:	681b      	ldr	r3, [r3, #0]
 804e0ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 804e0ee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 804e0f0:	687b      	ldr	r3, [r7, #4]
 804e0f2:	681b      	ldr	r3, [r3, #0]
 804e0f4:	689b      	ldr	r3, [r3, #8]
 804e0f6:	687a      	ldr	r2, [r7, #4]
 804e0f8:	6812      	ldr	r2, [r2, #0]
 804e0fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804e0fe:	f023 0301 	bic.w	r3, r3, #1
 804e102:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 804e104:	687b      	ldr	r3, [r7, #4]
 804e106:	2220      	movs	r2, #32
 804e108:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804e10c:	687b      	ldr	r3, [r7, #4]
 804e10e:	2200      	movs	r2, #0
 804e110:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 804e112:	687b      	ldr	r3, [r7, #4]
 804e114:	2200      	movs	r2, #0
 804e116:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804e118:	687b      	ldr	r3, [r7, #4]
 804e11a:	681b      	ldr	r3, [r3, #0]
 804e11c:	681a      	ldr	r2, [r3, #0]
 804e11e:	687b      	ldr	r3, [r7, #4]
 804e120:	681b      	ldr	r3, [r3, #0]
 804e122:	f022 0210 	bic.w	r2, r2, #16
 804e126:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 804e128:	897b      	ldrh	r3, [r7, #10]
 804e12a:	4619      	mov	r1, r3
 804e12c:	6878      	ldr	r0, [r7, #4]
 804e12e:	f000 f875 	bl	804e21c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 804e132:	e058      	b.n	804e1e6 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 804e134:	69fb      	ldr	r3, [r7, #28]
 804e136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804e13a:	2b00      	cmp	r3, #0
 804e13c:	d00d      	beq.n	804e15a <HAL_UART_IRQHandler+0x3ce>
 804e13e:	697b      	ldr	r3, [r7, #20]
 804e140:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804e144:	2b00      	cmp	r3, #0
 804e146:	d008      	beq.n	804e15a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 804e148:	687b      	ldr	r3, [r7, #4]
 804e14a:	681b      	ldr	r3, [r3, #0]
 804e14c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 804e150:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 804e152:	6878      	ldr	r0, [r7, #4]
 804e154:	f000 fd11 	bl	804eb7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 804e158:	e048      	b.n	804e1ec <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 804e15a:	69fb      	ldr	r3, [r7, #28]
 804e15c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804e160:	2b00      	cmp	r3, #0
 804e162:	d012      	beq.n	804e18a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 804e164:	69bb      	ldr	r3, [r7, #24]
 804e166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804e16a:	2b00      	cmp	r3, #0
 804e16c:	d104      	bne.n	804e178 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 804e16e:	697b      	ldr	r3, [r7, #20]
 804e170:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804e174:	2b00      	cmp	r3, #0
 804e176:	d008      	beq.n	804e18a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 804e178:	687b      	ldr	r3, [r7, #4]
 804e17a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804e17c:	2b00      	cmp	r3, #0
 804e17e:	d034      	beq.n	804e1ea <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 804e180:	687b      	ldr	r3, [r7, #4]
 804e182:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804e184:	6878      	ldr	r0, [r7, #4]
 804e186:	4798      	blx	r3
    }
    return;
 804e188:	e02f      	b.n	804e1ea <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 804e18a:	69fb      	ldr	r3, [r7, #28]
 804e18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804e190:	2b00      	cmp	r3, #0
 804e192:	d008      	beq.n	804e1a6 <HAL_UART_IRQHandler+0x41a>
 804e194:	69bb      	ldr	r3, [r7, #24]
 804e196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804e19a:	2b00      	cmp	r3, #0
 804e19c:	d003      	beq.n	804e1a6 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 804e19e:	6878      	ldr	r0, [r7, #4]
 804e1a0:	f000 fcd1 	bl	804eb46 <UART_EndTransmit_IT>
    return;
 804e1a4:	e022      	b.n	804e1ec <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 804e1a6:	69fb      	ldr	r3, [r7, #28]
 804e1a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 804e1ac:	2b00      	cmp	r3, #0
 804e1ae:	d008      	beq.n	804e1c2 <HAL_UART_IRQHandler+0x436>
 804e1b0:	69bb      	ldr	r3, [r7, #24]
 804e1b2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 804e1b6:	2b00      	cmp	r3, #0
 804e1b8:	d003      	beq.n	804e1c2 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 804e1ba:	6878      	ldr	r0, [r7, #4]
 804e1bc:	f000 fcf1 	bl	804eba2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 804e1c0:	e014      	b.n	804e1ec <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 804e1c2:	69fb      	ldr	r3, [r7, #28]
 804e1c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804e1c8:	2b00      	cmp	r3, #0
 804e1ca:	d00f      	beq.n	804e1ec <HAL_UART_IRQHandler+0x460>
 804e1cc:	69bb      	ldr	r3, [r7, #24]
 804e1ce:	2b00      	cmp	r3, #0
 804e1d0:	da0c      	bge.n	804e1ec <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 804e1d2:	6878      	ldr	r0, [r7, #4]
 804e1d4:	f000 fcdb 	bl	804eb8e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 804e1d8:	e008      	b.n	804e1ec <HAL_UART_IRQHandler+0x460>
      return;
 804e1da:	bf00      	nop
 804e1dc:	e006      	b.n	804e1ec <HAL_UART_IRQHandler+0x460>
    return;
 804e1de:	bf00      	nop
 804e1e0:	e004      	b.n	804e1ec <HAL_UART_IRQHandler+0x460>
      return;
 804e1e2:	bf00      	nop
 804e1e4:	e002      	b.n	804e1ec <HAL_UART_IRQHandler+0x460>
      return;
 804e1e6:	bf00      	nop
 804e1e8:	e000      	b.n	804e1ec <HAL_UART_IRQHandler+0x460>
    return;
 804e1ea:	bf00      	nop
  }
}
 804e1ec:	3720      	adds	r7, #32
 804e1ee:	46bd      	mov	sp, r7
 804e1f0:	bd80      	pop	{r7, pc}
 804e1f2:	bf00      	nop

0804e1f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 804e1f4:	b480      	push	{r7}
 804e1f6:	b083      	sub	sp, #12
 804e1f8:	af00      	add	r7, sp, #0
 804e1fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 804e1fc:	bf00      	nop
 804e1fe:	370c      	adds	r7, #12
 804e200:	46bd      	mov	sp, r7
 804e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e206:	4770      	bx	lr

0804e208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 804e208:	b480      	push	{r7}
 804e20a:	b083      	sub	sp, #12
 804e20c:	af00      	add	r7, sp, #0
 804e20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 804e210:	bf00      	nop
 804e212:	370c      	adds	r7, #12
 804e214:	46bd      	mov	sp, r7
 804e216:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e21a:	4770      	bx	lr

0804e21c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 804e21c:	b480      	push	{r7}
 804e21e:	b083      	sub	sp, #12
 804e220:	af00      	add	r7, sp, #0
 804e222:	6078      	str	r0, [r7, #4]
 804e224:	460b      	mov	r3, r1
 804e226:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 804e228:	bf00      	nop
 804e22a:	370c      	adds	r7, #12
 804e22c:	46bd      	mov	sp, r7
 804e22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e232:	4770      	bx	lr

0804e234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 804e234:	b5b0      	push	{r4, r5, r7, lr}
 804e236:	b088      	sub	sp, #32
 804e238:	af00      	add	r7, sp, #0
 804e23a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 804e23c:	2300      	movs	r3, #0
 804e23e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 804e240:	687b      	ldr	r3, [r7, #4]
 804e242:	689a      	ldr	r2, [r3, #8]
 804e244:	687b      	ldr	r3, [r7, #4]
 804e246:	691b      	ldr	r3, [r3, #16]
 804e248:	431a      	orrs	r2, r3
 804e24a:	687b      	ldr	r3, [r7, #4]
 804e24c:	695b      	ldr	r3, [r3, #20]
 804e24e:	431a      	orrs	r2, r3
 804e250:	687b      	ldr	r3, [r7, #4]
 804e252:	69db      	ldr	r3, [r3, #28]
 804e254:	4313      	orrs	r3, r2
 804e256:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 804e258:	687b      	ldr	r3, [r7, #4]
 804e25a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804e25c:	69fa      	ldr	r2, [r7, #28]
 804e25e:	4313      	orrs	r3, r2
 804e260:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 804e262:	687b      	ldr	r3, [r7, #4]
 804e264:	681b      	ldr	r3, [r3, #0]
 804e266:	681a      	ldr	r2, [r3, #0]
 804e268:	4bb1      	ldr	r3, [pc, #708]	; (804e530 <UART_SetConfig+0x2fc>)
 804e26a:	4013      	ands	r3, r2
 804e26c:	687a      	ldr	r2, [r7, #4]
 804e26e:	6812      	ldr	r2, [r2, #0]
 804e270:	69f9      	ldr	r1, [r7, #28]
 804e272:	430b      	orrs	r3, r1
 804e274:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 804e276:	687b      	ldr	r3, [r7, #4]
 804e278:	681b      	ldr	r3, [r3, #0]
 804e27a:	685b      	ldr	r3, [r3, #4]
 804e27c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 804e280:	687b      	ldr	r3, [r7, #4]
 804e282:	68da      	ldr	r2, [r3, #12]
 804e284:	687b      	ldr	r3, [r7, #4]
 804e286:	681b      	ldr	r3, [r3, #0]
 804e288:	430a      	orrs	r2, r1
 804e28a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 804e28c:	687b      	ldr	r3, [r7, #4]
 804e28e:	699b      	ldr	r3, [r3, #24]
 804e290:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 804e292:	687b      	ldr	r3, [r7, #4]
 804e294:	681b      	ldr	r3, [r3, #0]
 804e296:	4aa7      	ldr	r2, [pc, #668]	; (804e534 <UART_SetConfig+0x300>)
 804e298:	4293      	cmp	r3, r2
 804e29a:	d004      	beq.n	804e2a6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 804e29c:	687b      	ldr	r3, [r7, #4]
 804e29e:	6a1b      	ldr	r3, [r3, #32]
 804e2a0:	69fa      	ldr	r2, [r7, #28]
 804e2a2:	4313      	orrs	r3, r2
 804e2a4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 804e2a6:	687b      	ldr	r3, [r7, #4]
 804e2a8:	681b      	ldr	r3, [r3, #0]
 804e2aa:	689b      	ldr	r3, [r3, #8]
 804e2ac:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 804e2b0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 804e2b4:	687a      	ldr	r2, [r7, #4]
 804e2b6:	6812      	ldr	r2, [r2, #0]
 804e2b8:	69f9      	ldr	r1, [r7, #28]
 804e2ba:	430b      	orrs	r3, r1
 804e2bc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 804e2be:	687b      	ldr	r3, [r7, #4]
 804e2c0:	681b      	ldr	r3, [r3, #0]
 804e2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804e2c4:	f023 010f 	bic.w	r1, r3, #15
 804e2c8:	687b      	ldr	r3, [r7, #4]
 804e2ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804e2cc:	687b      	ldr	r3, [r7, #4]
 804e2ce:	681b      	ldr	r3, [r3, #0]
 804e2d0:	430a      	orrs	r2, r1
 804e2d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 804e2d4:	687b      	ldr	r3, [r7, #4]
 804e2d6:	681b      	ldr	r3, [r3, #0]
 804e2d8:	4a97      	ldr	r2, [pc, #604]	; (804e538 <UART_SetConfig+0x304>)
 804e2da:	4293      	cmp	r3, r2
 804e2dc:	d121      	bne.n	804e322 <UART_SetConfig+0xee>
 804e2de:	4b97      	ldr	r3, [pc, #604]	; (804e53c <UART_SetConfig+0x308>)
 804e2e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804e2e4:	f003 0303 	and.w	r3, r3, #3
 804e2e8:	2b03      	cmp	r3, #3
 804e2ea:	d817      	bhi.n	804e31c <UART_SetConfig+0xe8>
 804e2ec:	a201      	add	r2, pc, #4	; (adr r2, 804e2f4 <UART_SetConfig+0xc0>)
 804e2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804e2f2:	bf00      	nop
 804e2f4:	0804e305 	.word	0x0804e305
 804e2f8:	0804e311 	.word	0x0804e311
 804e2fc:	0804e30b 	.word	0x0804e30b
 804e300:	0804e317 	.word	0x0804e317
 804e304:	2301      	movs	r3, #1
 804e306:	76fb      	strb	r3, [r7, #27]
 804e308:	e0e7      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e30a:	2302      	movs	r3, #2
 804e30c:	76fb      	strb	r3, [r7, #27]
 804e30e:	e0e4      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e310:	2304      	movs	r3, #4
 804e312:	76fb      	strb	r3, [r7, #27]
 804e314:	e0e1      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e316:	2308      	movs	r3, #8
 804e318:	76fb      	strb	r3, [r7, #27]
 804e31a:	e0de      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e31c:	2310      	movs	r3, #16
 804e31e:	76fb      	strb	r3, [r7, #27]
 804e320:	e0db      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e322:	687b      	ldr	r3, [r7, #4]
 804e324:	681b      	ldr	r3, [r3, #0]
 804e326:	4a86      	ldr	r2, [pc, #536]	; (804e540 <UART_SetConfig+0x30c>)
 804e328:	4293      	cmp	r3, r2
 804e32a:	d132      	bne.n	804e392 <UART_SetConfig+0x15e>
 804e32c:	4b83      	ldr	r3, [pc, #524]	; (804e53c <UART_SetConfig+0x308>)
 804e32e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804e332:	f003 030c 	and.w	r3, r3, #12
 804e336:	2b0c      	cmp	r3, #12
 804e338:	d828      	bhi.n	804e38c <UART_SetConfig+0x158>
 804e33a:	a201      	add	r2, pc, #4	; (adr r2, 804e340 <UART_SetConfig+0x10c>)
 804e33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804e340:	0804e375 	.word	0x0804e375
 804e344:	0804e38d 	.word	0x0804e38d
 804e348:	0804e38d 	.word	0x0804e38d
 804e34c:	0804e38d 	.word	0x0804e38d
 804e350:	0804e381 	.word	0x0804e381
 804e354:	0804e38d 	.word	0x0804e38d
 804e358:	0804e38d 	.word	0x0804e38d
 804e35c:	0804e38d 	.word	0x0804e38d
 804e360:	0804e37b 	.word	0x0804e37b
 804e364:	0804e38d 	.word	0x0804e38d
 804e368:	0804e38d 	.word	0x0804e38d
 804e36c:	0804e38d 	.word	0x0804e38d
 804e370:	0804e387 	.word	0x0804e387
 804e374:	2300      	movs	r3, #0
 804e376:	76fb      	strb	r3, [r7, #27]
 804e378:	e0af      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e37a:	2302      	movs	r3, #2
 804e37c:	76fb      	strb	r3, [r7, #27]
 804e37e:	e0ac      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e380:	2304      	movs	r3, #4
 804e382:	76fb      	strb	r3, [r7, #27]
 804e384:	e0a9      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e386:	2308      	movs	r3, #8
 804e388:	76fb      	strb	r3, [r7, #27]
 804e38a:	e0a6      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e38c:	2310      	movs	r3, #16
 804e38e:	76fb      	strb	r3, [r7, #27]
 804e390:	e0a3      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e392:	687b      	ldr	r3, [r7, #4]
 804e394:	681b      	ldr	r3, [r3, #0]
 804e396:	4a6b      	ldr	r2, [pc, #428]	; (804e544 <UART_SetConfig+0x310>)
 804e398:	4293      	cmp	r3, r2
 804e39a:	d120      	bne.n	804e3de <UART_SetConfig+0x1aa>
 804e39c:	4b67      	ldr	r3, [pc, #412]	; (804e53c <UART_SetConfig+0x308>)
 804e39e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804e3a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 804e3a6:	2b30      	cmp	r3, #48	; 0x30
 804e3a8:	d013      	beq.n	804e3d2 <UART_SetConfig+0x19e>
 804e3aa:	2b30      	cmp	r3, #48	; 0x30
 804e3ac:	d814      	bhi.n	804e3d8 <UART_SetConfig+0x1a4>
 804e3ae:	2b20      	cmp	r3, #32
 804e3b0:	d009      	beq.n	804e3c6 <UART_SetConfig+0x192>
 804e3b2:	2b20      	cmp	r3, #32
 804e3b4:	d810      	bhi.n	804e3d8 <UART_SetConfig+0x1a4>
 804e3b6:	2b00      	cmp	r3, #0
 804e3b8:	d002      	beq.n	804e3c0 <UART_SetConfig+0x18c>
 804e3ba:	2b10      	cmp	r3, #16
 804e3bc:	d006      	beq.n	804e3cc <UART_SetConfig+0x198>
 804e3be:	e00b      	b.n	804e3d8 <UART_SetConfig+0x1a4>
 804e3c0:	2300      	movs	r3, #0
 804e3c2:	76fb      	strb	r3, [r7, #27]
 804e3c4:	e089      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e3c6:	2302      	movs	r3, #2
 804e3c8:	76fb      	strb	r3, [r7, #27]
 804e3ca:	e086      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e3cc:	2304      	movs	r3, #4
 804e3ce:	76fb      	strb	r3, [r7, #27]
 804e3d0:	e083      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e3d2:	2308      	movs	r3, #8
 804e3d4:	76fb      	strb	r3, [r7, #27]
 804e3d6:	e080      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e3d8:	2310      	movs	r3, #16
 804e3da:	76fb      	strb	r3, [r7, #27]
 804e3dc:	e07d      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e3de:	687b      	ldr	r3, [r7, #4]
 804e3e0:	681b      	ldr	r3, [r3, #0]
 804e3e2:	4a59      	ldr	r2, [pc, #356]	; (804e548 <UART_SetConfig+0x314>)
 804e3e4:	4293      	cmp	r3, r2
 804e3e6:	d120      	bne.n	804e42a <UART_SetConfig+0x1f6>
 804e3e8:	4b54      	ldr	r3, [pc, #336]	; (804e53c <UART_SetConfig+0x308>)
 804e3ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804e3ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 804e3f2:	2bc0      	cmp	r3, #192	; 0xc0
 804e3f4:	d013      	beq.n	804e41e <UART_SetConfig+0x1ea>
 804e3f6:	2bc0      	cmp	r3, #192	; 0xc0
 804e3f8:	d814      	bhi.n	804e424 <UART_SetConfig+0x1f0>
 804e3fa:	2b80      	cmp	r3, #128	; 0x80
 804e3fc:	d009      	beq.n	804e412 <UART_SetConfig+0x1de>
 804e3fe:	2b80      	cmp	r3, #128	; 0x80
 804e400:	d810      	bhi.n	804e424 <UART_SetConfig+0x1f0>
 804e402:	2b00      	cmp	r3, #0
 804e404:	d002      	beq.n	804e40c <UART_SetConfig+0x1d8>
 804e406:	2b40      	cmp	r3, #64	; 0x40
 804e408:	d006      	beq.n	804e418 <UART_SetConfig+0x1e4>
 804e40a:	e00b      	b.n	804e424 <UART_SetConfig+0x1f0>
 804e40c:	2300      	movs	r3, #0
 804e40e:	76fb      	strb	r3, [r7, #27]
 804e410:	e063      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e412:	2302      	movs	r3, #2
 804e414:	76fb      	strb	r3, [r7, #27]
 804e416:	e060      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e418:	2304      	movs	r3, #4
 804e41a:	76fb      	strb	r3, [r7, #27]
 804e41c:	e05d      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e41e:	2308      	movs	r3, #8
 804e420:	76fb      	strb	r3, [r7, #27]
 804e422:	e05a      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e424:	2310      	movs	r3, #16
 804e426:	76fb      	strb	r3, [r7, #27]
 804e428:	e057      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e42a:	687b      	ldr	r3, [r7, #4]
 804e42c:	681b      	ldr	r3, [r3, #0]
 804e42e:	4a47      	ldr	r2, [pc, #284]	; (804e54c <UART_SetConfig+0x318>)
 804e430:	4293      	cmp	r3, r2
 804e432:	d125      	bne.n	804e480 <UART_SetConfig+0x24c>
 804e434:	4b41      	ldr	r3, [pc, #260]	; (804e53c <UART_SetConfig+0x308>)
 804e436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804e43a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804e43e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804e442:	d017      	beq.n	804e474 <UART_SetConfig+0x240>
 804e444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804e448:	d817      	bhi.n	804e47a <UART_SetConfig+0x246>
 804e44a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804e44e:	d00b      	beq.n	804e468 <UART_SetConfig+0x234>
 804e450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804e454:	d811      	bhi.n	804e47a <UART_SetConfig+0x246>
 804e456:	2b00      	cmp	r3, #0
 804e458:	d003      	beq.n	804e462 <UART_SetConfig+0x22e>
 804e45a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804e45e:	d006      	beq.n	804e46e <UART_SetConfig+0x23a>
 804e460:	e00b      	b.n	804e47a <UART_SetConfig+0x246>
 804e462:	2300      	movs	r3, #0
 804e464:	76fb      	strb	r3, [r7, #27]
 804e466:	e038      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e468:	2302      	movs	r3, #2
 804e46a:	76fb      	strb	r3, [r7, #27]
 804e46c:	e035      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e46e:	2304      	movs	r3, #4
 804e470:	76fb      	strb	r3, [r7, #27]
 804e472:	e032      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e474:	2308      	movs	r3, #8
 804e476:	76fb      	strb	r3, [r7, #27]
 804e478:	e02f      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e47a:	2310      	movs	r3, #16
 804e47c:	76fb      	strb	r3, [r7, #27]
 804e47e:	e02c      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e480:	687b      	ldr	r3, [r7, #4]
 804e482:	681b      	ldr	r3, [r3, #0]
 804e484:	4a2b      	ldr	r2, [pc, #172]	; (804e534 <UART_SetConfig+0x300>)
 804e486:	4293      	cmp	r3, r2
 804e488:	d125      	bne.n	804e4d6 <UART_SetConfig+0x2a2>
 804e48a:	4b2c      	ldr	r3, [pc, #176]	; (804e53c <UART_SetConfig+0x308>)
 804e48c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804e490:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 804e494:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 804e498:	d017      	beq.n	804e4ca <UART_SetConfig+0x296>
 804e49a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 804e49e:	d817      	bhi.n	804e4d0 <UART_SetConfig+0x29c>
 804e4a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804e4a4:	d00b      	beq.n	804e4be <UART_SetConfig+0x28a>
 804e4a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804e4aa:	d811      	bhi.n	804e4d0 <UART_SetConfig+0x29c>
 804e4ac:	2b00      	cmp	r3, #0
 804e4ae:	d003      	beq.n	804e4b8 <UART_SetConfig+0x284>
 804e4b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804e4b4:	d006      	beq.n	804e4c4 <UART_SetConfig+0x290>
 804e4b6:	e00b      	b.n	804e4d0 <UART_SetConfig+0x29c>
 804e4b8:	2300      	movs	r3, #0
 804e4ba:	76fb      	strb	r3, [r7, #27]
 804e4bc:	e00d      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e4be:	2302      	movs	r3, #2
 804e4c0:	76fb      	strb	r3, [r7, #27]
 804e4c2:	e00a      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e4c4:	2304      	movs	r3, #4
 804e4c6:	76fb      	strb	r3, [r7, #27]
 804e4c8:	e007      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e4ca:	2308      	movs	r3, #8
 804e4cc:	76fb      	strb	r3, [r7, #27]
 804e4ce:	e004      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e4d0:	2310      	movs	r3, #16
 804e4d2:	76fb      	strb	r3, [r7, #27]
 804e4d4:	e001      	b.n	804e4da <UART_SetConfig+0x2a6>
 804e4d6:	2310      	movs	r3, #16
 804e4d8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 804e4da:	687b      	ldr	r3, [r7, #4]
 804e4dc:	681b      	ldr	r3, [r3, #0]
 804e4de:	4a15      	ldr	r2, [pc, #84]	; (804e534 <UART_SetConfig+0x300>)
 804e4e0:	4293      	cmp	r3, r2
 804e4e2:	f040 80a3 	bne.w	804e62c <UART_SetConfig+0x3f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 804e4e6:	7efb      	ldrb	r3, [r7, #27]
 804e4e8:	2b08      	cmp	r3, #8
 804e4ea:	d83b      	bhi.n	804e564 <UART_SetConfig+0x330>
 804e4ec:	a201      	add	r2, pc, #4	; (adr r2, 804e4f4 <UART_SetConfig+0x2c0>)
 804e4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804e4f2:	bf00      	nop
 804e4f4:	0804e519 	.word	0x0804e519
 804e4f8:	0804e521 	.word	0x0804e521
 804e4fc:	0804e529 	.word	0x0804e529
 804e500:	0804e565 	.word	0x0804e565
 804e504:	0804e555 	.word	0x0804e555
 804e508:	0804e565 	.word	0x0804e565
 804e50c:	0804e565 	.word	0x0804e565
 804e510:	0804e565 	.word	0x0804e565
 804e514:	0804e55d 	.word	0x0804e55d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804e518:	f7fc fb64 	bl	804abe4 <HAL_RCC_GetPCLK1Freq>
 804e51c:	6178      	str	r0, [r7, #20]
        break;
 804e51e:	e026      	b.n	804e56e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804e520:	f7fc fb74 	bl	804ac0c <HAL_RCC_GetPCLK2Freq>
 804e524:	6178      	str	r0, [r7, #20]
        break;
 804e526:	e022      	b.n	804e56e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804e528:	4b09      	ldr	r3, [pc, #36]	; (804e550 <UART_SetConfig+0x31c>)
 804e52a:	617b      	str	r3, [r7, #20]
        break;
 804e52c:	e01f      	b.n	804e56e <UART_SetConfig+0x33a>
 804e52e:	bf00      	nop
 804e530:	cfff69f3 	.word	0xcfff69f3
 804e534:	40008000 	.word	0x40008000
 804e538:	40013800 	.word	0x40013800
 804e53c:	40021000 	.word	0x40021000
 804e540:	40004400 	.word	0x40004400
 804e544:	40004800 	.word	0x40004800
 804e548:	40004c00 	.word	0x40004c00
 804e54c:	40005000 	.word	0x40005000
 804e550:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804e554:	f7fc fa94 	bl	804aa80 <HAL_RCC_GetSysClockFreq>
 804e558:	6178      	str	r0, [r7, #20]
        break;
 804e55a:	e008      	b.n	804e56e <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804e55c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804e560:	617b      	str	r3, [r7, #20]
        break;
 804e562:	e004      	b.n	804e56e <UART_SetConfig+0x33a>
      default:
        pclk = 0U;
 804e564:	2300      	movs	r3, #0
 804e566:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 804e568:	2301      	movs	r3, #1
 804e56a:	76bb      	strb	r3, [r7, #26]
        break;
 804e56c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 804e56e:	697b      	ldr	r3, [r7, #20]
 804e570:	2b00      	cmp	r3, #0
 804e572:	f000 811b 	beq.w	804e7ac <UART_SetConfig+0x578>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 804e576:	687b      	ldr	r3, [r7, #4]
 804e578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804e57a:	4a96      	ldr	r2, [pc, #600]	; (804e7d4 <UART_SetConfig+0x5a0>)
 804e57c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804e580:	461a      	mov	r2, r3
 804e582:	697b      	ldr	r3, [r7, #20]
 804e584:	fbb3 f3f2 	udiv	r3, r3, r2
 804e588:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 804e58a:	687b      	ldr	r3, [r7, #4]
 804e58c:	685a      	ldr	r2, [r3, #4]
 804e58e:	4613      	mov	r3, r2
 804e590:	005b      	lsls	r3, r3, #1
 804e592:	4413      	add	r3, r2
 804e594:	68ba      	ldr	r2, [r7, #8]
 804e596:	429a      	cmp	r2, r3
 804e598:	d305      	bcc.n	804e5a6 <UART_SetConfig+0x372>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 804e59a:	687b      	ldr	r3, [r7, #4]
 804e59c:	685b      	ldr	r3, [r3, #4]
 804e59e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 804e5a0:	68ba      	ldr	r2, [r7, #8]
 804e5a2:	429a      	cmp	r2, r3
 804e5a4:	d902      	bls.n	804e5ac <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 804e5a6:	2301      	movs	r3, #1
 804e5a8:	76bb      	strb	r3, [r7, #26]
 804e5aa:	e0ff      	b.n	804e7ac <UART_SetConfig+0x578>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804e5ac:	697b      	ldr	r3, [r7, #20]
 804e5ae:	4618      	mov	r0, r3
 804e5b0:	f04f 0100 	mov.w	r1, #0
 804e5b4:	687b      	ldr	r3, [r7, #4]
 804e5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804e5b8:	4a86      	ldr	r2, [pc, #536]	; (804e7d4 <UART_SetConfig+0x5a0>)
 804e5ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804e5be:	b29a      	uxth	r2, r3
 804e5c0:	f04f 0300 	mov.w	r3, #0
 804e5c4:	f7f1 fe38 	bl	8040238 <__aeabi_uldivmod>
 804e5c8:	4602      	mov	r2, r0
 804e5ca:	460b      	mov	r3, r1
 804e5cc:	4610      	mov	r0, r2
 804e5ce:	4619      	mov	r1, r3
 804e5d0:	f04f 0200 	mov.w	r2, #0
 804e5d4:	f04f 0300 	mov.w	r3, #0
 804e5d8:	020b      	lsls	r3, r1, #8
 804e5da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 804e5de:	0202      	lsls	r2, r0, #8
 804e5e0:	6879      	ldr	r1, [r7, #4]
 804e5e2:	6849      	ldr	r1, [r1, #4]
 804e5e4:	0849      	lsrs	r1, r1, #1
 804e5e6:	4608      	mov	r0, r1
 804e5e8:	f04f 0100 	mov.w	r1, #0
 804e5ec:	1814      	adds	r4, r2, r0
 804e5ee:	eb43 0501 	adc.w	r5, r3, r1
 804e5f2:	687b      	ldr	r3, [r7, #4]
 804e5f4:	685b      	ldr	r3, [r3, #4]
 804e5f6:	461a      	mov	r2, r3
 804e5f8:	f04f 0300 	mov.w	r3, #0
 804e5fc:	4620      	mov	r0, r4
 804e5fe:	4629      	mov	r1, r5
 804e600:	f7f1 fe1a 	bl	8040238 <__aeabi_uldivmod>
 804e604:	4602      	mov	r2, r0
 804e606:	460b      	mov	r3, r1
 804e608:	4613      	mov	r3, r2
 804e60a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 804e60c:	693b      	ldr	r3, [r7, #16]
 804e60e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804e612:	d308      	bcc.n	804e626 <UART_SetConfig+0x3f2>
 804e614:	693b      	ldr	r3, [r7, #16]
 804e616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804e61a:	d204      	bcs.n	804e626 <UART_SetConfig+0x3f2>
        {
          huart->Instance->BRR = usartdiv;
 804e61c:	687b      	ldr	r3, [r7, #4]
 804e61e:	681b      	ldr	r3, [r3, #0]
 804e620:	693a      	ldr	r2, [r7, #16]
 804e622:	60da      	str	r2, [r3, #12]
 804e624:	e0c2      	b.n	804e7ac <UART_SetConfig+0x578>
        }
        else
        {
          ret = HAL_ERROR;
 804e626:	2301      	movs	r3, #1
 804e628:	76bb      	strb	r3, [r7, #26]
 804e62a:	e0bf      	b.n	804e7ac <UART_SetConfig+0x578>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804e62c:	687b      	ldr	r3, [r7, #4]
 804e62e:	69db      	ldr	r3, [r3, #28]
 804e630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804e634:	d165      	bne.n	804e702 <UART_SetConfig+0x4ce>
  {
    switch (clocksource)
 804e636:	7efb      	ldrb	r3, [r7, #27]
 804e638:	2b08      	cmp	r3, #8
 804e63a:	d828      	bhi.n	804e68e <UART_SetConfig+0x45a>
 804e63c:	a201      	add	r2, pc, #4	; (adr r2, 804e644 <UART_SetConfig+0x410>)
 804e63e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804e642:	bf00      	nop
 804e644:	0804e669 	.word	0x0804e669
 804e648:	0804e671 	.word	0x0804e671
 804e64c:	0804e679 	.word	0x0804e679
 804e650:	0804e68f 	.word	0x0804e68f
 804e654:	0804e67f 	.word	0x0804e67f
 804e658:	0804e68f 	.word	0x0804e68f
 804e65c:	0804e68f 	.word	0x0804e68f
 804e660:	0804e68f 	.word	0x0804e68f
 804e664:	0804e687 	.word	0x0804e687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804e668:	f7fc fabc 	bl	804abe4 <HAL_RCC_GetPCLK1Freq>
 804e66c:	6178      	str	r0, [r7, #20]
        break;
 804e66e:	e013      	b.n	804e698 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804e670:	f7fc facc 	bl	804ac0c <HAL_RCC_GetPCLK2Freq>
 804e674:	6178      	str	r0, [r7, #20]
        break;
 804e676:	e00f      	b.n	804e698 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804e678:	4b57      	ldr	r3, [pc, #348]	; (804e7d8 <UART_SetConfig+0x5a4>)
 804e67a:	617b      	str	r3, [r7, #20]
        break;
 804e67c:	e00c      	b.n	804e698 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804e67e:	f7fc f9ff 	bl	804aa80 <HAL_RCC_GetSysClockFreq>
 804e682:	6178      	str	r0, [r7, #20]
        break;
 804e684:	e008      	b.n	804e698 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804e686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804e68a:	617b      	str	r3, [r7, #20]
        break;
 804e68c:	e004      	b.n	804e698 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 804e68e:	2300      	movs	r3, #0
 804e690:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 804e692:	2301      	movs	r3, #1
 804e694:	76bb      	strb	r3, [r7, #26]
        break;
 804e696:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 804e698:	697b      	ldr	r3, [r7, #20]
 804e69a:	2b00      	cmp	r3, #0
 804e69c:	f000 8086 	beq.w	804e7ac <UART_SetConfig+0x578>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804e6a0:	687b      	ldr	r3, [r7, #4]
 804e6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804e6a4:	4a4b      	ldr	r2, [pc, #300]	; (804e7d4 <UART_SetConfig+0x5a0>)
 804e6a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804e6aa:	461a      	mov	r2, r3
 804e6ac:	697b      	ldr	r3, [r7, #20]
 804e6ae:	fbb3 f3f2 	udiv	r3, r3, r2
 804e6b2:	005a      	lsls	r2, r3, #1
 804e6b4:	687b      	ldr	r3, [r7, #4]
 804e6b6:	685b      	ldr	r3, [r3, #4]
 804e6b8:	085b      	lsrs	r3, r3, #1
 804e6ba:	441a      	add	r2, r3
 804e6bc:	687b      	ldr	r3, [r7, #4]
 804e6be:	685b      	ldr	r3, [r3, #4]
 804e6c0:	fbb2 f3f3 	udiv	r3, r2, r3
 804e6c4:	b29b      	uxth	r3, r3
 804e6c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804e6c8:	693b      	ldr	r3, [r7, #16]
 804e6ca:	2b0f      	cmp	r3, #15
 804e6cc:	d916      	bls.n	804e6fc <UART_SetConfig+0x4c8>
 804e6ce:	693b      	ldr	r3, [r7, #16]
 804e6d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804e6d4:	d212      	bcs.n	804e6fc <UART_SetConfig+0x4c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 804e6d6:	693b      	ldr	r3, [r7, #16]
 804e6d8:	b29b      	uxth	r3, r3
 804e6da:	f023 030f 	bic.w	r3, r3, #15
 804e6de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 804e6e0:	693b      	ldr	r3, [r7, #16]
 804e6e2:	085b      	lsrs	r3, r3, #1
 804e6e4:	b29b      	uxth	r3, r3
 804e6e6:	f003 0307 	and.w	r3, r3, #7
 804e6ea:	b29a      	uxth	r2, r3
 804e6ec:	89fb      	ldrh	r3, [r7, #14]
 804e6ee:	4313      	orrs	r3, r2
 804e6f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 804e6f2:	687b      	ldr	r3, [r7, #4]
 804e6f4:	681b      	ldr	r3, [r3, #0]
 804e6f6:	89fa      	ldrh	r2, [r7, #14]
 804e6f8:	60da      	str	r2, [r3, #12]
 804e6fa:	e057      	b.n	804e7ac <UART_SetConfig+0x578>
      }
      else
      {
        ret = HAL_ERROR;
 804e6fc:	2301      	movs	r3, #1
 804e6fe:	76bb      	strb	r3, [r7, #26]
 804e700:	e054      	b.n	804e7ac <UART_SetConfig+0x578>
      }
    }
  }
  else
  {
    switch (clocksource)
 804e702:	7efb      	ldrb	r3, [r7, #27]
 804e704:	2b08      	cmp	r3, #8
 804e706:	d828      	bhi.n	804e75a <UART_SetConfig+0x526>
 804e708:	a201      	add	r2, pc, #4	; (adr r2, 804e710 <UART_SetConfig+0x4dc>)
 804e70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804e70e:	bf00      	nop
 804e710:	0804e735 	.word	0x0804e735
 804e714:	0804e73d 	.word	0x0804e73d
 804e718:	0804e745 	.word	0x0804e745
 804e71c:	0804e75b 	.word	0x0804e75b
 804e720:	0804e74b 	.word	0x0804e74b
 804e724:	0804e75b 	.word	0x0804e75b
 804e728:	0804e75b 	.word	0x0804e75b
 804e72c:	0804e75b 	.word	0x0804e75b
 804e730:	0804e753 	.word	0x0804e753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804e734:	f7fc fa56 	bl	804abe4 <HAL_RCC_GetPCLK1Freq>
 804e738:	6178      	str	r0, [r7, #20]
        break;
 804e73a:	e013      	b.n	804e764 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804e73c:	f7fc fa66 	bl	804ac0c <HAL_RCC_GetPCLK2Freq>
 804e740:	6178      	str	r0, [r7, #20]
        break;
 804e742:	e00f      	b.n	804e764 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804e744:	4b24      	ldr	r3, [pc, #144]	; (804e7d8 <UART_SetConfig+0x5a4>)
 804e746:	617b      	str	r3, [r7, #20]
        break;
 804e748:	e00c      	b.n	804e764 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804e74a:	f7fc f999 	bl	804aa80 <HAL_RCC_GetSysClockFreq>
 804e74e:	6178      	str	r0, [r7, #20]
        break;
 804e750:	e008      	b.n	804e764 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804e752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804e756:	617b      	str	r3, [r7, #20]
        break;
 804e758:	e004      	b.n	804e764 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 804e75a:	2300      	movs	r3, #0
 804e75c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 804e75e:	2301      	movs	r3, #1
 804e760:	76bb      	strb	r3, [r7, #26]
        break;
 804e762:	bf00      	nop
    }

    if (pclk != 0U)
 804e764:	697b      	ldr	r3, [r7, #20]
 804e766:	2b00      	cmp	r3, #0
 804e768:	d020      	beq.n	804e7ac <UART_SetConfig+0x578>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804e76a:	687b      	ldr	r3, [r7, #4]
 804e76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804e76e:	4a19      	ldr	r2, [pc, #100]	; (804e7d4 <UART_SetConfig+0x5a0>)
 804e770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804e774:	461a      	mov	r2, r3
 804e776:	697b      	ldr	r3, [r7, #20]
 804e778:	fbb3 f2f2 	udiv	r2, r3, r2
 804e77c:	687b      	ldr	r3, [r7, #4]
 804e77e:	685b      	ldr	r3, [r3, #4]
 804e780:	085b      	lsrs	r3, r3, #1
 804e782:	441a      	add	r2, r3
 804e784:	687b      	ldr	r3, [r7, #4]
 804e786:	685b      	ldr	r3, [r3, #4]
 804e788:	fbb2 f3f3 	udiv	r3, r2, r3
 804e78c:	b29b      	uxth	r3, r3
 804e78e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804e790:	693b      	ldr	r3, [r7, #16]
 804e792:	2b0f      	cmp	r3, #15
 804e794:	d908      	bls.n	804e7a8 <UART_SetConfig+0x574>
 804e796:	693b      	ldr	r3, [r7, #16]
 804e798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804e79c:	d204      	bcs.n	804e7a8 <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 804e79e:	687b      	ldr	r3, [r7, #4]
 804e7a0:	681b      	ldr	r3, [r3, #0]
 804e7a2:	693a      	ldr	r2, [r7, #16]
 804e7a4:	60da      	str	r2, [r3, #12]
 804e7a6:	e001      	b.n	804e7ac <UART_SetConfig+0x578>
      }
      else
      {
        ret = HAL_ERROR;
 804e7a8:	2301      	movs	r3, #1
 804e7aa:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 804e7ac:	687b      	ldr	r3, [r7, #4]
 804e7ae:	2201      	movs	r2, #1
 804e7b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 804e7b4:	687b      	ldr	r3, [r7, #4]
 804e7b6:	2201      	movs	r2, #1
 804e7b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 804e7bc:	687b      	ldr	r3, [r7, #4]
 804e7be:	2200      	movs	r2, #0
 804e7c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 804e7c2:	687b      	ldr	r3, [r7, #4]
 804e7c4:	2200      	movs	r2, #0
 804e7c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 804e7c8:	7ebb      	ldrb	r3, [r7, #26]
}
 804e7ca:	4618      	mov	r0, r3
 804e7cc:	3720      	adds	r7, #32
 804e7ce:	46bd      	mov	sp, r7
 804e7d0:	bdb0      	pop	{r4, r5, r7, pc}
 804e7d2:	bf00      	nop
 804e7d4:	08050160 	.word	0x08050160
 804e7d8:	00f42400 	.word	0x00f42400

0804e7dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 804e7dc:	b480      	push	{r7}
 804e7de:	b083      	sub	sp, #12
 804e7e0:	af00      	add	r7, sp, #0
 804e7e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 804e7e4:	687b      	ldr	r3, [r7, #4]
 804e7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e7e8:	f003 0301 	and.w	r3, r3, #1
 804e7ec:	2b00      	cmp	r3, #0
 804e7ee:	d00a      	beq.n	804e806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 804e7f0:	687b      	ldr	r3, [r7, #4]
 804e7f2:	681b      	ldr	r3, [r3, #0]
 804e7f4:	685b      	ldr	r3, [r3, #4]
 804e7f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 804e7fa:	687b      	ldr	r3, [r7, #4]
 804e7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804e7fe:	687b      	ldr	r3, [r7, #4]
 804e800:	681b      	ldr	r3, [r3, #0]
 804e802:	430a      	orrs	r2, r1
 804e804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 804e806:	687b      	ldr	r3, [r7, #4]
 804e808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e80a:	f003 0302 	and.w	r3, r3, #2
 804e80e:	2b00      	cmp	r3, #0
 804e810:	d00a      	beq.n	804e828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 804e812:	687b      	ldr	r3, [r7, #4]
 804e814:	681b      	ldr	r3, [r3, #0]
 804e816:	685b      	ldr	r3, [r3, #4]
 804e818:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 804e81c:	687b      	ldr	r3, [r7, #4]
 804e81e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804e820:	687b      	ldr	r3, [r7, #4]
 804e822:	681b      	ldr	r3, [r3, #0]
 804e824:	430a      	orrs	r2, r1
 804e826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 804e828:	687b      	ldr	r3, [r7, #4]
 804e82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e82c:	f003 0304 	and.w	r3, r3, #4
 804e830:	2b00      	cmp	r3, #0
 804e832:	d00a      	beq.n	804e84a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 804e834:	687b      	ldr	r3, [r7, #4]
 804e836:	681b      	ldr	r3, [r3, #0]
 804e838:	685b      	ldr	r3, [r3, #4]
 804e83a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 804e83e:	687b      	ldr	r3, [r7, #4]
 804e840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804e842:	687b      	ldr	r3, [r7, #4]
 804e844:	681b      	ldr	r3, [r3, #0]
 804e846:	430a      	orrs	r2, r1
 804e848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 804e84a:	687b      	ldr	r3, [r7, #4]
 804e84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e84e:	f003 0308 	and.w	r3, r3, #8
 804e852:	2b00      	cmp	r3, #0
 804e854:	d00a      	beq.n	804e86c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 804e856:	687b      	ldr	r3, [r7, #4]
 804e858:	681b      	ldr	r3, [r3, #0]
 804e85a:	685b      	ldr	r3, [r3, #4]
 804e85c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 804e860:	687b      	ldr	r3, [r7, #4]
 804e862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 804e864:	687b      	ldr	r3, [r7, #4]
 804e866:	681b      	ldr	r3, [r3, #0]
 804e868:	430a      	orrs	r2, r1
 804e86a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 804e86c:	687b      	ldr	r3, [r7, #4]
 804e86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e870:	f003 0310 	and.w	r3, r3, #16
 804e874:	2b00      	cmp	r3, #0
 804e876:	d00a      	beq.n	804e88e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 804e878:	687b      	ldr	r3, [r7, #4]
 804e87a:	681b      	ldr	r3, [r3, #0]
 804e87c:	689b      	ldr	r3, [r3, #8]
 804e87e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 804e882:	687b      	ldr	r3, [r7, #4]
 804e884:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804e886:	687b      	ldr	r3, [r7, #4]
 804e888:	681b      	ldr	r3, [r3, #0]
 804e88a:	430a      	orrs	r2, r1
 804e88c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 804e88e:	687b      	ldr	r3, [r7, #4]
 804e890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e892:	f003 0320 	and.w	r3, r3, #32
 804e896:	2b00      	cmp	r3, #0
 804e898:	d00a      	beq.n	804e8b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 804e89a:	687b      	ldr	r3, [r7, #4]
 804e89c:	681b      	ldr	r3, [r3, #0]
 804e89e:	689b      	ldr	r3, [r3, #8]
 804e8a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 804e8a4:	687b      	ldr	r3, [r7, #4]
 804e8a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804e8a8:	687b      	ldr	r3, [r7, #4]
 804e8aa:	681b      	ldr	r3, [r3, #0]
 804e8ac:	430a      	orrs	r2, r1
 804e8ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 804e8b0:	687b      	ldr	r3, [r7, #4]
 804e8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804e8b8:	2b00      	cmp	r3, #0
 804e8ba:	d01a      	beq.n	804e8f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 804e8bc:	687b      	ldr	r3, [r7, #4]
 804e8be:	681b      	ldr	r3, [r3, #0]
 804e8c0:	685b      	ldr	r3, [r3, #4]
 804e8c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 804e8c6:	687b      	ldr	r3, [r7, #4]
 804e8c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804e8ca:	687b      	ldr	r3, [r7, #4]
 804e8cc:	681b      	ldr	r3, [r3, #0]
 804e8ce:	430a      	orrs	r2, r1
 804e8d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 804e8d2:	687b      	ldr	r3, [r7, #4]
 804e8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804e8d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804e8da:	d10a      	bne.n	804e8f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 804e8dc:	687b      	ldr	r3, [r7, #4]
 804e8de:	681b      	ldr	r3, [r3, #0]
 804e8e0:	685b      	ldr	r3, [r3, #4]
 804e8e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 804e8e6:	687b      	ldr	r3, [r7, #4]
 804e8e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 804e8ea:	687b      	ldr	r3, [r7, #4]
 804e8ec:	681b      	ldr	r3, [r3, #0]
 804e8ee:	430a      	orrs	r2, r1
 804e8f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804e8f2:	687b      	ldr	r3, [r7, #4]
 804e8f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804e8f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804e8fa:	2b00      	cmp	r3, #0
 804e8fc:	d00a      	beq.n	804e914 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 804e8fe:	687b      	ldr	r3, [r7, #4]
 804e900:	681b      	ldr	r3, [r3, #0]
 804e902:	685b      	ldr	r3, [r3, #4]
 804e904:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 804e908:	687b      	ldr	r3, [r7, #4]
 804e90a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 804e90c:	687b      	ldr	r3, [r7, #4]
 804e90e:	681b      	ldr	r3, [r3, #0]
 804e910:	430a      	orrs	r2, r1
 804e912:	605a      	str	r2, [r3, #4]
  }
}
 804e914:	bf00      	nop
 804e916:	370c      	adds	r7, #12
 804e918:	46bd      	mov	sp, r7
 804e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804e91e:	4770      	bx	lr

0804e920 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 804e920:	b580      	push	{r7, lr}
 804e922:	b086      	sub	sp, #24
 804e924:	af02      	add	r7, sp, #8
 804e926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 804e928:	687b      	ldr	r3, [r7, #4]
 804e92a:	2200      	movs	r2, #0
 804e92c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 804e930:	f7f7 feea 	bl	8046708 <HAL_GetTick>
 804e934:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 804e936:	687b      	ldr	r3, [r7, #4]
 804e938:	681b      	ldr	r3, [r3, #0]
 804e93a:	681b      	ldr	r3, [r3, #0]
 804e93c:	f003 0308 	and.w	r3, r3, #8
 804e940:	2b08      	cmp	r3, #8
 804e942:	d10e      	bne.n	804e962 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 804e944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 804e948:	9300      	str	r3, [sp, #0]
 804e94a:	68fb      	ldr	r3, [r7, #12]
 804e94c:	2200      	movs	r2, #0
 804e94e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 804e952:	6878      	ldr	r0, [r7, #4]
 804e954:	f000 f82f 	bl	804e9b6 <UART_WaitOnFlagUntilTimeout>
 804e958:	4603      	mov	r3, r0
 804e95a:	2b00      	cmp	r3, #0
 804e95c:	d001      	beq.n	804e962 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 804e95e:	2303      	movs	r3, #3
 804e960:	e025      	b.n	804e9ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 804e962:	687b      	ldr	r3, [r7, #4]
 804e964:	681b      	ldr	r3, [r3, #0]
 804e966:	681b      	ldr	r3, [r3, #0]
 804e968:	f003 0304 	and.w	r3, r3, #4
 804e96c:	2b04      	cmp	r3, #4
 804e96e:	d10e      	bne.n	804e98e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 804e970:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 804e974:	9300      	str	r3, [sp, #0]
 804e976:	68fb      	ldr	r3, [r7, #12]
 804e978:	2200      	movs	r2, #0
 804e97a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 804e97e:	6878      	ldr	r0, [r7, #4]
 804e980:	f000 f819 	bl	804e9b6 <UART_WaitOnFlagUntilTimeout>
 804e984:	4603      	mov	r3, r0
 804e986:	2b00      	cmp	r3, #0
 804e988:	d001      	beq.n	804e98e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 804e98a:	2303      	movs	r3, #3
 804e98c:	e00f      	b.n	804e9ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 804e98e:	687b      	ldr	r3, [r7, #4]
 804e990:	2220      	movs	r2, #32
 804e992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 804e996:	687b      	ldr	r3, [r7, #4]
 804e998:	2220      	movs	r2, #32
 804e99a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804e99e:	687b      	ldr	r3, [r7, #4]
 804e9a0:	2200      	movs	r2, #0
 804e9a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 804e9a4:	687b      	ldr	r3, [r7, #4]
 804e9a6:	2200      	movs	r2, #0
 804e9a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804e9ac:	2300      	movs	r3, #0
}
 804e9ae:	4618      	mov	r0, r3
 804e9b0:	3710      	adds	r7, #16
 804e9b2:	46bd      	mov	sp, r7
 804e9b4:	bd80      	pop	{r7, pc}

0804e9b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 804e9b6:	b580      	push	{r7, lr}
 804e9b8:	b084      	sub	sp, #16
 804e9ba:	af00      	add	r7, sp, #0
 804e9bc:	60f8      	str	r0, [r7, #12]
 804e9be:	60b9      	str	r1, [r7, #8]
 804e9c0:	603b      	str	r3, [r7, #0]
 804e9c2:	4613      	mov	r3, r2
 804e9c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804e9c6:	e062      	b.n	804ea8e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804e9c8:	69bb      	ldr	r3, [r7, #24]
 804e9ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 804e9ce:	d05e      	beq.n	804ea8e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804e9d0:	f7f7 fe9a 	bl	8046708 <HAL_GetTick>
 804e9d4:	4602      	mov	r2, r0
 804e9d6:	683b      	ldr	r3, [r7, #0]
 804e9d8:	1ad3      	subs	r3, r2, r3
 804e9da:	69ba      	ldr	r2, [r7, #24]
 804e9dc:	429a      	cmp	r2, r3
 804e9de:	d302      	bcc.n	804e9e6 <UART_WaitOnFlagUntilTimeout+0x30>
 804e9e0:	69bb      	ldr	r3, [r7, #24]
 804e9e2:	2b00      	cmp	r3, #0
 804e9e4:	d11d      	bne.n	804ea22 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 804e9e6:	68fb      	ldr	r3, [r7, #12]
 804e9e8:	681b      	ldr	r3, [r3, #0]
 804e9ea:	681a      	ldr	r2, [r3, #0]
 804e9ec:	68fb      	ldr	r3, [r7, #12]
 804e9ee:	681b      	ldr	r3, [r3, #0]
 804e9f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 804e9f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804e9f6:	68fb      	ldr	r3, [r7, #12]
 804e9f8:	681b      	ldr	r3, [r3, #0]
 804e9fa:	689a      	ldr	r2, [r3, #8]
 804e9fc:	68fb      	ldr	r3, [r7, #12]
 804e9fe:	681b      	ldr	r3, [r3, #0]
 804ea00:	f022 0201 	bic.w	r2, r2, #1
 804ea04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 804ea06:	68fb      	ldr	r3, [r7, #12]
 804ea08:	2220      	movs	r2, #32
 804ea0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 804ea0e:	68fb      	ldr	r3, [r7, #12]
 804ea10:	2220      	movs	r2, #32
 804ea12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 804ea16:	68fb      	ldr	r3, [r7, #12]
 804ea18:	2200      	movs	r2, #0
 804ea1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 804ea1e:	2303      	movs	r3, #3
 804ea20:	e045      	b.n	804eaae <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 804ea22:	68fb      	ldr	r3, [r7, #12]
 804ea24:	681b      	ldr	r3, [r3, #0]
 804ea26:	681b      	ldr	r3, [r3, #0]
 804ea28:	f003 0304 	and.w	r3, r3, #4
 804ea2c:	2b00      	cmp	r3, #0
 804ea2e:	d02e      	beq.n	804ea8e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 804ea30:	68fb      	ldr	r3, [r7, #12]
 804ea32:	681b      	ldr	r3, [r3, #0]
 804ea34:	69db      	ldr	r3, [r3, #28]
 804ea36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804ea3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804ea3e:	d126      	bne.n	804ea8e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 804ea40:	68fb      	ldr	r3, [r7, #12]
 804ea42:	681b      	ldr	r3, [r3, #0]
 804ea44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804ea48:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 804ea4a:	68fb      	ldr	r3, [r7, #12]
 804ea4c:	681b      	ldr	r3, [r3, #0]
 804ea4e:	681a      	ldr	r2, [r3, #0]
 804ea50:	68fb      	ldr	r3, [r7, #12]
 804ea52:	681b      	ldr	r3, [r3, #0]
 804ea54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 804ea58:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804ea5a:	68fb      	ldr	r3, [r7, #12]
 804ea5c:	681b      	ldr	r3, [r3, #0]
 804ea5e:	689a      	ldr	r2, [r3, #8]
 804ea60:	68fb      	ldr	r3, [r7, #12]
 804ea62:	681b      	ldr	r3, [r3, #0]
 804ea64:	f022 0201 	bic.w	r2, r2, #1
 804ea68:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 804ea6a:	68fb      	ldr	r3, [r7, #12]
 804ea6c:	2220      	movs	r2, #32
 804ea6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 804ea72:	68fb      	ldr	r3, [r7, #12]
 804ea74:	2220      	movs	r2, #32
 804ea76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 804ea7a:	68fb      	ldr	r3, [r7, #12]
 804ea7c:	2220      	movs	r2, #32
 804ea7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 804ea82:	68fb      	ldr	r3, [r7, #12]
 804ea84:	2200      	movs	r2, #0
 804ea86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 804ea8a:	2303      	movs	r3, #3
 804ea8c:	e00f      	b.n	804eaae <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 804ea8e:	68fb      	ldr	r3, [r7, #12]
 804ea90:	681b      	ldr	r3, [r3, #0]
 804ea92:	69da      	ldr	r2, [r3, #28]
 804ea94:	68bb      	ldr	r3, [r7, #8]
 804ea96:	4013      	ands	r3, r2
 804ea98:	68ba      	ldr	r2, [r7, #8]
 804ea9a:	429a      	cmp	r2, r3
 804ea9c:	bf0c      	ite	eq
 804ea9e:	2301      	moveq	r3, #1
 804eaa0:	2300      	movne	r3, #0
 804eaa2:	b2db      	uxtb	r3, r3
 804eaa4:	461a      	mov	r2, r3
 804eaa6:	79fb      	ldrb	r3, [r7, #7]
 804eaa8:	429a      	cmp	r2, r3
 804eaaa:	d08d      	beq.n	804e9c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 804eaac:	2300      	movs	r3, #0
}
 804eaae:	4618      	mov	r0, r3
 804eab0:	3710      	adds	r7, #16
 804eab2:	46bd      	mov	sp, r7
 804eab4:	bd80      	pop	{r7, pc}

0804eab6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 804eab6:	b480      	push	{r7}
 804eab8:	b083      	sub	sp, #12
 804eaba:	af00      	add	r7, sp, #0
 804eabc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 804eabe:	687b      	ldr	r3, [r7, #4]
 804eac0:	681b      	ldr	r3, [r3, #0]
 804eac2:	681a      	ldr	r2, [r3, #0]
 804eac4:	687b      	ldr	r3, [r7, #4]
 804eac6:	681b      	ldr	r3, [r3, #0]
 804eac8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 804eacc:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 804eace:	687b      	ldr	r3, [r7, #4]
 804ead0:	681b      	ldr	r3, [r3, #0]
 804ead2:	689b      	ldr	r3, [r3, #8]
 804ead4:	687a      	ldr	r2, [r7, #4]
 804ead6:	6812      	ldr	r2, [r2, #0]
 804ead8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804eadc:	f023 0301 	bic.w	r3, r3, #1
 804eae0:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804eae2:	687b      	ldr	r3, [r7, #4]
 804eae4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804eae6:	2b01      	cmp	r3, #1
 804eae8:	d107      	bne.n	804eafa <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 804eaea:	687b      	ldr	r3, [r7, #4]
 804eaec:	681b      	ldr	r3, [r3, #0]
 804eaee:	681a      	ldr	r2, [r3, #0]
 804eaf0:	687b      	ldr	r3, [r7, #4]
 804eaf2:	681b      	ldr	r3, [r3, #0]
 804eaf4:	f022 0210 	bic.w	r2, r2, #16
 804eaf8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 804eafa:	687b      	ldr	r3, [r7, #4]
 804eafc:	2220      	movs	r2, #32
 804eafe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 804eb02:	687b      	ldr	r3, [r7, #4]
 804eb04:	2200      	movs	r2, #0
 804eb06:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 804eb08:	687b      	ldr	r3, [r7, #4]
 804eb0a:	2200      	movs	r2, #0
 804eb0c:	671a      	str	r2, [r3, #112]	; 0x70
}
 804eb0e:	bf00      	nop
 804eb10:	370c      	adds	r7, #12
 804eb12:	46bd      	mov	sp, r7
 804eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 804eb18:	4770      	bx	lr

0804eb1a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 804eb1a:	b580      	push	{r7, lr}
 804eb1c:	b084      	sub	sp, #16
 804eb1e:	af00      	add	r7, sp, #0
 804eb20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 804eb22:	687b      	ldr	r3, [r7, #4]
 804eb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804eb26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 804eb28:	68fb      	ldr	r3, [r7, #12]
 804eb2a:	2200      	movs	r2, #0
 804eb2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 804eb30:	68fb      	ldr	r3, [r7, #12]
 804eb32:	2200      	movs	r2, #0
 804eb34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 804eb38:	68f8      	ldr	r0, [r7, #12]
 804eb3a:	f7ff fb65 	bl	804e208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804eb3e:	bf00      	nop
 804eb40:	3710      	adds	r7, #16
 804eb42:	46bd      	mov	sp, r7
 804eb44:	bd80      	pop	{r7, pc}

0804eb46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 804eb46:	b580      	push	{r7, lr}
 804eb48:	b082      	sub	sp, #8
 804eb4a:	af00      	add	r7, sp, #0
 804eb4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 804eb4e:	687b      	ldr	r3, [r7, #4]
 804eb50:	681b      	ldr	r3, [r3, #0]
 804eb52:	681a      	ldr	r2, [r3, #0]
 804eb54:	687b      	ldr	r3, [r7, #4]
 804eb56:	681b      	ldr	r3, [r3, #0]
 804eb58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804eb5c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 804eb5e:	687b      	ldr	r3, [r7, #4]
 804eb60:	2220      	movs	r2, #32
 804eb62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 804eb66:	687b      	ldr	r3, [r7, #4]
 804eb68:	2200      	movs	r2, #0
 804eb6a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 804eb6c:	6878      	ldr	r0, [r7, #4]
 804eb6e:	f7ff fb41 	bl	804e1f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 804eb72:	bf00      	nop
 804eb74:	3708      	adds	r7, #8
 804eb76:	46bd      	mov	sp, r7
 804eb78:	bd80      	pop	{r7, pc}

0804eb7a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 804eb7a:	b480      	push	{r7}
 804eb7c:	b083      	sub	sp, #12
 804eb7e:	af00      	add	r7, sp, #0
 804eb80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 804eb82:	bf00      	nop
 804eb84:	370c      	adds	r7, #12
 804eb86:	46bd      	mov	sp, r7
 804eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 804eb8c:	4770      	bx	lr

0804eb8e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 804eb8e:	b480      	push	{r7}
 804eb90:	b083      	sub	sp, #12
 804eb92:	af00      	add	r7, sp, #0
 804eb94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 804eb96:	bf00      	nop
 804eb98:	370c      	adds	r7, #12
 804eb9a:	46bd      	mov	sp, r7
 804eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 804eba0:	4770      	bx	lr

0804eba2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 804eba2:	b480      	push	{r7}
 804eba4:	b083      	sub	sp, #12
 804eba6:	af00      	add	r7, sp, #0
 804eba8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 804ebaa:	bf00      	nop
 804ebac:	370c      	adds	r7, #12
 804ebae:	46bd      	mov	sp, r7
 804ebb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ebb4:	4770      	bx	lr

0804ebb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 804ebb6:	b480      	push	{r7}
 804ebb8:	b085      	sub	sp, #20
 804ebba:	af00      	add	r7, sp, #0
 804ebbc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 804ebbe:	687b      	ldr	r3, [r7, #4]
 804ebc0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 804ebc4:	2b01      	cmp	r3, #1
 804ebc6:	d101      	bne.n	804ebcc <HAL_UARTEx_DisableFifoMode+0x16>
 804ebc8:	2302      	movs	r3, #2
 804ebca:	e027      	b.n	804ec1c <HAL_UARTEx_DisableFifoMode+0x66>
 804ebcc:	687b      	ldr	r3, [r7, #4]
 804ebce:	2201      	movs	r2, #1
 804ebd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 804ebd4:	687b      	ldr	r3, [r7, #4]
 804ebd6:	2224      	movs	r2, #36	; 0x24
 804ebd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804ebdc:	687b      	ldr	r3, [r7, #4]
 804ebde:	681b      	ldr	r3, [r3, #0]
 804ebe0:	681b      	ldr	r3, [r3, #0]
 804ebe2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804ebe4:	687b      	ldr	r3, [r7, #4]
 804ebe6:	681b      	ldr	r3, [r3, #0]
 804ebe8:	681a      	ldr	r2, [r3, #0]
 804ebea:	687b      	ldr	r3, [r7, #4]
 804ebec:	681b      	ldr	r3, [r3, #0]
 804ebee:	f022 0201 	bic.w	r2, r2, #1
 804ebf2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 804ebf4:	68fb      	ldr	r3, [r7, #12]
 804ebf6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 804ebfa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 804ebfc:	687b      	ldr	r3, [r7, #4]
 804ebfe:	2200      	movs	r2, #0
 804ec00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804ec02:	687b      	ldr	r3, [r7, #4]
 804ec04:	681b      	ldr	r3, [r3, #0]
 804ec06:	68fa      	ldr	r2, [r7, #12]
 804ec08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804ec0a:	687b      	ldr	r3, [r7, #4]
 804ec0c:	2220      	movs	r2, #32
 804ec0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 804ec12:	687b      	ldr	r3, [r7, #4]
 804ec14:	2200      	movs	r2, #0
 804ec16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804ec1a:	2300      	movs	r3, #0
}
 804ec1c:	4618      	mov	r0, r3
 804ec1e:	3714      	adds	r7, #20
 804ec20:	46bd      	mov	sp, r7
 804ec22:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ec26:	4770      	bx	lr

0804ec28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 804ec28:	b580      	push	{r7, lr}
 804ec2a:	b084      	sub	sp, #16
 804ec2c:	af00      	add	r7, sp, #0
 804ec2e:	6078      	str	r0, [r7, #4]
 804ec30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 804ec32:	687b      	ldr	r3, [r7, #4]
 804ec34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 804ec38:	2b01      	cmp	r3, #1
 804ec3a:	d101      	bne.n	804ec40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 804ec3c:	2302      	movs	r3, #2
 804ec3e:	e02d      	b.n	804ec9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 804ec40:	687b      	ldr	r3, [r7, #4]
 804ec42:	2201      	movs	r2, #1
 804ec44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 804ec48:	687b      	ldr	r3, [r7, #4]
 804ec4a:	2224      	movs	r2, #36	; 0x24
 804ec4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804ec50:	687b      	ldr	r3, [r7, #4]
 804ec52:	681b      	ldr	r3, [r3, #0]
 804ec54:	681b      	ldr	r3, [r3, #0]
 804ec56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804ec58:	687b      	ldr	r3, [r7, #4]
 804ec5a:	681b      	ldr	r3, [r3, #0]
 804ec5c:	681a      	ldr	r2, [r3, #0]
 804ec5e:	687b      	ldr	r3, [r7, #4]
 804ec60:	681b      	ldr	r3, [r3, #0]
 804ec62:	f022 0201 	bic.w	r2, r2, #1
 804ec66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 804ec68:	687b      	ldr	r3, [r7, #4]
 804ec6a:	681b      	ldr	r3, [r3, #0]
 804ec6c:	689b      	ldr	r3, [r3, #8]
 804ec6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 804ec72:	687b      	ldr	r3, [r7, #4]
 804ec74:	681b      	ldr	r3, [r3, #0]
 804ec76:	683a      	ldr	r2, [r7, #0]
 804ec78:	430a      	orrs	r2, r1
 804ec7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 804ec7c:	6878      	ldr	r0, [r7, #4]
 804ec7e:	f000 f84f 	bl	804ed20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804ec82:	687b      	ldr	r3, [r7, #4]
 804ec84:	681b      	ldr	r3, [r3, #0]
 804ec86:	68fa      	ldr	r2, [r7, #12]
 804ec88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804ec8a:	687b      	ldr	r3, [r7, #4]
 804ec8c:	2220      	movs	r2, #32
 804ec8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 804ec92:	687b      	ldr	r3, [r7, #4]
 804ec94:	2200      	movs	r2, #0
 804ec96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804ec9a:	2300      	movs	r3, #0
}
 804ec9c:	4618      	mov	r0, r3
 804ec9e:	3710      	adds	r7, #16
 804eca0:	46bd      	mov	sp, r7
 804eca2:	bd80      	pop	{r7, pc}

0804eca4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 804eca4:	b580      	push	{r7, lr}
 804eca6:	b084      	sub	sp, #16
 804eca8:	af00      	add	r7, sp, #0
 804ecaa:	6078      	str	r0, [r7, #4]
 804ecac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 804ecae:	687b      	ldr	r3, [r7, #4]
 804ecb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 804ecb4:	2b01      	cmp	r3, #1
 804ecb6:	d101      	bne.n	804ecbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 804ecb8:	2302      	movs	r3, #2
 804ecba:	e02d      	b.n	804ed18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 804ecbc:	687b      	ldr	r3, [r7, #4]
 804ecbe:	2201      	movs	r2, #1
 804ecc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 804ecc4:	687b      	ldr	r3, [r7, #4]
 804ecc6:	2224      	movs	r2, #36	; 0x24
 804ecc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 804eccc:	687b      	ldr	r3, [r7, #4]
 804ecce:	681b      	ldr	r3, [r3, #0]
 804ecd0:	681b      	ldr	r3, [r3, #0]
 804ecd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804ecd4:	687b      	ldr	r3, [r7, #4]
 804ecd6:	681b      	ldr	r3, [r3, #0]
 804ecd8:	681a      	ldr	r2, [r3, #0]
 804ecda:	687b      	ldr	r3, [r7, #4]
 804ecdc:	681b      	ldr	r3, [r3, #0]
 804ecde:	f022 0201 	bic.w	r2, r2, #1
 804ece2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 804ece4:	687b      	ldr	r3, [r7, #4]
 804ece6:	681b      	ldr	r3, [r3, #0]
 804ece8:	689b      	ldr	r3, [r3, #8]
 804ecea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 804ecee:	687b      	ldr	r3, [r7, #4]
 804ecf0:	681b      	ldr	r3, [r3, #0]
 804ecf2:	683a      	ldr	r2, [r7, #0]
 804ecf4:	430a      	orrs	r2, r1
 804ecf6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 804ecf8:	6878      	ldr	r0, [r7, #4]
 804ecfa:	f000 f811 	bl	804ed20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804ecfe:	687b      	ldr	r3, [r7, #4]
 804ed00:	681b      	ldr	r3, [r3, #0]
 804ed02:	68fa      	ldr	r2, [r7, #12]
 804ed04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804ed06:	687b      	ldr	r3, [r7, #4]
 804ed08:	2220      	movs	r2, #32
 804ed0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 804ed0e:	687b      	ldr	r3, [r7, #4]
 804ed10:	2200      	movs	r2, #0
 804ed12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 804ed16:	2300      	movs	r3, #0
}
 804ed18:	4618      	mov	r0, r3
 804ed1a:	3710      	adds	r7, #16
 804ed1c:	46bd      	mov	sp, r7
 804ed1e:	bd80      	pop	{r7, pc}

0804ed20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 804ed20:	b480      	push	{r7}
 804ed22:	b089      	sub	sp, #36	; 0x24
 804ed24:	af00      	add	r7, sp, #0
 804ed26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 804ed28:	4a2f      	ldr	r2, [pc, #188]	; (804ede8 <UARTEx_SetNbDataToProcess+0xc8>)
 804ed2a:	f107 0314 	add.w	r3, r7, #20
 804ed2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 804ed32:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 804ed36:	4a2d      	ldr	r2, [pc, #180]	; (804edec <UARTEx_SetNbDataToProcess+0xcc>)
 804ed38:	f107 030c 	add.w	r3, r7, #12
 804ed3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 804ed40:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 804ed44:	687b      	ldr	r3, [r7, #4]
 804ed46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804ed48:	2b00      	cmp	r3, #0
 804ed4a:	d108      	bne.n	804ed5e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 804ed4c:	687b      	ldr	r3, [r7, #4]
 804ed4e:	2201      	movs	r2, #1
 804ed50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 804ed54:	687b      	ldr	r3, [r7, #4]
 804ed56:	2201      	movs	r2, #1
 804ed58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 804ed5c:	e03d      	b.n	804edda <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 804ed5e:	2308      	movs	r3, #8
 804ed60:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 804ed62:	2308      	movs	r3, #8
 804ed64:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 804ed66:	687b      	ldr	r3, [r7, #4]
 804ed68:	681b      	ldr	r3, [r3, #0]
 804ed6a:	689b      	ldr	r3, [r3, #8]
 804ed6c:	0e5b      	lsrs	r3, r3, #25
 804ed6e:	b2db      	uxtb	r3, r3
 804ed70:	f003 0307 	and.w	r3, r3, #7
 804ed74:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 804ed76:	687b      	ldr	r3, [r7, #4]
 804ed78:	681b      	ldr	r3, [r3, #0]
 804ed7a:	689b      	ldr	r3, [r3, #8]
 804ed7c:	0f5b      	lsrs	r3, r3, #29
 804ed7e:	b2db      	uxtb	r3, r3
 804ed80:	f003 0307 	and.w	r3, r3, #7
 804ed84:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 804ed86:	7fbb      	ldrb	r3, [r7, #30]
 804ed88:	7f3a      	ldrb	r2, [r7, #28]
 804ed8a:	f107 0120 	add.w	r1, r7, #32
 804ed8e:	440a      	add	r2, r1
 804ed90:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 804ed94:	fb02 f303 	mul.w	r3, r2, r3
 804ed98:	7f3a      	ldrb	r2, [r7, #28]
 804ed9a:	f107 0120 	add.w	r1, r7, #32
 804ed9e:	440a      	add	r2, r1
 804eda0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 804eda4:	fb93 f3f2 	sdiv	r3, r3, r2
 804eda8:	b29a      	uxth	r2, r3
 804edaa:	687b      	ldr	r3, [r7, #4]
 804edac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 804edb0:	7ffb      	ldrb	r3, [r7, #31]
 804edb2:	7f7a      	ldrb	r2, [r7, #29]
 804edb4:	f107 0120 	add.w	r1, r7, #32
 804edb8:	440a      	add	r2, r1
 804edba:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 804edbe:	fb02 f303 	mul.w	r3, r2, r3
 804edc2:	7f7a      	ldrb	r2, [r7, #29]
 804edc4:	f107 0120 	add.w	r1, r7, #32
 804edc8:	440a      	add	r2, r1
 804edca:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 804edce:	fb93 f3f2 	sdiv	r3, r3, r2
 804edd2:	b29a      	uxth	r2, r3
 804edd4:	687b      	ldr	r3, [r7, #4]
 804edd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 804edda:	bf00      	nop
 804eddc:	3724      	adds	r7, #36	; 0x24
 804edde:	46bd      	mov	sp, r7
 804ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 804ede4:	4770      	bx	lr
 804ede6:	bf00      	nop
 804ede8:	0804ff3c 	.word	0x0804ff3c
 804edec:	0804ff44 	.word	0x0804ff44

0804edf0 <__errno>:
 804edf0:	4b01      	ldr	r3, [pc, #4]	; (804edf8 <__errno+0x8>)
 804edf2:	6818      	ldr	r0, [r3, #0]
 804edf4:	4770      	bx	lr
 804edf6:	bf00      	nop
 804edf8:	20018060 	.word	0x20018060

0804edfc <__libc_init_array>:
 804edfc:	b570      	push	{r4, r5, r6, lr}
 804edfe:	4d0d      	ldr	r5, [pc, #52]	; (804ee34 <__libc_init_array+0x38>)
 804ee00:	2600      	movs	r6, #0
 804ee02:	4c0d      	ldr	r4, [pc, #52]	; (804ee38 <__libc_init_array+0x3c>)
 804ee04:	1b64      	subs	r4, r4, r5
 804ee06:	10a4      	asrs	r4, r4, #2
 804ee08:	42a6      	cmp	r6, r4
 804ee0a:	d109      	bne.n	804ee20 <__libc_init_array+0x24>
 804ee0c:	4d0b      	ldr	r5, [pc, #44]	; (804ee3c <__libc_init_array+0x40>)
 804ee0e:	2600      	movs	r6, #0
 804ee10:	4c0b      	ldr	r4, [pc, #44]	; (804ee40 <__libc_init_array+0x44>)
 804ee12:	f001 f807 	bl	804fe24 <_init>
 804ee16:	1b64      	subs	r4, r4, r5
 804ee18:	10a4      	asrs	r4, r4, #2
 804ee1a:	42a6      	cmp	r6, r4
 804ee1c:	d105      	bne.n	804ee2a <__libc_init_array+0x2e>
 804ee1e:	bd70      	pop	{r4, r5, r6, pc}
 804ee20:	f855 3b04 	ldr.w	r3, [r5], #4
 804ee24:	3601      	adds	r6, #1
 804ee26:	4798      	blx	r3
 804ee28:	e7ee      	b.n	804ee08 <__libc_init_array+0xc>
 804ee2a:	f855 3b04 	ldr.w	r3, [r5], #4
 804ee2e:	3601      	adds	r6, #1
 804ee30:	4798      	blx	r3
 804ee32:	e7f2      	b.n	804ee1a <__libc_init_array+0x1e>
 804ee34:	08050218 	.word	0x08050218
 804ee38:	08050218 	.word	0x08050218
 804ee3c:	08050218 	.word	0x08050218
 804ee40:	0805021c 	.word	0x0805021c

0804ee44 <memcpy>:
 804ee44:	440a      	add	r2, r1
 804ee46:	1e43      	subs	r3, r0, #1
 804ee48:	4291      	cmp	r1, r2
 804ee4a:	d100      	bne.n	804ee4e <memcpy+0xa>
 804ee4c:	4770      	bx	lr
 804ee4e:	b510      	push	{r4, lr}
 804ee50:	f811 4b01 	ldrb.w	r4, [r1], #1
 804ee54:	4291      	cmp	r1, r2
 804ee56:	f803 4f01 	strb.w	r4, [r3, #1]!
 804ee5a:	d1f9      	bne.n	804ee50 <memcpy+0xc>
 804ee5c:	bd10      	pop	{r4, pc}

0804ee5e <memset>:
 804ee5e:	4402      	add	r2, r0
 804ee60:	4603      	mov	r3, r0
 804ee62:	4293      	cmp	r3, r2
 804ee64:	d100      	bne.n	804ee68 <memset+0xa>
 804ee66:	4770      	bx	lr
 804ee68:	f803 1b01 	strb.w	r1, [r3], #1
 804ee6c:	e7f9      	b.n	804ee62 <memset+0x4>
	...

0804ee70 <iprintf>:
 804ee70:	b40f      	push	{r0, r1, r2, r3}
 804ee72:	4b0a      	ldr	r3, [pc, #40]	; (804ee9c <iprintf+0x2c>)
 804ee74:	b513      	push	{r0, r1, r4, lr}
 804ee76:	681c      	ldr	r4, [r3, #0]
 804ee78:	b124      	cbz	r4, 804ee84 <iprintf+0x14>
 804ee7a:	69a3      	ldr	r3, [r4, #24]
 804ee7c:	b913      	cbnz	r3, 804ee84 <iprintf+0x14>
 804ee7e:	4620      	mov	r0, r4
 804ee80:	f000 fa5c 	bl	804f33c <__sinit>
 804ee84:	ab05      	add	r3, sp, #20
 804ee86:	9a04      	ldr	r2, [sp, #16]
 804ee88:	68a1      	ldr	r1, [r4, #8]
 804ee8a:	4620      	mov	r0, r4
 804ee8c:	9301      	str	r3, [sp, #4]
 804ee8e:	f000 fc2d 	bl	804f6ec <_vfiprintf_r>
 804ee92:	b002      	add	sp, #8
 804ee94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804ee98:	b004      	add	sp, #16
 804ee9a:	4770      	bx	lr
 804ee9c:	20018060 	.word	0x20018060

0804eea0 <_puts_r>:
 804eea0:	b570      	push	{r4, r5, r6, lr}
 804eea2:	460e      	mov	r6, r1
 804eea4:	4605      	mov	r5, r0
 804eea6:	b118      	cbz	r0, 804eeb0 <_puts_r+0x10>
 804eea8:	6983      	ldr	r3, [r0, #24]
 804eeaa:	b90b      	cbnz	r3, 804eeb0 <_puts_r+0x10>
 804eeac:	f000 fa46 	bl	804f33c <__sinit>
 804eeb0:	69ab      	ldr	r3, [r5, #24]
 804eeb2:	68ac      	ldr	r4, [r5, #8]
 804eeb4:	b913      	cbnz	r3, 804eebc <_puts_r+0x1c>
 804eeb6:	4628      	mov	r0, r5
 804eeb8:	f000 fa40 	bl	804f33c <__sinit>
 804eebc:	4b2c      	ldr	r3, [pc, #176]	; (804ef70 <_puts_r+0xd0>)
 804eebe:	429c      	cmp	r4, r3
 804eec0:	d120      	bne.n	804ef04 <_puts_r+0x64>
 804eec2:	686c      	ldr	r4, [r5, #4]
 804eec4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804eec6:	07db      	lsls	r3, r3, #31
 804eec8:	d405      	bmi.n	804eed6 <_puts_r+0x36>
 804eeca:	89a3      	ldrh	r3, [r4, #12]
 804eecc:	0598      	lsls	r0, r3, #22
 804eece:	d402      	bmi.n	804eed6 <_puts_r+0x36>
 804eed0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804eed2:	f000 fad1 	bl	804f478 <__retarget_lock_acquire_recursive>
 804eed6:	89a3      	ldrh	r3, [r4, #12]
 804eed8:	0719      	lsls	r1, r3, #28
 804eeda:	d51d      	bpl.n	804ef18 <_puts_r+0x78>
 804eedc:	6923      	ldr	r3, [r4, #16]
 804eede:	b1db      	cbz	r3, 804ef18 <_puts_r+0x78>
 804eee0:	3e01      	subs	r6, #1
 804eee2:	68a3      	ldr	r3, [r4, #8]
 804eee4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 804eee8:	3b01      	subs	r3, #1
 804eeea:	60a3      	str	r3, [r4, #8]
 804eeec:	bb39      	cbnz	r1, 804ef3e <_puts_r+0x9e>
 804eeee:	2b00      	cmp	r3, #0
 804eef0:	da38      	bge.n	804ef64 <_puts_r+0xc4>
 804eef2:	4622      	mov	r2, r4
 804eef4:	210a      	movs	r1, #10
 804eef6:	4628      	mov	r0, r5
 804eef8:	f000 f848 	bl	804ef8c <__swbuf_r>
 804eefc:	3001      	adds	r0, #1
 804eefe:	d011      	beq.n	804ef24 <_puts_r+0x84>
 804ef00:	250a      	movs	r5, #10
 804ef02:	e011      	b.n	804ef28 <_puts_r+0x88>
 804ef04:	4b1b      	ldr	r3, [pc, #108]	; (804ef74 <_puts_r+0xd4>)
 804ef06:	429c      	cmp	r4, r3
 804ef08:	d101      	bne.n	804ef0e <_puts_r+0x6e>
 804ef0a:	68ac      	ldr	r4, [r5, #8]
 804ef0c:	e7da      	b.n	804eec4 <_puts_r+0x24>
 804ef0e:	4b1a      	ldr	r3, [pc, #104]	; (804ef78 <_puts_r+0xd8>)
 804ef10:	429c      	cmp	r4, r3
 804ef12:	bf08      	it	eq
 804ef14:	68ec      	ldreq	r4, [r5, #12]
 804ef16:	e7d5      	b.n	804eec4 <_puts_r+0x24>
 804ef18:	4621      	mov	r1, r4
 804ef1a:	4628      	mov	r0, r5
 804ef1c:	f000 f888 	bl	804f030 <__swsetup_r>
 804ef20:	2800      	cmp	r0, #0
 804ef22:	d0dd      	beq.n	804eee0 <_puts_r+0x40>
 804ef24:	f04f 35ff 	mov.w	r5, #4294967295
 804ef28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804ef2a:	07da      	lsls	r2, r3, #31
 804ef2c:	d405      	bmi.n	804ef3a <_puts_r+0x9a>
 804ef2e:	89a3      	ldrh	r3, [r4, #12]
 804ef30:	059b      	lsls	r3, r3, #22
 804ef32:	d402      	bmi.n	804ef3a <_puts_r+0x9a>
 804ef34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804ef36:	f000 faa0 	bl	804f47a <__retarget_lock_release_recursive>
 804ef3a:	4628      	mov	r0, r5
 804ef3c:	bd70      	pop	{r4, r5, r6, pc}
 804ef3e:	2b00      	cmp	r3, #0
 804ef40:	da04      	bge.n	804ef4c <_puts_r+0xac>
 804ef42:	69a2      	ldr	r2, [r4, #24]
 804ef44:	429a      	cmp	r2, r3
 804ef46:	dc06      	bgt.n	804ef56 <_puts_r+0xb6>
 804ef48:	290a      	cmp	r1, #10
 804ef4a:	d004      	beq.n	804ef56 <_puts_r+0xb6>
 804ef4c:	6823      	ldr	r3, [r4, #0]
 804ef4e:	1c5a      	adds	r2, r3, #1
 804ef50:	6022      	str	r2, [r4, #0]
 804ef52:	7019      	strb	r1, [r3, #0]
 804ef54:	e7c5      	b.n	804eee2 <_puts_r+0x42>
 804ef56:	4622      	mov	r2, r4
 804ef58:	4628      	mov	r0, r5
 804ef5a:	f000 f817 	bl	804ef8c <__swbuf_r>
 804ef5e:	3001      	adds	r0, #1
 804ef60:	d1bf      	bne.n	804eee2 <_puts_r+0x42>
 804ef62:	e7df      	b.n	804ef24 <_puts_r+0x84>
 804ef64:	6823      	ldr	r3, [r4, #0]
 804ef66:	250a      	movs	r5, #10
 804ef68:	1c5a      	adds	r2, r3, #1
 804ef6a:	6022      	str	r2, [r4, #0]
 804ef6c:	701d      	strb	r5, [r3, #0]
 804ef6e:	e7db      	b.n	804ef28 <_puts_r+0x88>
 804ef70:	0805019c 	.word	0x0805019c
 804ef74:	080501bc 	.word	0x080501bc
 804ef78:	0805017c 	.word	0x0805017c

0804ef7c <puts>:
 804ef7c:	4b02      	ldr	r3, [pc, #8]	; (804ef88 <puts+0xc>)
 804ef7e:	4601      	mov	r1, r0
 804ef80:	6818      	ldr	r0, [r3, #0]
 804ef82:	f7ff bf8d 	b.w	804eea0 <_puts_r>
 804ef86:	bf00      	nop
 804ef88:	20018060 	.word	0x20018060

0804ef8c <__swbuf_r>:
 804ef8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804ef8e:	460e      	mov	r6, r1
 804ef90:	4614      	mov	r4, r2
 804ef92:	4605      	mov	r5, r0
 804ef94:	b118      	cbz	r0, 804ef9e <__swbuf_r+0x12>
 804ef96:	6983      	ldr	r3, [r0, #24]
 804ef98:	b90b      	cbnz	r3, 804ef9e <__swbuf_r+0x12>
 804ef9a:	f000 f9cf 	bl	804f33c <__sinit>
 804ef9e:	4b21      	ldr	r3, [pc, #132]	; (804f024 <__swbuf_r+0x98>)
 804efa0:	429c      	cmp	r4, r3
 804efa2:	d12b      	bne.n	804effc <__swbuf_r+0x70>
 804efa4:	686c      	ldr	r4, [r5, #4]
 804efa6:	69a3      	ldr	r3, [r4, #24]
 804efa8:	60a3      	str	r3, [r4, #8]
 804efaa:	89a3      	ldrh	r3, [r4, #12]
 804efac:	071a      	lsls	r2, r3, #28
 804efae:	d52f      	bpl.n	804f010 <__swbuf_r+0x84>
 804efb0:	6923      	ldr	r3, [r4, #16]
 804efb2:	b36b      	cbz	r3, 804f010 <__swbuf_r+0x84>
 804efb4:	6923      	ldr	r3, [r4, #16]
 804efb6:	b2f6      	uxtb	r6, r6
 804efb8:	6820      	ldr	r0, [r4, #0]
 804efba:	4637      	mov	r7, r6
 804efbc:	1ac0      	subs	r0, r0, r3
 804efbe:	6963      	ldr	r3, [r4, #20]
 804efc0:	4283      	cmp	r3, r0
 804efc2:	dc04      	bgt.n	804efce <__swbuf_r+0x42>
 804efc4:	4621      	mov	r1, r4
 804efc6:	4628      	mov	r0, r5
 804efc8:	f000 f924 	bl	804f214 <_fflush_r>
 804efcc:	bb30      	cbnz	r0, 804f01c <__swbuf_r+0x90>
 804efce:	68a3      	ldr	r3, [r4, #8]
 804efd0:	3001      	adds	r0, #1
 804efd2:	3b01      	subs	r3, #1
 804efd4:	60a3      	str	r3, [r4, #8]
 804efd6:	6823      	ldr	r3, [r4, #0]
 804efd8:	1c5a      	adds	r2, r3, #1
 804efda:	6022      	str	r2, [r4, #0]
 804efdc:	701e      	strb	r6, [r3, #0]
 804efde:	6963      	ldr	r3, [r4, #20]
 804efe0:	4283      	cmp	r3, r0
 804efe2:	d004      	beq.n	804efee <__swbuf_r+0x62>
 804efe4:	89a3      	ldrh	r3, [r4, #12]
 804efe6:	07db      	lsls	r3, r3, #31
 804efe8:	d506      	bpl.n	804eff8 <__swbuf_r+0x6c>
 804efea:	2e0a      	cmp	r6, #10
 804efec:	d104      	bne.n	804eff8 <__swbuf_r+0x6c>
 804efee:	4621      	mov	r1, r4
 804eff0:	4628      	mov	r0, r5
 804eff2:	f000 f90f 	bl	804f214 <_fflush_r>
 804eff6:	b988      	cbnz	r0, 804f01c <__swbuf_r+0x90>
 804eff8:	4638      	mov	r0, r7
 804effa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804effc:	4b0a      	ldr	r3, [pc, #40]	; (804f028 <__swbuf_r+0x9c>)
 804effe:	429c      	cmp	r4, r3
 804f000:	d101      	bne.n	804f006 <__swbuf_r+0x7a>
 804f002:	68ac      	ldr	r4, [r5, #8]
 804f004:	e7cf      	b.n	804efa6 <__swbuf_r+0x1a>
 804f006:	4b09      	ldr	r3, [pc, #36]	; (804f02c <__swbuf_r+0xa0>)
 804f008:	429c      	cmp	r4, r3
 804f00a:	bf08      	it	eq
 804f00c:	68ec      	ldreq	r4, [r5, #12]
 804f00e:	e7ca      	b.n	804efa6 <__swbuf_r+0x1a>
 804f010:	4621      	mov	r1, r4
 804f012:	4628      	mov	r0, r5
 804f014:	f000 f80c 	bl	804f030 <__swsetup_r>
 804f018:	2800      	cmp	r0, #0
 804f01a:	d0cb      	beq.n	804efb4 <__swbuf_r+0x28>
 804f01c:	f04f 37ff 	mov.w	r7, #4294967295
 804f020:	e7ea      	b.n	804eff8 <__swbuf_r+0x6c>
 804f022:	bf00      	nop
 804f024:	0805019c 	.word	0x0805019c
 804f028:	080501bc 	.word	0x080501bc
 804f02c:	0805017c 	.word	0x0805017c

0804f030 <__swsetup_r>:
 804f030:	4b32      	ldr	r3, [pc, #200]	; (804f0fc <__swsetup_r+0xcc>)
 804f032:	b570      	push	{r4, r5, r6, lr}
 804f034:	681d      	ldr	r5, [r3, #0]
 804f036:	4606      	mov	r6, r0
 804f038:	460c      	mov	r4, r1
 804f03a:	b125      	cbz	r5, 804f046 <__swsetup_r+0x16>
 804f03c:	69ab      	ldr	r3, [r5, #24]
 804f03e:	b913      	cbnz	r3, 804f046 <__swsetup_r+0x16>
 804f040:	4628      	mov	r0, r5
 804f042:	f000 f97b 	bl	804f33c <__sinit>
 804f046:	4b2e      	ldr	r3, [pc, #184]	; (804f100 <__swsetup_r+0xd0>)
 804f048:	429c      	cmp	r4, r3
 804f04a:	d10f      	bne.n	804f06c <__swsetup_r+0x3c>
 804f04c:	686c      	ldr	r4, [r5, #4]
 804f04e:	89a3      	ldrh	r3, [r4, #12]
 804f050:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804f054:	0719      	lsls	r1, r3, #28
 804f056:	d42c      	bmi.n	804f0b2 <__swsetup_r+0x82>
 804f058:	06dd      	lsls	r5, r3, #27
 804f05a:	d411      	bmi.n	804f080 <__swsetup_r+0x50>
 804f05c:	2309      	movs	r3, #9
 804f05e:	6033      	str	r3, [r6, #0]
 804f060:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 804f064:	f04f 30ff 	mov.w	r0, #4294967295
 804f068:	81a3      	strh	r3, [r4, #12]
 804f06a:	e03e      	b.n	804f0ea <__swsetup_r+0xba>
 804f06c:	4b25      	ldr	r3, [pc, #148]	; (804f104 <__swsetup_r+0xd4>)
 804f06e:	429c      	cmp	r4, r3
 804f070:	d101      	bne.n	804f076 <__swsetup_r+0x46>
 804f072:	68ac      	ldr	r4, [r5, #8]
 804f074:	e7eb      	b.n	804f04e <__swsetup_r+0x1e>
 804f076:	4b24      	ldr	r3, [pc, #144]	; (804f108 <__swsetup_r+0xd8>)
 804f078:	429c      	cmp	r4, r3
 804f07a:	bf08      	it	eq
 804f07c:	68ec      	ldreq	r4, [r5, #12]
 804f07e:	e7e6      	b.n	804f04e <__swsetup_r+0x1e>
 804f080:	0758      	lsls	r0, r3, #29
 804f082:	d512      	bpl.n	804f0aa <__swsetup_r+0x7a>
 804f084:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804f086:	b141      	cbz	r1, 804f09a <__swsetup_r+0x6a>
 804f088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804f08c:	4299      	cmp	r1, r3
 804f08e:	d002      	beq.n	804f096 <__swsetup_r+0x66>
 804f090:	4630      	mov	r0, r6
 804f092:	f000 fa57 	bl	804f544 <_free_r>
 804f096:	2300      	movs	r3, #0
 804f098:	6363      	str	r3, [r4, #52]	; 0x34
 804f09a:	89a3      	ldrh	r3, [r4, #12]
 804f09c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 804f0a0:	81a3      	strh	r3, [r4, #12]
 804f0a2:	2300      	movs	r3, #0
 804f0a4:	6063      	str	r3, [r4, #4]
 804f0a6:	6923      	ldr	r3, [r4, #16]
 804f0a8:	6023      	str	r3, [r4, #0]
 804f0aa:	89a3      	ldrh	r3, [r4, #12]
 804f0ac:	f043 0308 	orr.w	r3, r3, #8
 804f0b0:	81a3      	strh	r3, [r4, #12]
 804f0b2:	6923      	ldr	r3, [r4, #16]
 804f0b4:	b94b      	cbnz	r3, 804f0ca <__swsetup_r+0x9a>
 804f0b6:	89a3      	ldrh	r3, [r4, #12]
 804f0b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 804f0bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804f0c0:	d003      	beq.n	804f0ca <__swsetup_r+0x9a>
 804f0c2:	4621      	mov	r1, r4
 804f0c4:	4630      	mov	r0, r6
 804f0c6:	f000 f9fd 	bl	804f4c4 <__smakebuf_r>
 804f0ca:	89a0      	ldrh	r0, [r4, #12]
 804f0cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 804f0d0:	f010 0301 	ands.w	r3, r0, #1
 804f0d4:	d00a      	beq.n	804f0ec <__swsetup_r+0xbc>
 804f0d6:	2300      	movs	r3, #0
 804f0d8:	60a3      	str	r3, [r4, #8]
 804f0da:	6963      	ldr	r3, [r4, #20]
 804f0dc:	425b      	negs	r3, r3
 804f0de:	61a3      	str	r3, [r4, #24]
 804f0e0:	6923      	ldr	r3, [r4, #16]
 804f0e2:	b943      	cbnz	r3, 804f0f6 <__swsetup_r+0xc6>
 804f0e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 804f0e8:	d1ba      	bne.n	804f060 <__swsetup_r+0x30>
 804f0ea:	bd70      	pop	{r4, r5, r6, pc}
 804f0ec:	0781      	lsls	r1, r0, #30
 804f0ee:	bf58      	it	pl
 804f0f0:	6963      	ldrpl	r3, [r4, #20]
 804f0f2:	60a3      	str	r3, [r4, #8]
 804f0f4:	e7f4      	b.n	804f0e0 <__swsetup_r+0xb0>
 804f0f6:	2000      	movs	r0, #0
 804f0f8:	e7f7      	b.n	804f0ea <__swsetup_r+0xba>
 804f0fa:	bf00      	nop
 804f0fc:	20018060 	.word	0x20018060
 804f100:	0805019c 	.word	0x0805019c
 804f104:	080501bc 	.word	0x080501bc
 804f108:	0805017c 	.word	0x0805017c

0804f10c <__sflush_r>:
 804f10c:	898a      	ldrh	r2, [r1, #12]
 804f10e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804f112:	4605      	mov	r5, r0
 804f114:	0710      	lsls	r0, r2, #28
 804f116:	460c      	mov	r4, r1
 804f118:	d458      	bmi.n	804f1cc <__sflush_r+0xc0>
 804f11a:	684b      	ldr	r3, [r1, #4]
 804f11c:	2b00      	cmp	r3, #0
 804f11e:	dc05      	bgt.n	804f12c <__sflush_r+0x20>
 804f120:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804f122:	2b00      	cmp	r3, #0
 804f124:	dc02      	bgt.n	804f12c <__sflush_r+0x20>
 804f126:	2000      	movs	r0, #0
 804f128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 804f12c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804f12e:	2e00      	cmp	r6, #0
 804f130:	d0f9      	beq.n	804f126 <__sflush_r+0x1a>
 804f132:	2300      	movs	r3, #0
 804f134:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 804f138:	682f      	ldr	r7, [r5, #0]
 804f13a:	602b      	str	r3, [r5, #0]
 804f13c:	d032      	beq.n	804f1a4 <__sflush_r+0x98>
 804f13e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804f140:	89a3      	ldrh	r3, [r4, #12]
 804f142:	075a      	lsls	r2, r3, #29
 804f144:	d505      	bpl.n	804f152 <__sflush_r+0x46>
 804f146:	6863      	ldr	r3, [r4, #4]
 804f148:	1ac0      	subs	r0, r0, r3
 804f14a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 804f14c:	b10b      	cbz	r3, 804f152 <__sflush_r+0x46>
 804f14e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804f150:	1ac0      	subs	r0, r0, r3
 804f152:	2300      	movs	r3, #0
 804f154:	4602      	mov	r2, r0
 804f156:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804f158:	4628      	mov	r0, r5
 804f15a:	6a21      	ldr	r1, [r4, #32]
 804f15c:	47b0      	blx	r6
 804f15e:	1c43      	adds	r3, r0, #1
 804f160:	89a3      	ldrh	r3, [r4, #12]
 804f162:	d106      	bne.n	804f172 <__sflush_r+0x66>
 804f164:	6829      	ldr	r1, [r5, #0]
 804f166:	291d      	cmp	r1, #29
 804f168:	d82c      	bhi.n	804f1c4 <__sflush_r+0xb8>
 804f16a:	4a29      	ldr	r2, [pc, #164]	; (804f210 <__sflush_r+0x104>)
 804f16c:	40ca      	lsrs	r2, r1
 804f16e:	07d6      	lsls	r6, r2, #31
 804f170:	d528      	bpl.n	804f1c4 <__sflush_r+0xb8>
 804f172:	2200      	movs	r2, #0
 804f174:	04d9      	lsls	r1, r3, #19
 804f176:	6062      	str	r2, [r4, #4]
 804f178:	6922      	ldr	r2, [r4, #16]
 804f17a:	6022      	str	r2, [r4, #0]
 804f17c:	d504      	bpl.n	804f188 <__sflush_r+0x7c>
 804f17e:	1c42      	adds	r2, r0, #1
 804f180:	d101      	bne.n	804f186 <__sflush_r+0x7a>
 804f182:	682b      	ldr	r3, [r5, #0]
 804f184:	b903      	cbnz	r3, 804f188 <__sflush_r+0x7c>
 804f186:	6560      	str	r0, [r4, #84]	; 0x54
 804f188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804f18a:	602f      	str	r7, [r5, #0]
 804f18c:	2900      	cmp	r1, #0
 804f18e:	d0ca      	beq.n	804f126 <__sflush_r+0x1a>
 804f190:	f104 0344 	add.w	r3, r4, #68	; 0x44
 804f194:	4299      	cmp	r1, r3
 804f196:	d002      	beq.n	804f19e <__sflush_r+0x92>
 804f198:	4628      	mov	r0, r5
 804f19a:	f000 f9d3 	bl	804f544 <_free_r>
 804f19e:	2000      	movs	r0, #0
 804f1a0:	6360      	str	r0, [r4, #52]	; 0x34
 804f1a2:	e7c1      	b.n	804f128 <__sflush_r+0x1c>
 804f1a4:	6a21      	ldr	r1, [r4, #32]
 804f1a6:	2301      	movs	r3, #1
 804f1a8:	4628      	mov	r0, r5
 804f1aa:	47b0      	blx	r6
 804f1ac:	1c41      	adds	r1, r0, #1
 804f1ae:	d1c7      	bne.n	804f140 <__sflush_r+0x34>
 804f1b0:	682b      	ldr	r3, [r5, #0]
 804f1b2:	2b00      	cmp	r3, #0
 804f1b4:	d0c4      	beq.n	804f140 <__sflush_r+0x34>
 804f1b6:	2b1d      	cmp	r3, #29
 804f1b8:	d001      	beq.n	804f1be <__sflush_r+0xb2>
 804f1ba:	2b16      	cmp	r3, #22
 804f1bc:	d101      	bne.n	804f1c2 <__sflush_r+0xb6>
 804f1be:	602f      	str	r7, [r5, #0]
 804f1c0:	e7b1      	b.n	804f126 <__sflush_r+0x1a>
 804f1c2:	89a3      	ldrh	r3, [r4, #12]
 804f1c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804f1c8:	81a3      	strh	r3, [r4, #12]
 804f1ca:	e7ad      	b.n	804f128 <__sflush_r+0x1c>
 804f1cc:	690f      	ldr	r7, [r1, #16]
 804f1ce:	2f00      	cmp	r7, #0
 804f1d0:	d0a9      	beq.n	804f126 <__sflush_r+0x1a>
 804f1d2:	0793      	lsls	r3, r2, #30
 804f1d4:	680e      	ldr	r6, [r1, #0]
 804f1d6:	600f      	str	r7, [r1, #0]
 804f1d8:	bf0c      	ite	eq
 804f1da:	694b      	ldreq	r3, [r1, #20]
 804f1dc:	2300      	movne	r3, #0
 804f1de:	eba6 0807 	sub.w	r8, r6, r7
 804f1e2:	608b      	str	r3, [r1, #8]
 804f1e4:	f1b8 0f00 	cmp.w	r8, #0
 804f1e8:	dd9d      	ble.n	804f126 <__sflush_r+0x1a>
 804f1ea:	4643      	mov	r3, r8
 804f1ec:	463a      	mov	r2, r7
 804f1ee:	6a21      	ldr	r1, [r4, #32]
 804f1f0:	4628      	mov	r0, r5
 804f1f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 804f1f4:	47b0      	blx	r6
 804f1f6:	2800      	cmp	r0, #0
 804f1f8:	dc06      	bgt.n	804f208 <__sflush_r+0xfc>
 804f1fa:	89a3      	ldrh	r3, [r4, #12]
 804f1fc:	f04f 30ff 	mov.w	r0, #4294967295
 804f200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804f204:	81a3      	strh	r3, [r4, #12]
 804f206:	e78f      	b.n	804f128 <__sflush_r+0x1c>
 804f208:	4407      	add	r7, r0
 804f20a:	eba8 0800 	sub.w	r8, r8, r0
 804f20e:	e7e9      	b.n	804f1e4 <__sflush_r+0xd8>
 804f210:	20400001 	.word	0x20400001

0804f214 <_fflush_r>:
 804f214:	b538      	push	{r3, r4, r5, lr}
 804f216:	690b      	ldr	r3, [r1, #16]
 804f218:	4605      	mov	r5, r0
 804f21a:	460c      	mov	r4, r1
 804f21c:	b913      	cbnz	r3, 804f224 <_fflush_r+0x10>
 804f21e:	2500      	movs	r5, #0
 804f220:	4628      	mov	r0, r5
 804f222:	bd38      	pop	{r3, r4, r5, pc}
 804f224:	b118      	cbz	r0, 804f22e <_fflush_r+0x1a>
 804f226:	6983      	ldr	r3, [r0, #24]
 804f228:	b90b      	cbnz	r3, 804f22e <_fflush_r+0x1a>
 804f22a:	f000 f887 	bl	804f33c <__sinit>
 804f22e:	4b14      	ldr	r3, [pc, #80]	; (804f280 <_fflush_r+0x6c>)
 804f230:	429c      	cmp	r4, r3
 804f232:	d11b      	bne.n	804f26c <_fflush_r+0x58>
 804f234:	686c      	ldr	r4, [r5, #4]
 804f236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804f23a:	2b00      	cmp	r3, #0
 804f23c:	d0ef      	beq.n	804f21e <_fflush_r+0xa>
 804f23e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 804f240:	07d0      	lsls	r0, r2, #31
 804f242:	d404      	bmi.n	804f24e <_fflush_r+0x3a>
 804f244:	0599      	lsls	r1, r3, #22
 804f246:	d402      	bmi.n	804f24e <_fflush_r+0x3a>
 804f248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804f24a:	f000 f915 	bl	804f478 <__retarget_lock_acquire_recursive>
 804f24e:	4628      	mov	r0, r5
 804f250:	4621      	mov	r1, r4
 804f252:	f7ff ff5b 	bl	804f10c <__sflush_r>
 804f256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804f258:	4605      	mov	r5, r0
 804f25a:	07da      	lsls	r2, r3, #31
 804f25c:	d4e0      	bmi.n	804f220 <_fflush_r+0xc>
 804f25e:	89a3      	ldrh	r3, [r4, #12]
 804f260:	059b      	lsls	r3, r3, #22
 804f262:	d4dd      	bmi.n	804f220 <_fflush_r+0xc>
 804f264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804f266:	f000 f908 	bl	804f47a <__retarget_lock_release_recursive>
 804f26a:	e7d9      	b.n	804f220 <_fflush_r+0xc>
 804f26c:	4b05      	ldr	r3, [pc, #20]	; (804f284 <_fflush_r+0x70>)
 804f26e:	429c      	cmp	r4, r3
 804f270:	d101      	bne.n	804f276 <_fflush_r+0x62>
 804f272:	68ac      	ldr	r4, [r5, #8]
 804f274:	e7df      	b.n	804f236 <_fflush_r+0x22>
 804f276:	4b04      	ldr	r3, [pc, #16]	; (804f288 <_fflush_r+0x74>)
 804f278:	429c      	cmp	r4, r3
 804f27a:	bf08      	it	eq
 804f27c:	68ec      	ldreq	r4, [r5, #12]
 804f27e:	e7da      	b.n	804f236 <_fflush_r+0x22>
 804f280:	0805019c 	.word	0x0805019c
 804f284:	080501bc 	.word	0x080501bc
 804f288:	0805017c 	.word	0x0805017c

0804f28c <std>:
 804f28c:	2300      	movs	r3, #0
 804f28e:	b510      	push	{r4, lr}
 804f290:	4604      	mov	r4, r0
 804f292:	6083      	str	r3, [r0, #8]
 804f294:	8181      	strh	r1, [r0, #12]
 804f296:	4619      	mov	r1, r3
 804f298:	6643      	str	r3, [r0, #100]	; 0x64
 804f29a:	81c2      	strh	r2, [r0, #14]
 804f29c:	2208      	movs	r2, #8
 804f29e:	6183      	str	r3, [r0, #24]
 804f2a0:	e9c0 3300 	strd	r3, r3, [r0]
 804f2a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 804f2a8:	305c      	adds	r0, #92	; 0x5c
 804f2aa:	f7ff fdd8 	bl	804ee5e <memset>
 804f2ae:	4b05      	ldr	r3, [pc, #20]	; (804f2c4 <std+0x38>)
 804f2b0:	6224      	str	r4, [r4, #32]
 804f2b2:	6263      	str	r3, [r4, #36]	; 0x24
 804f2b4:	4b04      	ldr	r3, [pc, #16]	; (804f2c8 <std+0x3c>)
 804f2b6:	62a3      	str	r3, [r4, #40]	; 0x28
 804f2b8:	4b04      	ldr	r3, [pc, #16]	; (804f2cc <std+0x40>)
 804f2ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 804f2bc:	4b04      	ldr	r3, [pc, #16]	; (804f2d0 <std+0x44>)
 804f2be:	6323      	str	r3, [r4, #48]	; 0x30
 804f2c0:	bd10      	pop	{r4, pc}
 804f2c2:	bf00      	nop
 804f2c4:	0804fc99 	.word	0x0804fc99
 804f2c8:	0804fcbb 	.word	0x0804fcbb
 804f2cc:	0804fcf3 	.word	0x0804fcf3
 804f2d0:	0804fd17 	.word	0x0804fd17

0804f2d4 <_cleanup_r>:
 804f2d4:	4901      	ldr	r1, [pc, #4]	; (804f2dc <_cleanup_r+0x8>)
 804f2d6:	f000 b8af 	b.w	804f438 <_fwalk_reent>
 804f2da:	bf00      	nop
 804f2dc:	0804f215 	.word	0x0804f215

0804f2e0 <__sfmoreglue>:
 804f2e0:	b570      	push	{r4, r5, r6, lr}
 804f2e2:	1e4a      	subs	r2, r1, #1
 804f2e4:	2568      	movs	r5, #104	; 0x68
 804f2e6:	460e      	mov	r6, r1
 804f2e8:	4355      	muls	r5, r2
 804f2ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 804f2ee:	f000 f979 	bl	804f5e4 <_malloc_r>
 804f2f2:	4604      	mov	r4, r0
 804f2f4:	b140      	cbz	r0, 804f308 <__sfmoreglue+0x28>
 804f2f6:	2100      	movs	r1, #0
 804f2f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 804f2fc:	e9c0 1600 	strd	r1, r6, [r0]
 804f300:	300c      	adds	r0, #12
 804f302:	60a0      	str	r0, [r4, #8]
 804f304:	f7ff fdab 	bl	804ee5e <memset>
 804f308:	4620      	mov	r0, r4
 804f30a:	bd70      	pop	{r4, r5, r6, pc}

0804f30c <__sfp_lock_acquire>:
 804f30c:	4801      	ldr	r0, [pc, #4]	; (804f314 <__sfp_lock_acquire+0x8>)
 804f30e:	f000 b8b3 	b.w	804f478 <__retarget_lock_acquire_recursive>
 804f312:	bf00      	nop
 804f314:	20019970 	.word	0x20019970

0804f318 <__sfp_lock_release>:
 804f318:	4801      	ldr	r0, [pc, #4]	; (804f320 <__sfp_lock_release+0x8>)
 804f31a:	f000 b8ae 	b.w	804f47a <__retarget_lock_release_recursive>
 804f31e:	bf00      	nop
 804f320:	20019970 	.word	0x20019970

0804f324 <__sinit_lock_acquire>:
 804f324:	4801      	ldr	r0, [pc, #4]	; (804f32c <__sinit_lock_acquire+0x8>)
 804f326:	f000 b8a7 	b.w	804f478 <__retarget_lock_acquire_recursive>
 804f32a:	bf00      	nop
 804f32c:	2001996b 	.word	0x2001996b

0804f330 <__sinit_lock_release>:
 804f330:	4801      	ldr	r0, [pc, #4]	; (804f338 <__sinit_lock_release+0x8>)
 804f332:	f000 b8a2 	b.w	804f47a <__retarget_lock_release_recursive>
 804f336:	bf00      	nop
 804f338:	2001996b 	.word	0x2001996b

0804f33c <__sinit>:
 804f33c:	b510      	push	{r4, lr}
 804f33e:	4604      	mov	r4, r0
 804f340:	f7ff fff0 	bl	804f324 <__sinit_lock_acquire>
 804f344:	69a3      	ldr	r3, [r4, #24]
 804f346:	b11b      	cbz	r3, 804f350 <__sinit+0x14>
 804f348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 804f34c:	f7ff bff0 	b.w	804f330 <__sinit_lock_release>
 804f350:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 804f354:	6523      	str	r3, [r4, #80]	; 0x50
 804f356:	4620      	mov	r0, r4
 804f358:	4b12      	ldr	r3, [pc, #72]	; (804f3a4 <__sinit+0x68>)
 804f35a:	4a13      	ldr	r2, [pc, #76]	; (804f3a8 <__sinit+0x6c>)
 804f35c:	681b      	ldr	r3, [r3, #0]
 804f35e:	62a2      	str	r2, [r4, #40]	; 0x28
 804f360:	42a3      	cmp	r3, r4
 804f362:	bf04      	itt	eq
 804f364:	2301      	moveq	r3, #1
 804f366:	61a3      	streq	r3, [r4, #24]
 804f368:	f000 f820 	bl	804f3ac <__sfp>
 804f36c:	6060      	str	r0, [r4, #4]
 804f36e:	4620      	mov	r0, r4
 804f370:	f000 f81c 	bl	804f3ac <__sfp>
 804f374:	60a0      	str	r0, [r4, #8]
 804f376:	4620      	mov	r0, r4
 804f378:	f000 f818 	bl	804f3ac <__sfp>
 804f37c:	2200      	movs	r2, #0
 804f37e:	2104      	movs	r1, #4
 804f380:	60e0      	str	r0, [r4, #12]
 804f382:	6860      	ldr	r0, [r4, #4]
 804f384:	f7ff ff82 	bl	804f28c <std>
 804f388:	2201      	movs	r2, #1
 804f38a:	2109      	movs	r1, #9
 804f38c:	68a0      	ldr	r0, [r4, #8]
 804f38e:	f7ff ff7d 	bl	804f28c <std>
 804f392:	2202      	movs	r2, #2
 804f394:	2112      	movs	r1, #18
 804f396:	68e0      	ldr	r0, [r4, #12]
 804f398:	f7ff ff78 	bl	804f28c <std>
 804f39c:	2301      	movs	r3, #1
 804f39e:	61a3      	str	r3, [r4, #24]
 804f3a0:	e7d2      	b.n	804f348 <__sinit+0xc>
 804f3a2:	bf00      	nop
 804f3a4:	08050178 	.word	0x08050178
 804f3a8:	0804f2d5 	.word	0x0804f2d5

0804f3ac <__sfp>:
 804f3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804f3ae:	4607      	mov	r7, r0
 804f3b0:	f7ff ffac 	bl	804f30c <__sfp_lock_acquire>
 804f3b4:	4b1e      	ldr	r3, [pc, #120]	; (804f430 <__sfp+0x84>)
 804f3b6:	681e      	ldr	r6, [r3, #0]
 804f3b8:	69b3      	ldr	r3, [r6, #24]
 804f3ba:	b913      	cbnz	r3, 804f3c2 <__sfp+0x16>
 804f3bc:	4630      	mov	r0, r6
 804f3be:	f7ff ffbd 	bl	804f33c <__sinit>
 804f3c2:	3648      	adds	r6, #72	; 0x48
 804f3c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 804f3c8:	3b01      	subs	r3, #1
 804f3ca:	d503      	bpl.n	804f3d4 <__sfp+0x28>
 804f3cc:	6833      	ldr	r3, [r6, #0]
 804f3ce:	b30b      	cbz	r3, 804f414 <__sfp+0x68>
 804f3d0:	6836      	ldr	r6, [r6, #0]
 804f3d2:	e7f7      	b.n	804f3c4 <__sfp+0x18>
 804f3d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 804f3d8:	b9d5      	cbnz	r5, 804f410 <__sfp+0x64>
 804f3da:	4b16      	ldr	r3, [pc, #88]	; (804f434 <__sfp+0x88>)
 804f3dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 804f3e0:	6665      	str	r5, [r4, #100]	; 0x64
 804f3e2:	60e3      	str	r3, [r4, #12]
 804f3e4:	f000 f847 	bl	804f476 <__retarget_lock_init_recursive>
 804f3e8:	f7ff ff96 	bl	804f318 <__sfp_lock_release>
 804f3ec:	2208      	movs	r2, #8
 804f3ee:	4629      	mov	r1, r5
 804f3f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 804f3f4:	6025      	str	r5, [r4, #0]
 804f3f6:	61a5      	str	r5, [r4, #24]
 804f3f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 804f3fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 804f400:	f7ff fd2d 	bl	804ee5e <memset>
 804f404:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 804f408:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 804f40c:	4620      	mov	r0, r4
 804f40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804f410:	3468      	adds	r4, #104	; 0x68
 804f412:	e7d9      	b.n	804f3c8 <__sfp+0x1c>
 804f414:	2104      	movs	r1, #4
 804f416:	4638      	mov	r0, r7
 804f418:	f7ff ff62 	bl	804f2e0 <__sfmoreglue>
 804f41c:	4604      	mov	r4, r0
 804f41e:	6030      	str	r0, [r6, #0]
 804f420:	2800      	cmp	r0, #0
 804f422:	d1d5      	bne.n	804f3d0 <__sfp+0x24>
 804f424:	f7ff ff78 	bl	804f318 <__sfp_lock_release>
 804f428:	230c      	movs	r3, #12
 804f42a:	603b      	str	r3, [r7, #0]
 804f42c:	e7ee      	b.n	804f40c <__sfp+0x60>
 804f42e:	bf00      	nop
 804f430:	08050178 	.word	0x08050178
 804f434:	ffff0001 	.word	0xffff0001

0804f438 <_fwalk_reent>:
 804f438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 804f43c:	4606      	mov	r6, r0
 804f43e:	4688      	mov	r8, r1
 804f440:	f100 0448 	add.w	r4, r0, #72	; 0x48
 804f444:	2700      	movs	r7, #0
 804f446:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 804f44a:	f1b9 0901 	subs.w	r9, r9, #1
 804f44e:	d505      	bpl.n	804f45c <_fwalk_reent+0x24>
 804f450:	6824      	ldr	r4, [r4, #0]
 804f452:	2c00      	cmp	r4, #0
 804f454:	d1f7      	bne.n	804f446 <_fwalk_reent+0xe>
 804f456:	4638      	mov	r0, r7
 804f458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 804f45c:	89ab      	ldrh	r3, [r5, #12]
 804f45e:	2b01      	cmp	r3, #1
 804f460:	d907      	bls.n	804f472 <_fwalk_reent+0x3a>
 804f462:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 804f466:	3301      	adds	r3, #1
 804f468:	d003      	beq.n	804f472 <_fwalk_reent+0x3a>
 804f46a:	4629      	mov	r1, r5
 804f46c:	4630      	mov	r0, r6
 804f46e:	47c0      	blx	r8
 804f470:	4307      	orrs	r7, r0
 804f472:	3568      	adds	r5, #104	; 0x68
 804f474:	e7e9      	b.n	804f44a <_fwalk_reent+0x12>

0804f476 <__retarget_lock_init_recursive>:
 804f476:	4770      	bx	lr

0804f478 <__retarget_lock_acquire_recursive>:
 804f478:	4770      	bx	lr

0804f47a <__retarget_lock_release_recursive>:
 804f47a:	4770      	bx	lr

0804f47c <__swhatbuf_r>:
 804f47c:	b570      	push	{r4, r5, r6, lr}
 804f47e:	460e      	mov	r6, r1
 804f480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804f484:	b096      	sub	sp, #88	; 0x58
 804f486:	4614      	mov	r4, r2
 804f488:	2900      	cmp	r1, #0
 804f48a:	461d      	mov	r5, r3
 804f48c:	da07      	bge.n	804f49e <__swhatbuf_r+0x22>
 804f48e:	2300      	movs	r3, #0
 804f490:	602b      	str	r3, [r5, #0]
 804f492:	89b3      	ldrh	r3, [r6, #12]
 804f494:	061a      	lsls	r2, r3, #24
 804f496:	d410      	bmi.n	804f4ba <__swhatbuf_r+0x3e>
 804f498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 804f49c:	e00e      	b.n	804f4bc <__swhatbuf_r+0x40>
 804f49e:	466a      	mov	r2, sp
 804f4a0:	f000 fc60 	bl	804fd64 <_fstat_r>
 804f4a4:	2800      	cmp	r0, #0
 804f4a6:	dbf2      	blt.n	804f48e <__swhatbuf_r+0x12>
 804f4a8:	9a01      	ldr	r2, [sp, #4]
 804f4aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 804f4ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 804f4b2:	425a      	negs	r2, r3
 804f4b4:	415a      	adcs	r2, r3
 804f4b6:	602a      	str	r2, [r5, #0]
 804f4b8:	e7ee      	b.n	804f498 <__swhatbuf_r+0x1c>
 804f4ba:	2340      	movs	r3, #64	; 0x40
 804f4bc:	2000      	movs	r0, #0
 804f4be:	6023      	str	r3, [r4, #0]
 804f4c0:	b016      	add	sp, #88	; 0x58
 804f4c2:	bd70      	pop	{r4, r5, r6, pc}

0804f4c4 <__smakebuf_r>:
 804f4c4:	898b      	ldrh	r3, [r1, #12]
 804f4c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804f4c8:	079d      	lsls	r5, r3, #30
 804f4ca:	4606      	mov	r6, r0
 804f4cc:	460c      	mov	r4, r1
 804f4ce:	d507      	bpl.n	804f4e0 <__smakebuf_r+0x1c>
 804f4d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 804f4d4:	6023      	str	r3, [r4, #0]
 804f4d6:	6123      	str	r3, [r4, #16]
 804f4d8:	2301      	movs	r3, #1
 804f4da:	6163      	str	r3, [r4, #20]
 804f4dc:	b002      	add	sp, #8
 804f4de:	bd70      	pop	{r4, r5, r6, pc}
 804f4e0:	ab01      	add	r3, sp, #4
 804f4e2:	466a      	mov	r2, sp
 804f4e4:	f7ff ffca 	bl	804f47c <__swhatbuf_r>
 804f4e8:	9900      	ldr	r1, [sp, #0]
 804f4ea:	4605      	mov	r5, r0
 804f4ec:	4630      	mov	r0, r6
 804f4ee:	f000 f879 	bl	804f5e4 <_malloc_r>
 804f4f2:	b948      	cbnz	r0, 804f508 <__smakebuf_r+0x44>
 804f4f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804f4f8:	059a      	lsls	r2, r3, #22
 804f4fa:	d4ef      	bmi.n	804f4dc <__smakebuf_r+0x18>
 804f4fc:	f023 0303 	bic.w	r3, r3, #3
 804f500:	f043 0302 	orr.w	r3, r3, #2
 804f504:	81a3      	strh	r3, [r4, #12]
 804f506:	e7e3      	b.n	804f4d0 <__smakebuf_r+0xc>
 804f508:	4b0d      	ldr	r3, [pc, #52]	; (804f540 <__smakebuf_r+0x7c>)
 804f50a:	62b3      	str	r3, [r6, #40]	; 0x28
 804f50c:	89a3      	ldrh	r3, [r4, #12]
 804f50e:	6020      	str	r0, [r4, #0]
 804f510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 804f514:	6120      	str	r0, [r4, #16]
 804f516:	81a3      	strh	r3, [r4, #12]
 804f518:	9b00      	ldr	r3, [sp, #0]
 804f51a:	6163      	str	r3, [r4, #20]
 804f51c:	9b01      	ldr	r3, [sp, #4]
 804f51e:	b15b      	cbz	r3, 804f538 <__smakebuf_r+0x74>
 804f520:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804f524:	4630      	mov	r0, r6
 804f526:	f000 fc2f 	bl	804fd88 <_isatty_r>
 804f52a:	b128      	cbz	r0, 804f538 <__smakebuf_r+0x74>
 804f52c:	89a3      	ldrh	r3, [r4, #12]
 804f52e:	f023 0303 	bic.w	r3, r3, #3
 804f532:	f043 0301 	orr.w	r3, r3, #1
 804f536:	81a3      	strh	r3, [r4, #12]
 804f538:	89a0      	ldrh	r0, [r4, #12]
 804f53a:	4305      	orrs	r5, r0
 804f53c:	81a5      	strh	r5, [r4, #12]
 804f53e:	e7cd      	b.n	804f4dc <__smakebuf_r+0x18>
 804f540:	0804f2d5 	.word	0x0804f2d5

0804f544 <_free_r>:
 804f544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 804f546:	2900      	cmp	r1, #0
 804f548:	d047      	beq.n	804f5da <_free_r+0x96>
 804f54a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 804f54e:	1f0c      	subs	r4, r1, #4
 804f550:	9001      	str	r0, [sp, #4]
 804f552:	2b00      	cmp	r3, #0
 804f554:	bfb8      	it	lt
 804f556:	18e4      	addlt	r4, r4, r3
 804f558:	f000 fc46 	bl	804fde8 <__malloc_lock>
 804f55c:	4a20      	ldr	r2, [pc, #128]	; (804f5e0 <_free_r+0x9c>)
 804f55e:	9801      	ldr	r0, [sp, #4]
 804f560:	6813      	ldr	r3, [r2, #0]
 804f562:	4615      	mov	r5, r2
 804f564:	b933      	cbnz	r3, 804f574 <_free_r+0x30>
 804f566:	6063      	str	r3, [r4, #4]
 804f568:	6014      	str	r4, [r2, #0]
 804f56a:	b003      	add	sp, #12
 804f56c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 804f570:	f000 bc40 	b.w	804fdf4 <__malloc_unlock>
 804f574:	42a3      	cmp	r3, r4
 804f576:	d90b      	bls.n	804f590 <_free_r+0x4c>
 804f578:	6821      	ldr	r1, [r4, #0]
 804f57a:	1862      	adds	r2, r4, r1
 804f57c:	4293      	cmp	r3, r2
 804f57e:	bf02      	ittt	eq
 804f580:	681a      	ldreq	r2, [r3, #0]
 804f582:	685b      	ldreq	r3, [r3, #4]
 804f584:	1852      	addeq	r2, r2, r1
 804f586:	6063      	str	r3, [r4, #4]
 804f588:	bf08      	it	eq
 804f58a:	6022      	streq	r2, [r4, #0]
 804f58c:	602c      	str	r4, [r5, #0]
 804f58e:	e7ec      	b.n	804f56a <_free_r+0x26>
 804f590:	461a      	mov	r2, r3
 804f592:	685b      	ldr	r3, [r3, #4]
 804f594:	b10b      	cbz	r3, 804f59a <_free_r+0x56>
 804f596:	42a3      	cmp	r3, r4
 804f598:	d9fa      	bls.n	804f590 <_free_r+0x4c>
 804f59a:	6811      	ldr	r1, [r2, #0]
 804f59c:	1855      	adds	r5, r2, r1
 804f59e:	42a5      	cmp	r5, r4
 804f5a0:	d10b      	bne.n	804f5ba <_free_r+0x76>
 804f5a2:	6824      	ldr	r4, [r4, #0]
 804f5a4:	4421      	add	r1, r4
 804f5a6:	1854      	adds	r4, r2, r1
 804f5a8:	6011      	str	r1, [r2, #0]
 804f5aa:	42a3      	cmp	r3, r4
 804f5ac:	d1dd      	bne.n	804f56a <_free_r+0x26>
 804f5ae:	681c      	ldr	r4, [r3, #0]
 804f5b0:	685b      	ldr	r3, [r3, #4]
 804f5b2:	4421      	add	r1, r4
 804f5b4:	6053      	str	r3, [r2, #4]
 804f5b6:	6011      	str	r1, [r2, #0]
 804f5b8:	e7d7      	b.n	804f56a <_free_r+0x26>
 804f5ba:	d902      	bls.n	804f5c2 <_free_r+0x7e>
 804f5bc:	230c      	movs	r3, #12
 804f5be:	6003      	str	r3, [r0, #0]
 804f5c0:	e7d3      	b.n	804f56a <_free_r+0x26>
 804f5c2:	6825      	ldr	r5, [r4, #0]
 804f5c4:	1961      	adds	r1, r4, r5
 804f5c6:	428b      	cmp	r3, r1
 804f5c8:	bf02      	ittt	eq
 804f5ca:	6819      	ldreq	r1, [r3, #0]
 804f5cc:	685b      	ldreq	r3, [r3, #4]
 804f5ce:	1949      	addeq	r1, r1, r5
 804f5d0:	6063      	str	r3, [r4, #4]
 804f5d2:	bf08      	it	eq
 804f5d4:	6021      	streq	r1, [r4, #0]
 804f5d6:	6054      	str	r4, [r2, #4]
 804f5d8:	e7c7      	b.n	804f56a <_free_r+0x26>
 804f5da:	b003      	add	sp, #12
 804f5dc:	bd30      	pop	{r4, r5, pc}
 804f5de:	bf00      	nop
 804f5e0:	20018e4c 	.word	0x20018e4c

0804f5e4 <_malloc_r>:
 804f5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804f5e6:	1ccd      	adds	r5, r1, #3
 804f5e8:	4606      	mov	r6, r0
 804f5ea:	f025 0503 	bic.w	r5, r5, #3
 804f5ee:	3508      	adds	r5, #8
 804f5f0:	2d0c      	cmp	r5, #12
 804f5f2:	bf38      	it	cc
 804f5f4:	250c      	movcc	r5, #12
 804f5f6:	2d00      	cmp	r5, #0
 804f5f8:	db01      	blt.n	804f5fe <_malloc_r+0x1a>
 804f5fa:	42a9      	cmp	r1, r5
 804f5fc:	d903      	bls.n	804f606 <_malloc_r+0x22>
 804f5fe:	230c      	movs	r3, #12
 804f600:	6033      	str	r3, [r6, #0]
 804f602:	2000      	movs	r0, #0
 804f604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 804f606:	f000 fbef 	bl	804fde8 <__malloc_lock>
 804f60a:	4921      	ldr	r1, [pc, #132]	; (804f690 <_malloc_r+0xac>)
 804f60c:	680a      	ldr	r2, [r1, #0]
 804f60e:	4614      	mov	r4, r2
 804f610:	b99c      	cbnz	r4, 804f63a <_malloc_r+0x56>
 804f612:	4f20      	ldr	r7, [pc, #128]	; (804f694 <_malloc_r+0xb0>)
 804f614:	683b      	ldr	r3, [r7, #0]
 804f616:	b923      	cbnz	r3, 804f622 <_malloc_r+0x3e>
 804f618:	4621      	mov	r1, r4
 804f61a:	4630      	mov	r0, r6
 804f61c:	f000 fb2c 	bl	804fc78 <_sbrk_r>
 804f620:	6038      	str	r0, [r7, #0]
 804f622:	4629      	mov	r1, r5
 804f624:	4630      	mov	r0, r6
 804f626:	f000 fb27 	bl	804fc78 <_sbrk_r>
 804f62a:	1c43      	adds	r3, r0, #1
 804f62c:	d123      	bne.n	804f676 <_malloc_r+0x92>
 804f62e:	230c      	movs	r3, #12
 804f630:	4630      	mov	r0, r6
 804f632:	6033      	str	r3, [r6, #0]
 804f634:	f000 fbde 	bl	804fdf4 <__malloc_unlock>
 804f638:	e7e3      	b.n	804f602 <_malloc_r+0x1e>
 804f63a:	6823      	ldr	r3, [r4, #0]
 804f63c:	1b5b      	subs	r3, r3, r5
 804f63e:	d417      	bmi.n	804f670 <_malloc_r+0x8c>
 804f640:	2b0b      	cmp	r3, #11
 804f642:	d903      	bls.n	804f64c <_malloc_r+0x68>
 804f644:	6023      	str	r3, [r4, #0]
 804f646:	441c      	add	r4, r3
 804f648:	6025      	str	r5, [r4, #0]
 804f64a:	e004      	b.n	804f656 <_malloc_r+0x72>
 804f64c:	6863      	ldr	r3, [r4, #4]
 804f64e:	42a2      	cmp	r2, r4
 804f650:	bf0c      	ite	eq
 804f652:	600b      	streq	r3, [r1, #0]
 804f654:	6053      	strne	r3, [r2, #4]
 804f656:	4630      	mov	r0, r6
 804f658:	f000 fbcc 	bl	804fdf4 <__malloc_unlock>
 804f65c:	f104 000b 	add.w	r0, r4, #11
 804f660:	1d23      	adds	r3, r4, #4
 804f662:	f020 0007 	bic.w	r0, r0, #7
 804f666:	1ac2      	subs	r2, r0, r3
 804f668:	d0cc      	beq.n	804f604 <_malloc_r+0x20>
 804f66a:	1a1b      	subs	r3, r3, r0
 804f66c:	50a3      	str	r3, [r4, r2]
 804f66e:	e7c9      	b.n	804f604 <_malloc_r+0x20>
 804f670:	4622      	mov	r2, r4
 804f672:	6864      	ldr	r4, [r4, #4]
 804f674:	e7cc      	b.n	804f610 <_malloc_r+0x2c>
 804f676:	1cc4      	adds	r4, r0, #3
 804f678:	f024 0403 	bic.w	r4, r4, #3
 804f67c:	42a0      	cmp	r0, r4
 804f67e:	d0e3      	beq.n	804f648 <_malloc_r+0x64>
 804f680:	1a21      	subs	r1, r4, r0
 804f682:	4630      	mov	r0, r6
 804f684:	f000 faf8 	bl	804fc78 <_sbrk_r>
 804f688:	3001      	adds	r0, #1
 804f68a:	d1dd      	bne.n	804f648 <_malloc_r+0x64>
 804f68c:	e7cf      	b.n	804f62e <_malloc_r+0x4a>
 804f68e:	bf00      	nop
 804f690:	20018e4c 	.word	0x20018e4c
 804f694:	20018e50 	.word	0x20018e50

0804f698 <__sfputc_r>:
 804f698:	6893      	ldr	r3, [r2, #8]
 804f69a:	3b01      	subs	r3, #1
 804f69c:	2b00      	cmp	r3, #0
 804f69e:	6093      	str	r3, [r2, #8]
 804f6a0:	b410      	push	{r4}
 804f6a2:	da08      	bge.n	804f6b6 <__sfputc_r+0x1e>
 804f6a4:	6994      	ldr	r4, [r2, #24]
 804f6a6:	42a3      	cmp	r3, r4
 804f6a8:	db01      	blt.n	804f6ae <__sfputc_r+0x16>
 804f6aa:	290a      	cmp	r1, #10
 804f6ac:	d103      	bne.n	804f6b6 <__sfputc_r+0x1e>
 804f6ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 804f6b2:	f7ff bc6b 	b.w	804ef8c <__swbuf_r>
 804f6b6:	6813      	ldr	r3, [r2, #0]
 804f6b8:	1c58      	adds	r0, r3, #1
 804f6ba:	6010      	str	r0, [r2, #0]
 804f6bc:	4608      	mov	r0, r1
 804f6be:	7019      	strb	r1, [r3, #0]
 804f6c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 804f6c4:	4770      	bx	lr

0804f6c6 <__sfputs_r>:
 804f6c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804f6c8:	4606      	mov	r6, r0
 804f6ca:	460f      	mov	r7, r1
 804f6cc:	4614      	mov	r4, r2
 804f6ce:	18d5      	adds	r5, r2, r3
 804f6d0:	42ac      	cmp	r4, r5
 804f6d2:	d101      	bne.n	804f6d8 <__sfputs_r+0x12>
 804f6d4:	2000      	movs	r0, #0
 804f6d6:	e007      	b.n	804f6e8 <__sfputs_r+0x22>
 804f6d8:	463a      	mov	r2, r7
 804f6da:	f814 1b01 	ldrb.w	r1, [r4], #1
 804f6de:	4630      	mov	r0, r6
 804f6e0:	f7ff ffda 	bl	804f698 <__sfputc_r>
 804f6e4:	1c43      	adds	r3, r0, #1
 804f6e6:	d1f3      	bne.n	804f6d0 <__sfputs_r+0xa>
 804f6e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0804f6ec <_vfiprintf_r>:
 804f6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804f6f0:	460d      	mov	r5, r1
 804f6f2:	b09d      	sub	sp, #116	; 0x74
 804f6f4:	4614      	mov	r4, r2
 804f6f6:	4698      	mov	r8, r3
 804f6f8:	4606      	mov	r6, r0
 804f6fa:	b118      	cbz	r0, 804f704 <_vfiprintf_r+0x18>
 804f6fc:	6983      	ldr	r3, [r0, #24]
 804f6fe:	b90b      	cbnz	r3, 804f704 <_vfiprintf_r+0x18>
 804f700:	f7ff fe1c 	bl	804f33c <__sinit>
 804f704:	4b89      	ldr	r3, [pc, #548]	; (804f92c <_vfiprintf_r+0x240>)
 804f706:	429d      	cmp	r5, r3
 804f708:	d11b      	bne.n	804f742 <_vfiprintf_r+0x56>
 804f70a:	6875      	ldr	r5, [r6, #4]
 804f70c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804f70e:	07d9      	lsls	r1, r3, #31
 804f710:	d405      	bmi.n	804f71e <_vfiprintf_r+0x32>
 804f712:	89ab      	ldrh	r3, [r5, #12]
 804f714:	059a      	lsls	r2, r3, #22
 804f716:	d402      	bmi.n	804f71e <_vfiprintf_r+0x32>
 804f718:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804f71a:	f7ff fead 	bl	804f478 <__retarget_lock_acquire_recursive>
 804f71e:	89ab      	ldrh	r3, [r5, #12]
 804f720:	071b      	lsls	r3, r3, #28
 804f722:	d501      	bpl.n	804f728 <_vfiprintf_r+0x3c>
 804f724:	692b      	ldr	r3, [r5, #16]
 804f726:	b9eb      	cbnz	r3, 804f764 <_vfiprintf_r+0x78>
 804f728:	4629      	mov	r1, r5
 804f72a:	4630      	mov	r0, r6
 804f72c:	f7ff fc80 	bl	804f030 <__swsetup_r>
 804f730:	b1c0      	cbz	r0, 804f764 <_vfiprintf_r+0x78>
 804f732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804f734:	07dc      	lsls	r4, r3, #31
 804f736:	d50e      	bpl.n	804f756 <_vfiprintf_r+0x6a>
 804f738:	f04f 30ff 	mov.w	r0, #4294967295
 804f73c:	b01d      	add	sp, #116	; 0x74
 804f73e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804f742:	4b7b      	ldr	r3, [pc, #492]	; (804f930 <_vfiprintf_r+0x244>)
 804f744:	429d      	cmp	r5, r3
 804f746:	d101      	bne.n	804f74c <_vfiprintf_r+0x60>
 804f748:	68b5      	ldr	r5, [r6, #8]
 804f74a:	e7df      	b.n	804f70c <_vfiprintf_r+0x20>
 804f74c:	4b79      	ldr	r3, [pc, #484]	; (804f934 <_vfiprintf_r+0x248>)
 804f74e:	429d      	cmp	r5, r3
 804f750:	bf08      	it	eq
 804f752:	68f5      	ldreq	r5, [r6, #12]
 804f754:	e7da      	b.n	804f70c <_vfiprintf_r+0x20>
 804f756:	89ab      	ldrh	r3, [r5, #12]
 804f758:	0598      	lsls	r0, r3, #22
 804f75a:	d4ed      	bmi.n	804f738 <_vfiprintf_r+0x4c>
 804f75c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804f75e:	f7ff fe8c 	bl	804f47a <__retarget_lock_release_recursive>
 804f762:	e7e9      	b.n	804f738 <_vfiprintf_r+0x4c>
 804f764:	2300      	movs	r3, #0
 804f766:	f8cd 800c 	str.w	r8, [sp, #12]
 804f76a:	f04f 0901 	mov.w	r9, #1
 804f76e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 804f938 <_vfiprintf_r+0x24c>
 804f772:	9309      	str	r3, [sp, #36]	; 0x24
 804f774:	2320      	movs	r3, #32
 804f776:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804f77a:	2330      	movs	r3, #48	; 0x30
 804f77c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 804f780:	4623      	mov	r3, r4
 804f782:	469a      	mov	sl, r3
 804f784:	f813 2b01 	ldrb.w	r2, [r3], #1
 804f788:	b10a      	cbz	r2, 804f78e <_vfiprintf_r+0xa2>
 804f78a:	2a25      	cmp	r2, #37	; 0x25
 804f78c:	d1f9      	bne.n	804f782 <_vfiprintf_r+0x96>
 804f78e:	ebba 0b04 	subs.w	fp, sl, r4
 804f792:	d00b      	beq.n	804f7ac <_vfiprintf_r+0xc0>
 804f794:	465b      	mov	r3, fp
 804f796:	4622      	mov	r2, r4
 804f798:	4629      	mov	r1, r5
 804f79a:	4630      	mov	r0, r6
 804f79c:	f7ff ff93 	bl	804f6c6 <__sfputs_r>
 804f7a0:	3001      	adds	r0, #1
 804f7a2:	f000 80aa 	beq.w	804f8fa <_vfiprintf_r+0x20e>
 804f7a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 804f7a8:	445a      	add	r2, fp
 804f7aa:	9209      	str	r2, [sp, #36]	; 0x24
 804f7ac:	f89a 3000 	ldrb.w	r3, [sl]
 804f7b0:	2b00      	cmp	r3, #0
 804f7b2:	f000 80a2 	beq.w	804f8fa <_vfiprintf_r+0x20e>
 804f7b6:	2300      	movs	r3, #0
 804f7b8:	f04f 32ff 	mov.w	r2, #4294967295
 804f7bc:	f10a 0a01 	add.w	sl, sl, #1
 804f7c0:	9304      	str	r3, [sp, #16]
 804f7c2:	9307      	str	r3, [sp, #28]
 804f7c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 804f7c8:	931a      	str	r3, [sp, #104]	; 0x68
 804f7ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804f7ce:	4654      	mov	r4, sl
 804f7d0:	2205      	movs	r2, #5
 804f7d2:	4859      	ldr	r0, [pc, #356]	; (804f938 <_vfiprintf_r+0x24c>)
 804f7d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 804f7d8:	f000 faf8 	bl	804fdcc <memchr>
 804f7dc:	9a04      	ldr	r2, [sp, #16]
 804f7de:	b9d8      	cbnz	r0, 804f818 <_vfiprintf_r+0x12c>
 804f7e0:	06d1      	lsls	r1, r2, #27
 804f7e2:	bf44      	itt	mi
 804f7e4:	2320      	movmi	r3, #32
 804f7e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804f7ea:	0713      	lsls	r3, r2, #28
 804f7ec:	bf44      	itt	mi
 804f7ee:	232b      	movmi	r3, #43	; 0x2b
 804f7f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 804f7f4:	f89a 3000 	ldrb.w	r3, [sl]
 804f7f8:	2b2a      	cmp	r3, #42	; 0x2a
 804f7fa:	d015      	beq.n	804f828 <_vfiprintf_r+0x13c>
 804f7fc:	9a07      	ldr	r2, [sp, #28]
 804f7fe:	4654      	mov	r4, sl
 804f800:	2000      	movs	r0, #0
 804f802:	f04f 0c0a 	mov.w	ip, #10
 804f806:	4621      	mov	r1, r4
 804f808:	f811 3b01 	ldrb.w	r3, [r1], #1
 804f80c:	3b30      	subs	r3, #48	; 0x30
 804f80e:	2b09      	cmp	r3, #9
 804f810:	d94e      	bls.n	804f8b0 <_vfiprintf_r+0x1c4>
 804f812:	b1b0      	cbz	r0, 804f842 <_vfiprintf_r+0x156>
 804f814:	9207      	str	r2, [sp, #28]
 804f816:	e014      	b.n	804f842 <_vfiprintf_r+0x156>
 804f818:	eba0 0308 	sub.w	r3, r0, r8
 804f81c:	46a2      	mov	sl, r4
 804f81e:	fa09 f303 	lsl.w	r3, r9, r3
 804f822:	4313      	orrs	r3, r2
 804f824:	9304      	str	r3, [sp, #16]
 804f826:	e7d2      	b.n	804f7ce <_vfiprintf_r+0xe2>
 804f828:	9b03      	ldr	r3, [sp, #12]
 804f82a:	1d19      	adds	r1, r3, #4
 804f82c:	681b      	ldr	r3, [r3, #0]
 804f82e:	2b00      	cmp	r3, #0
 804f830:	9103      	str	r1, [sp, #12]
 804f832:	bfbb      	ittet	lt
 804f834:	425b      	neglt	r3, r3
 804f836:	f042 0202 	orrlt.w	r2, r2, #2
 804f83a:	9307      	strge	r3, [sp, #28]
 804f83c:	9307      	strlt	r3, [sp, #28]
 804f83e:	bfb8      	it	lt
 804f840:	9204      	strlt	r2, [sp, #16]
 804f842:	7823      	ldrb	r3, [r4, #0]
 804f844:	2b2e      	cmp	r3, #46	; 0x2e
 804f846:	d10c      	bne.n	804f862 <_vfiprintf_r+0x176>
 804f848:	7863      	ldrb	r3, [r4, #1]
 804f84a:	2b2a      	cmp	r3, #42	; 0x2a
 804f84c:	d135      	bne.n	804f8ba <_vfiprintf_r+0x1ce>
 804f84e:	9b03      	ldr	r3, [sp, #12]
 804f850:	3402      	adds	r4, #2
 804f852:	1d1a      	adds	r2, r3, #4
 804f854:	681b      	ldr	r3, [r3, #0]
 804f856:	2b00      	cmp	r3, #0
 804f858:	9203      	str	r2, [sp, #12]
 804f85a:	bfb8      	it	lt
 804f85c:	f04f 33ff 	movlt.w	r3, #4294967295
 804f860:	9305      	str	r3, [sp, #20]
 804f862:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 804f948 <_vfiprintf_r+0x25c>
 804f866:	2203      	movs	r2, #3
 804f868:	7821      	ldrb	r1, [r4, #0]
 804f86a:	4650      	mov	r0, sl
 804f86c:	f000 faae 	bl	804fdcc <memchr>
 804f870:	b140      	cbz	r0, 804f884 <_vfiprintf_r+0x198>
 804f872:	2340      	movs	r3, #64	; 0x40
 804f874:	eba0 000a 	sub.w	r0, r0, sl
 804f878:	3401      	adds	r4, #1
 804f87a:	fa03 f000 	lsl.w	r0, r3, r0
 804f87e:	9b04      	ldr	r3, [sp, #16]
 804f880:	4303      	orrs	r3, r0
 804f882:	9304      	str	r3, [sp, #16]
 804f884:	f814 1b01 	ldrb.w	r1, [r4], #1
 804f888:	2206      	movs	r2, #6
 804f88a:	482c      	ldr	r0, [pc, #176]	; (804f93c <_vfiprintf_r+0x250>)
 804f88c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804f890:	f000 fa9c 	bl	804fdcc <memchr>
 804f894:	2800      	cmp	r0, #0
 804f896:	d03f      	beq.n	804f918 <_vfiprintf_r+0x22c>
 804f898:	4b29      	ldr	r3, [pc, #164]	; (804f940 <_vfiprintf_r+0x254>)
 804f89a:	bb1b      	cbnz	r3, 804f8e4 <_vfiprintf_r+0x1f8>
 804f89c:	9b03      	ldr	r3, [sp, #12]
 804f89e:	3307      	adds	r3, #7
 804f8a0:	f023 0307 	bic.w	r3, r3, #7
 804f8a4:	3308      	adds	r3, #8
 804f8a6:	9303      	str	r3, [sp, #12]
 804f8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 804f8aa:	443b      	add	r3, r7
 804f8ac:	9309      	str	r3, [sp, #36]	; 0x24
 804f8ae:	e767      	b.n	804f780 <_vfiprintf_r+0x94>
 804f8b0:	fb0c 3202 	mla	r2, ip, r2, r3
 804f8b4:	460c      	mov	r4, r1
 804f8b6:	2001      	movs	r0, #1
 804f8b8:	e7a5      	b.n	804f806 <_vfiprintf_r+0x11a>
 804f8ba:	2300      	movs	r3, #0
 804f8bc:	3401      	adds	r4, #1
 804f8be:	f04f 0c0a 	mov.w	ip, #10
 804f8c2:	4619      	mov	r1, r3
 804f8c4:	9305      	str	r3, [sp, #20]
 804f8c6:	4620      	mov	r0, r4
 804f8c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 804f8cc:	3a30      	subs	r2, #48	; 0x30
 804f8ce:	2a09      	cmp	r2, #9
 804f8d0:	d903      	bls.n	804f8da <_vfiprintf_r+0x1ee>
 804f8d2:	2b00      	cmp	r3, #0
 804f8d4:	d0c5      	beq.n	804f862 <_vfiprintf_r+0x176>
 804f8d6:	9105      	str	r1, [sp, #20]
 804f8d8:	e7c3      	b.n	804f862 <_vfiprintf_r+0x176>
 804f8da:	fb0c 2101 	mla	r1, ip, r1, r2
 804f8de:	4604      	mov	r4, r0
 804f8e0:	2301      	movs	r3, #1
 804f8e2:	e7f0      	b.n	804f8c6 <_vfiprintf_r+0x1da>
 804f8e4:	ab03      	add	r3, sp, #12
 804f8e6:	462a      	mov	r2, r5
 804f8e8:	a904      	add	r1, sp, #16
 804f8ea:	4630      	mov	r0, r6
 804f8ec:	9300      	str	r3, [sp, #0]
 804f8ee:	4b15      	ldr	r3, [pc, #84]	; (804f944 <_vfiprintf_r+0x258>)
 804f8f0:	e000      	b.n	804f8f4 <_vfiprintf_r+0x208>
 804f8f2:	bf00      	nop
 804f8f4:	4607      	mov	r7, r0
 804f8f6:	1c78      	adds	r0, r7, #1
 804f8f8:	d1d6      	bne.n	804f8a8 <_vfiprintf_r+0x1bc>
 804f8fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804f8fc:	07d9      	lsls	r1, r3, #31
 804f8fe:	d405      	bmi.n	804f90c <_vfiprintf_r+0x220>
 804f900:	89ab      	ldrh	r3, [r5, #12]
 804f902:	059a      	lsls	r2, r3, #22
 804f904:	d402      	bmi.n	804f90c <_vfiprintf_r+0x220>
 804f906:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804f908:	f7ff fdb7 	bl	804f47a <__retarget_lock_release_recursive>
 804f90c:	89ab      	ldrh	r3, [r5, #12]
 804f90e:	065b      	lsls	r3, r3, #25
 804f910:	f53f af12 	bmi.w	804f738 <_vfiprintf_r+0x4c>
 804f914:	9809      	ldr	r0, [sp, #36]	; 0x24
 804f916:	e711      	b.n	804f73c <_vfiprintf_r+0x50>
 804f918:	ab03      	add	r3, sp, #12
 804f91a:	462a      	mov	r2, r5
 804f91c:	a904      	add	r1, sp, #16
 804f91e:	4630      	mov	r0, r6
 804f920:	9300      	str	r3, [sp, #0]
 804f922:	4b08      	ldr	r3, [pc, #32]	; (804f944 <_vfiprintf_r+0x258>)
 804f924:	f000 f882 	bl	804fa2c <_printf_i>
 804f928:	e7e4      	b.n	804f8f4 <_vfiprintf_r+0x208>
 804f92a:	bf00      	nop
 804f92c:	0805019c 	.word	0x0805019c
 804f930:	080501bc 	.word	0x080501bc
 804f934:	0805017c 	.word	0x0805017c
 804f938:	080501dc 	.word	0x080501dc
 804f93c:	080501e6 	.word	0x080501e6
 804f940:	00000000 	.word	0x00000000
 804f944:	0804f6c7 	.word	0x0804f6c7
 804f948:	080501e2 	.word	0x080501e2

0804f94c <_printf_common>:
 804f94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804f950:	4616      	mov	r6, r2
 804f952:	4699      	mov	r9, r3
 804f954:	688a      	ldr	r2, [r1, #8]
 804f956:	4607      	mov	r7, r0
 804f958:	690b      	ldr	r3, [r1, #16]
 804f95a:	460c      	mov	r4, r1
 804f95c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 804f960:	4293      	cmp	r3, r2
 804f962:	bfb8      	it	lt
 804f964:	4613      	movlt	r3, r2
 804f966:	6033      	str	r3, [r6, #0]
 804f968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 804f96c:	b10a      	cbz	r2, 804f972 <_printf_common+0x26>
 804f96e:	3301      	adds	r3, #1
 804f970:	6033      	str	r3, [r6, #0]
 804f972:	6823      	ldr	r3, [r4, #0]
 804f974:	0699      	lsls	r1, r3, #26
 804f976:	bf42      	ittt	mi
 804f978:	6833      	ldrmi	r3, [r6, #0]
 804f97a:	3302      	addmi	r3, #2
 804f97c:	6033      	strmi	r3, [r6, #0]
 804f97e:	6825      	ldr	r5, [r4, #0]
 804f980:	f015 0506 	ands.w	r5, r5, #6
 804f984:	d106      	bne.n	804f994 <_printf_common+0x48>
 804f986:	f104 0a19 	add.w	sl, r4, #25
 804f98a:	68e3      	ldr	r3, [r4, #12]
 804f98c:	6832      	ldr	r2, [r6, #0]
 804f98e:	1a9b      	subs	r3, r3, r2
 804f990:	42ab      	cmp	r3, r5
 804f992:	dc29      	bgt.n	804f9e8 <_printf_common+0x9c>
 804f994:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 804f998:	1e13      	subs	r3, r2, #0
 804f99a:	6822      	ldr	r2, [r4, #0]
 804f99c:	bf18      	it	ne
 804f99e:	2301      	movne	r3, #1
 804f9a0:	0692      	lsls	r2, r2, #26
 804f9a2:	d42e      	bmi.n	804fa02 <_printf_common+0xb6>
 804f9a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 804f9a8:	4649      	mov	r1, r9
 804f9aa:	4638      	mov	r0, r7
 804f9ac:	47c0      	blx	r8
 804f9ae:	3001      	adds	r0, #1
 804f9b0:	d021      	beq.n	804f9f6 <_printf_common+0xaa>
 804f9b2:	6823      	ldr	r3, [r4, #0]
 804f9b4:	341a      	adds	r4, #26
 804f9b6:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 804f9ba:	f003 0306 	and.w	r3, r3, #6
 804f9be:	6832      	ldr	r2, [r6, #0]
 804f9c0:	2600      	movs	r6, #0
 804f9c2:	2b04      	cmp	r3, #4
 804f9c4:	f854 3c12 	ldr.w	r3, [r4, #-18]
 804f9c8:	bf08      	it	eq
 804f9ca:	1aad      	subeq	r5, r5, r2
 804f9cc:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 804f9d0:	bf14      	ite	ne
 804f9d2:	2500      	movne	r5, #0
 804f9d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804f9d8:	4293      	cmp	r3, r2
 804f9da:	bfc4      	itt	gt
 804f9dc:	1a9b      	subgt	r3, r3, r2
 804f9de:	18ed      	addgt	r5, r5, r3
 804f9e0:	42b5      	cmp	r5, r6
 804f9e2:	d11a      	bne.n	804fa1a <_printf_common+0xce>
 804f9e4:	2000      	movs	r0, #0
 804f9e6:	e008      	b.n	804f9fa <_printf_common+0xae>
 804f9e8:	2301      	movs	r3, #1
 804f9ea:	4652      	mov	r2, sl
 804f9ec:	4649      	mov	r1, r9
 804f9ee:	4638      	mov	r0, r7
 804f9f0:	47c0      	blx	r8
 804f9f2:	3001      	adds	r0, #1
 804f9f4:	d103      	bne.n	804f9fe <_printf_common+0xb2>
 804f9f6:	f04f 30ff 	mov.w	r0, #4294967295
 804f9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804f9fe:	3501      	adds	r5, #1
 804fa00:	e7c3      	b.n	804f98a <_printf_common+0x3e>
 804fa02:	18e1      	adds	r1, r4, r3
 804fa04:	1c5a      	adds	r2, r3, #1
 804fa06:	2030      	movs	r0, #48	; 0x30
 804fa08:	3302      	adds	r3, #2
 804fa0a:	4422      	add	r2, r4
 804fa0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 804fa10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 804fa14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804fa18:	e7c4      	b.n	804f9a4 <_printf_common+0x58>
 804fa1a:	2301      	movs	r3, #1
 804fa1c:	4622      	mov	r2, r4
 804fa1e:	4649      	mov	r1, r9
 804fa20:	4638      	mov	r0, r7
 804fa22:	47c0      	blx	r8
 804fa24:	3001      	adds	r0, #1
 804fa26:	d0e6      	beq.n	804f9f6 <_printf_common+0xaa>
 804fa28:	3601      	adds	r6, #1
 804fa2a:	e7d9      	b.n	804f9e0 <_printf_common+0x94>

0804fa2c <_printf_i>:
 804fa2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 804fa30:	460c      	mov	r4, r1
 804fa32:	4691      	mov	r9, r2
 804fa34:	4680      	mov	r8, r0
 804fa36:	469a      	mov	sl, r3
 804fa38:	7e27      	ldrb	r7, [r4, #24]
 804fa3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 804fa3e:	990c      	ldr	r1, [sp, #48]	; 0x30
 804fa40:	2f78      	cmp	r7, #120	; 0x78
 804fa42:	d807      	bhi.n	804fa54 <_printf_i+0x28>
 804fa44:	2f62      	cmp	r7, #98	; 0x62
 804fa46:	d80a      	bhi.n	804fa5e <_printf_i+0x32>
 804fa48:	2f00      	cmp	r7, #0
 804fa4a:	f000 80d8 	beq.w	804fbfe <_printf_i+0x1d2>
 804fa4e:	2f58      	cmp	r7, #88	; 0x58
 804fa50:	f000 80a3 	beq.w	804fb9a <_printf_i+0x16e>
 804fa54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 804fa58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 804fa5c:	e03a      	b.n	804fad4 <_printf_i+0xa8>
 804fa5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804fa62:	2b15      	cmp	r3, #21
 804fa64:	d8f6      	bhi.n	804fa54 <_printf_i+0x28>
 804fa66:	a001      	add	r0, pc, #4	; (adr r0, 804fa6c <_printf_i+0x40>)
 804fa68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 804fa6c:	0804fac5 	.word	0x0804fac5
 804fa70:	0804fad9 	.word	0x0804fad9
 804fa74:	0804fa55 	.word	0x0804fa55
 804fa78:	0804fa55 	.word	0x0804fa55
 804fa7c:	0804fa55 	.word	0x0804fa55
 804fa80:	0804fa55 	.word	0x0804fa55
 804fa84:	0804fad9 	.word	0x0804fad9
 804fa88:	0804fa55 	.word	0x0804fa55
 804fa8c:	0804fa55 	.word	0x0804fa55
 804fa90:	0804fa55 	.word	0x0804fa55
 804fa94:	0804fa55 	.word	0x0804fa55
 804fa98:	0804fbe5 	.word	0x0804fbe5
 804fa9c:	0804fb09 	.word	0x0804fb09
 804faa0:	0804fbc7 	.word	0x0804fbc7
 804faa4:	0804fa55 	.word	0x0804fa55
 804faa8:	0804fa55 	.word	0x0804fa55
 804faac:	0804fc07 	.word	0x0804fc07
 804fab0:	0804fa55 	.word	0x0804fa55
 804fab4:	0804fb09 	.word	0x0804fb09
 804fab8:	0804fa55 	.word	0x0804fa55
 804fabc:	0804fa55 	.word	0x0804fa55
 804fac0:	0804fbcf 	.word	0x0804fbcf
 804fac4:	680b      	ldr	r3, [r1, #0]
 804fac6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 804faca:	1d1a      	adds	r2, r3, #4
 804facc:	681b      	ldr	r3, [r3, #0]
 804face:	600a      	str	r2, [r1, #0]
 804fad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804fad4:	2301      	movs	r3, #1
 804fad6:	e0a3      	b.n	804fc20 <_printf_i+0x1f4>
 804fad8:	6825      	ldr	r5, [r4, #0]
 804fada:	6808      	ldr	r0, [r1, #0]
 804fadc:	062e      	lsls	r6, r5, #24
 804fade:	f100 0304 	add.w	r3, r0, #4
 804fae2:	d50a      	bpl.n	804fafa <_printf_i+0xce>
 804fae4:	6805      	ldr	r5, [r0, #0]
 804fae6:	600b      	str	r3, [r1, #0]
 804fae8:	2d00      	cmp	r5, #0
 804faea:	da03      	bge.n	804faf4 <_printf_i+0xc8>
 804faec:	232d      	movs	r3, #45	; 0x2d
 804faee:	426d      	negs	r5, r5
 804faf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804faf4:	485e      	ldr	r0, [pc, #376]	; (804fc70 <_printf_i+0x244>)
 804faf6:	230a      	movs	r3, #10
 804faf8:	e019      	b.n	804fb2e <_printf_i+0x102>
 804fafa:	f015 0f40 	tst.w	r5, #64	; 0x40
 804fafe:	6805      	ldr	r5, [r0, #0]
 804fb00:	600b      	str	r3, [r1, #0]
 804fb02:	bf18      	it	ne
 804fb04:	b22d      	sxthne	r5, r5
 804fb06:	e7ef      	b.n	804fae8 <_printf_i+0xbc>
 804fb08:	680b      	ldr	r3, [r1, #0]
 804fb0a:	6825      	ldr	r5, [r4, #0]
 804fb0c:	1d18      	adds	r0, r3, #4
 804fb0e:	6008      	str	r0, [r1, #0]
 804fb10:	0628      	lsls	r0, r5, #24
 804fb12:	d501      	bpl.n	804fb18 <_printf_i+0xec>
 804fb14:	681d      	ldr	r5, [r3, #0]
 804fb16:	e002      	b.n	804fb1e <_printf_i+0xf2>
 804fb18:	0669      	lsls	r1, r5, #25
 804fb1a:	d5fb      	bpl.n	804fb14 <_printf_i+0xe8>
 804fb1c:	881d      	ldrh	r5, [r3, #0]
 804fb1e:	2f6f      	cmp	r7, #111	; 0x6f
 804fb20:	4853      	ldr	r0, [pc, #332]	; (804fc70 <_printf_i+0x244>)
 804fb22:	bf0c      	ite	eq
 804fb24:	2308      	moveq	r3, #8
 804fb26:	230a      	movne	r3, #10
 804fb28:	2100      	movs	r1, #0
 804fb2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 804fb2e:	6866      	ldr	r6, [r4, #4]
 804fb30:	2e00      	cmp	r6, #0
 804fb32:	60a6      	str	r6, [r4, #8]
 804fb34:	bfa2      	ittt	ge
 804fb36:	6821      	ldrge	r1, [r4, #0]
 804fb38:	f021 0104 	bicge.w	r1, r1, #4
 804fb3c:	6021      	strge	r1, [r4, #0]
 804fb3e:	b90d      	cbnz	r5, 804fb44 <_printf_i+0x118>
 804fb40:	2e00      	cmp	r6, #0
 804fb42:	d04d      	beq.n	804fbe0 <_printf_i+0x1b4>
 804fb44:	4616      	mov	r6, r2
 804fb46:	fbb5 f1f3 	udiv	r1, r5, r3
 804fb4a:	fb03 5711 	mls	r7, r3, r1, r5
 804fb4e:	5dc7      	ldrb	r7, [r0, r7]
 804fb50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 804fb54:	462f      	mov	r7, r5
 804fb56:	460d      	mov	r5, r1
 804fb58:	42bb      	cmp	r3, r7
 804fb5a:	d9f4      	bls.n	804fb46 <_printf_i+0x11a>
 804fb5c:	2b08      	cmp	r3, #8
 804fb5e:	d10b      	bne.n	804fb78 <_printf_i+0x14c>
 804fb60:	6823      	ldr	r3, [r4, #0]
 804fb62:	07df      	lsls	r7, r3, #31
 804fb64:	d508      	bpl.n	804fb78 <_printf_i+0x14c>
 804fb66:	6923      	ldr	r3, [r4, #16]
 804fb68:	6861      	ldr	r1, [r4, #4]
 804fb6a:	4299      	cmp	r1, r3
 804fb6c:	bfde      	ittt	le
 804fb6e:	2330      	movle	r3, #48	; 0x30
 804fb70:	f806 3c01 	strble.w	r3, [r6, #-1]
 804fb74:	f106 36ff 	addle.w	r6, r6, #4294967295
 804fb78:	1b92      	subs	r2, r2, r6
 804fb7a:	6122      	str	r2, [r4, #16]
 804fb7c:	464b      	mov	r3, r9
 804fb7e:	aa03      	add	r2, sp, #12
 804fb80:	4621      	mov	r1, r4
 804fb82:	4640      	mov	r0, r8
 804fb84:	f8cd a000 	str.w	sl, [sp]
 804fb88:	f7ff fee0 	bl	804f94c <_printf_common>
 804fb8c:	3001      	adds	r0, #1
 804fb8e:	d14c      	bne.n	804fc2a <_printf_i+0x1fe>
 804fb90:	f04f 30ff 	mov.w	r0, #4294967295
 804fb94:	b004      	add	sp, #16
 804fb96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804fb9a:	4835      	ldr	r0, [pc, #212]	; (804fc70 <_printf_i+0x244>)
 804fb9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 804fba0:	6823      	ldr	r3, [r4, #0]
 804fba2:	680e      	ldr	r6, [r1, #0]
 804fba4:	061f      	lsls	r7, r3, #24
 804fba6:	f856 5b04 	ldr.w	r5, [r6], #4
 804fbaa:	600e      	str	r6, [r1, #0]
 804fbac:	d514      	bpl.n	804fbd8 <_printf_i+0x1ac>
 804fbae:	07d9      	lsls	r1, r3, #31
 804fbb0:	bf44      	itt	mi
 804fbb2:	f043 0320 	orrmi.w	r3, r3, #32
 804fbb6:	6023      	strmi	r3, [r4, #0]
 804fbb8:	b91d      	cbnz	r5, 804fbc2 <_printf_i+0x196>
 804fbba:	6823      	ldr	r3, [r4, #0]
 804fbbc:	f023 0320 	bic.w	r3, r3, #32
 804fbc0:	6023      	str	r3, [r4, #0]
 804fbc2:	2310      	movs	r3, #16
 804fbc4:	e7b0      	b.n	804fb28 <_printf_i+0xfc>
 804fbc6:	6823      	ldr	r3, [r4, #0]
 804fbc8:	f043 0320 	orr.w	r3, r3, #32
 804fbcc:	6023      	str	r3, [r4, #0]
 804fbce:	2378      	movs	r3, #120	; 0x78
 804fbd0:	4828      	ldr	r0, [pc, #160]	; (804fc74 <_printf_i+0x248>)
 804fbd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804fbd6:	e7e3      	b.n	804fba0 <_printf_i+0x174>
 804fbd8:	065e      	lsls	r6, r3, #25
 804fbda:	bf48      	it	mi
 804fbdc:	b2ad      	uxthmi	r5, r5
 804fbde:	e7e6      	b.n	804fbae <_printf_i+0x182>
 804fbe0:	4616      	mov	r6, r2
 804fbe2:	e7bb      	b.n	804fb5c <_printf_i+0x130>
 804fbe4:	680b      	ldr	r3, [r1, #0]
 804fbe6:	6826      	ldr	r6, [r4, #0]
 804fbe8:	1d1d      	adds	r5, r3, #4
 804fbea:	6960      	ldr	r0, [r4, #20]
 804fbec:	600d      	str	r5, [r1, #0]
 804fbee:	0635      	lsls	r5, r6, #24
 804fbf0:	681b      	ldr	r3, [r3, #0]
 804fbf2:	d501      	bpl.n	804fbf8 <_printf_i+0x1cc>
 804fbf4:	6018      	str	r0, [r3, #0]
 804fbf6:	e002      	b.n	804fbfe <_printf_i+0x1d2>
 804fbf8:	0671      	lsls	r1, r6, #25
 804fbfa:	d5fb      	bpl.n	804fbf4 <_printf_i+0x1c8>
 804fbfc:	8018      	strh	r0, [r3, #0]
 804fbfe:	2300      	movs	r3, #0
 804fc00:	4616      	mov	r6, r2
 804fc02:	6123      	str	r3, [r4, #16]
 804fc04:	e7ba      	b.n	804fb7c <_printf_i+0x150>
 804fc06:	680b      	ldr	r3, [r1, #0]
 804fc08:	1d1a      	adds	r2, r3, #4
 804fc0a:	600a      	str	r2, [r1, #0]
 804fc0c:	2100      	movs	r1, #0
 804fc0e:	681e      	ldr	r6, [r3, #0]
 804fc10:	6862      	ldr	r2, [r4, #4]
 804fc12:	4630      	mov	r0, r6
 804fc14:	f000 f8da 	bl	804fdcc <memchr>
 804fc18:	b108      	cbz	r0, 804fc1e <_printf_i+0x1f2>
 804fc1a:	1b80      	subs	r0, r0, r6
 804fc1c:	6060      	str	r0, [r4, #4]
 804fc1e:	6863      	ldr	r3, [r4, #4]
 804fc20:	6123      	str	r3, [r4, #16]
 804fc22:	2300      	movs	r3, #0
 804fc24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804fc28:	e7a8      	b.n	804fb7c <_printf_i+0x150>
 804fc2a:	6923      	ldr	r3, [r4, #16]
 804fc2c:	4632      	mov	r2, r6
 804fc2e:	4649      	mov	r1, r9
 804fc30:	4640      	mov	r0, r8
 804fc32:	47d0      	blx	sl
 804fc34:	3001      	adds	r0, #1
 804fc36:	d0ab      	beq.n	804fb90 <_printf_i+0x164>
 804fc38:	6823      	ldr	r3, [r4, #0]
 804fc3a:	079b      	lsls	r3, r3, #30
 804fc3c:	d413      	bmi.n	804fc66 <_printf_i+0x23a>
 804fc3e:	68e0      	ldr	r0, [r4, #12]
 804fc40:	9b03      	ldr	r3, [sp, #12]
 804fc42:	4298      	cmp	r0, r3
 804fc44:	bfb8      	it	lt
 804fc46:	4618      	movlt	r0, r3
 804fc48:	e7a4      	b.n	804fb94 <_printf_i+0x168>
 804fc4a:	2301      	movs	r3, #1
 804fc4c:	4632      	mov	r2, r6
 804fc4e:	4649      	mov	r1, r9
 804fc50:	4640      	mov	r0, r8
 804fc52:	47d0      	blx	sl
 804fc54:	3001      	adds	r0, #1
 804fc56:	d09b      	beq.n	804fb90 <_printf_i+0x164>
 804fc58:	3501      	adds	r5, #1
 804fc5a:	68e3      	ldr	r3, [r4, #12]
 804fc5c:	9903      	ldr	r1, [sp, #12]
 804fc5e:	1a5b      	subs	r3, r3, r1
 804fc60:	42ab      	cmp	r3, r5
 804fc62:	dcf2      	bgt.n	804fc4a <_printf_i+0x21e>
 804fc64:	e7eb      	b.n	804fc3e <_printf_i+0x212>
 804fc66:	2500      	movs	r5, #0
 804fc68:	f104 0619 	add.w	r6, r4, #25
 804fc6c:	e7f5      	b.n	804fc5a <_printf_i+0x22e>
 804fc6e:	bf00      	nop
 804fc70:	080501ed 	.word	0x080501ed
 804fc74:	080501fe 	.word	0x080501fe

0804fc78 <_sbrk_r>:
 804fc78:	b538      	push	{r3, r4, r5, lr}
 804fc7a:	2300      	movs	r3, #0
 804fc7c:	4d05      	ldr	r5, [pc, #20]	; (804fc94 <_sbrk_r+0x1c>)
 804fc7e:	4604      	mov	r4, r0
 804fc80:	4608      	mov	r0, r1
 804fc82:	602b      	str	r3, [r5, #0]
 804fc84:	f7f2 fe14 	bl	80428b0 <_sbrk>
 804fc88:	1c43      	adds	r3, r0, #1
 804fc8a:	d102      	bne.n	804fc92 <_sbrk_r+0x1a>
 804fc8c:	682b      	ldr	r3, [r5, #0]
 804fc8e:	b103      	cbz	r3, 804fc92 <_sbrk_r+0x1a>
 804fc90:	6023      	str	r3, [r4, #0]
 804fc92:	bd38      	pop	{r3, r4, r5, pc}
 804fc94:	20019974 	.word	0x20019974

0804fc98 <__sread>:
 804fc98:	b510      	push	{r4, lr}
 804fc9a:	460c      	mov	r4, r1
 804fc9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804fca0:	f000 f8ae 	bl	804fe00 <_read_r>
 804fca4:	2800      	cmp	r0, #0
 804fca6:	bfab      	itete	ge
 804fca8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 804fcaa:	89a3      	ldrhlt	r3, [r4, #12]
 804fcac:	181b      	addge	r3, r3, r0
 804fcae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804fcb2:	bfac      	ite	ge
 804fcb4:	6563      	strge	r3, [r4, #84]	; 0x54
 804fcb6:	81a3      	strhlt	r3, [r4, #12]
 804fcb8:	bd10      	pop	{r4, pc}

0804fcba <__swrite>:
 804fcba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804fcbe:	461f      	mov	r7, r3
 804fcc0:	898b      	ldrh	r3, [r1, #12]
 804fcc2:	4605      	mov	r5, r0
 804fcc4:	460c      	mov	r4, r1
 804fcc6:	05db      	lsls	r3, r3, #23
 804fcc8:	4616      	mov	r6, r2
 804fcca:	d505      	bpl.n	804fcd8 <__swrite+0x1e>
 804fccc:	2302      	movs	r3, #2
 804fcce:	2200      	movs	r2, #0
 804fcd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804fcd4:	f000 f868 	bl	804fda8 <_lseek_r>
 804fcd8:	89a3      	ldrh	r3, [r4, #12]
 804fcda:	4632      	mov	r2, r6
 804fcdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 804fce0:	4628      	mov	r0, r5
 804fce2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804fce6:	81a3      	strh	r3, [r4, #12]
 804fce8:	463b      	mov	r3, r7
 804fcea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 804fcee:	f000 b817 	b.w	804fd20 <_write_r>

0804fcf2 <__sseek>:
 804fcf2:	b510      	push	{r4, lr}
 804fcf4:	460c      	mov	r4, r1
 804fcf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804fcfa:	f000 f855 	bl	804fda8 <_lseek_r>
 804fcfe:	1c43      	adds	r3, r0, #1
 804fd00:	89a3      	ldrh	r3, [r4, #12]
 804fd02:	bf15      	itete	ne
 804fd04:	6560      	strne	r0, [r4, #84]	; 0x54
 804fd06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804fd0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 804fd0e:	81a3      	strheq	r3, [r4, #12]
 804fd10:	bf18      	it	ne
 804fd12:	81a3      	strhne	r3, [r4, #12]
 804fd14:	bd10      	pop	{r4, pc}

0804fd16 <__sclose>:
 804fd16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804fd1a:	f000 b813 	b.w	804fd44 <_close_r>
	...

0804fd20 <_write_r>:
 804fd20:	b538      	push	{r3, r4, r5, lr}
 804fd22:	4604      	mov	r4, r0
 804fd24:	4d06      	ldr	r5, [pc, #24]	; (804fd40 <_write_r+0x20>)
 804fd26:	4608      	mov	r0, r1
 804fd28:	4611      	mov	r1, r2
 804fd2a:	2200      	movs	r2, #0
 804fd2c:	602a      	str	r2, [r5, #0]
 804fd2e:	461a      	mov	r2, r3
 804fd30:	f7f2 fd6d 	bl	804280e <_write>
 804fd34:	1c43      	adds	r3, r0, #1
 804fd36:	d102      	bne.n	804fd3e <_write_r+0x1e>
 804fd38:	682b      	ldr	r3, [r5, #0]
 804fd3a:	b103      	cbz	r3, 804fd3e <_write_r+0x1e>
 804fd3c:	6023      	str	r3, [r4, #0]
 804fd3e:	bd38      	pop	{r3, r4, r5, pc}
 804fd40:	20019974 	.word	0x20019974

0804fd44 <_close_r>:
 804fd44:	b538      	push	{r3, r4, r5, lr}
 804fd46:	2300      	movs	r3, #0
 804fd48:	4d05      	ldr	r5, [pc, #20]	; (804fd60 <_close_r+0x1c>)
 804fd4a:	4604      	mov	r4, r0
 804fd4c:	4608      	mov	r0, r1
 804fd4e:	602b      	str	r3, [r5, #0]
 804fd50:	f7f2 fd79 	bl	8042846 <_close>
 804fd54:	1c43      	adds	r3, r0, #1
 804fd56:	d102      	bne.n	804fd5e <_close_r+0x1a>
 804fd58:	682b      	ldr	r3, [r5, #0]
 804fd5a:	b103      	cbz	r3, 804fd5e <_close_r+0x1a>
 804fd5c:	6023      	str	r3, [r4, #0]
 804fd5e:	bd38      	pop	{r3, r4, r5, pc}
 804fd60:	20019974 	.word	0x20019974

0804fd64 <_fstat_r>:
 804fd64:	b538      	push	{r3, r4, r5, lr}
 804fd66:	2300      	movs	r3, #0
 804fd68:	4d06      	ldr	r5, [pc, #24]	; (804fd84 <_fstat_r+0x20>)
 804fd6a:	4604      	mov	r4, r0
 804fd6c:	4608      	mov	r0, r1
 804fd6e:	4611      	mov	r1, r2
 804fd70:	602b      	str	r3, [r5, #0]
 804fd72:	f7f2 fd74 	bl	804285e <_fstat>
 804fd76:	1c43      	adds	r3, r0, #1
 804fd78:	d102      	bne.n	804fd80 <_fstat_r+0x1c>
 804fd7a:	682b      	ldr	r3, [r5, #0]
 804fd7c:	b103      	cbz	r3, 804fd80 <_fstat_r+0x1c>
 804fd7e:	6023      	str	r3, [r4, #0]
 804fd80:	bd38      	pop	{r3, r4, r5, pc}
 804fd82:	bf00      	nop
 804fd84:	20019974 	.word	0x20019974

0804fd88 <_isatty_r>:
 804fd88:	b538      	push	{r3, r4, r5, lr}
 804fd8a:	2300      	movs	r3, #0
 804fd8c:	4d05      	ldr	r5, [pc, #20]	; (804fda4 <_isatty_r+0x1c>)
 804fd8e:	4604      	mov	r4, r0
 804fd90:	4608      	mov	r0, r1
 804fd92:	602b      	str	r3, [r5, #0]
 804fd94:	f7f2 fd73 	bl	804287e <_isatty>
 804fd98:	1c43      	adds	r3, r0, #1
 804fd9a:	d102      	bne.n	804fda2 <_isatty_r+0x1a>
 804fd9c:	682b      	ldr	r3, [r5, #0]
 804fd9e:	b103      	cbz	r3, 804fda2 <_isatty_r+0x1a>
 804fda0:	6023      	str	r3, [r4, #0]
 804fda2:	bd38      	pop	{r3, r4, r5, pc}
 804fda4:	20019974 	.word	0x20019974

0804fda8 <_lseek_r>:
 804fda8:	b538      	push	{r3, r4, r5, lr}
 804fdaa:	4604      	mov	r4, r0
 804fdac:	4d06      	ldr	r5, [pc, #24]	; (804fdc8 <_lseek_r+0x20>)
 804fdae:	4608      	mov	r0, r1
 804fdb0:	4611      	mov	r1, r2
 804fdb2:	2200      	movs	r2, #0
 804fdb4:	602a      	str	r2, [r5, #0]
 804fdb6:	461a      	mov	r2, r3
 804fdb8:	f7f2 fd6c 	bl	8042894 <_lseek>
 804fdbc:	1c43      	adds	r3, r0, #1
 804fdbe:	d102      	bne.n	804fdc6 <_lseek_r+0x1e>
 804fdc0:	682b      	ldr	r3, [r5, #0]
 804fdc2:	b103      	cbz	r3, 804fdc6 <_lseek_r+0x1e>
 804fdc4:	6023      	str	r3, [r4, #0]
 804fdc6:	bd38      	pop	{r3, r4, r5, pc}
 804fdc8:	20019974 	.word	0x20019974

0804fdcc <memchr>:
 804fdcc:	b2c9      	uxtb	r1, r1
 804fdce:	4402      	add	r2, r0
 804fdd0:	b510      	push	{r4, lr}
 804fdd2:	4290      	cmp	r0, r2
 804fdd4:	4603      	mov	r3, r0
 804fdd6:	d101      	bne.n	804fddc <memchr+0x10>
 804fdd8:	2300      	movs	r3, #0
 804fdda:	e003      	b.n	804fde4 <memchr+0x18>
 804fddc:	781c      	ldrb	r4, [r3, #0]
 804fdde:	3001      	adds	r0, #1
 804fde0:	428c      	cmp	r4, r1
 804fde2:	d1f6      	bne.n	804fdd2 <memchr+0x6>
 804fde4:	4618      	mov	r0, r3
 804fde6:	bd10      	pop	{r4, pc}

0804fde8 <__malloc_lock>:
 804fde8:	4801      	ldr	r0, [pc, #4]	; (804fdf0 <__malloc_lock+0x8>)
 804fdea:	f7ff bb45 	b.w	804f478 <__retarget_lock_acquire_recursive>
 804fdee:	bf00      	nop
 804fdf0:	2001996c 	.word	0x2001996c

0804fdf4 <__malloc_unlock>:
 804fdf4:	4801      	ldr	r0, [pc, #4]	; (804fdfc <__malloc_unlock+0x8>)
 804fdf6:	f7ff bb40 	b.w	804f47a <__retarget_lock_release_recursive>
 804fdfa:	bf00      	nop
 804fdfc:	2001996c 	.word	0x2001996c

0804fe00 <_read_r>:
 804fe00:	b538      	push	{r3, r4, r5, lr}
 804fe02:	4604      	mov	r4, r0
 804fe04:	4d06      	ldr	r5, [pc, #24]	; (804fe20 <_read_r+0x20>)
 804fe06:	4608      	mov	r0, r1
 804fe08:	4611      	mov	r1, r2
 804fe0a:	2200      	movs	r2, #0
 804fe0c:	602a      	str	r2, [r5, #0]
 804fe0e:	461a      	mov	r2, r3
 804fe10:	f7f2 fce0 	bl	80427d4 <_read>
 804fe14:	1c43      	adds	r3, r0, #1
 804fe16:	d102      	bne.n	804fe1e <_read_r+0x1e>
 804fe18:	682b      	ldr	r3, [r5, #0]
 804fe1a:	b103      	cbz	r3, 804fe1e <_read_r+0x1e>
 804fe1c:	6023      	str	r3, [r4, #0]
 804fe1e:	bd38      	pop	{r3, r4, r5, pc}
 804fe20:	20019974 	.word	0x20019974

0804fe24 <_init>:
 804fe24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804fe26:	bf00      	nop
 804fe28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804fe2a:	bc08      	pop	{r3}
 804fe2c:	469e      	mov	lr, r3
 804fe2e:	4770      	bx	lr

0804fe30 <_fini>:
 804fe30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804fe32:	bf00      	nop
 804fe34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 804fe36:	bc08      	pop	{r3}
 804fe38:	469e      	mov	lr, r3
 804fe3a:	4770      	bx	lr
 804fe3c:	0000      	movs	r0, r0
	...

0804fe40 <__SECURE_LEDToggle_YELLOW_veneer>:
 804fe40:	b401      	push	{r0}
 804fe42:	4802      	ldr	r0, [pc, #8]	; (804fe4c <__SECURE_LEDToggle_YELLOW_veneer+0xc>)
 804fe44:	4684      	mov	ip, r0
 804fe46:	bc01      	pop	{r0}
 804fe48:	4760      	bx	ip
 804fe4a:	bf00      	nop
 804fe4c:	0c03e019 	.word	0x0c03e019

0804fe50 <__SECURE_SystemCoreClockUpdate_veneer>:
 804fe50:	b401      	push	{r0}
 804fe52:	4802      	ldr	r0, [pc, #8]	; (804fe5c <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 804fe54:	4684      	mov	ip, r0
 804fe56:	bc01      	pop	{r0}
 804fe58:	4760      	bx	ip
 804fe5a:	bf00      	nop
 804fe5c:	0c03e009 	.word	0x0c03e009

0804fe60 <__SECURE_LEDToggle_RED_veneer>:
 804fe60:	b401      	push	{r0}
 804fe62:	4802      	ldr	r0, [pc, #8]	; (804fe6c <__SECURE_LEDToggle_RED_veneer+0xc>)
 804fe64:	4684      	mov	ip, r0
 804fe66:	bc01      	pop	{r0}
 804fe68:	4760      	bx	ip
 804fe6a:	bf00      	nop
 804fe6c:	0c03e001 	.word	0x0c03e001

0804fe70 <__SECURE_RegisterCallback_veneer>:
 804fe70:	b401      	push	{r0}
 804fe72:	4802      	ldr	r0, [pc, #8]	; (804fe7c <__SECURE_RegisterCallback_veneer+0xc>)
 804fe74:	4684      	mov	ip, r0
 804fe76:	bc01      	pop	{r0}
 804fe78:	4760      	bx	ip
 804fe7a:	bf00      	nop
 804fe7c:	0c03e011 	.word	0x0c03e011
