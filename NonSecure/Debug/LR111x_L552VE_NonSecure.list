
LR111x_L552VE_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d88  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08049f80  08049f80  00019f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804a084  0804a084  0002803c  2**0
                  CONTENTS
  4 .ARM          00000008  0804a084  0804a084  0001a084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804a08c  0804a08c  0002803c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804a08c  0804a08c  0001a08c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804a090  0804a090  0001a090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20018000  0804a094  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013a4  2001803c  0804a0d0  0002803c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200193e0  0804a0d0  000293e0  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002803c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e887  00000000  00000000  00028072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051f4  00000000  00000000  000568f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002120  00000000  00000000  0005baf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f08  00000000  00000000  0005dc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f096  00000000  00000000  0005fb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029ff1  00000000  00000000  0008ebae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012667a  00000000  00000000  000b8b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001df219  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b7c  00000000  00000000  001df26c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	2001803c 	.word	0x2001803c
 8040214:	00000000 	.word	0x00000000
 8040218:	08049f28 	.word	0x08049f28

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20018040 	.word	0x20018040
 8040234:	08049f28 	.word	0x08049f28

08040238 <__aeabi_uldivmod>:
 8040238:	b953      	cbnz	r3, 8040250 <__aeabi_uldivmod+0x18>
 804023a:	b94a      	cbnz	r2, 8040250 <__aeabi_uldivmod+0x18>
 804023c:	2900      	cmp	r1, #0
 804023e:	bf08      	it	eq
 8040240:	2800      	cmpeq	r0, #0
 8040242:	bf1c      	itt	ne
 8040244:	f04f 31ff 	movne.w	r1, #4294967295
 8040248:	f04f 30ff 	movne.w	r0, #4294967295
 804024c:	f000 b980 	b.w	8040550 <__aeabi_idiv0>
 8040250:	f1ad 0c08 	sub.w	ip, sp, #8
 8040254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040258:	f000 f806 	bl	8040268 <__udivmoddi4>
 804025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040264:	b004      	add	sp, #16
 8040266:	4770      	bx	lr

08040268 <__udivmoddi4>:
 8040268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804026c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 804026e:	4604      	mov	r4, r0
 8040270:	4688      	mov	r8, r1
 8040272:	2b00      	cmp	r3, #0
 8040274:	f040 8084 	bne.w	8040380 <__udivmoddi4+0x118>
 8040278:	428a      	cmp	r2, r1
 804027a:	4617      	mov	r7, r2
 804027c:	d943      	bls.n	8040306 <__udivmoddi4+0x9e>
 804027e:	fab2 f282 	clz	r2, r2
 8040282:	b142      	cbz	r2, 8040296 <__udivmoddi4+0x2e>
 8040284:	f1c2 0020 	rsb	r0, r2, #32
 8040288:	4091      	lsls	r1, r2
 804028a:	4097      	lsls	r7, r2
 804028c:	fa24 f000 	lsr.w	r0, r4, r0
 8040290:	4094      	lsls	r4, r2
 8040292:	ea40 0801 	orr.w	r8, r0, r1
 8040296:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 804029a:	0c23      	lsrs	r3, r4, #16
 804029c:	fa1f fe87 	uxth.w	lr, r7
 80402a0:	fbb8 f6fc 	udiv	r6, r8, ip
 80402a4:	fb0c 8116 	mls	r1, ip, r6, r8
 80402a8:	fb06 f00e 	mul.w	r0, r6, lr
 80402ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80402b0:	4298      	cmp	r0, r3
 80402b2:	d907      	bls.n	80402c4 <__udivmoddi4+0x5c>
 80402b4:	18fb      	adds	r3, r7, r3
 80402b6:	f106 31ff 	add.w	r1, r6, #4294967295
 80402ba:	d202      	bcs.n	80402c2 <__udivmoddi4+0x5a>
 80402bc:	4298      	cmp	r0, r3
 80402be:	f200 8131 	bhi.w	8040524 <__udivmoddi4+0x2bc>
 80402c2:	460e      	mov	r6, r1
 80402c4:	1a19      	subs	r1, r3, r0
 80402c6:	b2a3      	uxth	r3, r4
 80402c8:	fbb1 f0fc 	udiv	r0, r1, ip
 80402cc:	fb0c 1110 	mls	r1, ip, r0, r1
 80402d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80402d4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80402d8:	45a6      	cmp	lr, r4
 80402da:	d907      	bls.n	80402ec <__udivmoddi4+0x84>
 80402dc:	193c      	adds	r4, r7, r4
 80402de:	f100 33ff 	add.w	r3, r0, #4294967295
 80402e2:	d202      	bcs.n	80402ea <__udivmoddi4+0x82>
 80402e4:	45a6      	cmp	lr, r4
 80402e6:	f200 811a 	bhi.w	804051e <__udivmoddi4+0x2b6>
 80402ea:	4618      	mov	r0, r3
 80402ec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80402f0:	eba4 040e 	sub.w	r4, r4, lr
 80402f4:	2600      	movs	r6, #0
 80402f6:	b11d      	cbz	r5, 8040300 <__udivmoddi4+0x98>
 80402f8:	40d4      	lsrs	r4, r2
 80402fa:	2300      	movs	r3, #0
 80402fc:	e9c5 4300 	strd	r4, r3, [r5]
 8040300:	4631      	mov	r1, r6
 8040302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040306:	b902      	cbnz	r2, 804030a <__udivmoddi4+0xa2>
 8040308:	deff      	udf	#255	; 0xff
 804030a:	fab2 f282 	clz	r2, r2
 804030e:	2a00      	cmp	r2, #0
 8040310:	d152      	bne.n	80403b8 <__udivmoddi4+0x150>
 8040312:	1bcb      	subs	r3, r1, r7
 8040314:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8040318:	fa1f f887 	uxth.w	r8, r7
 804031c:	2601      	movs	r6, #1
 804031e:	0c21      	lsrs	r1, r4, #16
 8040320:	fbb3 fcfe 	udiv	ip, r3, lr
 8040324:	fb0e 301c 	mls	r0, lr, ip, r3
 8040328:	fb08 f90c 	mul.w	r9, r8, ip
 804032c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8040330:	4589      	cmp	r9, r1
 8040332:	d90b      	bls.n	804034c <__udivmoddi4+0xe4>
 8040334:	1879      	adds	r1, r7, r1
 8040336:	f10c 33ff 	add.w	r3, ip, #4294967295
 804033a:	bf2c      	ite	cs
 804033c:	2001      	movcs	r0, #1
 804033e:	2000      	movcc	r0, #0
 8040340:	4589      	cmp	r9, r1
 8040342:	d902      	bls.n	804034a <__udivmoddi4+0xe2>
 8040344:	2800      	cmp	r0, #0
 8040346:	f000 80f0 	beq.w	804052a <__udivmoddi4+0x2c2>
 804034a:	469c      	mov	ip, r3
 804034c:	eba1 0109 	sub.w	r1, r1, r9
 8040350:	b2a3      	uxth	r3, r4
 8040352:	fbb1 f0fe 	udiv	r0, r1, lr
 8040356:	fb0e 1110 	mls	r1, lr, r0, r1
 804035a:	fb08 f800 	mul.w	r8, r8, r0
 804035e:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8040362:	45a0      	cmp	r8, r4
 8040364:	d907      	bls.n	8040376 <__udivmoddi4+0x10e>
 8040366:	193c      	adds	r4, r7, r4
 8040368:	f100 33ff 	add.w	r3, r0, #4294967295
 804036c:	d202      	bcs.n	8040374 <__udivmoddi4+0x10c>
 804036e:	45a0      	cmp	r8, r4
 8040370:	f200 80d2 	bhi.w	8040518 <__udivmoddi4+0x2b0>
 8040374:	4618      	mov	r0, r3
 8040376:	eba4 0408 	sub.w	r4, r4, r8
 804037a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 804037e:	e7ba      	b.n	80402f6 <__udivmoddi4+0x8e>
 8040380:	428b      	cmp	r3, r1
 8040382:	d909      	bls.n	8040398 <__udivmoddi4+0x130>
 8040384:	2d00      	cmp	r5, #0
 8040386:	f000 80be 	beq.w	8040506 <__udivmoddi4+0x29e>
 804038a:	2600      	movs	r6, #0
 804038c:	e9c5 0100 	strd	r0, r1, [r5]
 8040390:	4630      	mov	r0, r6
 8040392:	4631      	mov	r1, r6
 8040394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040398:	fab3 f683 	clz	r6, r3
 804039c:	2e00      	cmp	r6, #0
 804039e:	d14d      	bne.n	804043c <__udivmoddi4+0x1d4>
 80403a0:	428b      	cmp	r3, r1
 80403a2:	f0c0 80b3 	bcc.w	804050c <__udivmoddi4+0x2a4>
 80403a6:	4282      	cmp	r2, r0
 80403a8:	f240 80b0 	bls.w	804050c <__udivmoddi4+0x2a4>
 80403ac:	4630      	mov	r0, r6
 80403ae:	2d00      	cmp	r5, #0
 80403b0:	d0a6      	beq.n	8040300 <__udivmoddi4+0x98>
 80403b2:	e9c5 4800 	strd	r4, r8, [r5]
 80403b6:	e7a3      	b.n	8040300 <__udivmoddi4+0x98>
 80403b8:	4097      	lsls	r7, r2
 80403ba:	f1c2 0320 	rsb	r3, r2, #32
 80403be:	fa01 f002 	lsl.w	r0, r1, r2
 80403c2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80403c6:	40d9      	lsrs	r1, r3
 80403c8:	fa24 f303 	lsr.w	r3, r4, r3
 80403cc:	fa1f f887 	uxth.w	r8, r7
 80403d0:	4094      	lsls	r4, r2
 80403d2:	4303      	orrs	r3, r0
 80403d4:	fbb1 f0fe 	udiv	r0, r1, lr
 80403d8:	0c1e      	lsrs	r6, r3, #16
 80403da:	fb0e 1110 	mls	r1, lr, r0, r1
 80403de:	fb00 fc08 	mul.w	ip, r0, r8
 80403e2:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 80403e6:	458c      	cmp	ip, r1
 80403e8:	d90e      	bls.n	8040408 <__udivmoddi4+0x1a0>
 80403ea:	1879      	adds	r1, r7, r1
 80403ec:	f100 36ff 	add.w	r6, r0, #4294967295
 80403f0:	bf2c      	ite	cs
 80403f2:	f04f 0901 	movcs.w	r9, #1
 80403f6:	f04f 0900 	movcc.w	r9, #0
 80403fa:	458c      	cmp	ip, r1
 80403fc:	d903      	bls.n	8040406 <__udivmoddi4+0x19e>
 80403fe:	f1b9 0f00 	cmp.w	r9, #0
 8040402:	f000 8096 	beq.w	8040532 <__udivmoddi4+0x2ca>
 8040406:	4630      	mov	r0, r6
 8040408:	eba1 010c 	sub.w	r1, r1, ip
 804040c:	b29b      	uxth	r3, r3
 804040e:	fbb1 f6fe 	udiv	r6, r1, lr
 8040412:	fb0e 1116 	mls	r1, lr, r6, r1
 8040416:	fb06 fc08 	mul.w	ip, r6, r8
 804041a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 804041e:	458c      	cmp	ip, r1
 8040420:	d907      	bls.n	8040432 <__udivmoddi4+0x1ca>
 8040422:	1879      	adds	r1, r7, r1
 8040424:	f106 33ff 	add.w	r3, r6, #4294967295
 8040428:	d202      	bcs.n	8040430 <__udivmoddi4+0x1c8>
 804042a:	458c      	cmp	ip, r1
 804042c:	f200 8088 	bhi.w	8040540 <__udivmoddi4+0x2d8>
 8040430:	461e      	mov	r6, r3
 8040432:	eba1 030c 	sub.w	r3, r1, ip
 8040436:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 804043a:	e770      	b.n	804031e <__udivmoddi4+0xb6>
 804043c:	f1c6 0720 	rsb	r7, r6, #32
 8040440:	fa03 f406 	lsl.w	r4, r3, r6
 8040444:	fa02 fc06 	lsl.w	ip, r2, r6
 8040448:	fa01 fe06 	lsl.w	lr, r1, r6
 804044c:	40fa      	lsrs	r2, r7
 804044e:	fa20 f807 	lsr.w	r8, r0, r7
 8040452:	40f9      	lsrs	r1, r7
 8040454:	fa00 f306 	lsl.w	r3, r0, r6
 8040458:	4322      	orrs	r2, r4
 804045a:	ea48 040e 	orr.w	r4, r8, lr
 804045e:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8040462:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8040466:	fa1f f982 	uxth.w	r9, r2
 804046a:	fbb1 faf8 	udiv	sl, r1, r8
 804046e:	fb08 111a 	mls	r1, r8, sl, r1
 8040472:	fb0a f009 	mul.w	r0, sl, r9
 8040476:	ea4e 4e01 	orr.w	lr, lr, r1, lsl #16
 804047a:	4570      	cmp	r0, lr
 804047c:	d90e      	bls.n	804049c <__udivmoddi4+0x234>
 804047e:	eb12 0e0e 	adds.w	lr, r2, lr
 8040482:	f10a 31ff 	add.w	r1, sl, #4294967295
 8040486:	bf2c      	ite	cs
 8040488:	f04f 0b01 	movcs.w	fp, #1
 804048c:	f04f 0b00 	movcc.w	fp, #0
 8040490:	4570      	cmp	r0, lr
 8040492:	d902      	bls.n	804049a <__udivmoddi4+0x232>
 8040494:	f1bb 0f00 	cmp.w	fp, #0
 8040498:	d04e      	beq.n	8040538 <__udivmoddi4+0x2d0>
 804049a:	468a      	mov	sl, r1
 804049c:	ebae 0e00 	sub.w	lr, lr, r0
 80404a0:	b2a4      	uxth	r4, r4
 80404a2:	fbbe f0f8 	udiv	r0, lr, r8
 80404a6:	fb08 ee10 	mls	lr, r8, r0, lr
 80404aa:	fb00 f909 	mul.w	r9, r0, r9
 80404ae:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80404b2:	45f1      	cmp	r9, lr
 80404b4:	d907      	bls.n	80404c6 <__udivmoddi4+0x25e>
 80404b6:	eb12 0e0e 	adds.w	lr, r2, lr
 80404ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80404be:	d201      	bcs.n	80404c4 <__udivmoddi4+0x25c>
 80404c0:	45f1      	cmp	r9, lr
 80404c2:	d840      	bhi.n	8040546 <__udivmoddi4+0x2de>
 80404c4:	4608      	mov	r0, r1
 80404c6:	ea40 400a 	orr.w	r0, r0, sl, lsl #16
 80404ca:	ebae 0e09 	sub.w	lr, lr, r9
 80404ce:	fba0 890c 	umull	r8, r9, r0, ip
 80404d2:	45ce      	cmp	lr, r9
 80404d4:	4641      	mov	r1, r8
 80404d6:	464c      	mov	r4, r9
 80404d8:	d302      	bcc.n	80404e0 <__udivmoddi4+0x278>
 80404da:	d106      	bne.n	80404ea <__udivmoddi4+0x282>
 80404dc:	4543      	cmp	r3, r8
 80404de:	d204      	bcs.n	80404ea <__udivmoddi4+0x282>
 80404e0:	3801      	subs	r0, #1
 80404e2:	ebb8 010c 	subs.w	r1, r8, ip
 80404e6:	eb69 0402 	sbc.w	r4, r9, r2
 80404ea:	b37d      	cbz	r5, 804054c <__udivmoddi4+0x2e4>
 80404ec:	1a5a      	subs	r2, r3, r1
 80404ee:	eb6e 0e04 	sbc.w	lr, lr, r4
 80404f2:	40f2      	lsrs	r2, r6
 80404f4:	fa0e f707 	lsl.w	r7, lr, r7
 80404f8:	fa2e f306 	lsr.w	r3, lr, r6
 80404fc:	2600      	movs	r6, #0
 80404fe:	4317      	orrs	r7, r2
 8040500:	e9c5 7300 	strd	r7, r3, [r5]
 8040504:	e6fc      	b.n	8040300 <__udivmoddi4+0x98>
 8040506:	462e      	mov	r6, r5
 8040508:	4628      	mov	r0, r5
 804050a:	e6f9      	b.n	8040300 <__udivmoddi4+0x98>
 804050c:	1a84      	subs	r4, r0, r2
 804050e:	eb61 0103 	sbc.w	r1, r1, r3
 8040512:	2001      	movs	r0, #1
 8040514:	4688      	mov	r8, r1
 8040516:	e74a      	b.n	80403ae <__udivmoddi4+0x146>
 8040518:	3802      	subs	r0, #2
 804051a:	443c      	add	r4, r7
 804051c:	e72b      	b.n	8040376 <__udivmoddi4+0x10e>
 804051e:	3802      	subs	r0, #2
 8040520:	443c      	add	r4, r7
 8040522:	e6e3      	b.n	80402ec <__udivmoddi4+0x84>
 8040524:	3e02      	subs	r6, #2
 8040526:	443b      	add	r3, r7
 8040528:	e6cc      	b.n	80402c4 <__udivmoddi4+0x5c>
 804052a:	f1ac 0c02 	sub.w	ip, ip, #2
 804052e:	4439      	add	r1, r7
 8040530:	e70c      	b.n	804034c <__udivmoddi4+0xe4>
 8040532:	3802      	subs	r0, #2
 8040534:	4439      	add	r1, r7
 8040536:	e767      	b.n	8040408 <__udivmoddi4+0x1a0>
 8040538:	f1aa 0a02 	sub.w	sl, sl, #2
 804053c:	4496      	add	lr, r2
 804053e:	e7ad      	b.n	804049c <__udivmoddi4+0x234>
 8040540:	3e02      	subs	r6, #2
 8040542:	4439      	add	r1, r7
 8040544:	e775      	b.n	8040432 <__udivmoddi4+0x1ca>
 8040546:	3802      	subs	r0, #2
 8040548:	4496      	add	lr, r2
 804054a:	e7bc      	b.n	80404c6 <__udivmoddi4+0x25e>
 804054c:	462e      	mov	r6, r5
 804054e:	e6d7      	b.n	8040300 <__udivmoddi4+0x98>

08040550 <__aeabi_idiv0>:
 8040550:	4770      	bx	lr
 8040552:	bf00      	nop

08040554 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8040554:	b580      	push	{r7, lr}
 8040556:	b08a      	sub	sp, #40	; 0x28
 8040558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 804055a:	f107 031c 	add.w	r3, r7, #28
 804055e:	2200      	movs	r2, #0
 8040560:	601a      	str	r2, [r3, #0]
 8040562:	605a      	str	r2, [r3, #4]
 8040564:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8040566:	1d3b      	adds	r3, r7, #4
 8040568:	2200      	movs	r2, #0
 804056a:	601a      	str	r2, [r3, #0]
 804056c:	605a      	str	r2, [r3, #4]
 804056e:	609a      	str	r2, [r3, #8]
 8040570:	60da      	str	r2, [r3, #12]
 8040572:	611a      	str	r2, [r3, #16]
 8040574:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8040576:	4b2f      	ldr	r3, [pc, #188]	; (8040634 <MX_ADC1_Init+0xe0>)
 8040578:	4a2f      	ldr	r2, [pc, #188]	; (8040638 <MX_ADC1_Init+0xe4>)
 804057a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 804057c:	4b2d      	ldr	r3, [pc, #180]	; (8040634 <MX_ADC1_Init+0xe0>)
 804057e:	2200      	movs	r2, #0
 8040580:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8040582:	4b2c      	ldr	r3, [pc, #176]	; (8040634 <MX_ADC1_Init+0xe0>)
 8040584:	2200      	movs	r2, #0
 8040586:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8040588:	4b2a      	ldr	r3, [pc, #168]	; (8040634 <MX_ADC1_Init+0xe0>)
 804058a:	2200      	movs	r2, #0
 804058c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 804058e:	4b29      	ldr	r3, [pc, #164]	; (8040634 <MX_ADC1_Init+0xe0>)
 8040590:	2200      	movs	r2, #0
 8040592:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8040594:	4b27      	ldr	r3, [pc, #156]	; (8040634 <MX_ADC1_Init+0xe0>)
 8040596:	2204      	movs	r2, #4
 8040598:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 804059a:	4b26      	ldr	r3, [pc, #152]	; (8040634 <MX_ADC1_Init+0xe0>)
 804059c:	2200      	movs	r2, #0
 804059e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80405a0:	4b24      	ldr	r3, [pc, #144]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405a2:	2200      	movs	r2, #0
 80405a4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80405a6:	4b23      	ldr	r3, [pc, #140]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405a8:	2201      	movs	r2, #1
 80405aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80405ac:	4b21      	ldr	r3, [pc, #132]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405ae:	2200      	movs	r2, #0
 80405b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80405b4:	4b1f      	ldr	r3, [pc, #124]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405b6:	2200      	movs	r2, #0
 80405b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80405ba:	4b1e      	ldr	r3, [pc, #120]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405bc:	2200      	movs	r2, #0
 80405be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80405c0:	4b1c      	ldr	r3, [pc, #112]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405c2:	2200      	movs	r2, #0
 80405c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80405c8:	4b1a      	ldr	r3, [pc, #104]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405ca:	2200      	movs	r2, #0
 80405cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80405ce:	4b19      	ldr	r3, [pc, #100]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405d0:	2200      	movs	r2, #0
 80405d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80405d6:	4817      	ldr	r0, [pc, #92]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405d8:	f002 fc96 	bl	8042f08 <HAL_ADC_Init>
 80405dc:	4603      	mov	r3, r0
 80405de:	2b00      	cmp	r3, #0
 80405e0:	d001      	beq.n	80405e6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80405e2:	f000 fc09 	bl	8040df8 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80405e6:	2300      	movs	r3, #0
 80405e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80405ea:	f107 031c 	add.w	r3, r7, #28
 80405ee:	4619      	mov	r1, r3
 80405f0:	4810      	ldr	r0, [pc, #64]	; (8040634 <MX_ADC1_Init+0xe0>)
 80405f2:	f003 fca3 	bl	8043f3c <HAL_ADCEx_MultiModeConfigChannel>
 80405f6:	4603      	mov	r3, r0
 80405f8:	2b00      	cmp	r3, #0
 80405fa:	d001      	beq.n	8040600 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80405fc:	f000 fbfc 	bl	8040df8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 8040600:	4b0e      	ldr	r3, [pc, #56]	; (804063c <MX_ADC1_Init+0xe8>)
 8040602:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8040604:	2306      	movs	r3, #6
 8040606:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8040608:	2300      	movs	r3, #0
 804060a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 804060c:	237f      	movs	r3, #127	; 0x7f
 804060e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8040610:	2304      	movs	r3, #4
 8040612:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8040614:	2300      	movs	r3, #0
 8040616:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8040618:	1d3b      	adds	r3, r7, #4
 804061a:	4619      	mov	r1, r3
 804061c:	4805      	ldr	r0, [pc, #20]	; (8040634 <MX_ADC1_Init+0xe0>)
 804061e:	f003 f84d 	bl	80436bc <HAL_ADC_ConfigChannel>
 8040622:	4603      	mov	r3, r0
 8040624:	2b00      	cmp	r3, #0
 8040626:	d001      	beq.n	804062c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8040628:	f000 fbe6 	bl	8040df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 804062c:	bf00      	nop
 804062e:	3728      	adds	r7, #40	; 0x28
 8040630:	46bd      	mov	sp, r7
 8040632:	bd80      	pop	{r7, pc}
 8040634:	20018b88 	.word	0x20018b88
 8040638:	42028000 	.word	0x42028000
 804063c:	cb840000 	.word	0xcb840000

08040640 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8040640:	b580      	push	{r7, lr}
 8040642:	b086      	sub	sp, #24
 8040644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8040646:	463b      	mov	r3, r7
 8040648:	2200      	movs	r2, #0
 804064a:	601a      	str	r2, [r3, #0]
 804064c:	605a      	str	r2, [r3, #4]
 804064e:	609a      	str	r2, [r3, #8]
 8040650:	60da      	str	r2, [r3, #12]
 8040652:	611a      	str	r2, [r3, #16]
 8040654:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8040656:	4b29      	ldr	r3, [pc, #164]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040658:	4a29      	ldr	r2, [pc, #164]	; (8040700 <MX_ADC2_Init+0xc0>)
 804065a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 804065c:	4b27      	ldr	r3, [pc, #156]	; (80406fc <MX_ADC2_Init+0xbc>)
 804065e:	2200      	movs	r2, #0
 8040660:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8040662:	4b26      	ldr	r3, [pc, #152]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040664:	2200      	movs	r2, #0
 8040666:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8040668:	4b24      	ldr	r3, [pc, #144]	; (80406fc <MX_ADC2_Init+0xbc>)
 804066a:	2200      	movs	r2, #0
 804066c:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 804066e:	4b23      	ldr	r3, [pc, #140]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040670:	2200      	movs	r2, #0
 8040672:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8040674:	4b21      	ldr	r3, [pc, #132]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040676:	2204      	movs	r2, #4
 8040678:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 804067a:	4b20      	ldr	r3, [pc, #128]	; (80406fc <MX_ADC2_Init+0xbc>)
 804067c:	2200      	movs	r2, #0
 804067e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8040680:	4b1e      	ldr	r3, [pc, #120]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040682:	2200      	movs	r2, #0
 8040684:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8040686:	4b1d      	ldr	r3, [pc, #116]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040688:	2201      	movs	r2, #1
 804068a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 804068c:	4b1b      	ldr	r3, [pc, #108]	; (80406fc <MX_ADC2_Init+0xbc>)
 804068e:	2200      	movs	r2, #0
 8040690:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8040694:	4b19      	ldr	r3, [pc, #100]	; (80406fc <MX_ADC2_Init+0xbc>)
 8040696:	2200      	movs	r2, #0
 8040698:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 804069a:	4b18      	ldr	r3, [pc, #96]	; (80406fc <MX_ADC2_Init+0xbc>)
 804069c:	2200      	movs	r2, #0
 804069e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80406a0:	4b16      	ldr	r3, [pc, #88]	; (80406fc <MX_ADC2_Init+0xbc>)
 80406a2:	2200      	movs	r2, #0
 80406a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80406a8:	4b14      	ldr	r3, [pc, #80]	; (80406fc <MX_ADC2_Init+0xbc>)
 80406aa:	2200      	movs	r2, #0
 80406ac:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80406ae:	4b13      	ldr	r3, [pc, #76]	; (80406fc <MX_ADC2_Init+0xbc>)
 80406b0:	2200      	movs	r2, #0
 80406b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80406b6:	4811      	ldr	r0, [pc, #68]	; (80406fc <MX_ADC2_Init+0xbc>)
 80406b8:	f002 fc26 	bl	8042f08 <HAL_ADC_Init>
 80406bc:	4603      	mov	r3, r0
 80406be:	2b00      	cmp	r3, #0
 80406c0:	d001      	beq.n	80406c6 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80406c2:	f000 fb99 	bl	8040df8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80406c6:	4b0f      	ldr	r3, [pc, #60]	; (8040704 <MX_ADC2_Init+0xc4>)
 80406c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80406ca:	2306      	movs	r3, #6
 80406cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80406ce:	2300      	movs	r3, #0
 80406d0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80406d2:	237f      	movs	r3, #127	; 0x7f
 80406d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80406d6:	2304      	movs	r3, #4
 80406d8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80406da:	2300      	movs	r3, #0
 80406dc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80406de:	463b      	mov	r3, r7
 80406e0:	4619      	mov	r1, r3
 80406e2:	4806      	ldr	r0, [pc, #24]	; (80406fc <MX_ADC2_Init+0xbc>)
 80406e4:	f002 ffea 	bl	80436bc <HAL_ADC_ConfigChannel>
 80406e8:	4603      	mov	r3, r0
 80406ea:	2b00      	cmp	r3, #0
 80406ec:	d001      	beq.n	80406f2 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80406ee:	f000 fb83 	bl	8040df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80406f2:	bf00      	nop
 80406f4:	3718      	adds	r7, #24
 80406f6:	46bd      	mov	sp, r7
 80406f8:	bd80      	pop	{r7, pc}
 80406fa:	bf00      	nop
 80406fc:	20018af4 	.word	0x20018af4
 8040700:	42028100 	.word	0x42028100
 8040704:	32601000 	.word	0x32601000

08040708 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8040708:	b580      	push	{r7, lr}
 804070a:	b0b0      	sub	sp, #192	; 0xc0
 804070c:	af00      	add	r7, sp, #0
 804070e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040710:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8040714:	2200      	movs	r2, #0
 8040716:	601a      	str	r2, [r3, #0]
 8040718:	605a      	str	r2, [r3, #4]
 804071a:	609a      	str	r2, [r3, #8]
 804071c:	60da      	str	r2, [r3, #12]
 804071e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040720:	f107 0318 	add.w	r3, r7, #24
 8040724:	2294      	movs	r2, #148	; 0x94
 8040726:	2100      	movs	r1, #0
 8040728:	4618      	mov	r0, r3
 804072a:	f009 fbf4 	bl	8049f16 <memset>
  if(adcHandle->Instance==ADC1)
 804072e:	687b      	ldr	r3, [r7, #4]
 8040730:	681b      	ldr	r3, [r3, #0]
 8040732:	4a69      	ldr	r2, [pc, #420]	; (80408d8 <HAL_ADC_MspInit+0x1d0>)
 8040734:	4293      	cmp	r3, r2
 8040736:	d17d      	bne.n	8040834 <HAL_ADC_MspInit+0x12c>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8040738:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 804073c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 804073e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8040742:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040746:	f107 0318 	add.w	r3, r7, #24
 804074a:	4618      	mov	r0, r3
 804074c:	f006 f990 	bl	8046a70 <HAL_RCCEx_PeriphCLKConfig>
 8040750:	4603      	mov	r3, r0
 8040752:	2b00      	cmp	r3, #0
 8040754:	d001      	beq.n	804075a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8040756:	f000 fb4f 	bl	8040df8 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 804075a:	4b60      	ldr	r3, [pc, #384]	; (80408dc <HAL_ADC_MspInit+0x1d4>)
 804075c:	681b      	ldr	r3, [r3, #0]
 804075e:	3301      	adds	r3, #1
 8040760:	4a5e      	ldr	r2, [pc, #376]	; (80408dc <HAL_ADC_MspInit+0x1d4>)
 8040762:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8040764:	4b5d      	ldr	r3, [pc, #372]	; (80408dc <HAL_ADC_MspInit+0x1d4>)
 8040766:	681b      	ldr	r3, [r3, #0]
 8040768:	2b01      	cmp	r3, #1
 804076a:	d10b      	bne.n	8040784 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC_CLK_ENABLE();
 804076c:	4b5c      	ldr	r3, [pc, #368]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 804076e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040770:	4a5b      	ldr	r2, [pc, #364]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040772:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8040776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040778:	4b59      	ldr	r3, [pc, #356]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 804077a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804077c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8040780:	617b      	str	r3, [r7, #20]
 8040782:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8040784:	4b56      	ldr	r3, [pc, #344]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040788:	4a55      	ldr	r2, [pc, #340]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 804078a:	f043 0302 	orr.w	r3, r3, #2
 804078e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040790:	4b53      	ldr	r3, [pc, #332]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040794:	f003 0302 	and.w	r3, r3, #2
 8040798:	613b      	str	r3, [r7, #16]
 804079a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = EXT_AN_Pin;
 804079c:	2302      	movs	r3, #2
 804079e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80407a2:	2303      	movs	r3, #3
 80407a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80407a8:	2300      	movs	r3, #0
 80407aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(EXT_AN_GPIO_Port, &GPIO_InitStruct);
 80407ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80407b2:	4619      	mov	r1, r3
 80407b4:	484b      	ldr	r0, [pc, #300]	; (80408e4 <HAL_ADC_MspInit+0x1dc>)
 80407b6:	f004 f96b 	bl	8044a90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Channel6;
 80407ba:	4b4b      	ldr	r3, [pc, #300]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407bc:	4a4b      	ldr	r2, [pc, #300]	; (80408ec <HAL_ADC_MspInit+0x1e4>)
 80407be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80407c0:	4b49      	ldr	r3, [pc, #292]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407c2:	2205      	movs	r2, #5
 80407c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80407c6:	4b48      	ldr	r3, [pc, #288]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407c8:	2200      	movs	r2, #0
 80407ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80407cc:	4b46      	ldr	r3, [pc, #280]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407ce:	2200      	movs	r2, #0
 80407d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80407d2:	4b45      	ldr	r3, [pc, #276]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407d4:	2280      	movs	r2, #128	; 0x80
 80407d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80407d8:	4b43      	ldr	r3, [pc, #268]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80407de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80407e0:	4b41      	ldr	r3, [pc, #260]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80407e6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80407e8:	4b3f      	ldr	r3, [pc, #252]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407ea:	2200      	movs	r2, #0
 80407ec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80407ee:	4b3e      	ldr	r3, [pc, #248]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407f0:	2200      	movs	r2, #0
 80407f2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80407f4:	483c      	ldr	r0, [pc, #240]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 80407f6:	f003 fe47 	bl	8044488 <HAL_DMA_Init>
 80407fa:	4603      	mov	r3, r0
 80407fc:	2b00      	cmp	r3, #0
 80407fe:	d001      	beq.n	8040804 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8040800:	f000 fafa 	bl	8040df8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8040804:	2110      	movs	r1, #16
 8040806:	4838      	ldr	r0, [pc, #224]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 8040808:	f004 f8af 	bl	804496a <HAL_DMA_ConfigChannelAttributes>
 804080c:	4603      	mov	r3, r0
 804080e:	2b00      	cmp	r3, #0
 8040810:	d001      	beq.n	8040816 <HAL_ADC_MspInit+0x10e>
    {
      Error_Handler();
 8040812:	f000 faf1 	bl	8040df8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8040816:	687b      	ldr	r3, [r7, #4]
 8040818:	4a33      	ldr	r2, [pc, #204]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 804081a:	651a      	str	r2, [r3, #80]	; 0x50
 804081c:	4a32      	ldr	r2, [pc, #200]	; (80408e8 <HAL_ADC_MspInit+0x1e0>)
 804081e:	687b      	ldr	r3, [r7, #4]
 8040820:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8040822:	2200      	movs	r2, #0
 8040824:	2100      	movs	r1, #0
 8040826:	2025      	movs	r0, #37	; 0x25
 8040828:	f003 fd0e 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 804082c:	2025      	movs	r0, #37	; 0x25
 804082e:	f003 fd25 	bl	804427c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8040832:	e04d      	b.n	80408d0 <HAL_ADC_MspInit+0x1c8>
  else if(adcHandle->Instance==ADC2)
 8040834:	687b      	ldr	r3, [r7, #4]
 8040836:	681b      	ldr	r3, [r3, #0]
 8040838:	4a2d      	ldr	r2, [pc, #180]	; (80408f0 <HAL_ADC_MspInit+0x1e8>)
 804083a:	4293      	cmp	r3, r2
 804083c:	d148      	bne.n	80408d0 <HAL_ADC_MspInit+0x1c8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 804083e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8040842:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8040844:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8040848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 804084c:	f107 0318 	add.w	r3, r7, #24
 8040850:	4618      	mov	r0, r3
 8040852:	f006 f90d 	bl	8046a70 <HAL_RCCEx_PeriphCLKConfig>
 8040856:	4603      	mov	r3, r0
 8040858:	2b00      	cmp	r3, #0
 804085a:	d001      	beq.n	8040860 <HAL_ADC_MspInit+0x158>
      Error_Handler();
 804085c:	f000 facc 	bl	8040df8 <Error_Handler>
    HAL_RCC_ADC_CLK_ENABLED++;
 8040860:	4b1e      	ldr	r3, [pc, #120]	; (80408dc <HAL_ADC_MspInit+0x1d4>)
 8040862:	681b      	ldr	r3, [r3, #0]
 8040864:	3301      	adds	r3, #1
 8040866:	4a1d      	ldr	r2, [pc, #116]	; (80408dc <HAL_ADC_MspInit+0x1d4>)
 8040868:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 804086a:	4b1c      	ldr	r3, [pc, #112]	; (80408dc <HAL_ADC_MspInit+0x1d4>)
 804086c:	681b      	ldr	r3, [r3, #0]
 804086e:	2b01      	cmp	r3, #1
 8040870:	d10b      	bne.n	804088a <HAL_ADC_MspInit+0x182>
      __HAL_RCC_ADC_CLK_ENABLE();
 8040872:	4b1b      	ldr	r3, [pc, #108]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040876:	4a1a      	ldr	r2, [pc, #104]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040878:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 804087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 804087e:	4b18      	ldr	r3, [pc, #96]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8040886:	60fb      	str	r3, [r7, #12]
 8040888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 804088a:	4b15      	ldr	r3, [pc, #84]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 804088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804088e:	4a14      	ldr	r2, [pc, #80]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040890:	f043 0301 	orr.w	r3, r3, #1
 8040894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040896:	4b12      	ldr	r3, [pc, #72]	; (80408e0 <HAL_ADC_MspInit+0x1d8>)
 8040898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804089a:	f003 0301 	and.w	r3, r3, #1
 804089e:	60bb      	str	r3, [r7, #8]
 80408a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CURRENT_AN_Pin;
 80408a2:	2380      	movs	r3, #128	; 0x80
 80408a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80408a8:	2303      	movs	r3, #3
 80408aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80408ae:	2300      	movs	r3, #0
 80408b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(CURRENT_AN_GPIO_Port, &GPIO_InitStruct);
 80408b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80408b8:	4619      	mov	r1, r3
 80408ba:	480e      	ldr	r0, [pc, #56]	; (80408f4 <HAL_ADC_MspInit+0x1ec>)
 80408bc:	f004 f8e8 	bl	8044a90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80408c0:	2200      	movs	r2, #0
 80408c2:	2100      	movs	r1, #0
 80408c4:	2025      	movs	r0, #37	; 0x25
 80408c6:	f003 fcbf 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80408ca:	2025      	movs	r0, #37	; 0x25
 80408cc:	f003 fcd6 	bl	804427c <HAL_NVIC_EnableIRQ>
}
 80408d0:	bf00      	nop
 80408d2:	37c0      	adds	r7, #192	; 0xc0
 80408d4:	46bd      	mov	sp, r7
 80408d6:	bd80      	pop	{r7, pc}
 80408d8:	42028000 	.word	0x42028000
 80408dc:	20018058 	.word	0x20018058
 80408e0:	40021000 	.word	0x40021000
 80408e4:	42020400 	.word	0x42020400
 80408e8:	20018c1c 	.word	0x20018c1c
 80408ec:	4002046c 	.word	0x4002046c
 80408f0:	42028100 	.word	0x42028100
 80408f4:	42020000 	.word	0x42020000

080408f8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80408f8:	b580      	push	{r7, lr}
 80408fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80408fc:	4b0d      	ldr	r3, [pc, #52]	; (8040934 <MX_CRC_Init+0x3c>)
 80408fe:	4a0e      	ldr	r2, [pc, #56]	; (8040938 <MX_CRC_Init+0x40>)
 8040900:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8040902:	4b0c      	ldr	r3, [pc, #48]	; (8040934 <MX_CRC_Init+0x3c>)
 8040904:	2200      	movs	r2, #0
 8040906:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8040908:	4b0a      	ldr	r3, [pc, #40]	; (8040934 <MX_CRC_Init+0x3c>)
 804090a:	2200      	movs	r2, #0
 804090c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 804090e:	4b09      	ldr	r3, [pc, #36]	; (8040934 <MX_CRC_Init+0x3c>)
 8040910:	2200      	movs	r2, #0
 8040912:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8040914:	4b07      	ldr	r3, [pc, #28]	; (8040934 <MX_CRC_Init+0x3c>)
 8040916:	2200      	movs	r2, #0
 8040918:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 804091a:	4b06      	ldr	r3, [pc, #24]	; (8040934 <MX_CRC_Init+0x3c>)
 804091c:	2201      	movs	r2, #1
 804091e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8040920:	4804      	ldr	r0, [pc, #16]	; (8040934 <MX_CRC_Init+0x3c>)
 8040922:	f003 fcc7 	bl	80442b4 <HAL_CRC_Init>
 8040926:	4603      	mov	r3, r0
 8040928:	2b00      	cmp	r3, #0
 804092a:	d001      	beq.n	8040930 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 804092c:	f000 fa64 	bl	8040df8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8040930:	bf00      	nop
 8040932:	bd80      	pop	{r7, pc}
 8040934:	20018c84 	.word	0x20018c84
 8040938:	40023000 	.word	0x40023000

0804093c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 804093c:	b480      	push	{r7}
 804093e:	b085      	sub	sp, #20
 8040940:	af00      	add	r7, sp, #0
 8040942:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8040944:	687b      	ldr	r3, [r7, #4]
 8040946:	681b      	ldr	r3, [r3, #0]
 8040948:	4a0a      	ldr	r2, [pc, #40]	; (8040974 <HAL_CRC_MspInit+0x38>)
 804094a:	4293      	cmp	r3, r2
 804094c:	d10b      	bne.n	8040966 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 804094e:	4b0a      	ldr	r3, [pc, #40]	; (8040978 <HAL_CRC_MspInit+0x3c>)
 8040950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8040952:	4a09      	ldr	r2, [pc, #36]	; (8040978 <HAL_CRC_MspInit+0x3c>)
 8040954:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8040958:	6493      	str	r3, [r2, #72]	; 0x48
 804095a:	4b07      	ldr	r3, [pc, #28]	; (8040978 <HAL_CRC_MspInit+0x3c>)
 804095c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804095e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8040962:	60fb      	str	r3, [r7, #12]
 8040964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8040966:	bf00      	nop
 8040968:	3714      	adds	r7, #20
 804096a:	46bd      	mov	sp, r7
 804096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040970:	4770      	bx	lr
 8040972:	bf00      	nop
 8040974:	40023000 	.word	0x40023000
 8040978:	40021000 	.word	0x40021000

0804097c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 804097c:	b580      	push	{r7, lr}
 804097e:	b084      	sub	sp, #16
 8040980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8040982:	4b30      	ldr	r3, [pc, #192]	; (8040a44 <MX_DMA_Init+0xc8>)
 8040984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8040986:	4a2f      	ldr	r2, [pc, #188]	; (8040a44 <MX_DMA_Init+0xc8>)
 8040988:	f043 0304 	orr.w	r3, r3, #4
 804098c:	6493      	str	r3, [r2, #72]	; 0x48
 804098e:	4b2d      	ldr	r3, [pc, #180]	; (8040a44 <MX_DMA_Init+0xc8>)
 8040990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8040992:	f003 0304 	and.w	r3, r3, #4
 8040996:	60fb      	str	r3, [r7, #12]
 8040998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 804099a:	4b2a      	ldr	r3, [pc, #168]	; (8040a44 <MX_DMA_Init+0xc8>)
 804099c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804099e:	4a29      	ldr	r2, [pc, #164]	; (8040a44 <MX_DMA_Init+0xc8>)
 80409a0:	f043 0301 	orr.w	r3, r3, #1
 80409a4:	6493      	str	r3, [r2, #72]	; 0x48
 80409a6:	4b27      	ldr	r3, [pc, #156]	; (8040a44 <MX_DMA_Init+0xc8>)
 80409a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80409aa:	f003 0301 	and.w	r3, r3, #1
 80409ae:	60bb      	str	r3, [r7, #8]
 80409b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80409b2:	4b24      	ldr	r3, [pc, #144]	; (8040a44 <MX_DMA_Init+0xc8>)
 80409b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80409b6:	4a23      	ldr	r2, [pc, #140]	; (8040a44 <MX_DMA_Init+0xc8>)
 80409b8:	f043 0302 	orr.w	r3, r3, #2
 80409bc:	6493      	str	r3, [r2, #72]	; 0x48
 80409be:	4b21      	ldr	r3, [pc, #132]	; (8040a44 <MX_DMA_Init+0xc8>)
 80409c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80409c2:	f003 0302 	and.w	r3, r3, #2
 80409c6:	607b      	str	r3, [r7, #4]
 80409c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80409ca:	2200      	movs	r2, #0
 80409cc:	2100      	movs	r1, #0
 80409ce:	2021      	movs	r0, #33	; 0x21
 80409d0:	f003 fc3a 	bl	8044248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80409d4:	2021      	movs	r0, #33	; 0x21
 80409d6:	f003 fc51 	bl	804427c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80409da:	2200      	movs	r2, #0
 80409dc:	2100      	movs	r1, #0
 80409de:	2022      	movs	r0, #34	; 0x22
 80409e0:	f003 fc32 	bl	8044248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80409e4:	2022      	movs	r0, #34	; 0x22
 80409e6:	f003 fc49 	bl	804427c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel8_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel8_IRQn, 0, 0);
 80409ea:	2200      	movs	r2, #0
 80409ec:	2100      	movs	r1, #0
 80409ee:	2024      	movs	r0, #36	; 0x24
 80409f0:	f003 fc2a 	bl	8044248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel8_IRQn);
 80409f4:	2024      	movs	r0, #36	; 0x24
 80409f6:	f003 fc41 	bl	804427c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80409fa:	2200      	movs	r2, #0
 80409fc:	2100      	movs	r1, #0
 80409fe:	2050      	movs	r0, #80	; 0x50
 8040a00:	f003 fc22 	bl	8044248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8040a04:	2050      	movs	r0, #80	; 0x50
 8040a06:	f003 fc39 	bl	804427c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8040a0a:	2200      	movs	r2, #0
 8040a0c:	2100      	movs	r1, #0
 8040a0e:	2051      	movs	r0, #81	; 0x51
 8040a10:	f003 fc1a 	bl	8044248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8040a14:	2051      	movs	r0, #81	; 0x51
 8040a16:	f003 fc31 	bl	804427c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8040a1a:	2200      	movs	r2, #0
 8040a1c:	2100      	movs	r1, #0
 8040a1e:	2052      	movs	r0, #82	; 0x52
 8040a20:	f003 fc12 	bl	8044248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8040a24:	2052      	movs	r0, #82	; 0x52
 8040a26:	f003 fc29 	bl	804427c <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8040a2a:	2200      	movs	r2, #0
 8040a2c:	2100      	movs	r1, #0
 8040a2e:	2055      	movs	r0, #85	; 0x55
 8040a30:	f003 fc0a 	bl	8044248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8040a34:	2055      	movs	r0, #85	; 0x55
 8040a36:	f003 fc21 	bl	804427c <HAL_NVIC_EnableIRQ>

}
 8040a3a:	bf00      	nop
 8040a3c:	3710      	adds	r7, #16
 8040a3e:	46bd      	mov	sp, r7
 8040a40:	bd80      	pop	{r7, pc}
 8040a42:	bf00      	nop
 8040a44:	40021000 	.word	0x40021000

08040a48 <MX_GPIO_Init>:
     PB15   ------> UCPD1_CC2
     PA15 (JTDI)   ------> UCPD1_CC1
     PB5   ------> UCPD1_DBCC1
*/
void MX_GPIO_Init(void)
{
 8040a48:	b580      	push	{r7, lr}
 8040a4a:	b08a      	sub	sp, #40	; 0x28
 8040a4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040a4e:	f107 0314 	add.w	r3, r7, #20
 8040a52:	2200      	movs	r2, #0
 8040a54:	601a      	str	r2, [r3, #0]
 8040a56:	605a      	str	r2, [r3, #4]
 8040a58:	609a      	str	r2, [r3, #8]
 8040a5a:	60da      	str	r2, [r3, #12]
 8040a5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8040a5e:	4b5e      	ldr	r3, [pc, #376]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040a62:	4a5d      	ldr	r2, [pc, #372]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040a64:	f043 0310 	orr.w	r3, r3, #16
 8040a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040a6a:	4b5b      	ldr	r3, [pc, #364]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040a6e:	f003 0310 	and.w	r3, r3, #16
 8040a72:	613b      	str	r3, [r7, #16]
 8040a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040a76:	4b58      	ldr	r3, [pc, #352]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040a7a:	4a57      	ldr	r2, [pc, #348]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040a7c:	f043 0301 	orr.w	r3, r3, #1
 8040a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040a82:	4b55      	ldr	r3, [pc, #340]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040a86:	f003 0301 	and.w	r3, r3, #1
 8040a8a:	60fb      	str	r3, [r7, #12]
 8040a8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040a8e:	4b52      	ldr	r3, [pc, #328]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040a92:	4a51      	ldr	r2, [pc, #324]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040a94:	f043 0304 	orr.w	r3, r3, #4
 8040a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040a9a:	4b4f      	ldr	r3, [pc, #316]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040a9e:	f003 0304 	and.w	r3, r3, #4
 8040aa2:	60bb      	str	r3, [r7, #8]
 8040aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040aa6:	4b4c      	ldr	r3, [pc, #304]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040aaa:	4a4b      	ldr	r2, [pc, #300]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040aac:	f043 0302 	orr.w	r3, r3, #2
 8040ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040ab2:	4b49      	ldr	r3, [pc, #292]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040ab6:	f003 0302 	and.w	r3, r3, #2
 8040aba:	607b      	str	r3, [r7, #4]
 8040abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040abe:	4b46      	ldr	r3, [pc, #280]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040ac2:	4a45      	ldr	r2, [pc, #276]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040ac4:	f043 0308 	orr.w	r3, r3, #8
 8040ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040aca:	4b43      	ldr	r3, [pc, #268]	; (8040bd8 <MX_GPIO_Init+0x190>)
 8040acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040ace:	f003 0308 	and.w	r3, r3, #8
 8040ad2:	603b      	str	r3, [r7, #0]
 8040ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CURRENT_CS_GPIO_Port, CURRENT_CS_Pin, GPIO_PIN_SET);
 8040ad6:	2201      	movs	r2, #1
 8040ad8:	2110      	movs	r1, #16
 8040ada:	4840      	ldr	r0, [pc, #256]	; (8040bdc <MX_GPIO_Init+0x194>)
 8040adc:	f004 fa46 	bl	8044f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LR_NSS_Pin|LR_NRST_Pin, GPIO_PIN_SET);
 8040ae0:	2201      	movs	r2, #1
 8040ae2:	2105      	movs	r1, #5
 8040ae4:	483e      	ldr	r0, [pc, #248]	; (8040be0 <MX_GPIO_Init+0x198>)
 8040ae6:	f004 fa41 	bl	8044f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYO_DEN_GPIO_Port, GYO_DEN_Pin, GPIO_PIN_RESET);
 8040aea:	2200      	movs	r2, #0
 8040aec:	2102      	movs	r1, #2
 8040aee:	483d      	ldr	r0, [pc, #244]	; (8040be4 <MX_GPIO_Init+0x19c>)
 8040af0:	f004 fa3c 	bl	8044f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYO_INT2_Pin;
 8040af4:	2308      	movs	r3, #8
 8040af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8040af8:	4b3b      	ldr	r3, [pc, #236]	; (8040be8 <MX_GPIO_Init+0x1a0>)
 8040afa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040afc:	2300      	movs	r3, #0
 8040afe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GYO_INT2_GPIO_Port, &GPIO_InitStruct);
 8040b00:	f107 0314 	add.w	r3, r7, #20
 8040b04:	4619      	mov	r1, r3
 8040b06:	4837      	ldr	r0, [pc, #220]	; (8040be4 <MX_GPIO_Init+0x19c>)
 8040b08:	f003 ffc2 	bl	8044a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CURRENT_CS_Pin;
 8040b0c:	2310      	movs	r3, #16
 8040b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040b10:	2301      	movs	r3, #1
 8040b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040b14:	2300      	movs	r3, #0
 8040b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040b18:	2300      	movs	r3, #0
 8040b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CURRENT_CS_GPIO_Port, &GPIO_InitStruct);
 8040b1c:	f107 0314 	add.w	r3, r7, #20
 8040b20:	4619      	mov	r1, r3
 8040b22:	482e      	ldr	r0, [pc, #184]	; (8040bdc <MX_GPIO_Init+0x194>)
 8040b24:	f003 ffb4 	bl	8044a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8040b28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8040b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8040b2e:	2303      	movs	r3, #3
 8040b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040b32:	2300      	movs	r3, #0
 8040b34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8040b36:	f107 0314 	add.w	r3, r7, #20
 8040b3a:	4619      	mov	r1, r3
 8040b3c:	482b      	ldr	r0, [pc, #172]	; (8040bec <MX_GPIO_Init+0x1a4>)
 8040b3e:	f003 ffa7 	bl	8044a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LR_RFSW4_Pin|LR_BUSY_Pin;
 8040b42:	f244 0302 	movw	r3, #16386	; 0x4002
 8040b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8040b48:	4b27      	ldr	r3, [pc, #156]	; (8040be8 <MX_GPIO_Init+0x1a0>)
 8040b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040b4c:	2300      	movs	r3, #0
 8040b4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040b50:	f107 0314 	add.w	r3, r7, #20
 8040b54:	4619      	mov	r1, r3
 8040b56:	4822      	ldr	r0, [pc, #136]	; (8040be0 <MX_GPIO_Init+0x198>)
 8040b58:	f003 ff9a 	bl	8044a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_CC1_Pin;
 8040b5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8040b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8040b62:	2303      	movs	r3, #3
 8040b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040b66:	2300      	movs	r3, #0
 8040b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OTG_FS_CC1_GPIO_Port, &GPIO_InitStruct);
 8040b6a:	f107 0314 	add.w	r3, r7, #20
 8040b6e:	4619      	mov	r1, r3
 8040b70:	481a      	ldr	r0, [pc, #104]	; (8040bdc <MX_GPIO_Init+0x194>)
 8040b72:	f003 ff8d 	bl	8044a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LR_NSS_Pin|LR_NRST_Pin;
 8040b76:	2305      	movs	r3, #5
 8040b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040b7a:	2301      	movs	r3, #1
 8040b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040b7e:	2300      	movs	r3, #0
 8040b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040b82:	2300      	movs	r3, #0
 8040b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8040b86:	f107 0314 	add.w	r3, r7, #20
 8040b8a:	4619      	mov	r1, r3
 8040b8c:	4814      	ldr	r0, [pc, #80]	; (8040be0 <MX_GPIO_Init+0x198>)
 8040b8e:	f003 ff7f 	bl	8044a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GYO_DEN_Pin;
 8040b92:	2302      	movs	r3, #2
 8040b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040b96:	2301      	movs	r3, #1
 8040b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040b9a:	2300      	movs	r3, #0
 8040b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040b9e:	2300      	movs	r3, #0
 8040ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GYO_DEN_GPIO_Port, &GPIO_InitStruct);
 8040ba2:	f107 0314 	add.w	r3, r7, #20
 8040ba6:	4619      	mov	r1, r3
 8040ba8:	480e      	ldr	r0, [pc, #56]	; (8040be4 <MX_GPIO_Init+0x19c>)
 8040baa:	f003 ff71 	bl	8044a90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8040bae:	2200      	movs	r2, #0
 8040bb0:	2100      	movs	r1, #0
 8040bb2:	200c      	movs	r0, #12
 8040bb4:	f003 fb48 	bl	8044248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8040bb8:	200c      	movs	r0, #12
 8040bba:	f003 fb5f 	bl	804427c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8040bbe:	2200      	movs	r2, #0
 8040bc0:	2100      	movs	r1, #0
 8040bc2:	200e      	movs	r0, #14
 8040bc4:	f003 fb40 	bl	8044248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8040bc8:	200e      	movs	r0, #14
 8040bca:	f003 fb57 	bl	804427c <HAL_NVIC_EnableIRQ>

}
 8040bce:	bf00      	nop
 8040bd0:	3728      	adds	r7, #40	; 0x28
 8040bd2:	46bd      	mov	sp, r7
 8040bd4:	bd80      	pop	{r7, pc}
 8040bd6:	bf00      	nop
 8040bd8:	40021000 	.word	0x40021000
 8040bdc:	42020000 	.word	0x42020000
 8040be0:	42020c00 	.word	0x42020c00
 8040be4:	42021000 	.word	0x42021000
 8040be8:	10110000 	.word	0x10110000
 8040bec:	42020400 	.word	0x42020400

08040bf0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8040bf0:	b580      	push	{r7, lr}
 8040bf2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8040bf4:	4b1b      	ldr	r3, [pc, #108]	; (8040c64 <MX_I2C1_Init+0x74>)
 8040bf6:	4a1c      	ldr	r2, [pc, #112]	; (8040c68 <MX_I2C1_Init+0x78>)
 8040bf8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30F77489;
 8040bfa:	4b1a      	ldr	r3, [pc, #104]	; (8040c64 <MX_I2C1_Init+0x74>)
 8040bfc:	4a1b      	ldr	r2, [pc, #108]	; (8040c6c <MX_I2C1_Init+0x7c>)
 8040bfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8040c00:	4b18      	ldr	r3, [pc, #96]	; (8040c64 <MX_I2C1_Init+0x74>)
 8040c02:	2200      	movs	r2, #0
 8040c04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8040c06:	4b17      	ldr	r3, [pc, #92]	; (8040c64 <MX_I2C1_Init+0x74>)
 8040c08:	2201      	movs	r2, #1
 8040c0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8040c0c:	4b15      	ldr	r3, [pc, #84]	; (8040c64 <MX_I2C1_Init+0x74>)
 8040c0e:	2200      	movs	r2, #0
 8040c10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8040c12:	4b14      	ldr	r3, [pc, #80]	; (8040c64 <MX_I2C1_Init+0x74>)
 8040c14:	2200      	movs	r2, #0
 8040c16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8040c18:	4b12      	ldr	r3, [pc, #72]	; (8040c64 <MX_I2C1_Init+0x74>)
 8040c1a:	2200      	movs	r2, #0
 8040c1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8040c1e:	4b11      	ldr	r3, [pc, #68]	; (8040c64 <MX_I2C1_Init+0x74>)
 8040c20:	2200      	movs	r2, #0
 8040c22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8040c24:	4b0f      	ldr	r3, [pc, #60]	; (8040c64 <MX_I2C1_Init+0x74>)
 8040c26:	2200      	movs	r2, #0
 8040c28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8040c2a:	480e      	ldr	r0, [pc, #56]	; (8040c64 <MX_I2C1_Init+0x74>)
 8040c2c:	f004 f9f2 	bl	8045014 <HAL_I2C_Init>
 8040c30:	4603      	mov	r3, r0
 8040c32:	2b00      	cmp	r3, #0
 8040c34:	d001      	beq.n	8040c3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8040c36:	f000 f8df 	bl	8040df8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8040c3a:	2100      	movs	r1, #0
 8040c3c:	4809      	ldr	r0, [pc, #36]	; (8040c64 <MX_I2C1_Init+0x74>)
 8040c3e:	f005 fd63 	bl	8046708 <HAL_I2CEx_ConfigAnalogFilter>
 8040c42:	4603      	mov	r3, r0
 8040c44:	2b00      	cmp	r3, #0
 8040c46:	d001      	beq.n	8040c4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8040c48:	f000 f8d6 	bl	8040df8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8040c4c:	2100      	movs	r1, #0
 8040c4e:	4805      	ldr	r0, [pc, #20]	; (8040c64 <MX_I2C1_Init+0x74>)
 8040c50:	f005 fda5 	bl	804679e <HAL_I2CEx_ConfigDigitalFilter>
 8040c54:	4603      	mov	r3, r0
 8040c56:	2b00      	cmp	r3, #0
 8040c58:	d001      	beq.n	8040c5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8040c5a:	f000 f8cd 	bl	8040df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8040c5e:	bf00      	nop
 8040c60:	bd80      	pop	{r7, pc}
 8040c62:	bf00      	nop
 8040c64:	20018ca8 	.word	0x20018ca8
 8040c68:	40005400 	.word	0x40005400
 8040c6c:	30f77489 	.word	0x30f77489

08040c70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8040c70:	b580      	push	{r7, lr}
 8040c72:	b0ae      	sub	sp, #184	; 0xb8
 8040c74:	af00      	add	r7, sp, #0
 8040c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040c78:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040c7c:	2200      	movs	r2, #0
 8040c7e:	601a      	str	r2, [r3, #0]
 8040c80:	605a      	str	r2, [r3, #4]
 8040c82:	609a      	str	r2, [r3, #8]
 8040c84:	60da      	str	r2, [r3, #12]
 8040c86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040c88:	f107 0310 	add.w	r3, r7, #16
 8040c8c:	2294      	movs	r2, #148	; 0x94
 8040c8e:	2100      	movs	r1, #0
 8040c90:	4618      	mov	r0, r3
 8040c92:	f009 f940 	bl	8049f16 <memset>
  if(i2cHandle->Instance==I2C1)
 8040c96:	687b      	ldr	r3, [r7, #4]
 8040c98:	681b      	ldr	r3, [r3, #0]
 8040c9a:	4a29      	ldr	r2, [pc, #164]	; (8040d40 <HAL_I2C_MspInit+0xd0>)
 8040c9c:	4293      	cmp	r3, r2
 8040c9e:	d14b      	bne.n	8040d38 <HAL_I2C_MspInit+0xc8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8040ca0:	2340      	movs	r3, #64	; 0x40
 8040ca2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8040ca4:	2300      	movs	r3, #0
 8040ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040ca8:	f107 0310 	add.w	r3, r7, #16
 8040cac:	4618      	mov	r0, r3
 8040cae:	f005 fedf 	bl	8046a70 <HAL_RCCEx_PeriphCLKConfig>
 8040cb2:	4603      	mov	r3, r0
 8040cb4:	2b00      	cmp	r3, #0
 8040cb6:	d001      	beq.n	8040cbc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8040cb8:	f000 f89e 	bl	8040df8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8040cbc:	4b21      	ldr	r3, [pc, #132]	; (8040d44 <HAL_I2C_MspInit+0xd4>)
 8040cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040cc0:	4a20      	ldr	r2, [pc, #128]	; (8040d44 <HAL_I2C_MspInit+0xd4>)
 8040cc2:	f043 0302 	orr.w	r3, r3, #2
 8040cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040cc8:	4b1e      	ldr	r3, [pc, #120]	; (8040d44 <HAL_I2C_MspInit+0xd4>)
 8040cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040ccc:	f003 0302 	and.w	r3, r3, #2
 8040cd0:	60fb      	str	r3, [r7, #12]
 8040cd2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = EXT_SCL_Pin|EXT_SDA_Pin;
 8040cd4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8040cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8040cdc:	2312      	movs	r3, #18
 8040cde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8040ce2:	2301      	movs	r3, #1
 8040ce4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040ce8:	2300      	movs	r3, #0
 8040cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8040cee:	2304      	movs	r3, #4
 8040cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8040cf4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040cf8:	4619      	mov	r1, r3
 8040cfa:	4813      	ldr	r0, [pc, #76]	; (8040d48 <HAL_I2C_MspInit+0xd8>)
 8040cfc:	f003 fec8 	bl	8044a90 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8040d00:	4b10      	ldr	r3, [pc, #64]	; (8040d44 <HAL_I2C_MspInit+0xd4>)
 8040d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040d04:	4a0f      	ldr	r2, [pc, #60]	; (8040d44 <HAL_I2C_MspInit+0xd4>)
 8040d06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8040d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8040d0c:	4b0d      	ldr	r3, [pc, #52]	; (8040d44 <HAL_I2C_MspInit+0xd4>)
 8040d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040d10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8040d14:	60bb      	str	r3, [r7, #8]
 8040d16:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8040d18:	2200      	movs	r2, #0
 8040d1a:	2100      	movs	r1, #0
 8040d1c:	2037      	movs	r0, #55	; 0x37
 8040d1e:	f003 fa93 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8040d22:	2037      	movs	r0, #55	; 0x37
 8040d24:	f003 faaa 	bl	804427c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8040d28:	2200      	movs	r2, #0
 8040d2a:	2100      	movs	r1, #0
 8040d2c:	2038      	movs	r0, #56	; 0x38
 8040d2e:	f003 fa8b 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8040d32:	2038      	movs	r0, #56	; 0x38
 8040d34:	f003 faa2 	bl	804427c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8040d38:	bf00      	nop
 8040d3a:	37b8      	adds	r7, #184	; 0xb8
 8040d3c:	46bd      	mov	sp, r7
 8040d3e:	bd80      	pop	{r7, pc}
 8040d40:	40005400 	.word	0x40005400
 8040d44:	40021000 	.word	0x40021000
 8040d48:	42020400 	.word	0x42020400

08040d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040d4c:	b580      	push	{r7, lr}
 8040d4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040d50:	f001 fe9a 	bl	8042a88 <HAL_Init>

  /* USER CODE END Init */

  /* USER CODE BEGIN SysInit */
  /* Register SecureFault callback defined in non-secure and to be called by secure handler */
    SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 8040d54:	4916      	ldr	r1, [pc, #88]	; (8040db0 <main+0x64>)
 8040d56:	2000      	movs	r0, #0
 8040d58:	f009 f8f2 	bl	8049f40 <__SECURE_RegisterCallback_veneer>

    /* Register SecureError callback defined in non-secure and to be called by secure handler */
    SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 8040d5c:	4915      	ldr	r1, [pc, #84]	; (8040db4 <main+0x68>)
 8040d5e:	2001      	movs	r0, #1
 8040d60:	f009 f8ee 	bl	8049f40 <__SECURE_RegisterCallback_veneer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040d64:	f7ff fe70 	bl	8040a48 <MX_GPIO_Init>
  MX_DMA_Init();
 8040d68:	f7ff fe08 	bl	804097c <MX_DMA_Init>
  MX_ADC1_Init();
 8040d6c:	f7ff fbf2 	bl	8040554 <MX_ADC1_Init>
  MX_I2C1_Init();
 8040d70:	f7ff ff3e 	bl	8040bf0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8040d74:	f000 fda6 	bl	80418c4 <MX_USART3_UART_Init>
  MX_RTC_Init();
 8040d78:	f000 f89c 	bl	8040eb4 <MX_RTC_Init>
  MX_SPI1_Init();
 8040d7c:	f000 f984 	bl	8041088 <MX_SPI1_Init>
  MX_SPI3_Init();
 8040d80:	f000 f9c0 	bl	8041104 <MX_SPI3_Init>
  MX_TIM1_Init();
 8040d84:	f000 fc92 	bl	80416ac <MX_TIM1_Init>
  MX_ADC2_Init();
 8040d88:	f7ff fc5a 	bl	8040640 <MX_ADC2_Init>
  MX_LPUART1_UART_Init();
 8040d8c:	f000 fd4c 	bl	8041828 <MX_LPUART1_UART_Init>
  MX_CRC_Init();
 8040d90:	f7ff fdb2 	bl	80408f8 <MX_CRC_Init>
  MX_RNG_Init();
 8040d94:	f000 f83c 	bl	8040e10 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  BSP_GYRO_Init();
 8040d98:	f001 fdda 	bl	8042950 <BSP_GYRO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SECURE_LEDToggle_YELLOW();
 8040d9c:	f009 f8e8 	bl	8049f70 <__SECURE_LEDToggle_YELLOW_veneer>
	  BSP_GYRO_GetXYZ(pfData);
 8040da0:	4805      	ldr	r0, [pc, #20]	; (8040db8 <main+0x6c>)
 8040da2:	f001 fe15 	bl	80429d0 <BSP_GYRO_GetXYZ>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 8040da6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8040daa:	f001 fea7 	bl	8042afc <HAL_Delay>
	  SECURE_LEDToggle_YELLOW();
 8040dae:	e7f5      	b.n	8040d9c <main+0x50>
 8040db0:	08040dbd 	.word	0x08040dbd
 8040db4:	08040dc9 	.word	0x08040dc9
 8040db8:	2001805c 	.word	0x2001805c

08040dbc <SecureFault_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
  * @retval None
  */
void SecureFault_Callback(void)
{
 8040dbc:	b580      	push	{r7, lr}
 8040dbe:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure fault generated by IDAU/SAU check */
  /* because of illegal access */
  Error_Handler();
 8040dc0:	f000 f81a 	bl	8040df8 <Error_Handler>
}
 8040dc4:	bf00      	nop
 8040dc6:	bd80      	pop	{r7, pc}

08040dc8 <SecureError_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
  * @retval None
  */
void SecureError_Callback(void)
{
 8040dc8:	b580      	push	{r7, lr}
 8040dca:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure error generated by GTZC check */
  /* because of illegal access */
  Error_Handler();
 8040dcc:	f000 f814 	bl	8040df8 <Error_Handler>
}
 8040dd0:	bf00      	nop
 8040dd2:	bd80      	pop	{r7, pc}

08040dd4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8040dd4:	b580      	push	{r7, lr}
 8040dd6:	b082      	sub	sp, #8
 8040dd8:	af00      	add	r7, sp, #0
 8040dda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8040ddc:	687b      	ldr	r3, [r7, #4]
 8040dde:	681b      	ldr	r3, [r3, #0]
 8040de0:	4a04      	ldr	r2, [pc, #16]	; (8040df4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8040de2:	4293      	cmp	r3, r2
 8040de4:	d101      	bne.n	8040dea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8040de6:	f001 fe69 	bl	8042abc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8040dea:	bf00      	nop
 8040dec:	3708      	adds	r7, #8
 8040dee:	46bd      	mov	sp, r7
 8040df0:	bd80      	pop	{r7, pc}
 8040df2:	bf00      	nop
 8040df4:	40001000 	.word	0x40001000

08040df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040df8:	b580      	push	{r7, lr}
 8040dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040dfc:	b672      	cpsid	i
}
 8040dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  SECURE_LEDToggle_RED();
 8040e00:	f009 f8a6 	bl	8049f50 <__SECURE_LEDToggle_RED_veneer>
	  HAL_Delay(500);
 8040e04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8040e08:	f001 fe78 	bl	8042afc <HAL_Delay>
	  SECURE_LEDToggle_RED();
 8040e0c:	e7f8      	b.n	8040e00 <Error_Handler+0x8>
	...

08040e10 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8040e10:	b580      	push	{r7, lr}
 8040e12:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8040e14:	4b07      	ldr	r3, [pc, #28]	; (8040e34 <MX_RNG_Init+0x24>)
 8040e16:	4a08      	ldr	r2, [pc, #32]	; (8040e38 <MX_RNG_Init+0x28>)
 8040e18:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8040e1a:	4b06      	ldr	r3, [pc, #24]	; (8040e34 <MX_RNG_Init+0x24>)
 8040e1c:	2200      	movs	r2, #0
 8040e1e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8040e20:	4804      	ldr	r0, [pc, #16]	; (8040e34 <MX_RNG_Init+0x24>)
 8040e22:	f006 fb0b 	bl	804743c <HAL_RNG_Init>
 8040e26:	4603      	mov	r3, r0
 8040e28:	2b00      	cmp	r3, #0
 8040e2a:	d001      	beq.n	8040e30 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8040e2c:	f7ff ffe4 	bl	8040df8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8040e30:	bf00      	nop
 8040e32:	bd80      	pop	{r7, pc}
 8040e34:	20018d24 	.word	0x20018d24
 8040e38:	420c0800 	.word	0x420c0800

08040e3c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8040e3c:	b580      	push	{r7, lr}
 8040e3e:	b0a8      	sub	sp, #160	; 0xa0
 8040e40:	af00      	add	r7, sp, #0
 8040e42:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040e44:	f107 030c 	add.w	r3, r7, #12
 8040e48:	2294      	movs	r2, #148	; 0x94
 8040e4a:	2100      	movs	r1, #0
 8040e4c:	4618      	mov	r0, r3
 8040e4e:	f009 f862 	bl	8049f16 <memset>
  if(rngHandle->Instance==RNG)
 8040e52:	687b      	ldr	r3, [r7, #4]
 8040e54:	681b      	ldr	r3, [r3, #0]
 8040e56:	4a15      	ldr	r2, [pc, #84]	; (8040eac <HAL_RNG_MspInit+0x70>)
 8040e58:	4293      	cmp	r3, r2
 8040e5a:	d123      	bne.n	8040ea4 <HAL_RNG_MspInit+0x68>
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8040e5c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8040e60:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8040e62:	2300      	movs	r3, #0
 8040e64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040e68:	f107 030c 	add.w	r3, r7, #12
 8040e6c:	4618      	mov	r0, r3
 8040e6e:	f005 fdff 	bl	8046a70 <HAL_RCCEx_PeriphCLKConfig>
 8040e72:	4603      	mov	r3, r0
 8040e74:	2b00      	cmp	r3, #0
 8040e76:	d001      	beq.n	8040e7c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8040e78:	f7ff ffbe 	bl	8040df8 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8040e7c:	4b0c      	ldr	r3, [pc, #48]	; (8040eb0 <HAL_RNG_MspInit+0x74>)
 8040e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040e80:	4a0b      	ldr	r2, [pc, #44]	; (8040eb0 <HAL_RNG_MspInit+0x74>)
 8040e82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8040e86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040e88:	4b09      	ldr	r3, [pc, #36]	; (8040eb0 <HAL_RNG_MspInit+0x74>)
 8040e8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8040e90:	60bb      	str	r3, [r7, #8]
 8040e92:	68bb      	ldr	r3, [r7, #8]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8040e94:	2200      	movs	r2, #0
 8040e96:	2100      	movs	r1, #0
 8040e98:	205e      	movs	r0, #94	; 0x5e
 8040e9a:	f003 f9d5 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8040e9e:	205e      	movs	r0, #94	; 0x5e
 8040ea0:	f003 f9ec 	bl	804427c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8040ea4:	bf00      	nop
 8040ea6:	37a0      	adds	r7, #160	; 0xa0
 8040ea8:	46bd      	mov	sp, r7
 8040eaa:	bd80      	pop	{r7, pc}
 8040eac:	420c0800 	.word	0x420c0800
 8040eb0:	40021000 	.word	0x40021000

08040eb4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8040eb4:	b580      	push	{r7, lr}
 8040eb6:	b08a      	sub	sp, #40	; 0x28
 8040eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8040eba:	463b      	mov	r3, r7
 8040ebc:	2228      	movs	r2, #40	; 0x28
 8040ebe:	2100      	movs	r1, #0
 8040ec0:	4618      	mov	r0, r3
 8040ec2:	f009 f828 	bl	8049f16 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8040ec6:	4b3a      	ldr	r3, [pc, #232]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040ec8:	4a3a      	ldr	r2, [pc, #232]	; (8040fb4 <MX_RTC_Init+0x100>)
 8040eca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8040ecc:	4b38      	ldr	r3, [pc, #224]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040ece:	2200      	movs	r2, #0
 8040ed0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8040ed2:	4b37      	ldr	r3, [pc, #220]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040ed4:	227f      	movs	r2, #127	; 0x7f
 8040ed6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8040ed8:	4b35      	ldr	r3, [pc, #212]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040eda:	22ff      	movs	r2, #255	; 0xff
 8040edc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8040ede:	4b34      	ldr	r3, [pc, #208]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040ee0:	2200      	movs	r2, #0
 8040ee2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8040ee4:	4b32      	ldr	r3, [pc, #200]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040ee6:	2200      	movs	r2, #0
 8040ee8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8040eea:	4b31      	ldr	r3, [pc, #196]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040eec:	2200      	movs	r2, #0
 8040eee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8040ef0:	4b2f      	ldr	r3, [pc, #188]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040ef2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8040ef6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8040ef8:	4b2d      	ldr	r3, [pc, #180]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040efa:	2200      	movs	r2, #0
 8040efc:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8040efe:	482c      	ldr	r0, [pc, #176]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040f00:	f006 fbcc 	bl	804769c <HAL_RTC_Init>
 8040f04:	4603      	mov	r3, r0
 8040f06:	2b00      	cmp	r3, #0
 8040f08:	d001      	beq.n	8040f0e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8040f0a:	f7ff ff75 	bl	8040df8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8040f0e:	2300      	movs	r3, #0
 8040f10:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8040f12:	2300      	movs	r3, #0
 8040f14:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8040f16:	2300      	movs	r3, #0
 8040f18:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8040f1a:	2300      	movs	r3, #0
 8040f1c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8040f1e:	2300      	movs	r3, #0
 8040f20:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8040f22:	2300      	movs	r3, #0
 8040f24:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8040f26:	2300      	movs	r3, #0
 8040f28:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8040f2a:	2301      	movs	r3, #1
 8040f2c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8040f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8040f34:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8040f36:	463b      	mov	r3, r7
 8040f38:	2201      	movs	r2, #1
 8040f3a:	4619      	mov	r1, r3
 8040f3c:	481c      	ldr	r0, [pc, #112]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040f3e:	f006 fc83 	bl	8047848 <HAL_RTC_SetAlarm_IT>
 8040f42:	4603      	mov	r3, r0
 8040f44:	2b00      	cmp	r3, #0
 8040f46:	d001      	beq.n	8040f4c <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8040f48:	f7ff ff56 	bl	8040df8 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8040f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8040f50:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8040f52:	463b      	mov	r3, r7
 8040f54:	2201      	movs	r2, #1
 8040f56:	4619      	mov	r1, r3
 8040f58:	4815      	ldr	r0, [pc, #84]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040f5a:	f006 fc75 	bl	8047848 <HAL_RTC_SetAlarm_IT>
 8040f5e:	4603      	mov	r3, r0
 8040f60:	2b00      	cmp	r3, #0
 8040f62:	d001      	beq.n	8040f68 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8040f64:	f7ff ff48 	bl	8040df8 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp_IT(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 8040f68:	2200      	movs	r2, #0
 8040f6a:	2100      	movs	r1, #0
 8040f6c:	4810      	ldr	r0, [pc, #64]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040f6e:	f006 fe21 	bl	8047bb4 <HAL_RTCEx_SetTimeStamp_IT>
 8040f72:	4603      	mov	r3, r0
 8040f74:	2b00      	cmp	r3, #0
 8040f76:	d001      	beq.n	8040f7c <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8040f78:	f7ff ff3e 	bl	8040df8 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8040f7c:	2300      	movs	r3, #0
 8040f7e:	2200      	movs	r2, #0
 8040f80:	2100      	movs	r1, #0
 8040f82:	480b      	ldr	r0, [pc, #44]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040f84:	f006 fe8a 	bl	8047c9c <HAL_RTCEx_SetWakeUpTimer_IT>
 8040f88:	4603      	mov	r3, r0
 8040f8a:	2b00      	cmp	r3, #0
 8040f8c:	d001      	beq.n	8040f92 <MX_RTC_Init+0xde>
  {
    Error_Handler();
 8040f8e:	f7ff ff33 	bl	8040df8 <Error_Handler>
  }
  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8040f92:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8040f96:	4806      	ldr	r0, [pc, #24]	; (8040fb0 <MX_RTC_Init+0xfc>)
 8040f98:	f006 ff2c 	bl	8047df4 <HAL_RTCEx_SetCalibrationOutPut>
 8040f9c:	4603      	mov	r3, r0
 8040f9e:	2b00      	cmp	r3, #0
 8040fa0:	d001      	beq.n	8040fa6 <MX_RTC_Init+0xf2>
  {
    Error_Handler();
 8040fa2:	f7ff ff29 	bl	8040df8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8040fa6:	bf00      	nop
 8040fa8:	3728      	adds	r7, #40	; 0x28
 8040faa:	46bd      	mov	sp, r7
 8040fac:	bd80      	pop	{r7, pc}
 8040fae:	bf00      	nop
 8040fb0:	20018d48 	.word	0x20018d48
 8040fb4:	40002800 	.word	0x40002800

08040fb8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8040fb8:	b580      	push	{r7, lr}
 8040fba:	b0a8      	sub	sp, #160	; 0xa0
 8040fbc:	af00      	add	r7, sp, #0
 8040fbe:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040fc0:	f107 030c 	add.w	r3, r7, #12
 8040fc4:	2294      	movs	r2, #148	; 0x94
 8040fc6:	2100      	movs	r1, #0
 8040fc8:	4618      	mov	r0, r3
 8040fca:	f008 ffa4 	bl	8049f16 <memset>
  if(rtcHandle->Instance==RTC)
 8040fce:	687b      	ldr	r3, [r7, #4]
 8040fd0:	681b      	ldr	r3, [r3, #0]
 8040fd2:	4a1a      	ldr	r2, [pc, #104]	; (804103c <HAL_RTC_MspInit+0x84>)
 8040fd4:	4293      	cmp	r3, r2
 8040fd6:	d12c      	bne.n	8041032 <HAL_RTC_MspInit+0x7a>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8040fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8040fdc:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8040fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8040fe2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040fe6:	f107 030c 	add.w	r3, r7, #12
 8040fea:	4618      	mov	r0, r3
 8040fec:	f005 fd40 	bl	8046a70 <HAL_RCCEx_PeriphCLKConfig>
 8040ff0:	4603      	mov	r3, r0
 8040ff2:	2b00      	cmp	r3, #0
 8040ff4:	d001      	beq.n	8040ffa <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8040ff6:	f7ff feff 	bl	8040df8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8040ffa:	4b11      	ldr	r3, [pc, #68]	; (8041040 <HAL_RTC_MspInit+0x88>)
 8040ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041000:	4a0f      	ldr	r2, [pc, #60]	; (8041040 <HAL_RTC_MspInit+0x88>)
 8041002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8041006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 804100a:	4b0d      	ldr	r3, [pc, #52]	; (8041040 <HAL_RTC_MspInit+0x88>)
 804100c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804100e:	4a0c      	ldr	r2, [pc, #48]	; (8041040 <HAL_RTC_MspInit+0x88>)
 8041010:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8041014:	6593      	str	r3, [r2, #88]	; 0x58
 8041016:	4b0a      	ldr	r3, [pc, #40]	; (8041040 <HAL_RTC_MspInit+0x88>)
 8041018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804101a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804101e:	60bb      	str	r3, [r7, #8]
 8041020:	68bb      	ldr	r3, [r7, #8]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8041022:	2200      	movs	r2, #0
 8041024:	2100      	movs	r1, #0
 8041026:	2002      	movs	r0, #2
 8041028:	f003 f90e 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 804102c:	2002      	movs	r0, #2
 804102e:	f003 f925 	bl	804427c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8041032:	bf00      	nop
 8041034:	37a0      	adds	r7, #160	; 0xa0
 8041036:	46bd      	mov	sp, r7
 8041038:	bd80      	pop	{r7, pc}
 804103a:	bf00      	nop
 804103c:	40002800 	.word	0x40002800
 8041040:	40021000 	.word	0x40021000

08041044 <HAL_RTC_MspDeInit>:

void HAL_RTC_MspDeInit(RTC_HandleTypeDef* rtcHandle)
{
 8041044:	b580      	push	{r7, lr}
 8041046:	b082      	sub	sp, #8
 8041048:	af00      	add	r7, sp, #0
 804104a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 804104c:	687b      	ldr	r3, [r7, #4]
 804104e:	681b      	ldr	r3, [r3, #0]
 8041050:	4a0b      	ldr	r2, [pc, #44]	; (8041080 <HAL_RTC_MspDeInit+0x3c>)
 8041052:	4293      	cmp	r3, r2
 8041054:	d110      	bne.n	8041078 <HAL_RTC_MspDeInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8041056:	4b0b      	ldr	r3, [pc, #44]	; (8041084 <HAL_RTC_MspDeInit+0x40>)
 8041058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804105c:	4a09      	ldr	r2, [pc, #36]	; (8041084 <HAL_RTC_MspDeInit+0x40>)
 804105e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8041062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_DISABLE();
 8041066:	4b07      	ldr	r3, [pc, #28]	; (8041084 <HAL_RTC_MspDeInit+0x40>)
 8041068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804106a:	4a06      	ldr	r2, [pc, #24]	; (8041084 <HAL_RTC_MspDeInit+0x40>)
 804106c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8041070:	6593      	str	r3, [r2, #88]	; 0x58

    /* RTC interrupt Deinit */
    HAL_NVIC_DisableIRQ(RTC_IRQn);
 8041072:	2002      	movs	r0, #2
 8041074:	f003 f910 	bl	8044298 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }
}
 8041078:	bf00      	nop
 804107a:	3708      	adds	r7, #8
 804107c:	46bd      	mov	sp, r7
 804107e:	bd80      	pop	{r7, pc}
 8041080:	40002800 	.word	0x40002800
 8041084:	40021000 	.word	0x40021000

08041088 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8041088:	b580      	push	{r7, lr}
 804108a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 804108c:	4b1b      	ldr	r3, [pc, #108]	; (80410fc <MX_SPI1_Init+0x74>)
 804108e:	4a1c      	ldr	r2, [pc, #112]	; (8041100 <MX_SPI1_Init+0x78>)
 8041090:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8041092:	4b1a      	ldr	r3, [pc, #104]	; (80410fc <MX_SPI1_Init+0x74>)
 8041094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8041098:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 804109a:	4b18      	ldr	r3, [pc, #96]	; (80410fc <MX_SPI1_Init+0x74>)
 804109c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80410a0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80410a2:	4b16      	ldr	r3, [pc, #88]	; (80410fc <MX_SPI1_Init+0x74>)
 80410a4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80410a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80410aa:	4b14      	ldr	r3, [pc, #80]	; (80410fc <MX_SPI1_Init+0x74>)
 80410ac:	2200      	movs	r2, #0
 80410ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80410b0:	4b12      	ldr	r3, [pc, #72]	; (80410fc <MX_SPI1_Init+0x74>)
 80410b2:	2200      	movs	r2, #0
 80410b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80410b6:	4b11      	ldr	r3, [pc, #68]	; (80410fc <MX_SPI1_Init+0x74>)
 80410b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80410bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80410be:	4b0f      	ldr	r3, [pc, #60]	; (80410fc <MX_SPI1_Init+0x74>)
 80410c0:	2208      	movs	r2, #8
 80410c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80410c4:	4b0d      	ldr	r3, [pc, #52]	; (80410fc <MX_SPI1_Init+0x74>)
 80410c6:	2200      	movs	r2, #0
 80410c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80410ca:	4b0c      	ldr	r3, [pc, #48]	; (80410fc <MX_SPI1_Init+0x74>)
 80410cc:	2200      	movs	r2, #0
 80410ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80410d0:	4b0a      	ldr	r3, [pc, #40]	; (80410fc <MX_SPI1_Init+0x74>)
 80410d2:	2200      	movs	r2, #0
 80410d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80410d6:	4b09      	ldr	r3, [pc, #36]	; (80410fc <MX_SPI1_Init+0x74>)
 80410d8:	2207      	movs	r2, #7
 80410da:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80410dc:	4b07      	ldr	r3, [pc, #28]	; (80410fc <MX_SPI1_Init+0x74>)
 80410de:	2200      	movs	r2, #0
 80410e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80410e2:	4b06      	ldr	r3, [pc, #24]	; (80410fc <MX_SPI1_Init+0x74>)
 80410e4:	2200      	movs	r2, #0
 80410e6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80410e8:	4804      	ldr	r0, [pc, #16]	; (80410fc <MX_SPI1_Init+0x74>)
 80410ea:	f006 ff4b 	bl	8047f84 <HAL_SPI_Init>
 80410ee:	4603      	mov	r3, r0
 80410f0:	2b00      	cmp	r3, #0
 80410f2:	d001      	beq.n	80410f8 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80410f4:	f7ff fe80 	bl	8040df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80410f8:	bf00      	nop
 80410fa:	bd80      	pop	{r7, pc}
 80410fc:	20018eb0 	.word	0x20018eb0
 8041100:	40013000 	.word	0x40013000

08041104 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8041104:	b580      	push	{r7, lr}
 8041106:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8041108:	4b1b      	ldr	r3, [pc, #108]	; (8041178 <MX_SPI3_Init+0x74>)
 804110a:	4a1c      	ldr	r2, [pc, #112]	; (804117c <MX_SPI3_Init+0x78>)
 804110c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 804110e:	4b1a      	ldr	r3, [pc, #104]	; (8041178 <MX_SPI3_Init+0x74>)
 8041110:	f44f 7282 	mov.w	r2, #260	; 0x104
 8041114:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8041116:	4b18      	ldr	r3, [pc, #96]	; (8041178 <MX_SPI3_Init+0x74>)
 8041118:	2200      	movs	r2, #0
 804111a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 804111c:	4b16      	ldr	r3, [pc, #88]	; (8041178 <MX_SPI3_Init+0x74>)
 804111e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8041122:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8041124:	4b14      	ldr	r3, [pc, #80]	; (8041178 <MX_SPI3_Init+0x74>)
 8041126:	2200      	movs	r2, #0
 8041128:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 804112a:	4b13      	ldr	r3, [pc, #76]	; (8041178 <MX_SPI3_Init+0x74>)
 804112c:	2200      	movs	r2, #0
 804112e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8041130:	4b11      	ldr	r3, [pc, #68]	; (8041178 <MX_SPI3_Init+0x74>)
 8041132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8041136:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8041138:	4b0f      	ldr	r3, [pc, #60]	; (8041178 <MX_SPI3_Init+0x74>)
 804113a:	2208      	movs	r2, #8
 804113c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 804113e:	4b0e      	ldr	r3, [pc, #56]	; (8041178 <MX_SPI3_Init+0x74>)
 8041140:	2200      	movs	r2, #0
 8041142:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8041144:	4b0c      	ldr	r3, [pc, #48]	; (8041178 <MX_SPI3_Init+0x74>)
 8041146:	2200      	movs	r2, #0
 8041148:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 804114a:	4b0b      	ldr	r3, [pc, #44]	; (8041178 <MX_SPI3_Init+0x74>)
 804114c:	2200      	movs	r2, #0
 804114e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8041150:	4b09      	ldr	r3, [pc, #36]	; (8041178 <MX_SPI3_Init+0x74>)
 8041152:	2207      	movs	r2, #7
 8041154:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8041156:	4b08      	ldr	r3, [pc, #32]	; (8041178 <MX_SPI3_Init+0x74>)
 8041158:	2200      	movs	r2, #0
 804115a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 804115c:	4b06      	ldr	r3, [pc, #24]	; (8041178 <MX_SPI3_Init+0x74>)
 804115e:	2200      	movs	r2, #0
 8041160:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8041162:	4805      	ldr	r0, [pc, #20]	; (8041178 <MX_SPI3_Init+0x74>)
 8041164:	f006 ff0e 	bl	8047f84 <HAL_SPI_Init>
 8041168:	4603      	mov	r3, r0
 804116a:	2b00      	cmp	r3, #0
 804116c:	d001      	beq.n	8041172 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 804116e:	f7ff fe43 	bl	8040df8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8041172:	bf00      	nop
 8041174:	bd80      	pop	{r7, pc}
 8041176:	bf00      	nop
 8041178:	20018dbc 	.word	0x20018dbc
 804117c:	40003c00 	.word	0x40003c00

08041180 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8041180:	b580      	push	{r7, lr}
 8041182:	b08c      	sub	sp, #48	; 0x30
 8041184:	af00      	add	r7, sp, #0
 8041186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041188:	f107 031c 	add.w	r3, r7, #28
 804118c:	2200      	movs	r2, #0
 804118e:	601a      	str	r2, [r3, #0]
 8041190:	605a      	str	r2, [r3, #4]
 8041192:	609a      	str	r2, [r3, #8]
 8041194:	60da      	str	r2, [r3, #12]
 8041196:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8041198:	687b      	ldr	r3, [r7, #4]
 804119a:	681b      	ldr	r3, [r3, #0]
 804119c:	4a69      	ldr	r2, [pc, #420]	; (8041344 <HAL_SPI_MspInit+0x1c4>)
 804119e:	4293      	cmp	r3, r2
 80411a0:	d130      	bne.n	8041204 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80411a2:	4b69      	ldr	r3, [pc, #420]	; (8041348 <HAL_SPI_MspInit+0x1c8>)
 80411a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80411a6:	4a68      	ldr	r2, [pc, #416]	; (8041348 <HAL_SPI_MspInit+0x1c8>)
 80411a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80411ac:	6613      	str	r3, [r2, #96]	; 0x60
 80411ae:	4b66      	ldr	r3, [pc, #408]	; (8041348 <HAL_SPI_MspInit+0x1c8>)
 80411b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80411b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80411b6:	61bb      	str	r3, [r7, #24]
 80411b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80411ba:	4b63      	ldr	r3, [pc, #396]	; (8041348 <HAL_SPI_MspInit+0x1c8>)
 80411bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80411be:	4a62      	ldr	r2, [pc, #392]	; (8041348 <HAL_SPI_MspInit+0x1c8>)
 80411c0:	f043 0301 	orr.w	r3, r3, #1
 80411c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80411c6:	4b60      	ldr	r3, [pc, #384]	; (8041348 <HAL_SPI_MspInit+0x1c8>)
 80411c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80411ca:	f003 0301 	and.w	r3, r3, #1
 80411ce:	617b      	str	r3, [r7, #20]
 80411d0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = CURRENT_SCK_Pin|CURRENT_MISO_Pin;
 80411d2:	2360      	movs	r3, #96	; 0x60
 80411d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80411d6:	2302      	movs	r3, #2
 80411d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80411da:	2300      	movs	r3, #0
 80411dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80411de:	2300      	movs	r3, #0
 80411e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80411e2:	2305      	movs	r3, #5
 80411e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80411e6:	f107 031c 	add.w	r3, r7, #28
 80411ea:	4619      	mov	r1, r3
 80411ec:	4857      	ldr	r0, [pc, #348]	; (804134c <HAL_SPI_MspInit+0x1cc>)
 80411ee:	f003 fc4f 	bl	8044a90 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80411f2:	2200      	movs	r2, #0
 80411f4:	2100      	movs	r1, #0
 80411f6:	203b      	movs	r0, #59	; 0x3b
 80411f8:	f003 f826 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80411fc:	203b      	movs	r0, #59	; 0x3b
 80411fe:	f003 f83d 	bl	804427c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8041202:	e09a      	b.n	804133a <HAL_SPI_MspInit+0x1ba>
  else if(spiHandle->Instance==SPI3)
 8041204:	687b      	ldr	r3, [r7, #4]
 8041206:	681b      	ldr	r3, [r3, #0]
 8041208:	4a51      	ldr	r2, [pc, #324]	; (8041350 <HAL_SPI_MspInit+0x1d0>)
 804120a:	4293      	cmp	r3, r2
 804120c:	f040 8095 	bne.w	804133a <HAL_SPI_MspInit+0x1ba>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8041210:	4b4d      	ldr	r3, [pc, #308]	; (8041348 <HAL_SPI_MspInit+0x1c8>)
 8041212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041214:	4a4c      	ldr	r2, [pc, #304]	; (8041348 <HAL_SPI_MspInit+0x1c8>)
 8041216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804121a:	6593      	str	r3, [r2, #88]	; 0x58
 804121c:	4b4a      	ldr	r3, [pc, #296]	; (8041348 <HAL_SPI_MspInit+0x1c8>)
 804121e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8041224:	613b      	str	r3, [r7, #16]
 8041226:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8041228:	4b47      	ldr	r3, [pc, #284]	; (8041348 <HAL_SPI_MspInit+0x1c8>)
 804122a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804122c:	4a46      	ldr	r2, [pc, #280]	; (8041348 <HAL_SPI_MspInit+0x1c8>)
 804122e:	f043 0304 	orr.w	r3, r3, #4
 8041232:	64d3      	str	r3, [r2, #76]	; 0x4c
 8041234:	4b44      	ldr	r3, [pc, #272]	; (8041348 <HAL_SPI_MspInit+0x1c8>)
 8041236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041238:	f003 0304 	and.w	r3, r3, #4
 804123c:	60fb      	str	r3, [r7, #12]
 804123e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LR_SCK_Pin|LR_MISO_Pin|LR_MOSI_Pin;
 8041240:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8041244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041246:	2302      	movs	r3, #2
 8041248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804124a:	2300      	movs	r3, #0
 804124c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804124e:	2300      	movs	r3, #0
 8041250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8041252:	2306      	movs	r3, #6
 8041254:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8041256:	f107 031c 	add.w	r3, r7, #28
 804125a:	4619      	mov	r1, r3
 804125c:	483d      	ldr	r0, [pc, #244]	; (8041354 <HAL_SPI_MspInit+0x1d4>)
 804125e:	f003 fc17 	bl	8044a90 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Channel8;
 8041262:	4b3d      	ldr	r3, [pc, #244]	; (8041358 <HAL_SPI_MspInit+0x1d8>)
 8041264:	4a3d      	ldr	r2, [pc, #244]	; (804135c <HAL_SPI_MspInit+0x1dc>)
 8041266:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8041268:	4b3b      	ldr	r3, [pc, #236]	; (8041358 <HAL_SPI_MspInit+0x1d8>)
 804126a:	220f      	movs	r2, #15
 804126c:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 804126e:	4b3a      	ldr	r3, [pc, #232]	; (8041358 <HAL_SPI_MspInit+0x1d8>)
 8041270:	2200      	movs	r2, #0
 8041272:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8041274:	4b38      	ldr	r3, [pc, #224]	; (8041358 <HAL_SPI_MspInit+0x1d8>)
 8041276:	2200      	movs	r2, #0
 8041278:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 804127a:	4b37      	ldr	r3, [pc, #220]	; (8041358 <HAL_SPI_MspInit+0x1d8>)
 804127c:	2280      	movs	r2, #128	; 0x80
 804127e:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8041280:	4b35      	ldr	r3, [pc, #212]	; (8041358 <HAL_SPI_MspInit+0x1d8>)
 8041282:	2200      	movs	r2, #0
 8041284:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8041286:	4b34      	ldr	r3, [pc, #208]	; (8041358 <HAL_SPI_MspInit+0x1d8>)
 8041288:	2200      	movs	r2, #0
 804128a:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 804128c:	4b32      	ldr	r3, [pc, #200]	; (8041358 <HAL_SPI_MspInit+0x1d8>)
 804128e:	2200      	movs	r2, #0
 8041290:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8041292:	4b31      	ldr	r3, [pc, #196]	; (8041358 <HAL_SPI_MspInit+0x1d8>)
 8041294:	2200      	movs	r2, #0
 8041296:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8041298:	482f      	ldr	r0, [pc, #188]	; (8041358 <HAL_SPI_MspInit+0x1d8>)
 804129a:	f003 f8f5 	bl	8044488 <HAL_DMA_Init>
 804129e:	4603      	mov	r3, r0
 80412a0:	2b00      	cmp	r3, #0
 80412a2:	d001      	beq.n	80412a8 <HAL_SPI_MspInit+0x128>
      Error_Handler();
 80412a4:	f7ff fda8 	bl	8040df8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80412a8:	2110      	movs	r1, #16
 80412aa:	482b      	ldr	r0, [pc, #172]	; (8041358 <HAL_SPI_MspInit+0x1d8>)
 80412ac:	f003 fb5d 	bl	804496a <HAL_DMA_ConfigChannelAttributes>
 80412b0:	4603      	mov	r3, r0
 80412b2:	2b00      	cmp	r3, #0
 80412b4:	d001      	beq.n	80412ba <HAL_SPI_MspInit+0x13a>
      Error_Handler();
 80412b6:	f7ff fd9f 	bl	8040df8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80412ba:	687b      	ldr	r3, [r7, #4]
 80412bc:	4a26      	ldr	r2, [pc, #152]	; (8041358 <HAL_SPI_MspInit+0x1d8>)
 80412be:	659a      	str	r2, [r3, #88]	; 0x58
 80412c0:	4a25      	ldr	r2, [pc, #148]	; (8041358 <HAL_SPI_MspInit+0x1d8>)
 80412c2:	687b      	ldr	r3, [r7, #4]
 80412c4:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_spi3_tx.Instance = DMA2_Channel1;
 80412c6:	4b26      	ldr	r3, [pc, #152]	; (8041360 <HAL_SPI_MspInit+0x1e0>)
 80412c8:	4a26      	ldr	r2, [pc, #152]	; (8041364 <HAL_SPI_MspInit+0x1e4>)
 80412ca:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 80412cc:	4b24      	ldr	r3, [pc, #144]	; (8041360 <HAL_SPI_MspInit+0x1e0>)
 80412ce:	2210      	movs	r2, #16
 80412d0:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80412d2:	4b23      	ldr	r3, [pc, #140]	; (8041360 <HAL_SPI_MspInit+0x1e0>)
 80412d4:	2210      	movs	r2, #16
 80412d6:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80412d8:	4b21      	ldr	r3, [pc, #132]	; (8041360 <HAL_SPI_MspInit+0x1e0>)
 80412da:	2200      	movs	r2, #0
 80412dc:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80412de:	4b20      	ldr	r3, [pc, #128]	; (8041360 <HAL_SPI_MspInit+0x1e0>)
 80412e0:	2280      	movs	r2, #128	; 0x80
 80412e2:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80412e4:	4b1e      	ldr	r3, [pc, #120]	; (8041360 <HAL_SPI_MspInit+0x1e0>)
 80412e6:	2200      	movs	r2, #0
 80412e8:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80412ea:	4b1d      	ldr	r3, [pc, #116]	; (8041360 <HAL_SPI_MspInit+0x1e0>)
 80412ec:	2200      	movs	r2, #0
 80412ee:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80412f0:	4b1b      	ldr	r3, [pc, #108]	; (8041360 <HAL_SPI_MspInit+0x1e0>)
 80412f2:	2200      	movs	r2, #0
 80412f4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80412f6:	4b1a      	ldr	r3, [pc, #104]	; (8041360 <HAL_SPI_MspInit+0x1e0>)
 80412f8:	2200      	movs	r2, #0
 80412fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80412fc:	4818      	ldr	r0, [pc, #96]	; (8041360 <HAL_SPI_MspInit+0x1e0>)
 80412fe:	f003 f8c3 	bl	8044488 <HAL_DMA_Init>
 8041302:	4603      	mov	r3, r0
 8041304:	2b00      	cmp	r3, #0
 8041306:	d001      	beq.n	804130c <HAL_SPI_MspInit+0x18c>
      Error_Handler();
 8041308:	f7ff fd76 	bl	8040df8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 804130c:	2110      	movs	r1, #16
 804130e:	4814      	ldr	r0, [pc, #80]	; (8041360 <HAL_SPI_MspInit+0x1e0>)
 8041310:	f003 fb2b 	bl	804496a <HAL_DMA_ConfigChannelAttributes>
 8041314:	4603      	mov	r3, r0
 8041316:	2b00      	cmp	r3, #0
 8041318:	d001      	beq.n	804131e <HAL_SPI_MspInit+0x19e>
      Error_Handler();
 804131a:	f7ff fd6d 	bl	8040df8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 804131e:	687b      	ldr	r3, [r7, #4]
 8041320:	4a0f      	ldr	r2, [pc, #60]	; (8041360 <HAL_SPI_MspInit+0x1e0>)
 8041322:	655a      	str	r2, [r3, #84]	; 0x54
 8041324:	4a0e      	ldr	r2, [pc, #56]	; (8041360 <HAL_SPI_MspInit+0x1e0>)
 8041326:	687b      	ldr	r3, [r7, #4]
 8041328:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 804132a:	2200      	movs	r2, #0
 804132c:	2100      	movs	r1, #0
 804132e:	2063      	movs	r0, #99	; 0x63
 8041330:	f002 ff8a 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8041334:	2063      	movs	r0, #99	; 0x63
 8041336:	f002 ffa1 	bl	804427c <HAL_NVIC_EnableIRQ>
}
 804133a:	bf00      	nop
 804133c:	3730      	adds	r7, #48	; 0x30
 804133e:	46bd      	mov	sp, r7
 8041340:	bd80      	pop	{r7, pc}
 8041342:	bf00      	nop
 8041344:	40013000 	.word	0x40013000
 8041348:	40021000 	.word	0x40021000
 804134c:	42020000 	.word	0x42020000
 8041350:	40003c00 	.word	0x40003c00
 8041354:	42020800 	.word	0x42020800
 8041358:	20018f3c 	.word	0x20018f3c
 804135c:	40020094 	.word	0x40020094
 8041360:	20018e48 	.word	0x20018e48
 8041364:	40020408 	.word	0x40020408

08041368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8041368:	b580      	push	{r7, lr}
 804136a:	b082      	sub	sp, #8
 804136c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 804136e:	4b12      	ldr	r3, [pc, #72]	; (80413b8 <HAL_MspInit+0x50>)
 8041370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041372:	4a11      	ldr	r2, [pc, #68]	; (80413b8 <HAL_MspInit+0x50>)
 8041374:	f043 0301 	orr.w	r3, r3, #1
 8041378:	6613      	str	r3, [r2, #96]	; 0x60
 804137a:	4b0f      	ldr	r3, [pc, #60]	; (80413b8 <HAL_MspInit+0x50>)
 804137c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804137e:	f003 0301 	and.w	r3, r3, #1
 8041382:	607b      	str	r3, [r7, #4]
 8041384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8041386:	4b0c      	ldr	r3, [pc, #48]	; (80413b8 <HAL_MspInit+0x50>)
 8041388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804138a:	4a0b      	ldr	r2, [pc, #44]	; (80413b8 <HAL_MspInit+0x50>)
 804138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041390:	6593      	str	r3, [r2, #88]	; 0x58
 8041392:	4b09      	ldr	r3, [pc, #36]	; (80413b8 <HAL_MspInit+0x50>)
 8041394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804139a:	603b      	str	r3, [r7, #0]
 804139c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 804139e:	2200      	movs	r2, #0
 80413a0:	2100      	movs	r1, #0
 80413a2:	205f      	movs	r0, #95	; 0x5f
 80413a4:	f002 ff50 	bl	8044248 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80413a8:	205f      	movs	r0, #95	; 0x5f
 80413aa:	f002 ff67 	bl	804427c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80413ae:	bf00      	nop
 80413b0:	3708      	adds	r7, #8
 80413b2:	46bd      	mov	sp, r7
 80413b4:	bd80      	pop	{r7, pc}
 80413b6:	bf00      	nop
 80413b8:	40021000 	.word	0x40021000

080413bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80413bc:	b580      	push	{r7, lr}
 80413be:	b08c      	sub	sp, #48	; 0x30
 80413c0:	af00      	add	r7, sp, #0
 80413c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80413c4:	2300      	movs	r3, #0
 80413c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80413c8:	2300      	movs	r3, #0
 80413ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 80413cc:	2200      	movs	r2, #0
 80413ce:	6879      	ldr	r1, [r7, #4]
 80413d0:	2031      	movs	r0, #49	; 0x31
 80413d2:	f002 ff39 	bl	8044248 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80413d6:	2031      	movs	r0, #49	; 0x31
 80413d8:	f002 ff50 	bl	804427c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80413dc:	4b1e      	ldr	r3, [pc, #120]	; (8041458 <HAL_InitTick+0x9c>)
 80413de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80413e0:	4a1d      	ldr	r2, [pc, #116]	; (8041458 <HAL_InitTick+0x9c>)
 80413e2:	f043 0310 	orr.w	r3, r3, #16
 80413e6:	6593      	str	r3, [r2, #88]	; 0x58
 80413e8:	4b1b      	ldr	r3, [pc, #108]	; (8041458 <HAL_InitTick+0x9c>)
 80413ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80413ec:	f003 0310 	and.w	r3, r3, #16
 80413f0:	60fb      	str	r3, [r7, #12]
 80413f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80413f4:	f107 0210 	add.w	r2, r7, #16
 80413f8:	f107 0314 	add.w	r3, r7, #20
 80413fc:	4611      	mov	r1, r2
 80413fe:	4618      	mov	r0, r3
 8041400:	f005 fb04 	bl	8046a0c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8041404:	f005 fada 	bl	80469bc <HAL_RCC_GetPCLK1Freq>
 8041408:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 804140a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804140c:	4a13      	ldr	r2, [pc, #76]	; (804145c <HAL_InitTick+0xa0>)
 804140e:	fba2 2303 	umull	r2, r3, r2, r3
 8041412:	0c9b      	lsrs	r3, r3, #18
 8041414:	3b01      	subs	r3, #1
 8041416:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8041418:	4b11      	ldr	r3, [pc, #68]	; (8041460 <HAL_InitTick+0xa4>)
 804141a:	4a12      	ldr	r2, [pc, #72]	; (8041464 <HAL_InitTick+0xa8>)
 804141c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 804141e:	4b10      	ldr	r3, [pc, #64]	; (8041460 <HAL_InitTick+0xa4>)
 8041420:	f240 32e7 	movw	r2, #999	; 0x3e7
 8041424:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8041426:	4a0e      	ldr	r2, [pc, #56]	; (8041460 <HAL_InitTick+0xa4>)
 8041428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804142a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 804142c:	4b0c      	ldr	r3, [pc, #48]	; (8041460 <HAL_InitTick+0xa4>)
 804142e:	2200      	movs	r2, #0
 8041430:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8041432:	4b0b      	ldr	r3, [pc, #44]	; (8041460 <HAL_InitTick+0xa4>)
 8041434:	2200      	movs	r2, #0
 8041436:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8041438:	4809      	ldr	r0, [pc, #36]	; (8041460 <HAL_InitTick+0xa4>)
 804143a:	f006 ffe3 	bl	8048404 <HAL_TIM_Base_Init>
 804143e:	4603      	mov	r3, r0
 8041440:	2b00      	cmp	r3, #0
 8041442:	d104      	bne.n	804144e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8041444:	4806      	ldr	r0, [pc, #24]	; (8041460 <HAL_InitTick+0xa4>)
 8041446:	f007 f84b 	bl	80484e0 <HAL_TIM_Base_Start_IT>
 804144a:	4603      	mov	r3, r0
 804144c:	e000      	b.n	8041450 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 804144e:	2301      	movs	r3, #1
}
 8041450:	4618      	mov	r0, r3
 8041452:	3730      	adds	r7, #48	; 0x30
 8041454:	46bd      	mov	sp, r7
 8041456:	bd80      	pop	{r7, pc}
 8041458:	40021000 	.word	0x40021000
 804145c:	431bde83 	.word	0x431bde83
 8041460:	20018fa4 	.word	0x20018fa4
 8041464:	40001000 	.word	0x40001000

08041468 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8041468:	b480      	push	{r7}
 804146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 804146c:	e7fe      	b.n	804146c <MemManage_Handler+0x4>

0804146e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 804146e:	b480      	push	{r7}
 8041470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8041472:	e7fe      	b.n	8041472 <UsageFault_Handler+0x4>

08041474 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8041474:	b480      	push	{r7}
 8041476:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8041478:	bf00      	nop
 804147a:	46bd      	mov	sp, r7
 804147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041480:	4770      	bx	lr

08041482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8041482:	b480      	push	{r7}
 8041484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8041486:	bf00      	nop
 8041488:	46bd      	mov	sp, r7
 804148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804148e:	4770      	bx	lr

08041490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8041490:	b480      	push	{r7}
 8041492:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8041494:	bf00      	nop
 8041496:	46bd      	mov	sp, r7
 8041498:	f85d 7b04 	ldr.w	r7, [sp], #4
 804149c:	4770      	bx	lr
	...

080414a0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupts through EXTI line 17.
  */
void RTC_IRQHandler(void)
{
 80414a0:	b580      	push	{r7, lr}
 80414a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80414a4:	4805      	ldr	r0, [pc, #20]	; (80414bc <RTC_IRQHandler+0x1c>)
 80414a6:	f006 fa99 	bl	80479dc <HAL_RTC_AlarmIRQHandler>
  HAL_RTCEx_TimeStampIRQHandler(&hrtc);
 80414aa:	4804      	ldr	r0, [pc, #16]	; (80414bc <RTC_IRQHandler+0x1c>)
 80414ac:	f006 fbd0 	bl	8047c50 <HAL_RTCEx_TimeStampIRQHandler>
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80414b0:	4802      	ldr	r0, [pc, #8]	; (80414bc <RTC_IRQHandler+0x1c>)
 80414b2:	f006 fc79 	bl	8047da8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80414b6:	bf00      	nop
 80414b8:	bd80      	pop	{r7, pc}
 80414ba:	bf00      	nop
 80414bc:	20018d48 	.word	0x20018d48

080414c0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80414c0:	b580      	push	{r7, lr}
 80414c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80414c4:	2002      	movs	r0, #2
 80414c6:	f003 fd69 	bl	8044f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80414ca:	bf00      	nop
 80414cc:	bd80      	pop	{r7, pc}

080414ce <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80414ce:	b580      	push	{r7, lr}
 80414d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80414d2:	2008      	movs	r0, #8
 80414d4:	f003 fd62 	bl	8044f9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80414d8:	bf00      	nop
 80414da:	bd80      	pop	{r7, pc}

080414dc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80414dc:	b580      	push	{r7, lr}
 80414de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80414e0:	4802      	ldr	r0, [pc, #8]	; (80414ec <DMA1_Channel5_IRQHandler+0x10>)
 80414e2:	f003 f934 	bl	804474e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80414e6:	bf00      	nop
 80414e8:	bd80      	pop	{r7, pc}
 80414ea:	bf00      	nop
 80414ec:	20019374 	.word	0x20019374

080414f0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80414f0:	b580      	push	{r7, lr}
 80414f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80414f4:	4802      	ldr	r0, [pc, #8]	; (8041500 <DMA1_Channel6_IRQHandler+0x10>)
 80414f6:	f003 f92a 	bl	804474e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80414fa:	bf00      	nop
 80414fc:	bd80      	pop	{r7, pc}
 80414fe:	bf00      	nop
 8041500:	2001930c 	.word	0x2001930c

08041504 <DMA1_Channel8_IRQHandler>:

/**
  * @brief This function handles DMA1 channel8 global interrupt.
  */
void DMA1_Channel8_IRQHandler(void)
{
 8041504:	b580      	push	{r7, lr}
 8041506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel8_IRQn 0 */

  /* USER CODE END DMA1_Channel8_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8041508:	4802      	ldr	r0, [pc, #8]	; (8041514 <DMA1_Channel8_IRQHandler+0x10>)
 804150a:	f003 f920 	bl	804474e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel8_IRQn 1 */

  /* USER CODE END DMA1_Channel8_IRQn 1 */
}
 804150e:	bf00      	nop
 8041510:	bd80      	pop	{r7, pc}
 8041512:	bf00      	nop
 8041514:	20018f3c 	.word	0x20018f3c

08041518 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8041518:	b580      	push	{r7, lr}
 804151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 804151c:	4803      	ldr	r0, [pc, #12]	; (804152c <ADC1_2_IRQHandler+0x14>)
 804151e:	f001 fe81 	bl	8043224 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8041522:	4803      	ldr	r0, [pc, #12]	; (8041530 <ADC1_2_IRQHandler+0x18>)
 8041524:	f001 fe7e 	bl	8043224 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8041528:	bf00      	nop
 804152a:	bd80      	pop	{r7, pc}
 804152c:	20018b88 	.word	0x20018b88
 8041530:	20018af4 	.word	0x20018af4

08041534 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8041534:	b580      	push	{r7, lr}
 8041536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8041538:	4802      	ldr	r0, [pc, #8]	; (8041544 <TIM1_BRK_IRQHandler+0x10>)
 804153a:	f007 f8f5 	bl	8048728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 804153e:	bf00      	nop
 8041540:	bd80      	pop	{r7, pc}
 8041542:	bf00      	nop
 8041544:	20019060 	.word	0x20019060

08041548 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8041548:	b580      	push	{r7, lr}
 804154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 804154c:	4802      	ldr	r0, [pc, #8]	; (8041558 <TIM1_UP_IRQHandler+0x10>)
 804154e:	f007 f8eb 	bl	8048728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8041552:	bf00      	nop
 8041554:	bd80      	pop	{r7, pc}
 8041556:	bf00      	nop
 8041558:	20019060 	.word	0x20019060

0804155c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 804155c:	b580      	push	{r7, lr}
 804155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8041560:	4802      	ldr	r0, [pc, #8]	; (804156c <TIM1_TRG_COM_IRQHandler+0x10>)
 8041562:	f007 f8e1 	bl	8048728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8041566:	bf00      	nop
 8041568:	bd80      	pop	{r7, pc}
 804156a:	bf00      	nop
 804156c:	20019060 	.word	0x20019060

08041570 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8041570:	b580      	push	{r7, lr}
 8041572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8041574:	4802      	ldr	r0, [pc, #8]	; (8041580 <TIM1_CC_IRQHandler+0x10>)
 8041576:	f007 f8d7 	bl	8048728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 804157a:	bf00      	nop
 804157c:	bd80      	pop	{r7, pc}
 804157e:	bf00      	nop
 8041580:	20019060 	.word	0x20019060

08041584 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8041584:	b580      	push	{r7, lr}
 8041586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8041588:	4802      	ldr	r0, [pc, #8]	; (8041594 <TIM6_IRQHandler+0x10>)
 804158a:	f007 f8cd 	bl	8048728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 804158e:	bf00      	nop
 8041590:	bd80      	pop	{r7, pc}
 8041592:	bf00      	nop
 8041594:	20018fa4 	.word	0x20018fa4

08041598 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8041598:	b580      	push	{r7, lr}
 804159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 804159c:	4802      	ldr	r0, [pc, #8]	; (80415a8 <I2C1_EV_IRQHandler+0x10>)
 804159e:	f004 f8db 	bl	8045758 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80415a2:	bf00      	nop
 80415a4:	bd80      	pop	{r7, pc}
 80415a6:	bf00      	nop
 80415a8:	20018ca8 	.word	0x20018ca8

080415ac <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80415ac:	b580      	push	{r7, lr}
 80415ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80415b0:	4802      	ldr	r0, [pc, #8]	; (80415bc <I2C1_ER_IRQHandler+0x10>)
 80415b2:	f004 f8eb 	bl	804578c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80415b6:	bf00      	nop
 80415b8:	bd80      	pop	{r7, pc}
 80415ba:	bf00      	nop
 80415bc:	20018ca8 	.word	0x20018ca8

080415c0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80415c0:	b580      	push	{r7, lr}
 80415c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80415c4:	4802      	ldr	r0, [pc, #8]	; (80415d0 <SPI1_IRQHandler+0x10>)
 80415c6:	f006 fdb7 	bl	8048138 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80415ca:	bf00      	nop
 80415cc:	bd80      	pop	{r7, pc}
 80415ce:	bf00      	nop
 80415d0:	20018eb0 	.word	0x20018eb0

080415d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80415d4:	b580      	push	{r7, lr}
 80415d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80415d8:	4802      	ldr	r0, [pc, #8]	; (80415e4 <USART3_IRQHandler+0x10>)
 80415da:	f007 fc39 	bl	8048e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80415de:	bf00      	nop
 80415e0:	bd80      	pop	{r7, pc}
 80415e2:	bf00      	nop
 80415e4:	20019184 	.word	0x20019184

080415e8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 80415e8:	b580      	push	{r7, lr}
 80415ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80415ec:	4802      	ldr	r0, [pc, #8]	; (80415f8 <LPUART1_IRQHandler+0x10>)
 80415ee:	f007 fc2f 	bl	8048e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80415f2:	bf00      	nop
 80415f4:	bd80      	pop	{r7, pc}
 80415f6:	bf00      	nop
 80415f8:	2001927c 	.word	0x2001927c

080415fc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80415fc:	b580      	push	{r7, lr}
 80415fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8041600:	4802      	ldr	r0, [pc, #8]	; (804160c <DMA2_Channel1_IRQHandler+0x10>)
 8041602:	f003 f8a4 	bl	804474e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8041606:	bf00      	nop
 8041608:	bd80      	pop	{r7, pc}
 804160a:	bf00      	nop
 804160c:	20018e48 	.word	0x20018e48

08041610 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8041610:	b580      	push	{r7, lr}
 8041612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8041614:	4802      	ldr	r0, [pc, #8]	; (8041620 <DMA2_Channel2_IRQHandler+0x10>)
 8041616:	f003 f89a 	bl	804474e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 804161a:	bf00      	nop
 804161c:	bd80      	pop	{r7, pc}
 804161e:	bf00      	nop
 8041620:	2001911c 	.word	0x2001911c

08041624 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8041624:	b580      	push	{r7, lr}
 8041626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8041628:	4802      	ldr	r0, [pc, #8]	; (8041634 <DMA2_Channel3_IRQHandler+0x10>)
 804162a:	f003 f890 	bl	804474e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 804162e:	bf00      	nop
 8041630:	bd80      	pop	{r7, pc}
 8041632:	bf00      	nop
 8041634:	20019214 	.word	0x20019214

08041638 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8041638:	b580      	push	{r7, lr}
 804163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 804163c:	4802      	ldr	r0, [pc, #8]	; (8041648 <DMA2_Channel6_IRQHandler+0x10>)
 804163e:	f003 f886 	bl	804474e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8041642:	bf00      	nop
 8041644:	bd80      	pop	{r7, pc}
 8041646:	bf00      	nop
 8041648:	20018c1c 	.word	0x20018c1c

0804164c <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 804164c:	b580      	push	{r7, lr}
 804164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8041650:	4802      	ldr	r0, [pc, #8]	; (804165c <RNG_IRQHandler+0x10>)
 8041652:	f005 ff9d 	bl	8047590 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8041656:	bf00      	nop
 8041658:	bd80      	pop	{r7, pc}
 804165a:	bf00      	nop
 804165c:	20018d24 	.word	0x20018d24

08041660 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8041660:	b480      	push	{r7}
 8041662:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8041664:	bf00      	nop
 8041666:	46bd      	mov	sp, r7
 8041668:	f85d 7b04 	ldr.w	r7, [sp], #4
 804166c:	4770      	bx	lr
	...

08041670 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8041670:	b580      	push	{r7, lr}
 8041672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8041674:	4802      	ldr	r0, [pc, #8]	; (8041680 <SPI3_IRQHandler+0x10>)
 8041676:	f006 fd5f 	bl	8048138 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 804167a:	bf00      	nop
 804167c:	bd80      	pop	{r7, pc}
 804167e:	bf00      	nop
 8041680:	20018dbc 	.word	0x20018dbc

08041684 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8041684:	b480      	push	{r7}
 8041686:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8041688:	bf00      	nop
 804168a:	46bd      	mov	sp, r7
 804168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041690:	4770      	bx	lr
	...

08041694 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8041694:	b580      	push	{r7, lr}
 8041696:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8041698:	f008 fc62 	bl	8049f60 <__SECURE_SystemCoreClockUpdate_veneer>
 804169c:	4603      	mov	r3, r0
 804169e:	4a02      	ldr	r2, [pc, #8]	; (80416a8 <SystemCoreClockUpdate+0x14>)
 80416a0:	6013      	str	r3, [r2, #0]
}
 80416a2:	bf00      	nop
 80416a4:	bd80      	pop	{r7, pc}
 80416a6:	bf00      	nop
 80416a8:	20018000 	.word	0x20018000

080416ac <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80416ac:	b580      	push	{r7, lr}
 80416ae:	b08c      	sub	sp, #48	; 0x30
 80416b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80416b2:	f107 030c 	add.w	r3, r7, #12
 80416b6:	2224      	movs	r2, #36	; 0x24
 80416b8:	2100      	movs	r1, #0
 80416ba:	4618      	mov	r0, r3
 80416bc:	f008 fc2b 	bl	8049f16 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80416c0:	463b      	mov	r3, r7
 80416c2:	2200      	movs	r2, #0
 80416c4:	601a      	str	r2, [r3, #0]
 80416c6:	605a      	str	r2, [r3, #4]
 80416c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80416ca:	4b23      	ldr	r3, [pc, #140]	; (8041758 <MX_TIM1_Init+0xac>)
 80416cc:	4a23      	ldr	r2, [pc, #140]	; (804175c <MX_TIM1_Init+0xb0>)
 80416ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80416d0:	4b21      	ldr	r3, [pc, #132]	; (8041758 <MX_TIM1_Init+0xac>)
 80416d2:	2200      	movs	r2, #0
 80416d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80416d6:	4b20      	ldr	r3, [pc, #128]	; (8041758 <MX_TIM1_Init+0xac>)
 80416d8:	2200      	movs	r2, #0
 80416da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80416dc:	4b1e      	ldr	r3, [pc, #120]	; (8041758 <MX_TIM1_Init+0xac>)
 80416de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80416e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80416e4:	4b1c      	ldr	r3, [pc, #112]	; (8041758 <MX_TIM1_Init+0xac>)
 80416e6:	2200      	movs	r2, #0
 80416e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80416ea:	4b1b      	ldr	r3, [pc, #108]	; (8041758 <MX_TIM1_Init+0xac>)
 80416ec:	2200      	movs	r2, #0
 80416ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80416f0:	4b19      	ldr	r3, [pc, #100]	; (8041758 <MX_TIM1_Init+0xac>)
 80416f2:	2200      	movs	r2, #0
 80416f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80416f6:	2301      	movs	r3, #1
 80416f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80416fa:	2300      	movs	r3, #0
 80416fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80416fe:	2301      	movs	r3, #1
 8041700:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8041702:	2300      	movs	r3, #0
 8041704:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8041706:	2300      	movs	r3, #0
 8041708:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 804170a:	2300      	movs	r3, #0
 804170c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 804170e:	2301      	movs	r3, #1
 8041710:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8041712:	2300      	movs	r3, #0
 8041714:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8041716:	2300      	movs	r3, #0
 8041718:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 804171a:	f107 030c 	add.w	r3, r7, #12
 804171e:	4619      	mov	r1, r3
 8041720:	480d      	ldr	r0, [pc, #52]	; (8041758 <MX_TIM1_Init+0xac>)
 8041722:	f006 ff4d 	bl	80485c0 <HAL_TIM_Encoder_Init>
 8041726:	4603      	mov	r3, r0
 8041728:	2b00      	cmp	r3, #0
 804172a:	d001      	beq.n	8041730 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 804172c:	f7ff fb64 	bl	8040df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8041730:	2300      	movs	r3, #0
 8041732:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8041734:	2300      	movs	r3, #0
 8041736:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8041738:	2300      	movs	r3, #0
 804173a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 804173c:	463b      	mov	r3, r7
 804173e:	4619      	mov	r1, r3
 8041740:	4805      	ldr	r0, [pc, #20]	; (8041758 <MX_TIM1_Init+0xac>)
 8041742:	f007 fa85 	bl	8048c50 <HAL_TIMEx_MasterConfigSynchronization>
 8041746:	4603      	mov	r3, r0
 8041748:	2b00      	cmp	r3, #0
 804174a:	d001      	beq.n	8041750 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 804174c:	f7ff fb54 	bl	8040df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8041750:	bf00      	nop
 8041752:	3730      	adds	r7, #48	; 0x30
 8041754:	46bd      	mov	sp, r7
 8041756:	bd80      	pop	{r7, pc}
 8041758:	20019060 	.word	0x20019060
 804175c:	40012c00 	.word	0x40012c00

08041760 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8041760:	b580      	push	{r7, lr}
 8041762:	b08a      	sub	sp, #40	; 0x28
 8041764:	af00      	add	r7, sp, #0
 8041766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041768:	f107 0314 	add.w	r3, r7, #20
 804176c:	2200      	movs	r2, #0
 804176e:	601a      	str	r2, [r3, #0]
 8041770:	605a      	str	r2, [r3, #4]
 8041772:	609a      	str	r2, [r3, #8]
 8041774:	60da      	str	r2, [r3, #12]
 8041776:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8041778:	687b      	ldr	r3, [r7, #4]
 804177a:	681b      	ldr	r3, [r3, #0]
 804177c:	4a27      	ldr	r2, [pc, #156]	; (804181c <HAL_TIM_Encoder_MspInit+0xbc>)
 804177e:	4293      	cmp	r3, r2
 8041780:	d148      	bne.n	8041814 <HAL_TIM_Encoder_MspInit+0xb4>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8041782:	4b27      	ldr	r3, [pc, #156]	; (8041820 <HAL_TIM_Encoder_MspInit+0xc0>)
 8041784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041786:	4a26      	ldr	r2, [pc, #152]	; (8041820 <HAL_TIM_Encoder_MspInit+0xc0>)
 8041788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 804178c:	6613      	str	r3, [r2, #96]	; 0x60
 804178e:	4b24      	ldr	r3, [pc, #144]	; (8041820 <HAL_TIM_Encoder_MspInit+0xc0>)
 8041790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041796:	613b      	str	r3, [r7, #16]
 8041798:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 804179a:	4b21      	ldr	r3, [pc, #132]	; (8041820 <HAL_TIM_Encoder_MspInit+0xc0>)
 804179c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804179e:	4a20      	ldr	r2, [pc, #128]	; (8041820 <HAL_TIM_Encoder_MspInit+0xc0>)
 80417a0:	f043 0310 	orr.w	r3, r3, #16
 80417a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80417a6:	4b1e      	ldr	r3, [pc, #120]	; (8041820 <HAL_TIM_Encoder_MspInit+0xc0>)
 80417a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80417aa:	f003 0310 	and.w	r3, r3, #16
 80417ae:	60fb      	str	r3, [r7, #12]
 80417b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_P_Pin|ENCODER_N_Pin;
 80417b2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80417b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80417b8:	2302      	movs	r3, #2
 80417ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80417bc:	2300      	movs	r3, #0
 80417be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80417c0:	2300      	movs	r3, #0
 80417c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80417c4:	2301      	movs	r3, #1
 80417c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80417c8:	f107 0314 	add.w	r3, r7, #20
 80417cc:	4619      	mov	r1, r3
 80417ce:	4815      	ldr	r0, [pc, #84]	; (8041824 <HAL_TIM_Encoder_MspInit+0xc4>)
 80417d0:	f003 f95e 	bl	8044a90 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80417d4:	2200      	movs	r2, #0
 80417d6:	2100      	movs	r1, #0
 80417d8:	2029      	movs	r0, #41	; 0x29
 80417da:	f002 fd35 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80417de:	2029      	movs	r0, #41	; 0x29
 80417e0:	f002 fd4c 	bl	804427c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80417e4:	2200      	movs	r2, #0
 80417e6:	2100      	movs	r1, #0
 80417e8:	202a      	movs	r0, #42	; 0x2a
 80417ea:	f002 fd2d 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80417ee:	202a      	movs	r0, #42	; 0x2a
 80417f0:	f002 fd44 	bl	804427c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 80417f4:	2200      	movs	r2, #0
 80417f6:	2100      	movs	r1, #0
 80417f8:	202b      	movs	r0, #43	; 0x2b
 80417fa:	f002 fd25 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80417fe:	202b      	movs	r0, #43	; 0x2b
 8041800:	f002 fd3c 	bl	804427c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8041804:	2200      	movs	r2, #0
 8041806:	2100      	movs	r1, #0
 8041808:	202c      	movs	r0, #44	; 0x2c
 804180a:	f002 fd1d 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 804180e:	202c      	movs	r0, #44	; 0x2c
 8041810:	f002 fd34 	bl	804427c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8041814:	bf00      	nop
 8041816:	3728      	adds	r7, #40	; 0x28
 8041818:	46bd      	mov	sp, r7
 804181a:	bd80      	pop	{r7, pc}
 804181c:	40012c00 	.word	0x40012c00
 8041820:	40021000 	.word	0x40021000
 8041824:	42021000 	.word	0x42021000

08041828 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8041828:	b580      	push	{r7, lr}
 804182a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 804182c:	4b22      	ldr	r3, [pc, #136]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 804182e:	4a23      	ldr	r2, [pc, #140]	; (80418bc <MX_LPUART1_UART_Init+0x94>)
 8041830:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8041832:	4b21      	ldr	r3, [pc, #132]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 8041834:	4a22      	ldr	r2, [pc, #136]	; (80418c0 <MX_LPUART1_UART_Init+0x98>)
 8041836:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8041838:	4b1f      	ldr	r3, [pc, #124]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 804183a:	2200      	movs	r2, #0
 804183c:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 804183e:	4b1e      	ldr	r3, [pc, #120]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 8041840:	2200      	movs	r2, #0
 8041842:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8041844:	4b1c      	ldr	r3, [pc, #112]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 8041846:	2200      	movs	r2, #0
 8041848:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 804184a:	4b1b      	ldr	r3, [pc, #108]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 804184c:	220c      	movs	r2, #12
 804184e:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8041850:	4b19      	ldr	r3, [pc, #100]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 8041852:	2200      	movs	r2, #0
 8041854:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8041856:	4b18      	ldr	r3, [pc, #96]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 8041858:	2200      	movs	r2, #0
 804185a:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 804185c:	4b16      	ldr	r3, [pc, #88]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 804185e:	2200      	movs	r2, #0
 8041860:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8041862:	4b15      	ldr	r3, [pc, #84]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 8041864:	2200      	movs	r2, #0
 8041866:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8041868:	4b13      	ldr	r3, [pc, #76]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 804186a:	2200      	movs	r2, #0
 804186c:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 804186e:	4812      	ldr	r0, [pc, #72]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 8041870:	f007 fa9e 	bl	8048db0 <HAL_UART_Init>
 8041874:	4603      	mov	r3, r0
 8041876:	2b00      	cmp	r3, #0
 8041878:	d001      	beq.n	804187e <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 804187a:	f7ff fabd 	bl	8040df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 804187e:	2100      	movs	r1, #0
 8041880:	480d      	ldr	r0, [pc, #52]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 8041882:	f008 fa33 	bl	8049cec <HAL_UARTEx_SetTxFifoThreshold>
 8041886:	4603      	mov	r3, r0
 8041888:	2b00      	cmp	r3, #0
 804188a:	d001      	beq.n	8041890 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 804188c:	f7ff fab4 	bl	8040df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8041890:	2100      	movs	r1, #0
 8041892:	4809      	ldr	r0, [pc, #36]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 8041894:	f008 fa68 	bl	8049d68 <HAL_UARTEx_SetRxFifoThreshold>
 8041898:	4603      	mov	r3, r0
 804189a:	2b00      	cmp	r3, #0
 804189c:	d001      	beq.n	80418a2 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 804189e:	f7ff faab 	bl	8040df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80418a2:	4805      	ldr	r0, [pc, #20]	; (80418b8 <MX_LPUART1_UART_Init+0x90>)
 80418a4:	f008 f9e9 	bl	8049c7a <HAL_UARTEx_DisableFifoMode>
 80418a8:	4603      	mov	r3, r0
 80418aa:	2b00      	cmp	r3, #0
 80418ac:	d001      	beq.n	80418b2 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80418ae:	f7ff faa3 	bl	8040df8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80418b2:	bf00      	nop
 80418b4:	bd80      	pop	{r7, pc}
 80418b6:	bf00      	nop
 80418b8:	2001927c 	.word	0x2001927c
 80418bc:	40008000 	.word	0x40008000
 80418c0:	00033324 	.word	0x00033324

080418c4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80418c4:	b580      	push	{r7, lr}
 80418c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80418c8:	4b22      	ldr	r3, [pc, #136]	; (8041954 <MX_USART3_UART_Init+0x90>)
 80418ca:	4a23      	ldr	r2, [pc, #140]	; (8041958 <MX_USART3_UART_Init+0x94>)
 80418cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80418ce:	4b21      	ldr	r3, [pc, #132]	; (8041954 <MX_USART3_UART_Init+0x90>)
 80418d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80418d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80418d6:	4b1f      	ldr	r3, [pc, #124]	; (8041954 <MX_USART3_UART_Init+0x90>)
 80418d8:	2200      	movs	r2, #0
 80418da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80418dc:	4b1d      	ldr	r3, [pc, #116]	; (8041954 <MX_USART3_UART_Init+0x90>)
 80418de:	2200      	movs	r2, #0
 80418e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80418e2:	4b1c      	ldr	r3, [pc, #112]	; (8041954 <MX_USART3_UART_Init+0x90>)
 80418e4:	2200      	movs	r2, #0
 80418e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80418e8:	4b1a      	ldr	r3, [pc, #104]	; (8041954 <MX_USART3_UART_Init+0x90>)
 80418ea:	220c      	movs	r2, #12
 80418ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80418ee:	4b19      	ldr	r3, [pc, #100]	; (8041954 <MX_USART3_UART_Init+0x90>)
 80418f0:	2200      	movs	r2, #0
 80418f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80418f4:	4b17      	ldr	r3, [pc, #92]	; (8041954 <MX_USART3_UART_Init+0x90>)
 80418f6:	2200      	movs	r2, #0
 80418f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80418fa:	4b16      	ldr	r3, [pc, #88]	; (8041954 <MX_USART3_UART_Init+0x90>)
 80418fc:	2200      	movs	r2, #0
 80418fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8041900:	4b14      	ldr	r3, [pc, #80]	; (8041954 <MX_USART3_UART_Init+0x90>)
 8041902:	2200      	movs	r2, #0
 8041904:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8041906:	4b13      	ldr	r3, [pc, #76]	; (8041954 <MX_USART3_UART_Init+0x90>)
 8041908:	2200      	movs	r2, #0
 804190a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 804190c:	4811      	ldr	r0, [pc, #68]	; (8041954 <MX_USART3_UART_Init+0x90>)
 804190e:	f007 fa4f 	bl	8048db0 <HAL_UART_Init>
 8041912:	4603      	mov	r3, r0
 8041914:	2b00      	cmp	r3, #0
 8041916:	d001      	beq.n	804191c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8041918:	f7ff fa6e 	bl	8040df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 804191c:	2100      	movs	r1, #0
 804191e:	480d      	ldr	r0, [pc, #52]	; (8041954 <MX_USART3_UART_Init+0x90>)
 8041920:	f008 f9e4 	bl	8049cec <HAL_UARTEx_SetTxFifoThreshold>
 8041924:	4603      	mov	r3, r0
 8041926:	2b00      	cmp	r3, #0
 8041928:	d001      	beq.n	804192e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 804192a:	f7ff fa65 	bl	8040df8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 804192e:	2100      	movs	r1, #0
 8041930:	4808      	ldr	r0, [pc, #32]	; (8041954 <MX_USART3_UART_Init+0x90>)
 8041932:	f008 fa19 	bl	8049d68 <HAL_UARTEx_SetRxFifoThreshold>
 8041936:	4603      	mov	r3, r0
 8041938:	2b00      	cmp	r3, #0
 804193a:	d001      	beq.n	8041940 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 804193c:	f7ff fa5c 	bl	8040df8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8041940:	4804      	ldr	r0, [pc, #16]	; (8041954 <MX_USART3_UART_Init+0x90>)
 8041942:	f008 f99a 	bl	8049c7a <HAL_UARTEx_DisableFifoMode>
 8041946:	4603      	mov	r3, r0
 8041948:	2b00      	cmp	r3, #0
 804194a:	d001      	beq.n	8041950 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 804194c:	f7ff fa54 	bl	8040df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8041950:	bf00      	nop
 8041952:	bd80      	pop	{r7, pc}
 8041954:	20019184 	.word	0x20019184
 8041958:	40004800 	.word	0x40004800

0804195c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 804195c:	b580      	push	{r7, lr}
 804195e:	b0b0      	sub	sp, #192	; 0xc0
 8041960:	af00      	add	r7, sp, #0
 8041962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8041964:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8041968:	2200      	movs	r2, #0
 804196a:	601a      	str	r2, [r3, #0]
 804196c:	605a      	str	r2, [r3, #4]
 804196e:	609a      	str	r2, [r3, #8]
 8041970:	60da      	str	r2, [r3, #12]
 8041972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8041974:	f107 0318 	add.w	r3, r7, #24
 8041978:	2294      	movs	r2, #148	; 0x94
 804197a:	2100      	movs	r1, #0
 804197c:	4618      	mov	r0, r3
 804197e:	f008 faca 	bl	8049f16 <memset>
  if(uartHandle->Instance==LPUART1)
 8041982:	687b      	ldr	r3, [r7, #4]
 8041984:	681b      	ldr	r3, [r3, #0]
 8041986:	4a56      	ldr	r2, [pc, #344]	; (8041ae0 <HAL_UART_MspInit+0x184>)
 8041988:	4293      	cmp	r3, r2
 804198a:	f040 80b7 	bne.w	8041afc <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 804198e:	2320      	movs	r3, #32
 8041990:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8041992:	2300      	movs	r3, #0
 8041994:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8041996:	f107 0318 	add.w	r3, r7, #24
 804199a:	4618      	mov	r0, r3
 804199c:	f005 f868 	bl	8046a70 <HAL_RCCEx_PeriphCLKConfig>
 80419a0:	4603      	mov	r3, r0
 80419a2:	2b00      	cmp	r3, #0
 80419a4:	d001      	beq.n	80419aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80419a6:	f7ff fa27 	bl	8040df8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80419aa:	4b4e      	ldr	r3, [pc, #312]	; (8041ae4 <HAL_UART_MspInit+0x188>)
 80419ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80419ae:	4a4d      	ldr	r2, [pc, #308]	; (8041ae4 <HAL_UART_MspInit+0x188>)
 80419b0:	f043 0301 	orr.w	r3, r3, #1
 80419b4:	65d3      	str	r3, [r2, #92]	; 0x5c
 80419b6:	4b4b      	ldr	r3, [pc, #300]	; (8041ae4 <HAL_UART_MspInit+0x188>)
 80419b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80419ba:	f003 0301 	and.w	r3, r3, #1
 80419be:	617b      	str	r3, [r7, #20]
 80419c0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80419c2:	4b48      	ldr	r3, [pc, #288]	; (8041ae4 <HAL_UART_MspInit+0x188>)
 80419c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80419c6:	4a47      	ldr	r2, [pc, #284]	; (8041ae4 <HAL_UART_MspInit+0x188>)
 80419c8:	f043 0302 	orr.w	r3, r3, #2
 80419cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80419ce:	4b45      	ldr	r3, [pc, #276]	; (8041ae4 <HAL_UART_MspInit+0x188>)
 80419d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80419d2:	f003 0302 	and.w	r3, r3, #2
 80419d6:	613b      	str	r3, [r7, #16]
 80419d8:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = DBG_RX_Pin|DBG_TX_Pin;
 80419da:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80419de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80419e2:	2302      	movs	r3, #2
 80419e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80419e8:	2300      	movs	r3, #0
 80419ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80419ee:	2300      	movs	r3, #0
 80419f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80419f4:	2308      	movs	r3, #8
 80419f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80419fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80419fe:	4619      	mov	r1, r3
 8041a00:	4839      	ldr	r0, [pc, #228]	; (8041ae8 <HAL_UART_MspInit+0x18c>)
 8041a02:	f003 f845 	bl	8044a90 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel5;
 8041a06:	4b39      	ldr	r3, [pc, #228]	; (8041aec <HAL_UART_MspInit+0x190>)
 8041a08:	4a39      	ldr	r2, [pc, #228]	; (8041af0 <HAL_UART_MspInit+0x194>)
 8041a0a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8041a0c:	4b37      	ldr	r3, [pc, #220]	; (8041aec <HAL_UART_MspInit+0x190>)
 8041a0e:	2223      	movs	r2, #35	; 0x23
 8041a10:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8041a12:	4b36      	ldr	r3, [pc, #216]	; (8041aec <HAL_UART_MspInit+0x190>)
 8041a14:	2200      	movs	r2, #0
 8041a16:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8041a18:	4b34      	ldr	r3, [pc, #208]	; (8041aec <HAL_UART_MspInit+0x190>)
 8041a1a:	2200      	movs	r2, #0
 8041a1c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8041a1e:	4b33      	ldr	r3, [pc, #204]	; (8041aec <HAL_UART_MspInit+0x190>)
 8041a20:	2280      	movs	r2, #128	; 0x80
 8041a22:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8041a24:	4b31      	ldr	r3, [pc, #196]	; (8041aec <HAL_UART_MspInit+0x190>)
 8041a26:	2200      	movs	r2, #0
 8041a28:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8041a2a:	4b30      	ldr	r3, [pc, #192]	; (8041aec <HAL_UART_MspInit+0x190>)
 8041a2c:	2200      	movs	r2, #0
 8041a2e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8041a30:	4b2e      	ldr	r3, [pc, #184]	; (8041aec <HAL_UART_MspInit+0x190>)
 8041a32:	2200      	movs	r2, #0
 8041a34:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8041a36:	4b2d      	ldr	r3, [pc, #180]	; (8041aec <HAL_UART_MspInit+0x190>)
 8041a38:	2200      	movs	r2, #0
 8041a3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8041a3c:	482b      	ldr	r0, [pc, #172]	; (8041aec <HAL_UART_MspInit+0x190>)
 8041a3e:	f002 fd23 	bl	8044488 <HAL_DMA_Init>
 8041a42:	4603      	mov	r3, r0
 8041a44:	2b00      	cmp	r3, #0
 8041a46:	d001      	beq.n	8041a4c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8041a48:	f7ff f9d6 	bl	8040df8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8041a4c:	2110      	movs	r1, #16
 8041a4e:	4827      	ldr	r0, [pc, #156]	; (8041aec <HAL_UART_MspInit+0x190>)
 8041a50:	f002 ff8b 	bl	804496a <HAL_DMA_ConfigChannelAttributes>
 8041a54:	4603      	mov	r3, r0
 8041a56:	2b00      	cmp	r3, #0
 8041a58:	d001      	beq.n	8041a5e <HAL_UART_MspInit+0x102>
    {
      Error_Handler();
 8041a5a:	f7ff f9cd 	bl	8040df8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8041a5e:	687b      	ldr	r3, [r7, #4]
 8041a60:	4a22      	ldr	r2, [pc, #136]	; (8041aec <HAL_UART_MspInit+0x190>)
 8041a62:	67da      	str	r2, [r3, #124]	; 0x7c
 8041a64:	4a21      	ldr	r2, [pc, #132]	; (8041aec <HAL_UART_MspInit+0x190>)
 8041a66:	687b      	ldr	r3, [r7, #4]
 8041a68:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel6;
 8041a6a:	4b22      	ldr	r3, [pc, #136]	; (8041af4 <HAL_UART_MspInit+0x198>)
 8041a6c:	4a22      	ldr	r2, [pc, #136]	; (8041af8 <HAL_UART_MspInit+0x19c>)
 8041a6e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8041a70:	4b20      	ldr	r3, [pc, #128]	; (8041af4 <HAL_UART_MspInit+0x198>)
 8041a72:	2224      	movs	r2, #36	; 0x24
 8041a74:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8041a76:	4b1f      	ldr	r3, [pc, #124]	; (8041af4 <HAL_UART_MspInit+0x198>)
 8041a78:	2210      	movs	r2, #16
 8041a7a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8041a7c:	4b1d      	ldr	r3, [pc, #116]	; (8041af4 <HAL_UART_MspInit+0x198>)
 8041a7e:	2200      	movs	r2, #0
 8041a80:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8041a82:	4b1c      	ldr	r3, [pc, #112]	; (8041af4 <HAL_UART_MspInit+0x198>)
 8041a84:	2280      	movs	r2, #128	; 0x80
 8041a86:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8041a88:	4b1a      	ldr	r3, [pc, #104]	; (8041af4 <HAL_UART_MspInit+0x198>)
 8041a8a:	2200      	movs	r2, #0
 8041a8c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8041a8e:	4b19      	ldr	r3, [pc, #100]	; (8041af4 <HAL_UART_MspInit+0x198>)
 8041a90:	2200      	movs	r2, #0
 8041a92:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8041a94:	4b17      	ldr	r3, [pc, #92]	; (8041af4 <HAL_UART_MspInit+0x198>)
 8041a96:	2200      	movs	r2, #0
 8041a98:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8041a9a:	4b16      	ldr	r3, [pc, #88]	; (8041af4 <HAL_UART_MspInit+0x198>)
 8041a9c:	2200      	movs	r2, #0
 8041a9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8041aa0:	4814      	ldr	r0, [pc, #80]	; (8041af4 <HAL_UART_MspInit+0x198>)
 8041aa2:	f002 fcf1 	bl	8044488 <HAL_DMA_Init>
 8041aa6:	4603      	mov	r3, r0
 8041aa8:	2b00      	cmp	r3, #0
 8041aaa:	d001      	beq.n	8041ab0 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8041aac:	f7ff f9a4 	bl	8040df8 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_lpuart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8041ab0:	2110      	movs	r1, #16
 8041ab2:	4810      	ldr	r0, [pc, #64]	; (8041af4 <HAL_UART_MspInit+0x198>)
 8041ab4:	f002 ff59 	bl	804496a <HAL_DMA_ConfigChannelAttributes>
 8041ab8:	4603      	mov	r3, r0
 8041aba:	2b00      	cmp	r3, #0
 8041abc:	d001      	beq.n	8041ac2 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8041abe:	f7ff f99b 	bl	8040df8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8041ac2:	687b      	ldr	r3, [r7, #4]
 8041ac4:	4a0b      	ldr	r2, [pc, #44]	; (8041af4 <HAL_UART_MspInit+0x198>)
 8041ac6:	679a      	str	r2, [r3, #120]	; 0x78
 8041ac8:	4a0a      	ldr	r2, [pc, #40]	; (8041af4 <HAL_UART_MspInit+0x198>)
 8041aca:	687b      	ldr	r3, [r7, #4]
 8041acc:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8041ace:	2200      	movs	r2, #0
 8041ad0:	2100      	movs	r1, #0
 8041ad2:	2042      	movs	r0, #66	; 0x42
 8041ad4:	f002 fbb8 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8041ad8:	2042      	movs	r0, #66	; 0x42
 8041ada:	f002 fbcf 	bl	804427c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8041ade:	e0ba      	b.n	8041c56 <HAL_UART_MspInit+0x2fa>
 8041ae0:	40008000 	.word	0x40008000
 8041ae4:	40021000 	.word	0x40021000
 8041ae8:	42020400 	.word	0x42020400
 8041aec:	20019374 	.word	0x20019374
 8041af0:	40020058 	.word	0x40020058
 8041af4:	2001930c 	.word	0x2001930c
 8041af8:	4002006c 	.word	0x4002006c
  else if(uartHandle->Instance==USART3)
 8041afc:	687b      	ldr	r3, [r7, #4]
 8041afe:	681b      	ldr	r3, [r3, #0]
 8041b00:	4a57      	ldr	r2, [pc, #348]	; (8041c60 <HAL_UART_MspInit+0x304>)
 8041b02:	4293      	cmp	r3, r2
 8041b04:	f040 80a7 	bne.w	8041c56 <HAL_UART_MspInit+0x2fa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8041b08:	2304      	movs	r3, #4
 8041b0a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8041b0c:	2300      	movs	r3, #0
 8041b0e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8041b10:	f107 0318 	add.w	r3, r7, #24
 8041b14:	4618      	mov	r0, r3
 8041b16:	f004 ffab 	bl	8046a70 <HAL_RCCEx_PeriphCLKConfig>
 8041b1a:	4603      	mov	r3, r0
 8041b1c:	2b00      	cmp	r3, #0
 8041b1e:	d001      	beq.n	8041b24 <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8041b20:	f7ff f96a 	bl	8040df8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8041b24:	4b4f      	ldr	r3, [pc, #316]	; (8041c64 <HAL_UART_MspInit+0x308>)
 8041b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041b28:	4a4e      	ldr	r2, [pc, #312]	; (8041c64 <HAL_UART_MspInit+0x308>)
 8041b2a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8041b30:	4b4c      	ldr	r3, [pc, #304]	; (8041c64 <HAL_UART_MspInit+0x308>)
 8041b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8041b38:	60fb      	str	r3, [r7, #12]
 8041b3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8041b3c:	4b49      	ldr	r3, [pc, #292]	; (8041c64 <HAL_UART_MspInit+0x308>)
 8041b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041b40:	4a48      	ldr	r2, [pc, #288]	; (8041c64 <HAL_UART_MspInit+0x308>)
 8041b42:	f043 0304 	orr.w	r3, r3, #4
 8041b46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8041b48:	4b46      	ldr	r3, [pc, #280]	; (8041c64 <HAL_UART_MspInit+0x308>)
 8041b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041b4c:	f003 0304 	and.w	r3, r3, #4
 8041b50:	60bb      	str	r3, [r7, #8]
 8041b52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = EXT_TX_Pin|EXT_RX_Pin;
 8041b54:	2330      	movs	r3, #48	; 0x30
 8041b56:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041b5a:	2302      	movs	r3, #2
 8041b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041b60:	2300      	movs	r3, #0
 8041b62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041b66:	2300      	movs	r3, #0
 8041b68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8041b6c:	2307      	movs	r3, #7
 8041b6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8041b72:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8041b76:	4619      	mov	r1, r3
 8041b78:	483b      	ldr	r0, [pc, #236]	; (8041c68 <HAL_UART_MspInit+0x30c>)
 8041b7a:	f002 ff89 	bl	8044a90 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA2_Channel2;
 8041b7e:	4b3b      	ldr	r3, [pc, #236]	; (8041c6c <HAL_UART_MspInit+0x310>)
 8041b80:	4a3b      	ldr	r2, [pc, #236]	; (8041c70 <HAL_UART_MspInit+0x314>)
 8041b82:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8041b84:	4b39      	ldr	r3, [pc, #228]	; (8041c6c <HAL_UART_MspInit+0x310>)
 8041b86:	221d      	movs	r2, #29
 8041b88:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8041b8a:	4b38      	ldr	r3, [pc, #224]	; (8041c6c <HAL_UART_MspInit+0x310>)
 8041b8c:	2200      	movs	r2, #0
 8041b8e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8041b90:	4b36      	ldr	r3, [pc, #216]	; (8041c6c <HAL_UART_MspInit+0x310>)
 8041b92:	2200      	movs	r2, #0
 8041b94:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8041b96:	4b35      	ldr	r3, [pc, #212]	; (8041c6c <HAL_UART_MspInit+0x310>)
 8041b98:	2280      	movs	r2, #128	; 0x80
 8041b9a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8041b9c:	4b33      	ldr	r3, [pc, #204]	; (8041c6c <HAL_UART_MspInit+0x310>)
 8041b9e:	2200      	movs	r2, #0
 8041ba0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8041ba2:	4b32      	ldr	r3, [pc, #200]	; (8041c6c <HAL_UART_MspInit+0x310>)
 8041ba4:	2200      	movs	r2, #0
 8041ba6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8041ba8:	4b30      	ldr	r3, [pc, #192]	; (8041c6c <HAL_UART_MspInit+0x310>)
 8041baa:	2200      	movs	r2, #0
 8041bac:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8041bae:	4b2f      	ldr	r3, [pc, #188]	; (8041c6c <HAL_UART_MspInit+0x310>)
 8041bb0:	2200      	movs	r2, #0
 8041bb2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8041bb4:	482d      	ldr	r0, [pc, #180]	; (8041c6c <HAL_UART_MspInit+0x310>)
 8041bb6:	f002 fc67 	bl	8044488 <HAL_DMA_Init>
 8041bba:	4603      	mov	r3, r0
 8041bbc:	2b00      	cmp	r3, #0
 8041bbe:	d001      	beq.n	8041bc4 <HAL_UART_MspInit+0x268>
      Error_Handler();
 8041bc0:	f7ff f91a 	bl	8040df8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8041bc4:	2110      	movs	r1, #16
 8041bc6:	4829      	ldr	r0, [pc, #164]	; (8041c6c <HAL_UART_MspInit+0x310>)
 8041bc8:	f002 fecf 	bl	804496a <HAL_DMA_ConfigChannelAttributes>
 8041bcc:	4603      	mov	r3, r0
 8041bce:	2b00      	cmp	r3, #0
 8041bd0:	d001      	beq.n	8041bd6 <HAL_UART_MspInit+0x27a>
      Error_Handler();
 8041bd2:	f7ff f911 	bl	8040df8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8041bd6:	687b      	ldr	r3, [r7, #4]
 8041bd8:	4a24      	ldr	r2, [pc, #144]	; (8041c6c <HAL_UART_MspInit+0x310>)
 8041bda:	67da      	str	r2, [r3, #124]	; 0x7c
 8041bdc:	4a23      	ldr	r2, [pc, #140]	; (8041c6c <HAL_UART_MspInit+0x310>)
 8041bde:	687b      	ldr	r3, [r7, #4]
 8041be0:	6293      	str	r3, [r2, #40]	; 0x28
    hdma_usart3_tx.Instance = DMA2_Channel3;
 8041be2:	4b24      	ldr	r3, [pc, #144]	; (8041c74 <HAL_UART_MspInit+0x318>)
 8041be4:	4a24      	ldr	r2, [pc, #144]	; (8041c78 <HAL_UART_MspInit+0x31c>)
 8041be6:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8041be8:	4b22      	ldr	r3, [pc, #136]	; (8041c74 <HAL_UART_MspInit+0x318>)
 8041bea:	221e      	movs	r2, #30
 8041bec:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8041bee:	4b21      	ldr	r3, [pc, #132]	; (8041c74 <HAL_UART_MspInit+0x318>)
 8041bf0:	2210      	movs	r2, #16
 8041bf2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8041bf4:	4b1f      	ldr	r3, [pc, #124]	; (8041c74 <HAL_UART_MspInit+0x318>)
 8041bf6:	2200      	movs	r2, #0
 8041bf8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8041bfa:	4b1e      	ldr	r3, [pc, #120]	; (8041c74 <HAL_UART_MspInit+0x318>)
 8041bfc:	2280      	movs	r2, #128	; 0x80
 8041bfe:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8041c00:	4b1c      	ldr	r3, [pc, #112]	; (8041c74 <HAL_UART_MspInit+0x318>)
 8041c02:	2200      	movs	r2, #0
 8041c04:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8041c06:	4b1b      	ldr	r3, [pc, #108]	; (8041c74 <HAL_UART_MspInit+0x318>)
 8041c08:	2200      	movs	r2, #0
 8041c0a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8041c0c:	4b19      	ldr	r3, [pc, #100]	; (8041c74 <HAL_UART_MspInit+0x318>)
 8041c0e:	2200      	movs	r2, #0
 8041c10:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8041c12:	4b18      	ldr	r3, [pc, #96]	; (8041c74 <HAL_UART_MspInit+0x318>)
 8041c14:	2200      	movs	r2, #0
 8041c16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8041c18:	4816      	ldr	r0, [pc, #88]	; (8041c74 <HAL_UART_MspInit+0x318>)
 8041c1a:	f002 fc35 	bl	8044488 <HAL_DMA_Init>
 8041c1e:	4603      	mov	r3, r0
 8041c20:	2b00      	cmp	r3, #0
 8041c22:	d001      	beq.n	8041c28 <HAL_UART_MspInit+0x2cc>
      Error_Handler();
 8041c24:	f7ff f8e8 	bl	8040df8 <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart3_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8041c28:	2110      	movs	r1, #16
 8041c2a:	4812      	ldr	r0, [pc, #72]	; (8041c74 <HAL_UART_MspInit+0x318>)
 8041c2c:	f002 fe9d 	bl	804496a <HAL_DMA_ConfigChannelAttributes>
 8041c30:	4603      	mov	r3, r0
 8041c32:	2b00      	cmp	r3, #0
 8041c34:	d001      	beq.n	8041c3a <HAL_UART_MspInit+0x2de>
      Error_Handler();
 8041c36:	f7ff f8df 	bl	8040df8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8041c3a:	687b      	ldr	r3, [r7, #4]
 8041c3c:	4a0d      	ldr	r2, [pc, #52]	; (8041c74 <HAL_UART_MspInit+0x318>)
 8041c3e:	679a      	str	r2, [r3, #120]	; 0x78
 8041c40:	4a0c      	ldr	r2, [pc, #48]	; (8041c74 <HAL_UART_MspInit+0x318>)
 8041c42:	687b      	ldr	r3, [r7, #4]
 8041c44:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8041c46:	2200      	movs	r2, #0
 8041c48:	2100      	movs	r1, #0
 8041c4a:	203f      	movs	r0, #63	; 0x3f
 8041c4c:	f002 fafc 	bl	8044248 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8041c50:	203f      	movs	r0, #63	; 0x3f
 8041c52:	f002 fb13 	bl	804427c <HAL_NVIC_EnableIRQ>
}
 8041c56:	bf00      	nop
 8041c58:	37c0      	adds	r7, #192	; 0xc0
 8041c5a:	46bd      	mov	sp, r7
 8041c5c:	bd80      	pop	{r7, pc}
 8041c5e:	bf00      	nop
 8041c60:	40004800 	.word	0x40004800
 8041c64:	40021000 	.word	0x40021000
 8041c68:	42020800 	.word	0x42020800
 8041c6c:	2001911c 	.word	0x2001911c
 8041c70:	4002041c 	.word	0x4002041c
 8041c74:	20019214 	.word	0x20019214
 8041c78:	40020430 	.word	0x40020430

08041c7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8041c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8041cb4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8041c80:	f7ff fd00 	bl	8041684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8041c84:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8041c86:	e003      	b.n	8041c90 <LoopCopyDataInit>

08041c88 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8041c88:	4b0b      	ldr	r3, [pc, #44]	; (8041cb8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8041c8a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8041c8c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8041c8e:	3104      	adds	r1, #4

08041c90 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8041c90:	480a      	ldr	r0, [pc, #40]	; (8041cbc <LoopForever+0xa>)
	ldr	r3, =_edata
 8041c92:	4b0b      	ldr	r3, [pc, #44]	; (8041cc0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8041c94:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8041c96:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8041c98:	d3f6      	bcc.n	8041c88 <CopyDataInit>
	ldr	r2, =_sbss
 8041c9a:	4a0a      	ldr	r2, [pc, #40]	; (8041cc4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8041c9c:	e002      	b.n	8041ca4 <LoopFillZerobss>

08041c9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8041c9e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8041ca0:	f842 3b04 	str.w	r3, [r2], #4

08041ca4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8041ca4:	4b08      	ldr	r3, [pc, #32]	; (8041cc8 <LoopForever+0x16>)
	cmp	r2, r3
 8041ca6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8041ca8:	d3f9      	bcc.n	8041c9e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8041caa:	f008 f903 	bl	8049eb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8041cae:	f7ff f84d 	bl	8040d4c <main>

08041cb2 <LoopForever>:

LoopForever:
    b LoopForever
 8041cb2:	e7fe      	b.n	8041cb2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8041cb4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8041cb8:	0804a094 	.word	0x0804a094
	ldr	r0, =_sdata
 8041cbc:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 8041cc0:	2001803c 	.word	0x2001803c
	ldr	r2, =_sbss
 8041cc4:	2001803c 	.word	0x2001803c
	ldr	r3, = _ebss
 8041cc8:	200193e0 	.word	0x200193e0

08041ccc <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8041ccc:	e7fe      	b.n	8041ccc <BusFault_Handler>
	...

08041cd0 <ICG20330_Init>:
  * @param  ICG20330_InitStruct: pointer to a ICG20330_InitTypeDef structure
  *         that contains the configuration setting for the ICG20330.
  * @retval None
  */
void ICG20330_Init(void* InitStruct)
{  
 8041cd0:	b580      	push	{r7, lr}
 8041cd2:	b084      	sub	sp, #16
 8041cd4:	af00      	add	r7, sp, #0
 8041cd6:	6078      	str	r0, [r7, #4]
  GYRO_InitTypeDef *init = (GYRO_InitTypeDef *) InitStruct;
 8041cd8:	687b      	ldr	r3, [r7, #4]
 8041cda:	60fb      	str	r3, [r7, #12]
  uint8_t ctrl = 0x00;
 8041cdc:	2300      	movs	r3, #0
 8041cde:	72fb      	strb	r3, [r7, #11]
  /* Configure the low level interface */
  GYRO_IO_Init();
 8041ce0:	f000 fe8a 	bl	80429f8 <GYRO_IO_Init>
  
  switch (init->Power_Mode) {
 8041ce4:	68fb      	ldr	r3, [r7, #12]
 8041ce6:	781b      	ldrb	r3, [r3, #0]
 8041ce8:	2b03      	cmp	r3, #3
 8041cea:	d817      	bhi.n	8041d1c <ICG20330_Init+0x4c>
 8041cec:	a201      	add	r2, pc, #4	; (adr r2, 8041cf4 <ICG20330_Init+0x24>)
 8041cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8041cf2:	bf00      	nop
 8041cf4:	08041d05 	.word	0x08041d05
 8041cf8:	08041d0b 	.word	0x08041d0b
 8041cfc:	08041d11 	.word	0x08041d11
 8041d00:	08041d17 	.word	0x08041d17
	case ICG20330_MODE_POWERDOWN:
		ctrl = 0xFF;
 8041d04:	23ff      	movs	r3, #255	; 0xff
 8041d06:	72fb      	strb	r3, [r7, #11]
		break;
 8041d08:	e009      	b.n	8041d1e <ICG20330_Init+0x4e>
	case ICG20330_MODE_STANDBY:
		ctrl = 0x10;
 8041d0a:	2310      	movs	r3, #16
 8041d0c:	72fb      	strb	r3, [r7, #11]
		break;
 8041d0e:	e006      	b.n	8041d1e <ICG20330_Init+0x4e>
	case ICG20330_MODE_SLEEP:
		ctrl = 0x40;
 8041d10:	2340      	movs	r3, #64	; 0x40
 8041d12:	72fb      	strb	r3, [r7, #11]
		break;
 8041d14:	e003      	b.n	8041d1e <ICG20330_Init+0x4e>
	case ICG20330_MODE_ACTIVE:
		ctrl = 0x01;
 8041d16:	2301      	movs	r3, #1
 8041d18:	72fb      	strb	r3, [r7, #11]
		break;
 8041d1a:	e000      	b.n	8041d1e <ICG20330_Init+0x4e>
	default:
		break;
 8041d1c:	bf00      	nop
  }
  GYRO_IO_Write(&ctrl, ICG20330_PWR_MGMT_1_ADDR, 1);
 8041d1e:	f107 030b 	add.w	r3, r7, #11
 8041d22:	2201      	movs	r2, #1
 8041d24:	216b      	movs	r1, #107	; 0x6b
 8041d26:	4618      	mov	r0, r3
 8041d28:	f000 fe84 	bl	8042a34 <GYRO_IO_Write>
  
  ctrl &=~ (ICG20330_STBY_XG_DISABLE | ICG20330_STBY_YG_DISABLE | ICG20330_STBY_ZG_DISABLE);
 8041d2c:	7afb      	ldrb	r3, [r7, #11]
 8041d2e:	f023 0307 	bic.w	r3, r3, #7
 8041d32:	b2db      	uxtb	r3, r3
 8041d34:	72fb      	strb	r3, [r7, #11]
  GYRO_IO_Write(&ctrl, ICG20330_PWR_MGMT_2_ADDR, 1);
 8041d36:	f107 030b 	add.w	r3, r7, #11
 8041d3a:	2201      	movs	r2, #1
 8041d3c:	216c      	movs	r1, #108	; 0x6c
 8041d3e:	4618      	mov	r0, r3
 8041d40:	f000 fe78 	bl	8042a34 <GYRO_IO_Write>
}
 8041d44:	bf00      	nop
 8041d46:	3710      	adds	r7, #16
 8041d48:	46bd      	mov	sp, r7
 8041d4a:	bd80      	pop	{r7, pc}

08041d4c <ICG20330_DeInit>:
  * @brief ICG20330 De-initialization
  * @param  None
  * @retval None
  */
void ICG20330_DeInit(void)
{
 8041d4c:	b480      	push	{r7}
 8041d4e:	af00      	add	r7, sp, #0
}
 8041d50:	bf00      	nop
 8041d52:	46bd      	mov	sp, r7
 8041d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041d58:	4770      	bx	lr

08041d5a <ICG20330_ReadID>:
  * @brief  Read ID address of ICG20330
  * @param  None
  * @retval ID name
  */
uint8_t ICG20330_ReadID(void)
{
 8041d5a:	b580      	push	{r7, lr}
 8041d5c:	b082      	sub	sp, #8
 8041d5e:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8041d60:	f000 fe4a 	bl	80429f8 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, ICG20330_WHO_AM_I_ADDR, 1);
 8041d64:	1dfb      	adds	r3, r7, #7
 8041d66:	2201      	movs	r2, #1
 8041d68:	2175      	movs	r1, #117	; 0x75
 8041d6a:	4618      	mov	r0, r3
 8041d6c:	f000 fe77 	bl	8042a5e <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8041d70:	79fb      	ldrb	r3, [r7, #7]
}
 8041d72:	4618      	mov	r0, r3
 8041d74:	3708      	adds	r7, #8
 8041d76:	46bd      	mov	sp, r7
 8041d78:	bd80      	pop	{r7, pc}

08041d7a <ICG20330_RebootCmd>:
  * @brief  Reboot memory content of ICG20330
  * @param  None
  * @retval None
  */
void ICG20330_RebootCmd(void)
{
 8041d7a:	b580      	push	{r7, lr}
 8041d7c:	b082      	sub	sp, #8
 8041d7e:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, ICG20330_PWR_MGMT_1_ADDR, 1);
 8041d80:	1dfb      	adds	r3, r7, #7
 8041d82:	2201      	movs	r2, #1
 8041d84:	216b      	movs	r1, #107	; 0x6b
 8041d86:	4618      	mov	r0, r3
 8041d88:	f000 fe69 	bl	8042a5e <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= ICG20330_DEV_RESET;
 8041d8c:	79fb      	ldrb	r3, [r7, #7]
 8041d8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8041d92:	b2db      	uxtb	r3, r3
 8041d94:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, ICG20330_PWR_MGMT_1_ADDR, 1);
 8041d96:	1dfb      	adds	r3, r7, #7
 8041d98:	2201      	movs	r2, #1
 8041d9a:	216b      	movs	r1, #107	; 0x6b
 8041d9c:	4618      	mov	r0, r3
 8041d9e:	f000 fe49 	bl	8042a34 <GYRO_IO_Write>
}
 8041da2:	bf00      	nop
 8041da4:	3708      	adds	r7, #8
 8041da6:	46bd      	mov	sp, r7
 8041da8:	bd80      	pop	{r7, pc}

08041daa <ICG20330_LowPower>:
  * @brief Set ICG20330 in low-power mode
  * @param 
  * @retval  None
  */
void ICG20330_LowPower(uint16_t InitStruct)
{  
 8041daa:	b580      	push	{r7, lr}
 8041dac:	b084      	sub	sp, #16
 8041dae:	af00      	add	r7, sp, #0
 8041db0:	4603      	mov	r3, r0
 8041db2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8041db4:	2300      	movs	r3, #0
 8041db6:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8041db8:	88fb      	ldrh	r3, [r7, #6]
 8041dba:	b2db      	uxtb	r3, r3
 8041dbc:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, ICG20330_PWR_MGMT_1_ADDR, 1);
 8041dbe:	f107 030f 	add.w	r3, r7, #15
 8041dc2:	2201      	movs	r2, #1
 8041dc4:	216b      	movs	r1, #107	; 0x6b
 8041dc6:	4618      	mov	r0, r3
 8041dc8:	f000 fe34 	bl	8042a34 <GYRO_IO_Write>
}
 8041dcc:	bf00      	nop
 8041dce:	3710      	adds	r7, #16
 8041dd0:	46bd      	mov	sp, r7
 8041dd2:	bd80      	pop	{r7, pc}

08041dd4 <ICG20330_INT1InterruptConfig>:
  * @brief  Set ICG20330 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the ICG20330 Interrupt.
  * @retval None
  */
void ICG20330_INT1InterruptConfig(uint16_t Int1Config)
{
 8041dd4:	b580      	push	{r7, lr}
 8041dd6:	b084      	sub	sp, #16
 8041dd8:	af00      	add	r7, sp, #0
 8041dda:	4603      	mov	r3, r0
 8041ddc:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8041dde:	2300      	movs	r3, #0
 8041de0:	73fb      	strb	r3, [r7, #15]
 8041de2:	2300      	movs	r3, #0
 8041de4:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, ICG20330_INT_PIN_CFG_ADDR, 1);
 8041de6:	f107 030f 	add.w	r3, r7, #15
 8041dea:	2201      	movs	r2, #1
 8041dec:	2137      	movs	r1, #55	; 0x37
 8041dee:	4618      	mov	r0, r3
 8041df0:	f000 fe35 	bl	8042a5e <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, ICG20330_INT_ENABLE_ADDR, 1);
 8041df4:	f107 030e 	add.w	r3, r7, #14
 8041df8:	2201      	movs	r2, #1
 8041dfa:	2138      	movs	r1, #56	; 0x38
 8041dfc:	4618      	mov	r0, r3
 8041dfe:	f000 fe2e 	bl	8042a5e <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8041e02:	7bfb      	ldrb	r3, [r7, #15]
 8041e04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8041e08:	b2db      	uxtb	r3, r3
 8041e0a:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8041e0c:	88fb      	ldrh	r3, [r7, #6]
 8041e0e:	b2db      	uxtb	r3, r3
 8041e10:	121b      	asrs	r3, r3, #8
 8041e12:	b25a      	sxtb	r2, r3
 8041e14:	7bfb      	ldrb	r3, [r7, #15]
 8041e16:	b25b      	sxtb	r3, r3
 8041e18:	4313      	orrs	r3, r2
 8041e1a:	b25b      	sxtb	r3, r3
 8041e1c:	b2db      	uxtb	r3, r3
 8041e1e:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8041e20:	7bbb      	ldrb	r3, [r7, #14]
 8041e22:	f023 0320 	bic.w	r3, r3, #32
 8041e26:	b2db      	uxtb	r3, r3
 8041e28:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8041e2a:	88fb      	ldrh	r3, [r7, #6]
 8041e2c:	b2da      	uxtb	r2, r3
 8041e2e:	7bbb      	ldrb	r3, [r7, #14]
 8041e30:	4313      	orrs	r3, r2
 8041e32:	b2db      	uxtb	r3, r3
 8041e34:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, ICG20330_INT_PIN_CFG_ADDR, 1);
 8041e36:	f107 030f 	add.w	r3, r7, #15
 8041e3a:	2201      	movs	r2, #1
 8041e3c:	2137      	movs	r1, #55	; 0x37
 8041e3e:	4618      	mov	r0, r3
 8041e40:	f000 fdf8 	bl	8042a34 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, ICG20330_INT_ENABLE_ADDR, 1);
 8041e44:	f107 030e 	add.w	r3, r7, #14
 8041e48:	2201      	movs	r2, #1
 8041e4a:	2138      	movs	r1, #56	; 0x38
 8041e4c:	4618      	mov	r0, r3
 8041e4e:	f000 fdf1 	bl	8042a34 <GYRO_IO_Write>
}
 8041e52:	bf00      	nop
 8041e54:	3710      	adds	r7, #16
 8041e56:	46bd      	mov	sp, r7
 8041e58:	bd80      	pop	{r7, pc}

08041e5a <ICG20330_EnableIT>:
  *        @arg ICG20330_INT1
  *        @arg ICG20330_INT2
  * @retval None
  */
void ICG20330_EnableIT(uint8_t IntSel)
{  
 8041e5a:	b580      	push	{r7, lr}
 8041e5c:	b084      	sub	sp, #16
 8041e5e:	af00      	add	r7, sp, #0
 8041e60:	4603      	mov	r3, r0
 8041e62:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, ICG20330_INT_ENABLE_ADDR, 1);
 8041e64:	f107 030f 	add.w	r3, r7, #15
 8041e68:	2201      	movs	r2, #1
 8041e6a:	2138      	movs	r1, #56	; 0x38
 8041e6c:	4618      	mov	r0, r3
 8041e6e:	f000 fdf6 	bl	8042a5e <GYRO_IO_Read>
//    tmpreg &= 0xF7;
//    tmpreg |= ICG20330_INT2INTERRUPT_ENABLE;
//  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&IntSel, ICG20330_INT_ENABLE_ADDR, 1);
 8041e72:	1dfb      	adds	r3, r7, #7
 8041e74:	2201      	movs	r2, #1
 8041e76:	2138      	movs	r1, #56	; 0x38
 8041e78:	4618      	mov	r0, r3
 8041e7a:	f000 fddb 	bl	8042a34 <GYRO_IO_Write>
}
 8041e7e:	bf00      	nop
 8041e80:	3710      	adds	r7, #16
 8041e82:	46bd      	mov	sp, r7
 8041e84:	bd80      	pop	{r7, pc}

08041e86 <ICG20330_DisableIT>:
  *        @arg ICG20330_INT1
  *        @arg ICG20330_INT2
  * @retval None
  */
void ICG20330_DisableIT(uint8_t IntSel)
{  
 8041e86:	b580      	push	{r7, lr}
 8041e88:	b084      	sub	sp, #16
 8041e8a:	af00      	add	r7, sp, #0
 8041e8c:	4603      	mov	r3, r0
 8041e8e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, ICG20330_INT_ENABLE_ADDR, 1);
 8041e90:	f107 030f 	add.w	r3, r7, #15
 8041e94:	2201      	movs	r2, #1
 8041e96:	2138      	movs	r1, #56	; 0x38
 8041e98:	4618      	mov	r0, r3
 8041e9a:	f000 fde0 	bl	8042a5e <GYRO_IO_Read>
//  else if(IntSel == ICG20330_INT2)
//  {
//    tmpreg &= 0xF7;
//    tmpreg |= ICG20330_INT2INTERRUPT_DISABLE;
//  }
  tmpreg &=~ IntSel;
 8041e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8041ea2:	43db      	mvns	r3, r3
 8041ea4:	b25a      	sxtb	r2, r3
 8041ea6:	7bfb      	ldrb	r3, [r7, #15]
 8041ea8:	b25b      	sxtb	r3, r3
 8041eaa:	4013      	ands	r3, r2
 8041eac:	b25b      	sxtb	r3, r3
 8041eae:	b2db      	uxtb	r3, r3
 8041eb0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, ICG20330_INT_ENABLE_ADDR, 1);
 8041eb2:	f107 030f 	add.w	r3, r7, #15
 8041eb6:	2201      	movs	r2, #1
 8041eb8:	2138      	movs	r1, #56	; 0x38
 8041eba:	4618      	mov	r0, r3
 8041ebc:	f000 fdba 	bl	8042a34 <GYRO_IO_Write>
}
 8041ec0:	bf00      	nop
 8041ec2:	3710      	adds	r7, #16
 8041ec4:	46bd      	mov	sp, r7
 8041ec6:	bd80      	pop	{r7, pc}

08041ec8 <ICG20330_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the ICG20330.
  * @retval None
  */
void ICG20330_FilterConfig(uint8_t FilterStruct)
{
 8041ec8:	b580      	push	{r7, lr}
 8041eca:	b084      	sub	sp, #16
 8041ecc:	af00      	add	r7, sp, #0
 8041ece:	4603      	mov	r3, r0
 8041ed0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, ICG20330_CONFIG_ADDR, 1);
 8041ed2:	f107 030f 	add.w	r3, r7, #15
 8041ed6:	2201      	movs	r2, #1
 8041ed8:	211a      	movs	r1, #26
 8041eda:	4618      	mov	r0, r3
 8041edc:	f000 fdbf 	bl	8042a5e <GYRO_IO_Read>
//
//  /* Configure MEMS: mode and cutoff frequency */
//  tmpreg |= FilterStruct;
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&FilterStruct, ICG20330_CONFIG_ADDR, 1);
 8041ee0:	1dfb      	adds	r3, r7, #7
 8041ee2:	2201      	movs	r2, #1
 8041ee4:	211a      	movs	r1, #26
 8041ee6:	4618      	mov	r0, r3
 8041ee8:	f000 fda4 	bl	8042a34 <GYRO_IO_Write>
}
 8041eec:	bf00      	nop
 8041eee:	3710      	adds	r7, #16
 8041ef0:	46bd      	mov	sp, r7
 8041ef2:	bd80      	pop	{r7, pc}

08041ef4 <ICG20330_FilterCmd>:
  *         @arg: ICG20330_HIGHPASSFILTER_DISABLE
  *         @arg: ICG20330_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void ICG20330_FilterCmd(uint8_t HighPassFilterState)
{
 8041ef4:	b580      	push	{r7, lr}
 8041ef6:	b084      	sub	sp, #16
 8041ef8:	af00      	add	r7, sp, #0
 8041efa:	4603      	mov	r3, r0
 8041efc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, ICG20330_GYRO_CONFIG_ADDR, 1);
 8041efe:	f107 030f 	add.w	r3, r7, #15
 8041f02:	2201      	movs	r2, #1
 8041f04:	211b      	movs	r1, #27
 8041f06:	4618      	mov	r0, r3
 8041f08:	f000 fda9 	bl	8042a5e <GYRO_IO_Read>
//  tmpreg &= 0xEF;
//
//  tmpreg |= HighPassFilterState;
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&HighPassFilterState, ICG20330_GYRO_CONFIG_ADDR, 1);
 8041f0c:	1dfb      	adds	r3, r7, #7
 8041f0e:	2201      	movs	r2, #1
 8041f10:	211b      	movs	r1, #27
 8041f12:	4618      	mov	r0, r3
 8041f14:	f000 fd8e 	bl	8042a34 <GYRO_IO_Write>
}
 8041f18:	bf00      	nop
 8041f1a:	3710      	adds	r7, #16
 8041f1c:	46bd      	mov	sp, r7
 8041f1e:	bd80      	pop	{r7, pc}

08041f20 <ICG20330_ReadXYZAngRate>:
* @brief  Calculate the ICG20330 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void ICG20330_ReadXYZAngRate(float *pfData)
{
 8041f20:	b580      	push	{r7, lr}
 8041f22:	b08a      	sub	sp, #40	; 0x28
 8041f24:	af00      	add	r7, sp, #0
 8041f26:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8041f28:	2300      	movs	r3, #0
 8041f2a:	61bb      	str	r3, [r7, #24]
 8041f2c:	2300      	movs	r3, #0
 8041f2e:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8041f30:	f107 0310 	add.w	r3, r7, #16
 8041f34:	2200      	movs	r2, #0
 8041f36:	601a      	str	r2, [r3, #0]
 8041f38:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8041f3a:	2300      	movs	r3, #0
 8041f3c:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8041f3e:	f04f 0300 	mov.w	r3, #0
 8041f42:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8041f44:	2300      	movs	r3, #0
 8041f46:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,ICG20330_GYRO_CONFIG_ADDR,1);
 8041f48:	f107 030f 	add.w	r3, r7, #15
 8041f4c:	2201      	movs	r2, #1
 8041f4e:	211b      	movs	r1, #27
 8041f50:	4618      	mov	r0, r3
 8041f52:	f000 fd84 	bl	8042a5e <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,ICG20330_GYRO_XOUT_H_ADDR,6);
 8041f56:	f107 0318 	add.w	r3, r7, #24
 8041f5a:	2206      	movs	r2, #6
 8041f5c:	2143      	movs	r1, #67	; 0x43
 8041f5e:	4618      	mov	r0, r3
 8041f60:	f000 fd7d 	bl	8042a5e <GYRO_IO_Read>
//      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
//    }
//  }
//  else
//  {
    for(i=0; i<3; i++)
 8041f64:	2300      	movs	r3, #0
 8041f66:	623b      	str	r3, [r7, #32]
 8041f68:	e01f      	b.n	8041faa <ICG20330_ReadXYZAngRate+0x8a>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8041f6a:	6a3b      	ldr	r3, [r7, #32]
 8041f6c:	005b      	lsls	r3, r3, #1
 8041f6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8041f72:	4413      	add	r3, r2
 8041f74:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8041f78:	b29b      	uxth	r3, r3
 8041f7a:	021b      	lsls	r3, r3, #8
 8041f7c:	b29a      	uxth	r2, r3
 8041f7e:	6a3b      	ldr	r3, [r7, #32]
 8041f80:	005b      	lsls	r3, r3, #1
 8041f82:	3301      	adds	r3, #1
 8041f84:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8041f88:	440b      	add	r3, r1
 8041f8a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8041f8e:	b29b      	uxth	r3, r3
 8041f90:	4413      	add	r3, r2
 8041f92:	b29b      	uxth	r3, r3
 8041f94:	b21a      	sxth	r2, r3
 8041f96:	6a3b      	ldr	r3, [r7, #32]
 8041f98:	005b      	lsls	r3, r3, #1
 8041f9a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8041f9e:	440b      	add	r3, r1
 8041fa0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8041fa4:	6a3b      	ldr	r3, [r7, #32]
 8041fa6:	3301      	adds	r3, #1
 8041fa8:	623b      	str	r3, [r7, #32]
 8041faa:	6a3b      	ldr	r3, [r7, #32]
 8041fac:	2b02      	cmp	r3, #2
 8041fae:	dddc      	ble.n	8041f6a <ICG20330_ReadXYZAngRate+0x4a>
    }
//  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & ICG20330_FS_SEL)
 8041fb0:	7bfb      	ldrb	r3, [r7, #15]
 8041fb2:	f003 0318 	and.w	r3, r3, #24
 8041fb6:	2b18      	cmp	r3, #24
 8041fb8:	d841      	bhi.n	804203e <ICG20330_ReadXYZAngRate+0x11e>
 8041fba:	a201      	add	r2, pc, #4	; (adr r2, 8041fc0 <ICG20330_ReadXYZAngRate+0xa0>)
 8041fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8041fc0:	08042025 	.word	0x08042025
 8041fc4:	0804203f 	.word	0x0804203f
 8041fc8:	0804203f 	.word	0x0804203f
 8041fcc:	0804203f 	.word	0x0804203f
 8041fd0:	0804203f 	.word	0x0804203f
 8041fd4:	0804203f 	.word	0x0804203f
 8041fd8:	0804203f 	.word	0x0804203f
 8041fdc:	0804203f 	.word	0x0804203f
 8041fe0:	0804202d 	.word	0x0804202d
 8041fe4:	0804203f 	.word	0x0804203f
 8041fe8:	0804203f 	.word	0x0804203f
 8041fec:	0804203f 	.word	0x0804203f
 8041ff0:	0804203f 	.word	0x0804203f
 8041ff4:	0804203f 	.word	0x0804203f
 8041ff8:	0804203f 	.word	0x0804203f
 8041ffc:	0804203f 	.word	0x0804203f
 8042000:	08042033 	.word	0x08042033
 8042004:	0804203f 	.word	0x0804203f
 8042008:	0804203f 	.word	0x0804203f
 804200c:	0804203f 	.word	0x0804203f
 8042010:	0804203f 	.word	0x0804203f
 8042014:	0804203f 	.word	0x0804203f
 8042018:	0804203f 	.word	0x0804203f
 804201c:	0804203f 	.word	0x0804203f
 8042020:	08042039 	.word	0x08042039
  {
  case ICG20330_FULLSCALE_63: //+-31.25
    sensitivity=ICG20330_SENSITIVITY_1024;
 8042024:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8042028:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 804202a:	e008      	b.n	804203e <ICG20330_ReadXYZAngRate+0x11e>
    
  case ICG20330_FULLSCALE_125: //+-62.5
    sensitivity=ICG20330_SENSITIVITY_524;
 804202c:	4b1b      	ldr	r3, [pc, #108]	; (804209c <ICG20330_ReadXYZAngRate+0x17c>)
 804202e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8042030:	e005      	b.n	804203e <ICG20330_ReadXYZAngRate+0x11e>
    
  case ICG20330_FULLSCALE_250: //+-125
    sensitivity=ICG20330_SENSITIVITY_262;
 8042032:	4b1b      	ldr	r3, [pc, #108]	; (80420a0 <ICG20330_ReadXYZAngRate+0x180>)
 8042034:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8042036:	e002      	b.n	804203e <ICG20330_ReadXYZAngRate+0x11e>
  case ICG20330_FULLSCALE_500: //+-250
     sensitivity=ICG20330_SENSITIVITY_131;
 8042038:	4b1a      	ldr	r3, [pc, #104]	; (80420a4 <ICG20330_ReadXYZAngRate+0x184>)
 804203a:	627b      	str	r3, [r7, #36]	; 0x24
     break;
 804203c:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 804203e:	2300      	movs	r3, #0
 8042040:	623b      	str	r3, [r7, #32]
 8042042:	e023      	b.n	804208c <ICG20330_ReadXYZAngRate+0x16c>
  {
    pfData[i]=(float)(RawData[i]);
 8042044:	6a3b      	ldr	r3, [r7, #32]
 8042046:	005b      	lsls	r3, r3, #1
 8042048:	f107 0228 	add.w	r2, r7, #40	; 0x28
 804204c:	4413      	add	r3, r2
 804204e:	f933 1c18 	ldrsh.w	r1, [r3, #-24]
 8042052:	6a3b      	ldr	r3, [r7, #32]
 8042054:	009b      	lsls	r3, r3, #2
 8042056:	687a      	ldr	r2, [r7, #4]
 8042058:	4413      	add	r3, r2
 804205a:	ee07 1a90 	vmov	s15, r1
 804205e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8042062:	edc3 7a00 	vstr	s15, [r3]
    pfData[i]/=(float)(sensitivity);
 8042066:	6a3b      	ldr	r3, [r7, #32]
 8042068:	009b      	lsls	r3, r3, #2
 804206a:	687a      	ldr	r2, [r7, #4]
 804206c:	4413      	add	r3, r2
 804206e:	edd3 6a00 	vldr	s13, [r3]
 8042072:	6a3b      	ldr	r3, [r7, #32]
 8042074:	009b      	lsls	r3, r3, #2
 8042076:	687a      	ldr	r2, [r7, #4]
 8042078:	4413      	add	r3, r2
 804207a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 804207e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8042082:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8042086:	6a3b      	ldr	r3, [r7, #32]
 8042088:	3301      	adds	r3, #1
 804208a:	623b      	str	r3, [r7, #32]
 804208c:	6a3b      	ldr	r3, [r7, #32]
 804208e:	2b02      	cmp	r3, #2
 8042090:	ddd8      	ble.n	8042044 <ICG20330_ReadXYZAngRate+0x124>
  }
}
 8042092:	bf00      	nop
 8042094:	bf00      	nop
 8042096:	3728      	adds	r7, #40	; 0x28
 8042098:	46bd      	mov	sp, r7
 804209a:	bd80      	pop	{r7, pc}
 804209c:	44030000 	.word	0x44030000
 80420a0:	43830000 	.word	0x43830000
 80420a4:	43030000 	.word	0x43030000

080420a8 <BSP_I2C1_Init>:
/**
  * @brief  Initialize BSP I2C1.
  * @retval BSP status.
  */
int32_t BSP_I2C1_Init()
{
 80420a8:	b580      	push	{r7, lr}
 80420aa:	b082      	sub	sp, #8
 80420ac:	af00      	add	r7, sp, #0
  int32_t status = BSP_ERROR_NONE;
 80420ae:	2300      	movs	r3, #0
 80420b0:	607b      	str	r3, [r7, #4]

  if(&hi2c1 != NULL)
  {
	 hbus_i2c1 = hi2c1;
 80420b2:	4a20      	ldr	r2, [pc, #128]	; (8042134 <BSP_I2C1_Init+0x8c>)
 80420b4:	4b20      	ldr	r3, [pc, #128]	; (8042138 <BSP_I2C1_Init+0x90>)
 80420b6:	4610      	mov	r0, r2
 80420b8:	4619      	mov	r1, r3
 80420ba:	237c      	movs	r3, #124	; 0x7c
 80420bc:	461a      	mov	r2, r3
 80420be:	f007 ff1d 	bl	8049efc <memcpy>
  else
  {
	  hbus_i2c1.Instance = BUS_I2C1;
  }

  if (I2c1InitCounter == 0U)
 80420c2:	4b1e      	ldr	r3, [pc, #120]	; (804213c <BSP_I2C1_Init+0x94>)
 80420c4:	681b      	ldr	r3, [r3, #0]
 80420c6:	2b00      	cmp	r3, #0
 80420c8:	d125      	bne.n	8042116 <BSP_I2C1_Init+0x6e>
  {
    if (HAL_I2C_GetState(&hbus_i2c1) == HAL_I2C_STATE_RESET)
 80420ca:	481a      	ldr	r0, [pc, #104]	; (8042134 <BSP_I2C1_Init+0x8c>)
 80420cc:	f003 fc27 	bl	804591e <HAL_I2C_GetState>
 80420d0:	4603      	mov	r3, r0
 80420d2:	2b00      	cmp	r3, #0
 80420d4:	d11f      	bne.n	8042116 <BSP_I2C1_Init+0x6e>
      if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(SystemCoreClock, BUS_I2C1_FREQUENCY)) != HAL_OK)
      {
        status = BSP_ERROR_BUS_FAILURE;
      }
#else
      if (Bus_IsI2c1MspCbValid == 0U)
 80420d6:	4b1a      	ldr	r3, [pc, #104]	; (8042140 <BSP_I2C1_Init+0x98>)
 80420d8:	681b      	ldr	r3, [r3, #0]
 80420da:	2b00      	cmp	r3, #0
 80420dc:	d107      	bne.n	80420ee <BSP_I2C1_Init+0x46>
      {
        if (BSP_I2C1_RegisterDefaultMspCallbacks() != BSP_ERROR_NONE)
 80420de:	f000 f865 	bl	80421ac <BSP_I2C1_RegisterDefaultMspCallbacks>
 80420e2:	4603      	mov	r3, r0
 80420e4:	2b00      	cmp	r3, #0
 80420e6:	d002      	beq.n	80420ee <BSP_I2C1_Init+0x46>
        {
          status = BSP_ERROR_MSP_FAILURE;
 80420e8:	f06f 0309 	mvn.w	r3, #9
 80420ec:	607b      	str	r3, [r7, #4]
        }
      }

      if (status == BSP_ERROR_NONE)
 80420ee:	687b      	ldr	r3, [r7, #4]
 80420f0:	2b00      	cmp	r3, #0
 80420f2:	d110      	bne.n	8042116 <BSP_I2C1_Init+0x6e>
      {
        if (MX_I2C1_Init(&hbus_i2c1, I2C_GetTiming(SystemCoreClock, BUS_I2C1_FREQUENCY)) != HAL_OK)
 80420f4:	4b13      	ldr	r3, [pc, #76]	; (8042144 <BSP_I2C1_Init+0x9c>)
 80420f6:	681b      	ldr	r3, [r3, #0]
 80420f8:	4913      	ldr	r1, [pc, #76]	; (8042148 <BSP_I2C1_Init+0xa0>)
 80420fa:	4618      	mov	r0, r3
 80420fc:	f000 f9b2 	bl	8042464 <I2C_GetTiming>
 8042100:	4603      	mov	r3, r0
 8042102:	4619      	mov	r1, r3
 8042104:	480b      	ldr	r0, [pc, #44]	; (8042134 <BSP_I2C1_Init+0x8c>)
 8042106:	f7fe fd73 	bl	8040bf0 <MX_I2C1_Init>
 804210a:	4603      	mov	r3, r0
 804210c:	2b00      	cmp	r3, #0
 804210e:	d002      	beq.n	8042116 <BSP_I2C1_Init+0x6e>
        {
          status = BSP_ERROR_BUS_FAILURE;
 8042110:	f06f 0307 	mvn.w	r3, #7
 8042114:	607b      	str	r3, [r7, #4]
        }
      }
#endif
    }
  }
  if (I2c1InitCounter < 0xFFFFFFFFU)
 8042116:	4b09      	ldr	r3, [pc, #36]	; (804213c <BSP_I2C1_Init+0x94>)
 8042118:	681b      	ldr	r3, [r3, #0]
 804211a:	f1b3 3fff 	cmp.w	r3, #4294967295
 804211e:	d004      	beq.n	804212a <BSP_I2C1_Init+0x82>
  {
    I2c1InitCounter++;
 8042120:	4b06      	ldr	r3, [pc, #24]	; (804213c <BSP_I2C1_Init+0x94>)
 8042122:	681b      	ldr	r3, [r3, #0]
 8042124:	3301      	adds	r3, #1
 8042126:	4a05      	ldr	r2, [pc, #20]	; (804213c <BSP_I2C1_Init+0x94>)
 8042128:	6013      	str	r3, [r2, #0]
  }
  return status;
 804212a:	687b      	ldr	r3, [r7, #4]
}
 804212c:	4618      	mov	r0, r3
 804212e:	3708      	adds	r7, #8
 8042130:	46bd      	mov	sp, r7
 8042132:	bd80      	pop	{r7, pc}
 8042134:	20018a74 	.word	0x20018a74
 8042138:	20018ca8 	.word	0x20018ca8
 804213c:	20018068 	.word	0x20018068
 8042140:	2001806c 	.word	0x2001806c
 8042144:	20018000 	.word	0x20018000
 8042148:	000186a0 	.word	0x000186a0

0804214c <BSP_I2C1_WriteReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status.
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 804214c:	b580      	push	{r7, lr}
 804214e:	b086      	sub	sp, #24
 8042150:	af02      	add	r7, sp, #8
 8042152:	60ba      	str	r2, [r7, #8]
 8042154:	461a      	mov	r2, r3
 8042156:	4603      	mov	r3, r0
 8042158:	81fb      	strh	r3, [r7, #14]
 804215a:	460b      	mov	r3, r1
 804215c:	81bb      	strh	r3, [r7, #12]
 804215e:	4613      	mov	r3, r2
 8042160:	80fb      	strh	r3, [r7, #6]
  return I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 8042162:	89b9      	ldrh	r1, [r7, #12]
 8042164:	89f8      	ldrh	r0, [r7, #14]
 8042166:	88fb      	ldrh	r3, [r7, #6]
 8042168:	9300      	str	r3, [sp, #0]
 804216a:	68bb      	ldr	r3, [r7, #8]
 804216c:	2201      	movs	r2, #1
 804216e:	f000 f8d1 	bl	8042314 <I2C1_WriteReg>
 8042172:	4603      	mov	r3, r0
}
 8042174:	4618      	mov	r0, r3
 8042176:	3710      	adds	r7, #16
 8042178:	46bd      	mov	sp, r7
 804217a:	bd80      	pop	{r7, pc}

0804217c <BSP_I2C1_ReadReg>:
  * @param  pData   Pointer to data buffer.
  * @param  Length  Number of data.
  * @retval BSP status
  */
int32_t BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 804217c:	b580      	push	{r7, lr}
 804217e:	b086      	sub	sp, #24
 8042180:	af02      	add	r7, sp, #8
 8042182:	60ba      	str	r2, [r7, #8]
 8042184:	461a      	mov	r2, r3
 8042186:	4603      	mov	r3, r0
 8042188:	81fb      	strh	r3, [r7, #14]
 804218a:	460b      	mov	r3, r1
 804218c:	81bb      	strh	r3, [r7, #12]
 804218e:	4613      	mov	r3, r2
 8042190:	80fb      	strh	r3, [r7, #6]
  return I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length);
 8042192:	89b9      	ldrh	r1, [r7, #12]
 8042194:	89f8      	ldrh	r0, [r7, #14]
 8042196:	88fb      	ldrh	r3, [r7, #6]
 8042198:	9300      	str	r3, [sp, #0]
 804219a:	68bb      	ldr	r3, [r7, #8]
 804219c:	2201      	movs	r2, #1
 804219e:	f000 f90d 	bl	80423bc <I2C1_ReadReg>
 80421a2:	4603      	mov	r3, r0
}
 80421a4:	4618      	mov	r0, r3
 80421a6:	3710      	adds	r7, #16
 80421a8:	46bd      	mov	sp, r7
 80421aa:	bd80      	pop	{r7, pc}

080421ac <BSP_I2C1_RegisterDefaultMspCallbacks>:
/**
  * @brief  Register Default I2C1 Bus Msp Callbacks
  * @retval BSP status
  */
int32_t BSP_I2C1_RegisterDefaultMspCallbacks(void)
{
 80421ac:	b580      	push	{r7, lr}
 80421ae:	b082      	sub	sp, #8
 80421b0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80421b2:	2300      	movs	r3, #0
 80421b4:	607b      	str	r3, [r7, #4]

  __HAL_I2C_RESET_HANDLE_STATE(&hbus_i2c1);
 80421b6:	4b15      	ldr	r3, [pc, #84]	; (804220c <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 80421b8:	2200      	movs	r2, #0
 80421ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80421be:	4b13      	ldr	r3, [pc, #76]	; (804220c <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 80421c0:	2200      	movs	r2, #0
 80421c2:	675a      	str	r2, [r3, #116]	; 0x74
 80421c4:	4b11      	ldr	r3, [pc, #68]	; (804220c <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 80421c6:	2200      	movs	r2, #0
 80421c8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Register default MspInit/MspDeInit Callback */
  if (HAL_I2C_RegisterCallback(&hbus_i2c1, HAL_I2C_MSPINIT_CB_ID, I2C1_MspInit) != HAL_OK)
 80421ca:	4a11      	ldr	r2, [pc, #68]	; (8042210 <BSP_I2C1_RegisterDefaultMspCallbacks+0x64>)
 80421cc:	2109      	movs	r1, #9
 80421ce:	480f      	ldr	r0, [pc, #60]	; (804220c <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 80421d0:	f002 ffec 	bl	80451ac <HAL_I2C_RegisterCallback>
 80421d4:	4603      	mov	r3, r0
 80421d6:	2b00      	cmp	r3, #0
 80421d8:	d003      	beq.n	80421e2 <BSP_I2C1_RegisterDefaultMspCallbacks+0x36>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80421da:	f06f 0303 	mvn.w	r3, #3
 80421de:	607b      	str	r3, [r7, #4]
 80421e0:	e00e      	b.n	8042200 <BSP_I2C1_RegisterDefaultMspCallbacks+0x54>
  }
  else if (HAL_I2C_RegisterCallback(&hbus_i2c1, HAL_I2C_MSPDEINIT_CB_ID, I2C1_MspDeInit) != HAL_OK)
 80421e2:	4a0c      	ldr	r2, [pc, #48]	; (8042214 <BSP_I2C1_RegisterDefaultMspCallbacks+0x68>)
 80421e4:	210a      	movs	r1, #10
 80421e6:	4809      	ldr	r0, [pc, #36]	; (804220c <BSP_I2C1_RegisterDefaultMspCallbacks+0x60>)
 80421e8:	f002 ffe0 	bl	80451ac <HAL_I2C_RegisterCallback>
 80421ec:	4603      	mov	r3, r0
 80421ee:	2b00      	cmp	r3, #0
 80421f0:	d003      	beq.n	80421fa <BSP_I2C1_RegisterDefaultMspCallbacks+0x4e>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80421f2:	f06f 0303 	mvn.w	r3, #3
 80421f6:	607b      	str	r3, [r7, #4]
 80421f8:	e002      	b.n	8042200 <BSP_I2C1_RegisterDefaultMspCallbacks+0x54>
  }
  else
  {
    Bus_IsI2c1MspCbValid = 1U;
 80421fa:	4b07      	ldr	r3, [pc, #28]	; (8042218 <BSP_I2C1_RegisterDefaultMspCallbacks+0x6c>)
 80421fc:	2201      	movs	r2, #1
 80421fe:	601a      	str	r2, [r3, #0]
  }

  /* BSP status */
  return ret;
 8042200:	687b      	ldr	r3, [r7, #4]
}
 8042202:	4618      	mov	r0, r3
 8042204:	3708      	adds	r7, #8
 8042206:	46bd      	mov	sp, r7
 8042208:	bd80      	pop	{r7, pc}
 804220a:	bf00      	nop
 804220c:	20018a74 	.word	0x20018a74
 8042210:	0804221d 	.word	0x0804221d
 8042214:	080422d1 	.word	0x080422d1
 8042218:	2001806c 	.word	0x2001806c

0804221c <I2C1_MspInit>:
  * @brief  Initializes I2C1 MSP.
  * @param  hI2c I2C handle.
  * @retval None
  */
static void  I2C1_MspInit(I2C_HandleTypeDef *hI2c)
{
 804221c:	b580      	push	{r7, lr}
 804221e:	b08a      	sub	sp, #40	; 0x28
 8042220:	af00      	add	r7, sp, #0
 8042222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /*** Configure the GPIOs ***/
  /* Enable VddIO2 for GPIOG */
  __HAL_RCC_PWR_CLK_ENABLE();
 8042224:	4b28      	ldr	r3, [pc, #160]	; (80422c8 <I2C1_MspInit+0xac>)
 8042226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042228:	4a27      	ldr	r2, [pc, #156]	; (80422c8 <I2C1_MspInit+0xac>)
 804222a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 804222e:	6593      	str	r3, [r2, #88]	; 0x58
 8042230:	4b25      	ldr	r3, [pc, #148]	; (80422c8 <I2C1_MspInit+0xac>)
 8042232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042238:	613b      	str	r3, [r7, #16]
 804223a:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 804223c:	f004 fafc 	bl	8046838 <HAL_PWREx_EnableVddIO2>
  /* Enable GPIO clock */
  BUS_I2C1_GPIO_CLK_ENABLE();
 8042240:	4b21      	ldr	r3, [pc, #132]	; (80422c8 <I2C1_MspInit+0xac>)
 8042242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042244:	4a20      	ldr	r2, [pc, #128]	; (80422c8 <I2C1_MspInit+0xac>)
 8042246:	f043 0302 	orr.w	r3, r3, #2
 804224a:	64d3      	str	r3, [r2, #76]	; 0x4c
 804224c:	4b1e      	ldr	r3, [pc, #120]	; (80422c8 <I2C1_MspInit+0xac>)
 804224e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042250:	f003 0302 	and.w	r3, r3, #2
 8042254:	60fb      	str	r3, [r7, #12]
 8042256:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C SCL as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SCL_GPIO_PIN;
 8042258:	f44f 7380 	mov.w	r3, #256	; 0x100
 804225c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 804225e:	2312      	movs	r3, #18
 8042260:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8042262:	2300      	movs	r3, #0
 8042264:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8042266:	2302      	movs	r3, #2
 8042268:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C1_SCL_GPIO_AF;
 804226a:	2304      	movs	r3, #4
 804226c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &gpio_init_structure);
 804226e:	f107 0314 	add.w	r3, r7, #20
 8042272:	4619      	mov	r1, r3
 8042274:	4815      	ldr	r0, [pc, #84]	; (80422cc <I2C1_MspInit+0xb0>)
 8042276:	f002 fc0b 	bl	8044a90 <HAL_GPIO_Init>

  /* Configure I2C SDA as alternate function */
  gpio_init_structure.Pin       = BUS_I2C1_SDA_GPIO_PIN;
 804227a:	f44f 7300 	mov.w	r3, #512	; 0x200
 804227e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8042280:	2304      	movs	r3, #4
 8042282:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &gpio_init_structure);
 8042284:	f107 0314 	add.w	r3, r7, #20
 8042288:	4619      	mov	r1, r3
 804228a:	4810      	ldr	r0, [pc, #64]	; (80422cc <I2C1_MspInit+0xb0>)
 804228c:	f002 fc00 	bl	8044a90 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C1_CLK_ENABLE();
 8042290:	4b0d      	ldr	r3, [pc, #52]	; (80422c8 <I2C1_MspInit+0xac>)
 8042292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042294:	4a0c      	ldr	r2, [pc, #48]	; (80422c8 <I2C1_MspInit+0xac>)
 8042296:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 804229a:	6593      	str	r3, [r2, #88]	; 0x58
 804229c:	4b0a      	ldr	r3, [pc, #40]	; (80422c8 <I2C1_MspInit+0xac>)
 804229e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80422a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80422a4:	60bb      	str	r3, [r7, #8]
 80422a6:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C1_FORCE_RESET();
 80422a8:	4b07      	ldr	r3, [pc, #28]	; (80422c8 <I2C1_MspInit+0xac>)
 80422aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80422ac:	4a06      	ldr	r2, [pc, #24]	; (80422c8 <I2C1_MspInit+0xac>)
 80422ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80422b2:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  BUS_I2C1_RELEASE_RESET();
 80422b4:	4b04      	ldr	r3, [pc, #16]	; (80422c8 <I2C1_MspInit+0xac>)
 80422b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80422b8:	4a03      	ldr	r2, [pc, #12]	; (80422c8 <I2C1_MspInit+0xac>)
 80422ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80422be:	6393      	str	r3, [r2, #56]	; 0x38
}
 80422c0:	bf00      	nop
 80422c2:	3728      	adds	r7, #40	; 0x28
 80422c4:	46bd      	mov	sp, r7
 80422c6:	bd80      	pop	{r7, pc}
 80422c8:	40021000 	.word	0x40021000
 80422cc:	42020400 	.word	0x42020400

080422d0 <I2C1_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hI2c I2C handle.
  * @retval None
  */
static void I2C1_MspDeInit(I2C_HandleTypeDef *hI2c)
{
 80422d0:	b580      	push	{r7, lr}
 80422d2:	b088      	sub	sp, #32
 80422d4:	af00      	add	r7, sp, #0
 80422d6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hI2c);

  /* De-initialiaze I2C SCL and SDA */
  gpio_init_structure.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80422d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80422dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, gpio_init_structure.Pin);
 80422de:	68fb      	ldr	r3, [r7, #12]
 80422e0:	4619      	mov	r1, r3
 80422e2:	480a      	ldr	r0, [pc, #40]	; (804230c <I2C1_MspDeInit+0x3c>)
 80422e4:	f002 fd54 	bl	8044d90 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80422e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80422ec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80422ee:	68fb      	ldr	r3, [r7, #12]
 80422f0:	4619      	mov	r1, r3
 80422f2:	4806      	ldr	r0, [pc, #24]	; (804230c <I2C1_MspDeInit+0x3c>)
 80422f4:	f002 fd4c 	bl	8044d90 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C1_CLK_DISABLE();
 80422f8:	4b05      	ldr	r3, [pc, #20]	; (8042310 <I2C1_MspDeInit+0x40>)
 80422fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80422fc:	4a04      	ldr	r2, [pc, #16]	; (8042310 <I2C1_MspDeInit+0x40>)
 80422fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8042302:	6593      	str	r3, [r2, #88]	; 0x58
}
 8042304:	bf00      	nop
 8042306:	3720      	adds	r7, #32
 8042308:	46bd      	mov	sp, r7
 804230a:	bd80      	pop	{r7, pc}
 804230c:	42020400 	.word	0x42020400
 8042310:	40021000 	.word	0x40021000

08042314 <I2C1_WriteReg>:
  * @param  pData      The target register values to be written.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8042314:	b580      	push	{r7, lr}
 8042316:	b08a      	sub	sp, #40	; 0x28
 8042318:	af04      	add	r7, sp, #16
 804231a:	607b      	str	r3, [r7, #4]
 804231c:	4603      	mov	r3, r0
 804231e:	81fb      	strh	r3, [r7, #14]
 8042320:	460b      	mov	r3, r1
 8042322:	81bb      	strh	r3, [r7, #12]
 8042324:	4613      	mov	r3, r2
 8042326:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 8042328:	2300      	movs	r3, #0
 804232a:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Write(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C1_TIMEOUT) != HAL_OK)
 804232c:	8978      	ldrh	r0, [r7, #10]
 804232e:	89ba      	ldrh	r2, [r7, #12]
 8042330:	89f9      	ldrh	r1, [r7, #14]
 8042332:	f242 7310 	movw	r3, #10000	; 0x2710
 8042336:	9302      	str	r3, [sp, #8]
 8042338:	8c3b      	ldrh	r3, [r7, #32]
 804233a:	9301      	str	r3, [sp, #4]
 804233c:	687b      	ldr	r3, [r7, #4]
 804233e:	9300      	str	r3, [sp, #0]
 8042340:	4603      	mov	r3, r0
 8042342:	481d      	ldr	r0, [pc, #116]	; (80423b8 <I2C1_WriteReg+0xa4>)
 8042344:	f002 ffda 	bl	80452fc <HAL_I2C_Mem_Write>
 8042348:	4603      	mov	r3, r0
 804234a:	2b00      	cmp	r3, #0
 804234c:	d02f      	beq.n	80423ae <I2C1_WriteReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c1);
 804234e:	481a      	ldr	r0, [pc, #104]	; (80423b8 <I2C1_WriteReg+0xa4>)
 8042350:	f003 faf3 	bl	804593a <HAL_I2C_GetError>
 8042354:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 8042356:	693b      	ldr	r3, [r7, #16]
 8042358:	f003 0301 	and.w	r3, r3, #1
 804235c:	2b00      	cmp	r3, #0
 804235e:	d003      	beq.n	8042368 <I2C1_WriteReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 8042360:	f06f 0366 	mvn.w	r3, #102	; 0x66
 8042364:	617b      	str	r3, [r7, #20]
 8042366:	e022      	b.n	80423ae <I2C1_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8042368:	693b      	ldr	r3, [r7, #16]
 804236a:	f003 0302 	and.w	r3, r3, #2
 804236e:	2b00      	cmp	r3, #0
 8042370:	d003      	beq.n	804237a <I2C1_WriteReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 8042372:	f06f 0364 	mvn.w	r3, #100	; 0x64
 8042376:	617b      	str	r3, [r7, #20]
 8042378:	e019      	b.n	80423ae <I2C1_WriteReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 804237a:	693b      	ldr	r3, [r7, #16]
 804237c:	f003 0304 	and.w	r3, r3, #4
 8042380:	2b00      	cmp	r3, #0
 8042382:	d003      	beq.n	804238c <I2C1_WriteReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8042384:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8042388:	617b      	str	r3, [r7, #20]
 804238a:	e010      	b.n	80423ae <I2C1_WriteReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 804238c:	693b      	ldr	r3, [r7, #16]
 804238e:	f003 0320 	and.w	r3, r3, #32
 8042392:	2b00      	cmp	r3, #0
 8042394:	d104      	bne.n	80423a0 <I2C1_WriteReg+0x8c>
 8042396:	693b      	ldr	r3, [r7, #16]
 8042398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804239c:	2b00      	cmp	r3, #0
 804239e:	d003      	beq.n	80423a8 <I2C1_WriteReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 80423a0:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80423a4:	617b      	str	r3, [r7, #20]
 80423a6:	e002      	b.n	80423ae <I2C1_WriteReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 80423a8:	f06f 0303 	mvn.w	r3, #3
 80423ac:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 80423ae:	697b      	ldr	r3, [r7, #20]
}
 80423b0:	4618      	mov	r0, r3
 80423b2:	3718      	adds	r7, #24
 80423b4:	46bd      	mov	sp, r7
 80423b6:	bd80      	pop	{r7, pc}
 80423b8:	20018a74 	.word	0x20018a74

080423bc <I2C1_ReadReg>:
  * @param  pData      The target register values to be read.
  * @param  Length     Number of data.
  * @retval BSP status.
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80423bc:	b580      	push	{r7, lr}
 80423be:	b08a      	sub	sp, #40	; 0x28
 80423c0:	af04      	add	r7, sp, #16
 80423c2:	607b      	str	r3, [r7, #4]
 80423c4:	4603      	mov	r3, r0
 80423c6:	81fb      	strh	r3, [r7, #14]
 80423c8:	460b      	mov	r3, r1
 80423ca:	81bb      	strh	r3, [r7, #12]
 80423cc:	4613      	mov	r3, r2
 80423ce:	817b      	strh	r3, [r7, #10]
  int32_t  status = BSP_ERROR_NONE;
 80423d0:	2300      	movs	r3, #0
 80423d2:	617b      	str	r3, [r7, #20]
  uint32_t hal_error;

  if (HAL_I2C_Mem_Read(&hbus_i2c1, DevAddr, Reg, MemAddSize, pData, Length, BUS_I2C1_TIMEOUT) != HAL_OK)
 80423d4:	8978      	ldrh	r0, [r7, #10]
 80423d6:	89ba      	ldrh	r2, [r7, #12]
 80423d8:	89f9      	ldrh	r1, [r7, #14]
 80423da:	f242 7310 	movw	r3, #10000	; 0x2710
 80423de:	9302      	str	r3, [sp, #8]
 80423e0:	8c3b      	ldrh	r3, [r7, #32]
 80423e2:	9301      	str	r3, [sp, #4]
 80423e4:	687b      	ldr	r3, [r7, #4]
 80423e6:	9300      	str	r3, [sp, #0]
 80423e8:	4603      	mov	r3, r0
 80423ea:	481d      	ldr	r0, [pc, #116]	; (8042460 <I2C1_ReadReg+0xa4>)
 80423ec:	f003 f89a 	bl	8045524 <HAL_I2C_Mem_Read>
 80423f0:	4603      	mov	r3, r0
 80423f2:	2b00      	cmp	r3, #0
 80423f4:	d02f      	beq.n	8042456 <I2C1_ReadReg+0x9a>
  {
    hal_error = HAL_I2C_GetError(&hbus_i2c1);
 80423f6:	481a      	ldr	r0, [pc, #104]	; (8042460 <I2C1_ReadReg+0xa4>)
 80423f8:	f003 fa9f 	bl	804593a <HAL_I2C_GetError>
 80423fc:	6138      	str	r0, [r7, #16]
    if ((hal_error & HAL_I2C_ERROR_BERR) != 0U)
 80423fe:	693b      	ldr	r3, [r7, #16]
 8042400:	f003 0301 	and.w	r3, r3, #1
 8042404:	2b00      	cmp	r3, #0
 8042406:	d003      	beq.n	8042410 <I2C1_ReadReg+0x54>
    {
      status = BSP_ERROR_BUS_PROTOCOL_FAILURE;
 8042408:	f06f 0366 	mvn.w	r3, #102	; 0x66
 804240c:	617b      	str	r3, [r7, #20]
 804240e:	e022      	b.n	8042456 <I2C1_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_ARLO) != 0U)
 8042410:	693b      	ldr	r3, [r7, #16]
 8042412:	f003 0302 	and.w	r3, r3, #2
 8042416:	2b00      	cmp	r3, #0
 8042418:	d003      	beq.n	8042422 <I2C1_ReadReg+0x66>
    {
      status = BSP_ERROR_BUS_ARBITRATION_LOSS;
 804241a:	f06f 0364 	mvn.w	r3, #100	; 0x64
 804241e:	617b      	str	r3, [r7, #20]
 8042420:	e019      	b.n	8042456 <I2C1_ReadReg+0x9a>
    }
    else if ((hal_error & HAL_I2C_ERROR_AF) != 0U)
 8042422:	693b      	ldr	r3, [r7, #16]
 8042424:	f003 0304 	and.w	r3, r3, #4
 8042428:	2b00      	cmp	r3, #0
 804242a:	d003      	beq.n	8042434 <I2C1_ReadReg+0x78>
    {
      status = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 804242c:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8042430:	617b      	str	r3, [r7, #20]
 8042432:	e010      	b.n	8042456 <I2C1_ReadReg+0x9a>
    }
    else if (((hal_error & HAL_I2C_ERROR_TIMEOUT) != 0U) || ((hal_error & HAL_I2C_ERROR_SIZE) != 0U))
 8042434:	693b      	ldr	r3, [r7, #16]
 8042436:	f003 0320 	and.w	r3, r3, #32
 804243a:	2b00      	cmp	r3, #0
 804243c:	d104      	bne.n	8042448 <I2C1_ReadReg+0x8c>
 804243e:	693b      	ldr	r3, [r7, #16]
 8042440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042444:	2b00      	cmp	r3, #0
 8042446:	d003      	beq.n	8042450 <I2C1_ReadReg+0x94>
    {
      status = BSP_ERROR_BUS_TRANSACTION_FAILURE;
 8042448:	f06f 0363 	mvn.w	r3, #99	; 0x63
 804244c:	617b      	str	r3, [r7, #20]
 804244e:	e002      	b.n	8042456 <I2C1_ReadReg+0x9a>
    }
    else
    {
      status = BSP_ERROR_PERIPH_FAILURE;
 8042450:	f06f 0303 	mvn.w	r3, #3
 8042454:	617b      	str	r3, [r7, #20]
    }
  }

  return status;
 8042456:	697b      	ldr	r3, [r7, #20]
}
 8042458:	4618      	mov	r0, r3
 804245a:	3718      	adds	r7, #24
 804245c:	46bd      	mov	sp, r7
 804245e:	bd80      	pop	{r7, pc}
 8042460:	20018a74 	.word	0x20018a74

08042464 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8042464:	b580      	push	{r7, lr}
 8042466:	b086      	sub	sp, #24
 8042468:	af00      	add	r7, sp, #0
 804246a:	6078      	str	r0, [r7, #4]
 804246c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 804246e:	2300      	movs	r3, #0
 8042470:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8042472:	687b      	ldr	r3, [r7, #4]
 8042474:	2b00      	cmp	r3, #0
 8042476:	d06b      	beq.n	8042550 <I2C_GetTiming+0xec>
 8042478:	683b      	ldr	r3, [r7, #0]
 804247a:	2b00      	cmp	r3, #0
 804247c:	d068      	beq.n	8042550 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 804247e:	2300      	movs	r3, #0
 8042480:	613b      	str	r3, [r7, #16]
 8042482:	e060      	b.n	8042546 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8042484:	4a35      	ldr	r2, [pc, #212]	; (804255c <I2C_GetTiming+0xf8>)
 8042486:	693b      	ldr	r3, [r7, #16]
 8042488:	212c      	movs	r1, #44	; 0x2c
 804248a:	fb01 f303 	mul.w	r3, r1, r3
 804248e:	4413      	add	r3, r2
 8042490:	3304      	adds	r3, #4
 8042492:	681b      	ldr	r3, [r3, #0]
 8042494:	683a      	ldr	r2, [r7, #0]
 8042496:	429a      	cmp	r2, r3
 8042498:	d352      	bcc.n	8042540 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 804249a:	4a30      	ldr	r2, [pc, #192]	; (804255c <I2C_GetTiming+0xf8>)
 804249c:	693b      	ldr	r3, [r7, #16]
 804249e:	212c      	movs	r1, #44	; 0x2c
 80424a0:	fb01 f303 	mul.w	r3, r1, r3
 80424a4:	4413      	add	r3, r2
 80424a6:	3308      	adds	r3, #8
 80424a8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80424aa:	683a      	ldr	r2, [r7, #0]
 80424ac:	429a      	cmp	r2, r3
 80424ae:	d847      	bhi.n	8042540 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80424b0:	6939      	ldr	r1, [r7, #16]
 80424b2:	6878      	ldr	r0, [r7, #4]
 80424b4:	f000 f856 	bl	8042564 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80424b8:	6939      	ldr	r1, [r7, #16]
 80424ba:	6878      	ldr	r0, [r7, #4]
 80424bc:	f000 f940 	bl	8042740 <I2C_Compute_SCLL_SCLH>
 80424c0:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80424c2:	68fb      	ldr	r3, [r7, #12]
 80424c4:	2b7f      	cmp	r3, #127	; 0x7f
 80424c6:	d842      	bhi.n	804254e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80424c8:	4925      	ldr	r1, [pc, #148]	; (8042560 <I2C_GetTiming+0xfc>)
 80424ca:	68fa      	ldr	r2, [r7, #12]
 80424cc:	4613      	mov	r3, r2
 80424ce:	009b      	lsls	r3, r3, #2
 80424d0:	4413      	add	r3, r2
 80424d2:	009b      	lsls	r3, r3, #2
 80424d4:	440b      	add	r3, r1
 80424d6:	681b      	ldr	r3, [r3, #0]
 80424d8:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80424da:	4821      	ldr	r0, [pc, #132]	; (8042560 <I2C_GetTiming+0xfc>)
 80424dc:	68fa      	ldr	r2, [r7, #12]
 80424de:	4613      	mov	r3, r2
 80424e0:	009b      	lsls	r3, r3, #2
 80424e2:	4413      	add	r3, r2
 80424e4:	009b      	lsls	r3, r3, #2
 80424e6:	4403      	add	r3, r0
 80424e8:	3304      	adds	r3, #4
 80424ea:	681b      	ldr	r3, [r3, #0]
 80424ec:	051b      	lsls	r3, r3, #20
 80424ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80424f2:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80424f4:	481a      	ldr	r0, [pc, #104]	; (8042560 <I2C_GetTiming+0xfc>)
 80424f6:	68fa      	ldr	r2, [r7, #12]
 80424f8:	4613      	mov	r3, r2
 80424fa:	009b      	lsls	r3, r3, #2
 80424fc:	4413      	add	r3, r2
 80424fe:	009b      	lsls	r3, r3, #2
 8042500:	4403      	add	r3, r0
 8042502:	3308      	adds	r3, #8
 8042504:	681b      	ldr	r3, [r3, #0]
 8042506:	041b      	lsls	r3, r3, #16
 8042508:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 804250c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 804250e:	4814      	ldr	r0, [pc, #80]	; (8042560 <I2C_GetTiming+0xfc>)
 8042510:	68fa      	ldr	r2, [r7, #12]
 8042512:	4613      	mov	r3, r2
 8042514:	009b      	lsls	r3, r3, #2
 8042516:	4413      	add	r3, r2
 8042518:	009b      	lsls	r3, r3, #2
 804251a:	4403      	add	r3, r0
 804251c:	330c      	adds	r3, #12
 804251e:	681b      	ldr	r3, [r3, #0]
 8042520:	021b      	lsls	r3, r3, #8
 8042522:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8042524:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8042526:	480e      	ldr	r0, [pc, #56]	; (8042560 <I2C_GetTiming+0xfc>)
 8042528:	68fa      	ldr	r2, [r7, #12]
 804252a:	4613      	mov	r3, r2
 804252c:	009b      	lsls	r3, r3, #2
 804252e:	4413      	add	r3, r2
 8042530:	009b      	lsls	r3, r3, #2
 8042532:	4403      	add	r3, r0
 8042534:	3310      	adds	r3, #16
 8042536:	681b      	ldr	r3, [r3, #0]
 8042538:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 804253a:	430b      	orrs	r3, r1
 804253c:	617b      	str	r3, [r7, #20]
        }
        break;
 804253e:	e006      	b.n	804254e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8042540:	693b      	ldr	r3, [r7, #16]
 8042542:	3301      	adds	r3, #1
 8042544:	613b      	str	r3, [r7, #16]
 8042546:	693b      	ldr	r3, [r7, #16]
 8042548:	2b02      	cmp	r3, #2
 804254a:	d99b      	bls.n	8042484 <I2C_GetTiming+0x20>
 804254c:	e000      	b.n	8042550 <I2C_GetTiming+0xec>
        break;
 804254e:	bf00      	nop
      }
    }
  }

  return ret;
 8042550:	697b      	ldr	r3, [r7, #20]
}
 8042552:	4618      	mov	r0, r3
 8042554:	3718      	adds	r7, #24
 8042556:	46bd      	mov	sp, r7
 8042558:	bd80      	pop	{r7, pc}
 804255a:	bf00      	nop
 804255c:	08049fe8 	.word	0x08049fe8
 8042560:	20018070 	.word	0x20018070

08042564 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8042564:	b480      	push	{r7}
 8042566:	b08f      	sub	sp, #60	; 0x3c
 8042568:	af00      	add	r7, sp, #0
 804256a:	6078      	str	r0, [r7, #4]
 804256c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 804256e:	2310      	movs	r3, #16
 8042570:	637b      	str	r3, [r7, #52]	; 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8042572:	687b      	ldr	r3, [r7, #4]
 8042574:	085a      	lsrs	r2, r3, #1
 8042576:	4b6e      	ldr	r3, [pc, #440]	; (8042730 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8042578:	4413      	add	r3, r2
 804257a:	687a      	ldr	r2, [r7, #4]
 804257c:	fbb3 f3f2 	udiv	r3, r3, r2
 8042580:	61fb      	str	r3, [r7, #28]

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8042582:	2332      	movs	r3, #50	; 0x32
 8042584:	61bb      	str	r3, [r7, #24]
  tafdel_max = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MAX : 0U;
 8042586:	f44f 7382 	mov.w	r3, #260	; 0x104
 804258a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 804258c:	4a69      	ldr	r2, [pc, #420]	; (8042734 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 804258e:	683b      	ldr	r3, [r7, #0]
 8042590:	212c      	movs	r1, #44	; 0x2c
 8042592:	fb01 f303 	mul.w	r3, r1, r3
 8042596:	4413      	add	r3, r2
 8042598:	3324      	adds	r3, #36	; 0x24
 804259a:	681b      	ldr	r3, [r3, #0]
 804259c:	4618      	mov	r0, r3
 804259e:	4a65      	ldr	r2, [pc, #404]	; (8042734 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80425a0:	683b      	ldr	r3, [r7, #0]
 80425a2:	212c      	movs	r1, #44	; 0x2c
 80425a4:	fb01 f303 	mul.w	r3, r1, r3
 80425a8:	4413      	add	r3, r2
 80425aa:	330c      	adds	r3, #12
 80425ac:	681b      	ldr	r3, [r3, #0]
 80425ae:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80425b0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80425b2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80425b4:	495f      	ldr	r1, [pc, #380]	; (8042734 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80425b6:	683b      	ldr	r3, [r7, #0]
 80425b8:	202c      	movs	r0, #44	; 0x2c
 80425ba:	fb00 f303 	mul.w	r3, r0, r3
 80425be:	440b      	add	r3, r1
 80425c0:	3328      	adds	r3, #40	; 0x28
 80425c2:	681b      	ldr	r3, [r3, #0]
 80425c4:	3303      	adds	r3, #3
 80425c6:	69f9      	ldr	r1, [r7, #28]
 80425c8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80425cc:	1ad3      	subs	r3, r2, r3
 80425ce:	633b      	str	r3, [r7, #48]	; 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80425d0:	4a58      	ldr	r2, [pc, #352]	; (8042734 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80425d2:	683b      	ldr	r3, [r7, #0]
 80425d4:	212c      	movs	r1, #44	; 0x2c
 80425d6:	fb01 f303 	mul.w	r3, r1, r3
 80425da:	4413      	add	r3, r2
 80425dc:	3310      	adds	r3, #16
 80425de:	681b      	ldr	r3, [r3, #0]
 80425e0:	4618      	mov	r0, r3
 80425e2:	4a54      	ldr	r2, [pc, #336]	; (8042734 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80425e4:	683b      	ldr	r3, [r7, #0]
 80425e6:	212c      	movs	r1, #44	; 0x2c
 80425e8:	fb01 f303 	mul.w	r3, r1, r3
 80425ec:	4413      	add	r3, r2
 80425ee:	3320      	adds	r3, #32
 80425f0:	681b      	ldr	r3, [r3, #0]
 80425f2:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80425f4:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80425f6:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80425f8:	494e      	ldr	r1, [pc, #312]	; (8042734 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80425fa:	683b      	ldr	r3, [r7, #0]
 80425fc:	202c      	movs	r0, #44	; 0x2c
 80425fe:	fb00 f303 	mul.w	r3, r0, r3
 8042602:	440b      	add	r3, r1
 8042604:	3328      	adds	r3, #40	; 0x28
 8042606:	681b      	ldr	r3, [r3, #0]
 8042608:	3304      	adds	r3, #4
 804260a:	69f9      	ldr	r1, [r7, #28]
 804260c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8042610:	1ad3      	subs	r3, r2, r3
 8042612:	62fb      	str	r3, [r7, #44]	; 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8042614:	4a47      	ldr	r2, [pc, #284]	; (8042734 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8042616:	683b      	ldr	r3, [r7, #0]
 8042618:	212c      	movs	r1, #44	; 0x2c
 804261a:	fb01 f303 	mul.w	r3, r1, r3
 804261e:	4413      	add	r3, r2
 8042620:	3320      	adds	r3, #32
 8042622:	681b      	ldr	r3, [r3, #0]
 8042624:	4618      	mov	r0, r3
 8042626:	4a43      	ldr	r2, [pc, #268]	; (8042734 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8042628:	683b      	ldr	r3, [r7, #0]
 804262a:	212c      	movs	r1, #44	; 0x2c
 804262c:	fb01 f303 	mul.w	r3, r1, r3
 8042630:	4413      	add	r3, r2
 8042632:	3314      	adds	r3, #20
 8042634:	681b      	ldr	r3, [r3, #0]
 8042636:	4403      	add	r3, r0
 8042638:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 804263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804263c:	2b00      	cmp	r3, #0
 804263e:	dc01      	bgt.n	8042644 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8042640:	2300      	movs	r3, #0
 8042642:	633b      	str	r3, [r7, #48]	; 0x30
  }

  if (tsdadel_max <= 0)
 8042644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8042646:	2b00      	cmp	r3, #0
 8042648:	dc01      	bgt.n	804264e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 804264a:	2300      	movs	r3, #0
 804264c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 804264e:	2300      	movs	r3, #0
 8042650:	62bb      	str	r3, [r7, #40]	; 0x28
 8042652:	e062      	b.n	804271a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8042654:	2300      	movs	r3, #0
 8042656:	627b      	str	r3, [r7, #36]	; 0x24
 8042658:	e059      	b.n	804270e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 804265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804265c:	3301      	adds	r3, #1
 804265e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8042660:	3201      	adds	r2, #1
 8042662:	fb02 f203 	mul.w	r2, r2, r3
 8042666:	69fb      	ldr	r3, [r7, #28]
 8042668:	fb02 f303 	mul.w	r3, r2, r3
 804266c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 804266e:	693b      	ldr	r3, [r7, #16]
 8042670:	68fa      	ldr	r2, [r7, #12]
 8042672:	429a      	cmp	r2, r3
 8042674:	d348      	bcc.n	8042708 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8042676:	2300      	movs	r3, #0
 8042678:	623b      	str	r3, [r7, #32]
 804267a:	e042      	b.n	8042702 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 804267c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804267e:	3301      	adds	r3, #1
 8042680:	6a3a      	ldr	r2, [r7, #32]
 8042682:	fb02 f203 	mul.w	r2, r2, r3
 8042686:	69fb      	ldr	r3, [r7, #28]
 8042688:	fb02 f303 	mul.w	r3, r2, r3
 804268c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 804268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8042690:	68ba      	ldr	r2, [r7, #8]
 8042692:	429a      	cmp	r2, r3
 8042694:	d332      	bcc.n	80426fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8042696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8042698:	68ba      	ldr	r2, [r7, #8]
 804269a:	429a      	cmp	r2, r3
 804269c:	d82e      	bhi.n	80426fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 804269e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80426a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80426a2:	429a      	cmp	r2, r3
 80426a4:	d02a      	beq.n	80426fc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80426a6:	4b24      	ldr	r3, [pc, #144]	; (8042738 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80426a8:	681a      	ldr	r2, [r3, #0]
 80426aa:	4924      	ldr	r1, [pc, #144]	; (804273c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80426ac:	4613      	mov	r3, r2
 80426ae:	009b      	lsls	r3, r3, #2
 80426b0:	4413      	add	r3, r2
 80426b2:	009b      	lsls	r3, r3, #2
 80426b4:	440b      	add	r3, r1
 80426b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80426b8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80426ba:	4b1f      	ldr	r3, [pc, #124]	; (8042738 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80426bc:	681a      	ldr	r2, [r3, #0]
 80426be:	491f      	ldr	r1, [pc, #124]	; (804273c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80426c0:	4613      	mov	r3, r2
 80426c2:	009b      	lsls	r3, r3, #2
 80426c4:	4413      	add	r3, r2
 80426c6:	009b      	lsls	r3, r3, #2
 80426c8:	440b      	add	r3, r1
 80426ca:	3304      	adds	r3, #4
 80426cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80426ce:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80426d0:	4b19      	ldr	r3, [pc, #100]	; (8042738 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80426d2:	681a      	ldr	r2, [r3, #0]
 80426d4:	4919      	ldr	r1, [pc, #100]	; (804273c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80426d6:	4613      	mov	r3, r2
 80426d8:	009b      	lsls	r3, r3, #2
 80426da:	4413      	add	r3, r2
 80426dc:	009b      	lsls	r3, r3, #2
 80426de:	440b      	add	r3, r1
 80426e0:	3308      	adds	r3, #8
 80426e2:	6a3a      	ldr	r2, [r7, #32]
 80426e4:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80426e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80426e8:	637b      	str	r3, [r7, #52]	; 0x34
              I2c_valid_timing_nbr ++;
 80426ea:	4b13      	ldr	r3, [pc, #76]	; (8042738 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80426ec:	681b      	ldr	r3, [r3, #0]
 80426ee:	3301      	adds	r3, #1
 80426f0:	4a11      	ldr	r2, [pc, #68]	; (8042738 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80426f2:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80426f4:	4b10      	ldr	r3, [pc, #64]	; (8042738 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80426f6:	681b      	ldr	r3, [r3, #0]
 80426f8:	2b7f      	cmp	r3, #127	; 0x7f
 80426fa:	d812      	bhi.n	8042722 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80426fc:	6a3b      	ldr	r3, [r7, #32]
 80426fe:	3301      	adds	r3, #1
 8042700:	623b      	str	r3, [r7, #32]
 8042702:	6a3b      	ldr	r3, [r7, #32]
 8042704:	2b0f      	cmp	r3, #15
 8042706:	d9b9      	bls.n	804267c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8042708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804270a:	3301      	adds	r3, #1
 804270c:	627b      	str	r3, [r7, #36]	; 0x24
 804270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042710:	2b0f      	cmp	r3, #15
 8042712:	d9a2      	bls.n	804265a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8042714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8042716:	3301      	adds	r3, #1
 8042718:	62bb      	str	r3, [r7, #40]	; 0x28
 804271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804271c:	2b0f      	cmp	r3, #15
 804271e:	d999      	bls.n	8042654 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8042720:	e000      	b.n	8042724 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8042722:	bf00      	nop
          }
        }
      }
    }
  }
}
 8042724:	373c      	adds	r7, #60	; 0x3c
 8042726:	46bd      	mov	sp, r7
 8042728:	f85d 7b04 	ldr.w	r7, [sp], #4
 804272c:	4770      	bx	lr
 804272e:	bf00      	nop
 8042730:	3b9aca00 	.word	0x3b9aca00
 8042734:	08049fe8 	.word	0x08049fe8
 8042738:	20018a70 	.word	0x20018a70
 804273c:	20018070 	.word	0x20018070

08042740 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8042740:	b480      	push	{r7}
 8042742:	b093      	sub	sp, #76	; 0x4c
 8042744:	af00      	add	r7, sp, #0
 8042746:	6078      	str	r0, [r7, #4]
 8042748:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0xFFFFFFFFU;
 804274a:	f04f 33ff 	mov.w	r3, #4294967295
 804274e:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8042750:	687b      	ldr	r3, [r7, #4]
 8042752:	085a      	lsrs	r2, r3, #1
 8042754:	4b7a      	ldr	r3, [pc, #488]	; (8042940 <I2C_Compute_SCLL_SCLH+0x200>)
 8042756:	4413      	add	r3, r2
 8042758:	687a      	ldr	r2, [r7, #4]
 804275a:	fbb3 f3f2 	udiv	r3, r3, r2
 804275e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8042760:	4a78      	ldr	r2, [pc, #480]	; (8042944 <I2C_Compute_SCLL_SCLH+0x204>)
 8042762:	683b      	ldr	r3, [r7, #0]
 8042764:	212c      	movs	r1, #44	; 0x2c
 8042766:	fb01 f303 	mul.w	r3, r1, r3
 804276a:	4413      	add	r3, r2
 804276c:	681b      	ldr	r3, [r3, #0]
 804276e:	085a      	lsrs	r2, r3, #1
 8042770:	4b73      	ldr	r3, [pc, #460]	; (8042940 <I2C_Compute_SCLL_SCLH+0x200>)
 8042772:	4413      	add	r3, r2
 8042774:	4973      	ldr	r1, [pc, #460]	; (8042944 <I2C_Compute_SCLL_SCLH+0x204>)
 8042776:	683a      	ldr	r2, [r7, #0]
 8042778:	202c      	movs	r0, #44	; 0x2c
 804277a:	fb00 f202 	mul.w	r2, r0, r2
 804277e:	440a      	add	r2, r1
 8042780:	6812      	ldr	r2, [r2, #0]
 8042782:	fbb3 f3f2 	udiv	r3, r3, r2
 8042786:	62bb      	str	r3, [r7, #40]	; 0x28

  tafdel_min = (I2C_USE_ANALOG_FILTER == 1U) ? I2C_ANALOG_FILTER_DELAY_MIN : 0U;
 8042788:	2332      	movs	r3, #50	; 0x32
 804278a:	627b      	str	r3, [r7, #36]	; 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 804278c:	4a6d      	ldr	r2, [pc, #436]	; (8042944 <I2C_Compute_SCLL_SCLH+0x204>)
 804278e:	683b      	ldr	r3, [r7, #0]
 8042790:	212c      	movs	r1, #44	; 0x2c
 8042792:	fb01 f303 	mul.w	r3, r1, r3
 8042796:	4413      	add	r3, r2
 8042798:	3328      	adds	r3, #40	; 0x28
 804279a:	681a      	ldr	r2, [r3, #0]
 804279c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804279e:	fb02 f303 	mul.w	r3, r2, r3
 80427a2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80427a4:	4a67      	ldr	r2, [pc, #412]	; (8042944 <I2C_Compute_SCLL_SCLH+0x204>)
 80427a6:	683b      	ldr	r3, [r7, #0]
 80427a8:	212c      	movs	r1, #44	; 0x2c
 80427aa:	fb01 f303 	mul.w	r3, r1, r3
 80427ae:	4413      	add	r3, r2
 80427b0:	3304      	adds	r3, #4
 80427b2:	681b      	ldr	r3, [r3, #0]
 80427b4:	4a62      	ldr	r2, [pc, #392]	; (8042940 <I2C_Compute_SCLL_SCLH+0x200>)
 80427b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80427ba:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80427bc:	4a61      	ldr	r2, [pc, #388]	; (8042944 <I2C_Compute_SCLL_SCLH+0x204>)
 80427be:	683b      	ldr	r3, [r7, #0]
 80427c0:	212c      	movs	r1, #44	; 0x2c
 80427c2:	fb01 f303 	mul.w	r3, r1, r3
 80427c6:	4413      	add	r3, r2
 80427c8:	3308      	adds	r3, #8
 80427ca:	681b      	ldr	r3, [r3, #0]
 80427cc:	4a5c      	ldr	r2, [pc, #368]	; (8042940 <I2C_Compute_SCLL_SCLH+0x200>)
 80427ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80427d2:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80427d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80427d6:	643b      	str	r3, [r7, #64]	; 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80427d8:	2300      	movs	r3, #0
 80427da:	637b      	str	r3, [r7, #52]	; 0x34
 80427dc:	e0a3      	b.n	8042926 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80427de:	495a      	ldr	r1, [pc, #360]	; (8042948 <I2C_Compute_SCLL_SCLH+0x208>)
 80427e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80427e2:	4613      	mov	r3, r2
 80427e4:	009b      	lsls	r3, r3, #2
 80427e6:	4413      	add	r3, r2
 80427e8:	009b      	lsls	r3, r3, #2
 80427ea:	440b      	add	r3, r1
 80427ec:	681b      	ldr	r3, [r3, #0]
 80427ee:	1c5a      	adds	r2, r3, #1
 80427f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80427f2:	fb02 f303 	mul.w	r3, r2, r3
 80427f6:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80427f8:	2300      	movs	r3, #0
 80427fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80427fc:	e08c      	b.n	8042918 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80427fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8042800:	6a3b      	ldr	r3, [r7, #32]
 8042802:	441a      	add	r2, r3
 8042804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8042806:	3301      	adds	r3, #1
 8042808:	6979      	ldr	r1, [r7, #20]
 804280a:	fb01 f103 	mul.w	r1, r1, r3
 804280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8042810:	005b      	lsls	r3, r3, #1
 8042812:	440b      	add	r3, r1
 8042814:	4413      	add	r3, r2
 8042816:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8042818:	4a4a      	ldr	r2, [pc, #296]	; (8042944 <I2C_Compute_SCLL_SCLH+0x204>)
 804281a:	683b      	ldr	r3, [r7, #0]
 804281c:	212c      	movs	r1, #44	; 0x2c
 804281e:	fb01 f303 	mul.w	r3, r1, r3
 8042822:	4413      	add	r3, r2
 8042824:	3318      	adds	r3, #24
 8042826:	681b      	ldr	r3, [r3, #0]
 8042828:	693a      	ldr	r2, [r7, #16]
 804282a:	429a      	cmp	r2, r3
 804282c:	d971      	bls.n	8042912 <I2C_Compute_SCLL_SCLH+0x1d2>
 804282e:	693a      	ldr	r2, [r7, #16]
 8042830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042832:	1ad2      	subs	r2, r2, r3
 8042834:	6a3b      	ldr	r3, [r7, #32]
 8042836:	1ad3      	subs	r3, r2, r3
 8042838:	089b      	lsrs	r3, r3, #2
 804283a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 804283c:	429a      	cmp	r2, r3
 804283e:	d268      	bcs.n	8042912 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8042840:	2300      	movs	r3, #0
 8042842:	63bb      	str	r3, [r7, #56]	; 0x38
 8042844:	e062      	b.n	804290c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8042846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8042848:	6a3b      	ldr	r3, [r7, #32]
 804284a:	441a      	add	r2, r3
 804284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804284e:	3301      	adds	r3, #1
 8042850:	6979      	ldr	r1, [r7, #20]
 8042852:	fb01 f103 	mul.w	r1, r1, r3
 8042856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8042858:	005b      	lsls	r3, r3, #1
 804285a:	440b      	add	r3, r1
 804285c:	4413      	add	r3, r2
 804285e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8042860:	693a      	ldr	r2, [r7, #16]
 8042862:	68fb      	ldr	r3, [r7, #12]
 8042864:	441a      	add	r2, r3
 8042866:	4937      	ldr	r1, [pc, #220]	; (8042944 <I2C_Compute_SCLL_SCLH+0x204>)
 8042868:	683b      	ldr	r3, [r7, #0]
 804286a:	202c      	movs	r0, #44	; 0x2c
 804286c:	fb00 f303 	mul.w	r3, r0, r3
 8042870:	440b      	add	r3, r1
 8042872:	3320      	adds	r3, #32
 8042874:	681b      	ldr	r3, [r3, #0]
 8042876:	441a      	add	r2, r3
 8042878:	4932      	ldr	r1, [pc, #200]	; (8042944 <I2C_Compute_SCLL_SCLH+0x204>)
 804287a:	683b      	ldr	r3, [r7, #0]
 804287c:	202c      	movs	r0, #44	; 0x2c
 804287e:	fb00 f303 	mul.w	r3, r0, r3
 8042882:	440b      	add	r3, r1
 8042884:	3324      	adds	r3, #36	; 0x24
 8042886:	681b      	ldr	r3, [r3, #0]
 8042888:	4413      	add	r3, r2
 804288a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 804288c:	68ba      	ldr	r2, [r7, #8]
 804288e:	69bb      	ldr	r3, [r7, #24]
 8042890:	429a      	cmp	r2, r3
 8042892:	d338      	bcc.n	8042906 <I2C_Compute_SCLL_SCLH+0x1c6>
 8042894:	68ba      	ldr	r2, [r7, #8]
 8042896:	69fb      	ldr	r3, [r7, #28]
 8042898:	429a      	cmp	r2, r3
 804289a:	d834      	bhi.n	8042906 <I2C_Compute_SCLL_SCLH+0x1c6>
 804289c:	4a29      	ldr	r2, [pc, #164]	; (8042944 <I2C_Compute_SCLL_SCLH+0x204>)
 804289e:	683b      	ldr	r3, [r7, #0]
 80428a0:	212c      	movs	r1, #44	; 0x2c
 80428a2:	fb01 f303 	mul.w	r3, r1, r3
 80428a6:	4413      	add	r3, r2
 80428a8:	331c      	adds	r3, #28
 80428aa:	681b      	ldr	r3, [r3, #0]
 80428ac:	68fa      	ldr	r2, [r7, #12]
 80428ae:	429a      	cmp	r2, r3
 80428b0:	d329      	bcc.n	8042906 <I2C_Compute_SCLL_SCLH+0x1c6>
 80428b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80428b4:	68fb      	ldr	r3, [r7, #12]
 80428b6:	429a      	cmp	r2, r3
 80428b8:	d225      	bcs.n	8042906 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80428ba:	68ba      	ldr	r2, [r7, #8]
 80428bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80428be:	1ad3      	subs	r3, r2, r3
 80428c0:	633b      	str	r3, [r7, #48]	; 0x30

            if (error < 0)
 80428c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80428c4:	2b00      	cmp	r3, #0
 80428c6:	da02      	bge.n	80428ce <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80428c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80428ca:	425b      	negs	r3, r3
 80428cc:	633b      	str	r3, [r7, #48]	; 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80428ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80428d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80428d2:	429a      	cmp	r2, r3
 80428d4:	d917      	bls.n	8042906 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80428d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80428d8:	643b      	str	r3, [r7, #64]	; 0x40
              I2c_valid_timing[count].scll = scll;
 80428da:	491b      	ldr	r1, [pc, #108]	; (8042948 <I2C_Compute_SCLL_SCLH+0x208>)
 80428dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80428de:	4613      	mov	r3, r2
 80428e0:	009b      	lsls	r3, r3, #2
 80428e2:	4413      	add	r3, r2
 80428e4:	009b      	lsls	r3, r3, #2
 80428e6:	440b      	add	r3, r1
 80428e8:	3310      	adds	r3, #16
 80428ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80428ec:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80428ee:	4916      	ldr	r1, [pc, #88]	; (8042948 <I2C_Compute_SCLL_SCLH+0x208>)
 80428f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80428f2:	4613      	mov	r3, r2
 80428f4:	009b      	lsls	r3, r3, #2
 80428f6:	4413      	add	r3, r2
 80428f8:	009b      	lsls	r3, r3, #2
 80428fa:	440b      	add	r3, r1
 80428fc:	330c      	adds	r3, #12
 80428fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8042900:	601a      	str	r2, [r3, #0]
              ret = count;
 8042902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042904:	647b      	str	r3, [r7, #68]	; 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8042906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8042908:	3301      	adds	r3, #1
 804290a:	63bb      	str	r3, [r7, #56]	; 0x38
 804290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804290e:	2bff      	cmp	r3, #255	; 0xff
 8042910:	d999      	bls.n	8042846 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8042912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8042914:	3301      	adds	r3, #1
 8042916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8042918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804291a:	2bff      	cmp	r3, #255	; 0xff
 804291c:	f67f af6f 	bls.w	80427fe <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8042920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042922:	3301      	adds	r3, #1
 8042924:	637b      	str	r3, [r7, #52]	; 0x34
 8042926:	4b09      	ldr	r3, [pc, #36]	; (804294c <I2C_Compute_SCLL_SCLH+0x20c>)
 8042928:	681b      	ldr	r3, [r3, #0]
 804292a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 804292c:	429a      	cmp	r2, r3
 804292e:	f4ff af56 	bcc.w	80427de <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 8042932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8042934:	4618      	mov	r0, r3
 8042936:	374c      	adds	r7, #76	; 0x4c
 8042938:	46bd      	mov	sp, r7
 804293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804293e:	4770      	bx	lr
 8042940:	3b9aca00 	.word	0x3b9aca00
 8042944:	08049fe8 	.word	0x08049fe8
 8042948:	20018070 	.word	0x20018070
 804294c:	20018a70 	.word	0x20018a70

08042950 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{
 8042950:	b580      	push	{r7, lr}
 8042952:	b084      	sub	sp, #16
 8042954:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8042956:	2301      	movs	r3, #1
 8042958:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 804295a:	2300      	movs	r3, #0
 804295c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef ICG20330_InitStructure;
  GYRO_FilterConfigTypeDef ICG20330_FilterStructure = {0, 0};
 804295e:	2300      	movs	r3, #0
 8042960:	703b      	strb	r3, [r7, #0]
 8042962:	2300      	movs	r3, #0
 8042964:	707b      	strb	r3, [r7, #1]

  if (icg20330Drv.ReadID() == I_AM_ICG20330)
 8042966:	4b18      	ldr	r3, [pc, #96]	; (80429c8 <BSP_GYRO_Init+0x78>)
 8042968:	689b      	ldr	r3, [r3, #8]
 804296a:	4798      	blx	r3
 804296c:	4603      	mov	r3, r0
 804296e:	2b92      	cmp	r3, #146	; 0x92
 8042970:	d123      	bne.n	80429ba <BSP_GYRO_Init+0x6a>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &icg20330Drv;
 8042972:	4b16      	ldr	r3, [pc, #88]	; (80429cc <BSP_GYRO_Init+0x7c>)
 8042974:	4a14      	ldr	r2, [pc, #80]	; (80429c8 <BSP_GYRO_Init+0x78>)
 8042976:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    ICG20330_InitStructure.Power_Mode = ICG20330_MODE_ACTIVE;
 8042978:	2303      	movs	r3, #3
 804297a:	713b      	strb	r3, [r7, #4]
    ICG20330_InitStructure.Output_DataRate = ICG20330_OUTPUT_DATARATE_1;
 804297c:	2300      	movs	r3, #0
 804297e:	717b      	strb	r3, [r7, #5]
    ICG20330_InitStructure.Axes_Enable = ICG20330_AXES_ENABLE;
 8042980:	2303      	movs	r3, #3
 8042982:	71bb      	strb	r3, [r7, #6]
    ICG20330_InitStructure.Band_Width = ICG20330_BANDWIDTH_250;
 8042984:	2302      	movs	r3, #2
 8042986:	71fb      	strb	r3, [r7, #7]
    ICG20330_InitStructure.BlockData_Update = ICG20330_BlockDataUpdate_Continous;
 8042988:	2300      	movs	r3, #0
 804298a:	723b      	strb	r3, [r7, #8]
    ICG20330_InitStructure.Endianness = ICG20330_BLE_LSB;
 804298c:	2300      	movs	r3, #0
 804298e:	727b      	strb	r3, [r7, #9]
    ICG20330_InitStructure.Full_Scale = ICG20330_FULLSCALE_500;
 8042990:	2318      	movs	r3, #24
 8042992:	72bb      	strb	r3, [r7, #10]
//
//    ctrl |= (uint16_t)((ICG20330_InitStructure.BlockData_Update | ICG20330_InitStructure.Endianness | \
//                        ICG20330_InitStructure.Full_Scale) << 8);

    /* Initialize component */
    GyroscopeDrv->Init(&ICG20330_InitStructure);
 8042994:	4b0d      	ldr	r3, [pc, #52]	; (80429cc <BSP_GYRO_Init+0x7c>)
 8042996:	681b      	ldr	r3, [r3, #0]
 8042998:	681b      	ldr	r3, [r3, #0]
 804299a:	1d3a      	adds	r2, r7, #4
 804299c:	4610      	mov	r0, r2
 804299e:	4798      	blx	r3
//
//    ctrl = (uint8_t)((ICG20330_FilterStructure.HighPassFilter_Mode_Selection | \
//                      ICG20330_FilterStructure.HighPassFilter_CutOff_Frequency));

    /* Configure component filter */
      GyroscopeDrv->FilterConfig(0x00) ;
 80429a0:	4b0a      	ldr	r3, [pc, #40]	; (80429cc <BSP_GYRO_Init+0x7c>)
 80429a2:	681b      	ldr	r3, [r3, #0]
 80429a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80429a6:	2000      	movs	r0, #0
 80429a8:	4798      	blx	r3

    /* Enable component filter */
    GyroscopeDrv->FilterCmd(0x1B);
 80429aa:	4b08      	ldr	r3, [pc, #32]	; (80429cc <BSP_GYRO_Init+0x7c>)
 80429ac:	681b      	ldr	r3, [r3, #0]
 80429ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80429b0:	201b      	movs	r0, #27
 80429b2:	4798      	blx	r3
//    GyroscopeDrv->FilterCmd(ICG20330_HPM_NORMAL_MODE_RES | ICG20330_FULLSCALE_500);

    ret = GYRO_OK;
 80429b4:	2300      	movs	r3, #0
 80429b6:	73fb      	strb	r3, [r7, #15]
 80429b8:	e001      	b.n	80429be <BSP_GYRO_Init+0x6e>
  }
  else
  {
    ret = GYRO_ERROR;
 80429ba:	2301      	movs	r3, #1
 80429bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80429be:	7bfb      	ldrb	r3, [r7, #15]
}
 80429c0:	4618      	mov	r0, r3
 80429c2:	3710      	adds	r7, #16
 80429c4:	46bd      	mov	sp, r7
 80429c6:	bd80      	pop	{r7, pc}
 80429c8:	20018004 	.word	0x20018004
 80429cc:	20018af0 	.word	0x20018af0

080429d0 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array
  * @retval None
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 80429d0:	b580      	push	{r7, lr}
 80429d2:	b082      	sub	sp, #8
 80429d4:	af00      	add	r7, sp, #0
 80429d6:	6078      	str	r0, [r7, #4]
  if (GyroscopeDrv->GetXYZ != NULL)
 80429d8:	4b06      	ldr	r3, [pc, #24]	; (80429f4 <BSP_GYRO_GetXYZ+0x24>)
 80429da:	681b      	ldr	r3, [r3, #0]
 80429dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80429de:	2b00      	cmp	r3, #0
 80429e0:	d004      	beq.n	80429ec <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 80429e2:	4b04      	ldr	r3, [pc, #16]	; (80429f4 <BSP_GYRO_GetXYZ+0x24>)
 80429e4:	681b      	ldr	r3, [r3, #0]
 80429e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80429e8:	6878      	ldr	r0, [r7, #4]
 80429ea:	4798      	blx	r3
  }
}
 80429ec:	bf00      	nop
 80429ee:	3708      	adds	r7, #8
 80429f0:	46bd      	mov	sp, r7
 80429f2:	bd80      	pop	{r7, pc}
 80429f4:	20018af0 	.word	0x20018af0

080429f8 <GYRO_IO_Init>:

/**
  * @}
  */
void    GYRO_IO_Init(void)
{
 80429f8:	b580      	push	{r7, lr}
 80429fa:	b082      	sub	sp, #8
 80429fc:	af00      	add	r7, sp, #0
	uint8_t data = 0x81;
 80429fe:	2381      	movs	r3, #129	; 0x81
 8042a00:	71fb      	strb	r3, [r7, #7]

	BSP_I2C1_Init();
 8042a02:	f7ff fb51 	bl	80420a8 <BSP_I2C1_Init>

	HAL_GPIO_WritePin(GYO_DEN_GPIO_Port, GYO_DEN_Pin, GPIO_PIN_RESET);
 8042a06:	2200      	movs	r2, #0
 8042a08:	2102      	movs	r1, #2
 8042a0a:	4809      	ldr	r0, [pc, #36]	; (8042a30 <GYRO_IO_Init+0x38>)
 8042a0c:	f002 faae 	bl	8044f6c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8042a10:	2032      	movs	r0, #50	; 0x32
 8042a12:	f000 f873 	bl	8042afc <HAL_Delay>

	GYRO_IO_Write(&data, ICG20330_PWR_MGMT_1_ADDR, 1);
 8042a16:	1dfb      	adds	r3, r7, #7
 8042a18:	2201      	movs	r2, #1
 8042a1a:	216b      	movs	r1, #107	; 0x6b
 8042a1c:	4618      	mov	r0, r3
 8042a1e:	f000 f809 	bl	8042a34 <GYRO_IO_Write>
	HAL_Delay(100);
 8042a22:	2064      	movs	r0, #100	; 0x64
 8042a24:	f000 f86a 	bl	8042afc <HAL_Delay>
}
 8042a28:	bf00      	nop
 8042a2a:	3708      	adds	r7, #8
 8042a2c:	46bd      	mov	sp, r7
 8042a2e:	bd80      	pop	{r7, pc}
 8042a30:	42021000 	.word	0x42021000

08042a34 <GYRO_IO_Write>:
void    GYRO_IO_DeInit(void)
{
	BSP_I2C1_DeInit();
}
void    GYRO_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8042a34:	b580      	push	{r7, lr}
 8042a36:	b084      	sub	sp, #16
 8042a38:	af00      	add	r7, sp, #0
 8042a3a:	6078      	str	r0, [r7, #4]
 8042a3c:	460b      	mov	r3, r1
 8042a3e:	70fb      	strb	r3, [r7, #3]
 8042a40:	4613      	mov	r3, r2
 8042a42:	803b      	strh	r3, [r7, #0]
	uint16_t DevAddress = (ICG20330_ADDR << 1) | 0x00;
 8042a44:	23d2      	movs	r3, #210	; 0xd2
 8042a46:	81fb      	strh	r3, [r7, #14]
	BSP_I2C1_WriteReg(DevAddress, WriteAddr, pBuffer, NumByteToWrite);
 8042a48:	78fb      	ldrb	r3, [r7, #3]
 8042a4a:	b299      	uxth	r1, r3
 8042a4c:	883b      	ldrh	r3, [r7, #0]
 8042a4e:	89f8      	ldrh	r0, [r7, #14]
 8042a50:	687a      	ldr	r2, [r7, #4]
 8042a52:	f7ff fb7b 	bl	804214c <BSP_I2C1_WriteReg>

}
 8042a56:	bf00      	nop
 8042a58:	3710      	adds	r7, #16
 8042a5a:	46bd      	mov	sp, r7
 8042a5c:	bd80      	pop	{r7, pc}

08042a5e <GYRO_IO_Read>:
void    GYRO_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{
 8042a5e:	b580      	push	{r7, lr}
 8042a60:	b084      	sub	sp, #16
 8042a62:	af00      	add	r7, sp, #0
 8042a64:	6078      	str	r0, [r7, #4]
 8042a66:	460b      	mov	r3, r1
 8042a68:	70fb      	strb	r3, [r7, #3]
 8042a6a:	4613      	mov	r3, r2
 8042a6c:	803b      	strh	r3, [r7, #0]
	uint16_t DevAddress = (ICG20330_ADDR << 1) | 0x01;
 8042a6e:	23d3      	movs	r3, #211	; 0xd3
 8042a70:	81fb      	strh	r3, [r7, #14]
	BSP_I2C1_ReadReg(DevAddress, ReadAddr, pBuffer, NumByteToRead);
 8042a72:	78fb      	ldrb	r3, [r7, #3]
 8042a74:	b299      	uxth	r1, r3
 8042a76:	883b      	ldrh	r3, [r7, #0]
 8042a78:	89f8      	ldrh	r0, [r7, #14]
 8042a7a:	687a      	ldr	r2, [r7, #4]
 8042a7c:	f7ff fb7e 	bl	804217c <BSP_I2C1_ReadReg>
}
 8042a80:	bf00      	nop
 8042a82:	3710      	adds	r7, #16
 8042a84:	46bd      	mov	sp, r7
 8042a86:	bd80      	pop	{r7, pc}

08042a88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8042a88:	b580      	push	{r7, lr}
 8042a8a:	b082      	sub	sp, #8
 8042a8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8042a8e:	2300      	movs	r3, #0
 8042a90:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8042a92:	2004      	movs	r0, #4
 8042a94:	f001 fbcd 	bl	8044232 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8042a98:	f7fe fdfc 	bl	8041694 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8042a9c:	2000      	movs	r0, #0
 8042a9e:	f7fe fc8d 	bl	80413bc <HAL_InitTick>
 8042aa2:	4603      	mov	r3, r0
 8042aa4:	2b00      	cmp	r3, #0
 8042aa6:	d002      	beq.n	8042aae <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8042aa8:	2301      	movs	r3, #1
 8042aaa:	71fb      	strb	r3, [r7, #7]
 8042aac:	e001      	b.n	8042ab2 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8042aae:	f7fe fc5b 	bl	8041368 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8042ab2:	79fb      	ldrb	r3, [r7, #7]
}
 8042ab4:	4618      	mov	r0, r3
 8042ab6:	3708      	adds	r7, #8
 8042ab8:	46bd      	mov	sp, r7
 8042aba:	bd80      	pop	{r7, pc}

08042abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8042abc:	b480      	push	{r7}
 8042abe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8042ac0:	4b06      	ldr	r3, [pc, #24]	; (8042adc <HAL_IncTick+0x20>)
 8042ac2:	781b      	ldrb	r3, [r3, #0]
 8042ac4:	461a      	mov	r2, r3
 8042ac6:	4b06      	ldr	r3, [pc, #24]	; (8042ae0 <HAL_IncTick+0x24>)
 8042ac8:	681b      	ldr	r3, [r3, #0]
 8042aca:	4413      	add	r3, r2
 8042acc:	4a04      	ldr	r2, [pc, #16]	; (8042ae0 <HAL_IncTick+0x24>)
 8042ace:	6013      	str	r3, [r2, #0]
}
 8042ad0:	bf00      	nop
 8042ad2:	46bd      	mov	sp, r7
 8042ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ad8:	4770      	bx	lr
 8042ada:	bf00      	nop
 8042adc:	20018038 	.word	0x20018038
 8042ae0:	200193dc 	.word	0x200193dc

08042ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8042ae4:	b480      	push	{r7}
 8042ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8042ae8:	4b03      	ldr	r3, [pc, #12]	; (8042af8 <HAL_GetTick+0x14>)
 8042aea:	681b      	ldr	r3, [r3, #0]
}
 8042aec:	4618      	mov	r0, r3
 8042aee:	46bd      	mov	sp, r7
 8042af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042af4:	4770      	bx	lr
 8042af6:	bf00      	nop
 8042af8:	200193dc 	.word	0x200193dc

08042afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8042afc:	b580      	push	{r7, lr}
 8042afe:	b084      	sub	sp, #16
 8042b00:	af00      	add	r7, sp, #0
 8042b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8042b04:	f7ff ffee 	bl	8042ae4 <HAL_GetTick>
 8042b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8042b0a:	687b      	ldr	r3, [r7, #4]
 8042b0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8042b0e:	68fb      	ldr	r3, [r7, #12]
 8042b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042b14:	d005      	beq.n	8042b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8042b16:	4b0a      	ldr	r3, [pc, #40]	; (8042b40 <HAL_Delay+0x44>)
 8042b18:	781b      	ldrb	r3, [r3, #0]
 8042b1a:	461a      	mov	r2, r3
 8042b1c:	68fb      	ldr	r3, [r7, #12]
 8042b1e:	4413      	add	r3, r2
 8042b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8042b22:	bf00      	nop
 8042b24:	f7ff ffde 	bl	8042ae4 <HAL_GetTick>
 8042b28:	4602      	mov	r2, r0
 8042b2a:	68bb      	ldr	r3, [r7, #8]
 8042b2c:	1ad3      	subs	r3, r2, r3
 8042b2e:	68fa      	ldr	r2, [r7, #12]
 8042b30:	429a      	cmp	r2, r3
 8042b32:	d8f7      	bhi.n	8042b24 <HAL_Delay+0x28>
  {
  }
}
 8042b34:	bf00      	nop
 8042b36:	bf00      	nop
 8042b38:	3710      	adds	r7, #16
 8042b3a:	46bd      	mov	sp, r7
 8042b3c:	bd80      	pop	{r7, pc}
 8042b3e:	bf00      	nop
 8042b40:	20018038 	.word	0x20018038

08042b44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8042b44:	b480      	push	{r7}
 8042b46:	b083      	sub	sp, #12
 8042b48:	af00      	add	r7, sp, #0
 8042b4a:	6078      	str	r0, [r7, #4]
 8042b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8042b4e:	687b      	ldr	r3, [r7, #4]
 8042b50:	689b      	ldr	r3, [r3, #8]
 8042b52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8042b56:	683b      	ldr	r3, [r7, #0]
 8042b58:	431a      	orrs	r2, r3
 8042b5a:	687b      	ldr	r3, [r7, #4]
 8042b5c:	609a      	str	r2, [r3, #8]
}
 8042b5e:	bf00      	nop
 8042b60:	370c      	adds	r7, #12
 8042b62:	46bd      	mov	sp, r7
 8042b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b68:	4770      	bx	lr

08042b6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8042b6a:	b480      	push	{r7}
 8042b6c:	b083      	sub	sp, #12
 8042b6e:	af00      	add	r7, sp, #0
 8042b70:	6078      	str	r0, [r7, #4]
 8042b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8042b74:	687b      	ldr	r3, [r7, #4]
 8042b76:	689b      	ldr	r3, [r3, #8]
 8042b78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8042b7c:	683b      	ldr	r3, [r7, #0]
 8042b7e:	431a      	orrs	r2, r3
 8042b80:	687b      	ldr	r3, [r7, #4]
 8042b82:	609a      	str	r2, [r3, #8]
}
 8042b84:	bf00      	nop
 8042b86:	370c      	adds	r7, #12
 8042b88:	46bd      	mov	sp, r7
 8042b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042b8e:	4770      	bx	lr

08042b90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8042b90:	b480      	push	{r7}
 8042b92:	b083      	sub	sp, #12
 8042b94:	af00      	add	r7, sp, #0
 8042b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8042b98:	687b      	ldr	r3, [r7, #4]
 8042b9a:	689b      	ldr	r3, [r3, #8]
 8042b9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8042ba0:	4618      	mov	r0, r3
 8042ba2:	370c      	adds	r7, #12
 8042ba4:	46bd      	mov	sp, r7
 8042ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042baa:	4770      	bx	lr

08042bac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8042bac:	b480      	push	{r7}
 8042bae:	b087      	sub	sp, #28
 8042bb0:	af00      	add	r7, sp, #0
 8042bb2:	60f8      	str	r0, [r7, #12]
 8042bb4:	60b9      	str	r1, [r7, #8]
 8042bb6:	607a      	str	r2, [r7, #4]
 8042bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8042bba:	68fb      	ldr	r3, [r7, #12]
 8042bbc:	3360      	adds	r3, #96	; 0x60
 8042bbe:	461a      	mov	r2, r3
 8042bc0:	68bb      	ldr	r3, [r7, #8]
 8042bc2:	009b      	lsls	r3, r3, #2
 8042bc4:	4413      	add	r3, r2
 8042bc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8042bc8:	697b      	ldr	r3, [r7, #20]
 8042bca:	681a      	ldr	r2, [r3, #0]
 8042bcc:	4b08      	ldr	r3, [pc, #32]	; (8042bf0 <LL_ADC_SetOffset+0x44>)
 8042bce:	4013      	ands	r3, r2
 8042bd0:	687a      	ldr	r2, [r7, #4]
 8042bd2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8042bd6:	683a      	ldr	r2, [r7, #0]
 8042bd8:	430a      	orrs	r2, r1
 8042bda:	4313      	orrs	r3, r2
 8042bdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8042be0:	697b      	ldr	r3, [r7, #20]
 8042be2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8042be4:	bf00      	nop
 8042be6:	371c      	adds	r7, #28
 8042be8:	46bd      	mov	sp, r7
 8042bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042bee:	4770      	bx	lr
 8042bf0:	03fff000 	.word	0x03fff000

08042bf4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8042bf4:	b480      	push	{r7}
 8042bf6:	b085      	sub	sp, #20
 8042bf8:	af00      	add	r7, sp, #0
 8042bfa:	6078      	str	r0, [r7, #4]
 8042bfc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8042bfe:	687b      	ldr	r3, [r7, #4]
 8042c00:	3360      	adds	r3, #96	; 0x60
 8042c02:	461a      	mov	r2, r3
 8042c04:	683b      	ldr	r3, [r7, #0]
 8042c06:	009b      	lsls	r3, r3, #2
 8042c08:	4413      	add	r3, r2
 8042c0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8042c0c:	68fb      	ldr	r3, [r7, #12]
 8042c0e:	681b      	ldr	r3, [r3, #0]
 8042c10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8042c14:	4618      	mov	r0, r3
 8042c16:	3714      	adds	r7, #20
 8042c18:	46bd      	mov	sp, r7
 8042c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c1e:	4770      	bx	lr

08042c20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8042c20:	b480      	push	{r7}
 8042c22:	b087      	sub	sp, #28
 8042c24:	af00      	add	r7, sp, #0
 8042c26:	60f8      	str	r0, [r7, #12]
 8042c28:	60b9      	str	r1, [r7, #8]
 8042c2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8042c2c:	68fb      	ldr	r3, [r7, #12]
 8042c2e:	3360      	adds	r3, #96	; 0x60
 8042c30:	461a      	mov	r2, r3
 8042c32:	68bb      	ldr	r3, [r7, #8]
 8042c34:	009b      	lsls	r3, r3, #2
 8042c36:	4413      	add	r3, r2
 8042c38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8042c3a:	697b      	ldr	r3, [r7, #20]
 8042c3c:	681b      	ldr	r3, [r3, #0]
 8042c3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8042c42:	687b      	ldr	r3, [r7, #4]
 8042c44:	431a      	orrs	r2, r3
 8042c46:	697b      	ldr	r3, [r7, #20]
 8042c48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8042c4a:	bf00      	nop
 8042c4c:	371c      	adds	r7, #28
 8042c4e:	46bd      	mov	sp, r7
 8042c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c54:	4770      	bx	lr

08042c56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8042c56:	b480      	push	{r7}
 8042c58:	b083      	sub	sp, #12
 8042c5a:	af00      	add	r7, sp, #0
 8042c5c:	6078      	str	r0, [r7, #4]
 8042c5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8042c60:	687b      	ldr	r3, [r7, #4]
 8042c62:	695b      	ldr	r3, [r3, #20]
 8042c64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8042c68:	683b      	ldr	r3, [r7, #0]
 8042c6a:	431a      	orrs	r2, r3
 8042c6c:	687b      	ldr	r3, [r7, #4]
 8042c6e:	615a      	str	r2, [r3, #20]
}
 8042c70:	bf00      	nop
 8042c72:	370c      	adds	r7, #12
 8042c74:	46bd      	mov	sp, r7
 8042c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c7a:	4770      	bx	lr

08042c7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8042c7c:	b480      	push	{r7}
 8042c7e:	b083      	sub	sp, #12
 8042c80:	af00      	add	r7, sp, #0
 8042c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8042c84:	687b      	ldr	r3, [r7, #4]
 8042c86:	68db      	ldr	r3, [r3, #12]
 8042c88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8042c8c:	2b00      	cmp	r3, #0
 8042c8e:	d101      	bne.n	8042c94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8042c90:	2301      	movs	r3, #1
 8042c92:	e000      	b.n	8042c96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8042c94:	2300      	movs	r3, #0
}
 8042c96:	4618      	mov	r0, r3
 8042c98:	370c      	adds	r7, #12
 8042c9a:	46bd      	mov	sp, r7
 8042c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ca0:	4770      	bx	lr

08042ca2 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8042ca2:	b480      	push	{r7}
 8042ca4:	b087      	sub	sp, #28
 8042ca6:	af00      	add	r7, sp, #0
 8042ca8:	60f8      	str	r0, [r7, #12]
 8042caa:	60b9      	str	r1, [r7, #8]
 8042cac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8042cae:	68fb      	ldr	r3, [r7, #12]
 8042cb0:	3330      	adds	r3, #48	; 0x30
 8042cb2:	461a      	mov	r2, r3
 8042cb4:	68bb      	ldr	r3, [r7, #8]
 8042cb6:	0a1b      	lsrs	r3, r3, #8
 8042cb8:	009b      	lsls	r3, r3, #2
 8042cba:	f003 030c 	and.w	r3, r3, #12
 8042cbe:	4413      	add	r3, r2
 8042cc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8042cc2:	697b      	ldr	r3, [r7, #20]
 8042cc4:	681a      	ldr	r2, [r3, #0]
 8042cc6:	68bb      	ldr	r3, [r7, #8]
 8042cc8:	f003 031f 	and.w	r3, r3, #31
 8042ccc:	211f      	movs	r1, #31
 8042cce:	fa01 f303 	lsl.w	r3, r1, r3
 8042cd2:	43db      	mvns	r3, r3
 8042cd4:	401a      	ands	r2, r3
 8042cd6:	687b      	ldr	r3, [r7, #4]
 8042cd8:	0e9b      	lsrs	r3, r3, #26
 8042cda:	f003 011f 	and.w	r1, r3, #31
 8042cde:	68bb      	ldr	r3, [r7, #8]
 8042ce0:	f003 031f 	and.w	r3, r3, #31
 8042ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8042ce8:	431a      	orrs	r2, r3
 8042cea:	697b      	ldr	r3, [r7, #20]
 8042cec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8042cee:	bf00      	nop
 8042cf0:	371c      	adds	r7, #28
 8042cf2:	46bd      	mov	sp, r7
 8042cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042cf8:	4770      	bx	lr

08042cfa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8042cfa:	b480      	push	{r7}
 8042cfc:	b083      	sub	sp, #12
 8042cfe:	af00      	add	r7, sp, #0
 8042d00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8042d02:	687b      	ldr	r3, [r7, #4]
 8042d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042d06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8042d0a:	2b00      	cmp	r3, #0
 8042d0c:	d101      	bne.n	8042d12 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8042d0e:	2301      	movs	r3, #1
 8042d10:	e000      	b.n	8042d14 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8042d12:	2300      	movs	r3, #0
}
 8042d14:	4618      	mov	r0, r3
 8042d16:	370c      	adds	r7, #12
 8042d18:	46bd      	mov	sp, r7
 8042d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042d1e:	4770      	bx	lr

08042d20 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8042d20:	b480      	push	{r7}
 8042d22:	b087      	sub	sp, #28
 8042d24:	af00      	add	r7, sp, #0
 8042d26:	60f8      	str	r0, [r7, #12]
 8042d28:	60b9      	str	r1, [r7, #8]
 8042d2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8042d2c:	68fb      	ldr	r3, [r7, #12]
 8042d2e:	3314      	adds	r3, #20
 8042d30:	461a      	mov	r2, r3
 8042d32:	68bb      	ldr	r3, [r7, #8]
 8042d34:	0e5b      	lsrs	r3, r3, #25
 8042d36:	009b      	lsls	r3, r3, #2
 8042d38:	f003 0304 	and.w	r3, r3, #4
 8042d3c:	4413      	add	r3, r2
 8042d3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8042d40:	697b      	ldr	r3, [r7, #20]
 8042d42:	681a      	ldr	r2, [r3, #0]
 8042d44:	68bb      	ldr	r3, [r7, #8]
 8042d46:	0d1b      	lsrs	r3, r3, #20
 8042d48:	f003 031f 	and.w	r3, r3, #31
 8042d4c:	2107      	movs	r1, #7
 8042d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8042d52:	43db      	mvns	r3, r3
 8042d54:	401a      	ands	r2, r3
 8042d56:	68bb      	ldr	r3, [r7, #8]
 8042d58:	0d1b      	lsrs	r3, r3, #20
 8042d5a:	f003 031f 	and.w	r3, r3, #31
 8042d5e:	6879      	ldr	r1, [r7, #4]
 8042d60:	fa01 f303 	lsl.w	r3, r1, r3
 8042d64:	431a      	orrs	r2, r3
 8042d66:	697b      	ldr	r3, [r7, #20]
 8042d68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8042d6a:	bf00      	nop
 8042d6c:	371c      	adds	r7, #28
 8042d6e:	46bd      	mov	sp, r7
 8042d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042d74:	4770      	bx	lr
	...

08042d78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8042d78:	b480      	push	{r7}
 8042d7a:	b085      	sub	sp, #20
 8042d7c:	af00      	add	r7, sp, #0
 8042d7e:	60f8      	str	r0, [r7, #12]
 8042d80:	60b9      	str	r1, [r7, #8]
 8042d82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8042d84:	68fb      	ldr	r3, [r7, #12]
 8042d86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8042d8a:	68bb      	ldr	r3, [r7, #8]
 8042d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8042d90:	43db      	mvns	r3, r3
 8042d92:	401a      	ands	r2, r3
 8042d94:	687b      	ldr	r3, [r7, #4]
 8042d96:	f003 0318 	and.w	r3, r3, #24
 8042d9a:	4908      	ldr	r1, [pc, #32]	; (8042dbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8042d9c:	40d9      	lsrs	r1, r3
 8042d9e:	68bb      	ldr	r3, [r7, #8]
 8042da0:	400b      	ands	r3, r1
 8042da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8042da6:	431a      	orrs	r2, r3
 8042da8:	68fb      	ldr	r3, [r7, #12]
 8042daa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8042dae:	bf00      	nop
 8042db0:	3714      	adds	r7, #20
 8042db2:	46bd      	mov	sp, r7
 8042db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042db8:	4770      	bx	lr
 8042dba:	bf00      	nop
 8042dbc:	0007ffff 	.word	0x0007ffff

08042dc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8042dc0:	b480      	push	{r7}
 8042dc2:	b083      	sub	sp, #12
 8042dc4:	af00      	add	r7, sp, #0
 8042dc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8042dc8:	687b      	ldr	r3, [r7, #4]
 8042dca:	689b      	ldr	r3, [r3, #8]
 8042dcc:	f003 031f 	and.w	r3, r3, #31
}
 8042dd0:	4618      	mov	r0, r3
 8042dd2:	370c      	adds	r7, #12
 8042dd4:	46bd      	mov	sp, r7
 8042dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042dda:	4770      	bx	lr

08042ddc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8042ddc:	b480      	push	{r7}
 8042dde:	b083      	sub	sp, #12
 8042de0:	af00      	add	r7, sp, #0
 8042de2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8042de4:	687b      	ldr	r3, [r7, #4]
 8042de6:	689b      	ldr	r3, [r3, #8]
 8042de8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8042dec:	4618      	mov	r0, r3
 8042dee:	370c      	adds	r7, #12
 8042df0:	46bd      	mov	sp, r7
 8042df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042df6:	4770      	bx	lr

08042df8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8042df8:	b480      	push	{r7}
 8042dfa:	b083      	sub	sp, #12
 8042dfc:	af00      	add	r7, sp, #0
 8042dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8042e00:	687b      	ldr	r3, [r7, #4]
 8042e02:	689b      	ldr	r3, [r3, #8]
 8042e04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8042e08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8042e0c:	687a      	ldr	r2, [r7, #4]
 8042e0e:	6093      	str	r3, [r2, #8]
}
 8042e10:	bf00      	nop
 8042e12:	370c      	adds	r7, #12
 8042e14:	46bd      	mov	sp, r7
 8042e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e1a:	4770      	bx	lr

08042e1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8042e1c:	b480      	push	{r7}
 8042e1e:	b083      	sub	sp, #12
 8042e20:	af00      	add	r7, sp, #0
 8042e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8042e24:	687b      	ldr	r3, [r7, #4]
 8042e26:	689b      	ldr	r3, [r3, #8]
 8042e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042e30:	d101      	bne.n	8042e36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8042e32:	2301      	movs	r3, #1
 8042e34:	e000      	b.n	8042e38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8042e36:	2300      	movs	r3, #0
}
 8042e38:	4618      	mov	r0, r3
 8042e3a:	370c      	adds	r7, #12
 8042e3c:	46bd      	mov	sp, r7
 8042e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e42:	4770      	bx	lr

08042e44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8042e44:	b480      	push	{r7}
 8042e46:	b083      	sub	sp, #12
 8042e48:	af00      	add	r7, sp, #0
 8042e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8042e4c:	687b      	ldr	r3, [r7, #4]
 8042e4e:	689b      	ldr	r3, [r3, #8]
 8042e50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8042e54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8042e58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8042e5c:	687b      	ldr	r3, [r7, #4]
 8042e5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8042e60:	bf00      	nop
 8042e62:	370c      	adds	r7, #12
 8042e64:	46bd      	mov	sp, r7
 8042e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e6a:	4770      	bx	lr

08042e6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8042e6c:	b480      	push	{r7}
 8042e6e:	b083      	sub	sp, #12
 8042e70:	af00      	add	r7, sp, #0
 8042e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8042e74:	687b      	ldr	r3, [r7, #4]
 8042e76:	689b      	ldr	r3, [r3, #8]
 8042e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042e7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8042e80:	d101      	bne.n	8042e86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8042e82:	2301      	movs	r3, #1
 8042e84:	e000      	b.n	8042e88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8042e86:	2300      	movs	r3, #0
}
 8042e88:	4618      	mov	r0, r3
 8042e8a:	370c      	adds	r7, #12
 8042e8c:	46bd      	mov	sp, r7
 8042e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042e92:	4770      	bx	lr

08042e94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8042e94:	b480      	push	{r7}
 8042e96:	b083      	sub	sp, #12
 8042e98:	af00      	add	r7, sp, #0
 8042e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8042e9c:	687b      	ldr	r3, [r7, #4]
 8042e9e:	689b      	ldr	r3, [r3, #8]
 8042ea0:	f003 0301 	and.w	r3, r3, #1
 8042ea4:	2b01      	cmp	r3, #1
 8042ea6:	d101      	bne.n	8042eac <LL_ADC_IsEnabled+0x18>
 8042ea8:	2301      	movs	r3, #1
 8042eaa:	e000      	b.n	8042eae <LL_ADC_IsEnabled+0x1a>
 8042eac:	2300      	movs	r3, #0
}
 8042eae:	4618      	mov	r0, r3
 8042eb0:	370c      	adds	r7, #12
 8042eb2:	46bd      	mov	sp, r7
 8042eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042eb8:	4770      	bx	lr

08042eba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8042eba:	b480      	push	{r7}
 8042ebc:	b083      	sub	sp, #12
 8042ebe:	af00      	add	r7, sp, #0
 8042ec0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8042ec2:	687b      	ldr	r3, [r7, #4]
 8042ec4:	689b      	ldr	r3, [r3, #8]
 8042ec6:	f003 0304 	and.w	r3, r3, #4
 8042eca:	2b04      	cmp	r3, #4
 8042ecc:	d101      	bne.n	8042ed2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8042ece:	2301      	movs	r3, #1
 8042ed0:	e000      	b.n	8042ed4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8042ed2:	2300      	movs	r3, #0
}
 8042ed4:	4618      	mov	r0, r3
 8042ed6:	370c      	adds	r7, #12
 8042ed8:	46bd      	mov	sp, r7
 8042eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ede:	4770      	bx	lr

08042ee0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8042ee0:	b480      	push	{r7}
 8042ee2:	b083      	sub	sp, #12
 8042ee4:	af00      	add	r7, sp, #0
 8042ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8042ee8:	687b      	ldr	r3, [r7, #4]
 8042eea:	689b      	ldr	r3, [r3, #8]
 8042eec:	f003 0308 	and.w	r3, r3, #8
 8042ef0:	2b08      	cmp	r3, #8
 8042ef2:	d101      	bne.n	8042ef8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8042ef4:	2301      	movs	r3, #1
 8042ef6:	e000      	b.n	8042efa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8042ef8:	2300      	movs	r3, #0
}
 8042efa:	4618      	mov	r0, r3
 8042efc:	370c      	adds	r7, #12
 8042efe:	46bd      	mov	sp, r7
 8042f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f04:	4770      	bx	lr
	...

08042f08 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8042f08:	b590      	push	{r4, r7, lr}
 8042f0a:	b089      	sub	sp, #36	; 0x24
 8042f0c:	af00      	add	r7, sp, #0
 8042f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8042f10:	2300      	movs	r3, #0
 8042f12:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8042f14:	2300      	movs	r3, #0
 8042f16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8042f18:	687b      	ldr	r3, [r7, #4]
 8042f1a:	2b00      	cmp	r3, #0
 8042f1c:	d101      	bne.n	8042f22 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8042f1e:	2301      	movs	r3, #1
 8042f20:	e17c      	b.n	804321c <HAL_ADC_Init+0x314>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8042f22:	687b      	ldr	r3, [r7, #4]
 8042f24:	691b      	ldr	r3, [r3, #16]
 8042f26:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8042f28:	687b      	ldr	r3, [r7, #4]
 8042f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042f2c:	2b00      	cmp	r3, #0
 8042f2e:	d132      	bne.n	8042f96 <HAL_ADC_Init+0x8e>
  {
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    /* Init the ADC Callback settings */
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8042f30:	687b      	ldr	r3, [r7, #4]
 8042f32:	4a9d      	ldr	r2, [pc, #628]	; (80431a8 <HAL_ADC_Init+0x2a0>)
 8042f34:	669a      	str	r2, [r3, #104]	; 0x68
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8042f36:	687b      	ldr	r3, [r7, #4]
 8042f38:	4a9c      	ldr	r2, [pc, #624]	; (80431ac <HAL_ADC_Init+0x2a4>)
 8042f3a:	66da      	str	r2, [r3, #108]	; 0x6c
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8042f3c:	687b      	ldr	r3, [r7, #4]
 8042f3e:	4a9c      	ldr	r2, [pc, #624]	; (80431b0 <HAL_ADC_Init+0x2a8>)
 8042f40:	671a      	str	r2, [r3, #112]	; 0x70
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8042f42:	687b      	ldr	r3, [r7, #4]
 8042f44:	4a9b      	ldr	r2, [pc, #620]	; (80431b4 <HAL_ADC_Init+0x2ac>)
 8042f46:	675a      	str	r2, [r3, #116]	; 0x74
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8042f48:	687b      	ldr	r3, [r7, #4]
 8042f4a:	4a9b      	ldr	r2, [pc, #620]	; (80431b8 <HAL_ADC_Init+0x2b0>)
 8042f4c:	679a      	str	r2, [r3, #120]	; 0x78
    hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak callback */
 8042f4e:	687b      	ldr	r3, [r7, #4]
 8042f50:	4a9a      	ldr	r2, [pc, #616]	; (80431bc <HAL_ADC_Init+0x2b4>)
 8042f52:	67da      	str	r2, [r3, #124]	; 0x7c
    hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak callback */
 8042f54:	687b      	ldr	r3, [r7, #4]
 8042f56:	4a9a      	ldr	r2, [pc, #616]	; (80431c0 <HAL_ADC_Init+0x2b8>)
 8042f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak callback */
 8042f5c:	687b      	ldr	r3, [r7, #4]
 8042f5e:	4a99      	ldr	r2, [pc, #612]	; (80431c4 <HAL_ADC_Init+0x2bc>)
 8042f60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak callback */
 8042f64:	687b      	ldr	r3, [r7, #4]
 8042f66:	4a98      	ldr	r2, [pc, #608]	; (80431c8 <HAL_ADC_Init+0x2c0>)
 8042f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (hadc->MspInitCallback == NULL)
 8042f6c:	687b      	ldr	r3, [r7, #4]
 8042f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042f72:	2b00      	cmp	r3, #0
 8042f74:	d103      	bne.n	8042f7e <HAL_ADC_Init+0x76>
    {
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8042f76:	687b      	ldr	r3, [r7, #4]
 8042f78:	4a94      	ldr	r2, [pc, #592]	; (80431cc <HAL_ADC_Init+0x2c4>)
 8042f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
 8042f7e:	687b      	ldr	r3, [r7, #4]
 8042f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042f84:	6878      	ldr	r0, [r7, #4]
 8042f86:	4798      	blx	r3
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8042f88:	687b      	ldr	r3, [r7, #4]
 8042f8a:	2200      	movs	r2, #0
 8042f8c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8042f8e:	687b      	ldr	r3, [r7, #4]
 8042f90:	2200      	movs	r2, #0
 8042f92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8042f96:	687b      	ldr	r3, [r7, #4]
 8042f98:	681b      	ldr	r3, [r3, #0]
 8042f9a:	4618      	mov	r0, r3
 8042f9c:	f7ff ff3e 	bl	8042e1c <LL_ADC_IsDeepPowerDownEnabled>
 8042fa0:	4603      	mov	r3, r0
 8042fa2:	2b00      	cmp	r3, #0
 8042fa4:	d004      	beq.n	8042fb0 <HAL_ADC_Init+0xa8>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8042fa6:	687b      	ldr	r3, [r7, #4]
 8042fa8:	681b      	ldr	r3, [r3, #0]
 8042faa:	4618      	mov	r0, r3
 8042fac:	f7ff ff24 	bl	8042df8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8042fb0:	687b      	ldr	r3, [r7, #4]
 8042fb2:	681b      	ldr	r3, [r3, #0]
 8042fb4:	4618      	mov	r0, r3
 8042fb6:	f7ff ff59 	bl	8042e6c <LL_ADC_IsInternalRegulatorEnabled>
 8042fba:	4603      	mov	r3, r0
 8042fbc:	2b00      	cmp	r3, #0
 8042fbe:	d113      	bne.n	8042fe8 <HAL_ADC_Init+0xe0>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8042fc0:	687b      	ldr	r3, [r7, #4]
 8042fc2:	681b      	ldr	r3, [r3, #0]
 8042fc4:	4618      	mov	r0, r3
 8042fc6:	f7ff ff3d 	bl	8042e44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8042fca:	4b81      	ldr	r3, [pc, #516]	; (80431d0 <HAL_ADC_Init+0x2c8>)
 8042fcc:	681b      	ldr	r3, [r3, #0]
 8042fce:	099b      	lsrs	r3, r3, #6
 8042fd0:	4a80      	ldr	r2, [pc, #512]	; (80431d4 <HAL_ADC_Init+0x2cc>)
 8042fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8042fd6:	099b      	lsrs	r3, r3, #6
 8042fd8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8042fda:	e002      	b.n	8042fe2 <HAL_ADC_Init+0xda>
    {
      wait_loop_index--;
 8042fdc:	68bb      	ldr	r3, [r7, #8]
 8042fde:	3b01      	subs	r3, #1
 8042fe0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8042fe2:	68bb      	ldr	r3, [r7, #8]
 8042fe4:	2b00      	cmp	r3, #0
 8042fe6:	d1f9      	bne.n	8042fdc <HAL_ADC_Init+0xd4>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8042fe8:	687b      	ldr	r3, [r7, #4]
 8042fea:	681b      	ldr	r3, [r3, #0]
 8042fec:	4618      	mov	r0, r3
 8042fee:	f7ff ff3d 	bl	8042e6c <LL_ADC_IsInternalRegulatorEnabled>
 8042ff2:	4603      	mov	r3, r0
 8042ff4:	2b00      	cmp	r3, #0
 8042ff6:	d10d      	bne.n	8043014 <HAL_ADC_Init+0x10c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8042ff8:	687b      	ldr	r3, [r7, #4]
 8042ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042ffc:	f043 0210 	orr.w	r2, r3, #16
 8043000:	687b      	ldr	r3, [r7, #4]
 8043002:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8043004:	687b      	ldr	r3, [r7, #4]
 8043006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043008:	f043 0201 	orr.w	r2, r3, #1
 804300c:	687b      	ldr	r3, [r7, #4]
 804300e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8043010:	2301      	movs	r3, #1
 8043012:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8043014:	687b      	ldr	r3, [r7, #4]
 8043016:	681b      	ldr	r3, [r3, #0]
 8043018:	4618      	mov	r0, r3
 804301a:	f7ff ff4e 	bl	8042eba <LL_ADC_REG_IsConversionOngoing>
 804301e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8043020:	687b      	ldr	r3, [r7, #4]
 8043022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043024:	f003 0310 	and.w	r3, r3, #16
 8043028:	2b00      	cmp	r3, #0
 804302a:	f040 80ee 	bne.w	804320a <HAL_ADC_Init+0x302>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 804302e:	697b      	ldr	r3, [r7, #20]
 8043030:	2b00      	cmp	r3, #0
 8043032:	f040 80ea 	bne.w	804320a <HAL_ADC_Init+0x302>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8043036:	687b      	ldr	r3, [r7, #4]
 8043038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804303a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 804303e:	f043 0202 	orr.w	r2, r3, #2
 8043042:	687b      	ldr	r3, [r7, #4]
 8043044:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8043046:	687b      	ldr	r3, [r7, #4]
 8043048:	681b      	ldr	r3, [r3, #0]
 804304a:	4618      	mov	r0, r3
 804304c:	f7ff ff22 	bl	8042e94 <LL_ADC_IsEnabled>
 8043050:	4603      	mov	r3, r0
 8043052:	2b00      	cmp	r3, #0
 8043054:	d110      	bne.n	8043078 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8043056:	4860      	ldr	r0, [pc, #384]	; (80431d8 <HAL_ADC_Init+0x2d0>)
 8043058:	f7ff ff1c 	bl	8042e94 <LL_ADC_IsEnabled>
 804305c:	4604      	mov	r4, r0
 804305e:	485f      	ldr	r0, [pc, #380]	; (80431dc <HAL_ADC_Init+0x2d4>)
 8043060:	f7ff ff18 	bl	8042e94 <LL_ADC_IsEnabled>
 8043064:	4603      	mov	r3, r0
 8043066:	4323      	orrs	r3, r4
 8043068:	2b00      	cmp	r3, #0
 804306a:	d105      	bne.n	8043078 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 804306c:	687b      	ldr	r3, [r7, #4]
 804306e:	685b      	ldr	r3, [r3, #4]
 8043070:	4619      	mov	r1, r3
 8043072:	485b      	ldr	r0, [pc, #364]	; (80431e0 <HAL_ADC_Init+0x2d8>)
 8043074:	f7ff fd66 	bl	8042b44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8043078:	687b      	ldr	r3, [r7, #4]
 804307a:	7e5b      	ldrb	r3, [r3, #25]
 804307c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 804307e:	687b      	ldr	r3, [r7, #4]
 8043080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8043082:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8043084:	687b      	ldr	r3, [r7, #4]
 8043086:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8043088:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 804308a:	687b      	ldr	r3, [r7, #4]
 804308c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 804308e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8043090:	687b      	ldr	r3, [r7, #4]
 8043092:	f893 3020 	ldrb.w	r3, [r3, #32]
 8043096:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8043098:	4313      	orrs	r3, r2
 804309a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 804309c:	687b      	ldr	r3, [r7, #4]
 804309e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80430a2:	2b01      	cmp	r3, #1
 80430a4:	d106      	bne.n	80430b4 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80430a6:	687b      	ldr	r3, [r7, #4]
 80430a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80430aa:	3b01      	subs	r3, #1
 80430ac:	045b      	lsls	r3, r3, #17
 80430ae:	69ba      	ldr	r2, [r7, #24]
 80430b0:	4313      	orrs	r3, r2
 80430b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80430b4:	687b      	ldr	r3, [r7, #4]
 80430b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80430b8:	2b00      	cmp	r3, #0
 80430ba:	d009      	beq.n	80430d0 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80430bc:	687b      	ldr	r3, [r7, #4]
 80430be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80430c0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80430c4:	687b      	ldr	r3, [r7, #4]
 80430c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80430c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80430ca:	69ba      	ldr	r2, [r7, #24]
 80430cc:	4313      	orrs	r3, r2
 80430ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80430d0:	687b      	ldr	r3, [r7, #4]
 80430d2:	681b      	ldr	r3, [r3, #0]
 80430d4:	68da      	ldr	r2, [r3, #12]
 80430d6:	4b43      	ldr	r3, [pc, #268]	; (80431e4 <HAL_ADC_Init+0x2dc>)
 80430d8:	4013      	ands	r3, r2
 80430da:	687a      	ldr	r2, [r7, #4]
 80430dc:	6812      	ldr	r2, [r2, #0]
 80430de:	69b9      	ldr	r1, [r7, #24]
 80430e0:	430b      	orrs	r3, r1
 80430e2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80430e4:	687b      	ldr	r3, [r7, #4]
 80430e6:	681b      	ldr	r3, [r3, #0]
 80430e8:	4618      	mov	r0, r3
 80430ea:	f7ff fee6 	bl	8042eba <LL_ADC_REG_IsConversionOngoing>
 80430ee:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80430f0:	687b      	ldr	r3, [r7, #4]
 80430f2:	681b      	ldr	r3, [r3, #0]
 80430f4:	4618      	mov	r0, r3
 80430f6:	f7ff fef3 	bl	8042ee0 <LL_ADC_INJ_IsConversionOngoing>
 80430fa:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80430fc:	693b      	ldr	r3, [r7, #16]
 80430fe:	2b00      	cmp	r3, #0
 8043100:	d140      	bne.n	8043184 <HAL_ADC_Init+0x27c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8043102:	68fb      	ldr	r3, [r7, #12]
 8043104:	2b00      	cmp	r3, #0
 8043106:	d13d      	bne.n	8043184 <HAL_ADC_Init+0x27c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8043108:	687b      	ldr	r3, [r7, #4]
 804310a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 804310c:	687b      	ldr	r3, [r7, #4]
 804310e:	7e1b      	ldrb	r3, [r3, #24]
 8043110:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8043112:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8043114:	687b      	ldr	r3, [r7, #4]
 8043116:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 804311a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 804311c:	4313      	orrs	r3, r2
 804311e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8043120:	687b      	ldr	r3, [r7, #4]
 8043122:	681b      	ldr	r3, [r3, #0]
 8043124:	68db      	ldr	r3, [r3, #12]
 8043126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 804312a:	f023 0306 	bic.w	r3, r3, #6
 804312e:	687a      	ldr	r2, [r7, #4]
 8043130:	6812      	ldr	r2, [r2, #0]
 8043132:	69b9      	ldr	r1, [r7, #24]
 8043134:	430b      	orrs	r3, r1
 8043136:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8043138:	687b      	ldr	r3, [r7, #4]
 804313a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 804313e:	2b01      	cmp	r3, #1
 8043140:	d118      	bne.n	8043174 <HAL_ADC_Init+0x26c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8043142:	687b      	ldr	r3, [r7, #4]
 8043144:	681b      	ldr	r3, [r3, #0]
 8043146:	691b      	ldr	r3, [r3, #16]
 8043148:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 804314c:	f023 0304 	bic.w	r3, r3, #4
 8043150:	687a      	ldr	r2, [r7, #4]
 8043152:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8043154:	687a      	ldr	r2, [r7, #4]
 8043156:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8043158:	4311      	orrs	r1, r2
 804315a:	687a      	ldr	r2, [r7, #4]
 804315c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 804315e:	4311      	orrs	r1, r2
 8043160:	687a      	ldr	r2, [r7, #4]
 8043162:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8043164:	430a      	orrs	r2, r1
 8043166:	431a      	orrs	r2, r3
 8043168:	687b      	ldr	r3, [r7, #4]
 804316a:	681b      	ldr	r3, [r3, #0]
 804316c:	f042 0201 	orr.w	r2, r2, #1
 8043170:	611a      	str	r2, [r3, #16]
 8043172:	e007      	b.n	8043184 <HAL_ADC_Init+0x27c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8043174:	687b      	ldr	r3, [r7, #4]
 8043176:	681b      	ldr	r3, [r3, #0]
 8043178:	691a      	ldr	r2, [r3, #16]
 804317a:	687b      	ldr	r3, [r7, #4]
 804317c:	681b      	ldr	r3, [r3, #0]
 804317e:	f022 0201 	bic.w	r2, r2, #1
 8043182:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8043184:	687b      	ldr	r3, [r7, #4]
 8043186:	691b      	ldr	r3, [r3, #16]
 8043188:	2b01      	cmp	r3, #1
 804318a:	d12d      	bne.n	80431e8 <HAL_ADC_Init+0x2e0>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 804318c:	687b      	ldr	r3, [r7, #4]
 804318e:	681b      	ldr	r3, [r3, #0]
 8043190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043192:	f023 010f 	bic.w	r1, r3, #15
 8043196:	687b      	ldr	r3, [r7, #4]
 8043198:	69db      	ldr	r3, [r3, #28]
 804319a:	1e5a      	subs	r2, r3, #1
 804319c:	687b      	ldr	r3, [r7, #4]
 804319e:	681b      	ldr	r3, [r3, #0]
 80431a0:	430a      	orrs	r2, r1
 80431a2:	631a      	str	r2, [r3, #48]	; 0x30
 80431a4:	e028      	b.n	80431f8 <HAL_ADC_Init+0x2f0>
 80431a6:	bf00      	nop
 80431a8:	0804366d 	.word	0x0804366d
 80431ac:	08043681 	.word	0x08043681
 80431b0:	08043695 	.word	0x08043695
 80431b4:	080436a9 	.word	0x080436a9
 80431b8:	08043ed9 	.word	0x08043ed9
 80431bc:	08043eed 	.word	0x08043eed
 80431c0:	08043f01 	.word	0x08043f01
 80431c4:	08043f15 	.word	0x08043f15
 80431c8:	08043f29 	.word	0x08043f29
 80431cc:	08040709 	.word	0x08040709
 80431d0:	20018000 	.word	0x20018000
 80431d4:	053e2d63 	.word	0x053e2d63
 80431d8:	42028000 	.word	0x42028000
 80431dc:	42028100 	.word	0x42028100
 80431e0:	42028300 	.word	0x42028300
 80431e4:	fff0c007 	.word	0xfff0c007
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80431e8:	687b      	ldr	r3, [r7, #4]
 80431ea:	681b      	ldr	r3, [r3, #0]
 80431ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80431ee:	687b      	ldr	r3, [r7, #4]
 80431f0:	681b      	ldr	r3, [r3, #0]
 80431f2:	f022 020f 	bic.w	r2, r2, #15
 80431f6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80431f8:	687b      	ldr	r3, [r7, #4]
 80431fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80431fc:	f023 0303 	bic.w	r3, r3, #3
 8043200:	f043 0201 	orr.w	r2, r3, #1
 8043204:	687b      	ldr	r3, [r7, #4]
 8043206:	659a      	str	r2, [r3, #88]	; 0x58
 8043208:	e007      	b.n	804321a <HAL_ADC_Init+0x312>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 804320a:	687b      	ldr	r3, [r7, #4]
 804320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804320e:	f043 0210 	orr.w	r2, r3, #16
 8043212:	687b      	ldr	r3, [r7, #4]
 8043214:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8043216:	2301      	movs	r3, #1
 8043218:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 804321a:	7ffb      	ldrb	r3, [r7, #31]
}
 804321c:	4618      	mov	r0, r3
 804321e:	3724      	adds	r7, #36	; 0x24
 8043220:	46bd      	mov	sp, r7
 8043222:	bd90      	pop	{r4, r7, pc}

08043224 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8043224:	b580      	push	{r7, lr}
 8043226:	b08a      	sub	sp, #40	; 0x28
 8043228:	af00      	add	r7, sp, #0
 804322a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 804322c:	2300      	movs	r3, #0
 804322e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8043230:	687b      	ldr	r3, [r7, #4]
 8043232:	681b      	ldr	r3, [r3, #0]
 8043234:	681b      	ldr	r3, [r3, #0]
 8043236:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8043238:	687b      	ldr	r3, [r7, #4]
 804323a:	681b      	ldr	r3, [r3, #0]
 804323c:	685b      	ldr	r3, [r3, #4]
 804323e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8043240:	4883      	ldr	r0, [pc, #524]	; (8043450 <HAL_ADC_IRQHandler+0x22c>)
 8043242:	f7ff fdbd 	bl	8042dc0 <LL_ADC_GetMultimode>
 8043246:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8043248:	69fb      	ldr	r3, [r7, #28]
 804324a:	f003 0302 	and.w	r3, r3, #2
 804324e:	2b00      	cmp	r3, #0
 8043250:	d019      	beq.n	8043286 <HAL_ADC_IRQHandler+0x62>
 8043252:	69bb      	ldr	r3, [r7, #24]
 8043254:	f003 0302 	and.w	r3, r3, #2
 8043258:	2b00      	cmp	r3, #0
 804325a:	d014      	beq.n	8043286 <HAL_ADC_IRQHandler+0x62>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 804325c:	687b      	ldr	r3, [r7, #4]
 804325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043260:	f003 0310 	and.w	r3, r3, #16
 8043264:	2b00      	cmp	r3, #0
 8043266:	d105      	bne.n	8043274 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8043268:	687b      	ldr	r3, [r7, #4]
 804326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804326c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8043270:	687b      	ldr	r3, [r7, #4]
 8043272:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
 8043274:	687b      	ldr	r3, [r7, #4]
 8043276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804327a:	6878      	ldr	r0, [r7, #4]
 804327c:	4798      	blx	r3
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 804327e:	687b      	ldr	r3, [r7, #4]
 8043280:	681b      	ldr	r3, [r3, #0]
 8043282:	2202      	movs	r2, #2
 8043284:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8043286:	69fb      	ldr	r3, [r7, #28]
 8043288:	f003 0304 	and.w	r3, r3, #4
 804328c:	2b00      	cmp	r3, #0
 804328e:	d004      	beq.n	804329a <HAL_ADC_IRQHandler+0x76>
 8043290:	69bb      	ldr	r3, [r7, #24]
 8043292:	f003 0304 	and.w	r3, r3, #4
 8043296:	2b00      	cmp	r3, #0
 8043298:	d10a      	bne.n	80432b0 <HAL_ADC_IRQHandler+0x8c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 804329a:	69fb      	ldr	r3, [r7, #28]
 804329c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80432a0:	2b00      	cmp	r3, #0
 80432a2:	f000 8084 	beq.w	80433ae <HAL_ADC_IRQHandler+0x18a>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80432a6:	69bb      	ldr	r3, [r7, #24]
 80432a8:	f003 0308 	and.w	r3, r3, #8
 80432ac:	2b00      	cmp	r3, #0
 80432ae:	d07e      	beq.n	80433ae <HAL_ADC_IRQHandler+0x18a>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80432b0:	687b      	ldr	r3, [r7, #4]
 80432b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80432b4:	f003 0310 	and.w	r3, r3, #16
 80432b8:	2b00      	cmp	r3, #0
 80432ba:	d105      	bne.n	80432c8 <HAL_ADC_IRQHandler+0xa4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80432bc:	687b      	ldr	r3, [r7, #4]
 80432be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80432c0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80432c4:	687b      	ldr	r3, [r7, #4]
 80432c6:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80432c8:	687b      	ldr	r3, [r7, #4]
 80432ca:	681b      	ldr	r3, [r3, #0]
 80432cc:	4618      	mov	r0, r3
 80432ce:	f7ff fcd5 	bl	8042c7c <LL_ADC_REG_IsTriggerSourceSWStart>
 80432d2:	4603      	mov	r3, r0
 80432d4:	2b00      	cmp	r3, #0
 80432d6:	d062      	beq.n	804339e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80432d8:	687b      	ldr	r3, [r7, #4]
 80432da:	681b      	ldr	r3, [r3, #0]
 80432dc:	4a5d      	ldr	r2, [pc, #372]	; (8043454 <HAL_ADC_IRQHandler+0x230>)
 80432de:	4293      	cmp	r3, r2
 80432e0:	d002      	beq.n	80432e8 <HAL_ADC_IRQHandler+0xc4>
 80432e2:	687b      	ldr	r3, [r7, #4]
 80432e4:	681b      	ldr	r3, [r3, #0]
 80432e6:	e000      	b.n	80432ea <HAL_ADC_IRQHandler+0xc6>
 80432e8:	4b5b      	ldr	r3, [pc, #364]	; (8043458 <HAL_ADC_IRQHandler+0x234>)
 80432ea:	687a      	ldr	r2, [r7, #4]
 80432ec:	6812      	ldr	r2, [r2, #0]
 80432ee:	4293      	cmp	r3, r2
 80432f0:	d008      	beq.n	8043304 <HAL_ADC_IRQHandler+0xe0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80432f2:	697b      	ldr	r3, [r7, #20]
 80432f4:	2b00      	cmp	r3, #0
 80432f6:	d005      	beq.n	8043304 <HAL_ADC_IRQHandler+0xe0>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80432f8:	697b      	ldr	r3, [r7, #20]
 80432fa:	2b05      	cmp	r3, #5
 80432fc:	d002      	beq.n	8043304 <HAL_ADC_IRQHandler+0xe0>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80432fe:	697b      	ldr	r3, [r7, #20]
 8043300:	2b09      	cmp	r3, #9
 8043302:	d104      	bne.n	804330e <HAL_ADC_IRQHandler+0xea>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8043304:	687b      	ldr	r3, [r7, #4]
 8043306:	681b      	ldr	r3, [r3, #0]
 8043308:	68db      	ldr	r3, [r3, #12]
 804330a:	623b      	str	r3, [r7, #32]
 804330c:	e00c      	b.n	8043328 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 804330e:	687b      	ldr	r3, [r7, #4]
 8043310:	681b      	ldr	r3, [r3, #0]
 8043312:	4a50      	ldr	r2, [pc, #320]	; (8043454 <HAL_ADC_IRQHandler+0x230>)
 8043314:	4293      	cmp	r3, r2
 8043316:	d002      	beq.n	804331e <HAL_ADC_IRQHandler+0xfa>
 8043318:	687b      	ldr	r3, [r7, #4]
 804331a:	681b      	ldr	r3, [r3, #0]
 804331c:	e000      	b.n	8043320 <HAL_ADC_IRQHandler+0xfc>
 804331e:	4b4e      	ldr	r3, [pc, #312]	; (8043458 <HAL_ADC_IRQHandler+0x234>)
 8043320:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8043322:	693b      	ldr	r3, [r7, #16]
 8043324:	68db      	ldr	r3, [r3, #12]
 8043326:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8043328:	6a3b      	ldr	r3, [r7, #32]
 804332a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 804332e:	2b00      	cmp	r3, #0
 8043330:	d135      	bne.n	804339e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8043332:	687b      	ldr	r3, [r7, #4]
 8043334:	681b      	ldr	r3, [r3, #0]
 8043336:	681b      	ldr	r3, [r3, #0]
 8043338:	f003 0308 	and.w	r3, r3, #8
 804333c:	2b08      	cmp	r3, #8
 804333e:	d12e      	bne.n	804339e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8043340:	687b      	ldr	r3, [r7, #4]
 8043342:	681b      	ldr	r3, [r3, #0]
 8043344:	4618      	mov	r0, r3
 8043346:	f7ff fdb8 	bl	8042eba <LL_ADC_REG_IsConversionOngoing>
 804334a:	4603      	mov	r3, r0
 804334c:	2b00      	cmp	r3, #0
 804334e:	d11a      	bne.n	8043386 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8043350:	687b      	ldr	r3, [r7, #4]
 8043352:	681b      	ldr	r3, [r3, #0]
 8043354:	685a      	ldr	r2, [r3, #4]
 8043356:	687b      	ldr	r3, [r7, #4]
 8043358:	681b      	ldr	r3, [r3, #0]
 804335a:	f022 020c 	bic.w	r2, r2, #12
 804335e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8043360:	687b      	ldr	r3, [r7, #4]
 8043362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8043368:	687b      	ldr	r3, [r7, #4]
 804336a:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 804336c:	687b      	ldr	r3, [r7, #4]
 804336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8043374:	2b00      	cmp	r3, #0
 8043376:	d112      	bne.n	804339e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8043378:	687b      	ldr	r3, [r7, #4]
 804337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804337c:	f043 0201 	orr.w	r2, r3, #1
 8043380:	687b      	ldr	r3, [r7, #4]
 8043382:	659a      	str	r2, [r3, #88]	; 0x58
 8043384:	e00b      	b.n	804339e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8043386:	687b      	ldr	r3, [r7, #4]
 8043388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804338a:	f043 0210 	orr.w	r2, r3, #16
 804338e:	687b      	ldr	r3, [r7, #4]
 8043390:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8043392:	687b      	ldr	r3, [r7, #4]
 8043394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043396:	f043 0201 	orr.w	r2, r3, #1
 804339a:	687b      	ldr	r3, [r7, #4]
 804339c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
    /*       to determine if conversion has been triggered from EOC or EOS,   */
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 804339e:	687b      	ldr	r3, [r7, #4]
 80433a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80433a2:	6878      	ldr	r0, [r7, #4]
 80433a4:	4798      	blx	r3
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80433a6:	687b      	ldr	r3, [r7, #4]
 80433a8:	681b      	ldr	r3, [r3, #0]
 80433aa:	220c      	movs	r2, #12
 80433ac:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80433ae:	69fb      	ldr	r3, [r7, #28]
 80433b0:	f003 0320 	and.w	r3, r3, #32
 80433b4:	2b00      	cmp	r3, #0
 80433b6:	d004      	beq.n	80433c2 <HAL_ADC_IRQHandler+0x19e>
 80433b8:	69bb      	ldr	r3, [r7, #24]
 80433ba:	f003 0320 	and.w	r3, r3, #32
 80433be:	2b00      	cmp	r3, #0
 80433c0:	d10b      	bne.n	80433da <HAL_ADC_IRQHandler+0x1b6>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80433c2:	69fb      	ldr	r3, [r7, #28]
 80433c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80433c8:	2b00      	cmp	r3, #0
 80433ca:	f000 809f 	beq.w	804350c <HAL_ADC_IRQHandler+0x2e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80433ce:	69bb      	ldr	r3, [r7, #24]
 80433d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80433d4:	2b00      	cmp	r3, #0
 80433d6:	f000 8099 	beq.w	804350c <HAL_ADC_IRQHandler+0x2e8>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80433da:	687b      	ldr	r3, [r7, #4]
 80433dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80433de:	f003 0310 	and.w	r3, r3, #16
 80433e2:	2b00      	cmp	r3, #0
 80433e4:	d105      	bne.n	80433f2 <HAL_ADC_IRQHandler+0x1ce>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80433e6:	687b      	ldr	r3, [r7, #4]
 80433e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80433ea:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80433ee:	687b      	ldr	r3, [r7, #4]
 80433f0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80433f2:	687b      	ldr	r3, [r7, #4]
 80433f4:	681b      	ldr	r3, [r3, #0]
 80433f6:	4618      	mov	r0, r3
 80433f8:	f7ff fc7f 	bl	8042cfa <LL_ADC_INJ_IsTriggerSourceSWStart>
 80433fc:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80433fe:	687b      	ldr	r3, [r7, #4]
 8043400:	681b      	ldr	r3, [r3, #0]
 8043402:	4618      	mov	r0, r3
 8043404:	f7ff fc3a 	bl	8042c7c <LL_ADC_REG_IsTriggerSourceSWStart>
 8043408:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 804340a:	687b      	ldr	r3, [r7, #4]
 804340c:	681b      	ldr	r3, [r3, #0]
 804340e:	4a11      	ldr	r2, [pc, #68]	; (8043454 <HAL_ADC_IRQHandler+0x230>)
 8043410:	4293      	cmp	r3, r2
 8043412:	d002      	beq.n	804341a <HAL_ADC_IRQHandler+0x1f6>
 8043414:	687b      	ldr	r3, [r7, #4]
 8043416:	681b      	ldr	r3, [r3, #0]
 8043418:	e000      	b.n	804341c <HAL_ADC_IRQHandler+0x1f8>
 804341a:	4b0f      	ldr	r3, [pc, #60]	; (8043458 <HAL_ADC_IRQHandler+0x234>)
 804341c:	687a      	ldr	r2, [r7, #4]
 804341e:	6812      	ldr	r2, [r2, #0]
 8043420:	4293      	cmp	r3, r2
 8043422:	d008      	beq.n	8043436 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8043424:	697b      	ldr	r3, [r7, #20]
 8043426:	2b00      	cmp	r3, #0
 8043428:	d005      	beq.n	8043436 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 804342a:	697b      	ldr	r3, [r7, #20]
 804342c:	2b06      	cmp	r3, #6
 804342e:	d002      	beq.n	8043436 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8043430:	697b      	ldr	r3, [r7, #20]
 8043432:	2b07      	cmp	r3, #7
 8043434:	d104      	bne.n	8043440 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8043436:	687b      	ldr	r3, [r7, #4]
 8043438:	681b      	ldr	r3, [r3, #0]
 804343a:	68db      	ldr	r3, [r3, #12]
 804343c:	623b      	str	r3, [r7, #32]
 804343e:	e012      	b.n	8043466 <HAL_ADC_IRQHandler+0x242>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8043440:	687b      	ldr	r3, [r7, #4]
 8043442:	681b      	ldr	r3, [r3, #0]
 8043444:	4a03      	ldr	r2, [pc, #12]	; (8043454 <HAL_ADC_IRQHandler+0x230>)
 8043446:	4293      	cmp	r3, r2
 8043448:	d008      	beq.n	804345c <HAL_ADC_IRQHandler+0x238>
 804344a:	687b      	ldr	r3, [r7, #4]
 804344c:	681b      	ldr	r3, [r3, #0]
 804344e:	e006      	b.n	804345e <HAL_ADC_IRQHandler+0x23a>
 8043450:	42028300 	.word	0x42028300
 8043454:	42028100 	.word	0x42028100
 8043458:	42028000 	.word	0x42028000
 804345c:	4b81      	ldr	r3, [pc, #516]	; (8043664 <HAL_ADC_IRQHandler+0x440>)
 804345e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8043460:	693b      	ldr	r3, [r7, #16]
 8043462:	68db      	ldr	r3, [r3, #12]
 8043464:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8043466:	68fb      	ldr	r3, [r7, #12]
 8043468:	2b00      	cmp	r3, #0
 804346a:	d10c      	bne.n	8043486 <HAL_ADC_IRQHandler+0x262>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 804346c:	6a3b      	ldr	r3, [r7, #32]
 804346e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 8043472:	2b00      	cmp	r3, #0
 8043474:	d142      	bne.n	80434fc <HAL_ADC_IRQHandler+0x2d8>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 8043476:	68bb      	ldr	r3, [r7, #8]
 8043478:	2b00      	cmp	r3, #0
 804347a:	d03f      	beq.n	80434fc <HAL_ADC_IRQHandler+0x2d8>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 804347c:	6a3b      	ldr	r3, [r7, #32]
 804347e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 8043482:	2b00      	cmp	r3, #0
 8043484:	d13a      	bne.n	80434fc <HAL_ADC_IRQHandler+0x2d8>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8043486:	687b      	ldr	r3, [r7, #4]
 8043488:	681b      	ldr	r3, [r3, #0]
 804348a:	681b      	ldr	r3, [r3, #0]
 804348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8043490:	2b40      	cmp	r3, #64	; 0x40
 8043492:	d133      	bne.n	80434fc <HAL_ADC_IRQHandler+0x2d8>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8043494:	6a3b      	ldr	r3, [r7, #32]
 8043496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804349a:	2b00      	cmp	r3, #0
 804349c:	d12e      	bne.n	80434fc <HAL_ADC_IRQHandler+0x2d8>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 804349e:	687b      	ldr	r3, [r7, #4]
 80434a0:	681b      	ldr	r3, [r3, #0]
 80434a2:	4618      	mov	r0, r3
 80434a4:	f7ff fd1c 	bl	8042ee0 <LL_ADC_INJ_IsConversionOngoing>
 80434a8:	4603      	mov	r3, r0
 80434aa:	2b00      	cmp	r3, #0
 80434ac:	d11a      	bne.n	80434e4 <HAL_ADC_IRQHandler+0x2c0>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80434ae:	687b      	ldr	r3, [r7, #4]
 80434b0:	681b      	ldr	r3, [r3, #0]
 80434b2:	685a      	ldr	r2, [r3, #4]
 80434b4:	687b      	ldr	r3, [r7, #4]
 80434b6:	681b      	ldr	r3, [r3, #0]
 80434b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80434bc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80434be:	687b      	ldr	r3, [r7, #4]
 80434c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80434c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80434c6:	687b      	ldr	r3, [r7, #4]
 80434c8:	659a      	str	r2, [r3, #88]	; 0x58

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80434ca:	687b      	ldr	r3, [r7, #4]
 80434cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80434ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80434d2:	2b00      	cmp	r3, #0
 80434d4:	d112      	bne.n	80434fc <HAL_ADC_IRQHandler+0x2d8>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80434d6:	687b      	ldr	r3, [r7, #4]
 80434d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80434da:	f043 0201 	orr.w	r2, r3, #1
 80434de:	687b      	ldr	r3, [r7, #4]
 80434e0:	659a      	str	r2, [r3, #88]	; 0x58
 80434e2:	e00b      	b.n	80434fc <HAL_ADC_IRQHandler+0x2d8>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80434e4:	687b      	ldr	r3, [r7, #4]
 80434e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80434e8:	f043 0210 	orr.w	r2, r3, #16
 80434ec:	687b      	ldr	r3, [r7, #4]
 80434ee:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80434f0:	687b      	ldr	r3, [r7, #4]
 80434f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80434f4:	f043 0201 	orr.w	r2, r3, #1
 80434f8:	687b      	ldr	r3, [r7, #4]
 80434fa:	65da      	str	r2, [r3, #92]	; 0x5c
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
              if (__HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
 80434fc:	687b      	ldr	r3, [r7, #4]
 80434fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8043500:	6878      	ldr	r0, [r7, #4]
 8043502:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8043504:	687b      	ldr	r3, [r7, #4]
 8043506:	681b      	ldr	r3, [r3, #0]
 8043508:	2260      	movs	r2, #96	; 0x60
 804350a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 804350c:	69fb      	ldr	r3, [r7, #28]
 804350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043512:	2b00      	cmp	r3, #0
 8043514:	d012      	beq.n	804353c <HAL_ADC_IRQHandler+0x318>
 8043516:	69bb      	ldr	r3, [r7, #24]
 8043518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804351c:	2b00      	cmp	r3, #0
 804351e:	d00d      	beq.n	804353c <HAL_ADC_IRQHandler+0x318>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8043520:	687b      	ldr	r3, [r7, #4]
 8043522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043524:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8043528:	687b      	ldr	r3, [r7, #4]
 804352a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
 804352c:	687b      	ldr	r3, [r7, #4]
 804352e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043530:	6878      	ldr	r0, [r7, #4]
 8043532:	4798      	blx	r3
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8043534:	687b      	ldr	r3, [r7, #4]
 8043536:	681b      	ldr	r3, [r3, #0]
 8043538:	2280      	movs	r2, #128	; 0x80
 804353a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 804353c:	69fb      	ldr	r3, [r7, #28]
 804353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043542:	2b00      	cmp	r3, #0
 8043544:	d014      	beq.n	8043570 <HAL_ADC_IRQHandler+0x34c>
 8043546:	69bb      	ldr	r3, [r7, #24]
 8043548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804354c:	2b00      	cmp	r3, #0
 804354e:	d00f      	beq.n	8043570 <HAL_ADC_IRQHandler+0x34c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8043550:	687b      	ldr	r3, [r7, #4]
 8043552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043554:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8043558:	687b      	ldr	r3, [r7, #4]
 804355a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
 804355c:	687b      	ldr	r3, [r7, #4]
 804355e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8043562:	6878      	ldr	r0, [r7, #4]
 8043564:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8043566:	687b      	ldr	r3, [r7, #4]
 8043568:	681b      	ldr	r3, [r3, #0]
 804356a:	f44f 7280 	mov.w	r2, #256	; 0x100
 804356e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8043570:	69fb      	ldr	r3, [r7, #28]
 8043572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8043576:	2b00      	cmp	r3, #0
 8043578:	d014      	beq.n	80435a4 <HAL_ADC_IRQHandler+0x380>
 804357a:	69bb      	ldr	r3, [r7, #24]
 804357c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8043580:	2b00      	cmp	r3, #0
 8043582:	d00f      	beq.n	80435a4 <HAL_ADC_IRQHandler+0x380>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8043584:	687b      	ldr	r3, [r7, #4]
 8043586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043588:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 804358c:	687b      	ldr	r3, [r7, #4]
 804358e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
 8043590:	687b      	ldr	r3, [r7, #4]
 8043592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043596:	6878      	ldr	r0, [r7, #4]
 8043598:	4798      	blx	r3
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 804359a:	687b      	ldr	r3, [r7, #4]
 804359c:	681b      	ldr	r3, [r3, #0]
 804359e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80435a2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80435a4:	69fb      	ldr	r3, [r7, #28]
 80435a6:	f003 0310 	and.w	r3, r3, #16
 80435aa:	2b00      	cmp	r3, #0
 80435ac:	d037      	beq.n	804361e <HAL_ADC_IRQHandler+0x3fa>
 80435ae:	69bb      	ldr	r3, [r7, #24]
 80435b0:	f003 0310 	and.w	r3, r3, #16
 80435b4:	2b00      	cmp	r3, #0
 80435b6:	d032      	beq.n	804361e <HAL_ADC_IRQHandler+0x3fa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80435b8:	687b      	ldr	r3, [r7, #4]
 80435ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80435bc:	2b00      	cmp	r3, #0
 80435be:	d102      	bne.n	80435c6 <HAL_ADC_IRQHandler+0x3a2>
    {
      overrun_error = 1UL;
 80435c0:	2301      	movs	r3, #1
 80435c2:	627b      	str	r3, [r7, #36]	; 0x24
 80435c4:	e014      	b.n	80435f0 <HAL_ADC_IRQHandler+0x3cc>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80435c6:	697b      	ldr	r3, [r7, #20]
 80435c8:	2b00      	cmp	r3, #0
 80435ca:	d008      	beq.n	80435de <HAL_ADC_IRQHandler+0x3ba>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80435cc:	4826      	ldr	r0, [pc, #152]	; (8043668 <HAL_ADC_IRQHandler+0x444>)
 80435ce:	f7ff fc05 	bl	8042ddc <LL_ADC_GetMultiDMATransfer>
 80435d2:	4603      	mov	r3, r0
 80435d4:	2b00      	cmp	r3, #0
 80435d6:	d00b      	beq.n	80435f0 <HAL_ADC_IRQHandler+0x3cc>
        {
          overrun_error = 1UL;
 80435d8:	2301      	movs	r3, #1
 80435da:	627b      	str	r3, [r7, #36]	; 0x24
 80435dc:	e008      	b.n	80435f0 <HAL_ADC_IRQHandler+0x3cc>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80435de:	687b      	ldr	r3, [r7, #4]
 80435e0:	681b      	ldr	r3, [r3, #0]
 80435e2:	68db      	ldr	r3, [r3, #12]
 80435e4:	f003 0301 	and.w	r3, r3, #1
 80435e8:	2b00      	cmp	r3, #0
 80435ea:	d001      	beq.n	80435f0 <HAL_ADC_IRQHandler+0x3cc>
        {
          overrun_error = 1UL;
 80435ec:	2301      	movs	r3, #1
 80435ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80435f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80435f2:	2b01      	cmp	r3, #1
 80435f4:	d10f      	bne.n	8043616 <HAL_ADC_IRQHandler+0x3f2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80435f6:	687b      	ldr	r3, [r7, #4]
 80435f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80435fa:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80435fe:	687b      	ldr	r3, [r7, #4]
 8043600:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8043602:	687b      	ldr	r3, [r7, #4]
 8043604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043606:	f043 0202 	orr.w	r2, r3, #2
 804360a:	687b      	ldr	r3, [r7, #4]
 804360c:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Note: In case of overrun, ADC conversion data is preserved until     */
      /*       flag OVR is reset.                                             */
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
 804360e:	687b      	ldr	r3, [r7, #4]
 8043610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8043612:	6878      	ldr	r0, [r7, #4]
 8043614:	4798      	blx	r3
      HAL_ADC_ErrorCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8043616:	687b      	ldr	r3, [r7, #4]
 8043618:	681b      	ldr	r3, [r3, #0]
 804361a:	2210      	movs	r2, #16
 804361c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 804361e:	69fb      	ldr	r3, [r7, #28]
 8043620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043624:	2b00      	cmp	r3, #0
 8043626:	d019      	beq.n	804365c <HAL_ADC_IRQHandler+0x438>
 8043628:	69bb      	ldr	r3, [r7, #24]
 804362a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804362e:	2b00      	cmp	r3, #0
 8043630:	d014      	beq.n	804365c <HAL_ADC_IRQHandler+0x438>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8043632:	687b      	ldr	r3, [r7, #4]
 8043634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043636:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 804363a:	687b      	ldr	r3, [r7, #4]
 804363c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 804363e:	687b      	ldr	r3, [r7, #4]
 8043640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8043642:	f043 0208 	orr.w	r2, r3, #8
 8043646:	687b      	ldr	r3, [r7, #4]
 8043648:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 804364a:	687b      	ldr	r3, [r7, #4]
 804364c:	681b      	ldr	r3, [r3, #0]
 804364e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8043652:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
 8043654:	687b      	ldr	r3, [r7, #4]
 8043656:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8043658:	6878      	ldr	r0, [r7, #4]
 804365a:	4798      	blx	r3
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 804365c:	bf00      	nop
 804365e:	3728      	adds	r7, #40	; 0x28
 8043660:	46bd      	mov	sp, r7
 8043662:	bd80      	pop	{r7, pc}
 8043664:	42028000 	.word	0x42028000
 8043668:	42028300 	.word	0x42028300

0804366c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 804366c:	b480      	push	{r7}
 804366e:	b083      	sub	sp, #12
 8043670:	af00      	add	r7, sp, #0
 8043672:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8043674:	bf00      	nop
 8043676:	370c      	adds	r7, #12
 8043678:	46bd      	mov	sp, r7
 804367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804367e:	4770      	bx	lr

08043680 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8043680:	b480      	push	{r7}
 8043682:	b083      	sub	sp, #12
 8043684:	af00      	add	r7, sp, #0
 8043686:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8043688:	bf00      	nop
 804368a:	370c      	adds	r7, #12
 804368c:	46bd      	mov	sp, r7
 804368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043692:	4770      	bx	lr

08043694 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8043694:	b480      	push	{r7}
 8043696:	b083      	sub	sp, #12
 8043698:	af00      	add	r7, sp, #0
 804369a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 804369c:	bf00      	nop
 804369e:	370c      	adds	r7, #12
 80436a0:	46bd      	mov	sp, r7
 80436a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80436a6:	4770      	bx	lr

080436a8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80436a8:	b480      	push	{r7}
 80436aa:	b083      	sub	sp, #12
 80436ac:	af00      	add	r7, sp, #0
 80436ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80436b0:	bf00      	nop
 80436b2:	370c      	adds	r7, #12
 80436b4:	46bd      	mov	sp, r7
 80436b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80436ba:	4770      	bx	lr

080436bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80436bc:	b590      	push	{r4, r7, lr}
 80436be:	b0b7      	sub	sp, #220	; 0xdc
 80436c0:	af00      	add	r7, sp, #0
 80436c2:	6078      	str	r0, [r7, #4]
 80436c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80436c6:	2300      	movs	r3, #0
 80436c8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80436cc:	2300      	movs	r3, #0
 80436ce:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80436d0:	687b      	ldr	r3, [r7, #4]
 80436d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80436d6:	2b01      	cmp	r3, #1
 80436d8:	d101      	bne.n	80436de <HAL_ADC_ConfigChannel+0x22>
 80436da:	2302      	movs	r3, #2
 80436dc:	e3c0      	b.n	8043e60 <HAL_ADC_ConfigChannel+0x7a4>
 80436de:	687b      	ldr	r3, [r7, #4]
 80436e0:	2201      	movs	r2, #1
 80436e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80436e6:	687b      	ldr	r3, [r7, #4]
 80436e8:	681b      	ldr	r3, [r3, #0]
 80436ea:	4618      	mov	r0, r3
 80436ec:	f7ff fbe5 	bl	8042eba <LL_ADC_REG_IsConversionOngoing>
 80436f0:	4603      	mov	r3, r0
 80436f2:	2b00      	cmp	r3, #0
 80436f4:	f040 83a5 	bne.w	8043e42 <HAL_ADC_ConfigChannel+0x786>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80436f8:	687b      	ldr	r3, [r7, #4]
 80436fa:	6818      	ldr	r0, [r3, #0]
 80436fc:	683b      	ldr	r3, [r7, #0]
 80436fe:	6859      	ldr	r1, [r3, #4]
 8043700:	683b      	ldr	r3, [r7, #0]
 8043702:	681b      	ldr	r3, [r3, #0]
 8043704:	461a      	mov	r2, r3
 8043706:	f7ff facc 	bl	8042ca2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 804370a:	687b      	ldr	r3, [r7, #4]
 804370c:	681b      	ldr	r3, [r3, #0]
 804370e:	4618      	mov	r0, r3
 8043710:	f7ff fbd3 	bl	8042eba <LL_ADC_REG_IsConversionOngoing>
 8043714:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8043718:	687b      	ldr	r3, [r7, #4]
 804371a:	681b      	ldr	r3, [r3, #0]
 804371c:	4618      	mov	r0, r3
 804371e:	f7ff fbdf 	bl	8042ee0 <LL_ADC_INJ_IsConversionOngoing>
 8043722:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8043726:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 804372a:	2b00      	cmp	r3, #0
 804372c:	f040 81c1 	bne.w	8043ab2 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8043730:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8043734:	2b00      	cmp	r3, #0
 8043736:	f040 81bc 	bne.w	8043ab2 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 804373a:	683b      	ldr	r3, [r7, #0]
 804373c:	689b      	ldr	r3, [r3, #8]
 804373e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8043742:	d10f      	bne.n	8043764 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8043744:	687b      	ldr	r3, [r7, #4]
 8043746:	6818      	ldr	r0, [r3, #0]
 8043748:	683b      	ldr	r3, [r7, #0]
 804374a:	681b      	ldr	r3, [r3, #0]
 804374c:	2200      	movs	r2, #0
 804374e:	4619      	mov	r1, r3
 8043750:	f7ff fae6 	bl	8042d20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8043754:	687b      	ldr	r3, [r7, #4]
 8043756:	681b      	ldr	r3, [r3, #0]
 8043758:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 804375c:	4618      	mov	r0, r3
 804375e:	f7ff fa7a 	bl	8042c56 <LL_ADC_SetSamplingTimeCommonConfig>
 8043762:	e00e      	b.n	8043782 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8043764:	687b      	ldr	r3, [r7, #4]
 8043766:	6818      	ldr	r0, [r3, #0]
 8043768:	683b      	ldr	r3, [r7, #0]
 804376a:	6819      	ldr	r1, [r3, #0]
 804376c:	683b      	ldr	r3, [r7, #0]
 804376e:	689b      	ldr	r3, [r3, #8]
 8043770:	461a      	mov	r2, r3
 8043772:	f7ff fad5 	bl	8042d20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8043776:	687b      	ldr	r3, [r7, #4]
 8043778:	681b      	ldr	r3, [r3, #0]
 804377a:	2100      	movs	r1, #0
 804377c:	4618      	mov	r0, r3
 804377e:	f7ff fa6a 	bl	8042c56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8043782:	683b      	ldr	r3, [r7, #0]
 8043784:	695a      	ldr	r2, [r3, #20]
 8043786:	687b      	ldr	r3, [r7, #4]
 8043788:	681b      	ldr	r3, [r3, #0]
 804378a:	68db      	ldr	r3, [r3, #12]
 804378c:	08db      	lsrs	r3, r3, #3
 804378e:	f003 0303 	and.w	r3, r3, #3
 8043792:	005b      	lsls	r3, r3, #1
 8043794:	fa02 f303 	lsl.w	r3, r2, r3
 8043798:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 804379c:	683b      	ldr	r3, [r7, #0]
 804379e:	691b      	ldr	r3, [r3, #16]
 80437a0:	2b04      	cmp	r3, #4
 80437a2:	d00a      	beq.n	80437ba <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80437a4:	687b      	ldr	r3, [r7, #4]
 80437a6:	6818      	ldr	r0, [r3, #0]
 80437a8:	683b      	ldr	r3, [r7, #0]
 80437aa:	6919      	ldr	r1, [r3, #16]
 80437ac:	683b      	ldr	r3, [r7, #0]
 80437ae:	681a      	ldr	r2, [r3, #0]
 80437b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80437b4:	f7ff f9fa 	bl	8042bac <LL_ADC_SetOffset>
 80437b8:	e17b      	b.n	8043ab2 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80437ba:	687b      	ldr	r3, [r7, #4]
 80437bc:	681b      	ldr	r3, [r3, #0]
 80437be:	2100      	movs	r1, #0
 80437c0:	4618      	mov	r0, r3
 80437c2:	f7ff fa17 	bl	8042bf4 <LL_ADC_GetOffsetChannel>
 80437c6:	4603      	mov	r3, r0
 80437c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80437cc:	2b00      	cmp	r3, #0
 80437ce:	d10a      	bne.n	80437e6 <HAL_ADC_ConfigChannel+0x12a>
 80437d0:	687b      	ldr	r3, [r7, #4]
 80437d2:	681b      	ldr	r3, [r3, #0]
 80437d4:	2100      	movs	r1, #0
 80437d6:	4618      	mov	r0, r3
 80437d8:	f7ff fa0c 	bl	8042bf4 <LL_ADC_GetOffsetChannel>
 80437dc:	4603      	mov	r3, r0
 80437de:	0e9b      	lsrs	r3, r3, #26
 80437e0:	f003 021f 	and.w	r2, r3, #31
 80437e4:	e01e      	b.n	8043824 <HAL_ADC_ConfigChannel+0x168>
 80437e6:	687b      	ldr	r3, [r7, #4]
 80437e8:	681b      	ldr	r3, [r3, #0]
 80437ea:	2100      	movs	r1, #0
 80437ec:	4618      	mov	r0, r3
 80437ee:	f7ff fa01 	bl	8042bf4 <LL_ADC_GetOffsetChannel>
 80437f2:	4603      	mov	r3, r0
 80437f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80437f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80437fc:	fa93 f3a3 	rbit	r3, r3
 8043800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8043804:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8043808:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 804380c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8043810:	2b00      	cmp	r3, #0
 8043812:	d101      	bne.n	8043818 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8043814:	2320      	movs	r3, #32
 8043816:	e004      	b.n	8043822 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8043818:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 804381c:	fab3 f383 	clz	r3, r3
 8043820:	b2db      	uxtb	r3, r3
 8043822:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8043824:	683b      	ldr	r3, [r7, #0]
 8043826:	681b      	ldr	r3, [r3, #0]
 8043828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 804382c:	2b00      	cmp	r3, #0
 804382e:	d105      	bne.n	804383c <HAL_ADC_ConfigChannel+0x180>
 8043830:	683b      	ldr	r3, [r7, #0]
 8043832:	681b      	ldr	r3, [r3, #0]
 8043834:	0e9b      	lsrs	r3, r3, #26
 8043836:	f003 031f 	and.w	r3, r3, #31
 804383a:	e018      	b.n	804386e <HAL_ADC_ConfigChannel+0x1b2>
 804383c:	683b      	ldr	r3, [r7, #0]
 804383e:	681b      	ldr	r3, [r3, #0]
 8043840:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8043844:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8043848:	fa93 f3a3 	rbit	r3, r3
 804384c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8043850:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8043854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8043858:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 804385c:	2b00      	cmp	r3, #0
 804385e:	d101      	bne.n	8043864 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8043860:	2320      	movs	r3, #32
 8043862:	e004      	b.n	804386e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8043864:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8043868:	fab3 f383 	clz	r3, r3
 804386c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 804386e:	429a      	cmp	r2, r3
 8043870:	d106      	bne.n	8043880 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8043872:	687b      	ldr	r3, [r7, #4]
 8043874:	681b      	ldr	r3, [r3, #0]
 8043876:	2200      	movs	r2, #0
 8043878:	2100      	movs	r1, #0
 804387a:	4618      	mov	r0, r3
 804387c:	f7ff f9d0 	bl	8042c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8043880:	687b      	ldr	r3, [r7, #4]
 8043882:	681b      	ldr	r3, [r3, #0]
 8043884:	2101      	movs	r1, #1
 8043886:	4618      	mov	r0, r3
 8043888:	f7ff f9b4 	bl	8042bf4 <LL_ADC_GetOffsetChannel>
 804388c:	4603      	mov	r3, r0
 804388e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043892:	2b00      	cmp	r3, #0
 8043894:	d10a      	bne.n	80438ac <HAL_ADC_ConfigChannel+0x1f0>
 8043896:	687b      	ldr	r3, [r7, #4]
 8043898:	681b      	ldr	r3, [r3, #0]
 804389a:	2101      	movs	r1, #1
 804389c:	4618      	mov	r0, r3
 804389e:	f7ff f9a9 	bl	8042bf4 <LL_ADC_GetOffsetChannel>
 80438a2:	4603      	mov	r3, r0
 80438a4:	0e9b      	lsrs	r3, r3, #26
 80438a6:	f003 021f 	and.w	r2, r3, #31
 80438aa:	e01e      	b.n	80438ea <HAL_ADC_ConfigChannel+0x22e>
 80438ac:	687b      	ldr	r3, [r7, #4]
 80438ae:	681b      	ldr	r3, [r3, #0]
 80438b0:	2101      	movs	r1, #1
 80438b2:	4618      	mov	r0, r3
 80438b4:	f7ff f99e 	bl	8042bf4 <LL_ADC_GetOffsetChannel>
 80438b8:	4603      	mov	r3, r0
 80438ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80438be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80438c2:	fa93 f3a3 	rbit	r3, r3
 80438c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80438ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80438ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80438d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80438d6:	2b00      	cmp	r3, #0
 80438d8:	d101      	bne.n	80438de <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 80438da:	2320      	movs	r3, #32
 80438dc:	e004      	b.n	80438e8 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 80438de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80438e2:	fab3 f383 	clz	r3, r3
 80438e6:	b2db      	uxtb	r3, r3
 80438e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80438ea:	683b      	ldr	r3, [r7, #0]
 80438ec:	681b      	ldr	r3, [r3, #0]
 80438ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80438f2:	2b00      	cmp	r3, #0
 80438f4:	d105      	bne.n	8043902 <HAL_ADC_ConfigChannel+0x246>
 80438f6:	683b      	ldr	r3, [r7, #0]
 80438f8:	681b      	ldr	r3, [r3, #0]
 80438fa:	0e9b      	lsrs	r3, r3, #26
 80438fc:	f003 031f 	and.w	r3, r3, #31
 8043900:	e018      	b.n	8043934 <HAL_ADC_ConfigChannel+0x278>
 8043902:	683b      	ldr	r3, [r7, #0]
 8043904:	681b      	ldr	r3, [r3, #0]
 8043906:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804390a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 804390e:	fa93 f3a3 	rbit	r3, r3
 8043912:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8043916:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 804391a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 804391e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8043922:	2b00      	cmp	r3, #0
 8043924:	d101      	bne.n	804392a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8043926:	2320      	movs	r3, #32
 8043928:	e004      	b.n	8043934 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 804392a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 804392e:	fab3 f383 	clz	r3, r3
 8043932:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8043934:	429a      	cmp	r2, r3
 8043936:	d106      	bne.n	8043946 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8043938:	687b      	ldr	r3, [r7, #4]
 804393a:	681b      	ldr	r3, [r3, #0]
 804393c:	2200      	movs	r2, #0
 804393e:	2101      	movs	r1, #1
 8043940:	4618      	mov	r0, r3
 8043942:	f7ff f96d 	bl	8042c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8043946:	687b      	ldr	r3, [r7, #4]
 8043948:	681b      	ldr	r3, [r3, #0]
 804394a:	2102      	movs	r1, #2
 804394c:	4618      	mov	r0, r3
 804394e:	f7ff f951 	bl	8042bf4 <LL_ADC_GetOffsetChannel>
 8043952:	4603      	mov	r3, r0
 8043954:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043958:	2b00      	cmp	r3, #0
 804395a:	d10a      	bne.n	8043972 <HAL_ADC_ConfigChannel+0x2b6>
 804395c:	687b      	ldr	r3, [r7, #4]
 804395e:	681b      	ldr	r3, [r3, #0]
 8043960:	2102      	movs	r1, #2
 8043962:	4618      	mov	r0, r3
 8043964:	f7ff f946 	bl	8042bf4 <LL_ADC_GetOffsetChannel>
 8043968:	4603      	mov	r3, r0
 804396a:	0e9b      	lsrs	r3, r3, #26
 804396c:	f003 021f 	and.w	r2, r3, #31
 8043970:	e01e      	b.n	80439b0 <HAL_ADC_ConfigChannel+0x2f4>
 8043972:	687b      	ldr	r3, [r7, #4]
 8043974:	681b      	ldr	r3, [r3, #0]
 8043976:	2102      	movs	r1, #2
 8043978:	4618      	mov	r0, r3
 804397a:	f7ff f93b 	bl	8042bf4 <LL_ADC_GetOffsetChannel>
 804397e:	4603      	mov	r3, r0
 8043980:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8043984:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8043988:	fa93 f3a3 	rbit	r3, r3
 804398c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8043990:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8043994:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8043998:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 804399c:	2b00      	cmp	r3, #0
 804399e:	d101      	bne.n	80439a4 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80439a0:	2320      	movs	r3, #32
 80439a2:	e004      	b.n	80439ae <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80439a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80439a8:	fab3 f383 	clz	r3, r3
 80439ac:	b2db      	uxtb	r3, r3
 80439ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80439b0:	683b      	ldr	r3, [r7, #0]
 80439b2:	681b      	ldr	r3, [r3, #0]
 80439b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80439b8:	2b00      	cmp	r3, #0
 80439ba:	d105      	bne.n	80439c8 <HAL_ADC_ConfigChannel+0x30c>
 80439bc:	683b      	ldr	r3, [r7, #0]
 80439be:	681b      	ldr	r3, [r3, #0]
 80439c0:	0e9b      	lsrs	r3, r3, #26
 80439c2:	f003 031f 	and.w	r3, r3, #31
 80439c6:	e016      	b.n	80439f6 <HAL_ADC_ConfigChannel+0x33a>
 80439c8:	683b      	ldr	r3, [r7, #0]
 80439ca:	681b      	ldr	r3, [r3, #0]
 80439cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80439d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80439d4:	fa93 f3a3 	rbit	r3, r3
 80439d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80439da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80439dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80439e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80439e4:	2b00      	cmp	r3, #0
 80439e6:	d101      	bne.n	80439ec <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 80439e8:	2320      	movs	r3, #32
 80439ea:	e004      	b.n	80439f6 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 80439ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80439f0:	fab3 f383 	clz	r3, r3
 80439f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80439f6:	429a      	cmp	r2, r3
 80439f8:	d106      	bne.n	8043a08 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80439fa:	687b      	ldr	r3, [r7, #4]
 80439fc:	681b      	ldr	r3, [r3, #0]
 80439fe:	2200      	movs	r2, #0
 8043a00:	2102      	movs	r1, #2
 8043a02:	4618      	mov	r0, r3
 8043a04:	f7ff f90c 	bl	8042c20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8043a08:	687b      	ldr	r3, [r7, #4]
 8043a0a:	681b      	ldr	r3, [r3, #0]
 8043a0c:	2103      	movs	r1, #3
 8043a0e:	4618      	mov	r0, r3
 8043a10:	f7ff f8f0 	bl	8042bf4 <LL_ADC_GetOffsetChannel>
 8043a14:	4603      	mov	r3, r0
 8043a16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043a1a:	2b00      	cmp	r3, #0
 8043a1c:	d10a      	bne.n	8043a34 <HAL_ADC_ConfigChannel+0x378>
 8043a1e:	687b      	ldr	r3, [r7, #4]
 8043a20:	681b      	ldr	r3, [r3, #0]
 8043a22:	2103      	movs	r1, #3
 8043a24:	4618      	mov	r0, r3
 8043a26:	f7ff f8e5 	bl	8042bf4 <LL_ADC_GetOffsetChannel>
 8043a2a:	4603      	mov	r3, r0
 8043a2c:	0e9b      	lsrs	r3, r3, #26
 8043a2e:	f003 021f 	and.w	r2, r3, #31
 8043a32:	e017      	b.n	8043a64 <HAL_ADC_ConfigChannel+0x3a8>
 8043a34:	687b      	ldr	r3, [r7, #4]
 8043a36:	681b      	ldr	r3, [r3, #0]
 8043a38:	2103      	movs	r1, #3
 8043a3a:	4618      	mov	r0, r3
 8043a3c:	f7ff f8da 	bl	8042bf4 <LL_ADC_GetOffsetChannel>
 8043a40:	4603      	mov	r3, r0
 8043a42:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8043a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8043a46:	fa93 f3a3 	rbit	r3, r3
 8043a4a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8043a4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8043a4e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8043a50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8043a52:	2b00      	cmp	r3, #0
 8043a54:	d101      	bne.n	8043a5a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8043a56:	2320      	movs	r3, #32
 8043a58:	e003      	b.n	8043a62 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8043a5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8043a5c:	fab3 f383 	clz	r3, r3
 8043a60:	b2db      	uxtb	r3, r3
 8043a62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8043a64:	683b      	ldr	r3, [r7, #0]
 8043a66:	681b      	ldr	r3, [r3, #0]
 8043a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043a6c:	2b00      	cmp	r3, #0
 8043a6e:	d105      	bne.n	8043a7c <HAL_ADC_ConfigChannel+0x3c0>
 8043a70:	683b      	ldr	r3, [r7, #0]
 8043a72:	681b      	ldr	r3, [r3, #0]
 8043a74:	0e9b      	lsrs	r3, r3, #26
 8043a76:	f003 031f 	and.w	r3, r3, #31
 8043a7a:	e011      	b.n	8043aa0 <HAL_ADC_ConfigChannel+0x3e4>
 8043a7c:	683b      	ldr	r3, [r7, #0]
 8043a7e:	681b      	ldr	r3, [r3, #0]
 8043a80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8043a82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8043a84:	fa93 f3a3 	rbit	r3, r3
 8043a88:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8043a8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8043a8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8043a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8043a90:	2b00      	cmp	r3, #0
 8043a92:	d101      	bne.n	8043a98 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8043a94:	2320      	movs	r3, #32
 8043a96:	e003      	b.n	8043aa0 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8043a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8043a9a:	fab3 f383 	clz	r3, r3
 8043a9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8043aa0:	429a      	cmp	r2, r3
 8043aa2:	d106      	bne.n	8043ab2 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8043aa4:	687b      	ldr	r3, [r7, #4]
 8043aa6:	681b      	ldr	r3, [r3, #0]
 8043aa8:	2200      	movs	r2, #0
 8043aaa:	2103      	movs	r1, #3
 8043aac:	4618      	mov	r0, r3
 8043aae:	f7ff f8b7 	bl	8042c20 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8043ab2:	687b      	ldr	r3, [r7, #4]
 8043ab4:	681b      	ldr	r3, [r3, #0]
 8043ab6:	4618      	mov	r0, r3
 8043ab8:	f7ff f9ec 	bl	8042e94 <LL_ADC_IsEnabled>
 8043abc:	4603      	mov	r3, r0
 8043abe:	2b00      	cmp	r3, #0
 8043ac0:	f040 81c8 	bne.w	8043e54 <HAL_ADC_ConfigChannel+0x798>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8043ac4:	687b      	ldr	r3, [r7, #4]
 8043ac6:	6818      	ldr	r0, [r3, #0]
 8043ac8:	683b      	ldr	r3, [r7, #0]
 8043aca:	6819      	ldr	r1, [r3, #0]
 8043acc:	683b      	ldr	r3, [r7, #0]
 8043ace:	68db      	ldr	r3, [r3, #12]
 8043ad0:	461a      	mov	r2, r3
 8043ad2:	f7ff f951 	bl	8042d78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8043ad6:	683b      	ldr	r3, [r7, #0]
 8043ad8:	68db      	ldr	r3, [r3, #12]
 8043ada:	4a8f      	ldr	r2, [pc, #572]	; (8043d18 <HAL_ADC_ConfigChannel+0x65c>)
 8043adc:	4293      	cmp	r3, r2
 8043ade:	f040 8131 	bne.w	8043d44 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8043ae2:	687b      	ldr	r3, [r7, #4]
 8043ae4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8043ae6:	683b      	ldr	r3, [r7, #0]
 8043ae8:	681b      	ldr	r3, [r3, #0]
 8043aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043aee:	2b00      	cmp	r3, #0
 8043af0:	d10b      	bne.n	8043b0a <HAL_ADC_ConfigChannel+0x44e>
 8043af2:	683b      	ldr	r3, [r7, #0]
 8043af4:	681b      	ldr	r3, [r3, #0]
 8043af6:	0e9b      	lsrs	r3, r3, #26
 8043af8:	3301      	adds	r3, #1
 8043afa:	f003 031f 	and.w	r3, r3, #31
 8043afe:	2b09      	cmp	r3, #9
 8043b00:	bf94      	ite	ls
 8043b02:	2301      	movls	r3, #1
 8043b04:	2300      	movhi	r3, #0
 8043b06:	b2db      	uxtb	r3, r3
 8043b08:	e019      	b.n	8043b3e <HAL_ADC_ConfigChannel+0x482>
 8043b0a:	683b      	ldr	r3, [r7, #0]
 8043b0c:	681b      	ldr	r3, [r3, #0]
 8043b0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8043b10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8043b12:	fa93 f3a3 	rbit	r3, r3
 8043b16:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8043b18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8043b1a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8043b1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8043b1e:	2b00      	cmp	r3, #0
 8043b20:	d101      	bne.n	8043b26 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8043b22:	2320      	movs	r3, #32
 8043b24:	e003      	b.n	8043b2e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8043b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8043b28:	fab3 f383 	clz	r3, r3
 8043b2c:	b2db      	uxtb	r3, r3
 8043b2e:	3301      	adds	r3, #1
 8043b30:	f003 031f 	and.w	r3, r3, #31
 8043b34:	2b09      	cmp	r3, #9
 8043b36:	bf94      	ite	ls
 8043b38:	2301      	movls	r3, #1
 8043b3a:	2300      	movhi	r3, #0
 8043b3c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8043b3e:	2b00      	cmp	r3, #0
 8043b40:	d079      	beq.n	8043c36 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8043b42:	683b      	ldr	r3, [r7, #0]
 8043b44:	681b      	ldr	r3, [r3, #0]
 8043b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043b4a:	2b00      	cmp	r3, #0
 8043b4c:	d107      	bne.n	8043b5e <HAL_ADC_ConfigChannel+0x4a2>
 8043b4e:	683b      	ldr	r3, [r7, #0]
 8043b50:	681b      	ldr	r3, [r3, #0]
 8043b52:	0e9b      	lsrs	r3, r3, #26
 8043b54:	3301      	adds	r3, #1
 8043b56:	069b      	lsls	r3, r3, #26
 8043b58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8043b5c:	e015      	b.n	8043b8a <HAL_ADC_ConfigChannel+0x4ce>
 8043b5e:	683b      	ldr	r3, [r7, #0]
 8043b60:	681b      	ldr	r3, [r3, #0]
 8043b62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8043b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8043b66:	fa93 f3a3 	rbit	r3, r3
 8043b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8043b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8043b6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8043b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8043b72:	2b00      	cmp	r3, #0
 8043b74:	d101      	bne.n	8043b7a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8043b76:	2320      	movs	r3, #32
 8043b78:	e003      	b.n	8043b82 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8043b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8043b7c:	fab3 f383 	clz	r3, r3
 8043b80:	b2db      	uxtb	r3, r3
 8043b82:	3301      	adds	r3, #1
 8043b84:	069b      	lsls	r3, r3, #26
 8043b86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8043b8a:	683b      	ldr	r3, [r7, #0]
 8043b8c:	681b      	ldr	r3, [r3, #0]
 8043b8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043b92:	2b00      	cmp	r3, #0
 8043b94:	d109      	bne.n	8043baa <HAL_ADC_ConfigChannel+0x4ee>
 8043b96:	683b      	ldr	r3, [r7, #0]
 8043b98:	681b      	ldr	r3, [r3, #0]
 8043b9a:	0e9b      	lsrs	r3, r3, #26
 8043b9c:	3301      	adds	r3, #1
 8043b9e:	f003 031f 	and.w	r3, r3, #31
 8043ba2:	2101      	movs	r1, #1
 8043ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8043ba8:	e017      	b.n	8043bda <HAL_ADC_ConfigChannel+0x51e>
 8043baa:	683b      	ldr	r3, [r7, #0]
 8043bac:	681b      	ldr	r3, [r3, #0]
 8043bae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8043bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8043bb2:	fa93 f3a3 	rbit	r3, r3
 8043bb6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8043bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8043bba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8043bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8043bbe:	2b00      	cmp	r3, #0
 8043bc0:	d101      	bne.n	8043bc6 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8043bc2:	2320      	movs	r3, #32
 8043bc4:	e003      	b.n	8043bce <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8043bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8043bc8:	fab3 f383 	clz	r3, r3
 8043bcc:	b2db      	uxtb	r3, r3
 8043bce:	3301      	adds	r3, #1
 8043bd0:	f003 031f 	and.w	r3, r3, #31
 8043bd4:	2101      	movs	r1, #1
 8043bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8043bda:	ea42 0103 	orr.w	r1, r2, r3
 8043bde:	683b      	ldr	r3, [r7, #0]
 8043be0:	681b      	ldr	r3, [r3, #0]
 8043be2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043be6:	2b00      	cmp	r3, #0
 8043be8:	d10a      	bne.n	8043c00 <HAL_ADC_ConfigChannel+0x544>
 8043bea:	683b      	ldr	r3, [r7, #0]
 8043bec:	681b      	ldr	r3, [r3, #0]
 8043bee:	0e9b      	lsrs	r3, r3, #26
 8043bf0:	3301      	adds	r3, #1
 8043bf2:	f003 021f 	and.w	r2, r3, #31
 8043bf6:	4613      	mov	r3, r2
 8043bf8:	005b      	lsls	r3, r3, #1
 8043bfa:	4413      	add	r3, r2
 8043bfc:	051b      	lsls	r3, r3, #20
 8043bfe:	e018      	b.n	8043c32 <HAL_ADC_ConfigChannel+0x576>
 8043c00:	683b      	ldr	r3, [r7, #0]
 8043c02:	681b      	ldr	r3, [r3, #0]
 8043c04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8043c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8043c08:	fa93 f3a3 	rbit	r3, r3
 8043c0c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8043c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8043c10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8043c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8043c14:	2b00      	cmp	r3, #0
 8043c16:	d101      	bne.n	8043c1c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8043c18:	2320      	movs	r3, #32
 8043c1a:	e003      	b.n	8043c24 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8043c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8043c1e:	fab3 f383 	clz	r3, r3
 8043c22:	b2db      	uxtb	r3, r3
 8043c24:	3301      	adds	r3, #1
 8043c26:	f003 021f 	and.w	r2, r3, #31
 8043c2a:	4613      	mov	r3, r2
 8043c2c:	005b      	lsls	r3, r3, #1
 8043c2e:	4413      	add	r3, r2
 8043c30:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8043c32:	430b      	orrs	r3, r1
 8043c34:	e081      	b.n	8043d3a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8043c36:	683b      	ldr	r3, [r7, #0]
 8043c38:	681b      	ldr	r3, [r3, #0]
 8043c3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043c3e:	2b00      	cmp	r3, #0
 8043c40:	d107      	bne.n	8043c52 <HAL_ADC_ConfigChannel+0x596>
 8043c42:	683b      	ldr	r3, [r7, #0]
 8043c44:	681b      	ldr	r3, [r3, #0]
 8043c46:	0e9b      	lsrs	r3, r3, #26
 8043c48:	3301      	adds	r3, #1
 8043c4a:	069b      	lsls	r3, r3, #26
 8043c4c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8043c50:	e015      	b.n	8043c7e <HAL_ADC_ConfigChannel+0x5c2>
 8043c52:	683b      	ldr	r3, [r7, #0]
 8043c54:	681b      	ldr	r3, [r3, #0]
 8043c56:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8043c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8043c5a:	fa93 f3a3 	rbit	r3, r3
 8043c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8043c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043c62:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8043c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8043c66:	2b00      	cmp	r3, #0
 8043c68:	d101      	bne.n	8043c6e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8043c6a:	2320      	movs	r3, #32
 8043c6c:	e003      	b.n	8043c76 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8043c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8043c70:	fab3 f383 	clz	r3, r3
 8043c74:	b2db      	uxtb	r3, r3
 8043c76:	3301      	adds	r3, #1
 8043c78:	069b      	lsls	r3, r3, #26
 8043c7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8043c7e:	683b      	ldr	r3, [r7, #0]
 8043c80:	681b      	ldr	r3, [r3, #0]
 8043c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043c86:	2b00      	cmp	r3, #0
 8043c88:	d109      	bne.n	8043c9e <HAL_ADC_ConfigChannel+0x5e2>
 8043c8a:	683b      	ldr	r3, [r7, #0]
 8043c8c:	681b      	ldr	r3, [r3, #0]
 8043c8e:	0e9b      	lsrs	r3, r3, #26
 8043c90:	3301      	adds	r3, #1
 8043c92:	f003 031f 	and.w	r3, r3, #31
 8043c96:	2101      	movs	r1, #1
 8043c98:	fa01 f303 	lsl.w	r3, r1, r3
 8043c9c:	e017      	b.n	8043cce <HAL_ADC_ConfigChannel+0x612>
 8043c9e:	683b      	ldr	r3, [r7, #0]
 8043ca0:	681b      	ldr	r3, [r3, #0]
 8043ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8043ca4:	6a3b      	ldr	r3, [r7, #32]
 8043ca6:	fa93 f3a3 	rbit	r3, r3
 8043caa:	61fb      	str	r3, [r7, #28]
  return result;
 8043cac:	69fb      	ldr	r3, [r7, #28]
 8043cae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8043cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043cb2:	2b00      	cmp	r3, #0
 8043cb4:	d101      	bne.n	8043cba <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8043cb6:	2320      	movs	r3, #32
 8043cb8:	e003      	b.n	8043cc2 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8043cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043cbc:	fab3 f383 	clz	r3, r3
 8043cc0:	b2db      	uxtb	r3, r3
 8043cc2:	3301      	adds	r3, #1
 8043cc4:	f003 031f 	and.w	r3, r3, #31
 8043cc8:	2101      	movs	r1, #1
 8043cca:	fa01 f303 	lsl.w	r3, r1, r3
 8043cce:	ea42 0103 	orr.w	r1, r2, r3
 8043cd2:	683b      	ldr	r3, [r7, #0]
 8043cd4:	681b      	ldr	r3, [r3, #0]
 8043cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8043cda:	2b00      	cmp	r3, #0
 8043cdc:	d10d      	bne.n	8043cfa <HAL_ADC_ConfigChannel+0x63e>
 8043cde:	683b      	ldr	r3, [r7, #0]
 8043ce0:	681b      	ldr	r3, [r3, #0]
 8043ce2:	0e9b      	lsrs	r3, r3, #26
 8043ce4:	3301      	adds	r3, #1
 8043ce6:	f003 021f 	and.w	r2, r3, #31
 8043cea:	4613      	mov	r3, r2
 8043cec:	005b      	lsls	r3, r3, #1
 8043cee:	4413      	add	r3, r2
 8043cf0:	3b1e      	subs	r3, #30
 8043cf2:	051b      	lsls	r3, r3, #20
 8043cf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8043cf8:	e01e      	b.n	8043d38 <HAL_ADC_ConfigChannel+0x67c>
 8043cfa:	683b      	ldr	r3, [r7, #0]
 8043cfc:	681b      	ldr	r3, [r3, #0]
 8043cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8043d00:	697b      	ldr	r3, [r7, #20]
 8043d02:	fa93 f3a3 	rbit	r3, r3
 8043d06:	613b      	str	r3, [r7, #16]
  return result;
 8043d08:	693b      	ldr	r3, [r7, #16]
 8043d0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8043d0c:	69bb      	ldr	r3, [r7, #24]
 8043d0e:	2b00      	cmp	r3, #0
 8043d10:	d104      	bne.n	8043d1c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8043d12:	2320      	movs	r3, #32
 8043d14:	e006      	b.n	8043d24 <HAL_ADC_ConfigChannel+0x668>
 8043d16:	bf00      	nop
 8043d18:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8043d1c:	69bb      	ldr	r3, [r7, #24]
 8043d1e:	fab3 f383 	clz	r3, r3
 8043d22:	b2db      	uxtb	r3, r3
 8043d24:	3301      	adds	r3, #1
 8043d26:	f003 021f 	and.w	r2, r3, #31
 8043d2a:	4613      	mov	r3, r2
 8043d2c:	005b      	lsls	r3, r3, #1
 8043d2e:	4413      	add	r3, r2
 8043d30:	3b1e      	subs	r3, #30
 8043d32:	051b      	lsls	r3, r3, #20
 8043d34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8043d38:	430b      	orrs	r3, r1
 8043d3a:	683a      	ldr	r2, [r7, #0]
 8043d3c:	6892      	ldr	r2, [r2, #8]
 8043d3e:	4619      	mov	r1, r3
 8043d40:	f7fe ffee 	bl	8042d20 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8043d44:	683b      	ldr	r3, [r7, #0]
 8043d46:	681a      	ldr	r2, [r3, #0]
 8043d48:	4b47      	ldr	r3, [pc, #284]	; (8043e68 <HAL_ADC_ConfigChannel+0x7ac>)
 8043d4a:	4013      	ands	r3, r2
 8043d4c:	2b00      	cmp	r3, #0
 8043d4e:	f000 8081 	beq.w	8043e54 <HAL_ADC_ConfigChannel+0x798>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8043d52:	4846      	ldr	r0, [pc, #280]	; (8043e6c <HAL_ADC_ConfigChannel+0x7b0>)
 8043d54:	f7fe ff1c 	bl	8042b90 <LL_ADC_GetCommonPathInternalCh>
 8043d58:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8043d5c:	4844      	ldr	r0, [pc, #272]	; (8043e70 <HAL_ADC_ConfigChannel+0x7b4>)
 8043d5e:	f7ff f899 	bl	8042e94 <LL_ADC_IsEnabled>
 8043d62:	4604      	mov	r4, r0
 8043d64:	4843      	ldr	r0, [pc, #268]	; (8043e74 <HAL_ADC_ConfigChannel+0x7b8>)
 8043d66:	f7ff f895 	bl	8042e94 <LL_ADC_IsEnabled>
 8043d6a:	4603      	mov	r3, r0
 8043d6c:	4323      	orrs	r3, r4
 8043d6e:	2b00      	cmp	r3, #0
 8043d70:	d15d      	bne.n	8043e2e <HAL_ADC_ConfigChannel+0x772>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8043d72:	683b      	ldr	r3, [r7, #0]
 8043d74:	681b      	ldr	r3, [r3, #0]
 8043d76:	4a40      	ldr	r2, [pc, #256]	; (8043e78 <HAL_ADC_ConfigChannel+0x7bc>)
 8043d78:	4293      	cmp	r3, r2
 8043d7a:	d126      	bne.n	8043dca <HAL_ADC_ConfigChannel+0x70e>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8043d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8043d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8043d84:	2b00      	cmp	r3, #0
 8043d86:	d120      	bne.n	8043dca <HAL_ADC_ConfigChannel+0x70e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8043d88:	687b      	ldr	r3, [r7, #4]
 8043d8a:	681b      	ldr	r3, [r3, #0]
 8043d8c:	4a38      	ldr	r2, [pc, #224]	; (8043e70 <HAL_ADC_ConfigChannel+0x7b4>)
 8043d8e:	4293      	cmp	r3, r2
 8043d90:	d160      	bne.n	8043e54 <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8043d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8043d96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8043d9a:	4619      	mov	r1, r3
 8043d9c:	4833      	ldr	r0, [pc, #204]	; (8043e6c <HAL_ADC_ConfigChannel+0x7b0>)
 8043d9e:	f7fe fee4 	bl	8042b6a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8043da2:	4b36      	ldr	r3, [pc, #216]	; (8043e7c <HAL_ADC_ConfigChannel+0x7c0>)
 8043da4:	681b      	ldr	r3, [r3, #0]
 8043da6:	099b      	lsrs	r3, r3, #6
 8043da8:	4a35      	ldr	r2, [pc, #212]	; (8043e80 <HAL_ADC_ConfigChannel+0x7c4>)
 8043daa:	fba2 2303 	umull	r2, r3, r2, r3
 8043dae:	099a      	lsrs	r2, r3, #6
 8043db0:	4613      	mov	r3, r2
 8043db2:	005b      	lsls	r3, r3, #1
 8043db4:	4413      	add	r3, r2
 8043db6:	009b      	lsls	r3, r3, #2
 8043db8:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8043dba:	e002      	b.n	8043dc2 <HAL_ADC_ConfigChannel+0x706>
              {
                wait_loop_index--;
 8043dbc:	68fb      	ldr	r3, [r7, #12]
 8043dbe:	3b01      	subs	r3, #1
 8043dc0:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8043dc2:	68fb      	ldr	r3, [r7, #12]
 8043dc4:	2b00      	cmp	r3, #0
 8043dc6:	d1f9      	bne.n	8043dbc <HAL_ADC_ConfigChannel+0x700>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8043dc8:	e044      	b.n	8043e54 <HAL_ADC_ConfigChannel+0x798>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8043dca:	683b      	ldr	r3, [r7, #0]
 8043dcc:	681b      	ldr	r3, [r3, #0]
 8043dce:	4a2d      	ldr	r2, [pc, #180]	; (8043e84 <HAL_ADC_ConfigChannel+0x7c8>)
 8043dd0:	4293      	cmp	r3, r2
 8043dd2:	d113      	bne.n	8043dfc <HAL_ADC_ConfigChannel+0x740>
 8043dd4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8043dd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8043ddc:	2b00      	cmp	r3, #0
 8043dde:	d10d      	bne.n	8043dfc <HAL_ADC_ConfigChannel+0x740>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8043de0:	687b      	ldr	r3, [r7, #4]
 8043de2:	681b      	ldr	r3, [r3, #0]
 8043de4:	4a22      	ldr	r2, [pc, #136]	; (8043e70 <HAL_ADC_ConfigChannel+0x7b4>)
 8043de6:	4293      	cmp	r3, r2
 8043de8:	d134      	bne.n	8043e54 <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8043dea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8043dee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8043df2:	4619      	mov	r1, r3
 8043df4:	481d      	ldr	r0, [pc, #116]	; (8043e6c <HAL_ADC_ConfigChannel+0x7b0>)
 8043df6:	f7fe feb8 	bl	8042b6a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8043dfa:	e02b      	b.n	8043e54 <HAL_ADC_ConfigChannel+0x798>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8043dfc:	683b      	ldr	r3, [r7, #0]
 8043dfe:	681b      	ldr	r3, [r3, #0]
 8043e00:	4a21      	ldr	r2, [pc, #132]	; (8043e88 <HAL_ADC_ConfigChannel+0x7cc>)
 8043e02:	4293      	cmp	r3, r2
 8043e04:	d126      	bne.n	8043e54 <HAL_ADC_ConfigChannel+0x798>
 8043e06:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8043e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8043e0e:	2b00      	cmp	r3, #0
 8043e10:	d120      	bne.n	8043e54 <HAL_ADC_ConfigChannel+0x798>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8043e12:	687b      	ldr	r3, [r7, #4]
 8043e14:	681b      	ldr	r3, [r3, #0]
 8043e16:	4a16      	ldr	r2, [pc, #88]	; (8043e70 <HAL_ADC_ConfigChannel+0x7b4>)
 8043e18:	4293      	cmp	r3, r2
 8043e1a:	d11b      	bne.n	8043e54 <HAL_ADC_ConfigChannel+0x798>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8043e1c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8043e20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8043e24:	4619      	mov	r1, r3
 8043e26:	4811      	ldr	r0, [pc, #68]	; (8043e6c <HAL_ADC_ConfigChannel+0x7b0>)
 8043e28:	f7fe fe9f 	bl	8042b6a <LL_ADC_SetCommonPathInternalCh>
 8043e2c:	e012      	b.n	8043e54 <HAL_ADC_ConfigChannel+0x798>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8043e2e:	687b      	ldr	r3, [r7, #4]
 8043e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043e32:	f043 0220 	orr.w	r2, r3, #32
 8043e36:	687b      	ldr	r3, [r7, #4]
 8043e38:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8043e3a:	2301      	movs	r3, #1
 8043e3c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8043e40:	e008      	b.n	8043e54 <HAL_ADC_ConfigChannel+0x798>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8043e42:	687b      	ldr	r3, [r7, #4]
 8043e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043e46:	f043 0220 	orr.w	r2, r3, #32
 8043e4a:	687b      	ldr	r3, [r7, #4]
 8043e4c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8043e4e:	2301      	movs	r3, #1
 8043e50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8043e54:	687b      	ldr	r3, [r7, #4]
 8043e56:	2200      	movs	r2, #0
 8043e58:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8043e5c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8043e60:	4618      	mov	r0, r3
 8043e62:	37dc      	adds	r7, #220	; 0xdc
 8043e64:	46bd      	mov	sp, r7
 8043e66:	bd90      	pop	{r4, r7, pc}
 8043e68:	80080000 	.word	0x80080000
 8043e6c:	42028300 	.word	0x42028300
 8043e70:	42028000 	.word	0x42028000
 8043e74:	42028100 	.word	0x42028100
 8043e78:	c7520000 	.word	0xc7520000
 8043e7c:	20018000 	.word	0x20018000
 8043e80:	053e2d63 	.word	0x053e2d63
 8043e84:	cb840000 	.word	0xcb840000
 8043e88:	80000001 	.word	0x80000001

08043e8c <LL_ADC_IsEnabled>:
{
 8043e8c:	b480      	push	{r7}
 8043e8e:	b083      	sub	sp, #12
 8043e90:	af00      	add	r7, sp, #0
 8043e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8043e94:	687b      	ldr	r3, [r7, #4]
 8043e96:	689b      	ldr	r3, [r3, #8]
 8043e98:	f003 0301 	and.w	r3, r3, #1
 8043e9c:	2b01      	cmp	r3, #1
 8043e9e:	d101      	bne.n	8043ea4 <LL_ADC_IsEnabled+0x18>
 8043ea0:	2301      	movs	r3, #1
 8043ea2:	e000      	b.n	8043ea6 <LL_ADC_IsEnabled+0x1a>
 8043ea4:	2300      	movs	r3, #0
}
 8043ea6:	4618      	mov	r0, r3
 8043ea8:	370c      	adds	r7, #12
 8043eaa:	46bd      	mov	sp, r7
 8043eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043eb0:	4770      	bx	lr

08043eb2 <LL_ADC_REG_IsConversionOngoing>:
{
 8043eb2:	b480      	push	{r7}
 8043eb4:	b083      	sub	sp, #12
 8043eb6:	af00      	add	r7, sp, #0
 8043eb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8043eba:	687b      	ldr	r3, [r7, #4]
 8043ebc:	689b      	ldr	r3, [r3, #8]
 8043ebe:	f003 0304 	and.w	r3, r3, #4
 8043ec2:	2b04      	cmp	r3, #4
 8043ec4:	d101      	bne.n	8043eca <LL_ADC_REG_IsConversionOngoing+0x18>
 8043ec6:	2301      	movs	r3, #1
 8043ec8:	e000      	b.n	8043ecc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8043eca:	2300      	movs	r3, #0
}
 8043ecc:	4618      	mov	r0, r3
 8043ece:	370c      	adds	r7, #12
 8043ed0:	46bd      	mov	sp, r7
 8043ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043ed6:	4770      	bx	lr

08043ed8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8043ed8:	b480      	push	{r7}
 8043eda:	b083      	sub	sp, #12
 8043edc:	af00      	add	r7, sp, #0
 8043ede:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8043ee0:	bf00      	nop
 8043ee2:	370c      	adds	r7, #12
 8043ee4:	46bd      	mov	sp, r7
 8043ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043eea:	4770      	bx	lr

08043eec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8043eec:	b480      	push	{r7}
 8043eee:	b083      	sub	sp, #12
 8043ef0:	af00      	add	r7, sp, #0
 8043ef2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8043ef4:	bf00      	nop
 8043ef6:	370c      	adds	r7, #12
 8043ef8:	46bd      	mov	sp, r7
 8043efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043efe:	4770      	bx	lr

08043f00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8043f00:	b480      	push	{r7}
 8043f02:	b083      	sub	sp, #12
 8043f04:	af00      	add	r7, sp, #0
 8043f06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8043f08:	bf00      	nop
 8043f0a:	370c      	adds	r7, #12
 8043f0c:	46bd      	mov	sp, r7
 8043f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f12:	4770      	bx	lr

08043f14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8043f14:	b480      	push	{r7}
 8043f16:	b083      	sub	sp, #12
 8043f18:	af00      	add	r7, sp, #0
 8043f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8043f1c:	bf00      	nop
 8043f1e:	370c      	adds	r7, #12
 8043f20:	46bd      	mov	sp, r7
 8043f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f26:	4770      	bx	lr

08043f28 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8043f28:	b480      	push	{r7}
 8043f2a:	b083      	sub	sp, #12
 8043f2c:	af00      	add	r7, sp, #0
 8043f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8043f30:	bf00      	nop
 8043f32:	370c      	adds	r7, #12
 8043f34:	46bd      	mov	sp, r7
 8043f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043f3a:	4770      	bx	lr

08043f3c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8043f3c:	b590      	push	{r4, r7, lr}
 8043f3e:	b0ab      	sub	sp, #172	; 0xac
 8043f40:	af00      	add	r7, sp, #0
 8043f42:	6078      	str	r0, [r7, #4]
 8043f44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8043f46:	2300      	movs	r3, #0
 8043f48:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8043f4c:	687b      	ldr	r3, [r7, #4]
 8043f4e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8043f52:	2b01      	cmp	r3, #1
 8043f54:	d101      	bne.n	8043f5a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8043f56:	2302      	movs	r3, #2
 8043f58:	e090      	b.n	804407c <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8043f5a:	687b      	ldr	r3, [r7, #4]
 8043f5c:	2201      	movs	r2, #1
 8043f5e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8043f62:	687b      	ldr	r3, [r7, #4]
 8043f64:	681b      	ldr	r3, [r3, #0]
 8043f66:	4a47      	ldr	r2, [pc, #284]	; (8044084 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8043f68:	4293      	cmp	r3, r2
 8043f6a:	d102      	bne.n	8043f72 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8043f6c:	4b46      	ldr	r3, [pc, #280]	; (8044088 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8043f6e:	60bb      	str	r3, [r7, #8]
 8043f70:	e001      	b.n	8043f76 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8043f72:	2300      	movs	r3, #0
 8043f74:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8043f76:	68bb      	ldr	r3, [r7, #8]
 8043f78:	2b00      	cmp	r3, #0
 8043f7a:	d10b      	bne.n	8043f94 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8043f7c:	687b      	ldr	r3, [r7, #4]
 8043f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043f80:	f043 0220 	orr.w	r2, r3, #32
 8043f84:	687b      	ldr	r3, [r7, #4]
 8043f86:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8043f88:	687b      	ldr	r3, [r7, #4]
 8043f8a:	2200      	movs	r2, #0
 8043f8c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8043f90:	2301      	movs	r3, #1
 8043f92:	e073      	b.n	804407c <HAL_ADCEx_MultiModeConfigChannel+0x140>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8043f94:	68bb      	ldr	r3, [r7, #8]
 8043f96:	4618      	mov	r0, r3
 8043f98:	f7ff ff8b 	bl	8043eb2 <LL_ADC_REG_IsConversionOngoing>
 8043f9c:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8043fa0:	687b      	ldr	r3, [r7, #4]
 8043fa2:	681b      	ldr	r3, [r3, #0]
 8043fa4:	4618      	mov	r0, r3
 8043fa6:	f7ff ff84 	bl	8043eb2 <LL_ADC_REG_IsConversionOngoing>
 8043faa:	4603      	mov	r3, r0
 8043fac:	2b00      	cmp	r3, #0
 8043fae:	d154      	bne.n	804405a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8043fb0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8043fb4:	2b00      	cmp	r3, #0
 8043fb6:	d150      	bne.n	804405a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8043fb8:	4b34      	ldr	r3, [pc, #208]	; (804408c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8043fba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8043fbe:	683b      	ldr	r3, [r7, #0]
 8043fc0:	681b      	ldr	r3, [r3, #0]
 8043fc2:	2b00      	cmp	r3, #0
 8043fc4:	d02b      	beq.n	804401e <HAL_ADCEx_MultiModeConfigChannel+0xe2>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8043fc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8043fca:	689b      	ldr	r3, [r3, #8]
 8043fcc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8043fd0:	683b      	ldr	r3, [r7, #0]
 8043fd2:	6859      	ldr	r1, [r3, #4]
 8043fd4:	687b      	ldr	r3, [r7, #4]
 8043fd6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8043fda:	035b      	lsls	r3, r3, #13
 8043fdc:	430b      	orrs	r3, r1
 8043fde:	431a      	orrs	r2, r3
 8043fe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8043fe4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8043fe6:	4827      	ldr	r0, [pc, #156]	; (8044084 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8043fe8:	f7ff ff50 	bl	8043e8c <LL_ADC_IsEnabled>
 8043fec:	4604      	mov	r4, r0
 8043fee:	4826      	ldr	r0, [pc, #152]	; (8044088 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8043ff0:	f7ff ff4c 	bl	8043e8c <LL_ADC_IsEnabled>
 8043ff4:	4603      	mov	r3, r0
 8043ff6:	4323      	orrs	r3, r4
 8043ff8:	2b00      	cmp	r3, #0
 8043ffa:	d138      	bne.n	804406e <HAL_ADCEx_MultiModeConfigChannel+0x132>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8043ffc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8044000:	689b      	ldr	r3, [r3, #8]
 8044002:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8044006:	f023 030f 	bic.w	r3, r3, #15
 804400a:	683a      	ldr	r2, [r7, #0]
 804400c:	6811      	ldr	r1, [r2, #0]
 804400e:	683a      	ldr	r2, [r7, #0]
 8044010:	6892      	ldr	r2, [r2, #8]
 8044012:	430a      	orrs	r2, r1
 8044014:	431a      	orrs	r2, r3
 8044016:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 804401a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 804401c:	e027      	b.n	804406e <HAL_ADCEx_MultiModeConfigChannel+0x132>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 804401e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8044022:	689b      	ldr	r3, [r3, #8]
 8044024:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8044028:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 804402c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 804402e:	4815      	ldr	r0, [pc, #84]	; (8044084 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8044030:	f7ff ff2c 	bl	8043e8c <LL_ADC_IsEnabled>
 8044034:	4604      	mov	r4, r0
 8044036:	4814      	ldr	r0, [pc, #80]	; (8044088 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8044038:	f7ff ff28 	bl	8043e8c <LL_ADC_IsEnabled>
 804403c:	4603      	mov	r3, r0
 804403e:	4323      	orrs	r3, r4
 8044040:	2b00      	cmp	r3, #0
 8044042:	d114      	bne.n	804406e <HAL_ADCEx_MultiModeConfigChannel+0x132>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8044044:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8044048:	689b      	ldr	r3, [r3, #8]
 804404a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 804404e:	f023 030f 	bic.w	r3, r3, #15
 8044052:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8044056:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8044058:	e009      	b.n	804406e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 804405a:	687b      	ldr	r3, [r7, #4]
 804405c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804405e:	f043 0220 	orr.w	r2, r3, #32
 8044062:	687b      	ldr	r3, [r7, #4]
 8044064:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8044066:	2301      	movs	r3, #1
 8044068:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 804406c:	e000      	b.n	8044070 <HAL_ADCEx_MultiModeConfigChannel+0x134>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 804406e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8044070:	687b      	ldr	r3, [r7, #4]
 8044072:	2200      	movs	r2, #0
 8044074:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8044078:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
}
 804407c:	4618      	mov	r0, r3
 804407e:	37ac      	adds	r7, #172	; 0xac
 8044080:	46bd      	mov	sp, r7
 8044082:	bd90      	pop	{r4, r7, pc}
 8044084:	42028000 	.word	0x42028000
 8044088:	42028100 	.word	0x42028100
 804408c:	42028300 	.word	0x42028300

08044090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8044090:	b480      	push	{r7}
 8044092:	b085      	sub	sp, #20
 8044094:	af00      	add	r7, sp, #0
 8044096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8044098:	687b      	ldr	r3, [r7, #4]
 804409a:	f003 0307 	and.w	r3, r3, #7
 804409e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80440a0:	4b0c      	ldr	r3, [pc, #48]	; (80440d4 <__NVIC_SetPriorityGrouping+0x44>)
 80440a2:	68db      	ldr	r3, [r3, #12]
 80440a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80440a6:	68ba      	ldr	r2, [r7, #8]
 80440a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80440ac:	4013      	ands	r3, r2
 80440ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80440b0:	68fb      	ldr	r3, [r7, #12]
 80440b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80440b4:	68bb      	ldr	r3, [r7, #8]
 80440b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80440b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80440bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80440c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80440c2:	4a04      	ldr	r2, [pc, #16]	; (80440d4 <__NVIC_SetPriorityGrouping+0x44>)
 80440c4:	68bb      	ldr	r3, [r7, #8]
 80440c6:	60d3      	str	r3, [r2, #12]
}
 80440c8:	bf00      	nop
 80440ca:	3714      	adds	r7, #20
 80440cc:	46bd      	mov	sp, r7
 80440ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440d2:	4770      	bx	lr
 80440d4:	e000ed00 	.word	0xe000ed00

080440d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80440d8:	b480      	push	{r7}
 80440da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80440dc:	4b04      	ldr	r3, [pc, #16]	; (80440f0 <__NVIC_GetPriorityGrouping+0x18>)
 80440de:	68db      	ldr	r3, [r3, #12]
 80440e0:	0a1b      	lsrs	r3, r3, #8
 80440e2:	f003 0307 	and.w	r3, r3, #7
}
 80440e6:	4618      	mov	r0, r3
 80440e8:	46bd      	mov	sp, r7
 80440ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440ee:	4770      	bx	lr
 80440f0:	e000ed00 	.word	0xe000ed00

080440f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80440f4:	b480      	push	{r7}
 80440f6:	b083      	sub	sp, #12
 80440f8:	af00      	add	r7, sp, #0
 80440fa:	4603      	mov	r3, r0
 80440fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80440fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044102:	2b00      	cmp	r3, #0
 8044104:	db0b      	blt.n	804411e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8044106:	79fb      	ldrb	r3, [r7, #7]
 8044108:	f003 021f 	and.w	r2, r3, #31
 804410c:	4907      	ldr	r1, [pc, #28]	; (804412c <__NVIC_EnableIRQ+0x38>)
 804410e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044112:	095b      	lsrs	r3, r3, #5
 8044114:	2001      	movs	r0, #1
 8044116:	fa00 f202 	lsl.w	r2, r0, r2
 804411a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 804411e:	bf00      	nop
 8044120:	370c      	adds	r7, #12
 8044122:	46bd      	mov	sp, r7
 8044124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044128:	4770      	bx	lr
 804412a:	bf00      	nop
 804412c:	e000e100 	.word	0xe000e100

08044130 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8044130:	b480      	push	{r7}
 8044132:	b083      	sub	sp, #12
 8044134:	af00      	add	r7, sp, #0
 8044136:	4603      	mov	r3, r0
 8044138:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 804413a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804413e:	2b00      	cmp	r3, #0
 8044140:	db12      	blt.n	8044168 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8044142:	79fb      	ldrb	r3, [r7, #7]
 8044144:	f003 021f 	and.w	r2, r3, #31
 8044148:	490a      	ldr	r1, [pc, #40]	; (8044174 <__NVIC_DisableIRQ+0x44>)
 804414a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804414e:	095b      	lsrs	r3, r3, #5
 8044150:	2001      	movs	r0, #1
 8044152:	fa00 f202 	lsl.w	r2, r0, r2
 8044156:	3320      	adds	r3, #32
 8044158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 804415c:	f3bf 8f4f 	dsb	sy
}
 8044160:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8044162:	f3bf 8f6f 	isb	sy
}
 8044166:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8044168:	bf00      	nop
 804416a:	370c      	adds	r7, #12
 804416c:	46bd      	mov	sp, r7
 804416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044172:	4770      	bx	lr
 8044174:	e000e100 	.word	0xe000e100

08044178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8044178:	b480      	push	{r7}
 804417a:	b083      	sub	sp, #12
 804417c:	af00      	add	r7, sp, #0
 804417e:	4603      	mov	r3, r0
 8044180:	6039      	str	r1, [r7, #0]
 8044182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8044184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044188:	2b00      	cmp	r3, #0
 804418a:	db0a      	blt.n	80441a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804418c:	683b      	ldr	r3, [r7, #0]
 804418e:	b2da      	uxtb	r2, r3
 8044190:	490c      	ldr	r1, [pc, #48]	; (80441c4 <__NVIC_SetPriority+0x4c>)
 8044192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8044196:	0152      	lsls	r2, r2, #5
 8044198:	b2d2      	uxtb	r2, r2
 804419a:	440b      	add	r3, r1
 804419c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80441a0:	e00a      	b.n	80441b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80441a2:	683b      	ldr	r3, [r7, #0]
 80441a4:	b2da      	uxtb	r2, r3
 80441a6:	4908      	ldr	r1, [pc, #32]	; (80441c8 <__NVIC_SetPriority+0x50>)
 80441a8:	79fb      	ldrb	r3, [r7, #7]
 80441aa:	f003 030f 	and.w	r3, r3, #15
 80441ae:	3b04      	subs	r3, #4
 80441b0:	0152      	lsls	r2, r2, #5
 80441b2:	b2d2      	uxtb	r2, r2
 80441b4:	440b      	add	r3, r1
 80441b6:	761a      	strb	r2, [r3, #24]
}
 80441b8:	bf00      	nop
 80441ba:	370c      	adds	r7, #12
 80441bc:	46bd      	mov	sp, r7
 80441be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80441c2:	4770      	bx	lr
 80441c4:	e000e100 	.word	0xe000e100
 80441c8:	e000ed00 	.word	0xe000ed00

080441cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80441cc:	b480      	push	{r7}
 80441ce:	b089      	sub	sp, #36	; 0x24
 80441d0:	af00      	add	r7, sp, #0
 80441d2:	60f8      	str	r0, [r7, #12]
 80441d4:	60b9      	str	r1, [r7, #8]
 80441d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80441d8:	68fb      	ldr	r3, [r7, #12]
 80441da:	f003 0307 	and.w	r3, r3, #7
 80441de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80441e0:	69fb      	ldr	r3, [r7, #28]
 80441e2:	f1c3 0307 	rsb	r3, r3, #7
 80441e6:	2b03      	cmp	r3, #3
 80441e8:	bf28      	it	cs
 80441ea:	2303      	movcs	r3, #3
 80441ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80441ee:	69fb      	ldr	r3, [r7, #28]
 80441f0:	3303      	adds	r3, #3
 80441f2:	2b06      	cmp	r3, #6
 80441f4:	d902      	bls.n	80441fc <NVIC_EncodePriority+0x30>
 80441f6:	69fb      	ldr	r3, [r7, #28]
 80441f8:	3b04      	subs	r3, #4
 80441fa:	e000      	b.n	80441fe <NVIC_EncodePriority+0x32>
 80441fc:	2300      	movs	r3, #0
 80441fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8044200:	f04f 32ff 	mov.w	r2, #4294967295
 8044204:	69bb      	ldr	r3, [r7, #24]
 8044206:	fa02 f303 	lsl.w	r3, r2, r3
 804420a:	43da      	mvns	r2, r3
 804420c:	68bb      	ldr	r3, [r7, #8]
 804420e:	401a      	ands	r2, r3
 8044210:	697b      	ldr	r3, [r7, #20]
 8044212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8044214:	f04f 31ff 	mov.w	r1, #4294967295
 8044218:	697b      	ldr	r3, [r7, #20]
 804421a:	fa01 f303 	lsl.w	r3, r1, r3
 804421e:	43d9      	mvns	r1, r3
 8044220:	687b      	ldr	r3, [r7, #4]
 8044222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8044224:	4313      	orrs	r3, r2
         );
}
 8044226:	4618      	mov	r0, r3
 8044228:	3724      	adds	r7, #36	; 0x24
 804422a:	46bd      	mov	sp, r7
 804422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044230:	4770      	bx	lr

08044232 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8044232:	b580      	push	{r7, lr}
 8044234:	b082      	sub	sp, #8
 8044236:	af00      	add	r7, sp, #0
 8044238:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 804423a:	6878      	ldr	r0, [r7, #4]
 804423c:	f7ff ff28 	bl	8044090 <__NVIC_SetPriorityGrouping>
}
 8044240:	bf00      	nop
 8044242:	3708      	adds	r7, #8
 8044244:	46bd      	mov	sp, r7
 8044246:	bd80      	pop	{r7, pc}

08044248 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8044248:	b580      	push	{r7, lr}
 804424a:	b086      	sub	sp, #24
 804424c:	af00      	add	r7, sp, #0
 804424e:	4603      	mov	r3, r0
 8044250:	60b9      	str	r1, [r7, #8]
 8044252:	607a      	str	r2, [r7, #4]
 8044254:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8044256:	f7ff ff3f 	bl	80440d8 <__NVIC_GetPriorityGrouping>
 804425a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 804425c:	687a      	ldr	r2, [r7, #4]
 804425e:	68b9      	ldr	r1, [r7, #8]
 8044260:	6978      	ldr	r0, [r7, #20]
 8044262:	f7ff ffb3 	bl	80441cc <NVIC_EncodePriority>
 8044266:	4602      	mov	r2, r0
 8044268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 804426c:	4611      	mov	r1, r2
 804426e:	4618      	mov	r0, r3
 8044270:	f7ff ff82 	bl	8044178 <__NVIC_SetPriority>
}
 8044274:	bf00      	nop
 8044276:	3718      	adds	r7, #24
 8044278:	46bd      	mov	sp, r7
 804427a:	bd80      	pop	{r7, pc}

0804427c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 804427c:	b580      	push	{r7, lr}
 804427e:	b082      	sub	sp, #8
 8044280:	af00      	add	r7, sp, #0
 8044282:	4603      	mov	r3, r0
 8044284:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8044286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 804428a:	4618      	mov	r0, r3
 804428c:	f7ff ff32 	bl	80440f4 <__NVIC_EnableIRQ>
}
 8044290:	bf00      	nop
 8044292:	3708      	adds	r7, #8
 8044294:	46bd      	mov	sp, r7
 8044296:	bd80      	pop	{r7, pc}

08044298 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8044298:	b580      	push	{r7, lr}
 804429a:	b082      	sub	sp, #8
 804429c:	af00      	add	r7, sp, #0
 804429e:	4603      	mov	r3, r0
 80442a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80442a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80442a6:	4618      	mov	r0, r3
 80442a8:	f7ff ff42 	bl	8044130 <__NVIC_DisableIRQ>
}
 80442ac:	bf00      	nop
 80442ae:	3708      	adds	r7, #8
 80442b0:	46bd      	mov	sp, r7
 80442b2:	bd80      	pop	{r7, pc}

080442b4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80442b4:	b580      	push	{r7, lr}
 80442b6:	b082      	sub	sp, #8
 80442b8:	af00      	add	r7, sp, #0
 80442ba:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80442bc:	687b      	ldr	r3, [r7, #4]
 80442be:	2b00      	cmp	r3, #0
 80442c0:	d101      	bne.n	80442c6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80442c2:	2301      	movs	r3, #1
 80442c4:	e054      	b.n	8044370 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80442c6:	687b      	ldr	r3, [r7, #4]
 80442c8:	7f5b      	ldrb	r3, [r3, #29]
 80442ca:	b2db      	uxtb	r3, r3
 80442cc:	2b00      	cmp	r3, #0
 80442ce:	d105      	bne.n	80442dc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80442d0:	687b      	ldr	r3, [r7, #4]
 80442d2:	2200      	movs	r2, #0
 80442d4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80442d6:	6878      	ldr	r0, [r7, #4]
 80442d8:	f7fc fb30 	bl	804093c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80442dc:	687b      	ldr	r3, [r7, #4]
 80442de:	2202      	movs	r2, #2
 80442e0:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80442e2:	687b      	ldr	r3, [r7, #4]
 80442e4:	791b      	ldrb	r3, [r3, #4]
 80442e6:	2b00      	cmp	r3, #0
 80442e8:	d10c      	bne.n	8044304 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80442ea:	687b      	ldr	r3, [r7, #4]
 80442ec:	681b      	ldr	r3, [r3, #0]
 80442ee:	4a22      	ldr	r2, [pc, #136]	; (8044378 <HAL_CRC_Init+0xc4>)
 80442f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80442f2:	687b      	ldr	r3, [r7, #4]
 80442f4:	681b      	ldr	r3, [r3, #0]
 80442f6:	689a      	ldr	r2, [r3, #8]
 80442f8:	687b      	ldr	r3, [r7, #4]
 80442fa:	681b      	ldr	r3, [r3, #0]
 80442fc:	f022 0218 	bic.w	r2, r2, #24
 8044300:	609a      	str	r2, [r3, #8]
 8044302:	e00c      	b.n	804431e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8044304:	687b      	ldr	r3, [r7, #4]
 8044306:	6899      	ldr	r1, [r3, #8]
 8044308:	687b      	ldr	r3, [r7, #4]
 804430a:	68db      	ldr	r3, [r3, #12]
 804430c:	461a      	mov	r2, r3
 804430e:	6878      	ldr	r0, [r7, #4]
 8044310:	f000 f834 	bl	804437c <HAL_CRCEx_Polynomial_Set>
 8044314:	4603      	mov	r3, r0
 8044316:	2b00      	cmp	r3, #0
 8044318:	d001      	beq.n	804431e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 804431a:	2301      	movs	r3, #1
 804431c:	e028      	b.n	8044370 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 804431e:	687b      	ldr	r3, [r7, #4]
 8044320:	795b      	ldrb	r3, [r3, #5]
 8044322:	2b00      	cmp	r3, #0
 8044324:	d105      	bne.n	8044332 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8044326:	687b      	ldr	r3, [r7, #4]
 8044328:	681b      	ldr	r3, [r3, #0]
 804432a:	f04f 32ff 	mov.w	r2, #4294967295
 804432e:	611a      	str	r2, [r3, #16]
 8044330:	e004      	b.n	804433c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8044332:	687b      	ldr	r3, [r7, #4]
 8044334:	681b      	ldr	r3, [r3, #0]
 8044336:	687a      	ldr	r2, [r7, #4]
 8044338:	6912      	ldr	r2, [r2, #16]
 804433a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 804433c:	687b      	ldr	r3, [r7, #4]
 804433e:	681b      	ldr	r3, [r3, #0]
 8044340:	689b      	ldr	r3, [r3, #8]
 8044342:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8044346:	687b      	ldr	r3, [r7, #4]
 8044348:	695a      	ldr	r2, [r3, #20]
 804434a:	687b      	ldr	r3, [r7, #4]
 804434c:	681b      	ldr	r3, [r3, #0]
 804434e:	430a      	orrs	r2, r1
 8044350:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8044352:	687b      	ldr	r3, [r7, #4]
 8044354:	681b      	ldr	r3, [r3, #0]
 8044356:	689b      	ldr	r3, [r3, #8]
 8044358:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 804435c:	687b      	ldr	r3, [r7, #4]
 804435e:	699a      	ldr	r2, [r3, #24]
 8044360:	687b      	ldr	r3, [r7, #4]
 8044362:	681b      	ldr	r3, [r3, #0]
 8044364:	430a      	orrs	r2, r1
 8044366:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8044368:	687b      	ldr	r3, [r7, #4]
 804436a:	2201      	movs	r2, #1
 804436c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 804436e:	2300      	movs	r3, #0
}
 8044370:	4618      	mov	r0, r3
 8044372:	3708      	adds	r7, #8
 8044374:	46bd      	mov	sp, r7
 8044376:	bd80      	pop	{r7, pc}
 8044378:	04c11db7 	.word	0x04c11db7

0804437c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 804437c:	b480      	push	{r7}
 804437e:	b087      	sub	sp, #28
 8044380:	af00      	add	r7, sp, #0
 8044382:	60f8      	str	r0, [r7, #12]
 8044384:	60b9      	str	r1, [r7, #8]
 8044386:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8044388:	2300      	movs	r3, #0
 804438a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 804438c:	231f      	movs	r3, #31
 804438e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8044390:	bf00      	nop
 8044392:	693b      	ldr	r3, [r7, #16]
 8044394:	1e5a      	subs	r2, r3, #1
 8044396:	613a      	str	r2, [r7, #16]
 8044398:	2b00      	cmp	r3, #0
 804439a:	d009      	beq.n	80443b0 <HAL_CRCEx_Polynomial_Set+0x34>
 804439c:	693b      	ldr	r3, [r7, #16]
 804439e:	f003 031f 	and.w	r3, r3, #31
 80443a2:	68ba      	ldr	r2, [r7, #8]
 80443a4:	fa22 f303 	lsr.w	r3, r2, r3
 80443a8:	f003 0301 	and.w	r3, r3, #1
 80443ac:	2b00      	cmp	r3, #0
 80443ae:	d0f0      	beq.n	8044392 <HAL_CRCEx_Polynomial_Set+0x16>
 80443b0:	687b      	ldr	r3, [r7, #4]
 80443b2:	2b18      	cmp	r3, #24
 80443b4:	d846      	bhi.n	8044444 <HAL_CRCEx_Polynomial_Set+0xc8>
 80443b6:	a201      	add	r2, pc, #4	; (adr r2, 80443bc <HAL_CRCEx_Polynomial_Set+0x40>)
 80443b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80443bc:	0804444b 	.word	0x0804444b
 80443c0:	08044445 	.word	0x08044445
 80443c4:	08044445 	.word	0x08044445
 80443c8:	08044445 	.word	0x08044445
 80443cc:	08044445 	.word	0x08044445
 80443d0:	08044445 	.word	0x08044445
 80443d4:	08044445 	.word	0x08044445
 80443d8:	08044445 	.word	0x08044445
 80443dc:	08044439 	.word	0x08044439
 80443e0:	08044445 	.word	0x08044445
 80443e4:	08044445 	.word	0x08044445
 80443e8:	08044445 	.word	0x08044445
 80443ec:	08044445 	.word	0x08044445
 80443f0:	08044445 	.word	0x08044445
 80443f4:	08044445 	.word	0x08044445
 80443f8:	08044445 	.word	0x08044445
 80443fc:	0804442d 	.word	0x0804442d
 8044400:	08044445 	.word	0x08044445
 8044404:	08044445 	.word	0x08044445
 8044408:	08044445 	.word	0x08044445
 804440c:	08044445 	.word	0x08044445
 8044410:	08044445 	.word	0x08044445
 8044414:	08044445 	.word	0x08044445
 8044418:	08044445 	.word	0x08044445
 804441c:	08044421 	.word	0x08044421
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8044420:	693b      	ldr	r3, [r7, #16]
 8044422:	2b06      	cmp	r3, #6
 8044424:	d913      	bls.n	804444e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8044426:	2301      	movs	r3, #1
 8044428:	75fb      	strb	r3, [r7, #23]
      }
      break;
 804442a:	e010      	b.n	804444e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 804442c:	693b      	ldr	r3, [r7, #16]
 804442e:	2b07      	cmp	r3, #7
 8044430:	d90f      	bls.n	8044452 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8044432:	2301      	movs	r3, #1
 8044434:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8044436:	e00c      	b.n	8044452 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8044438:	693b      	ldr	r3, [r7, #16]
 804443a:	2b0f      	cmp	r3, #15
 804443c:	d90b      	bls.n	8044456 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 804443e:	2301      	movs	r3, #1
 8044440:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8044442:	e008      	b.n	8044456 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8044444:	2301      	movs	r3, #1
 8044446:	75fb      	strb	r3, [r7, #23]
      break;
 8044448:	e006      	b.n	8044458 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 804444a:	bf00      	nop
 804444c:	e004      	b.n	8044458 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 804444e:	bf00      	nop
 8044450:	e002      	b.n	8044458 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8044452:	bf00      	nop
 8044454:	e000      	b.n	8044458 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8044456:	bf00      	nop
  }
  if (status == HAL_OK)
 8044458:	7dfb      	ldrb	r3, [r7, #23]
 804445a:	2b00      	cmp	r3, #0
 804445c:	d10d      	bne.n	804447a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 804445e:	68fb      	ldr	r3, [r7, #12]
 8044460:	681b      	ldr	r3, [r3, #0]
 8044462:	68ba      	ldr	r2, [r7, #8]
 8044464:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8044466:	68fb      	ldr	r3, [r7, #12]
 8044468:	681b      	ldr	r3, [r3, #0]
 804446a:	689b      	ldr	r3, [r3, #8]
 804446c:	f023 0118 	bic.w	r1, r3, #24
 8044470:	68fb      	ldr	r3, [r7, #12]
 8044472:	681b      	ldr	r3, [r3, #0]
 8044474:	687a      	ldr	r2, [r7, #4]
 8044476:	430a      	orrs	r2, r1
 8044478:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 804447a:	7dfb      	ldrb	r3, [r7, #23]
}
 804447c:	4618      	mov	r0, r3
 804447e:	371c      	adds	r7, #28
 8044480:	46bd      	mov	sp, r7
 8044482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044486:	4770      	bx	lr

08044488 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8044488:	b580      	push	{r7, lr}
 804448a:	b084      	sub	sp, #16
 804448c:	af00      	add	r7, sp, #0
 804448e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8044490:	687b      	ldr	r3, [r7, #4]
 8044492:	2b00      	cmp	r3, #0
 8044494:	d101      	bne.n	804449a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8044496:	2301      	movs	r3, #1
 8044498:	e08d      	b.n	80445b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 804449a:	687b      	ldr	r3, [r7, #4]
 804449c:	681b      	ldr	r3, [r3, #0]
 804449e:	461a      	mov	r2, r3
 80444a0:	4b47      	ldr	r3, [pc, #284]	; (80445c0 <HAL_DMA_Init+0x138>)
 80444a2:	429a      	cmp	r2, r3
 80444a4:	d80f      	bhi.n	80444c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80444a6:	687b      	ldr	r3, [r7, #4]
 80444a8:	681b      	ldr	r3, [r3, #0]
 80444aa:	461a      	mov	r2, r3
 80444ac:	4b45      	ldr	r3, [pc, #276]	; (80445c4 <HAL_DMA_Init+0x13c>)
 80444ae:	4413      	add	r3, r2
 80444b0:	4a45      	ldr	r2, [pc, #276]	; (80445c8 <HAL_DMA_Init+0x140>)
 80444b2:	fba2 2303 	umull	r2, r3, r2, r3
 80444b6:	091b      	lsrs	r3, r3, #4
 80444b8:	009a      	lsls	r2, r3, #2
 80444ba:	687b      	ldr	r3, [r7, #4]
 80444bc:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 80444be:	687b      	ldr	r3, [r7, #4]
 80444c0:	4a42      	ldr	r2, [pc, #264]	; (80445cc <HAL_DMA_Init+0x144>)
 80444c2:	649a      	str	r2, [r3, #72]	; 0x48
 80444c4:	e00e      	b.n	80444e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80444c6:	687b      	ldr	r3, [r7, #4]
 80444c8:	681b      	ldr	r3, [r3, #0]
 80444ca:	461a      	mov	r2, r3
 80444cc:	4b40      	ldr	r3, [pc, #256]	; (80445d0 <HAL_DMA_Init+0x148>)
 80444ce:	4413      	add	r3, r2
 80444d0:	4a3d      	ldr	r2, [pc, #244]	; (80445c8 <HAL_DMA_Init+0x140>)
 80444d2:	fba2 2303 	umull	r2, r3, r2, r3
 80444d6:	091b      	lsrs	r3, r3, #4
 80444d8:	009a      	lsls	r2, r3, #2
 80444da:	687b      	ldr	r3, [r7, #4]
 80444dc:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 80444de:	687b      	ldr	r3, [r7, #4]
 80444e0:	4a3c      	ldr	r2, [pc, #240]	; (80445d4 <HAL_DMA_Init+0x14c>)
 80444e2:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80444e4:	687b      	ldr	r3, [r7, #4]
 80444e6:	2202      	movs	r2, #2
 80444e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80444ec:	687b      	ldr	r3, [r7, #4]
 80444ee:	681b      	ldr	r3, [r3, #0]
 80444f0:	681b      	ldr	r3, [r3, #0]
 80444f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80444f4:	68fb      	ldr	r3, [r7, #12]
 80444f6:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 80444fa:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80444fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8044500:	687b      	ldr	r3, [r7, #4]
 8044502:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8044504:	687b      	ldr	r3, [r7, #4]
 8044506:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8044508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 804450a:	687b      	ldr	r3, [r7, #4]
 804450c:	691b      	ldr	r3, [r3, #16]
 804450e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8044510:	687b      	ldr	r3, [r7, #4]
 8044512:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8044514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8044516:	687b      	ldr	r3, [r7, #4]
 8044518:	699b      	ldr	r3, [r3, #24]
 804451a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 804451c:	687b      	ldr	r3, [r7, #4]
 804451e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8044520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8044522:	687b      	ldr	r3, [r7, #4]
 8044524:	6a1b      	ldr	r3, [r3, #32]
 8044526:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8044528:	68fa      	ldr	r2, [r7, #12]
 804452a:	4313      	orrs	r3, r2
 804452c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 804452e:	687b      	ldr	r3, [r7, #4]
 8044530:	681b      	ldr	r3, [r3, #0]
 8044532:	68fa      	ldr	r2, [r7, #12]
 8044534:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8044536:	6878      	ldr	r0, [r7, #4]
 8044538:	f000 fa48 	bl	80449cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 804453c:	687b      	ldr	r3, [r7, #4]
 804453e:	689b      	ldr	r3, [r3, #8]
 8044540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8044544:	d102      	bne.n	804454c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8044546:	687b      	ldr	r3, [r7, #4]
 8044548:	2200      	movs	r2, #0
 804454a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 804454c:	687b      	ldr	r3, [r7, #4]
 804454e:	685a      	ldr	r2, [r3, #4]
 8044550:	687b      	ldr	r3, [r7, #4]
 8044552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8044554:	b2d2      	uxtb	r2, r2
 8044556:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8044558:	687b      	ldr	r3, [r7, #4]
 804455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804455c:	687a      	ldr	r2, [r7, #4]
 804455e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8044560:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8044562:	687b      	ldr	r3, [r7, #4]
 8044564:	685b      	ldr	r3, [r3, #4]
 8044566:	2b00      	cmp	r3, #0
 8044568:	d010      	beq.n	804458c <HAL_DMA_Init+0x104>
 804456a:	687b      	ldr	r3, [r7, #4]
 804456c:	685b      	ldr	r3, [r3, #4]
 804456e:	2b04      	cmp	r3, #4
 8044570:	d80c      	bhi.n	804458c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8044572:	6878      	ldr	r0, [r7, #4]
 8044574:	f000 fa68 	bl	8044a48 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8044578:	687b      	ldr	r3, [r7, #4]
 804457a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804457c:	2200      	movs	r2, #0
 804457e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8044580:	687b      	ldr	r3, [r7, #4]
 8044582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8044584:	687a      	ldr	r2, [r7, #4]
 8044586:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8044588:	605a      	str	r2, [r3, #4]
 804458a:	e008      	b.n	804459e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 804458c:	687b      	ldr	r3, [r7, #4]
 804458e:	2200      	movs	r2, #0
 8044590:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8044592:	687b      	ldr	r3, [r7, #4]
 8044594:	2200      	movs	r2, #0
 8044596:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8044598:	687b      	ldr	r3, [r7, #4]
 804459a:	2200      	movs	r2, #0
 804459c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 804459e:	687b      	ldr	r3, [r7, #4]
 80445a0:	2200      	movs	r2, #0
 80445a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80445a4:	687b      	ldr	r3, [r7, #4]
 80445a6:	2201      	movs	r2, #1
 80445a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80445ac:	687b      	ldr	r3, [r7, #4]
 80445ae:	2200      	movs	r2, #0
 80445b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80445b4:	2300      	movs	r3, #0
}
 80445b6:	4618      	mov	r0, r3
 80445b8:	3710      	adds	r7, #16
 80445ba:	46bd      	mov	sp, r7
 80445bc:	bd80      	pop	{r7, pc}
 80445be:	bf00      	nop
 80445c0:	40020407 	.word	0x40020407
 80445c4:	bffdfff8 	.word	0xbffdfff8
 80445c8:	cccccccd 	.word	0xcccccccd
 80445cc:	40020000 	.word	0x40020000
 80445d0:	bffdfbf8 	.word	0xbffdfbf8
 80445d4:	40020400 	.word	0x40020400

080445d8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80445d8:	b480      	push	{r7}
 80445da:	b085      	sub	sp, #20
 80445dc:	af00      	add	r7, sp, #0
 80445de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80445e0:	2300      	movs	r3, #0
 80445e2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80445e4:	687b      	ldr	r3, [r7, #4]
 80445e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80445ea:	b2db      	uxtb	r3, r3
 80445ec:	2b02      	cmp	r3, #2
 80445ee:	d008      	beq.n	8044602 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80445f0:	687b      	ldr	r3, [r7, #4]
 80445f2:	2204      	movs	r2, #4
 80445f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80445f6:	687b      	ldr	r3, [r7, #4]
 80445f8:	2200      	movs	r2, #0
 80445fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80445fe:	2301      	movs	r3, #1
 8044600:	e040      	b.n	8044684 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8044602:	687b      	ldr	r3, [r7, #4]
 8044604:	681b      	ldr	r3, [r3, #0]
 8044606:	681a      	ldr	r2, [r3, #0]
 8044608:	687b      	ldr	r3, [r7, #4]
 804460a:	681b      	ldr	r3, [r3, #0]
 804460c:	f022 020e 	bic.w	r2, r2, #14
 8044610:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8044612:	687b      	ldr	r3, [r7, #4]
 8044614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8044616:	681a      	ldr	r2, [r3, #0]
 8044618:	687b      	ldr	r3, [r7, #4]
 804461a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804461c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8044620:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8044622:	687b      	ldr	r3, [r7, #4]
 8044624:	681b      	ldr	r3, [r3, #0]
 8044626:	681a      	ldr	r2, [r3, #0]
 8044628:	687b      	ldr	r3, [r7, #4]
 804462a:	681b      	ldr	r3, [r3, #0]
 804462c:	f022 0201 	bic.w	r2, r2, #1
 8044630:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8044632:	687b      	ldr	r3, [r7, #4]
 8044634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8044636:	f003 021c 	and.w	r2, r3, #28
 804463a:	687b      	ldr	r3, [r7, #4]
 804463c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804463e:	2101      	movs	r1, #1
 8044640:	fa01 f202 	lsl.w	r2, r1, r2
 8044644:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8044646:	687b      	ldr	r3, [r7, #4]
 8044648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804464a:	687a      	ldr	r2, [r7, #4]
 804464c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 804464e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8044650:	687b      	ldr	r3, [r7, #4]
 8044652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8044654:	2b00      	cmp	r3, #0
 8044656:	d00c      	beq.n	8044672 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8044658:	687b      	ldr	r3, [r7, #4]
 804465a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804465c:	681a      	ldr	r2, [r3, #0]
 804465e:	687b      	ldr	r3, [r7, #4]
 8044660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8044662:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8044666:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8044668:	687b      	ldr	r3, [r7, #4]
 804466a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804466c:	687a      	ldr	r2, [r7, #4]
 804466e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8044670:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8044672:	687b      	ldr	r3, [r7, #4]
 8044674:	2201      	movs	r2, #1
 8044676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 804467a:	687b      	ldr	r3, [r7, #4]
 804467c:	2200      	movs	r2, #0
 804467e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8044682:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8044684:	4618      	mov	r0, r3
 8044686:	3714      	adds	r7, #20
 8044688:	46bd      	mov	sp, r7
 804468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804468e:	4770      	bx	lr

08044690 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8044690:	b580      	push	{r7, lr}
 8044692:	b084      	sub	sp, #16
 8044694:	af00      	add	r7, sp, #0
 8044696:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8044698:	2300      	movs	r3, #0
 804469a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 804469c:	687b      	ldr	r3, [r7, #4]
 804469e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80446a2:	b2db      	uxtb	r3, r3
 80446a4:	2b02      	cmp	r3, #2
 80446a6:	d005      	beq.n	80446b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80446a8:	687b      	ldr	r3, [r7, #4]
 80446aa:	2204      	movs	r2, #4
 80446ac:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80446ae:	2301      	movs	r3, #1
 80446b0:	73fb      	strb	r3, [r7, #15]
 80446b2:	e047      	b.n	8044744 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80446b4:	687b      	ldr	r3, [r7, #4]
 80446b6:	681b      	ldr	r3, [r3, #0]
 80446b8:	681a      	ldr	r2, [r3, #0]
 80446ba:	687b      	ldr	r3, [r7, #4]
 80446bc:	681b      	ldr	r3, [r3, #0]
 80446be:	f022 020e 	bic.w	r2, r2, #14
 80446c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80446c4:	687b      	ldr	r3, [r7, #4]
 80446c6:	681b      	ldr	r3, [r3, #0]
 80446c8:	681a      	ldr	r2, [r3, #0]
 80446ca:	687b      	ldr	r3, [r7, #4]
 80446cc:	681b      	ldr	r3, [r3, #0]
 80446ce:	f022 0201 	bic.w	r2, r2, #1
 80446d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80446d4:	687b      	ldr	r3, [r7, #4]
 80446d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80446d8:	681a      	ldr	r2, [r3, #0]
 80446da:	687b      	ldr	r3, [r7, #4]
 80446dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80446de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80446e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80446e4:	687b      	ldr	r3, [r7, #4]
 80446e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80446e8:	f003 021c 	and.w	r2, r3, #28
 80446ec:	687b      	ldr	r3, [r7, #4]
 80446ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80446f0:	2101      	movs	r1, #1
 80446f2:	fa01 f202 	lsl.w	r2, r1, r2
 80446f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80446f8:	687b      	ldr	r3, [r7, #4]
 80446fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80446fc:	687a      	ldr	r2, [r7, #4]
 80446fe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8044700:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8044702:	687b      	ldr	r3, [r7, #4]
 8044704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8044706:	2b00      	cmp	r3, #0
 8044708:	d00c      	beq.n	8044724 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 804470a:	687b      	ldr	r3, [r7, #4]
 804470c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804470e:	681a      	ldr	r2, [r3, #0]
 8044710:	687b      	ldr	r3, [r7, #4]
 8044712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8044714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8044718:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 804471a:	687b      	ldr	r3, [r7, #4]
 804471c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804471e:	687a      	ldr	r2, [r7, #4]
 8044720:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8044722:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8044724:	687b      	ldr	r3, [r7, #4]
 8044726:	2201      	movs	r2, #1
 8044728:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 804472c:	687b      	ldr	r3, [r7, #4]
 804472e:	2200      	movs	r2, #0
 8044730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8044734:	687b      	ldr	r3, [r7, #4]
 8044736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044738:	2b00      	cmp	r3, #0
 804473a:	d003      	beq.n	8044744 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 804473c:	687b      	ldr	r3, [r7, #4]
 804473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044740:	6878      	ldr	r0, [r7, #4]
 8044742:	4798      	blx	r3
    }
  }
  return status;
 8044744:	7bfb      	ldrb	r3, [r7, #15]
}
 8044746:	4618      	mov	r0, r3
 8044748:	3710      	adds	r7, #16
 804474a:	46bd      	mov	sp, r7
 804474c:	bd80      	pop	{r7, pc}

0804474e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 804474e:	b580      	push	{r7, lr}
 8044750:	b084      	sub	sp, #16
 8044752:	af00      	add	r7, sp, #0
 8044754:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8044756:	687b      	ldr	r3, [r7, #4]
 8044758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804475a:	681b      	ldr	r3, [r3, #0]
 804475c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 804475e:	687b      	ldr	r3, [r7, #4]
 8044760:	681b      	ldr	r3, [r3, #0]
 8044762:	681b      	ldr	r3, [r3, #0]
 8044764:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8044766:	687b      	ldr	r3, [r7, #4]
 8044768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804476a:	f003 031c 	and.w	r3, r3, #28
 804476e:	2204      	movs	r2, #4
 8044770:	409a      	lsls	r2, r3
 8044772:	68fb      	ldr	r3, [r7, #12]
 8044774:	4013      	ands	r3, r2
 8044776:	2b00      	cmp	r3, #0
 8044778:	d053      	beq.n	8044822 <HAL_DMA_IRQHandler+0xd4>
 804477a:	68bb      	ldr	r3, [r7, #8]
 804477c:	f003 0304 	and.w	r3, r3, #4
 8044780:	2b00      	cmp	r3, #0
 8044782:	d04e      	beq.n	8044822 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8044784:	687b      	ldr	r3, [r7, #4]
 8044786:	681b      	ldr	r3, [r3, #0]
 8044788:	681b      	ldr	r3, [r3, #0]
 804478a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804478e:	2b00      	cmp	r3, #0
 8044790:	d024      	beq.n	80447dc <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8044792:	687b      	ldr	r3, [r7, #4]
 8044794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8044796:	f003 021c 	and.w	r2, r3, #28
 804479a:	687b      	ldr	r3, [r7, #4]
 804479c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804479e:	2104      	movs	r1, #4
 80447a0:	fa01 f202 	lsl.w	r2, r1, r2
 80447a4:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80447a6:	687b      	ldr	r3, [r7, #4]
 80447a8:	681b      	ldr	r3, [r3, #0]
 80447aa:	681b      	ldr	r3, [r3, #0]
 80447ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80447b0:	2b00      	cmp	r3, #0
 80447b2:	d109      	bne.n	80447c8 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 80447b4:	687b      	ldr	r3, [r7, #4]
 80447b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80447b8:	2b00      	cmp	r3, #0
 80447ba:	f000 80c0 	beq.w	804493e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80447be:	687b      	ldr	r3, [r7, #4]
 80447c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80447c2:	6878      	ldr	r0, [r7, #4]
 80447c4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80447c6:	e0ba      	b.n	804493e <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 80447c8:	687b      	ldr	r3, [r7, #4]
 80447ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80447cc:	2b00      	cmp	r3, #0
 80447ce:	f000 80b6 	beq.w	804493e <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 80447d2:	687b      	ldr	r3, [r7, #4]
 80447d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80447d6:	6878      	ldr	r0, [r7, #4]
 80447d8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80447da:	e0b0      	b.n	804493e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80447dc:	687b      	ldr	r3, [r7, #4]
 80447de:	681b      	ldr	r3, [r3, #0]
 80447e0:	681b      	ldr	r3, [r3, #0]
 80447e2:	f003 0320 	and.w	r3, r3, #32
 80447e6:	2b00      	cmp	r3, #0
 80447e8:	d107      	bne.n	80447fa <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80447ea:	687b      	ldr	r3, [r7, #4]
 80447ec:	681b      	ldr	r3, [r3, #0]
 80447ee:	681a      	ldr	r2, [r3, #0]
 80447f0:	687b      	ldr	r3, [r7, #4]
 80447f2:	681b      	ldr	r3, [r3, #0]
 80447f4:	f022 0204 	bic.w	r2, r2, #4
 80447f8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80447fa:	687b      	ldr	r3, [r7, #4]
 80447fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80447fe:	f003 021c 	and.w	r2, r3, #28
 8044802:	687b      	ldr	r3, [r7, #4]
 8044804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8044806:	2104      	movs	r1, #4
 8044808:	fa01 f202 	lsl.w	r2, r1, r2
 804480c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 804480e:	687b      	ldr	r3, [r7, #4]
 8044810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8044812:	2b00      	cmp	r3, #0
 8044814:	f000 8093 	beq.w	804493e <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8044818:	687b      	ldr	r3, [r7, #4]
 804481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804481c:	6878      	ldr	r0, [r7, #4]
 804481e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8044820:	e08d      	b.n	804493e <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8044822:	687b      	ldr	r3, [r7, #4]
 8044824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8044826:	f003 031c 	and.w	r3, r3, #28
 804482a:	2202      	movs	r2, #2
 804482c:	409a      	lsls	r2, r3
 804482e:	68fb      	ldr	r3, [r7, #12]
 8044830:	4013      	ands	r3, r2
 8044832:	2b00      	cmp	r3, #0
 8044834:	d04e      	beq.n	80448d4 <HAL_DMA_IRQHandler+0x186>
 8044836:	68bb      	ldr	r3, [r7, #8]
 8044838:	f003 0302 	and.w	r3, r3, #2
 804483c:	2b00      	cmp	r3, #0
 804483e:	d049      	beq.n	80448d4 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8044840:	687b      	ldr	r3, [r7, #4]
 8044842:	681b      	ldr	r3, [r3, #0]
 8044844:	681b      	ldr	r3, [r3, #0]
 8044846:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804484a:	2b00      	cmp	r3, #0
 804484c:	d018      	beq.n	8044880 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 804484e:	687b      	ldr	r3, [r7, #4]
 8044850:	681b      	ldr	r3, [r3, #0]
 8044852:	681b      	ldr	r3, [r3, #0]
 8044854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8044858:	2b00      	cmp	r3, #0
 804485a:	d108      	bne.n	804486e <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 804485c:	687b      	ldr	r3, [r7, #4]
 804485e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8044860:	2b00      	cmp	r3, #0
 8044862:	d06e      	beq.n	8044942 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8044864:	687b      	ldr	r3, [r7, #4]
 8044866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8044868:	6878      	ldr	r0, [r7, #4]
 804486a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 804486c:	e069      	b.n	8044942 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 804486e:	687b      	ldr	r3, [r7, #4]
 8044870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044872:	2b00      	cmp	r3, #0
 8044874:	d065      	beq.n	8044942 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8044876:	687b      	ldr	r3, [r7, #4]
 8044878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804487a:	6878      	ldr	r0, [r7, #4]
 804487c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 804487e:	e060      	b.n	8044942 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8044880:	687b      	ldr	r3, [r7, #4]
 8044882:	681b      	ldr	r3, [r3, #0]
 8044884:	681b      	ldr	r3, [r3, #0]
 8044886:	f003 0320 	and.w	r3, r3, #32
 804488a:	2b00      	cmp	r3, #0
 804488c:	d10b      	bne.n	80448a6 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 804488e:	687b      	ldr	r3, [r7, #4]
 8044890:	681b      	ldr	r3, [r3, #0]
 8044892:	681a      	ldr	r2, [r3, #0]
 8044894:	687b      	ldr	r3, [r7, #4]
 8044896:	681b      	ldr	r3, [r3, #0]
 8044898:	f022 020a 	bic.w	r2, r2, #10
 804489c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 804489e:	687b      	ldr	r3, [r7, #4]
 80448a0:	2201      	movs	r2, #1
 80448a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80448a6:	687b      	ldr	r3, [r7, #4]
 80448a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80448aa:	f003 021c 	and.w	r2, r3, #28
 80448ae:	687b      	ldr	r3, [r7, #4]
 80448b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80448b2:	2102      	movs	r1, #2
 80448b4:	fa01 f202 	lsl.w	r2, r1, r2
 80448b8:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80448ba:	687b      	ldr	r3, [r7, #4]
 80448bc:	2200      	movs	r2, #0
 80448be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 80448c2:	687b      	ldr	r3, [r7, #4]
 80448c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80448c6:	2b00      	cmp	r3, #0
 80448c8:	d03b      	beq.n	8044942 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80448ca:	687b      	ldr	r3, [r7, #4]
 80448cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80448ce:	6878      	ldr	r0, [r7, #4]
 80448d0:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80448d2:	e036      	b.n	8044942 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80448d4:	687b      	ldr	r3, [r7, #4]
 80448d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80448d8:	f003 031c 	and.w	r3, r3, #28
 80448dc:	2208      	movs	r2, #8
 80448de:	409a      	lsls	r2, r3
 80448e0:	68fb      	ldr	r3, [r7, #12]
 80448e2:	4013      	ands	r3, r2
 80448e4:	2b00      	cmp	r3, #0
 80448e6:	d02e      	beq.n	8044946 <HAL_DMA_IRQHandler+0x1f8>
 80448e8:	68bb      	ldr	r3, [r7, #8]
 80448ea:	f003 0308 	and.w	r3, r3, #8
 80448ee:	2b00      	cmp	r3, #0
 80448f0:	d029      	beq.n	8044946 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80448f2:	687b      	ldr	r3, [r7, #4]
 80448f4:	681b      	ldr	r3, [r3, #0]
 80448f6:	681a      	ldr	r2, [r3, #0]
 80448f8:	687b      	ldr	r3, [r7, #4]
 80448fa:	681b      	ldr	r3, [r3, #0]
 80448fc:	f022 020e 	bic.w	r2, r2, #14
 8044900:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8044902:	687b      	ldr	r3, [r7, #4]
 8044904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8044906:	f003 021c 	and.w	r2, r3, #28
 804490a:	687b      	ldr	r3, [r7, #4]
 804490c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 804490e:	2101      	movs	r1, #1
 8044910:	fa01 f202 	lsl.w	r2, r1, r2
 8044914:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8044916:	687b      	ldr	r3, [r7, #4]
 8044918:	2201      	movs	r2, #1
 804491a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 804491c:	687b      	ldr	r3, [r7, #4]
 804491e:	2201      	movs	r2, #1
 8044920:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8044924:	687b      	ldr	r3, [r7, #4]
 8044926:	2200      	movs	r2, #0
 8044928:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 804492c:	687b      	ldr	r3, [r7, #4]
 804492e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8044930:	2b00      	cmp	r3, #0
 8044932:	d008      	beq.n	8044946 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8044934:	687b      	ldr	r3, [r7, #4]
 8044936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8044938:	6878      	ldr	r0, [r7, #4]
 804493a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 804493c:	e002      	b.n	8044944 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 804493e:	bf00      	nop
 8044940:	e000      	b.n	8044944 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8044942:	bf00      	nop
  return;
 8044944:	bf00      	nop
 8044946:	bf00      	nop
}
 8044948:	3710      	adds	r7, #16
 804494a:	46bd      	mov	sp, r7
 804494c:	bd80      	pop	{r7, pc}

0804494e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 804494e:	b480      	push	{r7}
 8044950:	b083      	sub	sp, #12
 8044952:	af00      	add	r7, sp, #0
 8044954:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8044956:	687b      	ldr	r3, [r7, #4]
 8044958:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 804495c:	b2db      	uxtb	r3, r3
}
 804495e:	4618      	mov	r0, r3
 8044960:	370c      	adds	r7, #12
 8044962:	46bd      	mov	sp, r7
 8044964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044968:	4770      	bx	lr

0804496a <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 804496a:	b480      	push	{r7}
 804496c:	b085      	sub	sp, #20
 804496e:	af00      	add	r7, sp, #0
 8044970:	6078      	str	r0, [r7, #4]
 8044972:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8044974:	2300      	movs	r3, #0
 8044976:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8044978:	687b      	ldr	r3, [r7, #4]
 804497a:	2b00      	cmp	r3, #0
 804497c:	d103      	bne.n	8044986 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 804497e:	2301      	movs	r3, #1
 8044980:	72fb      	strb	r3, [r7, #11]
    return status;
 8044982:	7afb      	ldrb	r3, [r7, #11]
 8044984:	e01b      	b.n	80449be <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8044986:	687b      	ldr	r3, [r7, #4]
 8044988:	681b      	ldr	r3, [r3, #0]
 804498a:	681b      	ldr	r3, [r3, #0]
 804498c:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 804498e:	683b      	ldr	r3, [r7, #0]
 8044990:	f003 0310 	and.w	r3, r3, #16
 8044994:	2b00      	cmp	r3, #0
 8044996:	d00d      	beq.n	80449b4 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8044998:	683b      	ldr	r3, [r7, #0]
 804499a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804499e:	2b00      	cmp	r3, #0
 80449a0:	d004      	beq.n	80449ac <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80449a2:	68fb      	ldr	r3, [r7, #12]
 80449a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80449a8:	60fb      	str	r3, [r7, #12]
 80449aa:	e003      	b.n	80449b4 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80449ac:	68fb      	ldr	r3, [r7, #12]
 80449ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80449b2:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80449b4:	687b      	ldr	r3, [r7, #4]
 80449b6:	681b      	ldr	r3, [r3, #0]
 80449b8:	68fa      	ldr	r2, [r7, #12]
 80449ba:	601a      	str	r2, [r3, #0]

  return status;
 80449bc:	7afb      	ldrb	r3, [r7, #11]
}
 80449be:	4618      	mov	r0, r3
 80449c0:	3714      	adds	r7, #20
 80449c2:	46bd      	mov	sp, r7
 80449c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80449c8:	4770      	bx	lr
	...

080449cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80449cc:	b480      	push	{r7}
 80449ce:	b085      	sub	sp, #20
 80449d0:	af00      	add	r7, sp, #0
 80449d2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80449d4:	687b      	ldr	r3, [r7, #4]
 80449d6:	681b      	ldr	r3, [r3, #0]
 80449d8:	461a      	mov	r2, r3
 80449da:	4b17      	ldr	r3, [pc, #92]	; (8044a38 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80449dc:	429a      	cmp	r2, r3
 80449de:	d80a      	bhi.n	80449f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80449e0:	687b      	ldr	r3, [r7, #4]
 80449e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80449e4:	089b      	lsrs	r3, r3, #2
 80449e6:	009b      	lsls	r3, r3, #2
 80449e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80449ec:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80449f0:	687a      	ldr	r2, [r7, #4]
 80449f2:	6513      	str	r3, [r2, #80]	; 0x50
 80449f4:	e007      	b.n	8044a06 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 80449f6:	687b      	ldr	r3, [r7, #4]
 80449f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80449fa:	089b      	lsrs	r3, r3, #2
 80449fc:	009a      	lsls	r2, r3, #2
 80449fe:	4b0f      	ldr	r3, [pc, #60]	; (8044a3c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8044a00:	4413      	add	r3, r2
 8044a02:	687a      	ldr	r2, [r7, #4]
 8044a04:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8044a06:	687b      	ldr	r3, [r7, #4]
 8044a08:	681b      	ldr	r3, [r3, #0]
 8044a0a:	b2db      	uxtb	r3, r3
 8044a0c:	3b08      	subs	r3, #8
 8044a0e:	4a0c      	ldr	r2, [pc, #48]	; (8044a40 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8044a10:	fba2 2303 	umull	r2, r3, r2, r3
 8044a14:	091b      	lsrs	r3, r3, #4
 8044a16:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8044a18:	687b      	ldr	r3, [r7, #4]
 8044a1a:	4a0a      	ldr	r2, [pc, #40]	; (8044a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8044a1c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8044a1e:	68fb      	ldr	r3, [r7, #12]
 8044a20:	f003 031f 	and.w	r3, r3, #31
 8044a24:	2201      	movs	r2, #1
 8044a26:	409a      	lsls	r2, r3
 8044a28:	687b      	ldr	r3, [r7, #4]
 8044a2a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8044a2c:	bf00      	nop
 8044a2e:	3714      	adds	r7, #20
 8044a30:	46bd      	mov	sp, r7
 8044a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044a36:	4770      	bx	lr
 8044a38:	40020407 	.word	0x40020407
 8044a3c:	40020820 	.word	0x40020820
 8044a40:	cccccccd 	.word	0xcccccccd
 8044a44:	40020880 	.word	0x40020880

08044a48 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8044a48:	b480      	push	{r7}
 8044a4a:	b085      	sub	sp, #20
 8044a4c:	af00      	add	r7, sp, #0
 8044a4e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8044a50:	687b      	ldr	r3, [r7, #4]
 8044a52:	685b      	ldr	r3, [r3, #4]
 8044a54:	b2db      	uxtb	r3, r3
 8044a56:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8044a58:	68fa      	ldr	r2, [r7, #12]
 8044a5a:	4b0b      	ldr	r3, [pc, #44]	; (8044a88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8044a5c:	4413      	add	r3, r2
 8044a5e:	009b      	lsls	r3, r3, #2
 8044a60:	461a      	mov	r2, r3
 8044a62:	687b      	ldr	r3, [r7, #4]
 8044a64:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8044a66:	687b      	ldr	r3, [r7, #4]
 8044a68:	4a08      	ldr	r2, [pc, #32]	; (8044a8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8044a6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8044a6c:	68fb      	ldr	r3, [r7, #12]
 8044a6e:	3b01      	subs	r3, #1
 8044a70:	f003 0303 	and.w	r3, r3, #3
 8044a74:	2201      	movs	r2, #1
 8044a76:	409a      	lsls	r2, r3
 8044a78:	687b      	ldr	r3, [r7, #4]
 8044a7a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8044a7c:	bf00      	nop
 8044a7e:	3714      	adds	r7, #20
 8044a80:	46bd      	mov	sp, r7
 8044a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044a86:	4770      	bx	lr
 8044a88:	1000823f 	.word	0x1000823f
 8044a8c:	40020940 	.word	0x40020940

08044a90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8044a90:	b480      	push	{r7}
 8044a92:	b087      	sub	sp, #28
 8044a94:	af00      	add	r7, sp, #0
 8044a96:	6078      	str	r0, [r7, #4]
 8044a98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8044a9a:	2300      	movs	r3, #0
 8044a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8044a9e:	e158      	b.n	8044d52 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8044aa0:	683b      	ldr	r3, [r7, #0]
 8044aa2:	681a      	ldr	r2, [r3, #0]
 8044aa4:	2101      	movs	r1, #1
 8044aa6:	697b      	ldr	r3, [r7, #20]
 8044aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8044aac:	4013      	ands	r3, r2
 8044aae:	60fb      	str	r3, [r7, #12]

    if(iocurrent != 0U)
 8044ab0:	68fb      	ldr	r3, [r7, #12]
 8044ab2:	2b00      	cmp	r3, #0
 8044ab4:	f000 814a 	beq.w	8044d4c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8044ab8:	683b      	ldr	r3, [r7, #0]
 8044aba:	685b      	ldr	r3, [r3, #4]
 8044abc:	2b01      	cmp	r3, #1
 8044abe:	d00b      	beq.n	8044ad8 <HAL_GPIO_Init+0x48>
 8044ac0:	683b      	ldr	r3, [r7, #0]
 8044ac2:	685b      	ldr	r3, [r3, #4]
 8044ac4:	2b02      	cmp	r3, #2
 8044ac6:	d007      	beq.n	8044ad8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8044ac8:	683b      	ldr	r3, [r7, #0]
 8044aca:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8044acc:	2b11      	cmp	r3, #17
 8044ace:	d003      	beq.n	8044ad8 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8044ad0:	683b      	ldr	r3, [r7, #0]
 8044ad2:	685b      	ldr	r3, [r3, #4]
 8044ad4:	2b12      	cmp	r3, #18
 8044ad6:	d130      	bne.n	8044b3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8044ad8:	687b      	ldr	r3, [r7, #4]
 8044ada:	689b      	ldr	r3, [r3, #8]
 8044adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8044ade:	697b      	ldr	r3, [r7, #20]
 8044ae0:	005b      	lsls	r3, r3, #1
 8044ae2:	2203      	movs	r2, #3
 8044ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8044ae8:	43db      	mvns	r3, r3
 8044aea:	693a      	ldr	r2, [r7, #16]
 8044aec:	4013      	ands	r3, r2
 8044aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8044af0:	683b      	ldr	r3, [r7, #0]
 8044af2:	68da      	ldr	r2, [r3, #12]
 8044af4:	697b      	ldr	r3, [r7, #20]
 8044af6:	005b      	lsls	r3, r3, #1
 8044af8:	fa02 f303 	lsl.w	r3, r2, r3
 8044afc:	693a      	ldr	r2, [r7, #16]
 8044afe:	4313      	orrs	r3, r2
 8044b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8044b02:	687b      	ldr	r3, [r7, #4]
 8044b04:	693a      	ldr	r2, [r7, #16]
 8044b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8044b08:	687b      	ldr	r3, [r7, #4]
 8044b0a:	685b      	ldr	r3, [r3, #4]
 8044b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8044b0e:	2201      	movs	r2, #1
 8044b10:	697b      	ldr	r3, [r7, #20]
 8044b12:	fa02 f303 	lsl.w	r3, r2, r3
 8044b16:	43db      	mvns	r3, r3
 8044b18:	693a      	ldr	r2, [r7, #16]
 8044b1a:	4013      	ands	r3, r2
 8044b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8044b1e:	683b      	ldr	r3, [r7, #0]
 8044b20:	685b      	ldr	r3, [r3, #4]
 8044b22:	091b      	lsrs	r3, r3, #4
 8044b24:	f003 0201 	and.w	r2, r3, #1
 8044b28:	697b      	ldr	r3, [r7, #20]
 8044b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8044b2e:	693a      	ldr	r2, [r7, #16]
 8044b30:	4313      	orrs	r3, r2
 8044b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8044b34:	687b      	ldr	r3, [r7, #4]
 8044b36:	693a      	ldr	r2, [r7, #16]
 8044b38:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8044b3a:	687b      	ldr	r3, [r7, #4]
 8044b3c:	68db      	ldr	r3, [r3, #12]
 8044b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8044b40:	697b      	ldr	r3, [r7, #20]
 8044b42:	005b      	lsls	r3, r3, #1
 8044b44:	2203      	movs	r2, #3
 8044b46:	fa02 f303 	lsl.w	r3, r2, r3
 8044b4a:	43db      	mvns	r3, r3
 8044b4c:	693a      	ldr	r2, [r7, #16]
 8044b4e:	4013      	ands	r3, r2
 8044b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8044b52:	683b      	ldr	r3, [r7, #0]
 8044b54:	689a      	ldr	r2, [r3, #8]
 8044b56:	697b      	ldr	r3, [r7, #20]
 8044b58:	005b      	lsls	r3, r3, #1
 8044b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8044b5e:	693a      	ldr	r2, [r7, #16]
 8044b60:	4313      	orrs	r3, r2
 8044b62:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8044b64:	687b      	ldr	r3, [r7, #4]
 8044b66:	693a      	ldr	r2, [r7, #16]
 8044b68:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8044b6a:	683b      	ldr	r3, [r7, #0]
 8044b6c:	685b      	ldr	r3, [r3, #4]
 8044b6e:	2b02      	cmp	r3, #2
 8044b70:	d003      	beq.n	8044b7a <HAL_GPIO_Init+0xea>
 8044b72:	683b      	ldr	r3, [r7, #0]
 8044b74:	685b      	ldr	r3, [r3, #4]
 8044b76:	2b12      	cmp	r3, #18
 8044b78:	d123      	bne.n	8044bc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8044b7a:	697b      	ldr	r3, [r7, #20]
 8044b7c:	08da      	lsrs	r2, r3, #3
 8044b7e:	687b      	ldr	r3, [r7, #4]
 8044b80:	3208      	adds	r2, #8
 8044b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8044b86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8044b88:	697b      	ldr	r3, [r7, #20]
 8044b8a:	f003 0307 	and.w	r3, r3, #7
 8044b8e:	009b      	lsls	r3, r3, #2
 8044b90:	220f      	movs	r2, #15
 8044b92:	fa02 f303 	lsl.w	r3, r2, r3
 8044b96:	43db      	mvns	r3, r3
 8044b98:	693a      	ldr	r2, [r7, #16]
 8044b9a:	4013      	ands	r3, r2
 8044b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8044b9e:	683b      	ldr	r3, [r7, #0]
 8044ba0:	691a      	ldr	r2, [r3, #16]
 8044ba2:	697b      	ldr	r3, [r7, #20]
 8044ba4:	f003 0307 	and.w	r3, r3, #7
 8044ba8:	009b      	lsls	r3, r3, #2
 8044baa:	fa02 f303 	lsl.w	r3, r2, r3
 8044bae:	693a      	ldr	r2, [r7, #16]
 8044bb0:	4313      	orrs	r3, r2
 8044bb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8044bb4:	697b      	ldr	r3, [r7, #20]
 8044bb6:	08da      	lsrs	r2, r3, #3
 8044bb8:	687b      	ldr	r3, [r7, #4]
 8044bba:	3208      	adds	r2, #8
 8044bbc:	6939      	ldr	r1, [r7, #16]
 8044bbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8044bc2:	687b      	ldr	r3, [r7, #4]
 8044bc4:	681b      	ldr	r3, [r3, #0]
 8044bc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8044bc8:	697b      	ldr	r3, [r7, #20]
 8044bca:	005b      	lsls	r3, r3, #1
 8044bcc:	2203      	movs	r2, #3
 8044bce:	fa02 f303 	lsl.w	r3, r2, r3
 8044bd2:	43db      	mvns	r3, r3
 8044bd4:	693a      	ldr	r2, [r7, #16]
 8044bd6:	4013      	ands	r3, r2
 8044bd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8044bda:	683b      	ldr	r3, [r7, #0]
 8044bdc:	685b      	ldr	r3, [r3, #4]
 8044bde:	f003 0203 	and.w	r2, r3, #3
 8044be2:	697b      	ldr	r3, [r7, #20]
 8044be4:	005b      	lsls	r3, r3, #1
 8044be6:	fa02 f303 	lsl.w	r3, r2, r3
 8044bea:	693a      	ldr	r2, [r7, #16]
 8044bec:	4313      	orrs	r3, r2
 8044bee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8044bf0:	687b      	ldr	r3, [r7, #4]
 8044bf2:	693a      	ldr	r2, [r7, #16]
 8044bf4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8044bf6:	683b      	ldr	r3, [r7, #0]
 8044bf8:	685b      	ldr	r3, [r3, #4]
 8044bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8044bfe:	2b00      	cmp	r3, #0
 8044c00:	f000 80a4 	beq.w	8044d4c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8044c04:	4a5a      	ldr	r2, [pc, #360]	; (8044d70 <HAL_GPIO_Init+0x2e0>)
 8044c06:	697b      	ldr	r3, [r7, #20]
 8044c08:	089b      	lsrs	r3, r3, #2
 8044c0a:	3318      	adds	r3, #24
 8044c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8044c10:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8044c12:	697b      	ldr	r3, [r7, #20]
 8044c14:	f003 0303 	and.w	r3, r3, #3
 8044c18:	00db      	lsls	r3, r3, #3
 8044c1a:	220f      	movs	r2, #15
 8044c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8044c20:	43db      	mvns	r3, r3
 8044c22:	693a      	ldr	r2, [r7, #16]
 8044c24:	4013      	ands	r3, r2
 8044c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8044c28:	687b      	ldr	r3, [r7, #4]
 8044c2a:	4a52      	ldr	r2, [pc, #328]	; (8044d74 <HAL_GPIO_Init+0x2e4>)
 8044c2c:	4293      	cmp	r3, r2
 8044c2e:	d025      	beq.n	8044c7c <HAL_GPIO_Init+0x1ec>
 8044c30:	687b      	ldr	r3, [r7, #4]
 8044c32:	4a51      	ldr	r2, [pc, #324]	; (8044d78 <HAL_GPIO_Init+0x2e8>)
 8044c34:	4293      	cmp	r3, r2
 8044c36:	d01f      	beq.n	8044c78 <HAL_GPIO_Init+0x1e8>
 8044c38:	687b      	ldr	r3, [r7, #4]
 8044c3a:	4a50      	ldr	r2, [pc, #320]	; (8044d7c <HAL_GPIO_Init+0x2ec>)
 8044c3c:	4293      	cmp	r3, r2
 8044c3e:	d019      	beq.n	8044c74 <HAL_GPIO_Init+0x1e4>
 8044c40:	687b      	ldr	r3, [r7, #4]
 8044c42:	4a4f      	ldr	r2, [pc, #316]	; (8044d80 <HAL_GPIO_Init+0x2f0>)
 8044c44:	4293      	cmp	r3, r2
 8044c46:	d013      	beq.n	8044c70 <HAL_GPIO_Init+0x1e0>
 8044c48:	687b      	ldr	r3, [r7, #4]
 8044c4a:	4a4e      	ldr	r2, [pc, #312]	; (8044d84 <HAL_GPIO_Init+0x2f4>)
 8044c4c:	4293      	cmp	r3, r2
 8044c4e:	d00d      	beq.n	8044c6c <HAL_GPIO_Init+0x1dc>
 8044c50:	687b      	ldr	r3, [r7, #4]
 8044c52:	4a4d      	ldr	r2, [pc, #308]	; (8044d88 <HAL_GPIO_Init+0x2f8>)
 8044c54:	4293      	cmp	r3, r2
 8044c56:	d007      	beq.n	8044c68 <HAL_GPIO_Init+0x1d8>
 8044c58:	687b      	ldr	r3, [r7, #4]
 8044c5a:	4a4c      	ldr	r2, [pc, #304]	; (8044d8c <HAL_GPIO_Init+0x2fc>)
 8044c5c:	4293      	cmp	r3, r2
 8044c5e:	d101      	bne.n	8044c64 <HAL_GPIO_Init+0x1d4>
 8044c60:	2306      	movs	r3, #6
 8044c62:	e00c      	b.n	8044c7e <HAL_GPIO_Init+0x1ee>
 8044c64:	2307      	movs	r3, #7
 8044c66:	e00a      	b.n	8044c7e <HAL_GPIO_Init+0x1ee>
 8044c68:	2305      	movs	r3, #5
 8044c6a:	e008      	b.n	8044c7e <HAL_GPIO_Init+0x1ee>
 8044c6c:	2304      	movs	r3, #4
 8044c6e:	e006      	b.n	8044c7e <HAL_GPIO_Init+0x1ee>
 8044c70:	2303      	movs	r3, #3
 8044c72:	e004      	b.n	8044c7e <HAL_GPIO_Init+0x1ee>
 8044c74:	2302      	movs	r3, #2
 8044c76:	e002      	b.n	8044c7e <HAL_GPIO_Init+0x1ee>
 8044c78:	2301      	movs	r3, #1
 8044c7a:	e000      	b.n	8044c7e <HAL_GPIO_Init+0x1ee>
 8044c7c:	2300      	movs	r3, #0
 8044c7e:	697a      	ldr	r2, [r7, #20]
 8044c80:	f002 0203 	and.w	r2, r2, #3
 8044c84:	00d2      	lsls	r2, r2, #3
 8044c86:	4093      	lsls	r3, r2
 8044c88:	693a      	ldr	r2, [r7, #16]
 8044c8a:	4313      	orrs	r3, r2
 8044c8c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8044c8e:	4938      	ldr	r1, [pc, #224]	; (8044d70 <HAL_GPIO_Init+0x2e0>)
 8044c90:	697b      	ldr	r3, [r7, #20]
 8044c92:	089b      	lsrs	r3, r3, #2
 8044c94:	3318      	adds	r3, #24
 8044c96:	693a      	ldr	r2, [r7, #16]
 8044c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8044c9c:	4b34      	ldr	r3, [pc, #208]	; (8044d70 <HAL_GPIO_Init+0x2e0>)
 8044c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8044ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8044ca4:	68fb      	ldr	r3, [r7, #12]
 8044ca6:	43db      	mvns	r3, r3
 8044ca8:	693a      	ldr	r2, [r7, #16]
 8044caa:	4013      	ands	r3, r2
 8044cac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8044cae:	683b      	ldr	r3, [r7, #0]
 8044cb0:	685b      	ldr	r3, [r3, #4]
 8044cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8044cb6:	2b00      	cmp	r3, #0
 8044cb8:	d003      	beq.n	8044cc2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8044cba:	693a      	ldr	r2, [r7, #16]
 8044cbc:	68fb      	ldr	r3, [r7, #12]
 8044cbe:	4313      	orrs	r3, r2
 8044cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8044cc2:	4a2b      	ldr	r2, [pc, #172]	; (8044d70 <HAL_GPIO_Init+0x2e0>)
 8044cc4:	693b      	ldr	r3, [r7, #16]
 8044cc6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8044cca:	4b29      	ldr	r3, [pc, #164]	; (8044d70 <HAL_GPIO_Init+0x2e0>)
 8044ccc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8044cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8044cd2:	68fb      	ldr	r3, [r7, #12]
 8044cd4:	43db      	mvns	r3, r3
 8044cd6:	693a      	ldr	r2, [r7, #16]
 8044cd8:	4013      	ands	r3, r2
 8044cda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8044cdc:	683b      	ldr	r3, [r7, #0]
 8044cde:	685b      	ldr	r3, [r3, #4]
 8044ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044ce4:	2b00      	cmp	r3, #0
 8044ce6:	d003      	beq.n	8044cf0 <HAL_GPIO_Init+0x260>
        {
          temp |= iocurrent;
 8044ce8:	693a      	ldr	r2, [r7, #16]
 8044cea:	68fb      	ldr	r3, [r7, #12]
 8044cec:	4313      	orrs	r3, r2
 8044cee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8044cf0:	4a1f      	ldr	r2, [pc, #124]	; (8044d70 <HAL_GPIO_Init+0x2e0>)
 8044cf2:	693b      	ldr	r3, [r7, #16]
 8044cf4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8044cf8:	4b1d      	ldr	r3, [pc, #116]	; (8044d70 <HAL_GPIO_Init+0x2e0>)
 8044cfa:	681b      	ldr	r3, [r3, #0]
 8044cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8044cfe:	68fb      	ldr	r3, [r7, #12]
 8044d00:	43db      	mvns	r3, r3
 8044d02:	693a      	ldr	r2, [r7, #16]
 8044d04:	4013      	ands	r3, r2
 8044d06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8044d08:	683b      	ldr	r3, [r7, #0]
 8044d0a:	685b      	ldr	r3, [r3, #4]
 8044d0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8044d10:	2b00      	cmp	r3, #0
 8044d12:	d003      	beq.n	8044d1c <HAL_GPIO_Init+0x28c>
        {
          temp |= iocurrent;
 8044d14:	693a      	ldr	r2, [r7, #16]
 8044d16:	68fb      	ldr	r3, [r7, #12]
 8044d18:	4313      	orrs	r3, r2
 8044d1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8044d1c:	4a14      	ldr	r2, [pc, #80]	; (8044d70 <HAL_GPIO_Init+0x2e0>)
 8044d1e:	693b      	ldr	r3, [r7, #16]
 8044d20:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8044d22:	4b13      	ldr	r3, [pc, #76]	; (8044d70 <HAL_GPIO_Init+0x2e0>)
 8044d24:	685b      	ldr	r3, [r3, #4]
 8044d26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8044d28:	68fb      	ldr	r3, [r7, #12]
 8044d2a:	43db      	mvns	r3, r3
 8044d2c:	693a      	ldr	r2, [r7, #16]
 8044d2e:	4013      	ands	r3, r2
 8044d30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8044d32:	683b      	ldr	r3, [r7, #0]
 8044d34:	685b      	ldr	r3, [r3, #4]
 8044d36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8044d3a:	2b00      	cmp	r3, #0
 8044d3c:	d003      	beq.n	8044d46 <HAL_GPIO_Init+0x2b6>
        {
          temp |= iocurrent;
 8044d3e:	693a      	ldr	r2, [r7, #16]
 8044d40:	68fb      	ldr	r3, [r7, #12]
 8044d42:	4313      	orrs	r3, r2
 8044d44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8044d46:	4a0a      	ldr	r2, [pc, #40]	; (8044d70 <HAL_GPIO_Init+0x2e0>)
 8044d48:	693b      	ldr	r3, [r7, #16]
 8044d4a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8044d4c:	697b      	ldr	r3, [r7, #20]
 8044d4e:	3301      	adds	r3, #1
 8044d50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8044d52:	683b      	ldr	r3, [r7, #0]
 8044d54:	681a      	ldr	r2, [r3, #0]
 8044d56:	697b      	ldr	r3, [r7, #20]
 8044d58:	fa22 f303 	lsr.w	r3, r2, r3
 8044d5c:	2b00      	cmp	r3, #0
 8044d5e:	f47f ae9f 	bne.w	8044aa0 <HAL_GPIO_Init+0x10>
  }
}
 8044d62:	bf00      	nop
 8044d64:	bf00      	nop
 8044d66:	371c      	adds	r7, #28
 8044d68:	46bd      	mov	sp, r7
 8044d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044d6e:	4770      	bx	lr
 8044d70:	4002f400 	.word	0x4002f400
 8044d74:	42020000 	.word	0x42020000
 8044d78:	42020400 	.word	0x42020400
 8044d7c:	42020800 	.word	0x42020800
 8044d80:	42020c00 	.word	0x42020c00
 8044d84:	42021000 	.word	0x42021000
 8044d88:	42021400 	.word	0x42021400
 8044d8c:	42021800 	.word	0x42021800

08044d90 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8044d90:	b480      	push	{r7}
 8044d92:	b087      	sub	sp, #28
 8044d94:	af00      	add	r7, sp, #0
 8044d96:	6078      	str	r0, [r7, #4]
 8044d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8044d9a:	2300      	movs	r3, #0
 8044d9c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8044d9e:	e0c7      	b.n	8044f30 <HAL_GPIO_DeInit+0x1a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8044da0:	2201      	movs	r2, #1
 8044da2:	697b      	ldr	r3, [r7, #20]
 8044da4:	fa02 f303 	lsl.w	r3, r2, r3
 8044da8:	683a      	ldr	r2, [r7, #0]
 8044daa:	4013      	ands	r3, r2
 8044dac:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0U)
 8044dae:	693b      	ldr	r3, [r7, #16]
 8044db0:	2b00      	cmp	r3, #0
 8044db2:	f000 80ba 	beq.w	8044f2a <HAL_GPIO_DeInit+0x19a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      temp = EXTI->EXTICR[position >> 2U];
 8044db6:	4a65      	ldr	r2, [pc, #404]	; (8044f4c <HAL_GPIO_DeInit+0x1bc>)
 8044db8:	697b      	ldr	r3, [r7, #20]
 8044dba:	089b      	lsrs	r3, r3, #2
 8044dbc:	3318      	adds	r3, #24
 8044dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8044dc2:	60fb      	str	r3, [r7, #12]
      temp &= ((0x0FUL) << (8U * (position & 0x03U)));
 8044dc4:	697b      	ldr	r3, [r7, #20]
 8044dc6:	f003 0303 	and.w	r3, r3, #3
 8044dca:	00db      	lsls	r3, r3, #3
 8044dcc:	220f      	movs	r2, #15
 8044dce:	fa02 f303 	lsl.w	r3, r2, r3
 8044dd2:	68fa      	ldr	r2, [r7, #12]
 8044dd4:	4013      	ands	r3, r2
 8044dd6:	60fb      	str	r3, [r7, #12]
      if(temp == (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U))))
 8044dd8:	687b      	ldr	r3, [r7, #4]
 8044dda:	4a5d      	ldr	r2, [pc, #372]	; (8044f50 <HAL_GPIO_DeInit+0x1c0>)
 8044ddc:	4293      	cmp	r3, r2
 8044dde:	d025      	beq.n	8044e2c <HAL_GPIO_DeInit+0x9c>
 8044de0:	687b      	ldr	r3, [r7, #4]
 8044de2:	4a5c      	ldr	r2, [pc, #368]	; (8044f54 <HAL_GPIO_DeInit+0x1c4>)
 8044de4:	4293      	cmp	r3, r2
 8044de6:	d01f      	beq.n	8044e28 <HAL_GPIO_DeInit+0x98>
 8044de8:	687b      	ldr	r3, [r7, #4]
 8044dea:	4a5b      	ldr	r2, [pc, #364]	; (8044f58 <HAL_GPIO_DeInit+0x1c8>)
 8044dec:	4293      	cmp	r3, r2
 8044dee:	d019      	beq.n	8044e24 <HAL_GPIO_DeInit+0x94>
 8044df0:	687b      	ldr	r3, [r7, #4]
 8044df2:	4a5a      	ldr	r2, [pc, #360]	; (8044f5c <HAL_GPIO_DeInit+0x1cc>)
 8044df4:	4293      	cmp	r3, r2
 8044df6:	d013      	beq.n	8044e20 <HAL_GPIO_DeInit+0x90>
 8044df8:	687b      	ldr	r3, [r7, #4]
 8044dfa:	4a59      	ldr	r2, [pc, #356]	; (8044f60 <HAL_GPIO_DeInit+0x1d0>)
 8044dfc:	4293      	cmp	r3, r2
 8044dfe:	d00d      	beq.n	8044e1c <HAL_GPIO_DeInit+0x8c>
 8044e00:	687b      	ldr	r3, [r7, #4]
 8044e02:	4a58      	ldr	r2, [pc, #352]	; (8044f64 <HAL_GPIO_DeInit+0x1d4>)
 8044e04:	4293      	cmp	r3, r2
 8044e06:	d007      	beq.n	8044e18 <HAL_GPIO_DeInit+0x88>
 8044e08:	687b      	ldr	r3, [r7, #4]
 8044e0a:	4a57      	ldr	r2, [pc, #348]	; (8044f68 <HAL_GPIO_DeInit+0x1d8>)
 8044e0c:	4293      	cmp	r3, r2
 8044e0e:	d101      	bne.n	8044e14 <HAL_GPIO_DeInit+0x84>
 8044e10:	2306      	movs	r3, #6
 8044e12:	e00c      	b.n	8044e2e <HAL_GPIO_DeInit+0x9e>
 8044e14:	2307      	movs	r3, #7
 8044e16:	e00a      	b.n	8044e2e <HAL_GPIO_DeInit+0x9e>
 8044e18:	2305      	movs	r3, #5
 8044e1a:	e008      	b.n	8044e2e <HAL_GPIO_DeInit+0x9e>
 8044e1c:	2304      	movs	r3, #4
 8044e1e:	e006      	b.n	8044e2e <HAL_GPIO_DeInit+0x9e>
 8044e20:	2303      	movs	r3, #3
 8044e22:	e004      	b.n	8044e2e <HAL_GPIO_DeInit+0x9e>
 8044e24:	2302      	movs	r3, #2
 8044e26:	e002      	b.n	8044e2e <HAL_GPIO_DeInit+0x9e>
 8044e28:	2301      	movs	r3, #1
 8044e2a:	e000      	b.n	8044e2e <HAL_GPIO_DeInit+0x9e>
 8044e2c:	2300      	movs	r3, #0
 8044e2e:	697a      	ldr	r2, [r7, #20]
 8044e30:	f002 0203 	and.w	r2, r2, #3
 8044e34:	00d2      	lsls	r2, r2, #3
 8044e36:	4093      	lsls	r3, r2
 8044e38:	68fa      	ldr	r2, [r7, #12]
 8044e3a:	429a      	cmp	r2, r3
 8044e3c:	d136      	bne.n	8044eac <HAL_GPIO_DeInit+0x11c>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8044e3e:	4b43      	ldr	r3, [pc, #268]	; (8044f4c <HAL_GPIO_DeInit+0x1bc>)
 8044e40:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8044e44:	693b      	ldr	r3, [r7, #16]
 8044e46:	43db      	mvns	r3, r3
 8044e48:	4940      	ldr	r1, [pc, #256]	; (8044f4c <HAL_GPIO_DeInit+0x1bc>)
 8044e4a:	4013      	ands	r3, r2
 8044e4c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8044e50:	4b3e      	ldr	r3, [pc, #248]	; (8044f4c <HAL_GPIO_DeInit+0x1bc>)
 8044e52:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8044e56:	693b      	ldr	r3, [r7, #16]
 8044e58:	43db      	mvns	r3, r3
 8044e5a:	493c      	ldr	r1, [pc, #240]	; (8044f4c <HAL_GPIO_DeInit+0x1bc>)
 8044e5c:	4013      	ands	r3, r2
 8044e5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8044e62:	4b3a      	ldr	r3, [pc, #232]	; (8044f4c <HAL_GPIO_DeInit+0x1bc>)
 8044e64:	681a      	ldr	r2, [r3, #0]
 8044e66:	693b      	ldr	r3, [r7, #16]
 8044e68:	43db      	mvns	r3, r3
 8044e6a:	4938      	ldr	r1, [pc, #224]	; (8044f4c <HAL_GPIO_DeInit+0x1bc>)
 8044e6c:	4013      	ands	r3, r2
 8044e6e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8044e70:	4b36      	ldr	r3, [pc, #216]	; (8044f4c <HAL_GPIO_DeInit+0x1bc>)
 8044e72:	685a      	ldr	r2, [r3, #4]
 8044e74:	693b      	ldr	r3, [r7, #16]
 8044e76:	43db      	mvns	r3, r3
 8044e78:	4934      	ldr	r1, [pc, #208]	; (8044f4c <HAL_GPIO_DeInit+0x1bc>)
 8044e7a:	4013      	ands	r3, r2
 8044e7c:	604b      	str	r3, [r1, #4]

        temp = (0x0FUL) << (8U * (position & 0x03U));
 8044e7e:	697b      	ldr	r3, [r7, #20]
 8044e80:	f003 0303 	and.w	r3, r3, #3
 8044e84:	00db      	lsls	r3, r3, #3
 8044e86:	220f      	movs	r2, #15
 8044e88:	fa02 f303 	lsl.w	r3, r2, r3
 8044e8c:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2U] &= ~temp;
 8044e8e:	4a2f      	ldr	r2, [pc, #188]	; (8044f4c <HAL_GPIO_DeInit+0x1bc>)
 8044e90:	697b      	ldr	r3, [r7, #20]
 8044e92:	089b      	lsrs	r3, r3, #2
 8044e94:	3318      	adds	r3, #24
 8044e96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8044e9a:	68fb      	ldr	r3, [r7, #12]
 8044e9c:	43da      	mvns	r2, r3
 8044e9e:	482b      	ldr	r0, [pc, #172]	; (8044f4c <HAL_GPIO_DeInit+0x1bc>)
 8044ea0:	697b      	ldr	r3, [r7, #20]
 8044ea2:	089b      	lsrs	r3, r3, #2
 8044ea4:	400a      	ands	r2, r1
 8044ea6:	3318      	adds	r3, #24
 8044ea8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8044eac:	687b      	ldr	r3, [r7, #4]
 8044eae:	681a      	ldr	r2, [r3, #0]
 8044eb0:	697b      	ldr	r3, [r7, #20]
 8044eb2:	005b      	lsls	r3, r3, #1
 8044eb4:	2103      	movs	r1, #3
 8044eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8044eba:	431a      	orrs	r2, r3
 8044ebc:	687b      	ldr	r3, [r7, #4]
 8044ebe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8044ec0:	697b      	ldr	r3, [r7, #20]
 8044ec2:	08da      	lsrs	r2, r3, #3
 8044ec4:	687b      	ldr	r3, [r7, #4]
 8044ec6:	3208      	adds	r2, #8
 8044ec8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8044ecc:	697b      	ldr	r3, [r7, #20]
 8044ece:	f003 0307 	and.w	r3, r3, #7
 8044ed2:	009b      	lsls	r3, r3, #2
 8044ed4:	220f      	movs	r2, #15
 8044ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8044eda:	43db      	mvns	r3, r3
 8044edc:	697a      	ldr	r2, [r7, #20]
 8044ede:	08d2      	lsrs	r2, r2, #3
 8044ee0:	4019      	ands	r1, r3
 8044ee2:	687b      	ldr	r3, [r7, #4]
 8044ee4:	3208      	adds	r2, #8
 8044ee6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8044eea:	687b      	ldr	r3, [r7, #4]
 8044eec:	689a      	ldr	r2, [r3, #8]
 8044eee:	697b      	ldr	r3, [r7, #20]
 8044ef0:	005b      	lsls	r3, r3, #1
 8044ef2:	2103      	movs	r1, #3
 8044ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8044ef8:	43db      	mvns	r3, r3
 8044efa:	401a      	ands	r2, r3
 8044efc:	687b      	ldr	r3, [r7, #4]
 8044efe:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8044f00:	687b      	ldr	r3, [r7, #4]
 8044f02:	685a      	ldr	r2, [r3, #4]
 8044f04:	2101      	movs	r1, #1
 8044f06:	697b      	ldr	r3, [r7, #20]
 8044f08:	fa01 f303 	lsl.w	r3, r1, r3
 8044f0c:	43db      	mvns	r3, r3
 8044f0e:	401a      	ands	r2, r3
 8044f10:	687b      	ldr	r3, [r7, #4]
 8044f12:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8044f14:	687b      	ldr	r3, [r7, #4]
 8044f16:	68da      	ldr	r2, [r3, #12]
 8044f18:	697b      	ldr	r3, [r7, #20]
 8044f1a:	005b      	lsls	r3, r3, #1
 8044f1c:	2103      	movs	r1, #3
 8044f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8044f22:	43db      	mvns	r3, r3
 8044f24:	401a      	ands	r2, r3
 8044f26:	687b      	ldr	r3, [r7, #4]
 8044f28:	60da      	str	r2, [r3, #12]
    }

    position++;
 8044f2a:	697b      	ldr	r3, [r7, #20]
 8044f2c:	3301      	adds	r3, #1
 8044f2e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8044f30:	683a      	ldr	r2, [r7, #0]
 8044f32:	697b      	ldr	r3, [r7, #20]
 8044f34:	fa22 f303 	lsr.w	r3, r2, r3
 8044f38:	2b00      	cmp	r3, #0
 8044f3a:	f47f af31 	bne.w	8044da0 <HAL_GPIO_DeInit+0x10>
  }
}
 8044f3e:	bf00      	nop
 8044f40:	bf00      	nop
 8044f42:	371c      	adds	r7, #28
 8044f44:	46bd      	mov	sp, r7
 8044f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044f4a:	4770      	bx	lr
 8044f4c:	4002f400 	.word	0x4002f400
 8044f50:	42020000 	.word	0x42020000
 8044f54:	42020400 	.word	0x42020400
 8044f58:	42020800 	.word	0x42020800
 8044f5c:	42020c00 	.word	0x42020c00
 8044f60:	42021000 	.word	0x42021000
 8044f64:	42021400 	.word	0x42021400
 8044f68:	42021800 	.word	0x42021800

08044f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8044f6c:	b480      	push	{r7}
 8044f6e:	b083      	sub	sp, #12
 8044f70:	af00      	add	r7, sp, #0
 8044f72:	6078      	str	r0, [r7, #4]
 8044f74:	460b      	mov	r3, r1
 8044f76:	807b      	strh	r3, [r7, #2]
 8044f78:	4613      	mov	r3, r2
 8044f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8044f7c:	787b      	ldrb	r3, [r7, #1]
 8044f7e:	2b00      	cmp	r3, #0
 8044f80:	d003      	beq.n	8044f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8044f82:	887a      	ldrh	r2, [r7, #2]
 8044f84:	687b      	ldr	r3, [r7, #4]
 8044f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8044f88:	e002      	b.n	8044f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8044f8a:	887a      	ldrh	r2, [r7, #2]
 8044f8c:	687b      	ldr	r3, [r7, #4]
 8044f8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8044f90:	bf00      	nop
 8044f92:	370c      	adds	r7, #12
 8044f94:	46bd      	mov	sp, r7
 8044f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044f9a:	4770      	bx	lr

08044f9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8044f9c:	b580      	push	{r7, lr}
 8044f9e:	b082      	sub	sp, #8
 8044fa0:	af00      	add	r7, sp, #0
 8044fa2:	4603      	mov	r3, r0
 8044fa4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8044fa6:	4b0f      	ldr	r3, [pc, #60]	; (8044fe4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8044fa8:	68da      	ldr	r2, [r3, #12]
 8044faa:	88fb      	ldrh	r3, [r7, #6]
 8044fac:	4013      	ands	r3, r2
 8044fae:	2b00      	cmp	r3, #0
 8044fb0:	d006      	beq.n	8044fc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8044fb2:	4a0c      	ldr	r2, [pc, #48]	; (8044fe4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8044fb4:	88fb      	ldrh	r3, [r7, #6]
 8044fb6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8044fb8:	88fb      	ldrh	r3, [r7, #6]
 8044fba:	4618      	mov	r0, r3
 8044fbc:	f000 f814 	bl	8044fe8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if(__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8044fc0:	4b08      	ldr	r3, [pc, #32]	; (8044fe4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8044fc2:	691a      	ldr	r2, [r3, #16]
 8044fc4:	88fb      	ldrh	r3, [r7, #6]
 8044fc6:	4013      	ands	r3, r2
 8044fc8:	2b00      	cmp	r3, #0
 8044fca:	d006      	beq.n	8044fda <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8044fcc:	4a05      	ldr	r2, [pc, #20]	; (8044fe4 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8044fce:	88fb      	ldrh	r3, [r7, #6]
 8044fd0:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8044fd2:	88fb      	ldrh	r3, [r7, #6]
 8044fd4:	4618      	mov	r0, r3
 8044fd6:	f000 f812 	bl	8044ffe <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8044fda:	bf00      	nop
 8044fdc:	3708      	adds	r7, #8
 8044fde:	46bd      	mov	sp, r7
 8044fe0:	bd80      	pop	{r7, pc}
 8044fe2:	bf00      	nop
 8044fe4:	4002f400 	.word	0x4002f400

08044fe8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8044fe8:	b480      	push	{r7}
 8044fea:	b083      	sub	sp, #12
 8044fec:	af00      	add	r7, sp, #0
 8044fee:	4603      	mov	r3, r0
 8044ff0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8044ff2:	bf00      	nop
 8044ff4:	370c      	adds	r7, #12
 8044ff6:	46bd      	mov	sp, r7
 8044ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044ffc:	4770      	bx	lr

08044ffe <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8044ffe:	b480      	push	{r7}
 8045000:	b083      	sub	sp, #12
 8045002:	af00      	add	r7, sp, #0
 8045004:	4603      	mov	r3, r0
 8045006:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8045008:	bf00      	nop
 804500a:	370c      	adds	r7, #12
 804500c:	46bd      	mov	sp, r7
 804500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045012:	4770      	bx	lr

08045014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8045014:	b580      	push	{r7, lr}
 8045016:	b082      	sub	sp, #8
 8045018:	af00      	add	r7, sp, #0
 804501a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 804501c:	687b      	ldr	r3, [r7, #4]
 804501e:	2b00      	cmp	r3, #0
 8045020:	d101      	bne.n	8045026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8045022:	2301      	movs	r3, #1
 8045024:	e0a7      	b.n	8045176 <HAL_I2C_Init+0x162>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8045026:	687b      	ldr	r3, [r7, #4]
 8045028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804502c:	b2db      	uxtb	r3, r3
 804502e:	2b00      	cmp	r3, #0
 8045030:	d12c      	bne.n	804508c <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8045032:	687b      	ldr	r3, [r7, #4]
 8045034:	2200      	movs	r2, #0
 8045036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 804503a:	687b      	ldr	r3, [r7, #4]
 804503c:	4a50      	ldr	r2, [pc, #320]	; (8045180 <HAL_I2C_Init+0x16c>)
 804503e:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8045040:	687b      	ldr	r3, [r7, #4]
 8045042:	4a50      	ldr	r2, [pc, #320]	; (8045184 <HAL_I2C_Init+0x170>)
 8045044:	651a      	str	r2, [r3, #80]	; 0x50
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8045046:	687b      	ldr	r3, [r7, #4]
 8045048:	4a4f      	ldr	r2, [pc, #316]	; (8045188 <HAL_I2C_Init+0x174>)
 804504a:	655a      	str	r2, [r3, #84]	; 0x54
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 804504c:	687b      	ldr	r3, [r7, #4]
 804504e:	4a4f      	ldr	r2, [pc, #316]	; (804518c <HAL_I2C_Init+0x178>)
 8045050:	659a      	str	r2, [r3, #88]	; 0x58
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8045052:	687b      	ldr	r3, [r7, #4]
 8045054:	4a4e      	ldr	r2, [pc, #312]	; (8045190 <HAL_I2C_Init+0x17c>)
 8045056:	65da      	str	r2, [r3, #92]	; 0x5c
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8045058:	687b      	ldr	r3, [r7, #4]
 804505a:	4a4e      	ldr	r2, [pc, #312]	; (8045194 <HAL_I2C_Init+0x180>)
 804505c:	661a      	str	r2, [r3, #96]	; 0x60
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 804505e:	687b      	ldr	r3, [r7, #4]
 8045060:	4a4d      	ldr	r2, [pc, #308]	; (8045198 <HAL_I2C_Init+0x184>)
 8045062:	665a      	str	r2, [r3, #100]	; 0x64
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8045064:	687b      	ldr	r3, [r7, #4]
 8045066:	4a4d      	ldr	r2, [pc, #308]	; (804519c <HAL_I2C_Init+0x188>)
 8045068:	669a      	str	r2, [r3, #104]	; 0x68
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 804506a:	687b      	ldr	r3, [r7, #4]
 804506c:	4a4c      	ldr	r2, [pc, #304]	; (80451a0 <HAL_I2C_Init+0x18c>)
 804506e:	66da      	str	r2, [r3, #108]	; 0x6c
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8045070:	687b      	ldr	r3, [r7, #4]
 8045072:	4a4c      	ldr	r2, [pc, #304]	; (80451a4 <HAL_I2C_Init+0x190>)
 8045074:	671a      	str	r2, [r3, #112]	; 0x70

    if (hi2c->MspInitCallback == NULL)
 8045076:	687b      	ldr	r3, [r7, #4]
 8045078:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804507a:	2b00      	cmp	r3, #0
 804507c:	d102      	bne.n	8045084 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 804507e:	687b      	ldr	r3, [r7, #4]
 8045080:	4a49      	ldr	r2, [pc, #292]	; (80451a8 <HAL_I2C_Init+0x194>)
 8045082:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
 8045084:	687b      	ldr	r3, [r7, #4]
 8045086:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8045088:	6878      	ldr	r0, [r7, #4]
 804508a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 804508c:	687b      	ldr	r3, [r7, #4]
 804508e:	2224      	movs	r2, #36	; 0x24
 8045090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8045094:	687b      	ldr	r3, [r7, #4]
 8045096:	681b      	ldr	r3, [r3, #0]
 8045098:	681a      	ldr	r2, [r3, #0]
 804509a:	687b      	ldr	r3, [r7, #4]
 804509c:	681b      	ldr	r3, [r3, #0]
 804509e:	f022 0201 	bic.w	r2, r2, #1
 80450a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80450a4:	687b      	ldr	r3, [r7, #4]
 80450a6:	685a      	ldr	r2, [r3, #4]
 80450a8:	687b      	ldr	r3, [r7, #4]
 80450aa:	681b      	ldr	r3, [r3, #0]
 80450ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80450b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80450b2:	687b      	ldr	r3, [r7, #4]
 80450b4:	681b      	ldr	r3, [r3, #0]
 80450b6:	689a      	ldr	r2, [r3, #8]
 80450b8:	687b      	ldr	r3, [r7, #4]
 80450ba:	681b      	ldr	r3, [r3, #0]
 80450bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80450c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80450c2:	687b      	ldr	r3, [r7, #4]
 80450c4:	68db      	ldr	r3, [r3, #12]
 80450c6:	2b01      	cmp	r3, #1
 80450c8:	d107      	bne.n	80450da <HAL_I2C_Init+0xc6>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80450ca:	687b      	ldr	r3, [r7, #4]
 80450cc:	689a      	ldr	r2, [r3, #8]
 80450ce:	687b      	ldr	r3, [r7, #4]
 80450d0:	681b      	ldr	r3, [r3, #0]
 80450d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80450d6:	609a      	str	r2, [r3, #8]
 80450d8:	e006      	b.n	80450e8 <HAL_I2C_Init+0xd4>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80450da:	687b      	ldr	r3, [r7, #4]
 80450dc:	689a      	ldr	r2, [r3, #8]
 80450de:	687b      	ldr	r3, [r7, #4]
 80450e0:	681b      	ldr	r3, [r3, #0]
 80450e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80450e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80450e8:	687b      	ldr	r3, [r7, #4]
 80450ea:	68db      	ldr	r3, [r3, #12]
 80450ec:	2b02      	cmp	r3, #2
 80450ee:	d104      	bne.n	80450fa <HAL_I2C_Init+0xe6>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80450f0:	687b      	ldr	r3, [r7, #4]
 80450f2:	681b      	ldr	r3, [r3, #0]
 80450f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80450f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80450fa:	687b      	ldr	r3, [r7, #4]
 80450fc:	681b      	ldr	r3, [r3, #0]
 80450fe:	685b      	ldr	r3, [r3, #4]
 8045100:	687a      	ldr	r2, [r7, #4]
 8045102:	6812      	ldr	r2, [r2, #0]
 8045104:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8045108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 804510c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 804510e:	687b      	ldr	r3, [r7, #4]
 8045110:	681b      	ldr	r3, [r3, #0]
 8045112:	68da      	ldr	r2, [r3, #12]
 8045114:	687b      	ldr	r3, [r7, #4]
 8045116:	681b      	ldr	r3, [r3, #0]
 8045118:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 804511c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 804511e:	687b      	ldr	r3, [r7, #4]
 8045120:	691a      	ldr	r2, [r3, #16]
 8045122:	687b      	ldr	r3, [r7, #4]
 8045124:	695b      	ldr	r3, [r3, #20]
 8045126:	ea42 0103 	orr.w	r1, r2, r3
 804512a:	687b      	ldr	r3, [r7, #4]
 804512c:	699b      	ldr	r3, [r3, #24]
 804512e:	021a      	lsls	r2, r3, #8
 8045130:	687b      	ldr	r3, [r7, #4]
 8045132:	681b      	ldr	r3, [r3, #0]
 8045134:	430a      	orrs	r2, r1
 8045136:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8045138:	687b      	ldr	r3, [r7, #4]
 804513a:	69d9      	ldr	r1, [r3, #28]
 804513c:	687b      	ldr	r3, [r7, #4]
 804513e:	6a1a      	ldr	r2, [r3, #32]
 8045140:	687b      	ldr	r3, [r7, #4]
 8045142:	681b      	ldr	r3, [r3, #0]
 8045144:	430a      	orrs	r2, r1
 8045146:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8045148:	687b      	ldr	r3, [r7, #4]
 804514a:	681b      	ldr	r3, [r3, #0]
 804514c:	681a      	ldr	r2, [r3, #0]
 804514e:	687b      	ldr	r3, [r7, #4]
 8045150:	681b      	ldr	r3, [r3, #0]
 8045152:	f042 0201 	orr.w	r2, r2, #1
 8045156:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8045158:	687b      	ldr	r3, [r7, #4]
 804515a:	2200      	movs	r2, #0
 804515c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 804515e:	687b      	ldr	r3, [r7, #4]
 8045160:	2220      	movs	r2, #32
 8045162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8045166:	687b      	ldr	r3, [r7, #4]
 8045168:	2200      	movs	r2, #0
 804516a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 804516c:	687b      	ldr	r3, [r7, #4]
 804516e:	2200      	movs	r2, #0
 8045170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8045174:	2300      	movs	r3, #0
}
 8045176:	4618      	mov	r0, r3
 8045178:	3708      	adds	r7, #8
 804517a:	46bd      	mov	sp, r7
 804517c:	bd80      	pop	{r7, pc}
 804517e:	bf00      	nop
 8045180:	0804584f 	.word	0x0804584f
 8045184:	08045863 	.word	0x08045863
 8045188:	08045877 	.word	0x08045877
 804518c:	0804588b 	.word	0x0804588b
 8045190:	080458bb 	.word	0x080458bb
 8045194:	080458cf 	.word	0x080458cf
 8045198:	080458e3 	.word	0x080458e3
 804519c:	080458f7 	.word	0x080458f7
 80451a0:	0804590b 	.word	0x0804590b
 80451a4:	0804589f 	.word	0x0804589f
 80451a8:	08040c71 	.word	0x08040c71

080451ac <HAL_I2C_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_RegisterCallback(I2C_HandleTypeDef *hi2c, HAL_I2C_CallbackIDTypeDef CallbackID,
                                           pI2C_CallbackTypeDef pCallback)
{
 80451ac:	b480      	push	{r7}
 80451ae:	b087      	sub	sp, #28
 80451b0:	af00      	add	r7, sp, #0
 80451b2:	60f8      	str	r0, [r7, #12]
 80451b4:	460b      	mov	r3, r1
 80451b6:	607a      	str	r2, [r7, #4]
 80451b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80451ba:	2300      	movs	r3, #0
 80451bc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80451be:	687b      	ldr	r3, [r7, #4]
 80451c0:	2b00      	cmp	r3, #0
 80451c2:	d107      	bne.n	80451d4 <HAL_I2C_RegisterCallback+0x28>
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 80451c4:	68fb      	ldr	r3, [r7, #12]
 80451c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80451c8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80451cc:	68fb      	ldr	r3, [r7, #12]
 80451ce:	645a      	str	r2, [r3, #68]	; 0x44

    return HAL_ERROR;
 80451d0:	2301      	movs	r3, #1
 80451d2:	e08c      	b.n	80452ee <HAL_I2C_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(hi2c);
 80451d4:	68fb      	ldr	r3, [r7, #12]
 80451d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80451da:	2b01      	cmp	r3, #1
 80451dc:	d101      	bne.n	80451e2 <HAL_I2C_RegisterCallback+0x36>
 80451de:	2302      	movs	r3, #2
 80451e0:	e085      	b.n	80452ee <HAL_I2C_RegisterCallback+0x142>
 80451e2:	68fb      	ldr	r3, [r7, #12]
 80451e4:	2201      	movs	r2, #1
 80451e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (HAL_I2C_STATE_READY == hi2c->State)
 80451ea:	68fb      	ldr	r3, [r7, #12]
 80451ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80451f0:	b2db      	uxtb	r3, r3
 80451f2:	2b20      	cmp	r3, #32
 80451f4:	d151      	bne.n	804529a <HAL_I2C_RegisterCallback+0xee>
  {
    switch (CallbackID)
 80451f6:	7afb      	ldrb	r3, [r7, #11]
 80451f8:	2b0a      	cmp	r3, #10
 80451fa:	d845      	bhi.n	8045288 <HAL_I2C_RegisterCallback+0xdc>
 80451fc:	a201      	add	r2, pc, #4	; (adr r2, 8045204 <HAL_I2C_RegisterCallback+0x58>)
 80451fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045202:	bf00      	nop
 8045204:	08045231 	.word	0x08045231
 8045208:	08045239 	.word	0x08045239
 804520c:	08045241 	.word	0x08045241
 8045210:	08045249 	.word	0x08045249
 8045214:	08045251 	.word	0x08045251
 8045218:	08045259 	.word	0x08045259
 804521c:	08045261 	.word	0x08045261
 8045220:	08045269 	.word	0x08045269
 8045224:	08045271 	.word	0x08045271
 8045228:	08045279 	.word	0x08045279
 804522c:	08045281 	.word	0x08045281
    {
      case HAL_I2C_MASTER_TX_COMPLETE_CB_ID :
        hi2c->MasterTxCpltCallback = pCallback;
 8045230:	68fb      	ldr	r3, [r7, #12]
 8045232:	687a      	ldr	r2, [r7, #4]
 8045234:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8045236:	e055      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MASTER_RX_COMPLETE_CB_ID :
        hi2c->MasterRxCpltCallback = pCallback;
 8045238:	68fb      	ldr	r3, [r7, #12]
 804523a:	687a      	ldr	r2, [r7, #4]
 804523c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 804523e:	e051      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_SLAVE_TX_COMPLETE_CB_ID :
        hi2c->SlaveTxCpltCallback = pCallback;
 8045240:	68fb      	ldr	r3, [r7, #12]
 8045242:	687a      	ldr	r2, [r7, #4]
 8045244:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8045246:	e04d      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_SLAVE_RX_COMPLETE_CB_ID :
        hi2c->SlaveRxCpltCallback = pCallback;
 8045248:	68fb      	ldr	r3, [r7, #12]
 804524a:	687a      	ldr	r2, [r7, #4]
 804524c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 804524e:	e049      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_LISTEN_COMPLETE_CB_ID :
        hi2c->ListenCpltCallback = pCallback;
 8045250:	68fb      	ldr	r3, [r7, #12]
 8045252:	687a      	ldr	r2, [r7, #4]
 8045254:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8045256:	e045      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MEM_TX_COMPLETE_CB_ID :
        hi2c->MemTxCpltCallback = pCallback;
 8045258:	68fb      	ldr	r3, [r7, #12]
 804525a:	687a      	ldr	r2, [r7, #4]
 804525c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 804525e:	e041      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MEM_RX_COMPLETE_CB_ID :
        hi2c->MemRxCpltCallback = pCallback;
 8045260:	68fb      	ldr	r3, [r7, #12]
 8045262:	687a      	ldr	r2, [r7, #4]
 8045264:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8045266:	e03d      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_ERROR_CB_ID :
        hi2c->ErrorCallback = pCallback;
 8045268:	68fb      	ldr	r3, [r7, #12]
 804526a:	687a      	ldr	r2, [r7, #4]
 804526c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 804526e:	e039      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_ABORT_CB_ID :
        hi2c->AbortCpltCallback = pCallback;
 8045270:	68fb      	ldr	r3, [r7, #12]
 8045272:	687a      	ldr	r2, [r7, #4]
 8045274:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8045276:	e035      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 8045278:	68fb      	ldr	r3, [r7, #12]
 804527a:	687a      	ldr	r2, [r7, #4]
 804527c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 804527e:	e031      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 8045280:	68fb      	ldr	r3, [r7, #12]
 8045282:	687a      	ldr	r2, [r7, #4]
 8045284:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8045286:	e02d      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 8045288:	68fb      	ldr	r3, [r7, #12]
 804528a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804528c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8045290:	68fb      	ldr	r3, [r7, #12]
 8045292:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 8045294:	2301      	movs	r3, #1
 8045296:	75fb      	strb	r3, [r7, #23]
        break;
 8045298:	e024      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>
    }
  }
  else if (HAL_I2C_STATE_RESET == hi2c->State)
 804529a:	68fb      	ldr	r3, [r7, #12]
 804529c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80452a0:	b2db      	uxtb	r3, r3
 80452a2:	2b00      	cmp	r3, #0
 80452a4:	d116      	bne.n	80452d4 <HAL_I2C_RegisterCallback+0x128>
  {
    switch (CallbackID)
 80452a6:	7afb      	ldrb	r3, [r7, #11]
 80452a8:	2b09      	cmp	r3, #9
 80452aa:	d002      	beq.n	80452b2 <HAL_I2C_RegisterCallback+0x106>
 80452ac:	2b0a      	cmp	r3, #10
 80452ae:	d004      	beq.n	80452ba <HAL_I2C_RegisterCallback+0x10e>
 80452b0:	e007      	b.n	80452c2 <HAL_I2C_RegisterCallback+0x116>
    {
      case HAL_I2C_MSPINIT_CB_ID :
        hi2c->MspInitCallback = pCallback;
 80452b2:	68fb      	ldr	r3, [r7, #12]
 80452b4:	687a      	ldr	r2, [r7, #4]
 80452b6:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80452b8:	e014      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>

      case HAL_I2C_MSPDEINIT_CB_ID :
        hi2c->MspDeInitCallback = pCallback;
 80452ba:	68fb      	ldr	r3, [r7, #12]
 80452bc:	687a      	ldr	r2, [r7, #4]
 80452be:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80452c0:	e010      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>

      default :
        /* Update the error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 80452c2:	68fb      	ldr	r3, [r7, #12]
 80452c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80452c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80452ca:	68fb      	ldr	r3, [r7, #12]
 80452cc:	645a      	str	r2, [r3, #68]	; 0x44

        /* Return error status */
        status =  HAL_ERROR;
 80452ce:	2301      	movs	r3, #1
 80452d0:	75fb      	strb	r3, [r7, #23]
        break;
 80452d2:	e007      	b.n	80452e4 <HAL_I2C_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_INVALID_CALLBACK;
 80452d4:	68fb      	ldr	r3, [r7, #12]
 80452d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80452d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80452dc:	68fb      	ldr	r3, [r7, #12]
 80452de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Return error status */
    status =  HAL_ERROR;
 80452e0:	2301      	movs	r3, #1
 80452e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80452e4:	68fb      	ldr	r3, [r7, #12]
 80452e6:	2200      	movs	r2, #0
 80452e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return status;
 80452ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80452ee:	4618      	mov	r0, r3
 80452f0:	371c      	adds	r7, #28
 80452f2:	46bd      	mov	sp, r7
 80452f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80452f8:	4770      	bx	lr
 80452fa:	bf00      	nop

080452fc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80452fc:	b580      	push	{r7, lr}
 80452fe:	b088      	sub	sp, #32
 8045300:	af02      	add	r7, sp, #8
 8045302:	60f8      	str	r0, [r7, #12]
 8045304:	4608      	mov	r0, r1
 8045306:	4611      	mov	r1, r2
 8045308:	461a      	mov	r2, r3
 804530a:	4603      	mov	r3, r0
 804530c:	817b      	strh	r3, [r7, #10]
 804530e:	460b      	mov	r3, r1
 8045310:	813b      	strh	r3, [r7, #8]
 8045312:	4613      	mov	r3, r2
 8045314:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8045316:	68fb      	ldr	r3, [r7, #12]
 8045318:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804531c:	b2db      	uxtb	r3, r3
 804531e:	2b20      	cmp	r3, #32
 8045320:	f040 80f9 	bne.w	8045516 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8045324:	6a3b      	ldr	r3, [r7, #32]
 8045326:	2b00      	cmp	r3, #0
 8045328:	d002      	beq.n	8045330 <HAL_I2C_Mem_Write+0x34>
 804532a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 804532c:	2b00      	cmp	r3, #0
 804532e:	d105      	bne.n	804533c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8045330:	68fb      	ldr	r3, [r7, #12]
 8045332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8045336:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8045338:	2301      	movs	r3, #1
 804533a:	e0ed      	b.n	8045518 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 804533c:	68fb      	ldr	r3, [r7, #12]
 804533e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8045342:	2b01      	cmp	r3, #1
 8045344:	d101      	bne.n	804534a <HAL_I2C_Mem_Write+0x4e>
 8045346:	2302      	movs	r3, #2
 8045348:	e0e6      	b.n	8045518 <HAL_I2C_Mem_Write+0x21c>
 804534a:	68fb      	ldr	r3, [r7, #12]
 804534c:	2201      	movs	r2, #1
 804534e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8045352:	f7fd fbc7 	bl	8042ae4 <HAL_GetTick>
 8045356:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8045358:	697b      	ldr	r3, [r7, #20]
 804535a:	9300      	str	r3, [sp, #0]
 804535c:	2319      	movs	r3, #25
 804535e:	2201      	movs	r2, #1
 8045360:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8045364:	68f8      	ldr	r0, [r7, #12]
 8045366:	f001 f820 	bl	80463aa <I2C_WaitOnFlagUntilTimeout>
 804536a:	4603      	mov	r3, r0
 804536c:	2b00      	cmp	r3, #0
 804536e:	d001      	beq.n	8045374 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8045370:	2301      	movs	r3, #1
 8045372:	e0d1      	b.n	8045518 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8045374:	68fb      	ldr	r3, [r7, #12]
 8045376:	2221      	movs	r2, #33	; 0x21
 8045378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 804537c:	68fb      	ldr	r3, [r7, #12]
 804537e:	2240      	movs	r2, #64	; 0x40
 8045380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8045384:	68fb      	ldr	r3, [r7, #12]
 8045386:	2200      	movs	r2, #0
 8045388:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 804538a:	68fb      	ldr	r3, [r7, #12]
 804538c:	6a3a      	ldr	r2, [r7, #32]
 804538e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8045390:	68fb      	ldr	r3, [r7, #12]
 8045392:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8045394:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8045396:	68fb      	ldr	r3, [r7, #12]
 8045398:	2200      	movs	r2, #0
 804539a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 804539c:	88f8      	ldrh	r0, [r7, #6]
 804539e:	893a      	ldrh	r2, [r7, #8]
 80453a0:	8979      	ldrh	r1, [r7, #10]
 80453a2:	697b      	ldr	r3, [r7, #20]
 80453a4:	9301      	str	r3, [sp, #4]
 80453a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80453a8:	9300      	str	r3, [sp, #0]
 80453aa:	4603      	mov	r3, r0
 80453ac:	68f8      	ldr	r0, [r7, #12]
 80453ae:	f000 fbd3 	bl	8045b58 <I2C_RequestMemoryWrite>
 80453b2:	4603      	mov	r3, r0
 80453b4:	2b00      	cmp	r3, #0
 80453b6:	d005      	beq.n	80453c4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80453b8:	68fb      	ldr	r3, [r7, #12]
 80453ba:	2200      	movs	r2, #0
 80453bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80453c0:	2301      	movs	r3, #1
 80453c2:	e0a9      	b.n	8045518 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80453c4:	68fb      	ldr	r3, [r7, #12]
 80453c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80453c8:	b29b      	uxth	r3, r3
 80453ca:	2bff      	cmp	r3, #255	; 0xff
 80453cc:	d90e      	bls.n	80453ec <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80453ce:	68fb      	ldr	r3, [r7, #12]
 80453d0:	22ff      	movs	r2, #255	; 0xff
 80453d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80453d4:	68fb      	ldr	r3, [r7, #12]
 80453d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80453d8:	b2da      	uxtb	r2, r3
 80453da:	8979      	ldrh	r1, [r7, #10]
 80453dc:	2300      	movs	r3, #0
 80453de:	9300      	str	r3, [sp, #0]
 80453e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80453e4:	68f8      	ldr	r0, [r7, #12]
 80453e6:	f001 f903 	bl	80465f0 <I2C_TransferConfig>
 80453ea:	e00f      	b.n	804540c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80453ec:	68fb      	ldr	r3, [r7, #12]
 80453ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80453f0:	b29a      	uxth	r2, r3
 80453f2:	68fb      	ldr	r3, [r7, #12]
 80453f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80453f6:	68fb      	ldr	r3, [r7, #12]
 80453f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80453fa:	b2da      	uxtb	r2, r3
 80453fc:	8979      	ldrh	r1, [r7, #10]
 80453fe:	2300      	movs	r3, #0
 8045400:	9300      	str	r3, [sp, #0]
 8045402:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8045406:	68f8      	ldr	r0, [r7, #12]
 8045408:	f001 f8f2 	bl	80465f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 804540c:	697a      	ldr	r2, [r7, #20]
 804540e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8045410:	68f8      	ldr	r0, [r7, #12]
 8045412:	f001 f80a 	bl	804642a <I2C_WaitOnTXISFlagUntilTimeout>
 8045416:	4603      	mov	r3, r0
 8045418:	2b00      	cmp	r3, #0
 804541a:	d001      	beq.n	8045420 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 804541c:	2301      	movs	r3, #1
 804541e:	e07b      	b.n	8045518 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8045420:	68fb      	ldr	r3, [r7, #12]
 8045422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045424:	781a      	ldrb	r2, [r3, #0]
 8045426:	68fb      	ldr	r3, [r7, #12]
 8045428:	681b      	ldr	r3, [r3, #0]
 804542a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 804542c:	68fb      	ldr	r3, [r7, #12]
 804542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045430:	1c5a      	adds	r2, r3, #1
 8045432:	68fb      	ldr	r3, [r7, #12]
 8045434:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8045436:	68fb      	ldr	r3, [r7, #12]
 8045438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 804543a:	b29b      	uxth	r3, r3
 804543c:	3b01      	subs	r3, #1
 804543e:	b29a      	uxth	r2, r3
 8045440:	68fb      	ldr	r3, [r7, #12]
 8045442:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8045444:	68fb      	ldr	r3, [r7, #12]
 8045446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8045448:	3b01      	subs	r3, #1
 804544a:	b29a      	uxth	r2, r3
 804544c:	68fb      	ldr	r3, [r7, #12]
 804544e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8045450:	68fb      	ldr	r3, [r7, #12]
 8045452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045454:	b29b      	uxth	r3, r3
 8045456:	2b00      	cmp	r3, #0
 8045458:	d034      	beq.n	80454c4 <HAL_I2C_Mem_Write+0x1c8>
 804545a:	68fb      	ldr	r3, [r7, #12]
 804545c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804545e:	2b00      	cmp	r3, #0
 8045460:	d130      	bne.n	80454c4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8045462:	697b      	ldr	r3, [r7, #20]
 8045464:	9300      	str	r3, [sp, #0]
 8045466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045468:	2200      	movs	r2, #0
 804546a:	2180      	movs	r1, #128	; 0x80
 804546c:	68f8      	ldr	r0, [r7, #12]
 804546e:	f000 ff9c 	bl	80463aa <I2C_WaitOnFlagUntilTimeout>
 8045472:	4603      	mov	r3, r0
 8045474:	2b00      	cmp	r3, #0
 8045476:	d001      	beq.n	804547c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8045478:	2301      	movs	r3, #1
 804547a:	e04d      	b.n	8045518 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 804547c:	68fb      	ldr	r3, [r7, #12]
 804547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045480:	b29b      	uxth	r3, r3
 8045482:	2bff      	cmp	r3, #255	; 0xff
 8045484:	d90e      	bls.n	80454a4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8045486:	68fb      	ldr	r3, [r7, #12]
 8045488:	22ff      	movs	r2, #255	; 0xff
 804548a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 804548c:	68fb      	ldr	r3, [r7, #12]
 804548e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8045490:	b2da      	uxtb	r2, r3
 8045492:	8979      	ldrh	r1, [r7, #10]
 8045494:	2300      	movs	r3, #0
 8045496:	9300      	str	r3, [sp, #0]
 8045498:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 804549c:	68f8      	ldr	r0, [r7, #12]
 804549e:	f001 f8a7 	bl	80465f0 <I2C_TransferConfig>
 80454a2:	e00f      	b.n	80454c4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80454a4:	68fb      	ldr	r3, [r7, #12]
 80454a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80454a8:	b29a      	uxth	r2, r3
 80454aa:	68fb      	ldr	r3, [r7, #12]
 80454ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80454ae:	68fb      	ldr	r3, [r7, #12]
 80454b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80454b2:	b2da      	uxtb	r2, r3
 80454b4:	8979      	ldrh	r1, [r7, #10]
 80454b6:	2300      	movs	r3, #0
 80454b8:	9300      	str	r3, [sp, #0]
 80454ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80454be:	68f8      	ldr	r0, [r7, #12]
 80454c0:	f001 f896 	bl	80465f0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80454c4:	68fb      	ldr	r3, [r7, #12]
 80454c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80454c8:	b29b      	uxth	r3, r3
 80454ca:	2b00      	cmp	r3, #0
 80454cc:	d19e      	bne.n	804540c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80454ce:	697a      	ldr	r2, [r7, #20]
 80454d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80454d2:	68f8      	ldr	r0, [r7, #12]
 80454d4:	f000 ffe9 	bl	80464aa <I2C_WaitOnSTOPFlagUntilTimeout>
 80454d8:	4603      	mov	r3, r0
 80454da:	2b00      	cmp	r3, #0
 80454dc:	d001      	beq.n	80454e2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80454de:	2301      	movs	r3, #1
 80454e0:	e01a      	b.n	8045518 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80454e2:	68fb      	ldr	r3, [r7, #12]
 80454e4:	681b      	ldr	r3, [r3, #0]
 80454e6:	2220      	movs	r2, #32
 80454e8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80454ea:	68fb      	ldr	r3, [r7, #12]
 80454ec:	681b      	ldr	r3, [r3, #0]
 80454ee:	6859      	ldr	r1, [r3, #4]
 80454f0:	68fb      	ldr	r3, [r7, #12]
 80454f2:	681a      	ldr	r2, [r3, #0]
 80454f4:	4b0a      	ldr	r3, [pc, #40]	; (8045520 <HAL_I2C_Mem_Write+0x224>)
 80454f6:	400b      	ands	r3, r1
 80454f8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80454fa:	68fb      	ldr	r3, [r7, #12]
 80454fc:	2220      	movs	r2, #32
 80454fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8045502:	68fb      	ldr	r3, [r7, #12]
 8045504:	2200      	movs	r2, #0
 8045506:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804550a:	68fb      	ldr	r3, [r7, #12]
 804550c:	2200      	movs	r2, #0
 804550e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8045512:	2300      	movs	r3, #0
 8045514:	e000      	b.n	8045518 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8045516:	2302      	movs	r3, #2
  }
}
 8045518:	4618      	mov	r0, r3
 804551a:	3718      	adds	r7, #24
 804551c:	46bd      	mov	sp, r7
 804551e:	bd80      	pop	{r7, pc}
 8045520:	fe00e800 	.word	0xfe00e800

08045524 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8045524:	b580      	push	{r7, lr}
 8045526:	b088      	sub	sp, #32
 8045528:	af02      	add	r7, sp, #8
 804552a:	60f8      	str	r0, [r7, #12]
 804552c:	4608      	mov	r0, r1
 804552e:	4611      	mov	r1, r2
 8045530:	461a      	mov	r2, r3
 8045532:	4603      	mov	r3, r0
 8045534:	817b      	strh	r3, [r7, #10]
 8045536:	460b      	mov	r3, r1
 8045538:	813b      	strh	r3, [r7, #8]
 804553a:	4613      	mov	r3, r2
 804553c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 804553e:	68fb      	ldr	r3, [r7, #12]
 8045540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8045544:	b2db      	uxtb	r3, r3
 8045546:	2b20      	cmp	r3, #32
 8045548:	f040 80fd 	bne.w	8045746 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 804554c:	6a3b      	ldr	r3, [r7, #32]
 804554e:	2b00      	cmp	r3, #0
 8045550:	d002      	beq.n	8045558 <HAL_I2C_Mem_Read+0x34>
 8045552:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8045554:	2b00      	cmp	r3, #0
 8045556:	d105      	bne.n	8045564 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8045558:	68fb      	ldr	r3, [r7, #12]
 804555a:	f44f 7200 	mov.w	r2, #512	; 0x200
 804555e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8045560:	2301      	movs	r3, #1
 8045562:	e0f1      	b.n	8045748 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8045564:	68fb      	ldr	r3, [r7, #12]
 8045566:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 804556a:	2b01      	cmp	r3, #1
 804556c:	d101      	bne.n	8045572 <HAL_I2C_Mem_Read+0x4e>
 804556e:	2302      	movs	r3, #2
 8045570:	e0ea      	b.n	8045748 <HAL_I2C_Mem_Read+0x224>
 8045572:	68fb      	ldr	r3, [r7, #12]
 8045574:	2201      	movs	r2, #1
 8045576:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 804557a:	f7fd fab3 	bl	8042ae4 <HAL_GetTick>
 804557e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8045580:	697b      	ldr	r3, [r7, #20]
 8045582:	9300      	str	r3, [sp, #0]
 8045584:	2319      	movs	r3, #25
 8045586:	2201      	movs	r2, #1
 8045588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 804558c:	68f8      	ldr	r0, [r7, #12]
 804558e:	f000 ff0c 	bl	80463aa <I2C_WaitOnFlagUntilTimeout>
 8045592:	4603      	mov	r3, r0
 8045594:	2b00      	cmp	r3, #0
 8045596:	d001      	beq.n	804559c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8045598:	2301      	movs	r3, #1
 804559a:	e0d5      	b.n	8045748 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 804559c:	68fb      	ldr	r3, [r7, #12]
 804559e:	2222      	movs	r2, #34	; 0x22
 80455a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80455a4:	68fb      	ldr	r3, [r7, #12]
 80455a6:	2240      	movs	r2, #64	; 0x40
 80455a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80455ac:	68fb      	ldr	r3, [r7, #12]
 80455ae:	2200      	movs	r2, #0
 80455b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80455b2:	68fb      	ldr	r3, [r7, #12]
 80455b4:	6a3a      	ldr	r2, [r7, #32]
 80455b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80455b8:	68fb      	ldr	r3, [r7, #12]
 80455ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80455bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80455be:	68fb      	ldr	r3, [r7, #12]
 80455c0:	2200      	movs	r2, #0
 80455c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80455c4:	88f8      	ldrh	r0, [r7, #6]
 80455c6:	893a      	ldrh	r2, [r7, #8]
 80455c8:	8979      	ldrh	r1, [r7, #10]
 80455ca:	697b      	ldr	r3, [r7, #20]
 80455cc:	9301      	str	r3, [sp, #4]
 80455ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80455d0:	9300      	str	r3, [sp, #0]
 80455d2:	4603      	mov	r3, r0
 80455d4:	68f8      	ldr	r0, [r7, #12]
 80455d6:	f000 fb13 	bl	8045c00 <I2C_RequestMemoryRead>
 80455da:	4603      	mov	r3, r0
 80455dc:	2b00      	cmp	r3, #0
 80455de:	d005      	beq.n	80455ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80455e0:	68fb      	ldr	r3, [r7, #12]
 80455e2:	2200      	movs	r2, #0
 80455e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80455e8:	2301      	movs	r3, #1
 80455ea:	e0ad      	b.n	8045748 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80455ec:	68fb      	ldr	r3, [r7, #12]
 80455ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80455f0:	b29b      	uxth	r3, r3
 80455f2:	2bff      	cmp	r3, #255	; 0xff
 80455f4:	d90e      	bls.n	8045614 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80455f6:	68fb      	ldr	r3, [r7, #12]
 80455f8:	22ff      	movs	r2, #255	; 0xff
 80455fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80455fc:	68fb      	ldr	r3, [r7, #12]
 80455fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8045600:	b2da      	uxtb	r2, r3
 8045602:	8979      	ldrh	r1, [r7, #10]
 8045604:	4b52      	ldr	r3, [pc, #328]	; (8045750 <HAL_I2C_Mem_Read+0x22c>)
 8045606:	9300      	str	r3, [sp, #0]
 8045608:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 804560c:	68f8      	ldr	r0, [r7, #12]
 804560e:	f000 ffef 	bl	80465f0 <I2C_TransferConfig>
 8045612:	e00f      	b.n	8045634 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8045614:	68fb      	ldr	r3, [r7, #12]
 8045616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045618:	b29a      	uxth	r2, r3
 804561a:	68fb      	ldr	r3, [r7, #12]
 804561c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 804561e:	68fb      	ldr	r3, [r7, #12]
 8045620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8045622:	b2da      	uxtb	r2, r3
 8045624:	8979      	ldrh	r1, [r7, #10]
 8045626:	4b4a      	ldr	r3, [pc, #296]	; (8045750 <HAL_I2C_Mem_Read+0x22c>)
 8045628:	9300      	str	r3, [sp, #0]
 804562a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 804562e:	68f8      	ldr	r0, [r7, #12]
 8045630:	f000 ffde 	bl	80465f0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8045634:	697b      	ldr	r3, [r7, #20]
 8045636:	9300      	str	r3, [sp, #0]
 8045638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804563a:	2200      	movs	r2, #0
 804563c:	2104      	movs	r1, #4
 804563e:	68f8      	ldr	r0, [r7, #12]
 8045640:	f000 feb3 	bl	80463aa <I2C_WaitOnFlagUntilTimeout>
 8045644:	4603      	mov	r3, r0
 8045646:	2b00      	cmp	r3, #0
 8045648:	d001      	beq.n	804564e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 804564a:	2301      	movs	r3, #1
 804564c:	e07c      	b.n	8045748 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 804564e:	68fb      	ldr	r3, [r7, #12]
 8045650:	681b      	ldr	r3, [r3, #0]
 8045652:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8045654:	68fb      	ldr	r3, [r7, #12]
 8045656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045658:	b2d2      	uxtb	r2, r2
 804565a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 804565c:	68fb      	ldr	r3, [r7, #12]
 804565e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045660:	1c5a      	adds	r2, r3, #1
 8045662:	68fb      	ldr	r3, [r7, #12]
 8045664:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8045666:	68fb      	ldr	r3, [r7, #12]
 8045668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804566a:	3b01      	subs	r3, #1
 804566c:	b29a      	uxth	r2, r3
 804566e:	68fb      	ldr	r3, [r7, #12]
 8045670:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8045672:	68fb      	ldr	r3, [r7, #12]
 8045674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045676:	b29b      	uxth	r3, r3
 8045678:	3b01      	subs	r3, #1
 804567a:	b29a      	uxth	r2, r3
 804567c:	68fb      	ldr	r3, [r7, #12]
 804567e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8045680:	68fb      	ldr	r3, [r7, #12]
 8045682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045684:	b29b      	uxth	r3, r3
 8045686:	2b00      	cmp	r3, #0
 8045688:	d034      	beq.n	80456f4 <HAL_I2C_Mem_Read+0x1d0>
 804568a:	68fb      	ldr	r3, [r7, #12]
 804568c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 804568e:	2b00      	cmp	r3, #0
 8045690:	d130      	bne.n	80456f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8045692:	697b      	ldr	r3, [r7, #20]
 8045694:	9300      	str	r3, [sp, #0]
 8045696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045698:	2200      	movs	r2, #0
 804569a:	2180      	movs	r1, #128	; 0x80
 804569c:	68f8      	ldr	r0, [r7, #12]
 804569e:	f000 fe84 	bl	80463aa <I2C_WaitOnFlagUntilTimeout>
 80456a2:	4603      	mov	r3, r0
 80456a4:	2b00      	cmp	r3, #0
 80456a6:	d001      	beq.n	80456ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80456a8:	2301      	movs	r3, #1
 80456aa:	e04d      	b.n	8045748 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80456ac:	68fb      	ldr	r3, [r7, #12]
 80456ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80456b0:	b29b      	uxth	r3, r3
 80456b2:	2bff      	cmp	r3, #255	; 0xff
 80456b4:	d90e      	bls.n	80456d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80456b6:	68fb      	ldr	r3, [r7, #12]
 80456b8:	22ff      	movs	r2, #255	; 0xff
 80456ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80456bc:	68fb      	ldr	r3, [r7, #12]
 80456be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80456c0:	b2da      	uxtb	r2, r3
 80456c2:	8979      	ldrh	r1, [r7, #10]
 80456c4:	2300      	movs	r3, #0
 80456c6:	9300      	str	r3, [sp, #0]
 80456c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80456cc:	68f8      	ldr	r0, [r7, #12]
 80456ce:	f000 ff8f 	bl	80465f0 <I2C_TransferConfig>
 80456d2:	e00f      	b.n	80456f4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80456d4:	68fb      	ldr	r3, [r7, #12]
 80456d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80456d8:	b29a      	uxth	r2, r3
 80456da:	68fb      	ldr	r3, [r7, #12]
 80456dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80456de:	68fb      	ldr	r3, [r7, #12]
 80456e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80456e2:	b2da      	uxtb	r2, r3
 80456e4:	8979      	ldrh	r1, [r7, #10]
 80456e6:	2300      	movs	r3, #0
 80456e8:	9300      	str	r3, [sp, #0]
 80456ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80456ee:	68f8      	ldr	r0, [r7, #12]
 80456f0:	f000 ff7e 	bl	80465f0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80456f4:	68fb      	ldr	r3, [r7, #12]
 80456f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80456f8:	b29b      	uxth	r3, r3
 80456fa:	2b00      	cmp	r3, #0
 80456fc:	d19a      	bne.n	8045634 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80456fe:	697a      	ldr	r2, [r7, #20]
 8045700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8045702:	68f8      	ldr	r0, [r7, #12]
 8045704:	f000 fed1 	bl	80464aa <I2C_WaitOnSTOPFlagUntilTimeout>
 8045708:	4603      	mov	r3, r0
 804570a:	2b00      	cmp	r3, #0
 804570c:	d001      	beq.n	8045712 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 804570e:	2301      	movs	r3, #1
 8045710:	e01a      	b.n	8045748 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8045712:	68fb      	ldr	r3, [r7, #12]
 8045714:	681b      	ldr	r3, [r3, #0]
 8045716:	2220      	movs	r2, #32
 8045718:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 804571a:	68fb      	ldr	r3, [r7, #12]
 804571c:	681b      	ldr	r3, [r3, #0]
 804571e:	6859      	ldr	r1, [r3, #4]
 8045720:	68fb      	ldr	r3, [r7, #12]
 8045722:	681a      	ldr	r2, [r3, #0]
 8045724:	4b0b      	ldr	r3, [pc, #44]	; (8045754 <HAL_I2C_Mem_Read+0x230>)
 8045726:	400b      	ands	r3, r1
 8045728:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 804572a:	68fb      	ldr	r3, [r7, #12]
 804572c:	2220      	movs	r2, #32
 804572e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8045732:	68fb      	ldr	r3, [r7, #12]
 8045734:	2200      	movs	r2, #0
 8045736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804573a:	68fb      	ldr	r3, [r7, #12]
 804573c:	2200      	movs	r2, #0
 804573e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8045742:	2300      	movs	r3, #0
 8045744:	e000      	b.n	8045748 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8045746:	2302      	movs	r3, #2
  }
}
 8045748:	4618      	mov	r0, r3
 804574a:	3718      	adds	r7, #24
 804574c:	46bd      	mov	sp, r7
 804574e:	bd80      	pop	{r7, pc}
 8045750:	80002400 	.word	0x80002400
 8045754:	fe00e800 	.word	0xfe00e800

08045758 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8045758:	b580      	push	{r7, lr}
 804575a:	b084      	sub	sp, #16
 804575c:	af00      	add	r7, sp, #0
 804575e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8045760:	687b      	ldr	r3, [r7, #4]
 8045762:	681b      	ldr	r3, [r3, #0]
 8045764:	699b      	ldr	r3, [r3, #24]
 8045766:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8045768:	687b      	ldr	r3, [r7, #4]
 804576a:	681b      	ldr	r3, [r3, #0]
 804576c:	681b      	ldr	r3, [r3, #0]
 804576e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8045770:	687b      	ldr	r3, [r7, #4]
 8045772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8045774:	2b00      	cmp	r3, #0
 8045776:	d005      	beq.n	8045784 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8045778:	687b      	ldr	r3, [r7, #4]
 804577a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804577c:	68ba      	ldr	r2, [r7, #8]
 804577e:	68f9      	ldr	r1, [r7, #12]
 8045780:	6878      	ldr	r0, [r7, #4]
 8045782:	4798      	blx	r3
  }
}
 8045784:	bf00      	nop
 8045786:	3710      	adds	r7, #16
 8045788:	46bd      	mov	sp, r7
 804578a:	bd80      	pop	{r7, pc}

0804578c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 804578c:	b580      	push	{r7, lr}
 804578e:	b086      	sub	sp, #24
 8045790:	af00      	add	r7, sp, #0
 8045792:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8045794:	687b      	ldr	r3, [r7, #4]
 8045796:	681b      	ldr	r3, [r3, #0]
 8045798:	699b      	ldr	r3, [r3, #24]
 804579a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 804579c:	687b      	ldr	r3, [r7, #4]
 804579e:	681b      	ldr	r3, [r3, #0]
 80457a0:	681b      	ldr	r3, [r3, #0]
 80457a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80457a4:	697b      	ldr	r3, [r7, #20]
 80457a6:	0a1b      	lsrs	r3, r3, #8
 80457a8:	f003 0301 	and.w	r3, r3, #1
 80457ac:	2b00      	cmp	r3, #0
 80457ae:	d010      	beq.n	80457d2 <HAL_I2C_ER_IRQHandler+0x46>
 80457b0:	693b      	ldr	r3, [r7, #16]
 80457b2:	09db      	lsrs	r3, r3, #7
 80457b4:	f003 0301 	and.w	r3, r3, #1
 80457b8:	2b00      	cmp	r3, #0
 80457ba:	d00a      	beq.n	80457d2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80457bc:	687b      	ldr	r3, [r7, #4]
 80457be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80457c0:	f043 0201 	orr.w	r2, r3, #1
 80457c4:	687b      	ldr	r3, [r7, #4]
 80457c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80457c8:	687b      	ldr	r3, [r7, #4]
 80457ca:	681b      	ldr	r3, [r3, #0]
 80457cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80457d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80457d2:	697b      	ldr	r3, [r7, #20]
 80457d4:	0a9b      	lsrs	r3, r3, #10
 80457d6:	f003 0301 	and.w	r3, r3, #1
 80457da:	2b00      	cmp	r3, #0
 80457dc:	d010      	beq.n	8045800 <HAL_I2C_ER_IRQHandler+0x74>
 80457de:	693b      	ldr	r3, [r7, #16]
 80457e0:	09db      	lsrs	r3, r3, #7
 80457e2:	f003 0301 	and.w	r3, r3, #1
 80457e6:	2b00      	cmp	r3, #0
 80457e8:	d00a      	beq.n	8045800 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80457ea:	687b      	ldr	r3, [r7, #4]
 80457ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80457ee:	f043 0208 	orr.w	r2, r3, #8
 80457f2:	687b      	ldr	r3, [r7, #4]
 80457f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80457f6:	687b      	ldr	r3, [r7, #4]
 80457f8:	681b      	ldr	r3, [r3, #0]
 80457fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80457fe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8045800:	697b      	ldr	r3, [r7, #20]
 8045802:	0a5b      	lsrs	r3, r3, #9
 8045804:	f003 0301 	and.w	r3, r3, #1
 8045808:	2b00      	cmp	r3, #0
 804580a:	d010      	beq.n	804582e <HAL_I2C_ER_IRQHandler+0xa2>
 804580c:	693b      	ldr	r3, [r7, #16]
 804580e:	09db      	lsrs	r3, r3, #7
 8045810:	f003 0301 	and.w	r3, r3, #1
 8045814:	2b00      	cmp	r3, #0
 8045816:	d00a      	beq.n	804582e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8045818:	687b      	ldr	r3, [r7, #4]
 804581a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804581c:	f043 0202 	orr.w	r2, r3, #2
 8045820:	687b      	ldr	r3, [r7, #4]
 8045822:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8045824:	687b      	ldr	r3, [r7, #4]
 8045826:	681b      	ldr	r3, [r3, #0]
 8045828:	f44f 7200 	mov.w	r2, #512	; 0x200
 804582c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 804582e:	687b      	ldr	r3, [r7, #4]
 8045830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045832:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8045834:	68fb      	ldr	r3, [r7, #12]
 8045836:	f003 030b 	and.w	r3, r3, #11
 804583a:	2b00      	cmp	r3, #0
 804583c:	d003      	beq.n	8045846 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 804583e:	68f9      	ldr	r1, [r7, #12]
 8045840:	6878      	ldr	r0, [r7, #4]
 8045842:	f000 fc77 	bl	8046134 <I2C_ITError>
  }
}
 8045846:	bf00      	nop
 8045848:	3718      	adds	r7, #24
 804584a:	46bd      	mov	sp, r7
 804584c:	bd80      	pop	{r7, pc}

0804584e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 804584e:	b480      	push	{r7}
 8045850:	b083      	sub	sp, #12
 8045852:	af00      	add	r7, sp, #0
 8045854:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8045856:	bf00      	nop
 8045858:	370c      	adds	r7, #12
 804585a:	46bd      	mov	sp, r7
 804585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045860:	4770      	bx	lr

08045862 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8045862:	b480      	push	{r7}
 8045864:	b083      	sub	sp, #12
 8045866:	af00      	add	r7, sp, #0
 8045868:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 804586a:	bf00      	nop
 804586c:	370c      	adds	r7, #12
 804586e:	46bd      	mov	sp, r7
 8045870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045874:	4770      	bx	lr

08045876 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8045876:	b480      	push	{r7}
 8045878:	b083      	sub	sp, #12
 804587a:	af00      	add	r7, sp, #0
 804587c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 804587e:	bf00      	nop
 8045880:	370c      	adds	r7, #12
 8045882:	46bd      	mov	sp, r7
 8045884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045888:	4770      	bx	lr

0804588a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 804588a:	b480      	push	{r7}
 804588c:	b083      	sub	sp, #12
 804588e:	af00      	add	r7, sp, #0
 8045890:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8045892:	bf00      	nop
 8045894:	370c      	adds	r7, #12
 8045896:	46bd      	mov	sp, r7
 8045898:	f85d 7b04 	ldr.w	r7, [sp], #4
 804589c:	4770      	bx	lr

0804589e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 804589e:	b480      	push	{r7}
 80458a0:	b083      	sub	sp, #12
 80458a2:	af00      	add	r7, sp, #0
 80458a4:	6078      	str	r0, [r7, #4]
 80458a6:	460b      	mov	r3, r1
 80458a8:	70fb      	strb	r3, [r7, #3]
 80458aa:	4613      	mov	r3, r2
 80458ac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80458ae:	bf00      	nop
 80458b0:	370c      	adds	r7, #12
 80458b2:	46bd      	mov	sp, r7
 80458b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80458b8:	4770      	bx	lr

080458ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80458ba:	b480      	push	{r7}
 80458bc:	b083      	sub	sp, #12
 80458be:	af00      	add	r7, sp, #0
 80458c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80458c2:	bf00      	nop
 80458c4:	370c      	adds	r7, #12
 80458c6:	46bd      	mov	sp, r7
 80458c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80458cc:	4770      	bx	lr

080458ce <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80458ce:	b480      	push	{r7}
 80458d0:	b083      	sub	sp, #12
 80458d2:	af00      	add	r7, sp, #0
 80458d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80458d6:	bf00      	nop
 80458d8:	370c      	adds	r7, #12
 80458da:	46bd      	mov	sp, r7
 80458dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80458e0:	4770      	bx	lr

080458e2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80458e2:	b480      	push	{r7}
 80458e4:	b083      	sub	sp, #12
 80458e6:	af00      	add	r7, sp, #0
 80458e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80458ea:	bf00      	nop
 80458ec:	370c      	adds	r7, #12
 80458ee:	46bd      	mov	sp, r7
 80458f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80458f4:	4770      	bx	lr

080458f6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80458f6:	b480      	push	{r7}
 80458f8:	b083      	sub	sp, #12
 80458fa:	af00      	add	r7, sp, #0
 80458fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80458fe:	bf00      	nop
 8045900:	370c      	adds	r7, #12
 8045902:	46bd      	mov	sp, r7
 8045904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045908:	4770      	bx	lr

0804590a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 804590a:	b480      	push	{r7}
 804590c:	b083      	sub	sp, #12
 804590e:	af00      	add	r7, sp, #0
 8045910:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8045912:	bf00      	nop
 8045914:	370c      	adds	r7, #12
 8045916:	46bd      	mov	sp, r7
 8045918:	f85d 7b04 	ldr.w	r7, [sp], #4
 804591c:	4770      	bx	lr

0804591e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 804591e:	b480      	push	{r7}
 8045920:	b083      	sub	sp, #12
 8045922:	af00      	add	r7, sp, #0
 8045924:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8045926:	687b      	ldr	r3, [r7, #4]
 8045928:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804592c:	b2db      	uxtb	r3, r3
}
 804592e:	4618      	mov	r0, r3
 8045930:	370c      	adds	r7, #12
 8045932:	46bd      	mov	sp, r7
 8045934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045938:	4770      	bx	lr

0804593a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 804593a:	b480      	push	{r7}
 804593c:	b083      	sub	sp, #12
 804593e:	af00      	add	r7, sp, #0
 8045940:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8045942:	687b      	ldr	r3, [r7, #4]
 8045944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8045946:	4618      	mov	r0, r3
 8045948:	370c      	adds	r7, #12
 804594a:	46bd      	mov	sp, r7
 804594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045950:	4770      	bx	lr

08045952 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8045952:	b580      	push	{r7, lr}
 8045954:	b086      	sub	sp, #24
 8045956:	af00      	add	r7, sp, #0
 8045958:	60f8      	str	r0, [r7, #12]
 804595a:	60b9      	str	r1, [r7, #8]
 804595c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 804595e:	68fb      	ldr	r3, [r7, #12]
 8045960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045962:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8045964:	68bb      	ldr	r3, [r7, #8]
 8045966:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8045968:	68fb      	ldr	r3, [r7, #12]
 804596a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 804596e:	2b01      	cmp	r3, #1
 8045970:	d101      	bne.n	8045976 <I2C_Slave_ISR_IT+0x24>
 8045972:	2302      	movs	r3, #2
 8045974:	e0ec      	b.n	8045b50 <I2C_Slave_ISR_IT+0x1fe>
 8045976:	68fb      	ldr	r3, [r7, #12]
 8045978:	2201      	movs	r2, #1
 804597a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 804597e:	693b      	ldr	r3, [r7, #16]
 8045980:	095b      	lsrs	r3, r3, #5
 8045982:	f003 0301 	and.w	r3, r3, #1
 8045986:	2b00      	cmp	r3, #0
 8045988:	d009      	beq.n	804599e <I2C_Slave_ISR_IT+0x4c>
 804598a:	687b      	ldr	r3, [r7, #4]
 804598c:	095b      	lsrs	r3, r3, #5
 804598e:	f003 0301 	and.w	r3, r3, #1
 8045992:	2b00      	cmp	r3, #0
 8045994:	d003      	beq.n	804599e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8045996:	6939      	ldr	r1, [r7, #16]
 8045998:	68f8      	ldr	r0, [r7, #12]
 804599a:	f000 fa69 	bl	8045e70 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 804599e:	693b      	ldr	r3, [r7, #16]
 80459a0:	091b      	lsrs	r3, r3, #4
 80459a2:	f003 0301 	and.w	r3, r3, #1
 80459a6:	2b00      	cmp	r3, #0
 80459a8:	d04d      	beq.n	8045a46 <I2C_Slave_ISR_IT+0xf4>
 80459aa:	687b      	ldr	r3, [r7, #4]
 80459ac:	091b      	lsrs	r3, r3, #4
 80459ae:	f003 0301 	and.w	r3, r3, #1
 80459b2:	2b00      	cmp	r3, #0
 80459b4:	d047      	beq.n	8045a46 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80459b6:	68fb      	ldr	r3, [r7, #12]
 80459b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80459ba:	b29b      	uxth	r3, r3
 80459bc:	2b00      	cmp	r3, #0
 80459be:	d128      	bne.n	8045a12 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80459c0:	68fb      	ldr	r3, [r7, #12]
 80459c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80459c6:	b2db      	uxtb	r3, r3
 80459c8:	2b28      	cmp	r3, #40	; 0x28
 80459ca:	d108      	bne.n	80459de <I2C_Slave_ISR_IT+0x8c>
 80459cc:	697b      	ldr	r3, [r7, #20]
 80459ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80459d2:	d104      	bne.n	80459de <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80459d4:	6939      	ldr	r1, [r7, #16]
 80459d6:	68f8      	ldr	r0, [r7, #12]
 80459d8:	f000 fb56 	bl	8046088 <I2C_ITListenCplt>
 80459dc:	e032      	b.n	8045a44 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80459de:	68fb      	ldr	r3, [r7, #12]
 80459e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80459e4:	b2db      	uxtb	r3, r3
 80459e6:	2b29      	cmp	r3, #41	; 0x29
 80459e8:	d10e      	bne.n	8045a08 <I2C_Slave_ISR_IT+0xb6>
 80459ea:	697b      	ldr	r3, [r7, #20]
 80459ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80459f0:	d00a      	beq.n	8045a08 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80459f2:	68fb      	ldr	r3, [r7, #12]
 80459f4:	681b      	ldr	r3, [r3, #0]
 80459f6:	2210      	movs	r2, #16
 80459f8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80459fa:	68f8      	ldr	r0, [r7, #12]
 80459fc:	f000 fc93 	bl	8046326 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8045a00:	68f8      	ldr	r0, [r7, #12]
 8045a02:	f000 f9d5 	bl	8045db0 <I2C_ITSlaveSeqCplt>
 8045a06:	e01d      	b.n	8045a44 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8045a08:	68fb      	ldr	r3, [r7, #12]
 8045a0a:	681b      	ldr	r3, [r3, #0]
 8045a0c:	2210      	movs	r2, #16
 8045a0e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8045a10:	e096      	b.n	8045b40 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8045a12:	68fb      	ldr	r3, [r7, #12]
 8045a14:	681b      	ldr	r3, [r3, #0]
 8045a16:	2210      	movs	r2, #16
 8045a18:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8045a1a:	68fb      	ldr	r3, [r7, #12]
 8045a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045a1e:	f043 0204 	orr.w	r2, r3, #4
 8045a22:	68fb      	ldr	r3, [r7, #12]
 8045a24:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8045a26:	697b      	ldr	r3, [r7, #20]
 8045a28:	2b00      	cmp	r3, #0
 8045a2a:	d004      	beq.n	8045a36 <I2C_Slave_ISR_IT+0xe4>
 8045a2c:	697b      	ldr	r3, [r7, #20]
 8045a2e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8045a32:	f040 8085 	bne.w	8045b40 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8045a36:	68fb      	ldr	r3, [r7, #12]
 8045a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045a3a:	4619      	mov	r1, r3
 8045a3c:	68f8      	ldr	r0, [r7, #12]
 8045a3e:	f000 fb79 	bl	8046134 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8045a42:	e07d      	b.n	8045b40 <I2C_Slave_ISR_IT+0x1ee>
 8045a44:	e07c      	b.n	8045b40 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8045a46:	693b      	ldr	r3, [r7, #16]
 8045a48:	089b      	lsrs	r3, r3, #2
 8045a4a:	f003 0301 	and.w	r3, r3, #1
 8045a4e:	2b00      	cmp	r3, #0
 8045a50:	d030      	beq.n	8045ab4 <I2C_Slave_ISR_IT+0x162>
 8045a52:	687b      	ldr	r3, [r7, #4]
 8045a54:	089b      	lsrs	r3, r3, #2
 8045a56:	f003 0301 	and.w	r3, r3, #1
 8045a5a:	2b00      	cmp	r3, #0
 8045a5c:	d02a      	beq.n	8045ab4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8045a5e:	68fb      	ldr	r3, [r7, #12]
 8045a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045a62:	b29b      	uxth	r3, r3
 8045a64:	2b00      	cmp	r3, #0
 8045a66:	d018      	beq.n	8045a9a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8045a68:	68fb      	ldr	r3, [r7, #12]
 8045a6a:	681b      	ldr	r3, [r3, #0]
 8045a6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8045a6e:	68fb      	ldr	r3, [r7, #12]
 8045a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045a72:	b2d2      	uxtb	r2, r2
 8045a74:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8045a76:	68fb      	ldr	r3, [r7, #12]
 8045a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045a7a:	1c5a      	adds	r2, r3, #1
 8045a7c:	68fb      	ldr	r3, [r7, #12]
 8045a7e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8045a80:	68fb      	ldr	r3, [r7, #12]
 8045a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8045a84:	3b01      	subs	r3, #1
 8045a86:	b29a      	uxth	r2, r3
 8045a88:	68fb      	ldr	r3, [r7, #12]
 8045a8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8045a8c:	68fb      	ldr	r3, [r7, #12]
 8045a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045a90:	b29b      	uxth	r3, r3
 8045a92:	3b01      	subs	r3, #1
 8045a94:	b29a      	uxth	r2, r3
 8045a96:	68fb      	ldr	r3, [r7, #12]
 8045a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8045a9a:	68fb      	ldr	r3, [r7, #12]
 8045a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045a9e:	b29b      	uxth	r3, r3
 8045aa0:	2b00      	cmp	r3, #0
 8045aa2:	d14f      	bne.n	8045b44 <I2C_Slave_ISR_IT+0x1f2>
 8045aa4:	697b      	ldr	r3, [r7, #20]
 8045aa6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8045aaa:	d04b      	beq.n	8045b44 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8045aac:	68f8      	ldr	r0, [r7, #12]
 8045aae:	f000 f97f 	bl	8045db0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8045ab2:	e047      	b.n	8045b44 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8045ab4:	693b      	ldr	r3, [r7, #16]
 8045ab6:	08db      	lsrs	r3, r3, #3
 8045ab8:	f003 0301 	and.w	r3, r3, #1
 8045abc:	2b00      	cmp	r3, #0
 8045abe:	d00a      	beq.n	8045ad6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8045ac0:	687b      	ldr	r3, [r7, #4]
 8045ac2:	08db      	lsrs	r3, r3, #3
 8045ac4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8045ac8:	2b00      	cmp	r3, #0
 8045aca:	d004      	beq.n	8045ad6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8045acc:	6939      	ldr	r1, [r7, #16]
 8045ace:	68f8      	ldr	r0, [r7, #12]
 8045ad0:	f000 f8ea 	bl	8045ca8 <I2C_ITAddrCplt>
 8045ad4:	e037      	b.n	8045b46 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8045ad6:	693b      	ldr	r3, [r7, #16]
 8045ad8:	085b      	lsrs	r3, r3, #1
 8045ada:	f003 0301 	and.w	r3, r3, #1
 8045ade:	2b00      	cmp	r3, #0
 8045ae0:	d031      	beq.n	8045b46 <I2C_Slave_ISR_IT+0x1f4>
 8045ae2:	687b      	ldr	r3, [r7, #4]
 8045ae4:	085b      	lsrs	r3, r3, #1
 8045ae6:	f003 0301 	and.w	r3, r3, #1
 8045aea:	2b00      	cmp	r3, #0
 8045aec:	d02b      	beq.n	8045b46 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8045aee:	68fb      	ldr	r3, [r7, #12]
 8045af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045af2:	b29b      	uxth	r3, r3
 8045af4:	2b00      	cmp	r3, #0
 8045af6:	d018      	beq.n	8045b2a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8045af8:	68fb      	ldr	r3, [r7, #12]
 8045afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045afc:	781a      	ldrb	r2, [r3, #0]
 8045afe:	68fb      	ldr	r3, [r7, #12]
 8045b00:	681b      	ldr	r3, [r3, #0]
 8045b02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8045b04:	68fb      	ldr	r3, [r7, #12]
 8045b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045b08:	1c5a      	adds	r2, r3, #1
 8045b0a:	68fb      	ldr	r3, [r7, #12]
 8045b0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8045b0e:	68fb      	ldr	r3, [r7, #12]
 8045b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045b12:	b29b      	uxth	r3, r3
 8045b14:	3b01      	subs	r3, #1
 8045b16:	b29a      	uxth	r2, r3
 8045b18:	68fb      	ldr	r3, [r7, #12]
 8045b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8045b1c:	68fb      	ldr	r3, [r7, #12]
 8045b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8045b20:	3b01      	subs	r3, #1
 8045b22:	b29a      	uxth	r2, r3
 8045b24:	68fb      	ldr	r3, [r7, #12]
 8045b26:	851a      	strh	r2, [r3, #40]	; 0x28
 8045b28:	e00d      	b.n	8045b46 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8045b2a:	697b      	ldr	r3, [r7, #20]
 8045b2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8045b30:	d002      	beq.n	8045b38 <I2C_Slave_ISR_IT+0x1e6>
 8045b32:	697b      	ldr	r3, [r7, #20]
 8045b34:	2b00      	cmp	r3, #0
 8045b36:	d106      	bne.n	8045b46 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8045b38:	68f8      	ldr	r0, [r7, #12]
 8045b3a:	f000 f939 	bl	8045db0 <I2C_ITSlaveSeqCplt>
 8045b3e:	e002      	b.n	8045b46 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8045b40:	bf00      	nop
 8045b42:	e000      	b.n	8045b46 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8045b44:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8045b46:	68fb      	ldr	r3, [r7, #12]
 8045b48:	2200      	movs	r2, #0
 8045b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8045b4e:	2300      	movs	r3, #0
}
 8045b50:	4618      	mov	r0, r3
 8045b52:	3718      	adds	r7, #24
 8045b54:	46bd      	mov	sp, r7
 8045b56:	bd80      	pop	{r7, pc}

08045b58 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8045b58:	b580      	push	{r7, lr}
 8045b5a:	b086      	sub	sp, #24
 8045b5c:	af02      	add	r7, sp, #8
 8045b5e:	60f8      	str	r0, [r7, #12]
 8045b60:	4608      	mov	r0, r1
 8045b62:	4611      	mov	r1, r2
 8045b64:	461a      	mov	r2, r3
 8045b66:	4603      	mov	r3, r0
 8045b68:	817b      	strh	r3, [r7, #10]
 8045b6a:	460b      	mov	r3, r1
 8045b6c:	813b      	strh	r3, [r7, #8]
 8045b6e:	4613      	mov	r3, r2
 8045b70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8045b72:	88fb      	ldrh	r3, [r7, #6]
 8045b74:	b2da      	uxtb	r2, r3
 8045b76:	8979      	ldrh	r1, [r7, #10]
 8045b78:	4b20      	ldr	r3, [pc, #128]	; (8045bfc <I2C_RequestMemoryWrite+0xa4>)
 8045b7a:	9300      	str	r3, [sp, #0]
 8045b7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8045b80:	68f8      	ldr	r0, [r7, #12]
 8045b82:	f000 fd35 	bl	80465f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8045b86:	69fa      	ldr	r2, [r7, #28]
 8045b88:	69b9      	ldr	r1, [r7, #24]
 8045b8a:	68f8      	ldr	r0, [r7, #12]
 8045b8c:	f000 fc4d 	bl	804642a <I2C_WaitOnTXISFlagUntilTimeout>
 8045b90:	4603      	mov	r3, r0
 8045b92:	2b00      	cmp	r3, #0
 8045b94:	d001      	beq.n	8045b9a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8045b96:	2301      	movs	r3, #1
 8045b98:	e02c      	b.n	8045bf4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8045b9a:	88fb      	ldrh	r3, [r7, #6]
 8045b9c:	2b01      	cmp	r3, #1
 8045b9e:	d105      	bne.n	8045bac <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8045ba0:	893b      	ldrh	r3, [r7, #8]
 8045ba2:	b2da      	uxtb	r2, r3
 8045ba4:	68fb      	ldr	r3, [r7, #12]
 8045ba6:	681b      	ldr	r3, [r3, #0]
 8045ba8:	629a      	str	r2, [r3, #40]	; 0x28
 8045baa:	e015      	b.n	8045bd8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8045bac:	893b      	ldrh	r3, [r7, #8]
 8045bae:	0a1b      	lsrs	r3, r3, #8
 8045bb0:	b29b      	uxth	r3, r3
 8045bb2:	b2da      	uxtb	r2, r3
 8045bb4:	68fb      	ldr	r3, [r7, #12]
 8045bb6:	681b      	ldr	r3, [r3, #0]
 8045bb8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8045bba:	69fa      	ldr	r2, [r7, #28]
 8045bbc:	69b9      	ldr	r1, [r7, #24]
 8045bbe:	68f8      	ldr	r0, [r7, #12]
 8045bc0:	f000 fc33 	bl	804642a <I2C_WaitOnTXISFlagUntilTimeout>
 8045bc4:	4603      	mov	r3, r0
 8045bc6:	2b00      	cmp	r3, #0
 8045bc8:	d001      	beq.n	8045bce <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8045bca:	2301      	movs	r3, #1
 8045bcc:	e012      	b.n	8045bf4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8045bce:	893b      	ldrh	r3, [r7, #8]
 8045bd0:	b2da      	uxtb	r2, r3
 8045bd2:	68fb      	ldr	r3, [r7, #12]
 8045bd4:	681b      	ldr	r3, [r3, #0]
 8045bd6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8045bd8:	69fb      	ldr	r3, [r7, #28]
 8045bda:	9300      	str	r3, [sp, #0]
 8045bdc:	69bb      	ldr	r3, [r7, #24]
 8045bde:	2200      	movs	r2, #0
 8045be0:	2180      	movs	r1, #128	; 0x80
 8045be2:	68f8      	ldr	r0, [r7, #12]
 8045be4:	f000 fbe1 	bl	80463aa <I2C_WaitOnFlagUntilTimeout>
 8045be8:	4603      	mov	r3, r0
 8045bea:	2b00      	cmp	r3, #0
 8045bec:	d001      	beq.n	8045bf2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8045bee:	2301      	movs	r3, #1
 8045bf0:	e000      	b.n	8045bf4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8045bf2:	2300      	movs	r3, #0
}
 8045bf4:	4618      	mov	r0, r3
 8045bf6:	3710      	adds	r7, #16
 8045bf8:	46bd      	mov	sp, r7
 8045bfa:	bd80      	pop	{r7, pc}
 8045bfc:	80002000 	.word	0x80002000

08045c00 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8045c00:	b580      	push	{r7, lr}
 8045c02:	b086      	sub	sp, #24
 8045c04:	af02      	add	r7, sp, #8
 8045c06:	60f8      	str	r0, [r7, #12]
 8045c08:	4608      	mov	r0, r1
 8045c0a:	4611      	mov	r1, r2
 8045c0c:	461a      	mov	r2, r3
 8045c0e:	4603      	mov	r3, r0
 8045c10:	817b      	strh	r3, [r7, #10]
 8045c12:	460b      	mov	r3, r1
 8045c14:	813b      	strh	r3, [r7, #8]
 8045c16:	4613      	mov	r3, r2
 8045c18:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8045c1a:	88fb      	ldrh	r3, [r7, #6]
 8045c1c:	b2da      	uxtb	r2, r3
 8045c1e:	8979      	ldrh	r1, [r7, #10]
 8045c20:	4b20      	ldr	r3, [pc, #128]	; (8045ca4 <I2C_RequestMemoryRead+0xa4>)
 8045c22:	9300      	str	r3, [sp, #0]
 8045c24:	2300      	movs	r3, #0
 8045c26:	68f8      	ldr	r0, [r7, #12]
 8045c28:	f000 fce2 	bl	80465f0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8045c2c:	69fa      	ldr	r2, [r7, #28]
 8045c2e:	69b9      	ldr	r1, [r7, #24]
 8045c30:	68f8      	ldr	r0, [r7, #12]
 8045c32:	f000 fbfa 	bl	804642a <I2C_WaitOnTXISFlagUntilTimeout>
 8045c36:	4603      	mov	r3, r0
 8045c38:	2b00      	cmp	r3, #0
 8045c3a:	d001      	beq.n	8045c40 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8045c3c:	2301      	movs	r3, #1
 8045c3e:	e02c      	b.n	8045c9a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8045c40:	88fb      	ldrh	r3, [r7, #6]
 8045c42:	2b01      	cmp	r3, #1
 8045c44:	d105      	bne.n	8045c52 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8045c46:	893b      	ldrh	r3, [r7, #8]
 8045c48:	b2da      	uxtb	r2, r3
 8045c4a:	68fb      	ldr	r3, [r7, #12]
 8045c4c:	681b      	ldr	r3, [r3, #0]
 8045c4e:	629a      	str	r2, [r3, #40]	; 0x28
 8045c50:	e015      	b.n	8045c7e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8045c52:	893b      	ldrh	r3, [r7, #8]
 8045c54:	0a1b      	lsrs	r3, r3, #8
 8045c56:	b29b      	uxth	r3, r3
 8045c58:	b2da      	uxtb	r2, r3
 8045c5a:	68fb      	ldr	r3, [r7, #12]
 8045c5c:	681b      	ldr	r3, [r3, #0]
 8045c5e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8045c60:	69fa      	ldr	r2, [r7, #28]
 8045c62:	69b9      	ldr	r1, [r7, #24]
 8045c64:	68f8      	ldr	r0, [r7, #12]
 8045c66:	f000 fbe0 	bl	804642a <I2C_WaitOnTXISFlagUntilTimeout>
 8045c6a:	4603      	mov	r3, r0
 8045c6c:	2b00      	cmp	r3, #0
 8045c6e:	d001      	beq.n	8045c74 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8045c70:	2301      	movs	r3, #1
 8045c72:	e012      	b.n	8045c9a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8045c74:	893b      	ldrh	r3, [r7, #8]
 8045c76:	b2da      	uxtb	r2, r3
 8045c78:	68fb      	ldr	r3, [r7, #12]
 8045c7a:	681b      	ldr	r3, [r3, #0]
 8045c7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8045c7e:	69fb      	ldr	r3, [r7, #28]
 8045c80:	9300      	str	r3, [sp, #0]
 8045c82:	69bb      	ldr	r3, [r7, #24]
 8045c84:	2200      	movs	r2, #0
 8045c86:	2140      	movs	r1, #64	; 0x40
 8045c88:	68f8      	ldr	r0, [r7, #12]
 8045c8a:	f000 fb8e 	bl	80463aa <I2C_WaitOnFlagUntilTimeout>
 8045c8e:	4603      	mov	r3, r0
 8045c90:	2b00      	cmp	r3, #0
 8045c92:	d001      	beq.n	8045c98 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8045c94:	2301      	movs	r3, #1
 8045c96:	e000      	b.n	8045c9a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8045c98:	2300      	movs	r3, #0
}
 8045c9a:	4618      	mov	r0, r3
 8045c9c:	3710      	adds	r7, #16
 8045c9e:	46bd      	mov	sp, r7
 8045ca0:	bd80      	pop	{r7, pc}
 8045ca2:	bf00      	nop
 8045ca4:	80002000 	.word	0x80002000

08045ca8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8045ca8:	b580      	push	{r7, lr}
 8045caa:	b084      	sub	sp, #16
 8045cac:	af00      	add	r7, sp, #0
 8045cae:	6078      	str	r0, [r7, #4]
 8045cb0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8045cb2:	687b      	ldr	r3, [r7, #4]
 8045cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8045cb8:	b2db      	uxtb	r3, r3
 8045cba:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8045cbe:	2b28      	cmp	r3, #40	; 0x28
 8045cc0:	d16a      	bne.n	8045d98 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8045cc2:	687b      	ldr	r3, [r7, #4]
 8045cc4:	681b      	ldr	r3, [r3, #0]
 8045cc6:	699b      	ldr	r3, [r3, #24]
 8045cc8:	0c1b      	lsrs	r3, r3, #16
 8045cca:	b2db      	uxtb	r3, r3
 8045ccc:	f003 0301 	and.w	r3, r3, #1
 8045cd0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8045cd2:	687b      	ldr	r3, [r7, #4]
 8045cd4:	681b      	ldr	r3, [r3, #0]
 8045cd6:	699b      	ldr	r3, [r3, #24]
 8045cd8:	0c1b      	lsrs	r3, r3, #16
 8045cda:	b29b      	uxth	r3, r3
 8045cdc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8045ce0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8045ce2:	687b      	ldr	r3, [r7, #4]
 8045ce4:	681b      	ldr	r3, [r3, #0]
 8045ce6:	689b      	ldr	r3, [r3, #8]
 8045ce8:	b29b      	uxth	r3, r3
 8045cea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8045cee:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8045cf0:	687b      	ldr	r3, [r7, #4]
 8045cf2:	681b      	ldr	r3, [r3, #0]
 8045cf4:	68db      	ldr	r3, [r3, #12]
 8045cf6:	b29b      	uxth	r3, r3
 8045cf8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8045cfc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8045cfe:	687b      	ldr	r3, [r7, #4]
 8045d00:	68db      	ldr	r3, [r3, #12]
 8045d02:	2b02      	cmp	r3, #2
 8045d04:	d138      	bne.n	8045d78 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8045d06:	897b      	ldrh	r3, [r7, #10]
 8045d08:	09db      	lsrs	r3, r3, #7
 8045d0a:	b29a      	uxth	r2, r3
 8045d0c:	89bb      	ldrh	r3, [r7, #12]
 8045d0e:	4053      	eors	r3, r2
 8045d10:	b29b      	uxth	r3, r3
 8045d12:	f003 0306 	and.w	r3, r3, #6
 8045d16:	2b00      	cmp	r3, #0
 8045d18:	d11c      	bne.n	8045d54 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8045d1a:	897b      	ldrh	r3, [r7, #10]
 8045d1c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8045d1e:	687b      	ldr	r3, [r7, #4]
 8045d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8045d22:	1c5a      	adds	r2, r3, #1
 8045d24:	687b      	ldr	r3, [r7, #4]
 8045d26:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8045d28:	687b      	ldr	r3, [r7, #4]
 8045d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8045d2c:	2b02      	cmp	r3, #2
 8045d2e:	d13b      	bne.n	8045da8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8045d30:	687b      	ldr	r3, [r7, #4]
 8045d32:	2200      	movs	r2, #0
 8045d34:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8045d36:	687b      	ldr	r3, [r7, #4]
 8045d38:	681b      	ldr	r3, [r3, #0]
 8045d3a:	2208      	movs	r2, #8
 8045d3c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8045d3e:	687b      	ldr	r3, [r7, #4]
 8045d40:	2200      	movs	r2, #0
 8045d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8045d46:	687b      	ldr	r3, [r7, #4]
 8045d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045d4a:	89ba      	ldrh	r2, [r7, #12]
 8045d4c:	7bf9      	ldrb	r1, [r7, #15]
 8045d4e:	6878      	ldr	r0, [r7, #4]
 8045d50:	4798      	blx	r3
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8045d52:	e029      	b.n	8045da8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8045d54:	893b      	ldrh	r3, [r7, #8]
 8045d56:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8045d58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8045d5c:	6878      	ldr	r0, [r7, #4]
 8045d5e:	f000 fc75 	bl	804664c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8045d62:	687b      	ldr	r3, [r7, #4]
 8045d64:	2200      	movs	r2, #0
 8045d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8045d6a:	687b      	ldr	r3, [r7, #4]
 8045d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045d6e:	89ba      	ldrh	r2, [r7, #12]
 8045d70:	7bf9      	ldrb	r1, [r7, #15]
 8045d72:	6878      	ldr	r0, [r7, #4]
 8045d74:	4798      	blx	r3
}
 8045d76:	e017      	b.n	8045da8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8045d78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8045d7c:	6878      	ldr	r0, [r7, #4]
 8045d7e:	f000 fc65 	bl	804664c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8045d82:	687b      	ldr	r3, [r7, #4]
 8045d84:	2200      	movs	r2, #0
 8045d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8045d8a:	687b      	ldr	r3, [r7, #4]
 8045d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8045d8e:	89ba      	ldrh	r2, [r7, #12]
 8045d90:	7bf9      	ldrb	r1, [r7, #15]
 8045d92:	6878      	ldr	r0, [r7, #4]
 8045d94:	4798      	blx	r3
}
 8045d96:	e007      	b.n	8045da8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8045d98:	687b      	ldr	r3, [r7, #4]
 8045d9a:	681b      	ldr	r3, [r3, #0]
 8045d9c:	2208      	movs	r2, #8
 8045d9e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8045da0:	687b      	ldr	r3, [r7, #4]
 8045da2:	2200      	movs	r2, #0
 8045da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8045da8:	bf00      	nop
 8045daa:	3710      	adds	r7, #16
 8045dac:	46bd      	mov	sp, r7
 8045dae:	bd80      	pop	{r7, pc}

08045db0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8045db0:	b580      	push	{r7, lr}
 8045db2:	b084      	sub	sp, #16
 8045db4:	af00      	add	r7, sp, #0
 8045db6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8045db8:	687b      	ldr	r3, [r7, #4]
 8045dba:	681b      	ldr	r3, [r3, #0]
 8045dbc:	681b      	ldr	r3, [r3, #0]
 8045dbe:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8045dc0:	687b      	ldr	r3, [r7, #4]
 8045dc2:	2200      	movs	r2, #0
 8045dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8045dc8:	68fb      	ldr	r3, [r7, #12]
 8045dca:	0b9b      	lsrs	r3, r3, #14
 8045dcc:	f003 0301 	and.w	r3, r3, #1
 8045dd0:	2b00      	cmp	r3, #0
 8045dd2:	d008      	beq.n	8045de6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8045dd4:	687b      	ldr	r3, [r7, #4]
 8045dd6:	681b      	ldr	r3, [r3, #0]
 8045dd8:	681a      	ldr	r2, [r3, #0]
 8045dda:	687b      	ldr	r3, [r7, #4]
 8045ddc:	681b      	ldr	r3, [r3, #0]
 8045dde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8045de2:	601a      	str	r2, [r3, #0]
 8045de4:	e00d      	b.n	8045e02 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8045de6:	68fb      	ldr	r3, [r7, #12]
 8045de8:	0bdb      	lsrs	r3, r3, #15
 8045dea:	f003 0301 	and.w	r3, r3, #1
 8045dee:	2b00      	cmp	r3, #0
 8045df0:	d007      	beq.n	8045e02 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8045df2:	687b      	ldr	r3, [r7, #4]
 8045df4:	681b      	ldr	r3, [r3, #0]
 8045df6:	681a      	ldr	r2, [r3, #0]
 8045df8:	687b      	ldr	r3, [r7, #4]
 8045dfa:	681b      	ldr	r3, [r3, #0]
 8045dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8045e00:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8045e02:	687b      	ldr	r3, [r7, #4]
 8045e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8045e08:	b2db      	uxtb	r3, r3
 8045e0a:	2b29      	cmp	r3, #41	; 0x29
 8045e0c:	d113      	bne.n	8045e36 <I2C_ITSlaveSeqCplt+0x86>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8045e0e:	687b      	ldr	r3, [r7, #4]
 8045e10:	2228      	movs	r2, #40	; 0x28
 8045e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8045e16:	687b      	ldr	r3, [r7, #4]
 8045e18:	2221      	movs	r2, #33	; 0x21
 8045e1a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8045e1c:	2101      	movs	r1, #1
 8045e1e:	6878      	ldr	r0, [r7, #4]
 8045e20:	f000 fc14 	bl	804664c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8045e24:	687b      	ldr	r3, [r7, #4]
 8045e26:	2200      	movs	r2, #0
 8045e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
 8045e2c:	687b      	ldr	r3, [r7, #4]
 8045e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8045e30:	6878      	ldr	r0, [r7, #4]
 8045e32:	4798      	blx	r3
  }
  else
  {
    /* Nothing to do */
  }
}
 8045e34:	e018      	b.n	8045e68 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8045e36:	687b      	ldr	r3, [r7, #4]
 8045e38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8045e3c:	b2db      	uxtb	r3, r3
 8045e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8045e40:	d112      	bne.n	8045e68 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8045e42:	687b      	ldr	r3, [r7, #4]
 8045e44:	2228      	movs	r2, #40	; 0x28
 8045e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8045e4a:	687b      	ldr	r3, [r7, #4]
 8045e4c:	2222      	movs	r2, #34	; 0x22
 8045e4e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8045e50:	2102      	movs	r1, #2
 8045e52:	6878      	ldr	r0, [r7, #4]
 8045e54:	f000 fbfa 	bl	804664c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8045e58:	687b      	ldr	r3, [r7, #4]
 8045e5a:	2200      	movs	r2, #0
 8045e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8045e60:	687b      	ldr	r3, [r7, #4]
 8045e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8045e64:	6878      	ldr	r0, [r7, #4]
 8045e66:	4798      	blx	r3
}
 8045e68:	bf00      	nop
 8045e6a:	3710      	adds	r7, #16
 8045e6c:	46bd      	mov	sp, r7
 8045e6e:	bd80      	pop	{r7, pc}

08045e70 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8045e70:	b580      	push	{r7, lr}
 8045e72:	b086      	sub	sp, #24
 8045e74:	af00      	add	r7, sp, #0
 8045e76:	6078      	str	r0, [r7, #4]
 8045e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8045e7a:	687b      	ldr	r3, [r7, #4]
 8045e7c:	681b      	ldr	r3, [r3, #0]
 8045e7e:	681b      	ldr	r3, [r3, #0]
 8045e80:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8045e82:	683b      	ldr	r3, [r7, #0]
 8045e84:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8045e86:	687b      	ldr	r3, [r7, #4]
 8045e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8045e8c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8045e8e:	687b      	ldr	r3, [r7, #4]
 8045e90:	681b      	ldr	r3, [r3, #0]
 8045e92:	2220      	movs	r2, #32
 8045e94:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8045e96:	7bfb      	ldrb	r3, [r7, #15]
 8045e98:	2b21      	cmp	r3, #33	; 0x21
 8045e9a:	d002      	beq.n	8045ea2 <I2C_ITSlaveCplt+0x32>
 8045e9c:	7bfb      	ldrb	r3, [r7, #15]
 8045e9e:	2b29      	cmp	r3, #41	; 0x29
 8045ea0:	d108      	bne.n	8045eb4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8045ea2:	f248 0101 	movw	r1, #32769	; 0x8001
 8045ea6:	6878      	ldr	r0, [r7, #4]
 8045ea8:	f000 fbd0 	bl	804664c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8045eac:	687b      	ldr	r3, [r7, #4]
 8045eae:	2221      	movs	r2, #33	; 0x21
 8045eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8045eb2:	e00d      	b.n	8045ed0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8045eb4:	7bfb      	ldrb	r3, [r7, #15]
 8045eb6:	2b22      	cmp	r3, #34	; 0x22
 8045eb8:	d002      	beq.n	8045ec0 <I2C_ITSlaveCplt+0x50>
 8045eba:	7bfb      	ldrb	r3, [r7, #15]
 8045ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8045ebe:	d107      	bne.n	8045ed0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8045ec0:	f248 0102 	movw	r1, #32770	; 0x8002
 8045ec4:	6878      	ldr	r0, [r7, #4]
 8045ec6:	f000 fbc1 	bl	804664c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8045eca:	687b      	ldr	r3, [r7, #4]
 8045ecc:	2222      	movs	r2, #34	; 0x22
 8045ece:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8045ed0:	687b      	ldr	r3, [r7, #4]
 8045ed2:	681b      	ldr	r3, [r3, #0]
 8045ed4:	685a      	ldr	r2, [r3, #4]
 8045ed6:	687b      	ldr	r3, [r7, #4]
 8045ed8:	681b      	ldr	r3, [r3, #0]
 8045eda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8045ede:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8045ee0:	687b      	ldr	r3, [r7, #4]
 8045ee2:	681b      	ldr	r3, [r3, #0]
 8045ee4:	6859      	ldr	r1, [r3, #4]
 8045ee6:	687b      	ldr	r3, [r7, #4]
 8045ee8:	681a      	ldr	r2, [r3, #0]
 8045eea:	4b65      	ldr	r3, [pc, #404]	; (8046080 <I2C_ITSlaveCplt+0x210>)
 8045eec:	400b      	ands	r3, r1
 8045eee:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8045ef0:	6878      	ldr	r0, [r7, #4]
 8045ef2:	f000 fa18 	bl	8046326 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8045ef6:	693b      	ldr	r3, [r7, #16]
 8045ef8:	0b9b      	lsrs	r3, r3, #14
 8045efa:	f003 0301 	and.w	r3, r3, #1
 8045efe:	2b00      	cmp	r3, #0
 8045f00:	d013      	beq.n	8045f2a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8045f02:	687b      	ldr	r3, [r7, #4]
 8045f04:	681b      	ldr	r3, [r3, #0]
 8045f06:	681a      	ldr	r2, [r3, #0]
 8045f08:	687b      	ldr	r3, [r7, #4]
 8045f0a:	681b      	ldr	r3, [r3, #0]
 8045f0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8045f10:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8045f12:	687b      	ldr	r3, [r7, #4]
 8045f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045f16:	2b00      	cmp	r3, #0
 8045f18:	d020      	beq.n	8045f5c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8045f1a:	687b      	ldr	r3, [r7, #4]
 8045f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8045f1e:	681b      	ldr	r3, [r3, #0]
 8045f20:	685b      	ldr	r3, [r3, #4]
 8045f22:	b29a      	uxth	r2, r3
 8045f24:	687b      	ldr	r3, [r7, #4]
 8045f26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8045f28:	e018      	b.n	8045f5c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8045f2a:	693b      	ldr	r3, [r7, #16]
 8045f2c:	0bdb      	lsrs	r3, r3, #15
 8045f2e:	f003 0301 	and.w	r3, r3, #1
 8045f32:	2b00      	cmp	r3, #0
 8045f34:	d012      	beq.n	8045f5c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8045f36:	687b      	ldr	r3, [r7, #4]
 8045f38:	681b      	ldr	r3, [r3, #0]
 8045f3a:	681a      	ldr	r2, [r3, #0]
 8045f3c:	687b      	ldr	r3, [r7, #4]
 8045f3e:	681b      	ldr	r3, [r3, #0]
 8045f40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8045f44:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8045f46:	687b      	ldr	r3, [r7, #4]
 8045f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8045f4a:	2b00      	cmp	r3, #0
 8045f4c:	d006      	beq.n	8045f5c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8045f4e:	687b      	ldr	r3, [r7, #4]
 8045f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8045f52:	681b      	ldr	r3, [r3, #0]
 8045f54:	685b      	ldr	r3, [r3, #4]
 8045f56:	b29a      	uxth	r2, r3
 8045f58:	687b      	ldr	r3, [r7, #4]
 8045f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8045f5c:	697b      	ldr	r3, [r7, #20]
 8045f5e:	089b      	lsrs	r3, r3, #2
 8045f60:	f003 0301 	and.w	r3, r3, #1
 8045f64:	2b00      	cmp	r3, #0
 8045f66:	d020      	beq.n	8045faa <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8045f68:	697b      	ldr	r3, [r7, #20]
 8045f6a:	f023 0304 	bic.w	r3, r3, #4
 8045f6e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8045f70:	687b      	ldr	r3, [r7, #4]
 8045f72:	681b      	ldr	r3, [r3, #0]
 8045f74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8045f76:	687b      	ldr	r3, [r7, #4]
 8045f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045f7a:	b2d2      	uxtb	r2, r2
 8045f7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8045f7e:	687b      	ldr	r3, [r7, #4]
 8045f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8045f82:	1c5a      	adds	r2, r3, #1
 8045f84:	687b      	ldr	r3, [r7, #4]
 8045f86:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8045f88:	687b      	ldr	r3, [r7, #4]
 8045f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8045f8c:	2b00      	cmp	r3, #0
 8045f8e:	d00c      	beq.n	8045faa <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8045f90:	687b      	ldr	r3, [r7, #4]
 8045f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8045f94:	3b01      	subs	r3, #1
 8045f96:	b29a      	uxth	r2, r3
 8045f98:	687b      	ldr	r3, [r7, #4]
 8045f9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8045f9c:	687b      	ldr	r3, [r7, #4]
 8045f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045fa0:	b29b      	uxth	r3, r3
 8045fa2:	3b01      	subs	r3, #1
 8045fa4:	b29a      	uxth	r2, r3
 8045fa6:	687b      	ldr	r3, [r7, #4]
 8045fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8045faa:	687b      	ldr	r3, [r7, #4]
 8045fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8045fae:	b29b      	uxth	r3, r3
 8045fb0:	2b00      	cmp	r3, #0
 8045fb2:	d005      	beq.n	8045fc0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8045fb4:	687b      	ldr	r3, [r7, #4]
 8045fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045fb8:	f043 0204 	orr.w	r2, r3, #4
 8045fbc:	687b      	ldr	r3, [r7, #4]
 8045fbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8045fc0:	687b      	ldr	r3, [r7, #4]
 8045fc2:	2200      	movs	r2, #0
 8045fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8045fc8:	687b      	ldr	r3, [r7, #4]
 8045fca:	2200      	movs	r2, #0
 8045fcc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8045fce:	687b      	ldr	r3, [r7, #4]
 8045fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045fd2:	2b00      	cmp	r3, #0
 8045fd4:	d010      	beq.n	8045ff8 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8045fd6:	687b      	ldr	r3, [r7, #4]
 8045fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045fda:	4619      	mov	r1, r3
 8045fdc:	6878      	ldr	r0, [r7, #4]
 8045fde:	f000 f8a9 	bl	8046134 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8045fe2:	687b      	ldr	r3, [r7, #4]
 8045fe4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8045fe8:	b2db      	uxtb	r3, r3
 8045fea:	2b28      	cmp	r3, #40	; 0x28
 8045fec:	d144      	bne.n	8046078 <I2C_ITSlaveCplt+0x208>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8045fee:	6979      	ldr	r1, [r7, #20]
 8045ff0:	6878      	ldr	r0, [r7, #4]
 8045ff2:	f000 f849 	bl	8046088 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8045ff6:	e03f      	b.n	8046078 <I2C_ITSlaveCplt+0x208>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8045ff8:	687b      	ldr	r3, [r7, #4]
 8045ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8045ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8046000:	d015      	beq.n	804602e <I2C_ITSlaveCplt+0x1be>
    I2C_ITSlaveSeqCplt(hi2c);
 8046002:	6878      	ldr	r0, [r7, #4]
 8046004:	f7ff fed4 	bl	8045db0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8046008:	687b      	ldr	r3, [r7, #4]
 804600a:	4a1e      	ldr	r2, [pc, #120]	; (8046084 <I2C_ITSlaveCplt+0x214>)
 804600c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 804600e:	687b      	ldr	r3, [r7, #4]
 8046010:	2220      	movs	r2, #32
 8046012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8046016:	687b      	ldr	r3, [r7, #4]
 8046018:	2200      	movs	r2, #0
 804601a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 804601c:	687b      	ldr	r3, [r7, #4]
 804601e:	2200      	movs	r2, #0
 8046020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ListenCpltCallback(hi2c);
 8046024:	687b      	ldr	r3, [r7, #4]
 8046026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8046028:	6878      	ldr	r0, [r7, #4]
 804602a:	4798      	blx	r3
}
 804602c:	e024      	b.n	8046078 <I2C_ITSlaveCplt+0x208>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 804602e:	687b      	ldr	r3, [r7, #4]
 8046030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8046034:	b2db      	uxtb	r3, r3
 8046036:	2b22      	cmp	r3, #34	; 0x22
 8046038:	d10f      	bne.n	804605a <I2C_ITSlaveCplt+0x1ea>
    hi2c->State = HAL_I2C_STATE_READY;
 804603a:	687b      	ldr	r3, [r7, #4]
 804603c:	2220      	movs	r2, #32
 804603e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8046042:	687b      	ldr	r3, [r7, #4]
 8046044:	2200      	movs	r2, #0
 8046046:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8046048:	687b      	ldr	r3, [r7, #4]
 804604a:	2200      	movs	r2, #0
 804604c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveRxCpltCallback(hi2c);
 8046050:	687b      	ldr	r3, [r7, #4]
 8046052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046054:	6878      	ldr	r0, [r7, #4]
 8046056:	4798      	blx	r3
}
 8046058:	e00e      	b.n	8046078 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 804605a:	687b      	ldr	r3, [r7, #4]
 804605c:	2220      	movs	r2, #32
 804605e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8046062:	687b      	ldr	r3, [r7, #4]
 8046064:	2200      	movs	r2, #0
 8046066:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8046068:	687b      	ldr	r3, [r7, #4]
 804606a:	2200      	movs	r2, #0
 804606c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->SlaveTxCpltCallback(hi2c);
 8046070:	687b      	ldr	r3, [r7, #4]
 8046072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8046074:	6878      	ldr	r0, [r7, #4]
 8046076:	4798      	blx	r3
}
 8046078:	bf00      	nop
 804607a:	3718      	adds	r7, #24
 804607c:	46bd      	mov	sp, r7
 804607e:	bd80      	pop	{r7, pc}
 8046080:	fe00e800 	.word	0xfe00e800
 8046084:	ffff0000 	.word	0xffff0000

08046088 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8046088:	b580      	push	{r7, lr}
 804608a:	b082      	sub	sp, #8
 804608c:	af00      	add	r7, sp, #0
 804608e:	6078      	str	r0, [r7, #4]
 8046090:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8046092:	687b      	ldr	r3, [r7, #4]
 8046094:	4a26      	ldr	r2, [pc, #152]	; (8046130 <I2C_ITListenCplt+0xa8>)
 8046096:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8046098:	687b      	ldr	r3, [r7, #4]
 804609a:	2200      	movs	r2, #0
 804609c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 804609e:	687b      	ldr	r3, [r7, #4]
 80460a0:	2220      	movs	r2, #32
 80460a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80460a6:	687b      	ldr	r3, [r7, #4]
 80460a8:	2200      	movs	r2, #0
 80460aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80460ae:	687b      	ldr	r3, [r7, #4]
 80460b0:	2200      	movs	r2, #0
 80460b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80460b4:	683b      	ldr	r3, [r7, #0]
 80460b6:	089b      	lsrs	r3, r3, #2
 80460b8:	f003 0301 	and.w	r3, r3, #1
 80460bc:	2b00      	cmp	r3, #0
 80460be:	d022      	beq.n	8046106 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80460c0:	687b      	ldr	r3, [r7, #4]
 80460c2:	681b      	ldr	r3, [r3, #0]
 80460c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80460c6:	687b      	ldr	r3, [r7, #4]
 80460c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80460ca:	b2d2      	uxtb	r2, r2
 80460cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80460ce:	687b      	ldr	r3, [r7, #4]
 80460d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80460d2:	1c5a      	adds	r2, r3, #1
 80460d4:	687b      	ldr	r3, [r7, #4]
 80460d6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80460d8:	687b      	ldr	r3, [r7, #4]
 80460da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80460dc:	2b00      	cmp	r3, #0
 80460de:	d012      	beq.n	8046106 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80460e0:	687b      	ldr	r3, [r7, #4]
 80460e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80460e4:	3b01      	subs	r3, #1
 80460e6:	b29a      	uxth	r2, r3
 80460e8:	687b      	ldr	r3, [r7, #4]
 80460ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80460ec:	687b      	ldr	r3, [r7, #4]
 80460ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80460f0:	b29b      	uxth	r3, r3
 80460f2:	3b01      	subs	r3, #1
 80460f4:	b29a      	uxth	r2, r3
 80460f6:	687b      	ldr	r3, [r7, #4]
 80460f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80460fa:	687b      	ldr	r3, [r7, #4]
 80460fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80460fe:	f043 0204 	orr.w	r2, r3, #4
 8046102:	687b      	ldr	r3, [r7, #4]
 8046104:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8046106:	f248 0103 	movw	r1, #32771	; 0x8003
 804610a:	6878      	ldr	r0, [r7, #4]
 804610c:	f000 fa9e 	bl	804664c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8046110:	687b      	ldr	r3, [r7, #4]
 8046112:	681b      	ldr	r3, [r3, #0]
 8046114:	2210      	movs	r2, #16
 8046116:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8046118:	687b      	ldr	r3, [r7, #4]
 804611a:	2200      	movs	r2, #0
 804611c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
 8046120:	687b      	ldr	r3, [r7, #4]
 8046122:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8046124:	6878      	ldr	r0, [r7, #4]
 8046126:	4798      	blx	r3
#else
  HAL_I2C_ListenCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8046128:	bf00      	nop
 804612a:	3708      	adds	r7, #8
 804612c:	46bd      	mov	sp, r7
 804612e:	bd80      	pop	{r7, pc}
 8046130:	ffff0000 	.word	0xffff0000

08046134 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8046134:	b580      	push	{r7, lr}
 8046136:	b084      	sub	sp, #16
 8046138:	af00      	add	r7, sp, #0
 804613a:	6078      	str	r0, [r7, #4]
 804613c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 804613e:	687b      	ldr	r3, [r7, #4]
 8046140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8046144:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8046146:	687b      	ldr	r3, [r7, #4]
 8046148:	2200      	movs	r2, #0
 804614a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 804614e:	687b      	ldr	r3, [r7, #4]
 8046150:	4a5d      	ldr	r2, [pc, #372]	; (80462c8 <I2C_ITError+0x194>)
 8046152:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8046154:	687b      	ldr	r3, [r7, #4]
 8046156:	2200      	movs	r2, #0
 8046158:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 804615a:	687b      	ldr	r3, [r7, #4]
 804615c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804615e:	683b      	ldr	r3, [r7, #0]
 8046160:	431a      	orrs	r2, r3
 8046162:	687b      	ldr	r3, [r7, #4]
 8046164:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8046166:	7bfb      	ldrb	r3, [r7, #15]
 8046168:	2b28      	cmp	r3, #40	; 0x28
 804616a:	d005      	beq.n	8046178 <I2C_ITError+0x44>
 804616c:	7bfb      	ldrb	r3, [r7, #15]
 804616e:	2b29      	cmp	r3, #41	; 0x29
 8046170:	d002      	beq.n	8046178 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8046172:	7bfb      	ldrb	r3, [r7, #15]
 8046174:	2b2a      	cmp	r3, #42	; 0x2a
 8046176:	d10b      	bne.n	8046190 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8046178:	2103      	movs	r1, #3
 804617a:	6878      	ldr	r0, [r7, #4]
 804617c:	f000 fa66 	bl	804664c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8046180:	687b      	ldr	r3, [r7, #4]
 8046182:	2228      	movs	r2, #40	; 0x28
 8046184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8046188:	687b      	ldr	r3, [r7, #4]
 804618a:	4a50      	ldr	r2, [pc, #320]	; (80462cc <I2C_ITError+0x198>)
 804618c:	635a      	str	r2, [r3, #52]	; 0x34
 804618e:	e011      	b.n	80461b4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8046190:	f248 0103 	movw	r1, #32771	; 0x8003
 8046194:	6878      	ldr	r0, [r7, #4]
 8046196:	f000 fa59 	bl	804664c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 804619a:	687b      	ldr	r3, [r7, #4]
 804619c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80461a0:	b2db      	uxtb	r3, r3
 80461a2:	2b60      	cmp	r3, #96	; 0x60
 80461a4:	d003      	beq.n	80461ae <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80461a6:	687b      	ldr	r3, [r7, #4]
 80461a8:	2220      	movs	r2, #32
 80461aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80461ae:	687b      	ldr	r3, [r7, #4]
 80461b0:	2200      	movs	r2, #0
 80461b2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80461b4:	687b      	ldr	r3, [r7, #4]
 80461b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80461b8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80461ba:	687b      	ldr	r3, [r7, #4]
 80461bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80461be:	2b00      	cmp	r3, #0
 80461c0:	d039      	beq.n	8046236 <I2C_ITError+0x102>
 80461c2:	68bb      	ldr	r3, [r7, #8]
 80461c4:	2b11      	cmp	r3, #17
 80461c6:	d002      	beq.n	80461ce <I2C_ITError+0x9a>
 80461c8:	68bb      	ldr	r3, [r7, #8]
 80461ca:	2b21      	cmp	r3, #33	; 0x21
 80461cc:	d133      	bne.n	8046236 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80461ce:	687b      	ldr	r3, [r7, #4]
 80461d0:	681b      	ldr	r3, [r3, #0]
 80461d2:	681b      	ldr	r3, [r3, #0]
 80461d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80461d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80461dc:	d107      	bne.n	80461ee <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80461de:	687b      	ldr	r3, [r7, #4]
 80461e0:	681b      	ldr	r3, [r3, #0]
 80461e2:	681a      	ldr	r2, [r3, #0]
 80461e4:	687b      	ldr	r3, [r7, #4]
 80461e6:	681b      	ldr	r3, [r3, #0]
 80461e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80461ec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80461ee:	687b      	ldr	r3, [r7, #4]
 80461f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80461f2:	4618      	mov	r0, r3
 80461f4:	f7fe fbab 	bl	804494e <HAL_DMA_GetState>
 80461f8:	4603      	mov	r3, r0
 80461fa:	2b01      	cmp	r3, #1
 80461fc:	d017      	beq.n	804622e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80461fe:	687b      	ldr	r3, [r7, #4]
 8046200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046202:	4a33      	ldr	r2, [pc, #204]	; (80462d0 <I2C_ITError+0x19c>)
 8046204:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8046206:	687b      	ldr	r3, [r7, #4]
 8046208:	2200      	movs	r2, #0
 804620a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 804620e:	687b      	ldr	r3, [r7, #4]
 8046210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046212:	4618      	mov	r0, r3
 8046214:	f7fe fa3c 	bl	8044690 <HAL_DMA_Abort_IT>
 8046218:	4603      	mov	r3, r0
 804621a:	2b00      	cmp	r3, #0
 804621c:	d04d      	beq.n	80462ba <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 804621e:	687b      	ldr	r3, [r7, #4]
 8046220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046224:	687a      	ldr	r2, [r7, #4]
 8046226:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8046228:	4610      	mov	r0, r2
 804622a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 804622c:	e045      	b.n	80462ba <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 804622e:	6878      	ldr	r0, [r7, #4]
 8046230:	f000 f850 	bl	80462d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8046234:	e041      	b.n	80462ba <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8046236:	687b      	ldr	r3, [r7, #4]
 8046238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804623a:	2b00      	cmp	r3, #0
 804623c:	d039      	beq.n	80462b2 <I2C_ITError+0x17e>
 804623e:	68bb      	ldr	r3, [r7, #8]
 8046240:	2b12      	cmp	r3, #18
 8046242:	d002      	beq.n	804624a <I2C_ITError+0x116>
 8046244:	68bb      	ldr	r3, [r7, #8]
 8046246:	2b22      	cmp	r3, #34	; 0x22
 8046248:	d133      	bne.n	80462b2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 804624a:	687b      	ldr	r3, [r7, #4]
 804624c:	681b      	ldr	r3, [r3, #0]
 804624e:	681b      	ldr	r3, [r3, #0]
 8046250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8046254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8046258:	d107      	bne.n	804626a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 804625a:	687b      	ldr	r3, [r7, #4]
 804625c:	681b      	ldr	r3, [r3, #0]
 804625e:	681a      	ldr	r2, [r3, #0]
 8046260:	687b      	ldr	r3, [r7, #4]
 8046262:	681b      	ldr	r3, [r3, #0]
 8046264:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8046268:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 804626a:	687b      	ldr	r3, [r7, #4]
 804626c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804626e:	4618      	mov	r0, r3
 8046270:	f7fe fb6d 	bl	804494e <HAL_DMA_GetState>
 8046274:	4603      	mov	r3, r0
 8046276:	2b01      	cmp	r3, #1
 8046278:	d017      	beq.n	80462aa <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 804627a:	687b      	ldr	r3, [r7, #4]
 804627c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804627e:	4a14      	ldr	r2, [pc, #80]	; (80462d0 <I2C_ITError+0x19c>)
 8046280:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8046282:	687b      	ldr	r3, [r7, #4]
 8046284:	2200      	movs	r2, #0
 8046286:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 804628a:	687b      	ldr	r3, [r7, #4]
 804628c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804628e:	4618      	mov	r0, r3
 8046290:	f7fe f9fe 	bl	8044690 <HAL_DMA_Abort_IT>
 8046294:	4603      	mov	r3, r0
 8046296:	2b00      	cmp	r3, #0
 8046298:	d011      	beq.n	80462be <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 804629a:	687b      	ldr	r3, [r7, #4]
 804629c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804629e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80462a0:	687a      	ldr	r2, [r7, #4]
 80462a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80462a4:	4610      	mov	r0, r2
 80462a6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80462a8:	e009      	b.n	80462be <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80462aa:	6878      	ldr	r0, [r7, #4]
 80462ac:	f000 f812 	bl	80462d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80462b0:	e005      	b.n	80462be <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80462b2:	6878      	ldr	r0, [r7, #4]
 80462b4:	f000 f80e 	bl	80462d4 <I2C_TreatErrorCallback>
  }
}
 80462b8:	e002      	b.n	80462c0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80462ba:	bf00      	nop
 80462bc:	e000      	b.n	80462c0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80462be:	bf00      	nop
}
 80462c0:	bf00      	nop
 80462c2:	3710      	adds	r7, #16
 80462c4:	46bd      	mov	sp, r7
 80462c6:	bd80      	pop	{r7, pc}
 80462c8:	ffff0000 	.word	0xffff0000
 80462cc:	08045953 	.word	0x08045953
 80462d0:	0804636f 	.word	0x0804636f

080462d4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80462d4:	b580      	push	{r7, lr}
 80462d6:	b082      	sub	sp, #8
 80462d8:	af00      	add	r7, sp, #0
 80462da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80462dc:	687b      	ldr	r3, [r7, #4]
 80462de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80462e2:	b2db      	uxtb	r3, r3
 80462e4:	2b60      	cmp	r3, #96	; 0x60
 80462e6:	d10f      	bne.n	8046308 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80462e8:	687b      	ldr	r3, [r7, #4]
 80462ea:	2220      	movs	r2, #32
 80462ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80462f0:	687b      	ldr	r3, [r7, #4]
 80462f2:	2200      	movs	r2, #0
 80462f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80462f6:	687b      	ldr	r3, [r7, #4]
 80462f8:	2200      	movs	r2, #0
 80462fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 80462fe:	687b      	ldr	r3, [r7, #4]
 8046300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8046302:	6878      	ldr	r0, [r7, #4]
 8046304:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8046306:	e00a      	b.n	804631e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8046308:	687b      	ldr	r3, [r7, #4]
 804630a:	2200      	movs	r2, #0
 804630c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 804630e:	687b      	ldr	r3, [r7, #4]
 8046310:	2200      	movs	r2, #0
 8046312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->ErrorCallback(hi2c);
 8046316:	687b      	ldr	r3, [r7, #4]
 8046318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 804631a:	6878      	ldr	r0, [r7, #4]
 804631c:	4798      	blx	r3
}
 804631e:	bf00      	nop
 8046320:	3708      	adds	r7, #8
 8046322:	46bd      	mov	sp, r7
 8046324:	bd80      	pop	{r7, pc}

08046326 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8046326:	b480      	push	{r7}
 8046328:	b083      	sub	sp, #12
 804632a:	af00      	add	r7, sp, #0
 804632c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 804632e:	687b      	ldr	r3, [r7, #4]
 8046330:	681b      	ldr	r3, [r3, #0]
 8046332:	699b      	ldr	r3, [r3, #24]
 8046334:	f003 0302 	and.w	r3, r3, #2
 8046338:	2b02      	cmp	r3, #2
 804633a:	d103      	bne.n	8046344 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 804633c:	687b      	ldr	r3, [r7, #4]
 804633e:	681b      	ldr	r3, [r3, #0]
 8046340:	2200      	movs	r2, #0
 8046342:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8046344:	687b      	ldr	r3, [r7, #4]
 8046346:	681b      	ldr	r3, [r3, #0]
 8046348:	699b      	ldr	r3, [r3, #24]
 804634a:	f003 0301 	and.w	r3, r3, #1
 804634e:	2b01      	cmp	r3, #1
 8046350:	d007      	beq.n	8046362 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8046352:	687b      	ldr	r3, [r7, #4]
 8046354:	681b      	ldr	r3, [r3, #0]
 8046356:	699a      	ldr	r2, [r3, #24]
 8046358:	687b      	ldr	r3, [r7, #4]
 804635a:	681b      	ldr	r3, [r3, #0]
 804635c:	f042 0201 	orr.w	r2, r2, #1
 8046360:	619a      	str	r2, [r3, #24]
  }
}
 8046362:	bf00      	nop
 8046364:	370c      	adds	r7, #12
 8046366:	46bd      	mov	sp, r7
 8046368:	f85d 7b04 	ldr.w	r7, [sp], #4
 804636c:	4770      	bx	lr

0804636e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 804636e:	b580      	push	{r7, lr}
 8046370:	b084      	sub	sp, #16
 8046372:	af00      	add	r7, sp, #0
 8046374:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8046376:	687b      	ldr	r3, [r7, #4]
 8046378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804637a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 804637c:	68fb      	ldr	r3, [r7, #12]
 804637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046380:	2b00      	cmp	r3, #0
 8046382:	d003      	beq.n	804638c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8046384:	68fb      	ldr	r3, [r7, #12]
 8046386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046388:	2200      	movs	r2, #0
 804638a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  if (hi2c->hdmarx != NULL)
 804638c:	68fb      	ldr	r3, [r7, #12]
 804638e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8046390:	2b00      	cmp	r3, #0
 8046392:	d003      	beq.n	804639c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8046394:	68fb      	ldr	r3, [r7, #12]
 8046396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8046398:	2200      	movs	r2, #0
 804639a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  I2C_TreatErrorCallback(hi2c);
 804639c:	68f8      	ldr	r0, [r7, #12]
 804639e:	f7ff ff99 	bl	80462d4 <I2C_TreatErrorCallback>
}
 80463a2:	bf00      	nop
 80463a4:	3710      	adds	r7, #16
 80463a6:	46bd      	mov	sp, r7
 80463a8:	bd80      	pop	{r7, pc}

080463aa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80463aa:	b580      	push	{r7, lr}
 80463ac:	b084      	sub	sp, #16
 80463ae:	af00      	add	r7, sp, #0
 80463b0:	60f8      	str	r0, [r7, #12]
 80463b2:	60b9      	str	r1, [r7, #8]
 80463b4:	603b      	str	r3, [r7, #0]
 80463b6:	4613      	mov	r3, r2
 80463b8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80463ba:	e022      	b.n	8046402 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80463bc:	683b      	ldr	r3, [r7, #0]
 80463be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80463c2:	d01e      	beq.n	8046402 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80463c4:	f7fc fb8e 	bl	8042ae4 <HAL_GetTick>
 80463c8:	4602      	mov	r2, r0
 80463ca:	69bb      	ldr	r3, [r7, #24]
 80463cc:	1ad3      	subs	r3, r2, r3
 80463ce:	683a      	ldr	r2, [r7, #0]
 80463d0:	429a      	cmp	r2, r3
 80463d2:	d302      	bcc.n	80463da <I2C_WaitOnFlagUntilTimeout+0x30>
 80463d4:	683b      	ldr	r3, [r7, #0]
 80463d6:	2b00      	cmp	r3, #0
 80463d8:	d113      	bne.n	8046402 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80463da:	68fb      	ldr	r3, [r7, #12]
 80463dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80463de:	f043 0220 	orr.w	r2, r3, #32
 80463e2:	68fb      	ldr	r3, [r7, #12]
 80463e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80463e6:	68fb      	ldr	r3, [r7, #12]
 80463e8:	2220      	movs	r2, #32
 80463ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80463ee:	68fb      	ldr	r3, [r7, #12]
 80463f0:	2200      	movs	r2, #0
 80463f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80463f6:	68fb      	ldr	r3, [r7, #12]
 80463f8:	2200      	movs	r2, #0
 80463fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80463fe:	2301      	movs	r3, #1
 8046400:	e00f      	b.n	8046422 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8046402:	68fb      	ldr	r3, [r7, #12]
 8046404:	681b      	ldr	r3, [r3, #0]
 8046406:	699a      	ldr	r2, [r3, #24]
 8046408:	68bb      	ldr	r3, [r7, #8]
 804640a:	4013      	ands	r3, r2
 804640c:	68ba      	ldr	r2, [r7, #8]
 804640e:	429a      	cmp	r2, r3
 8046410:	bf0c      	ite	eq
 8046412:	2301      	moveq	r3, #1
 8046414:	2300      	movne	r3, #0
 8046416:	b2db      	uxtb	r3, r3
 8046418:	461a      	mov	r2, r3
 804641a:	79fb      	ldrb	r3, [r7, #7]
 804641c:	429a      	cmp	r2, r3
 804641e:	d0cd      	beq.n	80463bc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8046420:	2300      	movs	r3, #0
}
 8046422:	4618      	mov	r0, r3
 8046424:	3710      	adds	r7, #16
 8046426:	46bd      	mov	sp, r7
 8046428:	bd80      	pop	{r7, pc}

0804642a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 804642a:	b580      	push	{r7, lr}
 804642c:	b084      	sub	sp, #16
 804642e:	af00      	add	r7, sp, #0
 8046430:	60f8      	str	r0, [r7, #12]
 8046432:	60b9      	str	r1, [r7, #8]
 8046434:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8046436:	e02c      	b.n	8046492 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8046438:	687a      	ldr	r2, [r7, #4]
 804643a:	68b9      	ldr	r1, [r7, #8]
 804643c:	68f8      	ldr	r0, [r7, #12]
 804643e:	f000 f871 	bl	8046524 <I2C_IsAcknowledgeFailed>
 8046442:	4603      	mov	r3, r0
 8046444:	2b00      	cmp	r3, #0
 8046446:	d001      	beq.n	804644c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8046448:	2301      	movs	r3, #1
 804644a:	e02a      	b.n	80464a2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 804644c:	68bb      	ldr	r3, [r7, #8]
 804644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046452:	d01e      	beq.n	8046492 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8046454:	f7fc fb46 	bl	8042ae4 <HAL_GetTick>
 8046458:	4602      	mov	r2, r0
 804645a:	687b      	ldr	r3, [r7, #4]
 804645c:	1ad3      	subs	r3, r2, r3
 804645e:	68ba      	ldr	r2, [r7, #8]
 8046460:	429a      	cmp	r2, r3
 8046462:	d302      	bcc.n	804646a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8046464:	68bb      	ldr	r3, [r7, #8]
 8046466:	2b00      	cmp	r3, #0
 8046468:	d113      	bne.n	8046492 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 804646a:	68fb      	ldr	r3, [r7, #12]
 804646c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804646e:	f043 0220 	orr.w	r2, r3, #32
 8046472:	68fb      	ldr	r3, [r7, #12]
 8046474:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8046476:	68fb      	ldr	r3, [r7, #12]
 8046478:	2220      	movs	r2, #32
 804647a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 804647e:	68fb      	ldr	r3, [r7, #12]
 8046480:	2200      	movs	r2, #0
 8046482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8046486:	68fb      	ldr	r3, [r7, #12]
 8046488:	2200      	movs	r2, #0
 804648a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 804648e:	2301      	movs	r3, #1
 8046490:	e007      	b.n	80464a2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8046492:	68fb      	ldr	r3, [r7, #12]
 8046494:	681b      	ldr	r3, [r3, #0]
 8046496:	699b      	ldr	r3, [r3, #24]
 8046498:	f003 0302 	and.w	r3, r3, #2
 804649c:	2b02      	cmp	r3, #2
 804649e:	d1cb      	bne.n	8046438 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80464a0:	2300      	movs	r3, #0
}
 80464a2:	4618      	mov	r0, r3
 80464a4:	3710      	adds	r7, #16
 80464a6:	46bd      	mov	sp, r7
 80464a8:	bd80      	pop	{r7, pc}

080464aa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80464aa:	b580      	push	{r7, lr}
 80464ac:	b084      	sub	sp, #16
 80464ae:	af00      	add	r7, sp, #0
 80464b0:	60f8      	str	r0, [r7, #12]
 80464b2:	60b9      	str	r1, [r7, #8]
 80464b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80464b6:	e028      	b.n	804650a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80464b8:	687a      	ldr	r2, [r7, #4]
 80464ba:	68b9      	ldr	r1, [r7, #8]
 80464bc:	68f8      	ldr	r0, [r7, #12]
 80464be:	f000 f831 	bl	8046524 <I2C_IsAcknowledgeFailed>
 80464c2:	4603      	mov	r3, r0
 80464c4:	2b00      	cmp	r3, #0
 80464c6:	d001      	beq.n	80464cc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80464c8:	2301      	movs	r3, #1
 80464ca:	e026      	b.n	804651a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80464cc:	f7fc fb0a 	bl	8042ae4 <HAL_GetTick>
 80464d0:	4602      	mov	r2, r0
 80464d2:	687b      	ldr	r3, [r7, #4]
 80464d4:	1ad3      	subs	r3, r2, r3
 80464d6:	68ba      	ldr	r2, [r7, #8]
 80464d8:	429a      	cmp	r2, r3
 80464da:	d302      	bcc.n	80464e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80464dc:	68bb      	ldr	r3, [r7, #8]
 80464de:	2b00      	cmp	r3, #0
 80464e0:	d113      	bne.n	804650a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80464e2:	68fb      	ldr	r3, [r7, #12]
 80464e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80464e6:	f043 0220 	orr.w	r2, r3, #32
 80464ea:	68fb      	ldr	r3, [r7, #12]
 80464ec:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80464ee:	68fb      	ldr	r3, [r7, #12]
 80464f0:	2220      	movs	r2, #32
 80464f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80464f6:	68fb      	ldr	r3, [r7, #12]
 80464f8:	2200      	movs	r2, #0
 80464fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80464fe:	68fb      	ldr	r3, [r7, #12]
 8046500:	2200      	movs	r2, #0
 8046502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8046506:	2301      	movs	r3, #1
 8046508:	e007      	b.n	804651a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 804650a:	68fb      	ldr	r3, [r7, #12]
 804650c:	681b      	ldr	r3, [r3, #0]
 804650e:	699b      	ldr	r3, [r3, #24]
 8046510:	f003 0320 	and.w	r3, r3, #32
 8046514:	2b20      	cmp	r3, #32
 8046516:	d1cf      	bne.n	80464b8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8046518:	2300      	movs	r3, #0
}
 804651a:	4618      	mov	r0, r3
 804651c:	3710      	adds	r7, #16
 804651e:	46bd      	mov	sp, r7
 8046520:	bd80      	pop	{r7, pc}
	...

08046524 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8046524:	b580      	push	{r7, lr}
 8046526:	b084      	sub	sp, #16
 8046528:	af00      	add	r7, sp, #0
 804652a:	60f8      	str	r0, [r7, #12]
 804652c:	60b9      	str	r1, [r7, #8]
 804652e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8046530:	68fb      	ldr	r3, [r7, #12]
 8046532:	681b      	ldr	r3, [r3, #0]
 8046534:	699b      	ldr	r3, [r3, #24]
 8046536:	f003 0310 	and.w	r3, r3, #16
 804653a:	2b10      	cmp	r3, #16
 804653c:	d151      	bne.n	80465e2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 804653e:	e022      	b.n	8046586 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8046540:	68bb      	ldr	r3, [r7, #8]
 8046542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8046546:	d01e      	beq.n	8046586 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8046548:	f7fc facc 	bl	8042ae4 <HAL_GetTick>
 804654c:	4602      	mov	r2, r0
 804654e:	687b      	ldr	r3, [r7, #4]
 8046550:	1ad3      	subs	r3, r2, r3
 8046552:	68ba      	ldr	r2, [r7, #8]
 8046554:	429a      	cmp	r2, r3
 8046556:	d302      	bcc.n	804655e <I2C_IsAcknowledgeFailed+0x3a>
 8046558:	68bb      	ldr	r3, [r7, #8]
 804655a:	2b00      	cmp	r3, #0
 804655c:	d113      	bne.n	8046586 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 804655e:	68fb      	ldr	r3, [r7, #12]
 8046560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8046562:	f043 0220 	orr.w	r2, r3, #32
 8046566:	68fb      	ldr	r3, [r7, #12]
 8046568:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 804656a:	68fb      	ldr	r3, [r7, #12]
 804656c:	2220      	movs	r2, #32
 804656e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8046572:	68fb      	ldr	r3, [r7, #12]
 8046574:	2200      	movs	r2, #0
 8046576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 804657a:	68fb      	ldr	r3, [r7, #12]
 804657c:	2200      	movs	r2, #0
 804657e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8046582:	2301      	movs	r3, #1
 8046584:	e02e      	b.n	80465e4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8046586:	68fb      	ldr	r3, [r7, #12]
 8046588:	681b      	ldr	r3, [r3, #0]
 804658a:	699b      	ldr	r3, [r3, #24]
 804658c:	f003 0320 	and.w	r3, r3, #32
 8046590:	2b20      	cmp	r3, #32
 8046592:	d1d5      	bne.n	8046540 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8046594:	68fb      	ldr	r3, [r7, #12]
 8046596:	681b      	ldr	r3, [r3, #0]
 8046598:	2210      	movs	r2, #16
 804659a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 804659c:	68fb      	ldr	r3, [r7, #12]
 804659e:	681b      	ldr	r3, [r3, #0]
 80465a0:	2220      	movs	r2, #32
 80465a2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80465a4:	68f8      	ldr	r0, [r7, #12]
 80465a6:	f7ff febe 	bl	8046326 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80465aa:	68fb      	ldr	r3, [r7, #12]
 80465ac:	681b      	ldr	r3, [r3, #0]
 80465ae:	6859      	ldr	r1, [r3, #4]
 80465b0:	68fb      	ldr	r3, [r7, #12]
 80465b2:	681a      	ldr	r2, [r3, #0]
 80465b4:	4b0d      	ldr	r3, [pc, #52]	; (80465ec <I2C_IsAcknowledgeFailed+0xc8>)
 80465b6:	400b      	ands	r3, r1
 80465b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80465ba:	68fb      	ldr	r3, [r7, #12]
 80465bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80465be:	f043 0204 	orr.w	r2, r3, #4
 80465c2:	68fb      	ldr	r3, [r7, #12]
 80465c4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80465c6:	68fb      	ldr	r3, [r7, #12]
 80465c8:	2220      	movs	r2, #32
 80465ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80465ce:	68fb      	ldr	r3, [r7, #12]
 80465d0:	2200      	movs	r2, #0
 80465d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80465d6:	68fb      	ldr	r3, [r7, #12]
 80465d8:	2200      	movs	r2, #0
 80465da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80465de:	2301      	movs	r3, #1
 80465e0:	e000      	b.n	80465e4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80465e2:	2300      	movs	r3, #0
}
 80465e4:	4618      	mov	r0, r3
 80465e6:	3710      	adds	r7, #16
 80465e8:	46bd      	mov	sp, r7
 80465ea:	bd80      	pop	{r7, pc}
 80465ec:	fe00e800 	.word	0xfe00e800

080465f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80465f0:	b480      	push	{r7}
 80465f2:	b085      	sub	sp, #20
 80465f4:	af00      	add	r7, sp, #0
 80465f6:	60f8      	str	r0, [r7, #12]
 80465f8:	607b      	str	r3, [r7, #4]
 80465fa:	460b      	mov	r3, r1
 80465fc:	817b      	strh	r3, [r7, #10]
 80465fe:	4613      	mov	r3, r2
 8046600:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8046602:	68fb      	ldr	r3, [r7, #12]
 8046604:	681b      	ldr	r3, [r3, #0]
 8046606:	685a      	ldr	r2, [r3, #4]
 8046608:	69bb      	ldr	r3, [r7, #24]
 804660a:	0d5b      	lsrs	r3, r3, #21
 804660c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8046610:	4b0d      	ldr	r3, [pc, #52]	; (8046648 <I2C_TransferConfig+0x58>)
 8046612:	430b      	orrs	r3, r1
 8046614:	43db      	mvns	r3, r3
 8046616:	ea02 0103 	and.w	r1, r2, r3
 804661a:	897b      	ldrh	r3, [r7, #10]
 804661c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8046620:	7a7b      	ldrb	r3, [r7, #9]
 8046622:	041b      	lsls	r3, r3, #16
 8046624:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8046628:	431a      	orrs	r2, r3
 804662a:	687b      	ldr	r3, [r7, #4]
 804662c:	431a      	orrs	r2, r3
 804662e:	69bb      	ldr	r3, [r7, #24]
 8046630:	431a      	orrs	r2, r3
 8046632:	68fb      	ldr	r3, [r7, #12]
 8046634:	681b      	ldr	r3, [r3, #0]
 8046636:	430a      	orrs	r2, r1
 8046638:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 804663a:	bf00      	nop
 804663c:	3714      	adds	r7, #20
 804663e:	46bd      	mov	sp, r7
 8046640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046644:	4770      	bx	lr
 8046646:	bf00      	nop
 8046648:	03ff63ff 	.word	0x03ff63ff

0804664c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 804664c:	b480      	push	{r7}
 804664e:	b085      	sub	sp, #20
 8046650:	af00      	add	r7, sp, #0
 8046652:	6078      	str	r0, [r7, #4]
 8046654:	460b      	mov	r3, r1
 8046656:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8046658:	2300      	movs	r3, #0
 804665a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 804665c:	887b      	ldrh	r3, [r7, #2]
 804665e:	f003 0301 	and.w	r3, r3, #1
 8046662:	2b00      	cmp	r3, #0
 8046664:	d00f      	beq.n	8046686 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8046666:	68fb      	ldr	r3, [r7, #12]
 8046668:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 804666c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 804666e:	687b      	ldr	r3, [r7, #4]
 8046670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8046674:	b2db      	uxtb	r3, r3
 8046676:	f003 0328 	and.w	r3, r3, #40	; 0x28
 804667a:	2b28      	cmp	r3, #40	; 0x28
 804667c:	d003      	beq.n	8046686 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 804667e:	68fb      	ldr	r3, [r7, #12]
 8046680:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8046684:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8046686:	887b      	ldrh	r3, [r7, #2]
 8046688:	f003 0302 	and.w	r3, r3, #2
 804668c:	2b00      	cmp	r3, #0
 804668e:	d00f      	beq.n	80466b0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8046690:	68fb      	ldr	r3, [r7, #12]
 8046692:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8046696:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8046698:	687b      	ldr	r3, [r7, #4]
 804669a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 804669e:	b2db      	uxtb	r3, r3
 80466a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80466a4:	2b28      	cmp	r3, #40	; 0x28
 80466a6:	d003      	beq.n	80466b0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80466a8:	68fb      	ldr	r3, [r7, #12]
 80466aa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80466ae:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80466b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80466b4:	2b00      	cmp	r3, #0
 80466b6:	da03      	bge.n	80466c0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80466b8:	68fb      	ldr	r3, [r7, #12]
 80466ba:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80466be:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80466c0:	887b      	ldrh	r3, [r7, #2]
 80466c2:	2b10      	cmp	r3, #16
 80466c4:	d103      	bne.n	80466ce <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80466c6:	68fb      	ldr	r3, [r7, #12]
 80466c8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80466cc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80466ce:	887b      	ldrh	r3, [r7, #2]
 80466d0:	2b20      	cmp	r3, #32
 80466d2:	d103      	bne.n	80466dc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80466d4:	68fb      	ldr	r3, [r7, #12]
 80466d6:	f043 0320 	orr.w	r3, r3, #32
 80466da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80466dc:	887b      	ldrh	r3, [r7, #2]
 80466de:	2b40      	cmp	r3, #64	; 0x40
 80466e0:	d103      	bne.n	80466ea <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80466e2:	68fb      	ldr	r3, [r7, #12]
 80466e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80466e8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80466ea:	687b      	ldr	r3, [r7, #4]
 80466ec:	681b      	ldr	r3, [r3, #0]
 80466ee:	6819      	ldr	r1, [r3, #0]
 80466f0:	68fb      	ldr	r3, [r7, #12]
 80466f2:	43da      	mvns	r2, r3
 80466f4:	687b      	ldr	r3, [r7, #4]
 80466f6:	681b      	ldr	r3, [r3, #0]
 80466f8:	400a      	ands	r2, r1
 80466fa:	601a      	str	r2, [r3, #0]
}
 80466fc:	bf00      	nop
 80466fe:	3714      	adds	r7, #20
 8046700:	46bd      	mov	sp, r7
 8046702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046706:	4770      	bx	lr

08046708 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8046708:	b480      	push	{r7}
 804670a:	b083      	sub	sp, #12
 804670c:	af00      	add	r7, sp, #0
 804670e:	6078      	str	r0, [r7, #4]
 8046710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8046712:	687b      	ldr	r3, [r7, #4]
 8046714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8046718:	b2db      	uxtb	r3, r3
 804671a:	2b20      	cmp	r3, #32
 804671c:	d138      	bne.n	8046790 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 804671e:	687b      	ldr	r3, [r7, #4]
 8046720:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8046724:	2b01      	cmp	r3, #1
 8046726:	d101      	bne.n	804672c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8046728:	2302      	movs	r3, #2
 804672a:	e032      	b.n	8046792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 804672c:	687b      	ldr	r3, [r7, #4]
 804672e:	2201      	movs	r2, #1
 8046730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8046734:	687b      	ldr	r3, [r7, #4]
 8046736:	2224      	movs	r2, #36	; 0x24
 8046738:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 804673c:	687b      	ldr	r3, [r7, #4]
 804673e:	681b      	ldr	r3, [r3, #0]
 8046740:	681a      	ldr	r2, [r3, #0]
 8046742:	687b      	ldr	r3, [r7, #4]
 8046744:	681b      	ldr	r3, [r3, #0]
 8046746:	f022 0201 	bic.w	r2, r2, #1
 804674a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 804674c:	687b      	ldr	r3, [r7, #4]
 804674e:	681b      	ldr	r3, [r3, #0]
 8046750:	681a      	ldr	r2, [r3, #0]
 8046752:	687b      	ldr	r3, [r7, #4]
 8046754:	681b      	ldr	r3, [r3, #0]
 8046756:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 804675a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 804675c:	687b      	ldr	r3, [r7, #4]
 804675e:	681b      	ldr	r3, [r3, #0]
 8046760:	6819      	ldr	r1, [r3, #0]
 8046762:	687b      	ldr	r3, [r7, #4]
 8046764:	681b      	ldr	r3, [r3, #0]
 8046766:	683a      	ldr	r2, [r7, #0]
 8046768:	430a      	orrs	r2, r1
 804676a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 804676c:	687b      	ldr	r3, [r7, #4]
 804676e:	681b      	ldr	r3, [r3, #0]
 8046770:	681a      	ldr	r2, [r3, #0]
 8046772:	687b      	ldr	r3, [r7, #4]
 8046774:	681b      	ldr	r3, [r3, #0]
 8046776:	f042 0201 	orr.w	r2, r2, #1
 804677a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 804677c:	687b      	ldr	r3, [r7, #4]
 804677e:	2220      	movs	r2, #32
 8046780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8046784:	687b      	ldr	r3, [r7, #4]
 8046786:	2200      	movs	r2, #0
 8046788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 804678c:	2300      	movs	r3, #0
 804678e:	e000      	b.n	8046792 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8046790:	2302      	movs	r3, #2
  }
}
 8046792:	4618      	mov	r0, r3
 8046794:	370c      	adds	r7, #12
 8046796:	46bd      	mov	sp, r7
 8046798:	f85d 7b04 	ldr.w	r7, [sp], #4
 804679c:	4770      	bx	lr

0804679e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 804679e:	b480      	push	{r7}
 80467a0:	b085      	sub	sp, #20
 80467a2:	af00      	add	r7, sp, #0
 80467a4:	6078      	str	r0, [r7, #4]
 80467a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80467a8:	687b      	ldr	r3, [r7, #4]
 80467aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80467ae:	b2db      	uxtb	r3, r3
 80467b0:	2b20      	cmp	r3, #32
 80467b2:	d139      	bne.n	8046828 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80467b4:	687b      	ldr	r3, [r7, #4]
 80467b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80467ba:	2b01      	cmp	r3, #1
 80467bc:	d101      	bne.n	80467c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80467be:	2302      	movs	r3, #2
 80467c0:	e033      	b.n	804682a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80467c2:	687b      	ldr	r3, [r7, #4]
 80467c4:	2201      	movs	r2, #1
 80467c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80467ca:	687b      	ldr	r3, [r7, #4]
 80467cc:	2224      	movs	r2, #36	; 0x24
 80467ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80467d2:	687b      	ldr	r3, [r7, #4]
 80467d4:	681b      	ldr	r3, [r3, #0]
 80467d6:	681a      	ldr	r2, [r3, #0]
 80467d8:	687b      	ldr	r3, [r7, #4]
 80467da:	681b      	ldr	r3, [r3, #0]
 80467dc:	f022 0201 	bic.w	r2, r2, #1
 80467e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80467e2:	687b      	ldr	r3, [r7, #4]
 80467e4:	681b      	ldr	r3, [r3, #0]
 80467e6:	681b      	ldr	r3, [r3, #0]
 80467e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80467ea:	68fb      	ldr	r3, [r7, #12]
 80467ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80467f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80467f2:	683b      	ldr	r3, [r7, #0]
 80467f4:	021b      	lsls	r3, r3, #8
 80467f6:	68fa      	ldr	r2, [r7, #12]
 80467f8:	4313      	orrs	r3, r2
 80467fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80467fc:	687b      	ldr	r3, [r7, #4]
 80467fe:	681b      	ldr	r3, [r3, #0]
 8046800:	68fa      	ldr	r2, [r7, #12]
 8046802:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8046804:	687b      	ldr	r3, [r7, #4]
 8046806:	681b      	ldr	r3, [r3, #0]
 8046808:	681a      	ldr	r2, [r3, #0]
 804680a:	687b      	ldr	r3, [r7, #4]
 804680c:	681b      	ldr	r3, [r3, #0]
 804680e:	f042 0201 	orr.w	r2, r2, #1
 8046812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8046814:	687b      	ldr	r3, [r7, #4]
 8046816:	2220      	movs	r2, #32
 8046818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 804681c:	687b      	ldr	r3, [r7, #4]
 804681e:	2200      	movs	r2, #0
 8046820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8046824:	2300      	movs	r3, #0
 8046826:	e000      	b.n	804682a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8046828:	2302      	movs	r3, #2
  }
}
 804682a:	4618      	mov	r0, r3
 804682c:	3714      	adds	r7, #20
 804682e:	46bd      	mov	sp, r7
 8046830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046834:	4770      	bx	lr
	...

08046838 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8046838:	b480      	push	{r7}
 804683a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 804683c:	4b05      	ldr	r3, [pc, #20]	; (8046854 <HAL_PWREx_EnableVddIO2+0x1c>)
 804683e:	685b      	ldr	r3, [r3, #4]
 8046840:	4a04      	ldr	r2, [pc, #16]	; (8046854 <HAL_PWREx_EnableVddIO2+0x1c>)
 8046842:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8046846:	6053      	str	r3, [r2, #4]
}
 8046848:	bf00      	nop
 804684a:	46bd      	mov	sp, r7
 804684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046850:	4770      	bx	lr
 8046852:	bf00      	nop
 8046854:	40007000 	.word	0x40007000

08046858 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8046858:	b480      	push	{r7}
 804685a:	b089      	sub	sp, #36	; 0x24
 804685c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 804685e:	2300      	movs	r3, #0
 8046860:	61fb      	str	r3, [r7, #28]
 8046862:	2300      	movs	r3, #0
 8046864:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8046866:	4b47      	ldr	r3, [pc, #284]	; (8046984 <HAL_RCC_GetSysClockFreq+0x12c>)
 8046868:	689b      	ldr	r3, [r3, #8]
 804686a:	f003 030c 	and.w	r3, r3, #12
 804686e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8046870:	4b44      	ldr	r3, [pc, #272]	; (8046984 <HAL_RCC_GetSysClockFreq+0x12c>)
 8046872:	68db      	ldr	r3, [r3, #12]
 8046874:	f003 0303 	and.w	r3, r3, #3
 8046878:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 804687a:	693b      	ldr	r3, [r7, #16]
 804687c:	2b00      	cmp	r3, #0
 804687e:	d005      	beq.n	804688c <HAL_RCC_GetSysClockFreq+0x34>
 8046880:	693b      	ldr	r3, [r7, #16]
 8046882:	2b0c      	cmp	r3, #12
 8046884:	d121      	bne.n	80468ca <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8046886:	68fb      	ldr	r3, [r7, #12]
 8046888:	2b01      	cmp	r3, #1
 804688a:	d11e      	bne.n	80468ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 804688c:	4b3d      	ldr	r3, [pc, #244]	; (8046984 <HAL_RCC_GetSysClockFreq+0x12c>)
 804688e:	681b      	ldr	r3, [r3, #0]
 8046890:	f003 0308 	and.w	r3, r3, #8
 8046894:	2b00      	cmp	r3, #0
 8046896:	d107      	bne.n	80468a8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8046898:	4b3a      	ldr	r3, [pc, #232]	; (8046984 <HAL_RCC_GetSysClockFreq+0x12c>)
 804689a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804689e:	0a1b      	lsrs	r3, r3, #8
 80468a0:	f003 030f 	and.w	r3, r3, #15
 80468a4:	61fb      	str	r3, [r7, #28]
 80468a6:	e005      	b.n	80468b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80468a8:	4b36      	ldr	r3, [pc, #216]	; (8046984 <HAL_RCC_GetSysClockFreq+0x12c>)
 80468aa:	681b      	ldr	r3, [r3, #0]
 80468ac:	091b      	lsrs	r3, r3, #4
 80468ae:	f003 030f 	and.w	r3, r3, #15
 80468b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80468b4:	4a34      	ldr	r2, [pc, #208]	; (8046988 <HAL_RCC_GetSysClockFreq+0x130>)
 80468b6:	69fb      	ldr	r3, [r7, #28]
 80468b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80468bc:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80468be:	693b      	ldr	r3, [r7, #16]
 80468c0:	2b00      	cmp	r3, #0
 80468c2:	d10d      	bne.n	80468e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80468c4:	69fb      	ldr	r3, [r7, #28]
 80468c6:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80468c8:	e00a      	b.n	80468e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80468ca:	693b      	ldr	r3, [r7, #16]
 80468cc:	2b04      	cmp	r3, #4
 80468ce:	d102      	bne.n	80468d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80468d0:	4b2e      	ldr	r3, [pc, #184]	; (804698c <HAL_RCC_GetSysClockFreq+0x134>)
 80468d2:	61bb      	str	r3, [r7, #24]
 80468d4:	e004      	b.n	80468e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80468d6:	693b      	ldr	r3, [r7, #16]
 80468d8:	2b08      	cmp	r3, #8
 80468da:	d101      	bne.n	80468e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80468dc:	4b2c      	ldr	r3, [pc, #176]	; (8046990 <HAL_RCC_GetSysClockFreq+0x138>)
 80468de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80468e0:	693b      	ldr	r3, [r7, #16]
 80468e2:	2b0c      	cmp	r3, #12
 80468e4:	d146      	bne.n	8046974 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80468e6:	4b27      	ldr	r3, [pc, #156]	; (8046984 <HAL_RCC_GetSysClockFreq+0x12c>)
 80468e8:	68db      	ldr	r3, [r3, #12]
 80468ea:	f003 0303 	and.w	r3, r3, #3
 80468ee:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80468f0:	4b24      	ldr	r3, [pc, #144]	; (8046984 <HAL_RCC_GetSysClockFreq+0x12c>)
 80468f2:	68db      	ldr	r3, [r3, #12]
 80468f4:	091b      	lsrs	r3, r3, #4
 80468f6:	f003 030f 	and.w	r3, r3, #15
 80468fa:	3301      	adds	r3, #1
 80468fc:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80468fe:	68bb      	ldr	r3, [r7, #8]
 8046900:	2b02      	cmp	r3, #2
 8046902:	d003      	beq.n	804690c <HAL_RCC_GetSysClockFreq+0xb4>
 8046904:	68bb      	ldr	r3, [r7, #8]
 8046906:	2b03      	cmp	r3, #3
 8046908:	d00d      	beq.n	8046926 <HAL_RCC_GetSysClockFreq+0xce>
 804690a:	e019      	b.n	8046940 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804690c:	4a1f      	ldr	r2, [pc, #124]	; (804698c <HAL_RCC_GetSysClockFreq+0x134>)
 804690e:	687b      	ldr	r3, [r7, #4]
 8046910:	fbb2 f3f3 	udiv	r3, r2, r3
 8046914:	4a1b      	ldr	r2, [pc, #108]	; (8046984 <HAL_RCC_GetSysClockFreq+0x12c>)
 8046916:	68d2      	ldr	r2, [r2, #12]
 8046918:	0a12      	lsrs	r2, r2, #8
 804691a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804691e:	fb02 f303 	mul.w	r3, r2, r3
 8046922:	617b      	str	r3, [r7, #20]
        break;
 8046924:	e019      	b.n	804695a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8046926:	4a1a      	ldr	r2, [pc, #104]	; (8046990 <HAL_RCC_GetSysClockFreq+0x138>)
 8046928:	687b      	ldr	r3, [r7, #4]
 804692a:	fbb2 f3f3 	udiv	r3, r2, r3
 804692e:	4a15      	ldr	r2, [pc, #84]	; (8046984 <HAL_RCC_GetSysClockFreq+0x12c>)
 8046930:	68d2      	ldr	r2, [r2, #12]
 8046932:	0a12      	lsrs	r2, r2, #8
 8046934:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8046938:	fb02 f303 	mul.w	r3, r2, r3
 804693c:	617b      	str	r3, [r7, #20]
        break;
 804693e:	e00c      	b.n	804695a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8046940:	69fa      	ldr	r2, [r7, #28]
 8046942:	687b      	ldr	r3, [r7, #4]
 8046944:	fbb2 f3f3 	udiv	r3, r2, r3
 8046948:	4a0e      	ldr	r2, [pc, #56]	; (8046984 <HAL_RCC_GetSysClockFreq+0x12c>)
 804694a:	68d2      	ldr	r2, [r2, #12]
 804694c:	0a12      	lsrs	r2, r2, #8
 804694e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8046952:	fb02 f303 	mul.w	r3, r2, r3
 8046956:	617b      	str	r3, [r7, #20]
        break;
 8046958:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 804695a:	4b0a      	ldr	r3, [pc, #40]	; (8046984 <HAL_RCC_GetSysClockFreq+0x12c>)
 804695c:	68db      	ldr	r3, [r3, #12]
 804695e:	0e5b      	lsrs	r3, r3, #25
 8046960:	f003 0303 	and.w	r3, r3, #3
 8046964:	3301      	adds	r3, #1
 8046966:	005b      	lsls	r3, r3, #1
 8046968:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 804696a:	697a      	ldr	r2, [r7, #20]
 804696c:	683b      	ldr	r3, [r7, #0]
 804696e:	fbb2 f3f3 	udiv	r3, r2, r3
 8046972:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8046974:	69bb      	ldr	r3, [r7, #24]
}
 8046976:	4618      	mov	r0, r3
 8046978:	3724      	adds	r7, #36	; 0x24
 804697a:	46bd      	mov	sp, r7
 804697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046980:	4770      	bx	lr
 8046982:	bf00      	nop
 8046984:	40021000 	.word	0x40021000
 8046988:	08049fa8 	.word	0x08049fa8
 804698c:	00f42400 	.word	0x00f42400
 8046990:	007a1200 	.word	0x007a1200

08046994 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8046994:	b580      	push	{r7, lr}
 8046996:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8046998:	f7ff ff5e 	bl	8046858 <HAL_RCC_GetSysClockFreq>
 804699c:	4602      	mov	r2, r0
 804699e:	4b05      	ldr	r3, [pc, #20]	; (80469b4 <HAL_RCC_GetHCLKFreq+0x20>)
 80469a0:	689b      	ldr	r3, [r3, #8]
 80469a2:	091b      	lsrs	r3, r3, #4
 80469a4:	f003 030f 	and.w	r3, r3, #15
 80469a8:	4903      	ldr	r1, [pc, #12]	; (80469b8 <HAL_RCC_GetHCLKFreq+0x24>)
 80469aa:	5ccb      	ldrb	r3, [r1, r3]
 80469ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80469b0:	4618      	mov	r0, r3
 80469b2:	bd80      	pop	{r7, pc}
 80469b4:	40021000 	.word	0x40021000
 80469b8:	08049f90 	.word	0x08049f90

080469bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80469bc:	b580      	push	{r7, lr}
 80469be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80469c0:	f7ff ffe8 	bl	8046994 <HAL_RCC_GetHCLKFreq>
 80469c4:	4602      	mov	r2, r0
 80469c6:	4b05      	ldr	r3, [pc, #20]	; (80469dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80469c8:	689b      	ldr	r3, [r3, #8]
 80469ca:	0a1b      	lsrs	r3, r3, #8
 80469cc:	f003 0307 	and.w	r3, r3, #7
 80469d0:	4903      	ldr	r1, [pc, #12]	; (80469e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80469d2:	5ccb      	ldrb	r3, [r1, r3]
 80469d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80469d8:	4618      	mov	r0, r3
 80469da:	bd80      	pop	{r7, pc}
 80469dc:	40021000 	.word	0x40021000
 80469e0:	08049fa0 	.word	0x08049fa0

080469e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80469e4:	b580      	push	{r7, lr}
 80469e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80469e8:	f7ff ffd4 	bl	8046994 <HAL_RCC_GetHCLKFreq>
 80469ec:	4602      	mov	r2, r0
 80469ee:	4b05      	ldr	r3, [pc, #20]	; (8046a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80469f0:	689b      	ldr	r3, [r3, #8]
 80469f2:	0adb      	lsrs	r3, r3, #11
 80469f4:	f003 0307 	and.w	r3, r3, #7
 80469f8:	4903      	ldr	r1, [pc, #12]	; (8046a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80469fa:	5ccb      	ldrb	r3, [r1, r3]
 80469fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8046a00:	4618      	mov	r0, r3
 8046a02:	bd80      	pop	{r7, pc}
 8046a04:	40021000 	.word	0x40021000
 8046a08:	08049fa0 	.word	0x08049fa0

08046a0c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8046a0c:	b480      	push	{r7}
 8046a0e:	b083      	sub	sp, #12
 8046a10:	af00      	add	r7, sp, #0
 8046a12:	6078      	str	r0, [r7, #4]
 8046a14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8046a16:	687b      	ldr	r3, [r7, #4]
 8046a18:	220f      	movs	r2, #15
 8046a1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8046a1c:	4b12      	ldr	r3, [pc, #72]	; (8046a68 <HAL_RCC_GetClockConfig+0x5c>)
 8046a1e:	689b      	ldr	r3, [r3, #8]
 8046a20:	f003 0203 	and.w	r2, r3, #3
 8046a24:	687b      	ldr	r3, [r7, #4]
 8046a26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8046a28:	4b0f      	ldr	r3, [pc, #60]	; (8046a68 <HAL_RCC_GetClockConfig+0x5c>)
 8046a2a:	689b      	ldr	r3, [r3, #8]
 8046a2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8046a30:	687b      	ldr	r3, [r7, #4]
 8046a32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8046a34:	4b0c      	ldr	r3, [pc, #48]	; (8046a68 <HAL_RCC_GetClockConfig+0x5c>)
 8046a36:	689b      	ldr	r3, [r3, #8]
 8046a38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8046a3c:	687b      	ldr	r3, [r7, #4]
 8046a3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8046a40:	4b09      	ldr	r3, [pc, #36]	; (8046a68 <HAL_RCC_GetClockConfig+0x5c>)
 8046a42:	689b      	ldr	r3, [r3, #8]
 8046a44:	08db      	lsrs	r3, r3, #3
 8046a46:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8046a4a:	687b      	ldr	r3, [r7, #4]
 8046a4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8046a4e:	4b07      	ldr	r3, [pc, #28]	; (8046a6c <HAL_RCC_GetClockConfig+0x60>)
 8046a50:	681b      	ldr	r3, [r3, #0]
 8046a52:	f003 020f 	and.w	r2, r3, #15
 8046a56:	683b      	ldr	r3, [r7, #0]
 8046a58:	601a      	str	r2, [r3, #0]
}
 8046a5a:	bf00      	nop
 8046a5c:	370c      	adds	r7, #12
 8046a5e:	46bd      	mov	sp, r7
 8046a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046a64:	4770      	bx	lr
 8046a66:	bf00      	nop
 8046a68:	40021000 	.word	0x40021000
 8046a6c:	40022000 	.word	0x40022000

08046a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8046a70:	b580      	push	{r7, lr}
 8046a72:	b088      	sub	sp, #32
 8046a74:	af00      	add	r7, sp, #0
 8046a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8046a78:	2300      	movs	r3, #0
 8046a7a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8046a7c:	2300      	movs	r3, #0
 8046a7e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8046a80:	687b      	ldr	r3, [r7, #4]
 8046a82:	681b      	ldr	r3, [r3, #0]
 8046a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8046a88:	2b00      	cmp	r3, #0
 8046a8a:	d040      	beq.n	8046b0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8046a8c:	687b      	ldr	r3, [r7, #4]
 8046a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8046a90:	2b80      	cmp	r3, #128	; 0x80
 8046a92:	d02a      	beq.n	8046aea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8046a94:	2b80      	cmp	r3, #128	; 0x80
 8046a96:	d825      	bhi.n	8046ae4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8046a98:	2b60      	cmp	r3, #96	; 0x60
 8046a9a:	d026      	beq.n	8046aea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8046a9c:	2b60      	cmp	r3, #96	; 0x60
 8046a9e:	d821      	bhi.n	8046ae4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8046aa0:	2b40      	cmp	r3, #64	; 0x40
 8046aa2:	d006      	beq.n	8046ab2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8046aa4:	2b40      	cmp	r3, #64	; 0x40
 8046aa6:	d81d      	bhi.n	8046ae4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8046aa8:	2b00      	cmp	r3, #0
 8046aaa:	d009      	beq.n	8046ac0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8046aac:	2b20      	cmp	r3, #32
 8046aae:	d010      	beq.n	8046ad2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8046ab0:	e018      	b.n	8046ae4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8046ab2:	4b87      	ldr	r3, [pc, #540]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046ab4:	68db      	ldr	r3, [r3, #12]
 8046ab6:	4a86      	ldr	r2, [pc, #536]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046ab8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046abc:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8046abe:	e015      	b.n	8046aec <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8046ac0:	687b      	ldr	r3, [r7, #4]
 8046ac2:	3304      	adds	r3, #4
 8046ac4:	2100      	movs	r1, #0
 8046ac6:	4618      	mov	r0, r3
 8046ac8:	f000 fb46 	bl	8047158 <RCCEx_PLLSAI1_Config>
 8046acc:	4603      	mov	r3, r0
 8046ace:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8046ad0:	e00c      	b.n	8046aec <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8046ad2:	687b      	ldr	r3, [r7, #4]
 8046ad4:	3320      	adds	r3, #32
 8046ad6:	2100      	movs	r1, #0
 8046ad8:	4618      	mov	r0, r3
 8046ada:	f000 fc13 	bl	8047304 <RCCEx_PLLSAI2_Config>
 8046ade:	4603      	mov	r3, r0
 8046ae0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8046ae2:	e003      	b.n	8046aec <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8046ae4:	2301      	movs	r3, #1
 8046ae6:	77fb      	strb	r3, [r7, #31]
        break;
 8046ae8:	e000      	b.n	8046aec <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8046aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8046aec:	7ffb      	ldrb	r3, [r7, #31]
 8046aee:	2b00      	cmp	r3, #0
 8046af0:	d10b      	bne.n	8046b0a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8046af2:	4b77      	ldr	r3, [pc, #476]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046af4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8046af8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8046afc:	687b      	ldr	r3, [r7, #4]
 8046afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8046b00:	4973      	ldr	r1, [pc, #460]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046b02:	4313      	orrs	r3, r2
 8046b04:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8046b08:	e001      	b.n	8046b0e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8046b0a:	7ffb      	ldrb	r3, [r7, #31]
 8046b0c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8046b0e:	687b      	ldr	r3, [r7, #4]
 8046b10:	681b      	ldr	r3, [r3, #0]
 8046b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8046b16:	2b00      	cmp	r3, #0
 8046b18:	d047      	beq.n	8046baa <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8046b1a:	687b      	ldr	r3, [r7, #4]
 8046b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8046b22:	d030      	beq.n	8046b86 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8046b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8046b28:	d82a      	bhi.n	8046b80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8046b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8046b2e:	d02a      	beq.n	8046b86 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8046b30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8046b34:	d824      	bhi.n	8046b80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8046b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8046b3a:	d008      	beq.n	8046b4e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8046b3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8046b40:	d81e      	bhi.n	8046b80 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8046b42:	2b00      	cmp	r3, #0
 8046b44:	d00a      	beq.n	8046b5c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8046b46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8046b4a:	d010      	beq.n	8046b6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8046b4c:	e018      	b.n	8046b80 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8046b4e:	4b60      	ldr	r3, [pc, #384]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046b50:	68db      	ldr	r3, [r3, #12]
 8046b52:	4a5f      	ldr	r2, [pc, #380]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046b58:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8046b5a:	e015      	b.n	8046b88 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8046b5c:	687b      	ldr	r3, [r7, #4]
 8046b5e:	3304      	adds	r3, #4
 8046b60:	2100      	movs	r1, #0
 8046b62:	4618      	mov	r0, r3
 8046b64:	f000 faf8 	bl	8047158 <RCCEx_PLLSAI1_Config>
 8046b68:	4603      	mov	r3, r0
 8046b6a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8046b6c:	e00c      	b.n	8046b88 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8046b6e:	687b      	ldr	r3, [r7, #4]
 8046b70:	3320      	adds	r3, #32
 8046b72:	2100      	movs	r1, #0
 8046b74:	4618      	mov	r0, r3
 8046b76:	f000 fbc5 	bl	8047304 <RCCEx_PLLSAI2_Config>
 8046b7a:	4603      	mov	r3, r0
 8046b7c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8046b7e:	e003      	b.n	8046b88 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8046b80:	2301      	movs	r3, #1
 8046b82:	77fb      	strb	r3, [r7, #31]
        break;
 8046b84:	e000      	b.n	8046b88 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8046b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8046b88:	7ffb      	ldrb	r3, [r7, #31]
 8046b8a:	2b00      	cmp	r3, #0
 8046b8c:	d10b      	bne.n	8046ba6 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8046b8e:	4b50      	ldr	r3, [pc, #320]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046b90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8046b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8046b98:	687b      	ldr	r3, [r7, #4]
 8046b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8046b9c:	494c      	ldr	r1, [pc, #304]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046b9e:	4313      	orrs	r3, r2
 8046ba0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8046ba4:	e001      	b.n	8046baa <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8046ba6:	7ffb      	ldrb	r3, [r7, #31]
 8046ba8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8046baa:	687b      	ldr	r3, [r7, #4]
 8046bac:	681b      	ldr	r3, [r3, #0]
 8046bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046bb2:	2b00      	cmp	r3, #0
 8046bb4:	f000 809b 	beq.w	8046cee <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8046bb8:	2300      	movs	r3, #0
 8046bba:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8046bbc:	4b44      	ldr	r3, [pc, #272]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8046bc4:	2b00      	cmp	r3, #0
 8046bc6:	d10d      	bne.n	8046be4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8046bc8:	4b41      	ldr	r3, [pc, #260]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046bcc:	4a40      	ldr	r2, [pc, #256]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8046bd2:	6593      	str	r3, [r2, #88]	; 0x58
 8046bd4:	4b3e      	ldr	r3, [pc, #248]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8046bdc:	60fb      	str	r3, [r7, #12]
 8046bde:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8046be0:	2301      	movs	r3, #1
 8046be2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8046be4:	4b3b      	ldr	r3, [pc, #236]	; (8046cd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8046be6:	681b      	ldr	r3, [r3, #0]
 8046be8:	4a3a      	ldr	r2, [pc, #232]	; (8046cd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8046bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8046bee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8046bf0:	f7fb ff78 	bl	8042ae4 <HAL_GetTick>
 8046bf4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8046bf6:	e009      	b.n	8046c0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8046bf8:	f7fb ff74 	bl	8042ae4 <HAL_GetTick>
 8046bfc:	4602      	mov	r2, r0
 8046bfe:	693b      	ldr	r3, [r7, #16]
 8046c00:	1ad3      	subs	r3, r2, r3
 8046c02:	2b02      	cmp	r3, #2
 8046c04:	d902      	bls.n	8046c0c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8046c06:	2303      	movs	r3, #3
 8046c08:	77fb      	strb	r3, [r7, #31]
        break;
 8046c0a:	e005      	b.n	8046c18 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8046c0c:	4b31      	ldr	r3, [pc, #196]	; (8046cd4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8046c0e:	681b      	ldr	r3, [r3, #0]
 8046c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046c14:	2b00      	cmp	r3, #0
 8046c16:	d0ef      	beq.n	8046bf8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if (ret == HAL_OK)
 8046c18:	7ffb      	ldrb	r3, [r7, #31]
 8046c1a:	2b00      	cmp	r3, #0
 8046c1c:	d15c      	bne.n	8046cd8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8046c1e:	4b2c      	ldr	r3, [pc, #176]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8046c28:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8046c2a:	69bb      	ldr	r3, [r7, #24]
 8046c2c:	2b00      	cmp	r3, #0
 8046c2e:	d01f      	beq.n	8046c70 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8046c30:	687b      	ldr	r3, [r7, #4]
 8046c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046c36:	69ba      	ldr	r2, [r7, #24]
 8046c38:	429a      	cmp	r2, r3
 8046c3a:	d019      	beq.n	8046c70 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8046c3c:	4b24      	ldr	r3, [pc, #144]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8046c46:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8046c48:	4b21      	ldr	r3, [pc, #132]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046c4e:	4a20      	ldr	r2, [pc, #128]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8046c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8046c58:	4b1d      	ldr	r3, [pc, #116]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046c5e:	4a1c      	ldr	r2, [pc, #112]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046c60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8046c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8046c68:	4a19      	ldr	r2, [pc, #100]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046c6a:	69bb      	ldr	r3, [r7, #24]
 8046c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8046c70:	69bb      	ldr	r3, [r7, #24]
 8046c72:	f003 0301 	and.w	r3, r3, #1
 8046c76:	2b00      	cmp	r3, #0
 8046c78:	d016      	beq.n	8046ca8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8046c7a:	f7fb ff33 	bl	8042ae4 <HAL_GetTick>
 8046c7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8046c80:	e00b      	b.n	8046c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8046c82:	f7fb ff2f 	bl	8042ae4 <HAL_GetTick>
 8046c86:	4602      	mov	r2, r0
 8046c88:	693b      	ldr	r3, [r7, #16]
 8046c8a:	1ad3      	subs	r3, r2, r3
 8046c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8046c90:	4293      	cmp	r3, r2
 8046c92:	d902      	bls.n	8046c9a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8046c94:	2303      	movs	r3, #3
 8046c96:	77fb      	strb	r3, [r7, #31]
            break;
 8046c98:	e006      	b.n	8046ca8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8046c9a:	4b0d      	ldr	r3, [pc, #52]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046c9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046ca0:	f003 0302 	and.w	r3, r3, #2
 8046ca4:	2b00      	cmp	r3, #0
 8046ca6:	d0ec      	beq.n	8046c82 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if (ret == HAL_OK)
 8046ca8:	7ffb      	ldrb	r3, [r7, #31]
 8046caa:	2b00      	cmp	r3, #0
 8046cac:	d10c      	bne.n	8046cc8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8046cae:	4b08      	ldr	r3, [pc, #32]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046cb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8046cb8:	687b      	ldr	r3, [r7, #4]
 8046cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8046cbe:	4904      	ldr	r1, [pc, #16]	; (8046cd0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8046cc0:	4313      	orrs	r3, r2
 8046cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8046cc6:	e009      	b.n	8046cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8046cc8:	7ffb      	ldrb	r3, [r7, #31]
 8046cca:	77bb      	strb	r3, [r7, #30]
 8046ccc:	e006      	b.n	8046cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8046cce:	bf00      	nop
 8046cd0:	40021000 	.word	0x40021000
 8046cd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8046cd8:	7ffb      	ldrb	r3, [r7, #31]
 8046cda:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8046cdc:	7dfb      	ldrb	r3, [r7, #23]
 8046cde:	2b01      	cmp	r3, #1
 8046ce0:	d105      	bne.n	8046cee <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8046ce2:	4baf      	ldr	r3, [pc, #700]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046ce6:	4aae      	ldr	r2, [pc, #696]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8046cec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8046cee:	687b      	ldr	r3, [r7, #4]
 8046cf0:	681b      	ldr	r3, [r3, #0]
 8046cf2:	f003 0301 	and.w	r3, r3, #1
 8046cf6:	2b00      	cmp	r3, #0
 8046cf8:	d00a      	beq.n	8046d10 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8046cfa:	4ba9      	ldr	r3, [pc, #676]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046d00:	f023 0203 	bic.w	r2, r3, #3
 8046d04:	687b      	ldr	r3, [r7, #4]
 8046d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8046d08:	49a5      	ldr	r1, [pc, #660]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046d0a:	4313      	orrs	r3, r2
 8046d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8046d10:	687b      	ldr	r3, [r7, #4]
 8046d12:	681b      	ldr	r3, [r3, #0]
 8046d14:	f003 0302 	and.w	r3, r3, #2
 8046d18:	2b00      	cmp	r3, #0
 8046d1a:	d00a      	beq.n	8046d32 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8046d1c:	4ba0      	ldr	r3, [pc, #640]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046d22:	f023 020c 	bic.w	r2, r3, #12
 8046d26:	687b      	ldr	r3, [r7, #4]
 8046d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046d2a:	499d      	ldr	r1, [pc, #628]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046d2c:	4313      	orrs	r3, r2
 8046d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8046d32:	687b      	ldr	r3, [r7, #4]
 8046d34:	681b      	ldr	r3, [r3, #0]
 8046d36:	f003 0304 	and.w	r3, r3, #4
 8046d3a:	2b00      	cmp	r3, #0
 8046d3c:	d00a      	beq.n	8046d54 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8046d3e:	4b98      	ldr	r3, [pc, #608]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046d44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8046d48:	687b      	ldr	r3, [r7, #4]
 8046d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8046d4c:	4994      	ldr	r1, [pc, #592]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046d4e:	4313      	orrs	r3, r2
 8046d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8046d54:	687b      	ldr	r3, [r7, #4]
 8046d56:	681b      	ldr	r3, [r3, #0]
 8046d58:	f003 0308 	and.w	r3, r3, #8
 8046d5c:	2b00      	cmp	r3, #0
 8046d5e:	d00a      	beq.n	8046d76 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8046d60:	4b8f      	ldr	r3, [pc, #572]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046d66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8046d6a:	687b      	ldr	r3, [r7, #4]
 8046d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8046d6e:	498c      	ldr	r1, [pc, #560]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046d70:	4313      	orrs	r3, r2
 8046d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8046d76:	687b      	ldr	r3, [r7, #4]
 8046d78:	681b      	ldr	r3, [r3, #0]
 8046d7a:	f003 0310 	and.w	r3, r3, #16
 8046d7e:	2b00      	cmp	r3, #0
 8046d80:	d00a      	beq.n	8046d98 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8046d82:	4b87      	ldr	r3, [pc, #540]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046d88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8046d8c:	687b      	ldr	r3, [r7, #4]
 8046d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8046d90:	4983      	ldr	r1, [pc, #524]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046d92:	4313      	orrs	r3, r2
 8046d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8046d98:	687b      	ldr	r3, [r7, #4]
 8046d9a:	681b      	ldr	r3, [r3, #0]
 8046d9c:	f003 0320 	and.w	r3, r3, #32
 8046da0:	2b00      	cmp	r3, #0
 8046da2:	d00a      	beq.n	8046dba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8046da4:	4b7e      	ldr	r3, [pc, #504]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046daa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8046dae:	687b      	ldr	r3, [r7, #4]
 8046db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8046db2:	497b      	ldr	r1, [pc, #492]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046db4:	4313      	orrs	r3, r2
 8046db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8046dba:	687b      	ldr	r3, [r7, #4]
 8046dbc:	681b      	ldr	r3, [r3, #0]
 8046dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8046dc2:	2b00      	cmp	r3, #0
 8046dc4:	d00a      	beq.n	8046ddc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8046dc6:	4b76      	ldr	r3, [pc, #472]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046dcc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8046dd0:	687b      	ldr	r3, [r7, #4]
 8046dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8046dd4:	4972      	ldr	r1, [pc, #456]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046dd6:	4313      	orrs	r3, r2
 8046dd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8046ddc:	687b      	ldr	r3, [r7, #4]
 8046dde:	681b      	ldr	r3, [r3, #0]
 8046de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8046de4:	2b00      	cmp	r3, #0
 8046de6:	d00a      	beq.n	8046dfe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8046de8:	4b6d      	ldr	r3, [pc, #436]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046dee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8046df2:	687b      	ldr	r3, [r7, #4]
 8046df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8046df6:	496a      	ldr	r1, [pc, #424]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046df8:	4313      	orrs	r3, r2
 8046dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8046dfe:	687b      	ldr	r3, [r7, #4]
 8046e00:	681b      	ldr	r3, [r3, #0]
 8046e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8046e06:	2b00      	cmp	r3, #0
 8046e08:	d00a      	beq.n	8046e20 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8046e0a:	4b65      	ldr	r3, [pc, #404]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046e10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8046e14:	687b      	ldr	r3, [r7, #4]
 8046e16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8046e18:	4961      	ldr	r1, [pc, #388]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046e1a:	4313      	orrs	r3, r2
 8046e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8046e20:	687b      	ldr	r3, [r7, #4]
 8046e22:	681b      	ldr	r3, [r3, #0]
 8046e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8046e28:	2b00      	cmp	r3, #0
 8046e2a:	d031      	beq.n	8046e90 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8046e2c:	687b      	ldr	r3, [r7, #4]
 8046e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046e30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8046e34:	d00e      	beq.n	8046e54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8046e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8046e3a:	d814      	bhi.n	8046e66 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8046e3c:	2b00      	cmp	r3, #0
 8046e3e:	d015      	beq.n	8046e6c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8046e40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8046e44:	d10f      	bne.n	8046e66 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8046e46:	4b56      	ldr	r3, [pc, #344]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046e48:	68db      	ldr	r3, [r3, #12]
 8046e4a:	4a55      	ldr	r2, [pc, #340]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046e4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8046e50:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8046e52:	e00c      	b.n	8046e6e <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8046e54:	687b      	ldr	r3, [r7, #4]
 8046e56:	3304      	adds	r3, #4
 8046e58:	2100      	movs	r1, #0
 8046e5a:	4618      	mov	r0, r3
 8046e5c:	f000 f97c 	bl	8047158 <RCCEx_PLLSAI1_Config>
 8046e60:	4603      	mov	r3, r0
 8046e62:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8046e64:	e003      	b.n	8046e6e <HAL_RCCEx_PeriphCLKConfig+0x3fe>

      default:
        ret = HAL_ERROR;
 8046e66:	2301      	movs	r3, #1
 8046e68:	77fb      	strb	r3, [r7, #31]
        break;
 8046e6a:	e000      	b.n	8046e6e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
        break;
 8046e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8046e6e:	7ffb      	ldrb	r3, [r7, #31]
 8046e70:	2b00      	cmp	r3, #0
 8046e72:	d10b      	bne.n	8046e8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8046e74:	4b4a      	ldr	r3, [pc, #296]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046e7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8046e7e:	687b      	ldr	r3, [r7, #4]
 8046e80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046e82:	4947      	ldr	r1, [pc, #284]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046e84:	4313      	orrs	r3, r2
 8046e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8046e8a:	e001      	b.n	8046e90 <HAL_RCCEx_PeriphCLKConfig+0x420>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8046e8c:	7ffb      	ldrb	r3, [r7, #31]
 8046e8e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8046e90:	687b      	ldr	r3, [r7, #4]
 8046e92:	681b      	ldr	r3, [r3, #0]
 8046e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8046e98:	2b00      	cmp	r3, #0
 8046e9a:	d00a      	beq.n	8046eb2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8046e9c:	4b40      	ldr	r3, [pc, #256]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046ea2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8046ea6:	687b      	ldr	r3, [r7, #4]
 8046ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8046eaa:	493d      	ldr	r1, [pc, #244]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046eac:	4313      	orrs	r3, r2
 8046eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8046eb2:	687b      	ldr	r3, [r7, #4]
 8046eb4:	681b      	ldr	r3, [r3, #0]
 8046eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8046eba:	2b00      	cmp	r3, #0
 8046ebc:	d00a      	beq.n	8046ed4 <HAL_RCCEx_PeriphCLKConfig+0x464>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8046ebe:	4b38      	ldr	r3, [pc, #224]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046ec4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8046ec8:	687b      	ldr	r3, [r7, #4]
 8046eca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8046ecc:	4934      	ldr	r1, [pc, #208]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046ece:	4313      	orrs	r3, r2
 8046ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8046ed4:	687b      	ldr	r3, [r7, #4]
 8046ed6:	681b      	ldr	r3, [r3, #0]
 8046ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8046edc:	2b00      	cmp	r3, #0
 8046ede:	d00a      	beq.n	8046ef6 <HAL_RCCEx_PeriphCLKConfig+0x486>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8046ee0:	4b2f      	ldr	r3, [pc, #188]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046ee6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8046eea:	687b      	ldr	r3, [r7, #4]
 8046eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8046eee:	492c      	ldr	r1, [pc, #176]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046ef0:	4313      	orrs	r3, r2
 8046ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8046ef6:	687b      	ldr	r3, [r7, #4]
 8046ef8:	681b      	ldr	r3, [r3, #0]
 8046efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8046efe:	2b00      	cmp	r3, #0
 8046f00:	d00a      	beq.n	8046f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8046f02:	4b27      	ldr	r3, [pc, #156]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046f04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8046f08:	f023 0203 	bic.w	r2, r3, #3
 8046f0c:	687b      	ldr	r3, [r7, #4]
 8046f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046f10:	4923      	ldr	r1, [pc, #140]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046f12:	4313      	orrs	r3, r2
 8046f14:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8046f18:	687b      	ldr	r3, [r7, #4]
 8046f1a:	681b      	ldr	r3, [r3, #0]
 8046f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8046f20:	2b00      	cmp	r3, #0
 8046f22:	d028      	beq.n	8046f76 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8046f24:	4b1e      	ldr	r3, [pc, #120]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046f2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8046f2e:	687b      	ldr	r3, [r7, #4]
 8046f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046f32:	491b      	ldr	r1, [pc, #108]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046f34:	4313      	orrs	r3, r2
 8046f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8046f3a:	687b      	ldr	r3, [r7, #4]
 8046f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8046f42:	d106      	bne.n	8046f52 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8046f44:	4b16      	ldr	r3, [pc, #88]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046f46:	68db      	ldr	r3, [r3, #12]
 8046f48:	4a15      	ldr	r2, [pc, #84]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046f4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8046f4e:	60d3      	str	r3, [r2, #12]
 8046f50:	e011      	b.n	8046f76 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8046f52:	687b      	ldr	r3, [r7, #4]
 8046f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8046f56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8046f5a:	d10c      	bne.n	8046f76 <HAL_RCCEx_PeriphCLKConfig+0x506>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8046f5c:	687b      	ldr	r3, [r7, #4]
 8046f5e:	3304      	adds	r3, #4
 8046f60:	2101      	movs	r1, #1
 8046f62:	4618      	mov	r0, r3
 8046f64:	f000 f8f8 	bl	8047158 <RCCEx_PLLSAI1_Config>
 8046f68:	4603      	mov	r3, r0
 8046f6a:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8046f6c:	7ffb      	ldrb	r3, [r7, #31]
 8046f6e:	2b00      	cmp	r3, #0
 8046f70:	d001      	beq.n	8046f76 <HAL_RCCEx_PeriphCLKConfig+0x506>
        {
          /* set overall return value */
          status = ret;
 8046f72:	7ffb      	ldrb	r3, [r7, #31]
 8046f74:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8046f76:	687b      	ldr	r3, [r7, #4]
 8046f78:	681b      	ldr	r3, [r3, #0]
 8046f7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8046f7e:	2b00      	cmp	r3, #0
 8046f80:	d04d      	beq.n	804701e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8046f82:	687b      	ldr	r3, [r7, #4]
 8046f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8046f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8046f8a:	d10b      	bne.n	8046fa4 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8046f8c:	4b04      	ldr	r3, [pc, #16]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046f8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8046f92:	4a03      	ldr	r2, [pc, #12]	; (8046fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8046f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8046f98:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8046f9c:	e015      	b.n	8046fca <HAL_RCCEx_PeriphCLKConfig+0x55a>
 8046f9e:	bf00      	nop
 8046fa0:	40021000 	.word	0x40021000
 8046fa4:	4b6b      	ldr	r3, [pc, #428]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8046fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8046faa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8046fae:	687b      	ldr	r3, [r7, #4]
 8046fb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8046fb2:	4968      	ldr	r1, [pc, #416]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8046fb4:	4313      	orrs	r3, r2
 8046fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8046fba:	4b66      	ldr	r3, [pc, #408]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8046fbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8046fc0:	4a64      	ldr	r2, [pc, #400]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8046fc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8046fc6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8046fca:	687b      	ldr	r3, [r7, #4]
 8046fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8046fce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8046fd2:	d10d      	bne.n	8046ff0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8046fd4:	687b      	ldr	r3, [r7, #4]
 8046fd6:	3304      	adds	r3, #4
 8046fd8:	2101      	movs	r1, #1
 8046fda:	4618      	mov	r0, r3
 8046fdc:	f000 f8bc 	bl	8047158 <RCCEx_PLLSAI1_Config>
 8046fe0:	4603      	mov	r3, r0
 8046fe2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8046fe4:	7ffb      	ldrb	r3, [r7, #31]
 8046fe6:	2b00      	cmp	r3, #0
 8046fe8:	d019      	beq.n	804701e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      {
        /* set overall return value */
        status = ret;
 8046fea:	7ffb      	ldrb	r3, [r7, #31]
 8046fec:	77bb      	strb	r3, [r7, #30]
 8046fee:	e016      	b.n	804701e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8046ff0:	687b      	ldr	r3, [r7, #4]
 8046ff2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8046ff4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8046ff8:	d106      	bne.n	8047008 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8046ffa:	4b56      	ldr	r3, [pc, #344]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8046ffc:	68db      	ldr	r3, [r3, #12]
 8046ffe:	4a55      	ldr	r2, [pc, #340]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8047000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8047004:	60d3      	str	r3, [r2, #12]
 8047006:	e00a      	b.n	804701e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8047008:	687b      	ldr	r3, [r7, #4]
 804700a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804700c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8047010:	d105      	bne.n	804701e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8047012:	4b50      	ldr	r3, [pc, #320]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8047014:	68db      	ldr	r3, [r3, #12]
 8047016:	4a4f      	ldr	r2, [pc, #316]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8047018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804701c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 804701e:	687b      	ldr	r3, [r7, #4]
 8047020:	681b      	ldr	r3, [r3, #0]
 8047022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8047026:	2b00      	cmp	r3, #0
 8047028:	d028      	beq.n	804707c <HAL_RCCEx_PeriphCLKConfig+0x60c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 804702a:	4b4a      	ldr	r3, [pc, #296]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804702c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8047030:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8047034:	687b      	ldr	r3, [r7, #4]
 8047036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8047038:	4946      	ldr	r1, [pc, #280]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804703a:	4313      	orrs	r3, r2
 804703c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8047040:	687b      	ldr	r3, [r7, #4]
 8047042:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8047044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8047048:	d106      	bne.n	8047058 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804704a:	4b42      	ldr	r3, [pc, #264]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804704c:	68db      	ldr	r3, [r3, #12]
 804704e:	4a41      	ldr	r2, [pc, #260]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8047050:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8047054:	60d3      	str	r3, [r2, #12]
 8047056:	e011      	b.n	804707c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8047058:	687b      	ldr	r3, [r7, #4]
 804705a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804705c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8047060:	d10c      	bne.n	804707c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8047062:	687b      	ldr	r3, [r7, #4]
 8047064:	3304      	adds	r3, #4
 8047066:	2101      	movs	r1, #1
 8047068:	4618      	mov	r0, r3
 804706a:	f000 f875 	bl	8047158 <RCCEx_PLLSAI1_Config>
 804706e:	4603      	mov	r3, r0
 8047070:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8047072:	7ffb      	ldrb	r3, [r7, #31]
 8047074:	2b00      	cmp	r3, #0
 8047076:	d001      	beq.n	804707c <HAL_RCCEx_PeriphCLKConfig+0x60c>
      {
        /* set overall return value */
        status = ret;
 8047078:	7ffb      	ldrb	r3, [r7, #31]
 804707a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 804707c:	687b      	ldr	r3, [r7, #4]
 804707e:	681b      	ldr	r3, [r3, #0]
 8047080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8047084:	2b00      	cmp	r3, #0
 8047086:	d01e      	beq.n	80470c6 <HAL_RCCEx_PeriphCLKConfig+0x656>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8047088:	4b32      	ldr	r3, [pc, #200]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804708a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804708e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8047092:	687b      	ldr	r3, [r7, #4]
 8047094:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8047098:	492e      	ldr	r1, [pc, #184]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804709a:	4313      	orrs	r3, r2
 804709c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80470a0:	687b      	ldr	r3, [r7, #4]
 80470a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80470a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80470aa:	d10c      	bne.n	80470c6 <HAL_RCCEx_PeriphCLKConfig+0x656>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80470ac:	687b      	ldr	r3, [r7, #4]
 80470ae:	3304      	adds	r3, #4
 80470b0:	2102      	movs	r1, #2
 80470b2:	4618      	mov	r0, r3
 80470b4:	f000 f850 	bl	8047158 <RCCEx_PLLSAI1_Config>
 80470b8:	4603      	mov	r3, r0
 80470ba:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80470bc:	7ffb      	ldrb	r3, [r7, #31]
 80470be:	2b00      	cmp	r3, #0
 80470c0:	d001      	beq.n	80470c6 <HAL_RCCEx_PeriphCLKConfig+0x656>
      {
        /* set overall return value */
        status = ret;
 80470c2:	7ffb      	ldrb	r3, [r7, #31]
 80470c4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80470c6:	687b      	ldr	r3, [r7, #4]
 80470c8:	681b      	ldr	r3, [r3, #0]
 80470ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80470ce:	2b00      	cmp	r3, #0
 80470d0:	d00b      	beq.n	80470ea <HAL_RCCEx_PeriphCLKConfig+0x67a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80470d2:	4b20      	ldr	r3, [pc, #128]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80470d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80470d8:	f023 0204 	bic.w	r2, r3, #4
 80470dc:	687b      	ldr	r3, [r7, #4]
 80470de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80470e2:	491c      	ldr	r1, [pc, #112]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80470e4:	4313      	orrs	r3, r2
 80470e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80470ea:	687b      	ldr	r3, [r7, #4]
 80470ec:	681b      	ldr	r3, [r3, #0]
 80470ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80470f2:	2b00      	cmp	r3, #0
 80470f4:	d00b      	beq.n	804710e <HAL_RCCEx_PeriphCLKConfig+0x69e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80470f6:	4b17      	ldr	r3, [pc, #92]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 80470f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80470fc:	f023 0218 	bic.w	r2, r3, #24
 8047100:	687b      	ldr	r3, [r7, #4]
 8047102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8047106:	4913      	ldr	r1, [pc, #76]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8047108:	4313      	orrs	r3, r2
 804710a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 804710e:	687b      	ldr	r3, [r7, #4]
 8047110:	681b      	ldr	r3, [r3, #0]
 8047112:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8047116:	2b00      	cmp	r3, #0
 8047118:	d017      	beq.n	804714a <HAL_RCCEx_PeriphCLKConfig+0x6da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 804711a:	4b0e      	ldr	r3, [pc, #56]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804711c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8047120:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8047124:	687b      	ldr	r3, [r7, #4]
 8047126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804712a:	490a      	ldr	r1, [pc, #40]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 804712c:	4313      	orrs	r3, r2
 804712e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    
    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8047132:	687b      	ldr	r3, [r7, #4]
 8047134:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8047138:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804713c:	d105      	bne.n	804714a <HAL_RCCEx_PeriphCLKConfig+0x6da>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804713e:	4b05      	ldr	r3, [pc, #20]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8047140:	68db      	ldr	r3, [r3, #12]
 8047142:	4a04      	ldr	r2, [pc, #16]	; (8047154 <HAL_RCCEx_PeriphCLKConfig+0x6e4>)
 8047144:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8047148:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 804714a:	7fbb      	ldrb	r3, [r7, #30]
}
 804714c:	4618      	mov	r0, r3
 804714e:	3720      	adds	r7, #32
 8047150:	46bd      	mov	sp, r7
 8047152:	bd80      	pop	{r7, pc}
 8047154:	40021000 	.word	0x40021000

08047158 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8047158:	b580      	push	{r7, lr}
 804715a:	b084      	sub	sp, #16
 804715c:	af00      	add	r7, sp, #0
 804715e:	6078      	str	r0, [r7, #4]
 8047160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8047162:	2300      	movs	r3, #0
 8047164:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8047166:	687b      	ldr	r3, [r7, #4]
 8047168:	681b      	ldr	r3, [r3, #0]
 804716a:	2b03      	cmp	r3, #3
 804716c:	d018      	beq.n	80471a0 <RCCEx_PLLSAI1_Config+0x48>
 804716e:	2b03      	cmp	r3, #3
 8047170:	d81f      	bhi.n	80471b2 <RCCEx_PLLSAI1_Config+0x5a>
 8047172:	2b01      	cmp	r3, #1
 8047174:	d002      	beq.n	804717c <RCCEx_PLLSAI1_Config+0x24>
 8047176:	2b02      	cmp	r3, #2
 8047178:	d009      	beq.n	804718e <RCCEx_PLLSAI1_Config+0x36>
 804717a:	e01a      	b.n	80471b2 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 804717c:	4b5d      	ldr	r3, [pc, #372]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 804717e:	681b      	ldr	r3, [r3, #0]
 8047180:	f003 0302 	and.w	r3, r3, #2
 8047184:	2b00      	cmp	r3, #0
 8047186:	d117      	bne.n	80471b8 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8047188:	2301      	movs	r3, #1
 804718a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804718c:	e014      	b.n	80471b8 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 804718e:	4b59      	ldr	r3, [pc, #356]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 8047190:	681b      	ldr	r3, [r3, #0]
 8047192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8047196:	2b00      	cmp	r3, #0
 8047198:	d110      	bne.n	80471bc <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 804719a:	2301      	movs	r3, #1
 804719c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804719e:	e00d      	b.n	80471bc <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80471a0:	4b54      	ldr	r3, [pc, #336]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 80471a2:	681b      	ldr	r3, [r3, #0]
 80471a4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80471a8:	2b00      	cmp	r3, #0
 80471aa:	d109      	bne.n	80471c0 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80471ac:	2301      	movs	r3, #1
 80471ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80471b0:	e006      	b.n	80471c0 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80471b2:	2301      	movs	r3, #1
 80471b4:	73fb      	strb	r3, [r7, #15]
      break;
 80471b6:	e004      	b.n	80471c2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80471b8:	bf00      	nop
 80471ba:	e002      	b.n	80471c2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80471bc:	bf00      	nop
 80471be:	e000      	b.n	80471c2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80471c0:	bf00      	nop
  }

  if (status == HAL_OK)
 80471c2:	7bfb      	ldrb	r3, [r7, #15]
 80471c4:	2b00      	cmp	r3, #0
 80471c6:	f040 808f 	bne.w	80472e8 <RCCEx_PLLSAI1_Config+0x190>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80471ca:	4b4a      	ldr	r3, [pc, #296]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 80471cc:	681b      	ldr	r3, [r3, #0]
 80471ce:	4a49      	ldr	r2, [pc, #292]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 80471d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80471d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80471d6:	f7fb fc85 	bl	8042ae4 <HAL_GetTick>
 80471da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80471dc:	e009      	b.n	80471f2 <RCCEx_PLLSAI1_Config+0x9a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80471de:	f7fb fc81 	bl	8042ae4 <HAL_GetTick>
 80471e2:	4602      	mov	r2, r0
 80471e4:	68bb      	ldr	r3, [r7, #8]
 80471e6:	1ad3      	subs	r3, r2, r3
 80471e8:	2b02      	cmp	r3, #2
 80471ea:	d902      	bls.n	80471f2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_TIMEOUT;
 80471ec:	2303      	movs	r3, #3
 80471ee:	73fb      	strb	r3, [r7, #15]
        break;
 80471f0:	e005      	b.n	80471fe <RCCEx_PLLSAI1_Config+0xa6>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80471f2:	4b40      	ldr	r3, [pc, #256]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 80471f4:	681b      	ldr	r3, [r3, #0]
 80471f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80471fa:	2b00      	cmp	r3, #0
 80471fc:	d1ef      	bne.n	80471de <RCCEx_PLLSAI1_Config+0x86>
      }
    }

    if (status == HAL_OK)
 80471fe:	7bfb      	ldrb	r3, [r7, #15]
 8047200:	2b00      	cmp	r3, #0
 8047202:	d171      	bne.n	80472e8 <RCCEx_PLLSAI1_Config+0x190>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8047204:	683b      	ldr	r3, [r7, #0]
 8047206:	2b00      	cmp	r3, #0
 8047208:	d116      	bne.n	8047238 <RCCEx_PLLSAI1_Config+0xe0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 804720a:	4b3a      	ldr	r3, [pc, #232]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 804720c:	691a      	ldr	r2, [r3, #16]
 804720e:	4b3a      	ldr	r3, [pc, #232]	; (80472f8 <RCCEx_PLLSAI1_Config+0x1a0>)
 8047210:	4013      	ands	r3, r2
 8047212:	687a      	ldr	r2, [r7, #4]
 8047214:	6892      	ldr	r2, [r2, #8]
 8047216:	0211      	lsls	r1, r2, #8
 8047218:	687a      	ldr	r2, [r7, #4]
 804721a:	68d2      	ldr	r2, [r2, #12]
 804721c:	06d2      	lsls	r2, r2, #27
 804721e:	4311      	orrs	r1, r2
 8047220:	687a      	ldr	r2, [r7, #4]
 8047222:	6852      	ldr	r2, [r2, #4]
 8047224:	3a01      	subs	r2, #1
 8047226:	0112      	lsls	r2, r2, #4
 8047228:	4311      	orrs	r1, r2
 804722a:	687a      	ldr	r2, [r7, #4]
 804722c:	6812      	ldr	r2, [r2, #0]
 804722e:	430a      	orrs	r2, r1
 8047230:	4930      	ldr	r1, [pc, #192]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 8047232:	4313      	orrs	r3, r2
 8047234:	610b      	str	r3, [r1, #16]
 8047236:	e033      	b.n	80472a0 <RCCEx_PLLSAI1_Config+0x148>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8047238:	683b      	ldr	r3, [r7, #0]
 804723a:	2b01      	cmp	r3, #1
 804723c:	d118      	bne.n	8047270 <RCCEx_PLLSAI1_Config+0x118>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 804723e:	4b2d      	ldr	r3, [pc, #180]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 8047240:	691a      	ldr	r2, [r3, #16]
 8047242:	4b2e      	ldr	r3, [pc, #184]	; (80472fc <RCCEx_PLLSAI1_Config+0x1a4>)
 8047244:	4013      	ands	r3, r2
 8047246:	687a      	ldr	r2, [r7, #4]
 8047248:	6892      	ldr	r2, [r2, #8]
 804724a:	0211      	lsls	r1, r2, #8
 804724c:	687a      	ldr	r2, [r7, #4]
 804724e:	6912      	ldr	r2, [r2, #16]
 8047250:	0852      	lsrs	r2, r2, #1
 8047252:	3a01      	subs	r2, #1
 8047254:	0552      	lsls	r2, r2, #21
 8047256:	4311      	orrs	r1, r2
 8047258:	687a      	ldr	r2, [r7, #4]
 804725a:	6852      	ldr	r2, [r2, #4]
 804725c:	3a01      	subs	r2, #1
 804725e:	0112      	lsls	r2, r2, #4
 8047260:	4311      	orrs	r1, r2
 8047262:	687a      	ldr	r2, [r7, #4]
 8047264:	6812      	ldr	r2, [r2, #0]
 8047266:	430a      	orrs	r2, r1
 8047268:	4922      	ldr	r1, [pc, #136]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 804726a:	4313      	orrs	r3, r2
 804726c:	610b      	str	r3, [r1, #16]
 804726e:	e017      	b.n	80472a0 <RCCEx_PLLSAI1_Config+0x148>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8047270:	4b20      	ldr	r3, [pc, #128]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 8047272:	691a      	ldr	r2, [r3, #16]
 8047274:	4b22      	ldr	r3, [pc, #136]	; (8047300 <RCCEx_PLLSAI1_Config+0x1a8>)
 8047276:	4013      	ands	r3, r2
 8047278:	687a      	ldr	r2, [r7, #4]
 804727a:	6892      	ldr	r2, [r2, #8]
 804727c:	0211      	lsls	r1, r2, #8
 804727e:	687a      	ldr	r2, [r7, #4]
 8047280:	6952      	ldr	r2, [r2, #20]
 8047282:	0852      	lsrs	r2, r2, #1
 8047284:	3a01      	subs	r2, #1
 8047286:	0652      	lsls	r2, r2, #25
 8047288:	4311      	orrs	r1, r2
 804728a:	687a      	ldr	r2, [r7, #4]
 804728c:	6852      	ldr	r2, [r2, #4]
 804728e:	3a01      	subs	r2, #1
 8047290:	0112      	lsls	r2, r2, #4
 8047292:	4311      	orrs	r1, r2
 8047294:	687a      	ldr	r2, [r7, #4]
 8047296:	6812      	ldr	r2, [r2, #0]
 8047298:	430a      	orrs	r2, r1
 804729a:	4916      	ldr	r1, [pc, #88]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 804729c:	4313      	orrs	r3, r2
 804729e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80472a0:	4b14      	ldr	r3, [pc, #80]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 80472a2:	681b      	ldr	r3, [r3, #0]
 80472a4:	4a13      	ldr	r2, [pc, #76]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 80472a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80472aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80472ac:	f7fb fc1a 	bl	8042ae4 <HAL_GetTick>
 80472b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80472b2:	e009      	b.n	80472c8 <RCCEx_PLLSAI1_Config+0x170>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80472b4:	f7fb fc16 	bl	8042ae4 <HAL_GetTick>
 80472b8:	4602      	mov	r2, r0
 80472ba:	68bb      	ldr	r3, [r7, #8]
 80472bc:	1ad3      	subs	r3, r2, r3
 80472be:	2b02      	cmp	r3, #2
 80472c0:	d902      	bls.n	80472c8 <RCCEx_PLLSAI1_Config+0x170>
        {
          status = HAL_TIMEOUT;
 80472c2:	2303      	movs	r3, #3
 80472c4:	73fb      	strb	r3, [r7, #15]
          break;
 80472c6:	e005      	b.n	80472d4 <RCCEx_PLLSAI1_Config+0x17c>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80472c8:	4b0a      	ldr	r3, [pc, #40]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 80472ca:	681b      	ldr	r3, [r3, #0]
 80472cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80472d0:	2b00      	cmp	r3, #0
 80472d2:	d0ef      	beq.n	80472b4 <RCCEx_PLLSAI1_Config+0x15c>
        }
      }

      if (status == HAL_OK)
 80472d4:	7bfb      	ldrb	r3, [r7, #15]
 80472d6:	2b00      	cmp	r3, #0
 80472d8:	d106      	bne.n	80472e8 <RCCEx_PLLSAI1_Config+0x190>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80472da:	4b06      	ldr	r3, [pc, #24]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 80472dc:	691a      	ldr	r2, [r3, #16]
 80472de:	687b      	ldr	r3, [r7, #4]
 80472e0:	699b      	ldr	r3, [r3, #24]
 80472e2:	4904      	ldr	r1, [pc, #16]	; (80472f4 <RCCEx_PLLSAI1_Config+0x19c>)
 80472e4:	4313      	orrs	r3, r2
 80472e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80472e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80472ea:	4618      	mov	r0, r3
 80472ec:	3710      	adds	r7, #16
 80472ee:	46bd      	mov	sp, r7
 80472f0:	bd80      	pop	{r7, pc}
 80472f2:	bf00      	nop
 80472f4:	40021000 	.word	0x40021000
 80472f8:	07ff800c 	.word	0x07ff800c
 80472fc:	ff9f800c 	.word	0xff9f800c
 8047300:	f9ff800c 	.word	0xf9ff800c

08047304 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8047304:	b580      	push	{r7, lr}
 8047306:	b084      	sub	sp, #16
 8047308:	af00      	add	r7, sp, #0
 804730a:	6078      	str	r0, [r7, #4]
 804730c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 804730e:	2300      	movs	r3, #0
 8047310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8047312:	687b      	ldr	r3, [r7, #4]
 8047314:	681b      	ldr	r3, [r3, #0]
 8047316:	2b03      	cmp	r3, #3
 8047318:	d018      	beq.n	804734c <RCCEx_PLLSAI2_Config+0x48>
 804731a:	2b03      	cmp	r3, #3
 804731c:	d81f      	bhi.n	804735e <RCCEx_PLLSAI2_Config+0x5a>
 804731e:	2b01      	cmp	r3, #1
 8047320:	d002      	beq.n	8047328 <RCCEx_PLLSAI2_Config+0x24>
 8047322:	2b02      	cmp	r3, #2
 8047324:	d009      	beq.n	804733a <RCCEx_PLLSAI2_Config+0x36>
 8047326:	e01a      	b.n	804735e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8047328:	4b42      	ldr	r3, [pc, #264]	; (8047434 <RCCEx_PLLSAI2_Config+0x130>)
 804732a:	681b      	ldr	r3, [r3, #0]
 804732c:	f003 0302 	and.w	r3, r3, #2
 8047330:	2b00      	cmp	r3, #0
 8047332:	d117      	bne.n	8047364 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8047334:	2301      	movs	r3, #1
 8047336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8047338:	e014      	b.n	8047364 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 804733a:	4b3e      	ldr	r3, [pc, #248]	; (8047434 <RCCEx_PLLSAI2_Config+0x130>)
 804733c:	681b      	ldr	r3, [r3, #0]
 804733e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8047342:	2b00      	cmp	r3, #0
 8047344:	d110      	bne.n	8047368 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8047346:	2301      	movs	r3, #1
 8047348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804734a:	e00d      	b.n	8047368 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 804734c:	4b39      	ldr	r3, [pc, #228]	; (8047434 <RCCEx_PLLSAI2_Config+0x130>)
 804734e:	681b      	ldr	r3, [r3, #0]
 8047350:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8047354:	2b00      	cmp	r3, #0
 8047356:	d109      	bne.n	804736c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8047358:	2301      	movs	r3, #1
 804735a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804735c:	e006      	b.n	804736c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 804735e:	2301      	movs	r3, #1
 8047360:	73fb      	strb	r3, [r7, #15]
      break;
 8047362:	e004      	b.n	804736e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8047364:	bf00      	nop
 8047366:	e002      	b.n	804736e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8047368:	bf00      	nop
 804736a:	e000      	b.n	804736e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 804736c:	bf00      	nop
  }

  if (status == HAL_OK)
 804736e:	7bfb      	ldrb	r3, [r7, #15]
 8047370:	2b00      	cmp	r3, #0
 8047372:	d159      	bne.n	8047428 <RCCEx_PLLSAI2_Config+0x124>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8047374:	4b2f      	ldr	r3, [pc, #188]	; (8047434 <RCCEx_PLLSAI2_Config+0x130>)
 8047376:	681b      	ldr	r3, [r3, #0]
 8047378:	4a2e      	ldr	r2, [pc, #184]	; (8047434 <RCCEx_PLLSAI2_Config+0x130>)
 804737a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 804737e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8047380:	f7fb fbb0 	bl	8042ae4 <HAL_GetTick>
 8047384:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8047386:	e009      	b.n	804739c <RCCEx_PLLSAI2_Config+0x98>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8047388:	f7fb fbac 	bl	8042ae4 <HAL_GetTick>
 804738c:	4602      	mov	r2, r0
 804738e:	68bb      	ldr	r3, [r7, #8]
 8047390:	1ad3      	subs	r3, r2, r3
 8047392:	2b02      	cmp	r3, #2
 8047394:	d902      	bls.n	804739c <RCCEx_PLLSAI2_Config+0x98>
      {
        status = HAL_TIMEOUT;
 8047396:	2303      	movs	r3, #3
 8047398:	73fb      	strb	r3, [r7, #15]
        break;
 804739a:	e005      	b.n	80473a8 <RCCEx_PLLSAI2_Config+0xa4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 804739c:	4b25      	ldr	r3, [pc, #148]	; (8047434 <RCCEx_PLLSAI2_Config+0x130>)
 804739e:	681b      	ldr	r3, [r3, #0]
 80473a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80473a4:	2b00      	cmp	r3, #0
 80473a6:	d1ef      	bne.n	8047388 <RCCEx_PLLSAI2_Config+0x84>
      }
    }

    if (status == HAL_OK)
 80473a8:	7bfb      	ldrb	r3, [r7, #15]
 80473aa:	2b00      	cmp	r3, #0
 80473ac:	d13c      	bne.n	8047428 <RCCEx_PLLSAI2_Config+0x124>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80473ae:	683b      	ldr	r3, [r7, #0]
 80473b0:	2b00      	cmp	r3, #0
 80473b2:	d115      	bne.n	80473e0 <RCCEx_PLLSAI2_Config+0xdc>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80473b4:	4b1f      	ldr	r3, [pc, #124]	; (8047434 <RCCEx_PLLSAI2_Config+0x130>)
 80473b6:	695a      	ldr	r2, [r3, #20]
 80473b8:	4b1f      	ldr	r3, [pc, #124]	; (8047438 <RCCEx_PLLSAI2_Config+0x134>)
 80473ba:	4013      	ands	r3, r2
 80473bc:	687a      	ldr	r2, [r7, #4]
 80473be:	6892      	ldr	r2, [r2, #8]
 80473c0:	0211      	lsls	r1, r2, #8
 80473c2:	687a      	ldr	r2, [r7, #4]
 80473c4:	68d2      	ldr	r2, [r2, #12]
 80473c6:	06d2      	lsls	r2, r2, #27
 80473c8:	4311      	orrs	r1, r2
 80473ca:	687a      	ldr	r2, [r7, #4]
 80473cc:	6852      	ldr	r2, [r2, #4]
 80473ce:	3a01      	subs	r2, #1
 80473d0:	0112      	lsls	r2, r2, #4
 80473d2:	4311      	orrs	r1, r2
 80473d4:	687a      	ldr	r2, [r7, #4]
 80473d6:	6812      	ldr	r2, [r2, #0]
 80473d8:	430a      	orrs	r2, r1
 80473da:	4916      	ldr	r1, [pc, #88]	; (8047434 <RCCEx_PLLSAI2_Config+0x130>)
 80473dc:	4313      	orrs	r3, r2
 80473de:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80473e0:	4b14      	ldr	r3, [pc, #80]	; (8047434 <RCCEx_PLLSAI2_Config+0x130>)
 80473e2:	681b      	ldr	r3, [r3, #0]
 80473e4:	4a13      	ldr	r2, [pc, #76]	; (8047434 <RCCEx_PLLSAI2_Config+0x130>)
 80473e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80473ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80473ec:	f7fb fb7a 	bl	8042ae4 <HAL_GetTick>
 80473f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80473f2:	e009      	b.n	8047408 <RCCEx_PLLSAI2_Config+0x104>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80473f4:	f7fb fb76 	bl	8042ae4 <HAL_GetTick>
 80473f8:	4602      	mov	r2, r0
 80473fa:	68bb      	ldr	r3, [r7, #8]
 80473fc:	1ad3      	subs	r3, r2, r3
 80473fe:	2b02      	cmp	r3, #2
 8047400:	d902      	bls.n	8047408 <RCCEx_PLLSAI2_Config+0x104>
        {
          status = HAL_TIMEOUT;
 8047402:	2303      	movs	r3, #3
 8047404:	73fb      	strb	r3, [r7, #15]
          break;
 8047406:	e005      	b.n	8047414 <RCCEx_PLLSAI2_Config+0x110>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8047408:	4b0a      	ldr	r3, [pc, #40]	; (8047434 <RCCEx_PLLSAI2_Config+0x130>)
 804740a:	681b      	ldr	r3, [r3, #0]
 804740c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8047410:	2b00      	cmp	r3, #0
 8047412:	d0ef      	beq.n	80473f4 <RCCEx_PLLSAI2_Config+0xf0>
        }
      }

      if (status == HAL_OK)
 8047414:	7bfb      	ldrb	r3, [r7, #15]
 8047416:	2b00      	cmp	r3, #0
 8047418:	d106      	bne.n	8047428 <RCCEx_PLLSAI2_Config+0x124>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 804741a:	4b06      	ldr	r3, [pc, #24]	; (8047434 <RCCEx_PLLSAI2_Config+0x130>)
 804741c:	695a      	ldr	r2, [r3, #20]
 804741e:	687b      	ldr	r3, [r7, #4]
 8047420:	691b      	ldr	r3, [r3, #16]
 8047422:	4904      	ldr	r1, [pc, #16]	; (8047434 <RCCEx_PLLSAI2_Config+0x130>)
 8047424:	4313      	orrs	r3, r2
 8047426:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8047428:	7bfb      	ldrb	r3, [r7, #15]
}
 804742a:	4618      	mov	r0, r3
 804742c:	3710      	adds	r7, #16
 804742e:	46bd      	mov	sp, r7
 8047430:	bd80      	pop	{r7, pc}
 8047432:	bf00      	nop
 8047434:	40021000 	.word	0x40021000
 8047438:	07ff800c 	.word	0x07ff800c

0804743c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 804743c:	b580      	push	{r7, lr}
 804743e:	b084      	sub	sp, #16
 8047440:	af00      	add	r7, sp, #0
 8047442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8047444:	687b      	ldr	r3, [r7, #4]
 8047446:	2b00      	cmp	r3, #0
 8047448:	d101      	bne.n	804744e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 804744a:	2301      	movs	r3, #1
 804744c:	e092      	b.n	8047574 <HAL_RNG_Init+0x138>
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
  assert_param(IS_RNG_CED(hrng->Init.ClockErrorDetection));

#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
  if (hrng->State == HAL_RNG_STATE_RESET)
 804744e:	687b      	ldr	r3, [r7, #4]
 8047450:	7a5b      	ldrb	r3, [r3, #9]
 8047452:	b2db      	uxtb	r3, r3
 8047454:	2b00      	cmp	r3, #0
 8047456:	d113      	bne.n	8047480 <HAL_RNG_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8047458:	687b      	ldr	r3, [r7, #4]
 804745a:	2200      	movs	r2, #0
 804745c:	721a      	strb	r2, [r3, #8]

    hrng->ReadyDataCallback  = HAL_RNG_ReadyDataCallback;  /* Legacy weak ReadyDataCallback  */
 804745e:	687b      	ldr	r3, [r7, #4]
 8047460:	4a46      	ldr	r2, [pc, #280]	; (804757c <HAL_RNG_Init+0x140>)
 8047462:	615a      	str	r2, [r3, #20]
    hrng->ErrorCallback      = HAL_RNG_ErrorCallback;      /* Legacy weak ErrorCallback      */
 8047464:	687b      	ldr	r3, [r7, #4]
 8047466:	4a46      	ldr	r2, [pc, #280]	; (8047580 <HAL_RNG_Init+0x144>)
 8047468:	619a      	str	r2, [r3, #24]

    if (hrng->MspInitCallback == NULL)
 804746a:	687b      	ldr	r3, [r7, #4]
 804746c:	69db      	ldr	r3, [r3, #28]
 804746e:	2b00      	cmp	r3, #0
 8047470:	d102      	bne.n	8047478 <HAL_RNG_Init+0x3c>
    {
      hrng->MspInitCallback = HAL_RNG_MspInit; /* Legacy weak MspInit  */
 8047472:	687b      	ldr	r3, [r7, #4]
 8047474:	4a43      	ldr	r2, [pc, #268]	; (8047584 <HAL_RNG_Init+0x148>)
 8047476:	61da      	str	r2, [r3, #28]
    }

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
 8047478:	687b      	ldr	r3, [r7, #4]
 804747a:	69db      	ldr	r3, [r3, #28]
 804747c:	6878      	ldr	r0, [r7, #4]
 804747e:	4798      	blx	r3
    HAL_RNG_MspInit(hrng);
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8047480:	687b      	ldr	r3, [r7, #4]
 8047482:	2202      	movs	r2, #2
 8047484:	725a      	strb	r2, [r3, #9]

  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8047486:	687b      	ldr	r3, [r7, #4]
 8047488:	681b      	ldr	r3, [r3, #0]
 804748a:	681a      	ldr	r2, [r3, #0]
 804748c:	687b      	ldr	r3, [r7, #4]
 804748e:	681b      	ldr	r3, [r3, #0]
 8047490:	f022 0204 	bic.w	r2, r2, #4
 8047494:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8047496:	687b      	ldr	r3, [r7, #4]
 8047498:	681b      	ldr	r3, [r3, #0]
 804749a:	681b      	ldr	r3, [r3, #0]
 804749c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80474a0:	f023 0320 	bic.w	r3, r3, #32
 80474a4:	687a      	ldr	r2, [r7, #4]
 80474a6:	6852      	ldr	r2, [r2, #4]
 80474a8:	431a      	orrs	r2, r3
 80474aa:	687b      	ldr	r3, [r7, #4]
 80474ac:	681b      	ldr	r3, [r3, #0]
 80474ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80474b2:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 80474b4:	687b      	ldr	r3, [r7, #4]
 80474b6:	681b      	ldr	r3, [r3, #0]
 80474b8:	4a33      	ldr	r2, [pc, #204]	; (8047588 <HAL_RNG_Init+0x14c>)
 80474ba:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 80474bc:	687b      	ldr	r3, [r7, #4]
 80474be:	681b      	ldr	r3, [r3, #0]
 80474c0:	4a32      	ldr	r2, [pc, #200]	; (804758c <HAL_RNG_Init+0x150>)
 80474c2:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 80474c4:	687b      	ldr	r3, [r7, #4]
 80474c6:	681b      	ldr	r3, [r3, #0]
 80474c8:	681a      	ldr	r2, [r3, #0]
 80474ca:	687b      	ldr	r3, [r7, #4]
 80474cc:	681b      	ldr	r3, [r3, #0]
 80474ce:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80474d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80474d4:	f7fb fb06 	bl	8042ae4 <HAL_GetTick>
 80474d8:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80474da:	e00e      	b.n	80474fa <HAL_RNG_Init+0xbe>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80474dc:	f7fb fb02 	bl	8042ae4 <HAL_GetTick>
 80474e0:	4602      	mov	r2, r0
 80474e2:	68fb      	ldr	r3, [r7, #12]
 80474e4:	1ad3      	subs	r3, r2, r3
 80474e6:	2b02      	cmp	r3, #2
 80474e8:	d907      	bls.n	80474fa <HAL_RNG_Init+0xbe>
    {
      hrng->State = HAL_RNG_STATE_READY;
 80474ea:	687b      	ldr	r3, [r7, #4]
 80474ec:	2201      	movs	r2, #1
 80474ee:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80474f0:	687b      	ldr	r3, [r7, #4]
 80474f2:	2202      	movs	r2, #2
 80474f4:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 80474f6:	2301      	movs	r3, #1
 80474f8:	e03c      	b.n	8047574 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 80474fa:	687b      	ldr	r3, [r7, #4]
 80474fc:	681b      	ldr	r3, [r3, #0]
 80474fe:	681b      	ldr	r3, [r3, #0]
 8047500:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8047504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8047508:	d0e8      	beq.n	80474dc <HAL_RNG_Init+0xa0>
    }
  }

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 804750a:	687b      	ldr	r3, [r7, #4]
 804750c:	681b      	ldr	r3, [r3, #0]
 804750e:	681a      	ldr	r2, [r3, #0]
 8047510:	687b      	ldr	r3, [r7, #4]
 8047512:	681b      	ldr	r3, [r3, #0]
 8047514:	f042 0204 	orr.w	r2, r2, #4
 8047518:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 804751a:	687b      	ldr	r3, [r7, #4]
 804751c:	681b      	ldr	r3, [r3, #0]
 804751e:	685b      	ldr	r3, [r3, #4]
 8047520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047524:	2b40      	cmp	r3, #64	; 0x40
 8047526:	d104      	bne.n	8047532 <HAL_RNG_Init+0xf6>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8047528:	687b      	ldr	r3, [r7, #4]
 804752a:	2204      	movs	r2, #4
 804752c:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 804752e:	2301      	movs	r3, #1
 8047530:	e020      	b.n	8047574 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 8047532:	f7fb fad7 	bl	8042ae4 <HAL_GetTick>
 8047536:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8047538:	e00e      	b.n	8047558 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 804753a:	f7fb fad3 	bl	8042ae4 <HAL_GetTick>
 804753e:	4602      	mov	r2, r0
 8047540:	68fb      	ldr	r3, [r7, #12]
 8047542:	1ad3      	subs	r3, r2, r3
 8047544:	2b02      	cmp	r3, #2
 8047546:	d907      	bls.n	8047558 <HAL_RNG_Init+0x11c>
    {
      hrng->State = HAL_RNG_STATE_ERROR;
 8047548:	687b      	ldr	r3, [r7, #4]
 804754a:	2204      	movs	r2, #4
 804754c:	725a      	strb	r2, [r3, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 804754e:	687b      	ldr	r3, [r7, #4]
 8047550:	2202      	movs	r2, #2
 8047552:	60da      	str	r2, [r3, #12]
      return HAL_ERROR;
 8047554:	2301      	movs	r3, #1
 8047556:	e00d      	b.n	8047574 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8047558:	687b      	ldr	r3, [r7, #4]
 804755a:	681b      	ldr	r3, [r3, #0]
 804755c:	685b      	ldr	r3, [r3, #4]
 804755e:	f003 0304 	and.w	r3, r3, #4
 8047562:	2b04      	cmp	r3, #4
 8047564:	d0e9      	beq.n	804753a <HAL_RNG_Init+0xfe>
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8047566:	687b      	ldr	r3, [r7, #4]
 8047568:	2201      	movs	r2, #1
 804756a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 804756c:	687b      	ldr	r3, [r7, #4]
 804756e:	2200      	movs	r2, #0
 8047570:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8047572:	2300      	movs	r3, #0
}
 8047574:	4618      	mov	r0, r3
 8047576:	3710      	adds	r7, #16
 8047578:	46bd      	mov	sp, r7
 804757a:	bd80      	pop	{r7, pc}
 804757c:	08047671 	.word	0x08047671
 8047580:	08047687 	.word	0x08047687
 8047584:	08040e3d 	.word	0x08040e3d
 8047588:	17590abc 	.word	0x17590abc
 804758c:	000caa74 	.word	0x000caa74

08047590 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8047590:	b580      	push	{r7, lr}
 8047592:	b084      	sub	sp, #16
 8047594:	af00      	add	r7, sp, #0
 8047596:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8047598:	2300      	movs	r3, #0
 804759a:	60fb      	str	r3, [r7, #12]

  /* RNG clock error interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_CEI) != RESET)
 804759c:	687b      	ldr	r3, [r7, #4]
 804759e:	681b      	ldr	r3, [r3, #0]
 80475a0:	685b      	ldr	r3, [r3, #4]
 80475a2:	f003 0320 	and.w	r3, r3, #32
 80475a6:	2b20      	cmp	r3, #32
 80475a8:	d105      	bne.n	80475b6 <HAL_RNG_IRQHandler+0x26>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80475aa:	687b      	ldr	r3, [r7, #4]
 80475ac:	2210      	movs	r2, #16
 80475ae:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 80475b0:	2301      	movs	r3, #1
 80475b2:	60fb      	str	r3, [r7, #12]
 80475b4:	e023      	b.n	80475fe <HAL_RNG_IRQHandler+0x6e>
  }
  else if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80475b6:	687b      	ldr	r3, [r7, #4]
 80475b8:	681b      	ldr	r3, [r3, #0]
 80475ba:	685b      	ldr	r3, [r3, #4]
 80475bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80475c0:	2b40      	cmp	r3, #64	; 0x40
 80475c2:	d11c      	bne.n	80475fe <HAL_RNG_IRQHandler+0x6e>
  {
    /* Check if Seed Error Current Status (SECS) is set */
    if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 80475c4:	687b      	ldr	r3, [r7, #4]
 80475c6:	681b      	ldr	r3, [r3, #0]
 80475c8:	685b      	ldr	r3, [r3, #4]
 80475ca:	f003 0304 	and.w	r3, r3, #4
 80475ce:	2b04      	cmp	r3, #4
 80475d0:	d008      	beq.n	80475e4 <HAL_RNG_IRQHandler+0x54>
    {
      /* RNG IP performed the reset automatically (auto-reset) */
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80475d2:	687b      	ldr	r3, [r7, #4]
 80475d4:	681b      	ldr	r3, [r3, #0]
 80475d6:	685a      	ldr	r2, [r3, #4]
 80475d8:	687b      	ldr	r3, [r7, #4]
 80475da:	681b      	ldr	r3, [r3, #0]
 80475dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80475e0:	605a      	str	r2, [r3, #4]
 80475e2:	e00c      	b.n	80475fe <HAL_RNG_IRQHandler+0x6e>
    }
    else
    {
      /* Seed Error has not been recovered : Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80475e4:	687b      	ldr	r3, [r7, #4]
 80475e6:	2208      	movs	r2, #8
 80475e8:	60da      	str	r2, [r3, #12]
      rngclockerror = 1U;
 80475ea:	2301      	movs	r3, #1
 80475ec:	60fb      	str	r3, [r7, #12]
      /* Disable the IT */
      __HAL_RNG_DISABLE_IT(hrng);
 80475ee:	687b      	ldr	r3, [r7, #4]
 80475f0:	681b      	ldr	r3, [r3, #0]
 80475f2:	681a      	ldr	r2, [r3, #0]
 80475f4:	687b      	ldr	r3, [r7, #4]
 80475f6:	681b      	ldr	r3, [r3, #0]
 80475f8:	f022 0208 	bic.w	r2, r2, #8
 80475fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 80475fe:	68fb      	ldr	r3, [r7, #12]
 8047600:	2b01      	cmp	r3, #1
 8047602:	d10c      	bne.n	804761e <HAL_RNG_IRQHandler+0x8e>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8047604:	687b      	ldr	r3, [r7, #4]
 8047606:	2204      	movs	r2, #4
 8047608:	725a      	strb	r2, [r3, #9]

#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
 804760a:	687b      	ldr	r3, [r7, #4]
 804760c:	699b      	ldr	r3, [r3, #24]
 804760e:	6878      	ldr	r0, [r7, #4]
 8047610:	4798      	blx	r3
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8047612:	687b      	ldr	r3, [r7, #4]
 8047614:	681b      	ldr	r3, [r3, #0]
 8047616:	f06f 0260 	mvn.w	r2, #96	; 0x60
 804761a:	605a      	str	r2, [r3, #4]

    return;
 804761c:	e025      	b.n	804766a <HAL_RNG_IRQHandler+0xda>
  }

  /* Check RNG data ready interrupt occurred */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_DRDY) != RESET)
 804761e:	687b      	ldr	r3, [r7, #4]
 8047620:	681b      	ldr	r3, [r3, #0]
 8047622:	685b      	ldr	r3, [r3, #4]
 8047624:	f003 0301 	and.w	r3, r3, #1
 8047628:	2b01      	cmp	r3, #1
 804762a:	d11e      	bne.n	804766a <HAL_RNG_IRQHandler+0xda>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 804762c:	687b      	ldr	r3, [r7, #4]
 804762e:	681b      	ldr	r3, [r3, #0]
 8047630:	681a      	ldr	r2, [r3, #0]
 8047632:	687b      	ldr	r3, [r7, #4]
 8047634:	681b      	ldr	r3, [r3, #0]
 8047636:	f022 0208 	bic.w	r2, r2, #8
 804763a:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 804763c:	687b      	ldr	r3, [r7, #4]
 804763e:	681b      	ldr	r3, [r3, #0]
 8047640:	689a      	ldr	r2, [r3, #8]
 8047642:	687b      	ldr	r3, [r7, #4]
 8047644:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8047646:	687b      	ldr	r3, [r7, #4]
 8047648:	7a5b      	ldrb	r3, [r3, #9]
 804764a:	b2db      	uxtb	r3, r3
 804764c:	2b04      	cmp	r3, #4
 804764e:	d00c      	beq.n	804766a <HAL_RNG_IRQHandler+0xda>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8047650:	687b      	ldr	r3, [r7, #4]
 8047652:	2201      	movs	r2, #1
 8047654:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8047656:	687b      	ldr	r3, [r7, #4]
 8047658:	2200      	movs	r2, #0
 804765a:	721a      	strb	r2, [r3, #8]

#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
 804765c:	687b      	ldr	r3, [r7, #4]
 804765e:	695b      	ldr	r3, [r3, #20]
 8047660:	687a      	ldr	r2, [r7, #4]
 8047662:	6912      	ldr	r2, [r2, #16]
 8047664:	4611      	mov	r1, r2
 8047666:	6878      	ldr	r0, [r7, #4]
 8047668:	4798      	blx	r3
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 804766a:	3710      	adds	r7, #16
 804766c:	46bd      	mov	sp, r7
 804766e:	bd80      	pop	{r7, pc}

08047670 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8047670:	b480      	push	{r7}
 8047672:	b083      	sub	sp, #12
 8047674:	af00      	add	r7, sp, #0
 8047676:	6078      	str	r0, [r7, #4]
 8047678:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 804767a:	bf00      	nop
 804767c:	370c      	adds	r7, #12
 804767e:	46bd      	mov	sp, r7
 8047680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047684:	4770      	bx	lr

08047686 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8047686:	b480      	push	{r7}
 8047688:	b083      	sub	sp, #12
 804768a:	af00      	add	r7, sp, #0
 804768c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 804768e:	bf00      	nop
 8047690:	370c      	adds	r7, #12
 8047692:	46bd      	mov	sp, r7
 8047694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047698:	4770      	bx	lr
	...

0804769c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 804769c:	b580      	push	{r7, lr}
 804769e:	b084      	sub	sp, #16
 80476a0:	af00      	add	r7, sp, #0
 80476a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80476a4:	2301      	movs	r3, #1
 80476a6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80476a8:	687b      	ldr	r3, [r7, #4]
 80476aa:	2b00      	cmp	r3, #0
 80476ac:	f000 809f 	beq.w	80477ee <HAL_RTC_Init+0x152>
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80476b0:	687b      	ldr	r3, [r7, #4]
 80476b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80476b6:	b2db      	uxtb	r3, r3
 80476b8:	2b00      	cmp	r3, #0
 80476ba:	d148      	bne.n	804774e <HAL_RTC_Init+0xb2>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80476bc:	687b      	ldr	r3, [r7, #4]
 80476be:	2200      	movs	r2, #0
 80476c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;             /* Legacy weak AlarmAEventCallback      */
 80476c4:	687b      	ldr	r3, [r7, #4]
 80476c6:	4a4c      	ldr	r2, [pc, #304]	; (80477f8 <HAL_RTC_Init+0x15c>)
 80476c8:	629a      	str	r2, [r3, #40]	; 0x28
      hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak AlarmBEventCallback      */
 80476ca:	687b      	ldr	r3, [r7, #4]
 80476cc:	4a4b      	ldr	r2, [pc, #300]	; (80477fc <HAL_RTC_Init+0x160>)
 80476ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;        /* Legacy weak TimeStampEventCallback   */
 80476d0:	687b      	ldr	r3, [r7, #4]
 80476d2:	4a4b      	ldr	r2, [pc, #300]	; (8047800 <HAL_RTC_Init+0x164>)
 80476d4:	631a      	str	r2, [r3, #48]	; 0x30
      hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback;      /* Legacy weak WakeUpTimerEventCallback */
 80476d6:	687b      	ldr	r3, [r7, #4]
 80476d8:	4a4a      	ldr	r2, [pc, #296]	; (8047804 <HAL_RTC_Init+0x168>)
 80476da:	635a      	str	r2, [r3, #52]	; 0x34
      hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;          /* Legacy weak Tamper1EventCallback     */
 80476dc:	687b      	ldr	r3, [r7, #4]
 80476de:	4a4a      	ldr	r2, [pc, #296]	; (8047808 <HAL_RTC_Init+0x16c>)
 80476e0:	639a      	str	r2, [r3, #56]	; 0x38
      hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;          /* Legacy weak Tamper2EventCallback     */
 80476e2:	687b      	ldr	r3, [r7, #4]
 80476e4:	4a49      	ldr	r2, [pc, #292]	; (804780c <HAL_RTC_Init+0x170>)
 80476e6:	63da      	str	r2, [r3, #60]	; 0x3c
      hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;          /* Legacy weak Tamper3EventCallback     */
 80476e8:	687b      	ldr	r3, [r7, #4]
 80476ea:	4a49      	ldr	r2, [pc, #292]	; (8047810 <HAL_RTC_Init+0x174>)
 80476ec:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Tamper4EventCallback         =  HAL_RTCEx_Tamper4EventCallback;          /* Legacy weak Tamper4EventCallback     */
 80476ee:	687b      	ldr	r3, [r7, #4]
 80476f0:	4a48      	ldr	r2, [pc, #288]	; (8047814 <HAL_RTC_Init+0x178>)
 80476f2:	645a      	str	r2, [r3, #68]	; 0x44
      hrtc->Tamper5EventCallback         =  HAL_RTCEx_Tamper5EventCallback;          /* Legacy weak Tamper5EventCallback     */
 80476f4:	687b      	ldr	r3, [r7, #4]
 80476f6:	4a48      	ldr	r2, [pc, #288]	; (8047818 <HAL_RTC_Init+0x17c>)
 80476f8:	649a      	str	r2, [r3, #72]	; 0x48
      hrtc->Tamper6EventCallback         =  HAL_RTCEx_Tamper6EventCallback;          /* Legacy weak Tamper6EventCallback     */
 80476fa:	687b      	ldr	r3, [r7, #4]
 80476fc:	4a47      	ldr	r2, [pc, #284]	; (804781c <HAL_RTC_Init+0x180>)
 80476fe:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Tamper7EventCallback         =  HAL_RTCEx_Tamper7EventCallback;          /* Legacy weak Tamper7EventCallback     */
 8047700:	687b      	ldr	r3, [r7, #4]
 8047702:	4a47      	ldr	r2, [pc, #284]	; (8047820 <HAL_RTC_Init+0x184>)
 8047704:	651a      	str	r2, [r3, #80]	; 0x50
      hrtc->Tamper8EventCallback         =  HAL_RTCEx_Tamper8EventCallback;          /* Legacy weak Tamper8EventCallback     */
 8047706:	687b      	ldr	r3, [r7, #4]
 8047708:	4a46      	ldr	r2, [pc, #280]	; (8047824 <HAL_RTC_Init+0x188>)
 804770a:	655a      	str	r2, [r3, #84]	; 0x54
      hrtc->InternalTamper1EventCallback =  HAL_RTCEx_InternalTamper1EventCallback;  /* Legacy weak InternalTamper1EventCallback */
 804770c:	687b      	ldr	r3, [r7, #4]
 804770e:	4a46      	ldr	r2, [pc, #280]	; (8047828 <HAL_RTC_Init+0x18c>)
 8047710:	659a      	str	r2, [r3, #88]	; 0x58
      hrtc->InternalTamper2EventCallback =  HAL_RTCEx_InternalTamper2EventCallback;  /* Legacy weak InternalTamper2EventCallback */
 8047712:	687b      	ldr	r3, [r7, #4]
 8047714:	4a45      	ldr	r2, [pc, #276]	; (804782c <HAL_RTC_Init+0x190>)
 8047716:	65da      	str	r2, [r3, #92]	; 0x5c
      hrtc->InternalTamper3EventCallback =  HAL_RTCEx_InternalTamper3EventCallback;  /* Legacy weak InternalTamper3EventCallback */
 8047718:	687b      	ldr	r3, [r7, #4]
 804771a:	4a45      	ldr	r2, [pc, #276]	; (8047830 <HAL_RTC_Init+0x194>)
 804771c:	661a      	str	r2, [r3, #96]	; 0x60
      hrtc->InternalTamper5EventCallback =  HAL_RTCEx_InternalTamper5EventCallback;  /* Legacy weak InternalTamper5EventCallback */
 804771e:	687b      	ldr	r3, [r7, #4]
 8047720:	4a44      	ldr	r2, [pc, #272]	; (8047834 <HAL_RTC_Init+0x198>)
 8047722:	665a      	str	r2, [r3, #100]	; 0x64
      hrtc->InternalTamper8EventCallback =  HAL_RTCEx_InternalTamper8EventCallback;  /* Legacy weak InternalTamper8EventCallback */
 8047724:	687b      	ldr	r3, [r7, #4]
 8047726:	4a44      	ldr	r2, [pc, #272]	; (8047838 <HAL_RTC_Init+0x19c>)
 8047728:	669a      	str	r2, [r3, #104]	; 0x68

      if (hrtc->MspInitCallback == NULL)
 804772a:	687b      	ldr	r3, [r7, #4]
 804772c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804772e:	2b00      	cmp	r3, #0
 8047730:	d102      	bne.n	8047738 <HAL_RTC_Init+0x9c>
      {
        hrtc->MspInitCallback = HAL_RTC_MspInit;
 8047732:	687b      	ldr	r3, [r7, #4]
 8047734:	4a41      	ldr	r2, [pc, #260]	; (804783c <HAL_RTC_Init+0x1a0>)
 8047736:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      /* Init the low level hardware */
      hrtc->MspInitCallback(hrtc);
 8047738:	687b      	ldr	r3, [r7, #4]
 804773a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804773c:	6878      	ldr	r0, [r7, #4]
 804773e:	4798      	blx	r3

      if (hrtc->MspDeInitCallback == NULL)
 8047740:	687b      	ldr	r3, [r7, #4]
 8047742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8047744:	2b00      	cmp	r3, #0
 8047746:	d102      	bne.n	804774e <HAL_RTC_Init+0xb2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 8047748:	687b      	ldr	r3, [r7, #4]
 804774a:	4a3d      	ldr	r2, [pc, #244]	; (8047840 <HAL_RTC_Init+0x1a4>)
 804774c:	671a      	str	r2, [r3, #112]	; 0x70
      HAL_RTC_MspInit(hrtc);
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 804774e:	687b      	ldr	r3, [r7, #4]
 8047750:	2202      	movs	r2, #2
 8047752:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8047756:	4b3b      	ldr	r3, [pc, #236]	; (8047844 <HAL_RTC_Init+0x1a8>)
 8047758:	22ca      	movs	r2, #202	; 0xca
 804775a:	625a      	str	r2, [r3, #36]	; 0x24
 804775c:	4b39      	ldr	r3, [pc, #228]	; (8047844 <HAL_RTC_Init+0x1a8>)
 804775e:	2253      	movs	r2, #83	; 0x53
 8047760:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8047762:	6878      	ldr	r0, [r7, #4]
 8047764:	f000 f994 	bl	8047a90 <RTC_EnterInitMode>
 8047768:	4603      	mov	r3, r0
 804776a:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 804776c:	7bfb      	ldrb	r3, [r7, #15]
 804776e:	2b00      	cmp	r3, #0
 8047770:	d133      	bne.n	80477da <HAL_RTC_Init+0x13e>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8047772:	4b34      	ldr	r3, [pc, #208]	; (8047844 <HAL_RTC_Init+0x1a8>)
 8047774:	699b      	ldr	r3, [r3, #24]
 8047776:	4a33      	ldr	r2, [pc, #204]	; (8047844 <HAL_RTC_Init+0x1a8>)
 8047778:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 804777c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8047780:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8047782:	4b30      	ldr	r3, [pc, #192]	; (8047844 <HAL_RTC_Init+0x1a8>)
 8047784:	699a      	ldr	r2, [r3, #24]
 8047786:	687b      	ldr	r3, [r7, #4]
 8047788:	6859      	ldr	r1, [r3, #4]
 804778a:	687b      	ldr	r3, [r7, #4]
 804778c:	691b      	ldr	r3, [r3, #16]
 804778e:	4319      	orrs	r1, r3
 8047790:	687b      	ldr	r3, [r7, #4]
 8047792:	699b      	ldr	r3, [r3, #24]
 8047794:	430b      	orrs	r3, r1
 8047796:	492b      	ldr	r1, [pc, #172]	; (8047844 <HAL_RTC_Init+0x1a8>)
 8047798:	4313      	orrs	r3, r2
 804779a:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 804779c:	687b      	ldr	r3, [r7, #4]
 804779e:	68da      	ldr	r2, [r3, #12]
 80477a0:	687b      	ldr	r3, [r7, #4]
 80477a2:	689b      	ldr	r3, [r3, #8]
 80477a4:	041b      	lsls	r3, r3, #16
 80477a6:	4927      	ldr	r1, [pc, #156]	; (8047844 <HAL_RTC_Init+0x1a8>)
 80477a8:	4313      	orrs	r3, r2
 80477aa:	610b      	str	r3, [r1, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80477ac:	6878      	ldr	r0, [r7, #4]
 80477ae:	f000 f9a3 	bl	8047af8 <RTC_ExitInitMode>
 80477b2:	4603      	mov	r3, r0
 80477b4:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80477b6:	7bfb      	ldrb	r3, [r7, #15]
 80477b8:	2b00      	cmp	r3, #0
 80477ba:	d10e      	bne.n	80477da <HAL_RTC_Init+0x13e>
      {
        MODIFY_REG(RTC->CR, \
 80477bc:	4b21      	ldr	r3, [pc, #132]	; (8047844 <HAL_RTC_Init+0x1a8>)
 80477be:	699b      	ldr	r3, [r3, #24]
 80477c0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80477c4:	687b      	ldr	r3, [r7, #4]
 80477c6:	6a19      	ldr	r1, [r3, #32]
 80477c8:	687b      	ldr	r3, [r7, #4]
 80477ca:	69db      	ldr	r3, [r3, #28]
 80477cc:	4319      	orrs	r1, r3
 80477ce:	687b      	ldr	r3, [r7, #4]
 80477d0:	695b      	ldr	r3, [r3, #20]
 80477d2:	430b      	orrs	r3, r1
 80477d4:	491b      	ldr	r1, [pc, #108]	; (8047844 <HAL_RTC_Init+0x1a8>)
 80477d6:	4313      	orrs	r3, r2
 80477d8:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80477da:	4b1a      	ldr	r3, [pc, #104]	; (8047844 <HAL_RTC_Init+0x1a8>)
 80477dc:	22ff      	movs	r2, #255	; 0xff
 80477de:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80477e0:	7bfb      	ldrb	r3, [r7, #15]
 80477e2:	2b00      	cmp	r3, #0
 80477e4:	d103      	bne.n	80477ee <HAL_RTC_Init+0x152>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80477e6:	687b      	ldr	r3, [r7, #4]
 80477e8:	2201      	movs	r2, #1
 80477ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 80477ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80477f0:	4618      	mov	r0, r3
 80477f2:	3710      	adds	r7, #16
 80477f4:	46bd      	mov	sp, r7
 80477f6:	bd80      	pop	{r7, pc}
 80477f8:	08047a31 	.word	0x08047a31
 80477fc:	08047e6d 	.word	0x08047e6d
 8047800:	08047c89 	.word	0x08047c89
 8047804:	08047de1 	.word	0x08047de1
 8047808:	08047e81 	.word	0x08047e81
 804780c:	08047e95 	.word	0x08047e95
 8047810:	08047ea9 	.word	0x08047ea9
 8047814:	08047ebd 	.word	0x08047ebd
 8047818:	08047ed1 	.word	0x08047ed1
 804781c:	08047ee5 	.word	0x08047ee5
 8047820:	08047ef9 	.word	0x08047ef9
 8047824:	08047f0d 	.word	0x08047f0d
 8047828:	08047f21 	.word	0x08047f21
 804782c:	08047f35 	.word	0x08047f35
 8047830:	08047f49 	.word	0x08047f49
 8047834:	08047f5d 	.word	0x08047f5d
 8047838:	08047f71 	.word	0x08047f71
 804783c:	08040fb9 	.word	0x08040fb9
 8047840:	08041045 	.word	0x08041045
 8047844:	40002800 	.word	0x40002800

08047848 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8047848:	b590      	push	{r4, r7, lr}
 804784a:	b087      	sub	sp, #28
 804784c:	af00      	add	r7, sp, #0
 804784e:	60f8      	str	r0, [r7, #12]
 8047850:	60b9      	str	r1, [r7, #8]
 8047852:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8047854:	68fb      	ldr	r3, [r7, #12]
 8047856:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 804785a:	2b01      	cmp	r3, #1
 804785c:	d101      	bne.n	8047862 <HAL_RTC_SetAlarm_IT+0x1a>
 804785e:	2302      	movs	r3, #2
 8047860:	e0b4      	b.n	80479cc <HAL_RTC_SetAlarm_IT+0x184>
 8047862:	68fb      	ldr	r3, [r7, #12]
 8047864:	2201      	movs	r2, #1
 8047866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 804786a:	68fb      	ldr	r3, [r7, #12]
 804786c:	2202      	movs	r2, #2
 804786e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if (Format == RTC_FORMAT_BIN)
 8047872:	687b      	ldr	r3, [r7, #4]
 8047874:	2b00      	cmp	r3, #0
 8047876:	d136      	bne.n	80478e6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8047878:	4b56      	ldr	r3, [pc, #344]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804787a:	699b      	ldr	r3, [r3, #24]
 804787c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047880:	2b00      	cmp	r3, #0
 8047882:	d102      	bne.n	804788a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8047884:	68bb      	ldr	r3, [r7, #8]
 8047886:	2200      	movs	r2, #0
 8047888:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 804788a:	68bb      	ldr	r3, [r7, #8]
 804788c:	781b      	ldrb	r3, [r3, #0]
 804788e:	4618      	mov	r0, r3
 8047890:	f000 f970 	bl	8047b74 <RTC_ByteToBcd2>
 8047894:	4603      	mov	r3, r0
 8047896:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8047898:	68bb      	ldr	r3, [r7, #8]
 804789a:	785b      	ldrb	r3, [r3, #1]
 804789c:	4618      	mov	r0, r3
 804789e:	f000 f969 	bl	8047b74 <RTC_ByteToBcd2>
 80478a2:	4603      	mov	r3, r0
 80478a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80478a6:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80478a8:	68bb      	ldr	r3, [r7, #8]
 80478aa:	789b      	ldrb	r3, [r3, #2]
 80478ac:	4618      	mov	r0, r3
 80478ae:	f000 f961 	bl	8047b74 <RTC_ByteToBcd2>
 80478b2:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80478b4:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80478b8:	68bb      	ldr	r3, [r7, #8]
 80478ba:	78db      	ldrb	r3, [r3, #3]
 80478bc:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80478be:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80478c2:	68bb      	ldr	r3, [r7, #8]
 80478c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80478c8:	4618      	mov	r0, r3
 80478ca:	f000 f953 	bl	8047b74 <RTC_ByteToBcd2>
 80478ce:	4603      	mov	r3, r0
 80478d0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80478d2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80478d6:	68bb      	ldr	r3, [r7, #8]
 80478d8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80478da:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80478dc:	68bb      	ldr	r3, [r7, #8]
 80478de:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80478e0:	4313      	orrs	r3, r2
 80478e2:	617b      	str	r3, [r7, #20]
 80478e4:	e022      	b.n	804792c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else /* Format BCD */
  {
    if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80478e6:	4b3b      	ldr	r3, [pc, #236]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 80478e8:	699b      	ldr	r3, [r3, #24]
 80478ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80478ee:	2b00      	cmp	r3, #0
 80478f0:	d102      	bne.n	80478f8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80478f2:	68bb      	ldr	r3, [r7, #8]
 80478f4:	2200      	movs	r2, #0
 80478f6:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80478f8:	68bb      	ldr	r3, [r7, #8]
 80478fa:	781b      	ldrb	r3, [r3, #0]
 80478fc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80478fe:	68bb      	ldr	r3, [r7, #8]
 8047900:	785b      	ldrb	r3, [r3, #1]
 8047902:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8047904:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8047906:	68ba      	ldr	r2, [r7, #8]
 8047908:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 804790a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 804790c:	68bb      	ldr	r3, [r7, #8]
 804790e:	78db      	ldrb	r3, [r3, #3]
 8047910:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8047912:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8047914:	68bb      	ldr	r3, [r7, #8]
 8047916:	f893 3020 	ldrb.w	r3, [r3, #32]
 804791a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 804791c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 804791e:	68bb      	ldr	r3, [r7, #8]
 8047920:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8047922:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8047924:	68bb      	ldr	r3, [r7, #8]
 8047926:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8047928:	4313      	orrs	r3, r2
 804792a:	617b      	str	r3, [r7, #20]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 804792c:	68bb      	ldr	r3, [r7, #8]
 804792e:	685a      	ldr	r2, [r3, #4]
 8047930:	68bb      	ldr	r3, [r7, #8]
 8047932:	699b      	ldr	r3, [r3, #24]
 8047934:	4313      	orrs	r3, r2
 8047936:	613b      	str	r3, [r7, #16]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8047938:	4b26      	ldr	r3, [pc, #152]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804793a:	22ca      	movs	r2, #202	; 0xca
 804793c:	625a      	str	r2, [r3, #36]	; 0x24
 804793e:	4b25      	ldr	r3, [pc, #148]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 8047940:	2253      	movs	r2, #83	; 0x53
 8047942:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8047944:	68bb      	ldr	r3, [r7, #8]
 8047946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804794c:	d115      	bne.n	804797a <HAL_RTC_SetAlarm_IT+0x132>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 804794e:	4b21      	ldr	r3, [pc, #132]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 8047950:	699b      	ldr	r3, [r3, #24]
 8047952:	4a20      	ldr	r2, [pc, #128]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 8047954:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8047958:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 804795a:	4b1e      	ldr	r3, [pc, #120]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804795c:	2201      	movs	r2, #1
 804795e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configure the Alarm A */
    WRITE_REG(RTC->ALRMAR, (uint32_t)tmpreg);
 8047960:	4a1c      	ldr	r2, [pc, #112]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 8047962:	697b      	ldr	r3, [r7, #20]
 8047964:	6413      	str	r3, [r2, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    WRITE_REG(RTC->ALRMASSR, subsecondtmpreg);
 8047966:	4a1b      	ldr	r2, [pc, #108]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 8047968:	693b      	ldr	r3, [r7, #16]
 804796a:	6453      	str	r3, [r2, #68]	; 0x44
    /* Configure the Alarm interrupt : Enable Alarm */
    SET_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 804796c:	4b19      	ldr	r3, [pc, #100]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804796e:	699b      	ldr	r3, [r3, #24]
 8047970:	4a18      	ldr	r2, [pc, #96]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 8047972:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8047976:	6193      	str	r3, [r2, #24]
 8047978:	e014      	b.n	80479a4 <HAL_RTC_SetAlarm_IT+0x15c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 804797a:	4b16      	ldr	r3, [pc, #88]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804797c:	699b      	ldr	r3, [r3, #24]
 804797e:	4a15      	ldr	r2, [pc, #84]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 8047980:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8047984:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8047986:	4b13      	ldr	r3, [pc, #76]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 8047988:	2202      	movs	r2, #2
 804798a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configure the Alarm B */
    WRITE_REG(RTC->ALRMBR, (uint32_t)tmpreg);
 804798c:	4a11      	ldr	r2, [pc, #68]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804798e:	697b      	ldr	r3, [r7, #20]
 8047990:	6493      	str	r3, [r2, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    WRITE_REG(RTC->ALRMBSSR, subsecondtmpreg);
 8047992:	4a10      	ldr	r2, [pc, #64]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 8047994:	693b      	ldr	r3, [r7, #16]
 8047996:	64d3      	str	r3, [r2, #76]	; 0x4c
    /* Configure the Alarm B interrupt : Enable Alarm */
    SET_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8047998:	4b0e      	ldr	r3, [pc, #56]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804799a:	699b      	ldr	r3, [r3, #24]
 804799c:	4a0d      	ldr	r2, [pc, #52]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 804799e:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 80479a2:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80479a4:	4b0c      	ldr	r3, [pc, #48]	; (80479d8 <HAL_RTC_SetAlarm_IT+0x190>)
 80479a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80479aa:	4a0b      	ldr	r2, [pc, #44]	; (80479d8 <HAL_RTC_SetAlarm_IT+0x190>)
 80479ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80479b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80479b4:	4b07      	ldr	r3, [pc, #28]	; (80479d4 <HAL_RTC_SetAlarm_IT+0x18c>)
 80479b6:	22ff      	movs	r2, #255	; 0xff
 80479b8:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80479ba:	68fb      	ldr	r3, [r7, #12]
 80479bc:	2201      	movs	r2, #1
 80479be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80479c2:	68fb      	ldr	r3, [r7, #12]
 80479c4:	2200      	movs	r2, #0
 80479c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80479ca:	2300      	movs	r3, #0
}
 80479cc:	4618      	mov	r0, r3
 80479ce:	371c      	adds	r7, #28
 80479d0:	46bd      	mov	sp, r7
 80479d2:	bd90      	pop	{r4, r7, pc}
 80479d4:	40002800 	.word	0x40002800
 80479d8:	4002f400 	.word	0x4002f400

080479dc <HAL_RTC_AlarmIRQHandler>:
  * @note   Alarm non-secure is available in non-secure driver.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80479dc:	b580      	push	{r7, lr}
 80479de:	b084      	sub	sp, #16
 80479e0:	af00      	add	r7, sp, #0
 80479e2:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(RTC->MISR);
 80479e4:	4b11      	ldr	r3, [pc, #68]	; (8047a2c <HAL_RTC_AlarmIRQHandler+0x50>)
 80479e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80479e8:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80479ea:	68fb      	ldr	r3, [r7, #12]
 80479ec:	f003 0301 	and.w	r3, r3, #1
 80479f0:	2b00      	cmp	r3, #0
 80479f2:	d006      	beq.n	8047a02 <HAL_RTC_AlarmIRQHandler+0x26>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80479f4:	4b0d      	ldr	r3, [pc, #52]	; (8047a2c <HAL_RTC_AlarmIRQHandler+0x50>)
 80479f6:	2201      	movs	r2, #1
 80479f8:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
 80479fa:	687b      	ldr	r3, [r7, #4]
 80479fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80479fe:	6878      	ldr	r0, [r7, #4]
 8047a00:	4798      	blx	r3
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8047a02:	68fb      	ldr	r3, [r7, #12]
 8047a04:	f003 0302 	and.w	r3, r3, #2
 8047a08:	2b00      	cmp	r3, #0
 8047a0a:	d006      	beq.n	8047a1a <HAL_RTC_AlarmIRQHandler+0x3e>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8047a0c:	4b07      	ldr	r3, [pc, #28]	; (8047a2c <HAL_RTC_AlarmIRQHandler+0x50>)
 8047a0e:	2202      	movs	r2, #2
 8047a10:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
 8047a12:	687b      	ldr	r3, [r7, #4]
 8047a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8047a16:	6878      	ldr	r0, [r7, #4]
 8047a18:	4798      	blx	r3
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8047a1a:	687b      	ldr	r3, [r7, #4]
 8047a1c:	2201      	movs	r2, #1
 8047a1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8047a22:	bf00      	nop
 8047a24:	3710      	adds	r7, #16
 8047a26:	46bd      	mov	sp, r7
 8047a28:	bd80      	pop	{r7, pc}
 8047a2a:	bf00      	nop
 8047a2c:	40002800 	.word	0x40002800

08047a30 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A secure secure callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8047a30:	b480      	push	{r7}
 8047a32:	b083      	sub	sp, #12
 8047a34:	af00      	add	r7, sp, #0
 8047a36:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the secure secure callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8047a38:	bf00      	nop
 8047a3a:	370c      	adds	r7, #12
 8047a3c:	46bd      	mov	sp, r7
 8047a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047a42:	4770      	bx	lr

08047a44 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8047a44:	b580      	push	{r7, lr}
 8047a46:	b084      	sub	sp, #16
 8047a48:	af00      	add	r7, sp, #0
 8047a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  SET_BIT(RTC->ICSR, RTC_RSF_MASK);
 8047a4c:	4b0f      	ldr	r3, [pc, #60]	; (8047a8c <HAL_RTC_WaitForSynchro+0x48>)
 8047a4e:	68db      	ldr	r3, [r3, #12]
 8047a50:	4a0e      	ldr	r2, [pc, #56]	; (8047a8c <HAL_RTC_WaitForSynchro+0x48>)
 8047a52:	f063 03a0 	orn	r3, r3, #160	; 0xa0
 8047a56:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8047a58:	f7fb f844 	bl	8042ae4 <HAL_GetTick>
 8047a5c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8047a5e:	e009      	b.n	8047a74 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8047a60:	f7fb f840 	bl	8042ae4 <HAL_GetTick>
 8047a64:	4602      	mov	r2, r0
 8047a66:	68fb      	ldr	r3, [r7, #12]
 8047a68:	1ad3      	subs	r3, r2, r3
 8047a6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8047a6e:	d901      	bls.n	8047a74 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8047a70:	2303      	movs	r3, #3
 8047a72:	e006      	b.n	8047a82 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8047a74:	4b05      	ldr	r3, [pc, #20]	; (8047a8c <HAL_RTC_WaitForSynchro+0x48>)
 8047a76:	68db      	ldr	r3, [r3, #12]
 8047a78:	f003 0320 	and.w	r3, r3, #32
 8047a7c:	2b00      	cmp	r3, #0
 8047a7e:	d0ef      	beq.n	8047a60 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8047a80:	2300      	movs	r3, #0
}
 8047a82:	4618      	mov	r0, r3
 8047a84:	3710      	adds	r7, #16
 8047a86:	46bd      	mov	sp, r7
 8047a88:	bd80      	pop	{r7, pc}
 8047a8a:	bf00      	nop
 8047a8c:	40002800 	.word	0x40002800

08047a90 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8047a90:	b580      	push	{r7, lr}
 8047a92:	b084      	sub	sp, #16
 8047a94:	af00      	add	r7, sp, #0
 8047a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8047a98:	2300      	movs	r3, #0
 8047a9a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8047a9c:	4b15      	ldr	r3, [pc, #84]	; (8047af4 <RTC_EnterInitMode+0x64>)
 8047a9e:	68db      	ldr	r3, [r3, #12]
 8047aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047aa4:	2b00      	cmp	r3, #0
 8047aa6:	d120      	bne.n	8047aea <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8047aa8:	4b12      	ldr	r3, [pc, #72]	; (8047af4 <RTC_EnterInitMode+0x64>)
 8047aaa:	68db      	ldr	r3, [r3, #12]
 8047aac:	4a11      	ldr	r2, [pc, #68]	; (8047af4 <RTC_EnterInitMode+0x64>)
 8047aae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8047ab2:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8047ab4:	f7fb f816 	bl	8042ae4 <HAL_GetTick>
 8047ab8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8047aba:	e00d      	b.n	8047ad8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8047abc:	f7fb f812 	bl	8042ae4 <HAL_GetTick>
 8047ac0:	4602      	mov	r2, r0
 8047ac2:	68bb      	ldr	r3, [r7, #8]
 8047ac4:	1ad3      	subs	r3, r2, r3
 8047ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8047aca:	d905      	bls.n	8047ad8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8047acc:	2303      	movs	r3, #3
 8047ace:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8047ad0:	687b      	ldr	r3, [r7, #4]
 8047ad2:	2203      	movs	r2, #3
 8047ad4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8047ad8:	4b06      	ldr	r3, [pc, #24]	; (8047af4 <RTC_EnterInitMode+0x64>)
 8047ada:	68db      	ldr	r3, [r3, #12]
 8047adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047ae0:	2b00      	cmp	r3, #0
 8047ae2:	d102      	bne.n	8047aea <RTC_EnterInitMode+0x5a>
 8047ae4:	7bfb      	ldrb	r3, [r7, #15]
 8047ae6:	2b03      	cmp	r3, #3
 8047ae8:	d1e8      	bne.n	8047abc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8047aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8047aec:	4618      	mov	r0, r3
 8047aee:	3710      	adds	r7, #16
 8047af0:	46bd      	mov	sp, r7
 8047af2:	bd80      	pop	{r7, pc}
 8047af4:	40002800 	.word	0x40002800

08047af8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8047af8:	b580      	push	{r7, lr}
 8047afa:	b084      	sub	sp, #16
 8047afc:	af00      	add	r7, sp, #0
 8047afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8047b00:	2300      	movs	r3, #0
 8047b02:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8047b04:	4b1a      	ldr	r3, [pc, #104]	; (8047b70 <RTC_ExitInitMode+0x78>)
 8047b06:	68db      	ldr	r3, [r3, #12]
 8047b08:	4a19      	ldr	r2, [pc, #100]	; (8047b70 <RTC_ExitInitMode+0x78>)
 8047b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8047b0e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8047b10:	4b17      	ldr	r3, [pc, #92]	; (8047b70 <RTC_ExitInitMode+0x78>)
 8047b12:	699b      	ldr	r3, [r3, #24]
 8047b14:	f003 0320 	and.w	r3, r3, #32
 8047b18:	2b00      	cmp	r3, #0
 8047b1a:	d10c      	bne.n	8047b36 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8047b1c:	6878      	ldr	r0, [r7, #4]
 8047b1e:	f7ff ff91 	bl	8047a44 <HAL_RTC_WaitForSynchro>
 8047b22:	4603      	mov	r3, r0
 8047b24:	2b00      	cmp	r3, #0
 8047b26:	d01e      	beq.n	8047b66 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8047b28:	687b      	ldr	r3, [r7, #4]
 8047b2a:	2203      	movs	r2, #3
 8047b2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8047b30:	2303      	movs	r3, #3
 8047b32:	73fb      	strb	r3, [r7, #15]
 8047b34:	e017      	b.n	8047b66 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8047b36:	4b0e      	ldr	r3, [pc, #56]	; (8047b70 <RTC_ExitInitMode+0x78>)
 8047b38:	699b      	ldr	r3, [r3, #24]
 8047b3a:	4a0d      	ldr	r2, [pc, #52]	; (8047b70 <RTC_ExitInitMode+0x78>)
 8047b3c:	f023 0320 	bic.w	r3, r3, #32
 8047b40:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8047b42:	6878      	ldr	r0, [r7, #4]
 8047b44:	f7ff ff7e 	bl	8047a44 <HAL_RTC_WaitForSynchro>
 8047b48:	4603      	mov	r3, r0
 8047b4a:	2b00      	cmp	r3, #0
 8047b4c:	d005      	beq.n	8047b5a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8047b4e:	687b      	ldr	r3, [r7, #4]
 8047b50:	2203      	movs	r2, #3
 8047b52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8047b56:	2303      	movs	r3, #3
 8047b58:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8047b5a:	4b05      	ldr	r3, [pc, #20]	; (8047b70 <RTC_ExitInitMode+0x78>)
 8047b5c:	699b      	ldr	r3, [r3, #24]
 8047b5e:	4a04      	ldr	r2, [pc, #16]	; (8047b70 <RTC_ExitInitMode+0x78>)
 8047b60:	f043 0320 	orr.w	r3, r3, #32
 8047b64:	6193      	str	r3, [r2, #24]
  }

  return status;
 8047b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8047b68:	4618      	mov	r0, r3
 8047b6a:	3710      	adds	r7, #16
 8047b6c:	46bd      	mov	sp, r7
 8047b6e:	bd80      	pop	{r7, pc}
 8047b70:	40002800 	.word	0x40002800

08047b74 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8047b74:	b480      	push	{r7}
 8047b76:	b085      	sub	sp, #20
 8047b78:	af00      	add	r7, sp, #0
 8047b7a:	4603      	mov	r3, r0
 8047b7c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8047b7e:	2300      	movs	r3, #0
 8047b80:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8047b82:	79fb      	ldrb	r3, [r7, #7]
 8047b84:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8047b86:	e005      	b.n	8047b94 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8047b88:	68fb      	ldr	r3, [r7, #12]
 8047b8a:	3301      	adds	r3, #1
 8047b8c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8047b8e:	7afb      	ldrb	r3, [r7, #11]
 8047b90:	3b0a      	subs	r3, #10
 8047b92:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8047b94:	7afb      	ldrb	r3, [r7, #11]
 8047b96:	2b09      	cmp	r3, #9
 8047b98:	d8f6      	bhi.n	8047b88 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8047b9a:	68fb      	ldr	r3, [r7, #12]
 8047b9c:	b2db      	uxtb	r3, r3
 8047b9e:	011b      	lsls	r3, r3, #4
 8047ba0:	b2da      	uxtb	r2, r3
 8047ba2:	7afb      	ldrb	r3, [r7, #11]
 8047ba4:	4313      	orrs	r3, r2
 8047ba6:	b2db      	uxtb	r3, r3
}
 8047ba8:	4618      	mov	r0, r3
 8047baa:	3714      	adds	r7, #20
 8047bac:	46bd      	mov	sp, r7
 8047bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047bb2:	4770      	bx	lr

08047bb4 <HAL_RTCEx_SetTimeStamp_IT>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp_IT(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8047bb4:	b480      	push	{r7}
 8047bb6:	b085      	sub	sp, #20
 8047bb8:	af00      	add	r7, sp, #0
 8047bba:	60f8      	str	r0, [r7, #12]
 8047bbc:	60b9      	str	r1, [r7, #8]
 8047bbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8047bc0:	68fb      	ldr	r3, [r7, #12]
 8047bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8047bc6:	2b01      	cmp	r3, #1
 8047bc8:	d101      	bne.n	8047bce <HAL_RTCEx_SetTimeStamp_IT+0x1a>
 8047bca:	2302      	movs	r3, #2
 8047bcc:	e035      	b.n	8047c3a <HAL_RTCEx_SetTimeStamp_IT+0x86>
 8047bce:	68fb      	ldr	r3, [r7, #12]
 8047bd0:	2201      	movs	r2, #1
 8047bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8047bd6:	68fb      	ldr	r3, [r7, #12]
 8047bd8:	2202      	movs	r2, #2
 8047bda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* RTC timestamp Interrupt Configuration: EXTI configuration */
  __HAL_RTC_TIMESTAMP_EXTI_ENABLE_IT();
 8047bde:	4b1a      	ldr	r3, [pc, #104]	; (8047c48 <HAL_RTCEx_SetTimeStamp_IT+0x94>)
 8047be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8047be4:	4a18      	ldr	r2, [pc, #96]	; (8047c48 <HAL_RTCEx_SetTimeStamp_IT+0x94>)
 8047be6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8047bea:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Get the RTC_CR register and clear the bits to be configured */
  CLEAR_BIT(RTC->CR, (RTC_CR_TSEDGE | RTC_CR_TSE));
 8047bee:	4b17      	ldr	r3, [pc, #92]	; (8047c4c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 8047bf0:	699b      	ldr	r3, [r3, #24]
 8047bf2:	4a16      	ldr	r2, [pc, #88]	; (8047c4c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 8047bf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8047bf8:	f023 0308 	bic.w	r3, r3, #8
 8047bfc:	6193      	str	r3, [r2, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8047bfe:	4b13      	ldr	r3, [pc, #76]	; (8047c4c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 8047c00:	22ca      	movs	r2, #202	; 0xca
 8047c02:	625a      	str	r2, [r3, #36]	; 0x24
 8047c04:	4b11      	ldr	r3, [pc, #68]	; (8047c4c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 8047c06:	2253      	movs	r2, #83	; 0x53
 8047c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE before Enable bit to avoid unwanted TSF setting. */
  SET_BIT(RTC->CR, (uint32_t)TimeStampEdge);
 8047c0a:	4b10      	ldr	r3, [pc, #64]	; (8047c4c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 8047c0c:	699a      	ldr	r2, [r3, #24]
 8047c0e:	490f      	ldr	r1, [pc, #60]	; (8047c4c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 8047c10:	68bb      	ldr	r3, [r7, #8]
 8047c12:	4313      	orrs	r3, r2
 8047c14:	618b      	str	r3, [r1, #24]

  /* Enable timestamp and IT */
  SET_BIT(RTC->CR, RTC_CR_TSE | RTC_CR_TSIE);
 8047c16:	4b0d      	ldr	r3, [pc, #52]	; (8047c4c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 8047c18:	699b      	ldr	r3, [r3, #24]
 8047c1a:	4a0c      	ldr	r2, [pc, #48]	; (8047c4c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 8047c1c:	f443 4308 	orr.w	r3, r3, #34816	; 0x8800
 8047c20:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8047c22:	4b0a      	ldr	r3, [pc, #40]	; (8047c4c <HAL_RTCEx_SetTimeStamp_IT+0x98>)
 8047c24:	22ff      	movs	r2, #255	; 0xff
 8047c26:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8047c28:	68fb      	ldr	r3, [r7, #12]
 8047c2a:	2201      	movs	r2, #1
 8047c2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8047c30:	68fb      	ldr	r3, [r7, #12]
 8047c32:	2200      	movs	r2, #0
 8047c34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8047c38:	2300      	movs	r3, #0
}
 8047c3a:	4618      	mov	r0, r3
 8047c3c:	3714      	adds	r7, #20
 8047c3e:	46bd      	mov	sp, r7
 8047c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047c44:	4770      	bx	lr
 8047c46:	bf00      	nop
 8047c48:	4002f400 	.word	0x4002f400
 8047c4c:	40002800 	.word	0x40002800

08047c50 <HAL_RTCEx_TimeStampIRQHandler>:
  * @brief  Handle TimeStamp non-secure interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_TimeStampIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8047c50:	b580      	push	{r7, lr}
 8047c52:	b082      	sub	sp, #8
 8047c54:	af00      	add	r7, sp, #0
 8047c56:	6078      	str	r0, [r7, #4]
  if (READ_BIT(RTC->MISR, RTC_MISR_TSMF) != 0U)
 8047c58:	4b0a      	ldr	r3, [pc, #40]	; (8047c84 <HAL_RTCEx_TimeStampIRQHandler+0x34>)
 8047c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047c5c:	f003 0308 	and.w	r3, r3, #8
 8047c60:	2b00      	cmp	r3, #0
 8047c62:	d006      	beq.n	8047c72 <HAL_RTCEx_TimeStampIRQHandler+0x22>
  {
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call TimeStampEvent registered Callback */
    hrtc->TimeStampEventCallback(hrtc);
 8047c64:	687b      	ldr	r3, [r7, #4]
 8047c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047c68:	6878      	ldr	r0, [r7, #4]
 8047c6a:	4798      	blx	r3
#else
    HAL_RTCEx_TimeStampEventCallback(hrtc);
#endif
    /* Clearing flags after the Callback because the content of RTC_TSTR and RTC_TSDR are cleared when TSF bit is reset.*/
    WRITE_REG(RTC->SCR, RTC_SCR_CITSF | RTC_SCR_CTSF);
 8047c6c:	4b05      	ldr	r3, [pc, #20]	; (8047c84 <HAL_RTCEx_TimeStampIRQHandler+0x34>)
 8047c6e:	2228      	movs	r2, #40	; 0x28
 8047c70:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8047c72:	687b      	ldr	r3, [r7, #4]
 8047c74:	2201      	movs	r2, #1
 8047c76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8047c7a:	bf00      	nop
 8047c7c:	3708      	adds	r7, #8
 8047c7e:	46bd      	mov	sp, r7
 8047c80:	bd80      	pop	{r7, pc}
 8047c82:	bf00      	nop
 8047c84:	40002800 	.word	0x40002800

08047c88 <HAL_RTCEx_TimeStampEventCallback>:
  * @brief  TimeStamp callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 8047c88:	b480      	push	{r7}
 8047c8a:	b083      	sub	sp, #12
 8047c8c:	af00      	add	r7, sp, #0
 8047c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 8047c90:	bf00      	nop
 8047c92:	370c      	adds	r7, #12
 8047c94:	46bd      	mov	sp, r7
 8047c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047c9a:	4770      	bx	lr

08047c9c <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 8047c9c:	b580      	push	{r7, lr}
 8047c9e:	b086      	sub	sp, #24
 8047ca0:	af00      	add	r7, sp, #0
 8047ca2:	60f8      	str	r0, [r7, #12]
 8047ca4:	60b9      	str	r1, [r7, #8]
 8047ca6:	607a      	str	r2, [r7, #4]
 8047ca8:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8047caa:	68fb      	ldr	r3, [r7, #12]
 8047cac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8047cb0:	2b01      	cmp	r3, #1
 8047cb2:	d101      	bne.n	8047cb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8047cb4:	2302      	movs	r3, #2
 8047cb6:	e06f      	b.n	8047d98 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
 8047cb8:	68fb      	ldr	r3, [r7, #12]
 8047cba:	2201      	movs	r2, #1
 8047cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8047cc0:	68fb      	ldr	r3, [r7, #12]
 8047cc2:	2202      	movs	r2, #2
 8047cc4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8047cc8:	4b35      	ldr	r3, [pc, #212]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047cca:	22ca      	movs	r2, #202	; 0xca
 8047ccc:	625a      	str	r2, [r3, #36]	; 0x24
 8047cce:	4b34      	ldr	r3, [pc, #208]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047cd0:	2253      	movs	r2, #83	; 0x53
 8047cd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8047cd4:	4b32      	ldr	r3, [pc, #200]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047cd6:	699b      	ldr	r3, [r3, #24]
 8047cd8:	4a31      	ldr	r2, [pc, #196]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047cda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8047cde:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8047ce0:	4b2f      	ldr	r3, [pc, #188]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047ce2:	2204      	movs	r2, #4
 8047ce4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8047ce6:	4b2e      	ldr	r3, [pc, #184]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047ce8:	68db      	ldr	r3, [r3, #12]
 8047cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8047cee:	2b00      	cmp	r3, #0
 8047cf0:	d11e      	bne.n	8047d30 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 8047cf2:	f7fa fef7 	bl	8042ae4 <HAL_GetTick>
 8047cf6:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8047cf8:	e014      	b.n	8047d24 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8047cfa:	f7fa fef3 	bl	8042ae4 <HAL_GetTick>
 8047cfe:	4602      	mov	r2, r0
 8047d00:	697b      	ldr	r3, [r7, #20]
 8047d02:	1ad3      	subs	r3, r2, r3
 8047d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8047d08:	d90c      	bls.n	8047d24 <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8047d0a:	4b25      	ldr	r3, [pc, #148]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047d0c:	22ff      	movs	r2, #255	; 0xff
 8047d0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8047d10:	68fb      	ldr	r3, [r7, #12]
 8047d12:	2203      	movs	r2, #3
 8047d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8047d18:	68fb      	ldr	r3, [r7, #12]
 8047d1a:	2200      	movs	r2, #0
 8047d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8047d20:	2303      	movs	r3, #3
 8047d22:	e039      	b.n	8047d98 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8047d24:	4b1e      	ldr	r3, [pc, #120]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047d26:	68db      	ldr	r3, [r3, #12]
 8047d28:	f003 0304 	and.w	r3, r3, #4
 8047d2c:	2b00      	cmp	r3, #0
 8047d2e:	d0e4      	beq.n	8047cfa <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 8047d30:	683b      	ldr	r3, [r7, #0]
 8047d32:	041a      	lsls	r2, r3, #16
 8047d34:	491a      	ldr	r1, [pc, #104]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047d36:	68bb      	ldr	r3, [r7, #8]
 8047d38:	4313      	orrs	r3, r2
 8047d3a:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8047d3c:	4b18      	ldr	r3, [pc, #96]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047d3e:	699b      	ldr	r3, [r3, #24]
 8047d40:	f023 0207 	bic.w	r2, r3, #7
 8047d44:	4916      	ldr	r1, [pc, #88]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047d46:	687b      	ldr	r3, [r7, #4]
 8047d48:	4313      	orrs	r3, r2
 8047d4a:	618b      	str	r3, [r1, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 8047d4c:	683b      	ldr	r3, [r7, #0]
 8047d4e:	2b00      	cmp	r3, #0
 8047d50:	d008      	beq.n	8047d64 <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 8047d52:	4b14      	ldr	r3, [pc, #80]	; (8047da4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8047d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8047d58:	4a12      	ldr	r2, [pc, #72]	; (8047da4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8047d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8047d5e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8047d62:	e007      	b.n	8047d74 <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8047d64:	4b0f      	ldr	r3, [pc, #60]	; (8047da4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8047d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8047d6a:	4a0e      	ldr	r2, [pc, #56]	; (8047da4 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8047d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8047d70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8047d74:	4b0a      	ldr	r3, [pc, #40]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047d76:	699b      	ldr	r3, [r3, #24]
 8047d78:	4a09      	ldr	r2, [pc, #36]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047d7a:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8047d7e:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8047d80:	4b07      	ldr	r3, [pc, #28]	; (8047da0 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8047d82:	22ff      	movs	r2, #255	; 0xff
 8047d84:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8047d86:	68fb      	ldr	r3, [r7, #12]
 8047d88:	2201      	movs	r2, #1
 8047d8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8047d8e:	68fb      	ldr	r3, [r7, #12]
 8047d90:	2200      	movs	r2, #0
 8047d92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8047d96:	2300      	movs	r3, #0
}
 8047d98:	4618      	mov	r0, r3
 8047d9a:	3718      	adds	r7, #24
 8047d9c:	46bd      	mov	sp, r7
 8047d9e:	bd80      	pop	{r7, pc}
 8047da0:	40002800 	.word	0x40002800
 8047da4:	4002f400 	.word	0x4002f400

08047da8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer non-secure interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8047da8:	b580      	push	{r7, lr}
 8047daa:	b082      	sub	sp, #8
 8047dac:	af00      	add	r7, sp, #0
 8047dae:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8047db0:	4b0a      	ldr	r3, [pc, #40]	; (8047ddc <HAL_RTCEx_WakeUpTimerIRQHandler+0x34>)
 8047db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8047db4:	f003 0304 	and.w	r3, r3, #4
 8047db8:	2b00      	cmp	r3, #0
 8047dba:	d006      	beq.n	8047dca <HAL_RTCEx_WakeUpTimerIRQHandler+0x22>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8047dbc:	4b07      	ldr	r3, [pc, #28]	; (8047ddc <HAL_RTCEx_WakeUpTimerIRQHandler+0x34>)
 8047dbe:	2204      	movs	r2, #4
 8047dc0:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
 8047dc2:	687b      	ldr	r3, [r7, #4]
 8047dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8047dc6:	6878      	ldr	r0, [r7, #4]
 8047dc8:	4798      	blx	r3
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8047dca:	687b      	ldr	r3, [r7, #4]
 8047dcc:	2201      	movs	r2, #1
 8047dce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8047dd2:	bf00      	nop
 8047dd4:	3708      	adds	r7, #8
 8047dd6:	46bd      	mov	sp, r7
 8047dd8:	bd80      	pop	{r7, pc}
 8047dda:	bf00      	nop
 8047ddc:	40002800 	.word	0x40002800

08047de0 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8047de0:	b480      	push	{r7}
 8047de2:	b083      	sub	sp, #12
 8047de4:	af00      	add	r7, sp, #0
 8047de6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8047de8:	bf00      	nop
 8047dea:	370c      	adds	r7, #12
 8047dec:	46bd      	mov	sp, r7
 8047dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047df2:	4770      	bx	lr

08047df4 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef *hrtc, uint32_t CalibOutput)
{
 8047df4:	b480      	push	{r7}
 8047df6:	b083      	sub	sp, #12
 8047df8:	af00      	add	r7, sp, #0
 8047dfa:	6078      	str	r0, [r7, #4]
 8047dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8047dfe:	687b      	ldr	r3, [r7, #4]
 8047e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8047e04:	2b01      	cmp	r3, #1
 8047e06:	d101      	bne.n	8047e0c <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8047e08:	2302      	movs	r3, #2
 8047e0a:	e027      	b.n	8047e5c <HAL_RTCEx_SetCalibrationOutPut+0x68>
 8047e0c:	687b      	ldr	r3, [r7, #4]
 8047e0e:	2201      	movs	r2, #1
 8047e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8047e14:	687b      	ldr	r3, [r7, #4]
 8047e16:	2202      	movs	r2, #2
 8047e18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8047e1c:	4b12      	ldr	r3, [pc, #72]	; (8047e68 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 8047e1e:	22ca      	movs	r2, #202	; 0xca
 8047e20:	625a      	str	r2, [r3, #36]	; 0x24
 8047e22:	4b11      	ldr	r3, [pc, #68]	; (8047e68 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 8047e24:	2253      	movs	r2, #83	; 0x53
 8047e26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the RTC_CR register */
  MODIFY_REG(RTC->CR, RTC_CR_COSEL, CalibOutput);
 8047e28:	4b0f      	ldr	r3, [pc, #60]	; (8047e68 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 8047e2a:	699b      	ldr	r3, [r3, #24]
 8047e2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8047e30:	490d      	ldr	r1, [pc, #52]	; (8047e68 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 8047e32:	683b      	ldr	r3, [r7, #0]
 8047e34:	4313      	orrs	r3, r2
 8047e36:	618b      	str	r3, [r1, #24]

  /* Enable calibration output */
  SET_BIT(RTC->CR, RTC_CR_COE);
 8047e38:	4b0b      	ldr	r3, [pc, #44]	; (8047e68 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 8047e3a:	699b      	ldr	r3, [r3, #24]
 8047e3c:	4a0a      	ldr	r2, [pc, #40]	; (8047e68 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 8047e3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8047e42:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8047e44:	4b08      	ldr	r3, [pc, #32]	; (8047e68 <HAL_RTCEx_SetCalibrationOutPut+0x74>)
 8047e46:	22ff      	movs	r2, #255	; 0xff
 8047e48:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8047e4a:	687b      	ldr	r3, [r7, #4]
 8047e4c:	2201      	movs	r2, #1
 8047e4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8047e52:	687b      	ldr	r3, [r7, #4]
 8047e54:	2200      	movs	r2, #0
 8047e56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8047e5a:	2300      	movs	r3, #0
}
 8047e5c:	4618      	mov	r0, r3
 8047e5e:	370c      	adds	r7, #12
 8047e60:	46bd      	mov	sp, r7
 8047e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047e66:	4770      	bx	lr
 8047e68:	40002800 	.word	0x40002800

08047e6c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8047e6c:	b480      	push	{r7}
 8047e6e:	b083      	sub	sp, #12
 8047e70:	af00      	add	r7, sp, #0
 8047e72:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8047e74:	bf00      	nop
 8047e76:	370c      	adds	r7, #12
 8047e78:	46bd      	mov	sp, r7
 8047e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047e7e:	4770      	bx	lr

08047e80 <HAL_RTCEx_Tamper1EventCallback>:
  * @brief  Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8047e80:	b480      	push	{r7}
 8047e82:	b083      	sub	sp, #12
 8047e84:	af00      	add	r7, sp, #0
 8047e86:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 8047e88:	bf00      	nop
 8047e8a:	370c      	adds	r7, #12
 8047e8c:	46bd      	mov	sp, r7
 8047e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047e92:	4770      	bx	lr

08047e94 <HAL_RTCEx_Tamper2EventCallback>:
  * @brief  Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8047e94:	b480      	push	{r7}
 8047e96:	b083      	sub	sp, #12
 8047e98:	af00      	add	r7, sp, #0
 8047e9a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 8047e9c:	bf00      	nop
 8047e9e:	370c      	adds	r7, #12
 8047ea0:	46bd      	mov	sp, r7
 8047ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047ea6:	4770      	bx	lr

08047ea8 <HAL_RTCEx_Tamper3EventCallback>:
  * @brief  Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8047ea8:	b480      	push	{r7}
 8047eaa:	b083      	sub	sp, #12
 8047eac:	af00      	add	r7, sp, #0
 8047eae:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 8047eb0:	bf00      	nop
 8047eb2:	370c      	adds	r7, #12
 8047eb4:	46bd      	mov	sp, r7
 8047eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047eba:	4770      	bx	lr

08047ebc <HAL_RTCEx_Tamper4EventCallback>:
  * @brief  Tamper 4 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper4EventCallback(RTC_HandleTypeDef *hrtc)
{
 8047ebc:	b480      	push	{r7}
 8047ebe:	b083      	sub	sp, #12
 8047ec0:	af00      	add	r7, sp, #0
 8047ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper4EventCallback could be implemented in the user file
   */
}
 8047ec4:	bf00      	nop
 8047ec6:	370c      	adds	r7, #12
 8047ec8:	46bd      	mov	sp, r7
 8047eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047ece:	4770      	bx	lr

08047ed0 <HAL_RTCEx_Tamper5EventCallback>:
  * @brief  Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 8047ed0:	b480      	push	{r7}
 8047ed2:	b083      	sub	sp, #12
 8047ed4:	af00      	add	r7, sp, #0
 8047ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper5EventCallback could be implemented in the user file
   */
}
 8047ed8:	bf00      	nop
 8047eda:	370c      	adds	r7, #12
 8047edc:	46bd      	mov	sp, r7
 8047ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047ee2:	4770      	bx	lr

08047ee4 <HAL_RTCEx_Tamper6EventCallback>:
  * @brief  Tamper 6 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper6EventCallback(RTC_HandleTypeDef *hrtc)
{
 8047ee4:	b480      	push	{r7}
 8047ee6:	b083      	sub	sp, #12
 8047ee8:	af00      	add	r7, sp, #0
 8047eea:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper6EventCallback could be implemented in the user file
   */
}
 8047eec:	bf00      	nop
 8047eee:	370c      	adds	r7, #12
 8047ef0:	46bd      	mov	sp, r7
 8047ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047ef6:	4770      	bx	lr

08047ef8 <HAL_RTCEx_Tamper7EventCallback>:
  * @brief  Tamper 7 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper7EventCallback(RTC_HandleTypeDef *hrtc)
{
 8047ef8:	b480      	push	{r7}
 8047efa:	b083      	sub	sp, #12
 8047efc:	af00      	add	r7, sp, #0
 8047efe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper7EventCallback could be implemented in the user file
   */
}
 8047f00:	bf00      	nop
 8047f02:	370c      	adds	r7, #12
 8047f04:	46bd      	mov	sp, r7
 8047f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f0a:	4770      	bx	lr

08047f0c <HAL_RTCEx_Tamper8EventCallback>:
  * @brief  Tamper 8 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_Tamper8EventCallback(RTC_HandleTypeDef *hrtc)
{
 8047f0c:	b480      	push	{r7}
 8047f0e:	b083      	sub	sp, #12
 8047f10:	af00      	add	r7, sp, #0
 8047f12:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_Tamper8EventCallback could be implemented in the user file
   */
}
 8047f14:	bf00      	nop
 8047f16:	370c      	adds	r7, #12
 8047f18:	46bd      	mov	sp, r7
 8047f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f1e:	4770      	bx	lr

08047f20 <HAL_RTCEx_InternalTamper1EventCallback>:
  * @brief  Internal Tamper 1 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 8047f20:	b480      	push	{r7}
 8047f22:	b083      	sub	sp, #12
 8047f24:	af00      	add	r7, sp, #0
 8047f26:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper1EventCallback could be implemented in the user file
   */
}
 8047f28:	bf00      	nop
 8047f2a:	370c      	adds	r7, #12
 8047f2c:	46bd      	mov	sp, r7
 8047f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f32:	4770      	bx	lr

08047f34 <HAL_RTCEx_InternalTamper2EventCallback>:
  * @brief  Internal Tamper 2 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 8047f34:	b480      	push	{r7}
 8047f36:	b083      	sub	sp, #12
 8047f38:	af00      	add	r7, sp, #0
 8047f3a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper2EventCallback could be implemented in the user file
   */
}
 8047f3c:	bf00      	nop
 8047f3e:	370c      	adds	r7, #12
 8047f40:	46bd      	mov	sp, r7
 8047f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f46:	4770      	bx	lr

08047f48 <HAL_RTCEx_InternalTamper3EventCallback>:
  * @brief  Internal Tamper 3 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 8047f48:	b480      	push	{r7}
 8047f4a:	b083      	sub	sp, #12
 8047f4c:	af00      	add	r7, sp, #0
 8047f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper3EventCallback could be implemented in the user file
   */
}
 8047f50:	bf00      	nop
 8047f52:	370c      	adds	r7, #12
 8047f54:	46bd      	mov	sp, r7
 8047f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f5a:	4770      	bx	lr

08047f5c <HAL_RTCEx_InternalTamper5EventCallback>:
  * @brief  Internal Tamper 5 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper5EventCallback(RTC_HandleTypeDef *hrtc)
{
 8047f5c:	b480      	push	{r7}
 8047f5e:	b083      	sub	sp, #12
 8047f60:	af00      	add	r7, sp, #0
 8047f62:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper5EventCallback could be implemented in the user file
   */
}
 8047f64:	bf00      	nop
 8047f66:	370c      	adds	r7, #12
 8047f68:	46bd      	mov	sp, r7
 8047f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f6e:	4770      	bx	lr

08047f70 <HAL_RTCEx_InternalTamper8EventCallback>:
  * @brief  Internal Tamper 8 callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_InternalTamper8EventCallback(RTC_HandleTypeDef *hrtc)
{
 8047f70:	b480      	push	{r7}
 8047f72:	b083      	sub	sp, #12
 8047f74:	af00      	add	r7, sp, #0
 8047f76:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_InternalTamper8EventCallback could be implemented in the user file
   */
}
 8047f78:	bf00      	nop
 8047f7a:	370c      	adds	r7, #12
 8047f7c:	46bd      	mov	sp, r7
 8047f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f82:	4770      	bx	lr

08047f84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8047f84:	b580      	push	{r7, lr}
 8047f86:	b084      	sub	sp, #16
 8047f88:	af00      	add	r7, sp, #0
 8047f8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8047f8c:	687b      	ldr	r3, [r7, #4]
 8047f8e:	2b00      	cmp	r3, #0
 8047f90:	d101      	bne.n	8047f96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8047f92:	2301      	movs	r3, #1
 8047f94:	e0b9      	b.n	804810a <HAL_SPI_Init+0x186>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8047f96:	687b      	ldr	r3, [r7, #4]
 8047f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047f9a:	2b00      	cmp	r3, #0
 8047f9c:	d108      	bne.n	8047fb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8047f9e:	687b      	ldr	r3, [r7, #4]
 8047fa0:	685b      	ldr	r3, [r3, #4]
 8047fa2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8047fa6:	d009      	beq.n	8047fbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8047fa8:	687b      	ldr	r3, [r7, #4]
 8047faa:	2200      	movs	r2, #0
 8047fac:	61da      	str	r2, [r3, #28]
 8047fae:	e005      	b.n	8047fbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8047fb0:	687b      	ldr	r3, [r7, #4]
 8047fb2:	2200      	movs	r2, #0
 8047fb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8047fb6:	687b      	ldr	r3, [r7, #4]
 8047fb8:	2200      	movs	r2, #0
 8047fba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8047fbc:	687b      	ldr	r3, [r7, #4]
 8047fbe:	2200      	movs	r2, #0
 8047fc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8047fc2:	687b      	ldr	r3, [r7, #4]
 8047fc4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8047fc8:	b2db      	uxtb	r3, r3
 8047fca:	2b00      	cmp	r3, #0
 8047fcc:	d12a      	bne.n	8048024 <HAL_SPI_Init+0xa0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8047fce:	687b      	ldr	r3, [r7, #4]
 8047fd0:	2200      	movs	r2, #0
 8047fd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8047fd6:	687b      	ldr	r3, [r7, #4]
 8047fd8:	4a4e      	ldr	r2, [pc, #312]	; (8048114 <HAL_SPI_Init+0x190>)
 8047fda:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8047fdc:	687b      	ldr	r3, [r7, #4]
 8047fde:	4a4e      	ldr	r2, [pc, #312]	; (8048118 <HAL_SPI_Init+0x194>)
 8047fe0:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8047fe2:	687b      	ldr	r3, [r7, #4]
 8047fe4:	4a4d      	ldr	r2, [pc, #308]	; (804811c <HAL_SPI_Init+0x198>)
 8047fe6:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8047fe8:	687b      	ldr	r3, [r7, #4]
 8047fea:	4a4d      	ldr	r2, [pc, #308]	; (8048120 <HAL_SPI_Init+0x19c>)
 8047fec:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8047fee:	687b      	ldr	r3, [r7, #4]
 8047ff0:	4a4c      	ldr	r2, [pc, #304]	; (8048124 <HAL_SPI_Init+0x1a0>)
 8047ff2:	675a      	str	r2, [r3, #116]	; 0x74
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8047ff4:	687b      	ldr	r3, [r7, #4]
 8047ff6:	4a4c      	ldr	r2, [pc, #304]	; (8048128 <HAL_SPI_Init+0x1a4>)
 8047ff8:	679a      	str	r2, [r3, #120]	; 0x78
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8047ffa:	687b      	ldr	r3, [r7, #4]
 8047ffc:	4a4b      	ldr	r2, [pc, #300]	; (804812c <HAL_SPI_Init+0x1a8>)
 8047ffe:	67da      	str	r2, [r3, #124]	; 0x7c
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8048000:	687b      	ldr	r3, [r7, #4]
 8048002:	4a4b      	ldr	r2, [pc, #300]	; (8048130 <HAL_SPI_Init+0x1ac>)
 8048004:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (hspi->MspInitCallback == NULL)
 8048008:	687b      	ldr	r3, [r7, #4]
 804800a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804800e:	2b00      	cmp	r3, #0
 8048010:	d103      	bne.n	804801a <HAL_SPI_Init+0x96>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8048012:	687b      	ldr	r3, [r7, #4]
 8048014:	4a47      	ldr	r2, [pc, #284]	; (8048134 <HAL_SPI_Init+0x1b0>)
 8048016:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 804801a:	687b      	ldr	r3, [r7, #4]
 804801c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8048020:	6878      	ldr	r0, [r7, #4]
 8048022:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8048024:	687b      	ldr	r3, [r7, #4]
 8048026:	2202      	movs	r2, #2
 8048028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 804802c:	687b      	ldr	r3, [r7, #4]
 804802e:	681b      	ldr	r3, [r3, #0]
 8048030:	681a      	ldr	r2, [r3, #0]
 8048032:	687b      	ldr	r3, [r7, #4]
 8048034:	681b      	ldr	r3, [r3, #0]
 8048036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 804803a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 804803c:	687b      	ldr	r3, [r7, #4]
 804803e:	68db      	ldr	r3, [r3, #12]
 8048040:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8048044:	d902      	bls.n	804804c <HAL_SPI_Init+0xc8>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8048046:	2300      	movs	r3, #0
 8048048:	60fb      	str	r3, [r7, #12]
 804804a:	e002      	b.n	8048052 <HAL_SPI_Init+0xce>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 804804c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8048050:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8048052:	687b      	ldr	r3, [r7, #4]
 8048054:	68db      	ldr	r3, [r3, #12]
 8048056:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 804805a:	d007      	beq.n	804806c <HAL_SPI_Init+0xe8>
 804805c:	687b      	ldr	r3, [r7, #4]
 804805e:	68db      	ldr	r3, [r3, #12]
 8048060:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8048064:	d002      	beq.n	804806c <HAL_SPI_Init+0xe8>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8048066:	687b      	ldr	r3, [r7, #4]
 8048068:	2200      	movs	r2, #0
 804806a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 804806c:	687b      	ldr	r3, [r7, #4]
 804806e:	685b      	ldr	r3, [r3, #4]
 8048070:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8048074:	687b      	ldr	r3, [r7, #4]
 8048076:	689b      	ldr	r3, [r3, #8]
 8048078:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 804807c:	431a      	orrs	r2, r3
 804807e:	687b      	ldr	r3, [r7, #4]
 8048080:	691b      	ldr	r3, [r3, #16]
 8048082:	f003 0302 	and.w	r3, r3, #2
 8048086:	431a      	orrs	r2, r3
 8048088:	687b      	ldr	r3, [r7, #4]
 804808a:	695b      	ldr	r3, [r3, #20]
 804808c:	f003 0301 	and.w	r3, r3, #1
 8048090:	431a      	orrs	r2, r3
 8048092:	687b      	ldr	r3, [r7, #4]
 8048094:	699b      	ldr	r3, [r3, #24]
 8048096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804809a:	431a      	orrs	r2, r3
 804809c:	687b      	ldr	r3, [r7, #4]
 804809e:	69db      	ldr	r3, [r3, #28]
 80480a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80480a4:	431a      	orrs	r2, r3
 80480a6:	687b      	ldr	r3, [r7, #4]
 80480a8:	6a1b      	ldr	r3, [r3, #32]
 80480aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80480ae:	ea42 0103 	orr.w	r1, r2, r3
 80480b2:	687b      	ldr	r3, [r7, #4]
 80480b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80480b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80480ba:	687b      	ldr	r3, [r7, #4]
 80480bc:	681b      	ldr	r3, [r3, #0]
 80480be:	430a      	orrs	r2, r1
 80480c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80480c2:	687b      	ldr	r3, [r7, #4]
 80480c4:	699b      	ldr	r3, [r3, #24]
 80480c6:	0c1b      	lsrs	r3, r3, #16
 80480c8:	f003 0204 	and.w	r2, r3, #4
 80480cc:	687b      	ldr	r3, [r7, #4]
 80480ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80480d0:	f003 0310 	and.w	r3, r3, #16
 80480d4:	431a      	orrs	r2, r3
 80480d6:	687b      	ldr	r3, [r7, #4]
 80480d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80480da:	f003 0308 	and.w	r3, r3, #8
 80480de:	431a      	orrs	r2, r3
 80480e0:	687b      	ldr	r3, [r7, #4]
 80480e2:	68db      	ldr	r3, [r3, #12]
 80480e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80480e8:	ea42 0103 	orr.w	r1, r2, r3
 80480ec:	68fb      	ldr	r3, [r7, #12]
 80480ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80480f2:	687b      	ldr	r3, [r7, #4]
 80480f4:	681b      	ldr	r3, [r3, #0]
 80480f6:	430a      	orrs	r2, r1
 80480f8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80480fa:	687b      	ldr	r3, [r7, #4]
 80480fc:	2200      	movs	r2, #0
 80480fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8048100:	687b      	ldr	r3, [r7, #4]
 8048102:	2201      	movs	r2, #1
 8048104:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8048108:	2300      	movs	r3, #0
}
 804810a:	4618      	mov	r0, r3
 804810c:	3710      	adds	r7, #16
 804810e:	46bd      	mov	sp, r7
 8048110:	bd80      	pop	{r7, pc}
 8048112:	bf00      	nop
 8048114:	08048339 	.word	0x08048339
 8048118:	0804834d 	.word	0x0804834d
 804811c:	08048361 	.word	0x08048361
 8048120:	08048375 	.word	0x08048375
 8048124:	08048389 	.word	0x08048389
 8048128:	0804839d 	.word	0x0804839d
 804812c:	080483b1 	.word	0x080483b1
 8048130:	080483c5 	.word	0x080483c5
 8048134:	08041181 	.word	0x08041181

08048138 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8048138:	b580      	push	{r7, lr}
 804813a:	b088      	sub	sp, #32
 804813c:	af00      	add	r7, sp, #0
 804813e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8048140:	687b      	ldr	r3, [r7, #4]
 8048142:	681b      	ldr	r3, [r3, #0]
 8048144:	685b      	ldr	r3, [r3, #4]
 8048146:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8048148:	687b      	ldr	r3, [r7, #4]
 804814a:	681b      	ldr	r3, [r3, #0]
 804814c:	689b      	ldr	r3, [r3, #8]
 804814e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8048150:	69bb      	ldr	r3, [r7, #24]
 8048152:	099b      	lsrs	r3, r3, #6
 8048154:	f003 0301 	and.w	r3, r3, #1
 8048158:	2b00      	cmp	r3, #0
 804815a:	d10f      	bne.n	804817c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 804815c:	69bb      	ldr	r3, [r7, #24]
 804815e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8048162:	2b00      	cmp	r3, #0
 8048164:	d00a      	beq.n	804817c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8048166:	69fb      	ldr	r3, [r7, #28]
 8048168:	099b      	lsrs	r3, r3, #6
 804816a:	f003 0301 	and.w	r3, r3, #1
 804816e:	2b00      	cmp	r3, #0
 8048170:	d004      	beq.n	804817c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8048172:	687b      	ldr	r3, [r7, #4]
 8048174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048176:	6878      	ldr	r0, [r7, #4]
 8048178:	4798      	blx	r3
    return;
 804817a:	e0d8      	b.n	804832e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 804817c:	69bb      	ldr	r3, [r7, #24]
 804817e:	085b      	lsrs	r3, r3, #1
 8048180:	f003 0301 	and.w	r3, r3, #1
 8048184:	2b00      	cmp	r3, #0
 8048186:	d00a      	beq.n	804819e <HAL_SPI_IRQHandler+0x66>
 8048188:	69fb      	ldr	r3, [r7, #28]
 804818a:	09db      	lsrs	r3, r3, #7
 804818c:	f003 0301 	and.w	r3, r3, #1
 8048190:	2b00      	cmp	r3, #0
 8048192:	d004      	beq.n	804819e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8048194:	687b      	ldr	r3, [r7, #4]
 8048196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8048198:	6878      	ldr	r0, [r7, #4]
 804819a:	4798      	blx	r3
    return;
 804819c:	e0c7      	b.n	804832e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 804819e:	69bb      	ldr	r3, [r7, #24]
 80481a0:	095b      	lsrs	r3, r3, #5
 80481a2:	f003 0301 	and.w	r3, r3, #1
 80481a6:	2b00      	cmp	r3, #0
 80481a8:	d10c      	bne.n	80481c4 <HAL_SPI_IRQHandler+0x8c>
 80481aa:	69bb      	ldr	r3, [r7, #24]
 80481ac:	099b      	lsrs	r3, r3, #6
 80481ae:	f003 0301 	and.w	r3, r3, #1
 80481b2:	2b00      	cmp	r3, #0
 80481b4:	d106      	bne.n	80481c4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80481b6:	69bb      	ldr	r3, [r7, #24]
 80481b8:	0a1b      	lsrs	r3, r3, #8
 80481ba:	f003 0301 	and.w	r3, r3, #1
 80481be:	2b00      	cmp	r3, #0
 80481c0:	f000 80b5 	beq.w	804832e <HAL_SPI_IRQHandler+0x1f6>
 80481c4:	69fb      	ldr	r3, [r7, #28]
 80481c6:	095b      	lsrs	r3, r3, #5
 80481c8:	f003 0301 	and.w	r3, r3, #1
 80481cc:	2b00      	cmp	r3, #0
 80481ce:	f000 80ae 	beq.w	804832e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80481d2:	69bb      	ldr	r3, [r7, #24]
 80481d4:	099b      	lsrs	r3, r3, #6
 80481d6:	f003 0301 	and.w	r3, r3, #1
 80481da:	2b00      	cmp	r3, #0
 80481dc:	d023      	beq.n	8048226 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80481de:	687b      	ldr	r3, [r7, #4]
 80481e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80481e4:	b2db      	uxtb	r3, r3
 80481e6:	2b03      	cmp	r3, #3
 80481e8:	d011      	beq.n	804820e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80481ea:	687b      	ldr	r3, [r7, #4]
 80481ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80481ee:	f043 0204 	orr.w	r2, r3, #4
 80481f2:	687b      	ldr	r3, [r7, #4]
 80481f4:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80481f6:	2300      	movs	r3, #0
 80481f8:	617b      	str	r3, [r7, #20]
 80481fa:	687b      	ldr	r3, [r7, #4]
 80481fc:	681b      	ldr	r3, [r3, #0]
 80481fe:	68db      	ldr	r3, [r3, #12]
 8048200:	617b      	str	r3, [r7, #20]
 8048202:	687b      	ldr	r3, [r7, #4]
 8048204:	681b      	ldr	r3, [r3, #0]
 8048206:	689b      	ldr	r3, [r3, #8]
 8048208:	617b      	str	r3, [r7, #20]
 804820a:	697b      	ldr	r3, [r7, #20]
 804820c:	e00b      	b.n	8048226 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 804820e:	2300      	movs	r3, #0
 8048210:	613b      	str	r3, [r7, #16]
 8048212:	687b      	ldr	r3, [r7, #4]
 8048214:	681b      	ldr	r3, [r3, #0]
 8048216:	68db      	ldr	r3, [r3, #12]
 8048218:	613b      	str	r3, [r7, #16]
 804821a:	687b      	ldr	r3, [r7, #4]
 804821c:	681b      	ldr	r3, [r3, #0]
 804821e:	689b      	ldr	r3, [r3, #8]
 8048220:	613b      	str	r3, [r7, #16]
 8048222:	693b      	ldr	r3, [r7, #16]
        return;
 8048224:	e083      	b.n	804832e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8048226:	69bb      	ldr	r3, [r7, #24]
 8048228:	095b      	lsrs	r3, r3, #5
 804822a:	f003 0301 	and.w	r3, r3, #1
 804822e:	2b00      	cmp	r3, #0
 8048230:	d014      	beq.n	804825c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8048232:	687b      	ldr	r3, [r7, #4]
 8048234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8048236:	f043 0201 	orr.w	r2, r3, #1
 804823a:	687b      	ldr	r3, [r7, #4]
 804823c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 804823e:	2300      	movs	r3, #0
 8048240:	60fb      	str	r3, [r7, #12]
 8048242:	687b      	ldr	r3, [r7, #4]
 8048244:	681b      	ldr	r3, [r3, #0]
 8048246:	689b      	ldr	r3, [r3, #8]
 8048248:	60fb      	str	r3, [r7, #12]
 804824a:	687b      	ldr	r3, [r7, #4]
 804824c:	681b      	ldr	r3, [r3, #0]
 804824e:	681a      	ldr	r2, [r3, #0]
 8048250:	687b      	ldr	r3, [r7, #4]
 8048252:	681b      	ldr	r3, [r3, #0]
 8048254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8048258:	601a      	str	r2, [r3, #0]
 804825a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 804825c:	69bb      	ldr	r3, [r7, #24]
 804825e:	0a1b      	lsrs	r3, r3, #8
 8048260:	f003 0301 	and.w	r3, r3, #1
 8048264:	2b00      	cmp	r3, #0
 8048266:	d00c      	beq.n	8048282 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8048268:	687b      	ldr	r3, [r7, #4]
 804826a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804826c:	f043 0208 	orr.w	r2, r3, #8
 8048270:	687b      	ldr	r3, [r7, #4]
 8048272:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8048274:	2300      	movs	r3, #0
 8048276:	60bb      	str	r3, [r7, #8]
 8048278:	687b      	ldr	r3, [r7, #4]
 804827a:	681b      	ldr	r3, [r3, #0]
 804827c:	689b      	ldr	r3, [r3, #8]
 804827e:	60bb      	str	r3, [r7, #8]
 8048280:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8048282:	687b      	ldr	r3, [r7, #4]
 8048284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8048286:	2b00      	cmp	r3, #0
 8048288:	d050      	beq.n	804832c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 804828a:	687b      	ldr	r3, [r7, #4]
 804828c:	681b      	ldr	r3, [r3, #0]
 804828e:	685a      	ldr	r2, [r3, #4]
 8048290:	687b      	ldr	r3, [r7, #4]
 8048292:	681b      	ldr	r3, [r3, #0]
 8048294:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8048298:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 804829a:	687b      	ldr	r3, [r7, #4]
 804829c:	2201      	movs	r2, #1
 804829e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80482a2:	69fb      	ldr	r3, [r7, #28]
 80482a4:	f003 0302 	and.w	r3, r3, #2
 80482a8:	2b00      	cmp	r3, #0
 80482aa:	d104      	bne.n	80482b6 <HAL_SPI_IRQHandler+0x17e>
 80482ac:	69fb      	ldr	r3, [r7, #28]
 80482ae:	f003 0301 	and.w	r3, r3, #1
 80482b2:	2b00      	cmp	r3, #0
 80482b4:	d034      	beq.n	8048320 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80482b6:	687b      	ldr	r3, [r7, #4]
 80482b8:	681b      	ldr	r3, [r3, #0]
 80482ba:	685a      	ldr	r2, [r3, #4]
 80482bc:	687b      	ldr	r3, [r7, #4]
 80482be:	681b      	ldr	r3, [r3, #0]
 80482c0:	f022 0203 	bic.w	r2, r2, #3
 80482c4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80482c6:	687b      	ldr	r3, [r7, #4]
 80482c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80482ca:	2b00      	cmp	r3, #0
 80482cc:	d011      	beq.n	80482f2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80482ce:	687b      	ldr	r3, [r7, #4]
 80482d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80482d2:	4a18      	ldr	r2, [pc, #96]	; (8048334 <HAL_SPI_IRQHandler+0x1fc>)
 80482d4:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80482d6:	687b      	ldr	r3, [r7, #4]
 80482d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80482da:	4618      	mov	r0, r3
 80482dc:	f7fc f9d8 	bl	8044690 <HAL_DMA_Abort_IT>
 80482e0:	4603      	mov	r3, r0
 80482e2:	2b00      	cmp	r3, #0
 80482e4:	d005      	beq.n	80482f2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80482e6:	687b      	ldr	r3, [r7, #4]
 80482e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80482ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80482ee:	687b      	ldr	r3, [r7, #4]
 80482f0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80482f2:	687b      	ldr	r3, [r7, #4]
 80482f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80482f6:	2b00      	cmp	r3, #0
 80482f8:	d017      	beq.n	804832a <HAL_SPI_IRQHandler+0x1f2>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80482fa:	687b      	ldr	r3, [r7, #4]
 80482fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80482fe:	4a0d      	ldr	r2, [pc, #52]	; (8048334 <HAL_SPI_IRQHandler+0x1fc>)
 8048300:	641a      	str	r2, [r3, #64]	; 0x40
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8048302:	687b      	ldr	r3, [r7, #4]
 8048304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8048306:	4618      	mov	r0, r3
 8048308:	f7fc f9c2 	bl	8044690 <HAL_DMA_Abort_IT>
 804830c:	4603      	mov	r3, r0
 804830e:	2b00      	cmp	r3, #0
 8048310:	d00b      	beq.n	804832a <HAL_SPI_IRQHandler+0x1f2>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8048312:	687b      	ldr	r3, [r7, #4]
 8048314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8048316:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 804831a:	687b      	ldr	r3, [r7, #4]
 804831c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 804831e:	e004      	b.n	804832a <HAL_SPI_IRQHandler+0x1f2>
      }
      else
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
 8048320:	687b      	ldr	r3, [r7, #4]
 8048322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8048324:	6878      	ldr	r0, [r7, #4]
 8048326:	4798      	blx	r3
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8048328:	e000      	b.n	804832c <HAL_SPI_IRQHandler+0x1f4>
        if (hspi->hdmatx != NULL)
 804832a:	bf00      	nop
    return;
 804832c:	bf00      	nop
  }
}
 804832e:	3720      	adds	r7, #32
 8048330:	46bd      	mov	sp, r7
 8048332:	bd80      	pop	{r7, pc}
 8048334:	080483d9 	.word	0x080483d9

08048338 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8048338:	b480      	push	{r7}
 804833a:	b083      	sub	sp, #12
 804833c:	af00      	add	r7, sp, #0
 804833e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8048340:	bf00      	nop
 8048342:	370c      	adds	r7, #12
 8048344:	46bd      	mov	sp, r7
 8048346:	f85d 7b04 	ldr.w	r7, [sp], #4
 804834a:	4770      	bx	lr

0804834c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 804834c:	b480      	push	{r7}
 804834e:	b083      	sub	sp, #12
 8048350:	af00      	add	r7, sp, #0
 8048352:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8048354:	bf00      	nop
 8048356:	370c      	adds	r7, #12
 8048358:	46bd      	mov	sp, r7
 804835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804835e:	4770      	bx	lr

08048360 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8048360:	b480      	push	{r7}
 8048362:	b083      	sub	sp, #12
 8048364:	af00      	add	r7, sp, #0
 8048366:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8048368:	bf00      	nop
 804836a:	370c      	adds	r7, #12
 804836c:	46bd      	mov	sp, r7
 804836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048372:	4770      	bx	lr

08048374 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8048374:	b480      	push	{r7}
 8048376:	b083      	sub	sp, #12
 8048378:	af00      	add	r7, sp, #0
 804837a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 804837c:	bf00      	nop
 804837e:	370c      	adds	r7, #12
 8048380:	46bd      	mov	sp, r7
 8048382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048386:	4770      	bx	lr

08048388 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8048388:	b480      	push	{r7}
 804838a:	b083      	sub	sp, #12
 804838c:	af00      	add	r7, sp, #0
 804838e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8048390:	bf00      	nop
 8048392:	370c      	adds	r7, #12
 8048394:	46bd      	mov	sp, r7
 8048396:	f85d 7b04 	ldr.w	r7, [sp], #4
 804839a:	4770      	bx	lr

0804839c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 804839c:	b480      	push	{r7}
 804839e:	b083      	sub	sp, #12
 80483a0:	af00      	add	r7, sp, #0
 80483a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80483a4:	bf00      	nop
 80483a6:	370c      	adds	r7, #12
 80483a8:	46bd      	mov	sp, r7
 80483aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483ae:	4770      	bx	lr

080483b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80483b0:	b480      	push	{r7}
 80483b2:	b083      	sub	sp, #12
 80483b4:	af00      	add	r7, sp, #0
 80483b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80483b8:	bf00      	nop
 80483ba:	370c      	adds	r7, #12
 80483bc:	46bd      	mov	sp, r7
 80483be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483c2:	4770      	bx	lr

080483c4 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 80483c4:	b480      	push	{r7}
 80483c6:	b083      	sub	sp, #12
 80483c8:	af00      	add	r7, sp, #0
 80483ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 80483cc:	bf00      	nop
 80483ce:	370c      	adds	r7, #12
 80483d0:	46bd      	mov	sp, r7
 80483d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80483d6:	4770      	bx	lr

080483d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80483d8:	b580      	push	{r7, lr}
 80483da:	b084      	sub	sp, #16
 80483dc:	af00      	add	r7, sp, #0
 80483de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80483e0:	687b      	ldr	r3, [r7, #4]
 80483e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80483e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80483e6:	68fb      	ldr	r3, [r7, #12]
 80483e8:	2200      	movs	r2, #0
 80483ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80483ee:	68fb      	ldr	r3, [r7, #12]
 80483f0:	2200      	movs	r2, #0
 80483f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
 80483f4:	68fb      	ldr	r3, [r7, #12]
 80483f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80483f8:	68f8      	ldr	r0, [r7, #12]
 80483fa:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80483fc:	bf00      	nop
 80483fe:	3710      	adds	r7, #16
 8048400:	46bd      	mov	sp, r7
 8048402:	bd80      	pop	{r7, pc}

08048404 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8048404:	b580      	push	{r7, lr}
 8048406:	b082      	sub	sp, #8
 8048408:	af00      	add	r7, sp, #0
 804840a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 804840c:	687b      	ldr	r3, [r7, #4]
 804840e:	2b00      	cmp	r3, #0
 8048410:	d101      	bne.n	8048416 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8048412:	2301      	movs	r3, #1
 8048414:	e054      	b.n	80484c0 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8048416:	687b      	ldr	r3, [r7, #4]
 8048418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804841c:	b2db      	uxtb	r3, r3
 804841e:	2b00      	cmp	r3, #0
 8048420:	d111      	bne.n	8048446 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8048422:	687b      	ldr	r3, [r7, #4]
 8048424:	2200      	movs	r2, #0
 8048426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 804842a:	6878      	ldr	r0, [r7, #4]
 804842c:	f000 fbb2 	bl	8048b94 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8048430:	687b      	ldr	r3, [r7, #4]
 8048432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048434:	2b00      	cmp	r3, #0
 8048436:	d102      	bne.n	804843e <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8048438:	687b      	ldr	r3, [r7, #4]
 804843a:	4a23      	ldr	r2, [pc, #140]	; (80484c8 <HAL_TIM_Base_Init+0xc4>)
 804843c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 804843e:	687b      	ldr	r3, [r7, #4]
 8048440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8048442:	6878      	ldr	r0, [r7, #4]
 8048444:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8048446:	687b      	ldr	r3, [r7, #4]
 8048448:	2202      	movs	r2, #2
 804844a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 804844e:	687b      	ldr	r3, [r7, #4]
 8048450:	681a      	ldr	r2, [r3, #0]
 8048452:	687b      	ldr	r3, [r7, #4]
 8048454:	3304      	adds	r3, #4
 8048456:	4619      	mov	r1, r3
 8048458:	4610      	mov	r0, r2
 804845a:	f000 fb01 	bl	8048a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 804845e:	687b      	ldr	r3, [r7, #4]
 8048460:	2201      	movs	r2, #1
 8048462:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8048466:	687b      	ldr	r3, [r7, #4]
 8048468:	2201      	movs	r2, #1
 804846a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 804846e:	687b      	ldr	r3, [r7, #4]
 8048470:	2201      	movs	r2, #1
 8048472:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8048476:	687b      	ldr	r3, [r7, #4]
 8048478:	2201      	movs	r2, #1
 804847a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 804847e:	687b      	ldr	r3, [r7, #4]
 8048480:	2201      	movs	r2, #1
 8048482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8048486:	687b      	ldr	r3, [r7, #4]
 8048488:	2201      	movs	r2, #1
 804848a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 804848e:	687b      	ldr	r3, [r7, #4]
 8048490:	2201      	movs	r2, #1
 8048492:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8048496:	687b      	ldr	r3, [r7, #4]
 8048498:	2201      	movs	r2, #1
 804849a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 804849e:	687b      	ldr	r3, [r7, #4]
 80484a0:	2201      	movs	r2, #1
 80484a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80484a6:	687b      	ldr	r3, [r7, #4]
 80484a8:	2201      	movs	r2, #1
 80484aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80484ae:	687b      	ldr	r3, [r7, #4]
 80484b0:	2201      	movs	r2, #1
 80484b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80484b6:	687b      	ldr	r3, [r7, #4]
 80484b8:	2201      	movs	r2, #1
 80484ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80484be:	2300      	movs	r3, #0
}
 80484c0:	4618      	mov	r0, r3
 80484c2:	3708      	adds	r7, #8
 80484c4:	46bd      	mov	sp, r7
 80484c6:	bd80      	pop	{r7, pc}
 80484c8:	080484cd 	.word	0x080484cd

080484cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80484cc:	b480      	push	{r7}
 80484ce:	b083      	sub	sp, #12
 80484d0:	af00      	add	r7, sp, #0
 80484d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80484d4:	bf00      	nop
 80484d6:	370c      	adds	r7, #12
 80484d8:	46bd      	mov	sp, r7
 80484da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80484de:	4770      	bx	lr

080484e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80484e0:	b480      	push	{r7}
 80484e2:	b085      	sub	sp, #20
 80484e4:	af00      	add	r7, sp, #0
 80484e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80484e8:	687b      	ldr	r3, [r7, #4]
 80484ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80484ee:	b2db      	uxtb	r3, r3
 80484f0:	2b01      	cmp	r3, #1
 80484f2:	d001      	beq.n	80484f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80484f4:	2301      	movs	r3, #1
 80484f6:	e04f      	b.n	8048598 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80484f8:	687b      	ldr	r3, [r7, #4]
 80484fa:	2202      	movs	r2, #2
 80484fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8048500:	687b      	ldr	r3, [r7, #4]
 8048502:	681b      	ldr	r3, [r3, #0]
 8048504:	68da      	ldr	r2, [r3, #12]
 8048506:	687b      	ldr	r3, [r7, #4]
 8048508:	681b      	ldr	r3, [r3, #0]
 804850a:	f042 0201 	orr.w	r2, r2, #1
 804850e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8048510:	687b      	ldr	r3, [r7, #4]
 8048512:	681b      	ldr	r3, [r3, #0]
 8048514:	4a23      	ldr	r2, [pc, #140]	; (80485a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8048516:	4293      	cmp	r3, r2
 8048518:	d01d      	beq.n	8048556 <HAL_TIM_Base_Start_IT+0x76>
 804851a:	687b      	ldr	r3, [r7, #4]
 804851c:	681b      	ldr	r3, [r3, #0]
 804851e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048522:	d018      	beq.n	8048556 <HAL_TIM_Base_Start_IT+0x76>
 8048524:	687b      	ldr	r3, [r7, #4]
 8048526:	681b      	ldr	r3, [r3, #0]
 8048528:	4a1f      	ldr	r2, [pc, #124]	; (80485a8 <HAL_TIM_Base_Start_IT+0xc8>)
 804852a:	4293      	cmp	r3, r2
 804852c:	d013      	beq.n	8048556 <HAL_TIM_Base_Start_IT+0x76>
 804852e:	687b      	ldr	r3, [r7, #4]
 8048530:	681b      	ldr	r3, [r3, #0]
 8048532:	4a1e      	ldr	r2, [pc, #120]	; (80485ac <HAL_TIM_Base_Start_IT+0xcc>)
 8048534:	4293      	cmp	r3, r2
 8048536:	d00e      	beq.n	8048556 <HAL_TIM_Base_Start_IT+0x76>
 8048538:	687b      	ldr	r3, [r7, #4]
 804853a:	681b      	ldr	r3, [r3, #0]
 804853c:	4a1c      	ldr	r2, [pc, #112]	; (80485b0 <HAL_TIM_Base_Start_IT+0xd0>)
 804853e:	4293      	cmp	r3, r2
 8048540:	d009      	beq.n	8048556 <HAL_TIM_Base_Start_IT+0x76>
 8048542:	687b      	ldr	r3, [r7, #4]
 8048544:	681b      	ldr	r3, [r3, #0]
 8048546:	4a1b      	ldr	r2, [pc, #108]	; (80485b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8048548:	4293      	cmp	r3, r2
 804854a:	d004      	beq.n	8048556 <HAL_TIM_Base_Start_IT+0x76>
 804854c:	687b      	ldr	r3, [r7, #4]
 804854e:	681b      	ldr	r3, [r3, #0]
 8048550:	4a19      	ldr	r2, [pc, #100]	; (80485b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8048552:	4293      	cmp	r3, r2
 8048554:	d115      	bne.n	8048582 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8048556:	687b      	ldr	r3, [r7, #4]
 8048558:	681b      	ldr	r3, [r3, #0]
 804855a:	689a      	ldr	r2, [r3, #8]
 804855c:	4b17      	ldr	r3, [pc, #92]	; (80485bc <HAL_TIM_Base_Start_IT+0xdc>)
 804855e:	4013      	ands	r3, r2
 8048560:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8048562:	68fb      	ldr	r3, [r7, #12]
 8048564:	2b06      	cmp	r3, #6
 8048566:	d015      	beq.n	8048594 <HAL_TIM_Base_Start_IT+0xb4>
 8048568:	68fb      	ldr	r3, [r7, #12]
 804856a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804856e:	d011      	beq.n	8048594 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8048570:	687b      	ldr	r3, [r7, #4]
 8048572:	681b      	ldr	r3, [r3, #0]
 8048574:	681a      	ldr	r2, [r3, #0]
 8048576:	687b      	ldr	r3, [r7, #4]
 8048578:	681b      	ldr	r3, [r3, #0]
 804857a:	f042 0201 	orr.w	r2, r2, #1
 804857e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8048580:	e008      	b.n	8048594 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8048582:	687b      	ldr	r3, [r7, #4]
 8048584:	681b      	ldr	r3, [r3, #0]
 8048586:	681a      	ldr	r2, [r3, #0]
 8048588:	687b      	ldr	r3, [r7, #4]
 804858a:	681b      	ldr	r3, [r3, #0]
 804858c:	f042 0201 	orr.w	r2, r2, #1
 8048590:	601a      	str	r2, [r3, #0]
 8048592:	e000      	b.n	8048596 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8048594:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8048596:	2300      	movs	r3, #0
}
 8048598:	4618      	mov	r0, r3
 804859a:	3714      	adds	r7, #20
 804859c:	46bd      	mov	sp, r7
 804859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80485a2:	4770      	bx	lr
 80485a4:	40012c00 	.word	0x40012c00
 80485a8:	40000400 	.word	0x40000400
 80485ac:	40000800 	.word	0x40000800
 80485b0:	40000c00 	.word	0x40000c00
 80485b4:	40013400 	.word	0x40013400
 80485b8:	40014000 	.word	0x40014000
 80485bc:	00010007 	.word	0x00010007

080485c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80485c0:	b580      	push	{r7, lr}
 80485c2:	b086      	sub	sp, #24
 80485c4:	af00      	add	r7, sp, #0
 80485c6:	6078      	str	r0, [r7, #4]
 80485c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80485ca:	687b      	ldr	r3, [r7, #4]
 80485cc:	2b00      	cmp	r3, #0
 80485ce:	d101      	bne.n	80485d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80485d0:	2301      	movs	r3, #1
 80485d2:	e0a2      	b.n	804871a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80485d4:	687b      	ldr	r3, [r7, #4]
 80485d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80485da:	b2db      	uxtb	r3, r3
 80485dc:	2b00      	cmp	r3, #0
 80485de:	d111      	bne.n	8048604 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80485e0:	687b      	ldr	r3, [r7, #4]
 80485e2:	2200      	movs	r2, #0
 80485e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80485e8:	6878      	ldr	r0, [r7, #4]
 80485ea:	f000 fad3 	bl	8048b94 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80485ee:	687b      	ldr	r3, [r7, #4]
 80485f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80485f2:	2b00      	cmp	r3, #0
 80485f4:	d102      	bne.n	80485fc <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80485f6:	687b      	ldr	r3, [r7, #4]
 80485f8:	4a4a      	ldr	r2, [pc, #296]	; (8048724 <HAL_TIM_Encoder_Init+0x164>)
 80485fa:	675a      	str	r2, [r3, #116]	; 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80485fc:	687b      	ldr	r3, [r7, #4]
 80485fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8048600:	6878      	ldr	r0, [r7, #4]
 8048602:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8048604:	687b      	ldr	r3, [r7, #4]
 8048606:	2202      	movs	r2, #2
 8048608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 804860c:	687b      	ldr	r3, [r7, #4]
 804860e:	681b      	ldr	r3, [r3, #0]
 8048610:	689b      	ldr	r3, [r3, #8]
 8048612:	687a      	ldr	r2, [r7, #4]
 8048614:	6812      	ldr	r2, [r2, #0]
 8048616:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 804861a:	f023 0307 	bic.w	r3, r3, #7
 804861e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8048620:	687b      	ldr	r3, [r7, #4]
 8048622:	681a      	ldr	r2, [r3, #0]
 8048624:	687b      	ldr	r3, [r7, #4]
 8048626:	3304      	adds	r3, #4
 8048628:	4619      	mov	r1, r3
 804862a:	4610      	mov	r0, r2
 804862c:	f000 fa18 	bl	8048a60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8048630:	687b      	ldr	r3, [r7, #4]
 8048632:	681b      	ldr	r3, [r3, #0]
 8048634:	689b      	ldr	r3, [r3, #8]
 8048636:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8048638:	687b      	ldr	r3, [r7, #4]
 804863a:	681b      	ldr	r3, [r3, #0]
 804863c:	699b      	ldr	r3, [r3, #24]
 804863e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8048640:	687b      	ldr	r3, [r7, #4]
 8048642:	681b      	ldr	r3, [r3, #0]
 8048644:	6a1b      	ldr	r3, [r3, #32]
 8048646:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8048648:	683b      	ldr	r3, [r7, #0]
 804864a:	681b      	ldr	r3, [r3, #0]
 804864c:	697a      	ldr	r2, [r7, #20]
 804864e:	4313      	orrs	r3, r2
 8048650:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8048652:	693b      	ldr	r3, [r7, #16]
 8048654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8048658:	f023 0303 	bic.w	r3, r3, #3
 804865c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 804865e:	683b      	ldr	r3, [r7, #0]
 8048660:	689a      	ldr	r2, [r3, #8]
 8048662:	683b      	ldr	r3, [r7, #0]
 8048664:	699b      	ldr	r3, [r3, #24]
 8048666:	021b      	lsls	r3, r3, #8
 8048668:	4313      	orrs	r3, r2
 804866a:	693a      	ldr	r2, [r7, #16]
 804866c:	4313      	orrs	r3, r2
 804866e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8048670:	693b      	ldr	r3, [r7, #16]
 8048672:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8048676:	f023 030c 	bic.w	r3, r3, #12
 804867a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 804867c:	693b      	ldr	r3, [r7, #16]
 804867e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8048682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8048686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8048688:	683b      	ldr	r3, [r7, #0]
 804868a:	68da      	ldr	r2, [r3, #12]
 804868c:	683b      	ldr	r3, [r7, #0]
 804868e:	69db      	ldr	r3, [r3, #28]
 8048690:	021b      	lsls	r3, r3, #8
 8048692:	4313      	orrs	r3, r2
 8048694:	693a      	ldr	r2, [r7, #16]
 8048696:	4313      	orrs	r3, r2
 8048698:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 804869a:	683b      	ldr	r3, [r7, #0]
 804869c:	691b      	ldr	r3, [r3, #16]
 804869e:	011a      	lsls	r2, r3, #4
 80486a0:	683b      	ldr	r3, [r7, #0]
 80486a2:	6a1b      	ldr	r3, [r3, #32]
 80486a4:	031b      	lsls	r3, r3, #12
 80486a6:	4313      	orrs	r3, r2
 80486a8:	693a      	ldr	r2, [r7, #16]
 80486aa:	4313      	orrs	r3, r2
 80486ac:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80486ae:	68fb      	ldr	r3, [r7, #12]
 80486b0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80486b4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80486b6:	68fb      	ldr	r3, [r7, #12]
 80486b8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80486bc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80486be:	683b      	ldr	r3, [r7, #0]
 80486c0:	685a      	ldr	r2, [r3, #4]
 80486c2:	683b      	ldr	r3, [r7, #0]
 80486c4:	695b      	ldr	r3, [r3, #20]
 80486c6:	011b      	lsls	r3, r3, #4
 80486c8:	4313      	orrs	r3, r2
 80486ca:	68fa      	ldr	r2, [r7, #12]
 80486cc:	4313      	orrs	r3, r2
 80486ce:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80486d0:	687b      	ldr	r3, [r7, #4]
 80486d2:	681b      	ldr	r3, [r3, #0]
 80486d4:	697a      	ldr	r2, [r7, #20]
 80486d6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80486d8:	687b      	ldr	r3, [r7, #4]
 80486da:	681b      	ldr	r3, [r3, #0]
 80486dc:	693a      	ldr	r2, [r7, #16]
 80486de:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80486e0:	687b      	ldr	r3, [r7, #4]
 80486e2:	681b      	ldr	r3, [r3, #0]
 80486e4:	68fa      	ldr	r2, [r7, #12]
 80486e6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80486e8:	687b      	ldr	r3, [r7, #4]
 80486ea:	2201      	movs	r2, #1
 80486ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80486f0:	687b      	ldr	r3, [r7, #4]
 80486f2:	2201      	movs	r2, #1
 80486f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80486f8:	687b      	ldr	r3, [r7, #4]
 80486fa:	2201      	movs	r2, #1
 80486fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8048700:	687b      	ldr	r3, [r7, #4]
 8048702:	2201      	movs	r2, #1
 8048704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8048708:	687b      	ldr	r3, [r7, #4]
 804870a:	2201      	movs	r2, #1
 804870c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8048710:	687b      	ldr	r3, [r7, #4]
 8048712:	2201      	movs	r2, #1
 8048714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8048718:	2300      	movs	r3, #0
}
 804871a:	4618      	mov	r0, r3
 804871c:	3718      	adds	r7, #24
 804871e:	46bd      	mov	sp, r7
 8048720:	bd80      	pop	{r7, pc}
 8048722:	bf00      	nop
 8048724:	08041761 	.word	0x08041761

08048728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8048728:	b580      	push	{r7, lr}
 804872a:	b082      	sub	sp, #8
 804872c:	af00      	add	r7, sp, #0
 804872e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8048730:	687b      	ldr	r3, [r7, #4]
 8048732:	681b      	ldr	r3, [r3, #0]
 8048734:	691b      	ldr	r3, [r3, #16]
 8048736:	f003 0302 	and.w	r3, r3, #2
 804873a:	2b02      	cmp	r3, #2
 804873c:	d128      	bne.n	8048790 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 804873e:	687b      	ldr	r3, [r7, #4]
 8048740:	681b      	ldr	r3, [r3, #0]
 8048742:	68db      	ldr	r3, [r3, #12]
 8048744:	f003 0302 	and.w	r3, r3, #2
 8048748:	2b02      	cmp	r3, #2
 804874a:	d121      	bne.n	8048790 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 804874c:	687b      	ldr	r3, [r7, #4]
 804874e:	681b      	ldr	r3, [r3, #0]
 8048750:	f06f 0202 	mvn.w	r2, #2
 8048754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8048756:	687b      	ldr	r3, [r7, #4]
 8048758:	2201      	movs	r2, #1
 804875a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 804875c:	687b      	ldr	r3, [r7, #4]
 804875e:	681b      	ldr	r3, [r3, #0]
 8048760:	699b      	ldr	r3, [r3, #24]
 8048762:	f003 0303 	and.w	r3, r3, #3
 8048766:	2b00      	cmp	r3, #0
 8048768:	d005      	beq.n	8048776 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 804876a:	687b      	ldr	r3, [r7, #4]
 804876c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8048770:	6878      	ldr	r0, [r7, #4]
 8048772:	4798      	blx	r3
 8048774:	e009      	b.n	804878a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8048776:	687b      	ldr	r3, [r7, #4]
 8048778:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804877c:	6878      	ldr	r0, [r7, #4]
 804877e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8048780:	687b      	ldr	r3, [r7, #4]
 8048782:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8048786:	6878      	ldr	r0, [r7, #4]
 8048788:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804878a:	687b      	ldr	r3, [r7, #4]
 804878c:	2200      	movs	r2, #0
 804878e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8048790:	687b      	ldr	r3, [r7, #4]
 8048792:	681b      	ldr	r3, [r3, #0]
 8048794:	691b      	ldr	r3, [r3, #16]
 8048796:	f003 0304 	and.w	r3, r3, #4
 804879a:	2b04      	cmp	r3, #4
 804879c:	d128      	bne.n	80487f0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 804879e:	687b      	ldr	r3, [r7, #4]
 80487a0:	681b      	ldr	r3, [r3, #0]
 80487a2:	68db      	ldr	r3, [r3, #12]
 80487a4:	f003 0304 	and.w	r3, r3, #4
 80487a8:	2b04      	cmp	r3, #4
 80487aa:	d121      	bne.n	80487f0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80487ac:	687b      	ldr	r3, [r7, #4]
 80487ae:	681b      	ldr	r3, [r3, #0]
 80487b0:	f06f 0204 	mvn.w	r2, #4
 80487b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80487b6:	687b      	ldr	r3, [r7, #4]
 80487b8:	2202      	movs	r2, #2
 80487ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80487bc:	687b      	ldr	r3, [r7, #4]
 80487be:	681b      	ldr	r3, [r3, #0]
 80487c0:	699b      	ldr	r3, [r3, #24]
 80487c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80487c6:	2b00      	cmp	r3, #0
 80487c8:	d005      	beq.n	80487d6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80487ca:	687b      	ldr	r3, [r7, #4]
 80487cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80487d0:	6878      	ldr	r0, [r7, #4]
 80487d2:	4798      	blx	r3
 80487d4:	e009      	b.n	80487ea <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80487d6:	687b      	ldr	r3, [r7, #4]
 80487d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80487dc:	6878      	ldr	r0, [r7, #4]
 80487de:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80487e0:	687b      	ldr	r3, [r7, #4]
 80487e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80487e6:	6878      	ldr	r0, [r7, #4]
 80487e8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80487ea:	687b      	ldr	r3, [r7, #4]
 80487ec:	2200      	movs	r2, #0
 80487ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80487f0:	687b      	ldr	r3, [r7, #4]
 80487f2:	681b      	ldr	r3, [r3, #0]
 80487f4:	691b      	ldr	r3, [r3, #16]
 80487f6:	f003 0308 	and.w	r3, r3, #8
 80487fa:	2b08      	cmp	r3, #8
 80487fc:	d128      	bne.n	8048850 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80487fe:	687b      	ldr	r3, [r7, #4]
 8048800:	681b      	ldr	r3, [r3, #0]
 8048802:	68db      	ldr	r3, [r3, #12]
 8048804:	f003 0308 	and.w	r3, r3, #8
 8048808:	2b08      	cmp	r3, #8
 804880a:	d121      	bne.n	8048850 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 804880c:	687b      	ldr	r3, [r7, #4]
 804880e:	681b      	ldr	r3, [r3, #0]
 8048810:	f06f 0208 	mvn.w	r2, #8
 8048814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8048816:	687b      	ldr	r3, [r7, #4]
 8048818:	2204      	movs	r2, #4
 804881a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 804881c:	687b      	ldr	r3, [r7, #4]
 804881e:	681b      	ldr	r3, [r3, #0]
 8048820:	69db      	ldr	r3, [r3, #28]
 8048822:	f003 0303 	and.w	r3, r3, #3
 8048826:	2b00      	cmp	r3, #0
 8048828:	d005      	beq.n	8048836 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 804882a:	687b      	ldr	r3, [r7, #4]
 804882c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8048830:	6878      	ldr	r0, [r7, #4]
 8048832:	4798      	blx	r3
 8048834:	e009      	b.n	804884a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8048836:	687b      	ldr	r3, [r7, #4]
 8048838:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804883c:	6878      	ldr	r0, [r7, #4]
 804883e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8048840:	687b      	ldr	r3, [r7, #4]
 8048842:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8048846:	6878      	ldr	r0, [r7, #4]
 8048848:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 804884a:	687b      	ldr	r3, [r7, #4]
 804884c:	2200      	movs	r2, #0
 804884e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8048850:	687b      	ldr	r3, [r7, #4]
 8048852:	681b      	ldr	r3, [r3, #0]
 8048854:	691b      	ldr	r3, [r3, #16]
 8048856:	f003 0310 	and.w	r3, r3, #16
 804885a:	2b10      	cmp	r3, #16
 804885c:	d128      	bne.n	80488b0 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 804885e:	687b      	ldr	r3, [r7, #4]
 8048860:	681b      	ldr	r3, [r3, #0]
 8048862:	68db      	ldr	r3, [r3, #12]
 8048864:	f003 0310 	and.w	r3, r3, #16
 8048868:	2b10      	cmp	r3, #16
 804886a:	d121      	bne.n	80488b0 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 804886c:	687b      	ldr	r3, [r7, #4]
 804886e:	681b      	ldr	r3, [r3, #0]
 8048870:	f06f 0210 	mvn.w	r2, #16
 8048874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8048876:	687b      	ldr	r3, [r7, #4]
 8048878:	2208      	movs	r2, #8
 804887a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 804887c:	687b      	ldr	r3, [r7, #4]
 804887e:	681b      	ldr	r3, [r3, #0]
 8048880:	69db      	ldr	r3, [r3, #28]
 8048882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8048886:	2b00      	cmp	r3, #0
 8048888:	d005      	beq.n	8048896 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 804888a:	687b      	ldr	r3, [r7, #4]
 804888c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8048890:	6878      	ldr	r0, [r7, #4]
 8048892:	4798      	blx	r3
 8048894:	e009      	b.n	80488aa <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8048896:	687b      	ldr	r3, [r7, #4]
 8048898:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804889c:	6878      	ldr	r0, [r7, #4]
 804889e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80488a0:	687b      	ldr	r3, [r7, #4]
 80488a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80488a6:	6878      	ldr	r0, [r7, #4]
 80488a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80488aa:	687b      	ldr	r3, [r7, #4]
 80488ac:	2200      	movs	r2, #0
 80488ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80488b0:	687b      	ldr	r3, [r7, #4]
 80488b2:	681b      	ldr	r3, [r3, #0]
 80488b4:	691b      	ldr	r3, [r3, #16]
 80488b6:	f003 0301 	and.w	r3, r3, #1
 80488ba:	2b01      	cmp	r3, #1
 80488bc:	d110      	bne.n	80488e0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80488be:	687b      	ldr	r3, [r7, #4]
 80488c0:	681b      	ldr	r3, [r3, #0]
 80488c2:	68db      	ldr	r3, [r3, #12]
 80488c4:	f003 0301 	and.w	r3, r3, #1
 80488c8:	2b01      	cmp	r3, #1
 80488ca:	d109      	bne.n	80488e0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80488cc:	687b      	ldr	r3, [r7, #4]
 80488ce:	681b      	ldr	r3, [r3, #0]
 80488d0:	f06f 0201 	mvn.w	r2, #1
 80488d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80488d6:	687b      	ldr	r3, [r7, #4]
 80488d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80488dc:	6878      	ldr	r0, [r7, #4]
 80488de:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80488e0:	687b      	ldr	r3, [r7, #4]
 80488e2:	681b      	ldr	r3, [r3, #0]
 80488e4:	691b      	ldr	r3, [r3, #16]
 80488e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80488ea:	2b80      	cmp	r3, #128	; 0x80
 80488ec:	d110      	bne.n	8048910 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80488ee:	687b      	ldr	r3, [r7, #4]
 80488f0:	681b      	ldr	r3, [r3, #0]
 80488f2:	68db      	ldr	r3, [r3, #12]
 80488f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80488f8:	2b80      	cmp	r3, #128	; 0x80
 80488fa:	d109      	bne.n	8048910 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80488fc:	687b      	ldr	r3, [r7, #4]
 80488fe:	681b      	ldr	r3, [r3, #0]
 8048900:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8048904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8048906:	687b      	ldr	r3, [r7, #4]
 8048908:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 804890c:	6878      	ldr	r0, [r7, #4]
 804890e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8048910:	687b      	ldr	r3, [r7, #4]
 8048912:	681b      	ldr	r3, [r3, #0]
 8048914:	691b      	ldr	r3, [r3, #16]
 8048916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 804891a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804891e:	d110      	bne.n	8048942 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8048920:	687b      	ldr	r3, [r7, #4]
 8048922:	681b      	ldr	r3, [r3, #0]
 8048924:	68db      	ldr	r3, [r3, #12]
 8048926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804892a:	2b80      	cmp	r3, #128	; 0x80
 804892c:	d109      	bne.n	8048942 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 804892e:	687b      	ldr	r3, [r7, #4]
 8048930:	681b      	ldr	r3, [r3, #0]
 8048932:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8048936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8048938:	687b      	ldr	r3, [r7, #4]
 804893a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 804893e:	6878      	ldr	r0, [r7, #4]
 8048940:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8048942:	687b      	ldr	r3, [r7, #4]
 8048944:	681b      	ldr	r3, [r3, #0]
 8048946:	691b      	ldr	r3, [r3, #16]
 8048948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804894c:	2b40      	cmp	r3, #64	; 0x40
 804894e:	d110      	bne.n	8048972 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8048950:	687b      	ldr	r3, [r7, #4]
 8048952:	681b      	ldr	r3, [r3, #0]
 8048954:	68db      	ldr	r3, [r3, #12]
 8048956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804895a:	2b40      	cmp	r3, #64	; 0x40
 804895c:	d109      	bne.n	8048972 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 804895e:	687b      	ldr	r3, [r7, #4]
 8048960:	681b      	ldr	r3, [r3, #0]
 8048962:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8048966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8048968:	687b      	ldr	r3, [r7, #4]
 804896a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804896e:	6878      	ldr	r0, [r7, #4]
 8048970:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8048972:	687b      	ldr	r3, [r7, #4]
 8048974:	681b      	ldr	r3, [r3, #0]
 8048976:	691b      	ldr	r3, [r3, #16]
 8048978:	f003 0320 	and.w	r3, r3, #32
 804897c:	2b20      	cmp	r3, #32
 804897e:	d110      	bne.n	80489a2 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8048980:	687b      	ldr	r3, [r7, #4]
 8048982:	681b      	ldr	r3, [r3, #0]
 8048984:	68db      	ldr	r3, [r3, #12]
 8048986:	f003 0320 	and.w	r3, r3, #32
 804898a:	2b20      	cmp	r3, #32
 804898c:	d109      	bne.n	80489a2 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 804898e:	687b      	ldr	r3, [r7, #4]
 8048990:	681b      	ldr	r3, [r3, #0]
 8048992:	f06f 0220 	mvn.w	r2, #32
 8048996:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8048998:	687b      	ldr	r3, [r7, #4]
 804899a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 804899e:	6878      	ldr	r0, [r7, #4]
 80489a0:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80489a2:	bf00      	nop
 80489a4:	3708      	adds	r7, #8
 80489a6:	46bd      	mov	sp, r7
 80489a8:	bd80      	pop	{r7, pc}

080489aa <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80489aa:	b480      	push	{r7}
 80489ac:	b083      	sub	sp, #12
 80489ae:	af00      	add	r7, sp, #0
 80489b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 80489b2:	bf00      	nop
 80489b4:	370c      	adds	r7, #12
 80489b6:	46bd      	mov	sp, r7
 80489b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489bc:	4770      	bx	lr

080489be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80489be:	b480      	push	{r7}
 80489c0:	b083      	sub	sp, #12
 80489c2:	af00      	add	r7, sp, #0
 80489c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80489c6:	bf00      	nop
 80489c8:	370c      	adds	r7, #12
 80489ca:	46bd      	mov	sp, r7
 80489cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489d0:	4770      	bx	lr

080489d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80489d2:	b480      	push	{r7}
 80489d4:	b083      	sub	sp, #12
 80489d6:	af00      	add	r7, sp, #0
 80489d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80489da:	bf00      	nop
 80489dc:	370c      	adds	r7, #12
 80489de:	46bd      	mov	sp, r7
 80489e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489e4:	4770      	bx	lr

080489e6 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80489e6:	b480      	push	{r7}
 80489e8:	b083      	sub	sp, #12
 80489ea:	af00      	add	r7, sp, #0
 80489ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80489ee:	bf00      	nop
 80489f0:	370c      	adds	r7, #12
 80489f2:	46bd      	mov	sp, r7
 80489f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80489f8:	4770      	bx	lr

080489fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80489fa:	b480      	push	{r7}
 80489fc:	b083      	sub	sp, #12
 80489fe:	af00      	add	r7, sp, #0
 8048a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8048a02:	bf00      	nop
 8048a04:	370c      	adds	r7, #12
 8048a06:	46bd      	mov	sp, r7
 8048a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048a0c:	4770      	bx	lr

08048a0e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8048a0e:	b480      	push	{r7}
 8048a10:	b083      	sub	sp, #12
 8048a12:	af00      	add	r7, sp, #0
 8048a14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8048a16:	bf00      	nop
 8048a18:	370c      	adds	r7, #12
 8048a1a:	46bd      	mov	sp, r7
 8048a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048a20:	4770      	bx	lr

08048a22 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8048a22:	b480      	push	{r7}
 8048a24:	b083      	sub	sp, #12
 8048a26:	af00      	add	r7, sp, #0
 8048a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8048a2a:	bf00      	nop
 8048a2c:	370c      	adds	r7, #12
 8048a2e:	46bd      	mov	sp, r7
 8048a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048a34:	4770      	bx	lr

08048a36 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8048a36:	b480      	push	{r7}
 8048a38:	b083      	sub	sp, #12
 8048a3a:	af00      	add	r7, sp, #0
 8048a3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8048a3e:	bf00      	nop
 8048a40:	370c      	adds	r7, #12
 8048a42:	46bd      	mov	sp, r7
 8048a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048a48:	4770      	bx	lr

08048a4a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8048a4a:	b480      	push	{r7}
 8048a4c:	b083      	sub	sp, #12
 8048a4e:	af00      	add	r7, sp, #0
 8048a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8048a52:	bf00      	nop
 8048a54:	370c      	adds	r7, #12
 8048a56:	46bd      	mov	sp, r7
 8048a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048a5c:	4770      	bx	lr
	...

08048a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8048a60:	b480      	push	{r7}
 8048a62:	b085      	sub	sp, #20
 8048a64:	af00      	add	r7, sp, #0
 8048a66:	6078      	str	r0, [r7, #4]
 8048a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8048a6a:	687b      	ldr	r3, [r7, #4]
 8048a6c:	681b      	ldr	r3, [r3, #0]
 8048a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8048a70:	687b      	ldr	r3, [r7, #4]
 8048a72:	4a40      	ldr	r2, [pc, #256]	; (8048b74 <TIM_Base_SetConfig+0x114>)
 8048a74:	4293      	cmp	r3, r2
 8048a76:	d013      	beq.n	8048aa0 <TIM_Base_SetConfig+0x40>
 8048a78:	687b      	ldr	r3, [r7, #4]
 8048a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048a7e:	d00f      	beq.n	8048aa0 <TIM_Base_SetConfig+0x40>
 8048a80:	687b      	ldr	r3, [r7, #4]
 8048a82:	4a3d      	ldr	r2, [pc, #244]	; (8048b78 <TIM_Base_SetConfig+0x118>)
 8048a84:	4293      	cmp	r3, r2
 8048a86:	d00b      	beq.n	8048aa0 <TIM_Base_SetConfig+0x40>
 8048a88:	687b      	ldr	r3, [r7, #4]
 8048a8a:	4a3c      	ldr	r2, [pc, #240]	; (8048b7c <TIM_Base_SetConfig+0x11c>)
 8048a8c:	4293      	cmp	r3, r2
 8048a8e:	d007      	beq.n	8048aa0 <TIM_Base_SetConfig+0x40>
 8048a90:	687b      	ldr	r3, [r7, #4]
 8048a92:	4a3b      	ldr	r2, [pc, #236]	; (8048b80 <TIM_Base_SetConfig+0x120>)
 8048a94:	4293      	cmp	r3, r2
 8048a96:	d003      	beq.n	8048aa0 <TIM_Base_SetConfig+0x40>
 8048a98:	687b      	ldr	r3, [r7, #4]
 8048a9a:	4a3a      	ldr	r2, [pc, #232]	; (8048b84 <TIM_Base_SetConfig+0x124>)
 8048a9c:	4293      	cmp	r3, r2
 8048a9e:	d108      	bne.n	8048ab2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8048aa0:	68fb      	ldr	r3, [r7, #12]
 8048aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8048aa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8048aa8:	683b      	ldr	r3, [r7, #0]
 8048aaa:	685b      	ldr	r3, [r3, #4]
 8048aac:	68fa      	ldr	r2, [r7, #12]
 8048aae:	4313      	orrs	r3, r2
 8048ab0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8048ab2:	687b      	ldr	r3, [r7, #4]
 8048ab4:	4a2f      	ldr	r2, [pc, #188]	; (8048b74 <TIM_Base_SetConfig+0x114>)
 8048ab6:	4293      	cmp	r3, r2
 8048ab8:	d01f      	beq.n	8048afa <TIM_Base_SetConfig+0x9a>
 8048aba:	687b      	ldr	r3, [r7, #4]
 8048abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048ac0:	d01b      	beq.n	8048afa <TIM_Base_SetConfig+0x9a>
 8048ac2:	687b      	ldr	r3, [r7, #4]
 8048ac4:	4a2c      	ldr	r2, [pc, #176]	; (8048b78 <TIM_Base_SetConfig+0x118>)
 8048ac6:	4293      	cmp	r3, r2
 8048ac8:	d017      	beq.n	8048afa <TIM_Base_SetConfig+0x9a>
 8048aca:	687b      	ldr	r3, [r7, #4]
 8048acc:	4a2b      	ldr	r2, [pc, #172]	; (8048b7c <TIM_Base_SetConfig+0x11c>)
 8048ace:	4293      	cmp	r3, r2
 8048ad0:	d013      	beq.n	8048afa <TIM_Base_SetConfig+0x9a>
 8048ad2:	687b      	ldr	r3, [r7, #4]
 8048ad4:	4a2a      	ldr	r2, [pc, #168]	; (8048b80 <TIM_Base_SetConfig+0x120>)
 8048ad6:	4293      	cmp	r3, r2
 8048ad8:	d00f      	beq.n	8048afa <TIM_Base_SetConfig+0x9a>
 8048ada:	687b      	ldr	r3, [r7, #4]
 8048adc:	4a29      	ldr	r2, [pc, #164]	; (8048b84 <TIM_Base_SetConfig+0x124>)
 8048ade:	4293      	cmp	r3, r2
 8048ae0:	d00b      	beq.n	8048afa <TIM_Base_SetConfig+0x9a>
 8048ae2:	687b      	ldr	r3, [r7, #4]
 8048ae4:	4a28      	ldr	r2, [pc, #160]	; (8048b88 <TIM_Base_SetConfig+0x128>)
 8048ae6:	4293      	cmp	r3, r2
 8048ae8:	d007      	beq.n	8048afa <TIM_Base_SetConfig+0x9a>
 8048aea:	687b      	ldr	r3, [r7, #4]
 8048aec:	4a27      	ldr	r2, [pc, #156]	; (8048b8c <TIM_Base_SetConfig+0x12c>)
 8048aee:	4293      	cmp	r3, r2
 8048af0:	d003      	beq.n	8048afa <TIM_Base_SetConfig+0x9a>
 8048af2:	687b      	ldr	r3, [r7, #4]
 8048af4:	4a26      	ldr	r2, [pc, #152]	; (8048b90 <TIM_Base_SetConfig+0x130>)
 8048af6:	4293      	cmp	r3, r2
 8048af8:	d108      	bne.n	8048b0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8048afa:	68fb      	ldr	r3, [r7, #12]
 8048afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8048b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8048b02:	683b      	ldr	r3, [r7, #0]
 8048b04:	68db      	ldr	r3, [r3, #12]
 8048b06:	68fa      	ldr	r2, [r7, #12]
 8048b08:	4313      	orrs	r3, r2
 8048b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8048b0c:	68fb      	ldr	r3, [r7, #12]
 8048b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8048b12:	683b      	ldr	r3, [r7, #0]
 8048b14:	695b      	ldr	r3, [r3, #20]
 8048b16:	4313      	orrs	r3, r2
 8048b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8048b1a:	687b      	ldr	r3, [r7, #4]
 8048b1c:	68fa      	ldr	r2, [r7, #12]
 8048b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8048b20:	683b      	ldr	r3, [r7, #0]
 8048b22:	689a      	ldr	r2, [r3, #8]
 8048b24:	687b      	ldr	r3, [r7, #4]
 8048b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8048b28:	683b      	ldr	r3, [r7, #0]
 8048b2a:	681a      	ldr	r2, [r3, #0]
 8048b2c:	687b      	ldr	r3, [r7, #4]
 8048b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8048b30:	687b      	ldr	r3, [r7, #4]
 8048b32:	4a10      	ldr	r2, [pc, #64]	; (8048b74 <TIM_Base_SetConfig+0x114>)
 8048b34:	4293      	cmp	r3, r2
 8048b36:	d00f      	beq.n	8048b58 <TIM_Base_SetConfig+0xf8>
 8048b38:	687b      	ldr	r3, [r7, #4]
 8048b3a:	4a12      	ldr	r2, [pc, #72]	; (8048b84 <TIM_Base_SetConfig+0x124>)
 8048b3c:	4293      	cmp	r3, r2
 8048b3e:	d00b      	beq.n	8048b58 <TIM_Base_SetConfig+0xf8>
 8048b40:	687b      	ldr	r3, [r7, #4]
 8048b42:	4a11      	ldr	r2, [pc, #68]	; (8048b88 <TIM_Base_SetConfig+0x128>)
 8048b44:	4293      	cmp	r3, r2
 8048b46:	d007      	beq.n	8048b58 <TIM_Base_SetConfig+0xf8>
 8048b48:	687b      	ldr	r3, [r7, #4]
 8048b4a:	4a10      	ldr	r2, [pc, #64]	; (8048b8c <TIM_Base_SetConfig+0x12c>)
 8048b4c:	4293      	cmp	r3, r2
 8048b4e:	d003      	beq.n	8048b58 <TIM_Base_SetConfig+0xf8>
 8048b50:	687b      	ldr	r3, [r7, #4]
 8048b52:	4a0f      	ldr	r2, [pc, #60]	; (8048b90 <TIM_Base_SetConfig+0x130>)
 8048b54:	4293      	cmp	r3, r2
 8048b56:	d103      	bne.n	8048b60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8048b58:	683b      	ldr	r3, [r7, #0]
 8048b5a:	691a      	ldr	r2, [r3, #16]
 8048b5c:	687b      	ldr	r3, [r7, #4]
 8048b5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8048b60:	687b      	ldr	r3, [r7, #4]
 8048b62:	2201      	movs	r2, #1
 8048b64:	615a      	str	r2, [r3, #20]
}
 8048b66:	bf00      	nop
 8048b68:	3714      	adds	r7, #20
 8048b6a:	46bd      	mov	sp, r7
 8048b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b70:	4770      	bx	lr
 8048b72:	bf00      	nop
 8048b74:	40012c00 	.word	0x40012c00
 8048b78:	40000400 	.word	0x40000400
 8048b7c:	40000800 	.word	0x40000800
 8048b80:	40000c00 	.word	0x40000c00
 8048b84:	40013400 	.word	0x40013400
 8048b88:	40014000 	.word	0x40014000
 8048b8c:	40014400 	.word	0x40014400
 8048b90:	40014800 	.word	0x40014800

08048b94 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8048b94:	b480      	push	{r7}
 8048b96:	b083      	sub	sp, #12
 8048b98:	af00      	add	r7, sp, #0
 8048b9a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;             /* Legacy weak PeriodElapsedCallback             */
 8048b9c:	687b      	ldr	r3, [r7, #4]
 8048b9e:	4a1e      	ldr	r2, [pc, #120]	; (8048c18 <TIM_ResetCallback+0x84>)
 8048ba0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;     /* Legacy weak PeriodElapsedHalfCpltCallback     */
 8048ba4:	687b      	ldr	r3, [r7, #4]
 8048ba6:	4a1d      	ldr	r2, [pc, #116]	; (8048c1c <TIM_ResetCallback+0x88>)
 8048ba8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;                   /* Legacy weak TriggerCallback                   */
 8048bac:	687b      	ldr	r3, [r7, #4]
 8048bae:	4a1c      	ldr	r2, [pc, #112]	; (8048c20 <TIM_ResetCallback+0x8c>)
 8048bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;           /* Legacy weak TriggerHalfCpltCallback           */
 8048bb4:	687b      	ldr	r3, [r7, #4]
 8048bb6:	4a1b      	ldr	r2, [pc, #108]	; (8048c24 <TIM_ResetCallback+0x90>)
 8048bb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;                /* Legacy weak IC_CaptureCallback                */
 8048bbc:	687b      	ldr	r3, [r7, #4]
 8048bbe:	4a1a      	ldr	r2, [pc, #104]	; (8048c28 <TIM_ResetCallback+0x94>)
 8048bc0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;        /* Legacy weak IC_CaptureHalfCpltCallback        */
 8048bc4:	687b      	ldr	r3, [r7, #4]
 8048bc6:	4a19      	ldr	r2, [pc, #100]	; (8048c2c <TIM_ResetCallback+0x98>)
 8048bc8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;           /* Legacy weak OC_DelayElapsedCallback           */
 8048bcc:	687b      	ldr	r3, [r7, #4]
 8048bce:	4a18      	ldr	r2, [pc, #96]	; (8048c30 <TIM_ResetCallback+0x9c>)
 8048bd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;         /* Legacy weak PWM_PulseFinishedCallback         */
 8048bd4:	687b      	ldr	r3, [r7, #4]
 8048bd6:	4a17      	ldr	r2, [pc, #92]	; (8048c34 <TIM_ResetCallback+0xa0>)
 8048bd8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback; /* Legacy weak PWM_PulseFinishedHalfCpltCallback */
 8048bdc:	687b      	ldr	r3, [r7, #4]
 8048bde:	4a16      	ldr	r2, [pc, #88]	; (8048c38 <TIM_ResetCallback+0xa4>)
 8048be0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;                     /* Legacy weak ErrorCallback                     */
 8048be4:	687b      	ldr	r3, [r7, #4]
 8048be6:	4a15      	ldr	r2, [pc, #84]	; (8048c3c <TIM_ResetCallback+0xa8>)
 8048be8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;                  /* Legacy weak CommutationCallback               */
 8048bec:	687b      	ldr	r3, [r7, #4]
 8048bee:	4a14      	ldr	r2, [pc, #80]	; (8048c40 <TIM_ResetCallback+0xac>)
 8048bf0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;          /* Legacy weak CommutationHalfCpltCallback       */
 8048bf4:	687b      	ldr	r3, [r7, #4]
 8048bf6:	4a13      	ldr	r2, [pc, #76]	; (8048c44 <TIM_ResetCallback+0xb0>)
 8048bf8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;                   /* Legacy weak BreakCallback                     */
 8048bfc:	687b      	ldr	r3, [r7, #4]
 8048bfe:	4a12      	ldr	r2, [pc, #72]	; (8048c48 <TIM_ResetCallback+0xb4>)
 8048c00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;                  /* Legacy weak Break2Callback                    */
 8048c04:	687b      	ldr	r3, [r7, #4]
 8048c06:	4a11      	ldr	r2, [pc, #68]	; (8048c4c <TIM_ResetCallback+0xb8>)
 8048c08:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8048c0c:	bf00      	nop
 8048c0e:	370c      	adds	r7, #12
 8048c10:	46bd      	mov	sp, r7
 8048c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048c16:	4770      	bx	lr
 8048c18:	08040dd5 	.word	0x08040dd5
 8048c1c:	080489ab 	.word	0x080489ab
 8048c20:	08048a23 	.word	0x08048a23
 8048c24:	08048a37 	.word	0x08048a37
 8048c28:	080489d3 	.word	0x080489d3
 8048c2c:	080489e7 	.word	0x080489e7
 8048c30:	080489bf 	.word	0x080489bf
 8048c34:	080489fb 	.word	0x080489fb
 8048c38:	08048a0f 	.word	0x08048a0f
 8048c3c:	08048a4b 	.word	0x08048a4b
 8048c40:	08048d61 	.word	0x08048d61
 8048c44:	08048d75 	.word	0x08048d75
 8048c48:	08048d89 	.word	0x08048d89
 8048c4c:	08048d9d 	.word	0x08048d9d

08048c50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8048c50:	b480      	push	{r7}
 8048c52:	b085      	sub	sp, #20
 8048c54:	af00      	add	r7, sp, #0
 8048c56:	6078      	str	r0, [r7, #4]
 8048c58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8048c5a:	687b      	ldr	r3, [r7, #4]
 8048c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8048c60:	2b01      	cmp	r3, #1
 8048c62:	d101      	bne.n	8048c68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8048c64:	2302      	movs	r3, #2
 8048c66:	e068      	b.n	8048d3a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8048c68:	687b      	ldr	r3, [r7, #4]
 8048c6a:	2201      	movs	r2, #1
 8048c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8048c70:	687b      	ldr	r3, [r7, #4]
 8048c72:	2202      	movs	r2, #2
 8048c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8048c78:	687b      	ldr	r3, [r7, #4]
 8048c7a:	681b      	ldr	r3, [r3, #0]
 8048c7c:	685b      	ldr	r3, [r3, #4]
 8048c7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8048c80:	687b      	ldr	r3, [r7, #4]
 8048c82:	681b      	ldr	r3, [r3, #0]
 8048c84:	689b      	ldr	r3, [r3, #8]
 8048c86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8048c88:	687b      	ldr	r3, [r7, #4]
 8048c8a:	681b      	ldr	r3, [r3, #0]
 8048c8c:	4a2e      	ldr	r2, [pc, #184]	; (8048d48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8048c8e:	4293      	cmp	r3, r2
 8048c90:	d004      	beq.n	8048c9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8048c92:	687b      	ldr	r3, [r7, #4]
 8048c94:	681b      	ldr	r3, [r3, #0]
 8048c96:	4a2d      	ldr	r2, [pc, #180]	; (8048d4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8048c98:	4293      	cmp	r3, r2
 8048c9a:	d108      	bne.n	8048cae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8048c9c:	68fb      	ldr	r3, [r7, #12]
 8048c9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8048ca2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8048ca4:	683b      	ldr	r3, [r7, #0]
 8048ca6:	685b      	ldr	r3, [r3, #4]
 8048ca8:	68fa      	ldr	r2, [r7, #12]
 8048caa:	4313      	orrs	r3, r2
 8048cac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8048cae:	68fb      	ldr	r3, [r7, #12]
 8048cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8048cb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8048cb6:	683b      	ldr	r3, [r7, #0]
 8048cb8:	681b      	ldr	r3, [r3, #0]
 8048cba:	68fa      	ldr	r2, [r7, #12]
 8048cbc:	4313      	orrs	r3, r2
 8048cbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8048cc0:	687b      	ldr	r3, [r7, #4]
 8048cc2:	681b      	ldr	r3, [r3, #0]
 8048cc4:	68fa      	ldr	r2, [r7, #12]
 8048cc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8048cc8:	687b      	ldr	r3, [r7, #4]
 8048cca:	681b      	ldr	r3, [r3, #0]
 8048ccc:	4a1e      	ldr	r2, [pc, #120]	; (8048d48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8048cce:	4293      	cmp	r3, r2
 8048cd0:	d01d      	beq.n	8048d0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8048cd2:	687b      	ldr	r3, [r7, #4]
 8048cd4:	681b      	ldr	r3, [r3, #0]
 8048cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8048cda:	d018      	beq.n	8048d0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8048cdc:	687b      	ldr	r3, [r7, #4]
 8048cde:	681b      	ldr	r3, [r3, #0]
 8048ce0:	4a1b      	ldr	r2, [pc, #108]	; (8048d50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8048ce2:	4293      	cmp	r3, r2
 8048ce4:	d013      	beq.n	8048d0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8048ce6:	687b      	ldr	r3, [r7, #4]
 8048ce8:	681b      	ldr	r3, [r3, #0]
 8048cea:	4a1a      	ldr	r2, [pc, #104]	; (8048d54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8048cec:	4293      	cmp	r3, r2
 8048cee:	d00e      	beq.n	8048d0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8048cf0:	687b      	ldr	r3, [r7, #4]
 8048cf2:	681b      	ldr	r3, [r3, #0]
 8048cf4:	4a18      	ldr	r2, [pc, #96]	; (8048d58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8048cf6:	4293      	cmp	r3, r2
 8048cf8:	d009      	beq.n	8048d0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8048cfa:	687b      	ldr	r3, [r7, #4]
 8048cfc:	681b      	ldr	r3, [r3, #0]
 8048cfe:	4a13      	ldr	r2, [pc, #76]	; (8048d4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8048d00:	4293      	cmp	r3, r2
 8048d02:	d004      	beq.n	8048d0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8048d04:	687b      	ldr	r3, [r7, #4]
 8048d06:	681b      	ldr	r3, [r3, #0]
 8048d08:	4a14      	ldr	r2, [pc, #80]	; (8048d5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8048d0a:	4293      	cmp	r3, r2
 8048d0c:	d10c      	bne.n	8048d28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8048d0e:	68bb      	ldr	r3, [r7, #8]
 8048d10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8048d14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8048d16:	683b      	ldr	r3, [r7, #0]
 8048d18:	689b      	ldr	r3, [r3, #8]
 8048d1a:	68ba      	ldr	r2, [r7, #8]
 8048d1c:	4313      	orrs	r3, r2
 8048d1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8048d20:	687b      	ldr	r3, [r7, #4]
 8048d22:	681b      	ldr	r3, [r3, #0]
 8048d24:	68ba      	ldr	r2, [r7, #8]
 8048d26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8048d28:	687b      	ldr	r3, [r7, #4]
 8048d2a:	2201      	movs	r2, #1
 8048d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8048d30:	687b      	ldr	r3, [r7, #4]
 8048d32:	2200      	movs	r2, #0
 8048d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8048d38:	2300      	movs	r3, #0
}
 8048d3a:	4618      	mov	r0, r3
 8048d3c:	3714      	adds	r7, #20
 8048d3e:	46bd      	mov	sp, r7
 8048d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048d44:	4770      	bx	lr
 8048d46:	bf00      	nop
 8048d48:	40012c00 	.word	0x40012c00
 8048d4c:	40013400 	.word	0x40013400
 8048d50:	40000400 	.word	0x40000400
 8048d54:	40000800 	.word	0x40000800
 8048d58:	40000c00 	.word	0x40000c00
 8048d5c:	40014000 	.word	0x40014000

08048d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8048d60:	b480      	push	{r7}
 8048d62:	b083      	sub	sp, #12
 8048d64:	af00      	add	r7, sp, #0
 8048d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8048d68:	bf00      	nop
 8048d6a:	370c      	adds	r7, #12
 8048d6c:	46bd      	mov	sp, r7
 8048d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048d72:	4770      	bx	lr

08048d74 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8048d74:	b480      	push	{r7}
 8048d76:	b083      	sub	sp, #12
 8048d78:	af00      	add	r7, sp, #0
 8048d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8048d7c:	bf00      	nop
 8048d7e:	370c      	adds	r7, #12
 8048d80:	46bd      	mov	sp, r7
 8048d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048d86:	4770      	bx	lr

08048d88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8048d88:	b480      	push	{r7}
 8048d8a:	b083      	sub	sp, #12
 8048d8c:	af00      	add	r7, sp, #0
 8048d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8048d90:	bf00      	nop
 8048d92:	370c      	adds	r7, #12
 8048d94:	46bd      	mov	sp, r7
 8048d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048d9a:	4770      	bx	lr

08048d9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8048d9c:	b480      	push	{r7}
 8048d9e:	b083      	sub	sp, #12
 8048da0:	af00      	add	r7, sp, #0
 8048da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8048da4:	bf00      	nop
 8048da6:	370c      	adds	r7, #12
 8048da8:	46bd      	mov	sp, r7
 8048daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048dae:	4770      	bx	lr

08048db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8048db0:	b580      	push	{r7, lr}
 8048db2:	b082      	sub	sp, #8
 8048db4:	af00      	add	r7, sp, #0
 8048db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8048db8:	687b      	ldr	r3, [r7, #4]
 8048dba:	2b00      	cmp	r3, #0
 8048dbc:	d101      	bne.n	8048dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8048dbe:	2301      	movs	r3, #1
 8048dc0:	e042      	b.n	8048e48 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8048dc2:	687b      	ldr	r3, [r7, #4]
 8048dc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8048dc8:	2b00      	cmp	r3, #0
 8048dca:	d106      	bne.n	8048dda <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8048dcc:	687b      	ldr	r3, [r7, #4]
 8048dce:	2200      	movs	r2, #0
 8048dd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8048dd4:	6878      	ldr	r0, [r7, #4]
 8048dd6:	f7f8 fdc1 	bl	804195c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8048dda:	687b      	ldr	r3, [r7, #4]
 8048ddc:	2224      	movs	r2, #36	; 0x24
 8048dde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8048de2:	687b      	ldr	r3, [r7, #4]
 8048de4:	681b      	ldr	r3, [r3, #0]
 8048de6:	681a      	ldr	r2, [r3, #0]
 8048de8:	687b      	ldr	r3, [r7, #4]
 8048dea:	681b      	ldr	r3, [r3, #0]
 8048dec:	f022 0201 	bic.w	r2, r2, #1
 8048df0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8048df2:	6878      	ldr	r0, [r7, #4]
 8048df4:	f000 fa80 	bl	80492f8 <UART_SetConfig>
 8048df8:	4603      	mov	r3, r0
 8048dfa:	2b01      	cmp	r3, #1
 8048dfc:	d101      	bne.n	8048e02 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8048dfe:	2301      	movs	r3, #1
 8048e00:	e022      	b.n	8048e48 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8048e02:	687b      	ldr	r3, [r7, #4]
 8048e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8048e06:	2b00      	cmp	r3, #0
 8048e08:	d002      	beq.n	8048e10 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8048e0a:	6878      	ldr	r0, [r7, #4]
 8048e0c:	f000 fd48 	bl	80498a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8048e10:	687b      	ldr	r3, [r7, #4]
 8048e12:	681b      	ldr	r3, [r3, #0]
 8048e14:	685a      	ldr	r2, [r3, #4]
 8048e16:	687b      	ldr	r3, [r7, #4]
 8048e18:	681b      	ldr	r3, [r3, #0]
 8048e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8048e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8048e20:	687b      	ldr	r3, [r7, #4]
 8048e22:	681b      	ldr	r3, [r3, #0]
 8048e24:	689a      	ldr	r2, [r3, #8]
 8048e26:	687b      	ldr	r3, [r7, #4]
 8048e28:	681b      	ldr	r3, [r3, #0]
 8048e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8048e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8048e30:	687b      	ldr	r3, [r7, #4]
 8048e32:	681b      	ldr	r3, [r3, #0]
 8048e34:	681a      	ldr	r2, [r3, #0]
 8048e36:	687b      	ldr	r3, [r7, #4]
 8048e38:	681b      	ldr	r3, [r3, #0]
 8048e3a:	f042 0201 	orr.w	r2, r2, #1
 8048e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8048e40:	6878      	ldr	r0, [r7, #4]
 8048e42:	f000 fdcf 	bl	80499e4 <UART_CheckIdleState>
 8048e46:	4603      	mov	r3, r0
}
 8048e48:	4618      	mov	r0, r3
 8048e4a:	3708      	adds	r7, #8
 8048e4c:	46bd      	mov	sp, r7
 8048e4e:	bd80      	pop	{r7, pc}

08048e50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8048e50:	b580      	push	{r7, lr}
 8048e52:	b088      	sub	sp, #32
 8048e54:	af00      	add	r7, sp, #0
 8048e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8048e58:	687b      	ldr	r3, [r7, #4]
 8048e5a:	681b      	ldr	r3, [r3, #0]
 8048e5c:	69db      	ldr	r3, [r3, #28]
 8048e5e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8048e60:	687b      	ldr	r3, [r7, #4]
 8048e62:	681b      	ldr	r3, [r3, #0]
 8048e64:	681b      	ldr	r3, [r3, #0]
 8048e66:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8048e68:	687b      	ldr	r3, [r7, #4]
 8048e6a:	681b      	ldr	r3, [r3, #0]
 8048e6c:	689b      	ldr	r3, [r3, #8]
 8048e6e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8048e70:	69fa      	ldr	r2, [r7, #28]
 8048e72:	f640 030f 	movw	r3, #2063	; 0x80f
 8048e76:	4013      	ands	r3, r2
 8048e78:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8048e7a:	693b      	ldr	r3, [r7, #16]
 8048e7c:	2b00      	cmp	r3, #0
 8048e7e:	d118      	bne.n	8048eb2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8048e80:	69fb      	ldr	r3, [r7, #28]
 8048e82:	f003 0320 	and.w	r3, r3, #32
 8048e86:	2b00      	cmp	r3, #0
 8048e88:	d013      	beq.n	8048eb2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8048e8a:	69bb      	ldr	r3, [r7, #24]
 8048e8c:	f003 0320 	and.w	r3, r3, #32
 8048e90:	2b00      	cmp	r3, #0
 8048e92:	d104      	bne.n	8048e9e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8048e94:	697b      	ldr	r3, [r7, #20]
 8048e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8048e9a:	2b00      	cmp	r3, #0
 8048e9c:	d009      	beq.n	8048eb2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8048e9e:	687b      	ldr	r3, [r7, #4]
 8048ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8048ea2:	2b00      	cmp	r3, #0
 8048ea4:	f000 81fb 	beq.w	804929e <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 8048ea8:	687b      	ldr	r3, [r7, #4]
 8048eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8048eac:	6878      	ldr	r0, [r7, #4]
 8048eae:	4798      	blx	r3
      }
      return;
 8048eb0:	e1f5      	b.n	804929e <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8048eb2:	693b      	ldr	r3, [r7, #16]
 8048eb4:	2b00      	cmp	r3, #0
 8048eb6:	f000 80ef 	beq.w	8049098 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8048eba:	697a      	ldr	r2, [r7, #20]
 8048ebc:	4b73      	ldr	r3, [pc, #460]	; (804908c <HAL_UART_IRQHandler+0x23c>)
 8048ebe:	4013      	ands	r3, r2
 8048ec0:	2b00      	cmp	r3, #0
 8048ec2:	d105      	bne.n	8048ed0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8048ec4:	69ba      	ldr	r2, [r7, #24]
 8048ec6:	4b72      	ldr	r3, [pc, #456]	; (8049090 <HAL_UART_IRQHandler+0x240>)
 8048ec8:	4013      	ands	r3, r2
 8048eca:	2b00      	cmp	r3, #0
 8048ecc:	f000 80e4 	beq.w	8049098 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8048ed0:	69fb      	ldr	r3, [r7, #28]
 8048ed2:	f003 0301 	and.w	r3, r3, #1
 8048ed6:	2b00      	cmp	r3, #0
 8048ed8:	d010      	beq.n	8048efc <HAL_UART_IRQHandler+0xac>
 8048eda:	69bb      	ldr	r3, [r7, #24]
 8048edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8048ee0:	2b00      	cmp	r3, #0
 8048ee2:	d00b      	beq.n	8048efc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8048ee4:	687b      	ldr	r3, [r7, #4]
 8048ee6:	681b      	ldr	r3, [r3, #0]
 8048ee8:	2201      	movs	r2, #1
 8048eea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8048eec:	687b      	ldr	r3, [r7, #4]
 8048eee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8048ef2:	f043 0201 	orr.w	r2, r3, #1
 8048ef6:	687b      	ldr	r3, [r7, #4]
 8048ef8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8048efc:	69fb      	ldr	r3, [r7, #28]
 8048efe:	f003 0302 	and.w	r3, r3, #2
 8048f02:	2b00      	cmp	r3, #0
 8048f04:	d010      	beq.n	8048f28 <HAL_UART_IRQHandler+0xd8>
 8048f06:	697b      	ldr	r3, [r7, #20]
 8048f08:	f003 0301 	and.w	r3, r3, #1
 8048f0c:	2b00      	cmp	r3, #0
 8048f0e:	d00b      	beq.n	8048f28 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8048f10:	687b      	ldr	r3, [r7, #4]
 8048f12:	681b      	ldr	r3, [r3, #0]
 8048f14:	2202      	movs	r2, #2
 8048f16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8048f18:	687b      	ldr	r3, [r7, #4]
 8048f1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8048f1e:	f043 0204 	orr.w	r2, r3, #4
 8048f22:	687b      	ldr	r3, [r7, #4]
 8048f24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8048f28:	69fb      	ldr	r3, [r7, #28]
 8048f2a:	f003 0304 	and.w	r3, r3, #4
 8048f2e:	2b00      	cmp	r3, #0
 8048f30:	d010      	beq.n	8048f54 <HAL_UART_IRQHandler+0x104>
 8048f32:	697b      	ldr	r3, [r7, #20]
 8048f34:	f003 0301 	and.w	r3, r3, #1
 8048f38:	2b00      	cmp	r3, #0
 8048f3a:	d00b      	beq.n	8048f54 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8048f3c:	687b      	ldr	r3, [r7, #4]
 8048f3e:	681b      	ldr	r3, [r3, #0]
 8048f40:	2204      	movs	r2, #4
 8048f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8048f44:	687b      	ldr	r3, [r7, #4]
 8048f46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8048f4a:	f043 0202 	orr.w	r2, r3, #2
 8048f4e:	687b      	ldr	r3, [r7, #4]
 8048f50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8048f54:	69fb      	ldr	r3, [r7, #28]
 8048f56:	f003 0308 	and.w	r3, r3, #8
 8048f5a:	2b00      	cmp	r3, #0
 8048f5c:	d015      	beq.n	8048f8a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8048f5e:	69bb      	ldr	r3, [r7, #24]
 8048f60:	f003 0320 	and.w	r3, r3, #32
 8048f64:	2b00      	cmp	r3, #0
 8048f66:	d104      	bne.n	8048f72 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8048f68:	697a      	ldr	r2, [r7, #20]
 8048f6a:	4b48      	ldr	r3, [pc, #288]	; (804908c <HAL_UART_IRQHandler+0x23c>)
 8048f6c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8048f6e:	2b00      	cmp	r3, #0
 8048f70:	d00b      	beq.n	8048f8a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8048f72:	687b      	ldr	r3, [r7, #4]
 8048f74:	681b      	ldr	r3, [r3, #0]
 8048f76:	2208      	movs	r2, #8
 8048f78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8048f7a:	687b      	ldr	r3, [r7, #4]
 8048f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8048f80:	f043 0208 	orr.w	r2, r3, #8
 8048f84:	687b      	ldr	r3, [r7, #4]
 8048f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8048f8a:	69fb      	ldr	r3, [r7, #28]
 8048f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8048f90:	2b00      	cmp	r3, #0
 8048f92:	d011      	beq.n	8048fb8 <HAL_UART_IRQHandler+0x168>
 8048f94:	69bb      	ldr	r3, [r7, #24]
 8048f96:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8048f9a:	2b00      	cmp	r3, #0
 8048f9c:	d00c      	beq.n	8048fb8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8048f9e:	687b      	ldr	r3, [r7, #4]
 8048fa0:	681b      	ldr	r3, [r3, #0]
 8048fa2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8048fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8048fa8:	687b      	ldr	r3, [r7, #4]
 8048faa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8048fae:	f043 0220 	orr.w	r2, r3, #32
 8048fb2:	687b      	ldr	r3, [r7, #4]
 8048fb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8048fb8:	687b      	ldr	r3, [r7, #4]
 8048fba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8048fbe:	2b00      	cmp	r3, #0
 8048fc0:	f000 816f 	beq.w	80492a2 <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8048fc4:	69fb      	ldr	r3, [r7, #28]
 8048fc6:	f003 0320 	and.w	r3, r3, #32
 8048fca:	2b00      	cmp	r3, #0
 8048fcc:	d011      	beq.n	8048ff2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8048fce:	69bb      	ldr	r3, [r7, #24]
 8048fd0:	f003 0320 	and.w	r3, r3, #32
 8048fd4:	2b00      	cmp	r3, #0
 8048fd6:	d104      	bne.n	8048fe2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8048fd8:	697b      	ldr	r3, [r7, #20]
 8048fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8048fde:	2b00      	cmp	r3, #0
 8048fe0:	d007      	beq.n	8048ff2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8048fe2:	687b      	ldr	r3, [r7, #4]
 8048fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8048fe6:	2b00      	cmp	r3, #0
 8048fe8:	d003      	beq.n	8048ff2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8048fea:	687b      	ldr	r3, [r7, #4]
 8048fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8048fee:	6878      	ldr	r0, [r7, #4]
 8048ff0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8048ff2:	687b      	ldr	r3, [r7, #4]
 8048ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8048ff8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8048ffa:	687b      	ldr	r3, [r7, #4]
 8048ffc:	681b      	ldr	r3, [r3, #0]
 8048ffe:	689b      	ldr	r3, [r3, #8]
 8049000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8049004:	2b40      	cmp	r3, #64	; 0x40
 8049006:	d004      	beq.n	8049012 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8049008:	68fb      	ldr	r3, [r7, #12]
 804900a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 804900e:	2b00      	cmp	r3, #0
 8049010:	d031      	beq.n	8049076 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8049012:	6878      	ldr	r0, [r7, #4]
 8049014:	f000 fdb1 	bl	8049b7a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8049018:	687b      	ldr	r3, [r7, #4]
 804901a:	681b      	ldr	r3, [r3, #0]
 804901c:	689b      	ldr	r3, [r3, #8]
 804901e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8049022:	2b40      	cmp	r3, #64	; 0x40
 8049024:	d123      	bne.n	804906e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8049026:	687b      	ldr	r3, [r7, #4]
 8049028:	681b      	ldr	r3, [r3, #0]
 804902a:	689a      	ldr	r2, [r3, #8]
 804902c:	687b      	ldr	r3, [r7, #4]
 804902e:	681b      	ldr	r3, [r3, #0]
 8049030:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8049034:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8049036:	687b      	ldr	r3, [r7, #4]
 8049038:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804903a:	2b00      	cmp	r3, #0
 804903c:	d013      	beq.n	8049066 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 804903e:	687b      	ldr	r3, [r7, #4]
 8049040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8049042:	4a14      	ldr	r2, [pc, #80]	; (8049094 <HAL_UART_IRQHandler+0x244>)
 8049044:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8049046:	687b      	ldr	r3, [r7, #4]
 8049048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804904a:	4618      	mov	r0, r3
 804904c:	f7fb fb20 	bl	8044690 <HAL_DMA_Abort_IT>
 8049050:	4603      	mov	r3, r0
 8049052:	2b00      	cmp	r3, #0
 8049054:	d017      	beq.n	8049086 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8049056:	687b      	ldr	r3, [r7, #4]
 8049058:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804905a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804905c:	687a      	ldr	r2, [r7, #4]
 804905e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8049060:	4610      	mov	r0, r2
 8049062:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8049064:	e00f      	b.n	8049086 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8049066:	6878      	ldr	r0, [r7, #4]
 8049068:	f000 f930 	bl	80492cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 804906c:	e00b      	b.n	8049086 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 804906e:	6878      	ldr	r0, [r7, #4]
 8049070:	f000 f92c 	bl	80492cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8049074:	e007      	b.n	8049086 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8049076:	6878      	ldr	r0, [r7, #4]
 8049078:	f000 f928 	bl	80492cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 804907c:	687b      	ldr	r3, [r7, #4]
 804907e:	2200      	movs	r2, #0
 8049080:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8049084:	e10d      	b.n	80492a2 <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8049086:	bf00      	nop
    return;
 8049088:	e10b      	b.n	80492a2 <HAL_UART_IRQHandler+0x452>
 804908a:	bf00      	nop
 804908c:	10000001 	.word	0x10000001
 8049090:	04000120 	.word	0x04000120
 8049094:	08049bdf 	.word	0x08049bdf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8049098:	687b      	ldr	r3, [r7, #4]
 804909a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 804909c:	2b01      	cmp	r3, #1
 804909e:	f040 80ab 	bne.w	80491f8 <HAL_UART_IRQHandler+0x3a8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 80490a2:	69fb      	ldr	r3, [r7, #28]
 80490a4:	f003 0310 	and.w	r3, r3, #16
 80490a8:	2b00      	cmp	r3, #0
 80490aa:	f000 80a5 	beq.w	80491f8 <HAL_UART_IRQHandler+0x3a8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80490ae:	69bb      	ldr	r3, [r7, #24]
 80490b0:	f003 0310 	and.w	r3, r3, #16
 80490b4:	2b00      	cmp	r3, #0
 80490b6:	f000 809f 	beq.w	80491f8 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80490ba:	687b      	ldr	r3, [r7, #4]
 80490bc:	681b      	ldr	r3, [r3, #0]
 80490be:	2210      	movs	r2, #16
 80490c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80490c2:	687b      	ldr	r3, [r7, #4]
 80490c4:	681b      	ldr	r3, [r3, #0]
 80490c6:	689b      	ldr	r3, [r3, #8]
 80490c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80490cc:	2b40      	cmp	r3, #64	; 0x40
 80490ce:	d155      	bne.n	804917c <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80490d0:	687b      	ldr	r3, [r7, #4]
 80490d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80490d4:	681b      	ldr	r3, [r3, #0]
 80490d6:	685b      	ldr	r3, [r3, #4]
 80490d8:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 80490da:	893b      	ldrh	r3, [r7, #8]
 80490dc:	2b00      	cmp	r3, #0
 80490de:	f000 80e2 	beq.w	80492a6 <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80490e2:	687b      	ldr	r3, [r7, #4]
 80490e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80490e8:	893a      	ldrh	r2, [r7, #8]
 80490ea:	429a      	cmp	r2, r3
 80490ec:	f080 80db 	bcs.w	80492a6 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80490f0:	687b      	ldr	r3, [r7, #4]
 80490f2:	893a      	ldrh	r2, [r7, #8]
 80490f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80490f8:	687b      	ldr	r3, [r7, #4]
 80490fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80490fc:	681b      	ldr	r3, [r3, #0]
 80490fe:	681b      	ldr	r3, [r3, #0]
 8049100:	f003 0320 	and.w	r3, r3, #32
 8049104:	2b00      	cmp	r3, #0
 8049106:	d12b      	bne.n	8049160 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8049108:	687b      	ldr	r3, [r7, #4]
 804910a:	681b      	ldr	r3, [r3, #0]
 804910c:	681a      	ldr	r2, [r3, #0]
 804910e:	687b      	ldr	r3, [r7, #4]
 8049110:	681b      	ldr	r3, [r3, #0]
 8049112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8049116:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8049118:	687b      	ldr	r3, [r7, #4]
 804911a:	681b      	ldr	r3, [r3, #0]
 804911c:	689a      	ldr	r2, [r3, #8]
 804911e:	687b      	ldr	r3, [r7, #4]
 8049120:	681b      	ldr	r3, [r3, #0]
 8049122:	f022 0201 	bic.w	r2, r2, #1
 8049126:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8049128:	687b      	ldr	r3, [r7, #4]
 804912a:	681b      	ldr	r3, [r3, #0]
 804912c:	689a      	ldr	r2, [r3, #8]
 804912e:	687b      	ldr	r3, [r7, #4]
 8049130:	681b      	ldr	r3, [r3, #0]
 8049132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8049136:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8049138:	687b      	ldr	r3, [r7, #4]
 804913a:	2220      	movs	r2, #32
 804913c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8049140:	687b      	ldr	r3, [r7, #4]
 8049142:	2200      	movs	r2, #0
 8049144:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8049146:	687b      	ldr	r3, [r7, #4]
 8049148:	681b      	ldr	r3, [r3, #0]
 804914a:	681a      	ldr	r2, [r3, #0]
 804914c:	687b      	ldr	r3, [r7, #4]
 804914e:	681b      	ldr	r3, [r3, #0]
 8049150:	f022 0210 	bic.w	r2, r2, #16
 8049154:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8049156:	687b      	ldr	r3, [r7, #4]
 8049158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804915a:	4618      	mov	r0, r3
 804915c:	f7fb fa3c 	bl	80445d8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8049160:	687b      	ldr	r3, [r7, #4]
 8049162:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8049166:	687b      	ldr	r3, [r7, #4]
 8049168:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 804916c:	b29b      	uxth	r3, r3
 804916e:	1ad3      	subs	r3, r2, r3
 8049170:	b29b      	uxth	r3, r3
 8049172:	4619      	mov	r1, r3
 8049174:	6878      	ldr	r0, [r7, #4]
 8049176:	f000 f8b3 	bl	80492e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 804917a:	e094      	b.n	80492a6 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 804917c:	687b      	ldr	r3, [r7, #4]
 804917e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8049182:	687b      	ldr	r3, [r7, #4]
 8049184:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8049188:	b29b      	uxth	r3, r3
 804918a:	1ad3      	subs	r3, r2, r3
 804918c:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 804918e:	687b      	ldr	r3, [r7, #4]
 8049190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8049194:	b29b      	uxth	r3, r3
 8049196:	2b00      	cmp	r3, #0
 8049198:	f000 8087 	beq.w	80492aa <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 804919c:	897b      	ldrh	r3, [r7, #10]
 804919e:	2b00      	cmp	r3, #0
 80491a0:	f000 8083 	beq.w	80492aa <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80491a4:	687b      	ldr	r3, [r7, #4]
 80491a6:	681b      	ldr	r3, [r3, #0]
 80491a8:	681a      	ldr	r2, [r3, #0]
 80491aa:	687b      	ldr	r3, [r7, #4]
 80491ac:	681b      	ldr	r3, [r3, #0]
 80491ae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80491b2:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80491b4:	687b      	ldr	r3, [r7, #4]
 80491b6:	681b      	ldr	r3, [r3, #0]
 80491b8:	689b      	ldr	r3, [r3, #8]
 80491ba:	687a      	ldr	r2, [r7, #4]
 80491bc:	6812      	ldr	r2, [r2, #0]
 80491be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80491c2:	f023 0301 	bic.w	r3, r3, #1
 80491c6:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80491c8:	687b      	ldr	r3, [r7, #4]
 80491ca:	2220      	movs	r2, #32
 80491cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80491d0:	687b      	ldr	r3, [r7, #4]
 80491d2:	2200      	movs	r2, #0
 80491d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80491d6:	687b      	ldr	r3, [r7, #4]
 80491d8:	2200      	movs	r2, #0
 80491da:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80491dc:	687b      	ldr	r3, [r7, #4]
 80491de:	681b      	ldr	r3, [r3, #0]
 80491e0:	681a      	ldr	r2, [r3, #0]
 80491e2:	687b      	ldr	r3, [r7, #4]
 80491e4:	681b      	ldr	r3, [r3, #0]
 80491e6:	f022 0210 	bic.w	r2, r2, #16
 80491ea:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80491ec:	897b      	ldrh	r3, [r7, #10]
 80491ee:	4619      	mov	r1, r3
 80491f0:	6878      	ldr	r0, [r7, #4]
 80491f2:	f000 f875 	bl	80492e0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80491f6:	e058      	b.n	80492aa <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80491f8:	69fb      	ldr	r3, [r7, #28]
 80491fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80491fe:	2b00      	cmp	r3, #0
 8049200:	d00d      	beq.n	804921e <HAL_UART_IRQHandler+0x3ce>
 8049202:	697b      	ldr	r3, [r7, #20]
 8049204:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8049208:	2b00      	cmp	r3, #0
 804920a:	d008      	beq.n	804921e <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 804920c:	687b      	ldr	r3, [r7, #4]
 804920e:	681b      	ldr	r3, [r3, #0]
 8049210:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8049214:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8049216:	6878      	ldr	r0, [r7, #4]
 8049218:	f000 fd11 	bl	8049c3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 804921c:	e048      	b.n	80492b0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 804921e:	69fb      	ldr	r3, [r7, #28]
 8049220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8049224:	2b00      	cmp	r3, #0
 8049226:	d012      	beq.n	804924e <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8049228:	69bb      	ldr	r3, [r7, #24]
 804922a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804922e:	2b00      	cmp	r3, #0
 8049230:	d104      	bne.n	804923c <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8049232:	697b      	ldr	r3, [r7, #20]
 8049234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8049238:	2b00      	cmp	r3, #0
 804923a:	d008      	beq.n	804924e <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 804923c:	687b      	ldr	r3, [r7, #4]
 804923e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8049240:	2b00      	cmp	r3, #0
 8049242:	d034      	beq.n	80492ae <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8049244:	687b      	ldr	r3, [r7, #4]
 8049246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8049248:	6878      	ldr	r0, [r7, #4]
 804924a:	4798      	blx	r3
    }
    return;
 804924c:	e02f      	b.n	80492ae <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 804924e:	69fb      	ldr	r3, [r7, #28]
 8049250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8049254:	2b00      	cmp	r3, #0
 8049256:	d008      	beq.n	804926a <HAL_UART_IRQHandler+0x41a>
 8049258:	69bb      	ldr	r3, [r7, #24]
 804925a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804925e:	2b00      	cmp	r3, #0
 8049260:	d003      	beq.n	804926a <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8049262:	6878      	ldr	r0, [r7, #4]
 8049264:	f000 fcd1 	bl	8049c0a <UART_EndTransmit_IT>
    return;
 8049268:	e022      	b.n	80492b0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 804926a:	69fb      	ldr	r3, [r7, #28]
 804926c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8049270:	2b00      	cmp	r3, #0
 8049272:	d008      	beq.n	8049286 <HAL_UART_IRQHandler+0x436>
 8049274:	69bb      	ldr	r3, [r7, #24]
 8049276:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 804927a:	2b00      	cmp	r3, #0
 804927c:	d003      	beq.n	8049286 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 804927e:	6878      	ldr	r0, [r7, #4]
 8049280:	f000 fcf1 	bl	8049c66 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8049284:	e014      	b.n	80492b0 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8049286:	69fb      	ldr	r3, [r7, #28]
 8049288:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804928c:	2b00      	cmp	r3, #0
 804928e:	d00f      	beq.n	80492b0 <HAL_UART_IRQHandler+0x460>
 8049290:	69bb      	ldr	r3, [r7, #24]
 8049292:	2b00      	cmp	r3, #0
 8049294:	da0c      	bge.n	80492b0 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8049296:	6878      	ldr	r0, [r7, #4]
 8049298:	f000 fcdb 	bl	8049c52 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 804929c:	e008      	b.n	80492b0 <HAL_UART_IRQHandler+0x460>
      return;
 804929e:	bf00      	nop
 80492a0:	e006      	b.n	80492b0 <HAL_UART_IRQHandler+0x460>
    return;
 80492a2:	bf00      	nop
 80492a4:	e004      	b.n	80492b0 <HAL_UART_IRQHandler+0x460>
      return;
 80492a6:	bf00      	nop
 80492a8:	e002      	b.n	80492b0 <HAL_UART_IRQHandler+0x460>
      return;
 80492aa:	bf00      	nop
 80492ac:	e000      	b.n	80492b0 <HAL_UART_IRQHandler+0x460>
    return;
 80492ae:	bf00      	nop
  }
}
 80492b0:	3720      	adds	r7, #32
 80492b2:	46bd      	mov	sp, r7
 80492b4:	bd80      	pop	{r7, pc}
 80492b6:	bf00      	nop

080492b8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80492b8:	b480      	push	{r7}
 80492ba:	b083      	sub	sp, #12
 80492bc:	af00      	add	r7, sp, #0
 80492be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80492c0:	bf00      	nop
 80492c2:	370c      	adds	r7, #12
 80492c4:	46bd      	mov	sp, r7
 80492c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80492ca:	4770      	bx	lr

080492cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80492cc:	b480      	push	{r7}
 80492ce:	b083      	sub	sp, #12
 80492d0:	af00      	add	r7, sp, #0
 80492d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80492d4:	bf00      	nop
 80492d6:	370c      	adds	r7, #12
 80492d8:	46bd      	mov	sp, r7
 80492da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80492de:	4770      	bx	lr

080492e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80492e0:	b480      	push	{r7}
 80492e2:	b083      	sub	sp, #12
 80492e4:	af00      	add	r7, sp, #0
 80492e6:	6078      	str	r0, [r7, #4]
 80492e8:	460b      	mov	r3, r1
 80492ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80492ec:	bf00      	nop
 80492ee:	370c      	adds	r7, #12
 80492f0:	46bd      	mov	sp, r7
 80492f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80492f6:	4770      	bx	lr

080492f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80492f8:	b5b0      	push	{r4, r5, r7, lr}
 80492fa:	b088      	sub	sp, #32
 80492fc:	af00      	add	r7, sp, #0
 80492fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8049300:	2300      	movs	r3, #0
 8049302:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8049304:	687b      	ldr	r3, [r7, #4]
 8049306:	689a      	ldr	r2, [r3, #8]
 8049308:	687b      	ldr	r3, [r7, #4]
 804930a:	691b      	ldr	r3, [r3, #16]
 804930c:	431a      	orrs	r2, r3
 804930e:	687b      	ldr	r3, [r7, #4]
 8049310:	695b      	ldr	r3, [r3, #20]
 8049312:	431a      	orrs	r2, r3
 8049314:	687b      	ldr	r3, [r7, #4]
 8049316:	69db      	ldr	r3, [r3, #28]
 8049318:	4313      	orrs	r3, r2
 804931a:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 804931c:	687b      	ldr	r3, [r7, #4]
 804931e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8049320:	69fa      	ldr	r2, [r7, #28]
 8049322:	4313      	orrs	r3, r2
 8049324:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8049326:	687b      	ldr	r3, [r7, #4]
 8049328:	681b      	ldr	r3, [r3, #0]
 804932a:	681a      	ldr	r2, [r3, #0]
 804932c:	4bb1      	ldr	r3, [pc, #708]	; (80495f4 <UART_SetConfig+0x2fc>)
 804932e:	4013      	ands	r3, r2
 8049330:	687a      	ldr	r2, [r7, #4]
 8049332:	6812      	ldr	r2, [r2, #0]
 8049334:	69f9      	ldr	r1, [r7, #28]
 8049336:	430b      	orrs	r3, r1
 8049338:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 804933a:	687b      	ldr	r3, [r7, #4]
 804933c:	681b      	ldr	r3, [r3, #0]
 804933e:	685b      	ldr	r3, [r3, #4]
 8049340:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8049344:	687b      	ldr	r3, [r7, #4]
 8049346:	68da      	ldr	r2, [r3, #12]
 8049348:	687b      	ldr	r3, [r7, #4]
 804934a:	681b      	ldr	r3, [r3, #0]
 804934c:	430a      	orrs	r2, r1
 804934e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8049350:	687b      	ldr	r3, [r7, #4]
 8049352:	699b      	ldr	r3, [r3, #24]
 8049354:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8049356:	687b      	ldr	r3, [r7, #4]
 8049358:	681b      	ldr	r3, [r3, #0]
 804935a:	4aa7      	ldr	r2, [pc, #668]	; (80495f8 <UART_SetConfig+0x300>)
 804935c:	4293      	cmp	r3, r2
 804935e:	d004      	beq.n	804936a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8049360:	687b      	ldr	r3, [r7, #4]
 8049362:	6a1b      	ldr	r3, [r3, #32]
 8049364:	69fa      	ldr	r2, [r7, #28]
 8049366:	4313      	orrs	r3, r2
 8049368:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 804936a:	687b      	ldr	r3, [r7, #4]
 804936c:	681b      	ldr	r3, [r3, #0]
 804936e:	689b      	ldr	r3, [r3, #8]
 8049370:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8049374:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8049378:	687a      	ldr	r2, [r7, #4]
 804937a:	6812      	ldr	r2, [r2, #0]
 804937c:	69f9      	ldr	r1, [r7, #28]
 804937e:	430b      	orrs	r3, r1
 8049380:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8049382:	687b      	ldr	r3, [r7, #4]
 8049384:	681b      	ldr	r3, [r3, #0]
 8049386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8049388:	f023 010f 	bic.w	r1, r3, #15
 804938c:	687b      	ldr	r3, [r7, #4]
 804938e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8049390:	687b      	ldr	r3, [r7, #4]
 8049392:	681b      	ldr	r3, [r3, #0]
 8049394:	430a      	orrs	r2, r1
 8049396:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8049398:	687b      	ldr	r3, [r7, #4]
 804939a:	681b      	ldr	r3, [r3, #0]
 804939c:	4a97      	ldr	r2, [pc, #604]	; (80495fc <UART_SetConfig+0x304>)
 804939e:	4293      	cmp	r3, r2
 80493a0:	d121      	bne.n	80493e6 <UART_SetConfig+0xee>
 80493a2:	4b97      	ldr	r3, [pc, #604]	; (8049600 <UART_SetConfig+0x308>)
 80493a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80493a8:	f003 0303 	and.w	r3, r3, #3
 80493ac:	2b03      	cmp	r3, #3
 80493ae:	d817      	bhi.n	80493e0 <UART_SetConfig+0xe8>
 80493b0:	a201      	add	r2, pc, #4	; (adr r2, 80493b8 <UART_SetConfig+0xc0>)
 80493b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80493b6:	bf00      	nop
 80493b8:	080493c9 	.word	0x080493c9
 80493bc:	080493d5 	.word	0x080493d5
 80493c0:	080493cf 	.word	0x080493cf
 80493c4:	080493db 	.word	0x080493db
 80493c8:	2301      	movs	r3, #1
 80493ca:	76fb      	strb	r3, [r7, #27]
 80493cc:	e0e7      	b.n	804959e <UART_SetConfig+0x2a6>
 80493ce:	2302      	movs	r3, #2
 80493d0:	76fb      	strb	r3, [r7, #27]
 80493d2:	e0e4      	b.n	804959e <UART_SetConfig+0x2a6>
 80493d4:	2304      	movs	r3, #4
 80493d6:	76fb      	strb	r3, [r7, #27]
 80493d8:	e0e1      	b.n	804959e <UART_SetConfig+0x2a6>
 80493da:	2308      	movs	r3, #8
 80493dc:	76fb      	strb	r3, [r7, #27]
 80493de:	e0de      	b.n	804959e <UART_SetConfig+0x2a6>
 80493e0:	2310      	movs	r3, #16
 80493e2:	76fb      	strb	r3, [r7, #27]
 80493e4:	e0db      	b.n	804959e <UART_SetConfig+0x2a6>
 80493e6:	687b      	ldr	r3, [r7, #4]
 80493e8:	681b      	ldr	r3, [r3, #0]
 80493ea:	4a86      	ldr	r2, [pc, #536]	; (8049604 <UART_SetConfig+0x30c>)
 80493ec:	4293      	cmp	r3, r2
 80493ee:	d132      	bne.n	8049456 <UART_SetConfig+0x15e>
 80493f0:	4b83      	ldr	r3, [pc, #524]	; (8049600 <UART_SetConfig+0x308>)
 80493f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80493f6:	f003 030c 	and.w	r3, r3, #12
 80493fa:	2b0c      	cmp	r3, #12
 80493fc:	d828      	bhi.n	8049450 <UART_SetConfig+0x158>
 80493fe:	a201      	add	r2, pc, #4	; (adr r2, 8049404 <UART_SetConfig+0x10c>)
 8049400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049404:	08049439 	.word	0x08049439
 8049408:	08049451 	.word	0x08049451
 804940c:	08049451 	.word	0x08049451
 8049410:	08049451 	.word	0x08049451
 8049414:	08049445 	.word	0x08049445
 8049418:	08049451 	.word	0x08049451
 804941c:	08049451 	.word	0x08049451
 8049420:	08049451 	.word	0x08049451
 8049424:	0804943f 	.word	0x0804943f
 8049428:	08049451 	.word	0x08049451
 804942c:	08049451 	.word	0x08049451
 8049430:	08049451 	.word	0x08049451
 8049434:	0804944b 	.word	0x0804944b
 8049438:	2300      	movs	r3, #0
 804943a:	76fb      	strb	r3, [r7, #27]
 804943c:	e0af      	b.n	804959e <UART_SetConfig+0x2a6>
 804943e:	2302      	movs	r3, #2
 8049440:	76fb      	strb	r3, [r7, #27]
 8049442:	e0ac      	b.n	804959e <UART_SetConfig+0x2a6>
 8049444:	2304      	movs	r3, #4
 8049446:	76fb      	strb	r3, [r7, #27]
 8049448:	e0a9      	b.n	804959e <UART_SetConfig+0x2a6>
 804944a:	2308      	movs	r3, #8
 804944c:	76fb      	strb	r3, [r7, #27]
 804944e:	e0a6      	b.n	804959e <UART_SetConfig+0x2a6>
 8049450:	2310      	movs	r3, #16
 8049452:	76fb      	strb	r3, [r7, #27]
 8049454:	e0a3      	b.n	804959e <UART_SetConfig+0x2a6>
 8049456:	687b      	ldr	r3, [r7, #4]
 8049458:	681b      	ldr	r3, [r3, #0]
 804945a:	4a6b      	ldr	r2, [pc, #428]	; (8049608 <UART_SetConfig+0x310>)
 804945c:	4293      	cmp	r3, r2
 804945e:	d120      	bne.n	80494a2 <UART_SetConfig+0x1aa>
 8049460:	4b67      	ldr	r3, [pc, #412]	; (8049600 <UART_SetConfig+0x308>)
 8049462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8049466:	f003 0330 	and.w	r3, r3, #48	; 0x30
 804946a:	2b30      	cmp	r3, #48	; 0x30
 804946c:	d013      	beq.n	8049496 <UART_SetConfig+0x19e>
 804946e:	2b30      	cmp	r3, #48	; 0x30
 8049470:	d814      	bhi.n	804949c <UART_SetConfig+0x1a4>
 8049472:	2b20      	cmp	r3, #32
 8049474:	d009      	beq.n	804948a <UART_SetConfig+0x192>
 8049476:	2b20      	cmp	r3, #32
 8049478:	d810      	bhi.n	804949c <UART_SetConfig+0x1a4>
 804947a:	2b00      	cmp	r3, #0
 804947c:	d002      	beq.n	8049484 <UART_SetConfig+0x18c>
 804947e:	2b10      	cmp	r3, #16
 8049480:	d006      	beq.n	8049490 <UART_SetConfig+0x198>
 8049482:	e00b      	b.n	804949c <UART_SetConfig+0x1a4>
 8049484:	2300      	movs	r3, #0
 8049486:	76fb      	strb	r3, [r7, #27]
 8049488:	e089      	b.n	804959e <UART_SetConfig+0x2a6>
 804948a:	2302      	movs	r3, #2
 804948c:	76fb      	strb	r3, [r7, #27]
 804948e:	e086      	b.n	804959e <UART_SetConfig+0x2a6>
 8049490:	2304      	movs	r3, #4
 8049492:	76fb      	strb	r3, [r7, #27]
 8049494:	e083      	b.n	804959e <UART_SetConfig+0x2a6>
 8049496:	2308      	movs	r3, #8
 8049498:	76fb      	strb	r3, [r7, #27]
 804949a:	e080      	b.n	804959e <UART_SetConfig+0x2a6>
 804949c:	2310      	movs	r3, #16
 804949e:	76fb      	strb	r3, [r7, #27]
 80494a0:	e07d      	b.n	804959e <UART_SetConfig+0x2a6>
 80494a2:	687b      	ldr	r3, [r7, #4]
 80494a4:	681b      	ldr	r3, [r3, #0]
 80494a6:	4a59      	ldr	r2, [pc, #356]	; (804960c <UART_SetConfig+0x314>)
 80494a8:	4293      	cmp	r3, r2
 80494aa:	d120      	bne.n	80494ee <UART_SetConfig+0x1f6>
 80494ac:	4b54      	ldr	r3, [pc, #336]	; (8049600 <UART_SetConfig+0x308>)
 80494ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80494b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80494b6:	2bc0      	cmp	r3, #192	; 0xc0
 80494b8:	d013      	beq.n	80494e2 <UART_SetConfig+0x1ea>
 80494ba:	2bc0      	cmp	r3, #192	; 0xc0
 80494bc:	d814      	bhi.n	80494e8 <UART_SetConfig+0x1f0>
 80494be:	2b80      	cmp	r3, #128	; 0x80
 80494c0:	d009      	beq.n	80494d6 <UART_SetConfig+0x1de>
 80494c2:	2b80      	cmp	r3, #128	; 0x80
 80494c4:	d810      	bhi.n	80494e8 <UART_SetConfig+0x1f0>
 80494c6:	2b00      	cmp	r3, #0
 80494c8:	d002      	beq.n	80494d0 <UART_SetConfig+0x1d8>
 80494ca:	2b40      	cmp	r3, #64	; 0x40
 80494cc:	d006      	beq.n	80494dc <UART_SetConfig+0x1e4>
 80494ce:	e00b      	b.n	80494e8 <UART_SetConfig+0x1f0>
 80494d0:	2300      	movs	r3, #0
 80494d2:	76fb      	strb	r3, [r7, #27]
 80494d4:	e063      	b.n	804959e <UART_SetConfig+0x2a6>
 80494d6:	2302      	movs	r3, #2
 80494d8:	76fb      	strb	r3, [r7, #27]
 80494da:	e060      	b.n	804959e <UART_SetConfig+0x2a6>
 80494dc:	2304      	movs	r3, #4
 80494de:	76fb      	strb	r3, [r7, #27]
 80494e0:	e05d      	b.n	804959e <UART_SetConfig+0x2a6>
 80494e2:	2308      	movs	r3, #8
 80494e4:	76fb      	strb	r3, [r7, #27]
 80494e6:	e05a      	b.n	804959e <UART_SetConfig+0x2a6>
 80494e8:	2310      	movs	r3, #16
 80494ea:	76fb      	strb	r3, [r7, #27]
 80494ec:	e057      	b.n	804959e <UART_SetConfig+0x2a6>
 80494ee:	687b      	ldr	r3, [r7, #4]
 80494f0:	681b      	ldr	r3, [r3, #0]
 80494f2:	4a47      	ldr	r2, [pc, #284]	; (8049610 <UART_SetConfig+0x318>)
 80494f4:	4293      	cmp	r3, r2
 80494f6:	d125      	bne.n	8049544 <UART_SetConfig+0x24c>
 80494f8:	4b41      	ldr	r3, [pc, #260]	; (8049600 <UART_SetConfig+0x308>)
 80494fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80494fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8049502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8049506:	d017      	beq.n	8049538 <UART_SetConfig+0x240>
 8049508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804950c:	d817      	bhi.n	804953e <UART_SetConfig+0x246>
 804950e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8049512:	d00b      	beq.n	804952c <UART_SetConfig+0x234>
 8049514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8049518:	d811      	bhi.n	804953e <UART_SetConfig+0x246>
 804951a:	2b00      	cmp	r3, #0
 804951c:	d003      	beq.n	8049526 <UART_SetConfig+0x22e>
 804951e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8049522:	d006      	beq.n	8049532 <UART_SetConfig+0x23a>
 8049524:	e00b      	b.n	804953e <UART_SetConfig+0x246>
 8049526:	2300      	movs	r3, #0
 8049528:	76fb      	strb	r3, [r7, #27]
 804952a:	e038      	b.n	804959e <UART_SetConfig+0x2a6>
 804952c:	2302      	movs	r3, #2
 804952e:	76fb      	strb	r3, [r7, #27]
 8049530:	e035      	b.n	804959e <UART_SetConfig+0x2a6>
 8049532:	2304      	movs	r3, #4
 8049534:	76fb      	strb	r3, [r7, #27]
 8049536:	e032      	b.n	804959e <UART_SetConfig+0x2a6>
 8049538:	2308      	movs	r3, #8
 804953a:	76fb      	strb	r3, [r7, #27]
 804953c:	e02f      	b.n	804959e <UART_SetConfig+0x2a6>
 804953e:	2310      	movs	r3, #16
 8049540:	76fb      	strb	r3, [r7, #27]
 8049542:	e02c      	b.n	804959e <UART_SetConfig+0x2a6>
 8049544:	687b      	ldr	r3, [r7, #4]
 8049546:	681b      	ldr	r3, [r3, #0]
 8049548:	4a2b      	ldr	r2, [pc, #172]	; (80495f8 <UART_SetConfig+0x300>)
 804954a:	4293      	cmp	r3, r2
 804954c:	d125      	bne.n	804959a <UART_SetConfig+0x2a2>
 804954e:	4b2c      	ldr	r3, [pc, #176]	; (8049600 <UART_SetConfig+0x308>)
 8049550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8049554:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8049558:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 804955c:	d017      	beq.n	804958e <UART_SetConfig+0x296>
 804955e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8049562:	d817      	bhi.n	8049594 <UART_SetConfig+0x29c>
 8049564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8049568:	d00b      	beq.n	8049582 <UART_SetConfig+0x28a>
 804956a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804956e:	d811      	bhi.n	8049594 <UART_SetConfig+0x29c>
 8049570:	2b00      	cmp	r3, #0
 8049572:	d003      	beq.n	804957c <UART_SetConfig+0x284>
 8049574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8049578:	d006      	beq.n	8049588 <UART_SetConfig+0x290>
 804957a:	e00b      	b.n	8049594 <UART_SetConfig+0x29c>
 804957c:	2300      	movs	r3, #0
 804957e:	76fb      	strb	r3, [r7, #27]
 8049580:	e00d      	b.n	804959e <UART_SetConfig+0x2a6>
 8049582:	2302      	movs	r3, #2
 8049584:	76fb      	strb	r3, [r7, #27]
 8049586:	e00a      	b.n	804959e <UART_SetConfig+0x2a6>
 8049588:	2304      	movs	r3, #4
 804958a:	76fb      	strb	r3, [r7, #27]
 804958c:	e007      	b.n	804959e <UART_SetConfig+0x2a6>
 804958e:	2308      	movs	r3, #8
 8049590:	76fb      	strb	r3, [r7, #27]
 8049592:	e004      	b.n	804959e <UART_SetConfig+0x2a6>
 8049594:	2310      	movs	r3, #16
 8049596:	76fb      	strb	r3, [r7, #27]
 8049598:	e001      	b.n	804959e <UART_SetConfig+0x2a6>
 804959a:	2310      	movs	r3, #16
 804959c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 804959e:	687b      	ldr	r3, [r7, #4]
 80495a0:	681b      	ldr	r3, [r3, #0]
 80495a2:	4a15      	ldr	r2, [pc, #84]	; (80495f8 <UART_SetConfig+0x300>)
 80495a4:	4293      	cmp	r3, r2
 80495a6:	f040 80a3 	bne.w	80496f0 <UART_SetConfig+0x3f8>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80495aa:	7efb      	ldrb	r3, [r7, #27]
 80495ac:	2b08      	cmp	r3, #8
 80495ae:	d83b      	bhi.n	8049628 <UART_SetConfig+0x330>
 80495b0:	a201      	add	r2, pc, #4	; (adr r2, 80495b8 <UART_SetConfig+0x2c0>)
 80495b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80495b6:	bf00      	nop
 80495b8:	080495dd 	.word	0x080495dd
 80495bc:	080495e5 	.word	0x080495e5
 80495c0:	080495ed 	.word	0x080495ed
 80495c4:	08049629 	.word	0x08049629
 80495c8:	08049619 	.word	0x08049619
 80495cc:	08049629 	.word	0x08049629
 80495d0:	08049629 	.word	0x08049629
 80495d4:	08049629 	.word	0x08049629
 80495d8:	08049621 	.word	0x08049621
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80495dc:	f7fd f9ee 	bl	80469bc <HAL_RCC_GetPCLK1Freq>
 80495e0:	6178      	str	r0, [r7, #20]
        break;
 80495e2:	e026      	b.n	8049632 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80495e4:	f7fd f9fe 	bl	80469e4 <HAL_RCC_GetPCLK2Freq>
 80495e8:	6178      	str	r0, [r7, #20]
        break;
 80495ea:	e022      	b.n	8049632 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80495ec:	4b09      	ldr	r3, [pc, #36]	; (8049614 <UART_SetConfig+0x31c>)
 80495ee:	617b      	str	r3, [r7, #20]
        break;
 80495f0:	e01f      	b.n	8049632 <UART_SetConfig+0x33a>
 80495f2:	bf00      	nop
 80495f4:	cfff69f3 	.word	0xcfff69f3
 80495f8:	40008000 	.word	0x40008000
 80495fc:	40013800 	.word	0x40013800
 8049600:	40021000 	.word	0x40021000
 8049604:	40004400 	.word	0x40004400
 8049608:	40004800 	.word	0x40004800
 804960c:	40004c00 	.word	0x40004c00
 8049610:	40005000 	.word	0x40005000
 8049614:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8049618:	f7fd f91e 	bl	8046858 <HAL_RCC_GetSysClockFreq>
 804961c:	6178      	str	r0, [r7, #20]
        break;
 804961e:	e008      	b.n	8049632 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8049620:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8049624:	617b      	str	r3, [r7, #20]
        break;
 8049626:	e004      	b.n	8049632 <UART_SetConfig+0x33a>
      default:
        pclk = 0U;
 8049628:	2300      	movs	r3, #0
 804962a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 804962c:	2301      	movs	r3, #1
 804962e:	76bb      	strb	r3, [r7, #26]
        break;
 8049630:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8049632:	697b      	ldr	r3, [r7, #20]
 8049634:	2b00      	cmp	r3, #0
 8049636:	f000 811b 	beq.w	8049870 <UART_SetConfig+0x578>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 804963a:	687b      	ldr	r3, [r7, #4]
 804963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804963e:	4a96      	ldr	r2, [pc, #600]	; (8049898 <UART_SetConfig+0x5a0>)
 8049640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8049644:	461a      	mov	r2, r3
 8049646:	697b      	ldr	r3, [r7, #20]
 8049648:	fbb3 f3f2 	udiv	r3, r3, r2
 804964c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 804964e:	687b      	ldr	r3, [r7, #4]
 8049650:	685a      	ldr	r2, [r3, #4]
 8049652:	4613      	mov	r3, r2
 8049654:	005b      	lsls	r3, r3, #1
 8049656:	4413      	add	r3, r2
 8049658:	68ba      	ldr	r2, [r7, #8]
 804965a:	429a      	cmp	r2, r3
 804965c:	d305      	bcc.n	804966a <UART_SetConfig+0x372>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 804965e:	687b      	ldr	r3, [r7, #4]
 8049660:	685b      	ldr	r3, [r3, #4]
 8049662:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8049664:	68ba      	ldr	r2, [r7, #8]
 8049666:	429a      	cmp	r2, r3
 8049668:	d902      	bls.n	8049670 <UART_SetConfig+0x378>
      {
        ret = HAL_ERROR;
 804966a:	2301      	movs	r3, #1
 804966c:	76bb      	strb	r3, [r7, #26]
 804966e:	e0ff      	b.n	8049870 <UART_SetConfig+0x578>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8049670:	697b      	ldr	r3, [r7, #20]
 8049672:	4618      	mov	r0, r3
 8049674:	f04f 0100 	mov.w	r1, #0
 8049678:	687b      	ldr	r3, [r7, #4]
 804967a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804967c:	4a86      	ldr	r2, [pc, #536]	; (8049898 <UART_SetConfig+0x5a0>)
 804967e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8049682:	b29a      	uxth	r2, r3
 8049684:	f04f 0300 	mov.w	r3, #0
 8049688:	f7f6 fdd6 	bl	8040238 <__aeabi_uldivmod>
 804968c:	4602      	mov	r2, r0
 804968e:	460b      	mov	r3, r1
 8049690:	4610      	mov	r0, r2
 8049692:	4619      	mov	r1, r3
 8049694:	f04f 0200 	mov.w	r2, #0
 8049698:	f04f 0300 	mov.w	r3, #0
 804969c:	020b      	lsls	r3, r1, #8
 804969e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80496a2:	0202      	lsls	r2, r0, #8
 80496a4:	6879      	ldr	r1, [r7, #4]
 80496a6:	6849      	ldr	r1, [r1, #4]
 80496a8:	0849      	lsrs	r1, r1, #1
 80496aa:	4608      	mov	r0, r1
 80496ac:	f04f 0100 	mov.w	r1, #0
 80496b0:	1814      	adds	r4, r2, r0
 80496b2:	eb43 0501 	adc.w	r5, r3, r1
 80496b6:	687b      	ldr	r3, [r7, #4]
 80496b8:	685b      	ldr	r3, [r3, #4]
 80496ba:	461a      	mov	r2, r3
 80496bc:	f04f 0300 	mov.w	r3, #0
 80496c0:	4620      	mov	r0, r4
 80496c2:	4629      	mov	r1, r5
 80496c4:	f7f6 fdb8 	bl	8040238 <__aeabi_uldivmod>
 80496c8:	4602      	mov	r2, r0
 80496ca:	460b      	mov	r3, r1
 80496cc:	4613      	mov	r3, r2
 80496ce:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80496d0:	693b      	ldr	r3, [r7, #16]
 80496d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80496d6:	d308      	bcc.n	80496ea <UART_SetConfig+0x3f2>
 80496d8:	693b      	ldr	r3, [r7, #16]
 80496da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80496de:	d204      	bcs.n	80496ea <UART_SetConfig+0x3f2>
        {
          huart->Instance->BRR = usartdiv;
 80496e0:	687b      	ldr	r3, [r7, #4]
 80496e2:	681b      	ldr	r3, [r3, #0]
 80496e4:	693a      	ldr	r2, [r7, #16]
 80496e6:	60da      	str	r2, [r3, #12]
 80496e8:	e0c2      	b.n	8049870 <UART_SetConfig+0x578>
        }
        else
        {
          ret = HAL_ERROR;
 80496ea:	2301      	movs	r3, #1
 80496ec:	76bb      	strb	r3, [r7, #26]
 80496ee:	e0bf      	b.n	8049870 <UART_SetConfig+0x578>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80496f0:	687b      	ldr	r3, [r7, #4]
 80496f2:	69db      	ldr	r3, [r3, #28]
 80496f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80496f8:	d165      	bne.n	80497c6 <UART_SetConfig+0x4ce>
  {
    switch (clocksource)
 80496fa:	7efb      	ldrb	r3, [r7, #27]
 80496fc:	2b08      	cmp	r3, #8
 80496fe:	d828      	bhi.n	8049752 <UART_SetConfig+0x45a>
 8049700:	a201      	add	r2, pc, #4	; (adr r2, 8049708 <UART_SetConfig+0x410>)
 8049702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8049706:	bf00      	nop
 8049708:	0804972d 	.word	0x0804972d
 804970c:	08049735 	.word	0x08049735
 8049710:	0804973d 	.word	0x0804973d
 8049714:	08049753 	.word	0x08049753
 8049718:	08049743 	.word	0x08049743
 804971c:	08049753 	.word	0x08049753
 8049720:	08049753 	.word	0x08049753
 8049724:	08049753 	.word	0x08049753
 8049728:	0804974b 	.word	0x0804974b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 804972c:	f7fd f946 	bl	80469bc <HAL_RCC_GetPCLK1Freq>
 8049730:	6178      	str	r0, [r7, #20]
        break;
 8049732:	e013      	b.n	804975c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8049734:	f7fd f956 	bl	80469e4 <HAL_RCC_GetPCLK2Freq>
 8049738:	6178      	str	r0, [r7, #20]
        break;
 804973a:	e00f      	b.n	804975c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 804973c:	4b57      	ldr	r3, [pc, #348]	; (804989c <UART_SetConfig+0x5a4>)
 804973e:	617b      	str	r3, [r7, #20]
        break;
 8049740:	e00c      	b.n	804975c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8049742:	f7fd f889 	bl	8046858 <HAL_RCC_GetSysClockFreq>
 8049746:	6178      	str	r0, [r7, #20]
        break;
 8049748:	e008      	b.n	804975c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 804974a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804974e:	617b      	str	r3, [r7, #20]
        break;
 8049750:	e004      	b.n	804975c <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 8049752:	2300      	movs	r3, #0
 8049754:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8049756:	2301      	movs	r3, #1
 8049758:	76bb      	strb	r3, [r7, #26]
        break;
 804975a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 804975c:	697b      	ldr	r3, [r7, #20]
 804975e:	2b00      	cmp	r3, #0
 8049760:	f000 8086 	beq.w	8049870 <UART_SetConfig+0x578>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8049764:	687b      	ldr	r3, [r7, #4]
 8049766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049768:	4a4b      	ldr	r2, [pc, #300]	; (8049898 <UART_SetConfig+0x5a0>)
 804976a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 804976e:	461a      	mov	r2, r3
 8049770:	697b      	ldr	r3, [r7, #20]
 8049772:	fbb3 f3f2 	udiv	r3, r3, r2
 8049776:	005a      	lsls	r2, r3, #1
 8049778:	687b      	ldr	r3, [r7, #4]
 804977a:	685b      	ldr	r3, [r3, #4]
 804977c:	085b      	lsrs	r3, r3, #1
 804977e:	441a      	add	r2, r3
 8049780:	687b      	ldr	r3, [r7, #4]
 8049782:	685b      	ldr	r3, [r3, #4]
 8049784:	fbb2 f3f3 	udiv	r3, r2, r3
 8049788:	b29b      	uxth	r3, r3
 804978a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804978c:	693b      	ldr	r3, [r7, #16]
 804978e:	2b0f      	cmp	r3, #15
 8049790:	d916      	bls.n	80497c0 <UART_SetConfig+0x4c8>
 8049792:	693b      	ldr	r3, [r7, #16]
 8049794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8049798:	d212      	bcs.n	80497c0 <UART_SetConfig+0x4c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 804979a:	693b      	ldr	r3, [r7, #16]
 804979c:	b29b      	uxth	r3, r3
 804979e:	f023 030f 	bic.w	r3, r3, #15
 80497a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80497a4:	693b      	ldr	r3, [r7, #16]
 80497a6:	085b      	lsrs	r3, r3, #1
 80497a8:	b29b      	uxth	r3, r3
 80497aa:	f003 0307 	and.w	r3, r3, #7
 80497ae:	b29a      	uxth	r2, r3
 80497b0:	89fb      	ldrh	r3, [r7, #14]
 80497b2:	4313      	orrs	r3, r2
 80497b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80497b6:	687b      	ldr	r3, [r7, #4]
 80497b8:	681b      	ldr	r3, [r3, #0]
 80497ba:	89fa      	ldrh	r2, [r7, #14]
 80497bc:	60da      	str	r2, [r3, #12]
 80497be:	e057      	b.n	8049870 <UART_SetConfig+0x578>
      }
      else
      {
        ret = HAL_ERROR;
 80497c0:	2301      	movs	r3, #1
 80497c2:	76bb      	strb	r3, [r7, #26]
 80497c4:	e054      	b.n	8049870 <UART_SetConfig+0x578>
      }
    }
  }
  else
  {
    switch (clocksource)
 80497c6:	7efb      	ldrb	r3, [r7, #27]
 80497c8:	2b08      	cmp	r3, #8
 80497ca:	d828      	bhi.n	804981e <UART_SetConfig+0x526>
 80497cc:	a201      	add	r2, pc, #4	; (adr r2, 80497d4 <UART_SetConfig+0x4dc>)
 80497ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80497d2:	bf00      	nop
 80497d4:	080497f9 	.word	0x080497f9
 80497d8:	08049801 	.word	0x08049801
 80497dc:	08049809 	.word	0x08049809
 80497e0:	0804981f 	.word	0x0804981f
 80497e4:	0804980f 	.word	0x0804980f
 80497e8:	0804981f 	.word	0x0804981f
 80497ec:	0804981f 	.word	0x0804981f
 80497f0:	0804981f 	.word	0x0804981f
 80497f4:	08049817 	.word	0x08049817
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80497f8:	f7fd f8e0 	bl	80469bc <HAL_RCC_GetPCLK1Freq>
 80497fc:	6178      	str	r0, [r7, #20]
        break;
 80497fe:	e013      	b.n	8049828 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8049800:	f7fd f8f0 	bl	80469e4 <HAL_RCC_GetPCLK2Freq>
 8049804:	6178      	str	r0, [r7, #20]
        break;
 8049806:	e00f      	b.n	8049828 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8049808:	4b24      	ldr	r3, [pc, #144]	; (804989c <UART_SetConfig+0x5a4>)
 804980a:	617b      	str	r3, [r7, #20]
        break;
 804980c:	e00c      	b.n	8049828 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804980e:	f7fd f823 	bl	8046858 <HAL_RCC_GetSysClockFreq>
 8049812:	6178      	str	r0, [r7, #20]
        break;
 8049814:	e008      	b.n	8049828 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8049816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804981a:	617b      	str	r3, [r7, #20]
        break;
 804981c:	e004      	b.n	8049828 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 804981e:	2300      	movs	r3, #0
 8049820:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8049822:	2301      	movs	r3, #1
 8049824:	76bb      	strb	r3, [r7, #26]
        break;
 8049826:	bf00      	nop
    }

    if (pclk != 0U)
 8049828:	697b      	ldr	r3, [r7, #20]
 804982a:	2b00      	cmp	r3, #0
 804982c:	d020      	beq.n	8049870 <UART_SetConfig+0x578>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804982e:	687b      	ldr	r3, [r7, #4]
 8049830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8049832:	4a19      	ldr	r2, [pc, #100]	; (8049898 <UART_SetConfig+0x5a0>)
 8049834:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8049838:	461a      	mov	r2, r3
 804983a:	697b      	ldr	r3, [r7, #20]
 804983c:	fbb3 f2f2 	udiv	r2, r3, r2
 8049840:	687b      	ldr	r3, [r7, #4]
 8049842:	685b      	ldr	r3, [r3, #4]
 8049844:	085b      	lsrs	r3, r3, #1
 8049846:	441a      	add	r2, r3
 8049848:	687b      	ldr	r3, [r7, #4]
 804984a:	685b      	ldr	r3, [r3, #4]
 804984c:	fbb2 f3f3 	udiv	r3, r2, r3
 8049850:	b29b      	uxth	r3, r3
 8049852:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8049854:	693b      	ldr	r3, [r7, #16]
 8049856:	2b0f      	cmp	r3, #15
 8049858:	d908      	bls.n	804986c <UART_SetConfig+0x574>
 804985a:	693b      	ldr	r3, [r7, #16]
 804985c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8049860:	d204      	bcs.n	804986c <UART_SetConfig+0x574>
      {
        huart->Instance->BRR = usartdiv;
 8049862:	687b      	ldr	r3, [r7, #4]
 8049864:	681b      	ldr	r3, [r3, #0]
 8049866:	693a      	ldr	r2, [r7, #16]
 8049868:	60da      	str	r2, [r3, #12]
 804986a:	e001      	b.n	8049870 <UART_SetConfig+0x578>
      }
      else
      {
        ret = HAL_ERROR;
 804986c:	2301      	movs	r3, #1
 804986e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8049870:	687b      	ldr	r3, [r7, #4]
 8049872:	2201      	movs	r2, #1
 8049874:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8049878:	687b      	ldr	r3, [r7, #4]
 804987a:	2201      	movs	r2, #1
 804987c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8049880:	687b      	ldr	r3, [r7, #4]
 8049882:	2200      	movs	r2, #0
 8049884:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8049886:	687b      	ldr	r3, [r7, #4]
 8049888:	2200      	movs	r2, #0
 804988a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 804988c:	7ebb      	ldrb	r3, [r7, #26]
}
 804988e:	4618      	mov	r0, r3
 8049890:	3720      	adds	r7, #32
 8049892:	46bd      	mov	sp, r7
 8049894:	bdb0      	pop	{r4, r5, r7, pc}
 8049896:	bf00      	nop
 8049898:	0804a06c 	.word	0x0804a06c
 804989c:	00f42400 	.word	0x00f42400

080498a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80498a0:	b480      	push	{r7}
 80498a2:	b083      	sub	sp, #12
 80498a4:	af00      	add	r7, sp, #0
 80498a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80498a8:	687b      	ldr	r3, [r7, #4]
 80498aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80498ac:	f003 0301 	and.w	r3, r3, #1
 80498b0:	2b00      	cmp	r3, #0
 80498b2:	d00a      	beq.n	80498ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80498b4:	687b      	ldr	r3, [r7, #4]
 80498b6:	681b      	ldr	r3, [r3, #0]
 80498b8:	685b      	ldr	r3, [r3, #4]
 80498ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80498be:	687b      	ldr	r3, [r7, #4]
 80498c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80498c2:	687b      	ldr	r3, [r7, #4]
 80498c4:	681b      	ldr	r3, [r3, #0]
 80498c6:	430a      	orrs	r2, r1
 80498c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80498ca:	687b      	ldr	r3, [r7, #4]
 80498cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80498ce:	f003 0302 	and.w	r3, r3, #2
 80498d2:	2b00      	cmp	r3, #0
 80498d4:	d00a      	beq.n	80498ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80498d6:	687b      	ldr	r3, [r7, #4]
 80498d8:	681b      	ldr	r3, [r3, #0]
 80498da:	685b      	ldr	r3, [r3, #4]
 80498dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80498e0:	687b      	ldr	r3, [r7, #4]
 80498e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80498e4:	687b      	ldr	r3, [r7, #4]
 80498e6:	681b      	ldr	r3, [r3, #0]
 80498e8:	430a      	orrs	r2, r1
 80498ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80498ec:	687b      	ldr	r3, [r7, #4]
 80498ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80498f0:	f003 0304 	and.w	r3, r3, #4
 80498f4:	2b00      	cmp	r3, #0
 80498f6:	d00a      	beq.n	804990e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80498f8:	687b      	ldr	r3, [r7, #4]
 80498fa:	681b      	ldr	r3, [r3, #0]
 80498fc:	685b      	ldr	r3, [r3, #4]
 80498fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8049902:	687b      	ldr	r3, [r7, #4]
 8049904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8049906:	687b      	ldr	r3, [r7, #4]
 8049908:	681b      	ldr	r3, [r3, #0]
 804990a:	430a      	orrs	r2, r1
 804990c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 804990e:	687b      	ldr	r3, [r7, #4]
 8049910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8049912:	f003 0308 	and.w	r3, r3, #8
 8049916:	2b00      	cmp	r3, #0
 8049918:	d00a      	beq.n	8049930 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 804991a:	687b      	ldr	r3, [r7, #4]
 804991c:	681b      	ldr	r3, [r3, #0]
 804991e:	685b      	ldr	r3, [r3, #4]
 8049920:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8049924:	687b      	ldr	r3, [r7, #4]
 8049926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8049928:	687b      	ldr	r3, [r7, #4]
 804992a:	681b      	ldr	r3, [r3, #0]
 804992c:	430a      	orrs	r2, r1
 804992e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8049930:	687b      	ldr	r3, [r7, #4]
 8049932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8049934:	f003 0310 	and.w	r3, r3, #16
 8049938:	2b00      	cmp	r3, #0
 804993a:	d00a      	beq.n	8049952 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 804993c:	687b      	ldr	r3, [r7, #4]
 804993e:	681b      	ldr	r3, [r3, #0]
 8049940:	689b      	ldr	r3, [r3, #8]
 8049942:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8049946:	687b      	ldr	r3, [r7, #4]
 8049948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 804994a:	687b      	ldr	r3, [r7, #4]
 804994c:	681b      	ldr	r3, [r3, #0]
 804994e:	430a      	orrs	r2, r1
 8049950:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8049952:	687b      	ldr	r3, [r7, #4]
 8049954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8049956:	f003 0320 	and.w	r3, r3, #32
 804995a:	2b00      	cmp	r3, #0
 804995c:	d00a      	beq.n	8049974 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 804995e:	687b      	ldr	r3, [r7, #4]
 8049960:	681b      	ldr	r3, [r3, #0]
 8049962:	689b      	ldr	r3, [r3, #8]
 8049964:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8049968:	687b      	ldr	r3, [r7, #4]
 804996a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 804996c:	687b      	ldr	r3, [r7, #4]
 804996e:	681b      	ldr	r3, [r3, #0]
 8049970:	430a      	orrs	r2, r1
 8049972:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8049974:	687b      	ldr	r3, [r7, #4]
 8049976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8049978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804997c:	2b00      	cmp	r3, #0
 804997e:	d01a      	beq.n	80499b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8049980:	687b      	ldr	r3, [r7, #4]
 8049982:	681b      	ldr	r3, [r3, #0]
 8049984:	685b      	ldr	r3, [r3, #4]
 8049986:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 804998a:	687b      	ldr	r3, [r7, #4]
 804998c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 804998e:	687b      	ldr	r3, [r7, #4]
 8049990:	681b      	ldr	r3, [r3, #0]
 8049992:	430a      	orrs	r2, r1
 8049994:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8049996:	687b      	ldr	r3, [r7, #4]
 8049998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804999a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804999e:	d10a      	bne.n	80499b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80499a0:	687b      	ldr	r3, [r7, #4]
 80499a2:	681b      	ldr	r3, [r3, #0]
 80499a4:	685b      	ldr	r3, [r3, #4]
 80499a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80499aa:	687b      	ldr	r3, [r7, #4]
 80499ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80499ae:	687b      	ldr	r3, [r7, #4]
 80499b0:	681b      	ldr	r3, [r3, #0]
 80499b2:	430a      	orrs	r2, r1
 80499b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80499b6:	687b      	ldr	r3, [r7, #4]
 80499b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80499ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80499be:	2b00      	cmp	r3, #0
 80499c0:	d00a      	beq.n	80499d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80499c2:	687b      	ldr	r3, [r7, #4]
 80499c4:	681b      	ldr	r3, [r3, #0]
 80499c6:	685b      	ldr	r3, [r3, #4]
 80499c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80499cc:	687b      	ldr	r3, [r7, #4]
 80499ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80499d0:	687b      	ldr	r3, [r7, #4]
 80499d2:	681b      	ldr	r3, [r3, #0]
 80499d4:	430a      	orrs	r2, r1
 80499d6:	605a      	str	r2, [r3, #4]
  }
}
 80499d8:	bf00      	nop
 80499da:	370c      	adds	r7, #12
 80499dc:	46bd      	mov	sp, r7
 80499de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80499e2:	4770      	bx	lr

080499e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80499e4:	b580      	push	{r7, lr}
 80499e6:	b086      	sub	sp, #24
 80499e8:	af02      	add	r7, sp, #8
 80499ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80499ec:	687b      	ldr	r3, [r7, #4]
 80499ee:	2200      	movs	r2, #0
 80499f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80499f4:	f7f9 f876 	bl	8042ae4 <HAL_GetTick>
 80499f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80499fa:	687b      	ldr	r3, [r7, #4]
 80499fc:	681b      	ldr	r3, [r3, #0]
 80499fe:	681b      	ldr	r3, [r3, #0]
 8049a00:	f003 0308 	and.w	r3, r3, #8
 8049a04:	2b08      	cmp	r3, #8
 8049a06:	d10e      	bne.n	8049a26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8049a08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8049a0c:	9300      	str	r3, [sp, #0]
 8049a0e:	68fb      	ldr	r3, [r7, #12]
 8049a10:	2200      	movs	r2, #0
 8049a12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8049a16:	6878      	ldr	r0, [r7, #4]
 8049a18:	f000 f82f 	bl	8049a7a <UART_WaitOnFlagUntilTimeout>
 8049a1c:	4603      	mov	r3, r0
 8049a1e:	2b00      	cmp	r3, #0
 8049a20:	d001      	beq.n	8049a26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8049a22:	2303      	movs	r3, #3
 8049a24:	e025      	b.n	8049a72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8049a26:	687b      	ldr	r3, [r7, #4]
 8049a28:	681b      	ldr	r3, [r3, #0]
 8049a2a:	681b      	ldr	r3, [r3, #0]
 8049a2c:	f003 0304 	and.w	r3, r3, #4
 8049a30:	2b04      	cmp	r3, #4
 8049a32:	d10e      	bne.n	8049a52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8049a34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8049a38:	9300      	str	r3, [sp, #0]
 8049a3a:	68fb      	ldr	r3, [r7, #12]
 8049a3c:	2200      	movs	r2, #0
 8049a3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8049a42:	6878      	ldr	r0, [r7, #4]
 8049a44:	f000 f819 	bl	8049a7a <UART_WaitOnFlagUntilTimeout>
 8049a48:	4603      	mov	r3, r0
 8049a4a:	2b00      	cmp	r3, #0
 8049a4c:	d001      	beq.n	8049a52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8049a4e:	2303      	movs	r3, #3
 8049a50:	e00f      	b.n	8049a72 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8049a52:	687b      	ldr	r3, [r7, #4]
 8049a54:	2220      	movs	r2, #32
 8049a56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8049a5a:	687b      	ldr	r3, [r7, #4]
 8049a5c:	2220      	movs	r2, #32
 8049a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8049a62:	687b      	ldr	r3, [r7, #4]
 8049a64:	2200      	movs	r2, #0
 8049a66:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8049a68:	687b      	ldr	r3, [r7, #4]
 8049a6a:	2200      	movs	r2, #0
 8049a6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8049a70:	2300      	movs	r3, #0
}
 8049a72:	4618      	mov	r0, r3
 8049a74:	3710      	adds	r7, #16
 8049a76:	46bd      	mov	sp, r7
 8049a78:	bd80      	pop	{r7, pc}

08049a7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8049a7a:	b580      	push	{r7, lr}
 8049a7c:	b084      	sub	sp, #16
 8049a7e:	af00      	add	r7, sp, #0
 8049a80:	60f8      	str	r0, [r7, #12]
 8049a82:	60b9      	str	r1, [r7, #8]
 8049a84:	603b      	str	r3, [r7, #0]
 8049a86:	4613      	mov	r3, r2
 8049a88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8049a8a:	e062      	b.n	8049b52 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8049a8c:	69bb      	ldr	r3, [r7, #24]
 8049a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8049a92:	d05e      	beq.n	8049b52 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8049a94:	f7f9 f826 	bl	8042ae4 <HAL_GetTick>
 8049a98:	4602      	mov	r2, r0
 8049a9a:	683b      	ldr	r3, [r7, #0]
 8049a9c:	1ad3      	subs	r3, r2, r3
 8049a9e:	69ba      	ldr	r2, [r7, #24]
 8049aa0:	429a      	cmp	r2, r3
 8049aa2:	d302      	bcc.n	8049aaa <UART_WaitOnFlagUntilTimeout+0x30>
 8049aa4:	69bb      	ldr	r3, [r7, #24]
 8049aa6:	2b00      	cmp	r3, #0
 8049aa8:	d11d      	bne.n	8049ae6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8049aaa:	68fb      	ldr	r3, [r7, #12]
 8049aac:	681b      	ldr	r3, [r3, #0]
 8049aae:	681a      	ldr	r2, [r3, #0]
 8049ab0:	68fb      	ldr	r3, [r7, #12]
 8049ab2:	681b      	ldr	r3, [r3, #0]
 8049ab4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8049ab8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8049aba:	68fb      	ldr	r3, [r7, #12]
 8049abc:	681b      	ldr	r3, [r3, #0]
 8049abe:	689a      	ldr	r2, [r3, #8]
 8049ac0:	68fb      	ldr	r3, [r7, #12]
 8049ac2:	681b      	ldr	r3, [r3, #0]
 8049ac4:	f022 0201 	bic.w	r2, r2, #1
 8049ac8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8049aca:	68fb      	ldr	r3, [r7, #12]
 8049acc:	2220      	movs	r2, #32
 8049ace:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8049ad2:	68fb      	ldr	r3, [r7, #12]
 8049ad4:	2220      	movs	r2, #32
 8049ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8049ada:	68fb      	ldr	r3, [r7, #12]
 8049adc:	2200      	movs	r2, #0
 8049ade:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8049ae2:	2303      	movs	r3, #3
 8049ae4:	e045      	b.n	8049b72 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8049ae6:	68fb      	ldr	r3, [r7, #12]
 8049ae8:	681b      	ldr	r3, [r3, #0]
 8049aea:	681b      	ldr	r3, [r3, #0]
 8049aec:	f003 0304 	and.w	r3, r3, #4
 8049af0:	2b00      	cmp	r3, #0
 8049af2:	d02e      	beq.n	8049b52 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8049af4:	68fb      	ldr	r3, [r7, #12]
 8049af6:	681b      	ldr	r3, [r3, #0]
 8049af8:	69db      	ldr	r3, [r3, #28]
 8049afa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8049afe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8049b02:	d126      	bne.n	8049b52 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8049b04:	68fb      	ldr	r3, [r7, #12]
 8049b06:	681b      	ldr	r3, [r3, #0]
 8049b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8049b0c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8049b0e:	68fb      	ldr	r3, [r7, #12]
 8049b10:	681b      	ldr	r3, [r3, #0]
 8049b12:	681a      	ldr	r2, [r3, #0]
 8049b14:	68fb      	ldr	r3, [r7, #12]
 8049b16:	681b      	ldr	r3, [r3, #0]
 8049b18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8049b1c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8049b1e:	68fb      	ldr	r3, [r7, #12]
 8049b20:	681b      	ldr	r3, [r3, #0]
 8049b22:	689a      	ldr	r2, [r3, #8]
 8049b24:	68fb      	ldr	r3, [r7, #12]
 8049b26:	681b      	ldr	r3, [r3, #0]
 8049b28:	f022 0201 	bic.w	r2, r2, #1
 8049b2c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8049b2e:	68fb      	ldr	r3, [r7, #12]
 8049b30:	2220      	movs	r2, #32
 8049b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8049b36:	68fb      	ldr	r3, [r7, #12]
 8049b38:	2220      	movs	r2, #32
 8049b3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8049b3e:	68fb      	ldr	r3, [r7, #12]
 8049b40:	2220      	movs	r2, #32
 8049b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8049b46:	68fb      	ldr	r3, [r7, #12]
 8049b48:	2200      	movs	r2, #0
 8049b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8049b4e:	2303      	movs	r3, #3
 8049b50:	e00f      	b.n	8049b72 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8049b52:	68fb      	ldr	r3, [r7, #12]
 8049b54:	681b      	ldr	r3, [r3, #0]
 8049b56:	69da      	ldr	r2, [r3, #28]
 8049b58:	68bb      	ldr	r3, [r7, #8]
 8049b5a:	4013      	ands	r3, r2
 8049b5c:	68ba      	ldr	r2, [r7, #8]
 8049b5e:	429a      	cmp	r2, r3
 8049b60:	bf0c      	ite	eq
 8049b62:	2301      	moveq	r3, #1
 8049b64:	2300      	movne	r3, #0
 8049b66:	b2db      	uxtb	r3, r3
 8049b68:	461a      	mov	r2, r3
 8049b6a:	79fb      	ldrb	r3, [r7, #7]
 8049b6c:	429a      	cmp	r2, r3
 8049b6e:	d08d      	beq.n	8049a8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8049b70:	2300      	movs	r3, #0
}
 8049b72:	4618      	mov	r0, r3
 8049b74:	3710      	adds	r7, #16
 8049b76:	46bd      	mov	sp, r7
 8049b78:	bd80      	pop	{r7, pc}

08049b7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8049b7a:	b480      	push	{r7}
 8049b7c:	b083      	sub	sp, #12
 8049b7e:	af00      	add	r7, sp, #0
 8049b80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8049b82:	687b      	ldr	r3, [r7, #4]
 8049b84:	681b      	ldr	r3, [r3, #0]
 8049b86:	681a      	ldr	r2, [r3, #0]
 8049b88:	687b      	ldr	r3, [r7, #4]
 8049b8a:	681b      	ldr	r3, [r3, #0]
 8049b8c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8049b90:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8049b92:	687b      	ldr	r3, [r7, #4]
 8049b94:	681b      	ldr	r3, [r3, #0]
 8049b96:	689b      	ldr	r3, [r3, #8]
 8049b98:	687a      	ldr	r2, [r7, #4]
 8049b9a:	6812      	ldr	r2, [r2, #0]
 8049b9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8049ba0:	f023 0301 	bic.w	r3, r3, #1
 8049ba4:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8049ba6:	687b      	ldr	r3, [r7, #4]
 8049ba8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8049baa:	2b01      	cmp	r3, #1
 8049bac:	d107      	bne.n	8049bbe <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8049bae:	687b      	ldr	r3, [r7, #4]
 8049bb0:	681b      	ldr	r3, [r3, #0]
 8049bb2:	681a      	ldr	r2, [r3, #0]
 8049bb4:	687b      	ldr	r3, [r7, #4]
 8049bb6:	681b      	ldr	r3, [r3, #0]
 8049bb8:	f022 0210 	bic.w	r2, r2, #16
 8049bbc:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8049bbe:	687b      	ldr	r3, [r7, #4]
 8049bc0:	2220      	movs	r2, #32
 8049bc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8049bc6:	687b      	ldr	r3, [r7, #4]
 8049bc8:	2200      	movs	r2, #0
 8049bca:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8049bcc:	687b      	ldr	r3, [r7, #4]
 8049bce:	2200      	movs	r2, #0
 8049bd0:	671a      	str	r2, [r3, #112]	; 0x70
}
 8049bd2:	bf00      	nop
 8049bd4:	370c      	adds	r7, #12
 8049bd6:	46bd      	mov	sp, r7
 8049bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049bdc:	4770      	bx	lr

08049bde <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8049bde:	b580      	push	{r7, lr}
 8049be0:	b084      	sub	sp, #16
 8049be2:	af00      	add	r7, sp, #0
 8049be4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8049be6:	687b      	ldr	r3, [r7, #4]
 8049be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8049bea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8049bec:	68fb      	ldr	r3, [r7, #12]
 8049bee:	2200      	movs	r2, #0
 8049bf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8049bf4:	68fb      	ldr	r3, [r7, #12]
 8049bf6:	2200      	movs	r2, #0
 8049bf8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8049bfc:	68f8      	ldr	r0, [r7, #12]
 8049bfe:	f7ff fb65 	bl	80492cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8049c02:	bf00      	nop
 8049c04:	3710      	adds	r7, #16
 8049c06:	46bd      	mov	sp, r7
 8049c08:	bd80      	pop	{r7, pc}

08049c0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8049c0a:	b580      	push	{r7, lr}
 8049c0c:	b082      	sub	sp, #8
 8049c0e:	af00      	add	r7, sp, #0
 8049c10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8049c12:	687b      	ldr	r3, [r7, #4]
 8049c14:	681b      	ldr	r3, [r3, #0]
 8049c16:	681a      	ldr	r2, [r3, #0]
 8049c18:	687b      	ldr	r3, [r7, #4]
 8049c1a:	681b      	ldr	r3, [r3, #0]
 8049c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8049c20:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8049c22:	687b      	ldr	r3, [r7, #4]
 8049c24:	2220      	movs	r2, #32
 8049c26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8049c2a:	687b      	ldr	r3, [r7, #4]
 8049c2c:	2200      	movs	r2, #0
 8049c2e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8049c30:	6878      	ldr	r0, [r7, #4]
 8049c32:	f7ff fb41 	bl	80492b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8049c36:	bf00      	nop
 8049c38:	3708      	adds	r7, #8
 8049c3a:	46bd      	mov	sp, r7
 8049c3c:	bd80      	pop	{r7, pc}

08049c3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8049c3e:	b480      	push	{r7}
 8049c40:	b083      	sub	sp, #12
 8049c42:	af00      	add	r7, sp, #0
 8049c44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8049c46:	bf00      	nop
 8049c48:	370c      	adds	r7, #12
 8049c4a:	46bd      	mov	sp, r7
 8049c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049c50:	4770      	bx	lr

08049c52 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8049c52:	b480      	push	{r7}
 8049c54:	b083      	sub	sp, #12
 8049c56:	af00      	add	r7, sp, #0
 8049c58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8049c5a:	bf00      	nop
 8049c5c:	370c      	adds	r7, #12
 8049c5e:	46bd      	mov	sp, r7
 8049c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049c64:	4770      	bx	lr

08049c66 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8049c66:	b480      	push	{r7}
 8049c68:	b083      	sub	sp, #12
 8049c6a:	af00      	add	r7, sp, #0
 8049c6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8049c6e:	bf00      	nop
 8049c70:	370c      	adds	r7, #12
 8049c72:	46bd      	mov	sp, r7
 8049c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049c78:	4770      	bx	lr

08049c7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8049c7a:	b480      	push	{r7}
 8049c7c:	b085      	sub	sp, #20
 8049c7e:	af00      	add	r7, sp, #0
 8049c80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8049c82:	687b      	ldr	r3, [r7, #4]
 8049c84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8049c88:	2b01      	cmp	r3, #1
 8049c8a:	d101      	bne.n	8049c90 <HAL_UARTEx_DisableFifoMode+0x16>
 8049c8c:	2302      	movs	r3, #2
 8049c8e:	e027      	b.n	8049ce0 <HAL_UARTEx_DisableFifoMode+0x66>
 8049c90:	687b      	ldr	r3, [r7, #4]
 8049c92:	2201      	movs	r2, #1
 8049c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8049c98:	687b      	ldr	r3, [r7, #4]
 8049c9a:	2224      	movs	r2, #36	; 0x24
 8049c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8049ca0:	687b      	ldr	r3, [r7, #4]
 8049ca2:	681b      	ldr	r3, [r3, #0]
 8049ca4:	681b      	ldr	r3, [r3, #0]
 8049ca6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8049ca8:	687b      	ldr	r3, [r7, #4]
 8049caa:	681b      	ldr	r3, [r3, #0]
 8049cac:	681a      	ldr	r2, [r3, #0]
 8049cae:	687b      	ldr	r3, [r7, #4]
 8049cb0:	681b      	ldr	r3, [r3, #0]
 8049cb2:	f022 0201 	bic.w	r2, r2, #1
 8049cb6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8049cb8:	68fb      	ldr	r3, [r7, #12]
 8049cba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8049cbe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8049cc0:	687b      	ldr	r3, [r7, #4]
 8049cc2:	2200      	movs	r2, #0
 8049cc4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8049cc6:	687b      	ldr	r3, [r7, #4]
 8049cc8:	681b      	ldr	r3, [r3, #0]
 8049cca:	68fa      	ldr	r2, [r7, #12]
 8049ccc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8049cce:	687b      	ldr	r3, [r7, #4]
 8049cd0:	2220      	movs	r2, #32
 8049cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8049cd6:	687b      	ldr	r3, [r7, #4]
 8049cd8:	2200      	movs	r2, #0
 8049cda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8049cde:	2300      	movs	r3, #0
}
 8049ce0:	4618      	mov	r0, r3
 8049ce2:	3714      	adds	r7, #20
 8049ce4:	46bd      	mov	sp, r7
 8049ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049cea:	4770      	bx	lr

08049cec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8049cec:	b580      	push	{r7, lr}
 8049cee:	b084      	sub	sp, #16
 8049cf0:	af00      	add	r7, sp, #0
 8049cf2:	6078      	str	r0, [r7, #4]
 8049cf4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8049cf6:	687b      	ldr	r3, [r7, #4]
 8049cf8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8049cfc:	2b01      	cmp	r3, #1
 8049cfe:	d101      	bne.n	8049d04 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8049d00:	2302      	movs	r3, #2
 8049d02:	e02d      	b.n	8049d60 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8049d04:	687b      	ldr	r3, [r7, #4]
 8049d06:	2201      	movs	r2, #1
 8049d08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8049d0c:	687b      	ldr	r3, [r7, #4]
 8049d0e:	2224      	movs	r2, #36	; 0x24
 8049d10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8049d14:	687b      	ldr	r3, [r7, #4]
 8049d16:	681b      	ldr	r3, [r3, #0]
 8049d18:	681b      	ldr	r3, [r3, #0]
 8049d1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8049d1c:	687b      	ldr	r3, [r7, #4]
 8049d1e:	681b      	ldr	r3, [r3, #0]
 8049d20:	681a      	ldr	r2, [r3, #0]
 8049d22:	687b      	ldr	r3, [r7, #4]
 8049d24:	681b      	ldr	r3, [r3, #0]
 8049d26:	f022 0201 	bic.w	r2, r2, #1
 8049d2a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8049d2c:	687b      	ldr	r3, [r7, #4]
 8049d2e:	681b      	ldr	r3, [r3, #0]
 8049d30:	689b      	ldr	r3, [r3, #8]
 8049d32:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8049d36:	687b      	ldr	r3, [r7, #4]
 8049d38:	681b      	ldr	r3, [r3, #0]
 8049d3a:	683a      	ldr	r2, [r7, #0]
 8049d3c:	430a      	orrs	r2, r1
 8049d3e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8049d40:	6878      	ldr	r0, [r7, #4]
 8049d42:	f000 f84f 	bl	8049de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8049d46:	687b      	ldr	r3, [r7, #4]
 8049d48:	681b      	ldr	r3, [r3, #0]
 8049d4a:	68fa      	ldr	r2, [r7, #12]
 8049d4c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8049d4e:	687b      	ldr	r3, [r7, #4]
 8049d50:	2220      	movs	r2, #32
 8049d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8049d56:	687b      	ldr	r3, [r7, #4]
 8049d58:	2200      	movs	r2, #0
 8049d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8049d5e:	2300      	movs	r3, #0
}
 8049d60:	4618      	mov	r0, r3
 8049d62:	3710      	adds	r7, #16
 8049d64:	46bd      	mov	sp, r7
 8049d66:	bd80      	pop	{r7, pc}

08049d68 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8049d68:	b580      	push	{r7, lr}
 8049d6a:	b084      	sub	sp, #16
 8049d6c:	af00      	add	r7, sp, #0
 8049d6e:	6078      	str	r0, [r7, #4]
 8049d70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8049d72:	687b      	ldr	r3, [r7, #4]
 8049d74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8049d78:	2b01      	cmp	r3, #1
 8049d7a:	d101      	bne.n	8049d80 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8049d7c:	2302      	movs	r3, #2
 8049d7e:	e02d      	b.n	8049ddc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8049d80:	687b      	ldr	r3, [r7, #4]
 8049d82:	2201      	movs	r2, #1
 8049d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8049d88:	687b      	ldr	r3, [r7, #4]
 8049d8a:	2224      	movs	r2, #36	; 0x24
 8049d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8049d90:	687b      	ldr	r3, [r7, #4]
 8049d92:	681b      	ldr	r3, [r3, #0]
 8049d94:	681b      	ldr	r3, [r3, #0]
 8049d96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8049d98:	687b      	ldr	r3, [r7, #4]
 8049d9a:	681b      	ldr	r3, [r3, #0]
 8049d9c:	681a      	ldr	r2, [r3, #0]
 8049d9e:	687b      	ldr	r3, [r7, #4]
 8049da0:	681b      	ldr	r3, [r3, #0]
 8049da2:	f022 0201 	bic.w	r2, r2, #1
 8049da6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8049da8:	687b      	ldr	r3, [r7, #4]
 8049daa:	681b      	ldr	r3, [r3, #0]
 8049dac:	689b      	ldr	r3, [r3, #8]
 8049dae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8049db2:	687b      	ldr	r3, [r7, #4]
 8049db4:	681b      	ldr	r3, [r3, #0]
 8049db6:	683a      	ldr	r2, [r7, #0]
 8049db8:	430a      	orrs	r2, r1
 8049dba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8049dbc:	6878      	ldr	r0, [r7, #4]
 8049dbe:	f000 f811 	bl	8049de4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8049dc2:	687b      	ldr	r3, [r7, #4]
 8049dc4:	681b      	ldr	r3, [r3, #0]
 8049dc6:	68fa      	ldr	r2, [r7, #12]
 8049dc8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8049dca:	687b      	ldr	r3, [r7, #4]
 8049dcc:	2220      	movs	r2, #32
 8049dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8049dd2:	687b      	ldr	r3, [r7, #4]
 8049dd4:	2200      	movs	r2, #0
 8049dd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8049dda:	2300      	movs	r3, #0
}
 8049ddc:	4618      	mov	r0, r3
 8049dde:	3710      	adds	r7, #16
 8049de0:	46bd      	mov	sp, r7
 8049de2:	bd80      	pop	{r7, pc}

08049de4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8049de4:	b480      	push	{r7}
 8049de6:	b089      	sub	sp, #36	; 0x24
 8049de8:	af00      	add	r7, sp, #0
 8049dea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8049dec:	4a2f      	ldr	r2, [pc, #188]	; (8049eac <UARTEx_SetNbDataToProcess+0xc8>)
 8049dee:	f107 0314 	add.w	r3, r7, #20
 8049df2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8049df6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8049dfa:	4a2d      	ldr	r2, [pc, #180]	; (8049eb0 <UARTEx_SetNbDataToProcess+0xcc>)
 8049dfc:	f107 030c 	add.w	r3, r7, #12
 8049e00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8049e04:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8049e08:	687b      	ldr	r3, [r7, #4]
 8049e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8049e0c:	2b00      	cmp	r3, #0
 8049e0e:	d108      	bne.n	8049e22 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8049e10:	687b      	ldr	r3, [r7, #4]
 8049e12:	2201      	movs	r2, #1
 8049e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8049e18:	687b      	ldr	r3, [r7, #4]
 8049e1a:	2201      	movs	r2, #1
 8049e1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8049e20:	e03d      	b.n	8049e9e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8049e22:	2308      	movs	r3, #8
 8049e24:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8049e26:	2308      	movs	r3, #8
 8049e28:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8049e2a:	687b      	ldr	r3, [r7, #4]
 8049e2c:	681b      	ldr	r3, [r3, #0]
 8049e2e:	689b      	ldr	r3, [r3, #8]
 8049e30:	0e5b      	lsrs	r3, r3, #25
 8049e32:	b2db      	uxtb	r3, r3
 8049e34:	f003 0307 	and.w	r3, r3, #7
 8049e38:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8049e3a:	687b      	ldr	r3, [r7, #4]
 8049e3c:	681b      	ldr	r3, [r3, #0]
 8049e3e:	689b      	ldr	r3, [r3, #8]
 8049e40:	0f5b      	lsrs	r3, r3, #29
 8049e42:	b2db      	uxtb	r3, r3
 8049e44:	f003 0307 	and.w	r3, r3, #7
 8049e48:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8049e4a:	7fbb      	ldrb	r3, [r7, #30]
 8049e4c:	7f3a      	ldrb	r2, [r7, #28]
 8049e4e:	f107 0120 	add.w	r1, r7, #32
 8049e52:	440a      	add	r2, r1
 8049e54:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8049e58:	fb02 f303 	mul.w	r3, r2, r3
 8049e5c:	7f3a      	ldrb	r2, [r7, #28]
 8049e5e:	f107 0120 	add.w	r1, r7, #32
 8049e62:	440a      	add	r2, r1
 8049e64:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8049e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8049e6c:	b29a      	uxth	r2, r3
 8049e6e:	687b      	ldr	r3, [r7, #4]
 8049e70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8049e74:	7ffb      	ldrb	r3, [r7, #31]
 8049e76:	7f7a      	ldrb	r2, [r7, #29]
 8049e78:	f107 0120 	add.w	r1, r7, #32
 8049e7c:	440a      	add	r2, r1
 8049e7e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8049e82:	fb02 f303 	mul.w	r3, r2, r3
 8049e86:	7f7a      	ldrb	r2, [r7, #29]
 8049e88:	f107 0120 	add.w	r1, r7, #32
 8049e8c:	440a      	add	r2, r1
 8049e8e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8049e92:	fb93 f3f2 	sdiv	r3, r3, r2
 8049e96:	b29a      	uxth	r2, r3
 8049e98:	687b      	ldr	r3, [r7, #4]
 8049e9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8049e9e:	bf00      	nop
 8049ea0:	3724      	adds	r7, #36	; 0x24
 8049ea2:	46bd      	mov	sp, r7
 8049ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8049ea8:	4770      	bx	lr
 8049eaa:	bf00      	nop
 8049eac:	08049f80 	.word	0x08049f80
 8049eb0:	08049f88 	.word	0x08049f88

08049eb4 <__libc_init_array>:
 8049eb4:	b570      	push	{r4, r5, r6, lr}
 8049eb6:	4d0d      	ldr	r5, [pc, #52]	; (8049eec <__libc_init_array+0x38>)
 8049eb8:	2600      	movs	r6, #0
 8049eba:	4c0d      	ldr	r4, [pc, #52]	; (8049ef0 <__libc_init_array+0x3c>)
 8049ebc:	1b64      	subs	r4, r4, r5
 8049ebe:	10a4      	asrs	r4, r4, #2
 8049ec0:	42a6      	cmp	r6, r4
 8049ec2:	d109      	bne.n	8049ed8 <__libc_init_array+0x24>
 8049ec4:	4d0b      	ldr	r5, [pc, #44]	; (8049ef4 <__libc_init_array+0x40>)
 8049ec6:	2600      	movs	r6, #0
 8049ec8:	4c0b      	ldr	r4, [pc, #44]	; (8049ef8 <__libc_init_array+0x44>)
 8049eca:	f000 f82d 	bl	8049f28 <_init>
 8049ece:	1b64      	subs	r4, r4, r5
 8049ed0:	10a4      	asrs	r4, r4, #2
 8049ed2:	42a6      	cmp	r6, r4
 8049ed4:	d105      	bne.n	8049ee2 <__libc_init_array+0x2e>
 8049ed6:	bd70      	pop	{r4, r5, r6, pc}
 8049ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8049edc:	3601      	adds	r6, #1
 8049ede:	4798      	blx	r3
 8049ee0:	e7ee      	b.n	8049ec0 <__libc_init_array+0xc>
 8049ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8049ee6:	3601      	adds	r6, #1
 8049ee8:	4798      	blx	r3
 8049eea:	e7f2      	b.n	8049ed2 <__libc_init_array+0x1e>
 8049eec:	0804a08c 	.word	0x0804a08c
 8049ef0:	0804a08c 	.word	0x0804a08c
 8049ef4:	0804a08c 	.word	0x0804a08c
 8049ef8:	0804a090 	.word	0x0804a090

08049efc <memcpy>:
 8049efc:	440a      	add	r2, r1
 8049efe:	1e43      	subs	r3, r0, #1
 8049f00:	4291      	cmp	r1, r2
 8049f02:	d100      	bne.n	8049f06 <memcpy+0xa>
 8049f04:	4770      	bx	lr
 8049f06:	b510      	push	{r4, lr}
 8049f08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8049f0c:	4291      	cmp	r1, r2
 8049f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8049f12:	d1f9      	bne.n	8049f08 <memcpy+0xc>
 8049f14:	bd10      	pop	{r4, pc}

08049f16 <memset>:
 8049f16:	4402      	add	r2, r0
 8049f18:	4603      	mov	r3, r0
 8049f1a:	4293      	cmp	r3, r2
 8049f1c:	d100      	bne.n	8049f20 <memset+0xa>
 8049f1e:	4770      	bx	lr
 8049f20:	f803 1b01 	strb.w	r1, [r3], #1
 8049f24:	e7f9      	b.n	8049f1a <memset+0x4>
	...

08049f28 <_init>:
 8049f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8049f2a:	bf00      	nop
 8049f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8049f2e:	bc08      	pop	{r3}
 8049f30:	469e      	mov	lr, r3
 8049f32:	4770      	bx	lr

08049f34 <_fini>:
 8049f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8049f36:	bf00      	nop
 8049f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8049f3a:	bc08      	pop	{r3}
 8049f3c:	469e      	mov	lr, r3
 8049f3e:	4770      	bx	lr

08049f40 <__SECURE_RegisterCallback_veneer>:
 8049f40:	b401      	push	{r0}
 8049f42:	4802      	ldr	r0, [pc, #8]	; (8049f4c <__SECURE_RegisterCallback_veneer+0xc>)
 8049f44:	4684      	mov	ip, r0
 8049f46:	bc01      	pop	{r0}
 8049f48:	4760      	bx	ip
 8049f4a:	bf00      	nop
 8049f4c:	0c03e011 	.word	0x0c03e011

08049f50 <__SECURE_LEDToggle_RED_veneer>:
 8049f50:	b401      	push	{r0}
 8049f52:	4802      	ldr	r0, [pc, #8]	; (8049f5c <__SECURE_LEDToggle_RED_veneer+0xc>)
 8049f54:	4684      	mov	ip, r0
 8049f56:	bc01      	pop	{r0}
 8049f58:	4760      	bx	ip
 8049f5a:	bf00      	nop
 8049f5c:	0c03e001 	.word	0x0c03e001

08049f60 <__SECURE_SystemCoreClockUpdate_veneer>:
 8049f60:	b401      	push	{r0}
 8049f62:	4802      	ldr	r0, [pc, #8]	; (8049f6c <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 8049f64:	4684      	mov	ip, r0
 8049f66:	bc01      	pop	{r0}
 8049f68:	4760      	bx	ip
 8049f6a:	bf00      	nop
 8049f6c:	0c03e009 	.word	0x0c03e009

08049f70 <__SECURE_LEDToggle_YELLOW_veneer>:
 8049f70:	b401      	push	{r0}
 8049f72:	4802      	ldr	r0, [pc, #8]	; (8049f7c <__SECURE_LEDToggle_YELLOW_veneer+0xc>)
 8049f74:	4684      	mov	ip, r0
 8049f76:	bc01      	pop	{r0}
 8049f78:	4760      	bx	ip
 8049f7a:	bf00      	nop
 8049f7c:	0c03e019 	.word	0x0c03e019
